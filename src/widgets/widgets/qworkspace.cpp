begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qworkspace.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WORKSPACE
end_ifndef
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qhash.h"
end_include
begin_include
include|#
directive|include
file|"qicon.h"
end_include
begin_include
include|#
directive|include
file|"qimage.h"
end_include
begin_include
include|#
directive|include
file|"qlabel.h"
end_include
begin_include
include|#
directive|include
file|"qlayout.h"
end_include
begin_include
include|#
directive|include
file|"qmenubar.h"
end_include
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qpointer.h"
end_include
begin_include
include|#
directive|include
file|"qscrollbar.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"qelapsedtimer.h"
end_include
begin_include
include|#
directive|include
file|"qtooltip.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidgetresizehandler_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qlayoutengine_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class_decl
class_decl|class
name|QWorkspaceTitleBarPrivate
class_decl|;
end_class_decl
begin_comment
comment|/************************************************************** * QMDIControl * * Used for displaying MDI controls in a maximized MDI window * */
end_comment
begin_class
DECL|class|QMDIControl
class|class
name|QMDIControl
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
signals|signals:
name|void
name|_q_minimize
parameter_list|()
function_decl|;
name|void
name|_q_restore
parameter_list|()
function_decl|;
name|void
name|_q_close
parameter_list|()
function_decl|;
public|public:
name|QMDIControl
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
constructor_decl|;
private|private:
name|QSize
name|sizeHint
parameter_list|()
specifier|const
function_decl|;
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|initStyleOption
parameter_list|(
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|)
specifier|const
function_decl|;
DECL|member|activeControl
name|QStyle
operator|::
name|SubControl
name|activeControl
decl_stmt|;
comment|//control locked by pressing and holding the mouse
DECL|member|hoverControl
name|QStyle
operator|::
name|SubControl
name|hoverControl
decl_stmt|;
comment|//previously active hover control, used for tracking repaints
block|}
class|;
end_class
begin_function
DECL|function|event
name|bool
name|QMDIControl
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ToolTip
condition|)
block|{
name|QStyleOptionComplex
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
name|QHelpEvent
modifier|*
name|helpEvent
init|=
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|QStyle
operator|::
name|SubControl
name|ctrl
init|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_MdiControls
argument_list|,
operator|&
name|opt
argument_list|,
name|helpEvent
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctrl
operator|==
name|QStyle
operator|::
name|SC_MdiCloseButton
condition|)
name|QToolTip
operator|::
name|showText
argument_list|(
name|helpEvent
operator|->
name|globalPos
argument_list|()
argument_list|,
name|QWorkspace
operator|::
name|tr
argument_list|(
literal|"Close"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ctrl
operator|==
name|QStyle
operator|::
name|SC_MdiMinButton
condition|)
name|QToolTip
operator|::
name|showText
argument_list|(
name|helpEvent
operator|->
name|globalPos
argument_list|()
argument_list|,
name|QWorkspace
operator|::
name|tr
argument_list|(
literal|"Minimize"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|ctrl
operator|==
name|QStyle
operator|::
name|SC_MdiNormalButton
condition|)
name|QToolTip
operator|::
name|showText
argument_list|(
name|helpEvent
operator|->
name|globalPos
argument_list|()
argument_list|,
name|QWorkspace
operator|::
name|tr
argument_list|(
literal|"Restore Down"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
else|else
name|QToolTip
operator|::
name|hideText
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TOOLTIP
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|initStyleOption
name|void
name|QMDIControl
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|)
specifier|const
block|{
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|option
operator|->
name|subControls
operator|=
name|QStyle
operator|::
name|SC_All
expr_stmt|;
name|option
operator|->
name|activeSubControls
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QMDIControl
name|QMDIControl
operator|::
name|QMDIControl
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|widget
argument_list|)
member_init_list|,
name|activeControl
argument_list|(
name|QStyle
operator|::
name|SC_None
argument_list|)
member_init_list|,
name|hoverControl
argument_list|(
name|QStyle
operator|::
name|SC_None
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_maxcontrols"
argument_list|)
argument_list|)
expr_stmt|;
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
expr_stmt|;
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|sizeHint
name|QSize
name|QMDIControl
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|ensurePolished
argument_list|()
expr_stmt|;
name|QStyleOptionComplex
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QSize
name|size
argument_list|(
literal|48
argument_list|,
literal|16
argument_list|)
decl_stmt|;
return|return
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_MdiControls
argument_list|,
operator|&
name|opt
argument_list|,
name|size
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QMDIControl
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|QStyleOptionComplex
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QStyle
operator|::
name|SubControl
name|ctrl
init|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_MdiControls
argument_list|,
operator|&
name|opt
argument_list|,
name|event
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|activeControl
operator|=
name|ctrl
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QMDIControl
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|QStyleOptionTitleBar
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QStyle
operator|::
name|SubControl
name|under_mouse
init|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_MdiControls
argument_list|,
operator|&
name|opt
argument_list|,
name|event
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|under_mouse
operator|==
name|activeControl
condition|)
block|{
switch|switch
condition|(
name|activeControl
condition|)
block|{
case|case
name|QStyle
operator|::
name|SC_MdiCloseButton
case|:
emit|emit
name|_q_close
argument_list|()
emit|;
break|break;
case|case
name|QStyle
operator|::
name|SC_MdiNormalButton
case|:
emit|emit
name|_q_restore
argument_list|()
emit|;
break|break;
case|case
name|QStyle
operator|::
name|SC_MdiMinButton
case|:
emit|emit
name|_q_minimize
argument_list|()
emit|;
break|break;
default|default:
break|break;
block|}
block|}
name|activeControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leaveEvent
name|void
name|QMDIControl
operator|::
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
comment|/*event*/
parameter_list|)
block|{
name|hoverControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|QMDIControl
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QStyleOptionTitleBar
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QStyle
operator|::
name|SubControl
name|under_mouse
init|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_MdiControls
argument_list|,
operator|&
name|opt
argument_list|,
name|event
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|//test if hover state changes
if|if
condition|(
name|hoverControl
operator|!=
name|under_mouse
condition|)
block|{
name|hoverControl
operator|=
name|under_mouse
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|QMDIControl
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QStyleOptionComplex
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
if|if
condition|(
name|activeControl
operator|==
name|hoverControl
condition|)
block|{
name|opt
operator|.
name|activeSubControls
operator|=
name|activeControl
expr_stmt|;
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hoverControl
operator|!=
name|QStyle
operator|::
name|SC_None
operator|&&
operator|(
name|activeControl
operator|==
name|QStyle
operator|::
name|SC_None
operator|)
condition|)
block|{
name|opt
operator|.
name|activeSubControls
operator|=
name|hoverControl
expr_stmt|;
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
block|}
name|style
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_MdiControls
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QWorkspaceTitleBar
class|class
name|QWorkspaceTitleBar
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
name|Q_DECLARE_PRIVATE
argument_list|(
name|QWorkspaceTitleBar
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|autoRaise
name|READ
name|autoRaise
name|WRITE
name|setAutoRaise
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|movable
name|READ
name|isMovable
name|WRITE
name|setMovable
argument_list|)
decl|public
range|:
name|QWorkspaceTitleBar
argument_list|(
argument|QWidget *w
argument_list|,
argument|QWidget *parent
argument_list|,
argument|Qt::WindowFlags f =
literal|0
argument_list|)
decl_stmt|;
name|~
name|QWorkspaceTitleBar
parameter_list|()
destructor_decl|;
name|bool
name|isActive
parameter_list|()
specifier|const
function_decl|;
name|bool
name|usesActiveColor
parameter_list|()
specifier|const
function_decl|;
name|bool
name|isMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|setMovable
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|bool
name|autoRaise
parameter_list|()
specifier|const
function_decl|;
name|void
name|setAutoRaise
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|QWidget
modifier|*
name|window
parameter_list|()
specifier|const
function_decl|;
name|bool
name|isTool
parameter_list|()
specifier|const
function_decl|;
name|QSize
name|sizeHint
parameter_list|()
specifier|const
function_decl|;
name|void
name|initStyleOption
parameter_list|(
name|QStyleOptionTitleBar
modifier|*
name|option
parameter_list|)
specifier|const
function_decl|;
public|public
name|slots
public|:
name|void
name|setActive
parameter_list|(
name|bool
parameter_list|)
function_decl|;
signals|signals:
name|void
name|doActivate
parameter_list|()
function_decl|;
name|void
name|doNormal
parameter_list|()
function_decl|;
name|void
name|doClose
parameter_list|()
function_decl|;
name|void
name|doMaximize
parameter_list|()
function_decl|;
name|void
name|doMinimize
parameter_list|()
function_decl|;
name|void
name|doShade
parameter_list|()
function_decl|;
name|void
name|showOperationMenu
parameter_list|()
function_decl|;
name|void
name|popupOperationMenu
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|)
function_decl|;
name|void
name|doubleClicked
parameter_list|()
function_decl|;
protected|protected:
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
name|void
name|contextMenuEvent
parameter_list|(
name|QContextMenuEvent
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|enterEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
function_decl|;
name|void
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
function_decl|;
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|p
parameter_list|)
function_decl|;
private|private:
name|Q_DISABLE_COPY
argument_list|(
argument|QWorkspaceTitleBar
argument_list|)
block|}
class|;
end_class
begin_class
DECL|class|QWorkspaceTitleBarPrivate
class|class
name|QWorkspaceTitleBarPrivate
super|:
specifier|public
name|QWidgetPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QWorkspaceTitleBar
parameter_list|)
specifier|public
private|:
DECL|function|QWorkspaceTitleBarPrivate
name|QWorkspaceTitleBarPrivate
parameter_list|()
member_init_list|:
name|lastControl
argument_list|(
name|QStyle
operator|::
name|SC_None
argument_list|)
member_init_list|,
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
name|toolTip
argument_list|(
literal|0
argument_list|)
member_init_list|,
endif|#
directive|endif
name|act
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|window
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|movable
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|pressed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|autoraise
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|moving
argument_list|(
literal|0
argument_list|)
block|{     }
DECL|member|flags
name|Qt
operator|::
name|WindowFlags
name|flags
decl_stmt|;
DECL|member|buttonDown
name|QStyle
operator|::
name|SubControl
name|buttonDown
decl_stmt|;
DECL|member|lastControl
name|QStyle
operator|::
name|SubControl
name|lastControl
decl_stmt|;
DECL|member|moveOffset
name|QPoint
name|moveOffset
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
DECL|member|toolTip
name|QToolTip
modifier|*
name|toolTip
decl_stmt|;
endif|#
directive|endif
name|bool
name|act
range|:
literal|1
decl_stmt|;
DECL|member|window
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|window
decl_stmt|;
name|bool
name|movable
range|:
literal|1
decl_stmt|;
name|bool
name|pressed
range|:
literal|1
decl_stmt|;
name|bool
name|autoraise
range|:
literal|1
decl_stmt|;
name|bool
name|moving
range|:
literal|1
decl_stmt|;
name|int
name|titleBarState
parameter_list|()
specifier|const
function_decl|;
name|void
name|readColors
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|titleBarState
specifier|inline
name|int
name|QWorkspaceTitleBarPrivate
operator|::
name|titleBarState
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
name|uint
name|state
init|=
name|window
condition|?
name|window
operator|->
name|windowState
argument_list|()
else|:
cast|static_cast
argument_list|<
name|Qt
operator|::
name|WindowStates
argument_list|>
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
decl_stmt|;
name|state
operator||=
name|uint
argument_list|(
operator|(
name|act
operator|&&
name|q
operator|->
name|isActiveWindow
argument_list|()
operator|)
condition|?
name|QStyle
operator|::
name|State_Active
else|:
name|QStyle
operator|::
name|State_None
argument_list|)
expr_stmt|;
return|return
operator|(
name|int
operator|)
name|state
return|;
block|}
end_function
begin_function
DECL|function|initStyleOption
name|void
name|QWorkspaceTitleBar
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionTitleBar
modifier|*
name|option
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|//################
if|if
condition|(
name|d
operator|->
name|window
operator|&&
operator|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|)
condition|)
block|{
name|option
operator|->
name|text
operator|=
name|d
operator|->
name|window
operator|->
name|windowTitle
argument_list|()
expr_stmt|;
name|QIcon
name|icon
init|=
name|d
operator|->
name|window
operator|->
name|windowIcon
argument_list|()
decl_stmt|;
name|QSize
name|s
init|=
name|icon
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
argument_list|)
decl_stmt|;
name|option
operator|->
name|icon
operator|=
name|icon
operator|.
name|pixmap
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|option
operator|->
name|subControls
operator|=
name|QStyle
operator|::
name|SC_All
expr_stmt|;
name|option
operator|->
name|activeSubControls
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|option
operator|->
name|titleBarState
operator|=
name|d
operator|->
name|titleBarState
argument_list|()
expr_stmt|;
name|option
operator|->
name|titleBarFlags
operator|=
name|d
operator|->
name|flags
expr_stmt|;
name|option
operator|->
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QWorkspaceTitleBar
name|QWorkspaceTitleBar
operator|::
name|QWorkspaceTitleBar
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QWorkspaceTitleBarPrivate
argument_list|,
name|parent
argument_list|,
name|Qt
operator|::
name|FramelessWindowHint
argument_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|==
literal|0
operator|&&
name|w
condition|)
name|f
operator|=
name|w
operator|->
name|windowFlags
argument_list|()
expr_stmt|;
name|d
operator|->
name|flags
operator|=
name|f
expr_stmt|;
name|d
operator|->
name|window
operator|=
name|w
expr_stmt|;
name|d
operator|->
name|buttonDown
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|d
operator|->
name|act
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|w
condition|)
block|{
if|if
condition|(
name|w
operator|->
name|maximumSize
argument_list|()
operator|!=
name|QSize
argument_list|(
name|QWIDGETSIZE_MAX
argument_list|,
name|QWIDGETSIZE_MAX
argument_list|)
condition|)
name|d
operator|->
name|flags
operator|&=
operator|~
name|Qt
operator|::
name|WindowMaximizeButtonHint
expr_stmt|;
name|setWindowTitle
argument_list|(
name|w
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|readColors
argument_list|()
expr_stmt|;
name|setSizePolicy
argument_list|(
name|QSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
argument_list|)
expr_stmt|;
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setAutoRaise
argument_list|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_AutoRaise
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWorkspaceTitleBar
name|QWorkspaceTitleBar
operator|::
name|~
name|QWorkspaceTitleBar
parameter_list|()
block|{ }
end_destructor
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WIN
end_ifdef
begin_function
DECL|function|colorref2qrgb
specifier|static
specifier|inline
name|QRgb
name|colorref2qrgb
parameter_list|(
name|COLORREF
name|col
parameter_list|)
block|{
return|return
name|qRgb
argument_list|(
name|GetRValue
argument_list|(
name|col
argument_list|)
argument_list|,
name|GetGValue
argument_list|(
name|col
argument_list|)
argument_list|,
name|GetBValue
argument_list|(
name|col
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|readColors
name|void
name|QWorkspaceTitleBarPrivate
operator|::
name|readColors
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
name|QPalette
name|pal
init|=
name|q
operator|->
name|palette
argument_list|()
decl_stmt|;
name|bool
name|colorsInitialized
init|=
literal|false
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WIN
comment|// ask system properties on windows
ifndef|#
directive|ifndef
name|SPI_GETGRADIENTCAPTIONS
DECL|macro|SPI_GETGRADIENTCAPTIONS
define|#
directive|define
name|SPI_GETGRADIENTCAPTIONS
value|0x1008
endif|#
directive|endif
ifndef|#
directive|ifndef
name|COLOR_GRADIENTACTIVECAPTION
DECL|macro|COLOR_GRADIENTACTIVECAPTION
define|#
directive|define
name|COLOR_GRADIENTACTIVECAPTION
value|27
endif|#
directive|endif
ifndef|#
directive|ifndef
name|COLOR_GRADIENTINACTIVECAPTION
DECL|macro|COLOR_GRADIENTINACTIVECAPTION
define|#
directive|define
name|COLOR_GRADIENTINACTIVECAPTION
value|28
endif|#
directive|endif
if|if
condition|(
name|QApplication
operator|::
name|desktopSettingsAware
argument_list|()
condition|)
block|{
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_ACTIVECAPTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_INACTIVECAPTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_CAPTIONTEXT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_INACTIVECAPTIONTEXT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|colorsInitialized
operator|=
literal|true
expr_stmt|;
name|BOOL
name|gradient
init|=
literal|false
decl_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_GETGRADIENTCAPTIONS
argument_list|,
literal|0
argument_list|,
operator|&
name|gradient
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|gradient
condition|)
block|{
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_GRADIENTACTIVECAPTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_GRADIENTINACTIVECAPTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// Q_WS_WIN
if|if
condition|(
operator|!
name|colorsInitialized
condition|)
block|{
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|pal
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|q
operator|->
name|setActive
argument_list|(
name|act
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QWorkspaceTitleBar
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|act
condition|)
emit|emit
name|doActivate
argument_list|()
emit|;
if|if
condition|(
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
condition|)
block|{
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|&&
operator|!
name|rect
argument_list|()
operator|.
name|adjusted
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
operator|-
literal|5
argument_list|,
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
comment|// propagate border events to the QWidgetResizeHandler
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|pressed
operator|=
literal|true
expr_stmt|;
name|QStyleOptionTitleBar
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QStyle
operator|::
name|SubControl
name|ctrl
init|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|opt
argument_list|,
name|e
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ctrl
condition|)
block|{
case|case
name|QStyle
operator|::
name|SC_TitleBarSysMenu
case|:
if|if
condition|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
block|{
name|d
operator|->
name|buttonDown
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
specifier|static
name|QElapsedTimer
modifier|*
name|t
init|=
literal|0
decl_stmt|;
specifier|static
name|QWorkspaceTitleBar
modifier|*
name|tc
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|t
condition|)
name|t
operator|=
operator|new
name|QElapsedTimer
expr_stmt|;
if|if
condition|(
name|tc
operator|!=
name|this
operator|||
name|t
operator|->
name|elapsed
argument_list|()
operator|>
name|QApplication
operator|::
name|doubleClickInterval
argument_list|()
condition|)
block|{
emit|emit
name|showOperationMenu
argument_list|()
emit|;
name|t
operator|->
name|start
argument_list|()
expr_stmt|;
name|tc
operator|=
name|this
expr_stmt|;
block|}
else|else
block|{
name|tc
operator|=
literal|0
expr_stmt|;
emit|emit
name|doClose
argument_list|()
emit|;
return|return;
block|}
block|}
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarShadeButton
case|:
case|case
name|QStyle
operator|::
name|SC_TitleBarUnshadeButton
case|:
if|if
condition|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
condition|)
name|d
operator|->
name|buttonDown
operator|=
name|ctrl
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarNormalButton
case|:
name|d
operator|->
name|buttonDown
operator|=
name|ctrl
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarMinButton
case|:
if|if
condition|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
name|d
operator|->
name|buttonDown
operator|=
name|ctrl
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarMaxButton
case|:
if|if
condition|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
name|d
operator|->
name|buttonDown
operator|=
name|ctrl
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarCloseButton
case|:
if|if
condition|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|d
operator|->
name|buttonDown
operator|=
name|ctrl
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarLabel
case|:
name|d
operator|->
name|buttonDown
operator|=
name|ctrl
expr_stmt|;
name|d
operator|->
name|moveOffset
operator|=
name|mapToParent
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|update
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|pressed
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_function
DECL|function|contextMenuEvent
name|void
name|QWorkspaceTitleBar
operator|::
name|contextMenuEvent
parameter_list|(
name|QContextMenuEvent
modifier|*
name|e
parameter_list|)
block|{
name|QStyleOptionTitleBar
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QStyle
operator|::
name|SubControl
name|ctrl
init|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|opt
argument_list|,
name|e
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctrl
operator|==
name|QStyle
operator|::
name|SC_TitleBarLabel
operator|||
name|ctrl
operator|==
name|QStyle
operator|::
name|SC_TitleBarSysMenu
condition|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
emit|emit
name|popupOperationMenu
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
emit|;
block|}
else|else
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONTEXTMENU
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QWorkspaceTitleBar
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|window
condition|)
block|{
comment|// could have been deleted as part of a double click event on the sysmenu
return|return;
block|}
if|if
condition|(
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|&&
name|d
operator|->
name|pressed
condition|)
block|{
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|&&
operator|!
name|rect
argument_list|()
operator|.
name|adjusted
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
operator|-
literal|5
argument_list|,
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
comment|// propagate border events to the QWidgetResizeHandler
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
name|d
operator|->
name|buttonDown
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|d
operator|->
name|pressed
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|QStyleOptionTitleBar
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QStyle
operator|::
name|SubControl
name|ctrl
init|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|opt
argument_list|,
name|e
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|pressed
condition|)
block|{
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|pressed
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|moving
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|ctrl
operator|==
name|d
operator|->
name|buttonDown
condition|)
block|{
name|d
operator|->
name|buttonDown
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
switch|switch
condition|(
name|ctrl
condition|)
block|{
case|case
name|QStyle
operator|::
name|SC_TitleBarShadeButton
case|:
case|case
name|QStyle
operator|::
name|SC_TitleBarUnshadeButton
case|:
if|if
condition|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
condition|)
emit|emit
name|doShade
argument_list|()
emit|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarNormalButton
case|:
if|if
condition|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowMinMaxButtonsHint
condition|)
emit|emit
name|doNormal
argument_list|()
emit|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarMinButton
case|:
if|if
condition|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|window
operator|&&
name|d
operator|->
name|window
operator|->
name|isMinimized
argument_list|()
condition|)
emit|emit
name|doNormal
argument_list|()
emit|;
else|else
emit|emit
name|doMinimize
argument_list|()
emit|;
block|}
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarMaxButton
case|:
if|if
condition|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|window
operator|&&
name|d
operator|->
name|window
operator|->
name|isMaximized
argument_list|()
condition|)
emit|emit
name|doNormal
argument_list|()
emit|;
else|else
emit|emit
name|doMaximize
argument_list|()
emit|;
block|}
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarCloseButton
case|:
if|if
condition|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
block|{
name|d
operator|->
name|buttonDown
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
emit|emit
name|doClose
argument_list|()
emit|;
return|return;
block|}
break|break;
default|default:
break|break;
block|}
block|}
block|}
else|else
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|QWorkspaceTitleBar
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|e
operator|->
name|buttons
argument_list|()
operator|&
name|Qt
operator|::
name|LeftButton
operator|)
operator|&&
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|&&
operator|!
name|rect
argument_list|()
operator|.
name|adjusted
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
operator|-
literal|5
argument_list|,
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
operator|&&
operator|!
name|d
operator|->
name|pressed
condition|)
block|{
comment|// propagate border events to the QWidgetResizeHandler
return|return;
block|}
name|QStyleOptionTitleBar
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QStyle
operator|::
name|SubControl
name|under_mouse
init|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|opt
argument_list|,
name|e
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|under_mouse
operator|!=
name|d
operator|->
name|lastControl
condition|)
block|{
name|d
operator|->
name|lastControl
operator|=
name|under_mouse
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|d
operator|->
name|buttonDown
condition|)
block|{
case|case
name|QStyle
operator|::
name|SC_None
case|:
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarSysMenu
case|:
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarLabel
case|:
if|if
condition|(
name|d
operator|->
name|buttonDown
operator|==
name|QStyle
operator|::
name|SC_TitleBarLabel
operator|&&
name|d
operator|->
name|movable
operator|&&
name|d
operator|->
name|pressed
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|moving
operator|||
operator|(
name|d
operator|->
name|moveOffset
operator|-
name|mapToParent
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
operator|)
operator|.
name|manhattanLength
argument_list|()
operator|>=
literal|4
condition|)
block|{
name|d
operator|->
name|moving
operator|=
literal|true
expr_stmt|;
name|QPoint
name|p
init|=
name|mapFromGlobal
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|parent
init|=
name|d
operator|->
name|window
condition|?
name|d
operator|->
name|window
operator|->
name|parentWidget
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|parent
operator|&&
name|parent
operator|->
name|inherits
argument_list|(
literal|"QWorkspaceChild"
argument_list|)
condition|)
block|{
name|QWidget
modifier|*
name|workspace
init|=
name|parent
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
name|p
operator|=
name|workspace
operator|->
name|mapFromGlobal
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|workspace
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|x
argument_list|()
operator|<
literal|0
condition|)
name|p
operator|.
name|rx
argument_list|()
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|y
argument_list|()
operator|<
literal|0
condition|)
name|p
operator|.
name|ry
argument_list|()
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|x
argument_list|()
operator|>
name|workspace
operator|->
name|width
argument_list|()
condition|)
name|p
operator|.
name|rx
argument_list|()
operator|=
name|workspace
operator|->
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|y
argument_list|()
operator|>
name|workspace
operator|->
name|height
argument_list|()
condition|)
name|p
operator|.
name|ry
argument_list|()
operator|=
name|workspace
operator|->
name|height
argument_list|()
expr_stmt|;
block|}
block|}
name|QPoint
name|pp
init|=
name|p
operator|-
name|d
operator|->
name|moveOffset
decl_stmt|;
if|if
condition|(
operator|!
name|parentWidget
argument_list|()
operator|->
name|isMaximized
argument_list|()
condition|)
name|parentWidget
argument_list|()
operator|->
name|move
argument_list|(
name|pp
argument_list|)
expr_stmt|;
block|}
block|}
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|isTool
name|bool
name|QWorkspaceTitleBar
operator|::
name|isTool
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
return|return
operator|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
operator|)
operator|==
name|Qt
operator|::
name|Tool
return|;
block|}
end_function
begin_comment
comment|// from qwidget.cpp
end_comment
begin_function_decl
specifier|extern
name|QString
name|qt_setWindowTitle_helperHelper
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|paintEvent
name|void
name|QWorkspaceTitleBar
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
name|QStyleOptionTitleBar
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_TitleBarLabel
expr_stmt|;
name|opt
operator|.
name|activeSubControls
operator|=
name|d
operator|->
name|buttonDown
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|window
operator|&&
operator|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowTitleHint
operator|)
condition|)
block|{
name|QString
name|title
init|=
name|qt_setWindowTitle_helperHelper
argument_list|(
name|opt
operator|.
name|text
argument_list|,
name|d
operator|->
name|window
argument_list|)
decl_stmt|;
name|int
name|maxw
init|=
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_TitleBarLabel
argument_list|,
name|this
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
name|opt
operator|.
name|text
operator|=
name|fontMetrics
argument_list|()
operator|.
name|elidedText
argument_list|(
name|title
argument_list|,
name|Qt
operator|::
name|ElideRight
argument_list|,
name|maxw
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
block|{
name|opt
operator|.
name|subControls
operator||=
name|QStyle
operator|::
name|SC_TitleBarSysMenu
operator||
name|QStyle
operator|::
name|SC_TitleBarCloseButton
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|window
operator|&&
operator|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
operator|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|window
operator|->
name|isMinimized
argument_list|()
condition|)
name|opt
operator|.
name|subControls
operator||=
name|QStyle
operator|::
name|SC_TitleBarUnshadeButton
expr_stmt|;
else|else
name|opt
operator|.
name|subControls
operator||=
name|QStyle
operator|::
name|SC_TitleBarShadeButton
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|window
operator|&&
operator|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|window
operator|&&
name|d
operator|->
name|window
operator|->
name|isMinimized
argument_list|()
condition|)
name|opt
operator|.
name|subControls
operator||=
name|QStyle
operator|::
name|SC_TitleBarNormalButton
expr_stmt|;
else|else
name|opt
operator|.
name|subControls
operator||=
name|QStyle
operator|::
name|SC_TitleBarMinButton
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|window
operator|&&
operator|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
operator|&&
operator|!
name|d
operator|->
name|window
operator|->
name|isMaximized
argument_list|()
condition|)
name|opt
operator|.
name|subControls
operator||=
name|QStyle
operator|::
name|SC_TitleBarMaxButton
expr_stmt|;
block|}
name|QStyle
operator|::
name|SubControl
name|under_mouse
init|=
name|QStyle
operator|::
name|SC_None
decl_stmt|;
name|under_mouse
operator|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|opt
argument_list|,
name|mapFromGlobal
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|d
operator|->
name|buttonDown
operator|==
name|under_mouse
operator|)
operator|&&
name|d
operator|->
name|pressed
condition|)
block|{
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|autoRaise
argument_list|()
operator|&&
name|under_mouse
operator|!=
name|QStyle
operator|::
name|SC_None
operator|&&
operator|!
name|d
operator|->
name|pressed
condition|)
block|{
name|opt
operator|.
name|activeSubControls
operator|=
name|under_mouse
expr_stmt|;
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
block|}
name|opt
operator|.
name|palette
operator|.
name|setCurrentColorGroup
argument_list|(
name|usesActiveColor
argument_list|()
condition|?
name|QPalette
operator|::
name|Active
else|:
name|QPalette
operator|::
name|Inactive
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|style
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseDoubleClickEvent
name|void
name|QWorkspaceTitleBar
operator|::
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|QStyleOptionTitleBar
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|opt
argument_list|,
name|e
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
condition|)
block|{
case|case
name|QStyle
operator|::
name|SC_TitleBarLabel
case|:
emit|emit
name|doubleClicked
argument_list|()
emit|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarSysMenu
case|:
if|if
condition|(
name|d
operator|->
name|flags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
emit|emit
name|doClose
argument_list|()
emit|;
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|leaveEvent
name|void
name|QWorkspaceTitleBar
operator|::
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|lastControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
if|if
condition|(
name|autoRaise
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|pressed
condition|)
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|enterEvent
name|void
name|QWorkspaceTitleBar
operator|::
name|enterEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|autoRaise
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|pressed
condition|)
name|update
argument_list|()
expr_stmt|;
name|QEvent
name|e
argument_list|(
name|QEvent
operator|::
name|Leave
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|parentWidget
argument_list|()
argument_list|,
operator|&
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setActive
name|void
name|QWorkspaceTitleBar
operator|::
name|setActive
parameter_list|(
name|bool
name|active
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|act
operator|==
name|active
condition|)
return|return ;
name|d
operator|->
name|act
operator|=
name|active
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isActive
name|bool
name|QWorkspaceTitleBar
operator|::
name|isActive
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|act
return|;
block|}
end_function
begin_function
DECL|function|usesActiveColor
name|bool
name|QWorkspaceTitleBar
operator|::
name|usesActiveColor
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|isActive
argument_list|()
operator|&&
name|isActiveWindow
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|window
argument_list|()
operator|&&
name|QWidget
operator|::
name|window
argument_list|()
operator|->
name|isActiveWindow
argument_list|()
operator|)
return|;
block|}
end_function
begin_function
DECL|function|window
name|QWidget
modifier|*
name|QWorkspaceTitleBar
operator|::
name|window
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|window
return|;
block|}
end_function
begin_function
DECL|function|event
name|bool
name|QWorkspaceTitleBar
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ApplicationPaletteChange
condition|)
block|{
name|d
operator|->
name|readColors
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|WindowActivate
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|WindowDeactivate
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|act
condition|)
name|update
argument_list|()
expr_stmt|;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setMovable
name|void
name|QWorkspaceTitleBar
operator|::
name|setMovable
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|movable
operator|=
name|b
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isMovable
name|bool
name|QWorkspaceTitleBar
operator|::
name|isMovable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|movable
return|;
block|}
end_function
begin_function
DECL|function|setAutoRaise
name|void
name|QWorkspaceTitleBar
operator|::
name|setAutoRaise
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|autoraise
operator|=
name|b
expr_stmt|;
block|}
end_function
begin_function
DECL|function|autoRaise
name|bool
name|QWorkspaceTitleBar
operator|::
name|autoRaise
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWorkspaceTitleBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|autoraise
return|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSize
name|QWorkspaceTitleBar
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|ensurePolished
argument_list|()
expr_stmt|;
name|QStyleOptionTitleBar
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QRect
name|menur
init|=
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_TitleBarSysMenu
argument_list|,
name|this
argument_list|)
decl_stmt|;
return|return
name|QSize
argument_list|(
name|menur
operator|.
name|width
argument_list|()
argument_list|,
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TitleBarHeight
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QWorkspace     \obsolete     \brief The QWorkspace widget provides a workspace window that can be     used in an MDI application.      \inmodule QtWidgets      This class is deprecated. Use QMdiArea instead.      Multiple Document Interface (MDI) applications are typically     composed of a main window containing a menu bar, a toolbar, and     a central QWorkspace widget. The workspace itself is used to display     a number of child windows, each of which is a widget.      The workspace itself is an ordinary Qt widget. It has a standard     constructor that takes a parent widget.     Workspaces can be placed in any layout, but are typically given     as the central widget in a QMainWindow:      \snippet doc/src/snippets/code/src_gui_widgets_qworkspace.cpp 0      Child windows (MDI windows) are standard Qt widgets that are     inserted into the workspace with addWindow(). As with top-level     widgets, you can call functions such as show(), hide(),     showMaximized(), and setWindowTitle() on a child window to change     its appearance within the workspace. You can also provide widget     flags to determine the layout of the decoration or the behavior of     the widget itself.      To change or retrieve the geometry of a child window, you must     operate on its parentWidget(). The parentWidget() provides     access to the decorated frame that contains the child window     widget. When a child window is maximised, its decorated frame     is hidden. If the top-level widget contains a menu bar, it will display     the maximised window's operations menu to the left of the menu     entries, and the window's controls to the right.      A child window becomes active when it gets the keyboard focus,     or when setFocus() is called. The user can activate a window by moving     focus in the usual ways, for example by clicking a window or by pressing     Tab. The workspace emits a signal windowActivated() when the active     window changes, and the function activeWindow() returns a pointer to the     active child window, or 0 if no window is active.      The convenience function windowList() returns a list of all child     windows. This information could be used in a popup menu     containing a list of windows, for example. This feature is also     available as part of the \l{Window Menu} Solution.      QWorkspace provides two built-in layout strategies for child     windows: cascade() and tile(). Both are slots so you can easily     connect menu entries to them.      \table     \row \o \inlineimage mdi-cascade.png          \o \inlineimage mdi-tile.png     \endtable      If you want your users to be able to work with child windows     larger than the visible workspace area, set the scrollBarsEnabled     property to true.      \sa QDockWidget, {MDI Example} */
end_comment
begin_class
DECL|class|QWorkspaceChild
class|class
name|QWorkspaceChild
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
friend|friend
class_decl|class
name|QWorkspacePrivate
class_decl|;
friend|friend
class_decl|class
name|QWorkspace
class_decl|;
friend|friend
class_decl|class
name|QWorkspaceTitleBar
class_decl|;
public|public:
name|QWorkspaceChild
parameter_list|(
name|QWidget
modifier|*
name|window
parameter_list|,
name|QWorkspace
modifier|*
name|parent
init|=
literal|0
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
literal|0
parameter_list|)
constructor_decl|;
name|~
name|QWorkspaceChild
parameter_list|()
destructor_decl|;
name|void
name|setActive
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|bool
name|isActive
parameter_list|()
specifier|const
function_decl|;
name|void
name|adjustToFullscreen
parameter_list|()
function_decl|;
name|QWidget
modifier|*
name|windowWidget
parameter_list|()
specifier|const
function_decl|;
name|QWidget
modifier|*
name|iconWidget
parameter_list|()
specifier|const
function_decl|;
name|void
name|doResize
parameter_list|()
function_decl|;
name|void
name|doMove
parameter_list|()
function_decl|;
name|QSize
name|sizeHint
parameter_list|()
specifier|const
function_decl|;
name|QSize
name|minimumSizeHint
parameter_list|()
specifier|const
function_decl|;
name|QSize
name|baseSize
parameter_list|()
specifier|const
function_decl|;
name|int
name|frameWidth
parameter_list|()
specifier|const
function_decl|;
name|void
name|show
parameter_list|()
function_decl|;
name|bool
name|isWindowOrIconVisible
parameter_list|()
specifier|const
function_decl|;
signals|signals:
name|void
name|showOperationMenu
parameter_list|()
function_decl|;
name|void
name|popupOperationMenu
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|)
function_decl|;
public|public
name|slots
public|:
name|void
name|activate
parameter_list|()
function_decl|;
name|void
name|showMinimized
parameter_list|()
function_decl|;
name|void
name|showMaximized
parameter_list|()
function_decl|;
name|void
name|showNormal
parameter_list|()
function_decl|;
name|void
name|showShaded
parameter_list|()
function_decl|;
name|void
name|internalRaise
parameter_list|()
function_decl|;
name|void
name|titleBarDoubleClicked
parameter_list|()
function_decl|;
protected|protected:
name|void
name|enterEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|childEvent
parameter_list|(
name|QChildEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|moveEvent
parameter_list|(
name|QMoveEvent
modifier|*
parameter_list|)
function_decl|;
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
function_decl|;
name|void
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
function_decl|;
private|private:
name|void
name|updateMask
parameter_list|()
function_decl|;
name|Q_DISABLE_COPY
argument_list|(
argument|QWorkspaceChild
argument_list|)
DECL|member|childWidget
name|QWidget
modifier|*
name|childWidget
decl_stmt|;
DECL|member|widgetResizeHandler
name|QWidgetResizeHandler
modifier|*
name|widgetResizeHandler
decl_stmt|;
DECL|member|titlebar
name|QWorkspaceTitleBar
modifier|*
name|titlebar
decl_stmt|;
DECL|member|iconw
name|QPointer
argument_list|<
name|QWorkspaceTitleBar
argument_list|>
name|iconw
decl_stmt|;
DECL|member|windowSize
name|QSize
name|windowSize
decl_stmt|;
DECL|member|shadeRestore
name|QSize
name|shadeRestore
decl_stmt|;
DECL|member|shadeRestoreMin
name|QSize
name|shadeRestoreMin
decl_stmt|;
name|bool
name|act
range|:
literal|1
decl_stmt|;
name|bool
name|shademode
range|:
literal|1
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|frameWidth
name|int
name|QWorkspaceChild
operator|::
name|frameWidth
parameter_list|()
specifier|const
block|{
return|return
name|contentsRect
argument_list|()
operator|.
name|left
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|QWorkspacePrivate
class|class
name|QWorkspacePrivate
super|:
specifier|public
name|QWidgetPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QWorkspace
parameter_list|)
specifier|public
private|:
DECL|member|active
name|QWorkspaceChild
modifier|*
name|active
decl_stmt|;
DECL|member|windows
name|QList
argument_list|<
name|QWorkspaceChild
modifier|*
argument_list|>
name|windows
decl_stmt|;
DECL|member|focus
name|QList
argument_list|<
name|QWorkspaceChild
modifier|*
argument_list|>
name|focus
decl_stmt|;
DECL|member|icons
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|icons
decl_stmt|;
DECL|member|maxWindow
name|QWorkspaceChild
modifier|*
name|maxWindow
decl_stmt|;
DECL|member|maxRestore
name|QRect
name|maxRestore
decl_stmt|;
DECL|member|maxcontrols
name|QPointer
argument_list|<
name|QMDIControl
argument_list|>
name|maxcontrols
decl_stmt|;
DECL|member|maxmenubar
name|QPointer
argument_list|<
name|QMenuBar
argument_list|>
name|maxmenubar
decl_stmt|;
DECL|member|shortcutMap
name|QHash
argument_list|<
name|int
argument_list|,
specifier|const
name|char
modifier|*
argument_list|>
name|shortcutMap
decl_stmt|;
DECL|member|px
name|int
name|px
decl_stmt|;
DECL|member|py
name|int
name|py
decl_stmt|;
DECL|member|becomeActive
name|QWidget
modifier|*
name|becomeActive
decl_stmt|;
DECL|member|maxtools
name|QPointer
argument_list|<
name|QLabel
argument_list|>
name|maxtools
decl_stmt|;
DECL|member|topTitle
name|QString
name|topTitle
decl_stmt|;
DECL|member|popup
DECL|member|toolPopup
name|QMenu
modifier|*
name|popup
decl_stmt|,
modifier|*
name|toolPopup
decl_stmt|;
DECL|enum|WSActs
DECL|enumerator|RestoreAct
DECL|enumerator|MoveAct
DECL|enumerator|ResizeAct
DECL|enumerator|MinimizeAct
DECL|enumerator|MaximizeAct
DECL|enumerator|CloseAct
DECL|enumerator|StaysOnTopAct
DECL|enumerator|ShadeAct
DECL|enumerator|NCountAct
enum|enum
name|WSActs
block|{
name|RestoreAct
block|,
name|MoveAct
block|,
name|ResizeAct
block|,
name|MinimizeAct
block|,
name|MaximizeAct
block|,
name|CloseAct
block|,
name|StaysOnTopAct
block|,
name|ShadeAct
block|,
name|NCountAct
block|}
enum|;
DECL|member|actions
name|QAction
modifier|*
name|actions
index|[
name|NCountAct
index|]
decl_stmt|;
DECL|member|vbar
DECL|member|hbar
name|QScrollBar
modifier|*
name|vbar
decl_stmt|,
modifier|*
name|hbar
decl_stmt|;
DECL|member|corner
name|QWidget
modifier|*
name|corner
decl_stmt|;
DECL|member|yoffset
DECL|member|xoffset
name|int
name|yoffset
decl_stmt|,
name|xoffset
decl_stmt|;
DECL|member|background
name|QBrush
name|background
decl_stmt|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|insertIcon
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
name|void
name|removeIcon
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
name|void
name|place
parameter_list|(
name|QWidget
modifier|*
parameter_list|)
function_decl|;
name|QWorkspaceChild
modifier|*
name|findChild
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
name|void
name|showMaximizeControls
parameter_list|()
function_decl|;
name|void
name|hideMaximizeControls
parameter_list|()
function_decl|;
name|void
name|activateWindow
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|change_focus
init|=
literal|true
parameter_list|)
function_decl|;
name|void
name|hideChild
parameter_list|(
name|QWorkspaceChild
modifier|*
name|c
parameter_list|)
function_decl|;
name|void
name|showWindow
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
name|void
name|maximizeWindow
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
name|void
name|minimizeWindow
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
name|void
name|normalizeWindow
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
function_decl|;
name|QRect
name|updateWorkspace
parameter_list|()
function_decl|;
private|private:
name|void
name|_q_normalizeActiveWindow
parameter_list|()
function_decl|;
name|void
name|_q_minimizeActiveWindow
parameter_list|()
function_decl|;
name|void
name|_q_showOperationMenu
parameter_list|()
function_decl|;
name|void
name|_q_popupOperationMenu
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|)
function_decl|;
name|void
name|_q_operationMenuActivated
parameter_list|(
name|QAction
modifier|*
parameter_list|)
function_decl|;
name|void
name|_q_scrollBarChanged
parameter_list|()
function_decl|;
name|void
name|_q_updateActions
parameter_list|()
function_decl|;
DECL|member|inTitleChange
name|bool
name|inTitleChange
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|isChildOf
specifier|static
name|bool
name|isChildOf
parameter_list|(
name|QWidget
modifier|*
name|child
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parent
operator|||
operator|!
name|child
condition|)
return|return
literal|false
return|;
name|QWidget
modifier|*
name|w
init|=
name|child
decl_stmt|;
while|while
condition|(
name|w
operator|&&
name|w
operator|!=
name|parent
condition|)
name|w
operator|=
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
return|return
name|w
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs a workspace with the given \a parent. */
end_comment
begin_constructor
DECL|function|QWorkspace
name|QWorkspace
operator|::
name|QWorkspace
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QWorkspacePrivate
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_function
name|void
DECL|function|init
name|QWorkspacePrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
name|maxcontrols
operator|=
literal|0
expr_stmt|;
name|active
operator|=
literal|0
expr_stmt|;
name|maxWindow
operator|=
literal|0
expr_stmt|;
name|maxtools
operator|=
literal|0
expr_stmt|;
name|px
operator|=
literal|0
expr_stmt|;
name|py
operator|=
literal|0
expr_stmt|;
name|becomeActive
operator|=
literal|0
expr_stmt|;
name|popup
operator|=
operator|new
name|QMenu
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|toolPopup
operator|=
operator|new
name|QMenu
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|popup
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_internal_mdi_popup"
argument_list|)
argument_list|)
expr_stmt|;
name|toolPopup
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_internal_mdi_tool_popup"
argument_list|)
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|RestoreAct
index|]
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardPixmap
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarNormalButton
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
argument_list|,
name|QWorkspace
operator|::
name|tr
argument_list|(
literal|"&Restore"
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MoveAct
index|]
operator|=
operator|new
name|QAction
argument_list|(
name|QWorkspace
operator|::
name|tr
argument_list|(
literal|"&Move"
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|ResizeAct
index|]
operator|=
operator|new
name|QAction
argument_list|(
name|QWorkspace
operator|::
name|tr
argument_list|(
literal|"&Size"
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MinimizeAct
index|]
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardPixmap
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarMinButton
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
argument_list|,
name|QWorkspace
operator|::
name|tr
argument_list|(
literal|"Mi&nimize"
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MaximizeAct
index|]
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardPixmap
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarMaxButton
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
argument_list|,
name|QWorkspace
operator|::
name|tr
argument_list|(
literal|"Ma&ximize"
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|CloseAct
index|]
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardPixmap
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarCloseButton
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
argument_list|,
name|QWorkspace
operator|::
name|tr
argument_list|(
literal|"&Close"
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
operator|+
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
operator|+
operator|(
name|QString
operator|)
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_F4
argument_list|)
endif|#
directive|endif
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|CloseAct
index|]
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|closeActiveWindow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|StaysOnTopAct
index|]
operator|=
operator|new
name|QAction
argument_list|(
name|QWorkspace
operator|::
name|tr
argument_list|(
literal|"Stay on&Top"
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|StaysOnTopAct
index|]
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|ShadeAct
index|]
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardPixmap
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarShadeButton
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
argument_list|,
name|QWorkspace
operator|::
name|tr
argument_list|(
literal|"Sh&ade"
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|popup
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToShow
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_updateActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|popup
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_operationMenuActivated
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|popup
operator|->
name|addAction
argument_list|(
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|RestoreAct
index|]
argument_list|)
expr_stmt|;
name|popup
operator|->
name|addAction
argument_list|(
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MoveAct
index|]
argument_list|)
expr_stmt|;
name|popup
operator|->
name|addAction
argument_list|(
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|ResizeAct
index|]
argument_list|)
expr_stmt|;
name|popup
operator|->
name|addAction
argument_list|(
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MinimizeAct
index|]
argument_list|)
expr_stmt|;
name|popup
operator|->
name|addAction
argument_list|(
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MaximizeAct
index|]
argument_list|)
expr_stmt|;
name|popup
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|popup
operator|->
name|addAction
argument_list|(
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|CloseAct
index|]
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|toolPopup
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToShow
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_updateActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|toolPopup
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_operationMenuActivated
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|toolPopup
operator|->
name|addAction
argument_list|(
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MoveAct
index|]
argument_list|)
expr_stmt|;
name|toolPopup
operator|->
name|addAction
argument_list|(
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|ResizeAct
index|]
argument_list|)
expr_stmt|;
name|toolPopup
operator|->
name|addAction
argument_list|(
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|StaysOnTopAct
index|]
argument_list|)
expr_stmt|;
name|toolPopup
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|toolPopup
operator|->
name|addAction
argument_list|(
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|ShadeAct
index|]
argument_list|)
expr_stmt|;
name|toolPopup
operator|->
name|addAction
argument_list|(
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|CloseAct
index|]
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
comment|// Set up shortcut bindings (id -> slot), most used first
name|QList
argument_list|<
name|QKeySequence
argument_list|>
name|shortcuts
init|=
name|QKeySequence
operator|::
name|keyBindings
argument_list|(
name|QKeySequence
operator|::
name|NextChild
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QKeySequence
modifier|&
name|seq
decl|,
name|shortcuts
control|)
name|shortcutMap
operator|.
name|insert
argument_list|(
name|q
operator|->
name|grabShortcut
argument_list|(
name|seq
argument_list|)
argument_list|,
literal|"activateNextWindow"
argument_list|)
expr_stmt|;
name|shortcuts
operator|=
name|QKeySequence
operator|::
name|keyBindings
argument_list|(
name|QKeySequence
operator|::
name|PreviousChild
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QKeySequence
modifier|&
name|seq
decl|,
name|shortcuts
control|)
name|shortcutMap
operator|.
name|insert
argument_list|(
name|q
operator|->
name|grabShortcut
argument_list|(
name|seq
argument_list|)
argument_list|,
literal|"activatePreviousWindow"
argument_list|)
expr_stmt|;
name|shortcuts
operator|=
name|QKeySequence
operator|::
name|keyBindings
argument_list|(
name|QKeySequence
operator|::
name|Close
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QKeySequence
modifier|&
name|seq
decl|,
name|shortcuts
control|)
name|shortcutMap
operator|.
name|insert
argument_list|(
name|q
operator|->
name|grabShortcut
argument_list|(
name|seq
argument_list|)
argument_list|,
literal|"closeActiveWindow"
argument_list|)
expr_stmt|;
name|shortcutMap
operator|.
name|insert
argument_list|(
name|q
operator|->
name|grabShortcut
argument_list|(
name|QKeySequence
argument_list|(
name|QLatin1String
argument_list|(
literal|"ALT+-"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"_q_showOperationMenu"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_SHORTCUT
name|q
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
argument_list|)
expr_stmt|;
name|hbar
operator|=
name|vbar
operator|=
literal|0
expr_stmt|;
name|corner
operator|=
literal|0
expr_stmt|;
name|xoffset
operator|=
name|yoffset
operator|=
literal|0
expr_stmt|;
name|q
operator|->
name|window
argument_list|()
operator|->
name|installEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|inTitleChange
operator|=
literal|false
expr_stmt|;
name|updateWorkspace
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Destroys the workspace and frees any allocated resources. */
end_comment
begin_destructor
DECL|function|~QWorkspace
name|QWorkspace
operator|::
name|~
name|QWorkspace
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QWorkspace
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|QSize
name|s
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|QSize
argument_list|(
name|s
operator|.
name|width
argument_list|()
operator|*
literal|2
operator|/
literal|3
argument_list|,
name|s
operator|.
name|height
argument_list|()
operator|*
literal|2
operator|/
literal|3
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QWorkspace::background     \brief the workspace's background */
end_comment
begin_function
DECL|function|background
name|QBrush
name|QWorkspace
operator|::
name|background
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|background
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
condition|)
return|return
name|palette
argument_list|()
operator|.
name|dark
argument_list|()
return|;
return|return
name|d
operator|->
name|background
return|;
block|}
end_function
begin_function
DECL|function|setBackground
name|void
name|QWorkspace
operator|::
name|setBackground
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|background
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
name|d
operator|->
name|background
operator|=
name|background
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OpaquePaintEvent
argument_list|,
name|background
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Adds widget \a w as new sub window to the workspace.  If \a flags     are non-zero, they will override the flags set on the widget.      Returns the widget used for the window frame.      To remove the widget \a w from the workspace, simply call     setParent() with the new parent (or 0 to make it a stand-alone     window). */
end_comment
begin_function
DECL|function|addWindow
name|QWidget
modifier|*
name|QWorkspace
operator|::
name|addWindow
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
return|return
literal|0
return|;
name|w
operator|->
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QWidgetPrivate
operator|::
name|adjustFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
block|bool wasMaximized = w->isMaximized();     bool wasMinimized = w->isMinimized();
endif|#
directive|endif
name|bool
name|hasSize
init|=
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|w
operator|->
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|w
operator|->
name|y
argument_list|()
decl_stmt|;
name|bool
name|hasPos
init|=
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasSize
operator|&&
name|w
operator|->
name|sizeHint
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
name|w
operator|->
name|adjustSize
argument_list|()
expr_stmt|;
name|QWorkspaceChild
modifier|*
name|child
init|=
operator|new
name|QWorkspaceChild
argument_list|(
name|w
argument_list|,
name|this
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|child
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_workspacechild"
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|child
argument_list|,
name|SIGNAL
argument_list|(
name|popupOperationMenu
argument_list|(
name|QPoint
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_popupOperationMenu
argument_list|(
name|QPoint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|child
argument_list|,
name|SIGNAL
argument_list|(
name|showOperationMenu
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_showOperationMenu
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|windows
operator|.
name|append
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|->
name|isVisibleTo
argument_list|(
name|this
argument_list|)
condition|)
name|d
operator|->
name|focus
operator|.
name|append
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|child
operator|->
name|internalRaise
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hasPos
condition|)
name|d
operator|->
name|place
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasSize
condition|)
name|child
operator|->
name|adjustSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasPos
condition|)
name|child
operator|->
name|move
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
return|return
name|child
return|;
if|#
directive|if
literal|0
block|if (wasMaximized)         w->showMaximized();     else if (wasMinimized)         w->showMinimized();     else if (!hasBeenHidden)         d->activateWindow(w);      d->updateWorkspace();     return child;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|childEvent
name|void
name|QWorkspace
operator|::
name|childEvent
parameter_list|(
name|QChildEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|removed
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|windows
operator|.
name|removeAll
argument_list|(
cast|static_cast
argument_list|<
name|QWorkspaceChild
operator|*
argument_list|>
argument_list|(
name|e
operator|->
name|child
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|d
operator|->
name|focus
operator|.
name|removeAll
argument_list|(
cast|static_cast
argument_list|<
name|QWorkspaceChild
operator|*
argument_list|>
argument_list|(
name|e
operator|->
name|child
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|maxWindow
operator|==
name|e
operator|->
name|child
argument_list|()
condition|)
name|d
operator|->
name|maxWindow
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|updateWorkspace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_function
DECL|function|wheelEvent
name|void
name|QWorkspace
operator|::
name|wheelEvent
parameter_list|(
name|QWheelEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scrollBarsEnabled
argument_list|()
condition|)
return|return;
comment|// the scroll bars are children of the workspace, so if we receive
comment|// a wheel event we redirect to the scroll bars using a direct event
comment|// call, /not/ using sendEvent() because if the scroll bar ignores the
comment|// event QApplication::sendEvent() will propagate the event to the parent widget,
comment|// which is us, who /just/ sent it.
if|if
condition|(
name|d
operator|->
name|vbar
operator|&&
name|d
operator|->
name|vbar
operator|->
name|isVisible
argument_list|()
operator|&&
operator|!
operator|(
name|e
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|AltModifier
operator|)
condition|)
name|d
operator|->
name|vbar
operator|->
name|event
argument_list|(
name|e
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|hbar
operator|&&
name|d
operator|->
name|hbar
operator|->
name|isVisible
argument_list|()
condition|)
name|d
operator|->
name|hbar
operator|->
name|event
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|activateWindow
name|void
name|QWorkspacePrivate
operator|::
name|activateWindow
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|bool
name|change_focus
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
block|{
name|active
operator|=
literal|0
expr_stmt|;
emit|emit
name|q
operator|->
name|windowActivated
argument_list|(
literal|0
argument_list|)
emit|;
return|return;
block|}
if|if
condition|(
operator|!
name|q
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|becomeActive
operator|=
name|w
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|active
operator|&&
name|active
operator|->
name|windowWidget
argument_list|()
operator|==
name|w
condition|)
block|{
if|if
condition|(
operator|!
name|isChildOf
argument_list|(
name|q
operator|->
name|focusWidget
argument_list|()
argument_list|,
name|w
argument_list|)
condition|)
comment|// child window does not have focus
name|active
operator|->
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|active
operator|=
literal|0
expr_stmt|;
comment|// First deactivate all other workspace clients
name|QList
argument_list|<
name|QWorkspaceChild
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|windows
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|windows
operator|.
name|end
argument_list|()
condition|)
block|{
name|QWorkspaceChild
modifier|*
name|c
init|=
operator|*
name|it
decl_stmt|;
operator|++
name|it
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|windowWidget
argument_list|()
operator|==
name|w
condition|)
name|active
operator|=
name|c
expr_stmt|;
else|else
name|c
operator|->
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|active
condition|)
return|return;
comment|// Then activate the new one, so the focus is stored correctly
name|active
operator|->
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|active
condition|)
return|return;
if|if
condition|(
name|maxWindow
operator|&&
name|maxWindow
operator|!=
name|active
operator|&&
name|active
operator|->
name|windowWidget
argument_list|()
operator|&&
operator|(
name|active
operator|->
name|windowWidget
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
name|active
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
name|active
operator|->
name|internalRaise
argument_list|()
expr_stmt|;
if|if
condition|(
name|change_focus
condition|)
block|{
name|int
name|from
init|=
name|focus
operator|.
name|indexOf
argument_list|(
name|active
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|>=
literal|0
condition|)
name|focus
operator|.
name|move
argument_list|(
name|from
argument_list|,
name|focus
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|updateWorkspace
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|windowActivated
argument_list|(
name|w
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the widget corresponding to the active child     window, or 0 if no window is active.      \sa setActiveWindow() */
end_comment
begin_function
DECL|function|activeWindow
name|QWidget
modifier|*
name|QWorkspace
operator|::
name|activeWindow
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWorkspace
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|active
condition|?
name|d
operator|->
name|active
operator|->
name|windowWidget
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Makes the child window that contains \a w the active child window.      \sa activeWindow() */
end_comment
begin_function
DECL|function|setActiveWindow
name|void
name|QWorkspace
operator|::
name|setActiveWindow
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
name|d
operator|->
name|activateWindow
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|&&
name|w
operator|->
name|isMinimized
argument_list|()
condition|)
name|w
operator|->
name|setWindowState
argument_list|(
name|w
operator|->
name|windowState
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|WindowMinimized
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|place
name|void
name|QWorkspacePrivate
operator|::
name|place
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|widgets
decl_stmt|;
for|for
control|(
name|QList
argument_list|<
name|QWorkspaceChild
operator|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|windows
operator|.
name|begin
argument_list|()
argument_list|)
init|;
name|it
operator|!=
name|windows
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
if|if
condition|(
operator|*
name|it
operator|!=
name|w
condition|)
name|widgets
operator|.
name|append
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
name|int
name|overlap
decl_stmt|,
name|minOverlap
init|=
literal|0
decl_stmt|;
name|int
name|possible
decl_stmt|;
name|QRect
name|r1
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QRect
name|r2
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QRect
name|maxRect
init|=
name|q
operator|->
name|rect
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|maxRect
operator|.
name|left
argument_list|()
decl_stmt|,
name|y
init|=
name|maxRect
operator|.
name|top
argument_list|()
decl_stmt|;
name|QPoint
name|wpos
argument_list|(
name|maxRect
operator|.
name|left
argument_list|()
argument_list|,
name|maxRect
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|firstPass
init|=
literal|true
decl_stmt|;
do|do
block|{
if|if
condition|(
name|y
operator|+
name|w
operator|->
name|height
argument_list|()
operator|>
name|maxRect
operator|.
name|bottom
argument_list|()
condition|)
block|{
name|overlap
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x
operator|+
name|w
operator|->
name|width
argument_list|()
operator|>
name|maxRect
operator|.
name|right
argument_list|()
condition|)
block|{
name|overlap
operator|=
operator|-
literal|2
expr_stmt|;
block|}
else|else
block|{
name|overlap
operator|=
literal|0
expr_stmt|;
name|r1
operator|.
name|setRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
operator|->
name|width
argument_list|()
argument_list|,
name|w
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|l
decl_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|widgets
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|widgets
operator|.
name|end
argument_list|()
condition|)
block|{
name|l
operator|=
operator|*
name|it
expr_stmt|;
operator|++
name|it
expr_stmt|;
if|if
condition|(
name|maxWindow
operator|==
name|l
condition|)
name|r2
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|q
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|maxRect
argument_list|,
name|maxRestore
argument_list|)
expr_stmt|;
else|else
name|r2
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|q
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|maxRect
argument_list|,
name|QRect
argument_list|(
name|l
operator|->
name|x
argument_list|()
argument_list|,
name|l
operator|->
name|y
argument_list|()
argument_list|,
name|l
operator|->
name|width
argument_list|()
argument_list|,
name|l
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r2
operator|.
name|intersects
argument_list|(
name|r1
argument_list|)
condition|)
block|{
name|r2
operator|.
name|setCoords
argument_list|(
name|qMax
argument_list|(
name|r1
operator|.
name|left
argument_list|()
argument_list|,
name|r2
operator|.
name|left
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
name|r1
operator|.
name|top
argument_list|()
argument_list|,
name|r2
operator|.
name|top
argument_list|()
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|r1
operator|.
name|right
argument_list|()
argument_list|,
name|r2
operator|.
name|right
argument_list|()
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|r1
operator|.
name|bottom
argument_list|()
argument_list|,
name|r2
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|overlap
operator|+=
operator|(
name|r2
operator|.
name|right
argument_list|()
operator|-
name|r2
operator|.
name|left
argument_list|()
operator|)
operator|*
operator|(
name|r2
operator|.
name|bottom
argument_list|()
operator|-
name|r2
operator|.
name|top
argument_list|()
operator|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|overlap
operator|==
literal|0
condition|)
block|{
name|wpos
operator|=
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|firstPass
condition|)
block|{
name|firstPass
operator|=
literal|false
expr_stmt|;
name|minOverlap
operator|=
name|overlap
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|overlap
operator|>=
literal|0
operator|&&
name|overlap
operator|<
name|minOverlap
condition|)
block|{
name|minOverlap
operator|=
name|overlap
expr_stmt|;
name|wpos
operator|=
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|overlap
operator|>
literal|0
condition|)
block|{
name|possible
operator|=
name|maxRect
operator|.
name|right
argument_list|()
expr_stmt|;
if|if
condition|(
name|possible
operator|-
name|w
operator|->
name|width
argument_list|()
operator|>
name|x
condition|)
name|possible
operator|-=
name|w
operator|->
name|width
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|l
decl_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|widgets
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|widgets
operator|.
name|end
argument_list|()
condition|)
block|{
name|l
operator|=
operator|*
name|it
expr_stmt|;
operator|++
name|it
expr_stmt|;
if|if
condition|(
name|maxWindow
operator|==
name|l
condition|)
name|r2
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|q
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|maxRect
argument_list|,
name|maxRestore
argument_list|)
expr_stmt|;
else|else
name|r2
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|q
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|maxRect
argument_list|,
name|QRect
argument_list|(
name|l
operator|->
name|x
argument_list|()
argument_list|,
name|l
operator|->
name|y
argument_list|()
argument_list|,
name|l
operator|->
name|width
argument_list|()
argument_list|,
name|l
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|y
operator|<
name|r2
operator|.
name|bottom
argument_list|()
operator|)
operator|&&
operator|(
name|r2
operator|.
name|top
argument_list|()
operator|<
name|w
operator|->
name|height
argument_list|()
operator|+
name|y
operator|)
condition|)
block|{
if|if
condition|(
name|r2
operator|.
name|right
argument_list|()
operator|>
name|x
condition|)
name|possible
operator|=
name|possible
operator|<
name|r2
operator|.
name|right
argument_list|()
condition|?
name|possible
else|:
name|r2
operator|.
name|right
argument_list|()
expr_stmt|;
if|if
condition|(
name|r2
operator|.
name|left
argument_list|()
operator|-
name|w
operator|->
name|width
argument_list|()
operator|>
name|x
condition|)
name|possible
operator|=
name|possible
operator|<
name|r2
operator|.
name|left
argument_list|()
operator|-
name|w
operator|->
name|width
argument_list|()
condition|?
name|possible
else|:
name|r2
operator|.
name|left
argument_list|()
operator|-
name|w
operator|->
name|width
argument_list|()
expr_stmt|;
block|}
block|}
name|x
operator|=
name|possible
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|overlap
operator|==
operator|-
literal|2
condition|)
block|{
name|x
operator|=
name|maxRect
operator|.
name|left
argument_list|()
expr_stmt|;
name|possible
operator|=
name|maxRect
operator|.
name|bottom
argument_list|()
expr_stmt|;
if|if
condition|(
name|possible
operator|-
name|w
operator|->
name|height
argument_list|()
operator|>
name|y
condition|)
name|possible
operator|-=
name|w
operator|->
name|height
argument_list|()
expr_stmt|;
name|QWidget
modifier|*
name|l
decl_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|widgets
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|widgets
operator|.
name|end
argument_list|()
condition|)
block|{
name|l
operator|=
operator|*
name|it
expr_stmt|;
operator|++
name|it
expr_stmt|;
if|if
condition|(
name|maxWindow
operator|==
name|l
condition|)
name|r2
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|q
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|maxRect
argument_list|,
name|maxRestore
argument_list|)
expr_stmt|;
else|else
name|r2
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|q
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|maxRect
argument_list|,
name|QRect
argument_list|(
name|l
operator|->
name|x
argument_list|()
argument_list|,
name|l
operator|->
name|y
argument_list|()
argument_list|,
name|l
operator|->
name|width
argument_list|()
argument_list|,
name|l
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r2
operator|.
name|bottom
argument_list|()
operator|>
name|y
condition|)
name|possible
operator|=
name|possible
operator|<
name|r2
operator|.
name|bottom
argument_list|()
condition|?
name|possible
else|:
name|r2
operator|.
name|bottom
argument_list|()
expr_stmt|;
if|if
condition|(
name|r2
operator|.
name|top
argument_list|()
operator|-
name|w
operator|->
name|height
argument_list|()
operator|>
name|y
condition|)
name|possible
operator|=
name|possible
operator|<
name|r2
operator|.
name|top
argument_list|()
operator|-
name|w
operator|->
name|height
argument_list|()
condition|?
name|possible
else|:
name|r2
operator|.
name|top
argument_list|()
operator|-
name|w
operator|->
name|height
argument_list|()
expr_stmt|;
block|}
name|y
operator|=
name|possible
expr_stmt|;
block|}
block|}
do|while
condition|(
name|overlap
operator|!=
literal|0
operator|&&
name|overlap
operator|!=
operator|-
literal|1
condition|)
do|;
name|QRect
name|resultRect
init|=
name|w
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|resultRect
operator|.
name|moveTo
argument_list|(
name|wpos
argument_list|)
expr_stmt|;
name|w
operator|->
name|setGeometry
argument_list|(
name|QStyle
operator|::
name|visualRect
argument_list|(
name|q
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|maxRect
argument_list|,
name|resultRect
argument_list|)
argument_list|)
expr_stmt|;
name|updateWorkspace
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertIcon
name|void
name|QWorkspacePrivate
operator|::
name|insertIcon
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|w
operator|||
name|icons
operator|.
name|contains
argument_list|(
name|w
argument_list|)
condition|)
return|return;
name|icons
operator|.
name|append
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|parentWidget
argument_list|()
operator|!=
name|q
condition|)
block|{
name|w
operator|->
name|setParent
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|w
operator|->
name|move
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|QRect
name|cr
init|=
name|updateWorkspace
argument_list|()
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
name|int
name|y
init|=
name|cr
operator|.
name|height
argument_list|()
operator|-
name|w
operator|->
name|height
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|icons
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|icons
operator|.
name|end
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|i
init|=
operator|*
name|it
decl_stmt|;
operator|++
name|it
expr_stmt|;
if|if
condition|(
name|x
operator|>
literal|0
operator|&&
name|x
operator|+
name|i
operator|->
name|width
argument_list|()
operator|>
name|cr
operator|.
name|width
argument_list|()
condition|)
block|{
name|x
operator|=
literal|0
expr_stmt|;
name|y
operator|-=
name|i
operator|->
name|height
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
name|w
operator|&&
name|i
operator|->
name|geometry
argument_list|()
operator|.
name|intersects
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
operator|->
name|width
argument_list|()
argument_list|,
name|w
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
condition|)
name|x
operator|+=
name|i
operator|->
name|width
argument_list|()
expr_stmt|;
block|}
name|w
operator|->
name|move
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisibleTo
argument_list|(
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
block|{
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
name|w
operator|->
name|lower
argument_list|()
expr_stmt|;
block|}
name|updateWorkspace
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeIcon
name|void
name|QWorkspacePrivate
operator|::
name|removeIcon
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
name|icons
operator|.
name|removeAll
argument_list|(
name|w
argument_list|)
condition|)
name|w
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp  */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QWorkspace
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|maxWindow
condition|)
block|{
name|d
operator|->
name|maxWindow
operator|->
name|adjustToFullscreen
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|maxWindow
operator|->
name|windowWidget
argument_list|()
condition|)
name|d
operator|->
name|maxWindow
operator|->
name|windowWidget
argument_list|()
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|updateWorkspace
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|showEvent
name|void
name|QWorkspace
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|maxWindow
condition|)
name|d
operator|->
name|showMaximizeControls
argument_list|()
expr_stmt|;
name|QWidget
operator|::
name|showEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|becomeActive
condition|)
block|{
name|d
operator|->
name|activateWindow
argument_list|(
name|d
operator|->
name|becomeActive
argument_list|)
expr_stmt|;
name|d
operator|->
name|becomeActive
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|windows
operator|.
name|count
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|d
operator|->
name|active
condition|)
block|{
name|d
operator|->
name|activateWindow
argument_list|(
name|d
operator|->
name|windows
operator|.
name|first
argument_list|()
operator|->
name|windowWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//     // force a frame repaint - this is a workaround for what seems to be a bug
comment|//     // introduced when changing the QWidget::show() implementation. Might be
comment|//     // a windows bug as well though.
comment|//     for (int i = 0; i< d->windows.count(); ++i) {
comment|//      QWorkspaceChild* c = d->windows.at(i);
comment|//         c->update(c->rect());
comment|//     }
name|d
operator|->
name|updateWorkspace
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|hideEvent
name|void
name|QWorkspace
operator|::
name|hideEvent
parameter_list|(
name|QHideEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|()
condition|)
name|d
operator|->
name|hideMaximizeControls
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QWorkspace
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|background
operator|.
name|style
argument_list|()
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|,
name|d
operator|->
name|background
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|minimizeWindow
name|void
name|QWorkspacePrivate
operator|::
name|minimizeWindow
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|QWorkspaceChild
modifier|*
name|c
init|=
name|findChild
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|||
operator|!
operator|(
name|w
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
condition|)
return|return;
if|if
condition|(
name|c
condition|)
block|{
name|bool
name|wasMax
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|maxWindow
condition|)
block|{
name|wasMax
operator|=
literal|true
expr_stmt|;
name|maxWindow
operator|=
literal|0
expr_stmt|;
name|hideMaximizeControls
argument_list|()
expr_stmt|;
for|for
control|(
name|QList
argument_list|<
name|QWorkspaceChild
operator|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|windows
operator|.
name|begin
argument_list|()
argument_list|)
init|;
name|it
operator|!=
name|windows
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QWorkspaceChild
modifier|*
name|c
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
name|c
operator|->
name|titlebar
condition|)
name|c
operator|->
name|titlebar
operator|->
name|setMovable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|c
operator|->
name|widgetResizeHandler
operator|->
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|c
operator|->
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|wasMax
condition|)
name|c
operator|->
name|setGeometry
argument_list|(
name|maxRestore
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|focus
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
name|focus
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|insertIcon
argument_list|(
name|c
operator|->
name|iconWidget
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|maxWindow
condition|)
name|activateWindow
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|updateWorkspace
argument_list|()
expr_stmt|;
name|w
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowMinimized
argument_list|)
expr_stmt|;
name|c
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowMinimized
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|normalizeWindow
name|void
name|QWorkspacePrivate
operator|::
name|normalizeWindow
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
name|QWorkspaceChild
modifier|*
name|c
init|=
name|findChild
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
return|return;
if|if
condition|(
name|c
condition|)
block|{
name|w
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|hideMaximizeControls
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|maxmenubar
operator|||
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Workspace_FillSpaceOnMaximize
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|||
operator|!
name|maxWindow
condition|)
block|{
if|if
condition|(
name|w
operator|->
name|minimumSize
argument_list|()
operator|!=
name|w
operator|->
name|maximumSize
argument_list|()
condition|)
name|c
operator|->
name|widgetResizeHandler
operator|->
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|titlebar
condition|)
name|c
operator|->
name|titlebar
operator|->
name|setMovable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|w
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|c
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
name|maxWindow
condition|)
block|{
name|c
operator|->
name|setGeometry
argument_list|(
name|maxRestore
argument_list|)
expr_stmt|;
name|maxWindow
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|c
operator|->
name|iconw
condition|)
name|removeIcon
argument_list|(
name|c
operator|->
name|iconw
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
name|hideMaximizeControls
argument_list|()
expr_stmt|;
for|for
control|(
name|QList
argument_list|<
name|QWorkspaceChild
operator|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|windows
operator|.
name|begin
argument_list|()
argument_list|)
init|;
name|it
operator|!=
name|windows
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QWorkspaceChild
modifier|*
name|c
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
name|c
operator|->
name|titlebar
condition|)
name|c
operator|->
name|titlebar
operator|->
name|setMovable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|childWidget
operator|&&
name|c
operator|->
name|childWidget
operator|->
name|minimumSize
argument_list|()
operator|!=
name|c
operator|->
name|childWidget
operator|->
name|maximumSize
argument_list|()
condition|)
name|c
operator|->
name|widgetResizeHandler
operator|->
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|activateWindow
argument_list|(
name|w
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateWorkspace
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|maximizeWindow
name|void
name|QWorkspacePrivate
operator|::
name|maximizeWindow
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
name|QWorkspaceChild
modifier|*
name|c
init|=
name|findChild
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
operator|||
operator|!
operator|(
name|w
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
return|return;
if|if
condition|(
operator|!
name|c
operator|||
name|c
operator|==
name|maxWindow
condition|)
return|return;
name|bool
name|updatesEnabled
init|=
name|q
operator|->
name|updatesEnabled
argument_list|()
decl_stmt|;
name|q
operator|->
name|setUpdatesEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|iconw
operator|&&
name|icons
operator|.
name|contains
argument_list|(
name|c
operator|->
name|iconw
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
name|normalizeWindow
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|QRect
name|r
argument_list|(
name|c
operator|->
name|geometry
argument_list|()
argument_list|)
decl_stmt|;
name|QWorkspaceChild
modifier|*
name|oldMaxWindow
init|=
name|maxWindow
decl_stmt|;
name|maxWindow
operator|=
name|c
expr_stmt|;
name|showMaximizeControls
argument_list|()
expr_stmt|;
name|c
operator|->
name|adjustToFullscreen
argument_list|()
expr_stmt|;
name|c
operator|->
name|show
argument_list|()
expr_stmt|;
name|c
operator|->
name|internalRaise
argument_list|()
expr_stmt|;
if|if
condition|(
name|oldMaxWindow
operator|!=
name|c
condition|)
block|{
if|if
condition|(
name|oldMaxWindow
condition|)
block|{
name|oldMaxWindow
operator|->
name|setGeometry
argument_list|(
name|maxRestore
argument_list|)
expr_stmt|;
name|oldMaxWindow
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldMaxWindow
operator|->
name|windowWidget
argument_list|()
condition|)
name|oldMaxWindow
operator|->
name|windowWidget
argument_list|()
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
block|}
name|maxRestore
operator|=
name|r
expr_stmt|;
block|}
name|activateWindow
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|maxmenubar
operator|||
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Workspace_FillSpaceOnMaximize
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|active
operator|&&
name|becomeActive
condition|)
block|{
name|active
operator|=
operator|(
name|QWorkspaceChild
operator|*
operator|)
name|becomeActive
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
name|active
operator|->
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|becomeActive
operator|=
literal|0
expr_stmt|;
emit|emit
name|q
operator|->
name|windowActivated
argument_list|(
name|active
operator|->
name|windowWidget
argument_list|()
argument_list|)
emit|;
block|}
name|c
operator|->
name|widgetResizeHandler
operator|->
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|titlebar
condition|)
name|c
operator|->
name|titlebar
operator|->
name|setMovable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|updateWorkspace
argument_list|()
expr_stmt|;
name|w
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|c
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|q
operator|->
name|setUpdatesEnabled
argument_list|(
name|updatesEnabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showWindow
name|void
name|QWorkspacePrivate
operator|::
name|showWindow
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
name|w
operator|->
name|isMinimized
argument_list|()
operator|&&
operator|(
name|w
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
condition|)
name|minimizeWindow
argument_list|(
name|w
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|maxWindow
operator|||
name|w
operator|->
name|isMaximized
argument_list|()
operator|)
operator|&&
name|w
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
name|maximizeWindow
argument_list|(
name|w
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|w
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
name|normalizeWindow
argument_list|(
name|w
argument_list|)
expr_stmt|;
else|else
name|w
operator|->
name|parentWidget
argument_list|()
operator|->
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|maxWindow
condition|)
name|maxWindow
operator|->
name|internalRaise
argument_list|()
expr_stmt|;
name|updateWorkspace
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findChild
name|QWorkspaceChild
modifier|*
name|QWorkspacePrivate
operator|::
name|findChild
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|QList
argument_list|<
name|QWorkspaceChild
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|windows
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|windows
operator|.
name|end
argument_list|()
condition|)
block|{
name|QWorkspaceChild
modifier|*
name|c
init|=
operator|*
name|it
decl_stmt|;
operator|++
name|it
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|windowWidget
argument_list|()
operator|==
name|w
condition|)
return|return
name|c
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a list of all visible or minimized child windows. If \a     order is CreationOrder (the default), the windows are listed in     the order in which they were inserted into the workspace. If \a     order is StackingOrder, the windows are listed in their stacking     order, with the topmost window as the last item in the list. */
end_comment
begin_function
DECL|function|windowList
name|QWidgetList
name|QWorkspace
operator|::
name|windowList
parameter_list|(
name|WindowOrder
name|order
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWorkspace
argument_list|)
expr_stmt|;
name|QWidgetList
name|windows
decl_stmt|;
if|if
condition|(
name|order
operator|==
name|StackingOrder
condition|)
block|{
name|QObjectList
name|cl
init|=
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWorkspaceChild
modifier|*
name|c
init|=
name|qobject_cast
argument_list|<
name|QWorkspaceChild
operator|*
argument_list|>
argument_list|(
name|cl
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|&&
name|c
operator|->
name|isWindowOrIconVisible
argument_list|()
condition|)
name|windows
operator|.
name|append
argument_list|(
name|c
operator|->
name|windowWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QList
argument_list|<
name|QWorkspaceChild
modifier|*
argument_list|>
operator|::
name|ConstIterator
name|it
argument_list|(
name|d
operator|->
name|windows
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|windows
operator|.
name|end
argument_list|()
condition|)
block|{
name|QWorkspaceChild
modifier|*
name|c
init|=
operator|*
name|it
decl_stmt|;
operator|++
name|it
expr_stmt|;
if|if
condition|(
name|c
operator|&&
name|c
operator|->
name|isWindowOrIconVisible
argument_list|()
condition|)
name|windows
operator|.
name|append
argument_list|(
name|c
operator|->
name|windowWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|windows
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QWorkspace
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Shortcut
condition|)
block|{
name|QShortcutEvent
modifier|*
name|se
init|=
cast|static_cast
argument_list|<
name|QShortcutEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|theSlot
init|=
name|d
operator|->
name|shortcutMap
operator|.
name|value
argument_list|(
name|se
operator|->
name|shortcutId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|theSlot
condition|)
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
name|theSlot
argument_list|)
expr_stmt|;
block|}
elseif|else
endif|#
directive|endif
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FocusIn
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FocusOut
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|eventFilter
name|bool
name|QWorkspace
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
specifier|static
name|QElapsedTimer
modifier|*
name|t
init|=
literal|0
decl_stmt|;
specifier|static
name|QWorkspace
modifier|*
name|tc
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|o
operator|==
name|d
operator|->
name|maxtools
condition|)
block|{
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
block|{
name|QMenuBar
modifier|*
name|b
init|=
operator|(
name|QMenuBar
operator|*
operator|)
name|o
operator|->
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t
condition|)
name|t
operator|=
operator|new
name|QElapsedTimer
expr_stmt|;
if|if
condition|(
name|tc
operator|!=
name|this
operator|||
name|t
operator|->
name|elapsed
argument_list|()
operator|>
name|QApplication
operator|::
name|doubleClickInterval
argument_list|()
condition|)
block|{
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
name|QPoint
name|p
init|=
name|b
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
name|b
operator|->
name|x
argument_list|()
operator|+
name|b
operator|->
name|width
argument_list|()
argument_list|,
name|b
operator|->
name|y
argument_list|()
operator|+
name|b
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|rx
argument_list|()
operator|-=
name|d
operator|->
name|popup
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
name|d
operator|->
name|_q_popupOperationMenu
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|_q_popupOperationMenu
argument_list|(
name|b
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
name|b
operator|->
name|x
argument_list|()
argument_list|,
name|b
operator|->
name|y
argument_list|()
operator|+
name|b
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|t
operator|->
name|start
argument_list|()
expr_stmt|;
name|tc
operator|=
name|this
expr_stmt|;
block|}
else|else
block|{
name|tc
operator|=
literal|0
expr_stmt|;
name|closeActiveWindow
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|eventFilter
argument_list|(
name|o
argument_list|,
name|e
argument_list|)
return|;
block|}
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|HideToParent
case|:
break|break;
case|case
name|QEvent
operator|::
name|ShowToParent
case|:
if|if
condition|(
name|QWorkspaceChild
modifier|*
name|c
init|=
name|qobject_cast
argument_list|<
name|QWorkspaceChild
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
condition|)
if|if
condition|(
operator|!
name|d
operator|->
name|focus
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
name|d
operator|->
name|focus
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateWorkspace
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|WindowTitleChange
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|inTitleChange
condition|)
block|{
if|if
condition|(
name|o
operator|==
name|window
argument_list|()
condition|)
name|d
operator|->
name|topTitle
operator|=
name|window
argument_list|()
operator|->
name|windowTitle
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|maxWindow
operator|&&
name|d
operator|->
name|maxWindow
operator|->
name|windowWidget
argument_list|()
operator|&&
name|d
operator|->
name|topTitle
operator|.
name|size
argument_list|()
condition|)
block|{
name|d
operator|->
name|inTitleChange
operator|=
literal|true
expr_stmt|;
name|window
argument_list|()
operator|->
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|d
operator|->
name|topTitle
argument_list|)
operator|.
name|arg
argument_list|(
name|d
operator|->
name|maxWindow
operator|->
name|windowWidget
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|inTitleChange
operator|=
literal|false
expr_stmt|;
block|}
block|}
break|break;
case|case
name|QEvent
operator|::
name|ModifiedChange
case|:
if|if
condition|(
name|o
operator|==
name|d
operator|->
name|maxWindow
condition|)
name|window
argument_list|()
operator|->
name|setWindowModified
argument_list|(
name|d
operator|->
name|maxWindow
operator|->
name|isWindowModified
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Close
case|:
if|if
condition|(
name|o
operator|==
name|window
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QWorkspaceChild
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|d
operator|->
name|windows
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|windows
operator|.
name|end
argument_list|()
condition|)
block|{
name|QWorkspaceChild
modifier|*
name|c
init|=
operator|*
name|it
decl_stmt|;
operator|++
name|it
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|shademode
condition|)
name|c
operator|->
name|showShaded
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|qobject_cast
argument_list|<
name|QWorkspaceChild
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|d
operator|->
name|popup
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|updateWorkspace
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|eventFilter
argument_list|(
name|o
argument_list|,
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|findMenuBar
specifier|static
name|QMenuBar
modifier|*
name|findMenuBar
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
comment|// don't search recursively to avoid finding a menu bar of a
comment|// mainwindow that happens to be a workspace window (like
comment|// a mainwindow in designer)
name|QList
argument_list|<
name|QObject
modifier|*
argument_list|>
name|children
init|=
name|w
operator|->
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QMenuBar
modifier|*
name|bar
init|=
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|children
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bar
condition|)
return|return
name|bar
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|showMaximizeControls
name|void
name|QWorkspacePrivate
operator|::
name|showMaximizeControls
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|maxWindow
argument_list|)
expr_stmt|;
comment|// merge windowtitle and modified state
if|if
condition|(
operator|!
name|topTitle
operator|.
name|size
argument_list|()
condition|)
name|topTitle
operator|=
name|q
operator|->
name|window
argument_list|()
operator|->
name|windowTitle
argument_list|()
expr_stmt|;
if|if
condition|(
name|maxWindow
operator|->
name|windowWidget
argument_list|()
condition|)
block|{
name|QString
name|docTitle
init|=
name|maxWindow
operator|->
name|windowWidget
argument_list|()
operator|->
name|windowTitle
argument_list|()
decl_stmt|;
if|if
condition|(
name|topTitle
operator|.
name|size
argument_list|()
operator|&&
name|docTitle
operator|.
name|size
argument_list|()
condition|)
block|{
name|inTitleChange
operator|=
literal|true
expr_stmt|;
name|q
operator|->
name|window
argument_list|()
operator|->
name|setWindowTitle
argument_list|(
name|QWorkspace
operator|::
name|tr
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|topTitle
argument_list|)
operator|.
name|arg
argument_list|(
name|docTitle
argument_list|)
argument_list|)
expr_stmt|;
name|inTitleChange
operator|=
literal|false
expr_stmt|;
block|}
name|q
operator|->
name|window
argument_list|()
operator|->
name|setWindowModified
argument_list|(
name|maxWindow
operator|->
name|windowWidget
argument_list|()
operator|->
name|isWindowModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Workspace_FillSpaceOnMaximize
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
condition|)
block|{
name|QMenuBar
modifier|*
name|b
init|=
literal|0
decl_stmt|;
comment|// Do a breadth-first search first on every parent,
name|QWidget
modifier|*
name|w
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
while|while
condition|(
name|w
condition|)
block|{
name|b
operator|=
name|findMenuBar
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
condition|)
break|break;
name|w
operator|=
name|w
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
comment|// last attempt.
if|if
condition|(
operator|!
name|b
condition|)
name|b
operator|=
name|findMenuBar
argument_list|(
name|q
operator|->
name|window
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|b
condition|)
return|return;
if|if
condition|(
operator|!
name|maxcontrols
condition|)
block|{
name|maxmenubar
operator|=
name|b
expr_stmt|;
name|maxcontrols
operator|=
operator|new
name|QMDIControl
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|maxcontrols
argument_list|,
name|SIGNAL
argument_list|(
name|_q_minimize
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_minimizeActiveWindow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|maxcontrols
argument_list|,
name|SIGNAL
argument_list|(
name|_q_restore
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_normalizeActiveWindow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|maxcontrols
argument_list|,
name|SIGNAL
argument_list|(
name|_q_close
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|closeActiveWindow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|b
operator|->
name|setCornerWidget
argument_list|(
name|maxcontrols
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|->
name|isVisible
argument_list|()
condition|)
name|maxcontrols
operator|->
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|active
operator|&&
name|becomeActive
condition|)
block|{
name|active
operator|=
operator|(
name|QWorkspaceChild
operator|*
operator|)
name|becomeActive
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
name|active
operator|->
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|becomeActive
operator|=
literal|0
expr_stmt|;
emit|emit
name|q
operator|->
name|windowActivated
argument_list|(
name|active
operator|->
name|windowWidget
argument_list|()
argument_list|)
emit|;
block|}
if|if
condition|(
name|active
condition|)
block|{
if|if
condition|(
operator|!
name|maxtools
condition|)
block|{
name|maxtools
operator|=
operator|new
name|QLabel
argument_list|(
name|q
operator|->
name|window
argument_list|()
argument_list|)
expr_stmt|;
name|maxtools
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_maxtools"
argument_list|)
argument_list|)
expr_stmt|;
name|maxtools
operator|->
name|installEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|active
operator|->
name|windowWidget
argument_list|()
operator|&&
operator|!
name|active
operator|->
name|windowWidget
argument_list|()
operator|->
name|windowIcon
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QIcon
name|icon
init|=
name|active
operator|->
name|windowWidget
argument_list|()
operator|->
name|windowIcon
argument_list|()
decl_stmt|;
name|int
name|iconSize
init|=
name|maxcontrols
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|maxtools
operator|->
name|setPixmap
argument_list|(
name|icon
operator|.
name|pixmap
argument_list|(
name|QSize
argument_list|(
name|iconSize
argument_list|,
name|iconSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPixmap
name|pm
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardPixmap
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarMenuButton
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|pm
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|pm
operator|=
name|QPixmap
argument_list|(
literal|14
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
block|}
name|maxtools
operator|->
name|setPixmap
argument_list|(
name|pm
argument_list|)
expr_stmt|;
block|}
name|b
operator|->
name|setCornerWidget
argument_list|(
name|maxtools
argument_list|,
name|Qt
operator|::
name|TopLeftCorner
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|->
name|isVisible
argument_list|()
condition|)
name|maxtools
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|hideMaximizeControls
name|void
name|QWorkspacePrivate
operator|::
name|hideMaximizeControls
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxmenubar
operator|&&
operator|!
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Workspace_FillSpaceOnMaximize
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
condition|)
block|{
if|if
condition|(
name|maxmenubar
condition|)
block|{
name|maxmenubar
operator|->
name|setCornerWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|TopLeftCorner
argument_list|)
expr_stmt|;
name|maxmenubar
operator|->
name|setCornerWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|TopRightCorner
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxcontrols
condition|)
block|{
name|maxcontrols
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|maxcontrols
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|maxtools
condition|)
block|{
name|maxtools
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|maxtools
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|//unmerge the title bar/modification state
if|if
condition|(
name|topTitle
operator|.
name|size
argument_list|()
condition|)
block|{
name|inTitleChange
operator|=
literal|true
expr_stmt|;
name|q
operator|->
name|window
argument_list|()
operator|->
name|setWindowTitle
argument_list|(
name|topTitle
argument_list|)
expr_stmt|;
name|inTitleChange
operator|=
literal|false
expr_stmt|;
block|}
name|q
operator|->
name|window
argument_list|()
operator|->
name|setWindowModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Closes the child window that is currently active.      \sa closeAllWindows() */
end_comment
begin_function
DECL|function|closeActiveWindow
name|void
name|QWorkspace
operator|::
name|closeActiveWindow
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|maxWindow
operator|&&
name|d
operator|->
name|maxWindow
operator|->
name|windowWidget
argument_list|()
condition|)
name|d
operator|->
name|maxWindow
operator|->
name|windowWidget
argument_list|()
operator|->
name|close
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|active
operator|&&
name|d
operator|->
name|active
operator|->
name|windowWidget
argument_list|()
condition|)
name|d
operator|->
name|active
operator|->
name|windowWidget
argument_list|()
operator|->
name|close
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateWorkspace
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Closes all child windows.      If any child window fails to accept the close event, the remaining windows     will remain open.      \sa closeActiveWindow() */
end_comment
begin_function
DECL|function|closeAllWindows
name|void
name|QWorkspace
operator|::
name|closeAllWindows
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
name|bool
name|did_close
init|=
literal|true
decl_stmt|;
name|QList
argument_list|<
name|QWorkspaceChild
modifier|*
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|d
operator|->
name|windows
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|windows
operator|.
name|constEnd
argument_list|()
operator|&&
name|did_close
condition|)
block|{
name|QWorkspaceChild
modifier|*
name|c
init|=
operator|*
name|it
decl_stmt|;
operator|++
name|it
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|windowWidget
argument_list|()
operator|&&
operator|!
name|c
operator|->
name|windowWidget
argument_list|()
operator|->
name|isHidden
argument_list|()
condition|)
name|did_close
operator|=
name|c
operator|->
name|windowWidget
argument_list|()
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_normalizeActiveWindow
name|void
name|QWorkspacePrivate
operator|::
name|_q_normalizeActiveWindow
parameter_list|()
block|{
if|if
condition|(
name|maxWindow
condition|)
name|maxWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|active
condition|)
name|active
operator|->
name|showNormal
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_minimizeActiveWindow
name|void
name|QWorkspacePrivate
operator|::
name|_q_minimizeActiveWindow
parameter_list|()
block|{
if|if
condition|(
name|maxWindow
condition|)
name|maxWindow
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|active
condition|)
name|active
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_showOperationMenu
name|void
name|QWorkspacePrivate
operator|::
name|_q_showOperationMenu
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|active
operator|||
operator|!
name|active
operator|->
name|windowWidget
argument_list|()
condition|)
return|return;
name|Q_ASSERT
argument_list|(
operator|(
name|active
operator|->
name|windowWidget
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
operator|)
argument_list|)
expr_stmt|;
name|QPoint
name|p
decl_stmt|;
name|QMenu
modifier|*
name|popup
init|=
operator|(
name|active
operator|->
name|titlebar
operator|&&
name|active
operator|->
name|titlebar
operator|->
name|isTool
argument_list|()
operator|)
condition|?
name|toolPopup
else|:
name|this
operator|->
name|popup
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|)
block|{
name|p
operator|=
name|QPoint
argument_list|(
name|active
operator|->
name|windowWidget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
name|active
operator|->
name|windowWidget
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|rx
argument_list|()
operator|-=
name|popup
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|QPoint
argument_list|(
name|active
operator|->
name|windowWidget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|active
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|p
operator|=
name|active
operator|->
name|iconWidget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|ry
argument_list|()
operator|-=
name|popup
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|_q_popupOperationMenu
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_popupOperationMenu
name|void
name|QWorkspacePrivate
operator|::
name|_q_popupOperationMenu
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
block|{
if|if
condition|(
operator|!
name|active
operator|||
operator|!
name|active
operator|->
name|windowWidget
argument_list|()
operator|||
operator|!
operator|(
name|active
operator|->
name|windowWidget
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
operator|)
condition|)
return|return;
if|if
condition|(
name|active
operator|->
name|titlebar
operator|&&
name|active
operator|->
name|titlebar
operator|->
name|isTool
argument_list|()
condition|)
name|toolPopup
operator|->
name|popup
argument_list|(
name|p
argument_list|)
expr_stmt|;
else|else
name|popup
operator|->
name|popup
parameter_list|(
name|p
parameter_list|)
constructor_decl|;
block|}
end_function
begin_function
DECL|function|_q_updateActions
name|void
name|QWorkspacePrivate
operator|::
name|_q_updateActions
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|NCountAct
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|bool
name|enable
init|=
name|active
operator|!=
literal|0
decl_stmt|;
name|actions
index|[
name|i
index|]
operator|->
name|setEnabled
argument_list|(
name|enable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|active
operator|||
operator|!
name|active
operator|->
name|windowWidget
argument_list|()
condition|)
return|return;
name|QWidget
modifier|*
name|windowWidget
init|=
name|active
operator|->
name|windowWidget
argument_list|()
decl_stmt|;
name|bool
name|canResize
init|=
name|windowWidget
operator|->
name|maximumSize
argument_list|()
operator|!=
name|windowWidget
operator|->
name|minimumSize
argument_list|()
decl_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|ResizeAct
index|]
operator|->
name|setEnabled
argument_list|(
name|canResize
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MinimizeAct
index|]
operator|->
name|setEnabled
argument_list|(
operator|(
name|windowWidget
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MaximizeAct
index|]
operator|->
name|setEnabled
argument_list|(
operator|(
name|windowWidget
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
operator|&&
name|canResize
argument_list|)
expr_stmt|;
if|if
condition|(
name|active
operator|==
name|maxWindow
condition|)
block|{
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MoveAct
index|]
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|ResizeAct
index|]
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MaximizeAct
index|]
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|RestoreAct
index|]
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|active
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|RestoreAct
index|]
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MoveAct
index|]
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|ResizeAct
index|]
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MinimizeAct
index|]
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|RestoreAct
index|]
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|active
operator|->
name|shademode
condition|)
block|{
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|ShadeAct
index|]
operator|->
name|setIcon
argument_list|(
name|QIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardPixmap
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarUnshadeButton
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|ShadeAct
index|]
operator|->
name|setText
argument_list|(
name|QWorkspace
operator|::
name|tr
argument_list|(
literal|"&Unshade"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|ShadeAct
index|]
operator|->
name|setIcon
argument_list|(
name|QIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardPixmap
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarShadeButton
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|ShadeAct
index|]
operator|->
name|setText
argument_list|(
name|QWorkspace
operator|::
name|tr
argument_list|(
literal|"Sh&ade"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|StaysOnTopAct
index|]
operator|->
name|setEnabled
argument_list|(
operator|!
name|active
operator|->
name|shademode
operator|&&
name|canResize
argument_list|)
expr_stmt|;
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|StaysOnTopAct
index|]
operator|->
name|setChecked
argument_list|(
operator|(
name|active
operator|->
name|windowWidget
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_operationMenuActivated
name|void
name|QWorkspacePrivate
operator|::
name|_q_operationMenuActivated
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
if|if
condition|(
operator|!
name|active
condition|)
return|return;
if|if
condition|(
name|action
operator|==
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|RestoreAct
index|]
condition|)
block|{
name|active
operator|->
name|showNormal
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MoveAct
index|]
condition|)
block|{
name|active
operator|->
name|doMove
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|ResizeAct
index|]
condition|)
block|{
if|if
condition|(
name|active
operator|->
name|shademode
condition|)
name|active
operator|->
name|showShaded
argument_list|()
expr_stmt|;
name|active
operator|->
name|doResize
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MinimizeAct
index|]
condition|)
block|{
name|active
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|MaximizeAct
index|]
condition|)
block|{
name|active
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|ShadeAct
index|]
condition|)
block|{
name|active
operator|->
name|showShaded
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|actions
index|[
name|QWorkspacePrivate
operator|::
name|StaysOnTopAct
index|]
condition|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|active
operator|->
name|windowWidget
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|w
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
condition|)
block|{
name|w
operator|->
name|overrideWindowFlags
argument_list|(
name|w
operator|->
name|windowFlags
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|WindowStaysOnTopHint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|w
operator|->
name|overrideWindowFlags
argument_list|(
name|w
operator|->
name|windowFlags
argument_list|()
operator||
name|Qt
operator|::
name|WindowStaysOnTopHint
argument_list|)
expr_stmt|;
name|w
operator|->
name|parentWidget
argument_list|()
operator|->
name|raise
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|hideChild
name|void
name|QWorkspacePrivate
operator|::
name|hideChild
parameter_list|(
name|QWorkspaceChild
modifier|*
name|c
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
comment|//     bool updatesEnabled = q->updatesEnabled();
comment|//     q->setUpdatesEnabled(false);
name|focus
operator|.
name|removeAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|QRect
name|restore
decl_stmt|;
if|if
condition|(
name|maxWindow
operator|==
name|c
condition|)
name|restore
operator|=
name|maxRestore
expr_stmt|;
if|if
condition|(
name|active
operator|==
name|c
condition|)
block|{
name|q
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|q
operator|->
name|activatePreviousWindow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|active
operator|==
name|c
condition|)
name|activateWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxWindow
operator|==
name|c
condition|)
block|{
name|hideMaximizeControls
argument_list|()
expr_stmt|;
name|maxWindow
operator|=
literal|0
expr_stmt|;
block|}
name|c
operator|->
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|restore
operator|.
name|isEmpty
argument_list|()
condition|)
name|c
operator|->
name|setGeometry
argument_list|(
name|restore
argument_list|)
expr_stmt|;
comment|//     q->setUpdatesEnabled(updatesEnabled);
block|}
end_function
begin_comment
comment|/*!     Gives the input focus to the next window in the list of child     windows.      \sa activatePreviousWindow() */
end_comment
begin_function
DECL|function|activateNextWindow
name|void
name|QWorkspace
operator|::
name|activateNextWindow
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|focus
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|d
operator|->
name|active
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|focus
operator|.
name|first
argument_list|()
condition|)
name|d
operator|->
name|activateWindow
argument_list|(
name|d
operator|->
name|focus
operator|.
name|first
argument_list|()
operator|->
name|windowWidget
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|a
init|=
name|d
operator|->
name|focus
operator|.
name|indexOf
argument_list|(
name|d
operator|->
name|active
argument_list|)
operator|+
literal|1
decl_stmt|;
name|a
operator|=
name|a
operator|%
name|d
operator|->
name|focus
operator|.
name|count
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|focus
operator|.
name|at
argument_list|(
name|a
argument_list|)
condition|)
name|d
operator|->
name|activateWindow
argument_list|(
name|d
operator|->
name|focus
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|windowWidget
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|activateWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Gives the input focus to the previous window in the list of child     windows.      \sa activateNextWindow() */
end_comment
begin_function
DECL|function|activatePreviousWindow
name|void
name|QWorkspace
operator|::
name|activatePreviousWindow
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|focus
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|d
operator|->
name|active
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|focus
operator|.
name|last
argument_list|()
condition|)
name|d
operator|->
name|activateWindow
argument_list|(
name|d
operator|->
name|focus
operator|.
name|first
argument_list|()
operator|->
name|windowWidget
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|activateWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|a
init|=
name|d
operator|->
name|focus
operator|.
name|indexOf
argument_list|(
name|d
operator|->
name|active
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|a
operator|<
literal|0
condition|)
name|a
operator|=
name|d
operator|->
name|focus
operator|.
name|count
argument_list|()
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|focus
operator|.
name|at
argument_list|(
name|a
argument_list|)
condition|)
name|d
operator|->
name|activateWindow
argument_list|(
name|d
operator|->
name|focus
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|windowWidget
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|activateWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QWorkspace::windowActivated(QWidget* w)      This signal is emitted when the child window \a w becomes active.     Note that \a w can be 0, and that more than one signal may be     emitted for a single activation event.      \sa activeWindow(), windowList() */
end_comment
begin_comment
comment|/*!     Arranges all the child windows in a cascade pattern.      \sa tile(), arrangeIcons() */
end_comment
begin_function
DECL|function|cascade
name|void
name|QWorkspace
operator|::
name|cascade
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|maxWindow
condition|)
name|d
operator|->
name|maxWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|vbar
condition|)
block|{
name|d
operator|->
name|vbar
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|vbar
operator|->
name|setValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|vbar
operator|->
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|hbar
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|hbar
operator|->
name|setValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|hbar
operator|->
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|_q_scrollBarChanged
argument_list|()
expr_stmt|;
block|}
specifier|const
name|int
name|xoffset
init|=
literal|13
decl_stmt|;
specifier|const
name|int
name|yoffset
init|=
literal|20
decl_stmt|;
comment|// make a list of all relevant mdi clients
name|QList
argument_list|<
name|QWorkspaceChild
modifier|*
argument_list|>
name|widgets
decl_stmt|;
name|QList
argument_list|<
name|QWorkspaceChild
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|d
operator|->
name|windows
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
name|QWorkspaceChild
modifier|*
name|wc
init|=
literal|0
decl_stmt|;
for|for
control|(
name|it
operator|=
name|d
operator|->
name|focus
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|d
operator|->
name|focus
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|wc
operator|=
operator|*
name|it
expr_stmt|;
if|if
condition|(
name|wc
operator|->
name|windowWidget
argument_list|()
operator|->
name|isVisibleTo
argument_list|(
name|this
argument_list|)
operator|&&
operator|!
operator|(
name|wc
operator|->
name|titlebar
operator|&&
name|wc
operator|->
name|titlebar
operator|->
name|isTool
argument_list|()
operator|)
condition|)
name|widgets
operator|.
name|append
argument_list|(
name|wc
argument_list|)
expr_stmt|;
block|}
name|int
name|x
init|=
literal|0
decl_stmt|;
name|int
name|y
init|=
literal|0
decl_stmt|;
name|it
operator|=
name|widgets
operator|.
name|begin
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|!=
name|widgets
operator|.
name|end
argument_list|()
condition|)
block|{
name|QWorkspaceChild
modifier|*
name|child
init|=
operator|*
name|it
decl_stmt|;
operator|++
name|it
expr_stmt|;
name|QSize
name|prefSize
init|=
name|child
operator|->
name|windowWidget
argument_list|()
operator|->
name|sizeHint
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|qSmartMinSize
argument_list|(
name|child
operator|->
name|windowWidget
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|prefSize
operator|.
name|isValid
argument_list|()
condition|)
name|prefSize
operator|=
name|child
operator|->
name|windowWidget
argument_list|()
operator|->
name|size
argument_list|()
expr_stmt|;
name|prefSize
operator|=
name|prefSize
operator|.
name|expandedTo
argument_list|(
name|qSmartMinSize
argument_list|(
name|child
operator|->
name|windowWidget
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefSize
operator|.
name|isValid
argument_list|()
condition|)
name|prefSize
operator|+=
name|QSize
argument_list|(
name|child
operator|->
name|baseSize
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|child
operator|->
name|baseSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|w
init|=
name|prefSize
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|prefSize
operator|.
name|height
argument_list|()
decl_stmt|;
name|child
operator|->
name|showNormal
argument_list|()
expr_stmt|;
if|if
condition|(
name|y
operator|+
name|h
operator|>
name|height
argument_list|()
condition|)
name|y
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|x
operator|+
name|w
operator|>
name|width
argument_list|()
condition|)
name|x
operator|=
literal|0
expr_stmt|;
name|child
operator|->
name|setGeometry
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|x
operator|+=
name|xoffset
expr_stmt|;
name|y
operator|+=
name|yoffset
expr_stmt|;
name|child
operator|->
name|internalRaise
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|updateWorkspace
argument_list|()
expr_stmt|;
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Arranges all child windows in a tile pattern.      \sa cascade(), arrangeIcons() */
end_comment
begin_function
DECL|function|tile
name|void
name|QWorkspace
operator|::
name|tile
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|oldActive
init|=
name|d
operator|->
name|active
condition|?
name|d
operator|->
name|active
operator|->
name|windowWidget
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|maxWindow
condition|)
name|d
operator|->
name|maxWindow
operator|->
name|showNormal
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|vbar
condition|)
block|{
name|d
operator|->
name|vbar
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|vbar
operator|->
name|setValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|vbar
operator|->
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|hbar
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|hbar
operator|->
name|setValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|hbar
operator|->
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|_q_scrollBarChanged
argument_list|()
expr_stmt|;
block|}
name|int
name|rows
init|=
literal|1
decl_stmt|;
name|int
name|cols
init|=
literal|1
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
name|QWorkspaceChild
modifier|*
name|c
decl_stmt|;
name|QList
argument_list|<
name|QWorkspaceChild
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|d
operator|->
name|windows
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|windows
operator|.
name|end
argument_list|()
condition|)
block|{
name|c
operator|=
operator|*
name|it
expr_stmt|;
operator|++
name|it
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|->
name|windowWidget
argument_list|()
operator|->
name|isHidden
argument_list|()
operator|&&
operator|!
operator|(
name|c
operator|->
name|windowWidget
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
operator|&&
operator|!
name|c
operator|->
name|iconw
condition|)
name|n
operator|++
expr_stmt|;
block|}
while|while
condition|(
name|rows
operator|*
name|cols
operator|<
name|n
condition|)
block|{
if|if
condition|(
name|cols
operator|<=
name|rows
condition|)
name|cols
operator|++
expr_stmt|;
else|else
name|rows
operator|++
expr_stmt|;
block|}
name|int
name|add
init|=
name|cols
operator|*
name|rows
operator|-
name|n
decl_stmt|;
name|bool
modifier|*
name|used
init|=
operator|new
name|bool
index|[
name|cols
operator|*
name|rows
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|*
name|cols
condition|;
name|i
operator|++
control|)
name|used
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|int
name|col
init|=
literal|0
decl_stmt|;
name|int
name|w
init|=
name|width
argument_list|()
operator|/
name|cols
decl_stmt|;
name|int
name|h
init|=
name|height
argument_list|()
operator|/
name|rows
decl_stmt|;
name|it
operator|=
name|d
operator|->
name|windows
operator|.
name|begin
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|windows
operator|.
name|end
argument_list|()
condition|)
block|{
name|c
operator|=
operator|*
name|it
expr_stmt|;
operator|++
name|it
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|iconw
operator|||
name|c
operator|->
name|windowWidget
argument_list|()
operator|->
name|isHidden
argument_list|()
operator|||
operator|(
name|c
operator|->
name|titlebar
operator|&&
name|c
operator|->
name|titlebar
operator|->
name|isTool
argument_list|()
operator|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|row
operator|&&
operator|!
name|col
condition|)
block|{
name|w
operator|-=
name|c
operator|->
name|baseSize
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|-=
name|c
operator|->
name|baseSize
argument_list|()
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|c
operator|->
name|windowWidget
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
condition|)
block|{
name|QPoint
name|p
init|=
name|c
operator|->
name|pos
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|x
argument_list|()
operator|+
name|c
operator|->
name|width
argument_list|()
operator|<
literal|0
condition|)
name|p
operator|.
name|setX
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|x
argument_list|()
operator|>
name|width
argument_list|()
condition|)
name|p
operator|.
name|setX
argument_list|(
name|width
argument_list|()
operator|-
name|c
operator|->
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|y
argument_list|()
operator|+
literal|10
operator|<
literal|0
condition|)
name|p
operator|.
name|setY
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|y
argument_list|()
operator|>
name|height
argument_list|()
condition|)
name|p
operator|.
name|setY
argument_list|(
name|height
argument_list|()
operator|-
name|c
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
name|c
operator|->
name|pos
argument_list|()
condition|)
name|c
operator|->
name|QWidget
operator|::
name|move
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|->
name|showNormal
argument_list|()
expr_stmt|;
name|used
index|[
name|row
operator|*
name|cols
operator|+
name|col
index|]
operator|=
literal|true
expr_stmt|;
name|QSize
name|sz
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|QSize
name|bsize
argument_list|(
name|c
operator|->
name|baseSize
argument_list|()
argument_list|)
decl_stmt|;
name|sz
operator|=
name|sz
operator|.
name|expandedTo
argument_list|(
name|c
operator|->
name|windowWidget
argument_list|()
operator|->
name|minimumSize
argument_list|()
argument_list|)
operator|.
name|boundedTo
argument_list|(
name|c
operator|->
name|windowWidget
argument_list|()
operator|->
name|maximumSize
argument_list|()
argument_list|)
expr_stmt|;
name|sz
operator|+=
name|bsize
expr_stmt|;
if|if
condition|(
name|add
condition|)
block|{
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|==
name|h
operator|+
name|bsize
operator|.
name|height
argument_list|()
condition|)
comment|// no relevant constrains
name|sz
operator|.
name|rheight
argument_list|()
operator|*=
literal|2
expr_stmt|;
name|used
index|[
operator|(
name|row
operator|+
literal|1
operator|)
operator|*
name|cols
operator|+
name|col
index|]
operator|=
literal|true
expr_stmt|;
name|add
operator|--
expr_stmt|;
block|}
name|c
operator|->
name|setGeometry
argument_list|(
name|col
operator|*
name|w
operator|+
name|col
operator|*
name|bsize
operator|.
name|width
argument_list|()
argument_list|,
name|row
operator|*
name|h
operator|+
name|row
operator|*
name|bsize
operator|.
name|height
argument_list|()
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|row
operator|<
name|rows
operator|&&
name|col
operator|<
name|cols
operator|&&
name|used
index|[
name|row
operator|*
name|cols
operator|+
name|col
index|]
condition|)
block|{
name|col
operator|++
expr_stmt|;
if|if
condition|(
name|col
operator|==
name|cols
condition|)
block|{
name|col
operator|=
literal|0
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
operator|delete
index|[]
name|used
expr_stmt|;
name|d
operator|->
name|activateWindow
argument_list|(
name|oldActive
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateWorkspace
argument_list|()
expr_stmt|;
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Arranges all iconified windows at the bottom of the workspace.      \sa cascade(), tile() */
end_comment
begin_function
DECL|function|arrangeIcons
name|void
name|QWorkspace
operator|::
name|arrangeIcons
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
name|QRect
name|cr
init|=
name|d
operator|->
name|updateWorkspace
argument_list|()
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
name|int
name|y
init|=
operator|-
literal|1
decl_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|d
operator|->
name|icons
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|icons
operator|.
name|end
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|i
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
name|y
operator|==
operator|-
literal|1
condition|)
name|y
operator|=
name|cr
operator|.
name|height
argument_list|()
operator|-
name|i
operator|->
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|x
operator|>
literal|0
operator|&&
name|x
operator|+
name|i
operator|->
name|width
argument_list|()
operator|>
name|cr
operator|.
name|width
argument_list|()
condition|)
block|{
name|x
operator|=
literal|0
expr_stmt|;
name|y
operator|-=
name|i
operator|->
name|height
argument_list|()
expr_stmt|;
block|}
name|i
operator|->
name|move
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|x
operator|+=
name|i
operator|->
name|width
argument_list|()
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
name|d
operator|->
name|updateWorkspace
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QWorkspaceChild
name|QWorkspaceChild
operator|::
name|QWorkspaceChild
parameter_list|(
name|QWidget
modifier|*
name|window
parameter_list|,
name|QWorkspace
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|,
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|SubWindow
argument_list|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoMousePropagation
argument_list|)
expr_stmt|;
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|act
operator|=
literal|false
expr_stmt|;
name|iconw
operator|=
literal|0
expr_stmt|;
name|shademode
operator|=
literal|false
expr_stmt|;
name|titlebar
operator|=
literal|0
expr_stmt|;
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
if|if
condition|(
name|window
condition|)
block|{
name|flags
operator||=
operator|(
name|window
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|MSWindowsOwnDC
operator|)
expr_stmt|;
if|if
condition|(
name|flags
condition|)
name|window
operator|->
name|setParent
argument_list|(
name|this
argument_list|,
name|flags
operator|&
operator|~
name|Qt
operator|::
name|WindowType_Mask
argument_list|)
expr_stmt|;
else|else
name|window
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|window
operator|&&
operator|(
name|flags
operator|&
operator|(
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator||
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator||
name|Qt
operator|::
name|WindowContextHelpButtonHint
operator|)
operator|)
condition|)
block|{
name|titlebar
operator|=
operator|new
name|QWorkspaceTitleBar
argument_list|(
name|window
argument_list|,
name|this
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|titlebar
argument_list|,
name|SIGNAL
argument_list|(
name|doActivate
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|activate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|titlebar
argument_list|,
name|SIGNAL
argument_list|(
name|doClose
argument_list|()
argument_list|)
argument_list|,
name|window
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|titlebar
argument_list|,
name|SIGNAL
argument_list|(
name|doMinimize
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showMinimized
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|titlebar
argument_list|,
name|SIGNAL
argument_list|(
name|doNormal
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showNormal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|titlebar
argument_list|,
name|SIGNAL
argument_list|(
name|doMaximize
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showMaximized
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|titlebar
argument_list|,
name|SIGNAL
argument_list|(
name|popupOperationMenu
argument_list|(
name|QPoint
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|popupOperationMenu
argument_list|(
name|QPoint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|titlebar
argument_list|,
name|SIGNAL
argument_list|(
name|showOperationMenu
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|showOperationMenu
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|titlebar
argument_list|,
name|SIGNAL
argument_list|(
name|doShade
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showShaded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|titlebar
argument_list|,
name|SIGNAL
argument_list|(
name|doubleClicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|titleBarDoubleClicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setMinimumSize
argument_list|(
literal|128
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|fw
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MdiSubWindowFrameWidth
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|setContentsMargins
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|,
name|fw
argument_list|,
name|fw
argument_list|)
expr_stmt|;
name|childWidget
operator|=
name|window
expr_stmt|;
if|if
condition|(
operator|!
name|childWidget
condition|)
return|return;
name|setWindowTitle
argument_list|(
name|childWidget
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|p
decl_stmt|;
name|QSize
name|s
decl_stmt|;
name|QSize
name|cs
decl_stmt|;
name|bool
name|hasBeenResized
init|=
name|childWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasBeenResized
condition|)
name|cs
operator|=
name|childWidget
operator|->
name|sizeHint
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|childWidget
operator|->
name|minimumSizeHint
argument_list|()
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|childWidget
operator|->
name|minimumSize
argument_list|()
argument_list|)
operator|.
name|boundedTo
argument_list|(
name|childWidget
operator|->
name|maximumSize
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|cs
operator|=
name|childWidget
operator|->
name|size
argument_list|()
expr_stmt|;
name|windowSize
operator|=
name|cs
expr_stmt|;
name|int
name|th
init|=
name|titlebar
condition|?
name|titlebar
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|titlebar
condition|)
block|{
if|if
condition|(
operator|!
name|childWidget
operator|->
name|windowIcon
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
name|titlebar
operator|->
name|setWindowIcon
argument_list|(
name|childWidget
operator|->
name|windowIcon
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
literal|0
argument_list|,
name|titlebar
argument_list|)
condition|)
name|th
operator|-=
name|contentsRect
argument_list|()
operator|.
name|y
argument_list|()
expr_stmt|;
name|p
operator|=
name|QPoint
argument_list|(
name|contentsRect
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|th
operator|+
name|contentsRect
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
name|QSize
argument_list|(
name|cs
operator|.
name|width
argument_list|()
operator|+
literal|2
operator|*
name|frameWidth
argument_list|()
argument_list|,
name|cs
operator|.
name|height
argument_list|()
operator|+
literal|2
operator|*
name|frameWidth
argument_list|()
operator|+
name|th
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|QPoint
argument_list|(
name|contentsRect
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|contentsRect
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
name|QSize
argument_list|(
name|cs
operator|.
name|width
argument_list|()
operator|+
literal|2
operator|*
name|frameWidth
argument_list|()
argument_list|,
name|cs
operator|.
name|height
argument_list|()
operator|+
literal|2
operator|*
name|frameWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|childWidget
operator|->
name|move
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|resize
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|childWidget
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|widgetResizeHandler
operator|=
operator|new
name|QWidgetResizeHandler
argument_list|(
name|this
argument_list|,
name|window
argument_list|)
expr_stmt|;
name|widgetResizeHandler
operator|->
name|setSizeProtection
argument_list|(
operator|!
name|parent
operator|->
name|scrollBarsEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|widgetResizeHandler
operator|->
name|setFrameWidth
argument_list|(
name|frameWidth
argument_list|()
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widgetResizeHandler
argument_list|,
name|SIGNAL
argument_list|(
name|activate
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|activate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
literal|0
argument_list|,
name|titlebar
argument_list|)
condition|)
name|widgetResizeHandler
operator|->
name|setExtraHeight
argument_list|(
name|th
operator|+
name|contentsRect
argument_list|()
operator|.
name|y
argument_list|()
operator|-
literal|2
operator|*
name|frameWidth
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|widgetResizeHandler
operator|->
name|setExtraHeight
argument_list|(
name|th
operator|+
name|contentsRect
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|frameWidth
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|childWidget
operator|->
name|minimumSize
argument_list|()
operator|==
name|childWidget
operator|->
name|maximumSize
argument_list|()
condition|)
name|widgetResizeHandler
operator|->
name|setActive
argument_list|(
name|QWidgetResizeHandler
operator|::
name|Resize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setBaseSize
argument_list|(
name|baseSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWorkspaceChild
name|QWorkspaceChild
operator|::
name|~
name|QWorkspaceChild
parameter_list|()
block|{
name|QWorkspace
modifier|*
name|workspace
init|=
name|qobject_cast
argument_list|<
name|QWorkspace
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|iconw
condition|)
block|{
if|if
condition|(
name|workspace
condition|)
name|workspace
operator|->
name|d_func
argument_list|()
operator|->
name|removeIcon
argument_list|(
name|iconw
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|iconw
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|workspace
condition|)
block|{
name|workspace
operator|->
name|d_func
argument_list|()
operator|->
name|focus
operator|.
name|removeAll
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|workspace
operator|->
name|d_func
argument_list|()
operator|->
name|active
operator|==
name|this
condition|)
name|workspace
operator|->
name|activatePreviousWindow
argument_list|()
expr_stmt|;
if|if
condition|(
name|workspace
operator|->
name|d_func
argument_list|()
operator|->
name|active
operator|==
name|this
condition|)
name|workspace
operator|->
name|d_func
argument_list|()
operator|->
name|activateWindow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|workspace
operator|->
name|d_func
argument_list|()
operator|->
name|maxWindow
operator|==
name|this
condition|)
block|{
name|workspace
operator|->
name|d_func
argument_list|()
operator|->
name|hideMaximizeControls
argument_list|()
expr_stmt|;
name|workspace
operator|->
name|d_func
argument_list|()
operator|->
name|maxWindow
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_destructor
begin_function
DECL|function|moveEvent
name|void
name|QWorkspaceChild
operator|::
name|moveEvent
parameter_list|(
name|QMoveEvent
modifier|*
parameter_list|)
block|{
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|updateWorkspace
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|QWorkspaceChild
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
block|{
name|bool
name|wasMax
init|=
name|isMaximized
argument_list|()
decl_stmt|;
name|QRect
name|r
init|=
name|contentsRect
argument_list|()
decl_stmt|;
name|QRect
name|cr
decl_stmt|;
name|updateMask
argument_list|()
expr_stmt|;
if|if
condition|(
name|titlebar
condition|)
block|{
name|int
name|th
init|=
name|titlebar
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|QRect
name|tbrect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|th
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
literal|0
argument_list|,
name|titlebar
argument_list|)
condition|)
name|tbrect
operator|=
name|QRect
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|titlebar
operator|->
name|setGeometry
argument_list|(
name|tbrect
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
literal|0
argument_list|,
name|titlebar
argument_list|)
condition|)
name|th
operator|-=
name|frameWidth
argument_list|()
expr_stmt|;
name|cr
operator|=
name|QRect
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|+
name|th
operator|+
operator|(
name|shademode
condition|?
operator|(
name|frameWidth
argument_list|()
operator|*
literal|3
operator|)
else|:
literal|0
operator|)
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
operator|-
name|th
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cr
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|childWidget
condition|)
return|return;
name|bool
name|doContentsResize
init|=
operator|(
name|windowSize
operator|==
name|childWidget
operator|->
name|size
argument_list|()
operator|||
operator|!
operator|(
name|childWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
operator|&&
name|childWidget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_PendingResizeEvent
argument_list|)
operator|)
operator|||
name|childWidget
operator|->
name|isMaximized
argument_list|()
operator|)
decl_stmt|;
name|windowSize
operator|=
name|cr
operator|.
name|size
argument_list|()
expr_stmt|;
name|childWidget
operator|->
name|move
argument_list|(
name|cr
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|doContentsResize
condition|)
name|childWidget
operator|->
name|resize
argument_list|(
name|cr
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|updateWorkspace
argument_list|()
expr_stmt|;
if|if
condition|(
name|wasMax
condition|)
block|{
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|childWidget
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|baseSize
name|QSize
name|QWorkspaceChild
operator|::
name|baseSize
parameter_list|()
specifier|const
block|{
name|int
name|th
init|=
name|titlebar
condition|?
name|titlebar
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
literal|0
argument_list|,
name|titlebar
argument_list|)
condition|)
name|th
operator|-=
name|frameWidth
argument_list|()
expr_stmt|;
return|return
name|QSize
argument_list|(
literal|2
operator|*
name|frameWidth
argument_list|()
argument_list|,
literal|2
operator|*
name|frameWidth
argument_list|()
operator|+
name|th
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSize
name|QWorkspaceChild
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|childWidget
condition|)
return|return
name|QWidget
operator|::
name|sizeHint
argument_list|()
operator|+
name|baseSize
argument_list|()
return|;
name|QSize
name|prefSize
init|=
name|windowWidget
argument_list|()
operator|->
name|sizeHint
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|windowWidget
argument_list|()
operator|->
name|minimumSizeHint
argument_list|()
argument_list|)
decl_stmt|;
name|prefSize
operator|=
name|prefSize
operator|.
name|expandedTo
argument_list|(
name|windowWidget
argument_list|()
operator|->
name|minimumSize
argument_list|()
argument_list|)
operator|.
name|boundedTo
argument_list|(
name|windowWidget
argument_list|()
operator|->
name|maximumSize
argument_list|()
argument_list|)
expr_stmt|;
name|prefSize
operator|+=
name|baseSize
argument_list|()
expr_stmt|;
return|return
name|prefSize
return|;
block|}
end_function
begin_function
DECL|function|minimumSizeHint
name|QSize
name|QWorkspaceChild
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|childWidget
condition|)
return|return
name|QWidget
operator|::
name|minimumSizeHint
argument_list|()
operator|+
name|baseSize
argument_list|()
return|;
name|QSize
name|s
init|=
name|childWidget
operator|->
name|minimumSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
name|s
operator|=
name|childWidget
operator|->
name|minimumSizeHint
argument_list|()
expr_stmt|;
return|return
name|s
operator|+
name|baseSize
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|activate
name|void
name|QWorkspaceChild
operator|::
name|activate
parameter_list|()
block|{
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|activateWindow
argument_list|(
name|windowWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eventFilter
name|bool
name|QWorkspaceChild
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isActive
argument_list|()
operator|&&
operator|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FocusIn
operator|)
condition|)
block|{
if|if
condition|(
name|iconw
condition|)
block|{
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|normalizeWindow
argument_list|(
name|windowWidget
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iconw
condition|)
block|{
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|removeIcon
argument_list|(
name|iconw
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|iconw
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
name|iconw
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|activate
argument_list|()
expr_stmt|;
block|}
comment|// for all widgets except the window, that's the only thing we
comment|// process, and if we have no childWidget we skip totally
if|if
condition|(
name|o
operator|!=
name|childWidget
operator|||
name|childWidget
operator|==
literal|0
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|ShowToParent
case|:
if|if
condition|(
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|focus
operator|.
name|indexOf
argument_list|(
name|this
argument_list|)
operator|<
literal|0
condition|)
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|focus
operator|.
name|append
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowWidget
argument_list|()
operator|&&
operator|(
name|windowWidget
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
condition|)
block|{
name|internalRaise
argument_list|()
expr_stmt|;
name|show
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|showWindow
argument_list|(
name|windowWidget
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|WindowStateChange
case|:
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|QWindowStateChangeEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|isOverride
argument_list|()
condition|)
break|break;
name|Qt
operator|::
name|WindowStates
name|state
init|=
name|windowWidget
argument_list|()
operator|->
name|windowState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowMinimized
condition|)
block|{
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|minimizeWindow
argument_list|(
name|windowWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|&
name|Qt
operator|::
name|WindowMaximized
condition|)
block|{
if|if
condition|(
name|windowWidget
argument_list|()
operator|->
name|maximumSize
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|windowWidget
argument_list|()
operator|->
name|maximumWidth
argument_list|()
operator|<
name|parentWidget
argument_list|()
operator|->
name|width
argument_list|()
operator|||
name|windowWidget
argument_list|()
operator|->
name|maximumHeight
argument_list|()
operator|<
name|parentWidget
argument_list|()
operator|->
name|height
argument_list|()
operator|)
condition|)
block|{
name|windowWidget
argument_list|()
operator|->
name|resize
argument_list|(
name|windowWidget
argument_list|()
operator|->
name|maximumSize
argument_list|()
argument_list|)
expr_stmt|;
name|windowWidget
argument_list|()
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
if|if
condition|(
name|titlebar
condition|)
name|titlebar
operator|->
name|update
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|(
name|windowWidget
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|maximizeWindow
argument_list|(
name|windowWidget
argument_list|()
argument_list|)
expr_stmt|;
else|else
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|normalizeWindow
argument_list|(
name|windowWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|normalizeWindow
argument_list|(
name|windowWidget
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iconw
condition|)
block|{
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|removeIcon
argument_list|(
name|iconw
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|iconw
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|QEvent
operator|::
name|HideToParent
case|:
block|{
name|QWidget
modifier|*
name|w
init|=
name|iconw
decl_stmt|;
if|if
condition|(
name|w
operator|&&
operator|(
name|w
operator|=
name|w
operator|->
name|parentWidget
argument_list|()
operator|)
condition|)
block|{
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|removeIcon
argument_list|(
name|w
argument_list|)
expr_stmt|;
operator|delete
name|w
expr_stmt|;
block|}
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|hideChild
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QEvent
operator|::
name|WindowIconChange
case|:
block|{
name|QWorkspace
modifier|*
name|ws
init|=
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|ws
operator|->
name|d_func
argument_list|()
operator|->
name|maxtools
operator|&&
name|ws
operator|->
name|d_func
argument_list|()
operator|->
name|maxWindow
operator|==
name|this
condition|)
block|{
name|int
name|iconSize
init|=
name|ws
operator|->
name|d_func
argument_list|()
operator|->
name|maxtools
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|ws
operator|->
name|d_func
argument_list|()
operator|->
name|maxtools
operator|->
name|setPixmap
argument_list|(
name|childWidget
operator|->
name|windowIcon
argument_list|()
operator|.
name|pixmap
argument_list|(
name|QSize
argument_list|(
name|iconSize
argument_list|,
name|iconSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// fall through
case|case
name|QEvent
operator|::
name|WindowTitleChange
case|:
name|setWindowTitle
argument_list|(
name|windowWidget
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|titlebar
condition|)
name|titlebar
operator|->
name|update
argument_list|()
expr_stmt|;
if|if
condition|(
name|iconw
condition|)
name|iconw
operator|->
name|update
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ModifiedChange
case|:
name|setWindowModified
argument_list|(
name|windowWidget
argument_list|()
operator|->
name|isWindowModified
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|titlebar
condition|)
name|titlebar
operator|->
name|update
argument_list|()
expr_stmt|;
if|if
condition|(
name|iconw
condition|)
name|iconw
operator|->
name|update
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Resize
case|:
block|{
name|QResizeEvent
modifier|*
name|re
init|=
operator|(
name|QResizeEvent
operator|*
operator|)
name|e
decl_stmt|;
if|if
condition|(
name|re
operator|->
name|size
argument_list|()
operator|!=
name|windowSize
operator|&&
operator|!
name|shademode
condition|)
block|{
name|resize
argument_list|(
name|re
operator|->
name|size
argument_list|()
operator|+
name|baseSize
argument_list|()
argument_list|)
expr_stmt|;
name|childWidget
operator|->
name|update
argument_list|()
expr_stmt|;
comment|//workaround
block|}
block|}
break|break;
case|case
name|QEvent
operator|::
name|WindowDeactivate
case|:
if|if
condition|(
name|titlebar
operator|&&
name|titlebar
operator|->
name|isActive
argument_list|()
condition|)
block|{
name|update
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|QEvent
operator|::
name|WindowActivate
case|:
if|if
condition|(
name|titlebar
operator|&&
name|titlebar
operator|->
name|isActive
argument_list|()
condition|)
block|{
name|update
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|eventFilter
argument_list|(
name|o
argument_list|,
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|childEvent
name|void
name|QWorkspaceChild
operator|::
name|childEvent
parameter_list|(
name|QChildEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ChildRemoved
operator|&&
name|e
operator|->
name|child
argument_list|()
operator|==
name|childWidget
condition|)
block|{
name|childWidget
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|iconw
condition|)
block|{
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|removeIcon
argument_list|(
name|iconw
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|iconw
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|doResize
name|void
name|QWorkspaceChild
operator|::
name|doResize
parameter_list|()
block|{
name|widgetResizeHandler
operator|->
name|doResize
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doMove
name|void
name|QWorkspaceChild
operator|::
name|doMove
parameter_list|()
block|{
name|widgetResizeHandler
operator|->
name|doMove
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|enterEvent
name|void
name|QWorkspaceChild
operator|::
name|enterEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|leaveEvent
name|void
name|QWorkspaceChild
operator|::
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
if|if
condition|(
operator|!
name|widgetResizeHandler
operator|->
name|isButtonDown
argument_list|()
condition|)
name|setCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|QWorkspaceChild
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QStyleOptionFrame
name|opt
decl_stmt|;
name|opt
operator|.
name|rect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|opt
operator|.
name|palette
operator|=
name|palette
argument_list|()
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
name|opt
operator|.
name|lineWidth
operator|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MdiSubWindowFrameWidth
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|opt
operator|.
name|midLineWidth
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|titlebar
operator|&&
name|titlebar
operator|->
name|isActive
argument_list|()
operator|&&
name|isActiveWindow
argument_list|()
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Active
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameWindow
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeEvent
name|void
name|QWorkspaceChild
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|ev
parameter_list|)
block|{
if|if
condition|(
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StyleChange
condition|)
block|{
name|resizeEvent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|iconw
condition|)
block|{
name|QFrame
modifier|*
name|frame
init|=
name|qobject_cast
argument_list|<
name|QFrame
operator|*
argument_list|>
argument_list|(
name|iconw
operator|->
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|frame
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
literal|0
argument_list|,
name|titlebar
argument_list|)
condition|)
block|{
name|frame
operator|->
name|setFrameStyle
argument_list|(
name|QFrame
operator|::
name|StyledPanel
operator||
name|QFrame
operator|::
name|Raised
argument_list|)
expr_stmt|;
name|frame
operator|->
name|resize
argument_list|(
literal|196
operator|+
literal|2
operator|*
name|frame
operator|->
name|frameWidth
argument_list|()
argument_list|,
literal|20
operator|+
literal|2
operator|*
name|frame
operator|->
name|frameWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|->
name|resize
argument_list|(
literal|196
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
name|updateMask
argument_list|()
expr_stmt|;
block|}
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setActive
name|void
name|QWorkspaceChild
operator|::
name|setActive
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
if|if
condition|(
operator|!
name|childWidget
condition|)
return|return;
name|bool
name|hasFocus
init|=
name|isChildOf
argument_list|(
name|window
argument_list|()
operator|->
name|focusWidget
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|act
operator|==
name|b
operator|&&
operator|(
name|act
operator|==
name|hasFocus
operator|)
condition|)
return|return;
name|act
operator|=
name|b
expr_stmt|;
if|if
condition|(
name|titlebar
condition|)
name|titlebar
operator|->
name|setActive
argument_list|(
name|act
argument_list|)
expr_stmt|;
if|if
condition|(
name|iconw
condition|)
name|iconw
operator|->
name|setActive
argument_list|(
name|act
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|wl
init|=
name|childWidget
operator|->
name|findChildren
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|act
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wl
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|wl
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|w
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasFocus
condition|)
block|{
name|QWidget
modifier|*
name|lastfocusw
init|=
name|childWidget
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastfocusw
operator|&&
name|lastfocusw
operator|->
name|focusPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoFocus
condition|)
block|{
name|lastfocusw
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childWidget
operator|->
name|focusPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoFocus
condition|)
block|{
name|childWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// find something, anything, that accepts focus, and use that.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wl
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|wl
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|focusPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoFocus
condition|)
block|{
name|w
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|hasFocus
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasFocus
condition|)
name|setFocus
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wl
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|wl
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|w
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|w
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|isActive
name|bool
name|QWorkspaceChild
operator|::
name|isActive
parameter_list|()
specifier|const
block|{
return|return
name|act
return|;
block|}
end_function
begin_function
DECL|function|windowWidget
name|QWidget
modifier|*
name|QWorkspaceChild
operator|::
name|windowWidget
parameter_list|()
specifier|const
block|{
return|return
name|childWidget
return|;
block|}
end_function
begin_function
DECL|function|isWindowOrIconVisible
name|bool
name|QWorkspaceChild
operator|::
name|isWindowOrIconVisible
parameter_list|()
specifier|const
block|{
return|return
name|childWidget
operator|&&
operator|(
operator|!
name|isHidden
argument_list|()
operator|||
operator|(
name|iconw
operator|&&
operator|!
name|iconw
operator|->
name|isHidden
argument_list|()
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|updateMask
name|void
name|QWorkspaceChild
operator|::
name|updateMask
parameter_list|()
block|{
name|QStyleOptionTitleBar
name|titleBarOptions
decl_stmt|;
name|titleBarOptions
operator|.
name|rect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|titleBarOptions
operator|.
name|titleBarFlags
operator|=
name|windowFlags
argument_list|()
expr_stmt|;
name|titleBarOptions
operator|.
name|titleBarState
operator|=
name|windowState
argument_list|()
expr_stmt|;
name|QStyleHintReturnMask
name|frameMask
decl_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_WindowFrame_Mask
argument_list|,
operator|&
name|titleBarOptions
argument_list|,
name|this
argument_list|,
operator|&
name|frameMask
argument_list|)
condition|)
block|{
name|setMask
argument_list|(
name|frameMask
operator|.
name|region
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|mask
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clearMask
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|iconw
condition|)
block|{
name|QFrame
modifier|*
name|frame
init|=
name|qobject_cast
argument_list|<
name|QFrame
operator|*
argument_list|>
argument_list|(
name|iconw
operator|->
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|titleBarOptions
operator|.
name|rect
operator|=
name|frame
operator|->
name|rect
argument_list|()
expr_stmt|;
name|titleBarOptions
operator|.
name|titleBarFlags
operator|=
name|frame
operator|->
name|windowFlags
argument_list|()
expr_stmt|;
name|titleBarOptions
operator|.
name|titleBarState
operator|=
name|frame
operator|->
name|windowState
argument_list|()
operator||
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_WindowFrame_Mask
argument_list|,
operator|&
name|titleBarOptions
argument_list|,
name|frame
argument_list|,
operator|&
name|frameMask
argument_list|)
condition|)
block|{
name|frame
operator|->
name|setMask
argument_list|(
name|frameMask
operator|.
name|region
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|frame
operator|->
name|mask
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|frame
operator|->
name|clearMask
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|iconWidget
name|QWidget
modifier|*
name|QWorkspaceChild
operator|::
name|iconWidget
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|iconw
condition|)
block|{
name|QWorkspaceChild
modifier|*
name|that
init|=
operator|(
name|QWorkspaceChild
operator|*
operator|)
name|this
decl_stmt|;
name|QFrame
modifier|*
name|frame
init|=
operator|new
name|QFrame
argument_list|(
name|that
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
decl_stmt|;
name|QVBoxLayout
modifier|*
name|vbox
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|vbox
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QWorkspaceTitleBar
modifier|*
name|tb
init|=
operator|new
name|QWorkspaceTitleBar
argument_list|(
name|windowWidget
argument_list|()
argument_list|,
name|frame
argument_list|)
decl_stmt|;
name|vbox
operator|->
name|addWidget
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|tb
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"_workspacechild_icon_"
argument_list|)
argument_list|)
expr_stmt|;
name|QStyleOptionTitleBar
name|opt
decl_stmt|;
name|tb
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|int
name|th
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TitleBarHeight
argument_list|,
operator|&
name|opt
argument_list|,
name|tb
argument_list|)
decl_stmt|;
name|int
name|iconSize
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MdiSubWindowMinimizedWidth
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
literal|0
argument_list|,
name|titlebar
argument_list|)
condition|)
block|{
name|frame
operator|->
name|setFrameStyle
argument_list|(
name|QFrame
operator|::
name|StyledPanel
operator||
name|QFrame
operator|::
name|Raised
argument_list|)
expr_stmt|;
name|frame
operator|->
name|resize
argument_list|(
name|iconSize
operator|+
literal|2
operator|*
name|frame
operator|->
name|frameWidth
argument_list|()
argument_list|,
name|th
operator|+
literal|2
operator|*
name|frame
operator|->
name|frameWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|->
name|resize
argument_list|(
name|iconSize
argument_list|,
name|th
argument_list|)
expr_stmt|;
block|}
name|that
operator|->
name|iconw
operator|=
name|tb
expr_stmt|;
name|that
operator|->
name|updateMask
argument_list|()
expr_stmt|;
name|iconw
operator|->
name|setActive
argument_list|(
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|iconw
argument_list|,
name|SIGNAL
argument_list|(
name|doActivate
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|activate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|iconw
argument_list|,
name|SIGNAL
argument_list|(
name|doClose
argument_list|()
argument_list|)
argument_list|,
name|windowWidget
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|iconw
argument_list|,
name|SIGNAL
argument_list|(
name|doNormal
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showNormal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|iconw
argument_list|,
name|SIGNAL
argument_list|(
name|doMaximize
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showMaximized
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|iconw
argument_list|,
name|SIGNAL
argument_list|(
name|popupOperationMenu
argument_list|(
name|QPoint
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|popupOperationMenu
argument_list|(
name|QPoint
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|iconw
argument_list|,
name|SIGNAL
argument_list|(
name|showOperationMenu
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|showOperationMenu
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|iconw
argument_list|,
name|SIGNAL
argument_list|(
name|doubleClicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|titleBarDoubleClicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|windowWidget
argument_list|()
condition|)
block|{
name|iconw
operator|->
name|setWindowTitle
argument_list|(
name|windowWidget
argument_list|()
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|iconw
operator|->
name|parentWidget
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|showMinimized
name|void
name|QWorkspaceChild
operator|::
name|showMinimized
parameter_list|()
block|{
name|windowWidget
argument_list|()
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMinimized
operator||
operator|(
name|windowWidget
argument_list|()
operator|->
name|windowState
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|WindowMaximized
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showMaximized
name|void
name|QWorkspaceChild
operator|::
name|showMaximized
parameter_list|()
block|{
name|windowWidget
argument_list|()
operator|->
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
operator||
operator|(
name|windowWidget
argument_list|()
operator|->
name|windowState
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|WindowMinimized
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showNormal
name|void
name|QWorkspaceChild
operator|::
name|showNormal
parameter_list|()
block|{
name|windowWidget
argument_list|()
operator|->
name|setWindowState
argument_list|(
name|windowWidget
argument_list|()
operator|->
name|windowState
argument_list|()
operator|&
operator|~
operator|(
name|Qt
operator|::
name|WindowMinimized
operator||
name|Qt
operator|::
name|WindowMaximized
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showShaded
name|void
name|QWorkspaceChild
operator|::
name|showShaded
parameter_list|()
block|{
if|if
condition|(
operator|!
name|titlebar
condition|)
return|return;
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|activateWindow
argument_list|(
name|windowWidget
argument_list|()
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|windowWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|shademode
condition|)
block|{
name|w
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|shademode
operator|=
literal|false
expr_stmt|;
name|resize
argument_list|(
name|shadeRestore
operator|.
name|expandedTo
argument_list|(
name|minimumSizeHint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setMinimumSize
argument_list|(
name|shadeRestoreMin
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|polish
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shadeRestore
operator|=
name|size
argument_list|()
expr_stmt|;
name|shadeRestoreMin
operator|=
name|minimumSize
argument_list|()
expr_stmt|;
name|setMinimumHeight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|shademode
operator|=
literal|true
expr_stmt|;
name|w
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowMinimized
argument_list|)
expr_stmt|;
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowMinimized
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
literal|0
argument_list|,
name|titlebar
argument_list|)
condition|)
name|resize
argument_list|(
name|width
argument_list|()
argument_list|,
name|titlebar
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|resize
argument_list|(
name|width
argument_list|()
argument_list|,
name|titlebar
operator|->
name|height
argument_list|()
operator|+
literal|2
operator|*
name|frameWidth
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|polish
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|titlebar
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|titleBarDoubleClicked
name|void
name|QWorkspaceChild
operator|::
name|titleBarDoubleClicked
parameter_list|()
block|{
if|if
condition|(
operator|!
name|windowWidget
argument_list|()
condition|)
return|return;
if|if
condition|(
name|iconw
condition|)
name|showNormal
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|windowWidget
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
condition|)
name|showShaded
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|windowWidget
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
name|showMaximized
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adjustToFullscreen
name|void
name|QWorkspaceChild
operator|::
name|adjustToFullscreen
parameter_list|()
block|{
if|if
condition|(
operator|!
name|childWidget
condition|)
return|return;
if|if
condition|(
operator|!
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parentWidget
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|maxmenubar
operator|||
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Workspace_FillSpaceOnMaximize
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
block|{
name|setGeometry
argument_list|(
name|parentWidget
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|fw
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MdiSubWindowFrameWidth
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|bool
name|noBorder
init|=
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
literal|0
argument_list|,
name|titlebar
argument_list|)
decl_stmt|;
name|int
name|th
init|=
name|titlebar
condition|?
name|titlebar
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
else|:
literal|0
decl_stmt|;
name|int
name|w
init|=
name|parentWidget
argument_list|()
operator|->
name|width
argument_list|()
operator|+
literal|2
operator|*
name|fw
decl_stmt|;
name|int
name|h
init|=
name|parentWidget
argument_list|()
operator|->
name|height
argument_list|()
operator|+
operator|(
name|noBorder
condition|?
name|fw
else|:
literal|2
operator|*
name|fw
operator|)
operator|+
name|th
decl_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|childWidget
operator|->
name|minimumWidth
argument_list|()
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|childWidget
operator|->
name|minimumHeight
argument_list|()
argument_list|)
expr_stmt|;
name|setGeometry
argument_list|(
operator|-
name|fw
argument_list|,
operator|(
name|noBorder
condition|?
literal|0
else|:
operator|-
name|fw
operator|)
operator|-
name|th
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
block|}
name|childWidget
operator|->
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|overrideWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|internalRaise
name|void
name|QWorkspaceChild
operator|::
name|internalRaise
parameter_list|()
block|{
name|QWidget
modifier|*
name|stackUnderWidget
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|windowWidget
argument_list|()
operator|||
operator|(
name|windowWidget
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
operator|==
literal|0
condition|)
block|{
name|QList
argument_list|<
name|QWorkspaceChild
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parent
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|windows
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
operator|(
operator|(
name|QWorkspace
operator|*
operator|)
name|parent
argument_list|()
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|windows
operator|.
name|end
argument_list|()
condition|)
block|{
name|QWorkspaceChild
modifier|*
name|c
init|=
operator|*
name|it
decl_stmt|;
operator|++
name|it
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|windowWidget
argument_list|()
operator|&&
operator|!
name|c
operator|->
name|windowWidget
argument_list|()
operator|->
name|isHidden
argument_list|()
operator|&&
operator|(
name|c
operator|->
name|windowWidget
argument_list|()
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
operator|)
condition|)
block|{
if|if
condition|(
name|stackUnderWidget
condition|)
name|c
operator|->
name|stackUnder
argument_list|(
name|stackUnderWidget
argument_list|)
expr_stmt|;
else|else
name|c
operator|->
name|raise
argument_list|()
expr_stmt|;
name|stackUnderWidget
operator|=
name|c
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|stackUnderWidget
condition|)
block|{
if|if
condition|(
name|iconw
condition|)
name|iconw
operator|->
name|parentWidget
argument_list|()
operator|->
name|stackUnder
argument_list|(
name|stackUnderWidget
argument_list|)
expr_stmt|;
name|stackUnder
argument_list|(
name|stackUnderWidget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iconw
condition|)
name|iconw
operator|->
name|parentWidget
argument_list|()
operator|->
name|raise
argument_list|()
expr_stmt|;
name|raise
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|show
name|void
name|QWorkspaceChild
operator|::
name|show
parameter_list|()
block|{
if|if
condition|(
name|childWidget
operator|&&
name|childWidget
operator|->
name|isHidden
argument_list|()
condition|)
name|childWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QWidget
operator|::
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scrollBarsEnabled
name|bool
name|QWorkspace
operator|::
name|scrollBarsEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWorkspace
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|vbar
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \property QWorkspace::scrollBarsEnabled     \brief whether the workspace provides scroll bars      If this property is true, the workspace will provide scroll bars if any     of the child windows extend beyond the edges of the visible     workspace. The workspace area will automatically increase to     contain child windows if they are resized beyond the right or     bottom edges of the visible area.      If this property is false (the default), resizing child windows     out of the visible area of the workspace is not permitted, although     it is still possible to position them partially outside the visible area. */
end_comment
begin_function
DECL|function|setScrollBarsEnabled
name|void
name|QWorkspace
operator|::
name|setScrollBarsEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|d
operator|->
name|vbar
operator|!=
literal|0
operator|)
operator|==
name|enable
condition|)
return|return;
name|d
operator|->
name|xoffset
operator|=
name|d
operator|->
name|yoffset
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|enable
condition|)
block|{
name|d
operator|->
name|vbar
operator|=
operator|new
name|QScrollBar
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|vbar
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"vertical scrollbar"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|vbar
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_scrollBarChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|hbar
operator|=
operator|new
name|QScrollBar
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|hbar
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"horizontal scrollbar"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|hbar
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_scrollBarChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|corner
operator|=
operator|new
name|QWidget
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|corner
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
name|d
operator|->
name|corner
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_corner"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateWorkspace
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|delete
name|d
operator|->
name|vbar
expr_stmt|;
operator|delete
name|d
operator|->
name|hbar
expr_stmt|;
operator|delete
name|d
operator|->
name|corner
expr_stmt|;
name|d
operator|->
name|vbar
operator|=
name|d
operator|->
name|hbar
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|corner
operator|=
literal|0
expr_stmt|;
block|}
name|QList
argument_list|<
name|QWorkspaceChild
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|d
operator|->
name|windows
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|windows
operator|.
name|end
argument_list|()
condition|)
block|{
name|QWorkspaceChild
modifier|*
name|child
init|=
operator|*
name|it
decl_stmt|;
operator|++
name|it
expr_stmt|;
name|child
operator|->
name|widgetResizeHandler
operator|->
name|setSizeProtection
argument_list|(
operator|!
name|enable
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateWorkspace
name|QRect
name|QWorkspacePrivate
operator|::
name|updateWorkspace
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
name|QRect
name|cr
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|scrollBarsEnabled
argument_list|()
operator|&&
operator|!
name|maxWindow
condition|)
block|{
name|corner
operator|->
name|raise
argument_list|()
expr_stmt|;
name|vbar
operator|->
name|raise
argument_list|()
expr_stmt|;
name|hbar
operator|->
name|raise
argument_list|()
expr_stmt|;
if|if
condition|(
name|maxWindow
condition|)
name|maxWindow
operator|->
name|internalRaise
argument_list|()
expr_stmt|;
name|QRect
name|r
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QWorkspaceChild
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|windows
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|windows
operator|.
name|end
argument_list|()
condition|)
block|{
name|QWorkspaceChild
modifier|*
name|child
init|=
operator|*
name|it
decl_stmt|;
operator|++
name|it
expr_stmt|;
if|if
condition|(
operator|!
name|child
operator|->
name|isHidden
argument_list|()
condition|)
name|r
operator|=
name|r
operator|.
name|unite
argument_list|(
name|child
operator|->
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|vbar
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|hsbExt
init|=
name|hbar
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|vsbExt
init|=
name|vbar
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
decl_stmt|;
name|bool
name|showv
init|=
name|yoffset
operator|||
name|yoffset
operator|+
name|r
operator|.
name|bottom
argument_list|()
operator|-
name|q
operator|->
name|height
argument_list|()
operator|+
literal|1
operator|>
literal|0
operator|||
name|yoffset
operator|+
name|r
operator|.
name|top
argument_list|()
operator|<
literal|0
decl_stmt|;
name|bool
name|showh
init|=
name|xoffset
operator|||
name|xoffset
operator|+
name|r
operator|.
name|right
argument_list|()
operator|-
name|q
operator|->
name|width
argument_list|()
operator|+
literal|1
operator|>
literal|0
operator|||
name|xoffset
operator|+
name|r
operator|.
name|left
argument_list|()
operator|<
literal|0
decl_stmt|;
if|if
condition|(
name|showh
operator|&&
operator|!
name|showv
condition|)
name|showv
operator|=
name|yoffset
operator|+
name|r
operator|.
name|bottom
argument_list|()
operator|-
name|q
operator|->
name|height
argument_list|()
operator|+
name|hsbExt
operator|+
literal|1
operator|>
literal|0
expr_stmt|;
if|if
condition|(
name|showv
operator|&&
operator|!
name|showh
condition|)
name|showh
operator|=
name|xoffset
operator|+
name|r
operator|.
name|right
argument_list|()
operator|-
name|q
operator|->
name|width
argument_list|()
operator|+
name|vsbExt
operator|+
literal|1
operator|>
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|showh
condition|)
name|hsbExt
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|showv
condition|)
name|vsbExt
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|showv
condition|)
block|{
name|vbar
operator|->
name|setSingleStep
argument_list|(
name|qMax
argument_list|(
name|q
operator|->
name|height
argument_list|()
operator|/
literal|12
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|setPageStep
argument_list|(
name|q
operator|->
name|height
argument_list|()
operator|-
name|hsbExt
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|setMinimum
argument_list|(
name|qMin
argument_list|(
literal|0
argument_list|,
name|yoffset
operator|+
name|qMin
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|setMaximum
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
name|yoffset
operator|+
name|qMax
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|bottom
argument_list|()
operator|-
name|q
operator|->
name|height
argument_list|()
operator|+
name|hsbExt
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|setGeometry
argument_list|(
name|q
operator|->
name|width
argument_list|()
operator|-
name|vsbExt
argument_list|,
literal|0
argument_list|,
name|vsbExt
argument_list|,
name|q
operator|->
name|height
argument_list|()
operator|-
name|hsbExt
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|setValue
argument_list|(
name|yoffset
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|vbar
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|showh
condition|)
block|{
name|hbar
operator|->
name|setSingleStep
argument_list|(
name|qMax
argument_list|(
name|q
operator|->
name|width
argument_list|()
operator|/
literal|12
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|setPageStep
argument_list|(
name|q
operator|->
name|width
argument_list|()
operator|-
name|vsbExt
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|setMinimum
argument_list|(
name|qMin
argument_list|(
literal|0
argument_list|,
name|xoffset
operator|+
name|qMin
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|left
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|setMaximum
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
name|xoffset
operator|+
name|qMax
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|right
argument_list|()
operator|-
name|q
operator|->
name|width
argument_list|()
operator|+
name|vsbExt
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|setGeometry
argument_list|(
literal|0
argument_list|,
name|q
operator|->
name|height
argument_list|()
operator|-
name|hsbExt
argument_list|,
name|q
operator|->
name|width
argument_list|()
operator|-
name|vsbExt
argument_list|,
name|hsbExt
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|setValue
argument_list|(
name|xoffset
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|hbar
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|showh
operator|&&
name|showv
condition|)
block|{
name|corner
operator|->
name|setGeometry
argument_list|(
name|q
operator|->
name|width
argument_list|()
operator|-
name|vsbExt
argument_list|,
name|q
operator|->
name|height
argument_list|()
operator|-
name|hsbExt
argument_list|,
name|vsbExt
argument_list|,
name|hsbExt
argument_list|)
expr_stmt|;
name|corner
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|corner
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
name|vbar
operator|->
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|q
operator|->
name|width
argument_list|()
operator|-
name|vsbExt
argument_list|,
name|q
operator|->
name|height
argument_list|()
operator|-
name|hsbExt
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
operator|::
name|Iterator
name|ii
argument_list|(
name|icons
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|ii
operator|!=
name|icons
operator|.
name|end
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
operator|*
name|ii
decl_stmt|;
operator|++
name|ii
expr_stmt|;
name|int
name|x
init|=
name|w
operator|->
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|w
operator|->
name|y
argument_list|()
decl_stmt|;
name|bool
name|m
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|x
operator|+
name|w
operator|->
name|width
argument_list|()
operator|>
name|cr
operator|.
name|width
argument_list|()
condition|)
block|{
name|m
operator|=
literal|true
expr_stmt|;
name|x
operator|=
name|cr
operator|.
name|width
argument_list|()
operator|-
name|w
operator|->
name|width
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|y
operator|+
name|w
operator|->
name|height
argument_list|()
operator|>
name|cr
operator|.
name|height
argument_list|()
condition|)
block|{
name|y
operator|=
name|cr
operator|.
name|height
argument_list|()
operator|-
name|w
operator|->
name|height
argument_list|()
expr_stmt|;
name|m
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|m
condition|)
block|{
if|if
condition|(
name|QWorkspaceChild
modifier|*
name|child
init|=
name|qobject_cast
argument_list|<
name|QWorkspaceChild
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
name|child
operator|->
name|move
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
else|else
name|w
operator|->
name|move
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cr
return|;
block|}
end_function
begin_function
DECL|function|_q_scrollBarChanged
name|void
name|QWorkspacePrivate
operator|::
name|_q_scrollBarChanged
parameter_list|()
block|{
name|int
name|ver
init|=
name|yoffset
operator|-
name|vbar
operator|->
name|value
argument_list|()
decl_stmt|;
name|int
name|hor
init|=
name|xoffset
operator|-
name|hbar
operator|->
name|value
argument_list|()
decl_stmt|;
name|yoffset
operator|=
name|vbar
operator|->
name|value
argument_list|()
expr_stmt|;
name|xoffset
operator|=
name|hbar
operator|->
name|value
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QWorkspaceChild
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
argument_list|(
name|windows
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|windows
operator|.
name|end
argument_list|()
condition|)
block|{
name|QWorkspaceChild
modifier|*
name|child
init|=
operator|*
name|it
decl_stmt|;
operator|++
name|it
expr_stmt|;
comment|// we do not use move() due to the reimplementation in QWorkspaceChild
name|child
operator|->
name|setGeometry
argument_list|(
name|child
operator|->
name|x
argument_list|()
operator|+
name|hor
argument_list|,
name|child
operator|->
name|y
argument_list|()
operator|+
name|ver
argument_list|,
name|child
operator|->
name|width
argument_list|()
argument_list|,
name|child
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateWorkspace
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \enum QWorkspace::WindowOrder      Specifies the order in which child windows are returned from windowList().      \value CreationOrder The windows are returned in the order of their creation     \value StackingOrder The windows are returned in the order of their stacking */
end_comment
begin_comment
comment|/*!\reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QWorkspace
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|ev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
if|if
condition|(
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StyleChange
condition|)
block|{
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
name|d
operator|->
name|maxWindow
operator|&&
name|d
operator|->
name|maxmenubar
condition|)
block|{
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Workspace_FillSpaceOnMaximize
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
block|{
name|d
operator|->
name|hideMaximizeControls
argument_list|()
expr_stmt|;
comment|//hide any visible maximized controls
name|d
operator|->
name|showMaximizeControls
argument_list|()
expr_stmt|;
comment|//updates the modification state as well
block|}
block|}
block|}
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qworkspace.cpp"
end_include
begin_include
include|#
directive|include
file|"qworkspace.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_WORKSPACE
end_comment
end_unit
