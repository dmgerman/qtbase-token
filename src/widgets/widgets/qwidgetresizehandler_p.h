begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWIDGETRESIZEHANDLER_P_H
end_ifndef
begin_define
DECL|macro|QWIDGETRESIZEHANDLER_P_H
define|#
directive|define
name|QWIDGETRESIZEHANDLER_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  This header file may
end_comment
begin_comment
comment|// change from version to version without notice, or even be
end_comment
begin_comment
comment|// removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qobject.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qpoint.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_RESIZEHANDLER
end_ifndef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QMouseEvent
name|class
name|QMouseEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QKeyEvent
name|class
name|QKeyEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QWidgetResizeHandler
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
expr|enum
name|Action
block|{
name|Move
operator|=
literal|0x01
block|,
name|Resize
operator|=
literal|0x02
block|,
name|Any
operator|=
name|Move
operator||
name|Resize
block|}
block|;
name|explicit
name|QWidgetResizeHandler
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|,
name|QWidget
operator|*
name|cw
operator|=
literal|0
argument_list|)
block|;
name|void
name|setActive
argument_list|(
argument|bool b
argument_list|)
block|{
name|setActive
argument_list|(
name|Any
argument_list|,
name|b
argument_list|)
block|; }
name|void
name|setActive
argument_list|(
argument|Action ac
argument_list|,
argument|bool b
argument_list|)
block|;
name|bool
name|isActive
argument_list|()
specifier|const
block|{
return|return
name|isActive
argument_list|(
name|Any
argument_list|)
return|;
block|}
name|bool
name|isActive
argument_list|(
argument|Action ac
argument_list|)
specifier|const
block|;
name|void
name|setMovingEnabled
argument_list|(
argument|bool b
argument_list|)
block|{
name|movingEnabled
operator|=
name|b
block|; }
name|bool
name|isMovingEnabled
argument_list|()
specifier|const
block|{
return|return
name|movingEnabled
return|;
block|}
name|bool
name|isButtonDown
argument_list|()
specifier|const
block|{
return|return
name|buttonDown
return|;
block|}
name|void
name|setExtraHeight
argument_list|(
argument|int h
argument_list|)
block|{
name|extrahei
operator|=
name|h
block|; }
name|void
name|setSizeProtection
argument_list|(
argument|bool b
argument_list|)
block|{
name|sizeprotect
operator|=
name|b
block|; }
name|void
name|setFrameWidth
argument_list|(
argument|int w
argument_list|)
block|{
name|fw
operator|=
name|w
block|; }
name|void
name|doResize
argument_list|()
block|;
name|void
name|doMove
argument_list|()
block|;
name|Q_SIGNALS
operator|:
name|void
name|activate
argument_list|()
block|;
name|protected
operator|:
name|bool
name|eventFilter
argument_list|(
name|QObject
operator|*
name|o
argument_list|,
name|QEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|mouseMoveEvent
argument_list|(
name|QMouseEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|keyPressEvent
argument_list|(
name|QKeyEvent
operator|*
name|e
argument_list|)
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
name|QWidgetResizeHandler
argument_list|)
expr|enum
name|MousePosition
block|{
name|Nowhere
block|,
name|TopLeft
block|,
name|BottomRight
block|,
name|BottomLeft
block|,
name|TopRight
block|,
name|Top
block|,
name|Bottom
block|,
name|Left
block|,
name|Right
block|,
name|Center
block|}
block|;
name|QWidget
operator|*
name|widget
block|;
name|QWidget
operator|*
name|childWidget
block|;
name|QPoint
name|moveOffset
block|;
name|QPoint
name|invertedMoveOffset
block|;
name|MousePosition
name|mode
block|;
name|int
name|fw
block|;
name|int
name|extrahei
block|;
name|int
name|range
block|;
name|uint
name|buttonDown
operator|:
literal|1
block|;
name|uint
name|moveResizeMode
operator|:
literal|1
block|;
name|uint
name|activeForResize
operator|:
literal|1
block|;
name|uint
name|sizeprotect
operator|:
literal|1
block|;
name|uint
name|movingEnabled
operator|:
literal|1
block|;
name|uint
name|activeForMove
operator|:
literal|1
block|;
name|void
name|setMouseCursor
argument_list|(
argument|MousePosition m
argument_list|)
block|;
name|bool
name|isMove
argument_list|()
specifier|const
block|{
return|return
name|moveResizeMode
operator|&&
name|mode
operator|==
name|Center
return|;
block|}
name|bool
name|isResize
argument_list|()
specifier|const
block|{
return|return
name|moveResizeMode
operator|&&
operator|!
name|isMove
argument_list|()
return|;
block|}
expr|}
block|;
name|QT_END_NAMESPACE
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_RESIZEHANDLER
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWIDGETRESIZEHANDLER_P_H
end_comment
end_unit
