begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtoolbox.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLBOX
end_ifndef
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qeventloop.h>
end_include
begin_include
include|#
directive|include
file|<qlayout.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qscrollarea.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<qtooltip.h>
end_include
begin_include
include|#
directive|include
file|<qabstractbutton.h>
end_include
begin_include
include|#
directive|include
file|"qframe_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QToolBoxButton
class|class
name|QToolBoxButton
super|:
specifier|public
name|QAbstractButton
block|{
name|Q_OBJECT
public|public:
DECL|function|QToolBoxButton
name|QToolBoxButton
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractButton
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|selected
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|indexInPage
argument_list|(
operator|-
literal|1
argument_list|)
block|{
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
expr_stmt|;
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
block|}
DECL|function|setSelected
specifier|inline
name|void
name|setSelected
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|selected
operator|=
name|b
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
DECL|function|setIndex
specifier|inline
name|void
name|setIndex
parameter_list|(
name|int
name|newIndex
parameter_list|)
block|{
name|indexInPage
operator|=
name|newIndex
expr_stmt|;
block|}
name|QSize
name|sizeHint
parameter_list|()
specifier|const
function_decl|;
name|QSize
name|minimumSizeHint
parameter_list|()
specifier|const
function_decl|;
protected|protected:
name|void
name|initStyleOption
parameter_list|(
name|QStyleOptionToolBox
modifier|*
name|opt
parameter_list|)
specifier|const
function_decl|;
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
function_decl|;
private|private:
DECL|member|selected
name|bool
name|selected
decl_stmt|;
DECL|member|indexInPage
name|int
name|indexInPage
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QToolBoxPrivate
class|class
name|QToolBoxPrivate
super|:
specifier|public
name|QFramePrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QToolBox
parameter_list|)
specifier|public
private|:
DECL|struct|Page
struct|struct
name|Page
block|{
DECL|member|button
name|QToolBoxButton
modifier|*
name|button
decl_stmt|;
DECL|member|sv
name|QScrollArea
modifier|*
name|sv
decl_stmt|;
DECL|member|widget
name|QWidget
modifier|*
name|widget
decl_stmt|;
DECL|function|setText
specifier|inline
name|void
name|setText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|button
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
DECL|function|setIcon
specifier|inline
name|void
name|setIcon
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|is
parameter_list|)
block|{
name|button
operator|->
name|setIcon
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
DECL|function|setToolTip
specifier|inline
name|void
name|setToolTip
parameter_list|(
specifier|const
name|QString
modifier|&
name|tip
parameter_list|)
block|{
name|button
operator|->
name|setToolTip
argument_list|(
name|tip
argument_list|)
expr_stmt|;
block|}
DECL|function|toolTip
specifier|inline
name|QString
name|toolTip
parameter_list|()
specifier|const
block|{
return|return
name|button
operator|->
name|toolTip
argument_list|()
return|;
block|}
endif|#
directive|endif
DECL|function|text
specifier|inline
name|QString
name|text
parameter_list|()
specifier|const
block|{
return|return
name|button
operator|->
name|text
argument_list|()
return|;
block|}
DECL|function|icon
specifier|inline
name|QIcon
name|icon
parameter_list|()
specifier|const
block|{
return|return
name|button
operator|->
name|icon
argument_list|()
return|;
block|}
DECL|function|operator ==
specifier|inline
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|Page
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|widget
operator|==
name|other
operator|.
name|widget
return|;
block|}
block|}
struct|;
DECL|typedef|PageList
typedef|typedef
name|QList
argument_list|<
name|Page
argument_list|>
name|PageList
typedef|;
DECL|function|QToolBoxPrivate
specifier|inline
name|QToolBoxPrivate
parameter_list|()
member_init_list|:
name|currentPage
argument_list|(
literal|0
argument_list|)
block|{     }
name|void
name|_q_buttonClicked
parameter_list|()
function_decl|;
name|void
name|_q_widgetDestroyed
parameter_list|(
name|QObject
modifier|*
parameter_list|)
function_decl|;
name|Page
modifier|*
name|page
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
function_decl|;
specifier|const
name|Page
modifier|*
name|page
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
function_decl|;
name|Page
modifier|*
name|page
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
name|void
name|updateTabs
parameter_list|()
function_decl|;
name|void
name|relayout
parameter_list|()
function_decl|;
DECL|member|pageList
name|PageList
name|pageList
decl_stmt|;
DECL|member|layout
name|QVBoxLayout
modifier|*
name|layout
decl_stmt|;
DECL|member|currentPage
name|Page
modifier|*
name|currentPage
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|page
name|QToolBoxPrivate
operator|::
name|Page
modifier|*
name|QToolBoxPrivate
operator|::
name|page
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return
literal|0
return|;
for|for
control|(
name|PageList
operator|::
name|ConstIterator
name|i
init|=
name|pageList
operator|.
name|constBegin
argument_list|()
init|;
name|i
operator|!=
name|pageList
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|(
operator|*
name|i
operator|)
operator|.
name|widget
operator|==
name|widget
condition|)
return|return
operator|(
name|Page
operator|*
operator|)
operator|&
operator|(
operator|*
name|i
operator|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|page
name|QToolBoxPrivate
operator|::
name|Page
modifier|*
name|QToolBoxPrivate
operator|::
name|page
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|pageList
operator|.
name|size
argument_list|()
condition|)
return|return
operator|&
name|pageList
index|[
name|index
index|]
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|page
specifier|const
name|QToolBoxPrivate
operator|::
name|Page
modifier|*
name|QToolBoxPrivate
operator|::
name|page
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|pageList
operator|.
name|size
argument_list|()
condition|)
return|return
operator|&
name|pageList
operator|.
name|at
argument_list|(
name|index
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|updateTabs
name|void
name|QToolBoxPrivate
operator|::
name|updateTabs
parameter_list|()
block|{
name|QToolBoxButton
modifier|*
name|lastButton
init|=
name|currentPage
condition|?
name|currentPage
operator|->
name|button
else|:
literal|0
decl_stmt|;
name|bool
name|after
init|=
literal|false
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|pageList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
specifier|const
name|Page
modifier|&
name|page
init|=
name|pageList
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|QToolBoxButton
modifier|*
name|tB
init|=
name|page
operator|.
name|button
decl_stmt|;
comment|// update indexes, since the updates are delayed, the indexes will be correct
comment|// when we actually paint.
name|tB
operator|->
name|setIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|tW
init|=
name|page
operator|.
name|widget
decl_stmt|;
if|if
condition|(
name|after
condition|)
block|{
name|QPalette
name|p
init|=
name|tB
operator|->
name|palette
argument_list|()
decl_stmt|;
name|p
operator|.
name|setColor
argument_list|(
name|tB
operator|->
name|backgroundRole
argument_list|()
argument_list|,
name|tW
operator|->
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|tW
operator|->
name|backgroundRole
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tB
operator|->
name|setPalette
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|tB
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tB
operator|->
name|backgroundRole
argument_list|()
operator|!=
name|QPalette
operator|::
name|Window
condition|)
block|{
name|tB
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
name|tB
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
name|after
operator|=
name|tB
operator|==
name|lastButton
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSize
name|QToolBoxButton
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|QSize
name|iconSize
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|icon
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|int
name|icone
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SmallIconSize
argument_list|,
literal|0
argument_list|,
name|parentWidget
argument_list|()
comment|/* QToolBox */
argument_list|)
decl_stmt|;
name|iconSize
operator|+=
name|QSize
argument_list|(
name|icone
operator|+
literal|2
argument_list|,
name|icone
argument_list|)
expr_stmt|;
block|}
name|QSize
name|textSize
init|=
name|fontMetrics
argument_list|()
operator|.
name|size
argument_list|(
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|text
argument_list|()
argument_list|)
operator|+
name|QSize
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|QSize
name|total
argument_list|(
name|iconSize
operator|.
name|width
argument_list|()
operator|+
name|textSize
operator|.
name|width
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|iconSize
operator|.
name|height
argument_list|()
argument_list|,
name|textSize
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|total
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|minimumSizeHint
name|QSize
name|QToolBoxButton
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|icon
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QSize
argument_list|()
return|;
name|int
name|icone
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SmallIconSize
argument_list|,
literal|0
argument_list|,
name|parentWidget
argument_list|()
comment|/* QToolBox */
argument_list|)
decl_stmt|;
return|return
name|QSize
argument_list|(
name|icone
operator|+
literal|8
argument_list|,
name|icone
operator|+
literal|8
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|initStyleOption
name|void
name|QToolBoxButton
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionToolBox
modifier|*
name|option
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|option
condition|)
return|return;
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|selected
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
if|if
condition|(
name|isDown
argument_list|()
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
name|option
operator|->
name|text
operator|=
name|text
argument_list|()
expr_stmt|;
name|option
operator|->
name|icon
operator|=
name|icon
argument_list|()
expr_stmt|;
if|if
condition|(
name|QStyleOptionToolBoxV2
modifier|*
name|optionV2
init|=
name|qstyleoption_cast
argument_list|<
name|QStyleOptionToolBoxV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QToolBox
modifier|*
name|toolBox
init|=
cast|static_cast
argument_list|<
name|QToolBox
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
comment|// I know I'm in a tool box.
name|int
name|widgetCount
init|=
name|toolBox
operator|->
name|count
argument_list|()
decl_stmt|;
name|int
name|currIndex
init|=
name|toolBox
operator|->
name|currentIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|widgetCount
operator|==
literal|1
condition|)
block|{
name|optionV2
operator|->
name|position
operator|=
name|QStyleOptionToolBoxV2
operator|::
name|OnlyOneTab
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexInPage
operator|==
literal|0
condition|)
block|{
name|optionV2
operator|->
name|position
operator|=
name|QStyleOptionToolBoxV2
operator|::
name|Beginning
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexInPage
operator|==
name|widgetCount
operator|-
literal|1
condition|)
block|{
name|optionV2
operator|->
name|position
operator|=
name|QStyleOptionToolBoxV2
operator|::
name|End
expr_stmt|;
block|}
else|else
block|{
name|optionV2
operator|->
name|position
operator|=
name|QStyleOptionToolBoxV2
operator|::
name|Middle
expr_stmt|;
block|}
if|if
condition|(
name|currIndex
operator|==
name|indexInPage
operator|-
literal|1
condition|)
block|{
name|optionV2
operator|->
name|selectedPosition
operator|=
name|QStyleOptionToolBoxV2
operator|::
name|PreviousIsSelected
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currIndex
operator|==
name|indexInPage
operator|+
literal|1
condition|)
block|{
name|optionV2
operator|->
name|selectedPosition
operator|=
name|QStyleOptionToolBoxV2
operator|::
name|NextIsSelected
expr_stmt|;
block|}
else|else
block|{
name|optionV2
operator|->
name|selectedPosition
operator|=
name|QStyleOptionToolBoxV2
operator|::
name|NotAdjacent
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|QToolBoxButton
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|paint
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QString
name|text
init|=
name|QAbstractButton
operator|::
name|text
argument_list|()
decl_stmt|;
name|QPainter
modifier|*
name|p
init|=
operator|&
name|paint
decl_stmt|;
name|QStyleOptionToolBoxV2
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_ToolBoxTab
argument_list|,
operator|&
name|opt
argument_list|,
name|p
argument_list|,
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QToolBox      \brief The QToolBox class provides a column of tabbed widget items.       \ingroup basicwidgets     \inmodule QtWidgets      A toolbox is a widget that displays a column of tabs one above the     other, with the current item displayed below the current tab.     Every tab has an index position within the column of tabs. A tab's     item is a QWidget.      Each item has an itemText(), an optional itemIcon(), an optional     itemToolTip(), and a widget(). The item's attributes can be     changed with setItemText(), setItemIcon(), and     setItemToolTip(). Each item can be enabled or disabled     individually with setItemEnabled().      Items are added using addItem(), or inserted at particular     positions using insertItem(). The total number of items is given     by count(). Items can be deleted with delete, or removed from the     toolbox with removeItem(). Combining removeItem() and insertItem()     allows you to move items to different positions.      The index of the current item widget is returned by currentIndex(),     and set with setCurrentIndex(). The index of a particular item can     be found using indexOf(), and the item at a given index is returned     by item().      The currentChanged() signal is emitted when the current item is     changed.      \sa QTabWidget */
end_comment
begin_comment
comment|/*!     \fn void QToolBox::currentChanged(int index)      This signal is emitted when the current item is changed. The new     current item's index is passed in \a index, or -1 if there is no     current item. */
end_comment
begin_comment
comment|/*!     Constructs a new toolbox with the given \a parent and the flags, \a f. */
end_comment
begin_constructor
DECL|function|QToolBox
name|QToolBox
operator|::
name|QToolBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
member_init_list|:
name|QFrame
argument_list|(
operator|*
operator|new
name|QToolBoxPrivate
argument_list|,
name|parent
argument_list|,
name|f
argument_list|)
block|{
name|Q_D
argument_list|(
name|QToolBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|layout
operator|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|layout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the toolbox. */
end_comment
begin_destructor
DECL|function|~QToolBox
name|QToolBox
operator|::
name|~
name|QToolBox
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn int QToolBox::addItem(QWidget *w, const QString&text)     \overload      Adds the widget \a w in a new tab at bottom of the toolbox. The     new tab's text is set to \a text. Returns the new tab's index. */
end_comment
begin_comment
comment|/*!     \fn int QToolBox::addItem(QWidget *widget, const QIcon&iconSet,const QString&text)     Adds the \a widget in a new tab at bottom of the toolbox. The     new tab's text is set to \a text, and the \a iconSet is     displayed to the left of the \a text.  Returns the new tab's index. */
end_comment
begin_comment
comment|/*!     \fn int QToolBox::insertItem(int index, QWidget *widget, const QString&text)     \overload      Inserts the \a widget at position \a index, or at the bottom     of the toolbox if \a index is out of range. The new item's text is     set to \a text. Returns the new item's index. */
end_comment
begin_comment
comment|/*!     Inserts the \a widget at position \a index, or at the bottom     of the toolbox if \a index is out of range. The new item's text     is set to \a text, and the \a icon is displayed to the left of     the \a text. Returns the new item's index. */
end_comment
begin_function
DECL|function|insertItem
name|int
name|QToolBox
operator|::
name|insertItem
parameter_list|(
name|int
name|index
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return
operator|-
literal|1
return|;
name|Q_D
argument_list|(
name|QToolBox
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|widget
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_widgetDestroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QToolBoxPrivate
operator|::
name|Page
name|c
decl_stmt|;
name|c
operator|.
name|widget
operator|=
name|widget
expr_stmt|;
name|c
operator|.
name|button
operator|=
operator|new
name|QToolBoxButton
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|c
operator|.
name|button
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_toolbox_toolboxbutton"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|c
operator|.
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_buttonClicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|sv
operator|=
operator|new
name|QScrollArea
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|c
operator|.
name|sv
operator|->
name|setWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|c
operator|.
name|sv
operator|->
name|setWidgetResizable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|c
operator|.
name|sv
operator|->
name|hide
argument_list|()
expr_stmt|;
name|c
operator|.
name|sv
operator|->
name|setFrameStyle
argument_list|(
name|QFrame
operator|::
name|NoFrame
argument_list|)
expr_stmt|;
name|c
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|c
operator|.
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
operator|(
name|int
operator|)
name|d
operator|->
name|pageList
operator|.
name|count
argument_list|()
condition|)
block|{
name|index
operator|=
name|d
operator|->
name|pageList
operator|.
name|count
argument_list|()
expr_stmt|;
name|d
operator|->
name|pageList
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|d
operator|->
name|layout
operator|->
name|addWidget
argument_list|(
name|c
operator|.
name|button
argument_list|)
expr_stmt|;
name|d
operator|->
name|layout
operator|->
name|addWidget
argument_list|(
name|c
operator|.
name|sv
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
literal|0
condition|)
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|pageList
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|d
operator|->
name|relayout
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentPage
condition|)
block|{
name|QWidget
modifier|*
name|current
init|=
name|d
operator|->
name|currentPage
operator|->
name|widget
decl_stmt|;
name|int
name|oldindex
init|=
name|indexOf
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<=
name|oldindex
condition|)
block|{
name|d
operator|->
name|currentPage
operator|=
literal|0
expr_stmt|;
comment|// trigger change
name|setCurrentIndex
argument_list|(
name|oldindex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|c
operator|.
name|button
operator|->
name|show
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateTabs
argument_list|()
expr_stmt|;
name|itemInserted
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
end_function
begin_function
DECL|function|_q_buttonClicked
name|void
name|QToolBoxPrivate
operator|::
name|_q_buttonClicked
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QToolBox
argument_list|)
expr_stmt|;
name|QToolBoxButton
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBoxButton
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|item
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QToolBoxPrivate
operator|::
name|PageList
operator|::
name|ConstIterator
name|i
init|=
name|pageList
operator|.
name|constBegin
argument_list|()
init|;
name|i
operator|!=
name|pageList
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|(
operator|*
name|i
operator|)
operator|.
name|button
operator|==
name|tb
condition|)
block|{
name|item
operator|=
operator|(
operator|*
name|i
operator|)
operator|.
name|widget
expr_stmt|;
break|break;
block|}
name|q
operator|->
name|setCurrentIndex
argument_list|(
name|q
operator|->
name|indexOf
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QToolBox::count     \brief The number of items contained in the toolbox.      By default, this property has a value of 0. */
end_comment
begin_function
DECL|function|count
name|int
name|QToolBox
operator|::
name|count
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|pageList
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setCurrentIndex
name|void
name|QToolBox
operator|::
name|setCurrentIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolBox
argument_list|)
expr_stmt|;
name|QToolBoxPrivate
operator|::
name|Page
modifier|*
name|c
init|=
name|d
operator|->
name|page
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|||
name|d
operator|->
name|currentPage
operator|==
name|c
condition|)
return|return;
name|c
operator|->
name|button
operator|->
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentPage
condition|)
block|{
name|d
operator|->
name|currentPage
operator|->
name|sv
operator|->
name|hide
argument_list|()
expr_stmt|;
name|d
operator|->
name|currentPage
operator|->
name|button
operator|->
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|currentPage
operator|=
name|c
expr_stmt|;
name|d
operator|->
name|currentPage
operator|->
name|sv
operator|->
name|show
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateTabs
argument_list|()
expr_stmt|;
emit|emit
name|currentChanged
argument_list|(
name|index
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|relayout
name|void
name|QToolBoxPrivate
operator|::
name|relayout
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QToolBox
argument_list|)
expr_stmt|;
operator|delete
name|layout
expr_stmt|;
name|layout
operator|=
operator|new
name|QVBoxLayout
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|QToolBoxPrivate
operator|::
name|PageList
operator|::
name|ConstIterator
name|i
init|=
name|pageList
operator|.
name|constBegin
argument_list|()
init|;
name|i
operator|!=
name|pageList
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|layout
operator|->
name|addWidget
argument_list|(
operator|(
operator|*
name|i
operator|)
operator|.
name|button
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
operator|(
operator|*
name|i
operator|)
operator|.
name|sv
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_widgetDestroyed
name|void
name|QToolBoxPrivate
operator|::
name|_q_widgetDestroyed
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QToolBox
argument_list|)
expr_stmt|;
comment|// no verification - vtbl corrupted already
name|QWidget
modifier|*
name|p
init|=
operator|(
name|QWidget
operator|*
operator|)
name|object
decl_stmt|;
name|QToolBoxPrivate
operator|::
name|Page
modifier|*
name|c
init|=
name|page
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|||
operator|!
name|c
condition|)
return|return;
name|layout
operator|->
name|removeWidget
argument_list|(
name|c
operator|->
name|sv
argument_list|)
expr_stmt|;
name|layout
operator|->
name|removeWidget
argument_list|(
name|c
operator|->
name|button
argument_list|)
expr_stmt|;
name|c
operator|->
name|sv
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
comment|// page might still be a child of sv
operator|delete
name|c
operator|->
name|button
expr_stmt|;
name|bool
name|removeCurrent
init|=
name|c
operator|==
name|currentPage
decl_stmt|;
name|pageList
operator|.
name|removeAll
argument_list|(
operator|*
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pageList
operator|.
name|count
argument_list|()
condition|)
block|{
name|currentPage
operator|=
literal|0
expr_stmt|;
emit|emit
name|q
operator|->
name|currentChanged
argument_list|(
operator|-
literal|1
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|removeCurrent
condition|)
block|{
name|currentPage
operator|=
literal|0
expr_stmt|;
name|q
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Removes the item at position \a index from the toolbox. Note that     the widget is \e not deleted. */
end_comment
begin_function
DECL|function|removeItem
name|void
name|QToolBox
operator|::
name|removeItem
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|widget
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|disconnect
argument_list|(
name|w
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_widgetDestroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// destroy internal data
name|d
operator|->
name|_q_widgetDestroyed
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|itemRemoved
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QToolBox::currentIndex     \brief the index of the current item      By default, for an empty toolbox, this property has a value of -1.      \sa indexOf(), widget() */
end_comment
begin_function
DECL|function|currentIndex
name|int
name|QToolBox
operator|::
name|currentIndex
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|currentPage
condition|?
name|indexOf
argument_list|(
name|d
operator|->
name|currentPage
operator|->
name|widget
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the current widget, or 0 if there is no such item.      \sa currentIndex(), setCurrentWidget() */
end_comment
begin_function
DECL|function|currentWidget
name|QWidget
modifier|*
name|QToolBox
operator|::
name|currentWidget
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|currentPage
condition|?
name|d
operator|->
name|currentPage
operator|->
name|widget
else|:
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!   Makes\a widget the current widget. The \a widget must be an item in this tool box.    \sa addItem(), setCurrentIndex(), currentWidget()  */
end_comment
begin_function
DECL|function|setCurrentWidget
name|void
name|QToolBox
operator|::
name|setCurrentWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|int
name|i
init|=
name|indexOf
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
name|setCurrentIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|(
literal|"QToolBox::setCurrentWidget: widget not contained in tool box"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the widget at position \a index, or 0 if there is no such     item. */
end_comment
begin_function
DECL|function|widget
name|QWidget
modifier|*
name|QToolBox
operator|::
name|widget
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
operator|(
name|int
operator|)
name|d
operator|->
name|pageList
operator|.
name|size
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|d
operator|->
name|pageList
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|widget
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the index of \a widget, or -1 if the item does not     exist. */
end_comment
begin_function
DECL|function|indexOf
name|int
name|QToolBox
operator|::
name|indexOf
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolBox
argument_list|)
expr_stmt|;
name|QToolBoxPrivate
operator|::
name|Page
modifier|*
name|c
init|=
operator|(
name|widget
condition|?
name|d
operator|->
name|page
argument_list|(
name|widget
argument_list|)
else|:
literal|0
operator|)
decl_stmt|;
return|return
name|c
condition|?
name|d
operator|->
name|pageList
operator|.
name|indexOf
argument_list|(
operator|*
name|c
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     If \a enabled is true then the item at position \a index is enabled; otherwise     the item at position \a index is disabled. */
end_comment
begin_function
DECL|function|setItemEnabled
name|void
name|QToolBox
operator|::
name|setItemEnabled
parameter_list|(
name|int
name|index
parameter_list|,
name|bool
name|enabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolBox
argument_list|)
expr_stmt|;
name|QToolBoxPrivate
operator|::
name|Page
modifier|*
name|c
init|=
name|d
operator|->
name|page
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
condition|)
return|return;
name|c
operator|->
name|button
operator|->
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|enabled
operator|&&
name|c
operator|==
name|d
operator|->
name|currentPage
condition|)
block|{
name|int
name|curIndexUp
init|=
name|index
decl_stmt|;
name|int
name|curIndexDown
init|=
name|curIndexUp
decl_stmt|;
specifier|const
name|int
name|count
init|=
name|d
operator|->
name|pageList
operator|.
name|count
argument_list|()
decl_stmt|;
while|while
condition|(
name|curIndexUp
operator|>
literal|0
operator|||
name|curIndexDown
operator|<
name|count
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|curIndexDown
operator|<
name|count
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|page
argument_list|(
operator|++
name|curIndexDown
argument_list|)
operator|->
name|button
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|index
operator|=
name|curIndexDown
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|curIndexUp
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|page
argument_list|(
operator|--
name|curIndexUp
argument_list|)
operator|->
name|button
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|index
operator|=
name|curIndexUp
expr_stmt|;
break|break;
block|}
block|}
block|}
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Sets the text of the item at position \a index to \a text.      If the provided text contains an ampersand character ('&'), a     mnemonic is automatically created for it. The character that     follows the '&' will be used as the shortcut key. Any previous     mnemonic will be overwritten, or cleared if no mnemonic is defined     by the text. See the \l {QShortcut#mnemonic}{QShortcut}     documentation for details (to display an actual ampersand, use     '&&'). */
end_comment
begin_function
DECL|function|setItemText
name|void
name|QToolBox
operator|::
name|setItemText
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolBox
argument_list|)
expr_stmt|;
name|QToolBoxPrivate
operator|::
name|Page
modifier|*
name|c
init|=
name|d
operator|->
name|page
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
condition|)
name|c
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the icon of the item at position \a index to \a icon. */
end_comment
begin_function
DECL|function|setItemIcon
name|void
name|QToolBox
operator|::
name|setItemIcon
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolBox
argument_list|)
expr_stmt|;
name|QToolBoxPrivate
operator|::
name|Page
modifier|*
name|c
init|=
name|d
operator|->
name|page
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
condition|)
name|c
operator|->
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
end_ifndef
begin_comment
comment|/*!     Sets the tooltip of the item at position \a index to \a toolTip. */
end_comment
begin_function
DECL|function|setItemToolTip
name|void
name|QToolBox
operator|::
name|setItemToolTip
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QString
modifier|&
name|toolTip
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolBox
argument_list|)
expr_stmt|;
name|QToolBoxPrivate
operator|::
name|Page
modifier|*
name|c
init|=
name|d
operator|->
name|page
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
condition|)
name|c
operator|->
name|setToolTip
argument_list|(
name|toolTip
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLTIP
end_comment
begin_comment
comment|/*!     Returns true if the item at position \a index is enabled; otherwise returns false. */
end_comment
begin_function
DECL|function|isItemEnabled
name|bool
name|QToolBox
operator|::
name|isItemEnabled
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolBox
argument_list|)
expr_stmt|;
specifier|const
name|QToolBoxPrivate
operator|::
name|Page
modifier|*
name|c
init|=
name|d
operator|->
name|page
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|c
operator|&&
name|c
operator|->
name|button
operator|->
name|isEnabled
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the text of the item at position \a index, or an empty string if     \a index is out of range. */
end_comment
begin_function
DECL|function|itemText
name|QString
name|QToolBox
operator|::
name|itemText
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolBox
argument_list|)
expr_stmt|;
specifier|const
name|QToolBoxPrivate
operator|::
name|Page
modifier|*
name|c
init|=
name|d
operator|->
name|page
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
operator|(
name|c
condition|?
name|c
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the icon of the item at position \a index, or a null     icon if \a index is out of range. */
end_comment
begin_function
DECL|function|itemIcon
name|QIcon
name|QToolBox
operator|::
name|itemIcon
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolBox
argument_list|)
expr_stmt|;
specifier|const
name|QToolBoxPrivate
operator|::
name|Page
modifier|*
name|c
init|=
name|d
operator|->
name|page
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
operator|(
name|c
condition|?
name|c
operator|->
name|icon
argument_list|()
else|:
name|QIcon
argument_list|()
operator|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
end_ifndef
begin_comment
comment|/*!     Returns the tooltip of the item at position \a index, or an     empty string if \a index is out of range. */
end_comment
begin_function
DECL|function|itemToolTip
name|QString
name|QToolBox
operator|::
name|itemToolTip
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolBox
argument_list|)
expr_stmt|;
specifier|const
name|QToolBoxPrivate
operator|::
name|Page
modifier|*
name|c
init|=
name|d
operator|->
name|page
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
operator|(
name|c
condition|?
name|c
operator|->
name|toolTip
argument_list|()
else|:
name|QString
argument_list|()
operator|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLTIP
end_comment
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|showEvent
name|void
name|QToolBox
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
name|e
parameter_list|)
block|{
name|QWidget
operator|::
name|showEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QToolBox
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|ev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StyleChange
condition|)
name|d
operator|->
name|updateTabs
argument_list|()
expr_stmt|;
name|QFrame
operator|::
name|changeEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   This virtual handler is called after a new item was added or   inserted at position \a index.    \sa itemRemoved()  */
end_comment
begin_function
DECL|function|itemInserted
name|void
name|QToolBox
operator|::
name|itemInserted
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|index
argument_list|)
block|}
end_function
begin_comment
comment|/*!   This virtual handler is called after an item was removed from   position \a index.    \sa itemInserted()  */
end_comment
begin_function
DECL|function|itemRemoved
name|void
name|QToolBox
operator|::
name|itemRemoved
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|index
argument_list|)
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QToolBox
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
return|return
name|QFrame
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qtoolbox.cpp"
end_include
begin_include
include|#
directive|include
file|"qtoolbox.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_TOOLBOX
end_comment
end_unit
