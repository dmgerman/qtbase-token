begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"private/qlayoutengine_p.h"
end_include
begin_include
include|#
directive|include
file|"qabstractitemdelegate.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qcursor.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"qstylepainter.h"
end_include
begin_include
include|#
directive|include
file|"qtabwidget.h"
end_include
begin_include
include|#
directive|include
file|"qtooltip.h"
end_include
begin_include
include|#
directive|include
file|"qwhatsthis.h"
end_include
begin_include
include|#
directive|include
file|"private/qtextengine_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qaccessible.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_OSX
end_ifdef
begin_include
include|#
directive|include
file|<qpa/qplatformnativeinterface.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"private/qtabbar_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
end_ifdef
begin_include
include|#
directive|include
file|<private/qt_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_cocoa_helpers_mac_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|verticalTabs
specifier|inline
specifier|static
name|bool
name|verticalTabs
parameter_list|(
name|QTabBar
operator|::
name|Shape
name|shape
parameter_list|)
block|{
return|return
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedWest
operator|||
name|shape
operator|==
name|QTabBar
operator|::
name|RoundedEast
operator|||
name|shape
operator|==
name|QTabBar
operator|::
name|TriangularWest
operator|||
name|shape
operator|==
name|QTabBar
operator|::
name|TriangularEast
return|;
block|}
end_function
begin_function
DECL|function|updateMacBorderMetrics
name|void
name|QTabBarPrivate
operator|::
name|updateMacBorderMetrics
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_OSX
argument_list|)
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
comment|// Extend the unified title and toolbar area to cover the tab bar iff
comment|// 1) the tab bar is in document mode
comment|// 2) the tab bar is directly below an "unified" area.
comment|// The extending itself is done in the Cocoa platform plugin and Mac style,
comment|// this function registers geometry and visibility state for the tab bar.
comment|// Calculate geometry
name|int
name|upper
decl_stmt|,
name|lower
decl_stmt|;
if|if
condition|(
name|documentMode
condition|)
block|{
name|QPoint
name|windowPos
init|=
name|q
operator|->
name|mapTo
argument_list|(
name|q
operator|->
name|window
argument_list|()
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|upper
operator|=
name|windowPos
operator|.
name|y
argument_list|()
expr_stmt|;
name|int
name|tabStripHeight
init|=
name|q
operator|->
name|tabSizeHint
argument_list|(
literal|0
argument_list|)
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|pixelTweak
init|=
operator|-
literal|3
decl_stmt|;
name|lower
operator|=
name|upper
operator|+
name|tabStripHeight
operator|+
name|pixelTweak
expr_stmt|;
block|}
else|else
block|{
name|upper
operator|=
literal|0
expr_stmt|;
name|lower
operator|=
literal|0
expr_stmt|;
block|}
name|QPlatformNativeInterface
modifier|*
name|nativeInterface
init|=
name|QGuiApplication
operator|::
name|platformNativeInterface
argument_list|()
decl_stmt|;
name|quintptr
name|identifier
init|=
cast|reinterpret_cast
argument_list|<
name|quintptr
argument_list|>
argument_list|(
name|q
argument_list|)
decl_stmt|;
comment|// Set geometry
name|QPlatformNativeInterface
operator|::
name|NativeResourceForIntegrationFunction
name|function
init|=
name|nativeInterface
operator|->
name|nativeResourceFunctionForIntegration
argument_list|(
literal|"registerContentBorderArea"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|function
condition|)
return|return;
comment|// Not Cocoa platform plugin.
typedef|typedef
name|void
function_decl|(
modifier|*
name|RegisterContentBorderAreaFunction
function_decl|)
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|quintptr
name|identifier
parameter_list|,
name|int
name|upper
parameter_list|,
name|int
name|lower
parameter_list|)
function_decl|;
operator|(
cast|reinterpret_cast
argument_list|<
name|RegisterContentBorderAreaFunction
argument_list|>
argument_list|(
name|function
argument_list|)
operator|)
operator|(
name|q
operator|->
name|window
argument_list|()
operator|->
name|windowHandle
argument_list|()
operator|,
name|identifier
operator|,
name|upper
operator|,
name|lower
operator|)
expr_stmt|;
comment|// Set visibility state
name|function
operator|=
name|nativeInterface
operator|->
name|nativeResourceFunctionForIntegration
argument_list|(
literal|"setContentBorderAreaEnabled"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|function
condition|)
return|return;
typedef|typedef
name|void
function_decl|(
modifier|*
name|SetContentBorderAreaEnabledFunction
function_decl|)
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|,
name|quintptr
name|identifier
parameter_list|,
name|bool
name|enable
parameter_list|)
function_decl|;
operator|(
cast|reinterpret_cast
argument_list|<
name|SetContentBorderAreaEnabledFunction
argument_list|>
argument_list|(
name|function
argument_list|)
operator|)
operator|(
name|q
operator|->
name|window
argument_list|()
operator|->
name|windowHandle
argument_list|()
operator|,
name|identifier
operator|,
name|q
operator|->
name|isVisible
argument_list|()
operator|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Initialize \a option with the values from the tab at \a tabIndex. This method     is useful for subclasses when they need a QStyleOptionTab,     but don't want to fill in all the information themselves.      \sa QStyleOption::initFrom(), QTabWidget::initStyleOption() */
end_comment
begin_function
DECL|function|initStyleOption
name|void
name|QTabBar
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionTab
modifier|*
name|option
parameter_list|,
name|int
name|tabIndex
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
name|int
name|totalTabs
init|=
name|d
operator|->
name|tabList
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|option
operator|||
operator|(
name|tabIndex
operator|<
literal|0
operator|||
name|tabIndex
operator|>=
name|totalTabs
operator|)
condition|)
return|return;
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|&
name|tab
init|=
name|d
operator|->
name|tabList
operator|.
name|at
argument_list|(
name|tabIndex
argument_list|)
decl_stmt|;
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|option
operator|->
name|state
operator|&=
operator|~
operator|(
name|QStyle
operator|::
name|State_HasFocus
operator||
name|QStyle
operator|::
name|State_MouseOver
operator|)
expr_stmt|;
name|option
operator|->
name|rect
operator|=
name|tabRect
argument_list|(
name|tabIndex
argument_list|)
expr_stmt|;
name|bool
name|isCurrent
init|=
name|tabIndex
operator|==
name|d
operator|->
name|currentIndex
decl_stmt|;
name|option
operator|->
name|row
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|tabIndex
operator|==
name|d
operator|->
name|pressedIndex
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
if|if
condition|(
name|isCurrent
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
if|if
condition|(
name|isCurrent
operator|&&
name|hasFocus
argument_list|()
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_HasFocus
expr_stmt|;
if|if
condition|(
operator|!
name|tab
operator|.
name|enabled
condition|)
name|option
operator|->
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|isActiveWindow
argument_list|()
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Active
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|dragInProgress
operator|&&
name|option
operator|->
name|rect
operator|==
name|d
operator|->
name|hoverRect
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
name|option
operator|->
name|shape
operator|=
name|d
operator|->
name|shape
expr_stmt|;
name|option
operator|->
name|text
operator|=
name|tab
operator|.
name|text
expr_stmt|;
if|if
condition|(
name|tab
operator|.
name|textColor
operator|.
name|isValid
argument_list|()
condition|)
name|option
operator|->
name|palette
operator|.
name|setColor
argument_list|(
name|foregroundRole
argument_list|()
argument_list|,
name|tab
operator|.
name|textColor
argument_list|)
expr_stmt|;
name|option
operator|->
name|icon
operator|=
name|tab
operator|.
name|icon
expr_stmt|;
name|option
operator|->
name|iconSize
operator|=
name|iconSize
argument_list|()
expr_stmt|;
comment|// Will get the default value then.
name|option
operator|->
name|leftButtonSize
operator|=
name|tab
operator|.
name|leftWidget
condition|?
name|tab
operator|.
name|leftWidget
operator|->
name|size
argument_list|()
else|:
name|QSize
argument_list|()
expr_stmt|;
name|option
operator|->
name|rightButtonSize
operator|=
name|tab
operator|.
name|rightWidget
condition|?
name|tab
operator|.
name|rightWidget
operator|->
name|size
argument_list|()
else|:
name|QSize
argument_list|()
expr_stmt|;
name|option
operator|->
name|documentMode
operator|=
name|d
operator|->
name|documentMode
expr_stmt|;
if|if
condition|(
name|tabIndex
operator|>
literal|0
operator|&&
name|tabIndex
operator|-
literal|1
operator|==
name|d
operator|->
name|currentIndex
condition|)
name|option
operator|->
name|selectedPosition
operator|=
name|QStyleOptionTab
operator|::
name|PreviousIsSelected
expr_stmt|;
elseif|else
if|if
condition|(
name|tabIndex
operator|+
literal|1
operator|<
name|totalTabs
operator|&&
name|tabIndex
operator|+
literal|1
operator|==
name|d
operator|->
name|currentIndex
condition|)
name|option
operator|->
name|selectedPosition
operator|=
name|QStyleOptionTab
operator|::
name|NextIsSelected
expr_stmt|;
else|else
name|option
operator|->
name|selectedPosition
operator|=
name|QStyleOptionTab
operator|::
name|NotAdjacent
expr_stmt|;
name|bool
name|paintBeginning
init|=
operator|(
name|tabIndex
operator|==
literal|0
operator|)
operator|||
operator|(
name|d
operator|->
name|dragInProgress
operator|&&
name|tabIndex
operator|==
name|d
operator|->
name|pressedIndex
operator|+
literal|1
operator|)
decl_stmt|;
name|bool
name|paintEnd
init|=
operator|(
name|tabIndex
operator|==
name|totalTabs
operator|-
literal|1
operator|)
operator|||
operator|(
name|d
operator|->
name|dragInProgress
operator|&&
name|tabIndex
operator|==
name|d
operator|->
name|pressedIndex
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|paintBeginning
condition|)
block|{
if|if
condition|(
name|paintEnd
condition|)
name|option
operator|->
name|position
operator|=
name|QStyleOptionTab
operator|::
name|OnlyOneTab
expr_stmt|;
else|else
name|option
operator|->
name|position
operator|=
name|QStyleOptionTab
operator|::
name|Beginning
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|paintEnd
condition|)
block|{
name|option
operator|->
name|position
operator|=
name|QStyleOptionTab
operator|::
name|End
expr_stmt|;
block|}
else|else
block|{
name|option
operator|->
name|position
operator|=
name|QStyleOptionTab
operator|::
name|Middle
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
if|if
condition|(
specifier|const
name|QTabWidget
modifier|*
name|tw
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
condition|)
block|{
name|option
operator|->
name|features
operator||=
name|QStyleOptionTab
operator|::
name|HasFrame
expr_stmt|;
if|if
condition|(
name|tw
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopLeftCorner
argument_list|)
operator|||
name|tw
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|BottomLeftCorner
argument_list|)
condition|)
name|option
operator|->
name|cornerWidgets
operator||=
name|QStyleOptionTab
operator|::
name|LeftCornerWidget
expr_stmt|;
if|if
condition|(
name|tw
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
operator|||
name|tw
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|BottomRightCorner
argument_list|)
condition|)
name|option
operator|->
name|cornerWidgets
operator||=
name|QStyleOptionTab
operator|::
name|RightCornerWidget
expr_stmt|;
block|}
endif|#
directive|endif
name|QRect
name|textRect
init|=
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabBarTabText
argument_list|,
name|option
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|option
operator|->
name|text
operator|=
name|fontMetrics
argument_list|()
operator|.
name|elidedText
argument_list|(
name|option
operator|->
name|text
argument_list|,
name|d
operator|->
name|elideMode
argument_list|,
name|textRect
operator|.
name|width
argument_list|()
argument_list|,
name|Qt
operator|::
name|TextShowMnemonic
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QTabBar     \brief The QTabBar class provides a tab bar, e.g. for use in tabbed dialogs.      \ingroup basicwidgets     \inmodule QtWidgets      QTabBar is straightforward to use; it draws the tabs using one of     the predefined \l{QTabBar::Shape}{shapes}, and emits a     signal when a tab is selected. It can be subclassed to tailor the     look and feel. Qt also provides a ready-made \l{QTabWidget}.      Each tab has a tabText(), an optional tabIcon(), an optional     tabToolTip(), optional tabWhatsThis() and optional tabData().     The tabs's attributes can be changed with setTabText(), setTabIcon(),     setTabToolTip(), setTabWhatsThis and setTabData(). Each tabs can be     enabled or disabled individually with setTabEnabled().      Each tab can display text in a distinct color. The current text color     for a tab can be found with the tabTextColor() function. Set the text     color for a particular tab with setTabTextColor().      Tabs are added using addTab(), or inserted at particular positions     using insertTab(). The total number of tabs is given by     count(). Tabs can be removed from the tab bar with     removeTab(). Combining removeTab() and insertTab() allows you to     move tabs to different positions.      The \l shape property defines the tabs' appearance. The choice of     shape is a matter of taste, although tab dialogs (for preferences     and similar) invariably use \l RoundedNorth.     Tab controls in windows other than dialogs almost     always use either \l RoundedSouth or \l TriangularSouth. Many     spreadsheets and other tab controls in which all the pages are     essentially similar use \l TriangularSouth, whereas \l     RoundedSouth is used mostly when the pages are different (e.g. a     multi-page tool palette). The default in QTabBar is \l     RoundedNorth.      The most important part of QTabBar's API is the currentChanged()     signal.  This is emitted whenever the current tab changes (even at     startup, when the current tab changes from 'none'). There is also     a slot, setCurrentIndex(), which can be used to select a tab     programmatically. The function currentIndex() returns the index of     the current tab, \l count holds the number of tabs.      QTabBar creates automatic mnemonic keys in the manner of QAbstractButton;     e.g. if a tab's label is "\&Graphics", Alt+G becomes a shortcut     key for switching to that tab.      The following virtual functions may need to be reimplemented in     order to tailor the look and feel or store extra data with each     tab:      \list     \li tabSizeHint() calcuates the size of a tab.     \li tabInserted() notifies that a new tab was added.     \li tabRemoved() notifies that a tab was removed.     \li tabLayoutChange() notifies that the tabs have been re-laid out.     \li paintEvent() paints all tabs.     \endlist      For subclasses, you might also need the tabRect() functions which     returns the visual geometry of a single tab.      \table 100%     \row \li \inlineimage fusion-tabbar.png Screenshot of a Fusion style tab bar          \li A tab bar shown in the Fusion widget style.     \row \li \inlineimage fusion-tabbar-truncated.png Screenshot of a truncated Fusion tab bar          \li A truncated tab bar shown in the Fusion widget style.     \endtable      \sa QTabWidget */
end_comment
begin_comment
comment|/*!     \enum QTabBar::Shape      This enum type lists the built-in shapes supported by QTabBar. Treat these     as hints as some styles may not render some of the shapes. However,     position should be honored.      \value RoundedNorth  The normal rounded look above the pages      \value RoundedSouth  The normal rounded look below the pages      \value RoundedWest  The normal rounded look on the left side of the pages      \value RoundedEast  The normal rounded look on the right side the pages      \value TriangularNorth  Triangular tabs above the pages.      \value TriangularSouth  Triangular tabs similar to those used in     the Excel spreadsheet, for example      \value TriangularWest  Triangular tabs on the left of the pages.      \value TriangularEast  Triangular tabs on the right of the pages. */
end_comment
begin_comment
comment|/*!     \fn void QTabBar::currentChanged(int index)      This signal is emitted when the tab bar's current tab changes. The     new current has the given \a index, or -1 if there isn't a new one     (for example, if there are no tab in the QTabBar) */
end_comment
begin_comment
comment|/*!     \fn void QTabBar::tabCloseRequested(int index)     \since 4.5      This signal is emitted when the close button on a tab is clicked.     The \a index is the index that should be removed.      \sa setTabsClosable() */
end_comment
begin_comment
comment|/*!     \fn void QTabBar::tabMoved(int from, int to)     \since 4.5      This signal is emitted when the tab has moved the tab     at index position \a from to index position \a to.      note: QTabWidget will automatically move the page when     this signal is emitted from its tab bar.      \sa moveTab() */
end_comment
begin_comment
comment|/*!     \fn void QTabBar::tabBarClicked(int index)      This signal is emitted when user clicks on a tab at an \a index.      \a index is the index of a clicked tab, or -1 if no tab is under the cursor.      \since 5.2 */
end_comment
begin_comment
comment|/*!     \fn void QTabBar::tabBarDoubleClicked(int index)      This signal is emitted when the user double clicks on a tab at \a index.      \a index refers to the tab clicked, or -1 if no tab is under the cursor.      \since 5.2 */
end_comment
begin_function
DECL|function|init
name|void
name|QTabBarPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|leftB
operator|=
operator|new
name|QToolButton
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|leftB
operator|->
name|setAutoRepeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|leftB
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_scrollTabs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|leftB
operator|->
name|hide
argument_list|()
expr_stmt|;
name|rightB
operator|=
operator|new
name|QToolButton
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|rightB
operator|->
name|setAutoRepeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|rightB
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_scrollTabs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rightB
operator|->
name|hide
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
name|leftB
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|rightB
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|TabFocus
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|leftB
operator|->
name|setAccessibleName
argument_list|(
name|QTabBar
operator|::
name|tr
argument_list|(
literal|"Scroll Left"
argument_list|)
argument_list|)
expr_stmt|;
name|rightB
operator|->
name|setAccessibleName
argument_list|(
name|QTabBar
operator|::
name|tr
argument_list|(
literal|"Scroll Right"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|q
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|elideMode
operator|=
name|Qt
operator|::
name|TextElideMode
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TabBar_ElideMode
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|useScrollButtons
operator|=
operator|!
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TabBar_PreferNoArrows
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|at
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|QTabBarPrivate
operator|::
name|at
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|validIndex
argument_list|(
name|index
argument_list|)
condition|?
operator|&
name|tabList
index|[
name|index
index|]
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|at
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|QTabBarPrivate
operator|::
name|at
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
return|return
name|validIndex
argument_list|(
name|index
argument_list|)
condition|?
operator|&
name|tabList
index|[
name|index
index|]
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|indexAtPos
name|int
name|QTabBarPrivate
operator|::
name|indexAtPos
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|tabRect
argument_list|(
name|currentIndex
argument_list|)
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
return|return
name|currentIndex
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|tabList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|enabled
operator|&&
name|q
operator|->
name|tabRect
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|layoutTabs
name|void
name|QTabBarPrivate
operator|::
name|layoutTabs
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|layoutDirty
operator|=
literal|false
expr_stmt|;
name|QSize
name|size
init|=
name|q
operator|->
name|size
argument_list|()
decl_stmt|;
name|int
name|last
decl_stmt|,
name|available
decl_stmt|;
name|int
name|maxExtent
decl_stmt|;
name|int
name|i
decl_stmt|;
name|bool
name|vertTabs
init|=
name|verticalTabs
argument_list|(
name|shape
argument_list|)
decl_stmt|;
name|int
name|tabChainIndex
init|=
literal|0
decl_stmt|;
name|Qt
operator|::
name|Alignment
name|tabAlignment
init|=
name|Qt
operator|::
name|Alignment
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TabBar_Alignment
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
name|tabChain
argument_list|(
name|tabList
operator|.
name|count
argument_list|()
operator|+
literal|2
argument_list|)
decl_stmt|;
comment|// We put an empty item at the front and back and set its expansive attribute
comment|// depending on tabAlignment.
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|init
argument_list|()
expr_stmt|;
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|expansive
operator|=
operator|(
name|tabAlignment
operator|!=
name|Qt
operator|::
name|AlignLeft
operator|)
operator|&&
operator|(
name|tabAlignment
operator|!=
name|Qt
operator|::
name|AlignJustify
operator|)
expr_stmt|;
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|empty
operator|=
literal|true
expr_stmt|;
operator|++
name|tabChainIndex
expr_stmt|;
comment|// We now go through our list of tabs and set the minimum size and the size hint
comment|// This will allow us to elide text if necessary. Since we don't set
comment|// a maximum size, tabs will EXPAND to fill up the empty space.
comment|// Since tab widget is rather *ahem* strict about keeping the geometry of the
comment|// tab bar to its absolute minimum, this won't bleed through, but will show up
comment|// if you use tab bar on its own (a.k.a. not a bug, but a feature).
comment|// Update: if expanding is false, we DO set a maximum size to prevent the tabs
comment|// being wider than necessary.
if|if
condition|(
operator|!
name|vertTabs
condition|)
block|{
name|int
name|minx
init|=
literal|0
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
name|int
name|maxHeight
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
operator|,
operator|++
name|tabChainIndex
control|)
block|{
name|QSize
name|sz
init|=
name|q
operator|->
name|tabSizeHint
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|tabList
index|[
name|i
index|]
operator|.
name|maxRect
operator|=
name|QRect
argument_list|(
name|x
argument_list|,
literal|0
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|+=
name|sz
operator|.
name|width
argument_list|()
expr_stmt|;
name|maxHeight
operator|=
name|qMax
argument_list|(
name|maxHeight
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|sz
operator|=
name|q
operator|->
name|minimumTabSizeHint
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|tabList
index|[
name|i
index|]
operator|.
name|minRect
operator|=
name|QRect
argument_list|(
name|minx
argument_list|,
literal|0
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|minx
operator|+=
name|sz
operator|.
name|width
argument_list|()
expr_stmt|;
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|init
argument_list|()
expr_stmt|;
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|sizeHint
operator|=
name|tabList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|maxRect
operator|.
name|width
argument_list|()
expr_stmt|;
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|minimumSize
operator|=
name|sz
operator|.
name|width
argument_list|()
expr_stmt|;
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|empty
operator|=
literal|false
expr_stmt|;
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|expansive
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|expanding
condition|)
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|maximumSize
operator|=
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|sizeHint
expr_stmt|;
block|}
name|last
operator|=
name|minx
expr_stmt|;
name|available
operator|=
name|size
operator|.
name|width
argument_list|()
expr_stmt|;
name|maxExtent
operator|=
name|maxHeight
expr_stmt|;
block|}
else|else
block|{
name|int
name|miny
init|=
literal|0
decl_stmt|;
name|int
name|y
init|=
literal|0
decl_stmt|;
name|int
name|maxWidth
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
operator|,
operator|++
name|tabChainIndex
control|)
block|{
name|QSize
name|sz
init|=
name|q
operator|->
name|tabSizeHint
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|tabList
index|[
name|i
index|]
operator|.
name|maxRect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
name|y
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|y
operator|+=
name|sz
operator|.
name|height
argument_list|()
expr_stmt|;
name|maxWidth
operator|=
name|qMax
argument_list|(
name|maxWidth
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|sz
operator|=
name|q
operator|->
name|minimumTabSizeHint
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|tabList
index|[
name|i
index|]
operator|.
name|minRect
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
name|miny
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|miny
operator|+=
name|sz
operator|.
name|height
argument_list|()
expr_stmt|;
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|init
argument_list|()
expr_stmt|;
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|sizeHint
operator|=
name|tabList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|maxRect
operator|.
name|height
argument_list|()
expr_stmt|;
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|minimumSize
operator|=
name|sz
operator|.
name|height
argument_list|()
expr_stmt|;
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|empty
operator|=
literal|false
expr_stmt|;
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|expansive
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|expanding
condition|)
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|maximumSize
operator|=
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|sizeHint
expr_stmt|;
block|}
name|last
operator|=
name|miny
expr_stmt|;
name|available
operator|=
name|size
operator|.
name|height
argument_list|()
expr_stmt|;
name|maxExtent
operator|=
name|maxWidth
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|tabChainIndex
operator|==
name|tabChain
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// add an assert just to make sure.
comment|// Mirror our front item.
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|init
argument_list|()
expr_stmt|;
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|expansive
operator|=
operator|(
name|tabAlignment
operator|!=
name|Qt
operator|::
name|AlignRight
operator|)
operator|&&
operator|(
name|tabAlignment
operator|!=
name|Qt
operator|::
name|AlignJustify
operator|)
expr_stmt|;
name|tabChain
index|[
name|tabChainIndex
index|]
operator|.
name|empty
operator|=
literal|true
expr_stmt|;
comment|// Do the calculation
name|qGeomCalc
argument_list|(
name|tabChain
argument_list|,
literal|0
argument_list|,
name|tabChain
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|,
name|qMax
argument_list|(
name|available
argument_list|,
name|last
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Use the results
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QLayoutStruct
modifier|&
name|lstruct
init|=
name|tabChain
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vertTabs
condition|)
name|tabList
index|[
name|i
index|]
operator|.
name|rect
operator|.
name|setRect
argument_list|(
name|lstruct
operator|.
name|pos
argument_list|,
literal|0
argument_list|,
name|lstruct
operator|.
name|size
argument_list|,
name|maxExtent
argument_list|)
expr_stmt|;
else|else
name|tabList
index|[
name|i
index|]
operator|.
name|rect
operator|.
name|setRect
argument_list|(
literal|0
argument_list|,
name|lstruct
operator|.
name|pos
argument_list|,
name|maxExtent
argument_list|,
name|lstruct
operator|.
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useScrollButtons
operator|&&
name|tabList
operator|.
name|count
argument_list|()
operator|&&
name|last
operator|>
name|available
condition|)
block|{
specifier|const
name|QRect
name|scrollRect
init|=
name|normalizedScrollRect
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|scrollOffset
operator|=
operator|-
name|scrollRect
operator|.
name|left
argument_list|()
expr_stmt|;
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|QStyleOption
name|opt
decl_stmt|;
name|opt
operator|.
name|init
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QRect
name|scrollButtonLeftRect
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabBarScrollLeftButton
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|QRect
name|scrollButtonRightRect
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabBarScrollRightButton
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|int
name|scrollButtonWidth
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TabBarScrollButtonWidth
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|;
comment|// Normally SE_TabBarScrollLeftButton should have the same width as PM_TabBarScrollButtonWidth.
comment|// But if that is not the case, we set the actual button width to PM_TabBarScrollButtonWidth, and
comment|// use the extra space from SE_TabBarScrollLeftButton as margins towards the tabs.
if|if
condition|(
name|vertTabs
condition|)
block|{
name|scrollButtonLeftRect
operator|.
name|setHeight
argument_list|(
name|scrollButtonWidth
argument_list|)
expr_stmt|;
name|scrollButtonRightRect
operator|.
name|setY
argument_list|(
name|scrollButtonRightRect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
operator|-
name|scrollButtonWidth
argument_list|)
expr_stmt|;
name|scrollButtonRightRect
operator|.
name|setHeight
argument_list|(
name|scrollButtonWidth
argument_list|)
expr_stmt|;
name|leftB
operator|->
name|setArrowType
argument_list|(
name|Qt
operator|::
name|UpArrow
argument_list|)
expr_stmt|;
name|rightB
operator|->
name|setArrowType
argument_list|(
name|Qt
operator|::
name|DownArrow
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|q
operator|->
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
block|{
name|scrollButtonRightRect
operator|.
name|setWidth
argument_list|(
name|scrollButtonWidth
argument_list|)
expr_stmt|;
name|scrollButtonLeftRect
operator|.
name|setX
argument_list|(
name|scrollButtonLeftRect
operator|.
name|right
argument_list|()
operator|+
literal|1
operator|-
name|scrollButtonWidth
argument_list|)
expr_stmt|;
name|scrollButtonLeftRect
operator|.
name|setWidth
argument_list|(
name|scrollButtonWidth
argument_list|)
expr_stmt|;
name|leftB
operator|->
name|setArrowType
argument_list|(
name|Qt
operator|::
name|RightArrow
argument_list|)
expr_stmt|;
name|rightB
operator|->
name|setArrowType
argument_list|(
name|Qt
operator|::
name|LeftArrow
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scrollButtonLeftRect
operator|.
name|setWidth
argument_list|(
name|scrollButtonWidth
argument_list|)
expr_stmt|;
name|scrollButtonRightRect
operator|.
name|setX
argument_list|(
name|scrollButtonRightRect
operator|.
name|right
argument_list|()
operator|+
literal|1
operator|-
name|scrollButtonWidth
argument_list|)
expr_stmt|;
name|scrollButtonRightRect
operator|.
name|setWidth
argument_list|(
name|scrollButtonWidth
argument_list|)
expr_stmt|;
name|leftB
operator|->
name|setArrowType
argument_list|(
name|Qt
operator|::
name|LeftArrow
argument_list|)
expr_stmt|;
name|rightB
operator|->
name|setArrowType
argument_list|(
name|Qt
operator|::
name|RightArrow
argument_list|)
expr_stmt|;
block|}
name|leftB
operator|->
name|setGeometry
argument_list|(
name|scrollButtonLeftRect
argument_list|)
expr_stmt|;
name|leftB
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|leftB
operator|->
name|show
argument_list|()
expr_stmt|;
name|rightB
operator|->
name|setGeometry
argument_list|(
name|scrollButtonRightRect
argument_list|)
expr_stmt|;
name|rightB
operator|->
name|setEnabled
argument_list|(
name|last
operator|-
name|scrollOffset
operator|>
name|scrollRect
operator|.
name|x
argument_list|()
operator|+
name|scrollRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|rightB
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|scrollOffset
operator|=
literal|0
expr_stmt|;
name|rightB
operator|->
name|hide
argument_list|()
expr_stmt|;
name|leftB
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
name|layoutWidgets
argument_list|()
expr_stmt|;
name|q
operator|->
name|tabLayoutChange
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalizedScrollRect
name|QRect
name|QTabBarPrivate
operator|::
name|normalizedScrollRect
parameter_list|(
name|int
name|index
parameter_list|)
block|{
comment|// "Normalized scroll rect" means return the free space on the tab bar
comment|// that doesn't overlap with scroll buttons or tear indicators, and
comment|// always return the rect as horizontal Qt::LeftToRight, even if the
comment|// tab bar itself is in a different orientation.
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|QStyleOptionTab
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|,
name|currentIndex
argument_list|)
expr_stmt|;
name|opt
operator|.
name|rect
operator|=
name|q
operator|->
name|rect
argument_list|()
expr_stmt|;
name|QRect
name|scrollButtonLeftRect
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabBarScrollLeftButton
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|QRect
name|scrollButtonRightRect
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabBarScrollRightButton
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|QRect
name|tearLeftRect
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabBarTearIndicatorLeft
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|QRect
name|tearRightRect
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabBarTearIndicatorRight
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|verticalTabs
argument_list|(
name|shape
argument_list|)
condition|)
block|{
name|int
name|topEdge
decl_stmt|,
name|bottomEdge
decl_stmt|;
name|bool
name|leftButtonIsOnTop
init|=
name|scrollButtonLeftRect
operator|.
name|y
argument_list|()
operator|<
name|q
operator|->
name|height
argument_list|()
operator|/
literal|2
decl_stmt|;
name|bool
name|rightButtonIsOnTop
init|=
name|scrollButtonRightRect
operator|.
name|y
argument_list|()
operator|<
name|q
operator|->
name|height
argument_list|()
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|leftButtonIsOnTop
operator|&&
name|rightButtonIsOnTop
condition|)
block|{
name|topEdge
operator|=
name|scrollButtonRightRect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
expr_stmt|;
name|bottomEdge
operator|=
name|q
operator|->
name|height
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|leftButtonIsOnTop
operator|&&
operator|!
name|rightButtonIsOnTop
condition|)
block|{
name|topEdge
operator|=
literal|0
expr_stmt|;
name|bottomEdge
operator|=
name|scrollButtonLeftRect
operator|.
name|top
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|topEdge
operator|=
name|scrollButtonLeftRect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
expr_stmt|;
name|bottomEdge
operator|=
name|scrollButtonRightRect
operator|.
name|top
argument_list|()
expr_stmt|;
block|}
name|bool
name|tearTopVisible
init|=
name|index
operator|!=
literal|0
operator|&&
name|topEdge
operator|!=
operator|-
name|scrollOffset
decl_stmt|;
name|bool
name|tearBottomVisible
init|=
name|index
operator|!=
name|tabList
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
name|bottomEdge
operator|!=
name|tabList
operator|.
name|last
argument_list|()
operator|.
name|rect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
operator|-
name|scrollOffset
decl_stmt|;
if|if
condition|(
name|tearTopVisible
operator|&&
operator|!
name|tearLeftRect
operator|.
name|isNull
argument_list|()
condition|)
name|topEdge
operator|=
name|tearLeftRect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|tearBottomVisible
operator|&&
operator|!
name|tearRightRect
operator|.
name|isNull
argument_list|()
condition|)
name|bottomEdge
operator|=
name|tearRightRect
operator|.
name|top
argument_list|()
expr_stmt|;
return|return
name|QRect
argument_list|(
name|topEdge
argument_list|,
literal|0
argument_list|,
name|bottomEdge
operator|-
name|topEdge
argument_list|,
name|q
operator|->
name|height
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|q
operator|->
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
block|{
name|scrollButtonLeftRect
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|,
name|q
operator|->
name|rect
argument_list|()
argument_list|,
name|scrollButtonLeftRect
argument_list|)
expr_stmt|;
name|scrollButtonRightRect
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|,
name|q
operator|->
name|rect
argument_list|()
argument_list|,
name|scrollButtonRightRect
argument_list|)
expr_stmt|;
name|tearLeftRect
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|,
name|q
operator|->
name|rect
argument_list|()
argument_list|,
name|tearLeftRect
argument_list|)
expr_stmt|;
name|tearRightRect
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|,
name|q
operator|->
name|rect
argument_list|()
argument_list|,
name|tearRightRect
argument_list|)
expr_stmt|;
block|}
name|int
name|leftEdge
decl_stmt|,
name|rightEdge
decl_stmt|;
name|bool
name|leftButtonIsOnLeftSide
init|=
name|scrollButtonLeftRect
operator|.
name|x
argument_list|()
operator|<
name|q
operator|->
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|bool
name|rightButtonIsOnLeftSide
init|=
name|scrollButtonRightRect
operator|.
name|x
argument_list|()
operator|<
name|q
operator|->
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|leftButtonIsOnLeftSide
operator|&&
name|rightButtonIsOnLeftSide
condition|)
block|{
name|leftEdge
operator|=
name|scrollButtonRightRect
operator|.
name|right
argument_list|()
operator|+
literal|1
expr_stmt|;
name|rightEdge
operator|=
name|q
operator|->
name|width
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|leftButtonIsOnLeftSide
operator|&&
operator|!
name|rightButtonIsOnLeftSide
condition|)
block|{
name|leftEdge
operator|=
literal|0
expr_stmt|;
name|rightEdge
operator|=
name|scrollButtonLeftRect
operator|.
name|left
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|leftEdge
operator|=
name|scrollButtonLeftRect
operator|.
name|right
argument_list|()
operator|+
literal|1
expr_stmt|;
name|rightEdge
operator|=
name|scrollButtonRightRect
operator|.
name|left
argument_list|()
expr_stmt|;
block|}
name|bool
name|tearLeftVisible
init|=
name|index
operator|!=
literal|0
operator|&&
name|leftEdge
operator|!=
operator|-
name|scrollOffset
decl_stmt|;
name|bool
name|tearRightVisible
init|=
name|index
operator|!=
name|tabList
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
name|rightEdge
operator|!=
name|tabList
operator|.
name|last
argument_list|()
operator|.
name|rect
operator|.
name|right
argument_list|()
operator|+
literal|1
operator|-
name|scrollOffset
decl_stmt|;
if|if
condition|(
name|tearLeftVisible
operator|&&
operator|!
name|tearLeftRect
operator|.
name|isNull
argument_list|()
condition|)
name|leftEdge
operator|=
name|tearLeftRect
operator|.
name|right
argument_list|()
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|tearRightVisible
operator|&&
operator|!
name|tearRightRect
operator|.
name|isNull
argument_list|()
condition|)
name|rightEdge
operator|=
name|tearRightRect
operator|.
name|left
argument_list|()
expr_stmt|;
return|return
name|QRect
argument_list|(
name|leftEdge
argument_list|,
literal|0
argument_list|,
name|rightEdge
operator|-
name|leftEdge
argument_list|,
name|q
operator|->
name|height
argument_list|()
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|makeVisible
name|void
name|QTabBarPrivate
operator|::
name|makeVisible
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validIndex
argument_list|(
name|index
argument_list|)
operator|||
name|leftB
operator|->
name|isHidden
argument_list|()
condition|)
return|return;
specifier|const
name|QRect
name|tabRect
init|=
name|tabList
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|rect
decl_stmt|;
specifier|const
name|int
name|oldScrollOffset
init|=
name|scrollOffset
decl_stmt|;
specifier|const
name|bool
name|horiz
init|=
operator|!
name|verticalTabs
argument_list|(
name|shape
argument_list|)
decl_stmt|;
specifier|const
name|int
name|tabStart
init|=
name|horiz
condition|?
name|tabRect
operator|.
name|left
argument_list|()
else|:
name|tabRect
operator|.
name|top
argument_list|()
decl_stmt|;
specifier|const
name|int
name|tabEnd
init|=
name|horiz
condition|?
name|tabRect
operator|.
name|right
argument_list|()
else|:
name|tabRect
operator|.
name|bottom
argument_list|()
decl_stmt|;
specifier|const
name|int
name|lastTabEnd
init|=
name|horiz
condition|?
name|tabList
operator|.
name|last
argument_list|()
operator|.
name|rect
operator|.
name|right
argument_list|()
else|:
name|tabList
operator|.
name|last
argument_list|()
operator|.
name|rect
operator|.
name|bottom
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|scrollRect
init|=
name|normalizedScrollRect
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|const
name|int
name|scrolledTabBarStart
init|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|scrollRect
operator|.
name|left
argument_list|()
operator|+
name|scrollOffset
argument_list|)
decl_stmt|;
specifier|const
name|int
name|scrolledTabBarEnd
init|=
name|qMin
argument_list|(
name|lastTabEnd
operator|-
literal|1
argument_list|,
name|scrollRect
operator|.
name|right
argument_list|()
operator|+
name|scrollOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|tabStart
operator|<
name|scrolledTabBarStart
condition|)
block|{
comment|// Tab is outside on the left, so scroll left.
name|scrollOffset
operator|=
name|tabStart
operator|-
name|scrollRect
operator|.
name|left
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tabEnd
operator|>
name|scrolledTabBarEnd
condition|)
block|{
comment|// Tab is outside on the right, so scroll right.
name|scrollOffset
operator|=
name|tabEnd
operator|-
name|scrollRect
operator|.
name|right
argument_list|()
expr_stmt|;
block|}
name|leftB
operator|->
name|setEnabled
argument_list|(
name|scrollOffset
operator|>
operator|-
name|scrollRect
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|rightB
operator|->
name|setEnabled
argument_list|(
name|scrollOffset
operator|<
name|lastTabEnd
operator|-
name|scrollRect
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldScrollOffset
operator|!=
name|scrollOffset
condition|)
block|{
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
name|layoutWidgets
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|killSwitchTabTimer
name|void
name|QTabBarPrivate
operator|::
name|killSwitchTabTimer
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|switchTabTimerId
condition|)
block|{
name|q
operator|->
name|killTimer
argument_list|(
name|switchTabTimerId
argument_list|)
expr_stmt|;
name|switchTabTimerId
operator|=
literal|0
expr_stmt|;
block|}
name|switchTabCurrentIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|layoutTab
name|void
name|QTabBarPrivate
operator|::
name|layoutTab
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|index
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|Tab
modifier|&
name|tab
init|=
name|tabList
index|[
name|index
index|]
decl_stmt|;
name|bool
name|vertical
init|=
name|verticalTabs
argument_list|(
name|shape
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|tab
operator|.
name|leftWidget
operator|||
name|tab
operator|.
name|rightWidget
operator|)
condition|)
return|return;
name|QStyleOptionTab
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|,
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|tab
operator|.
name|leftWidget
condition|)
block|{
name|QRect
name|rect
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabBarTabLeftButton
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|QPoint
name|p
init|=
name|rect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|index
operator|==
name|pressedIndex
operator|)
operator|||
name|paintWithOffsets
condition|)
block|{
if|if
condition|(
name|vertical
condition|)
name|p
operator|.
name|setY
argument_list|(
name|p
operator|.
name|y
argument_list|()
operator|+
name|tabList
index|[
name|index
index|]
operator|.
name|dragOffset
argument_list|)
expr_stmt|;
else|else
name|p
operator|.
name|setX
argument_list|(
name|p
operator|.
name|x
argument_list|()
operator|+
name|tabList
index|[
name|index
index|]
operator|.
name|dragOffset
argument_list|)
expr_stmt|;
block|}
name|tab
operator|.
name|leftWidget
operator|->
name|move
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tab
operator|.
name|rightWidget
condition|)
block|{
name|QRect
name|rect
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabBarTabRightButton
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|QPoint
name|p
init|=
name|rect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|index
operator|==
name|pressedIndex
operator|)
operator|||
name|paintWithOffsets
condition|)
block|{
if|if
condition|(
name|vertical
condition|)
name|p
operator|.
name|setY
argument_list|(
name|p
operator|.
name|y
argument_list|()
operator|+
name|tab
operator|.
name|dragOffset
argument_list|)
expr_stmt|;
else|else
name|p
operator|.
name|setX
argument_list|(
name|p
operator|.
name|x
argument_list|()
operator|+
name|tab
operator|.
name|dragOffset
argument_list|)
expr_stmt|;
block|}
name|tab
operator|.
name|rightWidget
operator|->
name|move
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|layoutWidgets
name|void
name|QTabBarPrivate
operator|::
name|layoutWidgets
parameter_list|(
name|int
name|start
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|q
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|layoutTab
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|autoHideTabs
name|void
name|QTabBarPrivate
operator|::
name|autoHideTabs
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|autoHide
condition|)
name|q
operator|->
name|setVisible
argument_list|(
name|q
operator|->
name|count
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_closeTab
name|void
name|QTabBarPrivate
operator|::
name|_q_closeTab
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|object
init|=
name|q
operator|->
name|sender
argument_list|()
decl_stmt|;
name|int
name|tabToClose
init|=
operator|-
literal|1
decl_stmt|;
name|QTabBar
operator|::
name|ButtonPosition
name|closeSide
init|=
operator|(
name|QTabBar
operator|::
name|ButtonPosition
operator|)
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TabBar_CloseButtonPosition
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|closeSide
operator|==
name|QTabBar
operator|::
name|LeftSide
condition|)
block|{
if|if
condition|(
name|tabList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|leftWidget
operator|==
name|object
condition|)
block|{
name|tabToClose
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
if|if
condition|(
name|tabList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|rightWidget
operator|==
name|object
condition|)
block|{
name|tabToClose
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|tabToClose
operator|!=
operator|-
literal|1
condition|)
emit|emit
name|q
operator|->
name|tabCloseRequested
argument_list|(
name|tabToClose
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_scrollTabs
name|void
name|QTabBarPrivate
operator|::
name|_q_scrollTabs
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
specifier|const
name|QObject
modifier|*
name|sender
init|=
name|q
operator|->
name|sender
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|horizontal
init|=
operator|!
name|verticalTabs
argument_list|(
name|shape
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|scrollRect
init|=
name|normalizedScrollRect
argument_list|()
decl_stmt|;
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|sender
operator|==
name|leftB
condition|)
block|{
for|for
control|(
name|i
operator|=
name|tabList
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|int
name|start
init|=
name|horizontal
condition|?
name|tabList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|rect
operator|.
name|left
argument_list|()
else|:
name|tabList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|rect
operator|.
name|top
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|scrollRect
operator|.
name|left
argument_list|()
operator|+
name|scrollOffset
condition|)
block|{
name|makeVisible
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|sender
operator|==
name|rightB
condition|)
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|end
init|=
name|horizontal
condition|?
name|tabList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|rect
operator|.
name|right
argument_list|()
else|:
name|tabList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|rect
operator|.
name|bottom
argument_list|()
decl_stmt|;
if|if
condition|(
name|end
operator|>
name|scrollRect
operator|.
name|right
argument_list|()
operator|+
name|scrollOffset
condition|)
block|{
name|makeVisible
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|refresh
name|void
name|QTabBarPrivate
operator|::
name|refresh
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
comment|// be safe in case a subclass is also handling move with the tabs
if|if
condition|(
name|pressedIndex
operator|!=
operator|-
literal|1
operator|&&
name|movable
operator|&&
name|QApplication
operator|::
name|mouseButtons
argument_list|()
operator|==
name|Qt
operator|::
name|NoButton
condition|)
block|{
name|moveTabFinished
argument_list|(
name|pressedIndex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validIndex
argument_list|(
name|pressedIndex
argument_list|)
condition|)
name|pressedIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|q
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|layoutDirty
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|layoutTabs
argument_list|()
expr_stmt|;
name|makeVisible
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
name|q
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Creates a new tab bar with the given \a parent. */
end_comment
begin_constructor
DECL|function|QTabBar
name|QTabBar
operator|::
name|QTabBar
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QTabBarPrivate
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the tab bar. */
end_comment
begin_destructor
DECL|function|~QTabBar
name|QTabBar
operator|::
name|~
name|QTabBar
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \property QTabBar::shape     \brief the shape of the tabs in the tab bar      Possible values for this property are described by the Shape enum. */
end_comment
begin_function
DECL|function|shape
name|QTabBar
operator|::
name|Shape
name|QTabBar
operator|::
name|shape
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|shape
return|;
block|}
end_function
begin_function
DECL|function|setShape
name|void
name|QTabBar
operator|::
name|setShape
parameter_list|(
name|Shape
name|shape
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|shape
operator|==
name|shape
condition|)
return|return;
name|d
operator|->
name|shape
operator|=
name|shape
expr_stmt|;
name|d
operator|->
name|refresh
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabBar::drawBase     \brief defines whether or not tab bar should draw its base.      If true then QTabBar draws a base in relation to the styles overlab.     Otherwise only the tabs are drawn.      \sa QStyle::pixelMetric(), QStyle::PM_TabBarBaseOverlap, QStyleOptionTabBarBase */
end_comment
begin_function
DECL|function|setDrawBase
name|void
name|QTabBar
operator|::
name|setDrawBase
parameter_list|(
name|bool
name|drawBase
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|drawBase
operator|==
name|drawBase
condition|)
return|return;
name|d
operator|->
name|drawBase
operator|=
name|drawBase
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawBase
name|bool
name|QTabBar
operator|::
name|drawBase
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|drawBase
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a new tab with text \a text. Returns the new     tab's index. */
end_comment
begin_function
DECL|function|addTab
name|int
name|QTabBar
operator|::
name|addTab
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
return|return
name|insertTab
argument_list|(
operator|-
literal|1
argument_list|,
name|text
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      Adds a new tab with icon \a icon and text \a     text. Returns the new tab's index. */
end_comment
begin_function
DECL|function|addTab
name|int
name|QTabBar
operator|::
name|addTab
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
return|return
name|insertTab
argument_list|(
operator|-
literal|1
argument_list|,
name|icon
argument_list|,
name|text
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Inserts a new tab with text \a text at position \a index. If \a     index is out of range, the new tab is appened. Returns the new     tab's index. */
end_comment
begin_function
DECL|function|insertTab
name|int
name|QTabBar
operator|::
name|insertTab
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
return|return
name|insertTab
argument_list|(
name|index
argument_list|,
name|QIcon
argument_list|()
argument_list|,
name|text
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!\overload      Inserts a new tab with icon \a icon and text \a text at position     \a index. If \a index is out of range, the new tab is     appended. Returns the new tab's index.      If the QTabBar was empty before this function is called, the inserted tab     becomes the current tab.      Inserting a new tab at an index less than or equal to the current index     will increment the current index, but keep the current tab. */
end_comment
begin_function
DECL|function|insertTab
name|int
name|QTabBar
operator|::
name|insertTab
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|validIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|index
operator|=
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
expr_stmt|;
name|d
operator|->
name|tabList
operator|.
name|append
argument_list|(
name|QTabBarPrivate
operator|::
name|Tab
argument_list|(
name|icon
argument_list|,
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|tabList
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|QTabBarPrivate
operator|::
name|Tab
argument_list|(
name|icon
argument_list|,
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|shortcutId
operator|=
name|grabShortcut
argument_list|(
name|QKeySequence
operator|::
name|mnemonic
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|refresh
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|index
operator|<=
name|d
operator|->
name|currentIndex
condition|)
operator|++
name|d
operator|->
name|currentIndex
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|closeButtonOnTabs
condition|)
block|{
name|QStyleOptionTab
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|ButtonPosition
name|closeSide
init|=
operator|(
name|ButtonPosition
operator|)
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TabBar_CloseButtonPosition
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|QAbstractButton
modifier|*
name|closeButton
init|=
operator|new
name|CloseButton
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|closeButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_closeTab
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setTabButton
argument_list|(
name|index
argument_list|,
name|closeSide
argument_list|,
name|closeButton
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|lastTab
operator|>=
name|index
condition|)
operator|++
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|lastTab
expr_stmt|;
block|}
name|tabInserted
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|d
operator|->
name|autoHideTabs
argument_list|()
expr_stmt|;
return|return
name|index
return|;
block|}
end_function
begin_comment
comment|/*!     Removes the tab at position \a index.      \sa SelectionBehavior  */
end_comment
begin_function
DECL|function|removeTab
name|void
name|QTabBar
operator|::
name|removeTab
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|validIndex
argument_list|(
name|index
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|releaseShortcut
argument_list|(
name|d
operator|->
name|tabList
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|shortcutId
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|leftWidget
condition|)
block|{
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|leftWidget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|leftWidget
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|leftWidget
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|rightWidget
condition|)
block|{
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|rightWidget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|rightWidget
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|rightWidget
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|newIndex
init|=
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|lastTab
decl_stmt|;
name|d
operator|->
name|tabList
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|lastTab
operator|==
name|index
condition|)
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|lastTab
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|lastTab
operator|>
name|index
condition|)
operator|--
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|lastTab
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|==
name|d
operator|->
name|currentIndex
condition|)
block|{
comment|// The current tab is going away, in order to make sure
comment|// we emit that "current has changed", we need to reset this
comment|// around.
name|d
operator|->
name|currentIndex
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|tabList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
switch|switch
condition|(
name|d
operator|->
name|selectionBehaviorOnRemove
condition|)
block|{
case|case
name|SelectPreviousTab
case|:
if|if
condition|(
name|newIndex
operator|>
name|index
condition|)
name|newIndex
operator|--
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|validIndex
argument_list|(
name|newIndex
argument_list|)
condition|)
break|break;
comment|// else fallthrough
case|case
name|SelectRightTab
case|:
name|newIndex
operator|=
name|index
expr_stmt|;
if|if
condition|(
name|newIndex
operator|>=
name|d
operator|->
name|tabList
operator|.
name|size
argument_list|()
condition|)
name|newIndex
operator|=
name|d
operator|->
name|tabList
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
break|break;
case|case
name|SelectLeftTab
case|:
name|newIndex
operator|=
name|index
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|newIndex
operator|<
literal|0
condition|)
name|newIndex
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|d
operator|->
name|validIndex
argument_list|(
name|newIndex
argument_list|)
condition|)
block|{
comment|// don't loose newIndex's old through setCurrentIndex
name|int
name|bump
init|=
name|d
operator|->
name|tabList
index|[
name|newIndex
index|]
operator|.
name|lastTab
decl_stmt|;
name|setCurrentIndex
argument_list|(
name|newIndex
argument_list|)
expr_stmt|;
name|d
operator|->
name|tabList
index|[
name|newIndex
index|]
operator|.
name|lastTab
operator|=
name|bump
expr_stmt|;
block|}
block|}
else|else
block|{
emit|emit
name|currentChanged
argument_list|(
operator|-
literal|1
argument_list|)
emit|;
block|}
block|}
elseif|else
if|if
condition|(
name|index
operator|<
name|d
operator|->
name|currentIndex
condition|)
block|{
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|currentIndex
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|refresh
argument_list|()
expr_stmt|;
name|d
operator|->
name|autoHideTabs
argument_list|()
expr_stmt|;
name|tabRemoved
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns \c true if the tab at position \a index is enabled; otherwise     returns \c false. */
end_comment
begin_function
DECL|function|isTabEnabled
name|bool
name|QTabBar
operator|::
name|isTabEnabled
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|tab
operator|->
name|enabled
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     If \a enabled is true then the tab at position \a index is     enabled; otherwise the item at position \a index is disabled. */
end_comment
begin_function
DECL|function|setTabEnabled
name|void
name|QTabBar
operator|::
name|setTabEnabled
parameter_list|(
name|int
name|index
parameter_list|,
name|bool
name|enabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|tab
operator|->
name|enabled
operator|=
name|enabled
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|setShortcutEnabled
argument_list|(
name|tab
operator|->
name|shortcutId
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|update
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|enabled
operator|&&
name|index
operator|==
name|d
operator|->
name|currentIndex
condition|)
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|validIndex
argument_list|(
name|index
operator|+
literal|1
argument_list|)
condition|?
name|index
operator|+
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|enabled
operator|&&
operator|!
name|d
operator|->
name|validIndex
argument_list|(
name|d
operator|->
name|currentIndex
argument_list|)
condition|)
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the text of the tab at position \a index, or an empty     string if \a index is out of range. */
end_comment
begin_function
DECL|function|tabText
name|QString
name|QTabBar
operator|::
name|tabText
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|tab
operator|->
name|text
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the text of the tab at position \a index to \a text. */
end_comment
begin_function
DECL|function|setTabText
name|void
name|QTabBar
operator|::
name|setTabText
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|tab
operator|->
name|text
operator|=
name|text
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|releaseShortcut
argument_list|(
name|tab
operator|->
name|shortcutId
argument_list|)
expr_stmt|;
name|tab
operator|->
name|shortcutId
operator|=
name|grabShortcut
argument_list|(
name|QKeySequence
operator|::
name|mnemonic
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|setShortcutEnabled
argument_list|(
name|tab
operator|->
name|shortcutId
argument_list|,
name|tab
operator|->
name|enabled
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the text color of the tab with the given \a index, or a invalid     color if \a index is out of range.      \sa setTabTextColor() */
end_comment
begin_function
DECL|function|tabTextColor
name|QColor
name|QTabBar
operator|::
name|tabTextColor
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|tab
operator|->
name|textColor
return|;
return|return
name|QColor
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the color of the text in the tab with the given \a index to the specified \a color.      If an invalid color is specified, the tab will use the QTabBar foreground role instead.      \sa tabTextColor() */
end_comment
begin_function
DECL|function|setTabTextColor
name|void
name|QTabBar
operator|::
name|setTabTextColor
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|tab
operator|->
name|textColor
operator|=
name|color
expr_stmt|;
name|update
argument_list|(
name|tabRect
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the icon of the tab at position \a index, or a null icon     if \a index is out of range. */
end_comment
begin_function
DECL|function|tabIcon
name|QIcon
name|QTabBar
operator|::
name|tabIcon
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|tab
operator|->
name|icon
return|;
return|return
name|QIcon
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the icon of the tab at position \a index to \a icon. */
end_comment
begin_function
DECL|function|setTabIcon
name|void
name|QTabBar
operator|::
name|setTabIcon
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|bool
name|simpleIconChange
init|=
operator|(
operator|!
name|icon
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|tab
operator|->
name|icon
operator|.
name|isNull
argument_list|()
operator|)
decl_stmt|;
name|tab
operator|->
name|icon
operator|=
name|icon
expr_stmt|;
if|if
condition|(
name|simpleIconChange
condition|)
name|update
argument_list|(
name|tabRect
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
end_ifndef
begin_comment
comment|/*!     Sets the tool tip of the tab at position \a index to \a tip. */
end_comment
begin_function
DECL|function|setTabToolTip
name|void
name|QTabBar
operator|::
name|setTabToolTip
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QString
modifier|&
name|tip
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
name|tab
operator|->
name|toolTip
operator|=
name|tip
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the tool tip of the tab at position \a index, or an empty     string if \a index is out of range. */
end_comment
begin_function
DECL|function|tabToolTip
name|QString
name|QTabBar
operator|::
name|tabToolTip
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|tab
operator|->
name|toolTip
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLTIP
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
end_ifndef
begin_comment
comment|/*!     \since 4.1      Sets the What's This help text of the tab at position \a index     to \a text. */
end_comment
begin_function
DECL|function|setTabWhatsThis
name|void
name|QTabBar
operator|::
name|setTabWhatsThis
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
name|tab
operator|->
name|whatsThis
operator|=
name|text
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the What's This help text of the tab at position \a index,     or an empty string if \a index is out of range. */
end_comment
begin_function
DECL|function|tabWhatsThis
name|QString
name|QTabBar
operator|::
name|tabWhatsThis
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|tab
operator|->
name|whatsThis
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_WHATSTHIS
end_comment
begin_comment
comment|/*!     Sets the data of the tab at position \a index to \a data. */
end_comment
begin_function
DECL|function|setTabData
name|void
name|QTabBar
operator|::
name|setTabData
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|data
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
name|tab
operator|->
name|data
operator|=
name|data
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the data of the tab at position \a index, or a null     variant if \a index is out of range. */
end_comment
begin_function
DECL|function|tabData
name|QVariant
name|QTabBar
operator|::
name|tabData
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|tab
operator|->
name|data
return|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the visual rectangle of the tab at position \a     index, or a null rectangle if \a index is out of range. */
end_comment
begin_function
DECL|function|tabRect
name|QRect
name|QTabBar
operator|::
name|tabRect
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|layoutDirty
condition|)
cast|const_cast
argument_list|<
name|QTabBarPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|layoutTabs
argument_list|()
expr_stmt|;
name|QRect
name|r
init|=
name|tab
operator|->
name|rect
decl_stmt|;
if|if
condition|(
name|verticalTabs
argument_list|(
name|d
operator|->
name|shape
argument_list|)
condition|)
name|r
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|-
name|d
operator|->
name|scrollOffset
argument_list|)
expr_stmt|;
else|else
name|r
operator|.
name|translate
argument_list|(
operator|-
name|d
operator|->
name|scrollOffset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|verticalTabs
argument_list|(
name|d
operator|->
name|shape
argument_list|)
condition|)
name|r
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|layoutDirection
argument_list|()
argument_list|,
name|rect
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.3     Returns the index of the tab that covers \a position or -1 if no     tab covers \a position; */
end_comment
begin_function
DECL|function|tabAt
name|int
name|QTabBar
operator|::
name|tabAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|position
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|validIndex
argument_list|(
name|d
operator|->
name|currentIndex
argument_list|)
operator|&&
name|tabRect
argument_list|(
name|d
operator|->
name|currentIndex
argument_list|)
operator|.
name|contains
argument_list|(
name|position
argument_list|)
condition|)
block|{
return|return
name|d
operator|->
name|currentIndex
return|;
block|}
specifier|const
name|int
name|max
init|=
name|d
operator|->
name|tabList
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|tabRect
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|position
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!     \property QTabBar::currentIndex     \brief the index of the tab bar's visible tab      The current index is -1 if there is no current tab. */
end_comment
begin_function
DECL|function|currentIndex
name|int
name|QTabBar
operator|::
name|currentIndex
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|validIndex
argument_list|(
name|d
operator|->
name|currentIndex
argument_list|)
condition|)
return|return
name|d
operator|->
name|currentIndex
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|setCurrentIndex
name|void
name|QTabBar
operator|::
name|setCurrentIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|dragInProgress
operator|&&
name|d
operator|->
name|pressedIndex
operator|!=
operator|-
literal|1
condition|)
return|return;
name|int
name|oldIndex
init|=
name|d
operator|->
name|currentIndex
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|validIndex
argument_list|(
name|index
argument_list|)
operator|&&
name|d
operator|->
name|currentIndex
operator|!=
name|index
condition|)
block|{
name|d
operator|->
name|currentIndex
operator|=
name|index
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|makeVisible
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|lastTab
operator|=
name|oldIndex
expr_stmt|;
if|if
condition|(
name|oldIndex
operator|>=
literal|0
operator|&&
name|oldIndex
operator|<
name|count
argument_list|()
condition|)
name|d
operator|->
name|layoutTab
argument_list|(
name|oldIndex
argument_list|)
expr_stmt|;
name|d
operator|->
name|layoutTab
argument_list|(
name|index
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
if|if
condition|(
name|QAccessible
operator|::
name|isActive
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasFocus
argument_list|()
condition|)
block|{
name|QAccessibleEvent
name|focusEvent
argument_list|(
name|this
argument_list|,
name|QAccessible
operator|::
name|Focus
argument_list|)
decl_stmt|;
name|focusEvent
operator|.
name|setChild
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|focusEvent
argument_list|)
expr_stmt|;
block|}
name|QAccessibleEvent
name|selectionEvent
argument_list|(
name|this
argument_list|,
name|QAccessible
operator|::
name|Selection
argument_list|)
decl_stmt|;
name|selectionEvent
operator|.
name|setChild
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|selectionEvent
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
emit|emit
name|currentChanged
argument_list|(
name|index
argument_list|)
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QTabBar::iconSize     \brief The size for icons in the tab bar     \since 4.1      The default value is style-dependent. \c iconSize is a maximum     size; icons that are smaller are not scaled up.      \sa QTabWidget::iconSize */
end_comment
begin_function
DECL|function|iconSize
name|QSize
name|QTabBar
operator|::
name|iconSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|iconSize
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|iconSize
return|;
name|int
name|iconExtent
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TabBarIconSize
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
return|return
name|QSize
argument_list|(
name|iconExtent
argument_list|,
name|iconExtent
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setIconSize
name|void
name|QTabBar
operator|::
name|setIconSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|iconSize
operator|=
name|size
expr_stmt|;
name|d
operator|->
name|layoutDirty
operator|=
literal|true
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabBar::count     \brief the number of tabs in the tab bar */
end_comment
begin_function
DECL|function|count
name|int
name|QTabBar
operator|::
name|count
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!\reimp  */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QTabBar
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|layoutDirty
condition|)
cast|const_cast
argument_list|<
name|QTabBarPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|layoutTabs
argument_list|()
expr_stmt|;
name|QRect
name|r
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|r
operator|=
name|r
operator|.
name|united
argument_list|(
name|d
operator|->
name|tabList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|maxRect
argument_list|)
expr_stmt|;
name|QSize
name|sz
init|=
name|QApplication
operator|::
name|globalStrut
argument_list|()
decl_stmt|;
return|return
name|r
operator|.
name|size
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|sz
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!\reimp  */
end_comment
begin_function
DECL|function|minimumSizeHint
name|QSize
name|QTabBar
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|layoutDirty
condition|)
cast|const_cast
argument_list|<
name|QTabBarPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|layoutTabs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|useScrollButtons
condition|)
block|{
name|QRect
name|r
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|r
operator|=
name|r
operator|.
name|united
argument_list|(
name|d
operator|->
name|tabList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|minRect
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|size
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|verticalTabs
argument_list|(
name|d
operator|->
name|shape
argument_list|)
condition|)
return|return
name|QSize
argument_list|(
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|rightB
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
operator|*
literal|2
operator|+
literal|75
argument_list|)
return|;
else|else
return|return
name|QSize
argument_list|(
name|d
operator|->
name|rightB
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|*
literal|2
operator|+
literal|75
argument_list|,
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Compute the most-elided possible text, for minimumSizeHint
end_comment
begin_function
DECL|function|computeElidedText
specifier|static
name|QString
name|computeElidedText
parameter_list|(
name|Qt
operator|::
name|TextElideMode
name|mode
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|<=
literal|3
condition|)
return|return
name|text
return|;
specifier|static
specifier|const
name|QLatin1String
name|Ellipses
argument_list|(
literal|"..."
argument_list|)
decl_stmt|;
name|QString
name|ret
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|Qt
operator|::
name|ElideRight
case|:
name|ret
operator|=
name|text
operator|.
name|left
argument_list|(
literal|2
argument_list|)
operator|+
name|Ellipses
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ElideMiddle
case|:
name|ret
operator|=
name|text
operator|.
name|left
argument_list|(
literal|1
argument_list|)
operator|+
name|Ellipses
operator|+
name|text
operator|.
name|right
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ElideLeft
case|:
name|ret
operator|=
name|Ellipses
operator|+
name|text
operator|.
name|right
argument_list|(
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|ElideNone
case|:
name|ret
operator|=
name|text
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the minimum tab size hint for the tab at position \a index.     \since Qt 5.0 */
end_comment
begin_function
DECL|function|minimumTabSizeHint
name|QSize
name|QTabBar
operator|::
name|minimumTabSizeHint
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
name|QTabBarPrivate
operator|::
name|Tab
modifier|&
name|tab
init|=
cast|const_cast
argument_list|<
name|QTabBarPrivate
operator|::
name|Tab
operator|&
argument_list|>
argument_list|(
name|d
operator|->
name|tabList
index|[
name|index
index|]
argument_list|)
decl_stmt|;
name|QString
name|oldText
init|=
name|tab
operator|.
name|text
decl_stmt|;
name|tab
operator|.
name|text
operator|=
name|computeElidedText
argument_list|(
name|d
operator|->
name|elideMode
argument_list|,
name|oldText
argument_list|)
expr_stmt|;
name|QSize
name|size
init|=
name|tabSizeHint
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|tab
operator|.
name|text
operator|=
name|oldText
expr_stmt|;
return|return
name|size
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the size hint for the tab at position \a index. */
end_comment
begin_function
DECL|function|tabSizeHint
name|QSize
name|QTabBar
operator|::
name|tabSizeHint
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
comment|//Note: this must match with the computations in QCommonStylePrivate::tabLayout
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|index
argument_list|)
condition|)
block|{
name|QStyleOptionTab
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|opt
operator|.
name|text
operator|=
name|d
operator|->
name|tabList
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|text
expr_stmt|;
name|QSize
name|iconSize
init|=
name|tab
operator|->
name|icon
operator|.
name|isNull
argument_list|()
condition|?
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|opt
operator|.
name|iconSize
decl_stmt|;
name|int
name|hframe
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TabBarTabHSpace
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|int
name|vframe
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TabBarTabVSpace
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
decl_stmt|;
specifier|const
name|QFontMetrics
name|fm
init|=
name|fontMetrics
argument_list|()
decl_stmt|;
name|int
name|maxWidgetHeight
init|=
name|qMax
argument_list|(
name|opt
operator|.
name|leftButtonSize
operator|.
name|height
argument_list|()
argument_list|,
name|opt
operator|.
name|rightButtonSize
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|maxWidgetWidth
init|=
name|qMax
argument_list|(
name|opt
operator|.
name|leftButtonSize
operator|.
name|width
argument_list|()
argument_list|,
name|opt
operator|.
name|rightButtonSize
operator|.
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|widgetWidth
init|=
literal|0
decl_stmt|;
name|int
name|widgetHeight
init|=
literal|0
decl_stmt|;
name|int
name|padding
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|opt
operator|.
name|leftButtonSize
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|padding
operator|+=
literal|4
expr_stmt|;
name|widgetWidth
operator|+=
name|opt
operator|.
name|leftButtonSize
operator|.
name|width
argument_list|()
expr_stmt|;
name|widgetHeight
operator|+=
name|opt
operator|.
name|leftButtonSize
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|opt
operator|.
name|rightButtonSize
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|padding
operator|+=
literal|4
expr_stmt|;
name|widgetWidth
operator|+=
name|opt
operator|.
name|rightButtonSize
operator|.
name|width
argument_list|()
expr_stmt|;
name|widgetHeight
operator|+=
name|opt
operator|.
name|rightButtonSize
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|opt
operator|.
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|padding
operator|+=
literal|4
expr_stmt|;
name|QSize
name|csz
decl_stmt|;
if|if
condition|(
name|verticalTabs
argument_list|(
name|d
operator|->
name|shape
argument_list|)
condition|)
block|{
name|csz
operator|=
name|QSize
argument_list|(
name|qMax
argument_list|(
name|maxWidgetWidth
argument_list|,
name|qMax
argument_list|(
name|fm
operator|.
name|height
argument_list|()
argument_list|,
name|iconSize
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
operator|+
name|vframe
argument_list|,
name|fm
operator|.
name|size
argument_list|(
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|tab
operator|->
name|text
argument_list|)
operator|.
name|width
argument_list|()
operator|+
name|iconSize
operator|.
name|width
argument_list|()
operator|+
name|hframe
operator|+
name|widgetHeight
operator|+
name|padding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|csz
operator|=
name|QSize
argument_list|(
name|fm
operator|.
name|size
argument_list|(
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|tab
operator|->
name|text
argument_list|)
operator|.
name|width
argument_list|()
operator|+
name|iconSize
operator|.
name|width
argument_list|()
operator|+
name|hframe
operator|+
name|widgetWidth
operator|+
name|padding
argument_list|,
name|qMax
argument_list|(
name|maxWidgetHeight
argument_list|,
name|qMax
argument_list|(
name|fm
operator|.
name|height
argument_list|()
argument_list|,
name|iconSize
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
operator|+
name|vframe
argument_list|)
expr_stmt|;
block|}
name|QSize
name|retSize
init|=
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_TabBarTab
argument_list|,
operator|&
name|opt
argument_list|,
name|csz
argument_list|,
name|this
argument_list|)
decl_stmt|;
return|return
name|retSize
return|;
block|}
return|return
name|QSize
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   This virtual handler is called after a new tab was added or   inserted at position \a index.    \sa tabRemoved()  */
end_comment
begin_function
DECL|function|tabInserted
name|void
name|QTabBar
operator|::
name|tabInserted
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|index
argument_list|)
block|}
end_function
begin_comment
comment|/*!   This virtual handler is called after a tab was removed from   position \a index.    \sa tabInserted()  */
end_comment
begin_function
DECL|function|tabRemoved
name|void
name|QTabBar
operator|::
name|tabRemoved
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|index
argument_list|)
block|}
end_function
begin_comment
comment|/*!   This virtual handler is called whenever the tab layout changes.    \sa tabRect()  */
end_comment
begin_function
DECL|function|tabLayoutChange
name|void
name|QTabBar
operator|::
name|tabLayoutChange
parameter_list|()
block|{ }
end_function
begin_comment
comment|/*!\reimp  */
end_comment
begin_function
DECL|function|showEvent
name|void
name|QTabBar
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|layoutDirty
condition|)
name|d
operator|->
name|refresh
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|validIndex
argument_list|(
name|d
operator|->
name|currentIndex
argument_list|)
condition|)
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateMacBorderMetrics
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!\reimp  */
end_comment
begin_function
DECL|function|hideEvent
name|void
name|QTabBar
operator|::
name|hideEvent
parameter_list|(
name|QHideEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateMacBorderMetrics
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!\reimp  */
end_comment
begin_function
DECL|function|event
name|bool
name|QTabBar
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|HoverMove
operator|||
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|HoverEnter
condition|)
block|{
name|QHoverEvent
modifier|*
name|he
init|=
cast|static_cast
argument_list|<
name|QHoverEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|hoverRect
operator|.
name|contains
argument_list|(
name|he
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
name|QRect
name|oldHoverRect
init|=
name|d
operator|->
name|hoverRect
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QRect
name|area
init|=
name|tabRect
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|.
name|contains
argument_list|(
name|he
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
name|d
operator|->
name|hoverRect
operator|=
name|area
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|he
operator|->
name|oldPos
argument_list|()
operator|!=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
condition|)
name|update
argument_list|(
name|oldHoverRect
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|d
operator|->
name|hoverRect
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|HoverLeave
condition|)
block|{
name|QRect
name|oldHoverRect
init|=
name|d
operator|->
name|hoverRect
decl_stmt|;
name|d
operator|->
name|hoverRect
operator|=
name|QRect
argument_list|()
expr_stmt|;
name|update
argument_list|(
name|oldHoverRect
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ToolTip
condition|)
block|{
if|if
condition|(
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|tabAt
argument_list|(
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|tab
operator|->
name|toolTip
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QToolTip
operator|::
name|showText
argument_list|(
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|globalPos
argument_list|()
argument_list|,
name|tab
operator|->
name|toolTip
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_TOOLTIP
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|QueryWhatsThis
condition|)
block|{
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|d
operator|->
name|indexAtPos
argument_list|(
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tab
operator|||
name|tab
operator|->
name|whatsThis
operator|.
name|isEmpty
argument_list|()
condition|)
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|WhatsThis
condition|)
block|{
if|if
condition|(
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
name|d
operator|->
name|at
argument_list|(
name|d
operator|->
name|indexAtPos
argument_list|(
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|tab
operator|->
name|whatsThis
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QWhatsThis
operator|::
name|showText
argument_list|(
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|globalPos
argument_list|()
argument_list|,
name|tab
operator|->
name|whatsThis
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_WHATSTHIS
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Shortcut
condition|)
block|{
name|QShortcutEvent
modifier|*
name|se
init|=
cast|static_cast
argument_list|<
name|QShortcutEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QTabBarPrivate
operator|::
name|Tab
modifier|*
name|tab
init|=
operator|&
name|d
operator|->
name|tabList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|tab
operator|->
name|shortcutId
operator|==
name|se
operator|->
name|shortcutId
argument_list|()
condition|)
block|{
name|setCurrentIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonDblClick
condition|)
block|{
comment|// ### fixme Qt 6: move to mouseDoubleClickEvent(), here for BC reasons.
specifier|const
name|QPoint
name|pos
init|=
cast|static_cast
argument_list|<
specifier|const
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|pos
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|isEventInCornerButtons
init|=
operator|(
operator|!
name|d
operator|->
name|leftB
operator|->
name|isHidden
argument_list|()
operator|&&
name|d
operator|->
name|leftB
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|d
operator|->
name|rightB
operator|->
name|isHidden
argument_list|()
operator|&&
name|d
operator|->
name|rightB
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|isEventInCornerButtons
condition|)
emit|emit
name|tabBarDoubleClicked
argument_list|(
name|tabAt
argument_list|(
name|pos
argument_list|)
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Move
condition|)
block|{
name|d
operator|->
name|updateMacBorderMetrics
argument_list|()
expr_stmt|;
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|DragEnter
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|changeCurrentOnDrag
condition|)
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|DragMove
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|changeCurrentOnDrag
condition|)
block|{
specifier|const
name|int
name|tabIndex
init|=
name|tabAt
argument_list|(
cast|static_cast
argument_list|<
name|QDragMoveEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTabEnabled
argument_list|(
name|tabIndex
argument_list|)
operator|&&
name|d
operator|->
name|switchTabCurrentIndex
operator|!=
name|tabIndex
condition|)
block|{
name|d
operator|->
name|switchTabCurrentIndex
operator|=
name|tabIndex
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|switchTabTimerId
condition|)
name|killTimer
argument_list|(
name|d
operator|->
name|switchTabTimerId
argument_list|)
expr_stmt|;
name|d
operator|->
name|switchTabTimerId
operator|=
name|startTimer
argument_list|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TabBar_ChangeCurrentDelay
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|DragLeave
operator|||
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Drop
condition|)
block|{
name|d
operator|->
name|killSwitchTabTimer
argument_list|()
expr_stmt|;
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!\reimp  */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QTabBar
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|layoutDirty
condition|)
name|updateGeometry
argument_list|()
expr_stmt|;
name|d
operator|->
name|layoutTabs
argument_list|()
expr_stmt|;
name|d
operator|->
name|makeVisible
argument_list|(
name|d
operator|->
name|currentIndex
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!\reimp  */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QTabBar
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|QStyleOptionTabBarBase
name|optTabBase
decl_stmt|;
name|QTabBarPrivate
operator|::
name|initStyleBaseOption
argument_list|(
operator|&
name|optTabBase
argument_list|,
name|this
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QStylePainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|int
name|selected
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|cutLeft
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|cutRight
init|=
operator|-
literal|1
decl_stmt|;
name|bool
name|vertical
init|=
name|verticalTabs
argument_list|(
name|d
operator|->
name|shape
argument_list|)
decl_stmt|;
name|QStyleOptionTab
name|cutTabLeft
decl_stmt|;
name|QStyleOptionTab
name|cutTabRight
decl_stmt|;
name|selected
operator|=
name|d
operator|->
name|currentIndex
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|dragInProgress
condition|)
name|selected
operator|=
name|d
operator|->
name|pressedIndex
expr_stmt|;
specifier|const
name|QRect
name|scrollRect
init|=
name|d
operator|->
name|normalizedScrollRect
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|optTabBase
operator|.
name|tabBarRect
operator||=
name|tabRect
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|optTabBase
operator|.
name|selectedTabRect
operator|=
name|tabRect
argument_list|(
name|selected
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|drawBase
condition|)
name|p
operator|.
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameTabBarBase
argument_list|,
name|optTabBase
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QStyleOptionTab
name|tab
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|tab
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|paintWithOffsets
operator|&&
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|dragOffset
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|vertical
condition|)
block|{
name|tab
operator|.
name|rect
operator|.
name|moveTop
argument_list|(
name|tab
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|dragOffset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tab
operator|.
name|rect
operator|.
name|moveLeft
argument_list|(
name|tab
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|dragOffset
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|tab
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
condition|)
block|{
name|tab
operator|.
name|palette
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
block|}
comment|// If this tab is partially obscured, make a note of it so that we can pass the information
comment|// along when we draw the tear.
name|QRect
name|tabRect
init|=
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|rect
decl_stmt|;
name|int
name|tabStart
init|=
name|vertical
condition|?
name|tabRect
operator|.
name|top
argument_list|()
else|:
name|tabRect
operator|.
name|left
argument_list|()
decl_stmt|;
name|int
name|tabEnd
init|=
name|vertical
condition|?
name|tabRect
operator|.
name|bottom
argument_list|()
else|:
name|tabRect
operator|.
name|right
argument_list|()
decl_stmt|;
if|if
condition|(
name|tabStart
operator|<
name|scrollRect
operator|.
name|left
argument_list|()
operator|+
name|d
operator|->
name|scrollOffset
condition|)
block|{
name|cutLeft
operator|=
name|i
expr_stmt|;
name|cutTabLeft
operator|=
name|tab
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tabEnd
operator|>
name|scrollRect
operator|.
name|right
argument_list|()
operator|+
name|d
operator|->
name|scrollOffset
condition|)
block|{
name|cutRight
operator|=
name|i
expr_stmt|;
name|cutTabRight
operator|=
name|tab
expr_stmt|;
block|}
comment|// Don't bother drawing a tab if the entire tab is outside of the visible tab bar.
if|if
condition|(
operator|(
operator|!
name|vertical
operator|&&
operator|(
name|tab
operator|.
name|rect
operator|.
name|right
argument_list|()
operator|<
literal|0
operator|||
name|tab
operator|.
name|rect
operator|.
name|left
argument_list|()
operator|>
name|width
argument_list|()
operator|)
operator|)
operator|||
operator|(
name|vertical
operator|&&
operator|(
name|tab
operator|.
name|rect
operator|.
name|bottom
argument_list|()
operator|<
literal|0
operator|||
name|tab
operator|.
name|rect
operator|.
name|top
argument_list|()
operator|>
name|height
argument_list|()
operator|)
operator|)
condition|)
continue|continue;
name|optTabBase
operator|.
name|tabBarRect
operator||=
name|tab
operator|.
name|rect
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|selected
condition|)
continue|continue;
name|p
operator|.
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_TabBarTab
argument_list|,
name|tab
argument_list|)
expr_stmt|;
block|}
comment|// Draw the selected tab last to get it "on top"
if|if
condition|(
name|selected
operator|>=
literal|0
condition|)
block|{
name|QStyleOptionTab
name|tab
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|tab
argument_list|,
name|selected
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|paintWithOffsets
operator|&&
name|d
operator|->
name|tabList
index|[
name|selected
index|]
operator|.
name|dragOffset
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|vertical
condition|)
name|tab
operator|.
name|rect
operator|.
name|moveTop
argument_list|(
name|tab
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|d
operator|->
name|tabList
index|[
name|selected
index|]
operator|.
name|dragOffset
argument_list|)
expr_stmt|;
else|else
name|tab
operator|.
name|rect
operator|.
name|moveLeft
argument_list|(
name|tab
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
name|d
operator|->
name|tabList
index|[
name|selected
index|]
operator|.
name|dragOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|dragInProgress
condition|)
name|p
operator|.
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_TabBarTab
argument_list|,
name|tab
argument_list|)
expr_stmt|;
else|else
block|{
name|int
name|taboverlap
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TabBarTabOverlap
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|d
operator|->
name|movingTab
operator|->
name|setGeometry
argument_list|(
name|tab
operator|.
name|rect
operator|.
name|adjusted
argument_list|(
operator|-
name|taboverlap
argument_list|,
literal|0
argument_list|,
name|taboverlap
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Only draw the tear indicator if necessary. Most of the time we don't need too.
if|if
condition|(
name|d
operator|->
name|leftB
operator|->
name|isVisible
argument_list|()
operator|&&
name|cutLeft
operator|>=
literal|0
condition|)
block|{
name|cutTabLeft
operator|.
name|rect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|cutTabLeft
operator|.
name|rect
operator|=
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabBarTearIndicatorLeft
argument_list|,
operator|&
name|cutTabLeft
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_IndicatorTabTearLeft
argument_list|,
name|cutTabLeft
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|rightB
operator|->
name|isVisible
argument_list|()
operator|&&
name|cutRight
operator|>=
literal|0
condition|)
block|{
name|cutTabRight
operator|.
name|rect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|cutTabRight
operator|.
name|rect
operator|=
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabBarTearIndicatorRight
argument_list|,
operator|&
name|cutTabRight
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_IndicatorTabTearRight
argument_list|,
name|cutTabRight
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*     Given that index at position from moved to position to where return where index goes.  */
end_comment
begin_function
DECL|function|calculateNewPosition
name|int
name|QTabBarPrivate
operator|::
name|calculateNewPosition
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|==
name|from
condition|)
return|return
name|to
return|;
name|int
name|start
init|=
name|qMin
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|qMax
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
name|start
operator|&&
name|index
operator|<=
name|end
condition|)
name|index
operator|+=
operator|(
name|from
operator|<
name|to
operator|)
condition|?
operator|-
literal|1
else|:
literal|1
expr_stmt|;
return|return
name|index
return|;
block|}
end_function
begin_comment
comment|/*!     Moves the item at index position \a from to index position \a to.     \since 4.5      \sa tabMoved(), tabLayoutChange()  */
end_comment
begin_function
DECL|function|moveTab
name|void
name|QTabBar
operator|::
name|moveTab
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|==
name|to
operator|||
operator|!
name|d
operator|->
name|validIndex
argument_list|(
name|from
argument_list|)
operator|||
operator|!
name|d
operator|->
name|validIndex
argument_list|(
name|to
argument_list|)
condition|)
return|return;
name|bool
name|vertical
init|=
name|verticalTabs
argument_list|(
name|d
operator|->
name|shape
argument_list|)
decl_stmt|;
name|int
name|oldPressedPosition
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|pressedIndex
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Record the position of the pressed tab before reordering the tabs.
name|oldPressedPosition
operator|=
name|vertical
condition|?
name|d
operator|->
name|tabList
index|[
name|d
operator|->
name|pressedIndex
index|]
operator|.
name|rect
operator|.
name|y
argument_list|()
else|:
name|d
operator|->
name|tabList
index|[
name|d
operator|->
name|pressedIndex
index|]
operator|.
name|rect
operator|.
name|x
argument_list|()
expr_stmt|;
block|}
comment|// Update the locations of the tabs first
name|int
name|start
init|=
name|qMin
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|qMax
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|int
name|width
init|=
name|vertical
condition|?
name|d
operator|->
name|tabList
index|[
name|from
index|]
operator|.
name|rect
operator|.
name|height
argument_list|()
else|:
name|d
operator|->
name|tabList
index|[
name|from
index|]
operator|.
name|rect
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|from
operator|<
name|to
condition|)
name|width
operator|*=
operator|-
literal|1
expr_stmt|;
name|bool
name|rtl
init|=
name|isRightToLeft
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
name|from
condition|)
continue|continue;
if|if
condition|(
name|vertical
condition|)
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|rect
operator|.
name|moveTop
argument_list|(
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|rect
operator|.
name|y
argument_list|()
operator|+
name|width
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|rect
operator|.
name|moveLeft
argument_list|(
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|rect
operator|.
name|x
argument_list|()
operator|+
name|width
argument_list|)
expr_stmt|;
name|int
name|direction
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|rtl
operator|&&
operator|!
name|vertical
condition|)
name|direction
operator|*=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|dragOffset
operator|!=
literal|0
condition|)
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|dragOffset
operator|+=
operator|(
name|direction
operator|*
name|width
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|vertical
condition|)
block|{
if|if
condition|(
name|from
operator|<
name|to
condition|)
name|d
operator|->
name|tabList
index|[
name|from
index|]
operator|.
name|rect
operator|.
name|moveTop
argument_list|(
name|d
operator|->
name|tabList
index|[
name|to
index|]
operator|.
name|rect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|tabList
index|[
name|from
index|]
operator|.
name|rect
operator|.
name|moveTop
argument_list|(
name|d
operator|->
name|tabList
index|[
name|to
index|]
operator|.
name|rect
operator|.
name|top
argument_list|()
operator|-
name|width
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|from
operator|<
name|to
condition|)
name|d
operator|->
name|tabList
index|[
name|from
index|]
operator|.
name|rect
operator|.
name|moveLeft
argument_list|(
name|d
operator|->
name|tabList
index|[
name|to
index|]
operator|.
name|rect
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|tabList
index|[
name|from
index|]
operator|.
name|rect
operator|.
name|moveLeft
argument_list|(
name|d
operator|->
name|tabList
index|[
name|to
index|]
operator|.
name|rect
operator|.
name|left
argument_list|()
operator|-
name|width
argument_list|)
expr_stmt|;
block|}
comment|// Move the actual data structures
name|d
operator|->
name|tabList
operator|.
name|move
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
comment|// update lastTab locations
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|lastTab
operator|=
name|d
operator|->
name|calculateNewPosition
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|lastTab
argument_list|)
expr_stmt|;
comment|// update external variables
name|int
name|previousIndex
init|=
name|d
operator|->
name|currentIndex
decl_stmt|;
name|d
operator|->
name|currentIndex
operator|=
name|d
operator|->
name|calculateNewPosition
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|d
operator|->
name|currentIndex
argument_list|)
expr_stmt|;
comment|// If we are in the middle of a drag update the dragStartPosition
if|if
condition|(
name|d
operator|->
name|pressedIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|pressedIndex
operator|=
name|d
operator|->
name|calculateNewPosition
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|d
operator|->
name|pressedIndex
argument_list|)
expr_stmt|;
name|int
name|newPressedPosition
init|=
name|vertical
condition|?
name|d
operator|->
name|tabList
index|[
name|d
operator|->
name|pressedIndex
index|]
operator|.
name|rect
operator|.
name|top
argument_list|()
else|:
name|d
operator|->
name|tabList
index|[
name|d
operator|->
name|pressedIndex
index|]
operator|.
name|rect
operator|.
name|left
argument_list|()
decl_stmt|;
name|int
name|diff
init|=
name|oldPressedPosition
operator|-
name|newPressedPosition
decl_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
operator|&&
operator|!
name|vertical
condition|)
name|diff
operator|*=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|vertical
condition|)
name|d
operator|->
name|dragStartPosition
operator|.
name|setY
argument_list|(
name|d
operator|->
name|dragStartPosition
operator|.
name|y
argument_list|()
operator|-
name|diff
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|dragStartPosition
operator|.
name|setX
argument_list|(
name|d
operator|->
name|dragStartPosition
operator|.
name|x
argument_list|()
operator|-
name|diff
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|layoutWidgets
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
emit|emit
name|tabMoved
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
emit|;
if|if
condition|(
name|previousIndex
operator|!=
name|d
operator|->
name|currentIndex
condition|)
emit|emit
name|currentChanged
argument_list|(
name|d
operator|->
name|currentIndex
argument_list|)
emit|;
emit|emit
name|tabLayoutChange
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|slide
name|void
name|QTabBarPrivate
operator|::
name|slide
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|==
name|to
operator|||
operator|!
name|validIndex
argument_list|(
name|from
argument_list|)
operator|||
operator|!
name|validIndex
argument_list|(
name|to
argument_list|)
condition|)
return|return;
name|bool
name|vertical
init|=
name|verticalTabs
argument_list|(
name|shape
argument_list|)
decl_stmt|;
name|int
name|preLocation
init|=
name|vertical
condition|?
name|q
operator|->
name|tabRect
argument_list|(
name|from
argument_list|)
operator|.
name|y
argument_list|()
else|:
name|q
operator|->
name|tabRect
argument_list|(
name|from
argument_list|)
operator|.
name|x
argument_list|()
decl_stmt|;
name|q
operator|->
name|setUpdatesEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|moveTab
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|q
operator|->
name|setUpdatesEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|postLocation
init|=
name|vertical
condition|?
name|q
operator|->
name|tabRect
argument_list|(
name|to
argument_list|)
operator|.
name|y
argument_list|()
else|:
name|q
operator|->
name|tabRect
argument_list|(
name|to
argument_list|)
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|postLocation
operator|-
name|preLocation
decl_stmt|;
name|tabList
index|[
name|to
index|]
operator|.
name|dragOffset
operator|-=
name|length
expr_stmt|;
name|tabList
index|[
name|to
index|]
operator|.
name|startAnimation
argument_list|(
name|this
argument_list|,
name|ANIMATION_DURATION
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moveTab
name|void
name|QTabBarPrivate
operator|::
name|moveTab
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validIndex
argument_list|(
name|index
argument_list|)
condition|)
return|return;
name|tabList
index|[
name|index
index|]
operator|.
name|dragOffset
operator|=
name|offset
expr_stmt|;
name|layoutTab
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// Make buttons follow tab
name|q_func
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!\reimp */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|QTabBar
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
specifier|const
name|QPoint
name|pos
init|=
name|event
operator|->
name|pos
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|isEventInCornerButtons
init|=
operator|(
operator|!
name|d
operator|->
name|leftB
operator|->
name|isHidden
argument_list|()
operator|&&
name|d
operator|->
name|leftB
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|d
operator|->
name|rightB
operator|->
name|isHidden
argument_list|()
operator|&&
name|d
operator|->
name|rightB
operator|->
name|geometry
argument_list|()
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|isEventInCornerButtons
condition|)
block|{
specifier|const
name|int
name|index
init|=
name|d
operator|->
name|indexAtPos
argument_list|(
name|pos
argument_list|)
decl_stmt|;
emit|emit
name|tabBarClicked
argument_list|(
name|index
argument_list|)
emit|;
block|}
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Be safe!
if|if
condition|(
name|d
operator|->
name|pressedIndex
operator|!=
operator|-
literal|1
operator|&&
name|d
operator|->
name|movable
condition|)
name|d
operator|->
name|moveTabFinished
argument_list|(
name|d
operator|->
name|pressedIndex
argument_list|)
expr_stmt|;
name|d
operator|->
name|pressedIndex
operator|=
name|d
operator|->
name|indexAtPos
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
name|d
operator|->
name|previousPressedIndex
operator|=
name|d
operator|->
name|pressedIndex
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|validIndex
argument_list|(
name|d
operator|->
name|pressedIndex
argument_list|)
condition|)
block|{
name|QStyleOptionTabBarBase
name|optTabBase
decl_stmt|;
name|optTabBase
operator|.
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|optTabBase
operator|.
name|documentMode
operator|=
name|d
operator|->
name|documentMode
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TabBar_SelectMouseType
argument_list|,
operator|&
name|optTabBase
argument_list|,
name|this
argument_list|)
condition|)
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|pressedIndex
argument_list|)
expr_stmt|;
else|else
name|repaint
argument_list|(
name|tabRect
argument_list|(
name|d
operator|->
name|pressedIndex
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|movable
condition|)
block|{
name|d
operator|->
name|dragStartPosition
operator|=
name|event
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!\reimp  */
end_comment
begin_function
DECL|function|mouseMoveEvent
name|void
name|QTabBar
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|movable
condition|)
block|{
comment|// Be safe!
if|if
condition|(
name|d
operator|->
name|pressedIndex
operator|!=
operator|-
literal|1
operator|&&
name|event
operator|->
name|buttons
argument_list|()
operator|==
name|Qt
operator|::
name|NoButton
condition|)
name|d
operator|->
name|moveTabFinished
argument_list|(
name|d
operator|->
name|pressedIndex
argument_list|)
expr_stmt|;
comment|// Start drag
if|if
condition|(
operator|!
name|d
operator|->
name|dragInProgress
operator|&&
name|d
operator|->
name|pressedIndex
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|(
name|event
operator|->
name|pos
argument_list|()
operator|-
name|d
operator|->
name|dragStartPosition
operator|)
operator|.
name|manhattanLength
argument_list|()
operator|>
name|QApplication
operator|::
name|startDragDistance
argument_list|()
condition|)
block|{
name|d
operator|->
name|dragInProgress
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|setupMovableTab
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|offset
init|=
operator|(
name|event
operator|->
name|pos
argument_list|()
operator|-
name|d
operator|->
name|dragStartPosition
operator|)
operator|.
name|manhattanLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|buttons
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|&&
name|offset
operator|>
name|QApplication
operator|::
name|startDragDistance
argument_list|()
operator|&&
name|d
operator|->
name|validIndex
argument_list|(
name|d
operator|->
name|pressedIndex
argument_list|)
condition|)
block|{
name|bool
name|vertical
init|=
name|verticalTabs
argument_list|(
name|d
operator|->
name|shape
argument_list|)
decl_stmt|;
name|int
name|dragDistance
decl_stmt|;
if|if
condition|(
name|vertical
condition|)
block|{
name|dragDistance
operator|=
operator|(
name|event
operator|->
name|pos
argument_list|()
operator|.
name|y
argument_list|()
operator|-
name|d
operator|->
name|dragStartPosition
operator|.
name|y
argument_list|()
operator|)
expr_stmt|;
block|}
else|else
block|{
name|dragDistance
operator|=
operator|(
name|event
operator|->
name|pos
argument_list|()
operator|.
name|x
argument_list|()
operator|-
name|d
operator|->
name|dragStartPosition
operator|.
name|x
argument_list|()
operator|)
expr_stmt|;
block|}
name|d
operator|->
name|tabList
index|[
name|d
operator|->
name|pressedIndex
index|]
operator|.
name|dragOffset
operator|=
name|dragDistance
expr_stmt|;
name|QRect
name|startingRect
init|=
name|tabRect
argument_list|(
name|d
operator|->
name|pressedIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|vertical
condition|)
name|startingRect
operator|.
name|moveTop
argument_list|(
name|startingRect
operator|.
name|y
argument_list|()
operator|+
name|dragDistance
argument_list|)
expr_stmt|;
else|else
name|startingRect
operator|.
name|moveLeft
argument_list|(
name|startingRect
operator|.
name|x
argument_list|()
operator|+
name|dragDistance
argument_list|)
expr_stmt|;
name|int
name|overIndex
decl_stmt|;
if|if
condition|(
name|dragDistance
operator|<
literal|0
condition|)
name|overIndex
operator|=
name|tabAt
argument_list|(
name|startingRect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|overIndex
operator|=
name|tabAt
argument_list|(
name|startingRect
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|overIndex
operator|!=
name|d
operator|->
name|pressedIndex
operator|&&
name|overIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|offset
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
operator|&&
operator|!
name|vertical
condition|)
name|offset
operator|*=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|dragDistance
operator|<
literal|0
condition|)
block|{
name|dragDistance
operator|*=
operator|-
literal|1
expr_stmt|;
name|offset
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|d
operator|->
name|pressedIndex
init|;
name|offset
operator|>
literal|0
condition|?
name|i
operator|<
name|overIndex
else|:
name|i
operator|>
name|overIndex
condition|;
name|i
operator|+=
name|offset
control|)
block|{
name|QRect
name|overIndexRect
init|=
name|tabRect
argument_list|(
name|overIndex
argument_list|)
decl_stmt|;
name|int
name|needsToBeOver
init|=
operator|(
name|vertical
condition|?
name|overIndexRect
operator|.
name|height
argument_list|()
else|:
name|overIndexRect
operator|.
name|width
argument_list|()
operator|)
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|dragDistance
operator|>
name|needsToBeOver
condition|)
name|d
operator|->
name|slide
argument_list|(
name|i
operator|+
name|offset
argument_list|,
name|d
operator|->
name|pressedIndex
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Buttons needs to follow the dragged tab
name|d
operator|->
name|layoutTab
argument_list|(
name|d
operator|->
name|pressedIndex
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
block|}
elseif|else
if|if
condition|(
operator|!
name|d
operator|->
name|documentMode
operator|&&
name|event
operator|->
name|buttons
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|&&
name|d
operator|->
name|previousPressedIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|newPressedIndex
init|=
name|d
operator|->
name|indexAtPos
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|pressedIndex
operator|==
operator|-
literal|1
operator|&&
name|d
operator|->
name|previousPressedIndex
operator|==
name|newPressedIndex
condition|)
block|{
name|d
operator|->
name|pressedIndex
operator|=
name|d
operator|->
name|previousPressedIndex
expr_stmt|;
name|update
argument_list|(
name|tabRect
argument_list|(
name|d
operator|->
name|pressedIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|pressedIndex
operator|!=
name|newPressedIndex
condition|)
block|{
name|d
operator|->
name|pressedIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|update
argument_list|(
name|tabRect
argument_list|(
name|d
operator|->
name|previousPressedIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
if|if
condition|(
name|event
operator|->
name|buttons
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
end_function
begin_function
DECL|function|setupMovableTab
name|void
name|QTabBarPrivate
operator|::
name|setupMovableTab
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|movingTab
condition|)
name|movingTab
operator|=
operator|new
name|QWidget
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|int
name|taboverlap
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TabBarTabOverlap
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|QRect
name|grabRect
init|=
name|q
operator|->
name|tabRect
argument_list|(
name|pressedIndex
argument_list|)
decl_stmt|;
name|grabRect
operator|.
name|adjust
argument_list|(
operator|-
name|taboverlap
argument_list|,
literal|0
argument_list|,
name|taboverlap
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QPixmap
name|grabImage
argument_list|(
name|grabRect
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|grabImage
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QStylePainter
name|p
argument_list|(
operator|&
name|grabImage
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|p
operator|.
name|initFrom
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QStyleOptionTab
name|tab
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|tab
argument_list|,
name|pressedIndex
argument_list|)
expr_stmt|;
name|tab
operator|.
name|rect
operator|.
name|moveTopLeft
argument_list|(
name|QPoint
argument_list|(
name|taboverlap
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_TabBarTab
argument_list|,
name|tab
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QPalette
name|pal
decl_stmt|;
name|pal
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|,
name|grabImage
argument_list|)
expr_stmt|;
name|movingTab
operator|->
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|movingTab
operator|->
name|setGeometry
argument_list|(
name|grabRect
argument_list|)
expr_stmt|;
name|movingTab
operator|->
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|movingTab
operator|->
name|raise
argument_list|()
expr_stmt|;
comment|// Re-arrange widget order to avoid overlaps
if|if
condition|(
name|tabList
index|[
name|pressedIndex
index|]
operator|.
name|leftWidget
condition|)
name|tabList
index|[
name|pressedIndex
index|]
operator|.
name|leftWidget
operator|->
name|raise
argument_list|()
expr_stmt|;
if|if
condition|(
name|tabList
index|[
name|pressedIndex
index|]
operator|.
name|rightWidget
condition|)
name|tabList
index|[
name|pressedIndex
index|]
operator|.
name|rightWidget
operator|->
name|raise
argument_list|()
expr_stmt|;
if|if
condition|(
name|leftB
condition|)
name|leftB
operator|->
name|raise
argument_list|()
expr_stmt|;
if|if
condition|(
name|rightB
condition|)
name|rightB
operator|->
name|raise
argument_list|()
expr_stmt|;
name|movingTab
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moveTabFinished
name|void
name|QTabBarPrivate
operator|::
name|moveTabFinished
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|bool
name|cleanup
init|=
operator|(
name|pressedIndex
operator|==
name|index
operator|)
operator|||
operator|(
name|pressedIndex
operator|==
operator|-
literal|1
operator|)
operator|||
operator|!
name|validIndex
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|bool
name|allAnimationsFinished
init|=
literal|true
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|allAnimationsFinished
operator|&&
name|i
operator|<
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|Tab
modifier|&
name|t
init|=
name|tabList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|animation
operator|&&
name|t
operator|.
name|animation
operator|->
name|state
argument_list|()
operator|==
name|QAbstractAnimation
operator|::
name|Running
condition|)
name|allAnimationsFinished
operator|=
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
comment|//QT_NO_ANIMATION
if|if
condition|(
name|allAnimationsFinished
operator|&&
name|cleanup
condition|)
block|{
if|if
condition|(
name|movingTab
condition|)
name|movingTab
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// We might not get a mouse release
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|tabList
index|[
name|i
index|]
operator|.
name|dragOffset
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|pressedIndex
operator|!=
operator|-
literal|1
operator|&&
name|movable
condition|)
block|{
name|pressedIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|dragInProgress
operator|=
literal|false
expr_stmt|;
name|dragStartPosition
operator|=
name|QPoint
argument_list|()
expr_stmt|;
block|}
name|layoutWidgets
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|validIndex
argument_list|(
name|index
argument_list|)
condition|)
return|return;
name|tabList
index|[
name|index
index|]
operator|.
name|dragOffset
operator|=
literal|0
expr_stmt|;
block|}
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!\reimp */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QTabBar
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
name|d
operator|->
name|previousPressedIndex
operator|=
operator|-
literal|1
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|movable
operator|&&
name|d
operator|->
name|dragInProgress
operator|&&
name|d
operator|->
name|validIndex
argument_list|(
name|d
operator|->
name|pressedIndex
argument_list|)
condition|)
block|{
name|int
name|length
init|=
name|d
operator|->
name|tabList
index|[
name|d
operator|->
name|pressedIndex
index|]
operator|.
name|dragOffset
decl_stmt|;
name|int
name|width
init|=
name|verticalTabs
argument_list|(
name|d
operator|->
name|shape
argument_list|)
condition|?
name|tabRect
argument_list|(
name|d
operator|->
name|pressedIndex
argument_list|)
operator|.
name|height
argument_list|()
else|:
name|tabRect
argument_list|(
name|d
operator|->
name|pressedIndex
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|duration
init|=
name|qMin
argument_list|(
name|ANIMATION_DURATION
argument_list|,
operator|(
name|qAbs
argument_list|(
name|length
argument_list|)
operator|*
name|ANIMATION_DURATION
operator|)
operator|/
name|width
argument_list|)
decl_stmt|;
name|d
operator|->
name|tabList
index|[
name|d
operator|->
name|pressedIndex
index|]
operator|.
name|startAnimation
argument_list|(
name|d
argument_list|,
name|duration
argument_list|)
expr_stmt|;
name|d
operator|->
name|dragInProgress
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|movingTab
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|dragStartPosition
operator|=
name|QPoint
argument_list|()
expr_stmt|;
block|}
name|int
name|i
init|=
name|d
operator|->
name|indexAtPos
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
operator|==
name|d
operator|->
name|pressedIndex
condition|?
name|d
operator|->
name|pressedIndex
else|:
operator|-
literal|1
decl_stmt|;
name|d
operator|->
name|pressedIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|QStyleOptionTabBarBase
name|optTabBase
decl_stmt|;
name|optTabBase
operator|.
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|optTabBase
operator|.
name|documentMode
operator|=
name|d
operator|->
name|documentMode
expr_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TabBar_SelectMouseType
argument_list|,
operator|&
name|optTabBase
argument_list|,
name|this
argument_list|)
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
condition|)
name|setCurrentIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!\reimp  */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QTabBar
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|key
argument_list|()
operator|!=
name|Qt
operator|::
name|Key_Left
operator|&&
name|event
operator|->
name|key
argument_list|()
operator|!=
name|Qt
operator|::
name|Key_Right
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|int
name|offset
init|=
name|event
operator|->
name|key
argument_list|()
operator|==
operator|(
name|isRightToLeft
argument_list|()
condition|?
name|Qt
operator|::
name|Key_Right
else|:
name|Qt
operator|::
name|Key_Left
operator|)
condition|?
operator|-
literal|1
else|:
literal|1
decl_stmt|;
name|d
operator|->
name|setCurrentNextEnabledIndex
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!\reimp  */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_function
DECL|function|wheelEvent
name|void
name|QTabBar
operator|::
name|wheelEvent
parameter_list|(
name|QWheelEvent
modifier|*
name|event
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
name|event
operator|->
name|delta
argument_list|()
operator|>
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
decl_stmt|;
name|d
operator|->
name|setCurrentNextEnabledIndex
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|QWidget
operator|::
name|wheelEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|event
argument_list|)
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_WHEELEVENT
end_comment
begin_function
DECL|function|setCurrentNextEnabledIndex
name|void
name|QTabBarPrivate
operator|::
name|setCurrentNextEnabledIndex
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
name|currentIndex
operator|+
name|offset
init|;
name|validIndex
argument_list|(
name|index
argument_list|)
condition|;
name|index
operator|+=
name|offset
control|)
block|{
if|if
condition|(
name|tabList
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|enabled
condition|)
block|{
name|q
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!\reimp  */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QTabBar
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StyleChange
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|elideModeSetByUser
condition|)
name|d
operator|->
name|elideMode
operator|=
name|Qt
operator|::
name|TextElideMode
argument_list|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TabBar_ElideMode
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|useScrollButtonsSetByUser
condition|)
name|d
operator|->
name|useScrollButtons
operator|=
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TabBar_PreferNoArrows
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|refresh
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FontChange
condition|)
block|{
name|d
operator|->
name|refresh
argument_list|()
expr_stmt|;
block|}
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|timerEvent
name|void
name|QTabBar
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|switchTabTimerId
condition|)
block|{
name|killTimer
argument_list|(
name|d
operator|->
name|switchTabTimerId
argument_list|)
expr_stmt|;
name|d
operator|->
name|switchTabTimerId
operator|=
literal|0
expr_stmt|;
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|switchTabCurrentIndex
argument_list|)
expr_stmt|;
name|d
operator|->
name|switchTabCurrentIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|QWidget
operator|::
name|timerEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabBar::elideMode     \brief how to elide text in the tab bar     \since 4.2      This property controls how items are elided when there is not     enough space to show them for a given tab bar size.      By default the value is style dependent.      \sa QTabWidget::elideMode, usesScrollButtons, QStyle::SH_TabBar_ElideMode */
end_comment
begin_function
DECL|function|elideMode
name|Qt
operator|::
name|TextElideMode
name|QTabBar
operator|::
name|elideMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|elideMode
return|;
block|}
end_function
begin_function
DECL|function|setElideMode
name|void
name|QTabBar
operator|::
name|setElideMode
parameter_list|(
name|Qt
operator|::
name|TextElideMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|elideMode
operator|=
name|mode
expr_stmt|;
name|d
operator|->
name|elideModeSetByUser
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|refresh
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabBar::usesScrollButtons     \brief Whether or not a tab bar should use buttons to scroll tabs when it     has many tabs.     \since 4.2      When there are too many tabs in a tab bar for its size, the tab bar can either choose     to expand its size or to add buttons that allow you to scroll through the tabs.      By default the value is style dependant.      \sa elideMode, QTabWidget::usesScrollButtons, QStyle::SH_TabBar_PreferNoArrows */
end_comment
begin_function
DECL|function|usesScrollButtons
name|bool
name|QTabBar
operator|::
name|usesScrollButtons
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|useScrollButtons
return|;
block|}
end_function
begin_function
DECL|function|setUsesScrollButtons
name|void
name|QTabBar
operator|::
name|setUsesScrollButtons
parameter_list|(
name|bool
name|useButtons
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|useScrollButtonsSetByUser
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|useScrollButtons
operator|==
name|useButtons
condition|)
return|return;
name|d
operator|->
name|useScrollButtons
operator|=
name|useButtons
expr_stmt|;
name|d
operator|->
name|refresh
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabBar::tabsClosable     \brief Whether or not a tab bar should place close buttons on each tab     \since 4.5      When tabsClosable is set to true a close button will appear on the tab on     either the left or right hand side depending upon the style.  When the button     is clicked the tab the signal tabCloseRequested will be emitted.      By default the value is false.      \sa setTabButton(), tabRemoved() */
end_comment
begin_function
DECL|function|tabsClosable
name|bool
name|QTabBar
operator|::
name|tabsClosable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|closeButtonOnTabs
return|;
block|}
end_function
begin_function
DECL|function|setTabsClosable
name|void
name|QTabBar
operator|::
name|setTabsClosable
parameter_list|(
name|bool
name|closable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|closeButtonOnTabs
operator|==
name|closable
condition|)
return|return;
name|d
operator|->
name|closeButtonOnTabs
operator|=
name|closable
expr_stmt|;
name|ButtonPosition
name|closeSide
init|=
operator|(
name|ButtonPosition
operator|)
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TabBar_CloseButtonPosition
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|closable
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|closeSide
operator|==
name|LeftSide
operator|&&
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|leftWidget
condition|)
block|{
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|leftWidget
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|leftWidget
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|closeSide
operator|==
name|RightSide
operator|&&
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|rightWidget
condition|)
block|{
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|rightWidget
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|d
operator|->
name|tabList
index|[
name|i
index|]
operator|.
name|rightWidget
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|bool
name|newButtons
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|tabButton
argument_list|(
name|i
argument_list|,
name|closeSide
argument_list|)
condition|)
continue|continue;
name|newButtons
operator|=
literal|true
expr_stmt|;
name|QAbstractButton
modifier|*
name|closeButton
init|=
operator|new
name|CloseButton
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|closeButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_closeTab
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setTabButton
argument_list|(
name|i
argument_list|,
name|closeSide
argument_list|,
name|closeButton
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newButtons
condition|)
name|d
operator|->
name|layoutTabs
argument_list|()
expr_stmt|;
block|}
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \enum QTabBar::ButtonPosition     \since 4.5      This enum type lists the location of the widget on a tab.      \value LeftSide Left side of the tab.      \value RightSide Right side of the tab.  */
end_comment
begin_comment
comment|/*!     \enum QTabBar::SelectionBehavior     \since 4.5      This enum type lists the behavior of QTabBar when a tab is removed     and the tab being removed is also the current tab.      \value SelectLeftTab  Select the tab to the left of the one being removed.      \value SelectRightTab  Select the tab to the right of the one being removed.      \value SelectPreviousTab  Select the previously selected tab.  */
end_comment
begin_comment
comment|/*!     \property QTabBar::selectionBehaviorOnRemove     \brief What tab should be set as current when removeTab is called if     the removed tab is also the current tab.     \since 4.5      By default the value is SelectRightTab.      \sa removeTab() */
end_comment
begin_function
DECL|function|selectionBehaviorOnRemove
name|QTabBar
operator|::
name|SelectionBehavior
name|QTabBar
operator|::
name|selectionBehaviorOnRemove
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|selectionBehaviorOnRemove
return|;
block|}
end_function
begin_function
DECL|function|setSelectionBehaviorOnRemove
name|void
name|QTabBar
operator|::
name|setSelectionBehaviorOnRemove
parameter_list|(
name|QTabBar
operator|::
name|SelectionBehavior
name|behavior
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|selectionBehaviorOnRemove
operator|=
name|behavior
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabBar::expanding     \brief When expanding is true QTabBar will expand the tabs to use the empty space.     \since 4.5      By default the value is true.      \sa QTabWidget::documentMode */
end_comment
begin_function
DECL|function|expanding
name|bool
name|QTabBar
operator|::
name|expanding
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|expanding
return|;
block|}
end_function
begin_function
DECL|function|setExpanding
name|void
name|QTabBar
operator|::
name|setExpanding
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|expanding
operator|==
name|enabled
condition|)
return|return;
name|d
operator|->
name|expanding
operator|=
name|enabled
expr_stmt|;
name|d
operator|->
name|layoutTabs
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabBar::movable     \brief This property holds whether the user can move the tabs     within the tabbar area.      \since 4.5      By default, this property is \c false; */
end_comment
begin_function
DECL|function|isMovable
name|bool
name|QTabBar
operator|::
name|isMovable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|movable
return|;
block|}
end_function
begin_function
DECL|function|setMovable
name|void
name|QTabBar
operator|::
name|setMovable
parameter_list|(
name|bool
name|movable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|movable
operator|=
name|movable
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabBar::documentMode     \brief Whether or not the tab bar is rendered in a mode suitable for the main window.     \since 4.5      This property is used as a hint for styles to draw the tabs in a different     way then they would normally look in a tab widget.  On OS X this will     look similar to the tabs in Safari or Leopard's Terminal.app.      \sa QTabWidget::documentMode */
end_comment
begin_function
DECL|function|documentMode
name|bool
name|QTabBar
operator|::
name|documentMode
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|documentMode
return|;
block|}
end_function
begin_function
DECL|function|setDocumentMode
name|void
name|QTabBar
operator|::
name|setDocumentMode
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|documentMode
operator|=
name|enabled
expr_stmt|;
name|d
operator|->
name|updateMacBorderMetrics
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabBar::autoHide     \brief If true, the tab bar is automatically hidden when it contains less     than 2 tabs.     \since 5.4      By default, this property is false.      \sa QWidget::visible */
end_comment
begin_function
DECL|function|autoHide
name|bool
name|QTabBar
operator|::
name|autoHide
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|autoHide
return|;
block|}
end_function
begin_function
DECL|function|setAutoHide
name|void
name|QTabBar
operator|::
name|setAutoHide
parameter_list|(
name|bool
name|hide
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|autoHide
operator|==
name|hide
condition|)
return|return;
name|d
operator|->
name|autoHide
operator|=
name|hide
expr_stmt|;
if|if
condition|(
name|hide
condition|)
name|d
operator|->
name|autoHideTabs
argument_list|()
expr_stmt|;
else|else
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabBar::changeCurrentOnDrag     \brief If true, then the current tab is automatically changed when dragging     over the tabbar.     \since 5.4      \note You should also set acceptDrops property to true to make this feature     work.      By default, this property is false. */
end_comment
begin_function
DECL|function|changeCurrentOnDrag
name|bool
name|QTabBar
operator|::
name|changeCurrentOnDrag
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|changeCurrentOnDrag
return|;
block|}
end_function
begin_function
DECL|function|setChangeCurrentOnDrag
name|void
name|QTabBar
operator|::
name|setChangeCurrentOnDrag
parameter_list|(
name|bool
name|change
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|changeCurrentOnDrag
operator|=
name|change
expr_stmt|;
if|if
condition|(
operator|!
name|change
condition|)
name|d
operator|->
name|killSwitchTabTimer
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets \a widget on the tab \a index.  The widget is placed     on the left or right hand side depending upon the \a position.     \since 4.5      Any previously set widget in \a position is hidden.      The tab bar will take ownership of the widget and so all widgets set here     will be deleted by the tab bar when it is destroyed unless you separately     reparent the widget after setting some other widget (or 0).      \sa tabsClosable()   */
end_comment
begin_function
DECL|function|setTabButton
name|void
name|QTabBar
operator|::
name|setTabButton
parameter_list|(
name|int
name|index
parameter_list|,
name|ButtonPosition
name|position
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
condition|)
return|return;
if|if
condition|(
name|widget
condition|)
block|{
name|widget
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// make sure our left and right widgets stay on top
name|widget
operator|->
name|lower
argument_list|()
expr_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|position
operator|==
name|LeftSide
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|leftWidget
condition|)
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|leftWidget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|leftWidget
operator|=
name|widget
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|rightWidget
condition|)
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|rightWidget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|d
operator|->
name|tabList
index|[
name|index
index|]
operator|.
name|rightWidget
operator|=
name|widget
expr_stmt|;
block|}
name|d
operator|->
name|layoutTabs
argument_list|()
expr_stmt|;
name|d
operator|->
name|refresh
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the widget set a tab \a index and \a position or 0 if     one is not set.   */
end_comment
begin_function
DECL|function|tabButton
name|QWidget
modifier|*
name|QTabBar
operator|::
name|tabButton
parameter_list|(
name|int
name|index
parameter_list|,
name|ButtonPosition
name|position
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|d
operator|->
name|tabList
operator|.
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|position
operator|==
name|LeftSide
condition|)
return|return
name|d
operator|->
name|tabList
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|leftWidget
return|;
else|else
return|return
name|d
operator|->
name|tabList
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|rightWidget
return|;
block|}
end_function
begin_constructor
DECL|function|CloseButton
name|CloseButton
operator|::
name|CloseButton
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractButton
argument_list|(
name|parent
argument_list|)
block|{
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|setCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
name|setToolTip
argument_list|(
name|tr
argument_list|(
literal|"Close Tab"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|resize
argument_list|(
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|sizeHint
name|QSize
name|CloseButton
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|ensurePolished
argument_list|()
expr_stmt|;
name|int
name|width
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TabCloseIndicatorWidth
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|int
name|height
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TabCloseIndicatorHeight
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
return|return
name|QSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|enterEvent
name|void
name|CloseButton
operator|::
name|enterEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
name|update
argument_list|()
expr_stmt|;
name|QAbstractButton
operator|::
name|enterEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leaveEvent
name|void
name|CloseButton
operator|::
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
name|update
argument_list|()
expr_stmt|;
name|QAbstractButton
operator|::
name|leaveEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|CloseButton
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QStyleOption
name|opt
decl_stmt|;
name|opt
operator|.
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_AutoRaise
expr_stmt|;
if|if
condition|(
name|isEnabled
argument_list|()
operator|&&
name|underMouse
argument_list|()
operator|&&
operator|!
name|isChecked
argument_list|()
operator|&&
operator|!
name|isDown
argument_list|()
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Raised
expr_stmt|;
if|if
condition|(
name|isChecked
argument_list|()
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_On
expr_stmt|;
if|if
condition|(
name|isDown
argument_list|()
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
if|if
condition|(
specifier|const
name|QTabBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTabBar
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|tb
operator|->
name|currentIndex
argument_list|()
decl_stmt|;
name|QTabBar
operator|::
name|ButtonPosition
name|position
init|=
operator|(
name|QTabBar
operator|::
name|ButtonPosition
operator|)
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TabBar_CloseButtonPosition
argument_list|,
literal|0
argument_list|,
name|tb
argument_list|)
decl_stmt|;
if|if
condition|(
name|tb
operator|->
name|tabButton
argument_list|(
name|index
argument_list|,
name|position
argument_list|)
operator|==
name|this
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
block|}
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_IndicatorTabClose
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
end_ifndef
begin_function
DECL|function|updateCurrentValue
name|void
name|QTabBarPrivate
operator|::
name|Tab
operator|::
name|TabBarAnimation
operator|::
name|updateCurrentValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|current
parameter_list|)
block|{
name|priv
operator|->
name|moveTab
argument_list|(
name|priv
operator|->
name|tabList
operator|.
name|indexOf
argument_list|(
operator|*
name|tab
argument_list|)
argument_list|,
name|current
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateState
name|void
name|QTabBarPrivate
operator|::
name|Tab
operator|::
name|TabBarAnimation
operator|::
name|updateState
parameter_list|(
name|QAbstractAnimation
operator|::
name|State
parameter_list|,
name|QAbstractAnimation
operator|::
name|State
name|newState
parameter_list|)
block|{
if|if
condition|(
name|newState
operator|==
name|Stopped
condition|)
name|priv
operator|->
name|moveTabFinished
argument_list|(
name|priv
operator|->
name|tabList
operator|.
name|indexOf
argument_list|(
operator|*
name|tab
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qtabbar.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABBAR
end_comment
end_unit
