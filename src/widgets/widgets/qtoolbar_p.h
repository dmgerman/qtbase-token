begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDYNAMICTOOLBAR_P_H
end_ifndef
begin_define
DECL|macro|QDYNAMICTOOLBAR_P_H
define|#
directive|define
name|QDYNAMICTOOLBAR_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qtoolbar.h"
end_include
begin_include
include|#
directive|include
file|"QtWidgets/qaction.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qbasictimer.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
DECL|variable|QToolBarLayout
name|class
name|QToolBarLayout
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTimer
name|class
name|QTimer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QToolBarPrivate
range|:
name|public
name|QWidgetPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QToolBar
argument_list|)
name|public
operator|:
specifier|inline
name|QToolBarPrivate
argument_list|()
operator|:
name|explicitIconSize
argument_list|(
name|false
argument_list|)
block|,
name|explicitToolButtonStyle
argument_list|(
name|false
argument_list|)
block|,
name|movable
argument_list|(
name|true
argument_list|)
block|,
name|floatable
argument_list|(
name|true
argument_list|)
block|,
name|allowedAreas
argument_list|(
name|Qt
operator|::
name|AllToolBarAreas
argument_list|)
block|,
name|orientation
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
block|,
name|toolButtonStyle
argument_list|(
name|Qt
operator|::
name|ToolButtonIconOnly
argument_list|)
block|,
name|layout
argument_list|(
literal|0
argument_list|)
block|,
name|state
argument_list|(
literal|0
argument_list|)
ifdef|#
directive|ifdef
name|Q_OS_OSX
block|,
name|macWindowDragging
argument_list|(
argument|false
argument_list|)
endif|#
directive|endif
block|{ }
name|void
name|init
argument_list|()
block|;
name|void
name|actionTriggered
argument_list|()
block|;
name|void
name|_q_toggleView
argument_list|(
argument|bool b
argument_list|)
block|;
name|void
name|_q_updateIconSize
argument_list|(
specifier|const
name|QSize
operator|&
name|sz
argument_list|)
block|;
name|void
name|_q_updateToolButtonStyle
argument_list|(
argument|Qt::ToolButtonStyle style
argument_list|)
block|;
name|bool
name|explicitIconSize
block|;
name|bool
name|explicitToolButtonStyle
block|;
name|bool
name|movable
block|;
name|bool
name|floatable
block|;
name|Qt
operator|::
name|ToolBarAreas
name|allowedAreas
block|;
name|Qt
operator|::
name|Orientation
name|orientation
block|;
name|Qt
operator|::
name|ToolButtonStyle
name|toolButtonStyle
block|;
name|QSize
name|iconSize
block|;
name|QAction
operator|*
name|toggleViewAction
block|;
name|QToolBarLayout
operator|*
name|layout
block|;      struct
name|DragState
block|{
name|QPoint
name|pressPos
block|;
name|bool
name|dragging
block|;
name|bool
name|moving
block|;
name|QLayoutItem
operator|*
name|widgetItem
block|;     }
block|;
name|DragState
operator|*
name|state
block|;
ifdef|#
directive|ifdef
name|Q_OS_OSX
name|bool
name|macWindowDragging
block|;
name|QPoint
name|macWindowDragPressPosition
block|;
endif|#
directive|endif
name|bool
name|mousePressEvent
argument_list|(
name|QMouseEvent
operator|*
name|e
argument_list|)
block|;
name|bool
name|mouseReleaseEvent
argument_list|(
name|QMouseEvent
operator|*
name|e
argument_list|)
block|;
name|bool
name|mouseMoveEvent
argument_list|(
name|QMouseEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|updateWindowFlags
argument_list|(
argument|bool floating
argument_list|,
argument|bool unplug = false
argument_list|)
block|;
name|void
name|setWindowState
argument_list|(
argument|bool floating
argument_list|,
argument|bool unplug = false
argument_list|,
argument|const QRect&rect = QRect()
argument_list|)
block|;
name|void
name|initDrag
argument_list|(
specifier|const
name|QPoint
operator|&
name|pos
argument_list|)
block|;
name|void
name|startDrag
argument_list|(
argument|bool moving = false
argument_list|)
block|;
name|void
name|endDrag
argument_list|()
block|;
name|void
name|unplug
argument_list|(
specifier|const
name|QRect
operator|&
name|r
argument_list|)
block|;
name|void
name|plug
argument_list|(
specifier|const
name|QRect
operator|&
name|r
argument_list|)
block|;
name|QBasicTimer
name|waitForPopupTimer
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLBAR
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QDYNAMICTOOLBAR_P_H
end_comment
end_unit
