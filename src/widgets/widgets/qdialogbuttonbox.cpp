begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/qhash.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qstyle.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qlayout.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qdialog.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qapplication.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qaction.h>
end_include
begin_include
include|#
directive|include
file|"qdialogbuttonbox.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|/*!     \class QDialogButtonBox     \since 4.2     \brief The QDialogButtonBox class is a widget that presents buttons in a     layout that is appropriate to the current widget style.      \ingroup dialog-classes     \inmodule QtWidgets      Dialogs and message boxes typically present buttons in a layout that     conforms to the interface guidelines for that platform. Invariably,     different platforms have different layouts for their dialogs.     QDialogButtonBox allows a developer to add buttons to it and will     automatically use the appropriate layout for the user's desktop     environment.      Most buttons for a dialog follow certain roles. Such roles include:      \list     \li Accepting or rejecting the dialog.     \li Asking for help.     \li Performing actions on the dialog itself (such as resetting fields or        applying changes).     \endlist      There can also be alternate ways of dismissing the dialog which may cause     destructive results.      Most dialogs have buttons that can almost be considered standard (e.g.     \uicontrol OK and \uicontrol Cancel buttons). It is sometimes convenient to create these     buttons in a standard way.      There are a couple ways of using QDialogButtonBox. One ways is to create     the buttons (or button texts) yourself and add them to the button box,     specifying their role.      \snippet dialogs/extension/finddialog.cpp 1      Alternatively, QDialogButtonBox provides several standard buttons (e.g. OK, Cancel, Save)     that you can use. They exist as flags so you can OR them together in the constructor.      \snippet dialogs/tabdialog/tabdialog.cpp 2      You can mix and match normal buttons and standard buttons.      Currently the buttons are laid out in the following way if the button box is horizontal:     \table     \row \li \inlineimage buttonbox-gnomelayout-horizontal.png GnomeLayout Horizontal          \li Button box laid out in horizontal GnomeLayout     \row \li \inlineimage buttonbox-kdelayout-horizontal.png KdeLayout Horizontal          \li Button box laid out in horizontal KdeLayout     \row \li \inlineimage buttonbox-maclayout-horizontal.png MacLayout Horizontal          \li Button box laid out in horizontal MacLayout     \row \li \inlineimage buttonbox-winlayout-horizontal.png  WinLayout Horizontal          \li Button box laid out in horizontal WinLayout     \endtable      The buttons are laid out the following way if the button box is vertical:      \table     \row \li GnomeLayout          \li KdeLayout          \li MacLayout          \li WinLayout     \row \li \inlineimage buttonbox-gnomelayout-vertical.png GnomeLayout Vertical          \li \inlineimage buttonbox-kdelayout-vertical.png KdeLayout Vertical          \li \inlineimage buttonbox-maclayout-vertical.png MacLayout Vertical          \li \inlineimage buttonbox-winlayout-vertical.png WinLayout Vertical     \endtable      Additionally, button boxes that contain only buttons with ActionRole or     HelpRole can be considered modeless and have an alternate look on Mac OS X:      \table     \row \li modeless horizontal MacLayout          \li \inlineimage buttonbox-mac-modeless-horizontal.png Screenshot of modeless horizontal MacLayout     \row \li modeless vertical MacLayout          \li \inlineimage buttonbox-mac-modeless-vertical.png Screenshot of modeless vertical MacLayout     \endtable      When a button is clicked in the button box, the clicked() signal is emitted     for the actual button is that is pressed. For convenience, if the button     has an AcceptRole, RejectRole, or HelpRole, the accepted(), rejected(), or     helpRequested() signals are emitted respectively.      If you want a specific button to be default you need to call     QPushButton::setDefault() on it yourself. However, if there is no default     button set and to preserve which button is the default button across     platforms when using the QPushButton::autoDefault property, the first push     button with the accept role is made the default button when the     QDialogButtonBox is shown,      \sa QMessageBox, QPushButton, QDialog */
name|enum
type|{
DECL|enumerator|AcceptRole
name|AcceptRole
init|=
name|QDialogButtonBox
operator|::
name|AcceptRole
decl_stmt|,
DECL|enumerator|RejectRole
name|RejectRole
init|=
name|QDialogButtonBox
operator|::
name|RejectRole
decl_stmt|,
DECL|enumerator|DestructiveRole
name|DestructiveRole
init|=
name|QDialogButtonBox
operator|::
name|DestructiveRole
decl_stmt|,
DECL|enumerator|ActionRole
name|ActionRole
init|=
name|QDialogButtonBox
operator|::
name|ActionRole
decl_stmt|,
DECL|enumerator|HelpRole
name|HelpRole
init|=
name|QDialogButtonBox
operator|::
name|HelpRole
decl_stmt|,
DECL|enumerator|YesRole
name|YesRole
init|=
name|QDialogButtonBox
operator|::
name|YesRole
decl_stmt|,
DECL|enumerator|NoRole
name|NoRole
init|=
name|QDialogButtonBox
operator|::
name|NoRole
decl_stmt|,
DECL|enumerator|ApplyRole
name|ApplyRole
init|=
name|QDialogButtonBox
operator|::
name|ApplyRole
decl_stmt|,
DECL|enumerator|ResetRole
name|ResetRole
init|=
name|QDialogButtonBox
operator|::
name|ResetRole
decl_stmt|,
DECL|enumerator|AlternateRole
name|AlternateRole
init|=
literal|0x10000000
decl_stmt|,
DECL|enumerator|Stretch
name|Stretch
init|=
literal|0x20000000
decl_stmt|,
DECL|enumerator|EOL
name|EOL
init|=
literal|0x40000000
decl_stmt|,
DECL|enumerator|Reverse
name|Reverse
init|=
literal|0x80000000
end_decl_stmt
begin_function
DECL|enumerator|Reverse
unit|};
DECL|function|roleFor
specifier|static
name|QDialogButtonBox
operator|::
name|ButtonRole
name|roleFor
parameter_list|(
name|QDialogButtonBox
operator|::
name|StandardButton
name|button
parameter_list|)
block|{
switch|switch
condition|(
name|button
condition|)
block|{
case|case
name|QDialogButtonBox
operator|::
name|Ok
case|:
case|case
name|QDialogButtonBox
operator|::
name|Save
case|:
case|case
name|QDialogButtonBox
operator|::
name|Open
case|:
case|case
name|QDialogButtonBox
operator|::
name|SaveAll
case|:
case|case
name|QDialogButtonBox
operator|::
name|Retry
case|:
case|case
name|QDialogButtonBox
operator|::
name|Ignore
case|:
return|return
name|QDialogButtonBox
operator|::
name|AcceptRole
return|;
case|case
name|QDialogButtonBox
operator|::
name|Cancel
case|:
case|case
name|QDialogButtonBox
operator|::
name|Close
case|:
case|case
name|QDialogButtonBox
operator|::
name|Abort
case|:
return|return
name|QDialogButtonBox
operator|::
name|RejectRole
return|;
case|case
name|QDialogButtonBox
operator|::
name|Discard
case|:
return|return
name|QDialogButtonBox
operator|::
name|DestructiveRole
return|;
case|case
name|QDialogButtonBox
operator|::
name|Help
case|:
return|return
name|QDialogButtonBox
operator|::
name|HelpRole
return|;
case|case
name|QDialogButtonBox
operator|::
name|Apply
case|:
return|return
name|QDialogButtonBox
operator|::
name|ApplyRole
return|;
case|case
name|QDialogButtonBox
operator|::
name|Yes
case|:
case|case
name|QDialogButtonBox
operator|::
name|YesToAll
case|:
return|return
name|QDialogButtonBox
operator|::
name|YesRole
return|;
case|case
name|QDialogButtonBox
operator|::
name|No
case|:
case|case
name|QDialogButtonBox
operator|::
name|NoToAll
case|:
return|return
name|QDialogButtonBox
operator|::
name|NoRole
return|;
case|case
name|QDialogButtonBox
operator|::
name|RestoreDefaults
case|:
case|case
name|QDialogButtonBox
operator|::
name|Reset
case|:
return|return
name|QDialogButtonBox
operator|::
name|ResetRole
return|;
case|case
name|QDialogButtonBox
operator|::
name|NoButton
case|:
comment|// NoButton means zero buttons, not "No" button
empty_stmt|;
block|}
return|return
name|QDialogButtonBox
operator|::
name|InvalidRole
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|layouts
specifier|static
specifier|const
name|uint
name|layouts
index|[
literal|2
index|]
index|[
literal|5
index|]
index|[
literal|14
index|]
init|=
block|{
comment|// Qt::Horizontal
block|{
comment|// WinLayout
block|{
name|ResetRole
block|,
name|Stretch
block|,
name|YesRole
block|,
name|AcceptRole
block|,
name|AlternateRole
block|,
name|DestructiveRole
block|,
name|NoRole
block|,
name|ActionRole
block|,
name|RejectRole
block|,
name|ApplyRole
block|,
name|HelpRole
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|}
block|,
comment|// MacLayout
block|{
name|HelpRole
block|,
name|ResetRole
block|,
name|ApplyRole
block|,
name|ActionRole
block|,
name|Stretch
block|,
name|DestructiveRole
operator||
name|Reverse
block|,
name|AlternateRole
operator||
name|Reverse
block|,
name|RejectRole
operator||
name|Reverse
block|,
name|AcceptRole
operator||
name|Reverse
block|,
name|NoRole
operator||
name|Reverse
block|,
name|YesRole
operator||
name|Reverse
block|,
name|EOL
block|,
name|EOL
block|}
block|,
comment|// KdeLayout
block|{
name|HelpRole
block|,
name|ResetRole
block|,
name|Stretch
block|,
name|YesRole
block|,
name|NoRole
block|,
name|ActionRole
block|,
name|AcceptRole
block|,
name|AlternateRole
block|,
name|ApplyRole
block|,
name|DestructiveRole
block|,
name|RejectRole
block|,
name|EOL
block|}
block|,
comment|// GnomeLayout
block|{
name|HelpRole
block|,
name|ResetRole
block|,
name|Stretch
block|,
name|ActionRole
block|,
name|ApplyRole
operator||
name|Reverse
block|,
name|DestructiveRole
operator||
name|Reverse
block|,
name|AlternateRole
operator||
name|Reverse
block|,
name|RejectRole
operator||
name|Reverse
block|,
name|AcceptRole
operator||
name|Reverse
block|,
name|NoRole
operator||
name|Reverse
block|,
name|YesRole
operator||
name|Reverse
block|,
name|EOL
block|}
block|,
comment|// Mac modeless
block|{
name|ResetRole
block|,
name|ApplyRole
block|,
name|ActionRole
block|,
name|Stretch
block|,
name|HelpRole
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|}
block|}
block|,
comment|// Qt::Vertical
block|{
comment|// WinLayout
block|{
name|ActionRole
block|,
name|YesRole
block|,
name|AcceptRole
block|,
name|AlternateRole
block|,
name|DestructiveRole
block|,
name|NoRole
block|,
name|RejectRole
block|,
name|ApplyRole
block|,
name|ResetRole
block|,
name|HelpRole
block|,
name|Stretch
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|}
block|,
comment|// MacLayout
block|{
name|YesRole
block|,
name|NoRole
block|,
name|AcceptRole
block|,
name|RejectRole
block|,
name|AlternateRole
block|,
name|DestructiveRole
block|,
name|Stretch
block|,
name|ActionRole
block|,
name|ApplyRole
block|,
name|ResetRole
block|,
name|HelpRole
block|,
name|EOL
block|,
name|EOL
block|}
block|,
comment|// KdeLayout
block|{
name|AcceptRole
block|,
name|AlternateRole
block|,
name|ApplyRole
block|,
name|ActionRole
block|,
name|YesRole
block|,
name|NoRole
block|,
name|Stretch
block|,
name|ResetRole
block|,
name|DestructiveRole
block|,
name|RejectRole
block|,
name|HelpRole
block|,
name|EOL
block|}
block|,
comment|// GnomeLayout
block|{
name|YesRole
block|,
name|NoRole
block|,
name|AcceptRole
block|,
name|RejectRole
block|,
name|AlternateRole
block|,
name|DestructiveRole
block|,
name|ApplyRole
block|,
name|ActionRole
block|,
name|Stretch
block|,
name|ResetRole
block|,
name|HelpRole
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|}
block|,
comment|// Mac modeless
block|{
name|ActionRole
block|,
name|ApplyRole
block|,
name|ResetRole
block|,
name|Stretch
block|,
name|HelpRole
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|,
name|EOL
block|}
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QDialogButtonBoxPrivate
class|class
name|QDialogButtonBoxPrivate
super|:
specifier|public
name|QWidgetPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QDialogButtonBox
parameter_list|)
specifier|public
private|:
name|QDialogButtonBoxPrivate
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
constructor_decl|;
DECL|member|buttonLists
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|buttonLists
index|[
name|QDialogButtonBox
operator|::
name|NRoles
index|]
decl_stmt|;
DECL|member|standardButtonHash
name|QHash
argument_list|<
name|QPushButton
modifier|*
argument_list|,
name|QDialogButtonBox
operator|::
name|StandardButton
argument_list|>
name|standardButtonHash
decl_stmt|;
DECL|member|orientation
name|Qt
operator|::
name|Orientation
name|orientation
decl_stmt|;
DECL|member|layoutPolicy
name|QDialogButtonBox
operator|::
name|ButtonLayout
name|layoutPolicy
decl_stmt|;
DECL|member|buttonLayout
name|QBoxLayout
modifier|*
name|buttonLayout
decl_stmt|;
DECL|member|internalRemove
name|bool
name|internalRemove
decl_stmt|;
DECL|member|center
name|bool
name|center
decl_stmt|;
name|void
name|createStandardButtons
parameter_list|(
name|QDialogButtonBox
operator|::
name|StandardButtons
name|buttons
parameter_list|)
function_decl|;
name|void
name|layoutButtons
parameter_list|()
function_decl|;
name|void
name|initLayout
parameter_list|()
function_decl|;
name|void
name|resetLayout
parameter_list|()
function_decl|;
name|QPushButton
modifier|*
name|createButton
parameter_list|(
name|QDialogButtonBox
operator|::
name|StandardButton
name|button
parameter_list|,
name|bool
name|doLayout
init|=
literal|true
parameter_list|)
function_decl|;
name|void
name|addButton
parameter_list|(
name|QAbstractButton
modifier|*
name|button
parameter_list|,
name|QDialogButtonBox
operator|::
name|ButtonRole
name|role
parameter_list|,
name|bool
name|doLayout
init|=
literal|true
parameter_list|)
function_decl|;
name|void
name|_q_handleButtonDestroyed
parameter_list|()
function_decl|;
name|void
name|_q_handleButtonClicked
parameter_list|()
function_decl|;
name|void
name|addButtonsToLayout
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
modifier|&
name|buttonList
parameter_list|,
name|bool
name|reverse
parameter_list|)
function_decl|;
name|void
name|retranslateStrings
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|standardButtonText
parameter_list|(
name|QDialogButtonBox
operator|::
name|StandardButton
name|sbutton
parameter_list|)
specifier|const
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QDialogButtonBoxPrivate
name|QDialogButtonBoxPrivate
operator|::
name|QDialogButtonBoxPrivate
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orient
parameter_list|)
member_init_list|:
name|orientation
argument_list|(
name|orient
argument_list|)
member_init_list|,
name|buttonLayout
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|internalRemove
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|center
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|initLayout
name|void
name|QDialogButtonBoxPrivate
operator|::
name|initLayout
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
name|layoutPolicy
operator|=
name|QDialogButtonBox
operator|::
name|ButtonLayout
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_DialogButtonLayout
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|createNewLayout
init|=
name|buttonLayout
operator|==
literal|0
operator|||
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|&&
name|qobject_cast
argument_list|<
name|QVBoxLayout
operator|*
argument_list|>
argument_list|(
name|buttonLayout
argument_list|)
operator|!=
literal|0
operator|)
operator|||
operator|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
operator|&&
name|qobject_cast
argument_list|<
name|QHBoxLayout
operator|*
argument_list|>
argument_list|(
name|buttonLayout
argument_list|)
operator|!=
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|createNewLayout
condition|)
block|{
operator|delete
name|buttonLayout
expr_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|buttonLayout
operator|=
operator|new
name|QHBoxLayout
argument_list|(
name|q
argument_list|)
expr_stmt|;
else|else
name|buttonLayout
operator|=
operator|new
name|QVBoxLayout
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|setLayoutItemMargins
argument_list|(
name|QStyle
operator|::
name|SE_PushButtonLayoutItem
argument_list|)
expr_stmt|;
name|getLayoutItemMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
name|buttonLayout
operator|->
name|setContentsMargins
argument_list|(
operator|-
name|left
argument_list|,
operator|-
name|top
argument_list|,
operator|-
name|right
argument_list|,
operator|-
name|bottom
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_OwnSizePolicy
argument_list|)
condition|)
block|{
name|QSizePolicy
name|sp
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|ButtonBox
argument_list|)
decl_stmt|;
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
condition|)
name|sp
operator|.
name|transpose
argument_list|()
expr_stmt|;
name|q
operator|->
name|setSizePolicy
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_OwnSizePolicy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// ### move to a real init() function
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|TabFocus
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetLayout
name|void
name|QDialogButtonBoxPrivate
operator|::
name|resetLayout
parameter_list|()
block|{
comment|//delete buttonLayout;
name|initLayout
argument_list|()
expr_stmt|;
name|layoutButtons
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addButtonsToLayout
name|void
name|QDialogButtonBoxPrivate
operator|::
name|addButtonsToLayout
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
modifier|&
name|buttonList
parameter_list|,
name|bool
name|reverse
parameter_list|)
block|{
name|int
name|start
init|=
name|reverse
condition|?
name|buttonList
operator|.
name|count
argument_list|()
operator|-
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|end
init|=
name|reverse
condition|?
operator|-
literal|1
else|:
name|buttonList
operator|.
name|count
argument_list|()
decl_stmt|;
name|int
name|step
init|=
name|reverse
condition|?
operator|-
literal|1
else|:
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|!=
name|end
condition|;
name|i
operator|+=
name|step
control|)
block|{
name|QAbstractButton
modifier|*
name|button
init|=
name|buttonList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|buttonLayout
operator|->
name|addWidget
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|button
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|layoutButtons
name|void
name|QDialogButtonBoxPrivate
operator|::
name|layoutButtons
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
specifier|const
name|int
name|MacGap
init|=
literal|36
operator|-
literal|8
decl_stmt|;
comment|// 8 is the default gap between a widget and a spacer item
for|for
control|(
name|int
name|i
init|=
name|buttonLayout
operator|->
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QLayoutItem
modifier|*
name|item
init|=
name|buttonLayout
operator|->
name|takeAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|widget
init|=
name|item
operator|->
name|widget
argument_list|()
condition|)
name|widget
operator|->
name|hide
argument_list|()
expr_stmt|;
operator|delete
name|item
expr_stmt|;
block|}
name|int
name|tmpPolicy
init|=
name|layoutPolicy
decl_stmt|;
specifier|static
specifier|const
name|int
name|M
init|=
literal|5
decl_stmt|;
specifier|static
specifier|const
name|int
name|ModalRoles
index|[
name|M
index|]
init|=
block|{
name|AcceptRole
block|,
name|RejectRole
block|,
name|DestructiveRole
block|,
name|YesRole
block|,
name|NoRole
block|}
decl_stmt|;
if|if
condition|(
name|tmpPolicy
operator|==
name|QDialogButtonBox
operator|::
name|MacLayout
condition|)
block|{
name|bool
name|hasModalButton
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|M
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|buttonLists
index|[
name|ModalRoles
index|[
name|i
index|]
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hasModalButton
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasModalButton
condition|)
name|tmpPolicy
operator|=
literal|4
expr_stmt|;
comment|// Mac modeless
block|}
specifier|const
name|uint
modifier|*
name|currentLayout
init|=
name|layouts
index|[
name|orientation
operator|==
name|Qt
operator|::
name|Vertical
index|]
index|[
name|tmpPolicy
index|]
decl_stmt|;
if|if
condition|(
name|center
condition|)
name|buttonLayout
operator|->
name|addStretch
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|acceptRoleList
init|=
name|buttonLists
index|[
name|AcceptRole
index|]
decl_stmt|;
while|while
condition|(
operator|*
name|currentLayout
operator|!=
name|EOL
condition|)
block|{
name|int
name|role
init|=
operator|(
operator|*
name|currentLayout
operator|&
operator|~
name|Reverse
operator|)
decl_stmt|;
name|bool
name|reverse
init|=
operator|(
operator|*
name|currentLayout
operator|&
name|Reverse
operator|)
decl_stmt|;
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|Stretch
case|:
if|if
condition|(
operator|!
name|center
condition|)
name|buttonLayout
operator|->
name|addStretch
argument_list|()
expr_stmt|;
break|break;
case|case
name|AcceptRole
case|:
block|{
if|if
condition|(
name|acceptRoleList
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
comment|// Only the first one
name|QAbstractButton
modifier|*
name|button
init|=
name|acceptRoleList
operator|.
name|first
argument_list|()
decl_stmt|;
name|buttonLayout
operator|->
name|addWidget
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|button
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|AlternateRole
case|:
block|{
if|if
condition|(
name|acceptRoleList
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
break|break;
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|list
init|=
name|acceptRoleList
decl_stmt|;
name|list
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|addButtonsToLayout
argument_list|(
name|list
argument_list|,
name|reverse
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DestructiveRole
case|:
block|{
specifier|const
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
modifier|&
name|list
init|=
name|buttonLists
index|[
name|role
index|]
decl_stmt|;
comment|/*                     Mac: Insert a gap on the left of the destructive                     buttons to ensure that they don't get too close to                     the help and action buttons (but only if there are                     some buttons to the left of the destructive buttons                     (and the stretch, whence buttonLayout->count()> 1                     and not 0)).                 */
if|if
condition|(
name|tmpPolicy
operator|==
name|QDialogButtonBox
operator|::
name|MacLayout
operator|&&
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
operator|&&
name|buttonLayout
operator|->
name|count
argument_list|()
operator|>
literal|1
condition|)
name|buttonLayout
operator|->
name|addSpacing
argument_list|(
name|MacGap
argument_list|)
expr_stmt|;
name|addButtonsToLayout
argument_list|(
name|list
argument_list|,
name|reverse
argument_list|)
expr_stmt|;
comment|/*                     Insert a gap between the destructive buttons and the                     accept and reject buttons.                 */
if|if
condition|(
name|tmpPolicy
operator|==
name|QDialogButtonBox
operator|::
name|MacLayout
operator|&&
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
name|buttonLayout
operator|->
name|addSpacing
argument_list|(
name|MacGap
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|RejectRole
case|:
case|case
name|ActionRole
case|:
case|case
name|HelpRole
case|:
case|case
name|YesRole
case|:
case|case
name|NoRole
case|:
case|case
name|ApplyRole
case|:
case|case
name|ResetRole
case|:
name|addButtonsToLayout
argument_list|(
name|buttonLists
index|[
name|role
index|]
argument_list|,
name|reverse
argument_list|)
expr_stmt|;
block|}
operator|++
name|currentLayout
expr_stmt|;
block|}
name|QWidget
modifier|*
name|lastWidget
init|=
literal|0
decl_stmt|;
name|q
operator|->
name|setFocusProxy
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buttonLayout
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QLayoutItem
modifier|*
name|item
init|=
name|buttonLayout
operator|->
name|itemAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|widget
init|=
name|item
operator|->
name|widget
argument_list|()
condition|)
block|{
if|if
condition|(
name|lastWidget
condition|)
name|QWidget
operator|::
name|setTabOrder
argument_list|(
name|lastWidget
argument_list|,
name|widget
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|setFocusProxy
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|lastWidget
operator|=
name|widget
expr_stmt|;
block|}
block|}
if|if
condition|(
name|center
condition|)
name|buttonLayout
operator|->
name|addStretch
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createButton
name|QPushButton
modifier|*
name|QDialogButtonBoxPrivate
operator|::
name|createButton
parameter_list|(
name|QDialogButtonBox
operator|::
name|StandardButton
name|sbutton
parameter_list|,
name|bool
name|doLayout
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|buttonText
init|=
literal|0
decl_stmt|;
name|int
name|icon
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|sbutton
condition|)
block|{
case|case
name|QDialogButtonBox
operator|::
name|Ok
case|:
name|icon
operator|=
name|QStyle
operator|::
name|SP_DialogOkButton
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Save
case|:
name|icon
operator|=
name|QStyle
operator|::
name|SP_DialogSaveButton
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Open
case|:
name|icon
operator|=
name|QStyle
operator|::
name|SP_DialogOpenButton
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Cancel
case|:
name|icon
operator|=
name|QStyle
operator|::
name|SP_DialogCancelButton
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Close
case|:
name|icon
operator|=
name|QStyle
operator|::
name|SP_DialogCloseButton
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Apply
case|:
name|icon
operator|=
name|QStyle
operator|::
name|SP_DialogApplyButton
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Reset
case|:
name|icon
operator|=
name|QStyle
operator|::
name|SP_DialogResetButton
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Help
case|:
name|icon
operator|=
name|QStyle
operator|::
name|SP_DialogHelpButton
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Discard
case|:
name|icon
operator|=
name|QStyle
operator|::
name|SP_DialogDiscardButton
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Yes
case|:
name|icon
operator|=
name|QStyle
operator|::
name|SP_DialogYesButton
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|No
case|:
name|icon
operator|=
name|QStyle
operator|::
name|SP_DialogNoButton
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|YesToAll
case|:
case|case
name|QDialogButtonBox
operator|::
name|NoToAll
case|:
case|case
name|QDialogButtonBox
operator|::
name|SaveAll
case|:
case|case
name|QDialogButtonBox
operator|::
name|Abort
case|:
case|case
name|QDialogButtonBox
operator|::
name|Retry
case|:
case|case
name|QDialogButtonBox
operator|::
name|Ignore
case|:
case|case
name|QDialogButtonBox
operator|::
name|RestoreDefaults
case|:
break|break;
case|case
name|QDialogButtonBox
operator|::
name|NoButton
case|:
return|return
literal|0
return|;
empty_stmt|;
block|}
name|buttonText
operator|=
name|standardButtonText
argument_list|(
name|sbutton
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|button
init|=
operator|new
name|QPushButton
argument_list|(
name|QDialogButtonBox
operator|::
name|tr
argument_list|(
name|buttonText
argument_list|)
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|q
operator|->
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
name|style
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_DialogButtonBox_ButtonsHaveIcons
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|&&
name|icon
operator|!=
literal|0
condition|)
name|button
operator|->
name|setIcon
argument_list|(
name|style
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|StandardPixmap
argument_list|(
name|icon
argument_list|)
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
operator|!=
name|QApplication
operator|::
name|style
argument_list|()
condition|)
comment|// Propagate style
name|button
operator|->
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|standardButtonHash
operator|.
name|insert
argument_list|(
name|button
argument_list|,
name|sbutton
argument_list|)
expr_stmt|;
if|if
condition|(
name|roleFor
argument_list|(
name|sbutton
argument_list|)
operator|!=
name|QDialogButtonBox
operator|::
name|InvalidRole
condition|)
block|{
name|addButton
argument_list|(
name|button
argument_list|,
name|roleFor
argument_list|(
name|sbutton
argument_list|)
argument_list|,
name|doLayout
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QDialogButtonBox::createButton: Invalid ButtonRole, button not added"
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_WS_MAC
comment|// Since mnemonics is off by default on Mac, we add a Cmd-D
comment|// shortcut here to e.g. make the "Don't Save" button work nativly:
if|if
condition|(
name|sbutton
operator|==
name|QDialogButtonBox
operator|::
name|Discard
condition|)
name|button
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
argument_list|(
name|QLatin1String
argument_list|(
literal|"Ctrl+D"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|button
return|;
block|}
end_function
begin_function
DECL|function|addButton
name|void
name|QDialogButtonBoxPrivate
operator|::
name|addButton
parameter_list|(
name|QAbstractButton
modifier|*
name|button
parameter_list|,
name|QDialogButtonBox
operator|::
name|ButtonRole
name|role
parameter_list|,
name|bool
name|doLayout
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_handleButtonClicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_handleButtonDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|buttonLists
index|[
name|role
index|]
operator|.
name|append
argument_list|(
name|button
argument_list|)
expr_stmt|;
if|if
condition|(
name|doLayout
condition|)
name|layoutButtons
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createStandardButtons
name|void
name|QDialogButtonBoxPrivate
operator|::
name|createStandardButtons
parameter_list|(
name|QDialogButtonBox
operator|::
name|StandardButtons
name|buttons
parameter_list|)
block|{
name|uint
name|i
init|=
name|QDialogButtonBox
operator|::
name|FirstButton
decl_stmt|;
while|while
condition|(
name|i
operator|<=
name|QDialogButtonBox
operator|::
name|LastButton
condition|)
block|{
if|if
condition|(
name|i
operator|&
name|buttons
condition|)
block|{
name|createButton
argument_list|(
name|QDialogButtonBox
operator|::
name|StandardButton
argument_list|(
name|i
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|i
operator|=
name|i
operator|<<
literal|1
expr_stmt|;
block|}
name|layoutButtons
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|standardButtonText
specifier|const
name|char
modifier|*
name|QDialogButtonBoxPrivate
operator|::
name|standardButtonText
parameter_list|(
name|QDialogButtonBox
operator|::
name|StandardButton
name|sbutton
parameter_list|)
specifier|const
block|{
specifier|const
name|char
modifier|*
name|buttonText
init|=
literal|0
decl_stmt|;
name|bool
name|gnomeLayout
init|=
operator|(
name|layoutPolicy
operator|==
name|QDialogButtonBox
operator|::
name|GnomeLayout
operator|)
decl_stmt|;
switch|switch
condition|(
name|sbutton
condition|)
block|{
case|case
name|QDialogButtonBox
operator|::
name|Ok
case|:
name|buttonText
operator|=
name|gnomeLayout
condition|?
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"&OK"
argument_list|)
else|:
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"OK"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Save
case|:
name|buttonText
operator|=
name|gnomeLayout
condition|?
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"&Save"
argument_list|)
else|:
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Save"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Open
case|:
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Open"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Cancel
case|:
name|buttonText
operator|=
name|gnomeLayout
condition|?
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"&Cancel"
argument_list|)
else|:
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Cancel"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Close
case|:
name|buttonText
operator|=
name|gnomeLayout
condition|?
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"&Close"
argument_list|)
else|:
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Close"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Apply
case|:
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Apply"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Reset
case|:
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Reset"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Help
case|:
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Help"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Discard
case|:
if|if
condition|(
name|layoutPolicy
operator|==
name|QDialogButtonBox
operator|::
name|MacLayout
condition|)
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Don't Save"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|layoutPolicy
operator|==
name|QDialogButtonBox
operator|::
name|GnomeLayout
condition|)
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Close without Saving"
argument_list|)
expr_stmt|;
else|else
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Discard"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Yes
case|:
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"&Yes"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|YesToAll
case|:
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Yes to&All"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|No
case|:
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"&No"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|NoToAll
case|:
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"N&o to All"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|SaveAll
case|:
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Save All"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Abort
case|:
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Abort"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Retry
case|:
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Retry"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|Ignore
case|:
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Ignore"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|RestoreDefaults
case|:
name|buttonText
operator|=
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QDialogButtonBox"
argument_list|,
literal|"Restore Defaults"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDialogButtonBox
operator|::
name|NoButton
case|:
empty_stmt|;
block|}
comment|// switch
return|return
name|buttonText
return|;
block|}
end_function
begin_function
DECL|function|retranslateStrings
name|void
name|QDialogButtonBoxPrivate
operator|::
name|retranslateStrings
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|buttonText
init|=
literal|0
decl_stmt|;
name|QHash
argument_list|<
name|QPushButton
modifier|*
argument_list|,
name|QDialogButtonBox
operator|::
name|StandardButton
argument_list|>
operator|::
name|iterator
name|it
init|=
name|standardButtonHash
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|standardButtonHash
operator|.
name|end
argument_list|()
condition|)
block|{
name|buttonText
operator|=
name|standardButtonText
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|buttonText
condition|)
block|{
name|QPushButton
modifier|*
name|button
init|=
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
name|button
operator|->
name|setText
argument_list|(
name|QDialogButtonBox
operator|::
name|tr
argument_list|(
name|buttonText
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|++
name|it
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Constructs an empty, horizontal button box with the given \a parent.      \sa orientation, addButton() */
end_comment
begin_constructor
DECL|function|QDialogButtonBox
name|QDialogButtonBox
operator|::
name|QDialogButtonBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QDialogButtonBoxPrivate
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|initLayout
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs an empty button box with the given \a orientation and \a parent.      \sa orientation, addButton() */
end_comment
begin_constructor
DECL|function|QDialogButtonBox
name|QDialogButtonBox
operator|::
name|QDialogButtonBox
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QDialogButtonBoxPrivate
argument_list|(
name|orientation
argument_list|)
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|initLayout
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \since 5.2      Constructs a horizontal button box with the given \a parent, containing     the standard buttons specified by \a buttons.      \sa orientation, addButton() */
end_comment
begin_constructor
DECL|function|QDialogButtonBox
name|QDialogButtonBox
operator|::
name|QDialogButtonBox
parameter_list|(
name|StandardButtons
name|buttons
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QDialogButtonBoxPrivate
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|initLayout
argument_list|()
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|createStandardButtons
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a button box with the given \a orientation and \a parent, containing     the standard buttons specified by \a buttons.      \sa orientation, addButton() */
end_comment
begin_constructor
DECL|function|QDialogButtonBox
name|QDialogButtonBox
operator|::
name|QDialogButtonBox
parameter_list|(
name|StandardButtons
name|buttons
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QDialogButtonBoxPrivate
argument_list|(
name|orientation
argument_list|)
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|d_func
argument_list|()
operator|->
name|initLayout
argument_list|()
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|createStandardButtons
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the button box. */
end_comment
begin_destructor
DECL|function|~QDialogButtonBox
name|QDialogButtonBox
operator|::
name|~
name|QDialogButtonBox
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \enum QDialogButtonBox::ButtonRole     \enum QMessageBox::ButtonRole      This enum describes the roles that can be used to describe buttons in     the button box. Combinations of these roles are as flags used to     describe different aspects of their behavior.      \value InvalidRole The button is invalid.     \value AcceptRole Clicking the button causes the dialog to be accepted            (e.g. OK).     \value RejectRole Clicking the button causes the dialog to be rejected            (e.g. Cancel).     \value DestructiveRole Clicking the button causes a destructive change            (e.g. for Discarding Changes) and closes the dialog.     \value ActionRole Clicking the button causes changes to the elements within            the dialog.     \value HelpRole The button can be clicked to request help.     \value YesRole The button is a "Yes"-like button.     \value NoRole The button is a "No"-like button.     \value ApplyRole The button applies current changes.     \value ResetRole The button resets the dialog's fields to default values.      \omitvalue NRoles      \sa StandardButton */
end_comment
begin_comment
comment|/*!     \enum QDialogButtonBox::StandardButton      These enums describe flags for standard buttons. Each button has a     defined \l ButtonRole.      \value Ok An "OK" button defined with the \l AcceptRole.     \value Open An "Open" button defined with the \l AcceptRole.     \value Save A "Save" button defined with the \l AcceptRole.     \value Cancel A "Cancel" button defined with the \l RejectRole.     \value Close A "Close" button defined with the \l RejectRole.     \value Discard A "Discard" or "Don't Save" button, depending on the platform,                     defined with the \l DestructiveRole.     \value Apply An "Apply" button defined with the \l ApplyRole.     \value Reset A "Reset" button defined with the \l ResetRole.     \value RestoreDefaults A "Restore Defaults" button defined with the \l ResetRole.     \value Help A "Help" button defined with the \l HelpRole.     \value SaveAll A "Save All" button defined with the \l AcceptRole.     \value Yes A "Yes" button defined with the \l YesRole.     \value YesToAll A "Yes to All" button defined with the \l YesRole.     \value No A "No" button defined with the \l NoRole.     \value NoToAll A "No to All" button defined with the \l NoRole.     \value Abort An "Abort" button defined with the \l RejectRole.     \value Retry A "Retry" button defined with the \l AcceptRole.     \value Ignore An "Ignore" button defined with the \l AcceptRole.      \value NoButton An invalid button.      \omitvalue FirstButton     \omitvalue LastButton      \sa ButtonRole, standardButtons */
end_comment
begin_comment
comment|/*!     \enum QDialogButtonBox::ButtonLayout      This enum describes the layout policy to be used when arranging the buttons     contained in the button box.      \value WinLayout Use a policy appropriate for applications on Windows.     \value MacLayout Use a policy appropriate for applications on Mac OS X.     \value KdeLayout Use a policy appropriate for applications on KDE.     \value GnomeLayout Use a policy appropriate for applications on GNOME.      The button layout is specified by the \l{style()}{current style}. However,     on the X11 platform, it may be influenced by the desktop environment. */
end_comment
begin_comment
comment|/*!     \fn void QDialogButtonBox::clicked(QAbstractButton *button)      This signal is emitted when a button inside the button box is clicked. The     specific button that was pressed is specified by \a button.      \sa accepted(), rejected(), helpRequested() */
end_comment
begin_comment
comment|/*!     \fn void QDialogButtonBox::accepted()      This signal is emitted when a button inside the button box is clicked, as long     as it was defined with the \l AcceptRole or \l YesRole.      \sa rejected(), clicked(), helpRequested() */
end_comment
begin_comment
comment|/*!     \fn void QDialogButtonBox::rejected()      This signal is emitted when a button inside the button box is clicked, as long     as it was defined with the \l RejectRole or \l NoRole.      \sa accepted(), helpRequested(), clicked() */
end_comment
begin_comment
comment|/*!     \fn void QDialogButtonBox::helpRequested()      This signal is emitted when a button inside the button box is clicked, as long     as it was defined with the \l HelpRole.      \sa accepted(), rejected(), clicked() */
end_comment
begin_comment
comment|/*!     \property QDialogButtonBox::orientation     \brief the orientation of the button box      By default, the orientation is horizontal (i.e. the buttons are laid out     side by side). The possible orientations are Qt::Horizontal and     Qt::Vertical. */
end_comment
begin_function
DECL|function|orientation
name|Qt
operator|::
name|Orientation
name|QDialogButtonBox
operator|::
name|orientation
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|orientation
return|;
block|}
end_function
begin_function
DECL|function|setOrientation
name|void
name|QDialogButtonBox
operator|::
name|setOrientation
parameter_list|(
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|orientation
operator|==
name|d
operator|->
name|orientation
condition|)
return|return;
name|d
operator|->
name|orientation
operator|=
name|orientation
expr_stmt|;
name|d
operator|->
name|resetLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Clears the button box, deleting all buttons within it.      \sa removeButton(), addButton() */
end_comment
begin_function
DECL|function|clear
name|void
name|QDialogButtonBox
operator|::
name|clear
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
comment|// Remove the created standard buttons, they should be in the other lists, which will
comment|// do the deletion
name|d
operator|->
name|standardButtonHash
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NRoles
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
modifier|&
name|list
init|=
name|d
operator|->
name|buttonLists
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|list
operator|.
name|count
argument_list|()
condition|)
block|{
name|QAbstractButton
modifier|*
name|button
init|=
name|list
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_handleButtonDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|button
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     Returns a list of all the buttons that have been added to the button box.      \sa buttonRole(), addButton(), removeButton() */
end_comment
begin_function
DECL|function|buttons
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|QDialogButtonBox
operator|::
name|buttons
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDialogButtonBox
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|finalList
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NRoles
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
modifier|&
name|list
init|=
name|d
operator|->
name|buttonLists
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
name|finalList
operator|.
name|append
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|finalList
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the button role for the specified \a button. This function returns     \l InvalidRole if \a button is 0 or has not been added to the button box.      \sa buttons(), addButton() */
end_comment
begin_function
DECL|function|buttonRole
name|QDialogButtonBox
operator|::
name|ButtonRole
name|QDialogButtonBox
operator|::
name|buttonRole
parameter_list|(
name|QAbstractButton
modifier|*
name|button
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDialogButtonBox
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NRoles
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
modifier|&
name|list
init|=
name|d
operator|->
name|buttonLists
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|list
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|==
name|button
condition|)
return|return
name|ButtonRole
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|return
name|InvalidRole
return|;
block|}
end_function
begin_comment
comment|/*!     Removes \a button from the button box without deleting it and sets its parent to zero.      \sa clear(), buttons(), addButton() */
end_comment
begin_function
DECL|function|removeButton
name|void
name|QDialogButtonBox
operator|::
name|removeButton
parameter_list|(
name|QAbstractButton
modifier|*
name|button
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|button
condition|)
return|return;
comment|// Remove it from the standard button hash first and then from the roles
if|if
condition|(
name|QPushButton
modifier|*
name|pushButton
init|=
name|qobject_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|button
argument_list|)
condition|)
name|d
operator|->
name|standardButtonHash
operator|.
name|remove
argument_list|(
name|pushButton
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NRoles
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
modifier|&
name|list
init|=
name|d
operator|->
name|buttonLists
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|list
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|==
name|button
condition|)
block|{
name|list
operator|.
name|takeAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|internalRemove
condition|)
block|{
name|disconnect
argument_list|(
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_handleButtonClicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_handleButtonDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|internalRemove
condition|)
name|button
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Adds the given \a button to the button box with the specified \a role.     If the role is invalid, the button is not added.      If the button has already been added, it is removed and added again with the     new role.      \note The button box takes ownership of the button.      \sa removeButton(), clear() */
end_comment
begin_function
DECL|function|addButton
name|void
name|QDialogButtonBox
operator|::
name|addButton
parameter_list|(
name|QAbstractButton
modifier|*
name|button
parameter_list|,
name|ButtonRole
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|role
operator|<=
name|InvalidRole
operator|||
name|role
operator|>=
name|NRoles
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDialogButtonBox::addButton: Invalid ButtonRole, button not added"
argument_list|)
expr_stmt|;
return|return;
block|}
name|removeButton
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|button
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|addButton
argument_list|(
name|button
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Creates a push button with the given \a text, adds it to the button box for the     specified \a role, and returns the corresponding push button. If \a role is     invalid, no button is created, and zero is returned.      \sa removeButton(), clear() */
end_comment
begin_function
DECL|function|addButton
name|QPushButton
modifier|*
name|QDialogButtonBox
operator|::
name|addButton
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|ButtonRole
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|role
operator|<=
name|InvalidRole
operator|||
name|role
operator|>=
name|NRoles
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDialogButtonBox::addButton: Invalid ButtonRole, button not added"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|QPushButton
modifier|*
name|button
init|=
operator|new
name|QPushButton
argument_list|(
name|text
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|d
operator|->
name|addButton
argument_list|(
name|button
argument_list|,
name|role
argument_list|)
expr_stmt|;
return|return
name|button
return|;
block|}
end_function
begin_comment
comment|/*!     Adds a standard \a button to the button box if it is valid to do so, and returns     a push button. If \a button is invalid, it is not added to the button box, and     zero is returned.      \sa removeButton(), clear() */
end_comment
begin_function
DECL|function|addButton
name|QPushButton
modifier|*
name|QDialogButtonBox
operator|::
name|addButton
parameter_list|(
name|StandardButton
name|button
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|createButton
argument_list|(
name|button
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QDialogButtonBox::standardButtons     \brief collection of standard buttons in the button box      This property controls which standard buttons are used by the button box.      \sa addButton() */
end_comment
begin_function
DECL|function|setStandardButtons
name|void
name|QDialogButtonBox
operator|::
name|setStandardButtons
parameter_list|(
name|StandardButtons
name|buttons
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
comment|// Clear out all the old standard buttons, then recreate them.
name|qDeleteAll
argument_list|(
name|d
operator|->
name|standardButtonHash
operator|.
name|keys
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|standardButtonHash
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|createStandardButtons
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|standardButtons
name|QDialogButtonBox
operator|::
name|StandardButtons
name|QDialogButtonBox
operator|::
name|standardButtons
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDialogButtonBox
argument_list|)
expr_stmt|;
name|StandardButtons
name|standardButtons
init|=
name|NoButton
decl_stmt|;
name|QHash
argument_list|<
name|QPushButton
modifier|*
argument_list|,
name|StandardButton
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|d
operator|->
name|standardButtonHash
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|d
operator|->
name|standardButtonHash
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|standardButtons
operator||=
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
return|return
name|standardButtons
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the QPushButton corresponding to the standard button \a which,     or 0 if the standard button doesn't exist in this button box.      \sa standardButton(), standardButtons(), buttons() */
end_comment
begin_function
DECL|function|button
name|QPushButton
modifier|*
name|QDialogButtonBox
operator|::
name|button
parameter_list|(
name|StandardButton
name|which
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDialogButtonBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|standardButtonHash
operator|.
name|key
argument_list|(
name|which
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the standard button enum value corresponding to the given \a button,     or NoButton if the given \a button isn't a standard button.      \sa button(), buttons(), standardButtons() */
end_comment
begin_function
DECL|function|standardButton
name|QDialogButtonBox
operator|::
name|StandardButton
name|QDialogButtonBox
operator|::
name|standardButton
parameter_list|(
name|QAbstractButton
modifier|*
name|button
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDialogButtonBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|standardButtonHash
operator|.
name|value
argument_list|(
cast|static_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|button
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|_q_handleButtonClicked
name|void
name|QDialogButtonBoxPrivate
operator|::
name|_q_handleButtonClicked
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAbstractButton
modifier|*
name|button
init|=
name|qobject_cast
argument_list|<
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|sender
argument_list|()
argument_list|)
condition|)
block|{
emit|emit
name|q
operator|->
name|clicked
argument_list|(
name|button
argument_list|)
emit|;
switch|switch
condition|(
name|q
operator|->
name|buttonRole
argument_list|(
name|button
argument_list|)
condition|)
block|{
case|case
name|AcceptRole
case|:
case|case
name|YesRole
case|:
emit|emit
name|q
operator|->
name|accepted
argument_list|()
emit|;
break|break;
case|case
name|RejectRole
case|:
case|case
name|NoRole
case|:
emit|emit
name|q
operator|->
name|rejected
argument_list|()
emit|;
break|break;
case|case
name|HelpRole
case|:
emit|emit
name|q
operator|->
name|helpRequested
argument_list|()
emit|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|_q_handleButtonDestroyed
name|void
name|QDialogButtonBoxPrivate
operator|::
name|_q_handleButtonDestroyed
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|QObject
modifier|*
name|object
init|=
name|q
operator|->
name|sender
argument_list|()
condition|)
block|{
name|QBoolBlocker
name|skippy
argument_list|(
name|internalRemove
argument_list|)
decl_stmt|;
name|q
operator|->
name|removeButton
argument_list|(
cast|static_cast
argument_list|<
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QDialogButtonBox::centerButtons     \brief whether the buttons in the button box are centered      By default, this property is \c false. This behavior is appopriate     for most types of dialogs. A notable exception is message boxes     on most platforms (e.g. Windows), where the button box is     centered horizontally.      \sa QMessageBox */
end_comment
begin_function
DECL|function|setCenterButtons
name|void
name|QDialogButtonBox
operator|::
name|setCenterButtons
parameter_list|(
name|bool
name|center
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|center
operator|!=
name|center
condition|)
block|{
name|d
operator|->
name|center
operator|=
name|center
expr_stmt|;
name|d
operator|->
name|resetLayout
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|centerButtons
name|bool
name|QDialogButtonBox
operator|::
name|centerButtons
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDialogButtonBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|center
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QDialogButtonBox
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
typedef|typedef
name|QHash
argument_list|<
name|QPushButton
modifier|*
argument_list|,
name|QDialogButtonBox
operator|::
name|StandardButton
argument_list|>
name|StandardButtonHash
typedef|;
name|Q_D
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|StyleChange
case|:
comment|// Propagate style
if|if
condition|(
operator|!
name|d
operator|->
name|standardButtonHash
operator|.
name|empty
argument_list|()
condition|)
block|{
name|QStyle
modifier|*
name|newStyle
init|=
name|style
argument_list|()
decl_stmt|;
specifier|const
name|StandardButtonHash
operator|::
name|iterator
name|end
init|=
name|d
operator|->
name|standardButtonHash
operator|.
name|end
argument_list|()
decl_stmt|;
for|for
control|(
name|StandardButtonHash
operator|::
name|iterator
name|it
init|=
name|d
operator|->
name|standardButtonHash
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
name|it
operator|.
name|key
argument_list|()
operator|->
name|setStyle
argument_list|(
name|newStyle
argument_list|)
expr_stmt|;
block|}
comment|// fallthrough intended
ifdef|#
directive|ifdef
name|Q_OS_MAC
case|case
name|QEvent
operator|::
name|MacSizeChange
case|:
endif|#
directive|endif
name|d
operator|->
name|resetLayout
argument_list|()
expr_stmt|;
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
default|default:
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QDialogButtonBox
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDialogButtonBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Show
condition|)
block|{
name|QList
argument_list|<
name|QAbstractButton
modifier|*
argument_list|>
name|acceptRoleList
init|=
name|d
operator|->
name|buttonLists
index|[
name|AcceptRole
index|]
decl_stmt|;
name|QPushButton
modifier|*
name|firstAcceptButton
init|=
name|acceptRoleList
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|qobject_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|acceptRoleList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|hasDefault
init|=
literal|false
decl_stmt|;
name|QWidget
modifier|*
name|dialog
init|=
literal|0
decl_stmt|;
name|QWidget
modifier|*
name|p
init|=
name|this
decl_stmt|;
while|while
condition|(
name|p
operator|&&
operator|!
name|p
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|p
operator|=
name|p
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|dialog
operator|=
name|qobject_cast
argument_list|<
name|QDialog
operator|*
argument_list|>
argument_list|(
name|p
argument_list|)
operator|)
condition|)
break|break;
block|}
foreach|foreach
control|(
name|QPushButton
modifier|*
name|pb
decl|,
operator|(
name|dialog
condition|?
name|dialog
else|:
name|this
operator|)
operator|->
name|findChildren
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|()
control|)
block|{
if|if
condition|(
name|pb
operator|->
name|isDefault
argument_list|()
operator|&&
name|pb
operator|!=
name|firstAcceptButton
condition|)
block|{
name|hasDefault
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasDefault
operator|&&
name|firstAcceptButton
condition|)
name|firstAcceptButton
operator|->
name|setDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LanguageChange
condition|)
block|{
name|d
operator|->
name|retranslateStrings
argument_list|()
expr_stmt|;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qdialogbuttonbox.cpp"
end_include
end_unit
