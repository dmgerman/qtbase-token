begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcombobox.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
end_ifndef
begin_include
include|#
directive|include
file|<qstylepainter.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformtheme.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformmenu.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<qlistview.h>
end_include
begin_include
include|#
directive|include
file|<qtableview.h>
end_include
begin_include
include|#
directive|include
file|<qitemdelegate.h>
end_include
begin_include
include|#
directive|include
file|<qmap.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qlayout.h>
end_include
begin_include
include|#
directive|include
file|<qscrollbar.h>
end_include
begin_include
include|#
directive|include
file|<qtreeview.h>
end_include
begin_include
include|#
directive|include
file|<qheaderview.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|<qmetaobject.h>
end_include
begin_include
include|#
directive|include
file|<qabstractproxymodel.h>
end_include
begin_include
include|#
directive|include
file|<qstylehints.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qcombobox_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qabstractitemmodel_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qabstractscrollarea_p.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_DEAD_CODE_FROM_QT4_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_EFFECTS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
end_if
begin_include
include|#
directive|include
file|<private/qcore_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qmacstyle_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_cocoa_helpers_mac_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_EFFECTS
end_ifndef
begin_include
include|#
directive|include
file|<private/qeffects_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qaccessible.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QComboBoxPrivate
name|QComboBoxPrivate
operator|::
name|QComboBoxPrivate
parameter_list|()
member_init_list|:
name|QWidgetPrivate
argument_list|()
member_init_list|,
name|model
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|lineEdit
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|container
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|insertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertAtBottom
argument_list|)
member_init_list|,
name|sizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|AdjustToContentsOnFirstShow
argument_list|)
member_init_list|,
name|minimumContentsLength
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|shownOnce
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|autoCompletion
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|duplicatesEnabled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|frame
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|maxVisibleItems
argument_list|(
literal|10
argument_list|)
member_init_list|,
name|maxCount
argument_list|(
name|INT_MAX
argument_list|)
member_init_list|,
name|modelColumn
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|inserting
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|arrowState
argument_list|(
name|QStyle
operator|::
name|State_None
argument_list|)
member_init_list|,
name|hoverControl
argument_list|(
name|QStyle
operator|::
name|SC_None
argument_list|)
member_init_list|,
name|autoCompletionCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
member_init_list|,
name|indexBeforeChange
argument_list|(
operator|-
literal|1
argument_list|)
ifdef|#
directive|ifdef
name|Q_OS_MAC
member_init_list|,
name|m_platformMenu
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
member_init_list|,
name|completer
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
block|{ }
end_constructor
begin_destructor
DECL|function|~QComboBoxPrivate
name|QComboBoxPrivate
operator|::
name|~
name|QComboBoxPrivate
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|cleanupNativePopup
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_function
DECL|function|getStyleOption
name|QStyleOptionMenuItem
name|QComboMenuDelegate
operator|::
name|getStyleOption
parameter_list|(
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QStyleOptionMenuItem
name|menuOption
decl_stmt|;
name|QPalette
name|resolvedpalette
init|=
name|option
operator|.
name|palette
operator|.
name|resolve
argument_list|(
name|QApplication
operator|::
name|palette
argument_list|(
literal|"QMenu"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|value
init|=
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|ForegroundRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|canConvert
argument_list|<
name|QBrush
argument_list|>
argument_list|()
condition|)
block|{
name|resolvedpalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|resolvedpalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|resolvedpalette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|menuOption
operator|.
name|palette
operator|=
name|resolvedpalette
expr_stmt|;
name|menuOption
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
if|if
condition|(
name|mCombo
operator|->
name|window
argument_list|()
operator|->
name|isActiveWindow
argument_list|()
condition|)
name|menuOption
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_Active
expr_stmt|;
if|if
condition|(
operator|(
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Enabled
operator|)
operator|&&
operator|(
name|index
operator|.
name|model
argument_list|()
operator|->
name|flags
argument_list|(
name|index
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsEnabled
operator|)
condition|)
name|menuOption
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
else|else
name|menuOption
operator|.
name|palette
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_Selected
condition|)
name|menuOption
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
name|menuOption
operator|.
name|checkType
operator|=
name|QStyleOptionMenuItem
operator|::
name|NonExclusive
expr_stmt|;
name|menuOption
operator|.
name|checked
operator|=
name|mCombo
operator|->
name|currentIndex
argument_list|()
operator|==
name|index
operator|.
name|row
argument_list|()
expr_stmt|;
if|if
condition|(
name|QComboBoxDelegate
operator|::
name|isSeparator
argument_list|(
name|index
argument_list|)
condition|)
name|menuOption
operator|.
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|Separator
expr_stmt|;
else|else
name|menuOption
operator|.
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|Normal
expr_stmt|;
name|QVariant
name|variant
init|=
name|index
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|variant
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Icon
case|:
name|menuOption
operator|.
name|icon
operator|=
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|variant
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Color
case|:
block|{
specifier|static
name|QPixmap
name|pixmap
argument_list|(
name|option
operator|.
name|decorationSize
argument_list|)
decl_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|menuOption
operator|.
name|icon
operator|=
name|pixmap
expr_stmt|;
break|break;
block|}
default|default:
name|menuOption
operator|.
name|icon
operator|=
name|qvariant_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|variant
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|BackgroundRole
argument_list|)
operator|.
name|canConvert
argument_list|<
name|QBrush
argument_list|>
argument_list|()
condition|)
block|{
name|menuOption
operator|.
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|All
argument_list|,
name|QPalette
operator|::
name|Background
argument_list|,
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|BackgroundRole
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|menuOption
operator|.
name|text
operator|=
name|index
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"&&"
argument_list|)
argument_list|)
expr_stmt|;
name|menuOption
operator|.
name|tabWidth
operator|=
literal|0
expr_stmt|;
name|menuOption
operator|.
name|maxIconWidth
operator|=
name|option
operator|.
name|decorationSize
operator|.
name|width
argument_list|()
operator|+
literal|4
expr_stmt|;
name|menuOption
operator|.
name|menuRect
operator|=
name|option
operator|.
name|rect
expr_stmt|;
name|menuOption
operator|.
name|rect
operator|=
name|option
operator|.
name|rect
expr_stmt|;
comment|// Make sure fonts set on the combo box also overrides the font for the popup menu.
if|if
condition|(
name|mCombo
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetFont
argument_list|)
operator|||
name|mCombo
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_MacSmallSize
argument_list|)
operator|||
name|mCombo
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_MacMiniSize
argument_list|)
operator|||
name|mCombo
operator|->
name|font
argument_list|()
operator|!=
name|qt_app_fonts_hash
argument_list|()
operator|->
name|value
argument_list|(
literal|"QComboBox"
argument_list|,
name|QFont
argument_list|()
argument_list|)
condition|)
block|{
name|menuOption
operator|.
name|font
operator|=
name|mCombo
operator|->
name|font
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QVariant
name|fontRoleData
init|=
name|index
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|FontRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|fontRoleData
operator|.
name|isValid
argument_list|()
condition|)
name|menuOption
operator|.
name|font
operator|=
name|fontRoleData
operator|.
name|value
argument_list|<
name|QFont
argument_list|>
argument_list|()
expr_stmt|;
else|else
name|menuOption
operator|.
name|font
operator|=
name|qt_app_fonts_hash
argument_list|()
operator|->
name|value
argument_list|(
literal|"QComboMenuItem"
argument_list|,
name|mCombo
operator|->
name|font
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|menuOption
operator|.
name|fontMetrics
operator|=
name|QFontMetrics
argument_list|(
name|menuOption
operator|.
name|font
argument_list|)
expr_stmt|;
return|return
name|menuOption
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
end_ifndef
begin_function
DECL|function|_q_completerActivated
name|void
name|QComboBoxPrivate
operator|::
name|_q_completerActivated
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
operator|&&
name|q
operator|->
name|completer
argument_list|()
condition|)
block|{
name|QAbstractProxyModel
modifier|*
name|proxy
init|=
name|qobject_cast
argument_list|<
name|QAbstractProxyModel
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|completer
argument_list|()
operator|->
name|completionModel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
condition|)
block|{
name|q
operator|->
name|setCurrentIndex
argument_list|(
name|proxy
operator|->
name|mapToSource
argument_list|(
name|index
argument_list|)
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|emitActivated
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
name|q
operator|->
name|isEditable
argument_list|()
operator|&&
name|q
operator|->
name|completer
argument_list|()
operator|&&
name|q
operator|->
name|completer
argument_list|()
operator|->
name|completionMode
argument_list|()
operator|==
name|QCompleter
operator|::
name|UnfilteredPopupCompletion
condition|)
block|{
name|q
operator|->
name|setEditFocus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_KEYPAD_NAVIGATION
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_COMPLETER
end_comment
begin_function
DECL|function|updateArrow
name|void
name|QComboBoxPrivate
operator|::
name|updateArrow
parameter_list|(
name|QStyle
operator|::
name|StateFlag
name|state
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|arrowState
operator|==
name|state
condition|)
return|return;
name|arrowState
operator|=
name|state
expr_stmt|;
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|q
operator|->
name|update
argument_list|(
name|q
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_modelReset
name|void
name|QComboBoxPrivate
operator|::
name|_q_modelReset
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|lineEdit
condition|)
block|{
name|lineEdit
operator|->
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|updateLineEditGeometry
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentIndex
operator|.
name|row
argument_list|()
operator|!=
name|indexBeforeChange
condition|)
name|_q_emitCurrentIndexChanged
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
name|modelChanged
argument_list|()
expr_stmt|;
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_modelDestroyed
name|void
name|QComboBoxPrivate
operator|::
name|_q_modelDestroyed
parameter_list|()
block|{
name|model
operator|=
name|QAbstractItemModelPrivate
operator|::
name|staticEmptyModel
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//Windows and KDE allows menus to cover the taskbar, while GNOME and Mac don't
end_comment
begin_function
DECL|function|popupGeometry
name|QRect
name|QComboBoxPrivate
operator|::
name|popupGeometry
parameter_list|(
name|int
name|screen
parameter_list|)
specifier|const
block|{
name|bool
name|useFullScreenForPopupMenu
init|=
literal|false
decl_stmt|;
if|if
condition|(
specifier|const
name|QPlatformTheme
modifier|*
name|theme
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
condition|)
name|useFullScreenForPopupMenu
operator|=
name|theme
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|UseFullScreenForPopupMenu
argument_list|)
operator|.
name|toBool
argument_list|()
expr_stmt|;
return|return
name|useFullScreenForPopupMenu
condition|?
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|screen
argument_list|)
else|:
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|screen
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|updateHoverControl
name|bool
name|QComboBoxPrivate
operator|::
name|updateHoverControl
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|QRect
name|lastHoverRect
init|=
name|hoverRect
decl_stmt|;
name|QStyle
operator|::
name|SubControl
name|lastHoverControl
init|=
name|hoverControl
decl_stmt|;
name|bool
name|doesHover
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastHoverControl
operator|!=
name|newHoverControl
argument_list|(
name|pos
argument_list|)
operator|&&
name|doesHover
condition|)
block|{
name|q
operator|->
name|update
argument_list|(
name|lastHoverRect
argument_list|)
expr_stmt|;
name|q
operator|->
name|update
argument_list|(
name|hoverRect
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
operator|!
name|doesHover
return|;
block|}
end_function
begin_function
DECL|function|newHoverControl
name|QStyle
operator|::
name|SubControl
name|QComboBoxPrivate
operator|::
name|newHoverControl
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_All
expr_stmt|;
name|hoverControl
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|opt
argument_list|,
name|pos
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|hoverRect
operator|=
operator|(
name|hoverControl
operator|!=
name|QStyle
operator|::
name|SC_None
operator|)
condition|?
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|opt
argument_list|,
name|hoverControl
argument_list|,
name|q
argument_list|)
else|:
name|QRect
argument_list|()
expr_stmt|;
return|return
name|hoverControl
return|;
block|}
end_function
begin_comment
comment|/*     Computes a size hint based on the maximum width     for the items in the combobox. */
end_comment
begin_function
DECL|function|computeWidthHint
name|int
name|QComboBoxPrivate
operator|::
name|computeWidthHint
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
name|int
name|width
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|count
init|=
name|q
operator|->
name|count
argument_list|()
decl_stmt|;
specifier|const
name|int
name|iconWidth
init|=
name|q
operator|->
name|iconSize
argument_list|()
operator|.
name|width
argument_list|()
operator|+
literal|4
decl_stmt|;
specifier|const
name|QFontMetrics
modifier|&
name|fontMetrics
init|=
name|q
operator|->
name|fontMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|textWidth
init|=
name|fontMetrics
operator|.
name|width
argument_list|(
name|q
operator|->
name|itemText
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|itemIcon
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
name|width
operator|=
operator|(
name|qMax
argument_list|(
name|width
argument_list|,
name|textWidth
argument_list|)
operator|)
expr_stmt|;
else|else
name|width
operator|=
operator|(
name|qMax
argument_list|(
name|width
argument_list|,
name|textWidth
operator|+
name|iconWidth
argument_list|)
operator|)
expr_stmt|;
block|}
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QSize
name|tmp
argument_list|(
name|width
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|tmp
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_ComboBox
argument_list|,
operator|&
name|opt
argument_list|,
name|tmp
argument_list|,
name|q
argument_list|)
expr_stmt|;
return|return
name|tmp
operator|.
name|width
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|recomputeSizeHint
name|QSize
name|QComboBoxPrivate
operator|::
name|recomputeSizeHint
parameter_list|(
name|QSize
modifier|&
name|sh
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sh
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|bool
name|hasIcon
init|=
name|sizeAdjustPolicy
operator|==
name|QComboBox
operator|::
name|AdjustToMinimumContentsLengthWithIcon
decl_stmt|;
name|int
name|count
init|=
name|q
operator|->
name|count
argument_list|()
decl_stmt|;
name|QSize
name|iconSize
init|=
name|q
operator|->
name|iconSize
argument_list|()
decl_stmt|;
specifier|const
name|QFontMetrics
modifier|&
name|fm
init|=
name|q
operator|->
name|fontMetrics
argument_list|()
decl_stmt|;
comment|// text width
if|if
condition|(
operator|&
name|sh
operator|==
operator|&
name|sizeHint
operator|||
name|minimumContentsLength
operator|==
literal|0
condition|)
block|{
switch|switch
condition|(
name|sizeAdjustPolicy
condition|)
block|{
case|case
name|QComboBox
operator|::
name|AdjustToContents
case|:
case|case
name|QComboBox
operator|::
name|AdjustToContentsOnFirstShow
case|:
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|sh
operator|.
name|rwidth
argument_list|()
operator|=
literal|7
operator|*
name|fm
operator|.
name|width
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|q
operator|->
name|itemIcon
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|hasIcon
operator|=
literal|true
expr_stmt|;
name|sh
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|sh
operator|.
name|width
argument_list|()
argument_list|,
name|fm
operator|.
name|boundingRect
argument_list|(
name|q
operator|->
name|itemText
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|width
argument_list|()
operator|+
name|iconSize
operator|.
name|width
argument_list|()
operator|+
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sh
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|sh
operator|.
name|width
argument_list|()
argument_list|,
name|fm
operator|.
name|boundingRect
argument_list|(
name|q
operator|->
name|itemText
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|QComboBox
operator|::
name|AdjustToMinimumContentsLength
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
operator|&&
operator|!
name|hasIcon
condition|;
operator|++
name|i
control|)
name|hasIcon
operator|=
operator|!
name|q
operator|->
name|itemIcon
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
default|default:
empty_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
operator|&&
operator|!
name|hasIcon
condition|;
operator|++
name|i
control|)
name|hasIcon
operator|=
operator|!
name|q
operator|->
name|itemIcon
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|minimumContentsLength
operator|>
literal|0
condition|)
name|sh
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|sh
operator|.
name|width
argument_list|()
argument_list|,
name|minimumContentsLength
operator|*
name|fm
operator|.
name|width
argument_list|(
name|QLatin1Char
argument_list|(
literal|'X'
argument_list|)
argument_list|)
operator|+
operator|(
name|hasIcon
condition|?
name|iconSize
operator|.
name|width
argument_list|()
operator|+
literal|4
else|:
literal|0
operator|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// height
name|sh
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|qCeil
argument_list|(
name|QFontMetricsF
argument_list|(
name|fm
argument_list|)
operator|.
name|height
argument_list|()
argument_list|)
argument_list|,
literal|14
argument_list|)
operator|+
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasIcon
condition|)
block|{
name|sh
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|sh
operator|.
name|height
argument_list|()
argument_list|,
name|iconSize
operator|.
name|height
argument_list|()
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add style and strut values
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|sh
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_ComboBox
argument_list|,
operator|&
name|opt
argument_list|,
name|sh
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
return|return
name|sh
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|adjustComboBoxSize
name|void
name|QComboBoxPrivate
operator|::
name|adjustComboBoxSize
parameter_list|()
block|{
name|viewContainer
argument_list|()
operator|->
name|adjustSizeTimer
operator|.
name|start
argument_list|(
literal|20
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateLayoutDirection
name|void
name|QComboBoxPrivate
operator|::
name|updateLayoutDirection
parameter_list|()
block|{
name|Q_Q
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|LayoutDirection
name|dir
init|=
name|Qt
operator|::
name|LayoutDirection
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_LayoutDirection
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|lineEdit
condition|)
name|lineEdit
operator|->
name|setLayoutDirection
argument_list|(
name|dir
argument_list|)
expr_stmt|;
if|if
condition|(
name|container
condition|)
name|container
operator|->
name|setLayoutDirection
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QComboBoxPrivateContainer
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|timerEvent
parameter_list|)
block|{
if|if
condition|(
name|timerEvent
operator|->
name|timerId
argument_list|()
operator|==
name|adjustSizeTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|adjustSizeTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|combo
operator|->
name|sizeAdjustPolicy
argument_list|()
operator|==
name|QComboBox
operator|::
name|AdjustToContents
condition|)
block|{
name|combo
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
name|combo
operator|->
name|adjustSize
argument_list|()
expr_stmt|;
name|combo
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|QComboBoxPrivateContainer
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|e
parameter_list|)
block|{
name|QStyleOptionComboBox
name|opt
init|=
name|comboStyleOption
argument_list|()
decl_stmt|;
if|if
condition|(
name|combo
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|,
name|combo
argument_list|)
condition|)
block|{
name|QStyleOption
name|myOpt
decl_stmt|;
name|myOpt
operator|.
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QStyleHintReturnMask
name|mask
decl_stmt|;
if|if
condition|(
name|combo
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_Mask
argument_list|,
operator|&
name|myOpt
argument_list|,
name|this
argument_list|,
operator|&
name|mask
argument_list|)
condition|)
block|{
name|setMask
argument_list|(
name|mask
operator|.
name|region
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|clearMask
argument_list|()
expr_stmt|;
block|}
name|QFrame
operator|::
name|resizeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leaveEvent
name|void
name|QComboBoxPrivateContainer
operator|::
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{
comment|// On Mac using the Mac style we want to clear the selection
comment|// when the mouse moves outside the popup.
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
name|QStyleOptionComboBox
name|opt
init|=
name|comboStyleOption
argument_list|()
decl_stmt|;
if|if
condition|(
name|combo
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|,
name|combo
argument_list|)
condition|)
name|view
operator|->
name|clearSelection
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_constructor
DECL|function|QComboBoxPrivateContainer
name|QComboBoxPrivateContainer
operator|::
name|QComboBoxPrivateContainer
parameter_list|(
name|QAbstractItemView
modifier|*
name|itemView
parameter_list|,
name|QComboBox
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QFrame
argument_list|(
name|parent
argument_list|,
name|Qt
operator|::
name|Popup
argument_list|)
member_init_list|,
name|combo
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|view
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|top
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bottom
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maybeIgnoreMouseButtonRelease
argument_list|(
literal|false
argument_list|)
block|{
comment|// we need the combobox and itemview
name|Q_ASSERT
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|itemView
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WindowPropagation
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeCombo
argument_list|)
expr_stmt|;
comment|// setup container
name|blockMouseReleaseTimer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// we need a vertical layout
name|QBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QBoxLayout
argument_list|(
name|QBoxLayout
operator|::
name|TopToBottom
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|layout
operator|->
name|setSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// set item view
name|setItemView
argument_list|(
name|itemView
argument_list|)
expr_stmt|;
comment|// add scroller arrows if style needs them
name|QStyleOptionComboBox
name|opt
init|=
name|comboStyleOption
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|usePopup
init|=
name|combo
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|,
name|combo
argument_list|)
decl_stmt|;
if|if
condition|(
name|usePopup
condition|)
block|{
name|top
operator|=
operator|new
name|QComboBoxPrivateScroller
argument_list|(
name|QAbstractSlider
operator|::
name|SliderSingleStepSub
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|bottom
operator|=
operator|new
name|QComboBoxPrivateScroller
argument_list|(
name|QAbstractSlider
operator|::
name|SliderSingleStepAdd
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|top
operator|->
name|hide
argument_list|()
expr_stmt|;
name|bottom
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLineWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|setFrameStyle
argument_list|(
name|combo
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_PopupFrameStyle
argument_list|,
operator|&
name|opt
argument_list|,
name|combo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|top
condition|)
block|{
name|layout
operator|->
name|insertWidget
argument_list|(
literal|0
argument_list|,
name|top
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|top
argument_list|,
name|SIGNAL
argument_list|(
name|doScroll
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|scrollItemView
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bottom
condition|)
block|{
name|layout
operator|->
name|addWidget
argument_list|(
name|bottom
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|bottom
argument_list|,
name|SIGNAL
argument_list|(
name|doScroll
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|scrollItemView
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Some styles (Mac) have a margin at the top and bottom of the popup.
name|layout
operator|->
name|insertSpacing
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|updateTopBottomMargin
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|scrollItemView
name|void
name|QComboBoxPrivateContainer
operator|::
name|scrollItemView
parameter_list|(
name|int
name|action
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
if|if
condition|(
name|view
operator|->
name|verticalScrollBar
argument_list|()
condition|)
name|view
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|triggerAction
argument_list|(
cast|static_cast
argument_list|<
name|QAbstractSlider
operator|::
name|SliderAction
argument_list|>
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*     Hides or shows the scrollers when we emulate a popupmenu */
end_comment
begin_function
DECL|function|updateScrollers
name|void
name|QComboBoxPrivateContainer
operator|::
name|updateScrollers
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
if|if
condition|(
operator|!
name|top
operator|||
operator|!
name|bottom
condition|)
return|return;
if|if
condition|(
name|isVisible
argument_list|()
operator|==
literal|false
condition|)
return|return;
name|QStyleOptionComboBox
name|opt
init|=
name|comboStyleOption
argument_list|()
decl_stmt|;
if|if
condition|(
name|combo
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|,
name|combo
argument_list|)
operator|&&
name|view
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|minimum
argument_list|()
operator|<
name|view
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
condition|)
block|{
name|bool
name|needTop
init|=
name|view
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|>
operator|(
name|view
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|minimum
argument_list|()
operator|+
name|topMargin
argument_list|()
operator|)
decl_stmt|;
name|bool
name|needBottom
init|=
name|view
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|<
operator|(
name|view
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
operator|-
name|bottomMargin
argument_list|()
operator|-
name|topMargin
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|needTop
condition|)
name|top
operator|->
name|show
argument_list|()
expr_stmt|;
else|else
name|top
operator|->
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|needBottom
condition|)
name|bottom
operator|->
name|show
argument_list|()
expr_stmt|;
else|else
name|bottom
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|top
operator|->
name|hide
argument_list|()
expr_stmt|;
name|bottom
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_SCROLLBAR
block|}
end_function
begin_comment
comment|/*     Cleans up when the view is destroyed. */
end_comment
begin_function
DECL|function|viewDestroyed
name|void
name|QComboBoxPrivateContainer
operator|::
name|viewDestroyed
parameter_list|()
block|{
name|view
operator|=
literal|0
expr_stmt|;
name|setItemView
argument_list|(
operator|new
name|QComboBoxListView
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Returns the item view used for the combobox popup. */
end_comment
begin_function
DECL|function|itemView
name|QAbstractItemView
modifier|*
name|QComboBoxPrivateContainer
operator|::
name|itemView
parameter_list|()
specifier|const
block|{
return|return
name|view
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the item view to be used for the combobox popup. */
end_comment
begin_function
DECL|function|setItemView
name|void
name|QComboBoxPrivateContainer
operator|::
name|setItemView
parameter_list|(
name|QAbstractItemView
modifier|*
name|itemView
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|itemView
argument_list|)
expr_stmt|;
comment|// clean up old one
if|if
condition|(
name|view
condition|)
block|{
name|view
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|view
operator|->
name|viewport
argument_list|()
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
name|disconnect
argument_list|(
name|view
operator|->
name|verticalScrollBar
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateScrollers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|view
operator|->
name|verticalScrollBar
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|rangeChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateScrollers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|disconnect
argument_list|(
name|view
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|viewDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|view
expr_stmt|;
name|view
operator|=
literal|0
expr_stmt|;
block|}
comment|// setup the item view
name|view
operator|=
name|itemView
expr_stmt|;
name|view
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|view
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_MacShowFocusRect
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|qobject_cast
argument_list|<
name|QBoxLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|()
argument_list|)
operator|->
name|insertWidget
argument_list|(
name|top
condition|?
literal|2
else|:
literal|0
argument_list|,
name|view
argument_list|)
expr_stmt|;
name|view
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Ignored
argument_list|,
name|QSizePolicy
operator|::
name|Ignored
argument_list|)
expr_stmt|;
name|view
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|view
operator|->
name|viewport
argument_list|()
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|view
operator|->
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
name|QStyleOptionComboBox
name|opt
init|=
name|comboStyleOption
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|usePopup
init|=
name|combo
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|,
name|combo
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
if|if
condition|(
name|usePopup
condition|)
name|view
operator|->
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|combo
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_ListMouseTracking
argument_list|,
operator|&
name|opt
argument_list|,
name|combo
argument_list|)
operator|||
name|usePopup
condition|)
block|{
name|view
operator|->
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|view
operator|->
name|setSelectionMode
argument_list|(
name|QAbstractItemView
operator|::
name|SingleSelection
argument_list|)
expr_stmt|;
name|view
operator|->
name|setFrameStyle
argument_list|(
name|QFrame
operator|::
name|NoFrame
argument_list|)
expr_stmt|;
name|view
operator|->
name|setLineWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|view
operator|->
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|NoEditTriggers
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
name|connect
argument_list|(
name|view
operator|->
name|verticalScrollBar
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateScrollers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|view
operator|->
name|verticalScrollBar
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|rangeChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateScrollers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|connect
argument_list|(
name|view
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|viewDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the top/bottom vertical margin of the view. */
end_comment
begin_function
DECL|function|topMargin
name|int
name|QComboBoxPrivateContainer
operator|::
name|topMargin
parameter_list|()
specifier|const
block|{
if|if
condition|(
specifier|const
name|QListView
modifier|*
name|lview
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QListView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
return|return
name|lview
operator|->
name|spacing
argument_list|()
return|;
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
if|if
condition|(
specifier|const
name|QTableView
modifier|*
name|tview
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
condition|)
return|return
name|tview
operator|->
name|showGrid
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the spacing between the items in the view. */
end_comment
begin_function
DECL|function|spacing
name|int
name|QComboBoxPrivateContainer
operator|::
name|spacing
parameter_list|()
specifier|const
block|{
name|QListView
modifier|*
name|lview
init|=
name|qobject_cast
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
decl_stmt|;
if|if
condition|(
name|lview
condition|)
return|return
literal|2
operator|*
name|lview
operator|->
name|spacing
argument_list|()
return|;
comment|// QListView::spacing is the padding around the item.
ifndef|#
directive|ifndef
name|QT_NO_TABLEVIEW
name|QTableView
modifier|*
name|tview
init|=
name|qobject_cast
argument_list|<
name|QTableView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|)
decl_stmt|;
if|if
condition|(
name|tview
condition|)
return|return
name|tview
operator|->
name|showGrid
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|updateTopBottomMargin
name|void
name|QComboBoxPrivateContainer
operator|::
name|updateTopBottomMargin
parameter_list|()
block|{
if|if
condition|(
operator|!
name|layout
argument_list|()
operator|||
name|layout
argument_list|()
operator|->
name|count
argument_list|()
operator|<
literal|1
condition|)
return|return;
name|QBoxLayout
modifier|*
name|boxLayout
init|=
name|qobject_cast
argument_list|<
name|QBoxLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|boxLayout
condition|)
return|return;
specifier|const
name|QStyleOptionComboBox
name|opt
init|=
name|comboStyleOption
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|usePopup
init|=
name|combo
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|,
name|combo
argument_list|)
decl_stmt|;
specifier|const
name|int
name|margin
init|=
name|usePopup
condition|?
name|combo
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuVMargin
argument_list|,
operator|&
name|opt
argument_list|,
name|combo
argument_list|)
else|:
literal|0
decl_stmt|;
name|QSpacerItem
modifier|*
name|topSpacer
init|=
name|boxLayout
operator|->
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|->
name|spacerItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|topSpacer
condition|)
name|topSpacer
operator|->
name|changeSize
argument_list|(
literal|0
argument_list|,
name|margin
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QSpacerItem
modifier|*
name|bottomSpacer
init|=
name|boxLayout
operator|->
name|itemAt
argument_list|(
name|boxLayout
operator|->
name|count
argument_list|()
operator|-
literal|1
argument_list|)
operator|->
name|spacerItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|bottomSpacer
operator|&&
name|bottomSpacer
operator|!=
name|topSpacer
condition|)
name|bottomSpacer
operator|->
name|changeSize
argument_list|(
literal|0
argument_list|,
name|margin
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|boxLayout
operator|->
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeEvent
name|void
name|QComboBoxPrivateContainer
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StyleChange
condition|)
block|{
name|QStyleOptionComboBox
name|opt
init|=
name|comboStyleOption
argument_list|()
decl_stmt|;
name|view
operator|->
name|setMouseTracking
argument_list|(
name|combo
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_ListMouseTracking
argument_list|,
operator|&
name|opt
argument_list|,
name|combo
argument_list|)
operator|||
name|combo
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|,
name|combo
argument_list|)
argument_list|)
expr_stmt|;
name|setFrameStyle
argument_list|(
name|combo
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_PopupFrameStyle
argument_list|,
operator|&
name|opt
argument_list|,
name|combo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eventFilter
name|bool
name|QComboBoxPrivateContainer
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|ShortcutOverride
case|:
switch|switch
condition|(
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Enter
case|:
case|case
name|Qt
operator|::
name|Key_Return
case|:
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
case|case
name|Qt
operator|::
name|Key_Select
case|:
endif|#
directive|endif
if|if
condition|(
name|view
operator|->
name|currentIndex
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|view
operator|->
name|currentIndex
argument_list|()
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsEnabled
operator|)
condition|)
block|{
name|combo
operator|->
name|hidePopup
argument_list|()
expr_stmt|;
emit|emit
name|itemSelected
argument_list|(
name|view
operator|->
name|currentIndex
argument_list|()
argument_list|)
emit|;
block|}
return|return
literal|true
return|;
case|case
name|Qt
operator|::
name|Key_Down
case|:
if|if
condition|(
operator|!
operator|(
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|AltModifier
operator|)
condition|)
break|break;
comment|// fall through
case|case
name|Qt
operator|::
name|Key_F4
case|:
case|case
name|Qt
operator|::
name|Key_Escape
case|:
name|combo
operator|->
name|hidePopup
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
default|default:
break|break;
block|}
break|break;
case|case
name|QEvent
operator|::
name|MouseMove
case|:
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
name|QMouseEvent
modifier|*
name|m
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|QPoint
name|vector
init|=
name|widget
operator|->
name|mapToGlobal
argument_list|(
name|m
operator|->
name|pos
argument_list|()
argument_list|)
operator|-
name|initialClickPosition
decl_stmt|;
if|if
condition|(
name|vector
operator|.
name|manhattanLength
argument_list|()
operator|>
literal|9
operator|&&
name|blockMouseReleaseTimer
operator|.
name|isActive
argument_list|()
condition|)
name|blockMouseReleaseTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|QModelIndex
name|indexUnderMouse
init|=
name|view
operator|->
name|indexAt
argument_list|(
name|m
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexUnderMouse
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|QComboBoxDelegate
operator|::
name|isSeparator
argument_list|(
name|indexUnderMouse
argument_list|)
condition|)
block|{
name|view
operator|->
name|setCurrentIndex
argument_list|(
name|indexUnderMouse
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
name|maybeIgnoreMouseButtonRelease
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
block|{
name|bool
name|ignoreEvent
init|=
name|maybeIgnoreMouseButtonRelease
operator|&&
name|popupTimer
operator|.
name|elapsed
argument_list|()
operator|<
name|QApplication
operator|::
name|doubleClickInterval
argument_list|()
decl_stmt|;
name|QMouseEvent
modifier|*
name|m
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
name|view
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|m
operator|->
name|pos
argument_list|()
argument_list|)
operator|&&
name|view
operator|->
name|currentIndex
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|blockMouseReleaseTimer
operator|.
name|isActive
argument_list|()
operator|&&
operator|!
name|ignoreEvent
operator|&&
operator|(
name|view
operator|->
name|currentIndex
argument_list|()
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsEnabled
operator|)
operator|&&
operator|(
name|view
operator|->
name|currentIndex
argument_list|()
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsSelectable
operator|)
condition|)
block|{
name|combo
operator|->
name|hidePopup
argument_list|()
expr_stmt|;
emit|emit
name|itemSelected
argument_list|(
name|view
operator|->
name|currentIndex
argument_list|()
argument_list|)
emit|;
return|return
literal|true
return|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|QFrame
operator|::
name|eventFilter
argument_list|(
name|o
argument_list|,
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|showEvent
name|void
name|QComboBoxPrivateContainer
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
parameter_list|)
block|{
name|combo
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hideEvent
name|void
name|QComboBoxPrivateContainer
operator|::
name|hideEvent
parameter_list|(
name|QHideEvent
modifier|*
parameter_list|)
block|{
emit|emit
name|resetButton
argument_list|()
emit|;
name|combo
operator|->
name|update
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
comment|// QGraphicsScenePrivate::removePopup closes the combo box popup, it hides it non-explicitly.
comment|// Hiding/showing the QComboBox after this will unexpectedly show the popup as well.
comment|// Re-hiding the popup container makes sure it is explicitly hidden.
if|if
condition|(
name|QGraphicsProxyWidget
modifier|*
name|proxy
init|=
name|graphicsProxyWidget
argument_list|()
condition|)
name|proxy
operator|->
name|hide
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QComboBoxPrivateContainer
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|QStyleOptionComboBox
name|opt
init|=
name|comboStyleOption
argument_list|()
decl_stmt|;
name|opt
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_All
expr_stmt|;
name|opt
operator|.
name|activeSubControls
operator|=
name|QStyle
operator|::
name|SC_ComboBoxArrow
expr_stmt|;
name|QStyle
operator|::
name|SubControl
name|sc
init|=
name|combo
operator|->
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|opt
argument_list|,
name|combo
operator|->
name|mapFromGlobal
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
argument_list|,
name|combo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|combo
operator|->
name|isEditable
argument_list|()
operator|&&
name|sc
operator|==
name|QStyle
operator|::
name|SC_ComboBoxArrow
operator|)
operator|||
operator|(
operator|!
name|combo
operator|->
name|isEditable
argument_list|()
operator|&&
name|sc
operator|!=
name|QStyle
operator|::
name|SC_None
operator|)
condition|)
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoMouseReplay
argument_list|)
expr_stmt|;
name|combo
operator|->
name|hidePopup
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QComboBoxPrivateContainer
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|blockMouseReleaseTimer
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|combo
operator|->
name|hidePopup
argument_list|()
expr_stmt|;
emit|emit
name|resetButton
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|comboStyleOption
name|QStyleOptionComboBox
name|QComboBoxPrivateContainer
operator|::
name|comboStyleOption
parameter_list|()
specifier|const
block|{
comment|// ### This should use QComboBox's initStyleOption(), but it's protected
comment|// perhaps, we could cheat by having the QCombo private instead?
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|opt
operator|.
name|initFrom
argument_list|(
name|combo
argument_list|)
expr_stmt|;
name|opt
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_All
expr_stmt|;
name|opt
operator|.
name|activeSubControls
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|opt
operator|.
name|editable
operator|=
name|combo
operator|->
name|isEditable
argument_list|()
expr_stmt|;
return|return
name|opt
return|;
block|}
end_function
begin_comment
comment|/*!     \enum QComboBox::InsertPolicy      This enum specifies what the QComboBox should do when a new string is     entered by the user.      \value NoInsert             The string will not be inserted into the combobox.     \value InsertAtTop          The string will be inserted as the first item in the combobox.     \value InsertAtCurrent      The current item will be \e replaced by the string.     \value InsertAtBottom       The string will be inserted after the last item in the combobox.     \value InsertAfterCurrent   The string is inserted after the current item in the combobox.     \value InsertBeforeCurrent  The string is inserted before the current item in the combobox.     \value InsertAlphabetically The string is inserted in the alphabetic order in the combobox. */
end_comment
begin_comment
comment|/*!     \enum QComboBox::SizeAdjustPolicy      This enum specifies how the size hint of the QComboBox should     adjust when new content is added or content changes.      \value AdjustToContents              The combobox will always adjust to the contents     \value AdjustToContentsOnFirstShow   The combobox will adjust to its contents the first time it is shown.     \value AdjustToMinimumContentsLength Use AdjustToContents or AdjustToContentsOnFirstShow instead.     \value AdjustToMinimumContentsLengthWithIcon The combobox will adjust to \l minimumContentsLength plus space for an icon. For performance reasons use this policy on large models. */
end_comment
begin_comment
comment|/*!     \fn void QComboBox::activated(int index)      This signal is sent when the user chooses an item in the combobox.     The item's \a index is passed. Note that this signal is sent even     when the choice is not changed. If you need to know when the     choice actually changes, use signal currentIndexChanged().  */
end_comment
begin_comment
comment|/*!     \fn void QComboBox::activated(const QString&text)      This signal is sent when the user chooses an item in the combobox.     The item's \a text is passed. Note that this signal is sent even     when the choice is not changed. If you need to know when the     choice actually changes, use signal currentIndexChanged().  */
end_comment
begin_comment
comment|/*!     \fn void QComboBox::highlighted(int index)      This signal is sent when an item in the combobox popup list is     highlighted by the user. The item's \a index is passed. */
end_comment
begin_comment
comment|/*!     \fn void QComboBox::highlighted(const QString&text)      This signal is sent when an item in the combobox popup list is     highlighted by the user. The item's \a text is passed. */
end_comment
begin_comment
comment|/*!     \fn void QComboBox::currentIndexChanged(int index)     \since 4.1      This signal is sent whenever the currentIndex in the combobox     changes either through user interaction or programmatically. The     item's \a index is passed or -1 if the combobox becomes empty or the     currentIndex was reset. */
end_comment
begin_comment
comment|/*!     \fn void QComboBox::currentIndexChanged(const QString&text)     \since 4.1      This signal is sent whenever the currentIndex in the combobox     changes either through user interaction or programmatically.  The     item's \a text is passed. */
end_comment
begin_comment
comment|/*!     \fn void QComboBox::currentTextChanged(const QString&text)     \since 5.0      This signal is sent whenever currentText changes. The new value     is passed as \a text. */
end_comment
begin_comment
comment|/*!     Constructs a combobox with the given \a parent, using the default     model QStandardItemModel. */
end_comment
begin_constructor
DECL|function|QComboBox
name|QComboBox
operator|::
name|QComboBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QComboBoxPrivate
argument_list|()
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_constructor
DECL|function|QComboBox
name|QComboBox
operator|::
name|QComboBox
parameter_list|(
name|QComboBoxPrivate
modifier|&
name|dd
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \class QComboBox     \brief The QComboBox widget is a combined button and popup list.      \ingroup basicwidgets     \inmodule QtWidgets      A QComboBox provides a means of presenting a list of options to the user     in a way that takes up the minimum amount of screen space.      A combobox is a selection widget that displays the current item,     and can pop up a list of selectable items. A combobox may be editable,     allowing the user to modify each item in the list.      Comboboxes can contain pixmaps as well as strings; the     insertItem() and setItemText() functions are suitably overloaded.     For editable comboboxes, the function clearEditText() is provided,     to clear the displayed string without changing the combobox's     contents.      There are two signals emitted if the current item of a combobox     changes, currentIndexChanged() and activated().     currentIndexChanged() is always emitted regardless if the change     was done programmatically or by user interaction, while     activated() is only emitted when the change is caused by user     interaction. The highlighted() signal is emitted when the user     highlights an item in the combobox popup list. All three signals     exist in two versions, one with a QString argument and one with an     \c int argument. If the user selects or highlights a pixmap, only     the \c int signals are emitted. Whenever the text of an editable     combobox is changed the editTextChanged() signal is emitted.      When the user enters a new string in an editable combobox, the     widget may or may not insert it, and it can insert it in several     locations. The default policy is \l InsertAtBottom but you can change     this using setInsertPolicy().      It is possible to constrain the input to an editable combobox     using QValidator; see setValidator(). By default, any input is     accepted.      A combobox can be populated using the insert functions,     insertItem() and insertItems() for example. Items can be     changed with setItemText(). An item can be removed with     removeItem() and all items can be removed with clear(). The text     of the current item is returned by currentText(), and the text of     a numbered item is returned with text(). The current item can be     set with setCurrentIndex(). The number of items in the combobox is     returned by count(); the maximum number of items can be set with     setMaxCount(). You can allow editing using setEditable(). For     editable comboboxes you can set auto-completion using     setCompleter() and whether or not the user can add duplicates     is set with setDuplicatesEnabled().      QComboBox uses the \l{Model/View Programming}{model/view     framework} for its popup list and to store its items.  By default     a QStandardItemModel stores the items and a QListView subclass     displays the popuplist. You can access the model and view directly     (with model() and view()), but QComboBox also provides functions     to set and get item data (e.g., setItemData() and itemText()). You     can also set a new model and view (with setModel() and setView()).     For the text and icon in the combobox label, the data in the model     that has the Qt::DisplayRole and Qt::DecorationRole is used.  Note     that you cannot alter the \l{QAbstractItemView::}{SelectionMode}     of the view(), e.g., by using     \l{QAbstractItemView::}{setSelectionMode()}.      \image qstyle-comboboxes.png Comboboxes in the different built-in styles.      \sa QLineEdit, QSpinBox, QRadioButton, QButtonGroup,         {fowler}{GUI Design Handbook: Combo Box, Drop-Down List Box} */
end_comment
begin_function
DECL|function|init
name|void
name|QComboBoxPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_OSX
comment|// On OS X, only line edits and list views always get tab focus. It's only
comment|// when we enable full keyboard access that other controls can get tab focus.
comment|// When it's not editable, a combobox looks like a button, and it behaves as
comment|// such in this respect.
if|if
condition|(
operator|!
name|q
operator|->
name|isEditable
argument_list|()
condition|)
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|TabFocus
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|WheelFocus
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|ComboBox
argument_list|)
argument_list|)
expr_stmt|;
name|setLayoutItemMargins
argument_list|(
name|QStyle
operator|::
name|SE_ComboBoxLayoutItem
argument_list|)
expr_stmt|;
name|q
operator|->
name|setModel
argument_list|(
operator|new
name|QStandardItemModel
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isEditable
argument_list|()
condition|)
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|viewContainer
name|QComboBoxPrivateContainer
modifier|*
name|QComboBoxPrivate
operator|::
name|viewContainer
parameter_list|()
block|{
if|if
condition|(
name|container
condition|)
return|return
name|container
return|;
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|container
operator|=
operator|new
name|QComboBoxPrivateContainer
argument_list|(
operator|new
name|QComboBoxListView
argument_list|(
name|q
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|container
operator|->
name|itemView
argument_list|()
operator|->
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|container
operator|->
name|itemView
argument_list|()
operator|->
name|setTextElideMode
argument_list|(
name|Qt
operator|::
name|ElideMiddle
argument_list|)
expr_stmt|;
name|updateDelegate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateLayoutDirection
argument_list|()
expr_stmt|;
name|updateViewContainerPaletteAndOpacity
argument_list|()
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|container
argument_list|,
name|SIGNAL
argument_list|(
name|itemSelected
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_itemSelected
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|container
operator|->
name|itemView
argument_list|()
operator|->
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitHighlighted
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|container
argument_list|,
name|SIGNAL
argument_list|(
name|resetButton
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_resetButton
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
end_function
begin_function
DECL|function|_q_resetButton
name|void
name|QComboBoxPrivate
operator|::
name|_q_resetButton
parameter_list|()
block|{
name|updateArrow
argument_list|(
name|QStyle
operator|::
name|State_None
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_dataChanged
name|void
name|QComboBoxPrivate
operator|::
name|_q_dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|inserting
operator|||
name|topLeft
operator|.
name|parent
argument_list|()
operator|!=
name|root
condition|)
return|return;
if|if
condition|(
name|sizeAdjustPolicy
operator|==
name|QComboBox
operator|::
name|AdjustToContents
condition|)
block|{
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|adjustComboBoxSize
argument_list|()
expr_stmt|;
name|q
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentIndex
operator|.
name|row
argument_list|()
operator|>=
name|topLeft
operator|.
name|row
argument_list|()
operator|&&
name|currentIndex
operator|.
name|row
argument_list|()
operator|<=
name|bottomRight
operator|.
name|row
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|text
init|=
name|q
operator|->
name|itemText
argument_list|(
name|currentIndex
operator|.
name|row
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lineEdit
condition|)
block|{
name|lineEdit
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|updateLineEditGeometry
argument_list|()
expr_stmt|;
block|}
else|else
block|{
emit|emit
name|q
operator|->
name|currentTextChanged
argument_list|(
name|text
argument_list|)
emit|;
block|}
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessibleValueChangeEvent
name|event
argument_list|(
name|q
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|_q_rowsInserted
name|void
name|QComboBoxPrivate
operator|::
name|_q_rowsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|inserting
operator|||
name|parent
operator|!=
name|root
condition|)
return|return;
if|if
condition|(
name|sizeAdjustPolicy
operator|==
name|QComboBox
operator|::
name|AdjustToContents
condition|)
block|{
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|adjustComboBoxSize
argument_list|()
expr_stmt|;
name|q
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
comment|// set current index if combo was previously empty
if|if
condition|(
name|start
operator|==
literal|0
operator|&&
operator|(
name|end
operator|-
name|start
operator|+
literal|1
operator|)
operator|==
name|q
operator|->
name|count
argument_list|()
operator|&&
operator|!
name|currentIndex
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|q
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// need to emit changed if model updated index "silently"
block|}
elseif|else
if|if
condition|(
name|currentIndex
operator|.
name|row
argument_list|()
operator|!=
name|indexBeforeChange
condition|)
block|{
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
name|_q_emitCurrentIndexChanged
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_updateIndexBeforeChange
name|void
name|QComboBoxPrivate
operator|::
name|_q_updateIndexBeforeChange
parameter_list|()
block|{
name|indexBeforeChange
operator|=
name|currentIndex
operator|.
name|row
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_rowsRemoved
name|void
name|QComboBoxPrivate
operator|::
name|_q_rowsRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
comment|/*start*/
parameter_list|,
name|int
comment|/*end*/
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
name|root
condition|)
return|return;
if|if
condition|(
name|sizeAdjustPolicy
operator|==
name|QComboBox
operator|::
name|AdjustToContents
condition|)
block|{
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|adjustComboBoxSize
argument_list|()
expr_stmt|;
name|q
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
comment|// model has changed the currentIndex
if|if
condition|(
name|currentIndex
operator|.
name|row
argument_list|()
operator|!=
name|indexBeforeChange
condition|)
block|{
if|if
condition|(
operator|!
name|currentIndex
operator|.
name|isValid
argument_list|()
operator|&&
name|q
operator|->
name|count
argument_list|()
condition|)
block|{
name|q
operator|->
name|setCurrentIndex
argument_list|(
name|qMin
argument_list|(
name|q
operator|->
name|count
argument_list|()
operator|-
literal|1
argument_list|,
name|qMax
argument_list|(
name|indexBeforeChange
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|lineEdit
condition|)
block|{
name|lineEdit
operator|->
name|setText
argument_list|(
name|q
operator|->
name|itemText
argument_list|(
name|currentIndex
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|updateLineEditGeometry
argument_list|()
expr_stmt|;
block|}
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
name|_q_emitCurrentIndexChanged
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateViewContainerPaletteAndOpacity
name|void
name|QComboBoxPrivate
operator|::
name|updateViewContainerPaletteAndOpacity
parameter_list|()
block|{
if|if
condition|(
operator|!
name|container
condition|)
return|return;
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
condition|)
block|{
name|QMenu
name|menu
decl_stmt|;
name|menu
operator|.
name|ensurePolished
argument_list|()
expr_stmt|;
name|container
operator|->
name|setPalette
argument_list|(
name|menu
operator|.
name|palette
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|->
name|setWindowOpacity
argument_list|(
name|menu
operator|.
name|windowOpacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|container
operator|->
name|setPalette
argument_list|(
name|q
operator|->
name|palette
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|->
name|setWindowOpacity
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lineEdit
condition|)
name|lineEdit
operator|->
name|setPalette
argument_list|(
name|q
operator|->
name|palette
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateFocusPolicy
name|void
name|QComboBoxPrivate
operator|::
name|updateFocusPolicy
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_OSX
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
comment|// See comment in QComboBoxPrivate::init()
if|if
condition|(
name|q
operator|->
name|isEditable
argument_list|()
condition|)
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|WheelFocus
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|TabFocus
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Initialize \a option with the values from this QComboBox. This method     is useful for subclasses when they need a QStyleOptionComboBox, but don't want     to fill in all the information themselves.      \sa QStyleOption::initFrom() */
end_comment
begin_function
DECL|function|initStyleOption
name|void
name|QComboBox
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionComboBox
modifier|*
name|option
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|option
condition|)
return|return;
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|option
operator|->
name|editable
operator|=
name|isEditable
argument_list|()
expr_stmt|;
name|option
operator|->
name|frame
operator|=
name|d
operator|->
name|frame
expr_stmt|;
if|if
condition|(
name|hasFocus
argument_list|()
operator|&&
operator|!
name|option
operator|->
name|editable
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
name|option
operator|->
name|subControls
operator|=
name|QStyle
operator|::
name|SC_All
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|arrowState
operator|==
name|QStyle
operator|::
name|State_Sunken
condition|)
block|{
name|option
operator|->
name|activeSubControls
operator|=
name|QStyle
operator|::
name|SC_ComboBoxArrow
expr_stmt|;
name|option
operator|->
name|state
operator||=
name|d
operator|->
name|arrowState
expr_stmt|;
block|}
else|else
block|{
name|option
operator|->
name|activeSubControls
operator|=
name|d
operator|->
name|hoverControl
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|currentIndex
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|option
operator|->
name|currentText
operator|=
name|currentText
argument_list|()
expr_stmt|;
name|option
operator|->
name|currentIcon
operator|=
name|d
operator|->
name|itemIcon
argument_list|(
name|d
operator|->
name|currentIndex
argument_list|)
expr_stmt|;
block|}
name|option
operator|->
name|iconSize
operator|=
name|iconSize
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|container
operator|&&
name|d
operator|->
name|container
operator|->
name|isVisible
argument_list|()
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_On
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateLineEditGeometry
name|void
name|QComboBoxPrivate
operator|::
name|updateLineEditGeometry
parameter_list|()
block|{
if|if
condition|(
operator|!
name|lineEdit
condition|)
return|return;
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QRect
name|editRect
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_ComboBoxEditField
argument_list|,
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|itemIcon
argument_list|(
name|q
operator|->
name|currentIndex
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QRect
name|comboRect
argument_list|(
name|editRect
argument_list|)
decl_stmt|;
name|editRect
operator|.
name|setWidth
argument_list|(
name|editRect
operator|.
name|width
argument_list|()
operator|-
name|q
operator|->
name|iconSize
argument_list|()
operator|.
name|width
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
name|editRect
operator|=
name|QStyle
operator|::
name|alignedRect
argument_list|(
name|q
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignRight
argument_list|,
name|editRect
operator|.
name|size
argument_list|()
argument_list|,
name|comboRect
argument_list|)
expr_stmt|;
block|}
name|lineEdit
operator|->
name|setGeometry
argument_list|(
name|editRect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|matchFlags
name|Qt
operator|::
name|MatchFlags
name|QComboBoxPrivate
operator|::
name|matchFlags
parameter_list|()
specifier|const
block|{
comment|// Base how duplicates are determined on the autocompletion case sensitivity
name|Qt
operator|::
name|MatchFlags
name|flags
init|=
name|Qt
operator|::
name|MatchFixedString
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
if|if
condition|(
operator|!
name|lineEdit
operator|->
name|completer
argument_list|()
operator|||
name|lineEdit
operator|->
name|completer
argument_list|()
operator|->
name|caseSensitivity
argument_list|()
operator|==
name|Qt
operator|::
name|CaseSensitive
condition|)
endif|#
directive|endif
name|flags
operator||=
name|Qt
operator|::
name|MatchCaseSensitive
expr_stmt|;
return|return
name|flags
return|;
block|}
end_function
begin_function
DECL|function|_q_editingFinished
name|void
name|QComboBoxPrivate
operator|::
name|_q_editingFinished
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|lineEdit
operator|&&
operator|!
name|lineEdit
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|itemText
argument_list|(
name|currentIndex
argument_list|)
operator|!=
name|lineEdit
operator|->
name|text
argument_list|()
condition|)
block|{
specifier|const
name|int
name|index
init|=
name|q_func
argument_list|()
operator|->
name|findText
argument_list|(
name|lineEdit
operator|->
name|text
argument_list|()
argument_list|,
name|matchFlags
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|q
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|emitActivated
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|_q_returnPressed
name|void
name|QComboBoxPrivate
operator|::
name|_q_returnPressed
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
comment|// The insertion code below does not apply when the policy is QComboBox::NoInsert.
comment|// In case a completer is installed, item activation via the completer is handled
comment|// in _q_completerActivated(). Otherwise _q_editingFinished() updates the current
comment|// index as appropriate.
if|if
condition|(
name|insertPolicy
operator|==
name|QComboBox
operator|::
name|NoInsert
condition|)
return|return;
if|if
condition|(
name|lineEdit
operator|&&
operator|!
name|lineEdit
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|count
argument_list|()
operator|>=
name|maxCount
operator|&&
operator|!
operator|(
name|this
operator|->
name|insertPolicy
operator|==
name|QComboBox
operator|::
name|InsertAtCurrent
operator|)
condition|)
return|return;
name|lineEdit
operator|->
name|deselect
argument_list|()
expr_stmt|;
name|lineEdit
operator|->
name|end
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QString
name|text
init|=
name|lineEdit
operator|->
name|text
argument_list|()
decl_stmt|;
comment|// check for duplicates (if not enabled) and quit
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|duplicatesEnabled
condition|)
block|{
name|index
operator|=
name|q
operator|->
name|findText
argument_list|(
name|text
argument_list|,
name|matchFlags
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|q
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|emitActivated
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
switch|switch
condition|(
name|insertPolicy
condition|)
block|{
case|case
name|QComboBox
operator|::
name|InsertAtTop
case|:
name|index
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|QComboBox
operator|::
name|InsertAtBottom
case|:
name|index
operator|=
name|q
operator|->
name|count
argument_list|()
expr_stmt|;
break|break;
case|case
name|QComboBox
operator|::
name|InsertAtCurrent
case|:
case|case
name|QComboBox
operator|::
name|InsertAfterCurrent
case|:
case|case
name|QComboBox
operator|::
name|InsertBeforeCurrent
case|:
if|if
condition|(
operator|!
name|q
operator|->
name|count
argument_list|()
operator|||
operator|!
name|currentIndex
operator|.
name|isValid
argument_list|()
condition|)
name|index
operator|=
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
name|insertPolicy
operator|==
name|QComboBox
operator|::
name|InsertAtCurrent
condition|)
name|q
operator|->
name|setItemText
argument_list|(
name|q
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|insertPolicy
operator|==
name|QComboBox
operator|::
name|InsertAfterCurrent
condition|)
name|index
operator|=
name|q
operator|->
name|currentIndex
argument_list|()
operator|+
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|insertPolicy
operator|==
name|QComboBox
operator|::
name|InsertBeforeCurrent
condition|)
name|index
operator|=
name|q
operator|->
name|currentIndex
argument_list|()
expr_stmt|;
break|break;
case|case
name|QComboBox
operator|::
name|InsertAlphabetically
case|:
name|index
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|q
operator|->
name|count
argument_list|()
condition|;
name|i
operator|++
operator|,
name|index
operator|++
control|)
block|{
if|if
condition|(
name|text
operator|.
name|toLower
argument_list|()
operator|<
name|q
operator|->
name|itemText
argument_list|(
name|i
argument_list|)
operator|.
name|toLower
argument_list|()
condition|)
break|break;
block|}
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|q
operator|->
name|insertItem
argument_list|(
name|index
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|q
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|emitActivated
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|_q_itemSelected
name|void
name|QComboBoxPrivate
operator|::
name|_q_itemSelected
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|item
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|!=
name|currentIndex
condition|)
block|{
name|setCurrentIndex
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lineEdit
condition|)
block|{
name|lineEdit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|lineEdit
operator|->
name|setText
argument_list|(
name|q
operator|->
name|itemText
argument_list|(
name|currentIndex
operator|.
name|row
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|emitActivated
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emitActivated
name|void
name|QComboBoxPrivate
operator|::
name|emitActivated
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QString
name|text
argument_list|(
name|itemText
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
emit|emit
name|q
operator|->
name|activated
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|activated
argument_list|(
name|text
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitHighlighted
name|void
name|QComboBoxPrivate
operator|::
name|_q_emitHighlighted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QString
name|text
argument_list|(
name|itemText
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
emit|emit
name|q
operator|->
name|highlighted
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|highlighted
argument_list|(
name|text
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|_q_emitCurrentIndexChanged
name|void
name|QComboBoxPrivate
operator|::
name|_q_emitCurrentIndexChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|text
init|=
name|itemText
argument_list|(
name|index
argument_list|)
decl_stmt|;
emit|emit
name|q
operator|->
name|currentIndexChanged
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|currentIndexChanged
argument_list|(
name|text
argument_list|)
emit|;
comment|// signal lineEdit.textChanged already connected to signal currentTextChanged, so don't emit double here
if|if
condition|(
operator|!
name|lineEdit
condition|)
emit|emit
name|q
operator|->
name|currentTextChanged
argument_list|(
name|text
argument_list|)
emit|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessibleValueChangeEvent
name|event
argument_list|(
name|q
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|itemText
name|QString
name|QComboBoxPrivate
operator|::
name|itemText
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
return|return
name|index
operator|.
name|isValid
argument_list|()
condition|?
name|model
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|itemRole
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|itemRole
name|int
name|QComboBoxPrivate
operator|::
name|itemRole
parameter_list|()
specifier|const
block|{
return|return
name|q_func
argument_list|()
operator|->
name|isEditable
argument_list|()
condition|?
name|Qt
operator|::
name|EditRole
else|:
name|Qt
operator|::
name|DisplayRole
return|;
block|}
end_function
begin_comment
comment|/*!     Destroys the combobox. */
end_comment
begin_destructor
DECL|function|~QComboBox
name|QComboBox
operator|::
name|~
name|QComboBox
parameter_list|()
block|{
comment|// ### check delegateparent and delete delegate if us?
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|QT_TRY
block|{
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_modelDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QT_CATCH
argument_list|(
argument|...
argument_list|)
block|{
empty_stmt|;
comment|// objects can't throw in destructor
block|}
block|}
end_destructor
begin_comment
comment|/*!     \property QComboBox::maxVisibleItems     \brief the maximum allowed size on screen of the combo box, measured in items      By default, this property has a value of 10.      \note This property is ignored for non-editable comboboxes in styles that returns     true for QStyle::SH_ComboBox_Popup such as the Mac style or the Gtk+ Style. */
end_comment
begin_function
DECL|function|maxVisibleItems
name|int
name|QComboBox
operator|::
name|maxVisibleItems
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|maxVisibleItems
return|;
block|}
end_function
begin_function
DECL|function|setMaxVisibleItems
name|void
name|QComboBox
operator|::
name|setMaxVisibleItems
parameter_list|(
name|int
name|maxItems
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxItems
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QComboBox::setMaxVisibleItems: "
literal|"Invalid max visible items (%d) must be>= 0"
argument_list|,
name|maxItems
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|maxVisibleItems
operator|=
name|maxItems
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QComboBox::count     \brief the number of items in the combobox      By default, for an empty combo box, this property has a value of 0. */
end_comment
begin_function
DECL|function|count
name|int
name|QComboBox
operator|::
name|count
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|(
name|d
operator|->
name|root
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QComboBox::maxCount     \brief the maximum number of items allowed in the combobox      \note If you set the maximum number to be less then the current     amount of items in the combobox, the extra items will be     truncated. This also applies if you have set an external model on     the combobox.      By default, this property's value is derived from the highest     signed integer available (typically 2147483647). */
end_comment
begin_function
DECL|function|setMaxCount
name|void
name|QComboBox
operator|::
name|setMaxCount
parameter_list|(
name|int
name|max
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|max
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QComboBox::setMaxCount: Invalid count (%d) must be>= 0"
argument_list|,
name|max
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|max
operator|<
name|count
argument_list|()
condition|)
name|d
operator|->
name|model
operator|->
name|removeRows
argument_list|(
name|max
argument_list|,
name|count
argument_list|()
operator|-
name|max
argument_list|,
name|d
operator|->
name|root
argument_list|)
expr_stmt|;
name|d
operator|->
name|maxCount
operator|=
name|max
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maxCount
name|int
name|QComboBox
operator|::
name|maxCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|maxCount
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
end_ifndef
begin_comment
comment|/*!     \property QComboBox::autoCompletion     \brief whether the combobox provides auto-completion for editable items     \since 4.1     \obsolete      Use setCompleter() instead.      By default, this property is \c true.      \sa editable */
end_comment
begin_comment
comment|/*!     \obsolete      Use setCompleter() instead. */
end_comment
begin_function
DECL|function|autoCompletion
name|bool
name|QComboBox
operator|::
name|autoCompletion
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|autoCompletion
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      Use setCompleter() instead. */
end_comment
begin_function
DECL|function|setAutoCompletion
name|void
name|QComboBox
operator|::
name|setAutoCompletion
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|!
name|enable
operator|&&
name|isEditable
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"QComboBox::setAutoCompletion: auto completion is mandatory when combo box editable"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|autoCompletion
operator|=
name|enable
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|lineEdit
condition|)
return|return;
if|if
condition|(
name|enable
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
condition|)
return|return;
name|d
operator|->
name|completer
operator|=
operator|new
name|QCompleter
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|d
operator|->
name|lineEdit
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|completer
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_completerActivated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|completer
operator|->
name|setCaseSensitivity
argument_list|(
name|d
operator|->
name|autoCompletionCaseSensitivity
argument_list|)
expr_stmt|;
name|d
operator|->
name|completer
operator|->
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|InlineCompletion
argument_list|)
expr_stmt|;
name|d
operator|->
name|completer
operator|->
name|setCompletionColumn
argument_list|(
name|d
operator|->
name|modelColumn
argument_list|)
expr_stmt|;
name|d
operator|->
name|lineEdit
operator|->
name|setCompleter
argument_list|(
name|d
operator|->
name|completer
argument_list|)
expr_stmt|;
name|d
operator|->
name|completer
operator|->
name|setWidget
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|lineEdit
operator|->
name|setCompleter
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QComboBox::autoCompletionCaseSensitivity     \brief whether string comparisons are case-sensitive or case-insensitive for auto-completion     \obsolete      By default, this property is Qt::CaseInsensitive.      Use setCompleter() instead. Case sensitivity of the auto completion can be     changed using QCompleter::setCaseSensitivity().      \sa autoCompletion */
end_comment
begin_comment
comment|/*!     \obsolete      Use setCompleter() and QCompleter::setCaseSensitivity() instead. */
end_comment
begin_function
DECL|function|autoCompletionCaseSensitivity
name|Qt
operator|::
name|CaseSensitivity
name|QComboBox
operator|::
name|autoCompletionCaseSensitivity
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|autoCompletionCaseSensitivity
return|;
block|}
end_function
begin_comment
comment|/*!     \obsolete      Use setCompleter() and QCompleter::setCaseSensitivity() instead. */
end_comment
begin_function
DECL|function|setAutoCompletionCaseSensitivity
name|void
name|QComboBox
operator|::
name|setAutoCompletionCaseSensitivity
parameter_list|(
name|Qt
operator|::
name|CaseSensitivity
name|sensitivity
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|autoCompletionCaseSensitivity
operator|=
name|sensitivity
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
operator|&&
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
condition|)
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
operator|->
name|setCaseSensitivity
argument_list|(
name|sensitivity
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_COMPLETER
end_comment
begin_comment
comment|/*!     \property QComboBox::duplicatesEnabled     \brief whether the user can enter duplicate items into the combobox      Note that it is always possible to programmatically insert duplicate items into the     combobox.      By default, this property is \c false (duplicates are not allowed). */
end_comment
begin_function
DECL|function|duplicatesEnabled
name|bool
name|QComboBox
operator|::
name|duplicatesEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|duplicatesEnabled
return|;
block|}
end_function
begin_function
DECL|function|setDuplicatesEnabled
name|void
name|QComboBox
operator|::
name|setDuplicatesEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|duplicatesEnabled
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!  \fn int QComboBox::findText(const QString&text, Qt::MatchFlags flags = Qt::MatchExactly|Qt::MatchCaseSensitive) const    Returns the index of the item containing the given \a text; otherwise   returns -1.    The \a flags specify how the items in the combobox are searched. */
end_comment
begin_comment
comment|/*!   Returns the index of the item containing the given \a data for the   given \a role; otherwise returns -1.    The \a flags specify how the items in the combobox are searched. */
end_comment
begin_function
DECL|function|findData
name|int
name|QComboBox
operator|::
name|findData
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|data
parameter_list|,
name|int
name|role
parameter_list|,
name|Qt
operator|::
name|MatchFlags
name|flags
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
name|QModelIndexList
name|result
decl_stmt|;
name|QModelIndex
name|start
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
decl_stmt|;
name|result
operator|=
name|d
operator|->
name|model
operator|->
name|match
argument_list|(
name|start
argument_list|,
name|role
argument_list|,
name|data
argument_list|,
literal|1
argument_list|,
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|result
operator|.
name|first
argument_list|()
operator|.
name|row
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QComboBox::insertPolicy     \brief the policy used to determine where user-inserted items should     appear in the combobox      The default value is \l InsertAtBottom, indicating that new items will appear     at the bottom of the list of items.      \sa InsertPolicy */
end_comment
begin_function
DECL|function|insertPolicy
name|QComboBox
operator|::
name|InsertPolicy
name|QComboBox
operator|::
name|insertPolicy
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|insertPolicy
return|;
block|}
end_function
begin_function
DECL|function|setInsertPolicy
name|void
name|QComboBox
operator|::
name|setInsertPolicy
parameter_list|(
name|InsertPolicy
name|policy
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|insertPolicy
operator|=
name|policy
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QComboBox::sizeAdjustPolicy     \brief the policy describing how the size of the combobox changes     when the content changes      The default value is \l AdjustToContentsOnFirstShow.      \sa SizeAdjustPolicy */
end_comment
begin_function
DECL|function|sizeAdjustPolicy
name|QComboBox
operator|::
name|SizeAdjustPolicy
name|QComboBox
operator|::
name|sizeAdjustPolicy
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sizeAdjustPolicy
return|;
block|}
end_function
begin_function
DECL|function|setSizeAdjustPolicy
name|void
name|QComboBox
operator|::
name|setSizeAdjustPolicy
parameter_list|(
name|QComboBox
operator|::
name|SizeAdjustPolicy
name|policy
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|policy
operator|==
name|d
operator|->
name|sizeAdjustPolicy
condition|)
return|return;
name|d
operator|->
name|sizeAdjustPolicy
operator|=
name|policy
expr_stmt|;
name|d
operator|->
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|adjustComboBoxSize
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QComboBox::minimumContentsLength     \brief the minimum number of characters that should fit into the combobox.      The default value is 0.      If this property is set to a positive value, the     minimumSizeHint() and sizeHint() take it into account.      \sa sizeAdjustPolicy */
end_comment
begin_function
DECL|function|minimumContentsLength
name|int
name|QComboBox
operator|::
name|minimumContentsLength
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|minimumContentsLength
return|;
block|}
end_function
begin_function
DECL|function|setMinimumContentsLength
name|void
name|QComboBox
operator|::
name|setMinimumContentsLength
parameter_list|(
name|int
name|characters
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|characters
operator|==
name|d
operator|->
name|minimumContentsLength
operator|||
name|characters
operator|<
literal|0
condition|)
return|return;
name|d
operator|->
name|minimumContentsLength
operator|=
name|characters
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sizeAdjustPolicy
operator|==
name|AdjustToContents
operator|||
name|d
operator|->
name|sizeAdjustPolicy
operator|==
name|AdjustToMinimumContentsLength
operator|||
name|d
operator|->
name|sizeAdjustPolicy
operator|==
name|AdjustToMinimumContentsLengthWithIcon
condition|)
block|{
name|d
operator|->
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|adjustComboBoxSize
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QComboBox::iconSize     \brief the size of the icons shown in the combobox.      Unless explicitly set this returns the default value of the     current style.  This size is the maximum size that icons can have;     icons of smaller size are not scaled up. */
end_comment
begin_function
DECL|function|iconSize
name|QSize
name|QComboBox
operator|::
name|iconSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|iconSize
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|iconSize
return|;
name|int
name|iconWidth
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SmallIconSize
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
return|return
name|QSize
argument_list|(
name|iconWidth
argument_list|,
name|iconWidth
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setIconSize
name|void
name|QComboBox
operator|::
name|setIconSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|==
name|d
operator|->
name|iconSize
condition|)
return|return;
name|view
argument_list|()
operator|->
name|setIconSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|d
operator|->
name|iconSize
operator|=
name|size
expr_stmt|;
name|d
operator|->
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QComboBox::editable     \brief whether the combo box can be edited by the user      By default, this property is \c false. The effect of editing depends     on the insert policy.      \sa InsertPolicy */
end_comment
begin_function
DECL|function|isEditable
name|bool
name|QComboBox
operator|::
name|isEditable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|lineEdit
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
comment|/*! \internal     update the default delegate     depending on the style's SH_ComboBox_Popup hint, we use a different default delegate.      but we do not change the delegate is the combobox use a custom delegate,     unless \a force is set to true.  */
end_comment
begin_function
DECL|function|updateDelegate
name|void
name|QComboBoxPrivate
operator|::
name|updateDelegate
parameter_list|(
name|bool
name|force
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
condition|)
block|{
if|if
condition|(
name|force
operator|||
name|qobject_cast
argument_list|<
name|QComboBoxDelegate
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|itemDelegate
argument_list|()
argument_list|)
condition|)
name|q
operator|->
name|setItemDelegate
argument_list|(
operator|new
name|QComboMenuDelegate
argument_list|(
name|q
operator|->
name|view
argument_list|()
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|force
operator|||
name|qobject_cast
argument_list|<
name|QComboMenuDelegate
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|itemDelegate
argument_list|()
argument_list|)
condition|)
name|q
operator|->
name|setItemDelegate
argument_list|(
operator|new
name|QComboBoxDelegate
argument_list|(
name|q
operator|->
name|view
argument_list|()
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|itemIcon
name|QIcon
name|QComboBoxPrivate
operator|::
name|itemIcon
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QVariant
name|decoration
init|=
name|model
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|decoration
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Pixmap
condition|)
return|return
name|QIcon
argument_list|(
name|qvariant_cast
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|decoration
argument_list|)
argument_list|)
return|;
else|else
return|return
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|decoration
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setEditable
name|void
name|QComboBox
operator|::
name|setEditable
parameter_list|(
name|bool
name|editable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEditable
argument_list|()
operator|==
name|editable
condition|)
return|return;
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
if|if
condition|(
name|editable
condition|)
block|{
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
condition|)
block|{
name|d
operator|->
name|viewContainer
argument_list|()
operator|->
name|updateScrollers
argument_list|()
expr_stmt|;
name|view
argument_list|()
operator|->
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAsNeeded
argument_list|)
expr_stmt|;
block|}
name|QLineEdit
modifier|*
name|le
init|=
operator|new
name|QLineEdit
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setLineEdit
argument_list|(
name|le
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
condition|)
block|{
name|d
operator|->
name|viewContainer
argument_list|()
operator|->
name|updateScrollers
argument_list|()
expr_stmt|;
name|view
argument_list|()
operator|->
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
block|}
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|lineEdit
operator|->
name|hide
argument_list|()
expr_stmt|;
name|d
operator|->
name|lineEdit
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|d
operator|->
name|lineEdit
operator|=
literal|0
expr_stmt|;
block|}
name|d
operator|->
name|updateDelegate
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateFocusPolicy
argument_list|()
expr_stmt|;
name|d
operator|->
name|viewContainer
argument_list|()
operator|->
name|updateTopBottomMargin
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
condition|)
name|adjustSize
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the line \a edit to use instead of the current line edit widget.      The combo box takes ownership of the line edit. */
end_comment
begin_function
DECL|function|setLineEdit
name|void
name|QComboBox
operator|::
name|setLineEdit
parameter_list|(
name|QLineEdit
modifier|*
name|edit
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|edit
condition|)
block|{
name|qWarning
argument_list|(
literal|"QComboBox::setLineEdit: cannot set a 0 line edit"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|edit
operator|==
name|d
operator|->
name|lineEdit
condition|)
return|return;
name|edit
operator|->
name|setText
argument_list|(
name|currentText
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|lineEdit
expr_stmt|;
name|d
operator|->
name|lineEdit
operator|=
name|edit
expr_stmt|;
name|qt_widget_private
argument_list|(
name|d
operator|->
name|lineEdit
argument_list|)
operator|->
name|inheritsInputMethodHints
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
operator|->
name|parent
argument_list|()
operator|!=
name|this
condition|)
name|d
operator|->
name|lineEdit
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|lineEdit
argument_list|,
name|SIGNAL
argument_list|(
name|returnPressed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_returnPressed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|lineEdit
argument_list|,
name|SIGNAL
argument_list|(
name|editingFinished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_editingFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|lineEdit
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|editTextChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|lineEdit
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|currentTextChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|lineEdit
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateMicroFocus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|lineEdit
argument_list|,
name|SIGNAL
argument_list|(
name|selectionChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateMicroFocus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|lineEdit
operator|->
name|setFrame
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|lineEdit
operator|->
name|setContextMenuPolicy
argument_list|(
name|Qt
operator|::
name|NoContextMenu
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateFocusPolicy
argument_list|()
expr_stmt|;
name|d
operator|->
name|lineEdit
operator|->
name|setFocusProxy
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|lineEdit
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_MacShowFocusRect
argument_list|,
literal|false
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
name|setAutoCompletion
argument_list|(
name|d
operator|->
name|autoCompletion
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
comment|// Editable combo boxes will have a completer that is set to UnfilteredPopupCompletion.
comment|// This means that when the user enters edit mode they are immediately presented with a
comment|// list of possible completions.
name|setAutoCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|completer
condition|)
block|{
name|d
operator|->
name|completer
operator|->
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|UnfilteredPopupCompletion
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|completer
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_completerActivated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
endif|#
directive|endif
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateLayoutDirection
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateLineEditGeometry
argument_list|()
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|d
operator|->
name|lineEdit
operator|->
name|show
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the line edit used to edit items in the combobox, or 0 if there     is no line edit.      Only editable combo boxes have a line edit. */
end_comment
begin_function
DECL|function|lineEdit
name|QLineEdit
modifier|*
name|QComboBox
operator|::
name|lineEdit
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|lineEdit
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VALIDATOR
end_ifndef
begin_comment
comment|/*!     \fn void QComboBox::setValidator(const QValidator *validator)      Sets the \a validator to use instead of the current validator. */
end_comment
begin_function
DECL|function|setValidator
name|void
name|QComboBox
operator|::
name|setValidator
parameter_list|(
specifier|const
name|QValidator
modifier|*
name|v
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
name|d
operator|->
name|lineEdit
operator|->
name|setValidator
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the validator that is used to constrain text input for the     combobox.      \sa editable */
end_comment
begin_function
DECL|function|validator
specifier|const
name|QValidator
modifier|*
name|QComboBox
operator|::
name|validator
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|lineEdit
condition|?
name|d
operator|->
name|lineEdit
operator|->
name|validator
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_VALIDATOR
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
end_ifndef
begin_comment
comment|/*!     \fn void QComboBox::setCompleter(QCompleter *completer)     \since 4.2      Sets the \a completer to use instead of the current completer.     If \a completer is 0, auto completion is disabled.      By default, for an editable combo box, a QCompleter that     performs case insensitive inline completion is automatically created. */
end_comment
begin_function
DECL|function|setCompleter
name|void
name|QComboBox
operator|::
name|setCompleter
parameter_list|(
name|QCompleter
modifier|*
name|c
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|lineEdit
condition|)
return|return;
name|d
operator|->
name|lineEdit
operator|->
name|setCompleter
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
condition|)
block|{
name|connect
argument_list|(
name|c
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_completerActivated
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|->
name|setWidget
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns the completer that is used to auto complete text input for the     combobox.      \sa editable */
end_comment
begin_function
DECL|function|completer
name|QCompleter
modifier|*
name|QComboBox
operator|::
name|completer
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|lineEdit
condition|?
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
else|:
literal|0
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_COMPLETER
end_comment
begin_comment
comment|/*!     Returns the item delegate used by the popup list view.      \sa setItemDelegate() */
end_comment
begin_function
DECL|function|itemDelegate
name|QAbstractItemDelegate
modifier|*
name|QComboBox
operator|::
name|itemDelegate
parameter_list|()
specifier|const
block|{
return|return
name|view
argument_list|()
operator|->
name|itemDelegate
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the item \a delegate for the popup list view.     The combobox takes ownership of the delegate.      \warning You should not share the same instance of a delegate between comboboxes,     widget mappers or views. Doing so can cause incorrect or unintuitive editing behavior     since each view connected to a given delegate may receive the     \l{QAbstractItemDelegate::}{closeEditor()} signal, and attempt to access, modify or     close an editor that has already been closed.      \sa itemDelegate() */
end_comment
begin_function
DECL|function|setItemDelegate
name|void
name|QComboBox
operator|::
name|setItemDelegate
parameter_list|(
name|QAbstractItemDelegate
modifier|*
name|delegate
parameter_list|)
block|{
if|if
condition|(
operator|!
name|delegate
condition|)
block|{
name|qWarning
argument_list|(
literal|"QComboBox::setItemDelegate: cannot set a 0 delegate"
argument_list|)
expr_stmt|;
return|return;
block|}
operator|delete
name|view
argument_list|()
operator|->
name|itemDelegate
argument_list|()
expr_stmt|;
name|view
argument_list|()
operator|->
name|setItemDelegate
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the model used by the combobox. */
end_comment
begin_function
DECL|function|model
name|QAbstractItemModel
modifier|*
name|QComboBox
operator|::
name|model
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
operator|==
name|QAbstractItemModelPrivate
operator|::
name|staticEmptyModel
argument_list|()
condition|)
block|{
name|QComboBox
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|that
operator|->
name|setModel
argument_list|(
operator|new
name|QStandardItemModel
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|that
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|d
operator|->
name|model
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the model to be \a model. \a model must not be 0.     If you want to clear the contents of a model, call clear().      \sa clear() */
end_comment
begin_function
DECL|function|setModel
name|void
name|QComboBox
operator|::
name|setModel
parameter_list|(
name|QAbstractItemModel
modifier|*
name|model
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|model
condition|)
block|{
name|qWarning
argument_list|(
literal|"QComboBox::setModel: cannot set a 0 model"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|model
operator|==
name|d
operator|->
name|model
condition|)
return|return;
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
if|if
condition|(
name|d
operator|->
name|lineEdit
operator|&&
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
operator|&&
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
operator|==
name|d
operator|->
name|completer
condition|)
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
operator|->
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|model
condition|)
block|{
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_updateIndexBeforeChange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_updateIndexBeforeChange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_modelDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_updateIndexBeforeChange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_modelReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
operator|->
name|QObject
operator|::
name|parent
argument_list|()
operator|==
name|this
condition|)
operator|delete
name|d
operator|->
name|model
expr_stmt|;
block|}
name|d
operator|->
name|model
operator|=
name|model
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_updateIndexBeforeChange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_updateIndexBeforeChange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_modelDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_updateIndexBeforeChange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_modelReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|container
condition|)
block|{
name|d
operator|->
name|container
operator|->
name|itemView
argument_list|()
operator|->
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|container
operator|->
name|itemView
argument_list|()
operator|->
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_emitHighlighted
argument_list|(
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|UniqueConnection
argument_list|)
expr_stmt|;
block|}
name|setRootModelIndex
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|currentReset
init|=
literal|false
decl_stmt|;
specifier|const
name|int
name|rowCount
init|=
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|rowCount
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|pos
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
operator|.
name|flags
argument_list|()
operator|&
name|Qt
operator|::
name|ItemIsEnabled
condition|)
block|{
name|setCurrentIndex
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|currentReset
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|currentReset
condition|)
name|setCurrentIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|d
operator|->
name|modelChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the root model item index for the items in the combobox.      \sa setRootModelIndex() */
end_comment
begin_function
DECL|function|rootModelIndex
name|QModelIndex
name|QComboBox
operator|::
name|rootModelIndex
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|QModelIndex
argument_list|(
name|d
operator|->
name|root
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the root model item \a index for the items in the combobox.      \sa rootModelIndex() */
end_comment
begin_function
DECL|function|setRootModelIndex
name|void
name|QComboBox
operator|::
name|setRootModelIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|root
operator|==
name|index
condition|)
return|return;
name|d
operator|->
name|root
operator|=
name|QPersistentModelIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|view
argument_list|()
operator|->
name|setRootIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QComboBox::currentIndex     \brief the index of the current item in the combobox.      The current index can change when inserting or removing items.      By default, for an empty combo box or a combo box in which no current     item is set, this property has a value of -1. */
end_comment
begin_function
DECL|function|currentIndex
name|int
name|QComboBox
operator|::
name|currentIndex
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|currentIndex
operator|.
name|row
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setCurrentIndex
name|void
name|QComboBox
operator|::
name|setCurrentIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|QModelIndex
name|mi
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|index
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
decl_stmt|;
name|d
operator|->
name|setCurrentIndex
argument_list|(
name|mi
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCurrentText
name|void
name|QComboBox
operator|::
name|setCurrentText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
if|if
condition|(
name|isEditable
argument_list|()
condition|)
block|{
name|setEditText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|int
name|i
init|=
name|findText
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
operator|-
literal|1
condition|)
name|setCurrentIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setCurrentIndex
name|void
name|QComboBoxPrivate
operator|::
name|setCurrentIndex
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|mi
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|QModelIndex
name|normalized
init|=
name|mi
operator|.
name|sibling
argument_list|(
name|mi
operator|.
name|row
argument_list|()
argument_list|,
name|modelColumn
argument_list|)
decl_stmt|;
comment|// no-op if mi.column() == modelColumn
if|if
condition|(
operator|!
name|normalized
operator|.
name|isValid
argument_list|()
condition|)
name|normalized
operator|=
name|mi
expr_stmt|;
comment|// Fallback to passed index.
name|bool
name|indexChanged
init|=
operator|(
name|normalized
operator|!=
name|currentIndex
operator|)
decl_stmt|;
if|if
condition|(
name|indexChanged
condition|)
name|currentIndex
operator|=
name|QPersistentModelIndex
argument_list|(
name|normalized
argument_list|)
expr_stmt|;
if|if
condition|(
name|lineEdit
condition|)
block|{
specifier|const
name|QString
name|newText
init|=
name|itemText
argument_list|(
name|normalized
argument_list|)
decl_stmt|;
if|if
condition|(
name|lineEdit
operator|->
name|text
argument_list|()
operator|!=
name|newText
condition|)
block|{
name|lineEdit
operator|->
name|setText
argument_list|(
name|newText
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
if|if
condition|(
name|lineEdit
operator|->
name|completer
argument_list|()
condition|)
name|lineEdit
operator|->
name|completer
argument_list|()
operator|->
name|setCompletionPrefix
argument_list|(
name|newText
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|updateLineEditGeometry
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|indexChanged
condition|)
block|{
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
name|_q_emitCurrentIndexChanged
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QComboBox::currentText     \brief the current text      If the combo box is editable, the current text is the value displayed     by the line edit. Otherwise, it is the value of the current item or     an empty string if the combo box is empty or no current item is set.      The setter setCurrentText() simply calls setEditText() if the combo box is editable.     Otherwise, if there is a matching text in the list, currentIndex is set to the     corresponding index.      \sa editable, setEditText() */
end_comment
begin_function
DECL|function|currentText
name|QString
name|QComboBox
operator|::
name|currentText
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
return|return
name|d
operator|->
name|lineEdit
operator|->
name|text
argument_list|()
return|;
elseif|else
if|if
condition|(
name|d
operator|->
name|currentIndex
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|itemText
argument_list|(
name|d
operator|->
name|currentIndex
argument_list|)
return|;
else|else
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QComboBox::currentData     \brief the data for the current item     \since 5.2      By default, for an empty combo box or a combo box in which no current     item is set, this property contains an invalid QVariant. */
end_comment
begin_function
DECL|function|currentData
name|QVariant
name|QComboBox
operator|::
name|currentData
parameter_list|(
name|int
name|role
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|currentIndex
operator|.
name|data
argument_list|(
name|role
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the text for the given \a index in the combobox. */
end_comment
begin_function
DECL|function|itemText
name|QString
name|QComboBox
operator|::
name|itemText
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
name|QModelIndex
name|mi
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|index
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|itemText
argument_list|(
name|mi
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the icon for the given \a index in the combobox. */
end_comment
begin_function
DECL|function|itemIcon
name|QIcon
name|QComboBox
operator|::
name|itemIcon
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
name|QModelIndex
name|mi
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|index
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|itemIcon
argument_list|(
name|mi
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!    Returns the data for the given \a role in the given \a index in the    combobox, or QVariant::Invalid if there is no data for this role. */
end_comment
begin_function
DECL|function|itemData
name|QVariant
name|QComboBox
operator|::
name|itemData
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
name|QModelIndex
name|mi
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|index
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|model
operator|->
name|data
argument_list|(
name|mi
argument_list|,
name|role
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \fn void QComboBox::insertItem(int index, const QString&text, const QVariant&userData)      Inserts the \a text and \a userData (stored in the Qt::UserRole)     into the combobox at the given \a index.      If the index is equal to or higher than the total number of items,     the new item is appended to the list of existing items. If the     index is zero or negative, the new item is prepended to the list     of existing items.    \sa insertItems() */
end_comment
begin_comment
comment|/*!      Inserts the \a icon, \a text and \a userData (stored in the     Qt::UserRole) into the combobox at the given \a index.      If the index is equal to or higher than the total number of items,     the new item is appended to the list of existing items. If the     index is zero or negative, the new item is prepended to the list     of existing items.      \sa insertItems() */
end_comment
begin_function
DECL|function|insertItem
name|void
name|QComboBox
operator|::
name|insertItem
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|userData
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|int
name|itemCount
init|=
name|count
argument_list|()
decl_stmt|;
name|index
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|index
argument_list|,
name|itemCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
name|d
operator|->
name|maxCount
condition|)
return|return;
comment|// For the common case where we are using the built in QStandardItemModel
comment|// construct a QStandardItem, reducing the number of expensive signals from the model
if|if
condition|(
name|QStandardItemModel
modifier|*
name|m
init|=
name|qobject_cast
argument_list|<
name|QStandardItemModel
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|model
argument_list|)
condition|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
operator|new
name|QStandardItem
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|item
operator|->
name|setData
argument_list|(
name|icon
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
expr_stmt|;
if|if
condition|(
name|userData
operator|.
name|isValid
argument_list|()
condition|)
name|item
operator|->
name|setData
argument_list|(
name|userData
argument_list|,
name|Qt
operator|::
name|UserRole
argument_list|)
expr_stmt|;
name|m
operator|->
name|insertRow
argument_list|(
name|index
argument_list|,
name|item
argument_list|)
expr_stmt|;
operator|++
name|itemCount
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|inserting
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
operator|->
name|insertRows
argument_list|(
name|index
argument_list|,
literal|1
argument_list|,
name|d
operator|->
name|root
argument_list|)
condition|)
block|{
name|QModelIndex
name|item
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|index
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|icon
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|userData
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|model
operator|->
name|setData
argument_list|(
name|item
argument_list|,
name|text
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|values
decl_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|isNull
argument_list|()
condition|)
name|values
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|EditRole
argument_list|,
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|icon
operator|.
name|isNull
argument_list|()
condition|)
name|values
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|DecorationRole
argument_list|,
name|icon
argument_list|)
expr_stmt|;
if|if
condition|(
name|userData
operator|.
name|isValid
argument_list|()
condition|)
name|values
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|UserRole
argument_list|,
name|userData
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|model
operator|->
name|setItemData
argument_list|(
name|item
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|inserting
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|_q_rowsInserted
argument_list|(
name|d
operator|->
name|root
argument_list|,
name|index
argument_list|,
name|index
argument_list|)
expr_stmt|;
operator|++
name|itemCount
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|inserting
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|itemCount
operator|>
name|d
operator|->
name|maxCount
condition|)
name|d
operator|->
name|model
operator|->
name|removeRows
argument_list|(
name|itemCount
operator|-
literal|1
argument_list|,
name|itemCount
operator|-
name|d
operator|->
name|maxCount
argument_list|,
name|d
operator|->
name|root
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Inserts the strings from the \a list into the combobox as separate items,     starting at the \a index specified.      If the index is equal to or higher than the total number of items, the new items     are appended to the list of existing items. If the index is zero or negative, the     new items are prepended to the list of existing items.      \sa insertItem()     */
end_comment
begin_function
DECL|function|insertItems
name|void
name|QComboBox
operator|::
name|insertItems
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|list
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|index
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|index
argument_list|,
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|insertCount
init|=
name|qMin
argument_list|(
name|d
operator|->
name|maxCount
operator|-
name|index
argument_list|,
name|list
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|insertCount
operator|<=
literal|0
condition|)
return|return;
comment|// For the common case where we are using the built in QStandardItemModel
comment|// construct a QStandardItem, reducing the number of expensive signals from the model
if|if
condition|(
name|QStandardItemModel
modifier|*
name|m
init|=
name|qobject_cast
argument_list|<
name|QStandardItemModel
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|model
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|items
decl_stmt|;
name|QStandardItem
modifier|*
name|hiddenRoot
init|=
name|m
operator|->
name|invisibleRootItem
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|insertCount
condition|;
operator|++
name|i
control|)
name|items
operator|.
name|append
argument_list|(
operator|new
name|QStandardItem
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hiddenRoot
operator|->
name|insertRows
argument_list|(
name|index
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|inserting
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|model
operator|->
name|insertRows
argument_list|(
name|index
argument_list|,
name|insertCount
argument_list|,
name|d
operator|->
name|root
argument_list|)
condition|)
block|{
name|QModelIndex
name|item
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|insertCount
condition|;
operator|++
name|i
control|)
block|{
name|item
operator|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|i
operator|+
name|index
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
expr_stmt|;
name|d
operator|->
name|model
operator|->
name|setData
argument_list|(
name|item
argument_list|,
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|inserting
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|_q_rowsInserted
argument_list|(
name|d
operator|->
name|root
argument_list|,
name|index
argument_list|,
name|index
operator|+
name|insertCount
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|inserting
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|int
name|mc
init|=
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|mc
operator|>
name|d
operator|->
name|maxCount
condition|)
name|d
operator|->
name|model
operator|->
name|removeRows
argument_list|(
name|d
operator|->
name|maxCount
argument_list|,
name|mc
operator|-
name|d
operator|->
name|maxCount
argument_list|,
name|d
operator|->
name|root
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Inserts a separator item into the combobox at the given \a index.      If the index is equal to or higher than the total number of items, the new item     is appended to the list of existing items. If the index is zero or negative, the     new item is prepended to the list of existing items.      \sa insertItem() */
end_comment
begin_function
DECL|function|insertSeparator
name|void
name|QComboBox
operator|::
name|insertSeparator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|int
name|itemCount
init|=
name|count
argument_list|()
decl_stmt|;
name|index
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|index
argument_list|,
name|itemCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
name|d
operator|->
name|maxCount
condition|)
return|return;
name|insertItem
argument_list|(
name|index
argument_list|,
name|QIcon
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QComboBoxDelegate
operator|::
name|setSeparator
argument_list|(
name|d
operator|->
name|model
argument_list|,
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|index
argument_list|,
literal|0
argument_list|,
name|d
operator|->
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes the item at the given \a index from the combobox.     This will update the current index if the index is removed.      This function does nothing if \a index is out of range. */
end_comment
begin_function
DECL|function|removeItem
name|void
name|QComboBox
operator|::
name|removeItem
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|count
argument_list|()
condition|)
return|return;
name|d
operator|->
name|model
operator|->
name|removeRows
argument_list|(
name|index
argument_list|,
literal|1
argument_list|,
name|d
operator|->
name|root
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the \a text for the item on the given \a index in the combobox. */
end_comment
begin_function
DECL|function|setItemText
name|void
name|QComboBox
operator|::
name|setItemText
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
name|QModelIndex
name|item
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|index
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|model
operator|->
name|setData
argument_list|(
name|item
argument_list|,
name|text
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Sets the \a icon for the item on the given \a index in the combobox. */
end_comment
begin_function
DECL|function|setItemIcon
name|void
name|QComboBox
operator|::
name|setItemIcon
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
name|QModelIndex
name|item
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|index
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|model
operator|->
name|setData
argument_list|(
name|item
argument_list|,
name|icon
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Sets the data \a role for the item on the given \a index in the combobox     to the specified \a value. */
end_comment
begin_function
DECL|function|setItemData
name|void
name|QComboBox
operator|::
name|setItemData
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
name|QModelIndex
name|item
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|index
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|model
operator|->
name|setData
argument_list|(
name|item
argument_list|,
name|value
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the list view used for the combobox popup. */
end_comment
begin_function
DECL|function|view
name|QAbstractItemView
modifier|*
name|QComboBox
operator|::
name|view
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
cast|const_cast
argument_list|<
name|QComboBoxPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|viewContainer
argument_list|()
operator|->
name|itemView
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the view to be used in the combobox popup to the given \a   itemView. The combobox takes ownership of the view.    Note: If you want to use the convenience views (like QListWidget,   QTableWidget or QTreeWidget), make sure to call setModel() on the   combobox with the convenience widgets model before calling this   function. */
end_comment
begin_function
DECL|function|setView
name|void
name|QComboBox
operator|::
name|setView
parameter_list|(
name|QAbstractItemView
modifier|*
name|itemView
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|itemView
condition|)
block|{
name|qWarning
argument_list|(
literal|"QComboBox::setView: cannot set a 0 view"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|itemView
operator|->
name|model
argument_list|()
operator|!=
name|d
operator|->
name|model
condition|)
name|itemView
operator|->
name|setModel
argument_list|(
name|d
operator|->
name|model
argument_list|)
expr_stmt|;
name|d
operator|->
name|viewContainer
argument_list|()
operator|->
name|setItemView
argument_list|(
name|itemView
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|minimumSizeHint
name|QSize
name|QComboBox
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|recomputeSizeHint
argument_list|(
name|d
operator|->
name|minimumSizeHint
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp      This implementation caches the size hint to avoid resizing when     the contents change dynamically. To invalidate the cached value     change the \l sizeAdjustPolicy. */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QComboBox
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|recomputeSizeHint
argument_list|(
name|d
operator|->
name|sizeHint
argument_list|)
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_MAC
end_ifdef
begin_namespace
namespace|namespace
block|{
DECL|struct|IndexSetter
struct|struct
name|IndexSetter
block|{
DECL|member|index
name|int
name|index
decl_stmt|;
DECL|member|cb
name|QComboBox
modifier|*
name|cb
decl_stmt|;
DECL|function|operator ()
name|void
name|operator
name|()
parameter_list|(
name|void
parameter_list|)
block|{
name|cb
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
block|}
end_namespace
begin_function
DECL|function|cleanupNativePopup
name|void
name|QComboBoxPrivate
operator|::
name|cleanupNativePopup
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_platformMenu
condition|)
return|return;
name|int
name|count
init|=
name|int
argument_list|(
name|m_platformMenu
operator|->
name|tag
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|m_platformMenu
operator|->
name|menuItemAt
argument_list|(
name|i
argument_list|)
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
operator|delete
name|m_platformMenu
expr_stmt|;
name|m_platformMenu
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!  * \internal  *  * Tries to show a native popup. Returns true if it could, false otherwise.  *  */
end_comment
begin_function
DECL|function|showNativePopup
name|bool
name|QComboBoxPrivate
operator|::
name|showNativePopup
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|cleanupNativePopup
argument_list|()
expr_stmt|;
name|QPlatformTheme
modifier|*
name|theme
init|=
name|QGuiApplicationPrivate
operator|::
name|instance
argument_list|()
operator|->
name|platformTheme
argument_list|()
decl_stmt|;
name|m_platformMenu
operator|=
name|theme
operator|->
name|createPlatformMenu
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_platformMenu
condition|)
return|return
literal|false
return|;
name|int
name|itemsCount
init|=
name|q
operator|->
name|count
argument_list|()
decl_stmt|;
name|m_platformMenu
operator|->
name|setTag
argument_list|(
name|quintptr
argument_list|(
name|itemsCount
argument_list|)
argument_list|)
expr_stmt|;
name|QPlatformMenuItem
modifier|*
name|currentItem
init|=
literal|0
decl_stmt|;
name|int
name|currentIndex
init|=
name|q
operator|->
name|currentIndex
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itemsCount
condition|;
operator|++
name|i
control|)
block|{
name|QPlatformMenuItem
modifier|*
name|item
init|=
name|theme
operator|->
name|createPlatformMenuItem
argument_list|()
decl_stmt|;
name|QModelIndex
name|rowIndex
init|=
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
name|modelColumn
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|QVariant
name|textVariant
init|=
name|model
operator|->
name|data
argument_list|(
name|rowIndex
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
decl_stmt|;
name|item
operator|->
name|setText
argument_list|(
name|textVariant
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|iconVariant
init|=
name|model
operator|->
name|data
argument_list|(
name|rowIndex
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
decl_stmt|;
if|if
condition|(
name|iconVariant
operator|.
name|canConvert
argument_list|<
name|QIcon
argument_list|>
argument_list|()
condition|)
name|item
operator|->
name|setIcon
argument_list|(
name|iconVariant
operator|.
name|value
argument_list|<
name|QIcon
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|item
operator|->
name|setChecked
argument_list|(
name|i
operator|==
name|currentIndex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|currentItem
operator|||
name|i
operator|==
name|currentIndex
condition|)
name|currentItem
operator|=
name|item
expr_stmt|;
name|IndexSetter
name|setter
init|=
block|{
name|i
block|,
name|q
block|}
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|item
argument_list|,
operator|&
name|QPlatformMenuItem
operator|::
name|activated
argument_list|,
name|setter
argument_list|)
expr_stmt|;
name|m_platformMenu
operator|->
name|insertMenuItem
argument_list|(
name|item
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_platformMenu
operator|->
name|syncMenuItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|QWindow
modifier|*
name|tlw
init|=
name|q
operator|->
name|window
argument_list|()
operator|->
name|windowHandle
argument_list|()
decl_stmt|;
name|m_platformMenu
operator|->
name|setFont
argument_list|(
name|q
operator|->
name|font
argument_list|()
argument_list|)
expr_stmt|;
name|m_platformMenu
operator|->
name|setMinimumWidth
argument_list|(
name|q
operator|->
name|rect
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QPoint
name|offset
init|=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_MacSmallSize
argument_list|)
condition|)
name|offset
operator|=
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
literal|7
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_MacMiniSize
argument_list|)
condition|)
name|offset
operator|=
name|QPoint
argument_list|(
operator|-
literal|2
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|m_platformMenu
operator|->
name|showPopup
argument_list|(
name|tlw
argument_list|,
name|QRect
argument_list|(
name|tlw
operator|->
name|mapFromGlobal
argument_list|(
name|q
operator|->
name|mapToGlobal
argument_list|(
name|offset
argument_list|)
argument_list|)
argument_list|,
name|QSize
argument_list|()
argument_list|)
argument_list|,
name|currentItem
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_OSX
comment|// The Cocoa popup will swallow any mouse release event.
comment|// We need to fake one here to un-press the button.
name|QMouseEvent
name|mouseReleased
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|,
name|q
operator|->
name|pos
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|MouseButtons
argument_list|(
name|Qt
operator|::
name|LeftButton
argument_list|)
argument_list|,
name|Qt
operator|::
name|KeyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|mouseReleased
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_MAC
end_comment
begin_comment
comment|/*!     Displays the list of items in the combobox. If the list is empty     then the no items will be shown.      If you reimplement this function to show a custom pop-up, make     sure you call hidePopup() to reset the internal state.      \sa hidePopup() */
end_comment
begin_function
DECL|function|showPopup
name|void
name|QComboBox
operator|::
name|showPopup
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
argument_list|()
operator|<=
literal|0
condition|)
return|return;
name|QStyle
modifier|*
specifier|const
name|style
init|=
name|this
operator|->
name|style
argument_list|()
decl_stmt|;
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|usePopup
init|=
name|style
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
if|if
condition|(
name|usePopup
operator|&&
operator|(
operator|!
name|d
operator|->
name|container
operator|||
operator|(
name|view
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
operator|==
name|QByteArray
argument_list|(
literal|"QComboBoxListView"
argument_list|)
operator|&&
name|view
argument_list|()
operator|->
name|itemDelegate
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
operator|==
name|QByteArray
argument_list|(
literal|"QComboMenuDelegate"
argument_list|)
operator|)
operator|)
operator|&&
name|style
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_UseNativePopup
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
operator|&&
name|d
operator|->
name|showNativePopup
argument_list|()
condition|)
return|return;
endif|#
directive|endif
comment|// Q_OS_MAC
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
name|d
operator|->
name|completer
condition|)
block|{
comment|// editable combo box is line edit plus completer
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|completer
operator|->
name|complete
argument_list|()
expr_stmt|;
comment|// show popup
return|return;
block|}
endif|#
directive|endif
endif|#
directive|endif
comment|// set current item and select it
name|view
argument_list|()
operator|->
name|selectionModel
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|currentIndex
argument_list|,
name|QItemSelectionModel
operator|::
name|ClearAndSelect
argument_list|)
expr_stmt|;
name|QComboBoxPrivateContainer
modifier|*
name|container
init|=
name|d
operator|->
name|viewContainer
argument_list|()
decl_stmt|;
name|QRect
name|listRect
argument_list|(
name|style
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_ComboBoxListBoxPopup
argument_list|,
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|QRect
name|screen
init|=
name|d
operator|->
name|popupGeometry
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenNumber
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|QPoint
name|below
init|=
name|mapToGlobal
argument_list|(
name|listRect
operator|.
name|bottomLeft
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|belowHeight
init|=
name|screen
operator|.
name|bottom
argument_list|()
operator|-
name|below
operator|.
name|y
argument_list|()
decl_stmt|;
name|QPoint
name|above
init|=
name|mapToGlobal
argument_list|(
name|listRect
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|aboveHeight
init|=
name|above
operator|.
name|y
argument_list|()
operator|-
name|screen
operator|.
name|y
argument_list|()
decl_stmt|;
name|bool
name|boundToScreen
init|=
operator|!
name|window
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
decl_stmt|;
block|{
name|int
name|listHeight
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|QStack
argument_list|<
name|QModelIndex
argument_list|>
name|toCheck
decl_stmt|;
name|toCheck
operator|.
name|push
argument_list|(
name|view
argument_list|()
operator|->
name|rootIndex
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
name|QTreeView
modifier|*
name|treeView
init|=
name|qobject_cast
argument_list|<
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|view
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|treeView
operator|&&
name|treeView
operator|->
name|header
argument_list|()
operator|&&
operator|!
name|treeView
operator|->
name|header
argument_list|()
operator|->
name|isHidden
argument_list|()
condition|)
name|listHeight
operator|+=
name|treeView
operator|->
name|header
argument_list|()
operator|->
name|height
argument_list|()
expr_stmt|;
endif|#
directive|endif
while|while
condition|(
operator|!
name|toCheck
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QModelIndex
name|parent
init|=
name|toCheck
operator|.
name|pop
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|idx
init|=
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
name|listHeight
operator|+=
name|view
argument_list|()
operator|->
name|visualRect
argument_list|(
name|idx
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TREEVIEW
if|if
condition|(
name|d
operator|->
name|model
operator|->
name|hasChildren
argument_list|(
name|idx
argument_list|)
operator|&&
name|treeView
operator|&&
name|treeView
operator|->
name|isExpanded
argument_list|(
name|idx
argument_list|)
condition|)
name|toCheck
operator|.
name|push
argument_list|(
name|idx
argument_list|)
expr_stmt|;
endif|#
directive|endif
operator|++
name|count
expr_stmt|;
if|if
condition|(
operator|!
name|usePopup
operator|&&
name|count
operator|>=
name|d
operator|->
name|maxVisibleItems
condition|)
block|{
name|toCheck
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|count
operator|>
literal|1
condition|)
name|listHeight
operator|+=
operator|(
name|count
operator|-
literal|1
operator|)
operator|*
name|container
operator|->
name|spacing
argument_list|()
expr_stmt|;
name|listRect
operator|.
name|setHeight
argument_list|(
name|listHeight
argument_list|)
expr_stmt|;
block|}
block|{
comment|// add the spacing for the grid on the top and the bottom;
name|int
name|heightMargin
init|=
name|container
operator|->
name|topMargin
argument_list|()
operator|+
name|container
operator|->
name|bottomMargin
argument_list|()
decl_stmt|;
comment|// add the frame of the container
name|int
name|marginTop
decl_stmt|,
name|marginBottom
decl_stmt|;
name|container
operator|->
name|getContentsMargins
argument_list|(
literal|0
argument_list|,
operator|&
name|marginTop
argument_list|,
literal|0
argument_list|,
operator|&
name|marginBottom
argument_list|)
expr_stmt|;
name|heightMargin
operator|+=
name|marginTop
operator|+
name|marginBottom
expr_stmt|;
comment|//add the frame of the view
name|view
argument_list|()
operator|->
name|getContentsMargins
argument_list|(
literal|0
argument_list|,
operator|&
name|marginTop
argument_list|,
literal|0
argument_list|,
operator|&
name|marginBottom
argument_list|)
expr_stmt|;
name|marginTop
operator|+=
cast|static_cast
argument_list|<
name|QAbstractScrollAreaPrivate
operator|*
argument_list|>
argument_list|(
name|QObjectPrivate
operator|::
name|get
argument_list|(
name|view
argument_list|()
argument_list|)
argument_list|)
operator|->
name|top
expr_stmt|;
name|marginBottom
operator|+=
cast|static_cast
argument_list|<
name|QAbstractScrollAreaPrivate
operator|*
argument_list|>
argument_list|(
name|QObjectPrivate
operator|::
name|get
argument_list|(
name|view
argument_list|()
argument_list|)
argument_list|)
operator|->
name|bottom
expr_stmt|;
name|heightMargin
operator|+=
name|marginTop
operator|+
name|marginBottom
expr_stmt|;
name|listRect
operator|.
name|setHeight
argument_list|(
name|listRect
operator|.
name|height
argument_list|()
operator|+
name|heightMargin
argument_list|)
expr_stmt|;
block|}
comment|// Add space for margin at top and bottom if the style wants it.
if|if
condition|(
name|usePopup
condition|)
name|listRect
operator|.
name|setHeight
argument_list|(
name|listRect
operator|.
name|height
argument_list|()
operator|+
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuVMargin
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// Make sure the popup is wide enough to display its contents.
if|if
condition|(
name|usePopup
condition|)
block|{
specifier|const
name|int
name|diff
init|=
name|d
operator|->
name|computeWidthHint
argument_list|()
operator|-
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|>
literal|0
condition|)
name|listRect
operator|.
name|setWidth
argument_list|(
name|listRect
operator|.
name|width
argument_list|()
operator|+
name|diff
argument_list|)
expr_stmt|;
block|}
comment|//we need to activate the layout to make sure the min/maximum size are set when the widget was not yet show
name|container
operator|->
name|layout
argument_list|()
operator|->
name|activate
argument_list|()
expr_stmt|;
comment|//takes account of the minimum/maximum size of the container
name|listRect
operator|.
name|setSize
argument_list|(
name|listRect
operator|.
name|size
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|container
operator|->
name|minimumSize
argument_list|()
argument_list|)
operator|.
name|boundedTo
argument_list|(
name|container
operator|->
name|maximumSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure the widget fits on screen
if|if
condition|(
name|boundToScreen
condition|)
block|{
if|if
condition|(
name|listRect
operator|.
name|width
argument_list|()
operator|>
name|screen
operator|.
name|width
argument_list|()
condition|)
name|listRect
operator|.
name|setWidth
argument_list|(
name|screen
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapToGlobal
argument_list|(
name|listRect
operator|.
name|bottomRight
argument_list|()
argument_list|)
operator|.
name|x
argument_list|()
operator|>
name|screen
operator|.
name|right
argument_list|()
condition|)
block|{
name|below
operator|.
name|setX
argument_list|(
name|screen
operator|.
name|x
argument_list|()
operator|+
name|screen
operator|.
name|width
argument_list|()
operator|-
name|listRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|above
operator|.
name|setX
argument_list|(
name|screen
operator|.
name|x
argument_list|()
operator|+
name|screen
operator|.
name|width
argument_list|()
operator|-
name|listRect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapToGlobal
argument_list|(
name|listRect
operator|.
name|topLeft
argument_list|()
argument_list|)
operator|.
name|x
argument_list|()
operator|<
name|screen
operator|.
name|x
argument_list|()
condition|)
block|{
name|below
operator|.
name|setX
argument_list|(
name|screen
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|above
operator|.
name|setX
argument_list|(
name|screen
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|usePopup
condition|)
block|{
comment|// Position horizontally.
name|listRect
operator|.
name|moveLeft
argument_list|(
name|above
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
comment|// Position vertically so the curently selected item lines up
comment|// with the combo box.
specifier|const
name|QRect
name|currentItemRect
init|=
name|view
argument_list|()
operator|->
name|visualRect
argument_list|(
name|view
argument_list|()
operator|->
name|currentIndex
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|offset
init|=
name|listRect
operator|.
name|top
argument_list|()
operator|-
name|currentItemRect
operator|.
name|top
argument_list|()
decl_stmt|;
name|listRect
operator|.
name|moveTop
argument_list|(
name|above
operator|.
name|y
argument_list|()
operator|+
name|offset
operator|-
name|listRect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
comment|// Clamp the listRect height and vertical position so we don't expand outside the
comment|// available screen geometry.This may override the vertical position, but it is more
comment|// important to show as much as possible of the popup.
specifier|const
name|int
name|height
init|=
operator|!
name|boundToScreen
condition|?
name|listRect
operator|.
name|height
argument_list|()
else|:
name|qMin
argument_list|(
name|listRect
operator|.
name|height
argument_list|()
argument_list|,
name|screen
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|listRect
operator|.
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
if|if
condition|(
name|boundToScreen
condition|)
block|{
if|if
condition|(
name|listRect
operator|.
name|top
argument_list|()
operator|<
name|screen
operator|.
name|top
argument_list|()
condition|)
name|listRect
operator|.
name|moveTop
argument_list|(
name|screen
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|listRect
operator|.
name|bottom
argument_list|()
operator|>
name|screen
operator|.
name|bottom
argument_list|()
condition|)
name|listRect
operator|.
name|moveBottom
argument_list|(
name|screen
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|boundToScreen
operator|||
name|listRect
operator|.
name|height
argument_list|()
operator|<=
name|belowHeight
condition|)
block|{
name|listRect
operator|.
name|moveTopLeft
argument_list|(
name|below
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|listRect
operator|.
name|height
argument_list|()
operator|<=
name|aboveHeight
condition|)
block|{
name|listRect
operator|.
name|moveBottomLeft
argument_list|(
name|above
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|belowHeight
operator|>=
name|aboveHeight
condition|)
block|{
name|listRect
operator|.
name|setHeight
argument_list|(
name|belowHeight
argument_list|)
expr_stmt|;
name|listRect
operator|.
name|moveTopLeft
argument_list|(
name|below
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listRect
operator|.
name|setHeight
argument_list|(
name|aboveHeight
argument_list|)
expr_stmt|;
name|listRect
operator|.
name|moveBottomLeft
argument_list|(
name|above
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qApp
condition|)
block|{
name|QGuiApplication
operator|::
name|inputMethod
argument_list|()
operator|->
name|reset
argument_list|()
expr_stmt|;
block|}
name|QScrollBar
modifier|*
name|sb
init|=
name|view
argument_list|()
operator|->
name|horizontalScrollBar
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|ScrollBarPolicy
name|policy
init|=
name|view
argument_list|()
operator|->
name|horizontalScrollBarPolicy
argument_list|()
decl_stmt|;
name|bool
name|needHorizontalScrollBar
init|=
operator|(
name|policy
operator|==
name|Qt
operator|::
name|ScrollBarAsNeeded
operator|||
name|policy
operator|==
name|Qt
operator|::
name|ScrollBarAlwaysOn
operator|)
operator|&&
name|sb
operator|->
name|minimum
argument_list|()
operator|<
name|sb
operator|->
name|maximum
argument_list|()
decl_stmt|;
if|if
condition|(
name|needHorizontalScrollBar
condition|)
block|{
name|listRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sb
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|container
operator|->
name|setGeometry
argument_list|(
name|listRect
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_MAC
specifier|const
name|bool
name|updatesEnabled
init|=
name|container
operator|->
name|updatesEnabled
argument_list|()
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EFFECTS
argument_list|)
name|bool
name|scrollDown
init|=
operator|(
name|listRect
operator|.
name|topLeft
argument_list|()
operator|==
name|below
operator|)
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|isEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateCombo
argument_list|)
operator|&&
operator|!
name|style
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
operator|&&
operator|!
name|window
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
name|qScrollEffect
argument_list|(
name|container
argument_list|,
name|scrollDown
condition|?
name|QEffects
operator|::
name|DownScroll
else|:
name|QEffects
operator|::
name|UpScroll
argument_list|,
literal|150
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Don't disable updates on OS X. Windows are displayed immediately on this platform,
comment|// which means that the window will be visible before the call to container->show() returns.
comment|// If updates are disabled at this point we'll miss our chance at painting the popup
comment|// menu before it's shown, causing flicker since the window then displays the standard gray
comment|// background.
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|container
operator|->
name|setUpdatesEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|bool
name|startTimer
init|=
operator|!
name|container
operator|->
name|isVisible
argument_list|()
decl_stmt|;
name|container
operator|->
name|raise
argument_list|()
expr_stmt|;
name|container
operator|->
name|show
argument_list|()
expr_stmt|;
name|container
operator|->
name|updateScrollers
argument_list|()
expr_stmt|;
name|view
argument_list|()
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|view
argument_list|()
operator|->
name|scrollTo
argument_list|(
name|view
argument_list|()
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|style
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
condition|?
name|QAbstractItemView
operator|::
name|PositionAtCenter
else|:
name|QAbstractItemView
operator|::
name|EnsureVisible
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|container
operator|->
name|setUpdatesEnabled
argument_list|(
name|updatesEnabled
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|container
operator|->
name|update
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
name|view
argument_list|()
operator|->
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|startTimer
condition|)
block|{
name|container
operator|->
name|popupTimer
operator|.
name|start
argument_list|()
expr_stmt|;
name|container
operator|->
name|maybeIgnoreMouseButtonRelease
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Hides the list of items in the combobox if it is currently visible     and resets the internal state, so that if the custom pop-up was     shown inside the reimplemented showPopup(), then you also need to     reimplement the hidePopup() function to hide your custom pop-up     and call the base class implementation to reset the internal state     whenever your custom pop-up widget is hidden.      \sa showPopup() */
end_comment
begin_function
DECL|function|hidePopup
name|void
name|QComboBox
operator|::
name|hidePopup
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|container
operator|&&
name|d
operator|->
name|container
operator|->
name|isVisible
argument_list|()
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EFFECTS
argument_list|)
name|QSignalBlocker
name|modelBlocker
argument_list|(
name|d
operator|->
name|model
argument_list|)
decl_stmt|;
name|QSignalBlocker
name|viewBlocker
argument_list|(
name|d
operator|->
name|container
operator|->
name|itemView
argument_list|()
argument_list|)
decl_stmt|;
name|QSignalBlocker
name|containerBlocker
argument_list|(
name|d
operator|->
name|container
argument_list|)
decl_stmt|;
comment|// Flash selected/triggered item (if any).
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_FlashTriggeredItem
argument_list|)
condition|)
block|{
name|QItemSelectionModel
modifier|*
name|selectionModel
init|=
name|view
argument_list|()
condition|?
name|view
argument_list|()
operator|->
name|selectionModel
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|selectionModel
operator|&&
name|selectionModel
operator|->
name|hasSelection
argument_list|()
condition|)
block|{
name|QEventLoop
name|eventLoop
decl_stmt|;
specifier|const
name|QItemSelection
name|selection
init|=
name|selectionModel
operator|->
name|selection
argument_list|()
decl_stmt|;
comment|// Deselect item and wait 60 ms.
name|selectionModel
operator|->
name|select
argument_list|(
name|selection
argument_list|,
name|QItemSelectionModel
operator|::
name|Toggle
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|60
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
comment|// Select item and wait 20 ms.
name|selectionModel
operator|->
name|select
argument_list|(
name|selection
argument_list|,
name|QItemSelectionModel
operator|::
name|Toggle
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|20
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Fade out.
name|bool
name|needFade
init|=
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_FadeOutOnHide
argument_list|)
decl_stmt|;
name|bool
name|didFade
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|needFade
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QPlatformNativeInterface
modifier|*
name|platformNativeInterface
init|=
name|qApp
operator|->
name|platformNativeInterface
argument_list|()
decl_stmt|;
name|int
name|at
init|=
name|platformNativeInterface
operator|->
name|metaObject
argument_list|()
operator|->
name|indexOfMethod
argument_list|(
literal|"fadeWindow()"
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|!=
operator|-
literal|1
condition|)
block|{
name|QMetaMethod
name|windowFade
init|=
name|platformNativeInterface
operator|->
name|metaObject
argument_list|()
operator|->
name|method
argument_list|(
name|at
argument_list|)
decl_stmt|;
name|windowFade
operator|.
name|invoke
argument_list|(
name|platformNativeInterface
argument_list|,
name|Q_ARG
argument_list|(
name|QWindow
operator|*
argument_list|,
name|d
operator|->
name|container
operator|->
name|windowHandle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|didFade
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
comment|// Q_OS_MAC
comment|// Other platform implementations welcome :-)
block|}
name|containerBlocker
operator|.
name|unblock
argument_list|()
expr_stmt|;
name|viewBlocker
operator|.
name|unblock
argument_list|()
expr_stmt|;
name|modelBlocker
operator|.
name|unblock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|didFade
condition|)
endif|#
directive|endif
comment|// QT_NO_EFFECTS
comment|// Fade should implicitly hide as well ;-)
name|d
operator|->
name|container
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
name|isEditable
argument_list|()
operator|&&
name|hasFocus
argument_list|()
condition|)
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|_q_resetButton
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Clears the combobox, removing all items.      Note: If you have set an external model on the combobox this model     will still be cleared when calling this function. */
end_comment
begin_function
DECL|function|clear
name|void
name|QComboBox
operator|::
name|clear
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|model
operator|->
name|removeRows
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|model
operator|->
name|rowCount
argument_list|(
name|d
operator|->
name|root
argument_list|)
argument_list|,
name|d
operator|->
name|root
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessibleValueChangeEvent
name|event
argument_list|(
name|this
argument_list|,
name|QString
argument_list|()
argument_list|)
decl_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Clears the contents of the line edit used for editing in the combobox. */
end_comment
begin_function
DECL|function|clearEditText
name|void
name|QComboBox
operator|::
name|clearEditText
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
name|d
operator|->
name|lineEdit
operator|->
name|clear
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessibleValueChangeEvent
name|event
argument_list|(
name|this
argument_list|,
name|QString
argument_list|()
argument_list|)
decl_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Sets the \a text in the combobox's text edit. */
end_comment
begin_function
DECL|function|setEditText
name|void
name|QComboBox
operator|::
name|setEditText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
name|d
operator|->
name|lineEdit
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessibleValueChangeEvent
name|event
argument_list|(
name|this
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|focusInEvent
name|void
name|QComboBox
operator|::
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
block|{
name|d
operator|->
name|lineEdit
operator|->
name|event
argument_list|(
name|e
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
if|if
condition|(
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
condition|)
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
operator|->
name|setWidget
argument_list|(
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|focusOutEvent
name|void
name|QComboBox
operator|::
name|focusOutEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
name|d
operator|->
name|lineEdit
operator|->
name|event
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QComboBox
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|StyleChange
case|:
name|d
operator|->
name|updateDelegate
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
case|case
name|QEvent
operator|::
name|MacSizeChange
case|:
endif|#
directive|endif
name|d
operator|->
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
comment|// invalidate size hint
name|d
operator|->
name|minimumSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateLayoutDirection
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
name|d
operator|->
name|updateLineEditGeometry
argument_list|()
expr_stmt|;
name|d
operator|->
name|setLayoutItemMargins
argument_list|(
name|QStyle
operator|::
name|SE_ComboBoxLayoutItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MacSizeChange
condition|)
block|{
name|QPlatformTheme
operator|::
name|Font
name|f
init|=
name|QPlatformTheme
operator|::
name|SystemFont
decl_stmt|;
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_MacSmallSize
argument_list|)
condition|)
name|f
operator|=
name|QPlatformTheme
operator|::
name|SmallFont
expr_stmt|;
elseif|else
if|if
condition|(
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_MacMiniSize
argument_list|)
condition|)
name|f
operator|=
name|QPlatformTheme
operator|::
name|MiniFont
expr_stmt|;
if|if
condition|(
specifier|const
name|QFont
modifier|*
name|platformFont
init|=
name|QApplicationPrivate
operator|::
name|platformTheme
argument_list|()
operator|->
name|font
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|QFont
name|f
init|=
name|font
argument_list|()
decl_stmt|;
name|f
operator|.
name|setPointSizeF
argument_list|(
name|platformFont
operator|->
name|pointSizeF
argument_list|()
argument_list|)
expr_stmt|;
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ### need to update scrollers etc. as well here
break|break;
case|case
name|QEvent
operator|::
name|EnabledChange
case|:
if|if
condition|(
operator|!
name|isEnabled
argument_list|()
condition|)
name|hidePopup
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|PaletteChange
case|:
block|{
name|d
operator|->
name|updateViewContainerPaletteAndOpacity
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|FontChange
case|:
name|d
operator|->
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
comment|// invalidate size hint
name|d
operator|->
name|viewContainer
argument_list|()
operator|->
name|setFont
argument_list|(
name|font
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
name|d
operator|->
name|updateLineEditGeometry
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QComboBox
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateLineEditGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QComboBox
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QStylePainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
comment|// draw the combobox frame, focusrect and selected etc.
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
name|opt
argument_list|)
expr_stmt|;
comment|// draw the icon and text
name|painter
operator|.
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_ComboBoxLabel
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|showEvent
name|void
name|QComboBox
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|shownOnce
operator|&&
name|d
operator|->
name|sizeAdjustPolicy
operator|==
name|QComboBox
operator|::
name|AdjustToContentsOnFirstShow
condition|)
block|{
name|d
operator|->
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|shownOnce
operator|=
literal|true
expr_stmt|;
name|QWidget
operator|::
name|showEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|hideEvent
name|void
name|QComboBox
operator|::
name|hideEvent
parameter_list|(
name|QHideEvent
modifier|*
parameter_list|)
block|{
name|hidePopup
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QComboBox
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|LayoutDirectionChange
case|:
case|case
name|QEvent
operator|::
name|ApplicationLayoutDirectionChange
case|:
name|d
operator|->
name|updateLayoutDirection
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateLineEditGeometry
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|HoverEnter
case|:
case|case
name|QEvent
operator|::
name|HoverLeave
case|:
case|case
name|QEvent
operator|::
name|HoverMove
case|:
if|if
condition|(
specifier|const
name|QHoverEvent
modifier|*
name|he
init|=
cast|static_cast
argument_list|<
specifier|const
name|QHoverEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
condition|)
name|d
operator|->
name|updateHoverControl
argument_list|(
name|he
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ShortcutOverride
case|:
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
return|return
name|d
operator|->
name|lineEdit
operator|->
name|event
argument_list|(
name|event
argument_list|)
return|;
break|break;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
case|case
name|QEvent
operator|::
name|EnterEditFocus
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|lineEdit
condition|)
name|setEditFocus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// We never want edit focus if we are not editable
else|else
name|d
operator|->
name|lineEdit
operator|->
name|event
argument_list|(
name|event
argument_list|)
expr_stmt|;
comment|//so cursor starts
break|break;
case|case
name|QEvent
operator|::
name|LeaveEditFocus
case|:
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
name|d
operator|->
name|lineEdit
operator|->
name|event
argument_list|(
name|event
argument_list|)
expr_stmt|;
comment|//so cursor stops
break|break;
endif|#
directive|endif
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|QComboBox
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QGuiApplication
operator|::
name|styleHints
argument_list|()
operator|->
name|setFocusOnTouchRelease
argument_list|()
condition|)
name|d
operator|->
name|showPopupFromMouseEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|showPopupFromMouseEvent
name|void
name|QComboBoxPrivate
operator|::
name|showPopupFromMouseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QStyle
operator|::
name|SubControl
name|sc
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|opt
argument_list|,
name|e
operator|->
name|pos
argument_list|()
argument_list|,
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|&&
operator|!
operator|(
name|sc
operator|==
name|QStyle
operator|::
name|SC_None
operator|&&
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
operator|)
operator|&&
operator|(
name|sc
operator|==
name|QStyle
operator|::
name|SC_ComboBoxArrow
operator|||
operator|!
name|q
operator|->
name|isEditable
argument_list|()
operator|)
operator|&&
operator|!
name|viewContainer
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
block|{
if|if
condition|(
name|sc
operator|==
name|QStyle
operator|::
name|SC_ComboBoxArrow
condition|)
name|updateArrow
argument_list|(
name|QStyle
operator|::
name|State_Sunken
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
comment|//if the container already exists, then d->viewContainer() is safe to call
if|if
condition|(
name|container
condition|)
block|{
endif|#
directive|endif
comment|// We've restricted the next couple of lines, because by not calling
comment|// viewContainer(), we avoid creating the QComboBoxPrivateContainer.
name|viewContainer
argument_list|()
operator|->
name|blockMouseReleaseTimer
operator|.
name|start
argument_list|(
name|QApplication
operator|::
name|doubleClickInterval
argument_list|()
argument_list|)
expr_stmt|;
name|viewContainer
argument_list|()
operator|->
name|initialClickPosition
operator|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
block|}
endif|#
directive|endif
name|q
operator|->
name|showPopup
argument_list|()
expr_stmt|;
comment|// The code below ensures that regular mousepress and pick item still works
comment|// If it was not called the viewContainer would ignore event since it didn't have
comment|// a mousePressEvent first.
if|if
condition|(
name|viewContainer
argument_list|()
condition|)
name|viewContainer
argument_list|()
operator|->
name|maybeIgnoreMouseButtonRelease
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
name|sc
operator|==
name|QStyle
operator|::
name|SC_ComboBoxEditField
operator|&&
name|lineEdit
condition|)
block|{
name|lineEdit
operator|->
name|event
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|//so lineedit can move cursor, etc
return|return;
block|}
endif|#
directive|endif
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QComboBox
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateArrow
argument_list|(
name|QStyle
operator|::
name|State_None
argument_list|)
expr_stmt|;
if|if
condition|(
name|QGuiApplication
operator|::
name|styleHints
argument_list|()
operator|->
name|setFocusOnTouchRelease
argument_list|()
operator|&&
name|hasFocus
argument_list|()
condition|)
name|d
operator|->
name|showPopupFromMouseEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QComboBox
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
if|if
condition|(
name|d
operator|->
name|lineEdit
operator|&&
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
operator|&&
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
operator|->
name|popup
argument_list|()
operator|&&
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
operator|->
name|popup
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
block|{
comment|// provide same autocompletion support as line edit
name|d
operator|->
name|lineEdit
operator|->
name|event
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
enum|enum
name|Move
block|{
name|NoMove
init|=
literal|0
block|,
name|MoveUp
block|,
name|MoveDown
block|,
name|MoveFirst
block|,
name|MoveLast
block|}
enum|;
name|Move
name|move
init|=
name|NoMove
decl_stmt|;
name|int
name|newIndex
init|=
name|currentIndex
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|e
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Up
case|:
if|if
condition|(
name|e
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ControlModifier
condition|)
break|break;
comment|// pass to line edit for auto completion
case|case
name|Qt
operator|::
name|Key_PageUp
case|:
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
else|else
endif|#
directive|endif
name|move
operator|=
name|MoveUp
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_Down
case|:
if|if
condition|(
name|e
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|AltModifier
condition|)
block|{
name|showPopup
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ControlModifier
condition|)
break|break;
comment|// pass to line edit for auto completion
comment|// fall through
case|case
name|Qt
operator|::
name|Key_PageDown
case|:
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
else|else
endif|#
directive|endif
name|move
operator|=
name|MoveDown
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_Home
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|lineEdit
condition|)
name|move
operator|=
name|MoveFirst
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_End
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|lineEdit
condition|)
name|move
operator|=
name|MoveLast
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_F4
case|:
if|if
condition|(
operator|!
name|e
operator|->
name|modifiers
argument_list|()
condition|)
block|{
name|showPopup
argument_list|()
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|Qt
operator|::
name|Key_Space
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|lineEdit
condition|)
block|{
name|showPopup
argument_list|()
expr_stmt|;
return|return;
block|}
case|case
name|Qt
operator|::
name|Key_Enter
case|:
case|case
name|Qt
operator|::
name|Key_Return
case|:
case|case
name|Qt
operator|::
name|Key_Escape
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|lineEdit
condition|)
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
break|break;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
case|case
name|Qt
operator|::
name|Key_Select
case|:
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|(
operator|!
name|hasEditFocus
argument_list|()
operator|||
operator|!
name|d
operator|->
name|lineEdit
operator|)
condition|)
block|{
name|showPopup
argument_list|()
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|Qt
operator|::
name|Key_Left
case|:
case|case
name|Qt
operator|::
name|Key_Right
case|:
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|!
name|hasEditFocus
argument_list|()
condition|)
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_Back
case|:
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|hasEditFocus
argument_list|()
operator|||
operator|!
name|d
operator|->
name|lineEdit
condition|)
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
comment|// let the surounding dialog have it
block|}
break|break;
endif|#
directive|endif
default|default:
if|if
condition|(
operator|!
name|d
operator|->
name|lineEdit
condition|)
block|{
if|if
condition|(
operator|!
name|e
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|keyboardSearchString
argument_list|(
name|e
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|move
operator|!=
name|NoMove
condition|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|move
condition|)
block|{
case|case
name|MoveFirst
case|:
name|newIndex
operator|=
operator|-
literal|1
expr_stmt|;
case|case
name|MoveDown
case|:
name|newIndex
operator|++
expr_stmt|;
while|while
condition|(
operator|(
name|newIndex
operator|<
name|count
argument_list|()
operator|)
operator|&&
operator|!
operator|(
name|d
operator|->
name|model
operator|->
name|flags
argument_list|(
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|newIndex
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsEnabled
operator|)
condition|)
name|newIndex
operator|++
expr_stmt|;
break|break;
case|case
name|MoveLast
case|:
name|newIndex
operator|=
name|count
argument_list|()
expr_stmt|;
case|case
name|MoveUp
case|:
name|newIndex
operator|--
expr_stmt|;
while|while
condition|(
operator|(
name|newIndex
operator|>=
literal|0
operator|)
operator|&&
operator|!
operator|(
name|d
operator|->
name|model
operator|->
name|flags
argument_list|(
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|newIndex
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsEnabled
operator|)
condition|)
name|newIndex
operator|--
expr_stmt|;
break|break;
default|default:
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|newIndex
operator|>=
literal|0
operator|&&
name|newIndex
operator|<
name|count
argument_list|()
operator|&&
name|newIndex
operator|!=
name|currentIndex
argument_list|()
condition|)
block|{
name|setCurrentIndex
argument_list|(
name|newIndex
argument_list|)
expr_stmt|;
name|d
operator|->
name|emitActivated
argument_list|(
name|d
operator|->
name|currentIndex
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
block|{
name|d
operator|->
name|lineEdit
operator|->
name|event
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|keyReleaseEvent
name|void
name|QComboBox
operator|::
name|keyReleaseEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
name|d
operator|->
name|lineEdit
operator|->
name|event
argument_list|(
name|e
argument_list|)
expr_stmt|;
else|else
name|QWidget
operator|::
name|keyReleaseEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_function
DECL|function|wheelEvent
name|void
name|QComboBox
operator|::
name|wheelEvent
parameter_list|(
name|QWheelEvent
modifier|*
name|e
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_DARWIN
name|Q_UNUSED
argument_list|(
name|e
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|viewContainer
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|int
name|newIndex
init|=
name|currentIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|delta
argument_list|()
operator|>
literal|0
condition|)
block|{
name|newIndex
operator|--
expr_stmt|;
while|while
condition|(
operator|(
name|newIndex
operator|>=
literal|0
operator|)
operator|&&
operator|!
operator|(
name|d
operator|->
name|model
operator|->
name|flags
argument_list|(
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|newIndex
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsEnabled
operator|)
condition|)
name|newIndex
operator|--
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|delta
argument_list|()
operator|<
literal|0
condition|)
block|{
name|newIndex
operator|++
expr_stmt|;
while|while
condition|(
operator|(
name|newIndex
operator|<
name|count
argument_list|()
operator|)
operator|&&
operator|!
operator|(
name|d
operator|->
name|model
operator|->
name|flags
argument_list|(
name|d
operator|->
name|model
operator|->
name|index
argument_list|(
name|newIndex
argument_list|,
name|d
operator|->
name|modelColumn
argument_list|,
name|d
operator|->
name|root
argument_list|)
argument_list|)
operator|&
name|Qt
operator|::
name|ItemIsEnabled
operator|)
condition|)
name|newIndex
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|newIndex
operator|>=
literal|0
operator|&&
name|newIndex
operator|<
name|count
argument_list|()
operator|&&
name|newIndex
operator|!=
name|currentIndex
argument_list|()
condition|)
block|{
name|setCurrentIndex
argument_list|(
name|newIndex
argument_list|)
expr_stmt|;
name|d
operator|->
name|emitActivated
argument_list|(
name|d
operator|->
name|currentIndex
argument_list|)
expr_stmt|;
block|}
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|contextMenuEvent
name|void
name|QComboBox
operator|::
name|contextMenuEvent
parameter_list|(
name|QContextMenuEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
block|{
name|Qt
operator|::
name|ContextMenuPolicy
name|p
init|=
name|d
operator|->
name|lineEdit
operator|->
name|contextMenuPolicy
argument_list|()
decl_stmt|;
name|d
operator|->
name|lineEdit
operator|->
name|setContextMenuPolicy
argument_list|(
name|Qt
operator|::
name|DefaultContextMenu
argument_list|)
expr_stmt|;
name|d
operator|->
name|lineEdit
operator|->
name|event
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|d
operator|->
name|lineEdit
operator|->
name|setContextMenuPolicy
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONTEXTMENU
end_comment
begin_function
DECL|function|keyboardSearchString
name|void
name|QComboBoxPrivate
operator|::
name|keyboardSearchString
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
comment|// use keyboardSearch from the listView so we do not duplicate code
name|QAbstractItemView
modifier|*
name|view
init|=
name|viewContainer
argument_list|()
operator|->
name|itemView
argument_list|()
decl_stmt|;
name|view
operator|->
name|setCurrentIndex
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
name|int
name|currentRow
init|=
name|view
operator|->
name|currentIndex
argument_list|()
operator|.
name|row
argument_list|()
decl_stmt|;
name|view
operator|->
name|keyboardSearch
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentRow
operator|!=
name|view
operator|->
name|currentIndex
argument_list|()
operator|.
name|row
argument_list|()
condition|)
block|{
name|setCurrentIndex
argument_list|(
name|view
operator|->
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
name|emitActivated
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|modelChanged
name|void
name|QComboBoxPrivate
operator|::
name|modelChanged
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|sizeAdjustPolicy
operator|==
name|QComboBox
operator|::
name|AdjustToContents
condition|)
block|{
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|adjustComboBoxSize
argument_list|()
expr_stmt|;
name|q
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|inputMethodEvent
name|void
name|QComboBox
operator|::
name|inputMethodEvent
parameter_list|(
name|QInputMethodEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
block|{
name|d
operator|->
name|lineEdit
operator|->
name|event
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|e
operator|->
name|commitString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|keyboardSearchString
argument_list|(
name|e
operator|->
name|commitString
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|inputMethodQuery
name|QVariant
name|QComboBox
operator|::
name|inputMethodQuery
parameter_list|(
name|Qt
operator|::
name|InputMethodQuery
name|query
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineEdit
condition|)
return|return
name|d
operator|->
name|lineEdit
operator|->
name|inputMethodQuery
argument_list|(
name|query
argument_list|)
return|;
return|return
name|QWidget
operator|::
name|inputMethodQuery
argument_list|(
name|query
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QComboBox::addItem(const QString&text, const QVariant&userData)      Adds an item to the combobox with the given \a text, and     containing the specified \a userData (stored in the Qt::UserRole).     The item is appended to the list of existing items. */
end_comment
begin_comment
comment|/*!     \fn void QComboBox::addItem(const QIcon&icon, const QString&text,                                 const QVariant&userData)      Adds an item to the combobox with the given \a icon and \a text,     and containing the specified \a userData (stored in the     Qt::UserRole). The item is appended to the list of existing items. */
end_comment
begin_comment
comment|/*!     \fn void QComboBox::addItems(const QStringList&texts)      Adds each of the strings in the given \a texts to the combobox. Each item     is appended to the list of existing items in turn. */
end_comment
begin_comment
comment|/*!     \fn void QComboBox::editTextChanged(const QString&text)      This signal is emitted when the text in the combobox's line edit     widget is changed. The new text is specified by \a text. */
end_comment
begin_comment
comment|/*!     \property QComboBox::frame     \brief whether the combo box draws itself with a frame       If enabled (the default) the combo box draws itself inside a     frame, otherwise the combo box draws itself without any frame. */
end_comment
begin_function
DECL|function|hasFrame
name|bool
name|QComboBox
operator|::
name|hasFrame
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|frame
return|;
block|}
end_function
begin_function
DECL|function|setFrame
name|void
name|QComboBox
operator|::
name|setFrame
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|frame
operator|=
name|enable
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QComboBox::modelColumn     \brief the column in the model that is visible.      If set prior to populating the combo box, the pop-up view will     not be affected and will show the first column (using this property's     default value).      By default, this property has a value of 0. */
end_comment
begin_function
DECL|function|modelColumn
name|int
name|QComboBox
operator|::
name|modelColumn
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QComboBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|modelColumn
return|;
block|}
end_function
begin_function
DECL|function|setModelColumn
name|void
name|QComboBox
operator|::
name|setModelColumn
parameter_list|(
name|int
name|visibleColumn
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|modelColumn
operator|=
name|visibleColumn
expr_stmt|;
name|QListView
modifier|*
name|lv
init|=
name|qobject_cast
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|viewContainer
argument_list|()
operator|->
name|itemView
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lv
condition|)
name|lv
operator|->
name|setModelColumn
argument_list|(
name|visibleColumn
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
if|if
condition|(
name|d
operator|->
name|lineEdit
operator|&&
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
operator|&&
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
operator|==
name|d
operator|->
name|completer
condition|)
name|d
operator|->
name|lineEdit
operator|->
name|completer
argument_list|()
operator|->
name|setCompletionColumn
argument_list|(
name|visibleColumn
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|setCurrentIndex
argument_list|(
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|//update the text to the text of the new column;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qcombobox.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_COMBOBOX
end_comment
end_unit
