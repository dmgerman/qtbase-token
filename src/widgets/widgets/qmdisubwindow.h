begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMDISUBWINDOW_H
end_ifndef
begin_define
DECL|macro|QMDISUBWINDOW_H
define|#
directive|define
name|QMDISUBWINDOW_H
end_define
begin_include
include|#
directive|include
file|<QtWidgets/qwidget.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_MDIAREA
DECL|variable|QMenu
name|class
name|QMenu
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMdiArea
name|class
name|QMdiArea
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|namespace
name|QMdi
block|{
name|class
name|ControlContainer
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
DECL|variable|QMdiSubWindowPrivate
name|class
name|QMdiSubWindowPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QMdiSubWindow
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|int keyboardSingleStep READ keyboardSingleStep WRITE setKeyboardSingleStep
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int keyboardPageStep READ keyboardPageStep WRITE setKeyboardPageStep
argument_list|)
name|public
operator|:
expr|enum
name|SubWindowOption
block|{
name|AllowOutsideAreaHorizontally
operator|=
literal|0x1
block|,
comment|// internal
name|AllowOutsideAreaVertically
operator|=
literal|0x2
block|,
comment|// internal
name|RubberBandResize
operator|=
literal|0x4
block|,
name|RubberBandMove
operator|=
literal|0x8
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|SubWindowOptions
argument_list|,
argument|SubWindowOption
argument_list|)
name|QMdiSubWindow
argument_list|(
argument|QWidget *parent =
literal|0
argument_list|,
argument|Qt::WindowFlags flags =
literal|0
argument_list|)
block|;
operator|~
name|QMdiSubWindow
argument_list|()
block|;
name|QSize
name|sizeHint
argument_list|()
specifier|const
block|;
name|QSize
name|minimumSizeHint
argument_list|()
specifier|const
block|;
name|void
name|setWidget
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
block|;
name|QWidget
operator|*
name|widget
argument_list|()
specifier|const
block|;
name|QWidget
operator|*
name|maximizedButtonsWidget
argument_list|()
specifier|const
block|;
comment|// internal
name|QWidget
operator|*
name|maximizedSystemMenuIconWidget
argument_list|()
specifier|const
block|;
comment|// internal
name|bool
name|isShaded
argument_list|()
specifier|const
block|;
name|void
name|setOption
argument_list|(
argument|SubWindowOption option
argument_list|,
argument|bool on = true
argument_list|)
block|;
name|bool
name|testOption
argument_list|(
argument|SubWindowOption
argument_list|)
specifier|const
block|;
name|void
name|setKeyboardSingleStep
argument_list|(
argument|int step
argument_list|)
block|;
name|int
name|keyboardSingleStep
argument_list|()
specifier|const
block|;
name|void
name|setKeyboardPageStep
argument_list|(
argument|int step
argument_list|)
block|;
name|int
name|keyboardPageStep
argument_list|()
specifier|const
block|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|void
name|setSystemMenu
argument_list|(
name|QMenu
operator|*
name|systemMenu
argument_list|)
block|;
name|QMenu
operator|*
name|systemMenu
argument_list|()
specifier|const
block|;
endif|#
directive|endif
name|QMdiArea
operator|*
name|mdiArea
argument_list|()
specifier|const
block|;
name|Q_SIGNALS
operator|:
name|void
name|windowStateChanged
argument_list|(
argument|Qt::WindowStates oldState
argument_list|,
argument|Qt::WindowStates newState
argument_list|)
block|;
name|void
name|aboutToActivate
argument_list|()
block|;
name|public
name|Q_SLOTS
operator|:
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|void
name|showSystemMenu
argument_list|()
block|;
endif|#
directive|endif
name|void
name|showShaded
argument_list|()
block|;
name|protected
operator|:
name|bool
name|eventFilter
argument_list|(
name|QObject
operator|*
name|object
argument_list|,
name|QEvent
operator|*
name|event
argument_list|)
block|;
name|bool
name|event
argument_list|(
name|QEvent
operator|*
name|event
argument_list|)
block|;
name|void
name|showEvent
argument_list|(
name|QShowEvent
operator|*
name|showEvent
argument_list|)
block|;
name|void
name|hideEvent
argument_list|(
name|QHideEvent
operator|*
name|hideEvent
argument_list|)
block|;
name|void
name|changeEvent
argument_list|(
name|QEvent
operator|*
name|changeEvent
argument_list|)
block|;
name|void
name|closeEvent
argument_list|(
name|QCloseEvent
operator|*
name|closeEvent
argument_list|)
block|;
name|void
name|leaveEvent
argument_list|(
name|QEvent
operator|*
name|leaveEvent
argument_list|)
block|;
name|void
name|resizeEvent
argument_list|(
name|QResizeEvent
operator|*
name|resizeEvent
argument_list|)
block|;
name|void
name|timerEvent
argument_list|(
name|QTimerEvent
operator|*
name|timerEvent
argument_list|)
block|;
name|void
name|moveEvent
argument_list|(
name|QMoveEvent
operator|*
name|moveEvent
argument_list|)
block|;
name|void
name|paintEvent
argument_list|(
name|QPaintEvent
operator|*
name|paintEvent
argument_list|)
block|;
name|void
name|mousePressEvent
argument_list|(
name|QMouseEvent
operator|*
name|mouseEvent
argument_list|)
block|;
name|void
name|mouseDoubleClickEvent
argument_list|(
name|QMouseEvent
operator|*
name|mouseEvent
argument_list|)
block|;
name|void
name|mouseReleaseEvent
argument_list|(
name|QMouseEvent
operator|*
name|mouseEvent
argument_list|)
block|;
name|void
name|mouseMoveEvent
argument_list|(
name|QMouseEvent
operator|*
name|mouseEvent
argument_list|)
block|;
name|void
name|keyPressEvent
argument_list|(
name|QKeyEvent
operator|*
name|keyEvent
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
name|void
name|contextMenuEvent
argument_list|(
name|QContextMenuEvent
operator|*
name|contextMenuEvent
argument_list|)
block|;
endif|#
directive|endif
name|void
name|focusInEvent
argument_list|(
name|QFocusEvent
operator|*
name|focusInEvent
argument_list|)
block|;
name|void
name|focusOutEvent
argument_list|(
name|QFocusEvent
operator|*
name|focusOutEvent
argument_list|)
block|;
name|void
name|childEvent
argument_list|(
name|QChildEvent
operator|*
name|childEvent
argument_list|)
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QMdiSubWindow
argument_list|)
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QMdiSubWindow
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_updateStaysOnTopHint()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_enterInteractiveMode()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_processFocusChanged(QWidget *, QWidget *)
argument_list|)
name|friend
name|class
name|QMdiAreaPrivate
block|;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
name|friend
name|class
name|QMdiAreaTabBar
block|;
endif|#
directive|endif
name|friend
name|class
name|QMdi
operator|::
name|ControlContainer
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|QMdiSubWindow::SubWindowOptions
argument_list|)
end_macro
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MDIAREA
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMDISUBWINDOW_H
end_comment
end_unit
