begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QLCDNUMBER_H
end_ifndef
begin_define
DECL|macro|QLCDNUMBER_H
define|#
directive|define
name|QLCDNUMBER_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qframe.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qbitarray.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_LCDNUMBER
name|class
name|QLCDNumberPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QLCDNumber
range|:
name|public
name|QFrame
comment|// LCD number widget
block|{
name|Q_OBJECT
name|Q_ENUMS
argument_list|(
argument|Mode SegmentStyle
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool smallDecimalPoint READ smallDecimalPoint WRITE setSmallDecimalPoint
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int numDigits READ numDigits WRITE setNumDigits
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int digitCount READ digitCount WRITE setDigitCount
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Mode mode READ mode WRITE setMode
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|SegmentStyle segmentStyle READ segmentStyle WRITE setSegmentStyle
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|double value READ value WRITE display
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int intValue READ intValue WRITE display
argument_list|)
name|public
operator|:
name|explicit
name|QLCDNumber
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|explicit
name|QLCDNumber
argument_list|(
argument|uint numDigits
argument_list|,
argument|QWidget* parent =
literal|0
argument_list|)
block|;
operator|~
name|QLCDNumber
argument_list|()
block|;      enum
name|Mode
block|{
name|Hex
block|,
name|Dec
block|,
name|Oct
block|,
name|Bin
if|#
directive|if
name|defined
argument_list|(
name|QT3_SUPPORT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_MOC_RUN
argument_list|)
block|,
name|HEX
operator|=
name|Hex
block|,
name|DEC
operator|=
name|Dec
block|,
name|OCT
operator|=
name|Oct
block|,
name|BIN
operator|=
name|Bin
endif|#
directive|endif
block|}
block|;     enum
name|SegmentStyle
block|{
name|Outline
block|,
name|Filled
block|,
name|Flat
block|}
block|;
name|bool
name|smallDecimalPoint
argument_list|()
specifier|const
block|;
ifdef|#
directive|ifdef
name|QT_DEPRECATED
name|QT_DEPRECATED
name|int
name|numDigits
argument_list|()
specifier|const
block|;
name|QT_DEPRECATED
name|void
name|setNumDigits
argument_list|(
argument|int nDigits
argument_list|)
block|;
endif|#
directive|endif
name|int
name|digitCount
argument_list|()
specifier|const
block|;
name|void
name|setDigitCount
argument_list|(
argument|int nDigits
argument_list|)
block|;
name|bool
name|checkOverflow
argument_list|(
argument|double num
argument_list|)
specifier|const
block|;
name|bool
name|checkOverflow
argument_list|(
argument|int num
argument_list|)
specifier|const
block|;
name|Mode
name|mode
argument_list|()
specifier|const
block|;
name|void
name|setMode
argument_list|(
name|Mode
argument_list|)
block|;
name|SegmentStyle
name|segmentStyle
argument_list|()
specifier|const
block|;
name|void
name|setSegmentStyle
argument_list|(
name|SegmentStyle
argument_list|)
block|;
name|double
name|value
argument_list|()
specifier|const
block|;
name|int
name|intValue
argument_list|()
specifier|const
block|;
name|QSize
name|sizeHint
argument_list|()
specifier|const
block|;
name|public
name|Q_SLOTS
operator|:
name|void
name|display
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|)
block|;
name|void
name|display
argument_list|(
argument|int num
argument_list|)
block|;
name|void
name|display
argument_list|(
argument|double num
argument_list|)
block|;
name|void
name|setHexMode
argument_list|()
block|;
name|void
name|setDecMode
argument_list|()
block|;
name|void
name|setOctMode
argument_list|()
block|;
name|void
name|setBinMode
argument_list|()
block|;
name|void
name|setSmallDecimalPoint
argument_list|(
name|bool
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|overflow
argument_list|()
block|;
name|protected
operator|:
name|bool
name|event
argument_list|(
name|QEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|paintEvent
argument_list|(
name|QPaintEvent
operator|*
argument_list|)
block|;
name|public
operator|:
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|QT3_SUPPORT_CONSTRUCTOR
name|QLCDNumber
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|)
block|;
name|QT3_SUPPORT_CONSTRUCTOR
name|QLCDNumber
argument_list|(
argument|uint numDigits
argument_list|,
argument|QWidget* parent
argument_list|,
argument|const char* name
argument_list|)
block|;
name|QT3_SUPPORT
name|void
name|setMargin
argument_list|(
argument|int margin
argument_list|)
block|{
name|setContentsMargins
argument_list|(
name|margin
argument_list|,
name|margin
argument_list|,
name|margin
argument_list|,
name|margin
argument_list|)
block|; }
name|QT3_SUPPORT
name|int
name|margin
argument_list|()
specifier|const
block|{
name|int
name|margin
block|;
name|int
name|dummy
block|;
name|getContentsMargins
argument_list|(
operator|&
name|margin
argument_list|,
operator|&
name|dummy
argument_list|,
operator|&
name|dummy
argument_list|,
operator|&
name|dummy
argument_list|)
block|;
return|return
name|margin
return|;
block|}
endif|#
directive|endif
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QLCDNumber
argument_list|)
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QLCDNumber
argument_list|)
expr|}
block|;
endif|#
directive|endif
comment|// QT_NO_LCDNUMBER
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QLCDNUMBER_H
end_comment
end_unit
