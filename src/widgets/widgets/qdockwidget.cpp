begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qdockwidget.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
end_ifndef
begin_include
include|#
directive|include
file|<qaction.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<qdrawutil.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qfontmetrics.h>
end_include
begin_include
include|#
directive|include
file|<qwindow.h>
end_include
begin_include
include|#
directive|include
file|<qscreen.h>
end_include
begin_include
include|#
directive|include
file|<qmainwindow.h>
end_include
begin_include
include|#
directive|include
file|<qrubberband.h>
end_include
begin_include
include|#
directive|include
file|<qstylepainter.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbutton.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidgetresizehandler_p.h>
end_include
begin_include
include|#
directive|include
file|"qdockwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"qmainwindowlayout_p.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC
end_ifdef
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qmacstyle_mac_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|QString
name|qt_setWindowTitle_helperHelper
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|// qwidget.cpp
end_comment
begin_comment
comment|// qmainwindow.cpp
end_comment
begin_function_decl
specifier|extern
name|QMainWindowLayout
modifier|*
name|qt_mainwindow_layout
parameter_list|(
specifier|const
name|QMainWindow
modifier|*
name|window
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|hasFeature
specifier|static
specifier|inline
name|bool
name|hasFeature
parameter_list|(
specifier|const
name|QDockWidgetPrivate
modifier|*
name|priv
parameter_list|,
name|QDockWidget
operator|::
name|DockWidgetFeature
name|feature
parameter_list|)
block|{
return|return
operator|(
name|priv
operator|->
name|features
operator|&
name|feature
operator|)
operator|==
name|feature
return|;
block|}
end_function
begin_function
DECL|function|hasFeature
specifier|static
specifier|inline
name|bool
name|hasFeature
parameter_list|(
specifier|const
name|QDockWidget
modifier|*
name|dockwidget
parameter_list|,
name|QDockWidget
operator|::
name|DockWidgetFeature
name|feature
parameter_list|)
block|{
return|return
operator|(
name|dockwidget
operator|->
name|features
argument_list|()
operator|&
name|feature
operator|)
operator|==
name|feature
return|;
block|}
end_function
begin_comment
comment|/*     A Dock Window:      [+] is the float button     [X] is the close button      +-------------------------------+     | Dock Window Title       [+][X]|     +-------------------------------+     |                               |     | place to put the single       |     | QDockWidget child (this space |     | does not yet have a name)     |     |                               |     |                               |     |                               |     |                               |     |                               |     |                               |     |                               |     |                               |     |                               |     +-------------------------------+  */
end_comment
begin_comment
comment|/****************************************************************************** ** QDockWidgetTitleButton */
end_comment
begin_class
DECL|class|QDockWidgetTitleButton
class|class
name|QDockWidgetTitleButton
super|:
specifier|public
name|QAbstractButton
block|{
name|Q_OBJECT
public|public:
name|QDockWidgetTitleButton
parameter_list|(
name|QDockWidget
modifier|*
name|dockWidget
parameter_list|)
constructor_decl|;
name|QSize
name|sizeHint
parameter_list|()
specifier|const
function_decl|;
DECL|function|minimumSizeHint
specifier|inline
name|QSize
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
return|return
name|sizeHint
argument_list|()
return|;
block|}
name|void
name|enterEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QDockWidgetTitleButton
name|QDockWidgetTitleButton
operator|::
name|QDockWidgetTitleButton
parameter_list|(
name|QDockWidget
modifier|*
name|dockWidget
parameter_list|)
member_init_list|:
name|QAbstractButton
argument_list|(
name|dockWidget
argument_list|)
block|{
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|sizeHint
name|QSize
name|QDockWidgetTitleButton
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|ensurePolished
argument_list|()
expr_stmt|;
name|int
name|size
init|=
literal|2
operator|*
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DockWidgetTitleBarButtonMargin
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|icon
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|int
name|iconSize
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SmallIconSize
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|QSize
name|sz
init|=
name|icon
argument_list|()
operator|.
name|actualSize
argument_list|(
name|QSize
argument_list|(
name|iconSize
argument_list|,
name|iconSize
argument_list|)
argument_list|)
decl_stmt|;
name|size
operator|+=
name|qMax
argument_list|(
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|QSize
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|enterEvent
name|void
name|QDockWidgetTitleButton
operator|::
name|enterEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
name|update
argument_list|()
expr_stmt|;
name|QAbstractButton
operator|::
name|enterEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leaveEvent
name|void
name|QDockWidgetTitleButton
operator|::
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
name|update
argument_list|()
expr_stmt|;
name|QAbstractButton
operator|::
name|leaveEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|QDockWidgetTitleButton
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QStyleOptionToolButton
name|opt
decl_stmt|;
name|opt
operator|.
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_AutoRaise
expr_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_DockWidget_ButtonsHaveFrame
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
block|{
if|if
condition|(
name|isEnabled
argument_list|()
operator|&&
name|underMouse
argument_list|()
operator|&&
operator|!
name|isChecked
argument_list|()
operator|&&
operator|!
name|isDown
argument_list|()
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Raised
expr_stmt|;
if|if
condition|(
name|isChecked
argument_list|()
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_On
expr_stmt|;
if|if
condition|(
name|isDown
argument_list|()
condition|)
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_PanelButtonTool
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|opt
operator|.
name|icon
operator|=
name|icon
argument_list|()
expr_stmt|;
name|opt
operator|.
name|subControls
operator|=
literal|0
expr_stmt|;
name|opt
operator|.
name|activeSubControls
operator|=
literal|0
expr_stmt|;
name|opt
operator|.
name|features
operator|=
name|QStyleOptionToolButton
operator|::
name|None
expr_stmt|;
name|opt
operator|.
name|arrowType
operator|=
name|Qt
operator|::
name|NoArrow
expr_stmt|;
name|int
name|size
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SmallIconSize
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|opt
operator|.
name|iconSize
operator|=
name|QSize
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ToolButton
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/****************************************************************************** ** QDockWidgetLayout */
end_comment
begin_constructor
DECL|function|QDockWidgetLayout
name|QDockWidgetLayout
operator|::
name|QDockWidgetLayout
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QLayout
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|verticalTitleBar
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|item_list
argument_list|(
name|RoleCount
argument_list|,
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QDockWidgetLayout
name|QDockWidgetLayout
operator|::
name|~
name|QDockWidgetLayout
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|item_list
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|nativeWindowDeco
name|bool
name|QDockWidgetLayout
operator|::
name|nativeWindowDeco
parameter_list|()
specifier|const
block|{
return|return
name|nativeWindowDeco
argument_list|(
name|parentWidget
argument_list|()
operator|->
name|isWindow
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isXcb
specifier|static
name|bool
name|isXcb
parameter_list|()
block|{
specifier|static
specifier|const
name|bool
name|xcb
init|=
operator|!
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"xcb"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
decl_stmt|;
return|return
name|xcb
return|;
block|}
end_function
begin_function
DECL|function|nativeWindowDeco
name|bool
name|QDockWidgetLayout
operator|::
name|nativeWindowDeco
parameter_list|(
name|bool
name|floating
parameter_list|)
specifier|const
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
return|return
literal|false
return|;
else|#
directive|else
return|return
operator|!
name|isXcb
argument_list|()
operator|&&
operator|(
name|floating
operator|&&
name|item_list
index|[
name|QDockWidgetLayout
operator|::
name|TitleBar
index|]
operator|==
literal|0
operator|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|addItem
name|void
name|QDockWidgetLayout
operator|::
name|addItem
parameter_list|(
name|QLayoutItem
modifier|*
parameter_list|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QDockWidgetLayout::addItem(): please use QDockWidgetLayout::setWidget()"
expr_stmt|;
return|return;
block|}
end_function
begin_function
DECL|function|itemAt
name|QLayoutItem
modifier|*
name|QDockWidgetLayout
operator|::
name|itemAt
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|item_list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QLayoutItem
modifier|*
name|item
init|=
name|item_list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|index
operator|==
name|cnt
operator|++
condition|)
return|return
name|item
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|takeAt
name|QLayoutItem
modifier|*
name|QDockWidgetLayout
operator|::
name|takeAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|item_list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QLayoutItem
modifier|*
name|item
init|=
name|item_list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|index
operator|==
name|j
condition|)
block|{
name|item_list
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
return|return
name|item
return|;
block|}
operator|++
name|j
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|count
name|int
name|QDockWidgetLayout
operator|::
name|count
parameter_list|()
specifier|const
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|item_list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|item_list
operator|.
name|at
argument_list|(
name|i
argument_list|)
condition|)
operator|++
name|result
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|sizeFromContent
name|QSize
name|QDockWidgetLayout
operator|::
name|sizeFromContent
parameter_list|(
specifier|const
name|QSize
modifier|&
name|content
parameter_list|,
name|bool
name|floating
parameter_list|)
specifier|const
block|{
name|QSize
name|result
init|=
name|content
decl_stmt|;
if|if
condition|(
name|verticalTitleBar
condition|)
block|{
name|result
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|result
operator|.
name|height
argument_list|()
argument_list|,
name|minimumTitleWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|content
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|result
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|content
operator|.
name|width
argument_list|()
argument_list|,
name|minimumTitleWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QDockWidget
modifier|*
name|w
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|nativeDeco
init|=
name|nativeWindowDeco
argument_list|(
name|floating
argument_list|)
decl_stmt|;
name|int
name|fw
init|=
name|floating
operator|&&
operator|!
name|nativeDeco
condition|?
name|w
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DockWidgetFrameWidth
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|th
init|=
name|titleHeight
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nativeDeco
condition|)
block|{
if|if
condition|(
name|verticalTitleBar
condition|)
name|result
operator|+=
name|QSize
argument_list|(
name|th
operator|+
literal|2
operator|*
name|fw
argument_list|,
literal|2
operator|*
name|fw
argument_list|)
expr_stmt|;
else|else
name|result
operator|+=
name|QSize
argument_list|(
literal|2
operator|*
name|fw
argument_list|,
name|th
operator|+
literal|2
operator|*
name|fw
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|setHeight
argument_list|(
name|qMin
argument_list|(
name|result
operator|.
name|height
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QWIDGETSIZE_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|setWidth
argument_list|(
name|qMin
argument_list|(
name|result
operator|.
name|width
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QWIDGETSIZE_MAX
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|content
operator|.
name|width
argument_list|()
operator|<
literal|0
condition|)
name|result
operator|.
name|setWidth
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|content
operator|.
name|height
argument_list|()
operator|<
literal|0
condition|)
name|result
operator|.
name|setHeight
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|w
operator|->
name|getContentsMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
comment|//we need to subtract the contents margin (it will be added by the caller)
name|QSize
name|min
init|=
name|w
operator|->
name|minimumSize
argument_list|()
operator|-
name|QSize
argument_list|(
name|left
operator|+
name|right
argument_list|,
name|top
operator|+
name|bottom
argument_list|)
decl_stmt|;
name|QSize
name|max
init|=
name|w
operator|->
name|maximumSize
argument_list|()
operator|-
name|QSize
argument_list|(
name|left
operator|+
name|right
argument_list|,
name|top
operator|+
name|bottom
argument_list|)
decl_stmt|;
comment|/* A floating dockwidget will automatically get its minimumSize set to the layout's        minimum size + deco. We're *not* interested in this, we only take minimumSize()        into account if the user set it herself. Otherwise we end up expanding the result        of a calculation for a non-floating dock widget to a floating dock widget's        minimum size + window decorations. */
name|uint
name|explicitMin
init|=
literal|0
decl_stmt|;
name|uint
name|explicitMax
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|!=
literal|0
condition|)
block|{
name|explicitMin
operator|=
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|explicitMinSize
expr_stmt|;
name|explicitMax
operator|=
name|w
operator|->
name|d_func
argument_list|()
operator|->
name|extra
operator|->
name|explicitMaxSize
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|explicitMin
operator|&
name|Qt
operator|::
name|Horizontal
operator|)
operator|||
name|min
operator|.
name|width
argument_list|()
operator|==
literal|0
condition|)
name|min
operator|.
name|setWidth
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|explicitMin
operator|&
name|Qt
operator|::
name|Vertical
operator|)
operator|||
name|min
operator|.
name|height
argument_list|()
operator|==
literal|0
condition|)
name|min
operator|.
name|setHeight
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|explicitMax
operator|&
name|Qt
operator|::
name|Horizontal
operator|)
condition|)
name|max
operator|.
name|setWidth
argument_list|(
name|QWIDGETSIZE_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|explicitMax
operator|&
name|Qt
operator|::
name|Vertical
operator|)
condition|)
name|max
operator|.
name|setHeight
argument_list|(
name|QWIDGETSIZE_MAX
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|boundedTo
argument_list|(
name|max
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|min
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSize
name|QDockWidgetLayout
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|QDockWidget
modifier|*
name|w
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
name|QSize
name|content
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|item_list
index|[
name|Content
index|]
operator|!=
literal|0
condition|)
name|content
operator|=
name|item_list
index|[
name|Content
index|]
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
return|return
name|sizeFromContent
argument_list|(
name|content
argument_list|,
name|w
operator|->
name|isFloating
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|maximumSize
name|QSize
name|QDockWidgetLayout
operator|::
name|maximumSize
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|item_list
index|[
name|Content
index|]
operator|!=
literal|0
condition|)
block|{
specifier|const
name|QSize
name|content
init|=
name|item_list
index|[
name|Content
index|]
operator|->
name|maximumSize
argument_list|()
decl_stmt|;
return|return
name|sizeFromContent
argument_list|(
name|content
argument_list|,
name|parentWidget
argument_list|()
operator|->
name|isWindow
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|parentWidget
argument_list|()
operator|->
name|maximumSize
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|minimumSize
name|QSize
name|QDockWidgetLayout
operator|::
name|minimumSize
parameter_list|()
specifier|const
block|{
name|QDockWidget
modifier|*
name|w
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
name|QSize
name|content
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|item_list
index|[
name|Content
index|]
operator|!=
literal|0
condition|)
name|content
operator|=
name|item_list
index|[
name|Content
index|]
operator|->
name|minimumSize
argument_list|()
expr_stmt|;
return|return
name|sizeFromContent
argument_list|(
name|content
argument_list|,
name|w
operator|->
name|isFloating
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|widgetForRole
name|QWidget
modifier|*
name|QDockWidgetLayout
operator|::
name|widgetForRole
parameter_list|(
name|Role
name|r
parameter_list|)
specifier|const
block|{
name|QLayoutItem
modifier|*
name|item
init|=
name|item_list
operator|.
name|at
argument_list|(
name|r
argument_list|)
decl_stmt|;
return|return
name|item
operator|==
literal|0
condition|?
literal|0
else|:
name|item
operator|->
name|widget
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|itemForRole
name|QLayoutItem
modifier|*
name|QDockWidgetLayout
operator|::
name|itemForRole
parameter_list|(
name|Role
name|r
parameter_list|)
specifier|const
block|{
return|return
name|item_list
operator|.
name|at
argument_list|(
name|r
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setWidgetForRole
name|void
name|QDockWidgetLayout
operator|::
name|setWidgetForRole
parameter_list|(
name|Role
name|r
parameter_list|,
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|QWidget
modifier|*
name|old
init|=
name|widgetForRole
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|0
condition|)
block|{
name|old
operator|->
name|hide
argument_list|()
expr_stmt|;
name|removeWidget
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|w
operator|!=
literal|0
condition|)
block|{
name|addChildWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|item_list
index|[
name|r
index|]
operator|=
operator|new
name|QWidgetItemV2
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|item_list
index|[
name|r
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pick
specifier|static
specifier|inline
name|int
name|pick
parameter_list|(
name|bool
name|vertical
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
return|return
name|vertical
condition|?
name|size
operator|.
name|height
argument_list|()
else|:
name|size
operator|.
name|width
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|perp
specifier|static
specifier|inline
name|int
name|perp
parameter_list|(
name|bool
name|vertical
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
return|return
name|vertical
condition|?
name|size
operator|.
name|width
argument_list|()
else|:
name|size
operator|.
name|height
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|minimumTitleWidth
name|int
name|QDockWidgetLayout
operator|::
name|minimumTitleWidth
parameter_list|()
specifier|const
block|{
name|QDockWidget
modifier|*
name|q
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|title
init|=
name|widgetForRole
argument_list|(
name|TitleBar
argument_list|)
condition|)
return|return
name|pick
argument_list|(
name|verticalTitleBar
argument_list|,
name|title
operator|->
name|minimumSizeHint
argument_list|()
argument_list|)
return|;
name|QSize
name|closeSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QSize
name|floatSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasFeature
argument_list|(
name|q
argument_list|,
name|QDockWidget
operator|::
name|DockWidgetClosable
argument_list|)
condition|)
block|{
if|if
condition|(
name|QLayoutItem
modifier|*
name|item
init|=
name|item_list
index|[
name|CloseButton
index|]
condition|)
name|closeSize
operator|=
name|item
operator|->
name|widget
argument_list|()
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasFeature
argument_list|(
name|q
argument_list|,
name|QDockWidget
operator|::
name|DockWidgetFloatable
argument_list|)
condition|)
block|{
if|if
condition|(
name|QLayoutItem
modifier|*
name|item
init|=
name|item_list
index|[
name|FloatButton
index|]
condition|)
name|floatSize
operator|=
name|item
operator|->
name|widget
argument_list|()
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
block|}
name|int
name|titleHeight
init|=
name|this
operator|->
name|titleHeight
argument_list|()
decl_stmt|;
name|int
name|mw
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DockWidgetTitleMargin
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|int
name|fw
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DockWidgetFrameWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
return|return
name|pick
argument_list|(
name|verticalTitleBar
argument_list|,
name|closeSize
argument_list|)
operator|+
name|pick
argument_list|(
name|verticalTitleBar
argument_list|,
name|floatSize
argument_list|)
operator|+
name|titleHeight
operator|+
literal|2
operator|*
name|fw
operator|+
literal|3
operator|*
name|mw
return|;
block|}
end_function
begin_function
DECL|function|titleHeight
name|int
name|QDockWidgetLayout
operator|::
name|titleHeight
parameter_list|()
specifier|const
block|{
name|QDockWidget
modifier|*
name|q
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|title
init|=
name|widgetForRole
argument_list|(
name|TitleBar
argument_list|)
condition|)
return|return
name|perp
argument_list|(
name|verticalTitleBar
argument_list|,
name|title
operator|->
name|sizeHint
argument_list|()
argument_list|)
return|;
name|QSize
name|closeSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QSize
name|floatSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|QLayoutItem
modifier|*
name|item
init|=
name|item_list
index|[
name|CloseButton
index|]
condition|)
name|closeSize
operator|=
name|item
operator|->
name|widget
argument_list|()
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
if|if
condition|(
name|QLayoutItem
modifier|*
name|item
init|=
name|item_list
index|[
name|FloatButton
index|]
condition|)
name|floatSize
operator|=
name|item
operator|->
name|widget
argument_list|()
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
name|int
name|buttonHeight
init|=
name|qMax
argument_list|(
name|perp
argument_list|(
name|verticalTitleBar
argument_list|,
name|closeSize
argument_list|)
argument_list|,
name|perp
argument_list|(
name|verticalTitleBar
argument_list|,
name|floatSize
argument_list|)
argument_list|)
decl_stmt|;
name|QFontMetrics
name|titleFontMetrics
init|=
name|q
operator|->
name|fontMetrics
argument_list|()
decl_stmt|;
name|int
name|mw
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DockWidgetTitleMargin
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
return|return
name|qMax
argument_list|(
name|buttonHeight
operator|+
literal|2
argument_list|,
name|titleFontMetrics
operator|.
name|height
argument_list|()
operator|+
literal|2
operator|*
name|mw
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QDockWidgetLayout
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|geometry
parameter_list|)
block|{
name|QDockWidget
modifier|*
name|q
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|nativeDeco
init|=
name|nativeWindowDeco
argument_list|()
decl_stmt|;
name|int
name|fw
init|=
name|q
operator|->
name|isFloating
argument_list|()
operator|&&
operator|!
name|nativeDeco
condition|?
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DockWidgetFrameWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|nativeDeco
condition|)
block|{
if|if
condition|(
name|QLayoutItem
modifier|*
name|item
init|=
name|item_list
index|[
name|Content
index|]
condition|)
name|item
operator|->
name|setGeometry
argument_list|(
name|geometry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|titleHeight
init|=
name|this
operator|->
name|titleHeight
argument_list|()
decl_stmt|;
if|if
condition|(
name|verticalTitleBar
condition|)
block|{
name|_titleArea
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|)
argument_list|,
name|QSize
argument_list|(
name|titleHeight
argument_list|,
name|geometry
operator|.
name|height
argument_list|()
operator|-
operator|(
name|fw
operator|*
literal|2
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_titleArea
operator|=
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|)
argument_list|,
name|QSize
argument_list|(
name|geometry
operator|.
name|width
argument_list|()
operator|-
operator|(
name|fw
operator|*
literal|2
operator|)
argument_list|,
name|titleHeight
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QLayoutItem
modifier|*
name|item
init|=
name|item_list
index|[
name|TitleBar
index|]
condition|)
block|{
name|item
operator|->
name|setGeometry
argument_list|(
name|_titleArea
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStyleOptionDockWidgetV2
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
if|if
condition|(
name|QLayoutItem
modifier|*
name|item
init|=
name|item_list
index|[
name|CloseButton
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|item
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
name|QRect
name|r
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_DockWidgetCloseButton
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isNull
argument_list|()
condition|)
name|item
operator|->
name|setGeometry
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|QLayoutItem
modifier|*
name|item
init|=
name|item_list
index|[
name|FloatButton
index|]
condition|)
block|{
if|if
condition|(
operator|!
name|item
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
name|QRect
name|r
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_DockWidgetFloatButton
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|isNull
argument_list|()
condition|)
name|item
operator|->
name|setGeometry
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|QLayoutItem
modifier|*
name|item
init|=
name|item_list
index|[
name|Content
index|]
condition|)
block|{
name|QRect
name|r
init|=
name|geometry
decl_stmt|;
if|if
condition|(
name|verticalTitleBar
condition|)
block|{
name|r
operator|.
name|setLeft
argument_list|(
name|_titleArea
operator|.
name|right
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|r
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|setTop
argument_list|(
name|_titleArea
operator|.
name|bottom
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|r
operator|.
name|adjust
argument_list|(
name|fw
argument_list|,
literal|0
argument_list|,
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|)
expr_stmt|;
block|}
name|item
operator|->
name|setGeometry
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setVerticalTitleBar
name|void
name|QDockWidgetLayout
operator|::
name|setVerticalTitleBar
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
name|verticalTitleBar
condition|)
return|return;
name|verticalTitleBar
operator|=
name|b
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
name|parentWidget
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/****************************************************************************** ** QDockWidgetItem */
end_comment
begin_constructor
DECL|function|QDockWidgetItem
name|QDockWidgetItem
operator|::
name|QDockWidgetItem
parameter_list|(
name|QDockWidget
modifier|*
name|dockWidget
parameter_list|)
member_init_list|:
name|QWidgetItem
argument_list|(
name|dockWidget
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|minimumSize
name|QSize
name|QDockWidgetItem
operator|::
name|minimumSize
parameter_list|()
specifier|const
block|{
name|QSize
name|widgetMin
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|QLayoutItem
modifier|*
name|item
init|=
name|dockWidgetChildItem
argument_list|()
condition|)
name|widgetMin
operator|=
name|item
operator|->
name|minimumSize
argument_list|()
expr_stmt|;
return|return
name|dockWidgetLayout
argument_list|()
operator|->
name|sizeFromContent
argument_list|(
name|widgetMin
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|maximumSize
name|QSize
name|QDockWidgetItem
operator|::
name|maximumSize
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|QLayoutItem
modifier|*
name|item
init|=
name|dockWidgetChildItem
argument_list|()
condition|)
block|{
return|return
name|dockWidgetLayout
argument_list|()
operator|->
name|sizeFromContent
argument_list|(
name|item
operator|->
name|maximumSize
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|QSize
argument_list|(
name|QWIDGETSIZE_MAX
argument_list|,
name|QWIDGETSIZE_MAX
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSize
name|QDockWidgetItem
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|QLayoutItem
modifier|*
name|item
init|=
name|dockWidgetChildItem
argument_list|()
condition|)
block|{
return|return
name|dockWidgetLayout
argument_list|()
operator|->
name|sizeFromContent
argument_list|(
name|item
operator|->
name|sizeHint
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|QWidgetItem
operator|::
name|sizeHint
argument_list|()
return|;
block|}
block|}
end_function
begin_comment
comment|/****************************************************************************** ** QDockWidgetPrivate */
end_comment
begin_function
DECL|function|init
name|void
name|QDockWidgetPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
name|QDockWidgetLayout
modifier|*
name|layout
init|=
operator|new
name|QDockWidgetLayout
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|layout
operator|->
name|setSizeConstraint
argument_list|(
name|QLayout
operator|::
name|SetMinAndMaxSize
argument_list|)
expr_stmt|;
name|QAbstractButton
modifier|*
name|button
init|=
operator|new
name|QDockWidgetTitleButton
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|button
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_dockwidget_floatbutton"
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_toggleTopLevel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setWidgetForRole
argument_list|(
name|QDockWidgetLayout
operator|::
name|FloatButton
argument_list|,
name|button
argument_list|)
expr_stmt|;
name|button
operator|=
operator|new
name|QDockWidgetTitleButton
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|button
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_dockwidget_closebutton"
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setWidgetForRole
argument_list|(
name|QDockWidgetLayout
operator|::
name|CloseButton
argument_list|,
name|button
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACTION
name|toggleViewAction
operator|=
operator|new
name|QAction
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|toggleViewAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fixedWindowTitle
operator|=
name|qt_setWindowTitle_helperHelper
argument_list|(
name|q
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|toggleViewAction
operator|->
name|setText
argument_list|(
name|fixedWindowTitle
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|toggleViewAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_toggleView
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|updateButtons
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Initialize \a option with the values from this QDockWidget. This method     is useful for subclasses when they need a QStyleOptionDockWidget, but don't want     to fill in all the information themselves.      \sa QStyleOption::initFrom() */
end_comment
begin_function
DECL|function|initStyleOption
name|void
name|QDockWidget
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionDockWidget
modifier|*
name|option
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDockWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|option
condition|)
return|return;
name|QDockWidgetLayout
modifier|*
name|dwlayout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|()
argument_list|)
decl_stmt|;
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|option
operator|->
name|rect
operator|=
name|dwlayout
operator|->
name|titleArea
argument_list|()
expr_stmt|;
name|option
operator|->
name|title
operator|=
name|d
operator|->
name|fixedWindowTitle
expr_stmt|;
name|option
operator|->
name|closable
operator|=
name|hasFeature
argument_list|(
name|this
argument_list|,
name|QDockWidget
operator|::
name|DockWidgetClosable
argument_list|)
expr_stmt|;
name|option
operator|->
name|movable
operator|=
name|hasFeature
argument_list|(
name|this
argument_list|,
name|QDockWidget
operator|::
name|DockWidgetMovable
argument_list|)
expr_stmt|;
name|option
operator|->
name|floatable
operator|=
name|hasFeature
argument_list|(
name|this
argument_list|,
name|QDockWidget
operator|::
name|DockWidgetFloatable
argument_list|)
expr_stmt|;
name|QDockWidgetLayout
modifier|*
name|l
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|()
argument_list|)
decl_stmt|;
name|QStyleOptionDockWidgetV2
modifier|*
name|v2
init|=
name|qstyleoption_cast
argument_list|<
name|QStyleOptionDockWidgetV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|v2
operator|!=
literal|0
condition|)
name|v2
operator|->
name|verticalTitleBar
operator|=
name|l
operator|->
name|verticalTitleBar
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_toggleView
name|void
name|QDockWidgetPrivate
operator|::
name|_q_toggleView
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|==
name|q
operator|->
name|isHidden
argument_list|()
condition|)
block|{
if|if
condition|(
name|b
condition|)
name|q
operator|->
name|show
argument_list|()
expr_stmt|;
else|else
name|q
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateButtons
name|void
name|QDockWidgetPrivate
operator|::
name|updateButtons
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
name|QDockWidgetLayout
modifier|*
name|dwLayout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
decl_stmt|;
name|QStyleOptionDockWidget
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|bool
name|customTitleBar
init|=
name|dwLayout
operator|->
name|widgetForRole
argument_list|(
name|QDockWidgetLayout
operator|::
name|TitleBar
argument_list|)
operator|!=
literal|0
decl_stmt|;
name|bool
name|nativeDeco
init|=
name|dwLayout
operator|->
name|nativeWindowDeco
argument_list|()
decl_stmt|;
name|bool
name|hideButtons
init|=
name|nativeDeco
operator|||
name|customTitleBar
decl_stmt|;
name|bool
name|canClose
init|=
name|hasFeature
argument_list|(
name|this
argument_list|,
name|QDockWidget
operator|::
name|DockWidgetClosable
argument_list|)
decl_stmt|;
name|bool
name|canFloat
init|=
name|hasFeature
argument_list|(
name|this
argument_list|,
name|QDockWidget
operator|::
name|DockWidgetFloatable
argument_list|)
decl_stmt|;
name|QAbstractButton
modifier|*
name|button
init|=
name|qobject_cast
argument_list|<
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|dwLayout
operator|->
name|widgetForRole
argument_list|(
name|QDockWidgetLayout
operator|::
name|FloatButton
argument_list|)
argument_list|)
decl_stmt|;
name|button
operator|->
name|setIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarNormalButton
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|button
operator|->
name|setVisible
argument_list|(
name|canFloat
operator|&&
operator|!
name|hideButtons
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
comment|//: Accessible name for button undocking a dock widget (floating state)
name|button
operator|->
name|setAccessibleName
argument_list|(
name|QDockWidget
operator|::
name|tr
argument_list|(
literal|"Float"
argument_list|)
argument_list|)
expr_stmt|;
name|button
operator|->
name|setAccessibleDescription
argument_list|(
name|QDockWidget
operator|::
name|tr
argument_list|(
literal|"Undocks and re-attaches the dock widget"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|button
operator|=
name|qobject_cast
argument_list|<
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|dwLayout
operator|->
name|widgetForRole
argument_list|(
name|QDockWidgetLayout
operator|::
name|CloseButton
argument_list|)
argument_list|)
expr_stmt|;
name|button
operator|->
name|setIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarCloseButton
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|button
operator|->
name|setVisible
argument_list|(
name|canClose
operator|&&
operator|!
name|hideButtons
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
comment|//: Accessible name for button closing a dock widget
name|button
operator|->
name|setAccessibleName
argument_list|(
name|QDockWidget
operator|::
name|tr
argument_list|(
literal|"Close"
argument_list|)
argument_list|)
expr_stmt|;
name|button
operator|->
name|setAccessibleDescription
argument_list|(
name|QDockWidget
operator|::
name|tr
argument_list|(
literal|"Closes the dock widget"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_ContentsPropagated
argument_list|,
operator|(
name|canFloat
operator|||
name|canClose
operator|)
operator|&&
operator|!
name|hideButtons
argument_list|)
expr_stmt|;
name|layout
operator|->
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_toggleTopLevel
name|void
name|QDockWidgetPrivate
operator|::
name|_q_toggleTopLevel
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
name|q
operator|->
name|setFloating
argument_list|(
operator|!
name|q
operator|->
name|isFloating
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initDrag
name|void
name|QDockWidgetPrivate
operator|::
name|initDrag
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|,
name|bool
name|nca
parameter_list|)
block|{
if|if
condition|(
name|state
operator|!=
literal|0
condition|)
return|return;
name|QMainWindow
modifier|*
name|win
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|win
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QMainWindowLayout
modifier|*
name|layout
init|=
name|qt_mainwindow_layout
argument_list|(
name|win
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|layout
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|layout
operator|->
name|pluggingWidget
operator|!=
literal|0
condition|)
comment|// the main window is animating a docking operation
return|return;
name|state
operator|=
operator|new
name|QDockWidgetPrivate
operator|::
name|DragState
expr_stmt|;
name|state
operator|->
name|pressPos
operator|=
name|pos
expr_stmt|;
name|state
operator|->
name|dragging
operator|=
literal|false
expr_stmt|;
name|state
operator|->
name|widgetItem
operator|=
literal|0
expr_stmt|;
name|state
operator|->
name|ownWidgetItem
operator|=
literal|false
expr_stmt|;
name|state
operator|->
name|nca
operator|=
name|nca
expr_stmt|;
name|state
operator|->
name|ctrlDrag
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startDrag
name|void
name|QDockWidgetPrivate
operator|::
name|startDrag
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
literal|0
operator|||
name|state
operator|->
name|dragging
condition|)
return|return;
name|QMainWindowLayout
modifier|*
name|layout
init|=
name|qt_mainwindow_layout
argument_list|(
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|layout
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|state
operator|->
name|widgetItem
operator|=
name|layout
operator|->
name|unplug
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|widgetItem
operator|==
literal|0
condition|)
block|{
comment|/* I have a QMainWindow parent, but I was never inserted with             QMainWindow::addDockWidget, so the QMainWindowLayout has no             widget item for me. :( I have to create it myself, and then             delete it if I don't get dropped into a dock area. */
name|state
operator|->
name|widgetItem
operator|=
operator|new
name|QDockWidgetItem
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|state
operator|->
name|ownWidgetItem
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|->
name|ctrlDrag
condition|)
name|layout
operator|->
name|restore
argument_list|()
expr_stmt|;
name|state
operator|->
name|dragging
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endDrag
name|void
name|QDockWidgetPrivate
operator|::
name|endDrag
parameter_list|(
name|bool
name|abort
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|state
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|q
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|->
name|dragging
condition|)
block|{
name|QMainWindowLayout
modifier|*
name|mwLayout
init|=
name|qt_mainwindow_layout
argument_list|(
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|mwLayout
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|abort
operator|||
operator|!
name|mwLayout
operator|->
name|plug
argument_list|(
name|state
operator|->
name|widgetItem
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasFeature
argument_list|(
name|this
argument_list|,
name|QDockWidget
operator|::
name|DockWidgetFloatable
argument_list|)
condition|)
block|{
if|if
condition|(
name|state
operator|->
name|ownWidgetItem
condition|)
operator|delete
name|state
operator|->
name|widgetItem
expr_stmt|;
name|mwLayout
operator|->
name|restore
argument_list|()
expr_stmt|;
if|if
condition|(
name|isXcb
argument_list|()
condition|)
block|{
comment|// get rid of the X11BypassWindowManager window flag and activate the resizer
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|q
operator|->
name|windowFlags
argument_list|()
decl_stmt|;
name|flags
operator|&=
operator|~
name|Qt
operator|::
name|X11BypassWindowManagerHint
expr_stmt|;
name|q
operator|->
name|setWindowFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|setResizerActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QDockWidgetLayout
modifier|*
name|myLayout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
decl_stmt|;
name|setResizerActive
argument_list|(
name|myLayout
operator|->
name|widgetForRole
argument_list|(
name|QDockWidgetLayout
operator|::
name|TitleBar
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
name|undockedGeometry
operator|=
name|q
operator|->
name|geometry
argument_list|()
expr_stmt|;
name|q
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mwLayout
operator|->
name|revert
argument_list|(
name|state
operator|->
name|widgetItem
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|delete
name|state
expr_stmt|;
name|state
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setResizerActive
name|void
name|QDockWidgetPrivate
operator|::
name|setResizerActive
parameter_list|(
name|bool
name|active
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|active
operator|&&
operator|!
name|resizer
condition|)
block|{
name|resizer
operator|=
operator|new
name|QWidgetResizeHandler
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|resizer
operator|->
name|setMovingEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resizer
condition|)
name|resizer
operator|->
name|setActive
argument_list|(
name|QWidgetResizeHandler
operator|::
name|Resize
argument_list|,
name|active
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isAnimating
name|bool
name|QDockWidgetPrivate
operator|::
name|isAnimating
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QDockWidget
argument_list|)
expr_stmt|;
name|QMainWindow
modifier|*
name|mainWin
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|mainWin
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|QMainWindowLayout
modifier|*
name|mainWinLayout
init|=
name|qt_mainwindow_layout
argument_list|(
name|mainWin
argument_list|)
decl_stmt|;
if|if
condition|(
name|mainWinLayout
operator|==
literal|0
condition|)
return|return
literal|false
return|;
return|return
operator|(
name|void
operator|*
operator|)
name|mainWinLayout
operator|->
name|pluggingWidget
operator|==
operator|(
name|void
operator|*
operator|)
name|q
return|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|bool
name|QDockWidgetPrivate
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_MAINWINDOW
argument_list|)
name|Q_Q
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
name|QDockWidgetLayout
modifier|*
name|dwLayout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dwLayout
operator|->
name|nativeWindowDeco
argument_list|()
condition|)
block|{
name|QRect
name|titleArea
init|=
name|dwLayout
operator|->
name|titleArea
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
operator|||
operator|!
name|titleArea
operator|.
name|contains
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
operator|||
comment|// check if the tool window is movable... do nothing if it
comment|// is not (but allow moving if the window is floating)
operator|(
operator|!
name|hasFeature
argument_list|(
name|this
argument_list|,
name|QDockWidget
operator|::
name|DockWidgetMovable
argument_list|)
operator|&&
operator|!
name|q
operator|->
name|isFloating
argument_list|()
operator|)
operator|||
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
operator|==
literal|0
operator|||
name|isAnimating
argument_list|()
operator|||
name|state
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|initDrag
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
condition|)
name|state
operator|->
name|ctrlDrag
operator|=
name|hasFeature
argument_list|(
name|this
argument_list|,
name|QDockWidget
operator|::
name|DockWidgetFloatable
argument_list|)
operator|&&
name|event
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
comment|// !defined(QT_NO_MAINWINDOW)
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|mouseDoubleClickEvent
name|bool
name|QDockWidgetPrivate
operator|::
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QDockWidgetLayout
modifier|*
name|dwLayout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dwLayout
operator|->
name|nativeWindowDeco
argument_list|()
condition|)
block|{
name|QRect
name|titleArea
init|=
name|dwLayout
operator|->
name|titleArea
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|&&
name|titleArea
operator|.
name|contains
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
operator|&&
name|hasFeature
argument_list|(
name|this
argument_list|,
name|QDockWidget
operator|::
name|DockWidgetFloatable
argument_list|)
condition|)
block|{
name|_q_toggleTopLevel
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|bool
name|QDockWidgetPrivate
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|bool
name|ret
init|=
literal|false
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_MAINWINDOW
argument_list|)
name|Q_Q
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|state
condition|)
return|return
name|ret
return|;
name|QDockWidgetLayout
modifier|*
name|dwlayout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
decl_stmt|;
name|QMainWindowLayout
modifier|*
name|mwlayout
init|=
name|qt_mainwindow_layout
argument_list|(
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dwlayout
operator|->
name|nativeWindowDeco
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|state
operator|->
name|dragging
operator|&&
name|mwlayout
operator|->
name|pluggingWidget
operator|==
literal|0
operator|&&
operator|(
name|event
operator|->
name|pos
argument_list|()
operator|-
name|state
operator|->
name|pressPos
operator|)
operator|.
name|manhattanLength
argument_list|()
operator|>
name|QApplication
operator|::
name|startDragDistance
argument_list|()
condition|)
block|{
name|startDrag
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WIN
name|grabMouseWhileInWindow
argument_list|()
expr_stmt|;
else|#
directive|else
name|q
operator|->
name|grabMouse
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|ret
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|state
operator|->
name|dragging
operator|&&
operator|!
name|state
operator|->
name|nca
condition|)
block|{
name|QPoint
name|pos
init|=
name|event
operator|->
name|globalPos
argument_list|()
operator|-
name|state
operator|->
name|pressPos
decl_stmt|;
name|q
operator|->
name|move
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|&&
operator|!
name|state
operator|->
name|ctrlDrag
condition|)
name|mwlayout
operator|->
name|hover
argument_list|(
name|state
operator|->
name|widgetItem
argument_list|,
name|event
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
comment|// !defined(QT_NO_MAINWINDOW)
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|bool
name|QDockWidgetPrivate
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_MAINWINDOW
argument_list|)
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|&&
name|state
operator|&&
operator|!
name|state
operator|->
name|nca
condition|)
block|{
name|endDrag
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
comment|//filter out the event
block|}
endif|#
directive|endif
comment|// !defined(QT_NO_MAINWINDOW)
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|nonClientAreaMouseEvent
name|void
name|QDockWidgetPrivate
operator|::
name|nonClientAreaMouseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
name|int
name|fw
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DockWidgetFrameWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|QRect
name|geo
init|=
name|q
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QRect
name|titleRect
init|=
name|q
operator|->
name|frameGeometry
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
operator|(
name|features
operator|&
name|QDockWidget
operator|::
name|DockWidgetVerticalTitleBar
operator|)
condition|)
block|{
name|titleRect
operator|.
name|setTop
argument_list|(
name|geo
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|titleRect
operator|.
name|setBottom
argument_list|(
name|geo
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|titleRect
operator|.
name|setRight
argument_list|(
name|geo
operator|.
name|left
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|titleRect
operator|.
name|setLeft
argument_list|(
name|geo
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|titleRect
operator|.
name|setRight
argument_list|(
name|geo
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|titleRect
operator|.
name|setBottom
argument_list|(
name|geo
operator|.
name|top
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|titleRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|fw
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|NonClientAreaMouseButtonPress
case|:
if|if
condition|(
operator|!
name|titleRect
operator|.
name|contains
argument_list|(
name|event
operator|->
name|globalPos
argument_list|()
argument_list|)
condition|)
break|break;
if|if
condition|(
name|state
operator|!=
literal|0
condition|)
break|break;
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
operator|==
literal|0
condition|)
break|break;
if|if
condition|(
name|isAnimating
argument_list|()
condition|)
break|break;
name|initDrag
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
literal|0
condition|)
break|break;
ifdef|#
directive|ifdef
name|Q_WS_WIN
comment|// On Windows, NCA mouse events don't contain modifier info
name|state
operator|->
name|ctrlDrag
operator|=
name|GetKeyState
argument_list|(
name|VK_CONTROL
argument_list|)
operator|&
literal|0x8000
expr_stmt|;
else|#
directive|else
name|state
operator|->
name|ctrlDrag
operator|=
name|event
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ControlModifier
expr_stmt|;
endif|#
directive|endif
name|startDrag
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|NonClientAreaMouseMove
case|:
if|if
condition|(
name|state
operator|==
literal|0
operator|||
operator|!
name|state
operator|->
name|dragging
condition|)
break|break;
ifndef|#
directive|ifndef
name|Q_OS_MAC
if|if
condition|(
name|state
operator|->
name|nca
condition|)
block|{
name|endDrag
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
break|break;
case|case
name|QEvent
operator|::
name|NonClientAreaMouseButtonRelease
case|:
ifdef|#
directive|ifdef
name|Q_OS_MAC
if|if
condition|(
name|state
condition|)
name|endDrag
argument_list|()
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|QEvent
operator|::
name|NonClientAreaMouseButtonDblClick
case|:
name|_q_toggleTopLevel
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|moveEvent
name|void
name|QDockWidgetPrivate
operator|::
name|moveEvent
parameter_list|(
name|QMoveEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
literal|0
operator|||
operator|!
name|state
operator|->
name|dragging
operator|||
operator|!
name|state
operator|->
name|nca
operator|||
operator|!
name|q
operator|->
name|isWindow
argument_list|()
condition|)
return|return;
comment|// When the native window frame is being dragged, all we get is these mouse
comment|// move events.
if|if
condition|(
name|state
operator|->
name|ctrlDrag
condition|)
return|return;
name|QMainWindowLayout
modifier|*
name|layout
init|=
name|qt_mainwindow_layout
argument_list|(
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|layout
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QPoint
name|globalMousePos
init|=
name|event
operator|->
name|pos
argument_list|()
operator|+
name|state
operator|->
name|pressPos
decl_stmt|;
name|layout
operator|->
name|hover
argument_list|(
name|state
operator|->
name|widgetItem
argument_list|,
name|globalMousePos
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unplug
name|void
name|QDockWidgetPrivate
operator|::
name|unplug
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|rect
decl_stmt|;
name|r
operator|.
name|moveTopLeft
argument_list|(
name|q
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QDockWidgetLayout
modifier|*
name|dwLayout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
decl_stmt|;
if|if
condition|(
name|dwLayout
operator|->
name|nativeWindowDeco
argument_list|(
literal|true
argument_list|)
condition|)
name|r
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|dwLayout
operator|->
name|titleHeight
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|setWindowState
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|plug
name|void
name|QDockWidgetPrivate
operator|::
name|plug
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|setWindowState
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setWindowState
name|void
name|QDockWidgetPrivate
operator|::
name|setWindowState
parameter_list|(
name|bool
name|floating
parameter_list|,
name|bool
name|unplug
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|floating
operator|&&
name|parent
condition|)
block|{
name|QMainWindowLayout
modifier|*
name|mwlayout
init|=
name|qt_mainwindow_layout
argument_list|(
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mwlayout
operator|&&
name|mwlayout
operator|->
name|dockWidgetArea
argument_list|(
name|q
argument_list|)
operator|==
name|Qt
operator|::
name|NoDockWidgetArea
condition|)
return|return;
comment|// this dockwidget can't be redocked
block|}
name|bool
name|wasFloating
init|=
name|q
operator|->
name|isFloating
argument_list|()
decl_stmt|;
name|bool
name|hidden
init|=
name|q
operator|->
name|isHidden
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
condition|)
name|q
operator|->
name|hide
argument_list|()
expr_stmt|;
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|floating
condition|?
name|Qt
operator|::
name|Tool
else|:
name|Qt
operator|::
name|Widget
decl_stmt|;
name|QDockWidgetLayout
modifier|*
name|dwLayout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|nativeDeco
init|=
name|dwLayout
operator|->
name|nativeWindowDeco
argument_list|(
name|floating
argument_list|)
decl_stmt|;
if|if
condition|(
name|nativeDeco
condition|)
block|{
name|flags
operator||=
name|Qt
operator|::
name|CustomizeWindowHint
operator||
name|Qt
operator|::
name|WindowTitleHint
expr_stmt|;
if|if
condition|(
name|hasFeature
argument_list|(
name|this
argument_list|,
name|QDockWidget
operator|::
name|DockWidgetClosable
argument_list|)
condition|)
name|flags
operator||=
name|Qt
operator|::
name|WindowCloseButtonHint
expr_stmt|;
block|}
else|else
block|{
name|flags
operator||=
name|Qt
operator|::
name|FramelessWindowHint
expr_stmt|;
block|}
if|if
condition|(
name|unplug
condition|)
name|flags
operator||=
name|Qt
operator|::
name|X11BypassWindowManagerHint
expr_stmt|;
name|q
operator|->
name|setWindowFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rect
operator|.
name|isNull
argument_list|()
condition|)
name|q
operator|->
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|updateButtons
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hidden
condition|)
name|q
operator|->
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|floating
operator|!=
name|wasFloating
condition|)
block|{
emit|emit
name|q
operator|->
name|topLevelChanged
argument_list|(
name|floating
argument_list|)
emit|;
if|if
condition|(
operator|!
name|floating
operator|&&
name|parent
condition|)
block|{
name|QMainWindowLayout
modifier|*
name|mwlayout
init|=
name|qt_mainwindow_layout
argument_list|(
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mwlayout
condition|)
emit|emit
name|q
operator|->
name|dockLocationChanged
argument_list|(
name|mwlayout
operator|->
name|dockWidgetArea
argument_list|(
name|q
argument_list|)
argument_list|)
emit|;
block|}
block|}
name|setResizerActive
argument_list|(
operator|!
name|unplug
operator|&&
name|floating
operator|&&
operator|!
name|nativeDeco
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QDockWidget      \brief The QDockWidget class provides a widget that can be docked     inside a QMainWindow or floated as a top-level window on the     desktop.      \ingroup mainwindow-classes     \inmodule QtWidgets      QDockWidget provides the concept of dock widgets, also know as     tool palettes or utility windows.  Dock windows are secondary     windows placed in the \e {dock widget area} around the     \l{QMainWindow::centralWidget()}{central widget} in a     QMainWindow.      \image mainwindow-docks.png      Dock windows can be moved inside their current area, moved into     new areas and floated (e.g., undocked) by the end-user.  The     QDockWidget API allows the programmer to restrict the dock widgets     ability to move, float and close, as well as the areas in which     they can be placed.      \section1 Appearance      A QDockWidget consists of a title bar and the content area.  The     title bar displays the dock widgets     \l{QWidget::windowTitle()}{window title},     a \e float button and a \e close button.     Depending on the state of the QDockWidget, the \e float and \e     close buttons may be either disabled or not shown at all.      The visual appearance of the title bar and buttons is dependent     on the \l{QStyle}{style} in use.      A QDockWidget acts as a wrapper for its child widget, set with setWidget().     Custom size hints, minimum and maximum sizes and size policies should be     implemented in the child widget. QDockWidget will respect them, adjusting     its own constraints to include the frame and title. Size constraints     should not be set on the QDockWidget itself, because they change depending     on whether it is docked; a docked QDockWidget has no frame and a smaller title     bar.      \sa QMainWindow, {Dock Widgets Example} */
end_comment
begin_comment
comment|/*!     \enum QDockWidget::DockWidgetFeature      \value DockWidgetClosable   The dock widget can be closed. On some systems the dock                                 widget always has a close button when it's floating                                 (for example on MacOS 10.5).     \value DockWidgetMovable    The dock widget can be moved between docks                                 by the user.     \value DockWidgetFloatable  The dock widget can be detached from the                                 main window, and floated as an independent                                 window.     \value DockWidgetVerticalTitleBar The dock widget displays a vertical title                                   bar on its left side. This can be used to                                   increase the amount of vertical space in                                   a QMainWindow.     \value AllDockWidgetFeatures  (Deprecated) The dock widget can be closed, moved,                                   and floated. Since new features might be added in future                                   releases, the look and behavior of dock widgets might                                   change if you use this flag. Please specify individual                                   flags instead.     \value NoDockWidgetFeatures   The dock widget cannot be closed, moved,                                   or floated.      \omitvalue DockWidgetFeatureMask     \omitvalue Reserved */
end_comment
begin_comment
comment|/*!     \property QDockWidget::windowTitle     \brief the dock widget title (caption)      By default, this property contains an empty string. */
end_comment
begin_comment
comment|/*!     Constructs a QDockWidget with parent \a parent and window flags \a     flags. The dock widget will be placed in the left dock widget     area. */
end_comment
begin_constructor
DECL|function|QDockWidget
name|QDockWidget
operator|::
name|QDockWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QDockWidgetPrivate
argument_list|,
name|parent
argument_list|,
name|flags
argument_list|)
block|{
name|Q_D
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a QDockWidget with parent \a parent and window flags \a     flags. The dock widget will be placed in the left dock widget     area.      The window title is set to \a title. This title is used when the     QDockWidget is docked and undocked. It is also used in the context     menu provided by QMainWindow.      \sa setWindowTitle() */
end_comment
begin_constructor
DECL|function|QDockWidget
name|QDockWidget
operator|::
name|QDockWidget
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QDockWidgetPrivate
argument_list|,
name|parent
argument_list|,
name|flags
argument_list|)
block|{
name|Q_D
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
name|setWindowTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the dock widget. */
end_comment
begin_destructor
DECL|function|~QDockWidget
name|QDockWidget
operator|::
name|~
name|QDockWidget
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     Returns the widget for the dock widget. This function returns zero     if the widget has not been set.      \sa setWidget() */
end_comment
begin_function
DECL|function|widget
name|QWidget
modifier|*
name|QDockWidget
operator|::
name|widget
parameter_list|()
specifier|const
block|{
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|this
operator|->
name|layout
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|layout
operator|->
name|widgetForRole
argument_list|(
name|QDockWidgetLayout
operator|::
name|Content
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the widget for the dock widget to \a widget.      If the dock widget is visible when \a widget is added, you must     \l{QWidget::}{show()} it explicitly.      Note that you must add the layout of the \a widget before you call     this function; if not, the \a widget will not be visible.      \sa widget() */
end_comment
begin_function
DECL|function|setWidget
name|void
name|QDockWidget
operator|::
name|setWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|this
operator|->
name|layout
argument_list|()
argument_list|)
decl_stmt|;
name|layout
operator|->
name|setWidgetForRole
argument_list|(
name|QDockWidgetLayout
operator|::
name|Content
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QDockWidget::features     \brief whether the dock widget is movable, closable, and floatable      By default, this property is set to a combination of DockWidgetClosable,     DockWidgetMovable and DockWidgetFloatable.      \sa DockWidgetFeature */
end_comment
begin_function
DECL|function|setFeatures
name|void
name|QDockWidget
operator|::
name|setFeatures
parameter_list|(
name|QDockWidget
operator|::
name|DockWidgetFeatures
name|features
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
name|features
operator|&=
name|DockWidgetFeatureMask
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|features
operator|==
name|features
condition|)
return|return;
specifier|const
name|bool
name|closableChanged
init|=
operator|(
name|d
operator|->
name|features
operator|^
name|features
operator|)
operator|&
name|DockWidgetClosable
decl_stmt|;
name|d
operator|->
name|features
operator|=
name|features
expr_stmt|;
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|this
operator|->
name|layout
argument_list|()
argument_list|)
decl_stmt|;
name|layout
operator|->
name|setVerticalTitleBar
argument_list|(
name|features
operator|&
name|DockWidgetVerticalTitleBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateButtons
argument_list|()
expr_stmt|;
name|d
operator|->
name|toggleViewAction
operator|->
name|setEnabled
argument_list|(
operator|(
name|d
operator|->
name|features
operator|&
name|DockWidgetClosable
operator|)
operator|==
name|DockWidgetClosable
argument_list|)
expr_stmt|;
emit|emit
name|featuresChanged
argument_list|(
name|d
operator|->
name|features
argument_list|)
emit|;
name|update
argument_list|()
expr_stmt|;
if|if
condition|(
name|closableChanged
operator|&&
name|layout
operator|->
name|nativeWindowDeco
argument_list|()
condition|)
block|{
comment|//this ensures the native decoration is drawn
name|d
operator|->
name|setWindowState
argument_list|(
literal|true
comment|/*floating*/
argument_list|,
literal|true
comment|/*unplug*/
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|features
name|QDockWidget
operator|::
name|DockWidgetFeatures
name|QDockWidget
operator|::
name|features
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDockWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|features
return|;
block|}
end_function
begin_comment
comment|/*!     \property QDockWidget::floating     \brief whether the dock widget is floating      A floating dock widget is presented to the user as an independent     window "on top" of its parent QMainWindow, instead of being     docked in the QMainWindow.      By default, this property is \c true.      \sa isWindow() */
end_comment
begin_function
DECL|function|setFloating
name|void
name|QDockWidget
operator|::
name|setFloating
parameter_list|(
name|bool
name|floating
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
comment|// the initial click of a double-click may have started a drag...
if|if
condition|(
name|d
operator|->
name|state
operator|!=
literal|0
condition|)
name|d
operator|->
name|endDrag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|d
operator|->
name|undockedGeometry
decl_stmt|;
comment|// Keep position when undocking for the first time.
if|if
condition|(
name|floating
operator|&&
name|isVisible
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|isValid
argument_list|()
condition|)
name|r
operator|=
name|QRect
argument_list|(
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|setWindowState
argument_list|(
name|floating
argument_list|,
literal|false
argument_list|,
name|floating
condition|?
name|r
else|:
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|floating
operator|&&
name|r
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|x
argument_list|()
operator|<
literal|0
operator|||
name|y
argument_list|()
operator|<
literal|0
condition|)
comment|//may happen if we have been hidden
name|move
argument_list|(
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//we want it at the default position
block|}
block|}
end_function
begin_comment
comment|/*!     \property QDockWidget::allowedAreas     \brief areas where the dock widget may be placed      The default is Qt::AllDockWidgetAreas.      \sa Qt::DockWidgetArea */
end_comment
begin_function
DECL|function|setAllowedAreas
name|void
name|QDockWidget
operator|::
name|setAllowedAreas
parameter_list|(
name|Qt
operator|::
name|DockWidgetAreas
name|areas
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
name|areas
operator|&=
name|Qt
operator|::
name|DockWidgetArea_Mask
expr_stmt|;
if|if
condition|(
name|areas
operator|==
name|d
operator|->
name|allowedAreas
condition|)
return|return;
name|d
operator|->
name|allowedAreas
operator|=
name|areas
expr_stmt|;
emit|emit
name|allowedAreasChanged
argument_list|(
name|d
operator|->
name|allowedAreas
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|allowedAreas
name|Qt
operator|::
name|DockWidgetAreas
name|QDockWidget
operator|::
name|allowedAreas
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDockWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|allowedAreas
return|;
block|}
end_function
begin_comment
comment|/*!     \fn bool QDockWidget::isAreaAllowed(Qt::DockWidgetArea area) const      Returns \c true if this dock widget can be placed in the given \a area;     otherwise returns \c false. */
end_comment
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QDockWidget
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|this
operator|->
name|layout
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|ModifiedChange
case|:
case|case
name|QEvent
operator|::
name|WindowTitleChange
case|:
name|update
argument_list|(
name|layout
operator|->
name|titleArea
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACTION
name|d
operator|->
name|fixedWindowTitle
operator|=
name|qt_setWindowTitle_helperHelper
argument_list|(
name|windowTitle
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|toggleViewAction
operator|->
name|setText
argument_list|(
name|d
operator|->
name|fixedWindowTitle
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
block|{
name|QMainWindow
modifier|*
name|win
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|QMainWindowLayout
modifier|*
name|winLayout
init|=
name|qt_mainwindow_layout
argument_list|(
name|win
argument_list|)
condition|)
block|{
if|if
condition|(
name|QDockAreaLayoutInfo
modifier|*
name|info
init|=
name|winLayout
operator|->
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|info
argument_list|(
name|this
argument_list|)
condition|)
name|info
operator|->
name|updateTabBar
argument_list|()
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_TABBAR
break|break;
default|default:
break|break;
block|}
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|closeEvent
name|void
name|QDockWidget
operator|::
name|closeEvent
parameter_list|(
name|QCloseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|state
condition|)
name|d
operator|->
name|endDrag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QWidget
operator|::
name|closeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QDockWidget
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|event
argument_list|)
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|this
operator|->
name|layout
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|customTitleBar
init|=
name|layout
operator|->
name|widgetForRole
argument_list|(
name|QDockWidgetLayout
operator|::
name|TitleBar
argument_list|)
operator|!=
literal|0
decl_stmt|;
name|bool
name|nativeDeco
init|=
name|layout
operator|->
name|nativeWindowDeco
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nativeDeco
operator|&&
operator|!
name|customTitleBar
condition|)
block|{
name|QStylePainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// ### Add PixelMetric to change spacers, so style may show border
comment|// when not floating.
if|if
condition|(
name|isFloating
argument_list|()
condition|)
block|{
name|QStyleOptionFrame
name|framOpt
decl_stmt|;
name|framOpt
operator|.
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameDockWidget
argument_list|,
name|framOpt
argument_list|)
expr_stmt|;
block|}
comment|// Title must be painted after the frame, since the areas overlap, and
comment|// the title may wish to extend out to all sides (eg. XP style)
name|QStyleOptionDockWidgetV2
name|titleOpt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|titleOpt
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_DockWidgetTitle
argument_list|,
name|titleOpt
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QDockWidget
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
name|QMainWindow
modifier|*
name|win
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
name|QMainWindowLayout
modifier|*
name|layout
init|=
name|qt_mainwindow_layout
argument_list|(
name|win
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_ACTION
case|case
name|QEvent
operator|::
name|Hide
case|:
if|if
condition|(
name|layout
operator|!=
literal|0
condition|)
name|layout
operator|->
name|keepSize
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|toggleViewAction
operator|->
name|setChecked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
emit|emit
name|visibilityChanged
argument_list|(
literal|false
argument_list|)
emit|;
break|break;
case|case
name|QEvent
operator|::
name|Show
case|:
block|{
name|d
operator|->
name|toggleViewAction
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QPoint
name|parentTopLeft
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isWindow
argument_list|()
condition|)
block|{
if|if
condition|(
specifier|const
name|QWindow
modifier|*
name|window
init|=
name|windowHandle
argument_list|()
condition|)
name|parentTopLeft
operator|=
name|window
operator|->
name|screen
argument_list|()
operator|->
name|availableVirtualGeometry
argument_list|()
operator|.
name|topLeft
argument_list|()
expr_stmt|;
else|else
name|parentTopLeft
operator|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|availableVirtualGeometry
argument_list|()
operator|.
name|topLeft
argument_list|()
expr_stmt|;
block|}
emit|emit
name|visibilityChanged
argument_list|(
name|geometry
argument_list|()
operator|.
name|right
argument_list|()
operator|>=
name|parentTopLeft
operator|.
name|x
argument_list|()
operator|&&
name|geometry
argument_list|()
operator|.
name|bottom
argument_list|()
operator|>=
name|parentTopLeft
operator|.
name|y
argument_list|()
argument_list|)
emit|;
block|}
break|break;
endif|#
directive|endif
case|case
name|QEvent
operator|::
name|ApplicationLayoutDirectionChange
case|:
case|case
name|QEvent
operator|::
name|LayoutDirectionChange
case|:
case|case
name|QEvent
operator|::
name|StyleChange
case|:
case|case
name|QEvent
operator|::
name|ParentChange
case|:
name|d
operator|->
name|updateButtons
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ZOrderChange
case|:
block|{
name|bool
name|onTop
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|win
operator|!=
literal|0
condition|)
block|{
specifier|const
name|QObjectList
modifier|&
name|siblings
init|=
name|win
operator|->
name|children
argument_list|()
decl_stmt|;
name|onTop
operator|=
name|siblings
operator|.
name|count
argument_list|()
operator|>
literal|0
operator|&&
name|siblings
operator|.
name|last
argument_list|()
operator|==
operator|(
name|QObject
operator|*
operator|)
name|this
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isFloating
argument_list|()
operator|&&
name|layout
operator|!=
literal|0
operator|&&
name|onTop
condition|)
name|layout
operator|->
name|raise
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|WindowActivate
case|:
case|case
name|QEvent
operator|::
name|WindowDeactivate
case|:
name|update
argument_list|(
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|this
operator|->
name|layout
argument_list|()
argument_list|)
operator|->
name|titleArea
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ContextMenu
case|:
if|if
condition|(
name|d
operator|->
name|state
condition|)
block|{
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
comment|// return true after calling the handler since we don't want
comment|// them to be passed onto the default handlers
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
if|if
condition|(
name|d
operator|->
name|mousePressEvent
argument_list|(
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
if|if
condition|(
name|d
operator|->
name|mouseDoubleClickEvent
argument_list|(
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
break|break;
case|case
name|QEvent
operator|::
name|MouseMove
case|:
if|if
condition|(
name|d
operator|->
name|mouseMoveEvent
argument_list|(
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
break|break;
ifdef|#
directive|ifdef
name|Q_WS_WIN
case|case
name|QEvent
operator|::
name|Leave
case|:
if|if
condition|(
name|d
operator|->
name|state
operator|!=
literal|0
operator|&&
name|d
operator|->
name|state
operator|->
name|dragging
operator|&&
operator|!
name|d
operator|->
name|state
operator|->
name|nca
condition|)
block|{
comment|// This is a workaround for loosing the mouse on Vista.
name|QPoint
name|pos
init|=
name|QCursor
operator|::
name|pos
argument_list|()
decl_stmt|;
name|QMouseEvent
name|fake
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|mapFromGlobal
argument_list|(
name|pos
argument_list|)
argument_list|,
name|pos
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|QApplication
operator|::
name|mouseButtons
argument_list|()
argument_list|,
name|QApplication
operator|::
name|keyboardModifiers
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|mouseMoveEvent
argument_list|(
operator|&
name|fake
argument_list|)
expr_stmt|;
block|}
break|break;
endif|#
directive|endif
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
if|if
condition|(
name|d
operator|->
name|mouseReleaseEvent
argument_list|(
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
break|break;
case|case
name|QEvent
operator|::
name|NonClientAreaMouseMove
case|:
case|case
name|QEvent
operator|::
name|NonClientAreaMouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|NonClientAreaMouseButtonRelease
case|:
case|case
name|QEvent
operator|::
name|NonClientAreaMouseButtonDblClick
case|:
name|d
operator|->
name|nonClientAreaMouseEvent
argument_list|(
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|Move
case|:
name|d
operator|->
name|moveEvent
argument_list|(
cast|static_cast
argument_list|<
name|QMoveEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|Resize
case|:
comment|// if the mainwindow is plugging us, we don't want to update undocked geometry
if|if
condition|(
name|isFloating
argument_list|()
operator|&&
name|layout
operator|!=
literal|0
operator|&&
name|layout
operator|->
name|pluggingWidget
operator|!=
name|this
condition|)
name|d
operator|->
name|undockedGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACTION
end_ifndef
begin_comment
comment|/*!   Returns a checkable action that can be used to show or close this   dock widget.    The action's text is set to the dock widget's window title.    \sa QAction::text, QWidget::windowTitle  */
end_comment
begin_function
DECL|function|toggleViewAction
name|QAction
modifier|*
name|QDockWidget
operator|::
name|toggleViewAction
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDockWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|toggleViewAction
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACTION
end_comment
begin_comment
comment|/*!     \fn void QDockWidget::featuresChanged(QDockWidget::DockWidgetFeatures features)      This signal is emitted when the \l features property changes. The     \a features parameter gives the new value of the property. */
end_comment
begin_comment
comment|/*!     \fn void QDockWidget::topLevelChanged(bool topLevel)      This signal is emitted when the \l floating property changes.     The \a topLevel parameter is true if the dock widget is now floating;     otherwise it is false.      \sa isWindow() */
end_comment
begin_comment
comment|/*!     \fn void QDockWidget::allowedAreasChanged(Qt::DockWidgetAreas allowedAreas)      This signal is emitted when the \l allowedAreas property changes. The     \a allowedAreas parameter gives the new value of the property. */
end_comment
begin_comment
comment|/*!     \fn void QDockWidget::visibilityChanged(bool visible)     \since 4.3      This signal is emitted when the dock widget becomes \a visible (or     invisible). This happens when the widget is hidden or shown, as     well as when it is docked in a tabbed dock area and its tab     becomes selected or unselected. */
end_comment
begin_comment
comment|/*!     \fn void QDockWidget::dockLocationChanged(Qt::DockWidgetArea area)     \since 4.3      This signal is emitted when the dock widget is moved to another     dock \a area, or is moved to a different location in its current     dock area. This happens when the dock widget is moved     programmatically or is dragged to a new location by the user. */
end_comment
begin_comment
comment|/*!     \since 4.3      Sets an arbitrary \a widget as the dock widget's title bar. If \a widget     is 0, any custom title bar widget previously set on the dock widget is     removed, but not deleted, and the default title bar will be used     instead.      If a title bar widget is set, QDockWidget will not use native window     decorations when it is floated.      Here are some tips for implementing custom title bars:      \list     \li Mouse events that are not explicitly handled by the title bar widget        must be ignored by calling QMouseEvent::ignore(). These events then        propagate to the QDockWidget parent, which handles them in the usual        manner, moving when the title bar is dragged, docking and undocking        when it is double-clicked, etc.      \li When DockWidgetVerticalTitleBar is set on QDockWidget, the title        bar widget is repositioned accordingly. In resizeEvent(), the title        bar should check what orientation it should assume:        \snippet code/src_gui_widgets_qdockwidget.cpp 0      \li The title bar widget must have a valid QWidget::sizeHint() and        QWidget::minimumSizeHint(). These functions should take into account        the current orientation of the title bar.      \li It is not possible to remove a title bar from a dock widget. However,        a similar effect can be achieved by setting a default constructed        QWidget as the title bar widget.     \endlist      Using qobject_cast() as shown above, the title bar widget has full access     to its parent QDockWidget. Hence it can perform such operations as docking     and hiding in response to user actions.      \sa titleBarWidget(), DockWidgetVerticalTitleBar */
end_comment
begin_function
DECL|function|setTitleBarWidget
name|void
name|QDockWidget
operator|::
name|setTitleBarWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDockWidget
argument_list|)
expr_stmt|;
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|this
operator|->
name|layout
argument_list|()
argument_list|)
decl_stmt|;
name|layout
operator|->
name|setWidgetForRole
argument_list|(
name|QDockWidgetLayout
operator|::
name|TitleBar
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateButtons
argument_list|()
expr_stmt|;
if|if
condition|(
name|isWindow
argument_list|()
condition|)
block|{
comment|//this ensures the native decoration is drawn
name|d
operator|->
name|setWindowState
argument_list|(
literal|true
comment|/*floating*/
argument_list|,
literal|true
comment|/*unplug*/
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \since 4.3     Returns the custom title bar widget set on the QDockWidget, or 0 if no     custom title bar has been set.      \sa setTitleBarWidget() */
end_comment
begin_function
DECL|function|titleBarWidget
name|QWidget
modifier|*
name|QDockWidget
operator|::
name|titleBarWidget
parameter_list|()
specifier|const
block|{
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|this
operator|->
name|layout
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|layout
operator|->
name|widgetForRole
argument_list|(
name|QDockWidgetLayout
operator|::
name|TitleBar
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qdockwidget.moc"
end_include
begin_include
include|#
directive|include
file|"moc_qdockwidget.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DOCKWIDGET
end_comment
end_unit
