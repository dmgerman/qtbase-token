begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QABSTRACTBUTTON_H
end_ifndef
begin_define
DECL|macro|QABSTRACTBUTTON_H
define|#
directive|define
name|QABSTRACTBUTTON_H
end_define
begin_include
include|#
directive|include
file|<QtWidgets/qicon.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/qkeysequence.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qwidget.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
name|class
name|QButtonGroup
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QAbstractButtonPrivate
name|class
name|QAbstractButtonPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QAbstractButton
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|QString text READ text WRITE setText
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QIcon icon READ icon WRITE setIcon
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QSize iconSize READ iconSize WRITE setIconSize
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|Q_PROPERTY
argument_list|(
argument|QKeySequence shortcut READ shortcut WRITE setShortcut
argument_list|)
endif|#
directive|endif
name|Q_PROPERTY
argument_list|(
argument|bool checkable READ isCheckable WRITE setCheckable
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool checked READ isChecked WRITE setChecked DESIGNABLE isCheckable NOTIFY toggled USER true
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool autoRepeat READ autoRepeat WRITE setAutoRepeat
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool autoExclusive READ autoExclusive WRITE setAutoExclusive
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int autoRepeatDelay READ autoRepeatDelay WRITE setAutoRepeatDelay
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int autoRepeatInterval READ autoRepeatInterval WRITE setAutoRepeatInterval
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool down READ isDown WRITE setDown DESIGNABLE false
argument_list|)
name|public
operator|:
name|explicit
name|QAbstractButton
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QAbstractButton
argument_list|()
block|;
name|void
name|setText
argument_list|(
specifier|const
name|QString
operator|&
name|text
argument_list|)
block|;
name|QString
name|text
argument_list|()
specifier|const
block|;
name|void
name|setIcon
argument_list|(
specifier|const
name|QIcon
operator|&
name|icon
argument_list|)
block|;
name|QIcon
name|icon
argument_list|()
specifier|const
block|;
name|QSize
name|iconSize
argument_list|()
specifier|const
block|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|void
name|setShortcut
argument_list|(
specifier|const
name|QKeySequence
operator|&
name|key
argument_list|)
block|;
name|QKeySequence
name|shortcut
argument_list|()
specifier|const
block|;
endif|#
directive|endif
name|void
name|setCheckable
argument_list|(
name|bool
argument_list|)
block|;
name|bool
name|isCheckable
argument_list|()
specifier|const
block|;
name|bool
name|isChecked
argument_list|()
specifier|const
block|;
name|void
name|setDown
argument_list|(
name|bool
argument_list|)
block|;
name|bool
name|isDown
argument_list|()
specifier|const
block|;
name|void
name|setAutoRepeat
argument_list|(
name|bool
argument_list|)
block|;
name|bool
name|autoRepeat
argument_list|()
specifier|const
block|;
name|void
name|setAutoRepeatDelay
argument_list|(
name|int
argument_list|)
block|;
name|int
name|autoRepeatDelay
argument_list|()
specifier|const
block|;
name|void
name|setAutoRepeatInterval
argument_list|(
name|int
argument_list|)
block|;
name|int
name|autoRepeatInterval
argument_list|()
specifier|const
block|;
name|void
name|setAutoExclusive
argument_list|(
name|bool
argument_list|)
block|;
name|bool
name|autoExclusive
argument_list|()
specifier|const
block|;
ifndef|#
directive|ifndef
name|QT_NO_BUTTONGROUP
name|QButtonGroup
operator|*
name|group
argument_list|()
specifier|const
block|;
endif|#
directive|endif
name|public
name|Q_SLOTS
operator|:
name|void
name|setIconSize
argument_list|(
specifier|const
name|QSize
operator|&
name|size
argument_list|)
block|;
name|void
name|animateClick
argument_list|(
argument|int msec =
literal|100
argument_list|)
block|;
name|void
name|click
argument_list|()
block|;
name|void
name|toggle
argument_list|()
block|;
name|void
name|setChecked
argument_list|(
name|bool
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|pressed
argument_list|()
block|;
name|void
name|released
argument_list|()
block|;
name|void
name|clicked
argument_list|(
argument|bool checked = false
argument_list|)
block|;
name|void
name|toggled
argument_list|(
argument|bool checked
argument_list|)
block|;
name|protected
operator|:
name|virtual
name|void
name|paintEvent
argument_list|(
name|QPaintEvent
operator|*
name|e
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|bool
name|hitButton
argument_list|(
argument|const QPoint&pos
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|checkStateSet
argument_list|()
block|;
name|virtual
name|void
name|nextCheckState
argument_list|()
block|;
name|bool
name|event
argument_list|(
name|QEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|keyPressEvent
argument_list|(
name|QKeyEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|keyReleaseEvent
argument_list|(
name|QKeyEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|mousePressEvent
argument_list|(
name|QMouseEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|mouseReleaseEvent
argument_list|(
name|QMouseEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|mouseMoveEvent
argument_list|(
name|QMouseEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|focusInEvent
argument_list|(
name|QFocusEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|focusOutEvent
argument_list|(
name|QFocusEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|changeEvent
argument_list|(
name|QEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|timerEvent
argument_list|(
name|QTimerEvent
operator|*
name|e
argument_list|)
block|;
name|protected
operator|:
name|QAbstractButton
argument_list|(
name|QAbstractButtonPrivate
operator|&
name|dd
argument_list|,
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|private
operator|:
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QAbstractButton
argument_list|)
name|Q_DISABLE_COPY
argument_list|(
argument|QAbstractButton
argument_list|)
name|friend
name|class
name|QButtonGroup
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QABSTRACTBUTTON_H
end_comment
end_unit
