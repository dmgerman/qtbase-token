begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMDISUBWINDOW_P_H
end_ifndef
begin_define
DECL|macro|QMDISUBWINDOW_P_H
define|#
directive|define
name|QMDISUBWINDOW_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"qmdisubwindow.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MDIAREA
end_ifndef
begin_include
include|#
directive|include
file|<QStyle>
end_include
begin_include
include|#
directive|include
file|<QStyleOptionTitleBar>
end_include
begin_include
include|#
directive|include
file|<QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QSizeGrip>
end_include
begin_include
include|#
directive|include
file|<QPointer>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QVBoxLayout
name|class
name|QVBoxLayout
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMouseEvent
name|class
name|QMouseEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|namespace
name|QMdi
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|ControlElement
operator|:
name|public
name|T
block|{
name|public
operator|:
name|ControlElement
argument_list|(
name|QMdiSubWindow
operator|*
name|child
argument_list|)
operator|:
name|T
argument_list|(
argument|child
argument_list|,
literal|0
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|child
argument_list|)
block|;
name|mdiChild
operator|=
name|child
block|;     }
name|void
operator|*
name|qt_metacast
argument_list|(
argument|const char *classname
argument_list|)
block|{
if|if
condition|(
name|classname
operator|&&
name|strcmp
argument_list|(
name|classname
argument_list|,
literal|"ControlElement"
argument_list|)
operator|==
literal|0
condition|)
return|return
name|this
return|;
return|return
literal|0
return|;
block|}
name|QPointer
operator|<
name|QMdiSubWindow
operator|>
name|mdiChild
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|ControlContainer
range|:
name|public
name|QObject
block|{
name|public
operator|:
name|ControlContainer
argument_list|(
name|QMdiSubWindow
operator|*
name|mdiChild
argument_list|)
block|;
operator|~
name|ControlContainer
argument_list|()
block|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
name|void
name|showButtonsInMenuBar
argument_list|(
name|QMenuBar
operator|*
name|menuBar
argument_list|)
block|;
name|void
name|removeButtonsFromMenuBar
argument_list|(
name|QMenuBar
operator|*
name|menuBar
operator|=
literal|0
argument_list|)
block|;
name|QMenuBar
operator|*
name|menuBar
argument_list|()
specifier|const
block|{
return|return
name|m_menuBar
return|;
block|}
endif|#
directive|endif
name|void
name|updateWindowIcon
argument_list|(
specifier|const
name|QIcon
operator|&
name|windowIcon
argument_list|)
block|;
name|QWidget
operator|*
name|controllerWidget
argument_list|()
specifier|const
block|{
return|return
name|m_controllerWidget
return|;
block|}
name|QWidget
operator|*
name|systemMenuLabel
argument_list|()
specifier|const
block|{
return|return
name|m_menuLabel
return|;
block|}
name|private
operator|:
name|QPointer
operator|<
name|QWidget
operator|>
name|previousLeft
block|;
name|QPointer
operator|<
name|QWidget
operator|>
name|previousRight
block|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
name|QPointer
operator|<
name|QMenuBar
operator|>
name|m_menuBar
block|;
endif|#
directive|endif
name|QPointer
operator|<
name|QWidget
operator|>
name|m_controllerWidget
block|;
name|QPointer
operator|<
name|QWidget
operator|>
name|m_menuLabel
block|;
name|QPointer
operator|<
name|QMdiSubWindow
operator|>
name|mdiChild
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
unit|}
comment|// namespace QMdi
end_comment
begin_label
unit|class
name|QMdiSubWindowPrivate
label|:
end_label
begin_decl_stmt
name|public
name|QWidgetPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QMdiSubWindow
argument_list|)
name|public
label|:
comment|// Enums and typedefs.
enum|enum
name|Operation
block|{
name|None
block|,
name|Move
block|,
name|TopResize
block|,
name|BottomResize
block|,
name|LeftResize
block|,
name|RightResize
block|,
name|TopLeftResize
block|,
name|TopRightResize
block|,
name|BottomLeftResize
block|,
name|BottomRightResize
block|}
enum|;
enum|enum
name|ChangeFlag
block|{
name|HMove
init|=
literal|0x01
block|,
name|VMove
init|=
literal|0x02
block|,
name|HResize
init|=
literal|0x04
block|,
name|VResize
init|=
literal|0x08
block|,
name|HResizeReverse
init|=
literal|0x10
block|,
name|VResizeReverse
init|=
literal|0x20
block|}
enum|;
enum|enum
name|WindowStateAction
block|{
name|RestoreAction
block|,
name|MoveAction
block|,
name|ResizeAction
block|,
name|MinimizeAction
block|,
name|MaximizeAction
block|,
name|StayOnTopAction
block|,
name|CloseAction
block|,
comment|/* Add new states _above_ this line! */
name|NumWindowStateActions
block|}
enum|;
struct|struct
name|OperationInfo
block|{
name|uint
name|changeFlags
decl_stmt|;
name|Qt
operator|::
name|CursorShape
name|cursorShape
expr_stmt|;
name|QRegion
name|region
decl_stmt|;
name|bool
name|hover
decl_stmt|;
name|OperationInfo
argument_list|(
argument|uint changeFlags
argument_list|,
argument|Qt::CursorShape cursorShape
argument_list|,
argument|bool hover = true
argument_list|)
block|:
name|changeFlags
argument_list|(
name|changeFlags
argument_list|)
operator|,
name|cursorShape
argument_list|(
name|cursorShape
argument_list|)
operator|,
name|hover
argument_list|(
argument|hover
argument_list|)
block|{}
block|}
struct|;
typedef|typedef
name|QMap
operator|<
name|Operation
operator|,
name|OperationInfo
operator|>
name|OperationInfoMap
expr_stmt|;
name|QMdiSubWindowPrivate
argument_list|()
expr_stmt|;
comment|// Variables.
name|QPointer
operator|<
name|QWidget
operator|>
name|baseWidget
expr_stmt|;
name|QPointer
operator|<
name|QWidget
operator|>
name|restoreFocusWidget
expr_stmt|;
name|QPointer
operator|<
name|QMdi
operator|::
name|ControlContainer
operator|>
name|controlContainer
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
name|QPointer
operator|<
name|QSizeGrip
operator|>
name|sizeGrip
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
name|QRubberBand
modifier|*
name|rubberBand
decl_stmt|;
endif|#
directive|endif
name|QPoint
name|mousePressPosition
decl_stmt|;
name|QRect
name|oldGeometry
decl_stmt|;
name|QSize
name|internalMinimumSize
decl_stmt|;
name|QSize
name|userMinimumSize
decl_stmt|;
name|QSize
name|restoreSize
decl_stmt|;
name|bool
name|resizeEnabled
decl_stmt|;
name|bool
name|moveEnabled
decl_stmt|;
name|bool
name|isInInteractiveMode
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
name|bool
name|isInRubberBandMode
decl_stmt|;
endif|#
directive|endif
name|bool
name|isShadeMode
decl_stmt|;
name|bool
name|ignoreWindowTitleChange
decl_stmt|;
name|bool
name|ignoreNextActivationEvent
decl_stmt|;
name|bool
name|activationEnabled
decl_stmt|;
name|bool
name|isShadeRequestFromMinimizeMode
decl_stmt|;
name|bool
name|isMaximizeMode
decl_stmt|;
name|bool
name|isWidgetHiddenByUs
decl_stmt|;
name|bool
name|isActive
decl_stmt|;
name|bool
name|isExplicitlyDeactivated
decl_stmt|;
name|int
name|keyboardSingleStep
decl_stmt|;
name|int
name|keyboardPageStep
decl_stmt|;
name|int
name|resizeTimerId
decl_stmt|;
name|Operation
name|currentOperation
decl_stmt|;
name|QStyle
operator|::
name|SubControl
name|hoveredSubControl
expr_stmt|;
name|QStyle
operator|::
name|SubControl
name|activeSubControl
expr_stmt|;
name|Qt
operator|::
name|FocusReason
name|focusInReason
expr_stmt|;
name|OperationInfoMap
name|operationMap
decl_stmt|;
name|QPointer
operator|<
name|QMenu
operator|>
name|systemMenu
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACTIONS
name|QPointer
operator|<
name|QAction
operator|>
name|actions
index|[
name|NumWindowStateActions
index|]
expr_stmt|;
endif|#
directive|endif
name|QMdiSubWindow
operator|::
name|SubWindowOptions
name|options
expr_stmt|;
name|QString
name|lastChildWindowTitle
decl_stmt|;
name|QPalette
name|titleBarPalette
decl_stmt|;
name|QString
name|windowTitle
decl_stmt|;
name|QFont
name|font
decl_stmt|;
name|QIcon
name|menuIcon
decl_stmt|;
name|QStyleOptionTitleBar
name|cachedStyleOptions
decl_stmt|;
name|QString
name|originalTitle
decl_stmt|;
comment|// Slots.
name|void
name|_q_updateStaysOnTopHint
parameter_list|()
function_decl|;
name|void
name|_q_enterInteractiveMode
parameter_list|()
function_decl|;
name|void
name|_q_processFocusChanged
parameter_list|(
name|QWidget
modifier|*
name|old
parameter_list|,
name|QWidget
modifier|*
name|now
parameter_list|)
function_decl|;
comment|// Functions.
name|void
name|leaveInteractiveMode
parameter_list|()
function_decl|;
name|void
name|removeBaseWidget
parameter_list|()
function_decl|;
name|void
name|initOperationMap
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|void
name|createSystemMenu
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|updateCursor
parameter_list|()
function_decl|;
name|void
name|updateDirtyRegions
parameter_list|()
function_decl|;
name|void
name|updateGeometryConstraints
parameter_list|()
function_decl|;
name|void
name|updateMask
parameter_list|()
function_decl|;
name|void
name|setNewGeometry
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
function_decl|;
name|void
name|setMinimizeMode
parameter_list|()
function_decl|;
name|void
name|setNormalMode
parameter_list|()
function_decl|;
name|void
name|setMaximizeMode
parameter_list|()
function_decl|;
name|void
name|setActive
parameter_list|(
name|bool
name|activate
parameter_list|,
name|bool
name|changeFocus
init|=
name|true
parameter_list|)
function_decl|;
name|void
name|processClickedSubControl
parameter_list|()
function_decl|;
name|QRegion
name|getRegion
argument_list|(
name|Operation
name|operation
argument_list|)
decl|const
decl_stmt|;
name|Operation
name|getOperation
argument_list|(
specifier|const
name|QPoint
operator|&
name|pos
argument_list|)
decl|const
decl_stmt|;
name|QStyleOptionTitleBar
name|titleBarOptions
argument_list|()
specifier|const
expr_stmt|;
name|void
name|ensureWindowState
argument_list|(
name|Qt
operator|::
name|WindowState
name|state
argument_list|)
decl_stmt|;
name|int
name|titleBarHeight
argument_list|(
specifier|const
name|QStyleOptionTitleBar
operator|&
name|options
argument_list|)
decl|const
decl_stmt|;
name|void
name|sizeParameters
argument_list|(
name|int
operator|*
name|margin
argument_list|,
name|int
operator|*
name|minWidth
argument_list|)
decl|const
decl_stmt|;
name|bool
name|drawTitleBarWhenMaximized
argument_list|()
specifier|const
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
name|QMenuBar
operator|*
name|menuBar
argument_list|()
specifier|const
expr_stmt|;
name|void
name|showButtonsInMenuBar
parameter_list|(
name|QMenuBar
modifier|*
name|menuBar
parameter_list|)
function_decl|;
name|void
name|removeButtonsFromMenuBar
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|updateWindowTitle
parameter_list|(
name|bool
name|requestFromChild
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
name|void
name|enterRubberBandMode
parameter_list|()
function_decl|;
name|void
name|leaveRubberBandMode
parameter_list|()
function_decl|;
endif|#
directive|endif
name|QPalette
name|desktopPalette
argument_list|()
specifier|const
expr_stmt|;
name|void
name|updateActions
parameter_list|()
function_decl|;
name|void
name|setFocusWidget
parameter_list|()
function_decl|;
name|bool
name|restoreFocus
parameter_list|()
function_decl|;
name|void
name|storeFocusWidget
parameter_list|()
function_decl|;
name|void
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|WindowFlags
name|windowFlags
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|void
name|setVisible
parameter_list|(
name|WindowStateAction
parameter_list|,
name|bool
name|visible
init|=
name|true
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_ACTION
name|void
name|setEnabled
parameter_list|(
name|WindowStateAction
parameter_list|,
name|bool
name|enable
init|=
name|true
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|void
name|addToSystemMenu
parameter_list|(
name|WindowStateAction
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|char
modifier|*
name|slot
parameter_list|)
function_decl|;
endif|#
directive|endif
endif|#
directive|endif
comment|// QT_NO_ACTION
name|QSize
name|iconSize
argument_list|()
specifier|const
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
name|void
name|setSizeGrip
parameter_list|(
name|QSizeGrip
modifier|*
name|sizeGrip
parameter_list|)
function_decl|;
name|void
name|setSizeGripVisible
argument_list|(
name|bool
name|visible
operator|=
name|true
argument_list|)
decl|const
decl_stmt|;
endif|#
directive|endif
name|void
name|updateInternalWindowTitle
parameter_list|()
function_decl|;
name|QString
name|originalWindowTitle
parameter_list|()
function_decl|;
name|void
name|setNewWindowTitle
parameter_list|()
function_decl|;
specifier|inline
name|int
name|titleBarHeight
argument_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
block|;
if|if
condition|(
operator|!
name|parent
operator|||
name|q
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|||
operator|(
name|q
operator|->
name|isMaximized
argument_list|()
operator|&&
operator|!
name|drawTitleBarWhenMaximized
argument_list|()
operator|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|QStyleOptionTitleBar
name|options
init|=
name|titleBarOptions
argument_list|()
decl_stmt|;
name|int
name|height
operator|=
name|options
operator|.
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasBorder
argument_list|(
name|options
argument_list|)
condition|)
name|height
operator|+=
name|q
operator|->
name|isMinimized
argument_list|()
condition|?
literal|8
else|:
literal|4
expr_stmt|;
return|return
name|height
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|QStyle
operator|::
name|SubControl
name|getSubControl
argument_list|(
argument|const QPoint&pos
argument_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
block|;
name|QStyleOptionTitleBar
name|titleBarOptions
operator|=
name|this
operator|->
name|titleBarOptions
argument_list|()
block|;
return|return
name|q
operator|->
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|titleBarOptions
argument_list|,
name|pos
argument_list|,
name|q
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|void
name|setNewGeometry
parameter_list|(
name|QRect
modifier|*
name|geometry
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|geometry
operator|->
name|setSize
argument_list|(
name|geometry
operator|->
name|size
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|internalMinimumSize
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
if|if
condition|(
name|isInRubberBandMode
condition|)
name|rubberBand
operator|->
name|setGeometry
argument_list|(
operator|*
name|geometry
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|q
operator|->
name|setGeometry
argument_list|(
operator|*
name|geometry
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
specifier|inline
name|bool
name|hasBorder
argument_list|(
specifier|const
name|QStyleOptionTitleBar
operator|&
name|options
argument_list|)
decl|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
expr_stmt|;
return|return
operator|!
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_NoBorder
argument_list|,
operator|&
name|options
argument_list|,
name|q
argument_list|)
return|;
block|}
end_decl_stmt
begin_expr_stmt
specifier|inline
name|bool
name|autoRaise
argument_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
block|;
return|return
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TitleBar_AutoRaise
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isResizeOperation
argument_list|()
specifier|const
block|{
return|return
name|currentOperation
operator|!=
name|None
operator|&&
name|currentOperation
operator|!=
name|Move
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|isMoveOperation
argument_list|()
specifier|const
block|{
return|return
name|currentOperation
operator|==
name|Move
return|;
block|}
end_expr_stmt
begin_endif
unit|};
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MDIAREA
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMDISUBWINDOW_P_H
end_comment
end_unit
