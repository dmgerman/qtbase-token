begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtoolbutton.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLBUTTON
end_ifndef
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<qdrawutil.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qicon.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qpointer.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<qtooltip.h>
end_include
begin_include
include|#
directive|include
file|<qmainwindow.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbar.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qstylepainter.h>
end_include
begin_include
include|#
directive|include
file|<private/qabstractbutton_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qaction_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qmenu_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QToolButtonPrivate
class|class
name|QToolButtonPrivate
super|:
specifier|public
name|QAbstractButtonPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QToolButton
parameter_list|)
specifier|public
private|:
name|void
name|init
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|void
name|_q_buttonPressed
parameter_list|()
function_decl|;
name|void
name|popupTimerDone
parameter_list|()
function_decl|;
name|void
name|_q_updateButtonDown
parameter_list|()
function_decl|;
name|void
name|_q_menuTriggered
parameter_list|(
name|QAction
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
name|bool
name|updateHoverControl
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
function_decl|;
name|void
name|_q_actionTriggered
parameter_list|()
function_decl|;
name|QStyle
operator|::
name|SubControl
name|newHoverControl
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
function_decl|;
DECL|member|hoverControl
name|QStyle
operator|::
name|SubControl
name|hoverControl
decl_stmt|;
DECL|member|hoverRect
name|QRect
name|hoverRect
decl_stmt|;
DECL|member|menuAction
name|QPointer
argument_list|<
name|QAction
argument_list|>
name|menuAction
decl_stmt|;
comment|//the menu set by the user (setMenu)
DECL|member|popupTimer
name|QBasicTimer
name|popupTimer
decl_stmt|;
DECL|member|delay
name|int
name|delay
decl_stmt|;
DECL|member|arrowType
name|Qt
operator|::
name|ArrowType
name|arrowType
decl_stmt|;
DECL|member|toolButtonStyle
name|Qt
operator|::
name|ToolButtonStyle
name|toolButtonStyle
decl_stmt|;
DECL|member|popupMode
name|QToolButton
operator|::
name|ToolButtonPopupMode
name|popupMode
decl_stmt|;
DECL|enumerator|NoButtonPressed
DECL|enumerator|MenuButtonPressed
DECL|enumerator|ToolButtonPressed
enum|enum
block|{
name|NoButtonPressed
init|=
literal|0
block|,
name|MenuButtonPressed
init|=
literal|1
block|,
name|ToolButtonPressed
init|=
literal|2
block|}
enum|;
name|uint
name|buttonPressed
range|:
literal|2
decl_stmt|;
name|uint
name|menuButtonDown
range|:
literal|1
decl_stmt|;
name|uint
name|autoRaise
range|:
literal|1
decl_stmt|;
name|uint
name|repeat
range|:
literal|1
decl_stmt|;
DECL|member|defaultAction
name|QAction
modifier|*
name|defaultAction
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|bool
name|hasMenu
parameter_list|()
specifier|const
function_decl|;
comment|//workaround for task 177850
DECL|member|actionsCopy
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|actionsCopy
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENU
end_ifndef
begin_function
DECL|function|hasMenu
name|bool
name|QToolButtonPrivate
operator|::
name|hasMenu
parameter_list|()
specifier|const
block|{
return|return
operator|(
operator|(
name|defaultAction
operator|&&
name|defaultAction
operator|->
name|menu
argument_list|()
operator|)
operator|||
operator|(
name|menuAction
operator|&&
name|menuAction
operator|->
name|menu
argument_list|()
operator|)
operator|||
name|actions
operator|.
name|size
argument_list|()
operator|>
operator|(
name|defaultAction
condition|?
literal|1
else|:
literal|0
operator|)
operator|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \class QToolButton     \brief The QToolButton class provides a quick-access button to     commands or options, usually used inside a QToolBar.      \ingroup basicwidgets     \inmodule QtWidgets      A tool button is a special button that provides quick-access to     specific commands or options. As opposed to a normal command     button, a tool button usually doesn't show a text label, but shows     an icon instead.      Tool buttons are normally created when new QAction instances are     created with QToolBar::addAction() or existing actions are added     to a toolbar with QToolBar::addAction(). It is also possible to     construct tool buttons in the same way as any other widget, and     arrange them alongside other widgets in layouts.      One classic use of a tool button is to select tools; for example,     the "pen" tool in a drawing program. This would be implemented     by using a QToolButton as a toggle button (see setToggleButton()).      QToolButton supports auto-raising. In auto-raise mode, the button     draws a 3D frame only when the mouse points at it. The feature is     automatically turned on when a button is used inside a QToolBar.     Change it with setAutoRaise().      A tool button's icon is set as QIcon. This makes it possible to     specify different pixmaps for the disabled and active state. The     disabled pixmap is used when the button's functionality is not     available. The active pixmap is displayed when the button is     auto-raised because the mouse pointer is hovering over it.      The button's look and dimension is adjustable with     setToolButtonStyle() and setIconSize(). When used inside a     QToolBar in a QMainWindow, the button automatically adjusts to     QMainWindow's settings (see QMainWindow::setToolButtonStyle() and     QMainWindow::setIconSize()). Instead of an icon, a tool button can     also display an arrow symbol, specified with     \l{QToolButton::arrowType} {arrowType}.      A tool button can offer additional choices in a popup menu. The     popup menu can be set using setMenu(). Use setPopupMode() to     configure the different modes available for tool buttons with a     menu set. The default mode is DelayedPopupMode which is sometimes     used with the "Back" button in a web browser.  After pressing and     holding the button down for a while, a menu pops up showing a list     of possible pages to jump to. The default delay is 600 ms; you can     adjust it with setPopupDelay().      \table 100%     \row \li \inlineimage assistant-toolbar.png Qt Assistant's toolbar with tool buttons     \row \li Qt Assistant's toolbar contains tool buttons that are associated          with actions used in other parts of the main window.     \endtable      \sa QPushButton, QToolBar, QMainWindow, QAction,         {fowler}{GUI Design Handbook: Push Button} */
end_comment
begin_comment
comment|/*!     \fn void QToolButton::triggered(QAction *action)      This signal is emitted when the given \a action is triggered.      The action may also be associated with other parts of the user interface,     such as menu items and keyboard shortcuts. Sharing actions in this     way helps make the user interface more consistent and is often less work     to implement. */
end_comment
begin_comment
comment|/*!     Constructs an empty tool button with parent \a     parent. */
end_comment
begin_constructor
DECL|function|QToolButton
name|QToolButton
operator|::
name|QToolButton
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractButton
argument_list|(
operator|*
operator|new
name|QToolButtonPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*  Set-up code common to all the constructors */
end_comment
begin_function
DECL|function|init
name|void
name|QToolButtonPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
name|delay
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ToolButton_PopupDelay
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|defaultAction
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
condition|)
name|autoRaise
operator|=
literal|true
expr_stmt|;
else|else
endif|#
directive|endif
name|autoRaise
operator|=
literal|false
expr_stmt|;
name|arrowType
operator|=
name|Qt
operator|::
name|NoArrow
expr_stmt|;
name|menuButtonDown
operator|=
literal|false
expr_stmt|;
name|popupMode
operator|=
name|QToolButton
operator|::
name|DelayedPopup
expr_stmt|;
name|buttonPressed
operator|=
name|QToolButtonPrivate
operator|::
name|NoButtonPressed
expr_stmt|;
name|toolButtonStyle
operator|=
name|Qt
operator|::
name|ToolButtonIconOnly
expr_stmt|;
name|hoverControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|TabFocus
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|ToolButton
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|QObject
operator|::
name|connect
argument_list|(
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|pressed
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_buttonPressed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|setLayoutItemMargins
argument_list|(
name|QStyle
operator|::
name|SE_ToolButtonLayoutItem
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Initialize \a option with the values from this QToolButton. This method     is useful for subclasses when they need a QStyleOptionToolButton, but don't want     to fill in all the information themselves.      \sa QStyleOption::initFrom() */
end_comment
begin_function
DECL|function|initStyleOption
name|void
name|QToolButton
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionToolButton
modifier|*
name|option
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|option
condition|)
return|return;
name|Q_D
argument_list|(
specifier|const
name|QToolButton
argument_list|)
expr_stmt|;
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|bool
name|forceNoText
init|=
literal|false
decl_stmt|;
name|option
operator|->
name|iconSize
operator|=
name|iconSize
argument_list|()
expr_stmt|;
comment|//default value
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|parentWidget
argument_list|()
condition|)
block|{
if|if
condition|(
name|QToolBar
modifier|*
name|toolBar
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
condition|)
block|{
name|option
operator|->
name|iconSize
operator|=
name|toolBar
operator|->
name|iconSize
argument_list|()
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_TOOLBAR
if|if
condition|(
operator|!
name|forceNoText
condition|)
name|option
operator|->
name|text
operator|=
name|d
operator|->
name|text
expr_stmt|;
name|option
operator|->
name|icon
operator|=
name|d
operator|->
name|icon
expr_stmt|;
name|option
operator|->
name|arrowType
operator|=
name|d
operator|->
name|arrowType
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|down
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|checked
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_On
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|autoRaise
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_AutoRaise
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|checked
operator|&&
operator|!
name|d
operator|->
name|down
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Raised
expr_stmt|;
name|option
operator|->
name|subControls
operator|=
name|QStyle
operator|::
name|SC_ToolButton
expr_stmt|;
name|option
operator|->
name|activeSubControls
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|option
operator|->
name|features
operator|=
name|QStyleOptionToolButton
operator|::
name|None
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|popupMode
operator|==
name|QToolButton
operator|::
name|MenuButtonPopup
condition|)
block|{
name|option
operator|->
name|subControls
operator||=
name|QStyle
operator|::
name|SC_ToolButtonMenu
expr_stmt|;
name|option
operator|->
name|features
operator||=
name|QStyleOptionToolButton
operator|::
name|MenuButtonPopup
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|->
name|state
operator|&
name|QStyle
operator|::
name|State_MouseOver
condition|)
block|{
name|option
operator|->
name|activeSubControls
operator|=
name|d
operator|->
name|hoverControl
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|menuButtonDown
condition|)
block|{
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
name|option
operator|->
name|activeSubControls
operator||=
name|QStyle
operator|::
name|SC_ToolButtonMenu
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|down
condition|)
block|{
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
name|option
operator|->
name|activeSubControls
operator||=
name|QStyle
operator|::
name|SC_ToolButton
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|arrowType
operator|!=
name|Qt
operator|::
name|NoArrow
condition|)
name|option
operator|->
name|features
operator||=
name|QStyleOptionToolButton
operator|::
name|Arrow
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|popupMode
operator|==
name|QToolButton
operator|::
name|DelayedPopup
condition|)
name|option
operator|->
name|features
operator||=
name|QStyleOptionToolButton
operator|::
name|PopupDelay
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|d
operator|->
name|hasMenu
argument_list|()
condition|)
name|option
operator|->
name|features
operator||=
name|QStyleOptionToolButton
operator|::
name|HasMenu
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|toolButtonStyle
operator|==
name|Qt
operator|::
name|ToolButtonFollowStyle
condition|)
block|{
name|option
operator|->
name|toolButtonStyle
operator|=
name|Qt
operator|::
name|ToolButtonStyle
argument_list|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ToolButtonStyle
argument_list|,
name|option
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|option
operator|->
name|toolButtonStyle
operator|=
name|d
operator|->
name|toolButtonStyle
expr_stmt|;
if|if
condition|(
name|option
operator|->
name|toolButtonStyle
operator|==
name|Qt
operator|::
name|ToolButtonTextBesideIcon
condition|)
block|{
comment|// If the action is not prioritized, remove the text label to save space
if|if
condition|(
name|d
operator|->
name|defaultAction
operator|&&
name|d
operator|->
name|defaultAction
operator|->
name|priority
argument_list|()
operator|<
name|QAction
operator|::
name|NormalPriority
condition|)
name|option
operator|->
name|toolButtonStyle
operator|=
name|Qt
operator|::
name|ToolButtonIconOnly
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|icon
operator|.
name|isNull
argument_list|()
operator|&&
name|d
operator|->
name|arrowType
operator|==
name|Qt
operator|::
name|NoArrow
operator|&&
operator|!
name|forceNoText
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|option
operator|->
name|toolButtonStyle
operator|=
name|Qt
operator|::
name|ToolButtonTextOnly
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|->
name|toolButtonStyle
operator|!=
name|Qt
operator|::
name|ToolButtonTextOnly
condition|)
name|option
operator|->
name|toolButtonStyle
operator|=
name|Qt
operator|::
name|ToolButtonIconOnly
expr_stmt|;
block|}
name|option
operator|->
name|pos
operator|=
name|pos
argument_list|()
expr_stmt|;
name|option
operator|->
name|font
operator|=
name|font
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Destroys the object and frees any allocated resources. */
end_comment
begin_destructor
DECL|function|~QToolButton
name|QToolButton
operator|::
name|~
name|QToolButton
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QToolButton
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sizeHint
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|sizeHint
return|;
name|ensurePolished
argument_list|()
expr_stmt|;
name|int
name|w
init|=
literal|0
decl_stmt|,
name|h
init|=
literal|0
decl_stmt|;
name|QStyleOptionToolButton
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QFontMetrics
name|fm
init|=
name|fontMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|.
name|toolButtonStyle
operator|!=
name|Qt
operator|::
name|ToolButtonTextOnly
condition|)
block|{
name|QSize
name|icon
init|=
name|opt
operator|.
name|iconSize
decl_stmt|;
name|w
operator|=
name|icon
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|icon
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|opt
operator|.
name|toolButtonStyle
operator|!=
name|Qt
operator|::
name|ToolButtonIconOnly
condition|)
block|{
name|QSize
name|textSize
init|=
name|fm
operator|.
name|size
argument_list|(
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|text
argument_list|()
argument_list|)
decl_stmt|;
name|textSize
operator|.
name|setWidth
argument_list|(
name|textSize
operator|.
name|width
argument_list|()
operator|+
name|fm
operator|.
name|width
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|*
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|.
name|toolButtonStyle
operator|==
name|Qt
operator|::
name|ToolButtonTextUnderIcon
condition|)
block|{
name|h
operator|+=
literal|4
operator|+
name|textSize
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|textSize
operator|.
name|width
argument_list|()
operator|>
name|w
condition|)
name|w
operator|=
name|textSize
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|toolButtonStyle
operator|==
name|Qt
operator|::
name|ToolButtonTextBesideIcon
condition|)
block|{
name|w
operator|+=
literal|4
operator|+
name|textSize
operator|.
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
name|textSize
operator|.
name|height
argument_list|()
operator|>
name|h
condition|)
name|h
operator|=
name|textSize
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// TextOnly
name|w
operator|=
name|textSize
operator|.
name|width
argument_list|()
expr_stmt|;
name|h
operator|=
name|textSize
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
block|}
name|opt
operator|.
name|rect
operator|.
name|setSize
argument_list|(
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
expr_stmt|;
comment|// PM_MenuButtonIndicator depends on the height
if|if
condition|(
name|d
operator|->
name|popupMode
operator|==
name|MenuButtonPopup
condition|)
name|w
operator|+=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuButtonIndicator
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|sizeHint
operator|=
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_ToolButton
argument_list|,
operator|&
name|opt
argument_list|,
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|,
name|this
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sizeHint
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|minimumSizeHint
name|QSize
name|QToolButton
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
return|return
name|sizeHint
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QToolButton::toolButtonStyle     \brief whether the tool button displays an icon only, text only,     or text beside/below the icon.      The default is Qt::ToolButtonIconOnly.      To have the style of toolbuttons follow the system settings (as available     in GNOME and KDE desktop environments), set this property to Qt::ToolButtonFollowStyle.      QToolButton automatically connects this slot to the relevant     signal in the QMainWindow in which is resides. */
end_comment
begin_comment
comment|/*!     \property QToolButton::arrowType     \brief whether the button displays an arrow instead of a normal icon      This displays an arrow as the icon for the QToolButton.      By default, this property is set to Qt::NoArrow. */
end_comment
begin_function
DECL|function|toolButtonStyle
name|Qt
operator|::
name|ToolButtonStyle
name|QToolButton
operator|::
name|toolButtonStyle
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolButton
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|toolButtonStyle
return|;
block|}
end_function
begin_function
DECL|function|arrowType
name|Qt
operator|::
name|ArrowType
name|QToolButton
operator|::
name|arrowType
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolButton
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|arrowType
return|;
block|}
end_function
begin_function
DECL|function|setToolButtonStyle
name|void
name|QToolButton
operator|::
name|setToolButtonStyle
parameter_list|(
name|Qt
operator|::
name|ToolButtonStyle
name|style
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|toolButtonStyle
operator|==
name|style
condition|)
return|return;
name|d
operator|->
name|toolButtonStyle
operator|=
name|style
expr_stmt|;
name|d
operator|->
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setArrowType
name|void
name|QToolButton
operator|::
name|setArrowType
parameter_list|(
name|Qt
operator|::
name|ArrowType
name|type
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|arrowType
operator|==
name|type
condition|)
return|return;
name|d
operator|->
name|arrowType
operator|=
name|type
expr_stmt|;
name|d
operator|->
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \fn void QToolButton::paintEvent(QPaintEvent *event)      Paints the button in response to the paint \a event. */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QToolButton
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QStylePainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QStyleOptionToolButton
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ToolButton
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|actionEvent
name|void
name|QToolButton
operator|::
name|actionEvent
parameter_list|(
name|QActionEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|action
init|=
name|event
operator|->
name|action
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|ActionChanged
case|:
if|if
condition|(
name|action
operator|==
name|d
operator|->
name|defaultAction
condition|)
name|setDefaultAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
comment|// update button state
break|break;
case|case
name|QEvent
operator|::
name|ActionAdded
case|:
name|connect
argument_list|(
name|action
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_actionTriggered
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ActionRemoved
case|:
if|if
condition|(
name|d
operator|->
name|defaultAction
operator|==
name|action
condition|)
name|d
operator|->
name|defaultAction
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|action
operator|==
name|d
operator|->
name|menuAction
condition|)
name|d
operator|->
name|menuAction
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|action
operator|->
name|disconnect
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
default|default:
empty_stmt|;
block|}
name|QAbstractButton
operator|::
name|actionEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|newHoverControl
name|QStyle
operator|::
name|SubControl
name|QToolButtonPrivate
operator|::
name|newHoverControl
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
name|QStyleOptionToolButton
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_All
expr_stmt|;
name|hoverControl
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ToolButton
argument_list|,
operator|&
name|opt
argument_list|,
name|pos
argument_list|,
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|hoverControl
operator|==
name|QStyle
operator|::
name|SC_None
condition|)
name|hoverRect
operator|=
name|QRect
argument_list|()
expr_stmt|;
else|else
name|hoverRect
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ToolButton
argument_list|,
operator|&
name|opt
argument_list|,
name|hoverControl
argument_list|,
name|q
argument_list|)
expr_stmt|;
return|return
name|hoverControl
return|;
block|}
end_function
begin_function
DECL|function|updateHoverControl
name|bool
name|QToolButtonPrivate
operator|::
name|updateHoverControl
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
name|QRect
name|lastHoverRect
init|=
name|hoverRect
decl_stmt|;
name|QStyle
operator|::
name|SubControl
name|lastHoverControl
init|=
name|hoverControl
decl_stmt|;
name|bool
name|doesHover
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastHoverControl
operator|!=
name|newHoverControl
argument_list|(
name|pos
argument_list|)
operator|&&
name|doesHover
condition|)
block|{
name|q
operator|->
name|update
argument_list|(
name|lastHoverRect
argument_list|)
expr_stmt|;
name|q
operator|->
name|update
argument_list|(
name|hoverRect
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
operator|!
name|doesHover
return|;
block|}
end_function
begin_function
DECL|function|_q_actionTriggered
name|void
name|QToolButtonPrivate
operator|::
name|_q_actionTriggered
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAction
modifier|*
name|action
init|=
name|qobject_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|sender
argument_list|()
argument_list|)
condition|)
emit|emit
name|q
operator|->
name|triggered
argument_list|(
name|action
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|enterEvent
name|void
name|QToolButton
operator|::
name|enterEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|autoRaise
condition|)
name|update
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|defaultAction
condition|)
name|d
operator|->
name|defaultAction
operator|->
name|hover
argument_list|()
expr_stmt|;
name|QAbstractButton
operator|::
name|enterEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|leaveEvent
name|void
name|QToolButton
operator|::
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|autoRaise
condition|)
name|update
argument_list|()
expr_stmt|;
name|QAbstractButton
operator|::
name|leaveEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|timerEvent
name|void
name|QToolButton
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|popupTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|d
operator|->
name|popupTimerDone
argument_list|()
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|QAbstractButton
operator|::
name|timerEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QToolButton
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ParentChange
condition|)
block|{
if|if
condition|(
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
condition|)
name|d
operator|->
name|autoRaise
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StyleChange
ifdef|#
directive|ifdef
name|Q_OS_MAC
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MacSizeChange
endif|#
directive|endif
condition|)
block|{
name|d
operator|->
name|delay
operator|=
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ToolButton_PopupDelay
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|setLayoutItemMargins
argument_list|(
name|QStyle
operator|::
name|SE_ToolButtonLayoutItem
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QAbstractButton
operator|::
name|changeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|QToolButton
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|QStyleOptionToolButton
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|&&
operator|(
name|d
operator|->
name|popupMode
operator|==
name|MenuButtonPopup
operator|)
condition|)
block|{
name|QRect
name|popupr
init|=
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ToolButton
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_ToolButtonMenu
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|popupr
operator|.
name|isValid
argument_list|()
operator|&&
name|popupr
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
name|d
operator|->
name|buttonPressed
operator|=
name|QToolButtonPrivate
operator|::
name|MenuButtonPressed
expr_stmt|;
name|showMenu
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
endif|#
directive|endif
name|d
operator|->
name|buttonPressed
operator|=
name|QToolButtonPrivate
operator|::
name|ToolButtonPressed
expr_stmt|;
name|QAbstractButton
operator|::
name|mousePressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QToolButton
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
name|QAbstractButton
operator|::
name|mouseReleaseEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|d
operator|->
name|buttonPressed
operator|=
name|QToolButtonPrivate
operator|::
name|NoButtonPressed
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|hitButton
name|bool
name|QToolButton
operator|::
name|hitButton
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAbstractButton
operator|::
name|hitButton
argument_list|(
name|pos
argument_list|)
condition|)
return|return
operator|(
name|d
operator|->
name|buttonPressed
operator|!=
name|QToolButtonPrivate
operator|::
name|MenuButtonPressed
operator|)
return|;
return|return
literal|false
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENU
end_ifndef
begin_comment
comment|/*!     Associates the given \a menu with this tool button.      The menu will be shown according to the button's \l popupMode.      Ownership of the menu is not transferred to the tool button.      \sa menu() */
end_comment
begin_function
DECL|function|setMenu
name|void
name|QToolButton
operator|::
name|setMenu
parameter_list|(
name|QMenu
modifier|*
name|menu
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|menuAction
condition|)
name|removeAction
argument_list|(
name|d
operator|->
name|menuAction
argument_list|)
expr_stmt|;
if|if
condition|(
name|menu
condition|)
block|{
name|d
operator|->
name|menuAction
operator|=
name|menu
operator|->
name|menuAction
argument_list|()
expr_stmt|;
name|addAction
argument_list|(
name|d
operator|->
name|menuAction
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|menuAction
operator|=
literal|0
expr_stmt|;
block|}
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the associated menu, or 0 if no menu has been defined.      \sa setMenu() */
end_comment
begin_function
DECL|function|menu
name|QMenu
modifier|*
name|QToolButton
operator|::
name|menu
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|menuAction
condition|)
return|return
name|d
operator|->
name|menuAction
operator|->
name|menu
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Shows (pops up) the associated popup menu. If there is no such     menu, this function does nothing. This function does not return     until the popup menu has been closed by the user. */
end_comment
begin_function
DECL|function|showMenu
name|void
name|QToolButton
operator|::
name|showMenu
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|hasMenu
argument_list|()
condition|)
block|{
name|d
operator|->
name|menuButtonDown
operator|=
literal|false
expr_stmt|;
return|return;
comment|// no menu to show
block|}
comment|// prevent recursions spinning another event loop
if|if
condition|(
name|d
operator|->
name|menuButtonDown
condition|)
return|return;
name|d
operator|->
name|menuButtonDown
operator|=
literal|true
expr_stmt|;
name|repaint
argument_list|()
expr_stmt|;
name|d
operator|->
name|popupTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|d
operator|->
name|popupTimerDone
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_buttonPressed
name|void
name|QToolButtonPrivate
operator|::
name|_q_buttonPressed
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasMenu
argument_list|()
condition|)
return|return;
comment|// no menu to show
if|if
condition|(
name|popupMode
operator|==
name|QToolButton
operator|::
name|MenuButtonPopup
condition|)
return|return;
elseif|else
if|if
condition|(
name|delay
operator|>
literal|0
operator|&&
operator|!
name|popupTimer
operator|.
name|isActive
argument_list|()
operator|&&
name|popupMode
operator|==
name|QToolButton
operator|::
name|DelayedPopup
condition|)
name|popupTimer
operator|.
name|start
argument_list|(
name|delay
argument_list|,
name|q
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|delay
operator|==
literal|0
operator|||
name|popupMode
operator|==
name|QToolButton
operator|::
name|InstantPopup
condition|)
name|q
operator|->
name|showMenu
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|popupTimerDone
name|void
name|QToolButtonPrivate
operator|::
name|popupTimerDone
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
name|popupTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|menuButtonDown
operator|&&
operator|!
name|down
condition|)
return|return;
name|menuButtonDown
operator|=
literal|true
expr_stmt|;
name|QPointer
argument_list|<
name|QMenu
argument_list|>
name|actualMenu
decl_stmt|;
name|bool
name|mustDeleteActualMenu
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|menuAction
condition|)
block|{
name|actualMenu
operator|=
name|menuAction
operator|->
name|menu
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|defaultAction
operator|&&
name|defaultAction
operator|->
name|menu
argument_list|()
condition|)
block|{
name|actualMenu
operator|=
name|defaultAction
operator|->
name|menu
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|actualMenu
operator|=
operator|new
name|QMenu
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|mustDeleteActualMenu
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|actualMenu
operator|->
name|addAction
argument_list|(
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|repeat
operator|=
name|q
operator|->
name|autoRepeat
argument_list|()
expr_stmt|;
name|q
operator|->
name|setAutoRepeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|bool
name|horizontal
init|=
literal|true
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TOOLBAR
argument_list|)
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|tb
operator|&&
name|tb
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Vertical
condition|)
name|horizontal
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
name|QPoint
name|p
decl_stmt|;
name|QRect
name|screen
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|QSize
name|sh
init|=
operator|(
operator|(
name|QToolButton
operator|*
operator|)
operator|(
name|QMenu
operator|*
operator|)
name|actualMenu
operator|)
operator|->
name|receivers
argument_list|(
name|SIGNAL
argument_list|(
name|aboutToShow
argument_list|()
argument_list|)
argument_list|)
condition|?
name|QSize
argument_list|()
else|:
name|actualMenu
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|QRect
name|rect
init|=
name|q
operator|->
name|rect
argument_list|()
decl_stmt|;
if|if
condition|(
name|horizontal
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
operator|.
name|y
argument_list|()
operator|+
name|sh
operator|.
name|height
argument_list|()
operator|<=
name|screen
operator|.
name|height
argument_list|()
condition|)
block|{
name|p
operator|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|rect
operator|.
name|topRight
argument_list|()
operator|-
name|QPoint
argument_list|(
literal|0
argument_list|,
name|sh
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|rx
argument_list|()
operator|-=
name|sh
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|q
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
name|rect
operator|.
name|bottom
argument_list|()
argument_list|)
argument_list|)
operator|.
name|y
argument_list|()
operator|+
name|sh
operator|.
name|height
argument_list|()
operator|<=
name|screen
operator|.
name|height
argument_list|()
condition|)
block|{
name|p
operator|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|-
name|QPoint
argument_list|(
literal|0
argument_list|,
name|sh
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|x
argument_list|()
operator|-
name|sh
operator|.
name|width
argument_list|()
operator|<=
name|screen
operator|.
name|x
argument_list|()
condition|)
block|{
name|p
operator|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|rect
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|rx
argument_list|()
operator|-=
name|sh
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|q
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
name|rect
operator|.
name|right
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|x
argument_list|()
operator|+
name|sh
operator|.
name|width
argument_list|()
operator|<=
name|screen
operator|.
name|right
argument_list|()
condition|)
block|{
name|p
operator|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|rect
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
operator|-
name|QPoint
argument_list|(
name|sh
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|p
operator|.
name|rx
argument_list|()
operator|=
name|qMax
argument_list|(
name|screen
operator|.
name|left
argument_list|()
argument_list|,
name|qMin
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|screen
operator|.
name|right
argument_list|()
operator|-
name|sh
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|ry
argument_list|()
operator|+=
literal|1
expr_stmt|;
name|QPointer
argument_list|<
name|QToolButton
argument_list|>
name|that
init|=
name|q
decl_stmt|;
name|actualMenu
operator|->
name|setNoReplayFor
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mustDeleteActualMenu
condition|)
comment|//only if action are not in this widget
name|QObject
operator|::
name|connect
argument_list|(
name|actualMenu
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_menuTriggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|actualMenu
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToHide
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_updateButtonDown
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|actualMenu
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|widget
operator|=
name|q
expr_stmt|;
name|actualMenu
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|action
operator|=
name|defaultAction
expr_stmt|;
name|actionsCopy
operator|=
name|q
operator|->
name|actions
argument_list|()
expr_stmt|;
comment|//(the list of action may be modified in slots)
name|actualMenu
operator|->
name|exec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|actualMenu
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToHide
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_updateButtonDown
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mustDeleteActualMenu
condition|)
operator|delete
name|actualMenu
expr_stmt|;
else|else
name|QObject
operator|::
name|disconnect
argument_list|(
name|actualMenu
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_menuTriggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|that
condition|)
return|return;
name|actionsCopy
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|repeat
condition|)
name|q
operator|->
name|setAutoRepeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_updateButtonDown
name|void
name|QToolButtonPrivate
operator|::
name|_q_updateButtonDown
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
name|menuButtonDown
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isDown
argument_list|()
condition|)
name|q
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
else|else
name|q
operator|->
name|repaint
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_menuTriggered
name|void
name|QToolButtonPrivate
operator|::
name|_q_menuTriggered
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|&&
operator|!
name|actionsCopy
operator|.
name|contains
argument_list|(
name|action
argument_list|)
condition|)
emit|emit
name|q
operator|->
name|triggered
argument_list|(
name|action
argument_list|)
emit|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MENU
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENU
end_ifndef
begin_comment
comment|/*! \enum QToolButton::ToolButtonPopupMode      Describes how a menu should be popped up for tool buttons that has     a menu set or contains a list of actions.      \value DelayedPopup After pressing and holding the tool button     down for a certain amount of time (the timeout is style dependant,     see QStyle::SH_ToolButton_PopupDelay), the menu is displayed.  A     typical application example is the "back" button in some web     browsers's tool bars. If the user clicks it, the browser simply     browses back to the previous page.  If the user presses and holds     the button down for a while, the tool button shows a menu     containing the current history list      \value MenuButtonPopup In this mode the tool button displays a     special arrow to indicate that a menu is present. The menu is     displayed when the arrow part of the button is pressed.      \value InstantPopup The menu is displayed, without delay, when     the tool button is pressed. In this mode, the button's own action     is not triggered. */
end_comment
begin_comment
comment|/*!     \property QToolButton::popupMode     \brief describes the way that popup menus are used with tool buttons      By default, this property is set to \l DelayedPopup. */
end_comment
begin_function
DECL|function|setPopupMode
name|void
name|QToolButton
operator|::
name|setPopupMode
parameter_list|(
name|ToolButtonPopupMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
name|d
operator|->
name|popupMode
operator|=
name|mode
expr_stmt|;
block|}
end_function
begin_function
DECL|function|popupMode
name|QToolButton
operator|::
name|ToolButtonPopupMode
name|QToolButton
operator|::
name|popupMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolButton
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|popupMode
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \property QToolButton::autoRaise     \brief whether auto-raising is enabled or not.      The default is disabled (i.e. false).      This property is currently ignored on Mac OS X when using QMacStyle. */
end_comment
begin_function
DECL|function|setAutoRaise
name|void
name|QToolButton
operator|::
name|setAutoRaise
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
name|d
operator|->
name|autoRaise
operator|=
name|enable
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|autoRaise
name|bool
name|QToolButton
operator|::
name|autoRaise
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolButton
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|autoRaise
return|;
block|}
end_function
begin_comment
comment|/*!   Sets the default action to \a action.    If a tool button has a default action, the action defines the   button's properties like text, icon, tool tip, etc.  */
end_comment
begin_function
DECL|function|setDefaultAction
name|void
name|QToolButton
operator|::
name|setDefaultAction
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|bool
name|hadMenu
init|=
literal|false
decl_stmt|;
name|hadMenu
operator|=
name|d
operator|->
name|hasMenu
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|defaultAction
operator|=
name|action
expr_stmt|;
if|if
condition|(
operator|!
name|action
condition|)
return|return;
if|if
condition|(
operator|!
name|actions
argument_list|()
operator|.
name|contains
argument_list|(
name|action
argument_list|)
condition|)
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|action
operator|->
name|iconText
argument_list|()
argument_list|)
expr_stmt|;
name|setIcon
argument_list|(
name|action
operator|->
name|icon
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
name|setToolTip
argument_list|(
name|action
operator|->
name|toolTip
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_STATUSTIP
name|setStatusTip
argument_list|(
name|action
operator|->
name|statusTip
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
name|setWhatsThis
argument_list|(
name|action
operator|->
name|whatsThis
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|action
operator|->
name|menu
argument_list|()
operator|&&
operator|!
name|hadMenu
condition|)
block|{
comment|// new 'default' popup mode defined introduced by tool bar. We
comment|// should have changed QToolButton's default instead. Do that
comment|// in 4.2.
name|setPopupMode
argument_list|(
name|QToolButton
operator|::
name|MenuButtonPopup
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|setCheckable
argument_list|(
name|action
operator|->
name|isCheckable
argument_list|()
argument_list|)
expr_stmt|;
name|setChecked
argument_list|(
name|action
operator|->
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|action
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|->
name|d_func
argument_list|()
operator|->
name|fontSet
condition|)
name|setFont
argument_list|(
name|action
operator|->
name|font
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the default action.    \sa setDefaultAction()  */
end_comment
begin_function
DECL|function|defaultAction
name|QAction
modifier|*
name|QToolButton
operator|::
name|defaultAction
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QToolButton
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|defaultAction
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp  */
end_comment
begin_function
DECL|function|nextCheckState
name|void
name|QToolButton
operator|::
name|nextCheckState
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|defaultAction
condition|)
name|QAbstractButton
operator|::
name|nextCheckState
argument_list|()
expr_stmt|;
else|else
name|d
operator|->
name|defaultAction
operator|->
name|trigger
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QToolButton
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|HoverEnter
case|:
case|case
name|QEvent
operator|::
name|HoverLeave
case|:
case|case
name|QEvent
operator|::
name|HoverMove
case|:
if|if
condition|(
specifier|const
name|QHoverEvent
modifier|*
name|he
init|=
cast|static_cast
argument_list|<
specifier|const
name|QHoverEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
condition|)
name|d_func
argument_list|()
operator|->
name|updateHoverControl
argument_list|(
name|he
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|QAbstractButton
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qtoolbutton.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
end_unit
