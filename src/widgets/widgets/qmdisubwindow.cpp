begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*!     \class QMdiSubWindow     \brief The QMdiSubWindow class provides a subwindow class for     QMdiArea.     \since 4.3     \ingroup mainwindow-classes     \inmodule QtWidgets      QMdiSubWindow represents a top-level window in a QMdiArea, and consists     of a title bar with window decorations, an internal widget, and     (depending on the current style) a window frame and a size     grip. QMdiSubWindow has its own layout, which consists of the     title bar and a center area for the internal widget.      \image qmdisubwindowlayout.png      The most common way to construct a QMdiSubWindow is to call     QMdiArea::addSubWindow() with the internal widget as the argument.     You can also create a subwindow yourself, and set an internal     widget by calling setWidget().      You use the same API when programming with subwindows as with     regular top-level windows (e.g., you can call functions such as     show(), hide(), showMaximized(), and setWindowTitle()).      \section1 Subwindow Handling      QMdiSubWindow also supports behavior specific to subwindows in     an MDI area.      By default, each QMdiSubWindow is visible inside the MDI area     viewport when moved around, but it is also possible to specify     transparent window movement and resizing behavior, where only     the outline of a subwindow is updated during these operations.     The setOption() function is used to enable this behavior.      The isShaded() function detects whether the subwindow is     currently shaded (i.e., the window is collapsed so that only the     title bar is visible). To enter shaded mode, call showShaded().     QMdiSubWindow emits the windowStateChanged() signal whenever the     window state has changed (e.g., when the window becomes minimized,     or is restored). It also emits aboutToActivate() before it is     activated.      In keyboard-interactive mode, the windows are moved and resized     with the keyboard. You can enter this mode through the system menu     of the window. The keyboardSingleStep and keyboardPageStep     properties control the distance the widget is moved or resized for     each keypress event. When shift is pressed down page step is used;     otherwise single step is used.      You can also change the active window with the keyboard. By     pressing the control and tab keys at the same time, the next     (using the current \l{QMdiArea::}{WindowOrder}) subwindow will be     activated. By pressing control, shift, and tab, you will activate     the previous window. This is equivalent to calling     \l{QMdiArea::}{activateNextSubWindow()} and     \l{QMdiArea::}{activatePreviousSubWindow()}. Note that these     shortcuts overrides global shortcuts, but not the \l{QMdiArea}s     shortcuts.      \sa QMdiArea */
end_comment
begin_comment
comment|/*!     \enum QMdiSubWindow::SubWindowOption      This enum describes options that customize the behavior     of QMdiSubWindow.      \omitvalue AllowOutsideAreaHorizontally     \omitvalue AllowOutsideAreaVertically      \value RubberBandResize If you enable this option, a rubber band     control is used to represent the subwindow's outline, and the user     resizes this instead of the subwindow itself.     As a result, the subwindow maintains its original position and size     until the resize operation has been completed, at which time it will     receive a single QResizeEvent.     By default, this option is disabled.      \value RubberBandMove If you enable this option, a rubber band     control is used to represent the subwindow's outline, and the user     moves this instead of the subwindow itself.     As a result, the subwindow remains in its original position until     the move operation has completed, at which time a QMoveEvent is     sent to the window. By default, this option is disabled. */
end_comment
begin_comment
comment|/*!     \fn QMdiSubWindow::windowStateChanged(Qt::WindowStates oldState, Qt::WindowStates newState)      QMdiSubWindow emits this signal after the window state changes. \a     oldState is the window state before it changed, and \a newState is the     new, current state. */
end_comment
begin_comment
comment|/*!     \fn QMdiSubWindow::aboutToActivate()      QMdiSubWindow emits this signal immediately before it is     activated. After the subwindow has been activated, the QMdiArea that     manages the subwindow will also emit the     \l{QMdiArea::}{subWindowActivated()} signal.      \sa QMdiArea::subWindowActivated() */
end_comment
begin_include
include|#
directive|include
file|"qmdisubwindow_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MDIAREA
end_ifndef
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QStylePainter>
end_include
begin_include
include|#
directive|include
file|<QVBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QMouseEvent>
end_include
begin_include
include|#
directive|include
file|<QWhatsThis>
end_include
begin_include
include|#
directive|include
file|<QToolTip>
end_include
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QScrollBar>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
end_if
begin_include
include|#
directive|include
file|<private/qmacstyle_mac_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QMdiArea>
end_include
begin_include
include|#
directive|include
file|<QScopedValueRollback>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_using
using|using
namespace|namespace
name|QMdi
namespace|;
end_using
begin_decl_stmt
DECL|variable|SubControls
specifier|static
specifier|const
name|QStyle
operator|::
name|SubControl
name|SubControls
index|[]
init|=
block|{
name|QStyle
operator|::
name|SC_TitleBarLabel
block|,
comment|// 1
name|QStyle
operator|::
name|SC_TitleBarSysMenu
block|,
comment|// 2
name|QStyle
operator|::
name|SC_TitleBarMinButton
block|,
comment|// 3
name|QStyle
operator|::
name|SC_TitleBarMaxButton
block|,
comment|// 4
name|QStyle
operator|::
name|SC_TitleBarShadeButton
block|,
comment|// 5
name|QStyle
operator|::
name|SC_TitleBarCloseButton
block|,
comment|// 6
name|QStyle
operator|::
name|SC_TitleBarNormalButton
block|,
comment|// 7
name|QStyle
operator|::
name|SC_TitleBarUnshadeButton
block|,
comment|// 8
name|QStyle
operator|::
name|SC_TitleBarContextHelpButton
comment|// 9
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|NumSubControls
specifier|static
specifier|const
name|int
name|NumSubControls
init|=
sizeof|sizeof
argument_list|(
name|SubControls
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|SubControls
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|CustomizeWindowFlags
specifier|static
specifier|const
name|Qt
operator|::
name|WindowFlags
name|CustomizeWindowFlags
init|=
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|CustomizeWindowHint
operator||
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator||
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator||
name|Qt
operator|::
name|WindowMinMaxButtonsHint
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|BoundaryMargin
specifier|static
specifier|const
name|int
name|BoundaryMargin
init|=
literal|5
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|getMoveDeltaComponent
specifier|static
specifier|inline
name|int
name|getMoveDeltaComponent
parameter_list|(
name|uint
name|cflags
parameter_list|,
name|uint
name|moveFlag
parameter_list|,
name|uint
name|resizeFlag
parameter_list|,
name|int
name|delta
parameter_list|,
name|int
name|maxDelta
parameter_list|,
name|int
name|minDelta
parameter_list|)
block|{
if|if
condition|(
name|cflags
operator|&
name|moveFlag
condition|)
block|{
if|if
condition|(
name|delta
operator|>
literal|0
condition|)
return|return
operator|(
name|cflags
operator|&
name|resizeFlag
operator|)
condition|?
name|qMin
argument_list|(
name|delta
argument_list|,
name|maxDelta
argument_list|)
else|:
name|delta
return|;
return|return
operator|(
name|cflags
operator|&
name|resizeFlag
operator|)
condition|?
name|qMax
argument_list|(
name|delta
argument_list|,
name|minDelta
argument_list|)
else|:
name|delta
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|getResizeDeltaComponent
specifier|static
specifier|inline
name|int
name|getResizeDeltaComponent
parameter_list|(
name|uint
name|cflags
parameter_list|,
name|uint
name|resizeFlag
parameter_list|,
name|uint
name|resizeReverseFlag
parameter_list|,
name|int
name|delta
parameter_list|)
block|{
if|if
condition|(
name|cflags
operator|&
name|resizeFlag
condition|)
block|{
if|if
condition|(
name|cflags
operator|&
name|resizeReverseFlag
condition|)
return|return
operator|-
name|delta
return|;
return|return
name|delta
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|isChildOfQMdiSubWindow
specifier|static
specifier|inline
name|bool
name|isChildOfQMdiSubWindow
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|child
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|parent
init|=
name|child
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
condition|)
block|{
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
condition|)
return|return
literal|true
return|;
name|parent
operator|=
name|parent
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|isChildOfTabbedQMdiArea
specifier|static
specifier|inline
name|bool
name|isChildOfTabbedQMdiArea
parameter_list|(
specifier|const
name|QMdiSubWindow
modifier|*
name|child
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|QMdiArea
modifier|*
name|mdiArea
init|=
name|child
operator|->
name|mdiArea
argument_list|()
condition|)
block|{
if|if
condition|(
name|mdiArea
operator|->
name|viewMode
argument_list|()
operator|==
name|QMdiArea
operator|::
name|TabbedView
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|ptr
specifier|static
specifier|inline
name|ControlElement
argument_list|<
name|T
argument_list|>
modifier|*
name|ptr
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|qt_metacast
argument_list|(
literal|"ControlElement"
argument_list|)
operator|&&
name|strcmp
argument_list|(
name|widget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|,
name|T
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
cast|static_cast
argument_list|<
name|ControlElement
argument_list|<
name|T
argument_list|>
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|originalWindowTitle
name|QString
name|QMdiSubWindowPrivate
operator|::
name|originalWindowTitle
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|originalTitle
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|originalTitle
operator|=
name|q
operator|->
name|window
argument_list|()
operator|->
name|windowTitle
argument_list|()
expr_stmt|;
if|if
condition|(
name|originalTitle
operator|.
name|isNull
argument_list|()
condition|)
name|originalTitle
operator|=
name|QLatin1String
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|originalTitle
return|;
block|}
end_function
begin_function
DECL|function|setNewWindowTitle
name|void
name|QMdiSubWindowPrivate
operator|::
name|setNewWindowTitle
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|QString
name|childTitle
init|=
name|q
operator|->
name|windowTitle
argument_list|()
decl_stmt|;
if|if
condition|(
name|childTitle
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QString
name|original
init|=
name|originalWindowTitle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|original
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|original
operator|.
name|contains
argument_list|(
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"- [%1]"
argument_list|)
operator|.
name|arg
argument_list|(
name|childTitle
argument_list|)
argument_list|)
condition|)
name|q
operator|->
name|window
argument_list|()
operator|->
name|setWindowTitle
argument_list|(
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"%1 - [%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|original
argument_list|,
name|childTitle
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|->
name|window
argument_list|()
operator|->
name|setWindowTitle
argument_list|(
name|childTitle
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isHoverControl
specifier|static
specifier|inline
name|bool
name|isHoverControl
parameter_list|(
name|QStyle
operator|::
name|SubControl
name|control
parameter_list|)
block|{
return|return
name|control
operator|!=
name|QStyle
operator|::
name|SC_None
operator|&&
name|control
operator|!=
name|QStyle
operator|::
name|SC_TitleBarLabel
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
end_if
begin_function
DECL|function|colorref2qrgb
specifier|static
specifier|inline
name|QRgb
name|colorref2qrgb
parameter_list|(
name|COLORREF
name|col
parameter_list|)
block|{
return|return
name|qRgb
argument_list|(
name|GetRValue
argument_list|(
name|col
argument_list|)
argument_list|,
name|GetGValue
argument_list|(
name|col
argument_list|)
argument_list|,
name|GetBValue
argument_list|(
name|col
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
end_ifndef
begin_function
DECL|function|showToolTip
specifier|static
name|void
name|showToolTip
parameter_list|(
name|QHelpEvent
modifier|*
name|helpEvent
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QStyleOptionComplex
modifier|&
name|opt
parameter_list|,
name|QStyle
operator|::
name|ComplexControl
name|complexControl
parameter_list|,
name|QStyle
operator|::
name|SubControl
name|subControl
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|helpEvent
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|helpEvent
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ToolTip
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
comment|// Native Mac windows don't show tool tip.
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMacStyle
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|style
argument_list|()
argument_list|)
condition|)
return|return;
endif|#
directive|endif
comment|// Convert CC_MdiControls to CC_TitleBar. Sub controls of different complex
comment|// controls cannot be in the same switch as they might have the same value.
if|if
condition|(
name|complexControl
operator|==
name|QStyle
operator|::
name|CC_MdiControls
condition|)
block|{
if|if
condition|(
name|subControl
operator|==
name|QStyle
operator|::
name|SC_MdiMinButton
condition|)
name|subControl
operator|=
name|QStyle
operator|::
name|SC_TitleBarMinButton
expr_stmt|;
elseif|else
if|if
condition|(
name|subControl
operator|==
name|QStyle
operator|::
name|SC_MdiCloseButton
condition|)
name|subControl
operator|=
name|QStyle
operator|::
name|SC_TitleBarCloseButton
expr_stmt|;
elseif|else
if|if
condition|(
name|subControl
operator|==
name|QStyle
operator|::
name|SC_MdiNormalButton
condition|)
name|subControl
operator|=
name|QStyle
operator|::
name|SC_TitleBarNormalButton
expr_stmt|;
else|else
name|subControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
block|}
comment|// Don't change the tooltip for the base widget itself.
if|if
condition|(
name|subControl
operator|==
name|QStyle
operator|::
name|SC_None
condition|)
return|return;
name|QString
name|toolTip
decl_stmt|;
switch|switch
condition|(
name|subControl
condition|)
block|{
case|case
name|QStyle
operator|::
name|SC_TitleBarMinButton
case|:
name|toolTip
operator|=
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"Minimize"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarMaxButton
case|:
name|toolTip
operator|=
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"Maximize"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarUnshadeButton
case|:
name|toolTip
operator|=
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"Unshade"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarShadeButton
case|:
name|toolTip
operator|=
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"Shade"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarNormalButton
case|:
if|if
condition|(
name|widget
operator|->
name|isMaximized
argument_list|()
operator|||
operator|!
name|qobject_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|toolTip
operator|=
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"Restore Down"
argument_list|)
expr_stmt|;
else|else
name|toolTip
operator|=
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"Restore"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarCloseButton
case|:
name|toolTip
operator|=
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"Close"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarContextHelpButton
case|:
name|toolTip
operator|=
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"Help"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarSysMenu
case|:
name|toolTip
operator|=
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"Menu"
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
specifier|const
name|QRect
name|rect
init|=
name|widget
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|complexControl
argument_list|,
operator|&
name|opt
argument_list|,
name|subControl
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|QToolTip
operator|::
name|showText
argument_list|(
name|helpEvent
operator|->
name|globalPos
argument_list|()
argument_list|,
name|toolTip
argument_list|,
name|widget
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLTIP
end_comment
begin_namespace
DECL|namespace|QMdi
namespace|namespace
name|QMdi
block|{
comment|/*     \class ControlLabel     \internal */
DECL|class|ControlLabel
class|class
name|ControlLabel
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
name|ControlLabel
parameter_list|(
name|QMdiSubWindow
modifier|*
name|subWindow
parameter_list|,
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|QSize
name|sizeHint
parameter_list|()
specifier|const
function_decl|;
signals|signals:
name|void
name|_q_clicked
parameter_list|()
function_decl|;
name|void
name|_q_doubleClicked
parameter_list|()
function_decl|;
protected|protected:
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|paintEvent
parameter_list|)
function_decl|;
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|mouseEvent
parameter_list|)
function_decl|;
name|void
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|mouseEvent
parameter_list|)
function_decl|;
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|mouseEvent
parameter_list|)
function_decl|;
private|private:
DECL|member|label
name|QPixmap
name|label
decl_stmt|;
DECL|member|isPressed
name|bool
name|isPressed
decl_stmt|;
name|void
name|updateWindowIcon
parameter_list|()
function_decl|;
block|}
class|;
block|}
end_namespace
begin_comment
comment|// namespace QMdi
end_comment
begin_constructor
DECL|function|ControlLabel
name|ControlLabel
operator|::
name|ControlLabel
parameter_list|(
name|QMdiSubWindow
modifier|*
name|subWindow
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|isPressed
argument_list|(
literal|false
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|subWindow
argument_list|)
expr_stmt|;
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|updateWindowIcon
argument_list|()
expr_stmt|;
name|setFixedSize
argument_list|(
name|label
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|ControlLabel
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
return|return
name|label
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|event
name|bool
name|ControlLabel
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|WindowIconChange
condition|)
name|updateWindowIcon
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ToolTip
condition|)
block|{
name|QStyleOptionTitleBar
name|options
decl_stmt|;
name|options
operator|.
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|showToolTip
argument_list|(
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|,
name|this
argument_list|,
name|options
argument_list|,
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
name|QStyle
operator|::
name|SC_TitleBarSysMenu
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|ControlLabel
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
comment|/*paintEvent*/
parameter_list|)
block|{
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|painter
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|ControlLabel
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|mouseEvent
parameter_list|)
block|{
if|if
condition|(
name|mouseEvent
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|mouseEvent
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|isPressed
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|mouseDoubleClickEvent
name|void
name|ControlLabel
operator|::
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|mouseEvent
parameter_list|)
block|{
if|if
condition|(
name|mouseEvent
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|mouseEvent
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|isPressed
operator|=
literal|false
expr_stmt|;
emit|emit
name|_q_doubleClicked
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|ControlLabel
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|mouseEvent
parameter_list|)
block|{
if|if
condition|(
name|mouseEvent
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|mouseEvent
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isPressed
condition|)
block|{
name|isPressed
operator|=
literal|false
expr_stmt|;
emit|emit
name|_q_clicked
argument_list|()
emit|;
block|}
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|updateWindowIcon
name|void
name|ControlLabel
operator|::
name|updateWindowIcon
parameter_list|()
block|{
name|QIcon
name|menuIcon
init|=
name|windowIcon
argument_list|()
decl_stmt|;
if|if
condition|(
name|menuIcon
operator|.
name|isNull
argument_list|()
condition|)
name|menuIcon
operator|=
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarMenuButton
argument_list|,
literal|0
argument_list|,
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|=
name|menuIcon
operator|.
name|pixmap
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_namespace
DECL|namespace|QMdi
namespace|namespace
name|QMdi
block|{
comment|/*     \class ControllerWidget     \internal */
DECL|class|ControllerWidget
class|class
name|ControllerWidget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
name|ControllerWidget
parameter_list|(
name|QMdiSubWindow
modifier|*
name|subWindow
parameter_list|,
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|QSize
name|sizeHint
parameter_list|()
specifier|const
function_decl|;
name|void
name|setControlVisible
parameter_list|(
name|QMdiSubWindowPrivate
operator|::
name|WindowStateAction
name|action
parameter_list|,
name|bool
name|visible
parameter_list|)
function_decl|;
DECL|function|hasVisibleControls
specifier|inline
name|bool
name|hasVisibleControls
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|visibleControls
operator|&
name|QStyle
operator|::
name|SC_MdiMinButton
operator|)
operator|||
operator|(
name|visibleControls
operator|&
name|QStyle
operator|::
name|SC_MdiNormalButton
operator|)
operator|||
operator|(
name|visibleControls
operator|&
name|QStyle
operator|::
name|SC_MdiCloseButton
operator|)
return|;
block|}
signals|signals:
name|void
name|_q_minimize
parameter_list|()
function_decl|;
name|void
name|_q_restore
parameter_list|()
function_decl|;
name|void
name|_q_close
parameter_list|()
function_decl|;
protected|protected:
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
function_decl|;
private|private:
DECL|member|activeControl
name|QStyle
operator|::
name|SubControl
name|activeControl
decl_stmt|;
DECL|member|hoverControl
name|QStyle
operator|::
name|SubControl
name|hoverControl
decl_stmt|;
DECL|member|visibleControls
name|QStyle
operator|::
name|SubControls
name|visibleControls
decl_stmt|;
name|void
name|initStyleOption
parameter_list|(
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|)
specifier|const
function_decl|;
DECL|member|mdiArea
name|QMdiArea
modifier|*
name|mdiArea
decl_stmt|;
DECL|function|getSubControl
specifier|inline
name|QStyle
operator|::
name|SubControl
name|getSubControl
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|QStyleOptionComplex
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
return|return
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_MdiControls
argument_list|,
operator|&
name|opt
argument_list|,
name|pos
argument_list|,
name|mdiArea
argument_list|)
return|;
block|}
block|}
class|;
block|}
end_namespace
begin_comment
comment|// namespace QMdi
end_comment
begin_comment
comment|/*     \internal */
end_comment
begin_constructor
DECL|function|ControllerWidget
name|ControllerWidget
operator|::
name|ControllerWidget
parameter_list|(
name|QMdiSubWindow
modifier|*
name|subWindow
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|activeControl
argument_list|(
name|QStyle
operator|::
name|SC_None
argument_list|)
member_init_list|,
name|hoverControl
argument_list|(
name|QStyle
operator|::
name|SC_None
argument_list|)
member_init_list|,
name|visibleControls
argument_list|(
name|QStyle
operator|::
name|SC_None
argument_list|)
member_init_list|,
name|mdiArea
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|subWindow
operator|->
name|parentWidget
argument_list|()
condition|)
name|mdiArea
operator|=
name|qobject_cast
argument_list|<
name|QMdiArea
operator|*
argument_list|>
argument_list|(
name|subWindow
operator|->
name|parentWidget
argument_list|()
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
expr_stmt|;
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|ControllerWidget
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|ensurePolished
argument_list|()
expr_stmt|;
name|QStyleOptionComplex
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QSize
name|size
argument_list|(
literal|48
argument_list|,
literal|16
argument_list|)
decl_stmt|;
return|return
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_MdiControls
argument_list|,
operator|&
name|opt
argument_list|,
name|size
argument_list|,
name|mdiArea
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setControlVisible
name|void
name|ControllerWidget
operator|::
name|setControlVisible
parameter_list|(
name|QMdiSubWindowPrivate
operator|::
name|WindowStateAction
name|action
parameter_list|,
name|bool
name|visible
parameter_list|)
block|{
name|QStyle
operator|::
name|SubControl
name|subControl
init|=
name|QStyle
operator|::
name|SC_None
decl_stmt|;
comment|// Map action from QMdiSubWindowPrivate::WindowStateAction to QStyle::SubControl.
if|if
condition|(
name|action
operator|==
name|QMdiSubWindowPrivate
operator|::
name|MaximizeAction
condition|)
name|subControl
operator|=
name|QStyle
operator|::
name|SC_MdiNormalButton
expr_stmt|;
elseif|else
if|if
condition|(
name|action
operator|==
name|QMdiSubWindowPrivate
operator|::
name|CloseAction
condition|)
name|subControl
operator|=
name|QStyle
operator|::
name|SC_MdiCloseButton
expr_stmt|;
elseif|else
if|if
condition|(
name|action
operator|==
name|QMdiSubWindowPrivate
operator|::
name|MinimizeAction
condition|)
name|subControl
operator|=
name|QStyle
operator|::
name|SC_MdiMinButton
expr_stmt|;
if|if
condition|(
name|subControl
operator|==
name|QStyle
operator|::
name|SC_None
condition|)
return|return;
if|if
condition|(
name|visible
operator|&&
operator|!
operator|(
name|visibleControls
operator|&
name|subControl
operator|)
condition|)
name|visibleControls
operator||=
name|subControl
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|visible
operator|&&
operator|(
name|visibleControls
operator|&
name|subControl
operator|)
condition|)
name|visibleControls
operator|&=
operator|~
name|subControl
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|ControllerWidget
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
comment|/*paintEvent*/
parameter_list|)
block|{
name|QStyleOptionComplex
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
if|if
condition|(
name|activeControl
operator|==
name|hoverControl
condition|)
block|{
name|opt
operator|.
name|activeSubControls
operator|=
name|activeControl
expr_stmt|;
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hoverControl
operator|!=
name|QStyle
operator|::
name|SC_None
operator|&&
operator|(
name|activeControl
operator|==
name|QStyle
operator|::
name|SC_None
operator|)
condition|)
block|{
name|opt
operator|.
name|activeSubControls
operator|=
name|hoverControl
expr_stmt|;
name|opt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
block|}
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|style
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_MdiControls
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|painter
argument_list|,
name|mdiArea
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|ControllerWidget
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|activeControl
operator|=
name|getSubControl
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|ControllerWidget
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|QStyle
operator|::
name|SubControl
name|under_mouse
init|=
name|getSubControl
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|under_mouse
operator|==
name|activeControl
condition|)
block|{
switch|switch
condition|(
name|activeControl
condition|)
block|{
case|case
name|QStyle
operator|::
name|SC_MdiCloseButton
case|:
emit|emit
name|_q_close
argument_list|()
emit|;
break|break;
case|case
name|QStyle
operator|::
name|SC_MdiNormalButton
case|:
emit|emit
name|_q_restore
argument_list|()
emit|;
break|break;
case|case
name|QStyle
operator|::
name|SC_MdiMinButton
case|:
emit|emit
name|_q_minimize
argument_list|()
emit|;
break|break;
default|default:
break|break;
block|}
block|}
name|activeControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|mouseMoveEvent
name|void
name|ControllerWidget
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QStyle
operator|::
name|SubControl
name|under_mouse
init|=
name|getSubControl
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
comment|//test if hover state changes
if|if
condition|(
name|hoverControl
operator|!=
name|under_mouse
condition|)
block|{
name|hoverControl
operator|=
name|under_mouse
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|leaveEvent
name|void
name|ControllerWidget
operator|::
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
comment|/*event*/
parameter_list|)
block|{
name|hoverControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|event
name|bool
name|ControllerWidget
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ToolTip
condition|)
block|{
name|QStyleOptionComplex
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QHelpEvent
modifier|*
name|helpEvent
init|=
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|showToolTip
argument_list|(
name|helpEvent
argument_list|,
name|this
argument_list|,
name|opt
argument_list|,
name|QStyle
operator|::
name|CC_MdiControls
argument_list|,
name|getSubControl
argument_list|(
name|helpEvent
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_TOOLTIP
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|initStyleOption
name|void
name|ControllerWidget
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionComplex
modifier|*
name|option
parameter_list|)
specifier|const
block|{
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|option
operator|->
name|subControls
operator|=
name|visibleControls
expr_stmt|;
name|option
operator|->
name|activeSubControls
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_constructor
DECL|function|ControlContainer
name|ControlContainer
operator|::
name|ControlContainer
parameter_list|(
name|QMdiSubWindow
modifier|*
name|mdiChild
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|mdiChild
argument_list|)
member_init_list|,
name|previousLeft
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|previousRight
argument_list|(
literal|0
argument_list|)
member_init_list|,
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
name|m_menuBar
argument_list|(
literal|0
argument_list|)
member_init_list|,
endif|#
directive|endif
name|mdiChild
argument_list|(
name|mdiChild
argument_list|)
block|{
name|Q_ASSERT
argument_list|(
name|mdiChild
argument_list|)
expr_stmt|;
name|m_controllerWidget
operator|=
operator|new
name|ControlElement
argument_list|<
name|ControllerWidget
argument_list|>
argument_list|(
name|mdiChild
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_controllerWidget
argument_list|,
name|SIGNAL
argument_list|(
name|_q_close
argument_list|()
argument_list|)
argument_list|,
name|mdiChild
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_controllerWidget
argument_list|,
name|SIGNAL
argument_list|(
name|_q_restore
argument_list|()
argument_list|)
argument_list|,
name|mdiChild
argument_list|,
name|SLOT
argument_list|(
name|showNormal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_controllerWidget
argument_list|,
name|SIGNAL
argument_list|(
name|_q_minimize
argument_list|()
argument_list|)
argument_list|,
name|mdiChild
argument_list|,
name|SLOT
argument_list|(
name|showMinimized
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_menuLabel
operator|=
operator|new
name|ControlElement
argument_list|<
name|ControlLabel
argument_list|>
argument_list|(
name|mdiChild
argument_list|)
expr_stmt|;
name|m_menuLabel
operator|->
name|setWindowIcon
argument_list|(
name|mdiChild
operator|->
name|windowIcon
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|connect
argument_list|(
name|m_menuLabel
argument_list|,
name|SIGNAL
argument_list|(
name|_q_clicked
argument_list|()
argument_list|)
argument_list|,
name|mdiChild
argument_list|,
name|SLOT
argument_list|(
name|showSystemMenu
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|connect
argument_list|(
name|m_menuLabel
argument_list|,
name|SIGNAL
argument_list|(
name|_q_doubleClicked
argument_list|()
argument_list|)
argument_list|,
name|mdiChild
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~ControlContainer
name|ControlContainer
operator|::
name|~
name|ControlContainer
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
name|removeButtonsFromMenuBar
argument_list|()
expr_stmt|;
endif|#
directive|endif
operator|delete
name|m_menuLabel
expr_stmt|;
name|m_menuLabel
operator|=
literal|0
expr_stmt|;
operator|delete
name|m_controllerWidget
expr_stmt|;
name|m_controllerWidget
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
end_ifndef
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|menuBar
name|QMenuBar
modifier|*
name|QMdiSubWindowPrivate
operator|::
name|menuBar
parameter_list|()
specifier|const
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_MAINWINDOW
argument_list|)
return|return
literal|0
return|;
else|#
directive|else
name|Q_Q
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isMaximized
argument_list|()
operator|||
name|drawTitleBarWhenMaximized
argument_list|()
operator|||
name|isChildOfTabbedQMdiArea
argument_list|(
name|q
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|QMainWindow
modifier|*
name|mainWindow
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|window
argument_list|()
argument_list|)
condition|)
return|return
name|mainWindow
operator|->
name|menuBar
argument_list|()
return|;
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|showButtonsInMenuBar
name|void
name|ControlContainer
operator|::
name|showButtonsInMenuBar
parameter_list|(
name|QMenuBar
modifier|*
name|menuBar
parameter_list|)
block|{
if|if
condition|(
operator|!
name|menuBar
operator|||
operator|!
name|mdiChild
operator|||
name|mdiChild
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
return|return;
name|m_menuBar
operator|=
name|menuBar
expr_stmt|;
if|if
condition|(
name|m_menuLabel
operator|&&
name|mdiChild
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
block|{
name|QWidget
modifier|*
name|currentLeft
init|=
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopLeftCorner
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentLeft
condition|)
name|currentLeft
operator|->
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentLeft
operator|!=
name|m_menuLabel
condition|)
block|{
name|menuBar
operator|->
name|setCornerWidget
argument_list|(
name|m_menuLabel
argument_list|,
name|Qt
operator|::
name|TopLeftCorner
argument_list|)
expr_stmt|;
name|previousLeft
operator|=
name|currentLeft
expr_stmt|;
block|}
name|m_menuLabel
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
name|ControllerWidget
modifier|*
name|controllerWidget
init|=
name|qobject_cast
argument_list|<
name|ControllerWidget
operator|*
argument_list|>
argument_list|(
name|m_controllerWidget
argument_list|)
decl_stmt|;
if|if
condition|(
name|controllerWidget
operator|&&
name|controllerWidget
operator|->
name|hasVisibleControls
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|currentRight
init|=
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentRight
condition|)
name|currentRight
operator|->
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentRight
operator|!=
name|m_controllerWidget
condition|)
block|{
name|menuBar
operator|->
name|setCornerWidget
argument_list|(
name|m_controllerWidget
argument_list|,
name|Qt
operator|::
name|TopRightCorner
argument_list|)
expr_stmt|;
name|previousRight
operator|=
name|currentRight
expr_stmt|;
block|}
name|m_controllerWidget
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
name|mdiChild
operator|->
name|d_func
argument_list|()
operator|->
name|setNewWindowTitle
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     \internal */
end_comment
begin_function
DECL|function|removeButtonsFromMenuBar
name|void
name|ControlContainer
operator|::
name|removeButtonsFromMenuBar
parameter_list|(
name|QMenuBar
modifier|*
name|menuBar
parameter_list|)
block|{
if|if
condition|(
name|menuBar
operator|&&
name|menuBar
operator|!=
name|m_menuBar
condition|)
block|{
comment|// m_menubar was deleted while sub-window was maximized
name|previousRight
operator|=
literal|0
expr_stmt|;
name|previousLeft
operator|=
literal|0
expr_stmt|;
name|m_menuBar
operator|=
name|menuBar
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_menuBar
operator|||
operator|!
name|mdiChild
operator|||
name|qt_widget_private
argument_list|(
name|mdiChild
operator|->
name|window
argument_list|()
argument_list|)
operator|->
name|data
operator|.
name|in_destructor
condition|)
return|return;
name|QMdiSubWindow
modifier|*
name|child
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|m_controllerWidget
condition|)
block|{
name|QWidget
modifier|*
name|currentRight
init|=
name|m_menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentRight
operator|==
name|m_controllerWidget
condition|)
block|{
if|if
condition|(
name|ControlElement
argument_list|<
name|ControllerWidget
argument_list|>
modifier|*
name|ce
init|=
name|ptr
argument_list|<
name|ControllerWidget
argument_list|>
argument_list|(
name|previousRight
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|ce
operator|->
name|mdiChild
operator|||
operator|!
name|ce
operator|->
name|mdiChild
operator|->
name|isMaximized
argument_list|()
condition|)
name|previousRight
operator|=
literal|0
expr_stmt|;
else|else
name|child
operator|=
name|ce
operator|->
name|mdiChild
expr_stmt|;
block|}
name|m_menuBar
operator|->
name|setCornerWidget
argument_list|(
name|previousRight
argument_list|,
name|Qt
operator|::
name|TopRightCorner
argument_list|)
expr_stmt|;
if|if
condition|(
name|previousRight
condition|)
block|{
name|previousRight
operator|->
name|show
argument_list|()
expr_stmt|;
name|previousRight
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|m_controllerWidget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|m_controllerWidget
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_menuLabel
condition|)
block|{
name|QWidget
modifier|*
name|currentLeft
init|=
name|m_menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopLeftCorner
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentLeft
operator|==
name|m_menuLabel
condition|)
block|{
if|if
condition|(
name|ControlElement
argument_list|<
name|ControlLabel
argument_list|>
modifier|*
name|ce
init|=
name|ptr
argument_list|<
name|ControlLabel
argument_list|>
argument_list|(
name|previousLeft
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|ce
operator|->
name|mdiChild
operator|||
operator|!
name|ce
operator|->
name|mdiChild
operator|->
name|isMaximized
argument_list|()
condition|)
name|previousLeft
operator|=
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|child
condition|)
name|child
operator|=
name|mdiChild
expr_stmt|;
block|}
name|m_menuBar
operator|->
name|setCornerWidget
argument_list|(
name|previousLeft
argument_list|,
name|Qt
operator|::
name|TopLeftCorner
argument_list|)
expr_stmt|;
if|if
condition|(
name|previousLeft
condition|)
block|{
name|previousLeft
operator|->
name|show
argument_list|()
expr_stmt|;
name|previousLeft
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|m_menuLabel
operator|->
name|hide
argument_list|()
expr_stmt|;
name|m_menuLabel
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|m_menuBar
operator|->
name|update
argument_list|()
expr_stmt|;
if|if
condition|(
name|child
condition|)
name|child
operator|->
name|d_func
argument_list|()
operator|->
name|setNewWindowTitle
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|mdiChild
condition|)
name|mdiChild
operator|->
name|window
argument_list|()
operator|->
name|setWindowTitle
argument_list|(
name|mdiChild
operator|->
name|d_func
argument_list|()
operator|->
name|originalWindowTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MENUBAR
end_comment
begin_function
DECL|function|updateWindowIcon
name|void
name|ControlContainer
operator|::
name|updateWindowIcon
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|windowIcon
parameter_list|)
block|{
if|if
condition|(
name|m_menuLabel
condition|)
name|m_menuLabel
operator|->
name|setWindowIcon
argument_list|(
name|windowIcon
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QMdiSubWindowPrivate
name|QMdiSubWindowPrivate
operator|::
name|QMdiSubWindowPrivate
parameter_list|()
member_init_list|:
name|baseWidget
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|restoreFocusWidget
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|controlContainer
argument_list|(
literal|0
argument_list|)
member_init_list|,
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
name|sizeGrip
argument_list|(
literal|0
argument_list|)
member_init_list|,
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
name|rubberBand
argument_list|(
literal|0
argument_list|)
member_init_list|,
endif|#
directive|endif
name|userMinimumSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
member_init_list|,
name|resizeEnabled
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|moveEnabled
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|isInInteractiveMode
argument_list|(
literal|false
argument_list|)
member_init_list|,
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
name|isInRubberBandMode
argument_list|(
literal|false
argument_list|)
member_init_list|,
endif|#
directive|endif
name|isShadeMode
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|ignoreWindowTitleChange
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|ignoreNextActivationEvent
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|activationEnabled
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|isShadeRequestFromMinimizeMode
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|isMaximizeMode
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|isWidgetHiddenByUs
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|isActive
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|isExplicitlyDeactivated
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|keyboardSingleStep
argument_list|(
literal|5
argument_list|)
member_init_list|,
name|keyboardPageStep
argument_list|(
literal|20
argument_list|)
member_init_list|,
name|resizeTimerId
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|currentOperation
argument_list|(
name|None
argument_list|)
member_init_list|,
name|hoveredSubControl
argument_list|(
name|QStyle
operator|::
name|SC_None
argument_list|)
member_init_list|,
name|activeSubControl
argument_list|(
name|QStyle
operator|::
name|SC_None
argument_list|)
member_init_list|,
name|focusInReason
argument_list|(
name|Qt
operator|::
name|ActiveWindowFocusReason
argument_list|)
block|{
name|initOperationMap
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_updateStaysOnTopHint
name|void
name|QMdiSubWindowPrivate
operator|::
name|_q_updateStaysOnTopHint
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_ACTION
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAction
modifier|*
name|senderAction
init|=
name|qobject_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|sender
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|senderAction
operator|->
name|isChecked
argument_list|()
condition|)
block|{
name|q
operator|->
name|setWindowFlags
argument_list|(
name|q
operator|->
name|windowFlags
argument_list|()
operator||
name|Qt
operator|::
name|WindowStaysOnTopHint
argument_list|)
expr_stmt|;
name|q
operator|->
name|raise
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|q
operator|->
name|setWindowFlags
argument_list|(
name|q
operator|->
name|windowFlags
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|WindowStaysOnTopHint
argument_list|)
expr_stmt|;
name|q
operator|->
name|lower
argument_list|()
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_ACTION
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_enterInteractiveMode
name|void
name|QMdiSubWindowPrivate
operator|::
name|_q_enterInteractiveMode
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_ACTION
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|action
init|=
name|qobject_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|sender
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|action
condition|)
return|return;
name|QPoint
name|pressPos
decl_stmt|;
if|if
condition|(
name|actions
index|[
name|MoveAction
index|]
operator|&&
name|actions
index|[
name|MoveAction
index|]
operator|==
name|action
condition|)
block|{
name|currentOperation
operator|=
name|Move
expr_stmt|;
name|pressPos
operator|=
name|QPoint
argument_list|(
name|q
operator|->
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|titleBarHeight
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|actions
index|[
name|ResizeAction
index|]
operator|&&
name|actions
index|[
name|ResizeAction
index|]
operator|==
name|action
condition|)
block|{
name|currentOperation
operator|=
name|q
operator|->
name|isLeftToRight
argument_list|()
condition|?
name|BottomRightResize
else|:
name|BottomLeftResize
expr_stmt|;
name|int
name|offset
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MdiSubWindowFrameWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|/
literal|2
decl_stmt|;
name|int
name|x
init|=
name|q
operator|->
name|isLeftToRight
argument_list|()
condition|?
name|q
operator|->
name|width
argument_list|()
operator|-
name|offset
else|:
name|offset
decl_stmt|;
name|pressPos
operator|=
name|QPoint
argument_list|(
name|x
argument_list|,
name|q
operator|->
name|height
argument_list|()
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
name|updateCursor
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|q
operator|->
name|cursor
argument_list|()
operator|.
name|setPos
argument_list|(
name|q
operator|->
name|mapToGlobal
argument_list|(
name|pressPos
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|mousePressPosition
operator|=
name|q
operator|->
name|mapToParent
argument_list|(
name|pressPos
argument_list|)
expr_stmt|;
name|oldGeometry
operator|=
name|q
operator|->
name|geometry
argument_list|()
expr_stmt|;
name|isInInteractiveMode
operator|=
literal|true
expr_stmt|;
name|q
operator|->
name|setFocus
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
if|if
condition|(
operator|(
name|q
operator|->
name|testOption
argument_list|(
name|QMdiSubWindow
operator|::
name|RubberBandResize
argument_list|)
operator|&&
operator|(
name|currentOperation
operator|==
name|BottomRightResize
operator|||
name|currentOperation
operator|==
name|BottomLeftResize
operator|)
operator|)
operator|||
operator|(
name|q
operator|->
name|testOption
argument_list|(
name|QMdiSubWindow
operator|::
name|RubberBandMove
argument_list|)
operator|&&
name|currentOperation
operator|==
name|Move
operator|)
condition|)
block|{
name|enterRubberBandMode
argument_list|()
expr_stmt|;
block|}
else|else
endif|#
directive|endif
comment|// QT_NO_RUBBERBAND
block|{
name|q
operator|->
name|grabMouse
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_ACTION
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|_q_processFocusChanged
name|void
name|QMdiSubWindowPrivate
operator|::
name|_q_processFocusChanged
parameter_list|(
name|QWidget
modifier|*
name|old
parameter_list|,
name|QWidget
modifier|*
name|now
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|old
argument_list|)
expr_stmt|;
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|now
operator|&&
operator|(
name|now
operator|==
name|q
operator|||
name|q
operator|->
name|isAncestorOf
argument_list|(
name|now
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|now
operator|==
name|q
operator|&&
operator|!
name|isInInteractiveMode
condition|)
name|setFocusWidget
argument_list|()
expr_stmt|;
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|leaveInteractiveMode
name|void
name|QMdiSubWindowPrivate
operator|::
name|leaveInteractiveMode
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
if|if
condition|(
name|isInRubberBandMode
condition|)
name|leaveRubberBandMode
argument_list|()
expr_stmt|;
else|else
endif|#
directive|endif
name|q
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
name|isInInteractiveMode
operator|=
literal|false
expr_stmt|;
name|currentOperation
operator|=
name|None
expr_stmt|;
name|updateDirtyRegions
argument_list|()
expr_stmt|;
name|updateCursor
argument_list|()
expr_stmt|;
if|if
condition|(
name|baseWidget
operator|&&
name|baseWidget
operator|->
name|focusWidget
argument_list|()
condition|)
name|baseWidget
operator|->
name|focusWidget
argument_list|()
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|removeBaseWidget
name|void
name|QMdiSubWindowPrivate
operator|::
name|removeBaseWidget
parameter_list|()
block|{
if|if
condition|(
operator|!
name|baseWidget
condition|)
return|return;
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|baseWidget
operator|->
name|removeEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|layout
condition|)
name|layout
operator|->
name|removeWidget
argument_list|(
name|baseWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|baseWidget
operator|->
name|windowTitle
argument_list|()
operator|==
name|q
operator|->
name|windowTitle
argument_list|()
condition|)
block|{
name|ignoreWindowTitleChange
operator|=
literal|true
expr_stmt|;
name|q
operator|->
name|setWindowTitle
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|ignoreWindowTitleChange
operator|=
literal|false
expr_stmt|;
name|q
operator|->
name|setWindowModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|lastChildWindowTitle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|baseWidget
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|baseWidget
operator|=
literal|0
expr_stmt|;
name|isWidgetHiddenByUs
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|initOperationMap
name|void
name|QMdiSubWindowPrivate
operator|::
name|initOperationMap
parameter_list|()
block|{
name|operationMap
operator|.
name|insert
argument_list|(
name|Move
argument_list|,
name|OperationInfo
argument_list|(
name|HMove
operator||
name|VMove
argument_list|,
name|Qt
operator|::
name|ArrowCursor
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|operationMap
operator|.
name|insert
argument_list|(
name|TopResize
argument_list|,
name|OperationInfo
argument_list|(
name|VMove
operator||
name|VResize
operator||
name|VResizeReverse
argument_list|,
name|Qt
operator|::
name|SizeVerCursor
argument_list|)
argument_list|)
expr_stmt|;
name|operationMap
operator|.
name|insert
argument_list|(
name|BottomResize
argument_list|,
name|OperationInfo
argument_list|(
name|VResize
argument_list|,
name|Qt
operator|::
name|SizeVerCursor
argument_list|)
argument_list|)
expr_stmt|;
name|operationMap
operator|.
name|insert
argument_list|(
name|LeftResize
argument_list|,
name|OperationInfo
argument_list|(
name|HMove
operator||
name|HResize
operator||
name|HResizeReverse
argument_list|,
name|Qt
operator|::
name|SizeHorCursor
argument_list|)
argument_list|)
expr_stmt|;
name|operationMap
operator|.
name|insert
argument_list|(
name|RightResize
argument_list|,
name|OperationInfo
argument_list|(
name|HResize
argument_list|,
name|Qt
operator|::
name|SizeHorCursor
argument_list|)
argument_list|)
expr_stmt|;
name|operationMap
operator|.
name|insert
argument_list|(
name|TopLeftResize
argument_list|,
name|OperationInfo
argument_list|(
name|HMove
operator||
name|VMove
operator||
name|HResize
operator||
name|VResize
operator||
name|VResizeReverse
operator||
name|HResizeReverse
argument_list|,
name|Qt
operator|::
name|SizeFDiagCursor
argument_list|)
argument_list|)
expr_stmt|;
name|operationMap
operator|.
name|insert
argument_list|(
name|TopRightResize
argument_list|,
name|OperationInfo
argument_list|(
name|VMove
operator||
name|HResize
operator||
name|VResize
operator||
name|VResizeReverse
argument_list|,
name|Qt
operator|::
name|SizeBDiagCursor
argument_list|)
argument_list|)
expr_stmt|;
name|operationMap
operator|.
name|insert
argument_list|(
name|BottomLeftResize
argument_list|,
name|OperationInfo
argument_list|(
name|HMove
operator||
name|HResize
operator||
name|VResize
operator||
name|HResizeReverse
argument_list|,
name|Qt
operator|::
name|SizeBDiagCursor
argument_list|)
argument_list|)
expr_stmt|;
name|operationMap
operator|.
name|insert
argument_list|(
name|BottomRightResize
argument_list|,
name|OperationInfo
argument_list|(
name|HResize
operator||
name|VResize
argument_list|,
name|Qt
operator|::
name|SizeFDiagCursor
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENU
end_ifndef
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createSystemMenu
name|void
name|QMdiSubWindowPrivate
operator|::
name|createSystemMenu
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|q
argument_list|,
literal|"QMdiSubWindowPrivate::createSystemMenu"
argument_list|,
literal|"You can NOT call this function before QMdiSubWindow's ctor"
argument_list|)
expr_stmt|;
name|systemMenu
operator|=
operator|new
name|QMenu
argument_list|(
name|q
argument_list|)
expr_stmt|;
specifier|const
name|QStyle
modifier|*
name|style
init|=
name|q
operator|->
name|style
argument_list|()
decl_stmt|;
name|addToSystemMenu
argument_list|(
name|RestoreAction
argument_list|,
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"&Restore"
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|showNormal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|actions
index|[
name|RestoreAction
index|]
operator|->
name|setIcon
argument_list|(
name|style
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarNormalButton
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|actions
index|[
name|RestoreAction
index|]
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addToSystemMenu
argument_list|(
name|MoveAction
argument_list|,
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"&Move"
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_enterInteractiveMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToSystemMenu
argument_list|(
name|ResizeAction
argument_list|,
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"&Size"
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_enterInteractiveMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addToSystemMenu
argument_list|(
name|MinimizeAction
argument_list|,
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"Mi&nimize"
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|showMinimized
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|actions
index|[
name|MinimizeAction
index|]
operator|->
name|setIcon
argument_list|(
name|style
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarMinButton
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|addToSystemMenu
argument_list|(
name|MaximizeAction
argument_list|,
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"Ma&ximize"
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|showMaximized
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|actions
index|[
name|MaximizeAction
index|]
operator|->
name|setIcon
argument_list|(
name|style
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarMaxButton
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|addToSystemMenu
argument_list|(
name|StayOnTopAction
argument_list|,
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"Stay on&Top"
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|_q_updateStaysOnTopHint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|actions
index|[
name|StayOnTopAction
index|]
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|systemMenu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|addToSystemMenu
argument_list|(
name|CloseAction
argument_list|,
name|QMdiSubWindow
operator|::
name|tr
argument_list|(
literal|"&Close"
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|actions
index|[
name|CloseAction
index|]
operator|->
name|setIcon
argument_list|(
name|style
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarCloseButton
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_SHORTCUT
argument_list|)
name|actions
index|[
name|CloseAction
index|]
operator|->
name|setShortcuts
argument_list|(
name|QKeySequence
operator|::
name|Close
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|updateActions
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|updateCursor
name|void
name|QMdiSubWindowPrivate
operator|::
name|updateCursor
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMacStyle
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|style
argument_list|()
argument_list|)
condition|)
return|return;
endif|#
directive|endif
if|if
condition|(
name|currentOperation
operator|==
name|None
condition|)
block|{
name|q
operator|->
name|unsetCursor
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|currentOperation
operator|==
name|Move
operator|||
name|operationMap
operator|.
name|find
argument_list|(
name|currentOperation
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|hover
condition|)
block|{
name|q
operator|->
name|setCursor
argument_list|(
name|operationMap
operator|.
name|find
argument_list|(
name|currentOperation
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|cursorShape
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|updateDirtyRegions
name|void
name|QMdiSubWindowPrivate
operator|::
name|updateDirtyRegions
parameter_list|()
block|{
comment|// No update necessary
if|if
condition|(
operator|!
name|parent
condition|)
return|return;
foreach|foreach
control|(
name|Operation
name|operation
decl|,
name|operationMap
operator|.
name|keys
argument_list|()
control|)
name|operationMap
operator|.
name|find
argument_list|(
name|operation
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|region
operator|=
name|getRegion
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|updateGeometryConstraints
name|void
name|QMdiSubWindowPrivate
operator|::
name|updateGeometryConstraints
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parent
condition|)
return|return;
name|internalMinimumSize
operator|=
operator|(
operator|!
name|q
operator|->
name|isMinimized
argument_list|()
operator|&&
operator|!
name|q
operator|->
name|minimumSize
argument_list|()
operator|.
name|isNull
argument_list|()
operator|)
condition|?
name|q
operator|->
name|minimumSize
argument_list|()
else|:
name|q
operator|->
name|minimumSizeHint
argument_list|()
expr_stmt|;
name|int
name|margin
decl_stmt|,
name|minWidth
decl_stmt|;
name|sizeParameters
argument_list|(
operator|&
name|margin
argument_list|,
operator|&
name|minWidth
argument_list|)
expr_stmt|;
name|q
operator|->
name|setContentsMargins
argument_list|(
name|margin
argument_list|,
name|titleBarHeight
argument_list|()
argument_list|,
name|margin
argument_list|,
name|margin
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isMaximized
argument_list|()
operator|||
operator|(
name|q
operator|->
name|isMinimized
argument_list|()
operator|&&
operator|!
name|q
operator|->
name|isShaded
argument_list|()
operator|)
condition|)
block|{
name|moveEnabled
operator|=
literal|false
expr_stmt|;
name|resizeEnabled
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|moveEnabled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|(
name|q
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
operator|)
operator|||
name|q
operator|->
name|isShaded
argument_list|()
condition|)
name|resizeEnabled
operator|=
literal|false
expr_stmt|;
else|else
name|resizeEnabled
operator|=
literal|true
expr_stmt|;
block|}
name|updateDirtyRegions
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|updateMask
name|void
name|QMdiSubWindowPrivate
operator|::
name|updateMask
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|mask
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|q
operator|->
name|clearMask
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|parent
condition|)
return|return;
if|if
condition|(
operator|(
name|q
operator|->
name|isMaximized
argument_list|()
operator|&&
operator|!
name|drawTitleBarWhenMaximized
argument_list|()
operator|)
operator|||
name|q
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
return|return;
if|if
condition|(
name|resizeTimerId
operator|==
operator|-
literal|1
condition|)
name|cachedStyleOptions
operator|=
name|titleBarOptions
argument_list|()
expr_stmt|;
name|cachedStyleOptions
operator|.
name|rect
operator|=
name|q
operator|->
name|rect
argument_list|()
expr_stmt|;
name|QStyleHintReturnMask
name|frameMask
decl_stmt|;
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_WindowFrame_Mask
argument_list|,
operator|&
name|cachedStyleOptions
argument_list|,
name|q
argument_list|,
operator|&
name|frameMask
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|frameMask
operator|.
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
name|q
operator|->
name|setMask
argument_list|(
name|frameMask
operator|.
name|region
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setNewGeometry
name|void
name|QMdiSubWindowPrivate
operator|::
name|setNewGeometry
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|currentOperation
operator|!=
name|None
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|uint
name|cflags
init|=
name|operationMap
operator|.
name|find
argument_list|(
name|currentOperation
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|changeFlags
decl_stmt|;
name|int
name|posX
init|=
name|pos
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|posY
init|=
name|pos
operator|.
name|y
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|restrictHorizontal
init|=
operator|!
name|q
operator|->
name|testOption
argument_list|(
name|QMdiSubWindow
operator|::
name|AllowOutsideAreaHorizontally
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|restrictVertical
init|=
operator|!
name|q
operator|->
name|testOption
argument_list|(
name|QMdiSubWindow
operator|::
name|AllowOutsideAreaVertically
argument_list|)
decl_stmt|;
if|if
condition|(
name|restrictHorizontal
operator|||
name|restrictVertical
condition|)
block|{
name|QRect
name|parentRect
init|=
name|q
operator|->
name|parentWidget
argument_list|()
operator|->
name|rect
argument_list|()
decl_stmt|;
if|if
condition|(
name|restrictVertical
operator|&&
operator|(
name|cflags
operator|&
name|VResizeReverse
operator|||
name|currentOperation
operator|==
name|Move
operator|)
condition|)
block|{
name|posY
operator|=
name|qMin
argument_list|(
name|qMax
argument_list|(
name|mousePressPosition
operator|.
name|y
argument_list|()
operator|-
name|oldGeometry
operator|.
name|y
argument_list|()
argument_list|,
name|posY
argument_list|)
argument_list|,
name|parentRect
operator|.
name|height
argument_list|()
operator|-
name|BoundaryMargin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentOperation
operator|==
name|Move
condition|)
block|{
if|if
condition|(
name|restrictHorizontal
condition|)
name|posX
operator|=
name|qMin
argument_list|(
name|qMax
argument_list|(
name|BoundaryMargin
argument_list|,
name|posX
argument_list|)
argument_list|,
name|parentRect
operator|.
name|width
argument_list|()
operator|-
name|BoundaryMargin
argument_list|)
expr_stmt|;
if|if
condition|(
name|restrictVertical
condition|)
name|posY
operator|=
name|qMin
argument_list|(
name|posY
argument_list|,
name|parentRect
operator|.
name|height
argument_list|()
operator|-
name|BoundaryMargin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|restrictHorizontal
condition|)
block|{
if|if
condition|(
name|cflags
operator|&
name|HResizeReverse
condition|)
name|posX
operator|=
name|qMax
argument_list|(
name|mousePressPosition
operator|.
name|x
argument_list|()
operator|-
name|oldGeometry
operator|.
name|x
argument_list|()
argument_list|,
name|posX
argument_list|)
expr_stmt|;
else|else
name|posX
operator|=
name|qMin
argument_list|(
name|parentRect
operator|.
name|width
argument_list|()
operator|-
operator|(
name|oldGeometry
operator|.
name|x
argument_list|()
operator|+
name|oldGeometry
operator|.
name|width
argument_list|()
operator|-
name|mousePressPosition
operator|.
name|x
argument_list|()
operator|)
argument_list|,
name|posX
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|restrictVertical
operator|&&
operator|!
operator|(
name|cflags
operator|&
name|VResizeReverse
operator|)
condition|)
block|{
name|posY
operator|=
name|qMin
argument_list|(
name|parentRect
operator|.
name|height
argument_list|()
operator|-
operator|(
name|oldGeometry
operator|.
name|y
argument_list|()
operator|+
name|oldGeometry
operator|.
name|height
argument_list|()
operator|-
name|mousePressPosition
operator|.
name|y
argument_list|()
operator|)
argument_list|,
name|posY
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QRect
name|geometry
decl_stmt|;
if|if
condition|(
name|cflags
operator|&
operator|(
name|HMove
operator||
name|VMove
operator|)
condition|)
block|{
name|int
name|dx
init|=
name|getMoveDeltaComponent
argument_list|(
name|cflags
argument_list|,
name|HMove
argument_list|,
name|HResize
argument_list|,
name|posX
operator|-
name|mousePressPosition
operator|.
name|x
argument_list|()
argument_list|,
name|oldGeometry
operator|.
name|width
argument_list|()
operator|-
name|internalMinimumSize
operator|.
name|width
argument_list|()
argument_list|,
name|oldGeometry
operator|.
name|width
argument_list|()
operator|-
name|q
operator|->
name|maximumWidth
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|dy
init|=
name|getMoveDeltaComponent
argument_list|(
name|cflags
argument_list|,
name|VMove
argument_list|,
name|VResize
argument_list|,
name|posY
operator|-
name|mousePressPosition
operator|.
name|y
argument_list|()
argument_list|,
name|oldGeometry
operator|.
name|height
argument_list|()
operator|-
name|internalMinimumSize
operator|.
name|height
argument_list|()
argument_list|,
name|oldGeometry
operator|.
name|height
argument_list|()
operator|-
name|q
operator|->
name|maximumHeight
argument_list|()
argument_list|)
decl_stmt|;
name|geometry
operator|.
name|setTopLeft
argument_list|(
name|oldGeometry
operator|.
name|topLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|geometry
operator|.
name|setTopLeft
argument_list|(
name|q
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cflags
operator|&
operator|(
name|HResize
operator||
name|VResize
operator|)
condition|)
block|{
name|int
name|dx
init|=
name|getResizeDeltaComponent
argument_list|(
name|cflags
argument_list|,
name|HResize
argument_list|,
name|HResizeReverse
argument_list|,
name|posX
operator|-
name|mousePressPosition
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|dy
init|=
name|getResizeDeltaComponent
argument_list|(
name|cflags
argument_list|,
name|VResize
argument_list|,
name|VResizeReverse
argument_list|,
name|posY
operator|-
name|mousePressPosition
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|geometry
operator|.
name|setSize
argument_list|(
name|oldGeometry
operator|.
name|size
argument_list|()
operator|+
name|QSize
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|geometry
operator|.
name|setSize
argument_list|(
name|q
operator|->
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setNewGeometry
argument_list|(
operator|&
name|geometry
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setMinimizeMode
name|void
name|QMdiSubWindowPrivate
operator|::
name|setMinimizeMode
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|ensureWindowState
argument_list|(
name|Qt
operator|::
name|WindowMinimized
argument_list|)
expr_stmt|;
name|isShadeRequestFromMinimizeMode
operator|=
literal|true
expr_stmt|;
name|q
operator|->
name|showShaded
argument_list|()
expr_stmt|;
name|isShadeRequestFromMinimizeMode
operator|=
literal|false
expr_stmt|;
name|moveEnabled
operator|=
literal|false
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACTION
name|setEnabled
argument_list|(
name|MoveAction
argument_list|,
name|moveEnabled
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimized
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
operator|(
name|q
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
argument_list|)
expr_stmt|;
comment|// This should be a valid assert, but people can actually re-implement
comment|// setVisible and do crazy stuff, so we're not guaranteed that
comment|// the widget is hidden after calling hide().
comment|// Q_ASSERT(baseWidget ? baseWidget->isHidden() : true);
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setNormalMode
name|void
name|QMdiSubWindowPrivate
operator|::
name|setNormalMode
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|isShadeMode
operator|=
literal|false
expr_stmt|;
name|isMaximizeMode
operator|=
literal|false
expr_stmt|;
name|ensureWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
name|removeButtonsFromMenuBar
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// Hide the window before we change the geometry to avoid multiple resize
comment|// events and wrong window state.
specifier|const
name|bool
name|wasVisible
init|=
name|q
operator|->
name|isVisible
argument_list|()
decl_stmt|;
if|if
condition|(
name|wasVisible
condition|)
name|q
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Restore minimum size if set by user.
if|if
condition|(
operator|!
name|userMinimumSize
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|q
operator|->
name|setMinimumSize
argument_list|(
name|userMinimumSize
argument_list|)
expr_stmt|;
name|userMinimumSize
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Show the internal widget if it was hidden by us,
if|if
condition|(
name|baseWidget
operator|&&
name|isWidgetHiddenByUs
condition|)
block|{
name|baseWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|isWidgetHiddenByUs
operator|=
literal|false
expr_stmt|;
block|}
name|updateGeometryConstraints
argument_list|()
expr_stmt|;
name|QRect
name|newGeometry
init|=
name|oldGeometry
decl_stmt|;
name|newGeometry
operator|.
name|setSize
argument_list|(
name|restoreSize
operator|.
name|expandedTo
argument_list|(
name|internalMinimumSize
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setGeometry
argument_list|(
name|newGeometry
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasVisible
condition|)
name|q
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Invalidate the restore size.
name|restoreSize
operator|.
name|setWidth
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|restoreSize
operator|.
name|setHeight
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
name|setSizeGripVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_ACTION
name|setEnabled
argument_list|(
name|MoveAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|MaximizeAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|MinimizeAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|RestoreAction
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|ResizeAction
argument_list|,
name|resizeEnabled
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_ACTION
name|Q_ASSERT
argument_list|(
operator|!
operator|(
name|q_func
argument_list|()
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
argument_list|)
expr_stmt|;
comment|// This sub-window can be maximized when shown above if not the
comment|// QMdiArea::DontMaximizeSubWindowOnActionvation is set. Make sure
comment|// the Qt::WindowMaximized flag is set accordingly.
name|Q_ASSERT
argument_list|(
operator|(
name|isMaximizeMode
operator|&&
name|q_func
argument_list|()
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|||
operator|(
operator|!
name|isMaximizeMode
operator|&&
operator|!
operator|(
name|q_func
argument_list|()
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|isShadeMode
argument_list|)
expr_stmt|;
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|restoreFocus
argument_list|()
expr_stmt|;
name|updateMask
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setMaximizeMode
name|void
name|QMdiSubWindowPrivate
operator|::
name|setMaximizeMode
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|ensureWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|isShadeMode
operator|=
literal|false
expr_stmt|;
name|isMaximizeMode
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|restoreFocusWidget
operator|&&
name|q
operator|->
name|isAncestorOf
argument_list|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
condition|)
name|restoreFocusWidget
operator|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
name|setSizeGripVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Store old geometry and set restore size if not already set.
if|if
condition|(
operator|!
name|restoreSize
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|oldGeometry
operator|=
name|q
operator|->
name|geometry
argument_list|()
expr_stmt|;
name|restoreSize
operator|.
name|setWidth
argument_list|(
name|oldGeometry
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|restoreSize
operator|.
name|setHeight
argument_list|(
name|oldGeometry
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Hide the window before we change the geometry to avoid multiple resize
comment|// events and wrong window state.
specifier|const
name|bool
name|wasVisible
init|=
name|q
operator|->
name|isVisible
argument_list|()
decl_stmt|;
if|if
condition|(
name|wasVisible
condition|)
name|q
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Show the internal widget if it was hidden by us.
if|if
condition|(
name|baseWidget
operator|&&
name|isWidgetHiddenByUs
condition|)
block|{
name|baseWidget
operator|->
name|show
argument_list|()
expr_stmt|;
name|isWidgetHiddenByUs
operator|=
literal|false
expr_stmt|;
block|}
name|updateGeometryConstraints
argument_list|()
expr_stmt|;
if|if
condition|(
name|wasVisible
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
if|if
condition|(
name|QMenuBar
modifier|*
name|mBar
init|=
name|menuBar
argument_list|()
condition|)
name|showButtonsInMenuBar
argument_list|(
name|mBar
argument_list|)
expr_stmt|;
elseif|else
endif|#
directive|endif
if|if
condition|(
operator|!
name|controlContainer
condition|)
name|controlContainer
operator|=
operator|new
name|ControlContainer
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
name|QWidget
modifier|*
name|parent
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
name|QRect
name|availableRect
init|=
name|parent
operator|->
name|contentsRect
argument_list|()
decl_stmt|;
comment|// Adjust geometry if the sub-window is inside a scroll area.
name|QAbstractScrollArea
modifier|*
name|scrollArea
init|=
name|qobject_cast
argument_list|<
name|QAbstractScrollArea
operator|*
argument_list|>
argument_list|(
name|parent
operator|->
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|scrollArea
operator|&&
name|scrollArea
operator|->
name|viewport
argument_list|()
operator|==
name|parent
condition|)
block|{
name|QScrollBar
modifier|*
name|hbar
init|=
name|scrollArea
operator|->
name|horizontalScrollBar
argument_list|()
decl_stmt|;
name|QScrollBar
modifier|*
name|vbar
init|=
name|scrollArea
operator|->
name|verticalScrollBar
argument_list|()
decl_stmt|;
specifier|const
name|int
name|xOffset
init|=
name|hbar
condition|?
name|hbar
operator|->
name|value
argument_list|()
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|yOffset
init|=
name|vbar
condition|?
name|vbar
operator|->
name|value
argument_list|()
else|:
literal|0
decl_stmt|;
name|availableRect
operator|.
name|adjust
argument_list|(
operator|-
name|xOffset
argument_list|,
operator|-
name|yOffset
argument_list|,
operator|-
name|xOffset
argument_list|,
operator|-
name|yOffset
argument_list|)
expr_stmt|;
name|oldGeometry
operator|.
name|adjust
argument_list|(
name|xOffset
argument_list|,
name|yOffset
argument_list|,
name|xOffset
argument_list|,
name|yOffset
argument_list|)
expr_stmt|;
block|}
name|setNewGeometry
argument_list|(
operator|&
name|availableRect
argument_list|)
expr_stmt|;
comment|// QWidget::setGeometry will reset Qt::WindowMaximized so we have to update it here.
name|ensureWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasVisible
condition|)
name|q
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resizeEnabled
operator|=
literal|false
expr_stmt|;
name|moveEnabled
operator|=
literal|false
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACTION
name|setEnabled
argument_list|(
name|MoveAction
argument_list|,
name|moveEnabled
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|MaximizeAction
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|MinimizeAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|RestoreAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|ResizeAction
argument_list|,
name|resizeEnabled
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_ACTION
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
operator|(
name|q
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
argument_list|)
expr_stmt|;
name|restoreFocus
argument_list|()
expr_stmt|;
name|updateMask
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setActive
name|void
name|QMdiSubWindowPrivate
operator|::
name|setActive
parameter_list|(
name|bool
name|activate
parameter_list|,
name|bool
name|changeFocus
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parent
operator|||
operator|!
name|activationEnabled
condition|)
return|return;
if|if
condition|(
name|activate
operator|&&
operator|!
name|isActive
operator|&&
name|q
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|isActive
operator|=
literal|true
expr_stmt|;
name|isExplicitlyDeactivated
operator|=
literal|false
expr_stmt|;
name|Qt
operator|::
name|WindowStates
name|oldWindowState
init|=
name|q
operator|->
name|windowState
argument_list|()
decl_stmt|;
name|ensureWindowState
argument_list|(
name|Qt
operator|::
name|WindowActive
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|aboutToActivate
argument_list|()
emit|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
if|if
condition|(
name|QMenuBar
modifier|*
name|mBar
init|=
name|menuBar
argument_list|()
condition|)
name|showButtonsInMenuBar
argument_list|(
name|mBar
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_ASSERT
argument_list|(
name|isActive
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|windowStateChanged
argument_list|(
name|oldWindowState
argument_list|,
name|q
operator|->
name|windowState
argument_list|()
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
operator|!
name|activate
operator|&&
name|isActive
condition|)
block|{
name|isActive
operator|=
literal|false
expr_stmt|;
name|Qt
operator|::
name|WindowStates
name|oldWindowState
init|=
name|q
operator|->
name|windowState
argument_list|()
decl_stmt|;
name|q
operator|->
name|overrideWindowState
argument_list|(
name|q
operator|->
name|windowState
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|WindowActive
argument_list|)
expr_stmt|;
if|if
condition|(
name|changeFocus
condition|)
block|{
name|QWidget
modifier|*
name|focusWidget
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|focusWidget
operator|&&
operator|(
name|focusWidget
operator|==
name|q
operator|||
name|q
operator|->
name|isAncestorOf
argument_list|(
name|focusWidget
argument_list|)
operator|)
condition|)
name|focusWidget
operator|->
name|clearFocus
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|baseWidget
condition|)
name|baseWidget
operator|->
name|overrideWindowState
argument_list|(
name|baseWidget
operator|->
name|windowState
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|WindowActive
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
operator|!
name|isActive
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|windowStateChanged
argument_list|(
name|oldWindowState
argument_list|,
name|q
operator|->
name|windowState
argument_list|()
argument_list|)
emit|;
block|}
if|if
condition|(
name|activate
operator|&&
name|isActive
operator|&&
name|q
operator|->
name|isEnabled
argument_list|()
operator|&&
operator|!
name|q
operator|->
name|hasFocus
argument_list|()
operator|&&
operator|!
name|q
operator|->
name|isAncestorOf
argument_list|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|changeFocus
condition|)
name|setFocusWidget
argument_list|()
expr_stmt|;
name|ensureWindowState
argument_list|(
name|Qt
operator|::
name|WindowActive
argument_list|)
expr_stmt|;
block|}
name|int
name|frameWidth
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MdiSubWindowFrameWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|int
name|titleBarHeight
init|=
name|this
operator|->
name|titleBarHeight
argument_list|()
decl_stmt|;
name|QRegion
name|windowDecoration
init|=
name|QRegion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|q
operator|->
name|width
argument_list|()
argument_list|,
name|q
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|windowDecoration
operator|-=
name|QRegion
argument_list|(
name|frameWidth
argument_list|,
name|titleBarHeight
argument_list|,
name|q
operator|->
name|width
argument_list|()
operator|-
literal|2
operator|*
name|frameWidth
argument_list|,
name|q
operator|->
name|height
argument_list|()
operator|-
name|titleBarHeight
operator|-
name|frameWidth
argument_list|)
expr_stmt|;
comment|// Make sure we don't use cached style options if we get
comment|// resize events right before activation/deactivation.
if|if
condition|(
name|resizeTimerId
operator|!=
operator|-
literal|1
condition|)
block|{
name|q
operator|->
name|killTimer
argument_list|(
name|resizeTimerId
argument_list|)
expr_stmt|;
name|resizeTimerId
operator|=
operator|-
literal|1
expr_stmt|;
name|updateDirtyRegions
argument_list|()
expr_stmt|;
block|}
name|q
operator|->
name|update
argument_list|(
name|windowDecoration
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|processClickedSubControl
name|void
name|QMdiSubWindowPrivate
operator|::
name|processClickedSubControl
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|activeSubControl
condition|)
block|{
case|case
name|QStyle
operator|::
name|SC_TitleBarContextHelpButton
case|:
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
name|QWhatsThis
operator|::
name|enterWhatsThisMode
argument_list|()
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarShadeButton
case|:
name|q
operator|->
name|showShaded
argument_list|()
expr_stmt|;
name|hoveredSubControl
operator|=
name|QStyle
operator|::
name|SC_TitleBarUnshadeButton
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarUnshadeButton
case|:
if|if
condition|(
name|q
operator|->
name|isShaded
argument_list|()
condition|)
name|hoveredSubControl
operator|=
name|QStyle
operator|::
name|SC_TitleBarShadeButton
expr_stmt|;
name|q
operator|->
name|showNormal
argument_list|()
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarMinButton
case|:
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMacStyle
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|style
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|isMinimized
argument_list|()
condition|)
name|q
operator|->
name|showNormal
argument_list|()
expr_stmt|;
else|else
name|q
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
name|q
operator|->
name|showMinimized
argument_list|()
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarNormalButton
case|:
if|if
condition|(
name|q
operator|->
name|isShaded
argument_list|()
condition|)
name|hoveredSubControl
operator|=
name|QStyle
operator|::
name|SC_TitleBarMinButton
expr_stmt|;
name|q
operator|->
name|showNormal
argument_list|()
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarMaxButton
case|:
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMacStyle
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|style
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|isMaximized
argument_list|()
condition|)
name|q
operator|->
name|showNormal
argument_list|()
expr_stmt|;
else|else
name|q
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
name|q
operator|->
name|showMaximized
argument_list|()
expr_stmt|;
break|break;
case|case
name|QStyle
operator|::
name|SC_TitleBarCloseButton
case|:
name|q
operator|->
name|close
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|getRegion
name|QRegion
name|QMdiSubWindowPrivate
operator|::
name|getRegion
parameter_list|(
name|Operation
name|operation
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|int
name|width
init|=
name|q
operator|->
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
name|q
operator|->
name|height
argument_list|()
decl_stmt|;
name|int
name|titleBarHeight
init|=
name|this
operator|->
name|titleBarHeight
argument_list|()
decl_stmt|;
name|int
name|frameWidth
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MdiSubWindowFrameWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|int
name|cornerConst
init|=
name|titleBarHeight
operator|-
name|frameWidth
decl_stmt|;
name|int
name|titleBarConst
init|=
literal|2
operator|*
name|titleBarHeight
decl_stmt|;
if|if
condition|(
name|operation
operator|==
name|Move
condition|)
block|{
name|QStyleOptionTitleBar
name|titleBarOptions
init|=
name|this
operator|->
name|titleBarOptions
argument_list|()
decl_stmt|;
name|QRegion
name|move
argument_list|(
name|frameWidth
argument_list|,
name|frameWidth
argument_list|,
name|width
operator|-
literal|2
operator|*
name|frameWidth
argument_list|,
name|cornerConst
argument_list|)
decl_stmt|;
comment|// Depending on which window flags are set, activated sub controllers will
comment|// be subtracted from the 'move' region.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumSubControls
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|SubControls
index|[
name|i
index|]
operator|==
name|QStyle
operator|::
name|SC_TitleBarLabel
condition|)
continue|continue;
name|move
operator|-=
name|QRegion
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|titleBarOptions
argument_list|,
name|SubControls
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|move
return|;
block|}
name|QRegion
name|region
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMacStyle
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|style
argument_list|()
argument_list|)
condition|)
return|return
name|region
return|;
endif|#
directive|endif
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|TopResize
case|:
name|region
operator|=
name|QRegion
argument_list|(
name|titleBarHeight
argument_list|,
literal|0
argument_list|,
name|width
operator|-
name|titleBarConst
argument_list|,
name|frameWidth
argument_list|)
expr_stmt|;
break|break;
case|case
name|BottomResize
case|:
name|region
operator|=
name|QRegion
argument_list|(
name|titleBarHeight
argument_list|,
name|height
operator|-
name|frameWidth
argument_list|,
name|width
operator|-
name|titleBarConst
argument_list|,
name|frameWidth
argument_list|)
expr_stmt|;
break|break;
case|case
name|LeftResize
case|:
name|region
operator|=
name|QRegion
argument_list|(
literal|0
argument_list|,
name|titleBarHeight
argument_list|,
name|frameWidth
argument_list|,
name|height
operator|-
name|titleBarConst
argument_list|)
expr_stmt|;
break|break;
case|case
name|RightResize
case|:
name|region
operator|=
name|QRegion
argument_list|(
name|width
operator|-
name|frameWidth
argument_list|,
name|titleBarHeight
argument_list|,
name|frameWidth
argument_list|,
name|height
operator|-
name|titleBarConst
argument_list|)
expr_stmt|;
break|break;
case|case
name|TopLeftResize
case|:
name|region
operator|=
name|QRegion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|titleBarHeight
argument_list|,
name|titleBarHeight
argument_list|)
operator|-
name|QRegion
argument_list|(
name|frameWidth
argument_list|,
name|frameWidth
argument_list|,
name|cornerConst
argument_list|,
name|cornerConst
argument_list|)
expr_stmt|;
break|break;
case|case
name|TopRightResize
case|:
name|region
operator|=
name|QRegion
argument_list|(
name|width
operator|-
name|titleBarHeight
argument_list|,
literal|0
argument_list|,
name|titleBarHeight
argument_list|,
name|titleBarHeight
argument_list|)
operator|-
name|QRegion
argument_list|(
name|width
operator|-
name|titleBarHeight
argument_list|,
name|frameWidth
argument_list|,
name|cornerConst
argument_list|,
name|cornerConst
argument_list|)
expr_stmt|;
break|break;
case|case
name|BottomLeftResize
case|:
name|region
operator|=
name|QRegion
argument_list|(
literal|0
argument_list|,
name|height
operator|-
name|titleBarHeight
argument_list|,
name|titleBarHeight
argument_list|,
name|titleBarHeight
argument_list|)
operator|-
name|QRegion
argument_list|(
name|frameWidth
argument_list|,
name|height
operator|-
name|titleBarHeight
argument_list|,
name|cornerConst
argument_list|,
name|cornerConst
argument_list|)
expr_stmt|;
break|break;
case|case
name|BottomRightResize
case|:
name|region
operator|=
name|QRegion
argument_list|(
name|width
operator|-
name|titleBarHeight
argument_list|,
name|height
operator|-
name|titleBarHeight
argument_list|,
name|titleBarHeight
argument_list|,
name|titleBarHeight
argument_list|)
operator|-
name|QRegion
argument_list|(
name|width
operator|-
name|titleBarHeight
argument_list|,
name|height
operator|-
name|titleBarHeight
argument_list|,
name|cornerConst
argument_list|,
name|cornerConst
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|region
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|getOperation
name|QMdiSubWindowPrivate
operator|::
name|Operation
name|QMdiSubWindowPrivate
operator|::
name|getOperation
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|OperationInfoMap
operator|::
name|const_iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|operationMap
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|operationMap
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|region
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
return|return
name|it
operator|.
name|key
argument_list|()
return|;
return|return
name|None
return|;
block|}
end_function
begin_function_decl
specifier|extern
name|QString
name|qt_setWindowTitle_helperHelper
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|titleBarOptions
name|QStyleOptionTitleBar
name|QMdiSubWindowPrivate
operator|::
name|titleBarOptions
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|QStyleOptionTitleBar
name|titleBarOptions
decl_stmt|;
name|titleBarOptions
operator|.
name|initFrom
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|activeSubControl
operator|!=
name|QStyle
operator|::
name|SC_None
condition|)
block|{
if|if
condition|(
name|hoveredSubControl
operator|==
name|activeSubControl
condition|)
block|{
name|titleBarOptions
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
name|titleBarOptions
operator|.
name|activeSubControls
operator|=
name|activeSubControl
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|autoRaise
argument_list|()
operator|&&
name|hoveredSubControl
operator|!=
name|QStyle
operator|::
name|SC_None
operator|&&
name|hoveredSubControl
operator|!=
name|QStyle
operator|::
name|SC_TitleBarLabel
condition|)
block|{
name|titleBarOptions
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
name|titleBarOptions
operator|.
name|activeSubControls
operator|=
name|hoveredSubControl
expr_stmt|;
block|}
else|else
block|{
name|titleBarOptions
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
name|titleBarOptions
operator|.
name|activeSubControls
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
block|}
name|titleBarOptions
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_All
expr_stmt|;
name|titleBarOptions
operator|.
name|titleBarFlags
operator|=
name|q
operator|->
name|windowFlags
argument_list|()
expr_stmt|;
name|titleBarOptions
operator|.
name|titleBarState
operator|=
name|q
operator|->
name|windowState
argument_list|()
expr_stmt|;
name|titleBarOptions
operator|.
name|palette
operator|=
name|titleBarPalette
expr_stmt|;
name|titleBarOptions
operator|.
name|icon
operator|=
name|menuIcon
expr_stmt|;
if|if
condition|(
name|isActive
condition|)
block|{
name|titleBarOptions
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Active
expr_stmt|;
name|titleBarOptions
operator|.
name|titleBarState
operator||=
name|QStyle
operator|::
name|State_Active
expr_stmt|;
name|titleBarOptions
operator|.
name|palette
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|titleBarOptions
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Active
expr_stmt|;
name|titleBarOptions
operator|.
name|palette
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|)
expr_stmt|;
block|}
name|int
name|border
init|=
name|hasBorder
argument_list|(
name|titleBarOptions
argument_list|)
condition|?
literal|4
else|:
literal|0
decl_stmt|;
name|int
name|paintHeight
init|=
name|titleBarHeight
argument_list|(
name|titleBarOptions
argument_list|)
decl_stmt|;
name|paintHeight
operator|-=
name|q
operator|->
name|isMinimized
argument_list|()
condition|?
literal|2
operator|*
name|border
else|:
name|border
expr_stmt|;
name|titleBarOptions
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|border
argument_list|,
name|border
argument_list|,
name|q
operator|->
name|width
argument_list|()
operator|-
literal|2
operator|*
name|border
argument_list|,
name|paintHeight
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|windowTitle
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Set the text here before asking for the width of the title bar label
comment|// in case people uses the actual text to calculate the width.
name|titleBarOptions
operator|.
name|text
operator|=
name|windowTitle
expr_stmt|;
name|titleBarOptions
operator|.
name|fontMetrics
operator|=
name|QFontMetrics
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|int
name|width
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|titleBarOptions
argument_list|,
name|QStyle
operator|::
name|SC_TitleBarLabel
argument_list|,
name|q
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
comment|// Set elided text if we don't have enough space for the entire title.
name|titleBarOptions
operator|.
name|text
operator|=
name|titleBarOptions
operator|.
name|fontMetrics
operator|.
name|elidedText
argument_list|(
name|windowTitle
argument_list|,
name|Qt
operator|::
name|ElideRight
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
return|return
name|titleBarOptions
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|ensureWindowState
name|void
name|QMdiSubWindowPrivate
operator|::
name|ensureWindowState
parameter_list|(
name|Qt
operator|::
name|WindowState
name|state
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|WindowStates
name|windowStates
init|=
name|q
operator|->
name|windowState
argument_list|()
operator||
name|state
decl_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|Qt
operator|::
name|WindowMinimized
case|:
name|windowStates
operator|&=
operator|~
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
name|windowStates
operator|&=
operator|~
name|Qt
operator|::
name|WindowNoState
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowMaximized
case|:
name|windowStates
operator|&=
operator|~
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
name|windowStates
operator|&=
operator|~
name|Qt
operator|::
name|WindowNoState
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|WindowNoState
case|:
name|windowStates
operator|&=
operator|~
name|Qt
operator|::
name|WindowMinimized
expr_stmt|;
name|windowStates
operator|&=
operator|~
name|Qt
operator|::
name|WindowMaximized
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|baseWidget
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|baseWidget
operator|->
name|windowState
argument_list|()
operator|&
name|Qt
operator|::
name|WindowActive
operator|)
operator|&&
name|windowStates
operator|&
name|Qt
operator|::
name|WindowActive
condition|)
name|baseWidget
operator|->
name|overrideWindowState
argument_list|(
name|windowStates
operator|&
operator|~
name|Qt
operator|::
name|WindowActive
argument_list|)
expr_stmt|;
else|else
name|baseWidget
operator|->
name|overrideWindowState
argument_list|(
name|windowStates
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|overrideWindowState
argument_list|(
name|windowStates
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|titleBarHeight
name|int
name|QMdiSubWindowPrivate
operator|::
name|titleBarHeight
parameter_list|(
specifier|const
name|QStyleOptionTitleBar
modifier|&
name|options
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parent
operator|||
name|q
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|||
operator|(
name|q
operator|->
name|isMaximized
argument_list|()
operator|&&
operator|!
name|drawTitleBarWhenMaximized
argument_list|()
operator|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|height
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TitleBarHeight
argument_list|,
operator|&
name|options
argument_list|,
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasBorder
argument_list|(
name|options
argument_list|)
condition|)
name|height
operator|+=
name|q
operator|->
name|isMinimized
argument_list|()
condition|?
literal|8
else|:
literal|4
expr_stmt|;
return|return
name|height
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|sizeParameters
name|void
name|QMdiSubWindowPrivate
operator|::
name|sizeParameters
parameter_list|(
name|int
modifier|*
name|margin
parameter_list|,
name|int
modifier|*
name|minWidth
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|q
operator|->
name|windowFlags
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|||
name|flags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
block|{
operator|*
name|margin
operator|=
literal|0
expr_stmt|;
operator|*
name|minWidth
operator|=
literal|0
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|q
operator|->
name|isMaximized
argument_list|()
operator|&&
operator|!
name|drawTitleBarWhenMaximized
argument_list|()
condition|)
operator|*
name|margin
operator|=
literal|0
expr_stmt|;
else|else
operator|*
name|margin
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MdiSubWindowFrameWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|QStyleOptionTitleBar
name|opt
init|=
name|this
operator|->
name|titleBarOptions
argument_list|()
decl_stmt|;
name|int
name|tempWidth
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumSubControls
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|SubControls
index|[
name|i
index|]
operator|==
name|QStyle
operator|::
name|SC_TitleBarLabel
condition|)
block|{
name|tempWidth
operator|+=
literal|30
expr_stmt|;
continue|continue;
block|}
name|QRect
name|rect
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|opt
argument_list|,
name|SubControls
index|[
name|i
index|]
argument_list|,
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
name|tempWidth
operator|+=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
operator|*
name|minWidth
operator|=
name|tempWidth
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|drawTitleBarWhenMaximized
name|bool
name|QMdiSubWindowPrivate
operator|::
name|drawTitleBarWhenMaximized
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|window
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_CanHostQMdiSubWindowTitleBar
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|isChildOfTabbedQMdiArea
argument_list|(
name|q
argument_list|)
condition|)
return|return
literal|false
return|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
name|Q_UNUSED
argument_list|(
name|isChildOfQMdiSubWindow
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
else|#
directive|else
if|if
condition|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Workspace_FillSpaceOnMaximize
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
condition|)
return|return
literal|true
return|;
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_MENUBAR
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_NO_MAINWINDOW
argument_list|)
name|Q_UNUSED
argument_list|(
name|isChildOfQMdiSubWindow
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
else|#
directive|else
name|QMainWindow
modifier|*
name|mainWindow
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|window
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mainWindow
operator|||
operator|!
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|mainWindow
operator|->
name|menuWidget
argument_list|()
argument_list|)
operator|||
name|mainWindow
operator|->
name|menuWidget
argument_list|()
operator|->
name|isHidden
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
name|isChildOfQMdiSubWindow
argument_list|(
name|q
argument_list|)
return|;
endif|#
directive|endif
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
end_ifndef
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|showButtonsInMenuBar
name|void
name|QMdiSubWindowPrivate
operator|::
name|showButtonsInMenuBar
parameter_list|(
name|QMenuBar
modifier|*
name|menuBar
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|->
name|isMaximized
argument_list|()
operator|&&
operator|!
name|drawTitleBarWhenMaximized
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isChildOfTabbedQMdiArea
argument_list|(
name|q
argument_list|)
condition|)
return|return;
name|removeButtonsFromMenuBar
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|controlContainer
condition|)
name|controlContainer
operator|=
operator|new
name|ControlContainer
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|ignoreWindowTitleChange
operator|=
literal|true
expr_stmt|;
name|controlContainer
operator|->
name|showButtonsInMenuBar
argument_list|(
name|menuBar
argument_list|)
expr_stmt|;
name|ignoreWindowTitleChange
operator|=
literal|false
expr_stmt|;
name|QWidget
modifier|*
name|topLevelWindow
init|=
name|q
operator|->
name|window
argument_list|()
decl_stmt|;
name|topLevelWindow
operator|->
name|setWindowModified
argument_list|(
name|q
operator|->
name|isWindowModified
argument_list|()
argument_list|)
expr_stmt|;
name|topLevelWindow
operator|->
name|installEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|int
name|buttonHeight
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|controlContainer
operator|->
name|controllerWidget
argument_list|()
condition|)
name|buttonHeight
operator|=
name|controlContainer
operator|->
name|controllerWidget
argument_list|()
operator|->
name|height
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|controlContainer
operator|->
name|systemMenuLabel
argument_list|()
condition|)
name|buttonHeight
operator|=
name|controlContainer
operator|->
name|systemMenuLabel
argument_list|()
operator|->
name|height
argument_list|()
expr_stmt|;
comment|// This will rarely happen.
if|if
condition|(
name|menuBar
operator|&&
name|menuBar
operator|->
name|height
argument_list|()
operator|<
name|buttonHeight
operator|&&
name|topLevelWindow
operator|->
name|layout
argument_list|()
condition|)
block|{
comment|// Make sure topLevelWindow->contentsRect returns correct geometry.
comment|// topLevelWidget->updateGeoemtry will not do the trick here since it will post the event.
name|QEvent
name|event
argument_list|(
name|QEvent
operator|::
name|LayoutRequest
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|topLevelWindow
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|removeButtonsFromMenuBar
name|void
name|QMdiSubWindowPrivate
operator|::
name|removeButtonsFromMenuBar
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|controlContainer
operator|||
name|isChildOfTabbedQMdiArea
argument_list|(
name|q
argument_list|)
condition|)
return|return;
name|QMenuBar
modifier|*
name|currentMenuBar
init|=
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MAINWINDOW
if|if
condition|(
name|QMainWindow
modifier|*
name|mainWindow
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|window
argument_list|()
argument_list|)
condition|)
block|{
comment|// NB! We can't use menuBar() here because that one will actually create
comment|// a menubar for us if not set. That's not what we want :-)
name|currentMenuBar
operator|=
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|mainWindow
operator|->
name|menuWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|ignoreWindowTitleChange
operator|=
literal|true
expr_stmt|;
name|controlContainer
operator|->
name|removeButtonsFromMenuBar
argument_list|(
name|currentMenuBar
argument_list|)
expr_stmt|;
name|ignoreWindowTitleChange
operator|=
literal|false
expr_stmt|;
name|QWidget
modifier|*
name|topLevelWindow
init|=
name|q
operator|->
name|window
argument_list|()
decl_stmt|;
name|topLevelWindow
operator|->
name|removeEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|baseWidget
operator|&&
operator|!
name|drawTitleBarWhenMaximized
argument_list|()
condition|)
name|topLevelWindow
operator|->
name|setWindowModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|originalTitle
operator|=
name|QString
operator|::
name|null
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MENUBAR
end_comment
begin_function
DECL|function|updateWindowTitle
name|void
name|QMdiSubWindowPrivate
operator|::
name|updateWindowTitle
parameter_list|(
name|bool
name|isRequestFromChild
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRequestFromChild
operator|&&
operator|!
name|q
operator|->
name|windowTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|lastChildWindowTitle
operator|.
name|isEmpty
argument_list|()
operator|&&
name|lastChildWindowTitle
operator|!=
name|q
operator|->
name|windowTitle
argument_list|()
condition|)
block|{
return|return;
block|}
name|QWidget
modifier|*
name|titleWidget
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isRequestFromChild
condition|)
name|titleWidget
operator|=
name|baseWidget
expr_stmt|;
else|else
name|titleWidget
operator|=
name|q
expr_stmt|;
if|if
condition|(
operator|!
name|titleWidget
operator|||
name|titleWidget
operator|->
name|windowTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|ignoreWindowTitleChange
operator|=
literal|true
expr_stmt|;
name|q
operator|->
name|setWindowTitle
argument_list|(
name|titleWidget
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|maximizedButtonsWidget
argument_list|()
condition|)
name|setNewWindowTitle
argument_list|()
expr_stmt|;
name|ignoreWindowTitleChange
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
end_ifndef
begin_function
DECL|function|enterRubberBandMode
name|void
name|QMdiSubWindowPrivate
operator|::
name|enterRubberBandMode
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isMaximized
argument_list|()
condition|)
return|return;
name|Q_ASSERT
argument_list|(
name|oldGeometry
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rubberBand
condition|)
block|{
name|rubberBand
operator|=
operator|new
name|QRubberBand
argument_list|(
name|QRubberBand
operator|::
name|Rectangle
argument_list|,
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
comment|// For accessibility to identify this special widget.
name|rubberBand
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_rubberband"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QPoint
name|rubberBandPos
init|=
name|q
operator|->
name|mapToParent
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|rubberBand
operator|->
name|setGeometry
argument_list|(
name|rubberBandPos
operator|.
name|x
argument_list|()
argument_list|,
name|rubberBandPos
operator|.
name|y
argument_list|()
argument_list|,
name|oldGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|oldGeometry
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|rubberBand
operator|->
name|show
argument_list|()
expr_stmt|;
name|isInRubberBandMode
operator|=
literal|true
expr_stmt|;
name|q
operator|->
name|grabMouse
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leaveRubberBandMode
name|void
name|QMdiSubWindowPrivate
operator|::
name|leaveRubberBandMode
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|rubberBand
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|isInRubberBandMode
argument_list|)
expr_stmt|;
name|q
operator|->
name|releaseMouse
argument_list|()
expr_stmt|;
name|isInRubberBandMode
operator|=
literal|false
expr_stmt|;
name|q
operator|->
name|setGeometry
argument_list|(
name|rubberBand
operator|->
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
name|rubberBand
operator|->
name|hide
argument_list|()
expr_stmt|;
name|currentOperation
operator|=
name|None
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_RUBBERBAND
end_comment
begin_comment
comment|// Taken from the old QWorkspace (::readColors())
end_comment
begin_function
DECL|function|desktopPalette
name|QPalette
name|QMdiSubWindowPrivate
operator|::
name|desktopPalette
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|QPalette
name|newPalette
init|=
name|q
operator|->
name|palette
argument_list|()
decl_stmt|;
name|bool
name|colorsInitialized
init|=
literal|false
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WIN
comment|// ask system properties on windows
ifndef|#
directive|ifndef
name|SPI_GETGRADIENTCAPTIONS
DECL|macro|SPI_GETGRADIENTCAPTIONS
define|#
directive|define
name|SPI_GETGRADIENTCAPTIONS
value|0x1008
endif|#
directive|endif
ifndef|#
directive|ifndef
name|COLOR_GRADIENTACTIVECAPTION
DECL|macro|COLOR_GRADIENTACTIVECAPTION
define|#
directive|define
name|COLOR_GRADIENTACTIVECAPTION
value|27
endif|#
directive|endif
ifndef|#
directive|ifndef
name|COLOR_GRADIENTINACTIVECAPTION
DECL|macro|COLOR_GRADIENTINACTIVECAPTION
define|#
directive|define
name|COLOR_GRADIENTINACTIVECAPTION
value|28
endif|#
directive|endif
if|if
condition|(
name|QApplication
operator|::
name|desktopSettingsAware
argument_list|()
condition|)
block|{
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_ACTIVECAPTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_INACTIVECAPTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_CAPTIONTEXT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_INACTIVECAPTIONTEXT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|colorsInitialized
operator|=
literal|true
expr_stmt|;
name|BOOL
name|hasGradient
init|=
literal|false
decl_stmt|;
name|SystemParametersInfo
argument_list|(
name|SPI_GETGRADIENTCAPTIONS
argument_list|,
literal|0
argument_list|,
operator|&
name|hasGradient
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasGradient
condition|)
block|{
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_GRADIENTACTIVECAPTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|colorref2qrgb
argument_list|(
name|GetSysColor
argument_list|(
name|COLOR_GRADIENTINACTIVECAPTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|newPalette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|newPalette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// Q_WS_WIN
if|if
condition|(
operator|!
name|colorsInitialized
condition|)
block|{
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|newPalette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|newPalette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|,
name|newPalette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|)
expr_stmt|;
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|,
name|newPalette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|)
expr_stmt|;
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|,
name|newPalette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|newPalette
return|;
block|}
end_function
begin_function
DECL|function|updateActions
name|void
name|QMdiSubWindowPrivate
operator|::
name|updateActions
parameter_list|()
block|{
name|Qt
operator|::
name|WindowFlags
name|windowFlags
init|=
name|q_func
argument_list|()
operator|->
name|windowFlags
argument_list|()
decl_stmt|;
comment|// Hide all
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumWindowStateActions
condition|;
operator|++
name|i
control|)
name|setVisible
argument_list|(
name|WindowStateAction
argument_list|(
name|i
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowFlags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
return|return;
name|setVisible
argument_list|(
name|StayOnTopAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
name|MoveAction
argument_list|,
name|moveEnabled
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
name|ResizeAction
argument_list|,
name|resizeEnabled
argument_list|)
expr_stmt|;
comment|// CloseAction
if|if
condition|(
name|windowFlags
operator|&
name|Qt
operator|::
name|WindowSystemMenuHint
condition|)
name|setVisible
argument_list|(
name|CloseAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// RestoreAction
if|if
condition|(
name|windowFlags
operator|&
operator|(
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator||
name|Qt
operator|::
name|WindowMaximizeButtonHint
operator|)
condition|)
name|setVisible
argument_list|(
name|RestoreAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// MinimizeAction
if|if
condition|(
name|windowFlags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
condition|)
name|setVisible
argument_list|(
name|MinimizeAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// MaximizeAction
if|if
condition|(
name|windowFlags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
name|setVisible
argument_list|(
name|MaximizeAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFocusWidget
name|void
name|QMdiSubWindowPrivate
operator|::
name|setFocusWidget
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|baseWidget
condition|)
block|{
name|q
operator|->
name|setFocus
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// This will give focus to the next child if possible, otherwise
comment|// do nothing, hence it's not possible to tab between windows with
comment|// just hitting tab (unless Qt::TabFocus is removed from the focus policy).
if|if
condition|(
name|focusInReason
operator|==
name|Qt
operator|::
name|TabFocusReason
condition|)
block|{
name|q
operator|->
name|focusNextChild
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Same as above, but gives focus to the previous child.
if|if
condition|(
name|focusInReason
operator|==
name|Qt
operator|::
name|BacktabFocusReason
condition|)
block|{
name|q
operator|->
name|focusPreviousChild
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|QWidget
modifier|*
name|focusWidget
init|=
name|baseWidget
operator|->
name|focusWidget
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|focusWidget
operator|->
name|hasFocus
argument_list|()
operator|&&
name|q
operator|->
name|isAncestorOf
argument_list|(
name|focusWidget
argument_list|)
operator|&&
name|focusWidget
operator|->
name|isVisible
argument_list|()
operator|&&
operator|!
name|q
operator|->
name|isMinimized
argument_list|()
operator|&&
name|focusWidget
operator|->
name|focusPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoFocus
condition|)
block|{
name|focusWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|q
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|QWidget
modifier|*
name|focusWidget
init|=
name|q
operator|->
name|nextInFocusChain
argument_list|()
decl_stmt|;
while|while
condition|(
name|focusWidget
operator|&&
name|focusWidget
operator|!=
name|q
operator|&&
name|focusWidget
operator|->
name|focusPolicy
argument_list|()
operator|==
name|Qt
operator|::
name|NoFocus
condition|)
name|focusWidget
operator|=
name|focusWidget
operator|->
name|nextInFocusChain
argument_list|()
expr_stmt|;
if|if
condition|(
name|focusWidget
operator|&&
name|q
operator|->
name|isAncestorOf
argument_list|(
name|focusWidget
argument_list|)
condition|)
name|focusWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|baseWidget
operator|->
name|focusPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoFocus
condition|)
name|baseWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|q
operator|->
name|hasFocus
argument_list|()
condition|)
name|q
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|restoreFocus
name|void
name|QMdiSubWindowPrivate
operator|::
name|restoreFocus
parameter_list|()
block|{
if|if
condition|(
operator|!
name|restoreFocusWidget
condition|)
return|return;
if|if
condition|(
operator|!
name|restoreFocusWidget
operator|->
name|hasFocus
argument_list|()
operator|&&
name|q_func
argument_list|()
operator|->
name|isAncestorOf
argument_list|(
name|restoreFocusWidget
argument_list|)
operator|&&
name|restoreFocusWidget
operator|->
name|isVisible
argument_list|()
operator|&&
name|restoreFocusWidget
operator|->
name|focusPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoFocus
condition|)
block|{
name|restoreFocusWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
name|restoreFocusWidget
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setWindowFlags
name|void
name|QMdiSubWindowPrivate
operator|::
name|setWindowFlags
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|windowFlags
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parent
condition|)
block|{
name|QWidgetPrivate
operator|::
name|setWindowFlags
argument_list|(
name|windowFlags
argument_list|)
expr_stmt|;
return|return;
block|}
name|Qt
operator|::
name|WindowFlags
name|windowType
init|=
name|windowFlags
operator|&
name|Qt
operator|::
name|WindowType_Mask
decl_stmt|;
if|if
condition|(
name|windowType
operator|==
name|Qt
operator|::
name|Dialog
operator|||
name|windowFlags
operator|&
name|Qt
operator|::
name|MSWindowsFixedSizeDialogHint
condition|)
name|windowFlags
operator||=
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
expr_stmt|;
comment|// Set standard flags if none of the customize flags are set
if|if
condition|(
operator|!
operator|(
name|windowFlags
operator|&
name|CustomizeWindowFlags
operator|)
condition|)
name|windowFlags
operator||=
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowSystemMenuHint
operator||
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
expr_stmt|;
elseif|else
if|if
condition|(
name|windowFlags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|&&
name|windowFlags
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
condition|)
name|windowFlags
operator|=
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|WindowStaysOnTopHint
expr_stmt|;
elseif|else
if|if
condition|(
name|windowFlags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
name|windowFlags
operator|=
name|Qt
operator|::
name|FramelessWindowHint
expr_stmt|;
name|windowFlags
operator|&=
operator|~
name|windowType
expr_stmt|;
name|windowFlags
operator|&=
operator|~
name|Qt
operator|::
name|WindowFullscreenButtonHint
expr_stmt|;
name|windowFlags
operator||=
name|Qt
operator|::
name|SubWindow
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACTION
if|if
condition|(
name|QAction
modifier|*
name|stayOnTopAction
init|=
name|actions
index|[
name|QMdiSubWindowPrivate
operator|::
name|StayOnTopAction
index|]
condition|)
block|{
if|if
condition|(
name|windowFlags
operator|&
name|Qt
operator|::
name|WindowStaysOnTopHint
condition|)
name|stayOnTopAction
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
name|stayOnTopAction
operator|->
name|setChecked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
if|if
condition|(
operator|(
name|windowFlags
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
operator|&&
name|sizeGrip
condition|)
operator|delete
name|sizeGrip
expr_stmt|;
endif|#
directive|endif
name|QWidgetPrivate
operator|::
name|setWindowFlags
argument_list|(
name|windowFlags
argument_list|)
expr_stmt|;
name|updateGeometryConstraints
argument_list|()
expr_stmt|;
name|updateActions
argument_list|()
expr_stmt|;
name|QSize
name|currentSize
init|=
name|q
operator|->
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
operator|(
name|currentSize
operator|.
name|width
argument_list|()
operator|<
name|internalMinimumSize
operator|.
name|width
argument_list|()
operator|||
name|currentSize
operator|.
name|height
argument_list|()
operator|<
name|internalMinimumSize
operator|.
name|height
argument_list|()
operator|)
condition|)
block|{
name|q
operator|->
name|resize
argument_list|(
name|currentSize
operator|.
name|expandedTo
argument_list|(
name|internalMinimumSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setVisible
name|void
name|QMdiSubWindowPrivate
operator|::
name|setVisible
parameter_list|(
name|WindowStateAction
name|action
parameter_list|,
name|bool
name|visible
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_ACTION
if|if
condition|(
name|actions
index|[
name|action
index|]
condition|)
name|actions
index|[
name|action
index|]
operator|->
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|controlContainer
condition|)
name|controlContainer
operator|=
operator|new
name|ControlContainer
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|ControllerWidget
modifier|*
name|ctrlWidget
init|=
name|qobject_cast
argument_list|<
name|ControllerWidget
operator|*
argument_list|>
argument_list|(
name|controlContainer
operator|->
name|controllerWidget
argument_list|()
argument_list|)
condition|)
block|{
name|ctrlWidget
operator|->
name|setControlVisible
argument_list|(
name|action
argument_list|,
name|visible
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACTION
end_ifndef
begin_function
DECL|function|setEnabled
name|void
name|QMdiSubWindowPrivate
operator|::
name|setEnabled
parameter_list|(
name|WindowStateAction
name|action
parameter_list|,
name|bool
name|enable
parameter_list|)
block|{
if|if
condition|(
name|actions
index|[
name|action
index|]
condition|)
name|actions
index|[
name|action
index|]
operator|->
name|setEnabled
argument_list|(
name|enable
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENU
end_ifndef
begin_function
DECL|function|addToSystemMenu
name|void
name|QMdiSubWindowPrivate
operator|::
name|addToSystemMenu
parameter_list|(
name|WindowStateAction
name|action
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|char
modifier|*
name|slot
parameter_list|)
block|{
if|if
condition|(
operator|!
name|systemMenu
condition|)
return|return;
name|actions
index|[
name|action
index|]
operator|=
name|systemMenu
operator|->
name|addAction
argument_list|(
name|text
argument_list|,
name|q_func
argument_list|()
argument_list|,
name|slot
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_ACTION
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|iconSize
name|QSize
name|QMdiSubWindowPrivate
operator|::
name|iconSize
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parent
operator|||
name|q
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
return|return
name|QSize
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
return|return
name|QSize
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MdiSubWindowMinimizedWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|,
name|titleBarHeight
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
end_ifndef
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setSizeGrip
name|void
name|QMdiSubWindowPrivate
operator|::
name|setSizeGrip
parameter_list|(
name|QSizeGrip
modifier|*
name|newSizeGrip
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|newSizeGrip
operator|||
name|sizeGrip
operator|||
name|q
operator|->
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|FramelessWindowHint
condition|)
return|return;
if|if
condition|(
name|layout
operator|&&
name|layout
operator|->
name|indexOf
argument_list|(
name|newSizeGrip
argument_list|)
operator|!=
operator|-
literal|1
condition|)
return|return;
name|newSizeGrip
operator|->
name|setFixedSize
argument_list|(
name|newSizeGrip
operator|->
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|putSizeGripInLayout
init|=
name|layout
condition|?
literal|true
else|:
literal|false
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMacStyle
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|style
argument_list|()
argument_list|)
condition|)
name|putSizeGripInLayout
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|putSizeGripInLayout
condition|)
block|{
name|layout
operator|->
name|addWidget
argument_list|(
name|newSizeGrip
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setAlignment
argument_list|(
name|newSizeGrip
argument_list|,
name|Qt
operator|::
name|AlignBottom
operator||
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newSizeGrip
operator|->
name|setParent
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|newSizeGrip
operator|->
name|move
argument_list|(
name|q
operator|->
name|isLeftToRight
argument_list|()
condition|?
name|q
operator|->
name|width
argument_list|()
operator|-
name|newSizeGrip
operator|->
name|width
argument_list|()
else|:
literal|0
argument_list|,
name|q
operator|->
name|height
argument_list|()
operator|-
name|newSizeGrip
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|sizeGrip
operator|=
name|newSizeGrip
expr_stmt|;
block|}
name|newSizeGrip
operator|->
name|raise
argument_list|()
expr_stmt|;
name|updateGeometryConstraints
argument_list|()
expr_stmt|;
name|newSizeGrip
operator|->
name|installEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setSizeGripVisible
name|void
name|QMdiSubWindowPrivate
operator|::
name|setSizeGripVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
specifier|const
block|{
comment|// See if we can find any size grips
name|QList
argument_list|<
name|QSizeGrip
modifier|*
argument_list|>
name|sizeGrips
init|=
name|q_func
argument_list|()
operator|->
name|findChildren
argument_list|<
name|QSizeGrip
operator|*
argument_list|>
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QSizeGrip
modifier|*
name|grip
decl|,
name|sizeGrips
control|)
name|grip
operator|->
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SIZEGRIP
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|updateInternalWindowTitle
name|void
name|QMdiSubWindowPrivate
operator|::
name|updateInternalWindowTitle
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isWindowModified
argument_list|()
condition|)
block|{
name|windowTitle
operator|=
name|q
operator|->
name|windowTitle
argument_list|()
expr_stmt|;
name|windowTitle
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"[*]"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|windowTitle
operator|=
name|qt_setWindowTitle_helperHelper
argument_list|(
name|q
operator|->
name|windowTitle
argument_list|()
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|update
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|q
operator|->
name|width
argument_list|()
argument_list|,
name|titleBarHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Constructs a new QMdiSubWindow widget. The \a parent and \a     flags arguments are passed to QWidget's constructor.      Instead of using addSubWindow(), it is also simply possible to     use setParent() when you add the subwindow to a QMdiArea.      Note that only \l{QMdiSubWindow}s can be set as children of     QMdiArea; you cannot, for instance, write:      \code         //bad code         QMdiArea mdiArea;         QTextEdit editor(&mdiArea); // invalid child widget     \endcode      \sa QMdiArea::addSubWindow() */
end_comment
begin_constructor
DECL|function|QMdiSubWindow
name|QMdiSubWindow
operator|::
name|QMdiSubWindow
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QMdiSubWindowPrivate
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|d
operator|->
name|createSystemMenu
argument_list|()
expr_stmt|;
name|addActions
argument_list|(
name|d
operator|->
name|systemMenu
operator|->
name|actions
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|setWindowFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
operator|new
name|QVBoxLayout
argument_list|)
expr_stmt|;
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
name|layout
argument_list|()
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateGeometryConstraints
argument_list|()
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|titleBarPalette
operator|=
name|d
operator|->
name|desktopPalette
argument_list|()
expr_stmt|;
name|d
operator|->
name|font
operator|=
name|QApplication
operator|::
name|font
argument_list|(
literal|"QMdiSubWindowTitleBar"
argument_list|)
expr_stmt|;
comment|// We don't want the menu icon by default on mac.
ifndef|#
directive|ifndef
name|Q_OS_MAC
if|if
condition|(
name|windowIcon
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
name|d
operator|->
name|menuIcon
operator|=
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarMenuButton
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|menuIcon
operator|=
name|windowIcon
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|connect
argument_list|(
name|qApp
argument_list|,
name|SIGNAL
argument_list|(
name|focusChanged
argument_list|(
name|QWidget
operator|*
argument_list|,
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_processFocusChanged
argument_list|(
name|QWidget
operator|*
argument_list|,
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the subwindow.      \sa QMdiArea::removeSubWindow() */
end_comment
begin_destructor
DECL|function|~QMdiSubWindow
name|QMdiSubWindow
operator|::
name|~
name|QMdiSubWindow
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
name|d
operator|->
name|removeButtonsFromMenuBar
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Sets \a widget as the internal widget of this subwindow. The     internal widget is displayed in the center of the subwindow     beneath the title bar.      QMdiSubWindow takes temporary ownership of \a widget; you do     not have to delete it. Any existing internal widget will be     removed and reparented to the root window.      \sa widget() */
end_comment
begin_function
DECL|function|setWidget
name|void
name|QMdiSubWindow
operator|::
name|setWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
block|{
name|d
operator|->
name|removeBaseWidget
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|widget
operator|==
name|d
operator|->
name|baseWidget
condition|)
block|{
name|qWarning
argument_list|(
literal|"QMdiSubWindow::setWidget: widget is already set"
argument_list|)
expr_stmt|;
return|return;
block|}
name|bool
name|wasResized
init|=
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
decl_stmt|;
name|d
operator|->
name|removeBaseWidget
argument_list|()
expr_stmt|;
if|if
condition|(
name|QLayout
modifier|*
name|layout
init|=
name|this
operator|->
name|layout
argument_list|()
condition|)
name|layout
operator|->
name|addWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
else|else
name|widget
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
name|QSizeGrip
modifier|*
name|sizeGrip
init|=
name|widget
operator|->
name|findChild
argument_list|<
name|QSizeGrip
operator|*
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|sizeGrip
condition|)
name|sizeGrip
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sizeGrip
condition|)
name|d
operator|->
name|sizeGrip
operator|->
name|raise
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|baseWidget
operator|=
name|widget
expr_stmt|;
name|d
operator|->
name|baseWidget
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|ignoreWindowTitleChange
operator|=
literal|true
expr_stmt|;
name|bool
name|isWindowModified
init|=
name|this
operator|->
name|isWindowModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|windowTitle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|d
operator|->
name|updateWindowTitle
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|isWindowModified
operator|=
name|d
operator|->
name|baseWidget
operator|->
name|isWindowModified
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|this
operator|->
name|isWindowModified
argument_list|()
operator|&&
name|isWindowModified
operator|&&
name|windowTitle
argument_list|()
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"[*]"
argument_list|)
argument_list|)
condition|)
block|{
name|setWindowModified
argument_list|(
name|isWindowModified
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|lastChildWindowTitle
operator|=
name|d
operator|->
name|baseWidget
operator|->
name|windowTitle
argument_list|()
expr_stmt|;
name|d
operator|->
name|ignoreWindowTitleChange
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|windowIcon
argument_list|()
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|baseWidget
operator|->
name|windowIcon
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
name|setWindowIcon
argument_list|(
name|d
operator|->
name|baseWidget
operator|->
name|windowIcon
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateGeometryConstraints
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|wasResized
operator|&&
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
condition|)
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the current internal widget.      \sa setWidget() */
end_comment
begin_function
DECL|function|widget
name|QWidget
modifier|*
name|QMdiSubWindow
operator|::
name|widget
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|baseWidget
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|maximizedButtonsWidget
name|QWidget
modifier|*
name|QMdiSubWindow
operator|::
name|maximizedButtonsWidget
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
name|d
operator|->
name|controlContainer
operator|&&
name|isMaximized
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|drawTitleBarWhenMaximized
argument_list|()
operator|&&
operator|!
name|isChildOfTabbedQMdiArea
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|d
operator|->
name|controlContainer
operator|->
name|controllerWidget
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|maximizedSystemMenuIconWidget
name|QWidget
modifier|*
name|QMdiSubWindow
operator|::
name|maximizedSystemMenuIconWidget
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
name|d
operator|->
name|controlContainer
operator|&&
name|isMaximized
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|drawTitleBarWhenMaximized
argument_list|()
operator|&&
operator|!
name|isChildOfTabbedQMdiArea
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|d
operator|->
name|controlContainer
operator|->
name|systemMenuLabel
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Returns \c true if this window is shaded; otherwise returns \c false.      A window is shaded if it is collapsed so that only the title bar is     visible. */
end_comment
begin_function
DECL|function|isShaded
name|bool
name|QMdiSubWindow
operator|::
name|isShaded
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|isShadeMode
return|;
block|}
end_function
begin_comment
comment|/*!     If \a on is true, \a option is enabled on the subwindow; otherwise it is     disabled. See SubWindowOption for the effect of each option.      \sa SubWindowOption, testOption() */
end_comment
begin_function
DECL|function|setOption
name|void
name|QMdiSubWindow
operator|::
name|setOption
parameter_list|(
name|SubWindowOption
name|option
parameter_list|,
name|bool
name|on
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|on
operator|&&
operator|!
operator|(
name|d
operator|->
name|options
operator|&
name|option
operator|)
condition|)
name|d
operator|->
name|options
operator||=
name|option
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|on
operator|&&
operator|(
name|d
operator|->
name|options
operator|&
name|option
operator|)
condition|)
name|d
operator|->
name|options
operator|&=
operator|~
name|option
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
if|if
condition|(
operator|(
name|option
operator|&
operator|(
name|RubberBandResize
operator||
name|RubberBandMove
operator|)
operator|)
operator|&&
operator|!
name|on
operator|&&
name|d
operator|->
name|isInRubberBandMode
condition|)
name|d
operator|->
name|leaveRubberBandMode
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Returns \c true if \a option is enabled; otherwise returns \c false.      \sa SubWindowOption, setOption() */
end_comment
begin_function
DECL|function|testOption
name|bool
name|QMdiSubWindow
operator|::
name|testOption
parameter_list|(
name|SubWindowOption
name|option
parameter_list|)
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|options
operator|&
name|option
return|;
block|}
end_function
begin_comment
comment|/*!     \property QMdiSubWindow::keyboardSingleStep     \brief sets how far a widget should move or resize when using the     keyboard arrow keys.      When in keyboard-interactive mode, you can use the arrow and page keys to     either move or resize the window. This property controls the arrow keys.     The common way to enter keyboard interactive mode is to enter the     subwindow menu, and select either "resize" or "move".      The default keyboard single step value is 5 pixels.      \sa keyboardPageStep */
end_comment
begin_function
DECL|function|keyboardSingleStep
name|int
name|QMdiSubWindow
operator|::
name|keyboardSingleStep
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|keyboardSingleStep
return|;
block|}
end_function
begin_function
DECL|function|setKeyboardSingleStep
name|void
name|QMdiSubWindow
operator|::
name|setKeyboardSingleStep
parameter_list|(
name|int
name|step
parameter_list|)
block|{
comment|// Haven't done any boundary check here since negative step only
comment|// means inverted behavior, which is OK if the user want it.
comment|// A step equal to zero means "do nothing".
name|d_func
argument_list|()
operator|->
name|keyboardSingleStep
operator|=
name|step
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QMdiSubWindow::keyboardPageStep     \brief sets how far a widget should move or resize when using the     keyboard page keys.      When in keyboard-interactive mode, you can use the arrow and page keys to     either move or resize the window. This property controls the page     keys. The common way to enter keyboard interactive mode is to enter the     subwindow menu, and select either "resize" or "move".      The default keyboard page step value is 20 pixels.      \sa keyboardSingleStep */
end_comment
begin_function
DECL|function|keyboardPageStep
name|int
name|QMdiSubWindow
operator|::
name|keyboardPageStep
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|keyboardPageStep
return|;
block|}
end_function
begin_function
DECL|function|setKeyboardPageStep
name|void
name|QMdiSubWindow
operator|::
name|setKeyboardPageStep
parameter_list|(
name|int
name|step
parameter_list|)
block|{
comment|// Haven't done any boundary check here since negative step only
comment|// means inverted behavior, which is OK if the user want it.
comment|// A step equal to zero means "do nothing".
name|d_func
argument_list|()
operator|->
name|keyboardPageStep
operator|=
name|step
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENU
end_ifndef
begin_comment
comment|/*!     Sets \a systemMenu as the current system menu for this subwindow.      By default, each QMdiSubWindow has a standard system menu.      QActions for the system menu created by QMdiSubWindow will     automatically be updated depending on the current window state;     e.g., the minimize action will be disabled after the window is     minimized.      QActions added by the user are not updated by QMdiSubWindow.      QMdiSubWindow takes ownership of \a systemMenu; you do not have to     delete it. Any existing menus will be deleted.      \sa systemMenu(), showSystemMenu() */
end_comment
begin_function
DECL|function|setSystemMenu
name|void
name|QMdiSubWindow
operator|::
name|setSystemMenu
parameter_list|(
name|QMenu
modifier|*
name|systemMenu
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|systemMenu
operator|&&
name|systemMenu
operator|==
name|d
operator|->
name|systemMenu
condition|)
block|{
name|qWarning
argument_list|(
literal|"QMdiSubWindow::setSystemMenu: system menu is already set"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|systemMenu
condition|)
block|{
operator|delete
name|d
operator|->
name|systemMenu
expr_stmt|;
name|d
operator|->
name|systemMenu
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|systemMenu
condition|)
return|return;
if|if
condition|(
name|systemMenu
operator|->
name|parent
argument_list|()
operator|!=
name|this
condition|)
name|systemMenu
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|systemMenu
operator|=
name|systemMenu
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the current system menu, or zero if no system     menu is set. QMdiSubWindow provides a default system menu, but you can     also set the menu with setSystemMenu().      \sa setSystemMenu(), showSystemMenu() */
end_comment
begin_function
DECL|function|systemMenu
name|QMenu
modifier|*
name|QMdiSubWindow
operator|::
name|systemMenu
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|systemMenu
return|;
block|}
end_function
begin_comment
comment|/*!     Shows the system menu below the system menu icon in the title bar.      \sa setSystemMenu(), systemMenu() */
end_comment
begin_function
DECL|function|showSystemMenu
name|void
name|QMdiSubWindow
operator|::
name|showSystemMenu
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|systemMenu
condition|)
return|return;
name|QPoint
name|globalPopupPos
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|icon
init|=
name|maximizedSystemMenuIconWidget
argument_list|()
condition|)
block|{
if|if
condition|(
name|isLeftToRight
argument_list|()
condition|)
name|globalPopupPos
operator|=
name|icon
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
name|icon
operator|->
name|y
argument_list|()
operator|+
name|icon
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|globalPopupPos
operator|=
name|icon
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
name|icon
operator|->
name|width
argument_list|()
argument_list|,
name|icon
operator|->
name|y
argument_list|()
operator|+
name|icon
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isLeftToRight
argument_list|()
condition|)
name|globalPopupPos
operator|=
name|mapToGlobal
argument_list|(
name|contentsRect
argument_list|()
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
else|else
comment|// + QPoint(1, 0) because topRight() == QPoint(left() + width() -1, top())
name|globalPopupPos
operator|=
name|mapToGlobal
argument_list|(
name|contentsRect
argument_list|()
operator|.
name|topRight
argument_list|()
argument_list|)
operator|+
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Adjust x() with -menuwidth in reverse mode.
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
name|globalPopupPos
operator|-=
name|QPoint
argument_list|(
name|d
operator|->
name|systemMenu
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|systemMenu
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|systemMenu
operator|->
name|popup
argument_list|(
name|globalPopupPos
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MENU
end_comment
begin_comment
comment|/*!     \since 4.4      Returns the area containing this sub-window, or 0 if there is none.      \sa QMdiArea::addSubWindow() */
end_comment
begin_function
DECL|function|mdiArea
name|QMdiArea
modifier|*
name|QMdiSubWindow
operator|::
name|mdiArea
parameter_list|()
specifier|const
block|{
name|QWidget
modifier|*
name|parent
init|=
name|parentWidget
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
condition|)
block|{
if|if
condition|(
name|QMdiArea
modifier|*
name|area
init|=
name|qobject_cast
argument_list|<
name|QMdiArea
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
condition|)
block|{
if|if
condition|(
name|area
operator|->
name|viewport
argument_list|()
operator|==
name|parentWidget
argument_list|()
condition|)
return|return
name|area
return|;
block|}
name|parent
operator|=
name|parent
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Calling this function makes the subwindow enter the shaded mode.     When the subwindow is shaded, only the title bar is visible.      Although shading is not supported by all styles, this function will     still show the subwindow as shaded, regardless of whether support     for shading is available. However, when used with styles without     shading support, the user will be unable to return from shaded mode     through the user interface (e.g., through a shade button in the title     bar).      \sa isShaded() */
end_comment
begin_function
DECL|function|showShaded
name|void
name|QMdiSubWindow
operator|::
name|showShaded
parameter_list|()
block|{
if|if
condition|(
operator|!
name|parent
argument_list|()
condition|)
return|return;
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
comment|// setMinimizeMode uses this function.
if|if
condition|(
operator|!
name|d
operator|->
name|isShadeRequestFromMinimizeMode
operator|&&
name|isShaded
argument_list|()
condition|)
return|return;
name|d
operator|->
name|isMaximizeMode
operator|=
literal|false
expr_stmt|;
name|QWidget
modifier|*
name|currentFocusWidget
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|restoreFocusWidget
operator|&&
name|isAncestorOf
argument_list|(
name|currentFocusWidget
argument_list|)
condition|)
name|d
operator|->
name|restoreFocusWidget
operator|=
name|currentFocusWidget
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isShadeRequestFromMinimizeMode
condition|)
block|{
name|d
operator|->
name|isShadeMode
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|ensureWindowState
argument_list|(
name|Qt
operator|::
name|WindowMinimized
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
name|d
operator|->
name|removeButtonsFromMenuBar
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// showMinimized() will reset Qt::WindowActive, which makes sense
comment|// for top level widgets, but in MDI it makes sense to have an
comment|// active window which is minimized.
if|if
condition|(
name|hasFocus
argument_list|()
operator|||
name|isAncestorOf
argument_list|(
name|currentFocusWidget
argument_list|)
condition|)
name|d
operator|->
name|ensureWindowState
argument_list|(
name|Qt
operator|::
name|WindowActive
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
name|d
operator|->
name|setSizeGripVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|d
operator|->
name|restoreSize
operator|.
name|isValid
argument_list|()
operator|||
name|d
operator|->
name|isShadeMode
condition|)
block|{
name|d
operator|->
name|oldGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
name|d
operator|->
name|restoreSize
operator|.
name|setWidth
argument_list|(
name|d
operator|->
name|oldGeometry
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|restoreSize
operator|.
name|setHeight
argument_list|(
name|d
operator|->
name|oldGeometry
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Hide the window before we change the geometry to avoid multiple resize
comment|// events and wrong window state.
specifier|const
name|bool
name|wasVisible
init|=
name|isVisible
argument_list|()
decl_stmt|;
if|if
condition|(
name|wasVisible
condition|)
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateGeometryConstraints
argument_list|()
expr_stmt|;
comment|// Update minimum size to internalMinimumSize if set by user.
if|if
condition|(
operator|!
name|minimumSize
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|d
operator|->
name|userMinimumSize
operator|=
name|minimumSize
argument_list|()
expr_stmt|;
name|setMinimumSize
argument_list|(
name|d
operator|->
name|internalMinimumSize
argument_list|)
expr_stmt|;
block|}
name|resize
argument_list|(
name|d
operator|->
name|internalMinimumSize
argument_list|)
expr_stmt|;
comment|// Hide the internal widget if not already hidden by the user.
if|if
condition|(
name|d
operator|->
name|baseWidget
operator|&&
operator|!
name|d
operator|->
name|baseWidget
operator|->
name|isHidden
argument_list|()
condition|)
block|{
name|d
operator|->
name|baseWidget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|d
operator|->
name|isWidgetHiddenByUs
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|wasVisible
condition|)
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|setFocusWidget
argument_list|()
expr_stmt|;
name|d
operator|->
name|resizeEnabled
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|moveEnabled
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|updateDirtyRegions
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateMask
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACTION
name|d
operator|->
name|setEnabled
argument_list|(
name|QMdiSubWindowPrivate
operator|::
name|MinimizeAction
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|setEnabled
argument_list|(
name|QMdiSubWindowPrivate
operator|::
name|ResizeAction
argument_list|,
name|d
operator|->
name|resizeEnabled
argument_list|)
expr_stmt|;
name|d
operator|->
name|setEnabled
argument_list|(
name|QMdiSubWindowPrivate
operator|::
name|MaximizeAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|setEnabled
argument_list|(
name|QMdiSubWindowPrivate
operator|::
name|RestoreAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|setEnabled
argument_list|(
name|QMdiSubWindowPrivate
operator|::
name|MoveAction
argument_list|,
name|d
operator|->
name|moveEnabled
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|eventFilter
name|bool
name|QMdiSubWindow
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|object
condition|)
return|return
name|QWidget
operator|::
name|eventFilter
argument_list|(
name|object
argument_list|,
name|event
argument_list|)
return|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
comment|// System menu events.
if|if
condition|(
name|d
operator|->
name|systemMenu
operator|&&
name|d
operator|->
name|systemMenu
operator|==
name|object
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonDblClick
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseMove
condition|)
block|{
name|QMouseEvent
modifier|*
name|mouseEvent
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|d
operator|->
name|hoveredSubControl
operator|=
name|d
operator|->
name|getSubControl
argument_list|(
name|mapFromGlobal
argument_list|(
name|mouseEvent
operator|->
name|globalPos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Hide
condition|)
block|{
name|d
operator|->
name|systemMenu
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|activeSubControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|update
argument_list|(
name|QRegion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|titleBarHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|QWidget
operator|::
name|eventFilter
argument_list|(
name|object
argument_list|,
name|event
argument_list|)
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
if|if
condition|(
name|object
operator|!=
name|d
operator|->
name|baseWidget
operator|&&
name|parent
argument_list|()
operator|&&
name|qobject_cast
argument_list|<
name|QSizeGrip
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|MouseButtonPress
operator|||
operator|!
name|testOption
argument_list|(
name|QMdiSubWindow
operator|::
name|RubberBandResize
argument_list|)
condition|)
return|return
name|QWidget
operator|::
name|eventFilter
argument_list|(
name|object
argument_list|,
name|event
argument_list|)
return|;
specifier|const
name|QMouseEvent
modifier|*
name|mouseEvent
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|d
operator|->
name|mousePressPosition
operator|=
name|parentWidget
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|mouseEvent
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|oldGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
name|d
operator|->
name|currentOperation
operator|=
name|isLeftToRight
argument_list|()
condition|?
name|QMdiSubWindowPrivate
operator|::
name|BottomRightResize
else|:
name|QMdiSubWindowPrivate
operator|::
name|BottomLeftResize
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
name|d
operator|->
name|enterRubberBandMode
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
literal|true
return|;
block|}
endif|#
directive|endif
if|if
condition|(
name|object
operator|!=
name|d
operator|->
name|baseWidget
operator|&&
name|event
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|WindowTitleChange
condition|)
return|return
name|QWidget
operator|::
name|eventFilter
argument_list|(
name|object
argument_list|,
name|event
argument_list|)
return|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|Show
case|:
name|d
operator|->
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ShowToParent
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|isWidgetHiddenByUs
condition|)
name|show
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|WindowStateChange
case|:
block|{
name|QWindowStateChangeEvent
modifier|*
name|changeEvent
init|=
cast|static_cast
argument_list|<
name|QWindowStateChangeEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|changeEvent
operator|->
name|isOverride
argument_list|()
condition|)
break|break;
name|Qt
operator|::
name|WindowStates
name|oldState
init|=
name|changeEvent
operator|->
name|oldState
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|WindowStates
name|newState
init|=
name|d
operator|->
name|baseWidget
operator|->
name|windowState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|oldState
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
operator|&&
operator|(
name|newState
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
name|showMinimized
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
operator|(
name|oldState
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|&&
operator|(
name|newState
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
name|showMaximized
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
operator|(
name|newState
operator|&
operator|(
name|Qt
operator|::
name|WindowMaximized
operator||
name|Qt
operator|::
name|WindowMinimized
operator|)
operator|)
condition|)
name|showNormal
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|Enter
case|:
name|d
operator|->
name|currentOperation
operator|=
name|QMdiSubWindowPrivate
operator|::
name|None
expr_stmt|;
name|d
operator|->
name|updateCursor
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|LayoutRequest
case|:
name|d
operator|->
name|updateGeometryConstraints
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|WindowTitleChange
case|:
if|if
condition|(
name|d
operator|->
name|ignoreWindowTitleChange
condition|)
break|break;
if|if
condition|(
name|object
operator|==
name|d
operator|->
name|baseWidget
condition|)
block|{
name|d
operator|->
name|updateWindowTitle
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|lastChildWindowTitle
operator|=
name|d
operator|->
name|baseWidget
operator|->
name|windowTitle
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
block|}
elseif|else
if|if
condition|(
name|maximizedButtonsWidget
argument_list|()
operator|&&
name|d
operator|->
name|controlContainer
operator|->
name|menuBar
argument_list|()
operator|&&
name|d
operator|->
name|controlContainer
operator|->
name|menuBar
argument_list|()
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
operator|==
name|maximizedButtonsWidget
argument_list|()
condition|)
block|{
name|d
operator|->
name|originalTitle
operator|=
name|QString
operator|::
name|null
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|baseWidget
operator|&&
name|d
operator|->
name|baseWidget
operator|->
name|windowTitle
argument_list|()
operator|==
name|windowTitle
argument_list|()
condition|)
name|d
operator|->
name|updateWindowTitle
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|updateWindowTitle
argument_list|(
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
break|break;
case|case
name|QEvent
operator|::
name|ModifiedChange
case|:
block|{
if|if
condition|(
name|object
operator|!=
name|d
operator|->
name|baseWidget
condition|)
break|break;
name|bool
name|windowModified
init|=
name|d
operator|->
name|baseWidget
operator|->
name|isWindowModified
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|windowModified
operator|&&
name|d
operator|->
name|baseWidget
operator|->
name|windowTitle
argument_list|()
operator|!=
name|windowTitle
argument_list|()
condition|)
break|break;
if|if
condition|(
name|windowTitle
argument_list|()
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"[*]"
argument_list|)
argument_list|)
condition|)
name|setWindowModified
argument_list|(
name|windowModified
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|eventFilter
argument_list|(
name|object
argument_list|,
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QMdiSubWindow
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|StyleChange
case|:
block|{
name|bool
name|wasShaded
init|=
name|isShaded
argument_list|()
decl_stmt|;
name|bool
name|wasMinimized
init|=
name|isMinimized
argument_list|()
decl_stmt|;
name|bool
name|wasMaximized
init|=
name|isMaximized
argument_list|()
decl_stmt|;
comment|// Don't emit subWindowActivated, the app doesn't have to know about our hacks
specifier|const
name|QScopedValueRollback
argument_list|<
name|bool
argument_list|>
name|activationEnabledSaver
argument_list|(
name|d
operator|->
name|activationEnabled
argument_list|)
decl_stmt|;
name|d
operator|->
name|activationEnabled
operator|=
literal|false
expr_stmt|;
name|ensurePolished
argument_list|()
expr_stmt|;
name|setContentsMargins
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasMinimized
operator|||
name|wasMaximized
operator|||
name|wasShaded
condition|)
name|showNormal
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateGeometryConstraints
argument_list|()
expr_stmt|;
name|resize
argument_list|(
name|d
operator|->
name|internalMinimumSize
operator|.
name|expandedTo
argument_list|(
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateMask
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateDirtyRegions
argument_list|()
expr_stmt|;
if|if
condition|(
name|wasShaded
condition|)
name|showShaded
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|wasMinimized
condition|)
name|showMinimized
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|wasMaximized
condition|)
name|showMaximized
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|ParentAboutToChange
case|:
name|d
operator|->
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ParentChange
case|:
block|{
name|bool
name|wasResized
init|=
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
name|d
operator|->
name|removeButtonsFromMenuBar
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|currentOperation
operator|=
name|QMdiSubWindowPrivate
operator|::
name|None
expr_stmt|;
name|d
operator|->
name|activeSubControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|d
operator|->
name|hoveredSubControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
if|if
condition|(
name|d
operator|->
name|isInRubberBandMode
condition|)
name|d
operator|->
name|leaveRubberBandMode
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|isShadeMode
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|isMaximizeMode
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|isWidgetHiddenByUs
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|parent
argument_list|()
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_SIZEGRIP
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMacStyle
operator|*
argument_list|>
argument_list|(
name|style
argument_list|()
argument_list|)
condition|)
operator|delete
name|d
operator|->
name|sizeGrip
expr_stmt|;
endif|#
directive|endif
name|setOption
argument_list|(
name|RubberBandResize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setOption
argument_list|(
name|RubberBandMove
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|setWindowFlags
argument_list|(
name|windowFlags
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setContentsMargins
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateGeometryConstraints
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateCursor
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateMask
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateDirtyRegions
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateActions
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|wasResized
operator|&&
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|)
condition|)
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|WindowActivate
case|:
if|if
condition|(
name|d
operator|->
name|ignoreNextActivationEvent
condition|)
block|{
name|d
operator|->
name|ignoreNextActivationEvent
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|d
operator|->
name|isExplicitlyDeactivated
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|WindowDeactivate
case|:
if|if
condition|(
name|d
operator|->
name|ignoreNextActivationEvent
condition|)
block|{
name|d
operator|->
name|ignoreNextActivationEvent
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|d
operator|->
name|isExplicitlyDeactivated
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|WindowTitleChange
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|ignoreWindowTitleChange
condition|)
name|d
operator|->
name|updateWindowTitle
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateInternalWindowTitle
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ModifiedChange
case|:
if|if
condition|(
operator|!
name|windowTitle
argument_list|()
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"[*]"
argument_list|)
argument_list|)
condition|)
break|break;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
if|if
condition|(
name|maximizedButtonsWidget
argument_list|()
operator|&&
name|d
operator|->
name|controlContainer
operator|->
name|menuBar
argument_list|()
operator|&&
name|d
operator|->
name|controlContainer
operator|->
name|menuBar
argument_list|()
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
operator|==
name|maximizedButtonsWidget
argument_list|()
condition|)
block|{
name|window
argument_list|()
operator|->
name|setWindowModified
argument_list|(
name|isWindowModified
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_MENUBAR
name|d
operator|->
name|updateInternalWindowTitle
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|LayoutDirectionChange
case|:
name|d
operator|->
name|updateDirtyRegions
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|LayoutRequest
case|:
name|d
operator|->
name|updateGeometryConstraints
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|WindowIconChange
case|:
name|d
operator|->
name|menuIcon
operator|=
name|windowIcon
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|menuIcon
operator|.
name|isNull
argument_list|()
condition|)
name|d
operator|->
name|menuIcon
operator|=
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_TitleBarMenuButton
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|controlContainer
condition|)
name|d
operator|->
name|controlContainer
operator|->
name|updateWindowIcon
argument_list|(
name|d
operator|->
name|menuIcon
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|maximizedSystemMenuIconWidget
argument_list|()
condition|)
name|update
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|titleBarHeight
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|PaletteChange
case|:
name|d
operator|->
name|titleBarPalette
operator|=
name|d
operator|->
name|desktopPalette
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|FontChange
case|:
name|d
operator|->
name|font
operator|=
name|font
argument_list|()
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
case|case
name|QEvent
operator|::
name|ToolTip
case|:
name|showToolTip
argument_list|(
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|,
name|this
argument_list|,
name|d
operator|->
name|titleBarOptions
argument_list|()
argument_list|,
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
name|d
operator|->
name|hoveredSubControl
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|showEvent
name|void
name|QMdiSubWindow
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
name|showEvent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parent
argument_list|()
condition|)
block|{
name|QWidget
operator|::
name|showEvent
argument_list|(
name|showEvent
argument_list|)
expr_stmt|;
return|return;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_SIZEGRIP
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMacStyle
operator|*
argument_list|>
argument_list|(
name|style
argument_list|()
argument_list|)
operator|&&
operator|!
name|d
operator|->
name|sizeGrip
operator|&&
operator|!
operator|(
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
condition|)
block|{
name|d
operator|->
name|setSizeGrip
argument_list|(
operator|new
name|QSizeGrip
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|d
operator|->
name|sizeGrip
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMinimized
argument_list|()
condition|)
name|d
operator|->
name|setSizeGripVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|setSizeGripVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resize
argument_list|(
name|size
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|d
operator|->
name|internalMinimumSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|d
operator|->
name|updateDirtyRegions
argument_list|()
expr_stmt|;
comment|// Show buttons in the menu bar if they're already not there.
comment|// We want to do this when QMdiSubWindow becomes visible after being hidden.
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
if|if
condition|(
name|d
operator|->
name|controlContainer
condition|)
block|{
if|if
condition|(
name|QMenuBar
modifier|*
name|menuBar
init|=
name|d
operator|->
name|menuBar
argument_list|()
condition|)
block|{
if|if
condition|(
name|menuBar
operator|->
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
operator|!=
name|maximizedButtonsWidget
argument_list|()
condition|)
name|d
operator|->
name|showButtonsInMenuBar
argument_list|(
name|menuBar
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
name|d
operator|->
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|hideEvent
name|void
name|QMdiSubWindow
operator|::
name|hideEvent
parameter_list|(
name|QHideEvent
modifier|*
comment|/*hideEvent*/
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
name|d_func
argument_list|()
operator|->
name|removeButtonsFromMenuBar
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QMdiSubWindow
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|changeEvent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parent
argument_list|()
condition|)
block|{
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|changeEvent
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|changeEvent
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|WindowStateChange
condition|)
block|{
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|changeEvent
argument_list|)
expr_stmt|;
return|return;
block|}
name|QWindowStateChangeEvent
modifier|*
name|event
init|=
cast|static_cast
argument_list|<
name|QWindowStateChangeEvent
operator|*
argument_list|>
argument_list|(
name|changeEvent
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|isOverride
argument_list|()
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|Qt
operator|::
name|WindowStates
name|oldState
init|=
name|event
operator|->
name|oldState
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|WindowStates
name|newState
init|=
name|windowState
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldState
operator|==
name|newState
condition|)
block|{
name|changeEvent
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// QWidget ensures that the widget is visible _after_ setWindowState(),
comment|// but we need to ensure that the widget is visible _before_
comment|// setWindowState() returns.
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|()
condition|)
block|{
name|d
operator|->
name|ensureWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|oldGeometry
operator|.
name|isValid
argument_list|()
condition|)
name|d
operator|->
name|oldGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|oldState
operator|&
name|Qt
operator|::
name|WindowActive
operator|)
operator|&&
operator|(
name|newState
operator|&
name|Qt
operator|::
name|WindowActive
operator|)
condition|)
name|d
operator|->
name|currentOperation
operator|=
name|QMdiSubWindowPrivate
operator|::
name|None
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|oldState
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
operator|&&
operator|(
name|newState
operator|&
name|Qt
operator|::
name|WindowMinimized
operator|)
condition|)
name|d
operator|->
name|setMinimizeMode
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
operator|(
name|oldState
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
operator|&&
operator|(
name|newState
operator|&
name|Qt
operator|::
name|WindowMaximized
operator|)
condition|)
name|d
operator|->
name|setMaximizeMode
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
operator|(
name|newState
operator|&
operator|(
name|Qt
operator|::
name|WindowMaximized
operator||
name|Qt
operator|::
name|WindowMinimized
operator|)
operator|)
condition|)
name|d
operator|->
name|setNormalMode
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isActive
condition|)
name|d
operator|->
name|ensureWindowState
argument_list|(
name|Qt
operator|::
name|WindowActive
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|activationEnabled
condition|)
emit|emit
name|windowStateChanged
argument_list|(
name|oldState
argument_list|,
name|windowState
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|closeEvent
name|void
name|QMdiSubWindow
operator|::
name|closeEvent
parameter_list|(
name|QCloseEvent
modifier|*
name|closeEvent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|bool
name|acceptClose
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|baseWidget
condition|)
name|acceptClose
operator|=
name|d
operator|->
name|baseWidget
operator|->
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|acceptClose
condition|)
block|{
name|closeEvent
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
name|d
operator|->
name|removeButtonsFromMenuBar
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentWidget
argument_list|()
operator|&&
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
condition|)
block|{
name|QChildEvent
name|childRemoved
argument_list|(
name|QEvent
operator|::
name|ChildRemoved
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|parentWidget
argument_list|()
argument_list|,
operator|&
name|childRemoved
argument_list|)
expr_stmt|;
block|}
name|closeEvent
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|leaveEvent
name|void
name|QMdiSubWindow
operator|::
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
comment|/*leaveEvent*/
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hoveredSubControl
operator|!=
name|QStyle
operator|::
name|SC_None
condition|)
block|{
name|d
operator|->
name|hoveredSubControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|update
argument_list|(
name|QRegion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|titleBarHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QMdiSubWindow
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|resizeEvent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
if|if
condition|(
name|d
operator|->
name|sizeGrip
condition|)
block|{
name|d
operator|->
name|sizeGrip
operator|->
name|move
argument_list|(
name|isLeftToRight
argument_list|()
condition|?
name|width
argument_list|()
operator|-
name|d
operator|->
name|sizeGrip
operator|->
name|width
argument_list|()
else|:
literal|0
argument_list|,
name|height
argument_list|()
operator|-
name|d
operator|->
name|sizeGrip
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|parent
argument_list|()
condition|)
block|{
name|QWidget
operator|::
name|resizeEvent
argument_list|(
name|resizeEvent
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|isMaximizeMode
condition|)
name|d
operator|->
name|ensureWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateMask
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|()
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|resizeTimerId
operator|<=
literal|0
condition|)
name|d
operator|->
name|cachedStyleOptions
operator|=
name|d
operator|->
name|titleBarOptions
argument_list|()
expr_stmt|;
else|else
name|killTimer
argument_list|(
name|d
operator|->
name|resizeTimerId
argument_list|)
expr_stmt|;
name|d
operator|->
name|resizeTimerId
operator|=
name|startTimer
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|timerEvent
name|void
name|QMdiSubWindow
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|timerEvent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|timerEvent
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|resizeTimerId
condition|)
block|{
name|killTimer
argument_list|(
name|d
operator|->
name|resizeTimerId
argument_list|)
expr_stmt|;
name|d
operator|->
name|resizeTimerId
operator|=
operator|-
literal|1
expr_stmt|;
name|d
operator|->
name|updateDirtyRegions
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|moveEvent
name|void
name|QMdiSubWindow
operator|::
name|moveEvent
parameter_list|(
name|QMoveEvent
modifier|*
name|moveEvent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parent
argument_list|()
condition|)
block|{
name|QWidget
operator|::
name|moveEvent
argument_list|(
name|moveEvent
argument_list|)
expr_stmt|;
return|return;
block|}
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isMaximizeMode
condition|)
name|d
operator|->
name|ensureWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QMdiSubWindow
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|paintEvent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parent
argument_list|()
operator|||
operator|(
name|windowFlags
argument_list|()
operator|&
name|Qt
operator|::
name|FramelessWindowHint
operator|)
condition|)
block|{
name|QWidget
operator|::
name|paintEvent
argument_list|(
name|paintEvent
argument_list|)
expr_stmt|;
return|return;
block|}
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMaximized
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|drawTitleBarWhenMaximized
argument_list|()
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|resizeTimerId
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Only update the style option rect and the window title.
name|int
name|border
init|=
name|d
operator|->
name|hasBorder
argument_list|(
name|d
operator|->
name|cachedStyleOptions
argument_list|)
condition|?
literal|4
else|:
literal|0
decl_stmt|;
name|int
name|titleBarHeight
init|=
name|d
operator|->
name|titleBarHeight
argument_list|(
name|d
operator|->
name|cachedStyleOptions
argument_list|)
decl_stmt|;
name|titleBarHeight
operator|-=
name|isMinimized
argument_list|()
condition|?
literal|2
operator|*
name|border
else|:
name|border
expr_stmt|;
name|d
operator|->
name|cachedStyleOptions
operator|.
name|rect
operator|=
name|QRect
argument_list|(
name|border
argument_list|,
name|border
argument_list|,
name|width
argument_list|()
operator|-
literal|2
operator|*
name|border
argument_list|,
name|titleBarHeight
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|windowTitle
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|width
init|=
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|d
operator|->
name|cachedStyleOptions
argument_list|,
name|QStyle
operator|::
name|SC_TitleBarLabel
argument_list|,
name|this
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
name|d
operator|->
name|cachedStyleOptions
operator|.
name|text
operator|=
name|d
operator|->
name|cachedStyleOptions
operator|.
name|fontMetrics
operator|.
name|elidedText
argument_list|(
name|d
operator|->
name|windowTitle
argument_list|,
name|Qt
operator|::
name|ElideRight
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Force full update.
name|d
operator|->
name|cachedStyleOptions
operator|=
name|d
operator|->
name|titleBarOptions
argument_list|()
expr_stmt|;
block|}
name|QStylePainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|windowTitle
operator|.
name|isEmpty
argument_list|()
condition|)
name|painter
operator|.
name|setFont
argument_list|(
name|d
operator|->
name|font
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
name|d
operator|->
name|cachedStyleOptions
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMinimized
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|hasBorder
argument_list|(
name|d
operator|->
name|cachedStyleOptions
argument_list|)
condition|)
return|return;
name|QStyleOptionFrame
name|frameOptions
decl_stmt|;
name|frameOptions
operator|.
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|frameOptions
operator|.
name|lineWidth
operator|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MdiSubWindowFrameWidth
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isActive
condition|)
name|frameOptions
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Active
expr_stmt|;
else|else
name|frameOptions
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Active
expr_stmt|;
comment|// ### Ensure that we do not require setting the cliprect for 4.4
if|if
condition|(
operator|!
name|isMinimized
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|hasBorder
argument_list|(
name|d
operator|->
name|cachedStyleOptions
argument_list|)
condition|)
name|painter
operator|.
name|setClipRect
argument_list|(
name|rect
argument_list|()
operator|.
name|adjusted
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|titleBarHeight
argument_list|(
name|d
operator|->
name|cachedStyleOptions
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isMinimized
argument_list|()
operator|||
name|d
operator|->
name|hasBorder
argument_list|(
name|d
operator|->
name|cachedStyleOptions
argument_list|)
condition|)
name|painter
operator|.
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameWindow
argument_list|,
name|frameOptions
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|QMdiSubWindow
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|mouseEvent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parent
argument_list|()
condition|)
block|{
name|QWidget
operator|::
name|mousePressEvent
argument_list|(
name|mouseEvent
argument_list|)
expr_stmt|;
return|return;
block|}
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isInInteractiveMode
condition|)
name|d
operator|->
name|leaveInteractiveMode
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
if|if
condition|(
name|d
operator|->
name|isInRubberBandMode
condition|)
name|d
operator|->
name|leaveRubberBandMode
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|mouseEvent
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|mouseEvent
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|currentOperation
operator|!=
name|QMdiSubWindowPrivate
operator|::
name|None
condition|)
block|{
name|d
operator|->
name|updateCursor
argument_list|()
expr_stmt|;
name|d
operator|->
name|mousePressPosition
operator|=
name|mapToParent
argument_list|(
name|mouseEvent
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|resizeEnabled
operator|||
name|d
operator|->
name|moveEnabled
condition|)
name|d
operator|->
name|oldGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
if|if
condition|(
operator|(
name|testOption
argument_list|(
name|QMdiSubWindow
operator|::
name|RubberBandResize
argument_list|)
operator|&&
name|d
operator|->
name|isResizeOperation
argument_list|()
operator|)
operator|||
operator|(
name|testOption
argument_list|(
name|QMdiSubWindow
operator|::
name|RubberBandMove
argument_list|)
operator|&&
name|d
operator|->
name|isMoveOperation
argument_list|()
operator|)
condition|)
block|{
name|d
operator|->
name|enterRubberBandMode
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
return|return;
block|}
name|d
operator|->
name|activeSubControl
operator|=
name|d
operator|->
name|hoveredSubControl
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|d
operator|->
name|activeSubControl
operator|==
name|QStyle
operator|::
name|SC_TitleBarSysMenu
condition|)
name|showSystemMenu
argument_list|()
expr_stmt|;
else|else
endif|#
directive|endif
name|update
argument_list|(
name|QRegion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|titleBarHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mouseDoubleClickEvent
name|void
name|QMdiSubWindow
operator|::
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|mouseEvent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parent
argument_list|()
condition|)
block|{
name|QWidget
operator|::
name|mouseDoubleClickEvent
argument_list|(
name|mouseEvent
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|mouseEvent
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|mouseEvent
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isMoveOperation
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|d
operator|->
name|hoveredSubControl
operator|==
name|QStyle
operator|::
name|SC_TitleBarSysMenu
condition|)
name|close
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|windowFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|isMinimized
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|isShaded
argument_list|()
operator|&&
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
operator|)
operator|)
operator|||
operator|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMinimizeButtonHint
operator|)
condition|)
block|{
name|showNormal
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|isMaximized
argument_list|()
condition|)
block|{
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
name|showNormal
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowShadeButtonHint
condition|)
name|showShaded
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|Qt
operator|::
name|WindowMaximizeButtonHint
condition|)
name|showMaximized
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QMdiSubWindow
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|mouseEvent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parent
argument_list|()
condition|)
block|{
name|QWidget
operator|::
name|mouseReleaseEvent
argument_list|(
name|mouseEvent
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|mouseEvent
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|mouseEvent
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentOperation
operator|!=
name|QMdiSubWindowPrivate
operator|::
name|None
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
if|if
condition|(
name|d
operator|->
name|isInRubberBandMode
operator|&&
operator|!
name|d
operator|->
name|isInInteractiveMode
condition|)
name|d
operator|->
name|leaveRubberBandMode
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|resizeEnabled
operator|||
name|d
operator|->
name|moveEnabled
condition|)
name|d
operator|->
name|oldGeometry
operator|=
name|geometry
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|currentOperation
operator|=
name|d
operator|->
name|getOperation
argument_list|(
name|mouseEvent
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateCursor
argument_list|()
expr_stmt|;
name|d
operator|->
name|hoveredSubControl
operator|=
name|d
operator|->
name|getSubControl
argument_list|(
name|mouseEvent
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|activeSubControl
operator|!=
name|QStyle
operator|::
name|SC_None
operator|&&
name|d
operator|->
name|activeSubControl
operator|==
name|d
operator|->
name|hoveredSubControl
condition|)
block|{
name|d
operator|->
name|processClickedSubControl
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|activeSubControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|update
argument_list|(
name|QRegion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|titleBarHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mouseMoveEvent
name|void
name|QMdiSubWindow
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|mouseEvent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parent
argument_list|()
condition|)
block|{
name|QWidget
operator|::
name|mouseMoveEvent
argument_list|(
name|mouseEvent
argument_list|)
expr_stmt|;
return|return;
block|}
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
comment|// No update needed if we're in a move/resize operation.
if|if
condition|(
operator|!
name|d
operator|->
name|isMoveOperation
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|isResizeOperation
argument_list|()
condition|)
block|{
comment|// Find previous and current hover region.
specifier|const
name|QStyleOptionTitleBar
name|options
init|=
name|d
operator|->
name|titleBarOptions
argument_list|()
decl_stmt|;
name|QStyle
operator|::
name|SubControl
name|oldHover
init|=
name|d
operator|->
name|hoveredSubControl
decl_stmt|;
name|d
operator|->
name|hoveredSubControl
operator|=
name|d
operator|->
name|getSubControl
argument_list|(
name|mouseEvent
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|QRegion
name|hoverRegion
decl_stmt|;
if|if
condition|(
name|isHoverControl
argument_list|(
name|oldHover
argument_list|)
operator|&&
name|oldHover
operator|!=
name|d
operator|->
name|hoveredSubControl
condition|)
name|hoverRegion
operator|+=
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|options
argument_list|,
name|oldHover
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|isHoverControl
argument_list|(
name|d
operator|->
name|hoveredSubControl
argument_list|)
operator|&&
name|d
operator|->
name|hoveredSubControl
operator|!=
name|oldHover
condition|)
block|{
name|hoverRegion
operator|+=
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_TitleBar
argument_list|,
operator|&
name|options
argument_list|,
name|d
operator|->
name|hoveredSubControl
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMacStyle
operator|*
argument_list|>
argument_list|(
name|style
argument_list|()
argument_list|)
operator|&&
operator|!
name|hoverRegion
operator|.
name|isEmpty
argument_list|()
condition|)
name|hoverRegion
operator|+=
name|QRegion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|d
operator|->
name|titleBarHeight
argument_list|(
name|options
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|hoverRegion
operator|.
name|isEmpty
argument_list|()
condition|)
name|update
argument_list|(
name|hoverRegion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mouseEvent
operator|->
name|buttons
argument_list|()
operator|&
name|Qt
operator|::
name|LeftButton
operator|)
operator|||
name|d
operator|->
name|isInInteractiveMode
condition|)
block|{
if|if
condition|(
operator|(
name|d
operator|->
name|isResizeOperation
argument_list|()
operator|&&
name|d
operator|->
name|resizeEnabled
operator|)
operator|||
operator|(
name|d
operator|->
name|isMoveOperation
argument_list|()
operator|&&
name|d
operator|->
name|moveEnabled
operator|)
condition|)
name|d
operator|->
name|setNewGeometry
argument_list|(
name|mapToParent
argument_list|(
name|mouseEvent
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Do not resize/move if not allowed.
name|d
operator|->
name|currentOperation
operator|=
name|d
operator|->
name|getOperation
argument_list|(
name|mouseEvent
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|d
operator|->
name|isResizeOperation
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|resizeEnabled
operator|)
operator|||
operator|(
name|d
operator|->
name|isMoveOperation
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|moveEnabled
operator|)
condition|)
name|d
operator|->
name|currentOperation
operator|=
name|QMdiSubWindowPrivate
operator|::
name|None
expr_stmt|;
name|d
operator|->
name|updateCursor
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QMdiSubWindow
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|keyEvent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|isInInteractiveMode
operator|||
operator|!
name|parent
argument_list|()
condition|)
block|{
name|keyEvent
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|QPoint
name|delta
decl_stmt|;
switch|switch
condition|(
name|keyEvent
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Right
case|:
if|if
condition|(
name|keyEvent
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
name|delta
operator|=
name|QPoint
argument_list|(
name|d
operator|->
name|keyboardPageStep
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|delta
operator|=
name|QPoint
argument_list|(
name|d
operator|->
name|keyboardSingleStep
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_Up
case|:
if|if
condition|(
name|keyEvent
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
name|delta
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
operator|-
name|d
operator|->
name|keyboardPageStep
argument_list|)
expr_stmt|;
else|else
name|delta
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
operator|-
name|d
operator|->
name|keyboardSingleStep
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_Left
case|:
if|if
condition|(
name|keyEvent
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
name|delta
operator|=
name|QPoint
argument_list|(
operator|-
name|d
operator|->
name|keyboardPageStep
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|delta
operator|=
name|QPoint
argument_list|(
operator|-
name|d
operator|->
name|keyboardSingleStep
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_Down
case|:
if|if
condition|(
name|keyEvent
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
name|delta
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|keyboardPageStep
argument_list|)
expr_stmt|;
else|else
name|delta
operator|=
name|QPoint
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|keyboardSingleStep
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_Escape
case|:
case|case
name|Qt
operator|::
name|Key_Return
case|:
case|case
name|Qt
operator|::
name|Key_Enter
case|:
name|d
operator|->
name|leaveInteractiveMode
argument_list|()
expr_stmt|;
return|return;
default|default:
name|keyEvent
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QPoint
name|newPosition
init|=
name|parentWidget
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|cursor
argument_list|()
operator|.
name|pos
argument_list|()
operator|+
name|delta
argument_list|)
decl_stmt|;
name|QRect
name|oldGeometry
init|=
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
name|d
operator|->
name|isInRubberBandMode
condition|?
name|d
operator|->
name|rubberBand
operator|->
name|geometry
argument_list|()
else|:
endif|#
directive|endif
name|geometry
argument_list|()
decl_stmt|;
name|d
operator|->
name|setNewGeometry
argument_list|(
name|newPosition
argument_list|)
expr_stmt|;
name|QRect
name|currentGeometry
init|=
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
name|d
operator|->
name|isInRubberBandMode
condition|?
name|d
operator|->
name|rubberBand
operator|->
name|geometry
argument_list|()
else|:
endif|#
directive|endif
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentGeometry
operator|==
name|oldGeometry
condition|)
return|return;
comment|// Update cursor position
name|QPoint
name|actualDelta
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|isMoveOperation
argument_list|()
condition|)
block|{
name|actualDelta
operator|=
name|QPoint
argument_list|(
name|currentGeometry
operator|.
name|x
argument_list|()
operator|-
name|oldGeometry
operator|.
name|x
argument_list|()
argument_list|,
name|currentGeometry
operator|.
name|y
argument_list|()
operator|-
name|oldGeometry
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|dx
init|=
name|isLeftToRight
argument_list|()
condition|?
name|currentGeometry
operator|.
name|width
argument_list|()
operator|-
name|oldGeometry
operator|.
name|width
argument_list|()
else|:
name|currentGeometry
operator|.
name|x
argument_list|()
operator|-
name|oldGeometry
operator|.
name|x
argument_list|()
decl_stmt|;
name|actualDelta
operator|=
name|QPoint
argument_list|(
name|dx
argument_list|,
name|currentGeometry
operator|.
name|height
argument_list|()
operator|-
name|oldGeometry
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Adjust in case we weren't able to move as long as wanted.
if|if
condition|(
name|actualDelta
operator|!=
name|delta
condition|)
name|newPosition
operator|+=
operator|(
name|actualDelta
operator|-
name|delta
operator|)
expr_stmt|;
name|cursor
argument_list|()
operator|.
name|setPos
argument_list|(
name|parentWidget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|newPosition
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|contextMenuEvent
name|void
name|QMdiSubWindow
operator|::
name|contextMenuEvent
parameter_list|(
name|QContextMenuEvent
modifier|*
name|contextMenuEvent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|systemMenu
condition|)
block|{
name|contextMenuEvent
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|hoveredSubControl
operator|==
name|QStyle
operator|::
name|SC_TitleBarSysMenu
operator|||
name|d
operator|->
name|getRegion
argument_list|(
name|QMdiSubWindowPrivate
operator|::
name|Move
argument_list|)
operator|.
name|contains
argument_list|(
name|contextMenuEvent
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
name|d
operator|->
name|systemMenu
operator|->
name|exec
argument_list|(
name|contextMenuEvent
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|contextMenuEvent
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONTEXTMENU
end_comment
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|focusInEvent
name|void
name|QMdiSubWindow
operator|::
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|focusInEvent
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|focusInReason
operator|=
name|focusInEvent
operator|->
name|reason
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|focusOutEvent
name|void
name|QMdiSubWindow
operator|::
name|focusOutEvent
parameter_list|(
name|QFocusEvent
modifier|*
comment|/*focusOutEvent*/
parameter_list|)
block|{
comment|// To avoid update() in QWidget::focusOutEvent.
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|childEvent
name|void
name|QMdiSubWindow
operator|::
name|childEvent
parameter_list|(
name|QChildEvent
modifier|*
name|childEvent
parameter_list|)
block|{
if|if
condition|(
name|childEvent
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|ChildPolished
condition|)
return|return;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
if|if
condition|(
name|QSizeGrip
modifier|*
name|sizeGrip
init|=
name|qobject_cast
argument_list|<
name|QSizeGrip
operator|*
argument_list|>
argument_list|(
name|childEvent
operator|->
name|child
argument_list|()
argument_list|)
condition|)
name|d_func
argument_list|()
operator|->
name|setSizeGrip
argument_list|(
name|sizeGrip
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QMdiSubWindow
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
expr_stmt|;
name|int
name|margin
decl_stmt|,
name|minWidth
decl_stmt|;
name|d
operator|->
name|sizeParameters
argument_list|(
operator|&
name|margin
argument_list|,
operator|&
name|minWidth
argument_list|)
expr_stmt|;
name|QSize
name|size
argument_list|(
literal|2
operator|*
name|margin
argument_list|,
name|d
operator|->
name|titleBarHeight
argument_list|()
operator|+
name|margin
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|baseWidget
operator|&&
name|d
operator|->
name|baseWidget
operator|->
name|sizeHint
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
name|size
operator|+=
name|d
operator|->
name|baseWidget
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
return|return
name|size
operator|.
name|expandedTo
argument_list|(
name|minimumSizeHint
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|minimumSizeHint
name|QSize
name|QMdiSubWindow
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMdiSubWindow
argument_list|)
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|ensurePolished
argument_list|()
expr_stmt|;
comment|// Minimized window.
if|if
condition|(
name|parent
argument_list|()
operator|&&
name|isMinimized
argument_list|()
operator|&&
operator|!
name|isShaded
argument_list|()
condition|)
return|return
name|d
operator|->
name|iconSize
argument_list|()
return|;
comment|// Calculate window decoration.
name|int
name|margin
decl_stmt|,
name|minWidth
decl_stmt|;
name|d
operator|->
name|sizeParameters
argument_list|(
operator|&
name|margin
argument_list|,
operator|&
name|minWidth
argument_list|)
expr_stmt|;
name|int
name|decorationHeight
init|=
name|margin
operator|+
name|d
operator|->
name|titleBarHeight
argument_list|()
decl_stmt|;
name|int
name|minHeight
init|=
name|decorationHeight
decl_stmt|;
comment|// Shaded window.
if|if
condition|(
name|parent
argument_list|()
operator|&&
name|isShaded
argument_list|()
condition|)
return|return
name|QSize
argument_list|(
name|qMax
argument_list|(
name|minWidth
argument_list|,
name|width
argument_list|()
argument_list|)
argument_list|,
name|d
operator|->
name|titleBarHeight
argument_list|()
argument_list|)
return|;
comment|// Content
if|if
condition|(
name|layout
argument_list|()
condition|)
block|{
name|QSize
name|minLayoutSize
init|=
name|layout
argument_list|()
operator|->
name|minimumSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|minLayoutSize
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|minWidth
operator|=
name|qMax
argument_list|(
name|minWidth
argument_list|,
name|minLayoutSize
operator|.
name|width
argument_list|()
operator|+
literal|2
operator|*
name|margin
argument_list|)
expr_stmt|;
name|minHeight
operator|+=
name|minLayoutSize
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|baseWidget
operator|&&
name|d
operator|->
name|baseWidget
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|QSize
name|minBaseWidgetSize
init|=
name|d
operator|->
name|baseWidget
operator|->
name|minimumSizeHint
argument_list|()
decl_stmt|;
if|if
condition|(
name|minBaseWidgetSize
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|minWidth
operator|=
name|qMax
argument_list|(
name|minWidth
argument_list|,
name|minBaseWidgetSize
operator|.
name|width
argument_list|()
operator|+
literal|2
operator|*
name|margin
argument_list|)
expr_stmt|;
name|minHeight
operator|+=
name|minBaseWidgetSize
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
comment|// SizeGrip
name|int
name|sizeGripHeight
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|sizeGrip
operator|&&
name|d
operator|->
name|sizeGrip
operator|->
name|isVisibleTo
argument_list|(
cast|const_cast
argument_list|<
name|QMdiSubWindow
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
condition|)
name|sizeGripHeight
operator|=
name|d
operator|->
name|sizeGrip
operator|->
name|height
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_STYLE_MAC
argument_list|)
elseif|else
if|if
condition|(
name|parent
argument_list|()
operator|&&
name|qobject_cast
argument_list|<
name|QMacStyle
operator|*
argument_list|>
argument_list|(
name|style
argument_list|()
argument_list|)
operator|&&
operator|!
name|d
operator|->
name|sizeGrip
condition|)
name|sizeGripHeight
operator|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SizeGripSize
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|minHeight
operator|=
name|qMax
argument_list|(
name|minHeight
argument_list|,
name|decorationHeight
operator|+
name|sizeGripHeight
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|QSize
argument_list|(
name|minWidth
argument_list|,
name|minHeight
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qmdisubwindow.cpp"
end_include
begin_include
include|#
directive|include
file|"qmdisubwindow.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_MDIAREA
end_comment
end_unit
