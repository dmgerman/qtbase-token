begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QWidgetLineControl_P_H
end_ifndef
begin_define
DECL|macro|QWidgetLineControl_P_H
define|#
directive|define
name|QWidgetLineControl_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qglobal.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LINEEDIT
end_ifndef
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"QtWidgets/qlineedit.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qtextlayout.h"
end_include
begin_include
include|#
directive|include
file|"QtWidgets/qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qpointer.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qclipboard.h"
end_include
begin_include
include|#
directive|include
file|"QtGui/qinputmethod.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qpoint.h"
end_include
begin_include
include|#
directive|include
file|"QtWidgets/qcompleter.h"
end_include
begin_include
include|#
directive|include
file|"QtCore/qthread.h"
end_include
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_include
include|#
directive|include
file|"qplatformdefs.h"
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
ifdef|#
directive|ifdef
name|DrawText
DECL|macro|DrawText
undef|#
directive|undef
name|DrawText
endif|#
directive|endif
name|QT_BEGIN_NAMESPACE
name|class
name|Q_WIDGETS_EXPORT
name|QWidgetLineControl
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
name|QWidgetLineControl
argument_list|(
specifier|const
name|QString
operator|&
name|txt
operator|=
name|QString
argument_list|()
argument_list|)
operator|:
name|m_cursor
argument_list|(
literal|0
argument_list|)
block|,
name|m_preeditCursor
argument_list|(
literal|0
argument_list|)
block|,
name|m_cursorWidth
argument_list|(
literal|0
argument_list|)
block|,
name|m_layoutDirection
argument_list|(
name|Qt
operator|::
name|LayoutDirectionAuto
argument_list|)
block|,
name|m_hideCursor
argument_list|(
name|false
argument_list|)
block|,
name|m_separator
argument_list|(
literal|0
argument_list|)
block|,
name|m_readOnly
argument_list|(
literal|0
argument_list|)
block|,
name|m_dragEnabled
argument_list|(
literal|0
argument_list|)
block|,
name|m_echoMode
argument_list|(
literal|0
argument_list|)
block|,
name|m_textDirty
argument_list|(
literal|0
argument_list|)
block|,
name|m_selDirty
argument_list|(
literal|0
argument_list|)
block|,
name|m_validInput
argument_list|(
literal|1
argument_list|)
block|,
name|m_blinkStatus
argument_list|(
literal|0
argument_list|)
block|,
name|m_blinkPeriod
argument_list|(
literal|0
argument_list|)
block|,
name|m_blinkTimer
argument_list|(
literal|0
argument_list|)
block|,
name|m_deleteAllTimer
argument_list|(
literal|0
argument_list|)
block|,
name|m_ascent
argument_list|(
literal|0
argument_list|)
block|,
name|m_maxLength
argument_list|(
literal|32767
argument_list|)
block|,
name|m_lastCursorPos
argument_list|(
operator|-
literal|1
argument_list|)
block|,
name|m_tripleClickTimer
argument_list|(
literal|0
argument_list|)
block|,
name|m_maskData
argument_list|(
literal|0
argument_list|)
block|,
name|m_modifiedState
argument_list|(
literal|0
argument_list|)
block|,
name|m_undoState
argument_list|(
literal|0
argument_list|)
block|,
name|m_selstart
argument_list|(
literal|0
argument_list|)
block|,
name|m_selend
argument_list|(
literal|0
argument_list|)
block|,
name|m_passwordEchoEditing
argument_list|(
name|false
argument_list|)
block|,
name|m_passwordEchoTimer
argument_list|(
literal|0
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
block|,
name|m_threadChecks
argument_list|(
name|false
argument_list|)
block|,
name|m_textLayoutThread
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
block|,
name|m_keyboardScheme
argument_list|(
literal|0
argument_list|)
block|{
name|init
argument_list|(
name|txt
argument_list|)
block|;     }
operator|~
name|QWidgetLineControl
argument_list|()
block|{
name|delete
index|[]
name|m_maskData
block|;     }
name|int
name|nextMaskBlank
argument_list|(
argument|int pos
argument_list|)
block|{
name|int
name|c
operator|=
name|findInMask
argument_list|(
name|pos
argument_list|,
name|true
argument_list|,
name|false
argument_list|)
block|;
name|m_separator
operator||=
operator|(
name|c
operator|!=
name|pos
operator|)
block|;
return|return
operator|(
name|c
operator|!=
operator|-
literal|1
condition|?
name|c
else|:
name|m_maxLength
operator|)
return|;
block|}
name|int
name|prevMaskBlank
argument_list|(
argument|int pos
argument_list|)
block|{
name|int
name|c
operator|=
name|findInMask
argument_list|(
name|pos
argument_list|,
name|false
argument_list|,
name|false
argument_list|)
block|;
name|m_separator
operator||=
operator|(
name|c
operator|!=
name|pos
operator|)
block|;
return|return
operator|(
name|c
operator|!=
operator|-
literal|1
condition|?
name|c
else|:
literal|0
operator|)
return|;
block|}
name|bool
name|isUndoAvailable
argument_list|()
specifier|const
block|{
return|return
operator|!
name|m_readOnly
operator|&&
name|m_undoState
return|;
block|}
name|bool
name|isRedoAvailable
argument_list|()
specifier|const
block|{
return|return
operator|!
name|m_readOnly
operator|&&
name|m_undoState
operator|<
operator|(
name|int
operator|)
name|m_history
operator|.
name|size
argument_list|()
return|;
block|}
name|void
name|clearUndo
argument_list|()
block|{
name|m_history
operator|.
name|clear
argument_list|()
block|;
name|m_modifiedState
operator|=
name|m_undoState
operator|=
literal|0
block|; }
name|bool
name|isModified
argument_list|()
specifier|const
block|{
return|return
name|m_modifiedState
operator|!=
name|m_undoState
return|;
block|}
name|void
name|setModified
argument_list|(
argument|bool modified
argument_list|)
block|{
name|m_modifiedState
operator|=
name|modified
condition|?
operator|-
literal|1
else|:
name|m_undoState
block|; }
name|bool
name|allSelected
argument_list|()
specifier|const
block|{
return|return
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
operator|&&
name|m_selstart
operator|==
literal|0
operator|&&
name|m_selend
operator|==
operator|(
name|int
operator|)
name|m_text
operator|.
name|length
argument_list|()
return|;
block|}
name|bool
name|hasSelectedText
argument_list|()
specifier|const
block|{
return|return
operator|!
name|m_text
operator|.
name|isEmpty
argument_list|()
operator|&&
name|m_selend
operator|>
name|m_selstart
return|;
block|}
name|int
name|width
argument_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|m_textLayout
operator|.
name|lineAt
argument_list|(
literal|0
argument_list|)
operator|.
name|width
argument_list|()
argument_list|)
operator|+
literal|1
return|;
block|}
name|int
name|height
argument_list|()
specifier|const
block|{
return|return
name|qRound
argument_list|(
name|m_textLayout
operator|.
name|lineAt
argument_list|(
literal|0
argument_list|)
operator|.
name|height
argument_list|()
argument_list|)
operator|+
literal|1
return|;
block|}
name|int
name|ascent
argument_list|()
specifier|const
block|{
return|return
name|m_ascent
return|;
block|}
name|qreal
name|naturalTextWidth
argument_list|()
specifier|const
block|{
return|return
name|m_textLayout
operator|.
name|lineAt
argument_list|(
literal|0
argument_list|)
operator|.
name|naturalTextWidth
argument_list|()
return|;
block|}
name|void
name|setSelection
argument_list|(
argument|int start
argument_list|,
argument|int length
argument_list|)
block|;
specifier|inline
name|QString
name|selectedText
argument_list|()
specifier|const
block|{
return|return
name|hasSelectedText
argument_list|()
condition|?
name|m_text
operator|.
name|mid
argument_list|(
name|m_selstart
argument_list|,
name|m_selend
operator|-
name|m_selstart
argument_list|)
else|:
name|QString
argument_list|()
return|;
block|}
name|QString
name|textBeforeSelection
argument_list|()
specifier|const
block|{
return|return
name|hasSelectedText
argument_list|()
condition|?
name|m_text
operator|.
name|left
argument_list|(
name|m_selstart
argument_list|)
else|:
name|QString
argument_list|()
return|;
block|}
name|QString
name|textAfterSelection
argument_list|()
specifier|const
block|{
return|return
name|hasSelectedText
argument_list|()
condition|?
name|m_text
operator|.
name|mid
argument_list|(
name|m_selend
argument_list|)
else|:
name|QString
argument_list|()
return|;
block|}
name|int
name|selectionStart
argument_list|()
specifier|const
block|{
return|return
name|hasSelectedText
argument_list|()
condition|?
name|m_selstart
else|:
operator|-
literal|1
return|;
block|}
name|int
name|selectionEnd
argument_list|()
specifier|const
block|{
return|return
name|hasSelectedText
argument_list|()
condition|?
name|m_selend
else|:
operator|-
literal|1
return|;
block|}
name|bool
name|inSelection
argument_list|(
argument|int x
argument_list|)
specifier|const
block|{
if|if
condition|(
name|m_selstart
operator|>=
name|m_selend
condition|)
return|return
name|false
return|;
name|int
name|pos
operator|=
name|xToPos
argument_list|(
name|x
argument_list|,
name|QTextLine
operator|::
name|CursorOnCharacter
argument_list|)
block|;
return|return
name|pos
operator|>=
name|m_selstart
operator|&&
name|pos
operator|<
name|m_selend
return|;
block|}
end_decl_stmt
begin_function
name|void
name|removeSelection
parameter_list|()
block|{
name|int
name|priorState
init|=
name|m_undoState
decl_stmt|;
name|removeSelectedText
argument_list|()
expr_stmt|;
name|finishChange
argument_list|(
name|priorState
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|int
name|start
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|int
name|end
argument_list|()
specifier|const
block|{
return|return
name|m_text
operator|.
name|length
argument_list|()
return|;
block|}
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_decl_stmt
name|void
name|copy
argument_list|(
name|QClipboard
operator|::
name|Mode
name|mode
operator|=
name|QClipboard
operator|::
name|Clipboard
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|void
name|paste
argument_list|(
name|QClipboard
operator|::
name|Mode
name|mode
operator|=
name|QClipboard
operator|::
name|Clipboard
argument_list|)
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|int
name|cursor
argument_list|()
specifier|const
block|{
return|return
name|m_cursor
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|int
name|preeditCursor
argument_list|()
specifier|const
block|{
return|return
name|m_preeditCursor
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|int
name|cursorWidth
argument_list|()
specifier|const
block|{
return|return
name|m_cursorWidth
return|;
block|}
end_expr_stmt
begin_function
name|void
name|setCursorWidth
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|m_cursorWidth
operator|=
name|value
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|Qt
operator|::
name|CursorMoveStyle
name|cursorMoveStyle
argument_list|()
specifier|const
block|{
return|return
name|m_textLayout
operator|.
name|cursorMoveStyle
argument_list|()
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|void
name|setCursorMoveStyle
argument_list|(
name|Qt
operator|::
name|CursorMoveStyle
name|style
argument_list|)
block|{
name|m_textLayout
operator|.
name|setCursorMoveStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_function_decl
name|void
name|moveCursor
parameter_list|(
name|int
name|pos
parameter_list|,
name|bool
name|mark
init|=
name|false
parameter_list|)
function_decl|;
end_function_decl
begin_function
name|void
name|cursorForward
parameter_list|(
name|bool
name|mark
parameter_list|,
name|int
name|steps
parameter_list|)
block|{
name|int
name|c
init|=
name|m_cursor
decl_stmt|;
if|if
condition|(
name|steps
operator|>
literal|0
condition|)
block|{
while|while
condition|(
name|steps
operator|--
condition|)
name|c
operator|=
name|cursorMoveStyle
argument_list|()
operator|==
name|Qt
operator|::
name|VisualMoveStyle
condition|?
name|m_textLayout
operator|.
name|rightCursorPosition
argument_list|(
name|c
argument_list|)
else|:
name|m_textLayout
operator|.
name|nextCursorPosition
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|steps
operator|<
literal|0
condition|)
block|{
while|while
condition|(
name|steps
operator|++
condition|)
name|c
operator|=
name|cursorMoveStyle
argument_list|()
operator|==
name|Qt
operator|::
name|VisualMoveStyle
condition|?
name|m_textLayout
operator|.
name|leftCursorPosition
argument_list|(
name|c
argument_list|)
else|:
name|m_textLayout
operator|.
name|previousCursorPosition
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|moveCursor
argument_list|(
name|c
argument_list|,
name|mark
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|cursorWordForward
parameter_list|(
name|bool
name|mark
parameter_list|)
block|{
name|moveCursor
argument_list|(
name|m_textLayout
operator|.
name|nextCursorPosition
argument_list|(
name|m_cursor
argument_list|,
name|QTextLayout
operator|::
name|SkipWords
argument_list|)
argument_list|,
name|mark
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|cursorWordBackward
parameter_list|(
name|bool
name|mark
parameter_list|)
block|{
name|moveCursor
argument_list|(
name|m_textLayout
operator|.
name|previousCursorPosition
argument_list|(
name|m_cursor
argument_list|,
name|QTextLayout
operator|::
name|SkipWords
argument_list|)
argument_list|,
name|mark
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|home
parameter_list|(
name|bool
name|mark
parameter_list|)
block|{
name|moveCursor
argument_list|(
literal|0
argument_list|,
name|mark
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|end
parameter_list|(
name|bool
name|mark
parameter_list|)
block|{
name|moveCursor
argument_list|(
name|text
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|mark
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
name|int
name|xToPos
argument_list|(
name|int
name|x
argument_list|,
name|QTextLine
operator|::
name|CursorPosition
operator|=
name|QTextLine
operator|::
name|CursorBetweenCharacters
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QRect
name|cursorRect
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|qreal
name|cursorToX
argument_list|(
name|int
name|cursor
argument_list|)
decl|const
block|{
return|return
name|m_textLayout
operator|.
name|lineAt
argument_list|(
literal|0
argument_list|)
operator|.
name|cursorToX
argument_list|(
name|cursor
argument_list|)
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|qreal
name|cursorToX
argument_list|()
specifier|const
block|{
name|int
name|cursor
operator|=
name|m_cursor
block|;
if|if
condition|(
name|m_preeditCursor
operator|!=
operator|-
literal|1
condition|)
name|cursor
operator|+=
name|m_preeditCursor
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|cursorToX
argument_list|(
name|cursor
argument_list|)
return|;
end_return
begin_macro
unit|}      bool
name|isReadOnly
argument_list|()
end_macro
begin_expr_stmt
specifier|const
block|{
return|return
name|m_readOnly
return|;
block|}
end_expr_stmt
begin_function
name|void
name|setReadOnly
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|m_readOnly
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|QString
name|text
argument_list|()
specifier|const
block|{
name|QString
name|content
operator|=
name|m_text
block|;
if|if
condition|(
operator|!
name|m_tentativeCommit
operator|.
name|isEmpty
argument_list|()
condition|)
name|content
operator|.
name|insert
argument_list|(
name|m_cursor
argument_list|,
name|m_tentativeCommit
argument_list|)
expr_stmt|;
name|QString
name|res
operator|=
name|m_maskData
condition|?
name|stripString
argument_list|(
name|content
argument_list|)
else|:
name|content
expr_stmt|;
end_expr_stmt
begin_return
return|return
operator|(
name|res
operator|.
name|isNull
argument_list|()
condition|?
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
else|:
name|res
operator|)
return|;
end_return
begin_comment
unit|}
comment|// like text() but doesn't include preedit
end_comment
begin_macro
unit|QString
name|realText
argument_list|()
end_macro
begin_expr_stmt
specifier|const
block|{
name|QString
name|res
operator|=
name|m_maskData
operator|?
name|stripString
argument_list|(
name|m_text
argument_list|)
operator|:
name|m_text
block|;
return|return
operator|(
name|res
operator|.
name|isNull
argument_list|()
condition|?
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
else|:
name|res
operator|)
return|;
block|}
end_expr_stmt
begin_function
name|void
name|setText
parameter_list|(
specifier|const
name|QString
modifier|&
name|txt
parameter_list|)
block|{
if|if
condition|(
name|composeMode
argument_list|()
condition|)
name|qApp
operator|->
name|inputMethod
argument_list|()
operator|->
name|reset
argument_list|()
expr_stmt|;
name|m_tentativeCommit
operator|.
name|clear
argument_list|()
expr_stmt|;
name|internalSetText
argument_list|(
name|txt
argument_list|,
operator|-
literal|1
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
name|void
name|commitPreedit
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|QString
name|displayText
argument_list|()
specifier|const
block|{
return|return
name|m_textLayout
operator|.
name|text
argument_list|()
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|backspace
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|del
parameter_list|()
function_decl|;
end_function_decl
begin_function
name|void
name|deselect
parameter_list|()
block|{
name|internalDeselect
argument_list|()
expr_stmt|;
name|finishChange
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
name|void
name|selectAll
parameter_list|()
block|{
name|m_selstart
operator|=
name|m_selend
operator|=
name|m_cursor
operator|=
literal|0
expr_stmt|;
name|moveCursor
argument_list|(
name|m_text
operator|.
name|length
argument_list|()
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
name|void
name|insert
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl
begin_function
name|void
name|undo
parameter_list|()
block|{
name|internalUndo
argument_list|()
expr_stmt|;
name|finishChange
argument_list|(
operator|-
literal|1
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|redo
parameter_list|()
block|{
name|internalRedo
argument_list|()
expr_stmt|;
name|finishChange
argument_list|()
expr_stmt|;
block|}
end_function
begin_function_decl
name|void
name|selectWordAtPos
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|uint
name|echoMode
argument_list|()
specifier|const
block|{
return|return
name|m_echoMode
return|;
block|}
end_expr_stmt
begin_function
name|void
name|setEchoMode
parameter_list|(
name|uint
name|mode
parameter_list|)
block|{
name|cancelPasswordEchoTimer
argument_list|()
expr_stmt|;
name|m_echoMode
operator|=
name|mode
expr_stmt|;
name|m_passwordEchoEditing
operator|=
name|false
expr_stmt|;
name|updateDisplayText
argument_list|()
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|int
name|maxLength
argument_list|()
specifier|const
block|{
return|return
name|m_maxLength
return|;
block|}
end_expr_stmt
begin_function
name|void
name|setMaxLength
parameter_list|(
name|int
name|maxLength
parameter_list|)
block|{
if|if
condition|(
name|m_maskData
condition|)
return|return;
name|m_maxLength
operator|=
name|maxLength
expr_stmt|;
name|setText
argument_list|(
name|m_text
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VALIDATOR
end_ifndef
begin_expr_stmt
specifier|const
name|QValidator
operator|*
name|validator
argument_list|()
specifier|const
block|{
return|return
name|m_validator
return|;
block|}
end_expr_stmt
begin_function
name|void
name|setValidator
parameter_list|(
specifier|const
name|QValidator
modifier|*
name|v
parameter_list|)
block|{
name|m_validator
operator|=
name|const_cast
operator|<
name|QValidator
operator|*
operator|>
operator|(
name|v
operator|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
end_ifndef
begin_expr_stmt
name|QCompleter
operator|*
name|completer
argument_list|()
specifier|const
block|{
return|return
name|m_completer
return|;
block|}
end_expr_stmt
begin_comment
comment|/* Note that you must set the widget for the completer separately */
end_comment
begin_function
name|void
name|setCompleter
parameter_list|(
specifier|const
name|QCompleter
modifier|*
name|c
parameter_list|)
block|{
name|m_completer
operator|=
name|const_cast
operator|<
name|QCompleter
operator|*
operator|>
operator|(
name|c
operator|)
expr_stmt|;
block|}
end_function
begin_function_decl
name|void
name|complete
parameter_list|(
name|int
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|int
name|cursorPosition
argument_list|()
specifier|const
block|{
return|return
name|m_cursor
return|;
block|}
end_expr_stmt
begin_function
name|void
name|setCursorPosition
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|<=
name|m_text
operator|.
name|length
argument_list|()
condition|)
name|moveCursor
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|bool
name|hasAcceptableInput
argument_list|()
specifier|const
block|{
return|return
name|hasAcceptableInput
argument_list|(
name|m_text
argument_list|)
return|;
block|}
end_expr_stmt
begin_function_decl
name|bool
name|fixup
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|QString
name|inputMask
argument_list|()
specifier|const
block|{
return|return
name|m_maskData
operator|?
name|m_inputMask
operator|+
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
operator|+
name|m_blank
operator|:
name|QString
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
name|void
name|setInputMask
parameter_list|(
specifier|const
name|QString
modifier|&
name|mask
parameter_list|)
block|{
name|parseInputMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_maskData
condition|)
name|moveCursor
argument_list|(
name|nextMaskBlank
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// input methods
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_IM
end_ifndef
begin_expr_stmt
name|bool
name|composeMode
argument_list|()
specifier|const
block|{
return|return
operator|!
name|m_textLayout
operator|.
name|preeditAreaText
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
name|void
name|setPreeditArea
parameter_list|(
name|int
name|cursor
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|m_textLayout
operator|.
name|setPreeditArea
argument_list|(
name|cursor
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QString
name|preeditAreaText
argument_list|()
specifier|const
block|{
return|return
name|m_textLayout
operator|.
name|preeditAreaText
argument_list|()
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|updatePasswordEchoEditing
parameter_list|(
name|bool
name|editing
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|passwordEchoEditing
argument_list|()
specifier|const
block|{
if|if
condition|(
name|m_passwordEchoTimer
operator|!=
literal|0
condition|)
return|return
name|true
return|;
end_expr_stmt
begin_return
return|return
name|m_passwordEchoEditing
return|;
end_return
begin_macro
unit|}      QChar
name|passwordCharacter
argument_list|()
end_macro
begin_expr_stmt
specifier|const
block|{
return|return
name|m_passwordCharacter
return|;
block|}
end_expr_stmt
begin_function
name|void
name|setPasswordCharacter
parameter_list|(
name|QChar
name|character
parameter_list|)
block|{
name|m_passwordCharacter
operator|=
name|character
expr_stmt|;
name|updateDisplayText
argument_list|()
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|Qt
operator|::
name|LayoutDirection
name|layoutDirection
argument_list|()
specifier|const
block|{
if|if
condition|(
name|m_layoutDirection
operator|==
name|Qt
operator|::
name|LayoutDirectionAuto
condition|)
block|{
if|if
condition|(
name|m_text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|qApp
operator|->
name|inputMethod
argument_list|()
operator|->
name|inputDirection
argument_list|()
return|;
return|return
name|m_text
operator|.
name|isRightToLeft
argument_list|()
condition|?
name|Qt
operator|::
name|RightToLeft
else|:
name|Qt
operator|::
name|LeftToRight
return|;
block|}
end_expr_stmt
begin_return
return|return
name|m_layoutDirection
return|;
end_return
begin_macro
unit|}     void
name|setLayoutDirection
argument_list|(
argument|Qt::LayoutDirection direction
argument_list|)
end_macro
begin_block
block|{
if|if
condition|(
name|direction
operator|!=
name|m_layoutDirection
condition|)
block|{
name|m_layoutDirection
operator|=
name|direction
expr_stmt|;
name|updateDisplayText
argument_list|()
expr_stmt|;
block|}
block|}
end_block
begin_function
name|void
name|setFont
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
name|m_textLayout
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|updateDisplayText
argument_list|()
expr_stmt|;
block|}
end_function
begin_function_decl
name|void
name|processInputMethodEvent
parameter_list|(
name|QInputMethodEvent
modifier|*
name|event
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|processKeyEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|ev
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|int
name|cursorBlinkPeriod
argument_list|()
specifier|const
block|{
return|return
name|m_blinkPeriod
return|;
block|}
end_expr_stmt
begin_function_decl
name|void
name|setCursorBlinkPeriod
parameter_list|(
name|int
name|msec
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|resetCursorBlinkTimer
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|cursorBlinkStatus
argument_list|()
specifier|const
block|{
return|return
name|m_blinkStatus
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QString
name|cancelText
argument_list|()
specifier|const
block|{
return|return
name|m_cancelText
return|;
block|}
end_expr_stmt
begin_function
name|void
name|setCancelText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|m_cancelText
operator|=
name|text
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|const
name|QPalette
operator|&
name|palette
argument_list|()
specifier|const
block|{
return|return
name|m_palette
return|;
block|}
end_expr_stmt
begin_function
name|void
name|setPalette
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|p
parameter_list|)
block|{
name|m_palette
operator|=
name|p
expr_stmt|;
block|}
end_function
begin_enum
enum|enum
name|DrawFlags
block|{
name|DrawText
init|=
literal|0x01
block|,
name|DrawSelections
init|=
literal|0x02
block|,
name|DrawCursor
init|=
literal|0x04
block|,
name|DrawAll
init|=
name|DrawText
operator||
name|DrawSelections
operator||
name|DrawCursor
block|}
enum|;
end_enum
begin_function_decl
name|void
name|draw
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QPoint
modifier|&
parameter_list|,
specifier|const
name|QRect
modifier|&
parameter_list|,
name|int
name|flags
init|=
name|DrawAll
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
end_ifndef
begin_function_decl
name|void
name|processShortcutOverrideEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|ke
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QTextLayout
operator|*
name|textLayout
argument_list|()
specifier|const
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
if|if
condition|(
name|m_threadChecks
operator|&&
name|QThread
operator|::
name|currentThread
argument_list|()
operator|!=
name|m_textLayoutThread
condition|)
name|redoTextLayout
argument_list|()
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_return
return|return
operator|&
name|m_textLayout
return|;
end_return
begin_if
unit|}
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
end_if
begin_macro
unit|void
name|setThreadChecks
argument_list|(
argument|bool threadChecks
argument_list|)
end_macro
begin_block
block|{
name|m_threadChecks
operator|=
name|threadChecks
expr_stmt|;
block|}
end_block
begin_expr_stmt
name|bool
name|threadChecks
argument_list|()
specifier|const
block|{
return|return
name|m_threadChecks
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_label
name|private
label|:
end_label
begin_function_decl
name|void
name|init
parameter_list|(
specifier|const
name|QString
modifier|&
name|txt
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|removeSelectedText
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|internalSetText
parameter_list|(
specifier|const
name|QString
modifier|&
name|txt
parameter_list|,
name|int
name|pos
init|=
operator|-
literal|1
parameter_list|,
name|bool
name|edited
init|=
name|true
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|updateDisplayText
parameter_list|(
name|bool
name|forceUpdate
init|=
name|false
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|internalInsert
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|internalDelete
parameter_list|(
name|bool
name|wasBackspace
init|=
name|false
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|internalRemove
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|void
name|internalDeselect
parameter_list|()
block|{
name|m_selDirty
operator||=
operator|(
name|m_selend
operator|>
name|m_selstart
operator|)
expr_stmt|;
name|m_selstart
operator|=
name|m_selend
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function_decl
name|void
name|internalUndo
parameter_list|(
name|int
name|until
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|internalRedo
parameter_list|()
function_decl|;
end_function_decl
begin_decl_stmt
name|QString
name|m_text
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QPalette
name|m_palette
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|m_cursor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|m_preeditCursor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|m_cursorWidth
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|m_tentativeCommit
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Qt
operator|::
name|LayoutDirection
name|m_layoutDirection
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|uint
name|m_hideCursor
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_comment
comment|// used to hide the m_cursor inside preedit areas
end_comment
begin_decl_stmt
name|uint
name|m_separator
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|m_readOnly
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|m_dragEnabled
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|m_echoMode
range|:
literal|2
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|m_textDirty
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|m_selDirty
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|m_validInput
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|uint
name|m_blinkStatus
range|:
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|m_blinkPeriod
decl_stmt|;
end_decl_stmt
begin_comment
comment|// 0 for non-blinking cursor
end_comment
begin_decl_stmt
name|int
name|m_blinkTimer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|m_deleteAllTimer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|m_ascent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|m_maxLength
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|m_lastCursorPos
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QList
operator|<
name|int
operator|>
name|m_transactions
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QPoint
name|m_tripleClick
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|m_tripleClickTimer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|m_cancelText
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|emitCursorPositionChanged
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|finishChange
parameter_list|(
name|int
name|validateFromState
init|=
operator|-
literal|1
parameter_list|,
name|bool
name|update
init|=
name|false
parameter_list|,
name|bool
name|edited
init|=
name|true
parameter_list|)
function_decl|;
end_function_decl
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_VALIDATOR
end_ifndef
begin_expr_stmt
name|QPointer
operator|<
name|QValidator
operator|>
name|m_validator
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QPointer
operator|<
name|QCompleter
operator|>
name|m_completer
expr_stmt|;
end_expr_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COMPLETER
end_ifndef
begin_function_decl
name|bool
name|advanceToEnabledItem
parameter_list|(
name|int
name|dir
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_struct
struct|struct
name|MaskInputData
block|{
enum|enum
name|Casemode
block|{
name|NoCaseMode
block|,
name|Upper
block|,
name|Lower
block|}
enum|;
name|QChar
name|maskChar
decl_stmt|;
comment|// either the separator char or the inputmask
name|bool
name|separator
decl_stmt|;
name|Casemode
name|caseMode
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
name|QString
name|m_inputMask
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QChar
name|m_blank
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|MaskInputData
modifier|*
name|m_maskData
decl_stmt|;
end_decl_stmt
begin_comment
comment|// undo/redo handling
end_comment
begin_enum
enum|enum
name|CommandType
block|{
name|Separator
block|,
name|Insert
block|,
name|Remove
block|,
name|Delete
block|,
name|RemoveSelection
block|,
name|DeleteSelection
block|,
name|SetSelection
block|}
enum|;
end_enum
begin_struct
struct|struct
name|Command
block|{
specifier|inline
name|Command
argument_list|()
block|{}
specifier|inline
name|Command
argument_list|(
argument|CommandType t
argument_list|,
argument|int p
argument_list|,
argument|QChar c
argument_list|,
argument|int ss
argument_list|,
argument|int se
argument_list|)
operator|:
name|type
argument_list|(
name|t
argument_list|)
operator|,
name|uc
argument_list|(
name|c
argument_list|)
operator|,
name|pos
argument_list|(
name|p
argument_list|)
operator|,
name|selStart
argument_list|(
name|ss
argument_list|)
operator|,
name|selEnd
argument_list|(
argument|se
argument_list|)
block|{}
name|uint
name|type
operator|:
literal|4
expr_stmt|;
name|QChar
name|uc
decl_stmt|;
name|int
name|pos
decl_stmt|,
name|selStart
decl_stmt|,
name|selEnd
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
name|int
name|m_modifiedState
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|m_undoState
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QVector
operator|<
name|Command
operator|>
name|m_history
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|addCommand
parameter_list|(
specifier|const
name|Command
modifier|&
name|cmd
parameter_list|)
function_decl|;
end_function_decl
begin_function
specifier|inline
name|void
name|separate
parameter_list|()
block|{
name|m_separator
operator|=
name|true
expr_stmt|;
block|}
end_function
begin_comment
comment|// selection
end_comment
begin_decl_stmt
name|int
name|m_selstart
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|m_selend
decl_stmt|;
end_decl_stmt
begin_comment
comment|// masking
end_comment
begin_function_decl
name|void
name|parseInputMask
parameter_list|(
specifier|const
name|QString
modifier|&
name|maskFields
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|bool
name|isValidInput
argument_list|(
name|QChar
name|key
argument_list|,
name|QChar
name|mask
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|hasAcceptableInput
argument_list|(
specifier|const
name|QString
operator|&
name|text
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|maskString
argument_list|(
name|uint
name|pos
argument_list|,
specifier|const
name|QString
operator|&
name|str
argument_list|,
name|bool
name|clear
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|clearString
argument_list|(
name|uint
name|pos
argument_list|,
name|uint
name|len
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|stripString
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|findInMask
argument_list|(
name|int
name|pos
argument_list|,
name|bool
name|forward
argument_list|,
name|bool
name|findSeparator
argument_list|,
name|QChar
name|searchChar
operator|=
name|QChar
argument_list|()
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_comment
comment|// complex text layout (must be mutable so it can be reshaped at will)
end_comment
begin_decl_stmt
name|mutable
name|QTextLayout
name|m_textLayout
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|bool
name|m_passwordEchoEditing
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QChar
name|m_passwordCharacter
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|m_passwordEchoTimer
decl_stmt|;
end_decl_stmt
begin_function
name|void
name|cancelPasswordEchoTimer
parameter_list|()
block|{
if|if
condition|(
name|m_passwordEchoTimer
operator|!=
literal|0
condition|)
block|{
name|killTimer
argument_list|(
name|m_passwordEchoTimer
argument_list|)
expr_stmt|;
name|m_passwordEchoTimer
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_expr_stmt
name|int
name|redoTextLayout
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_MAC
argument_list|)
end_if
begin_decl_stmt
name|bool
name|m_threadChecks
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|mutable
name|QThread
modifier|*
name|m_textLayoutThread
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_label
name|Q_SIGNALS
label|:
end_label
begin_function_decl
name|void
name|cursorPositionChanged
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|selectionChanged
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|displayTextChanged
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|textChanged
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|textEdited
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|resetInputContext
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|updateMicroFocus
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|accepted
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|editingFinished
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|updateNeeded
parameter_list|(
specifier|const
name|QRect
modifier|&
parameter_list|)
function_decl|;
end_function_decl
begin_ifdef
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
end_ifdef
begin_function_decl
name|void
name|editFocusChange
parameter_list|(
name|bool
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_label
name|protected
label|:
end_label
begin_function_decl
name|virtual
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|private
name|Q_SLOTS
range|:
name|void
name|_q_clipboardChanged
argument_list|()
decl_stmt|;
end_decl_stmt
begin_function_decl
name|void
name|_q_deleteSelected
parameter_list|()
function_decl|;
end_function_decl
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|int
name|m_keyboardScheme
decl_stmt|;
end_decl_stmt
begin_expr_stmt
unit|};
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_LINEEDIT
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QWidgetLineControl_P_H
end_comment
end_unit
