begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//Native menubars are only supported for Windows Mobile not the standard SDK/generic WinCE
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"qt_windows.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qmainwindow.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbar.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qwidgetaction.h"
end_include
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qmenu_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qmenubar_p.h>
end_include
begin_include
include|#
directive|include
file|"qmenu_wince_resource_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qlibrary.h>
end_include
begin_include
include|#
directive|include
file|<commctrl.h>
end_include
begin_if
if|#
directive|if
name|Q_OS_WINCE_WM
end_if
begin_include
include|#
directive|include
file|<windowsm.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
end_ifndef
begin_ifndef
ifndef|#
directive|ifndef
name|SHCMBF_EMPTYBAR
end_ifndef
begin_define
DECL|macro|SHCMBF_EMPTYBAR
define|#
directive|define
name|SHCMBF_EMPTYBAR
value|0x0001
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|SHCMBM_GETSUBMENU
end_ifndef
begin_define
DECL|macro|SHCMBM_GETSUBMENU
define|#
directive|define
name|SHCMBM_GETSUBMENU
value|(WM_USER + 401)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
end_ifdef
begin_define
DECL|macro|SHMBOF_NODEFAULT
define|#
directive|define
name|SHMBOF_NODEFAULT
value|0x00000001
end_define
begin_define
DECL|macro|SHMBOF_NOTIFY
define|#
directive|define
name|SHMBOF_NOTIFY
value|0x00000002
end_define
begin_define
DECL|macro|SHCMBM_OVERRIDEKEY
define|#
directive|define
name|SHCMBM_OVERRIDEKEY
value|(WM_USER + 0x193)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_smartphone
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wce.cpp
end_comment
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_pocket_pc
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wce.cpp
end_comment
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|qt_wce_menu_static_cmd_id
specifier|static
name|uint
name|qt_wce_menu_static_cmd_id
init|=
literal|200
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|nativeMenuBars
specifier|static
name|QList
argument_list|<
name|QMenuBar
modifier|*
argument_list|>
name|nativeMenuBars
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|qt_SHMENUBARINFO
struct|struct
name|qt_SHMENUBARINFO
block|{
DECL|member|cbSize
name|DWORD
name|cbSize
decl_stmt|;
DECL|member|hwndParent
name|HWND
name|hwndParent
decl_stmt|;
DECL|member|dwFlags
name|DWORD
name|dwFlags
decl_stmt|;
DECL|member|nToolBarId
name|UINT
name|nToolBarId
decl_stmt|;
DECL|member|hInstRes
name|HINSTANCE
name|hInstRes
decl_stmt|;
DECL|member|nBmpId
name|int
name|nBmpId
decl_stmt|;
DECL|member|cBmpImages
name|int
name|cBmpImages
decl_stmt|;
DECL|member|hwndMB
name|HWND
name|hwndMB
decl_stmt|;
DECL|member|clrBk
name|COLORREF
name|clrBk
decl_stmt|;
block|}
struct|;
end_struct
begin_typedef
DECL|typedef|AygCreateMenuBar
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|AygCreateMenuBar
function_decl|)
parameter_list|(
name|qt_SHMENUBARINFO
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|AygEnableSoftKey
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|AygEnableSoftKey
function_decl|)
parameter_list|(
name|HWND
parameter_list|,
name|UINT
parameter_list|,
name|BOOL
parameter_list|,
name|BOOL
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|aygResolved
specifier|static
name|bool
name|aygResolved
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrCreateMenuBar
specifier|static
name|AygCreateMenuBar
name|ptrCreateMenuBar
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ptrEnableSoftKey
specifier|static
name|AygEnableSoftKey
name|ptrEnableSoftKey
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|resolveAygLibs
specifier|static
name|void
name|resolveAygLibs
parameter_list|()
block|{
if|if
condition|(
operator|!
name|aygResolved
condition|)
block|{
name|aygResolved
operator|=
literal|true
expr_stmt|;
name|QLibrary
name|aygLib
argument_list|(
name|QLatin1String
argument_list|(
literal|"aygshell"
argument_list|)
argument_list|)
decl_stmt|;
name|ptrCreateMenuBar
operator|=
operator|(
name|AygCreateMenuBar
operator|)
name|aygLib
operator|.
name|resolve
argument_list|(
literal|"SHCreateMenuBar"
argument_list|)
expr_stmt|;
name|ptrEnableSoftKey
operator|=
operator|(
name|AygEnableSoftKey
operator|)
name|aygLib
operator|.
name|resolve
argument_list|(
literal|"SHEnableSoftkey"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qt_wce_enable_soft_key
specifier|static
name|void
name|qt_wce_enable_soft_key
parameter_list|(
name|HWND
name|handle
parameter_list|,
name|uint
name|command
parameter_list|)
block|{
name|resolveAygLibs
argument_list|()
expr_stmt|;
if|if
condition|(
name|ptrEnableSoftKey
condition|)
name|ptrEnableSoftKey
argument_list|(
name|handle
argument_list|,
name|command
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_wce_disable_soft_key
specifier|static
name|void
name|qt_wce_disable_soft_key
parameter_list|(
name|HWND
name|handle
parameter_list|,
name|uint
name|command
parameter_list|)
block|{
name|resolveAygLibs
argument_list|()
expr_stmt|;
if|if
condition|(
name|ptrEnableSoftKey
condition|)
name|ptrEnableSoftKey
argument_list|(
name|handle
argument_list|,
name|command
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_wce_delete_action_list
specifier|static
name|void
name|qt_wce_delete_action_list
parameter_list|(
name|QList
argument_list|<
name|QWceMenuAction
modifier|*
argument_list|>
modifier|*
name|list
parameter_list|)
block|{
for|for
control|(
name|QList
argument_list|<
name|QWceMenuAction
operator|*
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|list
operator|->
name|begin
argument_list|()
init|;
name|it
operator|!=
name|list
operator|->
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QWceMenuAction
modifier|*
name|action
init|=
operator|(
operator|*
name|it
operator|)
decl_stmt|;
operator|delete
name|action
expr_stmt|;
name|action
operator|=
literal|0
expr_stmt|;
block|}
name|list
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//search for first QuitRole in QMenuBar
end_comment
begin_function
DECL|function|qt_wce_get_quit_action
specifier|static
name|QAction
modifier|*
name|qt_wce_get_quit_action
parameter_list|(
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|actionItems
parameter_list|)
block|{
name|QAction
modifier|*
name|returnAction
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actionItems
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QAction
modifier|*
name|action
init|=
name|actionItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|->
name|menuRole
argument_list|()
operator|==
name|QAction
operator|::
name|QuitRole
condition|)
name|returnAction
operator|=
name|action
expr_stmt|;
elseif|else
if|if
condition|(
name|action
operator|->
name|menu
argument_list|()
condition|)
name|returnAction
operator|=
name|qt_wce_get_quit_action
argument_list|(
name|action
operator|->
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnAction
condition|)
return|return
name|returnAction
return|;
comment|//return first action found
block|}
return|return
literal|0
return|;
comment|//nothing found;
block|}
end_function
begin_function
DECL|function|qt_wce_get_quit_action
specifier|static
name|QAction
modifier|*
name|qt_wce_get_quit_action
parameter_list|(
name|QList
argument_list|<
name|QWceMenuAction
modifier|*
argument_list|>
name|actionItems
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actionItems
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|actionItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|action
operator|->
name|menuRole
argument_list|()
operator|==
name|QAction
operator|::
name|QuitRole
condition|)
return|return
name|actionItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|action
return|;
elseif|else
if|if
condition|(
name|actionItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|action
operator|->
name|menu
argument_list|()
condition|)
block|{
name|QAction
modifier|*
name|returnAction
init|=
name|qt_wce_get_quit_action
argument_list|(
name|actionItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|action
operator|->
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnAction
condition|)
return|return
name|returnAction
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qt_wce_get_module_handle
specifier|static
name|HMODULE
name|qt_wce_get_module_handle
parameter_list|()
block|{
name|HMODULE
name|module
init|=
literal|0
decl_stmt|;
comment|//handle to resources
if|if
condition|(
operator|!
operator|(
name|module
operator|=
name|GetModuleHandle
argument_list|(
literal|L"QtGui4"
argument_list|)
operator|)
condition|)
comment|//release dynamic
if|if
condition|(
operator|!
operator|(
name|module
operator|=
name|GetModuleHandle
argument_list|(
literal|L"QtGuid4"
argument_list|)
operator|)
condition|)
comment|//debug dynamic
name|module
operator|=
operator|(
name|HINSTANCE
operator|)
name|qWinAppInst
argument_list|()
expr_stmt|;
comment|//static
name|Q_ASSERT_X
argument_list|(
name|module
argument_list|,
literal|"qt_wce_get_module_handle()"
argument_list|,
literal|"cannot get handle to module?"
argument_list|)
expr_stmt|;
return|return
name|module
return|;
block|}
end_function
begin_function
DECL|function|qt_wce_change_command
specifier|static
name|void
name|qt_wce_change_command
parameter_list|(
name|HWND
name|menuHandle
parameter_list|,
name|int
name|item
parameter_list|,
name|int
name|command
parameter_list|)
block|{
name|TBBUTTONINFOA
name|tbbi
decl_stmt|;
name|memset
argument_list|(
operator|&
name|tbbi
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|tbbi
argument_list|)
argument_list|)
expr_stmt|;
name|tbbi
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|tbbi
argument_list|)
expr_stmt|;
name|tbbi
operator|.
name|dwMask
operator|=
name|TBIF_COMMAND
expr_stmt|;
name|tbbi
operator|.
name|idCommand
operator|=
name|command
expr_stmt|;
name|SendMessage
argument_list|(
name|menuHandle
argument_list|,
name|TB_SETBUTTONINFO
argument_list|,
name|item
argument_list|,
operator|(
name|LPARAM
operator|)
operator|&
name|tbbi
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_wce_rename_menu_item
specifier|static
name|void
name|qt_wce_rename_menu_item
parameter_list|(
name|HWND
name|menuHandle
parameter_list|,
name|int
name|item
parameter_list|,
specifier|const
name|QString
modifier|&
name|newText
parameter_list|)
block|{
name|TBBUTTONINFOA
name|tbbi
decl_stmt|;
name|memset
argument_list|(
operator|&
name|tbbi
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|tbbi
argument_list|)
argument_list|)
expr_stmt|;
name|tbbi
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|tbbi
argument_list|)
expr_stmt|;
name|tbbi
operator|.
name|dwMask
operator|=
name|TBIF_TEXT
expr_stmt|;
name|QString
name|text
init|=
name|newText
decl_stmt|;
name|text
operator|.
name|remove
argument_list|(
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'&'
argument_list|)
argument_list|)
expr_stmt|;
name|tbbi
operator|.
name|pszText
operator|=
operator|(
name|LPSTR
operator|)
name|text
operator|.
name|utf16
argument_list|()
expr_stmt|;
name|SendMessage
argument_list|(
name|menuHandle
argument_list|,
name|TB_SETBUTTONINFO
argument_list|,
name|item
argument_list|,
operator|(
name|LPARAM
operator|)
operator|&
name|tbbi
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_wce_create_menubar
specifier|static
name|HWND
name|qt_wce_create_menubar
parameter_list|(
name|HWND
name|parentHandle
parameter_list|,
name|HINSTANCE
name|resourceHandle
parameter_list|,
name|int
name|toolbarID
parameter_list|,
name|int
name|flags
init|=
literal|0
parameter_list|)
block|{
name|resolveAygLibs
argument_list|()
expr_stmt|;
if|if
condition|(
name|ptrCreateMenuBar
condition|)
block|{
name|qt_SHMENUBARINFO
name|mbi
decl_stmt|;
name|memset
argument_list|(
operator|&
name|mbi
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|qt_SHMENUBARINFO
argument_list|)
argument_list|)
expr_stmt|;
name|mbi
operator|.
name|cbSize
operator|=
sizeof|sizeof
argument_list|(
name|qt_SHMENUBARINFO
argument_list|)
expr_stmt|;
name|mbi
operator|.
name|hwndParent
operator|=
name|parentHandle
expr_stmt|;
name|mbi
operator|.
name|hInstRes
operator|=
name|resourceHandle
expr_stmt|;
name|mbi
operator|.
name|dwFlags
operator|=
name|flags
expr_stmt|;
name|mbi
operator|.
name|nToolBarId
operator|=
name|toolbarID
expr_stmt|;
if|if
condition|(
name|ptrCreateMenuBar
argument_list|(
operator|&
name|mbi
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
comment|// Tell the menu bar that we want to override hot key behaviour.
name|LPARAM
name|lparam
init|=
name|MAKELPARAM
argument_list|(
name|SHMBOF_NODEFAULT
operator||
name|SHMBOF_NOTIFY
argument_list|,
name|SHMBOF_NODEFAULT
operator||
name|SHMBOF_NOTIFY
argument_list|)
decl_stmt|;
name|SendMessage
argument_list|(
name|mbi
operator|.
name|hwndMB
argument_list|,
name|SHCMBM_OVERRIDEKEY
argument_list|,
name|VK_TBACK
argument_list|,
name|lparam
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|mbi
operator|.
name|hwndMB
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qt_wce_insert_action
specifier|static
name|void
name|qt_wce_insert_action
parameter_list|(
name|HMENU
name|menu
parameter_list|,
name|QWceMenuAction
modifier|*
name|action
parameter_list|)
block|{
name|Q_ASSERT_X
argument_list|(
name|menu
argument_list|,
literal|"AppendMenu"
argument_list|,
literal|"menu is 0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|->
name|action
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|int
name|flags
decl_stmt|;
name|action
operator|->
name|action
operator|->
name|isEnabled
argument_list|()
condition|?
name|flags
operator|=
name|MF_ENABLED
else|:
name|flags
operator|=
name|MF_GRAYED
expr_stmt|;
name|QString
name|text
init|=
name|action
operator|->
name|action
operator|->
name|iconText
argument_list|()
decl_stmt|;
name|text
operator|.
name|remove
argument_list|(
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'&'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|->
name|action
operator|->
name|isSeparator
argument_list|()
condition|)
block|{
name|AppendMenu
argument_list|(
name|menu
argument_list|,
name|MF_SEPARATOR
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|->
name|action
operator|->
name|menu
argument_list|()
condition|)
block|{
name|text
operator|.
name|remove
argument_list|(
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'&'
argument_list|)
argument_list|)
expr_stmt|;
name|AppendMenu
argument_list|(
name|menu
argument_list|,
name|MF_STRING
operator||
name|flags
operator||
name|MF_POPUP
argument_list|,
operator|(
name|UINT
operator|)
name|action
operator|->
name|action
operator|->
name|menu
argument_list|()
operator|->
name|wceMenu
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|text
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AppendMenu
argument_list|(
name|menu
argument_list|,
name|MF_STRING
operator||
name|flags
argument_list|,
name|action
operator|->
name|command
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|text
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|->
name|action
operator|->
name|isCheckable
argument_list|()
condition|)
if|if
condition|(
name|action
operator|->
name|action
operator|->
name|isChecked
argument_list|()
condition|)
name|CheckMenuItem
argument_list|(
name|menu
argument_list|,
name|action
operator|->
name|command
argument_list|,
name|MF_BYCOMMAND
operator||
name|MF_CHECKED
argument_list|)
expr_stmt|;
else|else
name|CheckMenuItem
argument_list|(
name|menu
argument_list|,
name|action
operator|->
name|command
argument_list|,
name|MF_BYCOMMAND
operator||
name|MF_UNCHECKED
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Removes all items from the menu without destroying the handles.
end_comment
begin_function
DECL|function|qt_wce_clear_menu
specifier|static
name|void
name|qt_wce_clear_menu
parameter_list|(
name|HMENU
name|hMenu
parameter_list|)
block|{
while|while
condition|(
name|RemoveMenu
argument_list|(
name|hMenu
argument_list|,
literal|0
argument_list|,
name|MF_BYPOSITION
argument_list|)
condition|)
empty_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      This function refreshes the native Windows CE menu. */
end_comment
begin_function
DECL|function|wceRefresh
name|void
name|QMenuBar
operator|::
name|wceRefresh
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nativeMenuBars
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|nativeMenuBars
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|d_func
argument_list|()
operator|->
name|wceRefresh
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wceRefresh
name|void
name|QMenuBarPrivate
operator|::
name|wceRefresh
parameter_list|()
block|{
name|DrawMenuBar
argument_list|(
name|wce_menubar
operator|->
name|menubarHandle
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      This function sends native Windows CE commands to Qt menus. */
end_comment
begin_function
DECL|function|wceCommands
name|QAction
modifier|*
name|QMenu
operator|::
name|wceCommands
parameter_list|(
name|uint
name|command
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|wceCommands
argument_list|(
name|command
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      This function sends native Windows CE commands to Qt menu bars     and all their child menus. */
end_comment
begin_function
DECL|function|wceCommands
name|void
name|QMenuBar
operator|::
name|wceCommands
parameter_list|(
name|uint
name|command
parameter_list|)
block|{
specifier|const
name|HWND
name|hwndActiveWindow
init|=
name|GetActiveWindow
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nativeMenuBars
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QMenuBarPrivate
modifier|*
name|nativeMenuBar
init|=
name|nativeMenuBars
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|d_func
argument_list|()
decl_stmt|;
if|if
condition|(
name|hwndActiveWindow
operator|==
name|nativeMenuBar
operator|->
name|wce_menubar
operator|->
name|parentWindowHandle
condition|)
name|nativeMenuBar
operator|->
name|wceCommands
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|wceEmitSignals
name|bool
name|QMenuBarPrivate
operator|::
name|wceEmitSignals
parameter_list|(
name|QList
argument_list|<
name|QWceMenuAction
modifier|*
argument_list|>
name|actions
parameter_list|,
name|uint
name|command
parameter_list|)
block|{
name|QAction
modifier|*
name|foundAction
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWceMenuAction
modifier|*
name|action
init|=
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|->
name|action
operator|->
name|menu
argument_list|()
condition|)
block|{
name|foundAction
operator|=
name|action
operator|->
name|action
operator|->
name|menu
argument_list|()
operator|->
name|wceCommands
argument_list|(
name|command
argument_list|)
expr_stmt|;
if|if
condition|(
name|foundAction
condition|)
break|break;
block|}
elseif|else
if|if
condition|(
name|action
operator|->
name|command
operator|==
name|command
condition|)
block|{
name|action
operator|->
name|action
operator|->
name|activate
argument_list|(
name|QAction
operator|::
name|Trigger
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|foundAction
condition|)
block|{
emit|emit
name|q_func
argument_list|()
operator|->
name|triggered
argument_list|(
name|foundAction
argument_list|)
emit|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|wceCommands
name|void
name|QMenuBarPrivate
operator|::
name|wceCommands
parameter_list|(
name|uint
name|command
parameter_list|)
block|{
if|if
condition|(
name|wceClassicMenu
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wce_menubar
operator|->
name|actionItemsClassic
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|wceEmitSignals
argument_list|(
name|wce_menubar
operator|->
name|actionItemsClassic
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|wceEmitSignals
argument_list|(
name|wce_menubar
operator|->
name|actionItems
argument_list|,
name|command
argument_list|)
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|wce_menubar
operator|->
name|leftButtonIsMenu
condition|)
block|{
comment|//check if command is on the left quick button
name|wceEmitSignals
argument_list|(
name|wce_menubar
operator|->
name|actionItemsLeftButton
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|wce_menubar
operator|->
name|leftButtonAction
operator|)
operator|&&
operator|(
name|command
operator|==
name|wce_menubar
operator|->
name|leftButtonCommand
operator|)
condition|)
block|{
emit|emit
name|q_func
argument_list|()
operator|->
name|triggered
argument_list|(
name|wce_menubar
operator|->
name|leftButtonAction
argument_list|)
emit|;
name|wce_menubar
operator|->
name|leftButtonAction
operator|->
name|activate
argument_list|(
name|QAction
operator|::
name|Trigger
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|wceCommands
name|QAction
modifier|*
name|QMenuPrivate
operator|::
name|wceCommands
parameter_list|(
name|uint
name|command
parameter_list|)
block|{
name|QAction
modifier|*
name|foundAction
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wce_menu
operator|->
name|actionItems
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|foundAction
condition|)
break|break;
name|QWceMenuAction
modifier|*
name|action
init|=
name|wce_menu
operator|->
name|actionItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|->
name|action
operator|->
name|menu
argument_list|()
condition|)
block|{
name|foundAction
operator|=
name|action
operator|->
name|action
operator|->
name|menu
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|wceCommands
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|->
name|command
operator|==
name|command
condition|)
block|{
name|activateAction
argument_list|(
name|action
operator|->
name|action
argument_list|,
name|QAction
operator|::
name|Trigger
argument_list|)
expr_stmt|;
return|return
name|action
operator|->
name|action
return|;
block|}
block|}
if|if
condition|(
name|foundAction
condition|)
emit|emit
name|q_func
argument_list|()
operator|->
name|triggered
argument_list|(
name|foundAction
argument_list|)
emit|;
return|return
name|foundAction
return|;
block|}
end_function
begin_function
DECL|function|wceCreateMenuBar
name|void
name|QMenuBarPrivate
operator|::
name|wceCreateMenuBar
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|wce_menubar
operator|=
operator|new
name|QWceMenuBarPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|wce_menubar
operator|->
name|parentWindowHandle
operator|=
name|parent
condition|?
name|QApplicationPrivate
operator|::
name|getHWNDForWidget
argument_list|(
name|parent
argument_list|)
else|:
name|QApplicationPrivate
operator|::
name|getHWNDForWidget
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|wce_menubar
operator|->
name|leftButtonAction
operator|=
name|defaultAction
expr_stmt|;
name|wce_menubar
operator|->
name|menubarHandle
operator|=
name|qt_wce_create_menubar
argument_list|(
name|wce_menubar
operator|->
name|parentWindowHandle
argument_list|,
operator|(
name|HINSTANCE
operator|)
name|qWinAppInst
argument_list|()
argument_list|,
literal|0
argument_list|,
name|SHCMBF_EMPTYBAR
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|wce_menubar
operator|->
name|menubarHandle
argument_list|,
literal|"wceCreateMenuBar"
argument_list|,
literal|"cannot create empty menu bar"
argument_list|)
expr_stmt|;
name|DrawMenuBar
argument_list|(
name|wce_menubar
operator|->
name|menubarHandle
argument_list|)
expr_stmt|;
name|nativeMenuBars
operator|.
name|append
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|wceClassicMenu
operator|=
operator|(
operator|!
name|qt_wince_is_smartphone
argument_list|()
operator|&&
operator|!
name|qt_wince_is_pocket_pc
argument_list|()
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wceDestroyMenuBar
name|void
name|QMenuBarPrivate
operator|::
name|wceDestroyMenuBar
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|nativeMenuBars
operator|.
name|indexOf
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|nativeMenuBars
operator|.
name|removeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|wce_menubar
condition|)
block|{
operator|delete
name|wce_menubar
expr_stmt|;
name|wce_menubar
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|QWceMenuBarPrivate
name|QMenuBarPrivate
operator|::
name|QWceMenuBarPrivate
operator|::
name|QWceMenuBarPrivate
parameter_list|(
name|QMenuBarPrivate
modifier|*
name|menubar
parameter_list|)
member_init_list|:
name|menubarHandle
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|menuHandle
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|leftButtonMenuHandle
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|leftButtonAction
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|leftButtonIsMenu
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|d
argument_list|(
name|menubar
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWceMenuBarPrivate
name|QMenuBarPrivate
operator|::
name|QWceMenuBarPrivate
operator|::
name|~
name|QWceMenuBarPrivate
parameter_list|()
block|{
if|if
condition|(
name|menubarHandle
condition|)
name|DestroyWindow
argument_list|(
name|menubarHandle
argument_list|)
expr_stmt|;
name|qt_wce_delete_action_list
argument_list|(
operator|&
name|actionItems
argument_list|)
expr_stmt|;
name|qt_wce_delete_action_list
argument_list|(
operator|&
name|actionItemsLeftButton
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actionItemsClassic
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|!
name|actionItemsClassic
operator|.
name|value
argument_list|(
name|i
argument_list|)
operator|.
name|empty
argument_list|()
condition|)
name|qt_wce_delete_action_list
argument_list|(
operator|&
name|actionItemsClassic
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|actionItemsClassic
operator|.
name|clear
argument_list|()
expr_stmt|;
name|menubarHandle
operator|=
literal|0
expr_stmt|;
name|menuHandle
operator|=
literal|0
expr_stmt|;
name|leftButtonMenuHandle
operator|=
literal|0
expr_stmt|;
name|leftButtonCommand
operator|=
literal|0
expr_stmt|;
name|QMenuBar
operator|::
name|wceRefresh
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_constructor
DECL|function|QWceMenuPrivate
name|QMenuPrivate
operator|::
name|QWceMenuPrivate
operator|::
name|QWceMenuPrivate
parameter_list|()
member_init_list|:
name|menuHandle
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~QWceMenuPrivate
name|QMenuPrivate
operator|::
name|QWceMenuPrivate
operator|::
name|~
name|QWceMenuPrivate
parameter_list|()
block|{
name|qt_wce_delete_action_list
argument_list|(
operator|&
name|actionItems
argument_list|)
expr_stmt|;
if|if
condition|(
name|menuHandle
condition|)
name|DestroyMenu
argument_list|(
name|menuHandle
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|addAction
name|void
name|QMenuPrivate
operator|::
name|QWceMenuPrivate
operator|::
name|addAction
parameter_list|(
name|QAction
modifier|*
name|a
parameter_list|,
name|QWceMenuAction
modifier|*
name|before
parameter_list|)
block|{
name|QWceMenuAction
modifier|*
name|action
init|=
operator|new
name|QWceMenuAction
decl_stmt|;
name|action
operator|->
name|action
operator|=
name|a
expr_stmt|;
name|action
operator|->
name|command
operator|=
name|qt_wce_menu_static_cmd_id
operator|++
expr_stmt|;
name|addAction
argument_list|(
name|action
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addAction
name|void
name|QMenuPrivate
operator|::
name|QWceMenuPrivate
operator|::
name|addAction
parameter_list|(
name|QWceMenuAction
modifier|*
name|action
parameter_list|,
name|QWceMenuAction
modifier|*
name|before
parameter_list|)
block|{
if|if
condition|(
operator|!
name|action
condition|)
return|return;
name|int
name|before_index
init|=
name|actionItems
operator|.
name|indexOf
argument_list|(
name|before
argument_list|)
decl_stmt|;
if|if
condition|(
name|before_index
operator|<
literal|0
condition|)
block|{
name|before
operator|=
literal|0
expr_stmt|;
name|before_index
operator|=
name|actionItems
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|actionItems
operator|.
name|insert
argument_list|(
name|before_index
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|rebuild
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      This function will return the HMENU used to create the native     Windows CE menu bar bindings. */
end_comment
begin_function
DECL|function|wceMenu
name|HMENU
name|QMenu
operator|::
name|wceMenu
parameter_list|()
block|{
return|return
name|d_func
argument_list|()
operator|->
name|wceMenu
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|wceMenu
name|HMENU
name|QMenuPrivate
operator|::
name|wceMenu
parameter_list|()
block|{
if|if
condition|(
operator|!
name|wce_menu
condition|)
name|wce_menu
operator|=
operator|new
name|QWceMenuPrivate
expr_stmt|;
if|if
condition|(
operator|!
name|wce_menu
operator|->
name|menuHandle
condition|)
name|wce_menu
operator|->
name|rebuild
argument_list|()
expr_stmt|;
return|return
name|wce_menu
operator|->
name|menuHandle
return|;
block|}
end_function
begin_function
DECL|function|rebuild
name|void
name|QMenuPrivate
operator|::
name|QWceMenuPrivate
operator|::
name|rebuild
parameter_list|()
block|{
if|if
condition|(
operator|!
name|menuHandle
condition|)
name|menuHandle
operator|=
name|CreatePopupMenu
argument_list|()
expr_stmt|;
else|else
name|qt_wce_clear_menu
argument_list|(
name|menuHandle
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actionItems
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWceMenuAction
modifier|*
name|action
init|=
name|actionItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|action
operator|->
name|menuHandle
operator|=
name|menuHandle
expr_stmt|;
name|qt_wce_insert_action
argument_list|(
name|menuHandle
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
name|QMenuBar
operator|::
name|wceRefresh
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|syncAction
name|void
name|QMenuPrivate
operator|::
name|QWceMenuPrivate
operator|::
name|syncAction
parameter_list|(
name|QWceMenuAction
modifier|*
parameter_list|)
block|{
name|rebuild
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeAction
name|void
name|QMenuPrivate
operator|::
name|QWceMenuPrivate
operator|::
name|removeAction
parameter_list|(
name|QWceMenuAction
modifier|*
name|action
parameter_list|)
block|{
name|actionItems
operator|.
name|removeAll
argument_list|(
name|action
argument_list|)
expr_stmt|;
operator|delete
name|action
expr_stmt|;
name|rebuild
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addAction
name|void
name|QMenuBarPrivate
operator|::
name|QWceMenuBarPrivate
operator|::
name|addAction
parameter_list|(
name|QAction
modifier|*
name|a
parameter_list|,
name|QAction
modifier|*
name|before
parameter_list|)
block|{
name|QWceMenuAction
modifier|*
name|action
init|=
operator|new
name|QWceMenuAction
decl_stmt|;
name|action
operator|->
name|action
operator|=
name|a
expr_stmt|;
name|action
operator|->
name|command
operator|=
name|qt_wce_menu_static_cmd_id
operator|++
expr_stmt|;
name|addAction
argument_list|(
name|action
argument_list|,
name|findAction
argument_list|(
name|before
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addAction
name|void
name|QMenuBarPrivate
operator|::
name|QWceMenuBarPrivate
operator|::
name|addAction
parameter_list|(
name|QWceMenuAction
modifier|*
name|action
parameter_list|,
name|QWceMenuAction
modifier|*
name|before
parameter_list|)
block|{
if|if
condition|(
operator|!
name|action
condition|)
return|return;
name|int
name|before_index
init|=
name|actionItems
operator|.
name|indexOf
argument_list|(
name|before
argument_list|)
decl_stmt|;
if|if
condition|(
name|before_index
operator|<
literal|0
condition|)
block|{
name|before
operator|=
literal|0
expr_stmt|;
name|before_index
operator|=
name|actionItems
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|actionItems
operator|.
name|insert
argument_list|(
name|before_index
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|rebuild
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|syncAction
name|void
name|QMenuBarPrivate
operator|::
name|QWceMenuBarPrivate
operator|::
name|syncAction
parameter_list|(
name|QWceMenuAction
modifier|*
parameter_list|)
block|{
name|QMenuBar
operator|::
name|wceRefresh
argument_list|()
expr_stmt|;
name|rebuild
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeAction
name|void
name|QMenuBarPrivate
operator|::
name|QWceMenuBarPrivate
operator|::
name|removeAction
parameter_list|(
name|QWceMenuAction
modifier|*
name|action
parameter_list|)
block|{
name|actionItems
operator|.
name|removeAll
argument_list|(
name|action
argument_list|)
expr_stmt|;
operator|delete
name|action
expr_stmt|;
name|rebuild
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_updateDefaultAction
name|void
name|QMenuBarPrivate
operator|::
name|_q_updateDefaultAction
parameter_list|()
block|{
if|if
condition|(
name|wce_menubar
condition|)
name|wce_menubar
operator|->
name|rebuild
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rebuild
name|void
name|QMenuBarPrivate
operator|::
name|QWceMenuBarPrivate
operator|::
name|rebuild
parameter_list|()
block|{
name|d
operator|->
name|q_func
argument_list|()
operator|->
name|resize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|parentWindowHandle
operator|=
name|d
operator|->
name|q_func
argument_list|()
operator|->
name|parentWidget
argument_list|()
condition|?
name|QApplicationPrivate
operator|::
name|getHWNDForWidget
argument_list|(
name|d
operator|->
name|q_func
argument_list|()
operator|->
name|parentWidget
argument_list|()
argument_list|)
else|:
name|QApplicationPrivate
operator|::
name|getHWNDForWidget
argument_list|(
name|d
operator|->
name|q_func
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|wceClassicMenu
condition|)
block|{
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|actions
init|=
name|d
operator|->
name|actions
decl_stmt|;
name|int
name|maxEntries
decl_stmt|;
name|int
name|resourceHandle
decl_stmt|;
if|if
condition|(
name|actions
operator|.
name|size
argument_list|()
operator|<
literal|5
condition|)
block|{
name|maxEntries
operator|=
literal|4
expr_stmt|;
name|resourceHandle
operator|=
name|IDR_MAIN_MENU3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|actions
operator|.
name|size
argument_list|()
operator|<
literal|7
condition|)
block|{
name|maxEntries
operator|=
literal|6
expr_stmt|;
name|resourceHandle
operator|=
name|IDR_MAIN_MENU4
expr_stmt|;
block|}
else|else
block|{
name|maxEntries
operator|=
literal|8
expr_stmt|;
name|resourceHandle
operator|=
name|IDR_MAIN_MENU5
expr_stmt|;
block|}
name|Q_ASSERT_X
argument_list|(
name|menubarHandle
argument_list|,
literal|"rebuild !created"
argument_list|,
literal|"menubar already deleted"
argument_list|)
expr_stmt|;
name|qt_wce_clear_menu
argument_list|(
name|menuHandle
argument_list|)
expr_stmt|;
name|DestroyWindow
argument_list|(
name|menubarHandle
argument_list|)
expr_stmt|;
name|menubarHandle
operator|=
name|qt_wce_create_menubar
argument_list|(
name|parentWindowHandle
argument_list|,
name|qt_wce_get_module_handle
argument_list|()
argument_list|,
name|resourceHandle
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|menubarHandle
argument_list|,
literal|"rebuild classic menu"
argument_list|,
literal|"cannot create menubar from resource"
argument_list|)
expr_stmt|;
name|DrawMenuBar
argument_list|(
name|menubarHandle
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|menu_ids
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|item_ids
decl_stmt|;
name|menu_ids
operator|<<
name|IDM_MENU1
operator|<<
name|IDM_MENU2
operator|<<
name|IDM_MENU3
operator|<<
name|IDM_MENU4
operator|<<
name|IDM_MENU5
operator|<<
name|IDM_MENU6
operator|<<
name|IDM_MENU7
operator|<<
name|IDM_MENU8
expr_stmt|;
name|item_ids
operator|<<
name|IDM_ITEM1
operator|<<
name|IDM_ITEM2
operator|<<
name|IDM_ITEM3
operator|<<
name|IDM_ITEM4
operator|<<
name|IDM_ITEM5
operator|<<
name|IDM_ITEM6
operator|<<
name|IDM_ITEM7
operator|<<
name|IDM_ITEM8
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actionItemsClassic
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|!
name|actionItemsClassic
operator|.
name|value
argument_list|(
name|i
argument_list|)
operator|.
name|empty
argument_list|()
condition|)
name|qt_wce_delete_action_list
argument_list|(
operator|&
name|actionItemsClassic
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|actionItemsClassic
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qt_wce_rename_menu_item
argument_list|(
name|menubarHandle
argument_list|,
name|menu_ids
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|subActions
init|=
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
decl_stmt|;
name|HMENU
name|subMenuHandle
init|=
operator|(
name|HMENU
operator|)
name|SendMessage
argument_list|(
name|menubarHandle
argument_list|,
name|SHCMBM_GETSUBMENU
argument_list|,
literal|0
argument_list|,
name|menu_ids
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|DeleteMenu
argument_list|(
name|subMenuHandle
argument_list|,
name|item_ids
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|MF_BYCOMMAND
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|subActions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
name|QList
argument_list|<
name|QWceMenuAction
modifier|*
argument_list|>
name|list
decl_stmt|;
name|actionItemsClassic
operator|.
name|append
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|QWceMenuAction
modifier|*
name|action
init|=
operator|new
name|QWceMenuAction
decl_stmt|;
name|action
operator|->
name|action
operator|=
name|subActions
operator|.
name|at
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|action
operator|->
name|command
operator|=
name|qt_wce_menu_static_cmd_id
operator|++
expr_stmt|;
name|action
operator|->
name|menuHandle
operator|=
name|subMenuHandle
expr_stmt|;
name|actionItemsClassic
operator|.
name|last
argument_list|()
operator|.
name|append
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|qt_wce_insert_action
argument_list|(
name|subMenuHandle
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|actions
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|maxEntries
condition|;
operator|++
name|i
control|)
block|{
name|qt_wce_rename_menu_item
argument_list|(
name|menubarHandle
argument_list|,
name|menu_ids
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|qt_wce_disable_soft_key
argument_list|(
name|menubarHandle
argument_list|,
name|menu_ids
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|leftButtonAction
operator|=
name|d
operator|->
name|defaultAction
expr_stmt|;
if|if
condition|(
operator|!
name|leftButtonAction
condition|)
name|leftButtonAction
operator|=
name|qt_wce_get_quit_action
argument_list|(
name|actionItems
argument_list|)
expr_stmt|;
name|leftButtonIsMenu
operator|=
operator|(
name|leftButtonAction
operator|&&
name|leftButtonAction
operator|->
name|menu
argument_list|()
operator|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|menubarHandle
argument_list|,
literal|"rebuild !created"
argument_list|,
literal|"menubar already deleted"
argument_list|)
expr_stmt|;
name|qt_wce_clear_menu
argument_list|(
name|menuHandle
argument_list|)
expr_stmt|;
name|DestroyWindow
argument_list|(
name|menubarHandle
argument_list|)
expr_stmt|;
if|if
condition|(
name|leftButtonIsMenu
condition|)
block|{
name|menubarHandle
operator|=
name|qt_wce_create_menubar
argument_list|(
name|parentWindowHandle
argument_list|,
name|qt_wce_get_module_handle
argument_list|()
argument_list|,
name|IDR_MAIN_MENU2
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|menubarHandle
argument_list|,
literal|"rebuild !created left menubar"
argument_list|,
literal|"cannot create menubar from resource"
argument_list|)
expr_stmt|;
name|menuHandle
operator|=
operator|(
name|HMENU
operator|)
name|SendMessage
argument_list|(
name|menubarHandle
argument_list|,
name|SHCMBM_GETSUBMENU
argument_list|,
literal|0
argument_list|,
name|IDM_MENU
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|menuHandle
argument_list|,
literal|"rebuild !created"
argument_list|,
literal|"IDM_MENU not found - invalid resource?"
argument_list|)
expr_stmt|;
name|DeleteMenu
argument_list|(
name|menuHandle
argument_list|,
name|IDM_ABOUT
argument_list|,
name|MF_BYCOMMAND
argument_list|)
expr_stmt|;
name|leftButtonMenuHandle
operator|=
operator|(
name|HMENU
operator|)
name|SendMessage
argument_list|(
name|menubarHandle
argument_list|,
name|SHCMBM_GETSUBMENU
argument_list|,
literal|0
argument_list|,
name|IDM_LEFTMENU
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|leftButtonMenuHandle
argument_list|,
literal|"rebuild !created"
argument_list|,
literal|"IDM_LEFTMENU not found - invalid resource?"
argument_list|)
expr_stmt|;
name|DeleteMenu
argument_list|(
name|leftButtonMenuHandle
argument_list|,
name|IDM_VIEW
argument_list|,
name|MF_BYCOMMAND
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|menubarHandle
operator|=
name|qt_wce_create_menubar
argument_list|(
name|parentWindowHandle
argument_list|,
name|qt_wce_get_module_handle
argument_list|()
argument_list|,
name|IDR_MAIN_MENU
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|menubarHandle
argument_list|,
literal|"rebuild !created no left menubar"
argument_list|,
literal|"cannot create menubar from resource"
argument_list|)
expr_stmt|;
name|menuHandle
operator|=
operator|(
name|HMENU
operator|)
name|SendMessage
argument_list|(
name|menubarHandle
argument_list|,
name|SHCMBM_GETSUBMENU
argument_list|,
literal|0
argument_list|,
name|IDM_MENU
argument_list|)
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|menuHandle
argument_list|,
literal|"rebuild !created"
argument_list|,
literal|"IDM_MENU not found - invalid resource?"
argument_list|)
expr_stmt|;
name|DeleteMenu
argument_list|(
name|menuHandle
argument_list|,
name|IDM_ABOUT
argument_list|,
name|MF_BYCOMMAND
argument_list|)
expr_stmt|;
name|leftButtonMenuHandle
operator|=
literal|0
expr_stmt|;
name|leftButtonCommand
operator|=
name|qt_wce_menu_static_cmd_id
operator|++
expr_stmt|;
name|qt_wce_change_command
argument_list|(
name|menubarHandle
argument_list|,
name|IDM_EXIT
argument_list|,
name|leftButtonCommand
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actionItems
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|qt_wce_rename_menu_item
argument_list|(
name|menubarHandle
argument_list|,
name|IDM_MENU
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|qt_wce_disable_soft_key
argument_list|(
name|menubarHandle
argument_list|,
name|IDM_MENU
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actionItems
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWceMenuAction
modifier|*
name|action
init|=
name|actionItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|action
operator|->
name|menuHandle
operator|=
name|menuHandle
expr_stmt|;
name|qt_wce_insert_action
argument_list|(
name|menuHandle
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|leftButtonIsMenu
condition|)
block|{
if|if
condition|(
name|leftButtonAction
condition|)
block|{
name|qt_wce_rename_menu_item
argument_list|(
name|menubarHandle
argument_list|,
name|leftButtonCommand
argument_list|,
name|leftButtonAction
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|qt_wce_enable_soft_key
argument_list|(
name|menubarHandle
argument_list|,
name|leftButtonCommand
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qt_wce_rename_menu_item
argument_list|(
name|menubarHandle
argument_list|,
name|leftButtonCommand
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|qt_wce_disable_soft_key
argument_list|(
name|menubarHandle
argument_list|,
name|leftButtonCommand
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qt_wce_rename_menu_item
argument_list|(
name|menubarHandle
argument_list|,
name|IDM_LEFTMENU
argument_list|,
name|leftButtonAction
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|actions
init|=
name|leftButtonAction
operator|->
name|menu
argument_list|()
operator|->
name|actions
argument_list|()
decl_stmt|;
name|qt_wce_delete_action_list
argument_list|(
operator|&
name|actionItemsLeftButton
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QWceMenuAction
modifier|*
name|action
init|=
operator|new
name|QWceMenuAction
decl_stmt|;
name|action
operator|->
name|action
operator|=
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|action
operator|->
name|command
operator|=
name|qt_wce_menu_static_cmd_id
operator|++
expr_stmt|;
name|action
operator|->
name|menuHandle
operator|=
name|leftButtonMenuHandle
expr_stmt|;
name|actionItemsLeftButton
operator|.
name|append
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|qt_wce_insert_action
argument_list|(
name|leftButtonMenuHandle
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|DrawMenuBar
argument_list|(
name|menubarHandle
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_MENUBAR
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_OS_WINCE
end_comment
end_unit
