begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qstatusbar.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STATUSBAR
end_ifndef
begin_include
include|#
directive|include
file|"qlist.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qlayout.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|"qtimer.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"qsizegrip.h"
end_include
begin_include
include|#
directive|include
file|"qmainwindow.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qaccessible.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<private/qlayoutengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QStatusBarPrivate
class|class
name|QStatusBarPrivate
super|:
specifier|public
name|QWidgetPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QStatusBar
parameter_list|)
specifier|public
private|:
DECL|function|QStatusBarPrivate
name|QStatusBarPrivate
parameter_list|()
block|{}
DECL|struct|SBItem
struct|struct
name|SBItem
block|{
DECL|function|SBItem
name|SBItem
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|stretch
parameter_list|,
name|bool
name|permanent
parameter_list|)
member_init_list|:
name|s
argument_list|(
name|stretch
argument_list|)
member_init_list|,
name|w
argument_list|(
name|widget
argument_list|)
member_init_list|,
name|p
argument_list|(
name|permanent
argument_list|)
block|{}
DECL|member|s
name|int
name|s
decl_stmt|;
DECL|member|w
name|QWidget
modifier|*
name|w
decl_stmt|;
DECL|member|p
name|bool
name|p
decl_stmt|;
block|}
struct|;
DECL|member|items
name|QList
argument_list|<
name|SBItem
modifier|*
argument_list|>
name|items
decl_stmt|;
DECL|member|tempItem
name|QString
name|tempItem
decl_stmt|;
DECL|member|box
name|QBoxLayout
modifier|*
name|box
decl_stmt|;
DECL|member|timer
name|QTimer
modifier|*
name|timer
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
DECL|member|resizer
name|QSizeGrip
modifier|*
name|resizer
decl_stmt|;
DECL|member|showSizeGrip
name|bool
name|showSizeGrip
decl_stmt|;
endif|#
directive|endif
DECL|member|savedStrut
name|int
name|savedStrut
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
DECL|member|dragStart
name|QPoint
name|dragStart
decl_stmt|;
endif|#
directive|endif
DECL|function|indexToLastNonPermanentWidget
name|int
name|indexToLastNonPermanentWidget
parameter_list|()
specifier|const
block|{
name|int
name|i
init|=
name|items
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
for|for
control|(
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|SBItem
modifier|*
name|item
init|=
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|item
operator|&&
name|item
operator|->
name|p
operator|)
condition|)
break|break;
block|}
return|return
name|i
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
DECL|function|tryToShowSizeGrip
name|void
name|tryToShowSizeGrip
parameter_list|()
block|{
if|if
condition|(
operator|!
name|showSizeGrip
condition|)
return|return;
name|showSizeGrip
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|resizer
operator|||
name|resizer
operator|->
name|isVisible
argument_list|()
condition|)
return|return;
name|resizer
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|resizer
argument_list|,
literal|"_q_showIfNotHidden"
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|resizer
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QRect
name|messageRect
parameter_list|()
specifier|const
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|messageRect
name|QRect
name|QStatusBarPrivate
operator|::
name|messageRect
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QStatusBar
argument_list|)
expr_stmt|;
name|bool
name|rtl
init|=
name|q
operator|->
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
decl_stmt|;
name|int
name|left
init|=
literal|6
decl_stmt|;
name|int
name|right
init|=
name|q
operator|->
name|width
argument_list|()
operator|-
literal|12
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
if|if
condition|(
name|resizer
operator|&&
name|resizer
operator|->
name|isVisible
argument_list|()
condition|)
block|{
if|if
condition|(
name|rtl
condition|)
name|left
operator|=
name|resizer
operator|->
name|x
argument_list|()
operator|+
name|resizer
operator|->
name|width
argument_list|()
expr_stmt|;
else|else
name|right
operator|=
name|resizer
operator|->
name|x
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QStatusBarPrivate
operator|::
name|SBItem
modifier|*
name|item
init|=
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
break|break;
if|if
condition|(
name|item
operator|->
name|p
operator|&&
name|item
operator|->
name|w
operator|->
name|isVisible
argument_list|()
condition|)
block|{
if|if
condition|(
name|item
operator|->
name|p
condition|)
block|{
if|if
condition|(
name|rtl
condition|)
name|left
operator|=
name|qMax
argument_list|(
name|left
argument_list|,
name|item
operator|->
name|w
operator|->
name|x
argument_list|()
operator|+
name|item
operator|->
name|w
operator|->
name|width
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
else|else
name|right
operator|=
name|qMin
argument_list|(
name|right
argument_list|,
name|item
operator|->
name|w
operator|->
name|x
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
return|return
name|QRect
argument_list|(
name|left
argument_list|,
literal|0
argument_list|,
name|right
operator|-
name|left
argument_list|,
name|q
operator|->
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \class QStatusBar     \brief The QStatusBar class provides a horizontal bar suitable for     presenting status information.      \ingroup mainwindow-classes     \ingroup helpsystem     \inmodule QtWidgets      Each status indicator falls into one of three categories:      \list     \li \e Temporary - briefly occupies most of the status bar. Used         to explain tool tip texts or menu entries, for example.     \li \e Normal - occupies part of the status bar and may be hidden         by temporary messages. Used to display the page and line         number in a word processor, for example.     \li \e Permanent - is never hidden. Used for important mode         indications, for example, some applications put a Caps Lock         indicator in the status bar.     \endlist      QStatusBar lets you display all three types of indicators.      Typically, a request for the status bar functionality occurs in     relation to a QMainWindow object. QMainWindow provides a main     application window, with a menu bar, tool bars, dock widgets \e     and a status bar around a large central widget. The status bar can     be retrieved using the QMainWindow::statusBar() function, and     replaced using the QMainWindow::setStatusBar() function.      Use the showMessage() slot to display a \e temporary message:      \snippet mainwindows/dockwidgets/mainwindow.cpp 8      To remove a temporary message, use the clearMessage() slot, or set     a time limit when calling showMessage(). For example:      \snippet mainwindows/dockwidgets/mainwindow.cpp 3      Use the currentMessage() function to retrieve the temporary     message currently shown. The QStatusBar class also provide the     messageChanged() signal which is emitted whenever the temporary     status message changes.      \target permanent message     \e Normal and \e Permanent messages are displayed by creating a     small widget (QLabel, QProgressBar or even QToolButton) and then     adding it to the status bar using the addWidget() or the     addPermanentWidget() function. Use the removeWidget() function to     remove such messages from the status bar.      \snippet code/src_gui_widgets_qstatusbar.cpp 0      By default QStatusBar provides a QSizeGrip in the lower-right     corner. You can disable it using the setSizeGripEnabled()     function. Use the isSizeGripEnabled() function to determine the     current status of the size grip.      \image fusion-statusbar-sizegrip.png A status bar shown in the Fusion widget style      \sa QMainWindow, QStatusTipEvent, {fowler}{GUI Design Handbook:     Status Bar}, {Application Example} */
end_comment
begin_comment
comment|/*!     Constructs a status bar with a size grip and the given \a parent.      \sa setSizeGripEnabled() */
end_comment
begin_constructor
DECL|function|QStatusBar
name|QStatusBar
operator|::
name|QStatusBar
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QStatusBarPrivate
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QStatusBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|box
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|timer
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
name|d
operator|->
name|resizer
operator|=
literal|0
expr_stmt|;
name|setSizeGripEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// causes reformat()
else|#
directive|else
name|reformat
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_comment
comment|/*!     Destroys this status bar and frees any allocated resources and     child widgets. */
end_comment
begin_destructor
DECL|function|~QStatusBar
name|QStatusBar
operator|::
name|~
name|QStatusBar
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QStatusBar
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|d
operator|->
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
operator|delete
name|d
operator|->
name|items
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     Adds the given \a widget to this status bar, reparenting the     widget if it isn't already a child of this QStatusBar object. The     \a stretch parameter is used to compute a suitable size for the     given \a widget as the status bar grows and shrinks. The default     stretch factor is 0, i.e giving the widget a minimum of space.      The widget is located to the far left of the first permanent     widget (see addPermanentWidget()) and may be obscured by temporary     messages.      \sa insertWidget(), removeWidget(), addPermanentWidget() */
end_comment
begin_function
DECL|function|addWidget
name|void
name|QStatusBar
operator|::
name|addWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return;
name|insertWidget
argument_list|(
name|d_func
argument_list|()
operator|->
name|indexToLastNonPermanentWidget
argument_list|()
operator|+
literal|1
argument_list|,
name|widget
argument_list|,
name|stretch
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Inserts the given \a widget at the given \a index to this status bar,     reparenting the widget if it isn't already a child of this     QStatusBar object. If \a index is out of range, the widget is appended     (in which case it is the actual index of the widget that is returned).      The \a stretch parameter is used to compute a suitable size for     the given \a widget as the status bar grows and shrinks. The     default stretch factor is 0, i.e giving the widget a minimum of     space.      The widget is located to the far left of the first permanent     widget (see addPermanentWidget()) and may be obscured by temporary     messages.      \sa addWidget(), removeWidget(), addPermanentWidget() */
end_comment
begin_function
DECL|function|insertWidget
name|int
name|QStatusBar
operator|::
name|insertWidget
parameter_list|(
name|int
name|index
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return
operator|-
literal|1
return|;
name|Q_D
argument_list|(
name|QStatusBar
argument_list|)
expr_stmt|;
name|QStatusBarPrivate
operator|::
name|SBItem
modifier|*
name|item
init|=
operator|new
name|QStatusBarPrivate
operator|::
name|SBItem
argument_list|(
name|widget
argument_list|,
name|stretch
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|d
operator|->
name|indexToLastNonPermanentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
argument_list|<
literal|0
operator|||
name|index
argument_list|>
name|d
operator|->
name|items
operator|.
name|size
argument_list|()
operator|||
operator|(
name|idx
operator|>=
literal|0
operator|&&
name|index
operator|>
name|idx
operator|+
literal|1
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QStatusBar::insertWidget: Index out of range (%d), appending widget"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|index
operator|=
name|idx
operator|+
literal|1
expr_stmt|;
block|}
name|d
operator|->
name|items
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|tempItem
operator|.
name|isEmpty
argument_list|()
condition|)
name|widget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|reformat
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|widget
operator|->
name|isHidden
argument_list|()
operator|||
operator|!
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
condition|)
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
return|return
name|index
return|;
block|}
end_function
begin_comment
comment|/*!     Adds the given \a widget permanently to this status bar,     reparenting the widget if it isn't already a child of this     QStatusBar object. The \a stretch parameter is used to compute a     suitable size for the given \a widget as the status bar grows and     shrinks. The default stretch factor is 0, i.e giving the widget a     minimum of space.      Permanently means that the widget may not be obscured by temporary     messages. It is is located at the far right of the status bar.      \sa insertPermanentWidget(), removeWidget(), addWidget() */
end_comment
begin_function
DECL|function|addPermanentWidget
name|void
name|QStatusBar
operator|::
name|addPermanentWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return;
name|insertPermanentWidget
argument_list|(
name|d_func
argument_list|()
operator|->
name|items
operator|.
name|size
argument_list|()
argument_list|,
name|widget
argument_list|,
name|stretch
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Inserts the given \a widget at the given \a index permanently to this status bar,     reparenting the widget if it isn't already a child of this     QStatusBar object. If \a index is out of range, the widget is appended     (in which case it is the actual index of the widget that is returned).      The \a stretch parameter is used to compute a     suitable size for the given \a widget as the status bar grows and     shrinks. The default stretch factor is 0, i.e giving the widget a     minimum of space.      Permanently means that the widget may not be obscured by temporary     messages. It is is located at the far right of the status bar.      \sa addPermanentWidget(), removeWidget(), addWidget() */
end_comment
begin_function
DECL|function|insertPermanentWidget
name|int
name|QStatusBar
operator|::
name|insertPermanentWidget
parameter_list|(
name|int
name|index
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
name|int
name|stretch
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return
operator|-
literal|1
return|;
name|Q_D
argument_list|(
name|QStatusBar
argument_list|)
expr_stmt|;
name|QStatusBarPrivate
operator|::
name|SBItem
modifier|*
name|item
init|=
operator|new
name|QStatusBarPrivate
operator|::
name|SBItem
argument_list|(
name|widget
argument_list|,
name|stretch
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|d
operator|->
name|indexToLastNonPermanentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
argument_list|<
literal|0
operator|||
name|index
argument_list|>
name|d
operator|->
name|items
operator|.
name|size
argument_list|()
operator|||
operator|(
name|idx
operator|>=
literal|0
operator|&&
name|index
operator|<=
name|idx
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QStatusBar::insertPermanentWidget: Index out of range (%d), appending widget"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|index
operator|=
name|d
operator|->
name|items
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|items
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|reformat
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|widget
operator|->
name|isHidden
argument_list|()
operator|||
operator|!
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
condition|)
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
return|return
name|index
return|;
block|}
end_function
begin_comment
comment|/*!     Removes the specified \a widget from the status bar.      \note This function does not delete the widget but \e hides it.     To add the widget again, you must call both the addWidget() and     show() functions.      \sa addWidget(), addPermanentWidget(), clearMessage() */
end_comment
begin_function
DECL|function|removeWidget
name|void
name|QStatusBar
operator|::
name|removeWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
operator|!
name|widget
condition|)
return|return;
name|Q_D
argument_list|(
name|QStatusBar
argument_list|)
expr_stmt|;
name|bool
name|found
init|=
literal|false
decl_stmt|;
name|QStatusBarPrivate
operator|::
name|SBItem
modifier|*
name|item
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|item
operator|=
name|d
operator|->
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
break|break;
if|if
condition|(
name|item
operator|->
name|w
operator|==
name|widget
condition|)
block|{
name|d
operator|->
name|items
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|item
operator|->
name|w
operator|->
name|hide
argument_list|()
expr_stmt|;
operator|delete
name|item
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
name|reformat
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_DEBUG
argument_list|)
else|else
name|qDebug
argument_list|(
literal|"QStatusBar::removeWidget(): Widget not found."
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \property QStatusBar::sizeGripEnabled      \brief whether the QSizeGrip in the bottom-right corner of the     status bar is enabled      The size grip is enabled by default. */
end_comment
begin_function
DECL|function|isSizeGripEnabled
name|bool
name|QStatusBar
operator|::
name|isSizeGripEnabled
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|QT_NO_SIZEGRIP
return|return
literal|false
return|;
else|#
directive|else
name|Q_D
argument_list|(
specifier|const
name|QStatusBar
argument_list|)
expr_stmt|;
return|return
operator|!
operator|!
name|d
operator|->
name|resizer
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setSizeGripEnabled
name|void
name|QStatusBar
operator|::
name|setSizeGripEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_SIZEGRIP
name|Q_UNUSED
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_D
argument_list|(
name|QStatusBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|enabled
operator|!=
operator|!
name|d
operator|->
name|resizer
condition|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|d
operator|->
name|resizer
operator|=
operator|new
name|QSizeGrip
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|resizer
operator|->
name|hide
argument_list|()
expr_stmt|;
name|d
operator|->
name|resizer
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|showSizeGrip
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
operator|delete
name|d
operator|->
name|resizer
expr_stmt|;
name|d
operator|->
name|resizer
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|showSizeGrip
operator|=
literal|false
expr_stmt|;
block|}
name|reformat
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|resizer
operator|&&
name|isVisible
argument_list|()
condition|)
name|d
operator|->
name|tryToShowSizeGrip
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Changes the status bar's appearance to account for item changes.      Special subclasses may need this function, but geometry management     will usually take care of any necessary rearrangements. */
end_comment
begin_function
DECL|function|reformat
name|void
name|QStatusBar
operator|::
name|reformat
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QStatusBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|box
condition|)
operator|delete
name|d
operator|->
name|box
expr_stmt|;
name|QBoxLayout
modifier|*
name|vbox
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
if|if
condition|(
name|d
operator|->
name|resizer
condition|)
block|{
name|d
operator|->
name|box
operator|=
operator|new
name|QHBoxLayout
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|box
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|vbox
operator|=
operator|new
name|QVBoxLayout
expr_stmt|;
name|d
operator|->
name|box
operator|->
name|addLayout
argument_list|(
name|vbox
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|vbox
operator|=
name|d
operator|->
name|box
operator|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|box
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|vbox
operator|->
name|addSpacing
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QBoxLayout
modifier|*
name|l
init|=
operator|new
name|QHBoxLayout
decl_stmt|;
name|vbox
operator|->
name|addLayout
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|l
operator|->
name|addSpacing
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|l
operator|->
name|setSpacing
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|int
name|maxH
init|=
name|fontMetrics
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|i
decl_stmt|;
name|QStatusBarPrivate
operator|::
name|SBItem
modifier|*
name|item
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|item
operator|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|item
operator|=
name|d
operator|->
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
operator|||
name|item
operator|->
name|p
condition|)
break|break;
name|l
operator|->
name|addWidget
argument_list|(
name|item
operator|->
name|w
argument_list|,
name|item
operator|->
name|s
argument_list|)
expr_stmt|;
name|int
name|itemH
init|=
name|qMin
argument_list|(
name|qSmartMinSize
argument_list|(
name|item
operator|->
name|w
argument_list|)
operator|.
name|height
argument_list|()
argument_list|,
name|item
operator|->
name|w
operator|->
name|maximumHeight
argument_list|()
argument_list|)
decl_stmt|;
name|maxH
operator|=
name|qMax
argument_list|(
name|maxH
argument_list|,
name|itemH
argument_list|)
expr_stmt|;
block|}
name|l
operator|->
name|addStretch
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|item
operator|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|item
operator|=
name|d
operator|->
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
break|break;
name|l
operator|->
name|addWidget
argument_list|(
name|item
operator|->
name|w
argument_list|,
name|item
operator|->
name|s
argument_list|)
expr_stmt|;
name|int
name|itemH
init|=
name|qMin
argument_list|(
name|qSmartMinSize
argument_list|(
name|item
operator|->
name|w
argument_list|)
operator|.
name|height
argument_list|()
argument_list|,
name|item
operator|->
name|w
operator|->
name|maximumHeight
argument_list|()
argument_list|)
decl_stmt|;
name|maxH
operator|=
name|qMax
argument_list|(
name|maxH
argument_list|,
name|itemH
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
if|if
condition|(
name|d
operator|->
name|resizer
condition|)
block|{
name|maxH
operator|=
name|qMax
argument_list|(
name|maxH
argument_list|,
name|d
operator|->
name|resizer
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|box
operator|->
name|addSpacing
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|d
operator|->
name|box
operator|->
name|addWidget
argument_list|(
name|d
operator|->
name|resizer
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|AlignBottom
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|l
operator|->
name|addStrut
argument_list|(
name|maxH
argument_list|)
expr_stmt|;
name|d
operator|->
name|savedStrut
operator|=
name|maxH
expr_stmt|;
name|vbox
operator|->
name|addSpacing
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|d
operator|->
name|box
operator|->
name|activate
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!    Hides the normal status indications and displays the given \a   message for the specified number of milli-seconds (\a{timeout}). If   \a{timeout} is 0 (default), the \a {message} remains displayed until   the clearMessage() slot is called or until the showMessage() slot is   called again to change the message.    Note that showMessage() is called to show temporary explanations of   tool tip texts, so passing a \a{timeout} of 0 is not sufficient to   display a \l{permanent message}{permanent message}.      \sa messageChanged(), currentMessage(), clearMessage() */
end_comment
begin_function
DECL|function|showMessage
name|void
name|QStatusBar
operator|::
name|showMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|message
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStatusBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|timer
condition|)
block|{
name|d
operator|->
name|timer
operator|=
operator|new
name|QTimer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|clearMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|timer
operator|->
name|start
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|timer
condition|)
block|{
operator|delete
name|d
operator|->
name|timer
expr_stmt|;
name|d
operator|->
name|timer
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|tempItem
operator|==
name|message
condition|)
return|return;
name|d
operator|->
name|tempItem
operator|=
name|message
expr_stmt|;
name|hideOrShow
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes any temporary message being shown.      \sa currentMessage(), showMessage(), removeWidget() */
end_comment
begin_function
DECL|function|clearMessage
name|void
name|QStatusBar
operator|::
name|clearMessage
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QStatusBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|tempItem
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|timer
condition|)
block|{
name|qDeleteInEventHandler
argument_list|(
name|d
operator|->
name|timer
argument_list|)
expr_stmt|;
name|d
operator|->
name|timer
operator|=
literal|0
expr_stmt|;
block|}
name|d
operator|->
name|tempItem
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hideOrShow
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the temporary message currently shown,     or an empty string if there is no such message.      \sa showMessage() */
end_comment
begin_function
DECL|function|currentMessage
name|QString
name|QStatusBar
operator|::
name|currentMessage
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QStatusBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tempItem
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QStatusBar::messageChanged(const QString&message)      This signal is emitted whenever the temporary status message     changes. The new temporary message is passed in the \a message     parameter which is a null-string when the message has been     removed.      \sa showMessage(), clearMessage() */
end_comment
begin_comment
comment|/*!     Ensures that the right widgets are visible.      Used by the showMessage() and clearMessage() functions. */
end_comment
begin_function
DECL|function|hideOrShow
name|void
name|QStatusBar
operator|::
name|hideOrShow
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QStatusBar
argument_list|)
expr_stmt|;
name|bool
name|haveMessage
init|=
operator|!
name|d
operator|->
name|tempItem
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|QStatusBarPrivate
operator|::
name|SBItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|item
operator|=
name|d
operator|->
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
operator|||
name|item
operator|->
name|p
condition|)
break|break;
if|if
condition|(
name|haveMessage
operator|&&
name|item
operator|->
name|w
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|item
operator|->
name|w
operator|->
name|hide
argument_list|()
expr_stmt|;
name|item
operator|->
name|w
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|haveMessage
operator|&&
operator|!
name|item
operator|->
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_WState_ExplicitShowHide
argument_list|)
condition|)
block|{
name|item
operator|->
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
block|}
emit|emit
name|messageChanged
argument_list|(
name|d
operator|->
name|tempItem
argument_list|)
emit|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
if|if
condition|(
name|QAccessible
operator|::
name|isActive
argument_list|()
condition|)
block|{
name|QAccessibleEvent
name|event
argument_list|(
name|this
argument_list|,
name|QAccessible
operator|::
name|NameChanged
argument_list|)
decl_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|repaint
argument_list|(
name|d
operator|->
name|messageRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp  */
end_comment
begin_function
DECL|function|showEvent
name|void
name|QStatusBar
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
name|Q_D
argument_list|(
name|QStatusBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|resizer
operator|&&
name|d
operator|->
name|showSizeGrip
condition|)
name|d
operator|->
name|tryToShowSizeGrip
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \reimp     \fn void QStatusBar::paintEvent(QPaintEvent *event)      Shows the temporary message, if appropriate, in response to the     paint \a event. */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QStatusBar
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStatusBar
argument_list|)
expr_stmt|;
name|bool
name|haveMessage
init|=
operator|!
name|d
operator|->
name|tempItem
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QStyleOption
name|opt
decl_stmt|;
name|opt
operator|.
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_PanelStatusBar
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QStatusBarPrivate
operator|::
name|SBItem
modifier|*
name|item
init|=
name|d
operator|->
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|&&
name|item
operator|->
name|w
operator|->
name|isVisible
argument_list|()
operator|&&
operator|(
operator|!
name|haveMessage
operator|||
name|item
operator|->
name|p
operator|)
condition|)
block|{
name|QRect
name|ir
init|=
name|item
operator|->
name|w
operator|->
name|geometry
argument_list|()
operator|.
name|adjusted
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|rect
argument_list|()
operator|.
name|intersects
argument_list|(
name|ir
argument_list|)
condition|)
block|{
name|QStyleOption
name|opt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|opt
operator|.
name|rect
operator|=
name|ir
expr_stmt|;
name|opt
operator|.
name|palette
operator|=
name|palette
argument_list|()
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameStatusBarItem
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|p
argument_list|,
name|item
operator|->
name|w
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|haveMessage
condition|)
block|{
name|p
operator|.
name|setPen
argument_list|(
name|palette
argument_list|()
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|d
operator|->
name|messageRect
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignLeading
operator||
name|Qt
operator|::
name|AlignVCenter
operator||
name|Qt
operator|::
name|TextSingleLine
argument_list|,
name|d
operator|->
name|tempItem
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QStatusBar
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|e
parameter_list|)
block|{
name|QWidget
operator|::
name|resizeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QStatusBar
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QStatusBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LayoutRequest
condition|)
block|{
comment|// Calculate new strut height and call reformat() if it has changed
name|int
name|maxH
init|=
name|fontMetrics
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|QStatusBarPrivate
operator|::
name|SBItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|item
operator|=
name|d
operator|->
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
break|break;
name|int
name|itemH
init|=
name|qMin
argument_list|(
name|qSmartMinSize
argument_list|(
name|item
operator|->
name|w
argument_list|)
operator|.
name|height
argument_list|()
argument_list|,
name|item
operator|->
name|w
operator|->
name|maximumHeight
argument_list|()
argument_list|)
decl_stmt|;
name|maxH
operator|=
name|qMax
argument_list|(
name|maxH
argument_list|,
name|itemH
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_SIZEGRIP
if|if
condition|(
name|d
operator|->
name|resizer
condition|)
name|maxH
operator|=
name|qMax
argument_list|(
name|maxH
argument_list|,
name|d
operator|->
name|resizer
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|maxH
operator|!=
name|d
operator|->
name|savedStrut
condition|)
name|reformat
argument_list|()
expr_stmt|;
else|else
name|update
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ChildRemoved
condition|)
block|{
name|QStatusBarPrivate
operator|::
name|SBItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|item
operator|=
name|d
operator|->
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|item
condition|)
break|break;
if|if
condition|(
name|item
operator|->
name|w
operator|==
operator|(
operator|(
name|QChildEvent
operator|*
operator|)
name|e
operator|)
operator|->
name|child
argument_list|()
condition|)
block|{
name|d
operator|->
name|items
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|delete
name|item
expr_stmt|;
block|}
block|}
block|}
comment|// On Mac OS X Leopard it is possible to drag the window by clicking
comment|// on the tool bar on most applications.
ifndef|#
directive|ifndef
name|Q_DEAD_CODE_FROM_QT4_MAC
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
else|#
directive|else
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|<=
name|QSysInfo
operator|::
name|MV_10_4
condition|)
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
comment|// Enable drag-click only if the status bar is the status bar for a
comment|// QMainWindow with a unifed toolbar.
if|if
condition|(
name|parent
argument_list|()
operator|==
literal|0
operator|||
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
operator|==
literal|0
operator|||
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
operator|->
name|unifiedTitleAndToolBarOnMac
argument_list|()
operator|==
literal|false
condition|)
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
comment|// Check for mouse events.
name|QMouseEvent
modifier|*
name|mouseEvent
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseMove
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
condition|)
block|{
name|mouseEvent
operator|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
comment|// The following is a standard mouse drag handler.
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|&&
operator|(
name|mouseEvent
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|)
condition|)
block|{
name|d
operator|->
name|dragStart
operator|=
name|mouseEvent
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseMove
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|dragStart
operator|==
name|QPoint
argument_list|()
condition|)
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
name|QPoint
name|pos
init|=
name|mouseEvent
operator|->
name|pos
argument_list|()
decl_stmt|;
name|QPoint
name|delta
init|=
operator|(
name|pos
operator|-
name|d
operator|->
name|dragStart
operator|)
decl_stmt|;
name|window
argument_list|()
operator|->
name|move
argument_list|(
name|window
argument_list|()
operator|->
name|pos
argument_list|()
operator|+
name|delta
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
operator|&&
operator|(
name|mouseEvent
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|)
condition|)
block|{
name|d
operator|->
name|dragStart
operator|=
name|QPoint
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
return|return
literal|true
return|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
