begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSPLITTER_H
end_ifndef
begin_define
DECL|macro|QSPLITTER_H
define|#
directive|define
name|QSPLITTER_H
end_define
begin_include
include|#
directive|include
file|<QtWidgets/qframe.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qsizepolicy.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_SPLITTER
DECL|variable|QSplitterPrivate
name|class
name|QSplitterPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextStream
name|class
name|QTextStream
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|variable|QList
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|QList
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|QSplitterHandle
name|class
name|QSplitterHandle
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QSplitter
range|:
name|public
name|QFrame
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|Qt::Orientation orientation READ orientation WRITE setOrientation
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool opaqueResize READ opaqueResize WRITE setOpaqueResize
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int handleWidth READ handleWidth WRITE setHandleWidth
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool childrenCollapsible READ childrenCollapsible WRITE setChildrenCollapsible
argument_list|)
name|public
operator|:
name|explicit
name|QSplitter
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|explicit
name|QSplitter
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QSplitter
argument_list|()
block|;
name|void
name|addWidget
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
block|;
name|void
name|insertWidget
argument_list|(
argument|int index
argument_list|,
argument|QWidget *widget
argument_list|)
block|;
name|void
name|setOrientation
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|)
block|;
name|Qt
operator|::
name|Orientation
name|orientation
argument_list|()
specifier|const
block|;
name|void
name|setChildrenCollapsible
argument_list|(
name|bool
argument_list|)
block|;
name|bool
name|childrenCollapsible
argument_list|()
specifier|const
block|;
name|void
name|setCollapsible
argument_list|(
argument|int index
argument_list|,
argument|bool
argument_list|)
block|;
name|bool
name|isCollapsible
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
name|void
name|setOpaqueResize
argument_list|(
argument|bool opaque = true
argument_list|)
block|;
name|bool
name|opaqueResize
argument_list|()
specifier|const
block|;
name|void
name|refresh
argument_list|()
block|;
name|QSize
name|sizeHint
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|QSize
name|minimumSizeHint
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|QList
operator|<
name|int
operator|>
name|sizes
argument_list|()
specifier|const
block|;
name|void
name|setSizes
argument_list|(
specifier|const
name|QList
operator|<
name|int
operator|>
operator|&
name|list
argument_list|)
block|;
name|QByteArray
name|saveState
argument_list|()
specifier|const
block|;
name|bool
name|restoreState
argument_list|(
specifier|const
name|QByteArray
operator|&
name|state
argument_list|)
block|;
name|int
name|handleWidth
argument_list|()
specifier|const
block|;
name|void
name|setHandleWidth
argument_list|(
name|int
argument_list|)
block|;
name|int
name|indexOf
argument_list|(
argument|QWidget *w
argument_list|)
specifier|const
block|;
name|QWidget
operator|*
name|widget
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
name|int
name|count
argument_list|()
specifier|const
block|;
name|void
name|getRange
argument_list|(
argument|int index
argument_list|,
argument|int *
argument_list|,
argument|int *
argument_list|)
specifier|const
block|;
name|QSplitterHandle
operator|*
name|handle
argument_list|(
argument|int index
argument_list|)
specifier|const
block|;
name|void
name|setStretchFactor
argument_list|(
argument|int index
argument_list|,
argument|int stretch
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|splitterMoved
argument_list|(
argument|int pos
argument_list|,
argument|int index
argument_list|)
block|;
name|protected
operator|:
name|virtual
name|QSplitterHandle
operator|*
name|createHandle
argument_list|()
block|;
name|void
name|childEvent
argument_list|(
argument|QChildEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|event
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|resizeEvent
argument_list|(
argument|QResizeEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|changeEvent
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|moveSplitter
argument_list|(
argument|int pos
argument_list|,
argument|int index
argument_list|)
block|;
name|void
name|setRubberBand
argument_list|(
argument|int position
argument_list|)
block|;
name|int
name|closestLegalPosition
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QSplitter
argument_list|)
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QSplitter
argument_list|)
name|private
operator|:
name|friend
name|class
name|QSplitterHandle
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_WIDGETS_EXPORT
name|QTextStream
operator|&
name|operator
operator|<<
operator|(
name|QTextStream
operator|&
operator|,
specifier|const
name|QSplitter
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_WIDGETS_EXPORT
name|QTextStream
operator|&
name|operator
operator|>>
operator|(
name|QTextStream
operator|&
operator|,
name|QSplitter
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
DECL|variable|QSplitterHandlePrivate
name|class
name|QSplitterHandlePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QSplitterHandle
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|QSplitterHandle
argument_list|(
argument|Qt::Orientation o
argument_list|,
argument|QSplitter *parent
argument_list|)
block|;
operator|~
name|QSplitterHandle
argument_list|()
block|;
name|void
name|setOrientation
argument_list|(
argument|Qt::Orientation o
argument_list|)
block|;
name|Qt
operator|::
name|Orientation
name|orientation
argument_list|()
specifier|const
block|;
name|bool
name|opaqueResize
argument_list|()
specifier|const
block|;
name|QSplitter
operator|*
name|splitter
argument_list|()
specifier|const
block|;
name|QSize
name|sizeHint
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|protected
operator|:
name|void
name|paintEvent
argument_list|(
argument|QPaintEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|mouseMoveEvent
argument_list|(
argument|QMouseEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|mousePressEvent
argument_list|(
argument|QMouseEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|mouseReleaseEvent
argument_list|(
argument|QMouseEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|resizeEvent
argument_list|(
argument|QResizeEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|event
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|moveSplitter
argument_list|(
argument|int p
argument_list|)
block|;
name|int
name|closestLegalPosition
argument_list|(
argument|int p
argument_list|)
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QSplitterHandle
argument_list|)
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QSplitterHandle
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SPLITTER
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSPLITTER_H
end_comment
end_unit
