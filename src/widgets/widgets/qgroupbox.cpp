begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qgroupbox.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_GROUPBOX
end_ifndef
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qdrawutil.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qlayout.h"
end_include
begin_include
include|#
directive|include
file|"qradiobutton.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"qstylepainter.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qaccessible.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QGroupBoxPrivate
class|class
name|QGroupBoxPrivate
super|:
specifier|public
name|QWidgetPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QGroupBox
parameter_list|)
specifier|public
private|:
name|void
name|skip
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|calculateFrame
parameter_list|()
function_decl|;
DECL|member|title
name|QString
name|title
decl_stmt|;
DECL|member|align
name|int
name|align
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
DECL|member|shortcutId
name|int
name|shortcutId
decl_stmt|;
endif|#
directive|endif
name|void
name|_q_fixFocus
parameter_list|(
name|Qt
operator|::
name|FocusReason
name|reason
parameter_list|)
function_decl|;
name|void
name|_q_setChildrenEnabled
parameter_list|(
name|bool
name|b
parameter_list|)
function_decl|;
name|void
name|click
parameter_list|()
function_decl|;
DECL|member|flat
name|bool
name|flat
decl_stmt|;
DECL|member|checkable
name|bool
name|checkable
decl_stmt|;
DECL|member|checked
name|bool
name|checked
decl_stmt|;
DECL|member|hover
name|bool
name|hover
decl_stmt|;
DECL|member|overCheckBox
name|bool
name|overCheckBox
decl_stmt|;
DECL|member|pressedControl
name|QStyle
operator|::
name|SubControl
name|pressedControl
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     Initialize \a option with the values from this QGroupBox. This method     is useful for subclasses when they need a QStyleOptionGroupBox, but don't want     to fill in all the information themselves.      \sa QStyleOption::initFrom() */
end_comment
begin_function
DECL|function|initStyleOption
name|void
name|QGroupBox
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionGroupBox
modifier|*
name|option
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|option
condition|)
return|return;
name|Q_D
argument_list|(
specifier|const
name|QGroupBox
argument_list|)
expr_stmt|;
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|option
operator|->
name|text
operator|=
name|d
operator|->
name|title
expr_stmt|;
name|option
operator|->
name|lineWidth
operator|=
literal|1
expr_stmt|;
name|option
operator|->
name|midLineWidth
operator|=
literal|0
expr_stmt|;
name|option
operator|->
name|textAlignment
operator|=
name|Qt
operator|::
name|Alignment
argument_list|(
name|d
operator|->
name|align
argument_list|)
expr_stmt|;
name|option
operator|->
name|activeSubControls
operator||=
name|d
operator|->
name|pressedControl
expr_stmt|;
name|option
operator|->
name|subControls
operator|=
name|QStyle
operator|::
name|SC_GroupBoxFrame
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hover
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
else|else
name|option
operator|->
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_MouseOver
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|flat
condition|)
name|option
operator|->
name|features
operator||=
name|QStyleOptionFrameV2
operator|::
name|Flat
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|checkable
condition|)
block|{
name|option
operator|->
name|subControls
operator||=
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
expr_stmt|;
name|option
operator|->
name|state
operator||=
operator|(
name|d
operator|->
name|checked
condition|?
name|QStyle
operator|::
name|State_On
else|:
name|QStyle
operator|::
name|State_Off
operator|)
expr_stmt|;
if|if
condition|(
operator|(
name|d
operator|->
name|pressedControl
operator|==
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
operator|||
name|d
operator|->
name|pressedControl
operator|==
name|QStyle
operator|::
name|SC_GroupBoxLabel
operator|)
operator|&&
operator|(
name|d
operator|->
name|hover
operator|||
name|d
operator|->
name|overCheckBox
operator|)
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|option
operator|->
name|palette
operator|.
name|isBrushSet
argument_list|(
name|isEnabled
argument_list|()
condition|?
name|QPalette
operator|::
name|Active
else|:
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|WindowText
argument_list|)
condition|)
name|option
operator|->
name|textColor
operator|=
name|QColor
argument_list|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_GroupBox_TextLabelColor
argument_list|,
name|option
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
name|option
operator|->
name|subControls
operator||=
name|QStyle
operator|::
name|SC_GroupBoxLabel
expr_stmt|;
block|}
end_function
begin_function
DECL|function|click
name|void
name|QGroupBoxPrivate
operator|::
name|click
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QGroupBox
argument_list|>
name|guard
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|q
operator|->
name|setChecked
argument_list|(
operator|!
name|checked
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|guard
condition|)
return|return;
emit|emit
name|q
operator|->
name|clicked
argument_list|(
name|checked
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \class QGroupBox     \brief The QGroupBox widget provides a group box frame with a title.      \ingroup organizers     \ingroup geomanagement     \inmodule QtWidgets      A group box provides a frame, a title and a keyboard shortcut, and     displays various other widgets inside itself. The title is on top,     the keyboard shortcut moves keyboard focus to one of the group     box's child widgets.      QGroupBox also lets you set the \l title (normally set in the     constructor) and the title's \l alignment. Group boxes can be     \l checkable; child widgets in checkable group boxes are enabled or     disabled depending on whether or not the group box is \l checked.      You can minimize the space consumption of a group box by enabling     the \l flat property. In most \l{QStyle}{styles}, enabling this     property results in the removal of the left, right and bottom     edges of the frame.      QGroupBox doesn't automatically lay out the child widgets (which     are often \l{QCheckBox}es or \l{QRadioButton}s but can be any     widgets). The following example shows how we can set up a     QGroupBox with a layout:      \snippet examples/widgets/groupbox/window.cpp 2      \table 100%     \row \li \inlineimage windowsxp-groupbox.png Screenshot of a Windows XP style group box          \li \inlineimage macintosh-groupbox.png Screenshot of a Macintosh style group box          \li \inlineimage plastique-groupbox.png Screenshot of a Plastique style group box     \row \li A \l{Windows XP Style Widget Gallery}{Windows XP style} group box.          \li A \l{Macintosh Style Widget Gallery}{Macintosh style} group box.          \li A \l{Plastique Style Widget Gallery}{Plastique style} group box.     \endtable      \sa QButtonGroup, {Group Box Example} */
end_comment
begin_comment
comment|/*!     Constructs a group box widget with the given \a parent but with no title. */
end_comment
begin_constructor
DECL|function|QGroupBox
name|QGroupBox
operator|::
name|QGroupBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QGroupBoxPrivate
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a group box with the given \a title and \a parent. */
end_comment
begin_constructor
DECL|function|QGroupBox
name|QGroupBox
operator|::
name|QGroupBox
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QGroupBoxPrivate
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the group box. */
end_comment
begin_destructor
DECL|function|~QGroupBox
name|QGroupBox
operator|::
name|~
name|QGroupBox
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|QGroupBoxPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
name|align
operator|=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|shortcutId
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|flat
operator|=
literal|false
expr_stmt|;
name|checkable
operator|=
literal|false
expr_stmt|;
name|checked
operator|=
literal|true
expr_stmt|;
name|hover
operator|=
literal|false
expr_stmt|;
name|overCheckBox
operator|=
literal|false
expr_stmt|;
name|pressedControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|calculateFrame
argument_list|()
expr_stmt|;
name|q
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|GroupBox
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTitle
name|void
name|QGroupBox
operator|::
name|setTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|title
operator|==
name|title
condition|)
comment|// no change
return|return;
name|d
operator|->
name|title
operator|=
name|title
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|releaseShortcut
argument_list|(
name|d
operator|->
name|shortcutId
argument_list|)
expr_stmt|;
name|d
operator|->
name|shortcutId
operator|=
name|grabShortcut
argument_list|(
name|QKeySequence
operator|::
name|mnemonic
argument_list|(
name|title
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|calculateFrame
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessibleEvent
name|event
argument_list|(
name|this
argument_list|,
name|QAccessible
operator|::
name|NameChanged
argument_list|)
decl_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     \property QGroupBox::title     \brief the group box title text      The group box title text will have a keyboard shortcut if the title     contains an ampersand ('&') followed by a letter.      \snippet doc/src/snippets/code/src_gui_widgets_qgroupbox.cpp 0      In the example above, \key Alt+U moves the keyboard focus to the     group box. See the \l {QShortcut#mnemonic}{QShortcut}     documentation for details (to display an actual ampersand, use     '&&').      There is no default title text.      \sa alignment */
end_comment
begin_function
DECL|function|title
name|QString
name|QGroupBox
operator|::
name|title
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGroupBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|title
return|;
block|}
end_function
begin_comment
comment|/*!     \property QGroupBox::alignment     \brief the alignment of the group box title.      Most styles place the title at the top of the frame. The horizontal     alignment of the title can be specified using single values from     the following list:      \list     \li Qt::AlignLeft aligns the title text with the left-hand side of the group box.     \li Qt::AlignRight aligns the title text with the right-hand side of the group box.     \li Qt::AlignHCenter aligns the title text with the horizontal center of the group box.     \endlist      The default alignment is Qt::AlignLeft.      \sa Qt::Alignment */
end_comment
begin_function
DECL|function|alignment
name|Qt
operator|::
name|Alignment
name|QGroupBox
operator|::
name|alignment
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGroupBox
argument_list|)
expr_stmt|;
return|return
name|QFlag
argument_list|(
name|d
operator|->
name|align
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setAlignment
name|void
name|QGroupBox
operator|::
name|setAlignment
parameter_list|(
name|int
name|alignment
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|align
operator|=
name|alignment
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QGroupBox
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|e
parameter_list|)
block|{
name|QWidget
operator|::
name|resizeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QGroupBox
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QStylePainter
name|paint
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QStyleOptionGroupBox
name|option
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|option
argument_list|)
expr_stmt|;
name|paint
operator|.
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp  */
end_comment
begin_function
DECL|function|event
name|bool
name|QGroupBox
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Shortcut
condition|)
block|{
name|QShortcutEvent
modifier|*
name|se
init|=
cast|static_cast
argument_list|<
name|QShortcutEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|se
operator|->
name|shortcutId
argument_list|()
operator|==
name|d
operator|->
name|shortcutId
condition|)
block|{
if|if
condition|(
operator|!
name|isCheckable
argument_list|()
condition|)
block|{
name|d
operator|->
name|_q_fixFocus
argument_list|(
name|Qt
operator|::
name|ShortcutFocusReason
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|click
argument_list|()
expr_stmt|;
name|setFocus
argument_list|(
name|Qt
operator|::
name|ShortcutFocusReason
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
endif|#
directive|endif
name|QStyleOptionGroupBox
name|box
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|box
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|HoverEnter
case|:
case|case
name|QEvent
operator|::
name|HoverMove
case|:
block|{
name|QStyle
operator|::
name|SubControl
name|control
init|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
operator|&
name|box
argument_list|,
cast|static_cast
argument_list|<
name|QHoverEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|bool
name|oldHover
init|=
name|d
operator|->
name|hover
decl_stmt|;
name|d
operator|->
name|hover
operator|=
name|d
operator|->
name|checkable
operator|&&
operator|(
name|control
operator|==
name|QStyle
operator|::
name|SC_GroupBoxLabel
operator|||
name|control
operator|==
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
operator|)
expr_stmt|;
if|if
condition|(
name|oldHover
operator|!=
name|d
operator|->
name|hover
condition|)
block|{
name|QRect
name|rect
init|=
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
operator|&
name|box
argument_list|,
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
argument_list|,
name|this
argument_list|)
operator||
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
operator|&
name|box
argument_list|,
name|QStyle
operator|::
name|SC_GroupBoxLabel
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|update
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
case|case
name|QEvent
operator|::
name|HoverLeave
case|:
name|d
operator|->
name|hover
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|checkable
condition|)
block|{
name|QRect
name|rect
init|=
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
operator|&
name|box
argument_list|,
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
argument_list|,
name|this
argument_list|)
operator||
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
operator|&
name|box
argument_list|,
name|QStyle
operator|::
name|SC_GroupBoxLabel
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|update
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|KeyPress
case|:
block|{
name|QKeyEvent
modifier|*
name|k
init|=
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|k
operator|->
name|isAutoRepeat
argument_list|()
operator|&&
operator|(
name|k
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Select
operator|||
name|k
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Space
operator|)
condition|)
block|{
name|d
operator|->
name|pressedControl
operator|=
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
expr_stmt|;
name|update
argument_list|(
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
operator|&
name|box
argument_list|,
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
block|}
case|case
name|QEvent
operator|::
name|KeyRelease
case|:
block|{
name|QKeyEvent
modifier|*
name|k
init|=
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|k
operator|->
name|isAutoRepeat
argument_list|()
operator|&&
operator|(
name|k
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Select
operator|||
name|k
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Space
operator|)
condition|)
block|{
name|bool
name|toggle
init|=
operator|(
name|d
operator|->
name|pressedControl
operator|==
name|QStyle
operator|::
name|SC_GroupBoxLabel
operator|||
name|d
operator|->
name|pressedControl
operator|==
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
operator|)
decl_stmt|;
name|d
operator|->
name|pressedControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
if|if
condition|(
name|toggle
condition|)
name|d
operator|->
name|click
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!\reimp */
end_comment
begin_function
DECL|function|childEvent
name|void
name|QGroupBox
operator|::
name|childEvent
parameter_list|(
name|QChildEvent
modifier|*
name|c
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|ChildAdded
operator|||
operator|!
name|c
operator|->
name|child
argument_list|()
operator|->
name|isWidgetType
argument_list|()
condition|)
return|return;
name|QWidget
modifier|*
name|w
init|=
operator|(
name|QWidget
operator|*
operator|)
name|c
operator|->
name|child
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|checkable
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|checked
condition|)
block|{
if|if
condition|(
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_ForceDisabled
argument_list|)
condition|)
name|w
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|w
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|w
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|w
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_ForceDisabled
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      This private slot finds a widget in this group box that can accept     focus, and gives the focus to that widget. */
end_comment
begin_function
DECL|function|_q_fixFocus
name|void
name|QGroupBoxPrivate
operator|::
name|_q_fixFocus
parameter_list|(
name|Qt
operator|::
name|FocusReason
name|reason
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|fw
init|=
name|q
operator|->
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fw
operator|||
name|fw
operator|==
name|q
condition|)
block|{
name|QWidget
modifier|*
name|best
init|=
literal|0
decl_stmt|;
name|QWidget
modifier|*
name|candidate
init|=
literal|0
decl_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|q
decl_stmt|;
while|while
condition|(
operator|(
name|w
operator|=
name|w
operator|->
name|nextInFocusChain
argument_list|()
operator|)
operator|!=
name|q
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|isAncestorOf
argument_list|(
name|w
argument_list|)
operator|&&
operator|(
name|w
operator|->
name|focusPolicy
argument_list|()
operator|&
name|Qt
operator|::
name|TabFocus
operator|)
operator|==
name|Qt
operator|::
name|TabFocus
operator|&&
name|w
operator|->
name|isVisibleTo
argument_list|(
name|q
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|best
operator|&&
name|qobject_cast
argument_list|<
name|QRadioButton
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|&&
operator|(
operator|(
name|QRadioButton
operator|*
operator|)
name|w
operator|)
operator|->
name|isChecked
argument_list|()
condition|)
comment|// we prefer a checked radio button or a widget that
comment|// already has focus, if there is one
name|best
operator|=
name|w
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|candidate
condition|)
comment|// but we'll accept anything that takes focus
name|candidate
operator|=
name|w
expr_stmt|;
block|}
block|}
if|if
condition|(
name|best
condition|)
name|fw
operator|=
name|best
expr_stmt|;
elseif|else
if|if
condition|(
name|candidate
condition|)
name|fw
operator|=
name|candidate
expr_stmt|;
block|}
if|if
condition|(
name|fw
condition|)
name|fw
operator|->
name|setFocus
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Sets the right frame rect depending on the title. */
end_comment
begin_function
DECL|function|calculateFrame
name|void
name|QGroupBoxPrivate
operator|::
name|calculateFrame
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
name|QStyleOptionGroupBox
name|box
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|box
argument_list|)
expr_stmt|;
name|QRect
name|contentsRect
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
operator|&
name|box
argument_list|,
name|QStyle
operator|::
name|SC_GroupBoxContents
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|q
operator|->
name|setContentsMargins
argument_list|(
name|contentsRect
operator|.
name|left
argument_list|()
operator|-
name|box
operator|.
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|contentsRect
operator|.
name|top
argument_list|()
operator|-
name|box
operator|.
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|box
operator|.
name|rect
operator|.
name|right
argument_list|()
operator|-
name|contentsRect
operator|.
name|right
argument_list|()
argument_list|,
name|box
operator|.
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|contentsRect
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|setLayoutItemMargins
argument_list|(
name|QStyle
operator|::
name|SE_GroupBoxLayoutItem
argument_list|,
operator|&
name|box
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp  */
end_comment
begin_function
DECL|function|focusInEvent
name|void
name|QGroupBox
operator|::
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|fe
parameter_list|)
block|{
comment|// note no call to super
name|Q_D
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|focusPolicy
argument_list|()
operator|==
name|Qt
operator|::
name|NoFocus
condition|)
block|{
name|d
operator|->
name|_q_fixFocus
argument_list|(
name|fe
operator|->
name|reason
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWidget
operator|::
name|focusInEvent
argument_list|(
name|fe
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|minimumSizeHint
name|QSize
name|QGroupBox
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGroupBox
argument_list|)
expr_stmt|;
name|QStyleOptionGroupBox
name|option
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|option
argument_list|)
expr_stmt|;
name|QFontMetrics
name|metrics
argument_list|(
name|fontMetrics
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|baseWidth
init|=
name|metrics
operator|.
name|width
argument_list|(
name|d
operator|->
name|title
argument_list|)
operator|+
name|metrics
operator|.
name|width
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|baseHeight
init|=
name|metrics
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|checkable
condition|)
block|{
name|baseWidth
operator|+=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_IndicatorWidth
argument_list|)
expr_stmt|;
name|baseWidth
operator|+=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_CheckBoxLabelSpacing
argument_list|)
expr_stmt|;
name|baseHeight
operator|=
name|qMax
argument_list|(
name|baseHeight
argument_list|,
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_IndicatorHeight
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QSize
name|size
init|=
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_GroupBox
argument_list|,
operator|&
name|option
argument_list|,
name|QSize
argument_list|(
name|baseWidth
argument_list|,
name|baseHeight
argument_list|)
argument_list|,
name|this
argument_list|)
decl_stmt|;
return|return
name|size
operator|.
name|expandedTo
argument_list|(
name|QWidget
operator|::
name|minimumSizeHint
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QGroupBox::flat     \brief whether the group box is painted flat or has a frame      A group box usually consists of a surrounding frame with a title     at the top. If this property is enabled, only the top part of the frame is     drawn in most styles; otherwise the whole frame is drawn.      By default, this property is disabled; i.e. group boxes are not flat unless     explicitly specified.      \b{Note:} In some styles, flat and non-flat group boxes have similar     representations and may not be as distinguishable as they are in other     styles.      \sa title */
end_comment
begin_function
DECL|function|isFlat
name|bool
name|QGroupBox
operator|::
name|isFlat
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGroupBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|flat
return|;
block|}
end_function
begin_function
DECL|function|setFlat
name|void
name|QGroupBox
operator|::
name|setFlat
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|flat
operator|==
name|b
condition|)
return|return;
name|d
operator|->
name|flat
operator|=
name|b
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QGroupBox::checkable     \brief whether the group box has a checkbox in its title      If this property is true, the group box displays its title using     a checkbox in place of an ordinary label. If the checkbox is checked,     the group box's children are enabled; otherwise they are disabled and     inaccessible.      By default, group boxes are not checkable.      If this property is enabled for a group box, it will also be initially     checked to ensure that its contents are enabled.      \sa checked */
end_comment
begin_function
DECL|function|setCheckable
name|void
name|QGroupBox
operator|::
name|setCheckable
parameter_list|(
name|bool
name|checkable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
name|bool
name|wasCheckable
init|=
name|d
operator|->
name|checkable
decl_stmt|;
name|d
operator|->
name|checkable
operator|=
name|checkable
expr_stmt|;
if|if
condition|(
name|checkable
condition|)
block|{
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wasCheckable
condition|)
block|{
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
name|d
operator|->
name|_q_setChildrenEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|wasCheckable
condition|)
block|{
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|d
operator|->
name|_q_setChildrenEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
name|d
operator|->
name|_q_setChildrenEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wasCheckable
operator|!=
name|checkable
condition|)
block|{
name|d
operator|->
name|calculateFrame
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isCheckable
name|bool
name|QGroupBox
operator|::
name|isCheckable
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGroupBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|checkable
return|;
block|}
end_function
begin_function
DECL|function|isChecked
name|bool
name|QGroupBox
operator|::
name|isChecked
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QGroupBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|checkable
operator|&&
name|d
operator|->
name|checked
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QGroupBox::toggled(bool on)      If the group box is checkable, this signal is emitted when the check box     is toggled. \a on is true if the check box is checked; otherwise it is false.      \sa checkable */
end_comment
begin_comment
comment|/*!     \fn void QGroupBox::clicked(bool checked)     \since 4.2      This signal is emitted when the check box is activated (i.e. pressed down     then released while the mouse cursor is inside the button), or when the     shortcut key is typed, Notably, this signal is \e not emitted if you call     setChecked().      If the check box is checked \a checked is true; it is false if the check     box is unchecked.      \sa checkable, toggled(), checked */
end_comment
begin_comment
comment|/*!     \property QGroupBox::checked     \brief whether the group box is checked      If the group box is checkable, it is displayed with a check box.     If the check box is checked, the group box's children are enabled;     otherwise the children are disabled and are inaccessible to the user.      By default, checkable group boxes are also checked.      \sa checkable */
end_comment
begin_function
DECL|function|setChecked
name|void
name|QGroupBox
operator|::
name|setChecked
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|checkable
operator|&&
name|b
operator|!=
name|d
operator|->
name|checked
condition|)
block|{
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|checked
operator|=
name|b
expr_stmt|;
name|d
operator|->
name|_q_setChildrenEnabled
argument_list|(
name|b
argument_list|)
expr_stmt|;
emit|emit
name|toggled
argument_list|(
name|b
argument_list|)
emit|;
block|}
block|}
end_function
begin_comment
comment|/*   sets all children of the group box except the qt_groupbox_checkbox   to either disabled/enabled */
end_comment
begin_function
DECL|function|_q_setChildrenEnabled
name|void
name|QGroupBoxPrivate
operator|::
name|_q_setChildrenEnabled
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
name|QObjectList
name|childList
init|=
name|q
operator|->
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QObject
modifier|*
name|o
init|=
name|childList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
condition|)
block|{
if|if
condition|(
operator|!
name|w
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_ForceDisabled
argument_list|)
condition|)
name|w
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|w
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|w
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|w
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_ForceDisabled
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QGroupBox
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|ev
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|EnabledChange
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|checkable
operator|&&
name|isEnabled
argument_list|()
condition|)
block|{
comment|// we are being enabled - disable children
if|if
condition|(
operator|!
name|d
operator|->
name|checked
condition|)
name|d
operator|->
name|_q_setChildrenEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FontChange
ifdef|#
directive|ifdef
name|Q_WS_MAC
operator|||
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MacSizeChange
endif|#
directive|endif
operator|||
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StyleChange
condition|)
block|{
name|d
operator|->
name|calculateFrame
argument_list|()
expr_stmt|;
block|}
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|QGroupBox
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|Q_D
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
name|QStyleOptionGroupBox
name|box
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|box
argument_list|)
expr_stmt|;
name|d
operator|->
name|pressedControl
operator|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
operator|&
name|box
argument_list|,
name|event
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|checkable
operator|&&
operator|(
name|d
operator|->
name|pressedControl
operator|&
operator|(
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
operator||
name|QStyle
operator|::
name|SC_GroupBoxLabel
operator|)
operator|)
condition|)
block|{
name|d
operator|->
name|overCheckBox
operator|=
literal|true
expr_stmt|;
name|update
argument_list|(
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
operator|&
name|box
argument_list|,
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|mouseMoveEvent
name|void
name|QGroupBox
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
name|QStyleOptionGroupBox
name|box
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|box
argument_list|)
expr_stmt|;
name|QStyle
operator|::
name|SubControl
name|pressed
init|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
operator|&
name|box
argument_list|,
name|event
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|bool
name|oldOverCheckBox
init|=
name|d
operator|->
name|overCheckBox
decl_stmt|;
name|d
operator|->
name|overCheckBox
operator|=
operator|(
name|pressed
operator|==
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
operator|||
name|pressed
operator|==
name|QStyle
operator|::
name|SC_GroupBoxLabel
operator|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|checkable
operator|&&
operator|(
name|d
operator|->
name|pressedControl
operator|==
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
operator|||
name|d
operator|->
name|pressedControl
operator|==
name|QStyle
operator|::
name|SC_GroupBoxLabel
operator|)
operator|&&
operator|(
name|d
operator|->
name|overCheckBox
operator|!=
name|oldOverCheckBox
operator|)
condition|)
name|update
argument_list|(
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
operator|&
name|box
argument_list|,
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QGroupBox
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|Q_D
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|overCheckBox
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|QStyleOptionGroupBox
name|box
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|box
argument_list|)
expr_stmt|;
name|QStyle
operator|::
name|SubControl
name|released
init|=
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
operator|&
name|box
argument_list|,
name|event
operator|->
name|pos
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|bool
name|toggle
init|=
name|d
operator|->
name|checkable
operator|&&
operator|(
name|released
operator|==
name|QStyle
operator|::
name|SC_GroupBoxLabel
operator|||
name|released
operator|==
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
operator|)
decl_stmt|;
name|d
operator|->
name|pressedControl
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|d
operator|->
name|overCheckBox
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|toggle
condition|)
name|d
operator|->
name|click
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|checkable
condition|)
name|update
argument_list|(
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_GroupBox
argument_list|,
operator|&
name|box
argument_list|,
name|QStyle
operator|::
name|SC_GroupBoxCheckBox
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qgroupbox.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_GROUPBOX
end_comment
end_unit
