begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qtabwidget.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
end_ifndef
begin_include
include|#
directive|include
file|"private/qwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qtabbar_p.h"
end_include
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qlayout.h"
end_include
begin_include
include|#
directive|include
file|"qstackedwidget.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"qstylepainter.h"
end_include
begin_include
include|#
directive|include
file|"qtabbar.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbutton.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QTabWidget     \brief The QTabWidget class provides a stack of tabbed widgets.      \ingroup organizers     \ingroup basicwidgets       A tab widget provides a tab bar (see QTabBar) and a "page area"     that is used to display pages related to each tab. By default, the     tab bar is shown above the page area, but different configurations     are available (see \l{TabPosition}). Each tab is associated with a     different widget (called a page). Only the current page is shown in     the page area; all the other pages are hidden. The user can show a     different page by clicking on its tab or by pressing its     Alt+\e{letter} shortcut if it has one.      The normal way to use QTabWidget is to do the following:     \list 1     \i Create a QTabWidget.     \i Create a QWidget for each of the pages in the tab dialog, but        do not specify parent widgets for them.     \i Insert child widgets into the page widget, using layouts to        position them as normal.     \i Call addTab() or insertTab() to put the page widgets into the        tab widget, giving each tab a suitable label with an optional        keyboard shortcut.     \endlist      The position of the tabs is defined by \l tabPosition, their shape     by \l tabShape.      The signal currentChanged() is emitted when the user selects a     page.      The current page index is available as currentIndex(), the current     page widget with currentWidget().  You can retrieve a pointer to a     page widget with a given index using widget(), and can find the     index position of a widget with indexOf(). Use setCurrentWidget()     or setCurrentIndex() to show a particular page.      You can change a tab's text and icon using setTabText() or     setTabIcon(). A tab and its associated page can be removed with     removeTab().      Each tab is either enabled or disabled at any given time (see     setTabEnabled()). If a tab is enabled, the tab text is drawn     normally and the user can select that tab. If it is disabled, the     tab is drawn in a different way and the user cannot select that     tab. Note that even if a tab is disabled, the page can still be     visible, for example if all of the tabs happen to be disabled.      Tab widgets can be a very good way to split up a complex dialog.     An alternative is to use a QStackedWidget for which you provide some     means of navigating between pages, for example, a QToolBar or a     QListWidget.      Most of the functionality in QTabWidget is provided by a QTabBar     (at the top, providing the tabs) and a QStackedWidget (most of the     area, organizing the individual pages).      \table 100%     \row \o \inlineimage windowsxp-tabwidget.png Screenshot of a Windows XP style tab widget          \o \inlineimage macintosh-tabwidget.png Screenshot of a Macintosh style tab widget          \o \inlineimage plastique-tabwidget.png Screenshot of a Plastique style tab widget     \row \o A Windows XP style tab widget.          \o A Macintosh style tab widget.          \o A Plastique style tab widget.     \endtable      \sa QTabBar, QStackedWidget, QToolBox, {Tab Dialog Example} */
end_comment
begin_comment
comment|/*!     \enum QTabWidget::TabPosition      This enum type defines where QTabWidget draws the tab row:      \value North  The tabs are drawn above the pages.     \value South  The tabs are drawn below the pages.     \value West  The tabs are drawn to the left of the pages.     \value East  The tabs are drawn to the right of the pages.     \omitvalue Bottom     \omitvalue Top */
end_comment
begin_comment
comment|/*!     \enum QTabWidget::TabShape      This enum type defines the shape of the tabs:     \value Rounded  The tabs are drawn with a rounded look. This is the default                     shape.     \value Triangular  The tabs are drawn with a triangular look. */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::selected(const QString&tabLabel)      This signal is emitted whenever a tab is selected (raised),     including during the first show().      You can normally use currentChanged() instead. */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::currentChanged(int index)      This signal is emitted whenever the current page index changes.     The parameter is the new current page \a index position, or -1     if there isn't a new one (for example, if there are no widgets     in the QTabWidget)      \sa currentWidget() currentIndex */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::tabCloseRequested(int index)     \since 4.5      This signal is emitted when the close button on a tab is clicked.     The \a index is the index that should be removed.      \sa setTabsClosable() */
end_comment
begin_class
DECL|class|QTabWidgetPrivate
class|class
name|QTabWidgetPrivate
super|:
specifier|public
name|QWidgetPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QTabWidget
parameter_list|)
specifier|public
private|:
name|QTabWidgetPrivate
parameter_list|()
constructor_decl|;
name|~
name|QTabWidgetPrivate
parameter_list|()
destructor_decl|;
name|void
name|updateTabBarPosition
parameter_list|()
function_decl|;
name|void
name|_q_showTab
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|_q_removeTab
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|_q_tabMoved
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|bool
name|hasHeightForWidth
parameter_list|()
specifier|const
function_decl|;
DECL|member|tabs
name|QTabBar
modifier|*
name|tabs
decl_stmt|;
DECL|member|stack
name|QStackedWidget
modifier|*
name|stack
decl_stmt|;
DECL|member|panelRect
name|QRect
name|panelRect
decl_stmt|;
DECL|member|dirty
name|bool
name|dirty
decl_stmt|;
DECL|member|pos
name|QTabWidget
operator|::
name|TabPosition
name|pos
decl_stmt|;
DECL|member|shape
name|QTabWidget
operator|::
name|TabShape
name|shape
decl_stmt|;
DECL|member|alignment
name|int
name|alignment
decl_stmt|;
DECL|member|leftCornerWidget
name|QWidget
modifier|*
name|leftCornerWidget
decl_stmt|;
DECL|member|rightCornerWidget
name|QWidget
modifier|*
name|rightCornerWidget
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QTabWidgetPrivate
name|QTabWidgetPrivate
operator|::
name|QTabWidgetPrivate
parameter_list|()
member_init_list|:
name|tabs
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|stack
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|dirty
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|pos
argument_list|(
name|QTabWidget
operator|::
name|North
argument_list|)
member_init_list|,
name|shape
argument_list|(
name|QTabWidget
operator|::
name|Rounded
argument_list|)
member_init_list|,
name|leftCornerWidget
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|rightCornerWidget
argument_list|(
literal|0
argument_list|)
block|{}
end_constructor
begin_destructor
DECL|function|~QTabWidgetPrivate
name|QTabWidgetPrivate
operator|::
name|~
name|QTabWidgetPrivate
parameter_list|()
block|{}
end_destructor
begin_function
DECL|function|init
name|void
name|QTabWidgetPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
name|stack
operator|=
operator|new
name|QStackedWidget
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|stack
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_tabwidget_stackedwidget"
argument_list|)
argument_list|)
expr_stmt|;
name|stack
operator|->
name|setLineWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// hack so that QMacStyle::layoutSpacing() can detect tab widget pages
name|stack
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|TabWidget
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|stack
argument_list|,
name|SIGNAL
argument_list|(
name|widgetRemoved
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_removeTab
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTabBar
modifier|*
name|tabBar
init|=
operator|new
name|QTabBar
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|tabBar
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_tabwidget_tabbar"
argument_list|)
argument_list|)
expr_stmt|;
name|tabBar
operator|->
name|setDrawBase
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setTabBar
argument_list|(
name|tabBar
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|TabWidget
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|TabFocus
argument_list|)
expr_stmt|;
name|q
operator|->
name|setFocusProxy
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
name|q
operator|->
name|setTabPosition
argument_list|(
cast|static_cast
argument_list|<
name|QTabWidget
operator|::
name|TabPosition
argument_list|>
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TabWidget_DefaultTabPosition
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasHeightForWidth
name|bool
name|QTabWidgetPrivate
operator|::
name|hasHeightForWidth
parameter_list|()
specifier|const
block|{
name|bool
name|has
init|=
name|size_policy
operator|.
name|hasHeightForWidth
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|has
operator|&&
name|stack
condition|)
name|has
operator|=
name|qt_widget_private
argument_list|(
name|stack
argument_list|)
operator|->
name|hasHeightForWidth
argument_list|()
expr_stmt|;
return|return
name|has
return|;
block|}
end_function
begin_comment
comment|/*!     Initialize \a option with the values from this QTabWidget. This method is useful     for subclasses when they need a QStyleOptionTabWidgetFrame, but don't want to fill     in all the information themselves.      \sa QStyleOption::initFrom() QTabBar::initStyleOption() */
end_comment
begin_function
DECL|function|initStyleOption
name|void
name|QTabWidget
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionTabWidgetFrame
modifier|*
name|option
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|option
condition|)
return|return;
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|documentMode
argument_list|()
condition|)
name|option
operator|->
name|lineWidth
operator|=
literal|0
expr_stmt|;
else|else
name|option
operator|->
name|lineWidth
operator|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DefaultFrameWidth
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|int
name|exth
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TabBarBaseHeight
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|QSize
name|t
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|stack
operator|->
name|frameWidth
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|tabs
operator|->
name|isVisibleTo
argument_list|(
cast|const_cast
argument_list|<
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
condition|)
block|{
name|t
operator|=
name|d
operator|->
name|tabs
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
if|if
condition|(
name|documentMode
argument_list|()
condition|)
block|{
if|if
condition|(
name|tabPosition
argument_list|()
operator|==
name|East
operator|||
name|tabPosition
argument_list|()
operator|==
name|West
condition|)
block|{
name|t
operator|.
name|setHeight
argument_list|(
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|setWidth
argument_list|(
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|d
operator|->
name|rightCornerWidget
condition|)
block|{
specifier|const
name|QSize
name|rightCornerSizeHint
init|=
name|d
operator|->
name|rightCornerWidget
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
specifier|const
name|QSize
name|bounds
argument_list|(
name|rightCornerSizeHint
operator|.
name|width
argument_list|()
argument_list|,
name|t
operator|.
name|height
argument_list|()
operator|-
name|exth
argument_list|)
decl_stmt|;
name|option
operator|->
name|rightCornerWidgetSize
operator|=
name|rightCornerSizeHint
operator|.
name|boundedTo
argument_list|(
name|bounds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|option
operator|->
name|rightCornerWidgetSize
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|leftCornerWidget
condition|)
block|{
specifier|const
name|QSize
name|leftCornerSizeHint
init|=
name|d
operator|->
name|leftCornerWidget
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
specifier|const
name|QSize
name|bounds
argument_list|(
name|leftCornerSizeHint
operator|.
name|width
argument_list|()
argument_list|,
name|t
operator|.
name|height
argument_list|()
operator|-
name|exth
argument_list|)
decl_stmt|;
name|option
operator|->
name|leftCornerWidgetSize
operator|=
name|leftCornerSizeHint
operator|.
name|boundedTo
argument_list|(
name|bounds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|option
operator|->
name|leftCornerWidgetSize
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|d
operator|->
name|pos
condition|)
block|{
case|case
name|QTabWidget
operator|::
name|North
case|:
name|option
operator|->
name|shape
operator|=
name|d
operator|->
name|shape
operator|==
name|QTabWidget
operator|::
name|Rounded
condition|?
name|QTabBar
operator|::
name|RoundedNorth
else|:
name|QTabBar
operator|::
name|TriangularNorth
expr_stmt|;
break|break;
case|case
name|QTabWidget
operator|::
name|South
case|:
name|option
operator|->
name|shape
operator|=
name|d
operator|->
name|shape
operator|==
name|QTabWidget
operator|::
name|Rounded
condition|?
name|QTabBar
operator|::
name|RoundedSouth
else|:
name|QTabBar
operator|::
name|TriangularSouth
expr_stmt|;
break|break;
case|case
name|QTabWidget
operator|::
name|West
case|:
name|option
operator|->
name|shape
operator|=
name|d
operator|->
name|shape
operator|==
name|QTabWidget
operator|::
name|Rounded
condition|?
name|QTabBar
operator|::
name|RoundedWest
else|:
name|QTabBar
operator|::
name|TriangularWest
expr_stmt|;
break|break;
case|case
name|QTabWidget
operator|::
name|East
case|:
name|option
operator|->
name|shape
operator|=
name|d
operator|->
name|shape
operator|==
name|QTabWidget
operator|::
name|Rounded
condition|?
name|QTabBar
operator|::
name|RoundedEast
else|:
name|QTabBar
operator|::
name|TriangularEast
expr_stmt|;
break|break;
block|}
name|option
operator|->
name|tabBarSize
operator|=
name|t
expr_stmt|;
if|if
condition|(
name|QStyleOptionTabWidgetFrameV2
modifier|*
name|tabframe
init|=
name|qstyleoption_cast
argument_list|<
name|QStyleOptionTabWidgetFrameV2
operator|*
argument_list|>
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|QRect
name|tbRect
init|=
name|tabBar
argument_list|()
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QRect
name|selectedTabRect
init|=
name|tabBar
argument_list|()
operator|->
name|tabRect
argument_list|(
name|tabBar
argument_list|()
operator|->
name|currentIndex
argument_list|()
argument_list|)
decl_stmt|;
name|tabframe
operator|->
name|tabBarRect
operator|=
name|tbRect
expr_stmt|;
name|selectedTabRect
operator|.
name|moveTopLeft
argument_list|(
name|selectedTabRect
operator|.
name|topLeft
argument_list|()
operator|+
name|tbRect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|tabframe
operator|->
name|selectedTabRect
operator|=
name|selectedTabRect
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Constructs a tabbed widget with parent \a parent. */
end_comment
begin_constructor
DECL|function|QTabWidget
name|QTabWidget
operator|::
name|QTabWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QTabWidgetPrivate
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_comment
comment|/*!     Use one of the constructors that doesn't take the \a name     argument and then use setObjectName() instead. */
end_comment
begin_constructor
DECL|function|QTabWidget
name|QTabWidget
operator|::
name|QTabWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|f
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QTabWidgetPrivate
argument_list|,
name|parent
argument_list|,
name|f
argument_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     Destroys the tabbed widget. */
end_comment
begin_destructor
DECL|function|~QTabWidget
name|QTabWidget
operator|::
name|~
name|QTabWidget
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \fn int QTabWidget::addTab(QWidget *page, const QString&label)      Adds a tab with the given \a page and \a label to the tab widget,     and returns the index of the tab in the tab bar.      If the tab's \a label contains an ampersand, the letter following     the ampersand is used as a shortcut for the tab, e.g. if the     label is "Bro\&wse" then Alt+W becomes a shortcut which will     move the focus to this tab.      \note If you call addTab() after show(), the layout system will try     to adjust to the changes in its widgets hierarchy and may cause     flicker. To prevent this, you can set the QWidget::updatesEnabled     property to false prior to changes; remember to set the property     to true when the changes are done, making the widget receive paint     events again.      \sa insertTab() */
end_comment
begin_function
DECL|function|addTab
name|int
name|QTabWidget
operator|::
name|addTab
parameter_list|(
name|QWidget
modifier|*
name|child
parameter_list|,
specifier|const
name|QString
modifier|&
name|label
parameter_list|)
block|{
return|return
name|insertTab
argument_list|(
operator|-
literal|1
argument_list|,
name|child
argument_list|,
name|label
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn int QTabWidget::addTab(QWidget *page, const QIcon&icon, const QString&label)     \overload      Adds a tab with the given \a page, \a icon, and \a label to the tab     widget, and returns the index of the tab in the tab bar.      This function is the same as addTab(), but with an additional \a     icon. */
end_comment
begin_function
DECL|function|addTab
name|int
name|QTabWidget
operator|::
name|addTab
parameter_list|(
name|QWidget
modifier|*
name|child
parameter_list|,
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|label
parameter_list|)
block|{
return|return
name|insertTab
argument_list|(
operator|-
literal|1
argument_list|,
name|child
argument_list|,
name|icon
argument_list|,
name|label
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn int QTabWidget::insertTab(int index, QWidget *page, const QString&label)      Inserts a tab with the given \a label and \a page into the tab     widget at the specified \a index, and returns the index of the     inserted tab in the tab bar.      The label is displayed in the tab and may vary in appearance depending     on the configuration of the tab widget.      If the tab's \a label contains an ampersand, the letter following     the ampersand is used as a shortcut for the tab, e.g. if the     label is "Bro\&wse" then Alt+W becomes a shortcut which will     move the focus to this tab.      If \a index is out of range, the tab is simply appended.     Otherwise it is inserted at the specified position.      If the QTabWidget was empty before this function is called, the     new page becomes the current page. Inserting a new tab at an index     less than or equal to the current index will increment the current     index, but keep the current page.      \note If you call insertTab() after show(), the layout system will try     to adjust to the changes in its widgets hierarchy and may cause     flicker. To prevent this, you can set the QWidget::updatesEnabled     property to false prior to changes; remember to set the property     to true when the changes are done, making the widget receive paint     events again.      \sa addTab() */
end_comment
begin_function
DECL|function|insertTab
name|int
name|QTabWidget
operator|::
name|insertTab
parameter_list|(
name|int
name|index
parameter_list|,
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QString
modifier|&
name|label
parameter_list|)
block|{
return|return
name|insertTab
argument_list|(
name|index
argument_list|,
name|w
argument_list|,
name|QIcon
argument_list|()
argument_list|,
name|label
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn int QTabWidget::insertTab(int index, QWidget *page, const QIcon& icon, const QString&label)     \overload      Inserts a tab with the given \a label, \a page, and \a icon into     the tab widget at the specified \a index, and returns the index of the     inserted tab in the tab bar.      This function is the same as insertTab(), but with an additional     \a icon. */
end_comment
begin_function
DECL|function|insertTab
name|int
name|QTabWidget
operator|::
name|insertTab
parameter_list|(
name|int
name|index
parameter_list|,
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|label
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
return|return
operator|-
literal|1
return|;
name|index
operator|=
name|d
operator|->
name|stack
operator|->
name|insertWidget
argument_list|(
name|index
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|d
operator|->
name|tabs
operator|->
name|insertTab
argument_list|(
name|index
argument_list|,
name|icon
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|setUpLayout
argument_list|()
expr_stmt|;
name|tabInserted
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
end_function
begin_comment
comment|/*!     Defines a new \a label for the page at position \a index's tab.      If the provided text contains an ampersand character ('&'), a     shortcut is automatically created for it. The character that     follows the '&' will be used as the shortcut key. Any previous     shortcut will be overwritten, or cleared if no shortcut is defined     by the text. See the \l {QShortcut#mnemonic}{QShortcut}     documentation for details (to display an actual ampersand, use     '&&').  */
end_comment
begin_function
DECL|function|setTabText
name|void
name|QTabWidget
operator|::
name|setTabText
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QString
modifier|&
name|label
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tabs
operator|->
name|setTabText
argument_list|(
name|index
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|setUpLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the label text for the tab on the page at position \a index. */
end_comment
begin_function
DECL|function|tabText
name|QString
name|QTabWidget
operator|::
name|tabText
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tabs
operator|->
name|tabText
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      Sets the \a icon for the tab at position \a index. */
end_comment
begin_function
DECL|function|setTabIcon
name|void
name|QTabWidget
operator|::
name|setTabIcon
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tabs
operator|->
name|setTabIcon
argument_list|(
name|index
argument_list|,
name|icon
argument_list|)
expr_stmt|;
name|setUpLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the icon for the tab on the page at position \a index. */
end_comment
begin_function
DECL|function|tabIcon
name|QIcon
name|QTabWidget
operator|::
name|tabIcon
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tabs
operator|->
name|tabIcon
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the page at position \a index is enabled; otherwise returns false.      \sa setTabEnabled(), QWidget::isEnabled() */
end_comment
begin_function
DECL|function|isTabEnabled
name|bool
name|QTabWidget
operator|::
name|isTabEnabled
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tabs
operator|->
name|isTabEnabled
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     If \a enable is true, the page at position \a index is enabled; otherwise the page at position \a index is     disabled. The page's tab is redrawn appropriately.      QTabWidget uses QWidget::setEnabled() internally, rather than     keeping a separate flag.      Note that even a disabled tab/page may be visible. If the page is     visible already, QTabWidget will not hide it; if all the pages are     disabled, QTabWidget will show one of them.      \sa isTabEnabled(), QWidget::setEnabled() */
end_comment
begin_function
DECL|function|setTabEnabled
name|void
name|QTabWidget
operator|::
name|setTabEnabled
parameter_list|(
name|int
name|index
parameter_list|,
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tabs
operator|->
name|setTabEnabled
argument_list|(
name|index
argument_list|,
name|enable
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|widget
init|=
name|d
operator|->
name|stack
operator|->
name|widget
argument_list|(
name|index
argument_list|)
condition|)
name|widget
operator|->
name|setEnabled
argument_list|(
name|enable
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \fn void QTabWidget::setCornerWidget(QWidget *widget, Qt::Corner corner)    Sets the given \a widget to be shown in the specified \a corner of the   tab widget. The geometry of the widget is determined based on the widget's   sizeHint() and the style().    Only the horizontal element of the \a corner will be used.    Passing 0 shows no widget in the corner.    Any previously set corner widget is hidden.    All widgets set here will be deleted by the tab widget when it is   destroyed unless you separately reparent the widget after setting   some other corner widget (or 0).    Note: Corner widgets are designed for \l North and \l South tab positions;   other orientations are known to not work properly.    \sa cornerWidget(), setTabPosition() */
end_comment
begin_function
DECL|function|setCornerWidget
name|void
name|QTabWidget
operator|::
name|setCornerWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|Qt
operator|::
name|Corner
name|corner
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|&&
name|widget
operator|->
name|parentWidget
argument_list|()
operator|!=
name|this
condition|)
name|widget
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|corner
operator|&
name|Qt
operator|::
name|TopRightCorner
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|rightCornerWidget
condition|)
name|d
operator|->
name|rightCornerWidget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|d
operator|->
name|rightCornerWidget
operator|=
name|widget
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|d
operator|->
name|leftCornerWidget
condition|)
name|d
operator|->
name|leftCornerWidget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|d
operator|->
name|leftCornerWidget
operator|=
name|widget
expr_stmt|;
block|}
name|setUpLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the widget shown in the \a corner of the tab widget or 0. */
end_comment
begin_function
DECL|function|cornerWidget
name|QWidget
modifier|*
name|QTabWidget
operator|::
name|cornerWidget
parameter_list|(
name|Qt
operator|::
name|Corner
name|corner
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|corner
operator|&
name|Qt
operator|::
name|TopRightCorner
condition|)
return|return
name|d
operator|->
name|rightCornerWidget
return|;
return|return
name|d
operator|->
name|leftCornerWidget
return|;
block|}
end_function
begin_comment
comment|/*!    Removes the tab at position \a index from this stack of widgets.    The page widget itself is not deleted.     \sa addTab(), insertTab() */
end_comment
begin_function
DECL|function|removeTab
name|void
name|QTabWidget
operator|::
name|removeTab
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|d
operator|->
name|stack
operator|->
name|widget
argument_list|(
name|index
argument_list|)
condition|)
name|d
operator|->
name|stack
operator|->
name|removeWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the page currently being displayed by the tab     dialog. The tab dialog does its best to make sure that this value     is never 0 (but if you try hard enough, it can be).      \sa currentIndex(), setCurrentWidget() */
end_comment
begin_function
DECL|function|currentWidget
name|QWidget
modifier|*
name|QTabWidget
operator|::
name|currentWidget
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|stack
operator|->
name|currentWidget
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Makes \a widget the current widget. The \a widget used must be a page in     this tab widget.      \sa addTab(), setCurrentIndex(), currentWidget()  */
end_comment
begin_function
DECL|function|setCurrentWidget
name|void
name|QTabWidget
operator|::
name|setCurrentWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tabs
operator|->
name|setCurrentIndex
argument_list|(
name|indexOf
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabWidget::currentIndex     \brief the index position of the current tab page      The current index is -1 if there is no current widget.      By default, this property contains a value of -1 because there are initially     no tabs in the widget. */
end_comment
begin_function
DECL|function|currentIndex
name|int
name|QTabWidget
operator|::
name|currentIndex
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tabs
operator|->
name|currentIndex
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setCurrentIndex
name|void
name|QTabWidget
operator|::
name|setCurrentIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tabs
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the index position of the page occupied by the widget \a     w, or -1 if the widget cannot be found. */
end_comment
begin_function
DECL|function|indexOf
name|int
name|QTabWidget
operator|::
name|indexOf
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|stack
operator|->
name|indexOf
argument_list|(
name|w
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QTabWidget
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|e
parameter_list|)
block|{
name|QWidget
operator|::
name|resizeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|setUpLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Replaces the dialog's QTabBar heading with the tab bar \a tb. Note     that this must be called \e before any tabs have been added, or     the behavior is undefined.      \sa tabBar() */
end_comment
begin_function
DECL|function|setTabBar
name|void
name|QTabWidget
operator|::
name|setTabBar
parameter_list|(
name|QTabBar
modifier|*
name|tb
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|tb
argument_list|)
expr_stmt|;
if|if
condition|(
name|tb
operator|->
name|parentWidget
argument_list|()
operator|!=
name|this
condition|)
block|{
name|tb
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|tb
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
operator|delete
name|d
operator|->
name|tabs
expr_stmt|;
name|d
operator|->
name|tabs
operator|=
name|tb
expr_stmt|;
name|setFocusProxy
argument_list|(
name|d
operator|->
name|tabs
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|tabs
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_showTab
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|tabs
argument_list|,
name|SIGNAL
argument_list|(
name|tabMoved
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_tabMoved
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|tabs
operator|->
name|tabsClosable
argument_list|()
condition|)
name|connect
argument_list|(
name|d
operator|->
name|tabs
argument_list|,
name|SIGNAL
argument_list|(
name|tabCloseRequested
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|tabCloseRequested
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tb
operator|->
name|setExpanding
argument_list|(
operator|!
name|documentMode
argument_list|()
argument_list|)
expr_stmt|;
name|setUpLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the current QTabBar.      \sa setTabBar() */
end_comment
begin_function
DECL|function|tabBar
name|QTabBar
modifier|*
name|QTabWidget
operator|::
name|tabBar
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tabs
return|;
block|}
end_function
begin_comment
comment|/*!     Ensures that the selected tab's page is visible and appropriately     sized. */
end_comment
begin_function
DECL|function|_q_showTab
name|void
name|QTabWidgetPrivate
operator|::
name|_q_showTab
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
name|stack
operator|->
name|count
argument_list|()
operator|&&
name|index
operator|>=
literal|0
condition|)
name|stack
operator|->
name|setCurrentIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|currentChanged
argument_list|(
name|index
argument_list|)
emit|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
emit|emit
name|q
operator|->
name|selected
argument_list|(
name|q
operator|->
name|tabText
argument_list|(
name|index
argument_list|)
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|currentChanged
argument_list|(
name|stack
operator|->
name|widget
argument_list|(
name|index
argument_list|)
argument_list|)
emit|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|_q_removeTab
name|void
name|QTabWidgetPrivate
operator|::
name|_q_removeTab
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
name|tabs
operator|->
name|removeTab
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|q
operator|->
name|setUpLayout
argument_list|()
expr_stmt|;
name|q
operator|->
name|tabRemoved
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_tabMoved
name|void
name|QTabWidgetPrivate
operator|::
name|_q_tabMoved
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|stack
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|stack
operator|->
name|widget
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|stack
operator|->
name|removeWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|stack
operator|->
name|insertWidget
argument_list|(
name|to
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|stack
operator|->
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Set up the layout.     Get subrect from the current style, and set the geometry for the     stack widget, tab bar and corner widgets. */
end_comment
begin_function
DECL|function|setUpLayout
name|void
name|QTabWidget
operator|::
name|setUpLayout
parameter_list|(
name|bool
name|onlyCheck
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlyCheck
operator|&&
operator|!
name|d
operator|->
name|dirty
condition|)
return|return;
comment|// nothing to do
name|QStyleOptionTabWidgetFrameV2
name|option
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|option
argument_list|)
expr_stmt|;
comment|// this must be done immediately, because QWidgetItem relies on it (even if !isVisible())
name|d
operator|->
name|setLayoutItemMargins
argument_list|(
name|QStyle
operator|::
name|SE_TabWidgetLayoutItem
argument_list|,
operator|&
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|()
condition|)
block|{
name|d
operator|->
name|dirty
operator|=
literal|true
expr_stmt|;
return|return;
comment|// we'll do it later
block|}
name|QRect
name|tabRect
init|=
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabWidgetTabBar
argument_list|,
operator|&
name|option
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|d
operator|->
name|panelRect
operator|=
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabWidgetTabPane
argument_list|,
operator|&
name|option
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|QRect
name|contentsRect
init|=
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabWidgetTabContents
argument_list|,
operator|&
name|option
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|QRect
name|leftCornerRect
init|=
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabWidgetLeftCorner
argument_list|,
operator|&
name|option
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|QRect
name|rightCornerRect
init|=
name|style
argument_list|()
operator|->
name|subElementRect
argument_list|(
name|QStyle
operator|::
name|SE_TabWidgetRightCorner
argument_list|,
operator|&
name|option
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|d
operator|->
name|tabs
operator|->
name|setGeometry
argument_list|(
name|tabRect
argument_list|)
expr_stmt|;
name|d
operator|->
name|stack
operator|->
name|setGeometry
argument_list|(
name|contentsRect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|leftCornerWidget
condition|)
name|d
operator|->
name|leftCornerWidget
operator|->
name|setGeometry
argument_list|(
name|leftCornerRect
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|rightCornerWidget
condition|)
name|d
operator|->
name|rightCornerWidget
operator|->
name|setGeometry
argument_list|(
name|rightCornerRect
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|onlyCheck
condition|)
name|update
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|basicSize
specifier|static
specifier|inline
name|QSize
name|basicSize
parameter_list|(
name|bool
name|horizontal
parameter_list|,
specifier|const
name|QSize
modifier|&
name|lc
parameter_list|,
specifier|const
name|QSize
modifier|&
name|rc
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|,
specifier|const
name|QSize
modifier|&
name|t
parameter_list|)
block|{
return|return
name|horizontal
condition|?
name|QSize
argument_list|(
name|qMax
argument_list|(
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|t
operator|.
name|width
argument_list|()
operator|+
name|rc
operator|.
name|width
argument_list|()
operator|+
name|lc
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|s
operator|.
name|height
argument_list|()
operator|+
operator|(
name|qMax
argument_list|(
name|rc
operator|.
name|height
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|lc
operator|.
name|height
argument_list|()
argument_list|,
name|t
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
operator|)
argument_list|)
else|:
name|QSize
argument_list|(
name|s
operator|.
name|width
argument_list|()
operator|+
operator|(
name|qMax
argument_list|(
name|rc
operator|.
name|width
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|lc
operator|.
name|width
argument_list|()
argument_list|,
name|t
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
operator|)
argument_list|,
name|qMax
argument_list|(
name|s
operator|.
name|height
argument_list|()
argument_list|,
name|t
operator|.
name|height
argument_list|()
operator|+
name|rc
operator|.
name|height
argument_list|()
operator|+
name|lc
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QTabWidget
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
name|QSize
name|lc
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|,
name|rc
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QStyleOptionTabWidgetFrameV2
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|leftCornerWidget
condition|)
name|lc
operator|=
name|d
operator|->
name|leftCornerWidget
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|rightCornerWidget
condition|)
name|rc
operator|=
name|d
operator|->
name|rightCornerWidget
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|dirty
condition|)
block|{
name|QTabWidget
modifier|*
name|that
init|=
operator|(
name|QTabWidget
operator|*
operator|)
name|this
decl_stmt|;
name|that
operator|->
name|setUpLayout
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|QSize
name|s
argument_list|(
name|d
operator|->
name|stack
operator|->
name|sizeHint
argument_list|()
argument_list|)
decl_stmt|;
name|QSize
name|t
argument_list|(
name|d
operator|->
name|tabs
operator|->
name|sizeHint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|usesScrollButtons
argument_list|()
condition|)
name|t
operator|=
name|t
operator|.
name|boundedTo
argument_list|(
name|QSize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|boundedTo
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QSize
name|sz
init|=
name|basicSize
argument_list|(
name|d
operator|->
name|pos
operator|==
name|North
operator|||
name|d
operator|->
name|pos
operator|==
name|South
argument_list|,
name|lc
argument_list|,
name|rc
argument_list|,
name|s
argument_list|,
name|t
argument_list|)
decl_stmt|;
return|return
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_TabWidget
argument_list|,
operator|&
name|opt
argument_list|,
name|sz
argument_list|,
name|this
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp      Returns a suitable minimum size for the tab widget. */
end_comment
begin_function
DECL|function|minimumSizeHint
name|QSize
name|QTabWidget
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
name|QSize
name|lc
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|,
name|rc
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|leftCornerWidget
condition|)
name|lc
operator|=
name|d
operator|->
name|leftCornerWidget
operator|->
name|minimumSizeHint
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|rightCornerWidget
condition|)
name|rc
operator|=
name|d
operator|->
name|rightCornerWidget
operator|->
name|minimumSizeHint
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|dirty
condition|)
block|{
name|QTabWidget
modifier|*
name|that
init|=
operator|(
name|QTabWidget
operator|*
operator|)
name|this
decl_stmt|;
name|that
operator|->
name|setUpLayout
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|QSize
name|s
argument_list|(
name|d
operator|->
name|stack
operator|->
name|minimumSizeHint
argument_list|()
argument_list|)
decl_stmt|;
name|QSize
name|t
argument_list|(
name|d
operator|->
name|tabs
operator|->
name|minimumSizeHint
argument_list|()
argument_list|)
decl_stmt|;
name|QSize
name|sz
init|=
name|basicSize
argument_list|(
name|d
operator|->
name|pos
operator|==
name|North
operator|||
name|d
operator|->
name|pos
operator|==
name|South
argument_list|,
name|lc
argument_list|,
name|rc
argument_list|,
name|s
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|QStyleOptionTabWidgetFrameV2
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|palette
operator|=
name|palette
argument_list|()
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
return|return
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_TabWidget
argument_list|,
operator|&
name|opt
argument_list|,
name|sz
argument_list|,
name|this
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|heightForWidth
name|int
name|QTabWidget
operator|::
name|heightForWidth
parameter_list|(
name|int
name|width
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
name|QStyleOptionTabWidgetFrameV2
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
name|QSize
name|zero
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QSize
name|padding
init|=
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_TabWidget
argument_list|,
operator|&
name|opt
argument_list|,
name|zero
argument_list|,
name|this
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
decl_stmt|;
name|QSize
name|lc
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|,
name|rc
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|leftCornerWidget
condition|)
name|lc
operator|=
name|d
operator|->
name|leftCornerWidget
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|rightCornerWidget
condition|)
name|rc
operator|=
name|d
operator|->
name|rightCornerWidget
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|dirty
condition|)
block|{
name|QTabWidget
modifier|*
name|that
init|=
operator|(
name|QTabWidget
operator|*
operator|)
name|this
decl_stmt|;
name|that
operator|->
name|setUpLayout
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|QSize
name|t
argument_list|(
name|d
operator|->
name|tabs
operator|->
name|sizeHint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|usesScrollButtons
argument_list|()
condition|)
name|t
operator|=
name|t
operator|.
name|boundedTo
argument_list|(
name|QSize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|t
operator|=
name|t
operator|.
name|boundedTo
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|tabIsHorizontal
init|=
operator|(
name|d
operator|->
name|pos
operator|==
name|North
operator|||
name|d
operator|->
name|pos
operator|==
name|South
operator|)
decl_stmt|;
specifier|const
name|int
name|contentsWidth
init|=
name|width
operator|-
name|padding
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|stackWidth
init|=
name|contentsWidth
decl_stmt|;
if|if
condition|(
operator|!
name|tabIsHorizontal
condition|)
name|stackWidth
operator|-=
name|qMax
argument_list|(
name|t
operator|.
name|width
argument_list|()
argument_list|,
name|qMax
argument_list|(
name|lc
operator|.
name|width
argument_list|()
argument_list|,
name|rc
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|stackHeight
init|=
name|d
operator|->
name|stack
operator|->
name|heightForWidth
argument_list|(
name|stackWidth
argument_list|)
decl_stmt|;
name|QSize
name|s
argument_list|(
name|stackWidth
argument_list|,
name|stackHeight
argument_list|)
decl_stmt|;
name|QSize
name|contentSize
init|=
name|basicSize
argument_list|(
name|tabIsHorizontal
argument_list|,
name|lc
argument_list|,
name|rc
argument_list|,
name|s
argument_list|,
name|t
argument_list|)
decl_stmt|;
return|return
operator|(
name|contentSize
operator|+
name|padding
operator|)
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
operator|.
name|height
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|showEvent
name|void
name|QTabWidget
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
parameter_list|)
block|{
name|setUpLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateTabBarPosition
name|void
name|QTabWidgetPrivate
operator|::
name|updateTabBarPosition
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|pos
condition|)
block|{
case|case
name|QTabWidget
operator|::
name|North
case|:
name|tabs
operator|->
name|setShape
argument_list|(
name|shape
operator|==
name|QTabWidget
operator|::
name|Rounded
condition|?
name|QTabBar
operator|::
name|RoundedNorth
else|:
name|QTabBar
operator|::
name|TriangularNorth
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabWidget
operator|::
name|South
case|:
name|tabs
operator|->
name|setShape
argument_list|(
name|shape
operator|==
name|QTabWidget
operator|::
name|Rounded
condition|?
name|QTabBar
operator|::
name|RoundedSouth
else|:
name|QTabBar
operator|::
name|TriangularSouth
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabWidget
operator|::
name|West
case|:
name|tabs
operator|->
name|setShape
argument_list|(
name|shape
operator|==
name|QTabWidget
operator|::
name|Rounded
condition|?
name|QTabBar
operator|::
name|RoundedWest
else|:
name|QTabBar
operator|::
name|TriangularWest
argument_list|)
expr_stmt|;
break|break;
case|case
name|QTabWidget
operator|::
name|East
case|:
name|tabs
operator|->
name|setShape
argument_list|(
name|shape
operator|==
name|QTabWidget
operator|::
name|Rounded
condition|?
name|QTabBar
operator|::
name|RoundedEast
else|:
name|QTabBar
operator|::
name|TriangularEast
argument_list|)
expr_stmt|;
break|break;
block|}
name|q
operator|->
name|setUpLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabWidget::tabPosition     \brief the position of the tabs in this tab widget      Possible values for this property are described by the TabPosition     enum.      By default, this property is set to \l North.      \sa TabPosition */
end_comment
begin_function
DECL|function|tabPosition
name|QTabWidget
operator|::
name|TabPosition
name|QTabWidget
operator|::
name|tabPosition
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|pos
return|;
block|}
end_function
begin_function
DECL|function|setTabPosition
name|void
name|QTabWidget
operator|::
name|setTabPosition
parameter_list|(
name|TabPosition
name|pos
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pos
operator|==
name|pos
condition|)
return|return;
name|d
operator|->
name|pos
operator|=
name|pos
expr_stmt|;
name|d
operator|->
name|updateTabBarPosition
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabWidget::tabsClosable     \brief whether close buttons are automatically added to each tab.      \since 4.5      \sa QTabBar::tabsClosable() */
end_comment
begin_function
DECL|function|tabsClosable
name|bool
name|QTabWidget
operator|::
name|tabsClosable
parameter_list|()
specifier|const
block|{
return|return
name|tabBar
argument_list|()
operator|->
name|tabsClosable
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setTabsClosable
name|void
name|QTabWidget
operator|::
name|setTabsClosable
parameter_list|(
name|bool
name|closeable
parameter_list|)
block|{
if|if
condition|(
name|tabsClosable
argument_list|()
operator|==
name|closeable
condition|)
return|return;
name|tabBar
argument_list|()
operator|->
name|setTabsClosable
argument_list|(
name|closeable
argument_list|)
expr_stmt|;
if|if
condition|(
name|closeable
condition|)
name|connect
argument_list|(
name|tabBar
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|tabCloseRequested
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|tabCloseRequested
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|disconnect
argument_list|(
name|tabBar
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|tabCloseRequested
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|tabCloseRequested
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setUpLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabWidget::movable     \brief This property holds whether the user can move the tabs     within the tabbar area.      \since 4.5      By default, this property is false; */
end_comment
begin_function
DECL|function|isMovable
name|bool
name|QTabWidget
operator|::
name|isMovable
parameter_list|()
specifier|const
block|{
return|return
name|tabBar
argument_list|()
operator|->
name|isMovable
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMovable
name|void
name|QTabWidget
operator|::
name|setMovable
parameter_list|(
name|bool
name|movable
parameter_list|)
block|{
name|tabBar
argument_list|()
operator|->
name|setMovable
argument_list|(
name|movable
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabWidget::tabShape     \brief the shape of the tabs in this tab widget      Possible values for this property are QTabWidget::Rounded     (default) or QTabWidget::Triangular.      \sa TabShape */
end_comment
begin_function
DECL|function|tabShape
name|QTabWidget
operator|::
name|TabShape
name|QTabWidget
operator|::
name|tabShape
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|shape
return|;
block|}
end_function
begin_function
DECL|function|setTabShape
name|void
name|QTabWidget
operator|::
name|setTabShape
parameter_list|(
name|TabShape
name|s
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|shape
operator|==
name|s
condition|)
return|return;
name|d
operator|->
name|shape
operator|=
name|s
expr_stmt|;
name|d
operator|->
name|updateTabBarPosition
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|event
name|bool
name|QTabWidget
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|ev
parameter_list|)
block|{
if|if
condition|(
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LayoutRequest
condition|)
name|setUpLayout
argument_list|()
expr_stmt|;
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|ev
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QTabWidget
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|ev
parameter_list|)
block|{
if|if
condition|(
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StyleChange
ifdef|#
directive|ifdef
name|Q_WS_MAC
operator|||
name|ev
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MacSizeChange
endif|#
directive|endif
condition|)
name|setUpLayout
argument_list|()
expr_stmt|;
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|ev
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QTabWidget
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Tab
operator|||
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Backtab
operator|)
operator|&&
name|count
argument_list|()
operator|>
literal|1
operator|&&
name|e
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ControlModifier
operator|)
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
operator|||
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Left
operator|||
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Right
operator|)
operator|&&
name|count
argument_list|()
operator|>
literal|1
endif|#
directive|endif
condition|)
block|{
name|int
name|pageCount
init|=
name|d
operator|->
name|tabs
operator|->
name|count
argument_list|()
decl_stmt|;
name|int
name|page
init|=
name|currentIndex
argument_list|()
decl_stmt|;
name|int
name|dx
init|=
operator|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Backtab
operator|||
name|e
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ShiftModifier
operator|)
condition|?
operator|-
literal|1
else|:
literal|1
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Left
operator|||
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Right
operator|)
condition|)
name|dx
operator|=
name|e
operator|->
name|key
argument_list|()
operator|==
operator|(
name|isRightToLeft
argument_list|()
condition|?
name|Qt
operator|::
name|Key_Right
else|:
name|Qt
operator|::
name|Key_Left
operator|)
condition|?
operator|-
literal|1
else|:
literal|1
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
name|pageCount
condition|;
operator|++
name|pass
control|)
block|{
name|page
operator|+=
name|dx
expr_stmt|;
if|if
condition|(
name|page
operator|<
literal|0
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
operator|&&
operator|!
name|e
operator|->
name|isAutoRepeat
argument_list|()
endif|#
directive|endif
condition|)
block|{
name|page
operator|=
name|count
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|page
operator|>=
name|pageCount
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
operator|&&
operator|!
name|e
operator|->
name|isAutoRepeat
argument_list|()
endif|#
directive|endif
condition|)
block|{
name|page
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|tabs
operator|->
name|isTabEnabled
argument_list|(
name|page
argument_list|)
condition|)
block|{
name|setCurrentIndex
argument_list|(
name|page
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|QApplication
operator|::
name|focusWidget
argument_list|()
condition|)
name|d
operator|->
name|tabs
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the tab page at index position \a index or 0 if the \a     index is out of range. */
end_comment
begin_function
DECL|function|widget
name|QWidget
modifier|*
name|QTabWidget
operator|::
name|widget
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|stack
operator|->
name|widget
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QTabWidget::count     \brief the number of tabs in the tab bar      By default, this property contains a value of 0. */
end_comment
begin_function
DECL|function|count
name|int
name|QTabWidget
operator|::
name|count
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tabs
operator|->
name|count
argument_list|()
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
end_ifndef
begin_comment
comment|/*!     Sets the tab tool tip for the page at position \a index to \a tip.      \sa  tabToolTip() */
end_comment
begin_function
DECL|function|setTabToolTip
name|void
name|QTabWidget
operator|::
name|setTabToolTip
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QString
modifier|&
name|tip
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tabs
operator|->
name|setTabToolTip
argument_list|(
name|index
argument_list|,
name|tip
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the tab tool tip for the page at position \a index or     an empty string if no tool tip has been set.      \sa setTabToolTip() */
end_comment
begin_function
DECL|function|tabToolTip
name|QString
name|QTabWidget
operator|::
name|tabToolTip
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tabs
operator|->
name|tabToolTip
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLTIP
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
end_ifndef
begin_comment
comment|/*!     \since 4.1      Sets the What's This help text for the page at position \a index     to \a text. */
end_comment
begin_function
DECL|function|setTabWhatsThis
name|void
name|QTabWidget
operator|::
name|setTabWhatsThis
parameter_list|(
name|int
name|index
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tabs
operator|->
name|setTabWhatsThis
argument_list|(
name|index
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Returns the What's This help text for the page at position \a index,     or an empty string if no help text has been set. */
end_comment
begin_function
DECL|function|tabWhatsThis
name|QString
name|QTabWidget
operator|::
name|tabWhatsThis
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tabs
operator|->
name|tabWhatsThis
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_WHATSTHIS
end_comment
begin_comment
comment|/*!   This virtual handler is called after a new tab was added or   inserted at position \a index.    \sa tabRemoved()  */
end_comment
begin_function
DECL|function|tabInserted
name|void
name|QTabWidget
operator|::
name|tabInserted
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|index
argument_list|)
block|}
end_function
begin_comment
comment|/*!   This virtual handler is called after a tab was removed from   position \a index.    \sa tabInserted()  */
end_comment
begin_function
DECL|function|tabRemoved
name|void
name|QTabWidget
operator|::
name|tabRemoved
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|index
argument_list|)
block|}
end_function
begin_comment
comment|/*!     \fn void QTabWidget::paintEvent(QPaintEvent *event)      Paints the tab widget's tab bar in response to the paint \a event. */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QTabWidget
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|documentMode
argument_list|()
condition|)
block|{
name|QStylePainter
name|p
argument_list|(
name|this
argument_list|,
name|tabBar
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopLeftCorner
argument_list|)
condition|)
block|{
name|QStyleOptionTabBarBaseV2
name|opt
decl_stmt|;
name|QTabBarPrivate
operator|::
name|initStyleBaseOption
argument_list|(
operator|&
name|opt
argument_list|,
name|tabBar
argument_list|()
argument_list|,
name|w
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|opt
operator|.
name|rect
operator|.
name|moveLeft
argument_list|(
name|w
operator|->
name|x
argument_list|()
operator|+
name|opt
operator|.
name|rect
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|opt
operator|.
name|rect
operator|.
name|moveTop
argument_list|(
name|w
operator|->
name|y
argument_list|()
operator|+
name|opt
operator|.
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameTabBarBase
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|cornerWidget
argument_list|(
name|Qt
operator|::
name|TopRightCorner
argument_list|)
condition|)
block|{
name|QStyleOptionTabBarBaseV2
name|opt
decl_stmt|;
name|QTabBarPrivate
operator|::
name|initStyleBaseOption
argument_list|(
operator|&
name|opt
argument_list|,
name|tabBar
argument_list|()
argument_list|,
name|w
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|opt
operator|.
name|rect
operator|.
name|moveLeft
argument_list|(
name|w
operator|->
name|x
argument_list|()
operator|+
name|opt
operator|.
name|rect
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|opt
operator|.
name|rect
operator|.
name|moveTop
argument_list|(
name|w
operator|->
name|y
argument_list|()
operator|+
name|opt
operator|.
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameTabBarBase
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|QStylePainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QStyleOptionTabWidgetFrameV2
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|rect
operator|=
name|d
operator|->
name|panelRect
expr_stmt|;
name|p
operator|.
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameTabWidget
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabWidget::iconSize     \brief The size for icons in the tab bar     \since 4.2      The default value is style-dependent. This is the maximum size     that the icons will have. Icons are not scaled up if they are of     smaller size.      \sa QTabBar::iconSize */
end_comment
begin_function
DECL|function|iconSize
name|QSize
name|QTabWidget
operator|::
name|iconSize
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|tabs
operator|->
name|iconSize
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setIconSize
name|void
name|QTabWidget
operator|::
name|setIconSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|tabs
operator|->
name|setIconSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabWidget::elideMode     \brief how to elide text in the tab bar     \since 4.2      This property controls how items are elided when there is not     enough space to show them for a given tab bar size.      By default the value is style dependant.      \sa QTabBar::elideMode usesScrollButtons QStyle::SH_TabBar_ElideMode */
end_comment
begin_function
DECL|function|elideMode
name|Qt
operator|::
name|TextElideMode
name|QTabWidget
operator|::
name|elideMode
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|tabs
operator|->
name|elideMode
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setElideMode
name|void
name|QTabWidget
operator|::
name|setElideMode
parameter_list|(
name|Qt
operator|::
name|TextElideMode
name|mode
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|tabs
operator|->
name|setElideMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabWidget::usesScrollButtons     \brief Whether or not a tab bar should use buttons to scroll tabs when it     has many tabs.     \since 4.2      When there are too many tabs in a tab bar for its size, the tab bar can either choose     to expand its size or to add buttons that allow you to scroll through the tabs.      By default the value is style dependant.      \sa elideMode QTabBar::usesScrollButtons QStyle::SH_TabBar_PreferNoArrows */
end_comment
begin_function
DECL|function|usesScrollButtons
name|bool
name|QTabWidget
operator|::
name|usesScrollButtons
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|tabs
operator|->
name|usesScrollButtons
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setUsesScrollButtons
name|void
name|QTabWidget
operator|::
name|setUsesScrollButtons
parameter_list|(
name|bool
name|useButtons
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|tabs
operator|->
name|setUsesScrollButtons
argument_list|(
name|useButtons
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QTabWidget::documentMode     \brief Whether or not the tab widget is rendered in a mode suitable for document      pages. This is the same as document mode on Mac OS X.     \since 4.5      When this property is set the tab widget frame is not rendered. This mode is useful     for showing document-type pages where the page covers most of the tab widget     area.      \sa elideMode, QTabBar::documentMode, QTabBar::usesScrollButtons, QStyle::SH_TabBar_PreferNoArrows */
end_comment
begin_function
DECL|function|documentMode
name|bool
name|QTabWidget
operator|::
name|documentMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QTabWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tabs
operator|->
name|documentMode
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setDocumentMode
name|void
name|QTabWidget
operator|::
name|setDocumentMode
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|tabs
operator|->
name|setDocumentMode
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|d
operator|->
name|tabs
operator|->
name|setExpanding
argument_list|(
operator|!
name|enabled
argument_list|)
expr_stmt|;
name|d
operator|->
name|tabs
operator|->
name|setDrawBase
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|setUpLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes all the pages, but does not delete them. Calling this function     is equivalent to calling removeTab() until the tab widget is empty. */
end_comment
begin_function
DECL|function|clear
name|void
name|QTabWidget
operator|::
name|clear
parameter_list|()
block|{
comment|// ### optimize by introduce QStackedLayout::clear()
while|while
condition|(
name|count
argument_list|()
condition|)
name|removeTab
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QTabWidget::insertTab(QWidget *widget, const QString&label, int index)      Use insertTab(index, widget, label) instead. */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::insertTab(QWidget *widget, const QIcon& icon, const QString&label, int index)      Use insertTab(index, widget, icon, label) instead. */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::changeTab(QWidget *widget, const QString&label)      Use setTabText() instead.  */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::changeTab(QWidget *widget, const QIcon& icon, const QString&label)      Use setTabText() and setTabIcon() instead. */
end_comment
begin_comment
comment|/*!     \fn bool QTabWidget::isTabEnabled( QWidget *widget) const      Use isTabEnabled(tabWidget->indexOf(widget)) instead. */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::setTabEnabled(QWidget *widget, bool b)      Use setTabEnabled(tabWidget->indexOf(widget), b) instead. */
end_comment
begin_comment
comment|/*!     \fn QString QTabWidget::tabLabel(QWidget *widget) const      Use tabText(tabWidget->indexOf(widget)) instead. */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::setTabLabel(QWidget *widget, const QString&label)      Use setTabText(tabWidget->indexOf(widget), label) instead. */
end_comment
begin_comment
comment|/*!     \fn QIcon QTabWidget::tabIconSet(QWidget * widget) const      Use tabIcon(tabWidget->indexOf(widget)) instead. */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::setTabIconSet(QWidget * widget, const QIcon& icon)      Use setTabIcon(tabWidget->indexOf(widget), icon) instead. */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::removeTabToolTip(QWidget * widget)      Use setTabToolTip(tabWidget->indexOf(widget), QString()) instead. */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::setTabToolTip(QWidget * widget, const QString& tip)      Use setTabToolTip(tabWidget->indexOf(widget), tip) instead. */
end_comment
begin_comment
comment|/*!     \fn QString QTabWidget::tabToolTip(QWidget * widget) const      Use tabToolTip(tabWidget->indexOf(widget)) instead. */
end_comment
begin_comment
comment|/*!     \fn QWidget * QTabWidget::currentPage() const      Use currentWidget() instead. */
end_comment
begin_comment
comment|/*!     \fn QWidget *QTabWidget::page(int index) const      Use widget() instead. */
end_comment
begin_comment
comment|/*!     \fn QString QTabWidget::label(int index) const      Use tabText() instead. */
end_comment
begin_comment
comment|/*!     \fn int QTabWidget::currentPageIndex() const      Use currentIndex() instead. */
end_comment
begin_comment
comment|/*!     \fn int QTabWidget::margin() const      This function is kept only to make old code compile.     This functionality is no longer supported by QTabWidget.      \sa contentsRect(), setContentsMargins() */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::setMargin(int margin)      This function is kept only to make old code compile.     This functionality is no longer supported by QTabWidget.      \sa contentsRect(), setContentsMargins() */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::setCurrentPage(int index)      Use setCurrentIndex() instead. */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::showPage(QWidget *widget)      Use setCurrentIndex(indexOf(widget)) instead. */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::removePage(QWidget *widget)      Use removeTab(indexOf(widget)) instead. */
end_comment
begin_comment
comment|/*!     \fn void QTabWidget::currentChanged(QWidget *widget)      Use currentChanged(int) instead. */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qtabwidget.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_TABWIDGET
end_comment
end_unit
