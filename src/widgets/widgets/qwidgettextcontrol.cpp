begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwidgettextcontrol_p.h"
end_include
begin_include
include|#
directive|include
file|"qwidgettextcontrol_p_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEXTCONTROL
end_ifndef
begin_include
include|#
directive|include
file|<qfont.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qdrag.h>
end_include
begin_include
include|#
directive|include
file|<qclipboard.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qtimer.h>
end_include
begin_include
include|#
directive|include
file|"private/qtextdocumentlayout_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qabstracttextdocumentlayout_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qtextedit_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextdocument.h"
end_include
begin_include
include|#
directive|include
file|"private/qtextdocument_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextlist.h"
end_include
begin_include
include|#
directive|include
file|"private/qwidgettextcontrol_p.h"
end_include
begin_include
include|#
directive|include
file|"qgraphicssceneevent.h"
end_include
begin_include
include|#
directive|include
file|"qpagedpaintdevice.h"
end_include
begin_include
include|#
directive|include
file|"private/qpagedpaintdevice_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextdocumentwriter.h"
end_include
begin_include
include|#
directive|include
file|"private/qtextcursor_p.h"
end_include
begin_include
include|#
directive|include
file|<qtextformat.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qbuffer.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<qtexttable.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qurl.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopservices.h>
end_include
begin_include
include|#
directive|include
file|<qinputcontext.h>
end_include
begin_include
include|#
directive|include
file|<qtooltip.h>
end_include
begin_include
include|#
directive|include
file|<qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qlineedit.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
end_ifndef
begin_include
include|#
directive|include
file|"private/qapplication_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qshortcutmap_p.h"
end_include
begin_include
include|#
directive|include
file|<qkeysequence.h>
end_include
begin_define
DECL|macro|ACCEL_KEY
define|#
directive|define
name|ACCEL_KEY
parameter_list|(
name|k
parameter_list|)
value|(!qApp->d_func()->shortcutMap.hasShortcutForKeySequence(k) ? QLatin1Char('\t') + QString(QKeySequence(k)) : QString())
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|ACCEL_KEY
define|#
directive|define
name|ACCEL_KEY
parameter_list|(
name|k
parameter_list|)
value|QString()
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
specifier|extern
name|bool
name|qt_use_rtl_extensions
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// could go into QTextCursor...
end_comment
begin_function
DECL|function|currentTextLine
specifier|static
name|QTextLine
name|currentTextLine
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|cursor
parameter_list|)
block|{
specifier|const
name|QTextBlock
name|block
init|=
name|cursor
operator|.
name|block
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|block
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QTextLine
argument_list|()
return|;
specifier|const
name|QTextLayout
modifier|*
name|layout
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|layout
condition|)
return|return
name|QTextLine
argument_list|()
return|;
specifier|const
name|int
name|relativePos
init|=
name|cursor
operator|.
name|position
argument_list|()
operator|-
name|block
operator|.
name|position
argument_list|()
decl_stmt|;
return|return
name|layout
operator|->
name|lineForTextPosition
argument_list|(
name|relativePos
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|QWidgetTextControlPrivate
name|QWidgetTextControlPrivate
operator|::
name|QWidgetTextControlPrivate
parameter_list|()
member_init_list|:
name|doc
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cursorOn
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|cursorIsFocusIndicator
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|interactionFlags
argument_list|(
name|Qt
operator|::
name|TextEditorInteraction
argument_list|)
member_init_list|,
name|dragEnabled
argument_list|(
literal|true
argument_list|)
member_init_list|,
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|mousePressed
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mightStartDrag
argument_list|(
literal|false
argument_list|)
member_init_list|,
endif|#
directive|endif
name|lastSelectionPosition
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|lastSelectionAnchor
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|ignoreAutomaticScrollbarAdjustement
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|overwriteMode
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|acceptRichText
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|preeditCursor
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hideCursor
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|hasFocus
argument_list|(
literal|false
argument_list|)
member_init_list|,
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
name|hasEditFocus
argument_list|(
literal|false
argument_list|)
member_init_list|,
endif|#
directive|endif
name|isEnabled
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|hadSelectionOnMousePress
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|ignoreUnusedNavigationEvents
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|openExternalLinks
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|wordSelectionEnabled
argument_list|(
literal|false
argument_list|)
block|{}
end_constructor
begin_function
DECL|function|cursorMoveKeyEvent
name|bool
name|QWidgetTextControlPrivate
operator|::
name|cursorMoveKeyEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_SHORTCUT
name|Q_UNUSED
argument_list|(
name|e
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|cursor
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|const
name|QTextCursor
name|oldSelection
init|=
name|cursor
decl_stmt|;
specifier|const
name|int
name|oldCursorPos
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|QTextCursor
operator|::
name|MoveMode
name|mode
init|=
name|QTextCursor
operator|::
name|MoveAnchor
decl_stmt|;
name|QTextCursor
operator|::
name|MoveOperation
name|op
init|=
name|QTextCursor
operator|::
name|NoMove
decl_stmt|;
if|if
condition|(
literal|false
condition|)
block|{     }
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToNextChar
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|Right
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToPreviousChar
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|Left
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectNextChar
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|Right
expr_stmt|;
name|mode
operator|=
name|QTextCursor
operator|::
name|KeepAnchor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectPreviousChar
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|Left
expr_stmt|;
name|mode
operator|=
name|QTextCursor
operator|::
name|KeepAnchor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectNextWord
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|WordRight
expr_stmt|;
name|mode
operator|=
name|QTextCursor
operator|::
name|KeepAnchor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectPreviousWord
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|WordLeft
expr_stmt|;
name|mode
operator|=
name|QTextCursor
operator|::
name|KeepAnchor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectStartOfLine
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|StartOfLine
expr_stmt|;
name|mode
operator|=
name|QTextCursor
operator|::
name|KeepAnchor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectEndOfLine
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|EndOfLine
expr_stmt|;
name|mode
operator|=
name|QTextCursor
operator|::
name|KeepAnchor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectStartOfBlock
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|StartOfBlock
expr_stmt|;
name|mode
operator|=
name|QTextCursor
operator|::
name|KeepAnchor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectEndOfBlock
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|EndOfBlock
expr_stmt|;
name|mode
operator|=
name|QTextCursor
operator|::
name|KeepAnchor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectStartOfDocument
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|Start
expr_stmt|;
name|mode
operator|=
name|QTextCursor
operator|::
name|KeepAnchor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectEndOfDocument
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|End
expr_stmt|;
name|mode
operator|=
name|QTextCursor
operator|::
name|KeepAnchor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectPreviousLine
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|Up
expr_stmt|;
name|mode
operator|=
name|QTextCursor
operator|::
name|KeepAnchor
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectNextLine
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|Down
expr_stmt|;
name|mode
operator|=
name|QTextCursor
operator|::
name|KeepAnchor
expr_stmt|;
block|{
name|QTextBlock
name|block
init|=
name|cursor
operator|.
name|block
argument_list|()
decl_stmt|;
name|QTextLine
name|line
init|=
name|currentTextLine
argument_list|(
name|cursor
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|block
operator|.
name|next
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
name|line
operator|.
name|isValid
argument_list|()
operator|&&
name|line
operator|.
name|lineNumber
argument_list|()
operator|==
name|block
operator|.
name|layout
argument_list|()
operator|->
name|lineCount
argument_list|()
operator|-
literal|1
condition|)
name|op
operator|=
name|QTextCursor
operator|::
name|End
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToNextWord
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|WordRight
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToPreviousWord
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|WordLeft
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToEndOfBlock
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|EndOfBlock
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToStartOfBlock
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|StartOfBlock
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToNextLine
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|Down
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToPreviousLine
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|Up
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToPreviousLine
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|Up
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToStartOfLine
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|StartOfLine
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToEndOfLine
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|EndOfLine
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToStartOfDocument
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|Start
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToEndOfDocument
condition|)
block|{
name|op
operator|=
name|QTextCursor
operator|::
name|End
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_SHORTCUT
else|else
block|{
return|return
literal|false
return|;
block|}
comment|// Except for pageup and pagedown, Mac OS X has very different behavior, we don't do it all, but
comment|// here's the breakdown:
comment|// Shift still works as an anchor, but only one of the other keys can be down Ctrl (Command),
comment|// Alt (Option), or Meta (Control).
comment|// Command/Control + Left/Right -- Move to left or right of the line
comment|//                 + Up/Down -- Move to top bottom of the file. (Control doesn't move the cursor)
comment|// Option + Left/Right -- Move one word Left/right.
comment|//        + Up/Down  -- Begin/End of Paragraph.
comment|// Home/End Top/Bottom of file. (usually don't move the cursor, but will select)
name|bool
name|visualNavigation
init|=
name|cursor
operator|.
name|visualNavigation
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setVisualNavigation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|moved
init|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|op
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|setVisualNavigation
argument_list|(
name|visualNavigation
argument_list|)
expr_stmt|;
name|q
operator|->
name|ensureCursorVisible
argument_list|()
expr_stmt|;
name|bool
name|ignoreNavigationEvents
init|=
name|ignoreUnusedNavigationEvents
decl_stmt|;
name|bool
name|isNavigationEvent
init|=
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Up
operator|||
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Down
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
name|ignoreNavigationEvents
operator|=
name|ignoreNavigationEvents
operator|||
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
expr_stmt|;
name|isNavigationEvent
operator|=
name|isNavigationEvent
operator|||
operator|(
name|QApplication
operator|::
name|navigationMode
argument_list|()
operator|==
name|Qt
operator|::
name|NavigationModeKeypadDirectional
operator|&&
operator|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Left
operator|||
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Right
operator|)
operator|)
expr_stmt|;
else|#
directive|else
name|isNavigationEvent
operator|=
name|isNavigationEvent
operator|||
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Left
operator|||
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Right
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|moved
condition|)
block|{
if|if
condition|(
name|cursor
operator|.
name|position
argument_list|()
operator|!=
name|oldCursorPos
condition|)
emit|emit
name|q
operator|->
name|cursorPositionChanged
argument_list|()
emit|;
emit|emit
name|q
operator|->
name|microFocusChanged
argument_list|()
emit|;
block|}
elseif|else
if|if
condition|(
name|ignoreNavigationEvents
operator|&&
name|isNavigationEvent
operator|&&
name|oldSelection
operator|.
name|anchor
argument_list|()
operator|==
name|cursor
operator|.
name|anchor
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|selectionChanged
argument_list|(
comment|/*forceEmitSelectionChanged =*/
operator|(
name|mode
operator|==
name|QTextCursor
operator|::
name|KeepAnchor
operator|)
argument_list|)
expr_stmt|;
name|repaintOldAndNewSelection
argument_list|(
name|oldSelection
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|updateCurrentCharFormat
name|void
name|QWidgetTextControlPrivate
operator|::
name|updateCurrentCharFormat
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
init|=
name|cursor
operator|.
name|charFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|fmt
operator|==
name|lastCharFormat
condition|)
return|return;
name|lastCharFormat
operator|=
name|fmt
expr_stmt|;
emit|emit
name|q
operator|->
name|currentCharFormatChanged
argument_list|(
name|fmt
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|microFocusChanged
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|indent
name|void
name|QWidgetTextControlPrivate
operator|::
name|indent
parameter_list|()
block|{
name|QTextBlockFormat
name|blockFmt
init|=
name|cursor
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|list
condition|)
block|{
name|QTextBlockFormat
name|modifier
decl_stmt|;
name|modifier
operator|.
name|setIndent
argument_list|(
name|blockFmt
operator|.
name|indent
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeBlockFormat
argument_list|(
name|modifier
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QTextListFormat
name|format
init|=
name|list
operator|->
name|format
argument_list|()
decl_stmt|;
name|format
operator|.
name|setIndent
argument_list|(
name|format
operator|.
name|indent
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|->
name|itemNumber
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
argument_list|)
operator|==
literal|1
condition|)
name|list
operator|->
name|setFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
else|else
name|cursor
operator|.
name|createList
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|outdent
name|void
name|QWidgetTextControlPrivate
operator|::
name|outdent
parameter_list|()
block|{
name|QTextBlockFormat
name|blockFmt
init|=
name|cursor
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|list
condition|)
block|{
name|QTextBlockFormat
name|modifier
decl_stmt|;
name|modifier
operator|.
name|setIndent
argument_list|(
name|blockFmt
operator|.
name|indent
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeBlockFormat
argument_list|(
name|modifier
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QTextListFormat
name|listFmt
init|=
name|list
operator|->
name|format
argument_list|()
decl_stmt|;
name|listFmt
operator|.
name|setIndent
argument_list|(
name|listFmt
operator|.
name|indent
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|list
operator|->
name|setFormat
argument_list|(
name|listFmt
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|gotoNextTableCell
name|void
name|QWidgetTextControlPrivate
operator|::
name|gotoNextTableCell
parameter_list|()
block|{
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|cursor
argument_list|)
decl_stmt|;
name|int
name|newColumn
init|=
name|cell
operator|.
name|column
argument_list|()
operator|+
name|cell
operator|.
name|columnSpan
argument_list|()
decl_stmt|;
name|int
name|newRow
init|=
name|cell
operator|.
name|row
argument_list|()
decl_stmt|;
if|if
condition|(
name|newColumn
operator|>=
name|table
operator|->
name|columns
argument_list|()
condition|)
block|{
name|newColumn
operator|=
literal|0
expr_stmt|;
operator|++
name|newRow
expr_stmt|;
if|if
condition|(
name|newRow
operator|>=
name|table
operator|->
name|rows
argument_list|()
condition|)
name|table
operator|->
name|insertRows
argument_list|(
name|table
operator|->
name|rows
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|cell
operator|=
name|table
operator|->
name|cellAt
argument_list|(
name|newRow
argument_list|,
name|newColumn
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|cell
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|gotoPreviousTableCell
name|void
name|QWidgetTextControlPrivate
operator|::
name|gotoPreviousTableCell
parameter_list|()
block|{
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|QTextTableCell
name|cell
init|=
name|table
operator|->
name|cellAt
argument_list|(
name|cursor
argument_list|)
decl_stmt|;
name|int
name|newColumn
init|=
name|cell
operator|.
name|column
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|newRow
init|=
name|cell
operator|.
name|row
argument_list|()
decl_stmt|;
if|if
condition|(
name|newColumn
operator|<
literal|0
condition|)
block|{
name|newColumn
operator|=
name|table
operator|->
name|columns
argument_list|()
operator|-
literal|1
expr_stmt|;
operator|--
name|newRow
expr_stmt|;
if|if
condition|(
name|newRow
operator|<
literal|0
condition|)
return|return;
block|}
name|cell
operator|=
name|table
operator|->
name|cellAt
argument_list|(
name|newRow
argument_list|,
name|newColumn
argument_list|)
expr_stmt|;
name|cursor
operator|=
name|cell
operator|.
name|firstCursorPosition
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createAutoBulletList
name|void
name|QWidgetTextControlPrivate
operator|::
name|createAutoBulletList
parameter_list|()
block|{
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|blockFmt
init|=
name|cursor
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QTextListFormat
name|listFmt
decl_stmt|;
name|listFmt
operator|.
name|setStyle
argument_list|(
name|QTextListFormat
operator|::
name|ListDisc
argument_list|)
expr_stmt|;
name|listFmt
operator|.
name|setIndent
argument_list|(
name|blockFmt
operator|.
name|indent
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|blockFmt
operator|.
name|setIndent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockFormat
argument_list|(
name|blockFmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|createList
argument_list|(
name|listFmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|QWidgetTextControlPrivate
operator|::
name|init
parameter_list|(
name|Qt
operator|::
name|TextFormat
name|format
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QTextDocument
modifier|*
name|document
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|setContent
argument_list|(
name|format
argument_list|,
name|text
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setUndoRedoEnabled
argument_list|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
argument_list|)
expr_stmt|;
name|q
operator|->
name|setCursorWidth
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setContent
name|void
name|QWidgetTextControlPrivate
operator|::
name|setContent
parameter_list|(
name|Qt
operator|::
name|TextFormat
name|format
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QTextDocument
modifier|*
name|document
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
comment|// for use when called from setPlainText. we may want to re-use the currently
comment|// set char format then.
specifier|const
name|QTextCharFormat
name|charFormatForInsertion
init|=
name|cursor
operator|.
name|charFormat
argument_list|()
decl_stmt|;
name|bool
name|clearDocument
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|doc
condition|)
block|{
if|if
condition|(
name|document
condition|)
block|{
name|doc
operator|=
name|document
expr_stmt|;
name|clearDocument
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|palette
operator|=
name|QApplication
operator|::
name|palette
argument_list|(
literal|"QWidgetTextControl"
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|QTextDocument
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
name|_q_documentLayoutChanged
argument_list|()
expr_stmt|;
name|cursor
operator|=
name|QTextCursor
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// ####        doc->documentLayout()->setPaintDevice(viewport);
name|QObject
operator|::
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|contentsChanged
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_updateCurrentCharFormatAndSelection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|(
name|QTextCursor
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_emitCursorPosChanged
argument_list|(
name|QTextCursor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|documentLayoutChanged
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_documentLayoutChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// convenience signal forwards
name|QObject
operator|::
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|undoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|undoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|redoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|redoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|modificationChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|modificationChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|blockCountChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|blockCountChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bool
name|previousUndoRedoState
init|=
name|doc
operator|->
name|isUndoRedoEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|document
condition|)
name|doc
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//Saving the index save some time.
specifier|static
name|int
name|contentsChangedIndex
init|=
name|QTextDocument
operator|::
name|staticMetaObject
operator|.
name|indexOfSignal
argument_list|(
literal|"contentsChanged()"
argument_list|)
decl_stmt|;
specifier|static
name|int
name|textChangedIndex
init|=
name|QWidgetTextControl
operator|::
name|staticMetaObject
operator|.
name|indexOfSignal
argument_list|(
literal|"textChanged()"
argument_list|)
decl_stmt|;
comment|// avoid multiple textChanged() signals being emitted
name|QMetaObject
operator|::
name|disconnect
argument_list|(
name|doc
argument_list|,
name|contentsChangedIndex
argument_list|,
name|q
argument_list|,
name|textChangedIndex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// clear 'our' cursor for insertion to prevent
comment|// the emission of the cursorPositionChanged() signal.
comment|// instead we emit it only once at the end instead of
comment|// at the end of the document after loading and when
comment|// positioning the cursor again to the start of the
comment|// document.
name|cursor
operator|=
name|QTextCursor
argument_list|()
expr_stmt|;
if|if
condition|(
name|format
operator|==
name|Qt
operator|::
name|PlainText
condition|)
block|{
name|QTextCursor
name|formatCursor
argument_list|(
name|doc
argument_list|)
decl_stmt|;
comment|// put the setPlainText and the setCharFormat into one edit block,
comment|// so that the syntax highlight triggers only /once/ for the entire
comment|// document, not twice.
name|formatCursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|doc
operator|->
name|setPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|formatCursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|Document
argument_list|)
expr_stmt|;
name|formatCursor
operator|.
name|setCharFormat
argument_list|(
name|charFormatForInsertion
argument_list|)
expr_stmt|;
name|formatCursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
ifndef|#
directive|ifndef
name|QT_NO_TEXTHTMLPARSER
name|doc
operator|->
name|setHtml
argument_list|(
name|text
argument_list|)
expr_stmt|;
else|#
directive|else
name|doc
operator|->
name|setPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|doc
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|cursor
operator|=
name|QTextCursor
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clearDocument
condition|)
block|{
name|doc
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
name|cursor
operator|.
name|setCharFormat
argument_list|(
name|charFormatForInsertion
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|connect
argument_list|(
name|doc
argument_list|,
name|contentsChangedIndex
argument_list|,
name|q
argument_list|,
name|textChangedIndex
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|textChanged
argument_list|()
emit|;
if|if
condition|(
operator|!
name|document
condition|)
name|doc
operator|->
name|setUndoRedoEnabled
argument_list|(
name|previousUndoRedoState
argument_list|)
expr_stmt|;
name|_q_updateCurrentCharFormatAndSelection
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|document
condition|)
name|doc
operator|->
name|setModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|ensureCursorVisible
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|cursorPositionChanged
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|startDrag
name|void
name|QWidgetTextControlPrivate
operator|::
name|startDrag
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|mousePressed
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|contextWidget
condition|)
return|return;
name|QMimeData
modifier|*
name|data
init|=
name|q
operator|->
name|createMimeDataFromSelection
argument_list|()
decl_stmt|;
name|QDrag
modifier|*
name|drag
init|=
operator|new
name|QDrag
argument_list|(
name|contextWidget
argument_list|)
decl_stmt|;
name|drag
operator|->
name|setMimeData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|DropActions
name|actions
init|=
name|Qt
operator|::
name|CopyAction
decl_stmt|;
name|Qt
operator|::
name|DropAction
name|action
decl_stmt|;
if|if
condition|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
condition|)
block|{
name|actions
operator||=
name|Qt
operator|::
name|MoveAction
expr_stmt|;
name|action
operator|=
name|drag
operator|->
name|exec
argument_list|(
name|actions
argument_list|,
name|Qt
operator|::
name|MoveAction
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|drag
operator|->
name|exec
argument_list|(
name|actions
argument_list|,
name|Qt
operator|::
name|CopyAction
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|==
name|Qt
operator|::
name|MoveAction
operator|&&
name|drag
operator|->
name|target
argument_list|()
operator|!=
name|contextWidget
condition|)
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setCursorPosition
name|void
name|QWidgetTextControlPrivate
operator|::
name|setCursorPosition
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
specifier|const
name|int
name|cursorPos
init|=
name|q
operator|->
name|hitTest
argument_list|(
name|pos
argument_list|,
name|Qt
operator|::
name|FuzzyHit
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursorPos
operator|==
operator|-
literal|1
condition|)
return|return;
name|cursor
operator|.
name|setPosition
argument_list|(
name|cursorPos
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCursorPosition
name|void
name|QWidgetTextControlPrivate
operator|::
name|setCursorPosition
parameter_list|(
name|int
name|pos
parameter_list|,
name|QTextCursor
operator|::
name|MoveMode
name|mode
parameter_list|)
block|{
name|cursor
operator|.
name|setPosition
argument_list|(
name|pos
argument_list|,
name|mode
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|!=
name|QTextCursor
operator|::
name|KeepAnchor
condition|)
block|{
name|selectedWordOnDoubleClick
operator|=
name|QTextCursor
argument_list|()
expr_stmt|;
name|selectedBlockOnTrippleClick
operator|=
name|QTextCursor
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|repaintCursor
name|void
name|QWidgetTextControlPrivate
operator|::
name|repaintCursor
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|updateRequest
argument_list|(
name|cursorRectPlusUnicodeDirectionMarkers
argument_list|(
name|cursor
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|repaintOldAndNewSelection
name|void
name|QWidgetTextControlPrivate
operator|::
name|repaintOldAndNewSelection
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|oldSelection
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|cursor
operator|.
name|hasSelection
argument_list|()
operator|&&
name|oldSelection
operator|.
name|hasSelection
argument_list|()
operator|&&
name|cursor
operator|.
name|currentFrame
argument_list|()
operator|==
name|oldSelection
operator|.
name|currentFrame
argument_list|()
operator|&&
operator|!
name|cursor
operator|.
name|hasComplexSelection
argument_list|()
operator|&&
operator|!
name|oldSelection
operator|.
name|hasComplexSelection
argument_list|()
operator|&&
name|cursor
operator|.
name|anchor
argument_list|()
operator|==
name|oldSelection
operator|.
name|anchor
argument_list|()
condition|)
block|{
name|QTextCursor
name|differenceSelection
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|differenceSelection
operator|.
name|setPosition
argument_list|(
name|oldSelection
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|differenceSelection
operator|.
name|setPosition
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|updateRequest
argument_list|(
name|q
operator|->
name|selectionRect
argument_list|(
name|differenceSelection
argument_list|)
argument_list|)
emit|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|oldSelection
operator|.
name|isNull
argument_list|()
condition|)
emit|emit
name|q
operator|->
name|updateRequest
argument_list|(
name|q
operator|->
name|selectionRect
argument_list|(
name|oldSelection
argument_list|)
operator||
name|cursorRectPlusUnicodeDirectionMarkers
argument_list|(
name|oldSelection
argument_list|)
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|updateRequest
argument_list|(
name|q
operator|->
name|selectionRect
argument_list|()
operator||
name|cursorRectPlusUnicodeDirectionMarkers
argument_list|(
name|cursor
argument_list|)
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|selectionChanged
name|void
name|QWidgetTextControlPrivate
operator|::
name|selectionChanged
parameter_list|(
name|bool
name|forceEmitSelectionChanged
comment|/*=false*/
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceEmitSelectionChanged
condition|)
emit|emit
name|q
operator|->
name|selectionChanged
argument_list|()
emit|;
if|if
condition|(
name|cursor
operator|.
name|position
argument_list|()
operator|==
name|lastSelectionPosition
operator|&&
name|cursor
operator|.
name|anchor
argument_list|()
operator|==
name|lastSelectionAnchor
condition|)
return|return;
name|bool
name|selectionStateChange
init|=
operator|(
name|cursor
operator|.
name|hasSelection
argument_list|()
operator|!=
operator|(
name|lastSelectionPosition
operator|!=
name|lastSelectionAnchor
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|selectionStateChange
condition|)
emit|emit
name|q
operator|->
name|copyAvailable
argument_list|(
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
emit|;
if|if
condition|(
operator|!
name|forceEmitSelectionChanged
operator|&&
operator|(
name|selectionStateChange
operator|||
operator|(
name|cursor
operator|.
name|hasSelection
argument_list|()
operator|&&
operator|(
name|cursor
operator|.
name|position
argument_list|()
operator|!=
name|lastSelectionPosition
operator|||
name|cursor
operator|.
name|anchor
argument_list|()
operator|!=
name|lastSelectionAnchor
operator|)
operator|)
operator|)
condition|)
emit|emit
name|q
operator|->
name|selectionChanged
argument_list|()
emit|;
emit|emit
name|q
operator|->
name|microFocusChanged
argument_list|()
emit|;
name|lastSelectionPosition
operator|=
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
name|lastSelectionAnchor
operator|=
name|cursor
operator|.
name|anchor
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_updateCurrentCharFormatAndSelection
name|void
name|QWidgetTextControlPrivate
operator|::
name|_q_updateCurrentCharFormatAndSelection
parameter_list|()
block|{
name|updateCurrentCharFormat
argument_list|()
expr_stmt|;
name|selectionChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|setClipboardSelection
name|void
name|QWidgetTextControlPrivate
operator|::
name|setClipboardSelection
parameter_list|()
block|{
name|QClipboard
modifier|*
name|clipboard
init|=
name|QApplication
operator|::
name|clipboard
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
operator|||
operator|!
name|clipboard
operator|->
name|supportsSelection
argument_list|()
condition|)
return|return;
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|QMimeData
modifier|*
name|data
init|=
name|q
operator|->
name|createMimeDataFromSelection
argument_list|()
decl_stmt|;
name|clipboard
operator|->
name|setMimeData
argument_list|(
name|data
argument_list|,
name|QClipboard
operator|::
name|Selection
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|_q_emitCursorPosChanged
name|void
name|QWidgetTextControlPrivate
operator|::
name|_q_emitCursorPosChanged
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|someCursor
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|someCursor
operator|.
name|isCopyOf
argument_list|(
name|cursor
argument_list|)
condition|)
block|{
emit|emit
name|q
operator|->
name|cursorPositionChanged
argument_list|()
emit|;
emit|emit
name|q
operator|->
name|microFocusChanged
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|_q_documentLayoutChanged
name|void
name|QWidgetTextControlPrivate
operator|::
name|_q_documentLayoutChanged
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|QAbstractTextDocumentLayout
modifier|*
name|layout
init|=
name|doc
operator|->
name|documentLayout
argument_list|()
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|layout
argument_list|,
name|SIGNAL
argument_list|(
name|update
argument_list|(
name|QRectF
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|updateRequest
argument_list|(
name|QRectF
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|layout
argument_list|,
name|SIGNAL
argument_list|(
name|updateBlock
argument_list|(
name|QTextBlock
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_updateBlock
argument_list|(
name|QTextBlock
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|layout
argument_list|,
name|SIGNAL
argument_list|(
name|documentSizeChanged
argument_list|(
name|QSizeF
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|documentSizeChanged
argument_list|(
name|QSizeF
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setBlinkingCursorEnabled
name|void
name|QWidgetTextControlPrivate
operator|::
name|setBlinkingCursorEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|enable
operator|&&
name|QApplication
operator|::
name|cursorFlashTime
argument_list|()
operator|>
literal|0
condition|)
name|cursorBlinkTimer
operator|.
name|start
argument_list|(
name|QApplication
operator|::
name|cursorFlashTime
argument_list|()
operator|/
literal|2
argument_list|,
name|q
argument_list|)
expr_stmt|;
else|else
name|cursorBlinkTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|cursorOn
operator|=
name|enable
expr_stmt|;
name|repaintCursor
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|extendWordwiseSelection
name|void
name|QWidgetTextControlPrivate
operator|::
name|extendWordwiseSelection
parameter_list|(
name|int
name|suggestedNewPosition
parameter_list|,
name|qreal
name|mouseXPosition
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
comment|// if inside the initial selected word keep that
if|if
condition|(
name|suggestedNewPosition
operator|>=
name|selectedWordOnDoubleClick
operator|.
name|selectionStart
argument_list|()
operator|&&
name|suggestedNewPosition
operator|<=
name|selectedWordOnDoubleClick
operator|.
name|selectionEnd
argument_list|()
condition|)
block|{
name|q
operator|->
name|setTextCursor
argument_list|(
name|selectedWordOnDoubleClick
argument_list|)
expr_stmt|;
return|return;
block|}
name|QTextCursor
name|curs
init|=
name|selectedWordOnDoubleClick
decl_stmt|;
name|curs
operator|.
name|setPosition
argument_list|(
name|suggestedNewPosition
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|curs
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|StartOfWord
argument_list|)
condition|)
return|return;
specifier|const
name|int
name|wordStartPos
init|=
name|curs
operator|.
name|position
argument_list|()
decl_stmt|;
specifier|const
name|int
name|blockPos
init|=
name|curs
operator|.
name|block
argument_list|()
operator|.
name|position
argument_list|()
decl_stmt|;
specifier|const
name|QPointF
name|blockCoordinates
init|=
name|q
operator|->
name|blockBoundingRect
argument_list|(
name|curs
operator|.
name|block
argument_list|()
argument_list|)
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|QTextLine
name|line
init|=
name|currentTextLine
argument_list|(
name|curs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|isValid
argument_list|()
condition|)
return|return;
specifier|const
name|qreal
name|wordStartX
init|=
name|line
operator|.
name|cursorToX
argument_list|(
name|curs
operator|.
name|position
argument_list|()
operator|-
name|blockPos
argument_list|)
operator|+
name|blockCoordinates
operator|.
name|x
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|curs
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfWord
argument_list|)
condition|)
return|return;
specifier|const
name|int
name|wordEndPos
init|=
name|curs
operator|.
name|position
argument_list|()
decl_stmt|;
specifier|const
name|QTextLine
name|otherLine
init|=
name|currentTextLine
argument_list|(
name|curs
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherLine
operator|.
name|textStart
argument_list|()
operator|!=
name|line
operator|.
name|textStart
argument_list|()
operator|||
name|wordEndPos
operator|==
name|wordStartPos
condition|)
return|return;
specifier|const
name|qreal
name|wordEndX
init|=
name|line
operator|.
name|cursorToX
argument_list|(
name|curs
operator|.
name|position
argument_list|()
operator|-
name|blockPos
argument_list|)
operator|+
name|blockCoordinates
operator|.
name|x
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|wordSelectionEnabled
operator|&&
operator|(
name|mouseXPosition
argument_list|<
name|wordStartX
operator|||
name|mouseXPosition
argument_list|>
name|wordEndX
operator|)
condition|)
return|return;
comment|// keep the already selected word even when moving to the left
comment|// (#39164)
if|if
condition|(
name|suggestedNewPosition
operator|<
name|selectedWordOnDoubleClick
operator|.
name|position
argument_list|()
condition|)
name|cursor
operator|.
name|setPosition
argument_list|(
name|selectedWordOnDoubleClick
operator|.
name|selectionEnd
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|cursor
operator|.
name|setPosition
argument_list|(
name|selectedWordOnDoubleClick
operator|.
name|selectionStart
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|differenceToStart
init|=
name|mouseXPosition
operator|-
name|wordStartX
decl_stmt|;
specifier|const
name|qreal
name|differenceToEnd
init|=
name|wordEndX
operator|-
name|mouseXPosition
decl_stmt|;
if|if
condition|(
name|differenceToStart
operator|<
name|differenceToEnd
condition|)
name|setCursorPosition
argument_list|(
name|wordStartPos
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
else|else
name|setCursorPosition
argument_list|(
name|wordEndPos
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
if|if
condition|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextSelectableByMouse
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|setClipboardSelection
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|selectionChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|extendBlockwiseSelection
name|void
name|QWidgetTextControlPrivate
operator|::
name|extendBlockwiseSelection
parameter_list|(
name|int
name|suggestedNewPosition
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
comment|// if inside the initial selected line keep that
if|if
condition|(
name|suggestedNewPosition
operator|>=
name|selectedBlockOnTrippleClick
operator|.
name|selectionStart
argument_list|()
operator|&&
name|suggestedNewPosition
operator|<=
name|selectedBlockOnTrippleClick
operator|.
name|selectionEnd
argument_list|()
condition|)
block|{
name|q
operator|->
name|setTextCursor
argument_list|(
name|selectedBlockOnTrippleClick
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|suggestedNewPosition
operator|<
name|selectedBlockOnTrippleClick
operator|.
name|position
argument_list|()
condition|)
block|{
name|cursor
operator|.
name|setPosition
argument_list|(
name|selectedBlockOnTrippleClick
operator|.
name|selectionEnd
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|suggestedNewPosition
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cursor
operator|.
name|setPosition
argument_list|(
name|selectedBlockOnTrippleClick
operator|.
name|selectionStart
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|suggestedNewPosition
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextSelectableByMouse
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|setClipboardSelection
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|selectionChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_deleteSelected
name|void
name|QWidgetTextControlPrivate
operator|::
name|_q_deleteSelected
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
operator|)
operator|||
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
return|return;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|undo
name|void
name|QWidgetTextControl
operator|::
name|undo
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|repaintSelection
argument_list|()
expr_stmt|;
specifier|const
name|int
name|oldCursorPos
init|=
name|d
operator|->
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|d
operator|->
name|doc
operator|->
name|undo
argument_list|(
operator|&
name|d
operator|->
name|cursor
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cursor
operator|.
name|position
argument_list|()
operator|!=
name|oldCursorPos
condition|)
emit|emit
name|cursorPositionChanged
argument_list|()
emit|;
emit|emit
name|microFocusChanged
argument_list|()
emit|;
name|ensureCursorVisible
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|redo
name|void
name|QWidgetTextControl
operator|::
name|redo
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|repaintSelection
argument_list|()
expr_stmt|;
specifier|const
name|int
name|oldCursorPos
init|=
name|d
operator|->
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|d
operator|->
name|doc
operator|->
name|redo
argument_list|(
operator|&
name|d
operator|->
name|cursor
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cursor
operator|.
name|position
argument_list|()
operator|!=
name|oldCursorPos
condition|)
emit|emit
name|cursorPositionChanged
argument_list|()
emit|;
emit|emit
name|microFocusChanged
argument_list|()
emit|;
name|ensureCursorVisible
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QWidgetTextControl
name|QWidgetTextControl
operator|::
name|QWidgetTextControl
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QWidgetTextControlPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QWidgetTextControl
name|QWidgetTextControl
operator|::
name|QWidgetTextControl
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QWidgetTextControlPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|Qt
operator|::
name|RichText
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QWidgetTextControl
name|QWidgetTextControl
operator|::
name|QWidgetTextControl
parameter_list|(
name|QTextDocument
modifier|*
name|doc
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
operator|*
operator|new
name|QWidgetTextControlPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|Qt
operator|::
name|RichText
argument_list|,
name|QString
argument_list|()
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QWidgetTextControl
name|QWidgetTextControl
operator|::
name|~
name|QWidgetTextControl
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|setDocument
name|void
name|QWidgetTextControl
operator|::
name|setDocument
parameter_list|(
name|QTextDocument
modifier|*
name|document
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doc
operator|==
name|document
condition|)
return|return;
name|d
operator|->
name|doc
operator|->
name|disconnect
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|disconnect
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|setPaintDevice
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|doc
operator|->
name|parent
argument_list|()
operator|==
name|this
condition|)
operator|delete
name|d
operator|->
name|doc
expr_stmt|;
name|d
operator|->
name|doc
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|setContent
argument_list|(
name|Qt
operator|::
name|RichText
argument_list|,
name|QString
argument_list|()
argument_list|,
name|document
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|document
name|QTextDocument
modifier|*
name|QWidgetTextControl
operator|::
name|document
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|doc
return|;
block|}
end_function
begin_function
DECL|function|setTextCursor
name|void
name|QWidgetTextControl
operator|::
name|setTextCursor
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|cursor
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|cursorIsFocusIndicator
operator|=
literal|false
expr_stmt|;
specifier|const
name|bool
name|posChanged
init|=
name|cursor
operator|.
name|position
argument_list|()
operator|!=
name|d
operator|->
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
specifier|const
name|QTextCursor
name|oldSelection
init|=
name|d
operator|->
name|cursor
decl_stmt|;
name|d
operator|->
name|cursor
operator|=
name|cursor
expr_stmt|;
name|d
operator|->
name|cursorOn
operator|=
name|d
operator|->
name|hasFocus
operator|&&
operator|(
name|d
operator|->
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
operator|)
expr_stmt|;
name|d
operator|->
name|_q_updateCurrentCharFormatAndSelection
argument_list|()
expr_stmt|;
name|ensureCursorVisible
argument_list|()
expr_stmt|;
name|d
operator|->
name|repaintOldAndNewSelection
argument_list|(
name|oldSelection
argument_list|)
expr_stmt|;
if|if
condition|(
name|posChanged
condition|)
emit|emit
name|cursorPositionChanged
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|textCursor
name|QTextCursor
name|QWidgetTextControl
operator|::
name|textCursor
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|cursor
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_function
DECL|function|cut
name|void
name|QWidgetTextControl
operator|::
name|cut
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
operator|)
operator|||
operator|!
name|d
operator|->
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
return|return;
name|copy
argument_list|()
expr_stmt|;
name|d
operator|->
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copy
name|void
name|QWidgetTextControl
operator|::
name|copy
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
return|return;
name|QMimeData
modifier|*
name|data
init|=
name|createMimeDataFromSelection
argument_list|()
decl_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setMimeData
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paste
name|void
name|QWidgetTextControl
operator|::
name|paste
parameter_list|(
name|QClipboard
operator|::
name|Mode
name|mode
parameter_list|)
block|{
specifier|const
name|QMimeData
modifier|*
name|md
init|=
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|mimeData
argument_list|(
name|mode
argument_list|)
decl_stmt|;
if|if
condition|(
name|md
condition|)
name|insertFromMimeData
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|clear
name|void
name|QWidgetTextControl
operator|::
name|clear
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
comment|// clears and sets empty content
name|d
operator|->
name|extraSelections
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|setContent
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selectAll
name|void
name|QWidgetTextControl
operator|::
name|selectAll
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
specifier|const
name|int
name|selectionLength
init|=
name|qAbs
argument_list|(
name|d
operator|->
name|cursor
operator|.
name|position
argument_list|()
operator|-
name|d
operator|->
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|Document
argument_list|)
expr_stmt|;
name|d
operator|->
name|selectionChanged
argument_list|(
name|selectionLength
operator|!=
name|qAbs
argument_list|(
name|d
operator|->
name|cursor
operator|.
name|position
argument_list|()
operator|-
name|d
operator|->
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|cursorIsFocusIndicator
operator|=
literal|false
expr_stmt|;
emit|emit
name|updateRequest
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|processEvent
name|void
name|QWidgetTextControl
operator|::
name|processEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|coordinateOffset
parameter_list|,
name|QWidget
modifier|*
name|contextWidget
parameter_list|)
block|{
name|QMatrix
name|m
decl_stmt|;
name|m
operator|.
name|translate
argument_list|(
name|coordinateOffset
operator|.
name|x
argument_list|()
argument_list|,
name|coordinateOffset
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|processEvent
argument_list|(
name|e
argument_list|,
name|m
argument_list|,
name|contextWidget
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processEvent
name|void
name|QWidgetTextControl
operator|::
name|processEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|,
specifier|const
name|QMatrix
modifier|&
name|matrix
parameter_list|,
name|QWidget
modifier|*
name|contextWidget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|interactionFlags
operator|==
name|Qt
operator|::
name|NoTextInteraction
condition|)
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|contextWidget
operator|=
name|contextWidget
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|contextWidget
condition|)
block|{
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
case|case
name|QEvent
operator|::
name|GraphicsSceneMouseMove
case|:
case|case
name|QEvent
operator|::
name|GraphicsSceneMousePress
case|:
case|case
name|QEvent
operator|::
name|GraphicsSceneMouseRelease
case|:
case|case
name|QEvent
operator|::
name|GraphicsSceneMouseDoubleClick
case|:
case|case
name|QEvent
operator|::
name|GraphicsSceneContextMenu
case|:
case|case
name|QEvent
operator|::
name|GraphicsSceneHoverEnter
case|:
case|case
name|QEvent
operator|::
name|GraphicsSceneHoverMove
case|:
case|case
name|QEvent
operator|::
name|GraphicsSceneHoverLeave
case|:
case|case
name|QEvent
operator|::
name|GraphicsSceneHelp
case|:
case|case
name|QEvent
operator|::
name|GraphicsSceneDragEnter
case|:
case|case
name|QEvent
operator|::
name|GraphicsSceneDragMove
case|:
case|case
name|QEvent
operator|::
name|GraphicsSceneDragLeave
case|:
case|case
name|QEvent
operator|::
name|GraphicsSceneDrop
case|:
block|{
name|QGraphicsSceneEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QGraphicsSceneEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|d
operator|->
name|contextWidget
operator|=
name|ev
operator|->
name|widget
argument_list|()
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_GRAPHICSVIEW
default|default:
break|break;
block|}
empty_stmt|;
block|}
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|KeyPress
case|:
name|d
operator|->
name|keyPressEvent
argument_list|(
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
block|{
name|QMouseEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|d
operator|->
name|mousePressEvent
argument_list|(
name|ev
argument_list|,
name|ev
operator|->
name|button
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|ev
operator|->
name|modifiers
argument_list|()
argument_list|,
name|ev
operator|->
name|buttons
argument_list|()
argument_list|,
name|ev
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|MouseMove
case|:
block|{
name|QMouseEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|d
operator|->
name|mouseMoveEvent
argument_list|(
name|ev
argument_list|,
name|ev
operator|->
name|button
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|ev
operator|->
name|modifiers
argument_list|()
argument_list|,
name|ev
operator|->
name|buttons
argument_list|()
argument_list|,
name|ev
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
block|{
name|QMouseEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|d
operator|->
name|mouseReleaseEvent
argument_list|(
name|ev
argument_list|,
name|ev
operator|->
name|button
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|ev
operator|->
name|modifiers
argument_list|()
argument_list|,
name|ev
operator|->
name|buttons
argument_list|()
argument_list|,
name|ev
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
block|{
name|QMouseEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|d
operator|->
name|mouseDoubleClickEvent
argument_list|(
name|ev
argument_list|,
name|ev
operator|->
name|button
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|ev
operator|->
name|modifiers
argument_list|()
argument_list|,
name|ev
operator|->
name|buttons
argument_list|()
argument_list|,
name|ev
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|InputMethod
case|:
name|d
operator|->
name|inputMethodEvent
argument_list|(
cast|static_cast
argument_list|<
name|QInputMethodEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
case|case
name|QEvent
operator|::
name|ContextMenu
case|:
block|{
name|QContextMenuEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QContextMenuEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|d
operator|->
name|contextMenuEvent
argument_list|(
name|ev
operator|->
name|globalPos
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|contextWidget
argument_list|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_CONTEXTMENU
case|case
name|QEvent
operator|::
name|FocusIn
case|:
case|case
name|QEvent
operator|::
name|FocusOut
case|:
name|d
operator|->
name|focusEvent
argument_list|(
cast|static_cast
argument_list|<
name|QFocusEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|EnabledChange
case|:
name|d
operator|->
name|isEnabled
operator|=
name|e
operator|->
name|isAccepted
argument_list|()
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
case|case
name|QEvent
operator|::
name|ToolTip
case|:
block|{
name|QHelpEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|d
operator|->
name|showToolTip
argument_list|(
name|ev
operator|->
name|globalPos
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|contextWidget
argument_list|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_TOOLTIP
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
case|case
name|QEvent
operator|::
name|DragEnter
case|:
block|{
name|QDragEnterEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QDragEnterEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|dragEnterEvent
argument_list|(
name|e
argument_list|,
name|ev
operator|->
name|mimeData
argument_list|()
argument_list|)
condition|)
name|ev
operator|->
name|acceptProposedAction
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|DragLeave
case|:
name|d
operator|->
name|dragLeaveEvent
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|DragMove
case|:
block|{
name|QDragMoveEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QDragMoveEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|dragMoveEvent
argument_list|(
name|e
argument_list|,
name|ev
operator|->
name|mimeData
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|)
condition|)
name|ev
operator|->
name|acceptProposedAction
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|Drop
case|:
block|{
name|QDropEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QDropEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|dropEvent
argument_list|(
name|ev
operator|->
name|mimeData
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|ev
operator|->
name|dropAction
argument_list|()
argument_list|,
name|ev
operator|->
name|source
argument_list|()
argument_list|)
condition|)
name|ev
operator|->
name|acceptProposedAction
argument_list|()
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
case|case
name|QEvent
operator|::
name|GraphicsSceneMousePress
case|:
block|{
name|QGraphicsSceneMouseEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QGraphicsSceneMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|d
operator|->
name|mousePressEvent
argument_list|(
name|ev
argument_list|,
name|ev
operator|->
name|button
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|ev
operator|->
name|modifiers
argument_list|()
argument_list|,
name|ev
operator|->
name|buttons
argument_list|()
argument_list|,
name|ev
operator|->
name|screenPos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|GraphicsSceneMouseMove
case|:
block|{
name|QGraphicsSceneMouseEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QGraphicsSceneMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|d
operator|->
name|mouseMoveEvent
argument_list|(
name|ev
argument_list|,
name|ev
operator|->
name|button
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|ev
operator|->
name|modifiers
argument_list|()
argument_list|,
name|ev
operator|->
name|buttons
argument_list|()
argument_list|,
name|ev
operator|->
name|screenPos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|GraphicsSceneMouseRelease
case|:
block|{
name|QGraphicsSceneMouseEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QGraphicsSceneMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|d
operator|->
name|mouseReleaseEvent
argument_list|(
name|ev
argument_list|,
name|ev
operator|->
name|button
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|ev
operator|->
name|modifiers
argument_list|()
argument_list|,
name|ev
operator|->
name|buttons
argument_list|()
argument_list|,
name|ev
operator|->
name|screenPos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|GraphicsSceneMouseDoubleClick
case|:
block|{
name|QGraphicsSceneMouseEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QGraphicsSceneMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|d
operator|->
name|mouseDoubleClickEvent
argument_list|(
name|ev
argument_list|,
name|ev
operator|->
name|button
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|ev
operator|->
name|modifiers
argument_list|()
argument_list|,
name|ev
operator|->
name|buttons
argument_list|()
argument_list|,
name|ev
operator|->
name|screenPos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|GraphicsSceneContextMenu
case|:
block|{
name|QGraphicsSceneContextMenuEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QGraphicsSceneContextMenuEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|d
operator|->
name|contextMenuEvent
argument_list|(
name|ev
operator|->
name|screenPos
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|contextWidget
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|GraphicsSceneHoverMove
case|:
block|{
name|QGraphicsSceneHoverEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QGraphicsSceneHoverEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|d
operator|->
name|mouseMoveEvent
argument_list|(
name|ev
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|ev
operator|->
name|modifiers
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|ev
operator|->
name|screenPos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|GraphicsSceneDragEnter
case|:
block|{
name|QGraphicsSceneDragDropEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QGraphicsSceneDragDropEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|dragEnterEvent
argument_list|(
name|e
argument_list|,
name|ev
operator|->
name|mimeData
argument_list|()
argument_list|)
condition|)
name|ev
operator|->
name|acceptProposedAction
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|GraphicsSceneDragLeave
case|:
name|d
operator|->
name|dragLeaveEvent
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|GraphicsSceneDragMove
case|:
block|{
name|QGraphicsSceneDragDropEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QGraphicsSceneDragDropEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|dragMoveEvent
argument_list|(
name|e
argument_list|,
name|ev
operator|->
name|mimeData
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|)
condition|)
name|ev
operator|->
name|acceptProposedAction
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|GraphicsSceneDrop
case|:
block|{
name|QGraphicsSceneDragDropEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QGraphicsSceneDragDropEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|dropEvent
argument_list|(
name|ev
operator|->
name|mimeData
argument_list|()
argument_list|,
name|matrix
operator|.
name|map
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
argument_list|,
name|ev
operator|->
name|dropAction
argument_list|()
argument_list|,
name|ev
operator|->
name|source
argument_list|()
argument_list|)
condition|)
name|ev
operator|->
name|accept
argument_list|()
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
comment|// QT_NO_GRAPHICSVIEW
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
case|case
name|QEvent
operator|::
name|EnterEditFocus
case|:
case|case
name|QEvent
operator|::
name|LeaveEditFocus
case|:
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
name|d
operator|->
name|editFocusEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|QEvent
operator|::
name|ShortcutOverride
case|:
if|if
condition|(
name|d
operator|->
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
condition|)
block|{
name|QKeyEvent
modifier|*
name|ke
init|=
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|ke
operator|->
name|modifiers
argument_list|()
operator|==
name|Qt
operator|::
name|NoModifier
operator|||
name|ke
operator|->
name|modifiers
argument_list|()
operator|==
name|Qt
operator|::
name|ShiftModifier
operator|||
name|ke
operator|->
name|modifiers
argument_list|()
operator|==
name|Qt
operator|::
name|KeypadModifier
condition|)
block|{
if|if
condition|(
name|ke
operator|->
name|key
argument_list|()
operator|<
name|Qt
operator|::
name|Key_Escape
condition|)
block|{
name|ke
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|ke
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Return
case|:
case|case
name|Qt
operator|::
name|Key_Enter
case|:
case|case
name|Qt
operator|::
name|Key_Delete
case|:
case|case
name|Qt
operator|::
name|Key_Home
case|:
case|case
name|Qt
operator|::
name|Key_End
case|:
case|case
name|Qt
operator|::
name|Key_Backspace
case|:
case|case
name|Qt
operator|::
name|Key_Left
case|:
case|case
name|Qt
operator|::
name|Key_Right
case|:
case|case
name|Qt
operator|::
name|Key_Up
case|:
case|case
name|Qt
operator|::
name|Key_Down
case|:
case|case
name|Qt
operator|::
name|Key_Tab
case|:
name|ke
operator|->
name|accept
argument_list|()
expr_stmt|;
default|default:
break|break;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
block|}
elseif|else
if|if
condition|(
name|ke
operator|==
name|QKeySequence
operator|::
name|Copy
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|Paste
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|Cut
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|Redo
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|Undo
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|MoveToNextWord
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|MoveToPreviousWord
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|MoveToStartOfDocument
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|MoveToEndOfDocument
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|SelectNextWord
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|SelectPreviousWord
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|SelectStartOfLine
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|SelectEndOfLine
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|SelectStartOfBlock
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|SelectEndOfBlock
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|SelectStartOfDocument
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|SelectEndOfDocument
operator|||
name|ke
operator|==
name|QKeySequence
operator|::
name|SelectAll
condition|)
block|{
name|ke
operator|->
name|accept
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
block|}
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|event
name|bool
name|QWidgetTextControl
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
return|return
name|QObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QWidgetTextControl
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|cursorBlinkTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|d
operator|->
name|cursorOn
operator|=
operator|!
name|d
operator|->
name|cursorOn
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
name|d
operator|->
name|cursorOn
operator|&=
operator|(
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_BlinkCursorWhenTextSelected
argument_list|)
operator|!=
literal|0
operator|)
expr_stmt|;
name|d
operator|->
name|repaintCursor
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|trippleClickTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|d
operator|->
name|trippleClickTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setPlainText
name|void
name|QWidgetTextControl
operator|::
name|setPlainText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|setContent
argument_list|(
name|Qt
operator|::
name|PlainText
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setHtml
name|void
name|QWidgetTextControl
operator|::
name|setHtml
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|setContent
argument_list|(
name|Qt
operator|::
name|RichText
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keyPressEvent
name|void
name|QWidgetTextControlPrivate
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectAll
condition|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|q
operator|->
name|selectAll
argument_list|()
expr_stmt|;
return|return;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|Copy
condition|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|q
operator|->
name|copy
argument_list|()
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
endif|#
directive|endif
comment|// QT_NO_SHORTCUT
if|if
condition|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextSelectableByKeyboard
operator|&&
name|cursorMoveKeyEvent
argument_list|(
name|e
argument_list|)
condition|)
goto|goto
name|accept
goto|;
if|if
condition|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|LinksAccessibleByKeyboard
condition|)
block|{
if|if
condition|(
operator|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Return
operator|||
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Enter
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
operator|||
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Select
endif|#
directive|endif
operator|)
operator|&&
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|activateLinkUnderCursor
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
operator|)
condition|)
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Direction_L
operator|||
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Direction_R
condition|)
block|{
name|QTextBlockFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setLayoutDirection
argument_list|(
operator|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Direction_L
operator|)
condition|?
name|Qt
operator|::
name|LeftToRight
else|:
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeBlockFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
goto|goto
name|accept
goto|;
block|}
comment|// schedule a repaint of the region of the cursor, as when we move it we
comment|// want to make sure the old cursor disappears (not noticeable when moving
comment|// only a few pixels but noticeable when jumping between cells in tables for
comment|// example)
name|repaintSelection
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Backspace
operator|&&
operator|!
operator|(
name|e
operator|->
name|modifiers
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|ShiftModifier
operator|)
condition|)
block|{
name|QTextBlockFormat
name|blockFmt
init|=
name|cursor
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|&&
name|cursor
operator|.
name|atBlockStart
argument_list|()
operator|&&
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
block|{
name|list
operator|->
name|remove
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cursor
operator|.
name|atBlockStart
argument_list|()
operator|&&
name|blockFmt
operator|.
name|indent
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blockFmt
operator|.
name|setIndent
argument_list|(
name|blockFmt
operator|.
name|indent
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockFormat
argument_list|(
name|blockFmt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QTextCursor
name|localCursor
init|=
name|cursor
decl_stmt|;
name|localCursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
block|}
goto|goto
name|accept
goto|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|InsertParagraphSeparator
condition|)
block|{
name|cursor
operator|.
name|insertBlock
argument_list|()
expr_stmt|;
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
goto|goto
name|accept
goto|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|InsertLineSeparator
condition|)
block|{
name|cursor
operator|.
name|insertText
argument_list|(
name|QString
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
goto|goto
name|accept
goto|;
block|}
endif|#
directive|endif
if|if
condition|(
literal|false
condition|)
block|{     }
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|Undo
condition|)
block|{
name|q
operator|->
name|undo
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|Redo
condition|)
block|{
name|q
operator|->
name|redo
argument_list|()
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|Cut
condition|)
block|{
name|q
operator|->
name|cut
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|Paste
condition|)
block|{
name|QClipboard
operator|::
name|Mode
name|mode
init|=
name|QClipboard
operator|::
name|Clipboard
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
if|if
condition|(
name|e
operator|->
name|modifiers
argument_list|()
operator|==
operator|(
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|SHIFT
operator|)
operator|&&
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Insert
condition|)
name|mode
operator|=
name|QClipboard
operator|::
name|Selection
expr_stmt|;
endif|#
directive|endif
name|q
operator|->
name|paste
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|Delete
condition|)
block|{
name|QTextCursor
name|localCursor
init|=
name|cursor
decl_stmt|;
name|localCursor
operator|.
name|deleteChar
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|DeleteEndOfWord
condition|)
block|{
if|if
condition|(
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|DeleteStartOfWord
condition|)
block|{
if|if
condition|(
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|PreviousWord
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|DeleteEndOfLine
condition|)
block|{
name|QTextBlock
name|block
init|=
name|cursor
operator|.
name|block
argument_list|()
decl_stmt|;
if|if
condition|(
name|cursor
operator|.
name|position
argument_list|()
operator|==
name|block
operator|.
name|position
argument_list|()
operator|+
name|block
operator|.
name|length
argument_list|()
operator|-
literal|2
condition|)
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Right
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
else|else
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_SHORTCUT
else|else
block|{
goto|goto
name|process
goto|;
block|}
goto|goto
name|accept
goto|;
name|process
label|:
block|{
name|QString
name|text
init|=
name|e
operator|->
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|text
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|isPrint
argument_list|()
operator|||
name|text
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|overwriteMode
comment|// no need to call deleteChar() if we have a selection, insertText
comment|// does it already
operator|&&
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
operator|&&
operator|!
name|cursor
operator|.
name|atBlockEnd
argument_list|()
condition|)
name|cursor
operator|.
name|deleteChar
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|selectionChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|accept
label|:
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|cursorOn
operator|=
literal|true
expr_stmt|;
name|q
operator|->
name|ensureCursorVisible
argument_list|()
expr_stmt|;
name|updateCurrentCharFormat
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadResource
name|QVariant
name|QWidgetTextControl
operator|::
name|loadResource
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|QUrl
modifier|&
name|name
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_TEXTEDIT
name|Q_UNUSED
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|name
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|QTextEdit
modifier|*
name|textEdit
init|=
name|qobject_cast
argument_list|<
name|QTextEdit
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
condition|)
block|{
name|QUrl
name|resolvedName
init|=
name|textEdit
operator|->
name|d_func
argument_list|()
operator|->
name|resolveUrl
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|textEdit
operator|->
name|loadResource
argument_list|(
name|type
argument_list|,
name|resolvedName
argument_list|)
return|;
block|}
endif|#
directive|endif
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|_q_updateBlock
name|void
name|QWidgetTextControlPrivate
operator|::
name|_q_updateBlock
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|QRectF
name|br
init|=
name|q
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|br
operator|.
name|setRight
argument_list|(
name|qreal
argument_list|(
name|INT_MAX
argument_list|)
argument_list|)
expr_stmt|;
comment|// the block might have shrunk
emit|emit
name|q
operator|->
name|updateRequest
argument_list|(
name|br
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|rectForPosition
name|QRectF
name|QWidgetTextControlPrivate
operator|::
name|rectForPosition
parameter_list|(
name|int
name|position
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
specifier|const
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|findBlock
argument_list|(
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|block
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QRectF
argument_list|()
return|;
specifier|const
name|QAbstractTextDocumentLayout
modifier|*
name|docLayout
init|=
name|doc
operator|->
name|documentLayout
argument_list|()
decl_stmt|;
specifier|const
name|QTextLayout
modifier|*
name|layout
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
specifier|const
name|QPointF
name|layoutPos
init|=
name|q
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|int
name|relativePos
init|=
name|position
operator|-
name|block
operator|.
name|position
argument_list|()
decl_stmt|;
if|if
condition|(
name|preeditCursor
operator|!=
literal|0
condition|)
block|{
name|int
name|preeditPos
init|=
name|layout
operator|->
name|preeditAreaPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|relativePos
operator|==
name|preeditPos
condition|)
name|relativePos
operator|+=
name|preeditCursor
expr_stmt|;
elseif|else
if|if
condition|(
name|relativePos
operator|>
name|preeditPos
condition|)
name|relativePos
operator|+=
name|layout
operator|->
name|preeditAreaText
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|QTextLine
name|line
init|=
name|layout
operator|->
name|lineForTextPosition
argument_list|(
name|relativePos
argument_list|)
decl_stmt|;
name|int
name|cursorWidth
decl_stmt|;
block|{
name|bool
name|ok
init|=
literal|false
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_PROPERTIES
name|cursorWidth
operator|=
name|docLayout
operator|->
name|property
argument_list|(
literal|"cursorWidth"
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|ok
condition|)
name|cursorWidth
operator|=
literal|1
expr_stmt|;
block|}
name|QRectF
name|r
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qreal
name|x
init|=
name|line
operator|.
name|cursorToX
argument_list|(
name|relativePos
argument_list|)
decl_stmt|;
name|qreal
name|w
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|overwriteMode
condition|)
block|{
if|if
condition|(
name|relativePos
operator|<
name|line
operator|.
name|textLength
argument_list|()
operator|-
name|line
operator|.
name|textStart
argument_list|()
condition|)
name|w
operator|=
name|line
operator|.
name|cursorToX
argument_list|(
name|relativePos
operator|+
literal|1
argument_list|)
operator|-
name|x
expr_stmt|;
else|else
name|w
operator|=
name|QFontMetrics
argument_list|(
name|block
operator|.
name|layout
argument_list|()
operator|->
name|font
argument_list|()
argument_list|)
operator|.
name|width
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
comment|// in sync with QTextLine::draw()
block|}
name|r
operator|=
name|QRectF
argument_list|(
name|layoutPos
operator|.
name|x
argument_list|()
operator|+
name|x
argument_list|,
name|layoutPos
operator|.
name|y
argument_list|()
operator|+
name|line
operator|.
name|y
argument_list|()
argument_list|,
name|cursorWidth
operator|+
name|w
argument_list|,
name|line
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|QRectF
argument_list|(
name|layoutPos
operator|.
name|x
argument_list|()
argument_list|,
name|layoutPos
operator|.
name|y
argument_list|()
argument_list|,
name|cursorWidth
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// #### correct height
block|}
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|firstFramePosLessThanCursorPos
specifier|static
specifier|inline
name|bool
name|firstFramePosLessThanCursorPos
parameter_list|(
name|QTextFrame
modifier|*
name|frame
parameter_list|,
name|int
name|position
parameter_list|)
block|{
return|return
name|frame
operator|->
name|firstPosition
argument_list|()
operator|<
name|position
return|;
block|}
end_function
begin_function
DECL|function|cursorPosLessThanLastFramePos
specifier|static
specifier|inline
name|bool
name|cursorPosLessThanLastFramePos
parameter_list|(
name|int
name|position
parameter_list|,
name|QTextFrame
modifier|*
name|frame
parameter_list|)
block|{
return|return
name|position
operator|<
name|frame
operator|->
name|lastPosition
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|boundingRectOfFloatsInSelection
specifier|static
name|QRectF
name|boundingRectOfFloatsInSelection
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|cursor
parameter_list|)
block|{
name|QRectF
name|r
decl_stmt|;
name|QTextFrame
modifier|*
name|frame
init|=
name|cursor
operator|.
name|currentFrame
argument_list|()
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
name|children
init|=
name|frame
operator|->
name|childFrames
argument_list|()
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
operator|::
name|ConstIterator
name|firstFrame
init|=
name|qLowerBound
argument_list|(
name|children
operator|.
name|constBegin
argument_list|()
argument_list|,
name|children
operator|.
name|constEnd
argument_list|()
argument_list|,
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|,
name|firstFramePosLessThanCursorPos
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QTextFrame
modifier|*
argument_list|>
operator|::
name|ConstIterator
name|lastFrame
init|=
name|qUpperBound
argument_list|(
name|children
operator|.
name|constBegin
argument_list|()
argument_list|,
name|children
operator|.
name|constEnd
argument_list|()
argument_list|,
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
name|cursorPosLessThanLastFramePos
argument_list|)
decl_stmt|;
for|for
control|(
name|QList
argument_list|<
name|QTextFrame
operator|*
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|firstFrame
init|;
name|it
operator|!=
name|lastFrame
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|->
name|frameFormat
argument_list|()
operator|.
name|position
argument_list|()
operator|!=
name|QTextFrameFormat
operator|::
name|InFlow
condition|)
name|r
operator||=
name|frame
operator|->
name|document
argument_list|()
operator|->
name|documentLayout
argument_list|()
operator|->
name|frameBoundingRect
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|selectionRect
name|QRectF
name|QWidgetTextControl
operator|::
name|selectionRect
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|cursor
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|QRectF
name|r
init|=
name|d
operator|->
name|rectForPosition
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursor
operator|.
name|hasComplexSelection
argument_list|()
operator|&&
name|cursor
operator|.
name|currentTable
argument_list|()
condition|)
block|{
name|QTextTable
modifier|*
name|table
init|=
name|cursor
operator|.
name|currentTable
argument_list|()
decl_stmt|;
name|r
operator|=
name|d
operator|->
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|frameBoundingRect
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|/*         int firstRow, numRows, firstColumn, numColumns;         cursor.selectedTableCells(&firstRow,&numRows,&firstColumn,&numColumns);          const QTextTableCell firstCell = table->cellAt(firstRow, firstColumn);         const QTextTableCell lastCell = table->cellAt(firstRow + numRows - 1, firstColumn + numColumns - 1);          const QAbstractTextDocumentLayout * const layout = doc->documentLayout();          QRectF tableSelRect = layout->blockBoundingRect(firstCell.firstCursorPosition().block());          for (int col = firstColumn; col< firstColumn + numColumns; ++col) {             const QTextTableCell cell = table->cellAt(firstRow, col);             const qreal y = layout->blockBoundingRect(cell.firstCursorPosition().block()).top();              tableSelRect.setTop(qMin(tableSelRect.top(), y));         }          for (int row = firstRow; row< firstRow + numRows; ++row) {             const QTextTableCell cell = table->cellAt(row, firstColumn);             const qreal x = layout->blockBoundingRect(cell.firstCursorPosition().block()).left();              tableSelRect.setLeft(qMin(tableSelRect.left(), x));         }          for (int col = firstColumn; col< firstColumn + numColumns; ++col) {             const QTextTableCell cell = table->cellAt(firstRow + numRows - 1, col);             const qreal y = layout->blockBoundingRect(cell.lastCursorPosition().block()).bottom();              tableSelRect.setBottom(qMax(tableSelRect.bottom(), y));         }          for (int row = firstRow; row< firstRow + numRows; ++row) {             const QTextTableCell cell = table->cellAt(row, firstColumn + numColumns - 1);             const qreal x = layout->blockBoundingRect(cell.lastCursorPosition().block()).right();              tableSelRect.setRight(qMax(tableSelRect.right(), x));         }          r = tableSelRect.toRect();         */
block|}
elseif|else
if|if
condition|(
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
block|{
specifier|const
name|int
name|position
init|=
name|cursor
operator|.
name|selectionStart
argument_list|()
decl_stmt|;
specifier|const
name|int
name|anchor
init|=
name|cursor
operator|.
name|selectionEnd
argument_list|()
decl_stmt|;
specifier|const
name|QTextBlock
name|posBlock
init|=
name|d
operator|->
name|doc
operator|->
name|findBlock
argument_list|(
name|position
argument_list|)
decl_stmt|;
specifier|const
name|QTextBlock
name|anchorBlock
init|=
name|d
operator|->
name|doc
operator|->
name|findBlock
argument_list|(
name|anchor
argument_list|)
decl_stmt|;
if|if
condition|(
name|posBlock
operator|==
name|anchorBlock
operator|&&
name|posBlock
operator|.
name|isValid
argument_list|()
operator|&&
name|posBlock
operator|.
name|layout
argument_list|()
operator|->
name|lineCount
argument_list|()
condition|)
block|{
specifier|const
name|QTextLine
name|posLine
init|=
name|posBlock
operator|.
name|layout
argument_list|()
operator|->
name|lineForTextPosition
argument_list|(
name|position
operator|-
name|posBlock
operator|.
name|position
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QTextLine
name|anchorLine
init|=
name|anchorBlock
operator|.
name|layout
argument_list|()
operator|->
name|lineForTextPosition
argument_list|(
name|anchor
operator|-
name|anchorBlock
operator|.
name|position
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|firstLine
init|=
name|qMin
argument_list|(
name|posLine
operator|.
name|lineNumber
argument_list|()
argument_list|,
name|anchorLine
operator|.
name|lineNumber
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|int
name|lastLine
init|=
name|qMax
argument_list|(
name|posLine
operator|.
name|lineNumber
argument_list|()
argument_list|,
name|anchorLine
operator|.
name|lineNumber
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QTextLayout
modifier|*
name|layout
init|=
name|posBlock
operator|.
name|layout
argument_list|()
decl_stmt|;
name|r
operator|=
name|QRectF
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|firstLine
init|;
name|i
operator|<=
name|lastLine
condition|;
operator|++
name|i
control|)
block|{
name|r
operator||=
name|layout
operator|->
name|lineAt
argument_list|(
name|i
argument_list|)
operator|.
name|rect
argument_list|()
expr_stmt|;
name|r
operator||=
name|layout
operator|->
name|lineAt
argument_list|(
name|i
argument_list|)
operator|.
name|naturalTextRect
argument_list|()
expr_stmt|;
comment|// might be bigger in the case of wrap not enabled
block|}
name|r
operator|.
name|translate
argument_list|(
name|blockBoundingRect
argument_list|(
name|posBlock
argument_list|)
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRectF
name|anchorRect
init|=
name|d
operator|->
name|rectForPosition
argument_list|(
name|cursor
operator|.
name|selectionEnd
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator||=
name|anchorRect
expr_stmt|;
name|r
operator||=
name|boundingRectOfFloatsInSelection
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QRectF
name|frameRect
argument_list|(
name|d
operator|->
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|frameBoundingRect
argument_list|(
name|cursor
operator|.
name|currentFrame
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|.
name|setLeft
argument_list|(
name|frameRect
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setRight
argument_list|(
name|frameRect
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|isValid
argument_list|()
condition|)
name|r
operator|.
name|adjust
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|selectionRect
name|QRectF
name|QWidgetTextControl
operator|::
name|selectionRect
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|selectionRect
argument_list|(
name|d
operator|->
name|cursor
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QWidgetTextControlPrivate
operator|::
name|mousePressEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|,
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|mousePressed
operator|=
operator|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextSelectableByMouse
operator|)
expr_stmt|;
name|mousePressPos
operator|=
name|pos
operator|.
name|toPoint
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|mightStartDrag
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|sendMouseEventToInputContext
argument_list|(
name|e
argument_list|,
name|QEvent
operator|::
name|MouseButtonPress
argument_list|,
name|button
argument_list|,
name|pos
argument_list|,
name|modifiers
argument_list|,
name|buttons
argument_list|,
name|globalPos
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|LinksAccessibleByMouse
condition|)
block|{
name|anchorOnMousePress
operator|=
name|q
operator|->
name|anchorAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|cursorIsFocusIndicator
condition|)
block|{
name|cursorIsFocusIndicator
operator|=
literal|false
expr_stmt|;
name|repaintSelection
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|button
operator|&
name|Qt
operator|::
name|LeftButton
operator|)
operator|||
operator|!
operator|(
operator|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextSelectableByMouse
operator|)
operator|||
operator|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
operator|)
operator|)
condition|)
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|cursorIsFocusIndicator
operator|=
literal|false
expr_stmt|;
specifier|const
name|QTextCursor
name|oldSelection
init|=
name|cursor
decl_stmt|;
specifier|const
name|int
name|oldCursorPos
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|commitPreedit
argument_list|()
expr_stmt|;
if|if
condition|(
name|trippleClickTimer
operator|.
name|isActive
argument_list|()
operator|&&
operator|(
operator|(
name|pos
operator|-
name|trippleClickPoint
operator|)
operator|.
name|toPoint
argument_list|()
operator|.
name|manhattanLength
argument_list|()
operator|<
name|QApplication
operator|::
name|startDragDistance
argument_list|()
operator|)
condition|)
block|{
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|StartOfBlock
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|selectedBlockOnTrippleClick
operator|=
name|cursor
expr_stmt|;
name|anchorOnMousePress
operator|=
name|QString
argument_list|()
expr_stmt|;
name|trippleClickTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|int
name|cursorPos
init|=
name|q
operator|->
name|hitTest
argument_list|(
name|pos
argument_list|,
name|Qt
operator|::
name|FuzzyHit
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursorPos
operator|==
operator|-
literal|1
condition|)
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|modifiers
operator|==
name|Qt
operator|::
name|ShiftModifier
operator|&&
operator|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextSelectableByMouse
operator|)
condition|)
block|{
if|if
condition|(
name|wordSelectionEnabled
operator|&&
operator|!
name|selectedWordOnDoubleClick
operator|.
name|hasSelection
argument_list|()
condition|)
block|{
name|selectedWordOnDoubleClick
operator|=
name|cursor
expr_stmt|;
name|selectedWordOnDoubleClick
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selectedBlockOnTrippleClick
operator|.
name|hasSelection
argument_list|()
condition|)
name|extendBlockwiseSelection
argument_list|(
name|cursorPos
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|selectedWordOnDoubleClick
operator|.
name|hasSelection
argument_list|()
condition|)
name|extendWordwiseSelection
argument_list|(
name|cursorPos
argument_list|,
name|pos
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|wordSelectionEnabled
condition|)
name|setCursorPosition
argument_list|(
name|cursorPos
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dragEnabled
operator|&&
name|cursor
operator|.
name|hasSelection
argument_list|()
operator|&&
operator|!
name|cursorIsFocusIndicator
operator|&&
name|cursorPos
operator|>=
name|cursor
operator|.
name|selectionStart
argument_list|()
operator|&&
name|cursorPos
operator|<=
name|cursor
operator|.
name|selectionEnd
argument_list|()
operator|&&
name|q
operator|->
name|hitTest
argument_list|(
name|pos
argument_list|,
name|Qt
operator|::
name|ExactHit
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|mightStartDrag
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
name|setCursorPosition
argument_list|(
name|cursorPos
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
condition|)
block|{
name|q
operator|->
name|ensureCursorVisible
argument_list|()
expr_stmt|;
if|if
condition|(
name|cursor
operator|.
name|position
argument_list|()
operator|!=
name|oldCursorPos
condition|)
emit|emit
name|q
operator|->
name|cursorPositionChanged
argument_list|()
emit|;
name|_q_updateCurrentCharFormatAndSelection
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cursor
operator|.
name|position
argument_list|()
operator|!=
name|oldCursorPos
condition|)
block|{
emit|emit
name|q
operator|->
name|cursorPositionChanged
argument_list|()
emit|;
emit|emit
name|q
operator|->
name|microFocusChanged
argument_list|()
emit|;
block|}
name|selectionChanged
argument_list|()
expr_stmt|;
block|}
name|repaintOldAndNewSelection
argument_list|(
name|oldSelection
argument_list|)
expr_stmt|;
name|hadSelectionOnMousePress
operator|=
name|cursor
operator|.
name|hasSelection
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|QWidgetTextControlPrivate
operator|::
name|mouseMoveEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|,
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|mousePos
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|LinksAccessibleByMouse
condition|)
block|{
name|QString
name|anchor
init|=
name|q
operator|->
name|anchorAt
argument_list|(
name|mousePos
argument_list|)
decl_stmt|;
if|if
condition|(
name|anchor
operator|!=
name|highlightedAnchor
condition|)
block|{
name|highlightedAnchor
operator|=
name|anchor
expr_stmt|;
emit|emit
name|q
operator|->
name|linkHovered
argument_list|(
name|anchor
argument_list|)
emit|;
block|}
block|}
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|LeftButton
condition|)
block|{
specifier|const
name|bool
name|editable
init|=
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|mousePressed
operator|||
name|editable
operator|||
name|mightStartDrag
operator|||
name|selectedWordOnDoubleClick
operator|.
name|hasSelection
argument_list|()
operator|||
name|selectedBlockOnTrippleClick
operator|.
name|hasSelection
argument_list|()
operator|)
condition|)
return|return;
specifier|const
name|QTextCursor
name|oldSelection
init|=
name|cursor
decl_stmt|;
specifier|const
name|int
name|oldCursorPos
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
if|if
condition|(
name|mightStartDrag
condition|)
block|{
if|if
condition|(
operator|(
name|mousePos
operator|.
name|toPoint
argument_list|()
operator|-
name|mousePressPos
operator|)
operator|.
name|manhattanLength
argument_list|()
operator|>
name|QApplication
operator|::
name|startDragDistance
argument_list|()
condition|)
name|startDrag
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|mousePressed
condition|)
return|return;
specifier|const
name|qreal
name|mouseX
init|=
name|qreal
argument_list|(
name|mousePos
operator|.
name|x
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|newCursorPos
init|=
name|q
operator|->
name|hitTest
argument_list|(
name|mousePos
argument_list|,
name|Qt
operator|::
name|FuzzyHit
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPreediting
argument_list|()
condition|)
block|{
comment|// note: oldCursorPos not including preedit
name|int
name|selectionStartPos
init|=
name|q
operator|->
name|hitTest
argument_list|(
name|mousePressPos
argument_list|,
name|Qt
operator|::
name|FuzzyHit
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCursorPos
operator|!=
name|selectionStartPos
condition|)
block|{
name|commitPreedit
argument_list|()
expr_stmt|;
comment|// commit invalidates positions
name|newCursorPos
operator|=
name|q
operator|->
name|hitTest
argument_list|(
name|mousePos
argument_list|,
name|Qt
operator|::
name|FuzzyHit
argument_list|)
expr_stmt|;
name|selectionStartPos
operator|=
name|q
operator|->
name|hitTest
argument_list|(
name|mousePressPos
argument_list|,
name|Qt
operator|::
name|FuzzyHit
argument_list|)
expr_stmt|;
name|setCursorPosition
argument_list|(
name|selectionStartPos
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newCursorPos
operator|==
operator|-
literal|1
condition|)
return|return;
if|if
condition|(
name|wordSelectionEnabled
operator|&&
operator|!
name|selectedWordOnDoubleClick
operator|.
name|hasSelection
argument_list|()
condition|)
block|{
name|selectedWordOnDoubleClick
operator|=
name|cursor
expr_stmt|;
name|selectedWordOnDoubleClick
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selectedBlockOnTrippleClick
operator|.
name|hasSelection
argument_list|()
condition|)
name|extendBlockwiseSelection
argument_list|(
name|newCursorPos
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|selectedWordOnDoubleClick
operator|.
name|hasSelection
argument_list|()
condition|)
name|extendWordwiseSelection
argument_list|(
name|newCursorPos
argument_list|,
name|mouseX
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|isPreediting
argument_list|()
condition|)
name|setCursorPosition
argument_list|(
name|newCursorPos
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
if|if
condition|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
condition|)
block|{
comment|// don't call ensureVisible for the visible cursor to avoid jumping
comment|// scrollbars. the autoscrolling ensures smooth scrolling if necessary.
comment|//q->ensureCursorVisible();
if|if
condition|(
name|cursor
operator|.
name|position
argument_list|()
operator|!=
name|oldCursorPos
condition|)
emit|emit
name|q
operator|->
name|cursorPositionChanged
argument_list|()
emit|;
name|_q_updateCurrentCharFormatAndSelection
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_IM
if|if
condition|(
name|contextWidget
condition|)
block|{
if|if
condition|(
name|QInputContext
modifier|*
name|ic
init|=
name|qApp
operator|->
name|inputContext
argument_list|()
condition|)
block|{
name|ic
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|//QT_NO_IM
block|}
else|else
block|{
comment|//emit q->visibilityRequest(QRectF(mousePos, QSizeF(1, 1)));
if|if
condition|(
name|cursor
operator|.
name|position
argument_list|()
operator|!=
name|oldCursorPos
condition|)
emit|emit
name|q
operator|->
name|cursorPositionChanged
argument_list|()
emit|;
block|}
name|selectionChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|repaintOldAndNewSelection
argument_list|(
name|oldSelection
argument_list|)
expr_stmt|;
block|}
name|sendMouseEventToInputContext
argument_list|(
name|e
argument_list|,
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|button
argument_list|,
name|mousePos
argument_list|,
name|modifiers
argument_list|,
name|buttons
argument_list|,
name|globalPos
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QWidgetTextControlPrivate
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|,
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|sendMouseEventToInputContext
argument_list|(
name|e
argument_list|,
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|,
name|button
argument_list|,
name|pos
argument_list|,
name|modifiers
argument_list|,
name|buttons
argument_list|,
name|globalPos
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|const
name|QTextCursor
name|oldSelection
init|=
name|cursor
decl_stmt|;
specifier|const
name|int
name|oldCursorPos
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
if|if
condition|(
name|mightStartDrag
operator|&&
operator|(
name|button
operator|&
name|Qt
operator|::
name|LeftButton
operator|)
condition|)
block|{
name|mousePressed
operator|=
literal|false
expr_stmt|;
name|setCursorPosition
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|selectionChanged
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|mousePressed
condition|)
block|{
name|mousePressed
operator|=
literal|false
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|setClipboardSelection
argument_list|()
expr_stmt|;
name|selectionChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|MidButton
operator|&&
operator|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
operator|)
operator|&&
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|supportsSelection
argument_list|()
condition|)
block|{
name|setCursorPosition
argument_list|(
name|pos
argument_list|)
expr_stmt|;
specifier|const
name|QMimeData
modifier|*
name|md
init|=
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|mimeData
argument_list|(
name|QClipboard
operator|::
name|Selection
argument_list|)
decl_stmt|;
if|if
condition|(
name|md
condition|)
name|q
operator|->
name|insertFromMimeData
argument_list|(
name|md
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|repaintOldAndNewSelection
argument_list|(
name|oldSelection
argument_list|)
expr_stmt|;
if|if
condition|(
name|cursor
operator|.
name|position
argument_list|()
operator|!=
name|oldCursorPos
condition|)
emit|emit
name|q
operator|->
name|cursorPositionChanged
argument_list|()
emit|;
if|if
condition|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|LinksAccessibleByMouse
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|button
operator|&
name|Qt
operator|::
name|LeftButton
operator|)
condition|)
return|return;
specifier|const
name|QString
name|anchor
init|=
name|q
operator|->
name|anchorAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|anchor
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
operator|||
operator|(
name|anchor
operator|==
name|anchorOnMousePress
operator|&&
name|hadSelectionOnMousePress
operator|)
condition|)
block|{
specifier|const
name|int
name|anchorPos
init|=
name|q
operator|->
name|hitTest
argument_list|(
name|pos
argument_list|,
name|Qt
operator|::
name|ExactHit
argument_list|)
decl_stmt|;
if|if
condition|(
name|anchorPos
operator|!=
operator|-
literal|1
condition|)
block|{
name|cursor
operator|.
name|setPosition
argument_list|(
name|anchorPos
argument_list|)
expr_stmt|;
name|QString
name|anchor
init|=
name|anchorOnMousePress
decl_stmt|;
name|anchorOnMousePress
operator|=
name|QString
argument_list|()
expr_stmt|;
name|activateLinkUnderCursor
argument_list|(
name|anchor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|mouseDoubleClickEvent
name|void
name|QWidgetTextControlPrivate
operator|::
name|mouseDoubleClickEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|,
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|LeftButton
operator|&&
operator|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextSelectableByMouse
operator|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
name|mightStartDrag
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
name|commitPreedit
argument_list|()
expr_stmt|;
specifier|const
name|QTextCursor
name|oldSelection
init|=
name|cursor
decl_stmt|;
name|setCursorPosition
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|QTextLine
name|line
init|=
name|currentTextLine
argument_list|(
name|cursor
argument_list|)
decl_stmt|;
name|bool
name|doEmit
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|isValid
argument_list|()
operator|&&
name|line
operator|.
name|textLength
argument_list|()
condition|)
block|{
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
name|doEmit
operator|=
literal|true
expr_stmt|;
block|}
name|repaintOldAndNewSelection
argument_list|(
name|oldSelection
argument_list|)
expr_stmt|;
name|cursorIsFocusIndicator
operator|=
literal|false
expr_stmt|;
name|selectedWordOnDoubleClick
operator|=
name|cursor
expr_stmt|;
name|trippleClickPoint
operator|=
name|pos
expr_stmt|;
name|trippleClickTimer
operator|.
name|start
argument_list|(
name|QApplication
operator|::
name|doubleClickInterval
argument_list|()
argument_list|,
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|doEmit
condition|)
block|{
name|selectionChanged
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|setClipboardSelection
argument_list|()
expr_stmt|;
endif|#
directive|endif
emit|emit
name|q
operator|->
name|cursorPositionChanged
argument_list|()
emit|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|sendMouseEventToInputContext
argument_list|(
name|e
argument_list|,
name|QEvent
operator|::
name|MouseButtonDblClick
argument_list|,
name|button
argument_list|,
name|pos
argument_list|,
name|modifiers
argument_list|,
name|buttons
argument_list|,
name|globalPos
argument_list|)
condition|)
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sendMouseEventToInputContext
name|bool
name|QWidgetTextControlPrivate
operator|::
name|sendMouseEventToInputContext
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|,
name|QEvent
operator|::
name|Type
name|eventType
parameter_list|,
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|,
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_IM
argument_list|)
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextWidget
operator|&&
name|isPreediting
argument_list|()
condition|)
block|{
name|QTextLayout
modifier|*
name|layout
init|=
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|layout
argument_list|()
decl_stmt|;
name|QInputContext
modifier|*
name|ctx
init|=
name|qApp
operator|->
name|inputContext
argument_list|()
decl_stmt|;
name|int
name|cursorPos
init|=
name|q
operator|->
name|hitTest
argument_list|(
name|pos
argument_list|,
name|Qt
operator|::
name|FuzzyHit
argument_list|)
operator|-
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
if|if
condition|(
name|cursorPos
argument_list|<
literal|0
operator|||
name|cursorPos
argument_list|>
name|layout
operator|->
name|preeditAreaText
argument_list|()
operator|.
name|length
argument_list|()
condition|)
name|cursorPos
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|ctx
operator|&&
name|cursorPos
operator|>=
literal|0
condition|)
block|{
name|QMouseEvent
name|ev
argument_list|(
name|eventType
argument_list|,
name|contextWidget
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
argument_list|,
name|contextWidget
operator|->
name|topLevelWidget
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
argument_list|,
name|globalPos
argument_list|,
name|button
argument_list|,
name|buttons
argument_list|,
name|modifiers
argument_list|)
decl_stmt|;
name|ctx
operator|->
name|mouseHandler
argument_list|(
name|cursorPos
argument_list|,
operator|&
name|ev
argument_list|)
expr_stmt|;
name|e
operator|->
name|setAccepted
argument_list|(
name|ev
operator|.
name|isAccepted
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|eventType
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|modifiers
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|contextMenuEvent
name|void
name|QWidgetTextControlPrivate
operator|::
name|contextMenuEvent
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|screenPos
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|docPos
parameter_list|,
name|QWidget
modifier|*
name|contextWidget
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_CONTEXTMENU
name|Q_UNUSED
argument_list|(
name|screenPos
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|docPos
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|contextWidget
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasFocus
condition|)
return|return;
name|QMenu
modifier|*
name|menu
init|=
name|q
operator|->
name|createStandardContextMenu
argument_list|(
name|docPos
argument_list|,
name|contextWidget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|menu
condition|)
return|return;
name|menu
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|menu
operator|->
name|popup
argument_list|(
name|screenPos
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|dragEnterEvent
name|bool
name|QWidgetTextControlPrivate
operator|::
name|dragEnterEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|,
specifier|const
name|QMimeData
modifier|*
name|mimeData
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
operator|)
operator|||
operator|!
name|q
operator|->
name|canInsertFromMimeData
argument_list|(
name|mimeData
argument_list|)
condition|)
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|dndFeedbackCursor
operator|=
name|QTextCursor
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
comment|// accept proposed action
block|}
end_function
begin_function
DECL|function|dragLeaveEvent
name|void
name|QWidgetTextControlPrivate
operator|::
name|dragLeaveEvent
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
specifier|const
name|QRectF
name|crect
init|=
name|q
operator|->
name|cursorRect
argument_list|(
name|dndFeedbackCursor
argument_list|)
decl_stmt|;
name|dndFeedbackCursor
operator|=
name|QTextCursor
argument_list|()
expr_stmt|;
if|if
condition|(
name|crect
operator|.
name|isValid
argument_list|()
condition|)
emit|emit
name|q
operator|->
name|updateRequest
argument_list|(
name|crect
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|dragMoveEvent
name|bool
name|QWidgetTextControlPrivate
operator|::
name|dragMoveEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|,
specifier|const
name|QMimeData
modifier|*
name|mimeData
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
operator|)
operator|||
operator|!
name|q
operator|->
name|canInsertFromMimeData
argument_list|(
name|mimeData
argument_list|)
condition|)
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|int
name|cursorPos
init|=
name|q
operator|->
name|hitTest
argument_list|(
name|pos
argument_list|,
name|Qt
operator|::
name|FuzzyHit
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursorPos
operator|!=
operator|-
literal|1
condition|)
block|{
name|QRectF
name|crect
init|=
name|q
operator|->
name|cursorRect
argument_list|(
name|dndFeedbackCursor
argument_list|)
decl_stmt|;
if|if
condition|(
name|crect
operator|.
name|isValid
argument_list|()
condition|)
emit|emit
name|q
operator|->
name|updateRequest
argument_list|(
name|crect
argument_list|)
emit|;
name|dndFeedbackCursor
operator|=
name|cursor
expr_stmt|;
name|dndFeedbackCursor
operator|.
name|setPosition
argument_list|(
name|cursorPos
argument_list|)
expr_stmt|;
name|crect
operator|=
name|q
operator|->
name|cursorRect
argument_list|(
name|dndFeedbackCursor
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|updateRequest
argument_list|(
name|crect
argument_list|)
emit|;
block|}
return|return
literal|true
return|;
comment|// accept proposed action
block|}
end_function
begin_function
DECL|function|dropEvent
name|bool
name|QWidgetTextControlPrivate
operator|::
name|dropEvent
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|mimeData
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
name|Qt
operator|::
name|DropAction
name|dropAction
parameter_list|,
name|QObject
modifier|*
name|source
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|dndFeedbackCursor
operator|=
name|QTextCursor
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
operator|)
operator|||
operator|!
name|q
operator|->
name|canInsertFromMimeData
argument_list|(
name|mimeData
argument_list|)
condition|)
return|return
literal|false
return|;
name|repaintSelection
argument_list|()
expr_stmt|;
name|QTextCursor
name|insertionCursor
init|=
name|q
operator|->
name|cursorForPosition
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|insertionCursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|dropAction
operator|==
name|Qt
operator|::
name|MoveAction
operator|&&
name|source
operator|==
name|contextWidget
condition|)
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
name|cursor
operator|=
name|insertionCursor
expr_stmt|;
name|q
operator|->
name|insertFromMimeData
argument_list|(
name|mimeData
argument_list|)
expr_stmt|;
name|insertionCursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
name|q
operator|->
name|ensureCursorVisible
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
comment|// accept proposed action
block|}
end_function
begin_function
DECL|function|inputMethodEvent
name|void
name|QWidgetTextControlPrivate
operator|::
name|inputMethodEvent
parameter_list|(
name|QInputMethodEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
operator|)
operator|||
name|cursor
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
name|bool
name|isGettingInput
init|=
operator|!
name|e
operator|->
name|commitString
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|e
operator|->
name|preeditString
argument_list|()
operator|!=
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|layout
argument_list|()
operator|->
name|preeditAreaText
argument_list|()
operator|||
name|e
operator|->
name|replacementLength
argument_list|()
operator|>
literal|0
decl_stmt|;
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|isGettingInput
condition|)
block|{
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
block|}
comment|// insert commit string
if|if
condition|(
operator|!
name|e
operator|->
name|commitString
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|e
operator|->
name|replacementLength
argument_list|()
condition|)
block|{
name|QTextCursor
name|c
init|=
name|cursor
decl_stmt|;
name|c
operator|.
name|setPosition
argument_list|(
name|c
operator|.
name|position
argument_list|()
operator|+
name|e
operator|->
name|replacementStart
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPosition
argument_list|(
name|c
operator|.
name|position
argument_list|()
operator|+
name|e
operator|->
name|replacementLength
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|c
operator|.
name|insertText
argument_list|(
name|e
operator|->
name|commitString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|e
operator|->
name|attributes
argument_list|()
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QInputMethodEvent
operator|::
name|Attribute
modifier|&
name|a
init|=
name|e
operator|->
name|attributes
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|type
operator|==
name|QInputMethodEvent
operator|::
name|Selection
condition|)
block|{
name|QTextCursor
name|oldCursor
init|=
name|cursor
decl_stmt|;
name|int
name|blockStart
init|=
name|a
operator|.
name|start
operator|+
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|position
argument_list|()
decl_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|blockStart
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|blockStart
operator|+
name|a
operator|.
name|length
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|q
operator|->
name|ensureCursorVisible
argument_list|()
expr_stmt|;
name|repaintOldAndNewSelection
argument_list|(
name|oldCursor
argument_list|)
expr_stmt|;
block|}
block|}
name|QTextBlock
name|block
init|=
name|cursor
operator|.
name|block
argument_list|()
decl_stmt|;
name|QTextLayout
modifier|*
name|layout
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
if|if
condition|(
name|isGettingInput
condition|)
name|layout
operator|->
name|setPreeditArea
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
operator|-
name|block
operator|.
name|position
argument_list|()
argument_list|,
name|e
operator|->
name|preeditString
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTextLayout
operator|::
name|FormatRange
argument_list|>
name|overrides
decl_stmt|;
specifier|const
name|int
name|oldPreeditCursor
init|=
name|preeditCursor
decl_stmt|;
name|preeditCursor
operator|=
name|e
operator|->
name|preeditString
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
name|hideCursor
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|e
operator|->
name|attributes
argument_list|()
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QInputMethodEvent
operator|::
name|Attribute
modifier|&
name|a
init|=
name|e
operator|->
name|attributes
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|type
operator|==
name|QInputMethodEvent
operator|::
name|Cursor
condition|)
block|{
name|preeditCursor
operator|=
name|a
operator|.
name|start
expr_stmt|;
name|hideCursor
operator|=
operator|!
name|a
operator|.
name|length
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|.
name|type
operator|==
name|QInputMethodEvent
operator|::
name|TextFormat
condition|)
block|{
name|QTextCharFormat
name|f
init|=
name|qvariant_cast
argument_list|<
name|QTextFormat
argument_list|>
argument_list|(
name|a
operator|.
name|value
argument_list|)
operator|.
name|toCharFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QTextLayout
operator|::
name|FormatRange
name|o
decl_stmt|;
name|o
operator|.
name|start
operator|=
name|a
operator|.
name|start
operator|+
name|cursor
operator|.
name|position
argument_list|()
operator|-
name|block
operator|.
name|position
argument_list|()
expr_stmt|;
name|o
operator|.
name|length
operator|=
name|a
operator|.
name|length
expr_stmt|;
name|o
operator|.
name|format
operator|=
name|f
expr_stmt|;
name|overrides
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|layout
operator|->
name|setAdditionalFormats
argument_list|(
name|overrides
argument_list|)
expr_stmt|;
name|tentativeCommit
operator|=
name|e
operator|->
name|tentativeCommitString
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|cursor
operator|.
name|d
condition|)
name|cursor
operator|.
name|d
operator|->
name|setX
argument_list|()
expr_stmt|;
if|if
condition|(
name|oldPreeditCursor
operator|!=
name|preeditCursor
condition|)
emit|emit
name|q
operator|->
name|microFocusChanged
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|inputMethodQuery
name|QVariant
name|QWidgetTextControl
operator|::
name|inputMethodQuery
parameter_list|(
name|Qt
operator|::
name|InputMethodQuery
name|property
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|d
operator|->
name|cursor
operator|.
name|block
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|property
condition|)
block|{
case|case
name|Qt
operator|::
name|ImCursorRectangle
case|:
return|return
name|cursorRect
argument_list|()
return|;
case|case
name|Qt
operator|::
name|ImFont
case|:
return|return
name|QVariant
argument_list|(
name|d
operator|->
name|cursor
operator|.
name|charFormat
argument_list|()
operator|.
name|font
argument_list|()
argument_list|)
return|;
case|case
name|Qt
operator|::
name|ImCursorPosition
case|:
return|return
name|QVariant
argument_list|(
name|d
operator|->
name|cursor
operator|.
name|position
argument_list|()
operator|-
name|block
operator|.
name|position
argument_list|()
argument_list|)
return|;
case|case
name|Qt
operator|::
name|ImSurroundingText
case|:
return|return
name|QVariant
argument_list|(
name|block
operator|.
name|text
argument_list|()
argument_list|)
return|;
case|case
name|Qt
operator|::
name|ImCurrentSelection
case|:
return|return
name|QVariant
argument_list|(
name|d
operator|->
name|cursor
operator|.
name|selectedText
argument_list|()
argument_list|)
return|;
case|case
name|Qt
operator|::
name|ImMaximumTextLength
case|:
return|return
name|QVariant
argument_list|()
return|;
comment|// No limit.
case|case
name|Qt
operator|::
name|ImAnchorPosition
case|:
return|return
name|QVariant
argument_list|(
name|d
operator|->
name|cursor
operator|.
name|anchor
argument_list|()
operator|-
name|block
operator|.
name|position
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|QVariant
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|setFocus
name|void
name|QWidgetTextControl
operator|::
name|setFocus
parameter_list|(
name|bool
name|focus
parameter_list|,
name|Qt
operator|::
name|FocusReason
name|reason
parameter_list|)
block|{
name|QFocusEvent
name|ev
argument_list|(
name|focus
condition|?
name|QEvent
operator|::
name|FocusIn
else|:
name|QEvent
operator|::
name|FocusOut
argument_list|,
name|reason
argument_list|)
decl_stmt|;
name|processEvent
argument_list|(
operator|&
name|ev
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|focusEvent
name|void
name|QWidgetTextControlPrivate
operator|::
name|focusEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|updateRequest
argument_list|(
name|q
operator|->
name|selectionRect
argument_list|()
argument_list|)
emit|;
if|if
condition|(
name|e
operator|->
name|gotFocus
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
operator|!
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|||
operator|(
name|hasEditFocus
operator|&&
operator|(
name|e
operator|->
name|reason
argument_list|()
operator|==
name|Qt
operator|::
name|PopupFocusReason
operator|)
operator|)
condition|)
block|{
endif|#
directive|endif
name|cursorOn
operator|=
operator|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextSelectableByKeyboard
operator|)
expr_stmt|;
if|if
condition|(
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
condition|)
block|{
name|setBlinkingCursorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
block|}
endif|#
directive|endif
block|}
else|else
block|{
name|commitPreedit
argument_list|()
expr_stmt|;
name|setBlinkingCursorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|cursorIsFocusIndicator
operator|&&
name|e
operator|->
name|reason
argument_list|()
operator|!=
name|Qt
operator|::
name|ActiveWindowFocusReason
operator|&&
name|e
operator|->
name|reason
argument_list|()
operator|!=
name|Qt
operator|::
name|PopupFocusReason
operator|&&
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
block|{
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
block|}
name|hasFocus
operator|=
name|e
operator|->
name|gotFocus
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|anchorForCursor
name|QString
name|QWidgetTextControlPrivate
operator|::
name|anchorForCursor
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|anchorCursor
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|anchorCursor
operator|.
name|hasSelection
argument_list|()
condition|)
block|{
name|QTextCursor
name|cursor
init|=
name|anchorCursor
decl_stmt|;
if|if
condition|(
name|cursor
operator|.
name|selectionStart
argument_list|()
operator|!=
name|cursor
operator|.
name|position
argument_list|()
condition|)
name|cursor
operator|.
name|setPosition
argument_list|(
name|cursor
operator|.
name|selectionStart
argument_list|()
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
init|=
name|cursor
operator|.
name|charFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|fmt
operator|.
name|isAnchor
argument_list|()
operator|&&
name|fmt
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|AnchorHref
argument_list|)
condition|)
return|return
name|fmt
operator|.
name|stringProperty
argument_list|(
name|QTextFormat
operator|::
name|AnchorHref
argument_list|)
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
end_ifdef
begin_function
DECL|function|editFocusEvent
name|void
name|QWidgetTextControlPrivate
operator|::
name|editFocusEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|EnterEditFocus
operator|&&
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
condition|)
block|{
specifier|const
name|QTextCursor
name|oldSelection
init|=
name|cursor
decl_stmt|;
specifier|const
name|int
name|oldCursorPos
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|moved
init|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
decl_stmt|;
name|q
operator|->
name|ensureCursorVisible
argument_list|()
expr_stmt|;
if|if
condition|(
name|moved
condition|)
block|{
if|if
condition|(
name|cursor
operator|.
name|position
argument_list|()
operator|!=
name|oldCursorPos
condition|)
emit|emit
name|q
operator|->
name|cursorPositionChanged
argument_list|()
emit|;
emit|emit
name|q
operator|->
name|microFocusChanged
argument_list|()
emit|;
block|}
name|selectionChanged
argument_list|()
expr_stmt|;
name|repaintOldAndNewSelection
argument_list|(
name|oldSelection
argument_list|)
expr_stmt|;
name|setBlinkingCursorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
name|setBlinkingCursorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|hasEditFocus
operator|=
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|EnterEditFocus
condition|?
literal|true
else|:
literal|false
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_function
DECL|function|createStandardContextMenu
name|QMenu
modifier|*
name|QWidgetTextControl
operator|::
name|createStandardContextMenu
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|showTextSelectionActions
init|=
name|d
operator|->
name|interactionFlags
operator|&
operator|(
name|Qt
operator|::
name|TextEditable
operator||
name|Qt
operator|::
name|TextSelectableByKeyboard
operator||
name|Qt
operator|::
name|TextSelectableByMouse
operator|)
decl_stmt|;
name|d
operator|->
name|linkToCopy
operator|=
name|QString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|pos
operator|.
name|isNull
argument_list|()
condition|)
name|d
operator|->
name|linkToCopy
operator|=
name|anchorAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|linkToCopy
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|showTextSelectionActions
condition|)
return|return
literal|0
return|;
name|QMenu
modifier|*
name|menu
init|=
operator|new
name|QMenu
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|a
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
condition|)
block|{
name|a
operator|=
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"&Undo"
argument_list|)
operator|+
name|ACCEL_KEY
argument_list|(
name|QKeySequence
operator|::
name|Undo
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|undo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|->
name|setEnabled
argument_list|(
name|d
operator|->
name|doc
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"&Redo"
argument_list|)
operator|+
name|ACCEL_KEY
argument_list|(
name|QKeySequence
operator|::
name|Redo
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|redo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|->
name|setEnabled
argument_list|(
name|d
operator|->
name|doc
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|a
operator|=
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Cu&t"
argument_list|)
operator|+
name|ACCEL_KEY
argument_list|(
name|QKeySequence
operator|::
name|Cut
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|cut
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|->
name|setEnabled
argument_list|(
name|d
operator|->
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showTextSelectionActions
condition|)
block|{
name|a
operator|=
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"&Copy"
argument_list|)
operator|+
name|ACCEL_KEY
argument_list|(
name|QKeySequence
operator|::
name|Copy
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|copy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|->
name|setEnabled
argument_list|(
name|d
operator|->
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|d
operator|->
name|interactionFlags
operator|&
name|Qt
operator|::
name|LinksAccessibleByKeyboard
operator|)
operator|||
operator|(
name|d
operator|->
name|interactionFlags
operator|&
name|Qt
operator|::
name|LinksAccessibleByMouse
operator|)
condition|)
block|{
name|a
operator|=
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Copy&Link Location"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_copyLink
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|->
name|setEnabled
argument_list|(
operator|!
name|d
operator|->
name|linkToCopy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_CLIPBOARD
argument_list|)
name|a
operator|=
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"&Paste"
argument_list|)
operator|+
name|ACCEL_KEY
argument_list|(
name|QKeySequence
operator|::
name|Paste
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|paste
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|->
name|setEnabled
argument_list|(
name|canPaste
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|a
operator|=
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Delete"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_deleteSelected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|->
name|setEnabled
argument_list|(
name|d
operator|->
name|cursor
operator|.
name|hasSelection
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showTextSelectionActions
condition|)
block|{
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|a
operator|=
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Select All"
argument_list|)
operator|+
name|ACCEL_KEY
argument_list|(
name|QKeySequence
operator|::
name|SelectAll
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|selectAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|->
name|setEnabled
argument_list|(
operator|!
name|d
operator|->
name|doc
operator|->
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_IM
argument_list|)
if|if
condition|(
name|d
operator|->
name|contextWidget
condition|)
block|{
name|QInputContext
modifier|*
name|qic
init|=
name|qApp
operator|->
name|inputContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|qic
condition|)
block|{
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|imActions
init|=
name|qic
operator|->
name|actions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|imActions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|menu
operator|->
name|addAction
argument_list|(
name|imActions
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
if|if
condition|(
operator|(
name|d
operator|->
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
operator|)
operator|&&
name|qt_use_rtl_extensions
condition|)
block|{
else|#
directive|else
if|if
condition|(
name|d
operator|->
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
condition|)
block|{
endif|#
directive|endif
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|QUnicodeControlCharacterMenu
modifier|*
name|ctrlCharacterMenu
init|=
operator|new
name|QUnicodeControlCharacterMenu
argument_list|(
name|this
argument_list|,
name|menu
argument_list|)
decl_stmt|;
name|menu
operator|->
name|addMenu
argument_list|(
name|ctrlCharacterMenu
argument_list|)
expr_stmt|;
block|}
return|return
name|menu
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_CONTEXTMENU
DECL|function|cursorForPosition
name|QTextCursor
name|QWidgetTextControl
operator|::
name|cursorForPosition
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|int
name|cursorPos
init|=
name|hitTest
argument_list|(
name|pos
argument_list|,
name|Qt
operator|::
name|FuzzyHit
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursorPos
operator|==
operator|-
literal|1
condition|)
name|cursorPos
operator|=
literal|0
expr_stmt|;
name|QTextCursor
name|c
argument_list|(
name|d
operator|->
name|doc
argument_list|)
decl_stmt|;
name|c
operator|.
name|setPosition
argument_list|(
name|cursorPos
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|function|cursorRect
name|QRectF
name|QWidgetTextControl
operator|::
name|cursorRect
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|cursor
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|cursor
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QRectF
argument_list|()
return|;
return|return
name|d
operator|->
name|rectForPosition
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|)
return|;
block|}
DECL|function|cursorRect
name|QRectF
name|QWidgetTextControl
operator|::
name|cursorRect
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|cursorRect
argument_list|(
name|d
operator|->
name|cursor
argument_list|)
return|;
block|}
DECL|function|cursorRectPlusUnicodeDirectionMarkers
name|QRectF
name|QWidgetTextControlPrivate
operator|::
name|cursorRectPlusUnicodeDirectionMarkers
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|cursor
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|cursor
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QRectF
argument_list|()
return|;
return|return
name|rectForPosition
argument_list|(
name|cursor
operator|.
name|position
argument_list|()
argument_list|)
operator|.
name|adjusted
argument_list|(
operator|-
literal|4
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|function|anchorAt
name|QString
name|QWidgetTextControl
operator|::
name|anchorAt
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|anchorAt
argument_list|(
name|pos
argument_list|)
return|;
block|}
DECL|function|anchorAtCursor
name|QString
name|QWidgetTextControl
operator|::
name|anchorAtCursor
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|anchorForCursor
argument_list|(
name|d
operator|->
name|cursor
argument_list|)
return|;
block|}
DECL|function|overwriteMode
name|bool
name|QWidgetTextControl
operator|::
name|overwriteMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|overwriteMode
return|;
block|}
DECL|function|setOverwriteMode
name|void
name|QWidgetTextControl
operator|::
name|setOverwriteMode
parameter_list|(
name|bool
name|overwrite
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|overwriteMode
operator|=
name|overwrite
expr_stmt|;
block|}
DECL|function|cursorWidth
name|int
name|QWidgetTextControl
operator|::
name|cursorWidth
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_PROPERTIES
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|property
argument_list|(
literal|"cursorWidth"
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
else|#
directive|else
return|return
literal|1
return|;
endif|#
directive|endif
block|}
DECL|function|setCursorWidth
name|void
name|QWidgetTextControl
operator|::
name|setCursorWidth
parameter_list|(
name|int
name|width
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_PROPERTIES
name|Q_UNUSED
argument_list|(
name|width
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|width
operator|==
operator|-
literal|1
condition|)
name|width
operator|=
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_TextCursorWidth
argument_list|)
expr_stmt|;
name|d
operator|->
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|setProperty
argument_list|(
literal|"cursorWidth"
argument_list|,
name|width
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|repaintCursor
argument_list|()
expr_stmt|;
block|}
DECL|function|acceptRichText
name|bool
name|QWidgetTextControl
operator|::
name|acceptRichText
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|acceptRichText
return|;
block|}
DECL|function|setAcceptRichText
name|void
name|QWidgetTextControl
operator|::
name|setAcceptRichText
parameter_list|(
name|bool
name|accept
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|acceptRichText
operator|=
name|accept
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TEXTEDIT
DECL|function|setExtraSelections
name|void
name|QWidgetTextControl
operator|::
name|setExtraSelections
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
modifier|&
name|selections
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|hash
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|extraSelections
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|Selection
modifier|&
name|esel
init|=
name|d
operator|->
name|extraSelections
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|hash
operator|.
name|insertMulti
argument_list|(
name|esel
operator|.
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selections
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QTextEdit
operator|::
name|ExtraSelection
modifier|&
name|sel
init|=
name|selections
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|it
init|=
name|hash
operator|.
name|find
argument_list|(
name|sel
operator|.
name|cursor
operator|.
name|anchor
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|hash
operator|.
name|end
argument_list|()
condition|)
block|{
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|Selection
modifier|&
name|esel
init|=
name|d
operator|->
name|extraSelections
operator|.
name|at
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|esel
operator|.
name|cursor
operator|.
name|position
argument_list|()
operator|==
name|sel
operator|.
name|cursor
operator|.
name|position
argument_list|()
operator|&&
name|esel
operator|.
name|format
operator|==
name|sel
operator|.
name|format
condition|)
block|{
name|hash
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|QRectF
name|r
init|=
name|selectionRect
argument_list|(
name|sel
operator|.
name|cursor
argument_list|)
decl_stmt|;
if|if
condition|(
name|sel
operator|.
name|format
operator|.
name|boolProperty
argument_list|(
name|QTextFormat
operator|::
name|FullWidthSelection
argument_list|)
condition|)
block|{
name|r
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|r
operator|.
name|setWidth
argument_list|(
name|qreal
argument_list|(
name|INT_MAX
argument_list|)
argument_list|)
expr_stmt|;
block|}
emit|emit
name|updateRequest
argument_list|(
name|r
argument_list|)
emit|;
block|}
for|for
control|(
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|it
init|=
name|hash
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|hash
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|Selection
modifier|&
name|esel
init|=
name|d
operator|->
name|extraSelections
operator|.
name|at
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|QRectF
name|r
init|=
name|selectionRect
argument_list|(
name|esel
operator|.
name|cursor
argument_list|)
decl_stmt|;
if|if
condition|(
name|esel
operator|.
name|format
operator|.
name|boolProperty
argument_list|(
name|QTextFormat
operator|::
name|FullWidthSelection
argument_list|)
condition|)
block|{
name|r
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|r
operator|.
name|setWidth
argument_list|(
name|qreal
argument_list|(
name|INT_MAX
argument_list|)
argument_list|)
expr_stmt|;
block|}
emit|emit
name|updateRequest
argument_list|(
name|r
argument_list|)
emit|;
block|}
name|d
operator|->
name|extraSelections
operator|.
name|resize
argument_list|(
name|selections
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selections
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|d
operator|->
name|extraSelections
index|[
name|i
index|]
operator|.
name|cursor
operator|=
name|selections
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|cursor
expr_stmt|;
name|d
operator|->
name|extraSelections
index|[
name|i
index|]
operator|.
name|format
operator|=
name|selections
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|format
expr_stmt|;
block|}
block|}
DECL|function|extraSelections
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
name|QWidgetTextControl
operator|::
name|extraSelections
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
name|selections
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|extraSelections
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextEdit
operator|::
name|ExtraSelection
name|sel
decl_stmt|;
name|sel
operator|.
name|cursor
operator|=
name|d
operator|->
name|extraSelections
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|cursor
expr_stmt|;
name|sel
operator|.
name|format
operator|=
name|d
operator|->
name|extraSelections
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|format
expr_stmt|;
name|selections
operator|.
name|append
argument_list|(
name|sel
argument_list|)
expr_stmt|;
block|}
return|return
name|selections
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_TEXTEDIT
DECL|function|setTextWidth
name|void
name|QWidgetTextControl
operator|::
name|setTextWidth
parameter_list|(
name|qreal
name|width
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|doc
operator|->
name|setTextWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
DECL|function|textWidth
name|qreal
name|QWidgetTextControl
operator|::
name|textWidth
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|doc
operator|->
name|textWidth
argument_list|()
return|;
block|}
DECL|function|size
name|QSizeF
name|QWidgetTextControl
operator|::
name|size
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|doc
operator|->
name|size
argument_list|()
return|;
block|}
DECL|function|setOpenExternalLinks
name|void
name|QWidgetTextControl
operator|::
name|setOpenExternalLinks
parameter_list|(
name|bool
name|open
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|openExternalLinks
operator|=
name|open
expr_stmt|;
block|}
DECL|function|openExternalLinks
name|bool
name|QWidgetTextControl
operator|::
name|openExternalLinks
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|openExternalLinks
return|;
block|}
DECL|function|ignoreUnusedNavigationEvents
name|bool
name|QWidgetTextControl
operator|::
name|ignoreUnusedNavigationEvents
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|ignoreUnusedNavigationEvents
return|;
block|}
DECL|function|setIgnoreUnusedNavigationEvents
name|void
name|QWidgetTextControl
operator|::
name|setIgnoreUnusedNavigationEvents
parameter_list|(
name|bool
name|ignore
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|ignoreUnusedNavigationEvents
operator|=
name|ignore
expr_stmt|;
block|}
DECL|function|moveCursor
name|void
name|QWidgetTextControl
operator|::
name|moveCursor
parameter_list|(
name|QTextCursor
operator|::
name|MoveOperation
name|op
parameter_list|,
name|QTextCursor
operator|::
name|MoveMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
specifier|const
name|QTextCursor
name|oldSelection
init|=
name|d
operator|->
name|cursor
decl_stmt|;
specifier|const
name|bool
name|moved
init|=
name|d
operator|->
name|cursor
operator|.
name|movePosition
argument_list|(
name|op
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|d
operator|->
name|_q_updateCurrentCharFormatAndSelection
argument_list|()
expr_stmt|;
name|ensureCursorVisible
argument_list|()
expr_stmt|;
name|d
operator|->
name|repaintOldAndNewSelection
argument_list|(
name|oldSelection
argument_list|)
expr_stmt|;
if|if
condition|(
name|moved
condition|)
emit|emit
name|cursorPositionChanged
argument_list|()
emit|;
block|}
DECL|function|canPaste
name|bool
name|QWidgetTextControl
operator|::
name|canPaste
parameter_list|()
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
condition|)
block|{
specifier|const
name|QMimeData
modifier|*
name|md
init|=
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|mimeData
argument_list|()
decl_stmt|;
return|return
name|md
operator|&&
name|canInsertFromMimeData
argument_list|(
name|md
argument_list|)
return|;
block|}
endif|#
directive|endif
return|return
literal|false
return|;
block|}
DECL|function|setCursorIsFocusIndicator
name|void
name|QWidgetTextControl
operator|::
name|setCursorIsFocusIndicator
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|cursorIsFocusIndicator
operator|=
name|b
expr_stmt|;
name|d
operator|->
name|repaintCursor
argument_list|()
expr_stmt|;
block|}
DECL|function|cursorIsFocusIndicator
name|bool
name|QWidgetTextControl
operator|::
name|cursorIsFocusIndicator
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|cursorIsFocusIndicator
return|;
block|}
DECL|function|setDragEnabled
name|void
name|QWidgetTextControl
operator|::
name|setDragEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|dragEnabled
operator|=
name|enabled
expr_stmt|;
block|}
DECL|function|isDragEnabled
name|bool
name|QWidgetTextControl
operator|::
name|isDragEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|dragEnabled
return|;
block|}
DECL|function|setWordSelectionEnabled
name|void
name|QWidgetTextControl
operator|::
name|setWordSelectionEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|wordSelectionEnabled
operator|=
name|enabled
expr_stmt|;
block|}
DECL|function|isWordSelectionEnabled
name|bool
name|QWidgetTextControl
operator|::
name|isWordSelectionEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|wordSelectionEnabled
return|;
block|}
DECL|function|print
name|void
name|QWidgetTextControl
operator|::
name|print
parameter_list|(
name|QPagedPaintDevice
modifier|*
name|printer
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|printer
condition|)
return|return;
name|QTextDocument
modifier|*
name|tempDoc
init|=
literal|0
decl_stmt|;
specifier|const
name|QTextDocument
modifier|*
name|doc
init|=
name|d
operator|->
name|doc
decl_stmt|;
if|if
condition|(
name|QPagedPaintDevicePrivate
operator|::
name|get
argument_list|(
name|printer
argument_list|)
operator|->
name|printSelectionOnly
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
return|return;
name|tempDoc
operator|=
operator|new
name|QTextDocument
argument_list|(
cast|const_cast
argument_list|<
name|QTextDocument
operator|*
argument_list|>
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|tempDoc
operator|->
name|setMetaInformation
argument_list|(
name|QTextDocument
operator|::
name|DocumentTitle
argument_list|,
name|doc
operator|->
name|metaInformation
argument_list|(
name|QTextDocument
operator|::
name|DocumentTitle
argument_list|)
argument_list|)
expr_stmt|;
name|tempDoc
operator|->
name|setPageSize
argument_list|(
name|doc
operator|->
name|pageSize
argument_list|()
argument_list|)
expr_stmt|;
name|tempDoc
operator|->
name|setDefaultFont
argument_list|(
name|doc
operator|->
name|defaultFont
argument_list|()
argument_list|)
expr_stmt|;
name|tempDoc
operator|->
name|setUseDesignMetrics
argument_list|(
name|doc
operator|->
name|useDesignMetrics
argument_list|()
argument_list|)
expr_stmt|;
name|QTextCursor
argument_list|(
name|tempDoc
argument_list|)
operator|.
name|insertFragment
argument_list|(
name|d
operator|->
name|cursor
operator|.
name|selection
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
name|tempDoc
expr_stmt|;
comment|// copy the custom object handlers
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|handlers
operator|=
name|d
operator|->
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|handlers
expr_stmt|;
block|}
name|doc
operator|->
name|print
argument_list|(
name|printer
argument_list|)
expr_stmt|;
operator|delete
name|tempDoc
expr_stmt|;
block|}
DECL|function|createMimeDataFromSelection
name|QMimeData
modifier|*
name|QWidgetTextControl
operator|::
name|createMimeDataFromSelection
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
specifier|const
name|QTextDocumentFragment
name|fragment
argument_list|(
name|d
operator|->
name|cursor
argument_list|)
decl_stmt|;
return|return
operator|new
name|QTextEditMimeData
argument_list|(
name|fragment
argument_list|)
return|;
block|}
DECL|function|canInsertFromMimeData
name|bool
name|QWidgetTextControl
operator|::
name|canInsertFromMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|source
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|acceptRichText
condition|)
return|return
operator|(
name|source
operator|->
name|hasText
argument_list|()
operator|&&
operator|!
name|source
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
name|source
operator|->
name|hasHtml
argument_list|()
operator|||
name|source
operator|->
name|hasFormat
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/x-qrichtext"
argument_list|)
argument_list|)
operator|||
name|source
operator|->
name|hasFormat
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/x-qt-richtext"
argument_list|)
argument_list|)
return|;
else|else
return|return
name|source
operator|->
name|hasText
argument_list|()
operator|&&
operator|!
name|source
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|function|insertFromMimeData
name|void
name|QWidgetTextControl
operator|::
name|insertFromMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|source
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|interactionFlags
operator|&
name|Qt
operator|::
name|TextEditable
operator|)
operator|||
operator|!
name|source
condition|)
return|return;
name|bool
name|hasData
init|=
literal|false
decl_stmt|;
name|QTextDocumentFragment
name|fragment
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TEXTHTMLPARSER
if|if
condition|(
name|source
operator|->
name|hasFormat
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/x-qrichtext"
argument_list|)
argument_list|)
operator|&&
name|d
operator|->
name|acceptRichText
condition|)
block|{
comment|// x-qrichtext is always UTF-8 (taken from Qt3 since we don't use it anymore).
name|QString
name|richtext
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|source
operator|->
name|data
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/x-qrichtext"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|richtext
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"<meta name=\"qrichtext\" content=\"1\" />"
argument_list|)
argument_list|)
expr_stmt|;
name|fragment
operator|=
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|richtext
argument_list|,
name|d
operator|->
name|doc
argument_list|)
expr_stmt|;
name|hasData
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|->
name|hasHtml
argument_list|()
operator|&&
name|d
operator|->
name|acceptRichText
condition|)
block|{
name|fragment
operator|=
name|QTextDocumentFragment
operator|::
name|fromHtml
argument_list|(
name|source
operator|->
name|html
argument_list|()
argument_list|,
name|d
operator|->
name|doc
argument_list|)
expr_stmt|;
name|hasData
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|QString
name|text
init|=
name|source
operator|->
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|fragment
operator|=
name|QTextDocumentFragment
operator|::
name|fromPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|hasData
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|#
directive|else
name|fragment
operator|=
name|QTextDocumentFragment
operator|::
name|fromPlainText
argument_list|(
name|source
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TEXTHTMLPARSER
if|if
condition|(
name|hasData
condition|)
name|d
operator|->
name|cursor
operator|.
name|insertFragment
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
name|ensureCursorVisible
argument_list|()
expr_stmt|;
block|}
DECL|function|findNextPrevAnchor
name|bool
name|QWidgetTextControl
operator|::
name|findNextPrevAnchor
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|startCursor
parameter_list|,
name|bool
name|next
parameter_list|,
name|QTextCursor
modifier|&
name|newAnchor
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|int
name|anchorStart
init|=
operator|-
literal|1
decl_stmt|;
name|QString
name|anchorHref
decl_stmt|;
name|int
name|anchorEnd
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|next
condition|)
block|{
specifier|const
name|int
name|startPos
init|=
name|startCursor
operator|.
name|selectionEnd
argument_list|()
decl_stmt|;
name|QTextBlock
name|block
init|=
name|d
operator|->
name|doc
operator|->
name|findBlock
argument_list|(
name|startPos
argument_list|)
decl_stmt|;
name|QTextBlock
operator|::
name|Iterator
name|it
init|=
name|block
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
operator|&&
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|position
argument_list|()
operator|<
name|startPos
condition|)
operator|++
name|it
expr_stmt|;
while|while
condition|(
name|block
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|anchorStart
operator|=
operator|-
literal|1
expr_stmt|;
comment|// find next anchor
for|for
control|(
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QTextFragment
name|fragment
init|=
name|it
operator|.
name|fragment
argument_list|()
decl_stmt|;
specifier|const
name|QTextCharFormat
name|fmt
init|=
name|fragment
operator|.
name|charFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|fmt
operator|.
name|isAnchor
argument_list|()
operator|&&
name|fmt
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|AnchorHref
argument_list|)
condition|)
block|{
name|anchorStart
operator|=
name|fragment
operator|.
name|position
argument_list|()
expr_stmt|;
name|anchorHref
operator|=
name|fmt
operator|.
name|anchorHref
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|anchorStart
operator|!=
operator|-
literal|1
condition|)
block|{
name|anchorEnd
operator|=
operator|-
literal|1
expr_stmt|;
comment|// find next non-anchor fragment
for|for
control|(
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QTextFragment
name|fragment
init|=
name|it
operator|.
name|fragment
argument_list|()
decl_stmt|;
specifier|const
name|QTextCharFormat
name|fmt
init|=
name|fragment
operator|.
name|charFormat
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fmt
operator|.
name|isAnchor
argument_list|()
operator|||
name|fmt
operator|.
name|anchorHref
argument_list|()
operator|!=
name|anchorHref
condition|)
block|{
name|anchorEnd
operator|=
name|fragment
operator|.
name|position
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|anchorEnd
operator|==
operator|-
literal|1
condition|)
name|anchorEnd
operator|=
name|block
operator|.
name|position
argument_list|()
operator|+
name|block
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
comment|// make found selection
break|break;
block|}
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|it
operator|=
name|block
operator|.
name|begin
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|startPos
init|=
name|startCursor
operator|.
name|selectionStart
argument_list|()
decl_stmt|;
if|if
condition|(
name|startPos
operator|>
literal|0
condition|)
operator|--
name|startPos
expr_stmt|;
name|QTextBlock
name|block
init|=
name|d
operator|->
name|doc
operator|->
name|findBlock
argument_list|(
name|startPos
argument_list|)
decl_stmt|;
name|QTextBlock
operator|::
name|Iterator
name|blockStart
init|=
name|block
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QTextBlock
operator|::
name|Iterator
name|it
init|=
name|block
operator|.
name|end
argument_list|()
decl_stmt|;
if|if
condition|(
name|startPos
operator|==
name|block
operator|.
name|position
argument_list|()
condition|)
block|{
name|it
operator|=
name|block
operator|.
name|begin
argument_list|()
expr_stmt|;
block|}
else|else
block|{
do|do
block|{
if|if
condition|(
name|it
operator|==
name|blockStart
condition|)
block|{
name|it
operator|=
name|QTextBlock
operator|::
name|Iterator
argument_list|()
expr_stmt|;
name|block
operator|=
name|QTextBlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|--
name|it
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
operator|&&
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|position
argument_list|()
operator|+
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|>
name|startPos
condition|)
do|;
block|}
while|while
condition|(
name|block
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|anchorStart
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|)
block|{
do|do
block|{
specifier|const
name|QTextFragment
name|fragment
init|=
name|it
operator|.
name|fragment
argument_list|()
decl_stmt|;
specifier|const
name|QTextCharFormat
name|fmt
init|=
name|fragment
operator|.
name|charFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|fmt
operator|.
name|isAnchor
argument_list|()
operator|&&
name|fmt
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|AnchorHref
argument_list|)
condition|)
block|{
name|anchorStart
operator|=
name|fragment
operator|.
name|position
argument_list|()
operator|+
name|fragment
operator|.
name|length
argument_list|()
expr_stmt|;
name|anchorHref
operator|=
name|fmt
operator|.
name|anchorHref
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|it
operator|==
name|blockStart
condition|)
name|it
operator|=
name|QTextBlock
operator|::
name|Iterator
argument_list|()
expr_stmt|;
else|else
operator|--
name|it
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|)
do|;
block|}
if|if
condition|(
name|anchorStart
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|anchorEnd
operator|=
operator|-
literal|1
expr_stmt|;
do|do
block|{
specifier|const
name|QTextFragment
name|fragment
init|=
name|it
operator|.
name|fragment
argument_list|()
decl_stmt|;
specifier|const
name|QTextCharFormat
name|fmt
init|=
name|fragment
operator|.
name|charFormat
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fmt
operator|.
name|isAnchor
argument_list|()
operator|||
name|fmt
operator|.
name|anchorHref
argument_list|()
operator|!=
name|anchorHref
condition|)
block|{
name|anchorEnd
operator|=
name|fragment
operator|.
name|position
argument_list|()
operator|+
name|fragment
operator|.
name|length
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|it
operator|==
name|blockStart
condition|)
name|it
operator|=
name|QTextBlock
operator|::
name|Iterator
argument_list|()
expr_stmt|;
else|else
operator|--
name|it
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|)
do|;
if|if
condition|(
name|anchorEnd
operator|==
operator|-
literal|1
condition|)
name|anchorEnd
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|block
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|block
operator|=
name|block
operator|.
name|previous
argument_list|()
expr_stmt|;
name|it
operator|=
name|block
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|block
operator|.
name|begin
argument_list|()
condition|)
operator|--
name|it
expr_stmt|;
name|blockStart
operator|=
name|block
operator|.
name|begin
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|anchorStart
operator|!=
operator|-
literal|1
operator|&&
name|anchorEnd
operator|!=
operator|-
literal|1
condition|)
block|{
name|newAnchor
operator|=
name|d
operator|->
name|cursor
expr_stmt|;
name|newAnchor
operator|.
name|setPosition
argument_list|(
name|anchorStart
argument_list|)
expr_stmt|;
name|newAnchor
operator|.
name|setPosition
argument_list|(
name|anchorEnd
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|activateLinkUnderCursor
name|void
name|QWidgetTextControlPrivate
operator|::
name|activateLinkUnderCursor
parameter_list|(
name|QString
name|href
parameter_list|)
block|{
name|QTextCursor
name|oldCursor
init|=
name|cursor
decl_stmt|;
if|if
condition|(
name|href
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTextCursor
name|tmp
init|=
name|cursor
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|selectionStart
argument_list|()
operator|!=
name|tmp
operator|.
name|position
argument_list|()
condition|)
name|tmp
operator|.
name|setPosition
argument_list|(
name|tmp
operator|.
name|selectionStart
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextCharacter
argument_list|)
expr_stmt|;
name|href
operator|=
name|tmp
operator|.
name|charFormat
argument_list|()
operator|.
name|anchorHref
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|href
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
block|{
name|QTextBlock
name|block
init|=
name|cursor
operator|.
name|block
argument_list|()
decl_stmt|;
specifier|const
name|int
name|cursorPos
init|=
name|cursor
operator|.
name|position
argument_list|()
decl_stmt|;
name|QTextBlock
operator|::
name|Iterator
name|it
init|=
name|block
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QTextBlock
operator|::
name|Iterator
name|linkFragment
decl_stmt|;
for|for
control|(
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QTextFragment
name|fragment
init|=
name|it
operator|.
name|fragment
argument_list|()
decl_stmt|;
specifier|const
name|int
name|fragmentPos
init|=
name|fragment
operator|.
name|position
argument_list|()
decl_stmt|;
if|if
condition|(
name|fragmentPos
operator|<=
name|cursorPos
operator|&&
name|fragmentPos
operator|+
name|fragment
operator|.
name|length
argument_list|()
operator|>
name|cursorPos
condition|)
block|{
name|linkFragment
operator|=
name|it
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|linkFragment
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|it
operator|=
name|linkFragment
expr_stmt|;
name|cursor
operator|.
name|setPosition
argument_list|(
name|it
operator|.
name|fragment
argument_list|()
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|!=
name|block
operator|.
name|begin
argument_list|()
condition|)
block|{
do|do
block|{
operator|--
name|it
expr_stmt|;
name|QTextFragment
name|fragment
init|=
name|it
operator|.
name|fragment
argument_list|()
decl_stmt|;
if|if
condition|(
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|anchorHref
argument_list|()
operator|!=
name|href
condition|)
break|break;
name|cursor
operator|.
name|setPosition
argument_list|(
name|fragment
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|it
operator|!=
name|block
operator|.
name|begin
argument_list|()
condition|)
do|;
block|}
for|for
control|(
name|it
operator|=
name|linkFragment
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QTextFragment
name|fragment
init|=
name|it
operator|.
name|fragment
argument_list|()
decl_stmt|;
if|if
condition|(
name|fragment
operator|.
name|charFormat
argument_list|()
operator|.
name|anchorHref
argument_list|()
operator|!=
name|href
condition|)
break|break;
name|cursor
operator|.
name|setPosition
argument_list|(
name|fragment
operator|.
name|position
argument_list|()
operator|+
name|fragment
operator|.
name|length
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|hasFocus
condition|)
block|{
name|cursorIsFocusIndicator
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|cursorIsFocusIndicator
operator|=
literal|false
expr_stmt|;
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
name|repaintOldAndNewSelection
argument_list|(
name|oldCursor
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DESKTOPSERVICES
if|if
condition|(
name|openExternalLinks
condition|)
name|QDesktopServices
operator|::
name|openUrl
argument_list|(
name|href
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
emit|emit
name|q_func
argument_list|()
operator|->
name|linkActivated
argument_list|(
name|href
argument_list|)
emit|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
DECL|function|showToolTip
name|void
name|QWidgetTextControlPrivate
operator|::
name|showToolTip
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|,
name|QWidget
modifier|*
name|contextWidget
parameter_list|)
block|{
specifier|const
name|QString
name|toolTip
init|=
name|q_func
argument_list|()
operator|->
name|cursorForPosition
argument_list|(
name|pos
argument_list|)
operator|.
name|charFormat
argument_list|()
operator|.
name|toolTip
argument_list|()
decl_stmt|;
if|if
condition|(
name|toolTip
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QToolTip
operator|::
name|showText
argument_list|(
name|globalPos
argument_list|,
name|toolTip
argument_list|,
name|contextWidget
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_TOOLTIP
DECL|function|isPreediting
name|bool
name|QWidgetTextControlPrivate
operator|::
name|isPreediting
parameter_list|()
specifier|const
block|{
name|QTextLayout
modifier|*
name|layout
init|=
name|cursor
operator|.
name|block
argument_list|()
operator|.
name|layout
argument_list|()
decl_stmt|;
if|if
condition|(
name|layout
operator|&&
operator|!
name|layout
operator|->
name|preeditAreaText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
DECL|function|commitPreedit
name|void
name|QWidgetTextControlPrivate
operator|::
name|commitPreedit
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isPreediting
argument_list|()
condition|)
return|return;
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|inputPanel
argument_list|()
operator|->
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|tentativeCommit
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cursor
operator|.
name|insertText
argument_list|(
name|tentativeCommit
argument_list|)
expr_stmt|;
name|tentativeCommit
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|preeditCursor
operator|=
literal|0
expr_stmt|;
name|QTextBlock
name|block
init|=
name|cursor
operator|.
name|block
argument_list|()
decl_stmt|;
name|QTextLayout
modifier|*
name|layout
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
name|layout
operator|->
name|setPreeditArea
argument_list|(
operator|-
literal|1
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|layout
operator|->
name|clearAdditionalFormats
argument_list|()
expr_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
block|}
DECL|function|setFocusToNextOrPreviousAnchor
name|bool
name|QWidgetTextControl
operator|::
name|setFocusToNextOrPreviousAnchor
parameter_list|(
name|bool
name|next
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|interactionFlags
operator|&
name|Qt
operator|::
name|LinksAccessibleByKeyboard
operator|)
condition|)
return|return
literal|false
return|;
name|QRectF
name|crect
init|=
name|selectionRect
argument_list|()
decl_stmt|;
emit|emit
name|updateRequest
argument_list|(
name|crect
argument_list|)
emit|;
comment|// If we don't have a current anchor, we start from the start/end
if|if
condition|(
operator|!
name|d
operator|->
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
block|{
name|d
operator|->
name|cursor
operator|=
name|QTextCursor
argument_list|(
name|d
operator|->
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
condition|)
name|d
operator|->
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Start
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
block|}
name|QTextCursor
name|newAnchor
decl_stmt|;
if|if
condition|(
name|findNextPrevAnchor
argument_list|(
name|d
operator|->
name|cursor
argument_list|,
name|next
argument_list|,
name|newAnchor
argument_list|)
condition|)
block|{
name|d
operator|->
name|cursor
operator|=
name|newAnchor
expr_stmt|;
name|d
operator|->
name|cursorIsFocusIndicator
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
block|{
name|crect
operator|=
name|selectionRect
argument_list|()
expr_stmt|;
emit|emit
name|updateRequest
argument_list|(
name|crect
argument_list|)
emit|;
emit|emit
name|visibilityRequest
argument_list|(
name|crect
argument_list|)
emit|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|function|setFocusToAnchor
name|bool
name|QWidgetTextControl
operator|::
name|setFocusToAnchor
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|newCursor
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|interactionFlags
operator|&
name|Qt
operator|::
name|LinksAccessibleByKeyboard
operator|)
condition|)
return|return
literal|false
return|;
comment|// Verify that this is an anchor.
specifier|const
name|QString
name|anchorHref
init|=
name|d
operator|->
name|anchorForCursor
argument_list|(
name|newCursor
argument_list|)
decl_stmt|;
if|if
condition|(
name|anchorHref
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// and process it
name|QRectF
name|crect
init|=
name|selectionRect
argument_list|()
decl_stmt|;
emit|emit
name|updateRequest
argument_list|(
name|crect
argument_list|)
emit|;
name|d
operator|->
name|cursor
operator|.
name|setPosition
argument_list|(
name|newCursor
operator|.
name|selectionStart
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|cursor
operator|.
name|setPosition
argument_list|(
name|newCursor
operator|.
name|selectionEnd
argument_list|()
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|d
operator|->
name|cursorIsFocusIndicator
operator|=
literal|true
expr_stmt|;
name|crect
operator|=
name|selectionRect
argument_list|()
expr_stmt|;
emit|emit
name|updateRequest
argument_list|(
name|crect
argument_list|)
emit|;
emit|emit
name|visibilityRequest
argument_list|(
name|crect
argument_list|)
emit|;
return|return
literal|true
return|;
block|}
DECL|function|setTextInteractionFlags
name|void
name|QWidgetTextControl
operator|::
name|setTextInteractionFlags
parameter_list|(
name|Qt
operator|::
name|TextInteractionFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|==
name|d
operator|->
name|interactionFlags
condition|)
return|return;
name|d
operator|->
name|interactionFlags
operator|=
name|flags
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasFocus
condition|)
name|d
operator|->
name|setBlinkingCursorEnabled
argument_list|(
name|flags
operator|&
name|Qt
operator|::
name|TextEditable
argument_list|)
expr_stmt|;
block|}
DECL|function|textInteractionFlags
name|Qt
operator|::
name|TextInteractionFlags
name|QWidgetTextControl
operator|::
name|textInteractionFlags
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|interactionFlags
return|;
block|}
DECL|function|mergeCurrentCharFormat
name|void
name|QWidgetTextControl
operator|::
name|mergeCurrentCharFormat
parameter_list|(
specifier|const
name|QTextCharFormat
modifier|&
name|modifier
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|cursor
operator|.
name|mergeCharFormat
argument_list|(
name|modifier
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateCurrentCharFormat
argument_list|()
expr_stmt|;
block|}
DECL|function|setCurrentCharFormat
name|void
name|QWidgetTextControl
operator|::
name|setCurrentCharFormat
parameter_list|(
specifier|const
name|QTextCharFormat
modifier|&
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|cursor
operator|.
name|setCharFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateCurrentCharFormat
argument_list|()
expr_stmt|;
block|}
DECL|function|currentCharFormat
name|QTextCharFormat
name|QWidgetTextControl
operator|::
name|currentCharFormat
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|cursor
operator|.
name|charFormat
argument_list|()
return|;
block|}
DECL|function|insertPlainText
name|void
name|QWidgetTextControl
operator|::
name|insertPlainText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|cursor
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TEXTHTMLPARSER
DECL|function|insertHtml
name|void
name|QWidgetTextControl
operator|::
name|insertHtml
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|cursor
operator|.
name|insertHtml
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_TEXTHTMLPARSER
DECL|function|anchorPosition
name|QPointF
name|QWidgetTextControl
operator|::
name|anchorPosition
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QPointF
argument_list|()
return|;
name|QRectF
name|r
decl_stmt|;
for|for
control|(
name|QTextBlock
name|block
init|=
name|d
operator|->
name|doc
operator|->
name|begin
argument_list|()
init|;
name|block
operator|.
name|isValid
argument_list|()
condition|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
control|)
block|{
name|QTextCharFormat
name|format
init|=
name|block
operator|.
name|charFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|.
name|isAnchor
argument_list|()
operator|&&
name|format
operator|.
name|anchorNames
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|r
operator|=
name|d
operator|->
name|rectForPosition
argument_list|(
name|block
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
for|for
control|(
name|QTextBlock
operator|::
name|Iterator
name|it
init|=
name|block
operator|.
name|begin
argument_list|()
init|;
operator|!
name|it
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QTextFragment
name|fragment
init|=
name|it
operator|.
name|fragment
argument_list|()
decl_stmt|;
name|format
operator|=
name|fragment
operator|.
name|charFormat
argument_list|()
expr_stmt|;
if|if
condition|(
name|format
operator|.
name|isAnchor
argument_list|()
operator|&&
name|format
operator|.
name|anchorNames
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|r
operator|=
name|d
operator|->
name|rectForPosition
argument_list|(
name|fragment
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|block
operator|=
name|QTextBlock
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QPointF
argument_list|()
return|;
return|return
name|QPointF
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|)
return|;
block|}
DECL|function|adjustSize
name|void
name|QWidgetTextControl
operator|::
name|adjustSize
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|doc
operator|->
name|adjustSize
argument_list|()
expr_stmt|;
block|}
DECL|function|find
name|bool
name|QWidgetTextControl
operator|::
name|find
parameter_list|(
specifier|const
name|QString
modifier|&
name|exp
parameter_list|,
name|QTextDocument
operator|::
name|FindFlags
name|options
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|QTextCursor
name|search
init|=
name|d
operator|->
name|doc
operator|->
name|find
argument_list|(
name|exp
argument_list|,
name|d
operator|->
name|cursor
argument_list|,
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|search
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|false
return|;
name|setTextCursor
argument_list|(
name|search
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|toPlainText
name|QString
name|QWidgetTextControl
operator|::
name|toPlainText
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|QString
name|plainText
init|=
name|document
argument_list|()
operator|->
name|toPlainText
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|tentativeCommit
operator|.
name|isEmpty
argument_list|()
condition|)
name|plainText
operator|.
name|insert
argument_list|(
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
name|d
operator|->
name|tentativeCommit
argument_list|)
expr_stmt|;
return|return
name|plainText
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TEXTHTMLPARSER
DECL|function|toHtml
name|QString
name|QWidgetTextControl
operator|::
name|toHtml
parameter_list|()
specifier|const
block|{
comment|// note: currently not including tentative commit
return|return
name|document
argument_list|()
operator|->
name|toHtml
argument_list|()
return|;
block|}
endif|#
directive|endif
DECL|function|append
name|void
name|QWidgetTextControlPrivate
operator|::
name|append
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|Qt
operator|::
name|TextFormat
name|format
parameter_list|)
block|{
name|QTextCursor
name|tmp
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|tmp
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|End
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|doc
operator|->
name|isEmpty
argument_list|()
condition|)
name|tmp
operator|.
name|insertBlock
argument_list|(
name|cursor
operator|.
name|blockFormat
argument_list|()
argument_list|,
name|cursor
operator|.
name|charFormat
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|tmp
operator|.
name|setCharFormat
argument_list|(
name|cursor
operator|.
name|charFormat
argument_list|()
argument_list|)
expr_stmt|;
comment|// preserve the char format
name|QTextCharFormat
name|oldCharFormat
init|=
name|cursor
operator|.
name|charFormat
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TEXTHTMLPARSER
if|if
condition|(
name|format
operator|==
name|Qt
operator|::
name|RichText
operator|||
operator|(
name|format
operator|==
name|Qt
operator|::
name|AutoText
operator|&&
name|Qt
operator|::
name|mightBeRichText
argument_list|(
name|text
argument_list|)
operator|)
condition|)
block|{
name|tmp
operator|.
name|insertHtml
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tmp
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|tmp
operator|.
name|insertText
argument_list|(
name|text
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TEXTHTMLPARSER
if|if
condition|(
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
name|cursor
operator|.
name|setCharFormat
argument_list|(
name|oldCharFormat
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
block|}
DECL|function|append
name|void
name|QWidgetTextControl
operator|::
name|append
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|append
argument_list|(
name|text
argument_list|,
name|Qt
operator|::
name|AutoText
argument_list|)
expr_stmt|;
block|}
DECL|function|appendHtml
name|void
name|QWidgetTextControl
operator|::
name|appendHtml
parameter_list|(
specifier|const
name|QString
modifier|&
name|html
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|append
argument_list|(
name|html
argument_list|,
name|Qt
operator|::
name|RichText
argument_list|)
expr_stmt|;
block|}
DECL|function|appendPlainText
name|void
name|QWidgetTextControl
operator|::
name|appendPlainText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|append
argument_list|(
name|text
argument_list|,
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
block|}
DECL|function|ensureCursorVisible
name|void
name|QWidgetTextControl
operator|::
name|ensureCursorVisible
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|QRectF
name|crect
init|=
name|d
operator|->
name|rectForPosition
argument_list|(
name|d
operator|->
name|cursor
operator|.
name|position
argument_list|()
argument_list|)
operator|.
name|adjusted
argument_list|(
operator|-
literal|5
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
emit|emit
name|visibilityRequest
argument_list|(
name|crect
argument_list|)
emit|;
emit|emit
name|microFocusChanged
argument_list|()
emit|;
block|}
DECL|function|palette
name|QPalette
name|QWidgetTextControl
operator|::
name|palette
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|palette
return|;
block|}
DECL|function|setPalette
name|void
name|QWidgetTextControl
operator|::
name|setPalette
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|pal
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|d
operator|->
name|palette
operator|=
name|pal
expr_stmt|;
block|}
DECL|function|getPaintContext
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
name|QWidgetTextControl
operator|::
name|getPaintContext
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
name|ctx
decl_stmt|;
name|ctx
operator|.
name|selections
operator|=
name|d
operator|->
name|extraSelections
expr_stmt|;
name|ctx
operator|.
name|palette
operator|=
name|d
operator|->
name|palette
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cursorOn
operator|&&
name|d
operator|->
name|isEnabled
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|hideCursor
condition|)
name|ctx
operator|.
name|cursorPosition
operator|=
operator|-
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|preeditCursor
operator|!=
literal|0
condition|)
name|ctx
operator|.
name|cursorPosition
operator|=
operator|-
operator|(
name|d
operator|->
name|preeditCursor
operator|+
literal|2
operator|)
expr_stmt|;
else|else
name|ctx
operator|.
name|cursorPosition
operator|=
name|d
operator|->
name|cursor
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|dndFeedbackCursor
operator|.
name|isNull
argument_list|()
condition|)
name|ctx
operator|.
name|cursorPosition
operator|=
name|d
operator|->
name|dndFeedbackCursor
operator|.
name|position
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
operator|!
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|||
name|d
operator|->
name|hasEditFocus
condition|)
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
block|{
name|QAbstractTextDocumentLayout
operator|::
name|Selection
name|selection
decl_stmt|;
name|selection
operator|.
name|cursor
operator|=
name|d
operator|->
name|cursor
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cursorIsFocusIndicator
condition|)
block|{
name|QStyleOption
name|opt
decl_stmt|;
name|opt
operator|.
name|palette
operator|=
name|ctx
operator|.
name|palette
expr_stmt|;
name|QStyleHintReturnVariant
name|ret
decl_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|QApplication
operator|::
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
name|widget
condition|)
name|style
operator|=
name|widget
operator|->
name|style
argument_list|()
expr_stmt|;
name|style
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_TextControl_FocusIndicatorTextCharFormat
argument_list|,
operator|&
name|opt
argument_list|,
name|widget
argument_list|,
operator|&
name|ret
argument_list|)
expr_stmt|;
name|selection
operator|.
name|format
operator|=
name|qvariant_cast
argument_list|<
name|QTextFormat
argument_list|>
argument_list|(
name|ret
operator|.
name|variant
argument_list|)
operator|.
name|toCharFormat
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QPalette
operator|::
name|ColorGroup
name|cg
init|=
name|d
operator|->
name|hasFocus
condition|?
name|QPalette
operator|::
name|Active
else|:
name|QPalette
operator|::
name|Inactive
decl_stmt|;
name|selection
operator|.
name|format
operator|.
name|setBackground
argument_list|(
name|ctx
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Highlight
argument_list|)
argument_list|)
expr_stmt|;
name|selection
operator|.
name|format
operator|.
name|setForeground
argument_list|(
name|ctx
operator|.
name|palette
operator|.
name|brush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|HighlightedText
argument_list|)
argument_list|)
expr_stmt|;
name|QStyleOption
name|opt
decl_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|QApplication
operator|::
name|style
argument_list|()
decl_stmt|;
if|if
condition|(
name|widget
condition|)
block|{
name|opt
operator|.
name|initFrom
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|style
operator|=
name|widget
operator|->
name|style
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|style
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_RichText_FullWidthSelection
argument_list|,
operator|&
name|opt
argument_list|,
name|widget
argument_list|)
condition|)
name|selection
operator|.
name|format
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FullWidthSelection
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|selections
operator|.
name|append
argument_list|(
name|selection
argument_list|)
expr_stmt|;
block|}
return|return
name|ctx
return|;
block|}
DECL|function|drawContents
name|void
name|QWidgetTextControl
operator|::
name|drawContents
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QWidgetTextControl
argument_list|)
expr_stmt|;
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
name|ctx
init|=
name|getPaintContext
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isValid
argument_list|()
condition|)
name|p
operator|->
name|setClipRect
argument_list|(
name|rect
argument_list|,
name|Qt
operator|::
name|IntersectClip
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|clip
operator|=
name|rect
expr_stmt|;
name|d
operator|->
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|draw
argument_list|(
name|p
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
DECL|function|_q_copyLink
name|void
name|QWidgetTextControlPrivate
operator|::
name|_q_copyLink
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|QMimeData
modifier|*
name|md
init|=
operator|new
name|QMimeData
decl_stmt|;
name|md
operator|->
name|setText
argument_list|(
name|linkToCopy
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|setMimeData
argument_list|(
name|md
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|hitTest
name|int
name|QWidgetTextControl
operator|::
name|hitTest
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
name|accuracy
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|hitTest
argument_list|(
name|point
argument_list|,
name|accuracy
argument_list|)
return|;
block|}
DECL|function|blockBoundingRect
name|QRectF
name|QWidgetTextControl
operator|::
name|blockBoundingRect
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QWidgetTextControl
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
DECL|macro|NUM_CONTROL_CHARACTERS
define|#
directive|define
name|NUM_CONTROL_CHARACTERS
value|10
DECL|struct|QUnicodeControlCharacter
specifier|const
struct|struct
name|QUnicodeControlCharacter
block|{
DECL|member|text
specifier|const
name|char
modifier|*
name|text
decl_stmt|;
DECL|member|character
name|ushort
name|character
decl_stmt|;
block|}
DECL|variable|qt_controlCharacters
name|qt_controlCharacters
index|[
name|NUM_CONTROL_CHARACTERS
index|]
init|=
block|{
block|{
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QUnicodeControlCharacterMenu"
argument_list|,
literal|"LRM Left-to-right mark"
argument_list|)
block|,
literal|0x200e
block|}
block|,
block|{
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QUnicodeControlCharacterMenu"
argument_list|,
literal|"RLM Right-to-left mark"
argument_list|)
block|,
literal|0x200f
block|}
block|,
block|{
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QUnicodeControlCharacterMenu"
argument_list|,
literal|"ZWJ Zero width joiner"
argument_list|)
block|,
literal|0x200d
block|}
block|,
block|{
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QUnicodeControlCharacterMenu"
argument_list|,
literal|"ZWNJ Zero width non-joiner"
argument_list|)
block|,
literal|0x200c
block|}
block|,
block|{
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QUnicodeControlCharacterMenu"
argument_list|,
literal|"ZWSP Zero width space"
argument_list|)
block|,
literal|0x200b
block|}
block|,
block|{
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QUnicodeControlCharacterMenu"
argument_list|,
literal|"LRE Start of left-to-right embedding"
argument_list|)
block|,
literal|0x202a
block|}
block|,
block|{
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QUnicodeControlCharacterMenu"
argument_list|,
literal|"RLE Start of right-to-left embedding"
argument_list|)
block|,
literal|0x202b
block|}
block|,
block|{
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QUnicodeControlCharacterMenu"
argument_list|,
literal|"LRO Start of left-to-right override"
argument_list|)
block|,
literal|0x202d
block|}
block|,
block|{
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QUnicodeControlCharacterMenu"
argument_list|,
literal|"RLO Start of right-to-left override"
argument_list|)
block|,
literal|0x202e
block|}
block|,
block|{
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QUnicodeControlCharacterMenu"
argument_list|,
literal|"PDF Pop directional formatting"
argument_list|)
block|,
literal|0x202c
block|}
block|, }
struct|;
DECL|function|QUnicodeControlCharacterMenu
name|QUnicodeControlCharacterMenu
operator|::
name|QUnicodeControlCharacterMenu
parameter_list|(
name|QObject
modifier|*
name|_editWidget
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QMenu
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|editWidget
argument_list|(
name|_editWidget
argument_list|)
block|{
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Insert Unicode control character"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_CONTROL_CHARACTERS
condition|;
operator|++
name|i
control|)
block|{
name|addAction
argument_list|(
name|tr
argument_list|(
name|qt_controlCharacters
index|[
name|i
index|]
operator|.
name|text
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|menuActionTriggered
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|menuActionTriggered
name|void
name|QUnicodeControlCharacterMenu
operator|::
name|menuActionTriggered
parameter_list|()
block|{
name|QAction
modifier|*
name|a
init|=
name|qobject_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|actions
argument_list|()
operator|.
name|indexOf
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
operator|||
name|idx
operator|>=
name|NUM_CONTROL_CHARACTERS
condition|)
return|return;
name|QChar
name|c
argument_list|(
name|qt_controlCharacters
index|[
name|idx
index|]
operator|.
name|character
argument_list|)
decl_stmt|;
name|QString
name|str
argument_list|(
name|c
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TEXTEDIT
if|if
condition|(
name|QTextEdit
modifier|*
name|edit
init|=
name|qobject_cast
argument_list|<
name|QTextEdit
operator|*
argument_list|>
argument_list|(
name|editWidget
argument_list|)
condition|)
block|{
name|edit
operator|->
name|insertPlainText
argument_list|(
name|str
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
if|if
condition|(
name|QWidgetTextControl
modifier|*
name|control
init|=
name|qobject_cast
argument_list|<
name|QWidgetTextControl
operator|*
argument_list|>
argument_list|(
name|editWidget
argument_list|)
condition|)
block|{
name|control
operator|->
name|insertPlainText
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_LINEEDIT
if|if
condition|(
name|QLineEdit
modifier|*
name|edit
init|=
name|qobject_cast
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|editWidget
argument_list|)
condition|)
block|{
name|edit
operator|->
name|insert
argument_list|(
name|str
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
block|}
endif|#
directive|endif
comment|// QT_NO_CONTEXTMENU
DECL|function|formats
name|QStringList
name|QTextEditMimeData
operator|::
name|formats
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|fragment
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/plain"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/html"
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_TEXTODFWRITER
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/vnd.oasis.opendocument.text"
argument_list|)
endif|#
directive|endif
return|;
else|else
return|return
name|QMimeData
operator|::
name|formats
argument_list|()
return|;
block|}
DECL|function|retrieveData
name|QVariant
name|QTextEditMimeData
operator|::
name|retrieveData
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|fragment
operator|.
name|isEmpty
argument_list|()
condition|)
name|setup
argument_list|()
expr_stmt|;
return|return
name|QMimeData
operator|::
name|retrieveData
argument_list|(
name|mimeType
argument_list|,
name|type
argument_list|)
return|;
block|}
DECL|function|setup
name|void
name|QTextEditMimeData
operator|::
name|setup
parameter_list|()
specifier|const
block|{
name|QTextEditMimeData
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QTextEditMimeData
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TEXTHTMLPARSER
name|that
operator|->
name|setData
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/html"
argument_list|)
argument_list|,
name|fragment
operator|.
name|toHtml
argument_list|(
literal|"utf-8"
argument_list|)
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TEXTODFWRITER
block|{
name|QBuffer
name|buffer
decl_stmt|;
name|QTextDocumentWriter
name|writer
argument_list|(
operator|&
name|buffer
argument_list|,
literal|"ODF"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
name|that
operator|->
name|setData
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/vnd.oasis.opendocument.text"
argument_list|)
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|that
operator|->
name|setText
argument_list|(
name|fragment
operator|.
name|toPlainText
argument_list|()
argument_list|)
expr_stmt|;
name|fragment
operator|=
name|QTextDocumentFragment
argument_list|()
expr_stmt|;
block|}
name|QT_END_NAMESPACE
end_function
begin_include
include|#
directive|include
file|"moc_qwidgettextcontrol_p.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTCONTROL
end_comment
end_unit
