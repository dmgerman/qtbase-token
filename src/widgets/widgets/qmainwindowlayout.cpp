begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmainwindowlayout_p.h"
end_include
begin_include
include|#
directive|include
file|"qdockarealayout_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MAINWINDOW
end_ifndef
begin_include
include|#
directive|include
file|"qdockwidget.h"
end_include
begin_include
include|#
directive|include
file|"qdockwidget_p.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbar_p.h"
end_include
begin_include
include|#
directive|include
file|"qmainwindow.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbar.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbarlayout_p.h"
end_include
begin_include
include|#
directive|include
file|"qwidgetanimator_p.h"
end_include
begin_include
include|#
directive|include
file|"qrubberband.h"
end_include
begin_include
include|#
directive|include
file|"qtabbar_p.h"
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qstatusbar.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<qstack.h>
end_include
begin_include
include|#
directive|include
file|<qmap.h>
end_include
begin_include
include|#
directive|include
file|<qtimer.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<private/qapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qlayoutengine_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
end_ifdef
begin_include
include|#
directive|include
file|<private/qcore_mac_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qt_cocoa_helpers_mac_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function_decl
name|QT_BEGIN_NAMESPACE
ifdef|#
directive|ifdef
name|QT_NO_DOCKWIDGET
specifier|extern
name|QMainWindowLayout
modifier|*
name|qt_mainwindow_layout
parameter_list|(
specifier|const
name|QMainWindow
modifier|*
name|window
parameter_list|)
function_decl|;
end_function_decl
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/****************************************************************************** ** debug */
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_DOCKWIDGET
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_DEBUG_STREAM
argument_list|)
end_if
begin_function_decl
specifier|static
name|void
name|dumpLayout
parameter_list|(
name|QTextStream
modifier|&
name|qout
parameter_list|,
specifier|const
name|QDockAreaLayoutInfo
modifier|&
name|layout
parameter_list|,
name|QString
name|indent
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|dumpLayout
specifier|static
name|void
name|dumpLayout
parameter_list|(
name|QTextStream
modifier|&
name|qout
parameter_list|,
specifier|const
name|QDockAreaLayoutItem
modifier|&
name|item
parameter_list|,
name|QString
name|indent
parameter_list|)
block|{
name|qout
operator|<<
name|indent
operator|<<
literal|"QDockAreaLayoutItem: "
operator|<<
literal|"pos: "
operator|<<
name|item
operator|.
name|pos
operator|<<
literal|" size:"
operator|<<
name|item
operator|.
name|size
operator|<<
literal|" gap:"
operator|<<
operator|(
name|item
operator|.
name|flags
operator|&
name|QDockAreaLayoutItem
operator|::
name|GapItem
operator|)
operator|<<
literal|" keepSize:"
operator|<<
operator|(
name|item
operator|.
name|flags
operator|&
name|QDockAreaLayoutItem
operator|::
name|KeepSize
operator|)
operator|<<
literal|'\n'
expr_stmt|;
name|indent
operator|+=
name|QLatin1String
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|widgetItem
operator|!=
literal|0
condition|)
block|{
name|qout
operator|<<
name|indent
operator|<<
literal|"widget: "
operator|<<
name|item
operator|.
name|widgetItem
operator|->
name|widget
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
operator|<<
literal|" \""
operator|<<
name|item
operator|.
name|widgetItem
operator|->
name|widget
argument_list|()
operator|->
name|windowTitle
argument_list|()
operator|<<
literal|"\"\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|subinfo
operator|!=
literal|0
condition|)
block|{
name|qout
operator|<<
name|indent
operator|<<
literal|"subinfo:\n"
expr_stmt|;
name|dumpLayout
argument_list|(
name|qout
argument_list|,
operator|*
name|item
operator|.
name|subinfo
argument_list|,
name|indent
operator|+
name|QLatin1String
argument_list|(
literal|"  "
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|placeHolderItem
operator|!=
literal|0
condition|)
block|{
name|QRect
name|r
init|=
name|item
operator|.
name|placeHolderItem
operator|->
name|topLevelRect
decl_stmt|;
name|qout
operator|<<
name|indent
operator|<<
literal|"placeHolder: "
operator|<<
literal|"pos: "
operator|<<
name|item
operator|.
name|pos
operator|<<
literal|" size:"
operator|<<
name|item
operator|.
name|size
operator|<<
literal|" gap:"
operator|<<
operator|(
name|item
operator|.
name|flags
operator|&
name|QDockAreaLayoutItem
operator|::
name|GapItem
operator|)
operator|<<
literal|" keepSize:"
operator|<<
operator|(
name|item
operator|.
name|flags
operator|&
name|QDockAreaLayoutItem
operator|::
name|KeepSize
operator|)
operator|<<
literal|" objectName:"
operator|<<
name|item
operator|.
name|placeHolderItem
operator|->
name|objectName
operator|<<
literal|" hidden:"
operator|<<
name|item
operator|.
name|placeHolderItem
operator|->
name|hidden
operator|<<
literal|" window:"
operator|<<
name|item
operator|.
name|placeHolderItem
operator|->
name|window
operator|<<
literal|" rect:"
operator|<<
name|r
operator|.
name|x
argument_list|()
operator|<<
literal|','
operator|<<
name|r
operator|.
name|y
argument_list|()
operator|<<
literal|' '
operator|<<
name|r
operator|.
name|width
argument_list|()
operator|<<
literal|'x'
operator|<<
name|r
operator|.
name|height
argument_list|()
operator|<<
literal|'\n'
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|dumpLayout
specifier|static
name|void
name|dumpLayout
parameter_list|(
name|QTextStream
modifier|&
name|qout
parameter_list|,
specifier|const
name|QDockAreaLayoutInfo
modifier|&
name|layout
parameter_list|,
name|QString
name|indent
parameter_list|)
block|{
specifier|const
name|QSize
name|minSize
init|=
name|layout
operator|.
name|minimumSize
argument_list|()
decl_stmt|;
name|qout
operator|<<
name|indent
operator|<<
literal|"QDockAreaLayoutInfo: "
operator|<<
name|layout
operator|.
name|rect
operator|.
name|left
argument_list|()
operator|<<
literal|','
operator|<<
name|layout
operator|.
name|rect
operator|.
name|top
argument_list|()
operator|<<
literal|' '
operator|<<
name|layout
operator|.
name|rect
operator|.
name|width
argument_list|()
operator|<<
literal|'x'
operator|<<
name|layout
operator|.
name|rect
operator|.
name|height
argument_list|()
operator|<<
literal|" min size: "
operator|<<
name|minSize
operator|.
name|width
argument_list|()
operator|<<
literal|','
operator|<<
name|minSize
operator|.
name|height
argument_list|()
operator|<<
literal|" orient:"
operator|<<
name|layout
operator|.
name|o
operator|<<
literal|" tabbed:"
operator|<<
name|layout
operator|.
name|tabbed
operator|<<
literal|" tbshape:"
operator|<<
name|layout
operator|.
name|tabBarShape
operator|<<
literal|'\n'
expr_stmt|;
name|indent
operator|+=
name|QLatin1String
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layout
operator|.
name|item_list
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qout
operator|<<
name|indent
operator|<<
literal|"Item: "
operator|<<
name|i
operator|<<
literal|'\n'
expr_stmt|;
name|dumpLayout
argument_list|(
name|qout
argument_list|,
name|layout
operator|.
name|item_list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|indent
operator|+
name|QLatin1String
argument_list|(
literal|"  "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|dumpLayout
specifier|static
name|void
name|dumpLayout
parameter_list|(
name|QTextStream
modifier|&
name|qout
parameter_list|,
specifier|const
name|QDockAreaLayout
modifier|&
name|layout
parameter_list|)
block|{
name|qout
operator|<<
literal|"QDockAreaLayout: "
operator|<<
name|layout
operator|.
name|rect
operator|.
name|left
argument_list|()
operator|<<
literal|','
operator|<<
name|layout
operator|.
name|rect
operator|.
name|top
argument_list|()
operator|<<
literal|' '
operator|<<
name|layout
operator|.
name|rect
operator|.
name|width
argument_list|()
operator|<<
literal|'x'
operator|<<
name|layout
operator|.
name|rect
operator|.
name|height
argument_list|()
operator|<<
literal|'\n'
expr_stmt|;
name|qout
operator|<<
literal|"TopDockArea:\n"
expr_stmt|;
name|dumpLayout
argument_list|(
name|qout
argument_list|,
name|layout
operator|.
name|docks
index|[
name|QInternal
operator|::
name|TopDock
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"  "
argument_list|)
argument_list|)
expr_stmt|;
name|qout
operator|<<
literal|"LeftDockArea:\n"
expr_stmt|;
name|dumpLayout
argument_list|(
name|qout
argument_list|,
name|layout
operator|.
name|docks
index|[
name|QInternal
operator|::
name|LeftDock
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"  "
argument_list|)
argument_list|)
expr_stmt|;
name|qout
operator|<<
literal|"RightDockArea:\n"
expr_stmt|;
name|dumpLayout
argument_list|(
name|qout
argument_list|,
name|layout
operator|.
name|docks
index|[
name|QInternal
operator|::
name|RightDock
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"  "
argument_list|)
argument_list|)
expr_stmt|;
name|qout
operator|<<
literal|"BottomDockArea:\n"
expr_stmt|;
name|dumpLayout
argument_list|(
name|qout
argument_list|,
name|layout
operator|.
name|docks
index|[
name|QInternal
operator|::
name|BottomDock
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"  "
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|debug
parameter_list|,
specifier|const
name|QDockAreaLayout
modifier|&
name|layout
parameter_list|)
block|{
name|QString
name|s
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|s
argument_list|)
decl_stmt|;
name|dumpLayout
argument_list|(
name|str
argument_list|,
name|layout
argument_list|)
expr_stmt|;
name|debug
operator|<<
name|s
expr_stmt|;
return|return
name|debug
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|debug
parameter_list|,
specifier|const
name|QMainWindowLayout
modifier|*
name|layout
parameter_list|)
block|{
name|debug
operator|<<
name|layout
operator|->
name|layoutState
operator|.
name|dockAreaLayout
expr_stmt|;
return|return
name|debug
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(QT_NO_DOCKWIDGET)&& !defined(QT_NO_DEBUG)
end_comment
begin_comment
comment|/****************************************************************************** ** QMainWindowLayoutState */
end_comment
begin_comment
comment|// we deal with all the #ifndefferry here so QMainWindowLayout code is clean
end_comment
begin_constructor
DECL|function|QMainWindowLayoutState
name|QMainWindowLayoutState
operator|::
name|QMainWindowLayoutState
parameter_list|(
name|QMainWindow
modifier|*
name|win
parameter_list|)
member_init_list|:
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
name|toolBarAreaLayout
argument_list|(
name|win
argument_list|)
member_init_list|,
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
name|dockAreaLayout
argument_list|(
name|win
argument_list|)
else|#
directive|else
name|centralWidgetItem
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
block|{
name|mainWindow
operator|=
name|win
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|sizeHint
name|QSize
name|QMainWindowLayoutState
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|QSize
name|result
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
name|result
operator|=
name|dockAreaLayout
operator|.
name|sizeHint
argument_list|()
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|centralWidgetItem
operator|!=
literal|0
condition|)
name|result
operator|=
name|centralWidgetItem
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
name|result
operator|=
name|toolBarAreaLayout
operator|.
name|sizeHint
argument_list|(
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TOOLBAR
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|minimumSize
name|QSize
name|QMainWindowLayoutState
operator|::
name|minimumSize
parameter_list|()
specifier|const
block|{
name|QSize
name|result
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
name|result
operator|=
name|dockAreaLayout
operator|.
name|minimumSize
argument_list|()
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|centralWidgetItem
operator|!=
literal|0
condition|)
name|result
operator|=
name|centralWidgetItem
operator|->
name|minimumSize
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
name|result
operator|=
name|toolBarAreaLayout
operator|.
name|minimumSize
argument_list|(
name|result
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TOOLBAR
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|apply
name|void
name|QMainWindowLayoutState
operator|::
name|apply
parameter_list|(
name|bool
name|animated
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
name|toolBarAreaLayout
operator|.
name|apply
argument_list|(
name|animated
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
comment|//    dumpLayout(dockAreaLayout, QString());
name|dockAreaLayout
operator|.
name|apply
argument_list|(
name|animated
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|centralWidgetItem
operator|!=
literal|0
condition|)
block|{
name|QMainWindowLayout
modifier|*
name|layout
init|=
name|qt_mainwindow_layout
argument_list|(
name|mainWindow
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|layout
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|widgetAnimator
operator|.
name|animate
argument_list|(
name|centralWidgetItem
operator|->
name|widget
argument_list|()
argument_list|,
name|centralWidgetRect
argument_list|,
name|animated
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fitLayout
name|void
name|QMainWindowLayoutState
operator|::
name|fitLayout
parameter_list|()
block|{
name|QRect
name|r
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_TOOLBAR
name|r
operator|=
name|rect
expr_stmt|;
else|#
directive|else
name|toolBarAreaLayout
operator|.
name|rect
operator|=
name|rect
expr_stmt|;
name|r
operator|=
name|toolBarAreaLayout
operator|.
name|fitLayout
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TOOLBAR
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
name|dockAreaLayout
operator|.
name|rect
operator|=
name|r
expr_stmt|;
name|dockAreaLayout
operator|.
name|fitLayout
argument_list|()
expr_stmt|;
else|#
directive|else
name|centralWidgetRect
operator|=
name|r
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|deleteAllLayoutItems
name|void
name|QMainWindowLayoutState
operator|::
name|deleteAllLayoutItems
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
name|toolBarAreaLayout
operator|.
name|deleteAllLayoutItems
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
name|dockAreaLayout
operator|.
name|deleteAllLayoutItems
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|deleteCentralWidgetItem
name|void
name|QMainWindowLayoutState
operator|::
name|deleteCentralWidgetItem
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
operator|delete
name|dockAreaLayout
operator|.
name|centralWidgetItem
expr_stmt|;
name|dockAreaLayout
operator|.
name|centralWidgetItem
operator|=
literal|0
expr_stmt|;
else|#
directive|else
operator|delete
name|centralWidgetItem
expr_stmt|;
name|centralWidgetItem
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|itemAt
name|QLayoutItem
modifier|*
name|QMainWindowLayoutState
operator|::
name|itemAt
parameter_list|(
name|int
name|index
parameter_list|,
name|int
modifier|*
name|x
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|QLayoutItem
modifier|*
name|ret
init|=
name|toolBarAreaLayout
operator|.
name|itemAt
argument_list|(
name|x
argument_list|,
name|index
argument_list|)
condition|)
return|return
name|ret
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|QLayoutItem
modifier|*
name|ret
init|=
name|dockAreaLayout
operator|.
name|itemAt
argument_list|(
name|x
argument_list|,
name|index
argument_list|)
condition|)
return|return
name|ret
return|;
else|#
directive|else
if|if
condition|(
name|centralWidgetItem
operator|!=
literal|0
operator|&&
operator|(
operator|*
name|x
operator|)
operator|++
operator|==
name|index
condition|)
return|return
name|centralWidgetItem
return|;
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|takeAt
name|QLayoutItem
modifier|*
name|QMainWindowLayoutState
operator|::
name|takeAt
parameter_list|(
name|int
name|index
parameter_list|,
name|int
modifier|*
name|x
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|QLayoutItem
modifier|*
name|ret
init|=
name|toolBarAreaLayout
operator|.
name|takeAt
argument_list|(
name|x
argument_list|,
name|index
argument_list|)
condition|)
return|return
name|ret
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|QLayoutItem
modifier|*
name|ret
init|=
name|dockAreaLayout
operator|.
name|takeAt
argument_list|(
name|x
argument_list|,
name|index
argument_list|)
condition|)
return|return
name|ret
return|;
else|#
directive|else
if|if
condition|(
name|centralWidgetItem
operator|!=
literal|0
operator|&&
operator|(
operator|*
name|x
operator|)
operator|++
operator|==
name|index
condition|)
block|{
name|QLayoutItem
modifier|*
name|ret
init|=
name|centralWidgetItem
decl_stmt|;
name|centralWidgetItem
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|indexOf
name|QList
argument_list|<
name|int
argument_list|>
name|QMainWindowLayoutState
operator|::
name|indexOf
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|result
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
comment|// is it a toolbar?
if|if
condition|(
name|QToolBar
modifier|*
name|toolBar
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|result
operator|=
name|toolBarAreaLayout
operator|.
name|indexOf
argument_list|(
name|toolBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|.
name|prepend
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
comment|// is it a dock widget?
if|if
condition|(
name|QDockWidget
modifier|*
name|dockWidget
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|result
operator|=
name|dockAreaLayout
operator|.
name|indexOf
argument_list|(
name|dockWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|.
name|prepend
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
endif|#
directive|endif
comment|//QT_NO_DOCKWIDGET
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|contains
name|bool
name|QMainWindowLayoutState
operator|::
name|contains
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|dockAreaLayout
operator|.
name|centralWidgetItem
operator|!=
literal|0
operator|&&
name|dockAreaLayout
operator|.
name|centralWidgetItem
operator|->
name|widget
argument_list|()
operator|==
name|widget
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|dockAreaLayout
operator|.
name|indexOf
argument_list|(
name|widget
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
else|#
directive|else
if|if
condition|(
name|centralWidgetItem
operator|!=
literal|0
operator|&&
name|centralWidgetItem
operator|->
name|widget
argument_list|()
operator|==
name|widget
condition|)
return|return
literal|true
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
operator|!
name|toolBarAreaLayout
operator|.
name|indexOf
argument_list|(
name|widget
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
endif|#
directive|endif
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|setCentralWidget
name|void
name|QMainWindowLayoutState
operator|::
name|setCentralWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QLayoutItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
comment|//make sure we remove the widget
name|deleteCentralWidgetItem
argument_list|()
expr_stmt|;
if|if
condition|(
name|widget
operator|!=
literal|0
condition|)
name|item
operator|=
operator|new
name|QWidgetItemV2
argument_list|(
name|widget
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
name|dockAreaLayout
operator|.
name|centralWidgetItem
operator|=
name|item
expr_stmt|;
else|#
directive|else
name|centralWidgetItem
operator|=
name|item
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|centralWidget
name|QWidget
modifier|*
name|QMainWindowLayoutState
operator|::
name|centralWidget
parameter_list|()
specifier|const
block|{
name|QLayoutItem
modifier|*
name|item
init|=
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
name|item
operator|=
name|dockAreaLayout
operator|.
name|centralWidgetItem
expr_stmt|;
else|#
directive|else
name|item
operator|=
name|centralWidgetItem
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|item
operator|!=
literal|0
condition|)
return|return
name|item
operator|->
name|widget
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|gapIndex
name|QList
argument_list|<
name|int
argument_list|>
name|QMainWindowLayoutState
operator|::
name|gapIndex
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|result
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
comment|// is it a toolbar?
if|if
condition|(
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|result
operator|=
name|toolBarAreaLayout
operator|.
name|gapIndex
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|.
name|prepend
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
comment|// is it a dock widget?
if|if
condition|(
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|result
operator|=
name|dockAreaLayout
operator|.
name|gapIndex
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|.
name|prepend
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
endif|#
directive|endif
comment|//QT_NO_DOCKWIDGET
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|insertGap
name|bool
name|QMainWindowLayoutState
operator|::
name|insertGap
parameter_list|(
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|path
parameter_list|,
name|QLayoutItem
modifier|*
name|item
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|int
name|i
init|=
name|path
operator|.
name|first
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|item
operator|->
name|widget
argument_list|()
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|toolBarAreaLayout
operator|.
name|insertGap
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|,
name|item
argument_list|)
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|item
operator|->
name|widget
argument_list|()
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|dockAreaLayout
operator|.
name|insertGap
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|,
name|item
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|//QT_NO_DOCKWIDGET
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|remove
name|void
name|QMainWindowLayoutState
operator|::
name|remove
parameter_list|(
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|path
parameter_list|)
block|{
name|int
name|i
init|=
name|path
operator|.
name|first
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|toolBarAreaLayout
operator|.
name|remove
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|i
operator|==
literal|1
condition|)
name|dockAreaLayout
operator|.
name|remove
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_DOCKWIDGET
block|}
end_function
begin_function
DECL|function|remove
name|void
name|QMainWindowLayoutState
operator|::
name|remove
parameter_list|(
name|QLayoutItem
modifier|*
name|item
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
name|toolBarAreaLayout
operator|.
name|remove
argument_list|(
name|item
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
comment|// is it a dock widget?
if|if
condition|(
name|QDockWidget
modifier|*
name|dockWidget
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|item
operator|->
name|widget
argument_list|()
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|path
init|=
name|dockAreaLayout
operator|.
name|indexOf
argument_list|(
name|dockWidget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
name|dockAreaLayout
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|//QT_NO_DOCKWIDGET
block|}
end_function
begin_function
DECL|function|clear
name|void
name|QMainWindowLayoutState
operator|::
name|clear
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
name|toolBarAreaLayout
operator|.
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
name|dockAreaLayout
operator|.
name|clear
argument_list|()
expr_stmt|;
else|#
directive|else
name|centralWidgetRect
operator|=
name|QRect
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|rect
operator|=
name|QRect
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isValid
name|bool
name|QMainWindowLayoutState
operator|::
name|isValid
parameter_list|()
specifier|const
block|{
return|return
name|rect
operator|.
name|isValid
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|item
name|QLayoutItem
modifier|*
name|QMainWindowLayoutState
operator|::
name|item
parameter_list|(
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|path
parameter_list|)
block|{
name|int
name|i
init|=
name|path
operator|.
name|first
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
specifier|const
name|QToolBarAreaLayoutItem
modifier|*
name|tbItem
init|=
name|toolBarAreaLayout
operator|.
name|item
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|tbItem
argument_list|)
expr_stmt|;
return|return
name|tbItem
operator|->
name|widgetItem
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|i
operator|==
literal|1
condition|)
return|return
name|dockAreaLayout
operator|.
name|item
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|widgetItem
return|;
endif|#
directive|endif
comment|//QT_NO_DOCKWIDGET
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|itemRect
name|QRect
name|QMainWindowLayoutState
operator|::
name|itemRect
parameter_list|(
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|path
parameter_list|)
specifier|const
block|{
name|int
name|i
init|=
name|path
operator|.
name|first
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|i
operator|==
literal|0
condition|)
return|return
name|toolBarAreaLayout
operator|.
name|itemRect
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|i
operator|==
literal|1
condition|)
return|return
name|dockAreaLayout
operator|.
name|itemRect
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
comment|//QT_NO_DOCKWIDGET
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|gapRect
name|QRect
name|QMainWindowLayoutState
operator|::
name|gapRect
parameter_list|(
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|path
parameter_list|)
specifier|const
block|{
name|int
name|i
init|=
name|path
operator|.
name|first
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|i
operator|==
literal|0
condition|)
return|return
name|toolBarAreaLayout
operator|.
name|itemRect
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|i
operator|==
literal|1
condition|)
return|return
name|dockAreaLayout
operator|.
name|gapRect
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
comment|//QT_NO_DOCKWIDGET
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|plug
name|QLayoutItem
modifier|*
name|QMainWindowLayoutState
operator|::
name|plug
parameter_list|(
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|path
parameter_list|)
block|{
name|int
name|i
init|=
name|path
operator|.
name|first
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|i
operator|==
literal|0
condition|)
return|return
name|toolBarAreaLayout
operator|.
name|plug
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|i
operator|==
literal|1
condition|)
return|return
name|dockAreaLayout
operator|.
name|plug
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
comment|//QT_NO_DOCKWIDGET
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|unplug
name|QLayoutItem
modifier|*
name|QMainWindowLayoutState
operator|::
name|unplug
parameter_list|(
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|path
parameter_list|,
name|QMainWindowLayoutState
modifier|*
name|other
parameter_list|)
block|{
name|int
name|i
init|=
name|path
operator|.
name|first
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_TOOLBAR
name|Q_UNUSED
argument_list|(
name|other
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|i
operator|==
literal|0
condition|)
return|return
name|toolBarAreaLayout
operator|.
name|unplug
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|,
name|other
condition|?
operator|&
name|other
operator|->
name|toolBarAreaLayout
else|:
literal|0
argument_list|)
return|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|i
operator|==
literal|1
condition|)
return|return
name|dockAreaLayout
operator|.
name|unplug
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
comment|//QT_NO_DOCKWIDGET
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|saveState
name|void
name|QMainWindowLayoutState
operator|::
name|saveState
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
name|dockAreaLayout
operator|.
name|saveState
argument_list|(
name|stream
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
name|toolBarAreaLayout
operator|.
name|saveState
argument_list|(
name|stream
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|findChildrenHelper
specifier|static
name|QList
argument_list|<
name|T
argument_list|>
name|findChildrenHelper
parameter_list|(
specifier|const
name|QObject
modifier|*
name|o
parameter_list|)
block|{
specifier|const
name|QObjectList
modifier|&
name|list
init|=
name|o
operator|->
name|children
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|T
argument_list|>
name|result
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|T
name|t
init|=
name|qobject_cast
argument_list|<
name|T
argument_list|>
argument_list|(
name|list
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|//pre4.3 tests the format that was used before 4.3
end_comment
begin_function
DECL|function|checkFormat
name|bool
name|QMainWindowLayoutState
operator|::
name|checkFormat
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|)
block|{
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|uchar
name|marker
decl_stmt|;
name|stream
operator|>>
name|marker
expr_stmt|;
switch|switch
condition|(
name|marker
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
case|case
name|QToolBarAreaLayout
operator|::
name|ToolBarStateMarker
case|:
case|case
name|QToolBarAreaLayout
operator|::
name|ToolBarStateMarkerEx
case|:
block|{
name|QList
argument_list|<
name|QToolBar
modifier|*
argument_list|>
name|toolBars
init|=
name|findChildrenHelper
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|mainWindow
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|toolBarAreaLayout
operator|.
name|restoreState
argument_list|(
name|stream
argument_list|,
name|toolBars
argument_list|,
name|marker
argument_list|,
literal|true
comment|/*testing*/
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_TOOLBAR
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
case|case
name|QDockAreaLayout
operator|::
name|DockWidgetStateMarker
case|:
block|{
name|QList
argument_list|<
name|QDockWidget
modifier|*
argument_list|>
name|dockWidgets
init|=
name|findChildrenHelper
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|mainWindow
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dockAreaLayout
operator|.
name|restoreState
argument_list|(
name|stream
argument_list|,
name|dockWidgets
argument_list|,
literal|true
comment|/*testing*/
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
break|break;
endif|#
directive|endif
default|default:
comment|//there was an error during the parsing
return|return
literal|false
return|;
block|}
comment|// switch
block|}
comment|//while
comment|//everything went fine: it must be a pre-4.3 saved state
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|restoreState
name|bool
name|QMainWindowLayoutState
operator|::
name|restoreState
parameter_list|(
name|QDataStream
modifier|&
name|_stream
parameter_list|,
specifier|const
name|QMainWindowLayoutState
modifier|&
name|oldState
parameter_list|)
block|{
comment|//make a copy of the data so that we can read it more than once
name|QByteArray
name|copy
decl_stmt|;
while|while
condition|(
operator|!
name|_stream
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|int
name|length
init|=
literal|1024
decl_stmt|;
name|QByteArray
name|ba
argument_list|(
name|length
argument_list|,
literal|'\0'
argument_list|)
decl_stmt|;
name|length
operator|=
name|_stream
operator|.
name|readRawData
argument_list|(
name|ba
operator|.
name|data
argument_list|()
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ba
operator|.
name|resize
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|copy
operator|+=
name|ba
expr_stmt|;
block|}
name|QDataStream
name|ds
argument_list|(
name|copy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkFormat
argument_list|(
name|ds
argument_list|)
condition|)
return|return
literal|false
return|;
name|QDataStream
name|stream
argument_list|(
name|copy
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|uchar
name|marker
decl_stmt|;
name|stream
operator|>>
name|marker
expr_stmt|;
switch|switch
condition|(
name|marker
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
case|case
name|QDockAreaLayout
operator|::
name|DockWidgetStateMarker
case|:
block|{
name|QList
argument_list|<
name|QDockWidget
modifier|*
argument_list|>
name|dockWidgets
init|=
name|findChildrenHelper
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|mainWindow
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dockAreaLayout
operator|.
name|restoreState
argument_list|(
name|stream
argument_list|,
name|dockWidgets
argument_list|)
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dockWidgets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QDockWidget
modifier|*
name|w
init|=
name|dockWidgets
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|path
init|=
name|dockAreaLayout
operator|.
name|indexOf
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|oldPath
init|=
name|oldState
operator|.
name|dockAreaLayout
operator|.
name|indexOf
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|QDockAreaLayoutInfo
modifier|*
name|info
init|=
name|dockAreaLayout
operator|.
name|info
argument_list|(
name|oldPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|info
operator|->
name|item_list
operator|.
name|append
argument_list|(
name|QDockAreaLayoutItem
argument_list|(
operator|new
name|QDockWidgetItem
argument_list|(
name|w
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
case|case
name|QToolBarAreaLayout
operator|::
name|ToolBarStateMarker
case|:
case|case
name|QToolBarAreaLayout
operator|::
name|ToolBarStateMarkerEx
case|:
block|{
name|QList
argument_list|<
name|QToolBar
modifier|*
argument_list|>
name|toolBars
init|=
name|findChildrenHelper
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|mainWindow
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|toolBarAreaLayout
operator|.
name|restoreState
argument_list|(
name|stream
argument_list|,
name|toolBars
argument_list|,
name|marker
argument_list|)
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toolBars
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QToolBar
modifier|*
name|w
init|=
name|toolBars
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|path
init|=
name|toolBarAreaLayout
operator|.
name|indexOf
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|oldPath
init|=
name|oldState
operator|.
name|toolBarAreaLayout
operator|.
name|indexOf
argument_list|(
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|toolBarAreaLayout
operator|.
name|docks
index|[
name|oldPath
operator|.
name|at
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|insertToolBar
argument_list|(
literal|0
argument_list|,
name|w
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
endif|#
directive|endif
comment|//QT_NO_TOOLBAR
default|default:
return|return
literal|false
return|;
block|}
comment|// switch
block|}
comment|//while
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/****************************************************************************** ** QMainWindowLayoutState - toolbars */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
end_ifndef
begin_function
DECL|function|validateToolBarArea
specifier|static
specifier|inline
name|void
name|validateToolBarArea
parameter_list|(
name|Qt
operator|::
name|ToolBarArea
modifier|&
name|area
parameter_list|)
block|{
switch|switch
condition|(
name|area
condition|)
block|{
case|case
name|Qt
operator|::
name|LeftToolBarArea
case|:
case|case
name|Qt
operator|::
name|RightToolBarArea
case|:
case|case
name|Qt
operator|::
name|TopToolBarArea
case|:
case|case
name|Qt
operator|::
name|BottomToolBarArea
case|:
break|break;
default|default:
name|area
operator|=
name|Qt
operator|::
name|TopToolBarArea
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toDockPos
specifier|static
name|QInternal
operator|::
name|DockPosition
name|toDockPos
parameter_list|(
name|Qt
operator|::
name|ToolBarArea
name|area
parameter_list|)
block|{
switch|switch
condition|(
name|area
condition|)
block|{
case|case
name|Qt
operator|::
name|LeftToolBarArea
case|:
return|return
name|QInternal
operator|::
name|LeftDock
return|;
case|case
name|Qt
operator|::
name|RightToolBarArea
case|:
return|return
name|QInternal
operator|::
name|RightDock
return|;
case|case
name|Qt
operator|::
name|TopToolBarArea
case|:
return|return
name|QInternal
operator|::
name|TopDock
return|;
case|case
name|Qt
operator|::
name|BottomToolBarArea
case|:
return|return
name|QInternal
operator|::
name|BottomDock
return|;
default|default:
break|break;
block|}
return|return
name|QInternal
operator|::
name|DockCount
return|;
block|}
end_function
begin_function
DECL|function|toToolBarArea
specifier|static
name|Qt
operator|::
name|ToolBarArea
name|toToolBarArea
parameter_list|(
name|QInternal
operator|::
name|DockPosition
name|pos
parameter_list|)
block|{
switch|switch
condition|(
name|pos
condition|)
block|{
case|case
name|QInternal
operator|::
name|LeftDock
case|:
return|return
name|Qt
operator|::
name|LeftToolBarArea
return|;
case|case
name|QInternal
operator|::
name|RightDock
case|:
return|return
name|Qt
operator|::
name|RightToolBarArea
return|;
case|case
name|QInternal
operator|::
name|TopDock
case|:
return|return
name|Qt
operator|::
name|TopToolBarArea
return|;
case|case
name|QInternal
operator|::
name|BottomDock
case|:
return|return
name|Qt
operator|::
name|BottomToolBarArea
return|;
default|default:
break|break;
block|}
return|return
name|Qt
operator|::
name|NoToolBarArea
return|;
block|}
end_function
begin_function
DECL|function|toToolBarArea
specifier|static
specifier|inline
name|Qt
operator|::
name|ToolBarArea
name|toToolBarArea
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|toToolBarArea
argument_list|(
cast|static_cast
argument_list|<
name|QInternal
operator|::
name|DockPosition
argument_list|>
argument_list|(
name|pos
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addToolBarBreak
name|void
name|QMainWindowLayout
operator|::
name|addToolBarBreak
parameter_list|(
name|Qt
operator|::
name|ToolBarArea
name|area
parameter_list|)
block|{
name|validateToolBarArea
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|addToolBarBreak
argument_list|(
name|toDockPos
argument_list|(
name|area
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|savedState
operator|.
name|isValid
argument_list|()
condition|)
name|savedState
operator|.
name|toolBarAreaLayout
operator|.
name|addToolBarBreak
argument_list|(
name|toDockPos
argument_list|(
name|area
argument_list|)
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertToolBarBreak
name|void
name|QMainWindowLayout
operator|::
name|insertToolBarBreak
parameter_list|(
name|QToolBar
modifier|*
name|before
parameter_list|)
block|{
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|insertToolBarBreak
argument_list|(
name|before
argument_list|)
expr_stmt|;
if|if
condition|(
name|savedState
operator|.
name|isValid
argument_list|()
condition|)
name|savedState
operator|.
name|toolBarAreaLayout
operator|.
name|insertToolBarBreak
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeToolBarBreak
name|void
name|QMainWindowLayout
operator|::
name|removeToolBarBreak
parameter_list|(
name|QToolBar
modifier|*
name|before
parameter_list|)
block|{
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|removeToolBarBreak
argument_list|(
name|before
argument_list|)
expr_stmt|;
if|if
condition|(
name|savedState
operator|.
name|isValid
argument_list|()
condition|)
name|savedState
operator|.
name|toolBarAreaLayout
operator|.
name|removeToolBarBreak
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moveToolBar
name|void
name|QMainWindowLayout
operator|::
name|moveToolBar
parameter_list|(
name|QToolBar
modifier|*
name|toolbar
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|moveToolBar
argument_list|(
name|toolbar
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|savedState
operator|.
name|isValid
argument_list|()
condition|)
name|savedState
operator|.
name|toolBarAreaLayout
operator|.
name|moveToolBar
argument_list|(
name|toolbar
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/* Removes the toolbar from the mainwindow so that it can be added again. Does not    explicitly hide the toolbar. */
end_comment
begin_function
DECL|function|removeToolBar
name|void
name|QMainWindowLayout
operator|::
name|removeToolBar
parameter_list|(
name|QToolBar
modifier|*
name|toolbar
parameter_list|)
block|{
if|if
condition|(
name|toolbar
condition|)
block|{
name|QObject
operator|::
name|disconnect
argument_list|(
name|parentWidget
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|iconSizeChanged
argument_list|(
name|QSize
argument_list|)
argument_list|)
argument_list|,
name|toolbar
argument_list|,
name|SLOT
argument_list|(
name|_q_updateIconSize
argument_list|(
name|QSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|parentWidget
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|toolButtonStyleChanged
argument_list|(
name|Qt
operator|::
name|ToolButtonStyle
argument_list|)
argument_list|)
argument_list|,
name|toolbar
argument_list|,
name|SLOT
argument_list|(
name|_q_updateToolButtonStyle
argument_list|(
name|Qt
operator|::
name|ToolButtonStyle
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
if|if
condition|(
name|usesHIToolBar
argument_list|(
name|toolbar
argument_list|)
condition|)
block|{
name|removeFromMacToolbar
argument_list|(
name|toolbar
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
comment|// Q_DEAD_CODE_FROM_QT4_MAC
block|{
name|removeWidget
argument_list|(
name|toolbar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     Adds \a toolbar to \a area, continuing the current line. */
end_comment
begin_function
DECL|function|addToolBar
name|void
name|QMainWindowLayout
operator|::
name|addToolBar
parameter_list|(
name|Qt
operator|::
name|ToolBarArea
name|area
parameter_list|,
name|QToolBar
modifier|*
name|toolbar
parameter_list|,
name|bool
parameter_list|)
block|{
name|validateToolBarArea
argument_list|(
name|area
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
if|if
condition|(
operator|(
name|area
operator|==
name|Qt
operator|::
name|TopToolBarArea
operator|)
operator|&&
name|layoutState
operator|.
name|mainWindow
operator|->
name|unifiedTitleAndToolBarOnMac
argument_list|()
condition|)
block|{
name|insertIntoMacToolbar
argument_list|(
literal|0
argument_list|,
name|toolbar
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
comment|//let's add the toolbar to the layout
name|addChildWidget
argument_list|(
name|toolbar
argument_list|)
expr_stmt|;
name|QLayoutItem
modifier|*
name|item
init|=
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|addToolBar
argument_list|(
name|toDockPos
argument_list|(
name|area
argument_list|)
argument_list|,
name|toolbar
argument_list|)
decl_stmt|;
if|if
condition|(
name|savedState
operator|.
name|isValid
argument_list|()
operator|&&
name|item
condition|)
block|{
comment|// copy the toolbar also in the saved state
name|savedState
operator|.
name|toolBarAreaLayout
operator|.
name|insertItem
argument_list|(
name|toDockPos
argument_list|(
name|area
argument_list|)
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
name|invalidate
argument_list|()
expr_stmt|;
comment|//this ensures that the toolbar has the right window flags (not floating any more)
name|toolbar
operator|->
name|d_func
argument_list|()
operator|->
name|updateWindowFlags
argument_list|(
literal|false
comment|/*floating*/
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Adds \a toolbar before \a before */
end_comment
begin_function
DECL|function|insertToolBar
name|void
name|QMainWindowLayout
operator|::
name|insertToolBar
parameter_list|(
name|QToolBar
modifier|*
name|before
parameter_list|,
name|QToolBar
modifier|*
name|toolbar
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
if|if
condition|(
name|usesHIToolBar
argument_list|(
name|before
argument_list|)
condition|)
block|{
name|insertIntoMacToolbar
argument_list|(
name|before
argument_list|,
name|toolbar
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
comment|// Q_DEAD_CODE_FROM_QT4_MAC
block|{
name|addChildWidget
argument_list|(
name|toolbar
argument_list|)
expr_stmt|;
name|QLayoutItem
modifier|*
name|item
init|=
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|insertToolBar
argument_list|(
name|before
argument_list|,
name|toolbar
argument_list|)
decl_stmt|;
if|if
condition|(
name|savedState
operator|.
name|isValid
argument_list|()
operator|&&
name|item
condition|)
block|{
comment|// copy the toolbar also in the saved state
name|savedState
operator|.
name|toolBarAreaLayout
operator|.
name|insertItem
argument_list|(
name|before
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|currentGapPos
operator|.
name|isEmpty
argument_list|()
operator|&&
name|currentGapPos
operator|.
name|first
argument_list|()
operator|==
literal|0
condition|)
block|{
name|currentGapPos
operator|=
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|currentGapIndex
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|currentGapPos
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|currentGapPos
operator|.
name|prepend
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|currentGapRect
operator|=
name|layoutState
operator|.
name|itemRect
argument_list|(
name|currentGapPos
argument_list|)
expr_stmt|;
block|}
block|}
name|invalidate
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toolBarArea
name|Qt
operator|::
name|ToolBarArea
name|QMainWindowLayout
operator|::
name|toolBarArea
parameter_list|(
name|QToolBar
modifier|*
name|toolbar
parameter_list|)
specifier|const
block|{
name|QInternal
operator|::
name|DockPosition
name|pos
init|=
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|findToolBar
argument_list|(
name|toolbar
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|pos
condition|)
block|{
case|case
name|QInternal
operator|::
name|LeftDock
case|:
return|return
name|Qt
operator|::
name|LeftToolBarArea
return|;
case|case
name|QInternal
operator|::
name|RightDock
case|:
return|return
name|Qt
operator|::
name|RightToolBarArea
return|;
case|case
name|QInternal
operator|::
name|TopDock
case|:
return|return
name|Qt
operator|::
name|TopToolBarArea
return|;
case|case
name|QInternal
operator|::
name|BottomDock
case|:
return|return
name|Qt
operator|::
name|BottomToolBarArea
return|;
default|default:
break|break;
block|}
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
if|if
condition|(
name|pos
operator|==
name|QInternal
operator|::
name|DockCount
condition|)
block|{
if|if
condition|(
name|qtoolbarsInUnifiedToolbarList
operator|.
name|contains
argument_list|(
name|toolbar
argument_list|)
condition|)
return|return
name|Qt
operator|::
name|TopToolBarArea
return|;
block|}
endif|#
directive|endif
return|return
name|Qt
operator|::
name|NoToolBarArea
return|;
block|}
end_function
begin_function
DECL|function|toolBarBreak
name|bool
name|QMainWindowLayout
operator|::
name|toolBarBreak
parameter_list|(
name|QToolBar
modifier|*
name|toolBar
parameter_list|)
specifier|const
block|{
return|return
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|toolBarBreak
argument_list|(
name|toolBar
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getStyleOptionInfo
name|void
name|QMainWindowLayout
operator|::
name|getStyleOptionInfo
parameter_list|(
name|QStyleOptionToolBar
modifier|*
name|option
parameter_list|,
name|QToolBar
modifier|*
name|toolBar
parameter_list|)
specifier|const
block|{
name|option
operator|->
name|toolBarArea
operator|=
name|toolBarArea
argument_list|(
name|toolBar
argument_list|)
expr_stmt|;
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|getStyleOptionInfo
argument_list|(
name|option
argument_list|,
name|toolBar
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toggleToolBarsVisible
name|void
name|QMainWindowLayout
operator|::
name|toggleToolBarsVisible
parameter_list|()
block|{
name|bool
name|updateNonUnifiedParts
init|=
literal|true
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
if|if
condition|(
name|layoutState
operator|.
name|mainWindow
operator|->
name|unifiedTitleAndToolBarOnMac
argument_list|()
condition|)
block|{
comment|// If we hit this case, someone has pressed the "toolbar button" which will
comment|// toggle the unified toolbar visibility, because that's what the user wants.
comment|// We might be in a situation where someone has hidden all the toolbars
comment|// beforehand (maybe in construction), but now they've hit this button and
comment|// and are expecting the items to show. What do we do?
comment|// 1) Check the visibility of all the toolbars, if one is visible, do nothing, this
comment|//    preserves what people would expect (these toolbars were visible when I clicked last time).
comment|// 2) If NONE are visible, then show them all. Again, this preserves the user expectation
comment|//    of, "I want to see the toolbars." The user may get more toolbars than expected, but this
comment|//    is better seeing nothing.
comment|// Don't worry about any of this if we are going invisible. This does mean we may get
comment|// into issues when switching into and out of fullscreen mode, but this is probably minor.
comment|// If we ever need to do hiding, that would have to be taken care of after the unified toolbar
comment|// has finished hiding.
comment|// People can of course handle the QEvent::ToolBarChange event themselves and do
comment|// WHATEVER they want if they don't like what we are doing (though the unified toolbar
comment|// will fire regardless).
comment|// Check if we REALLY need to update the geometry below. If we only have items in the
comment|// unified toolbar, all the docks will be empty, so there's very little point
comment|// in doing the geometry as Apple will do it (we also avoid flicker in Cocoa as well).
comment|// FWIW, layoutState.toolBarAreaLayout.visible and the state of the unified toolbar
comment|// visibility can get out of sync. I really don't think it's a big issue. It is kept
comment|// to a minimum because we only change the visibility if we absolutely must.
comment|// update the "non unified parts."
name|updateNonUnifiedParts
operator|=
operator|!
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
comment|// We get this function before the unified toolbar does its thing.
comment|// So, the value will be opposite of what we expect.
name|bool
name|goingVisible
init|=
operator|!
name|macWindowToolbarIsVisible
argument_list|(
name|qt_mac_window_for
argument_list|(
name|layoutState
operator|.
name|mainWindow
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|goingVisible
condition|)
block|{
specifier|const
name|int
name|ToolBarCount
init|=
name|qtoolbarsInUnifiedToolbarList
operator|.
name|size
argument_list|()
decl_stmt|;
name|bool
name|needAllVisible
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ToolBarCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|qtoolbarsInUnifiedToolbarList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|isHidden
argument_list|()
condition|)
block|{
name|needAllVisible
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|needAllVisible
condition|)
block|{
name|QBoolBlocker
name|blocker
argument_list|(
name|blockVisiblityCheck
argument_list|)
decl_stmt|;
comment|// Disable the visibilty check because
comment|// the toggle has already happened.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ToolBarCount
condition|;
operator|++
name|i
control|)
name|qtoolbarsInUnifiedToolbarList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|updateNonUnifiedParts
condition|)
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|visible
operator|=
name|goingVisible
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|updateNonUnifiedParts
condition|)
block|{
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|visible
operator|=
operator|!
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|visible
expr_stmt|;
if|if
condition|(
operator|!
name|layoutState
operator|.
name|mainWindow
operator|->
name|isMaximized
argument_list|()
condition|)
block|{
name|QPoint
name|topLeft
init|=
name|parentWidget
argument_list|()
operator|->
name|geometry
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|QRect
name|r
init|=
name|parentWidget
argument_list|()
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|r
operator|=
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|rectHint
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|moveTo
argument_list|(
name|topLeft
argument_list|)
expr_stmt|;
name|parentWidget
argument_list|()
operator|->
name|setGeometry
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|update
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLBAR
end_comment
begin_comment
comment|/****************************************************************************** ** QMainWindowLayoutState - dock areas */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
end_ifndef
begin_function
DECL|function|toDockPos
specifier|static
name|QInternal
operator|::
name|DockPosition
name|toDockPos
parameter_list|(
name|Qt
operator|::
name|DockWidgetArea
name|area
parameter_list|)
block|{
switch|switch
condition|(
name|area
condition|)
block|{
case|case
name|Qt
operator|::
name|LeftDockWidgetArea
case|:
return|return
name|QInternal
operator|::
name|LeftDock
return|;
case|case
name|Qt
operator|::
name|RightDockWidgetArea
case|:
return|return
name|QInternal
operator|::
name|RightDock
return|;
case|case
name|Qt
operator|::
name|TopDockWidgetArea
case|:
return|return
name|QInternal
operator|::
name|TopDock
return|;
case|case
name|Qt
operator|::
name|BottomDockWidgetArea
case|:
return|return
name|QInternal
operator|::
name|BottomDock
return|;
default|default:
break|break;
block|}
return|return
name|QInternal
operator|::
name|DockCount
return|;
block|}
end_function
begin_function
DECL|function|toDockWidgetArea
specifier|static
name|Qt
operator|::
name|DockWidgetArea
name|toDockWidgetArea
parameter_list|(
name|QInternal
operator|::
name|DockPosition
name|pos
parameter_list|)
block|{
switch|switch
condition|(
name|pos
condition|)
block|{
case|case
name|QInternal
operator|::
name|LeftDock
case|:
return|return
name|Qt
operator|::
name|LeftDockWidgetArea
return|;
case|case
name|QInternal
operator|::
name|RightDock
case|:
return|return
name|Qt
operator|::
name|RightDockWidgetArea
return|;
case|case
name|QInternal
operator|::
name|TopDock
case|:
return|return
name|Qt
operator|::
name|TopDockWidgetArea
return|;
case|case
name|QInternal
operator|::
name|BottomDock
case|:
return|return
name|Qt
operator|::
name|BottomDockWidgetArea
return|;
default|default:
break|break;
block|}
return|return
name|Qt
operator|::
name|NoDockWidgetArea
return|;
block|}
end_function
begin_function
DECL|function|toDockWidgetArea
specifier|inline
specifier|static
name|Qt
operator|::
name|DockWidgetArea
name|toDockWidgetArea
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|toDockWidgetArea
argument_list|(
cast|static_cast
argument_list|<
name|QInternal
operator|::
name|DockPosition
argument_list|>
argument_list|(
name|pos
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setCorner
name|void
name|QMainWindowLayout
operator|::
name|setCorner
parameter_list|(
name|Qt
operator|::
name|Corner
name|corner
parameter_list|,
name|Qt
operator|::
name|DockWidgetArea
name|area
parameter_list|)
block|{
if|if
condition|(
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|corners
index|[
name|corner
index|]
operator|==
name|area
condition|)
return|return;
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|corners
index|[
name|corner
index|]
operator|=
name|area
expr_stmt|;
if|if
condition|(
name|savedState
operator|.
name|isValid
argument_list|()
condition|)
name|savedState
operator|.
name|dockAreaLayout
operator|.
name|corners
index|[
name|corner
index|]
operator|=
name|area
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|corner
name|Qt
operator|::
name|DockWidgetArea
name|QMainWindowLayout
operator|::
name|corner
parameter_list|(
name|Qt
operator|::
name|Corner
name|corner
parameter_list|)
specifier|const
block|{
return|return
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|corners
index|[
name|corner
index|]
return|;
block|}
end_function
begin_function
DECL|function|addDockWidget
name|void
name|QMainWindowLayout
operator|::
name|addDockWidget
parameter_list|(
name|Qt
operator|::
name|DockWidgetArea
name|area
parameter_list|,
name|QDockWidget
modifier|*
name|dockwidget
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|addChildWidget
argument_list|(
name|dockwidget
argument_list|)
expr_stmt|;
comment|// If we are currently moving a separator, then we need to abort the move, since each
comment|// time we move the mouse layoutState is replaced by savedState modified by the move.
if|if
condition|(
operator|!
name|movingSeparator
operator|.
name|isEmpty
argument_list|()
condition|)
name|endSeparatorMove
argument_list|(
name|movingSeparatorPos
argument_list|)
expr_stmt|;
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|addDockWidget
argument_list|(
name|toDockPos
argument_list|(
name|area
argument_list|)
argument_list|,
name|dockwidget
argument_list|,
name|orientation
argument_list|)
expr_stmt|;
emit|emit
name|dockwidget
operator|->
name|dockLocationChanged
argument_list|(
name|area
argument_list|)
emit|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tabifyDockWidget
name|void
name|QMainWindowLayout
operator|::
name|tabifyDockWidget
parameter_list|(
name|QDockWidget
modifier|*
name|first
parameter_list|,
name|QDockWidget
modifier|*
name|second
parameter_list|)
block|{
name|addChildWidget
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|tabifyDockWidget
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
emit|emit
name|second
operator|->
name|dockLocationChanged
argument_list|(
name|dockWidgetArea
argument_list|(
name|first
argument_list|)
argument_list|)
emit|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|restoreDockWidget
name|bool
name|QMainWindowLayout
operator|::
name|restoreDockWidget
parameter_list|(
name|QDockWidget
modifier|*
name|dockwidget
parameter_list|)
block|{
name|addChildWidget
argument_list|(
name|dockwidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|restoreDockWidget
argument_list|(
name|dockwidget
argument_list|)
condition|)
return|return
literal|false
return|;
emit|emit
name|dockwidget
operator|->
name|dockLocationChanged
argument_list|(
name|dockWidgetArea
argument_list|(
name|dockwidget
argument_list|)
argument_list|)
emit|;
name|invalidate
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
end_ifndef
begin_function
DECL|function|documentMode
name|bool
name|QMainWindowLayout
operator|::
name|documentMode
parameter_list|()
specifier|const
block|{
return|return
name|_documentMode
return|;
block|}
end_function
begin_function
DECL|function|setDocumentMode
name|void
name|QMainWindowLayout
operator|::
name|setDocumentMode
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|_documentMode
operator|==
name|enabled
condition|)
return|return;
name|_documentMode
operator|=
name|enabled
expr_stmt|;
comment|// Update the document mode for all tab bars
foreach|foreach
control|(
name|QTabBar
modifier|*
name|bar
decl|,
name|usedTabBars
control|)
name|bar
operator|->
name|setDocumentMode
argument_list|(
name|_documentMode
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QTabBar
modifier|*
name|bar
decl|,
name|unusedTabBars
control|)
name|bar
operator|->
name|setDocumentMode
argument_list|(
name|_documentMode
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABBAR
end_comment
begin_function
DECL|function|setVerticalTabsEnabled
name|void
name|QMainWindowLayout
operator|::
name|setVerticalTabsEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_TABBAR
name|Q_UNUSED
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|verticalTabsEnabled
operator|==
name|enabled
condition|)
return|return;
name|verticalTabsEnabled
operator|=
name|enabled
expr_stmt|;
name|updateTabBarShapes
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TABBAR
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
end_ifndef
begin_function
DECL|function|tabShape
name|QTabWidget
operator|::
name|TabShape
name|QMainWindowLayout
operator|::
name|tabShape
parameter_list|()
specifier|const
block|{
return|return
name|_tabShape
return|;
block|}
end_function
begin_function
DECL|function|setTabShape
name|void
name|QMainWindowLayout
operator|::
name|setTabShape
parameter_list|(
name|QTabWidget
operator|::
name|TabShape
name|tabShape
parameter_list|)
block|{
if|if
condition|(
name|_tabShape
operator|==
name|tabShape
condition|)
return|return;
name|_tabShape
operator|=
name|tabShape
expr_stmt|;
name|updateTabBarShapes
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tabPosition
name|QTabWidget
operator|::
name|TabPosition
name|QMainWindowLayout
operator|::
name|tabPosition
parameter_list|(
name|Qt
operator|::
name|DockWidgetArea
name|area
parameter_list|)
specifier|const
block|{
return|return
name|tabPositions
index|[
name|toDockPos
argument_list|(
name|area
argument_list|)
index|]
return|;
block|}
end_function
begin_function
DECL|function|setTabPosition
name|void
name|QMainWindowLayout
operator|::
name|setTabPosition
parameter_list|(
name|Qt
operator|::
name|DockWidgetAreas
name|areas
parameter_list|,
name|QTabWidget
operator|::
name|TabPosition
name|tabPosition
parameter_list|)
block|{
specifier|const
name|Qt
operator|::
name|DockWidgetArea
name|dockWidgetAreas
index|[]
init|=
block|{
name|Qt
operator|::
name|TopDockWidgetArea
block|,
name|Qt
operator|::
name|LeftDockWidgetArea
block|,
name|Qt
operator|::
name|BottomDockWidgetArea
block|,
name|Qt
operator|::
name|RightDockWidgetArea
block|}
decl_stmt|;
specifier|const
name|QInternal
operator|::
name|DockPosition
name|dockPositions
index|[]
init|=
block|{
name|QInternal
operator|::
name|TopDock
block|,
name|QInternal
operator|::
name|LeftDock
block|,
name|QInternal
operator|::
name|BottomDock
block|,
name|QInternal
operator|::
name|RightDock
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QInternal
operator|::
name|DockCount
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|areas
operator|&
name|dockWidgetAreas
index|[
name|i
index|]
condition|)
name|tabPositions
index|[
name|dockPositions
index|[
name|i
index|]
index|]
operator|=
name|tabPosition
expr_stmt|;
name|updateTabBarShapes
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tabBarShapeFrom
specifier|static
specifier|inline
name|QTabBar
operator|::
name|Shape
name|tabBarShapeFrom
parameter_list|(
name|QTabWidget
operator|::
name|TabShape
name|shape
parameter_list|,
name|QTabWidget
operator|::
name|TabPosition
name|position
parameter_list|)
block|{
specifier|const
name|bool
name|rounded
init|=
operator|(
name|shape
operator|==
name|QTabWidget
operator|::
name|Rounded
operator|)
decl_stmt|;
if|if
condition|(
name|position
operator|==
name|QTabWidget
operator|::
name|North
condition|)
return|return
name|rounded
condition|?
name|QTabBar
operator|::
name|RoundedNorth
else|:
name|QTabBar
operator|::
name|TriangularNorth
return|;
if|if
condition|(
name|position
operator|==
name|QTabWidget
operator|::
name|South
condition|)
return|return
name|rounded
condition|?
name|QTabBar
operator|::
name|RoundedSouth
else|:
name|QTabBar
operator|::
name|TriangularSouth
return|;
if|if
condition|(
name|position
operator|==
name|QTabWidget
operator|::
name|East
condition|)
return|return
name|rounded
condition|?
name|QTabBar
operator|::
name|RoundedEast
else|:
name|QTabBar
operator|::
name|TriangularEast
return|;
if|if
condition|(
name|position
operator|==
name|QTabWidget
operator|::
name|West
condition|)
return|return
name|rounded
condition|?
name|QTabBar
operator|::
name|RoundedWest
else|:
name|QTabBar
operator|::
name|TriangularWest
return|;
return|return
name|QTabBar
operator|::
name|RoundedNorth
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABWIDGET
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
end_ifndef
begin_function
DECL|function|updateTabBarShapes
name|void
name|QMainWindowLayout
operator|::
name|updateTabBarShapes
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
specifier|const
name|QTabWidget
operator|::
name|TabPosition
name|vertical
index|[]
init|=
block|{
name|QTabWidget
operator|::
name|West
block|,
name|QTabWidget
operator|::
name|East
block|,
name|QTabWidget
operator|::
name|North
block|,
name|QTabWidget
operator|::
name|South
block|}
decl_stmt|;
else|#
directive|else
specifier|const
name|QTabBar
operator|::
name|Shape
name|vertical
index|[]
init|=
block|{
name|QTabBar
operator|::
name|RoundedWest
block|,
name|QTabBar
operator|::
name|RoundedEast
block|,
name|QTabBar
operator|::
name|RoundedNorth
block|,
name|QTabBar
operator|::
name|RoundedSouth
block|}
decl_stmt|;
endif|#
directive|endif
name|QDockAreaLayout
modifier|&
name|layout
init|=
name|layoutState
operator|.
name|dockAreaLayout
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QInternal
operator|::
name|DockCount
condition|;
operator|++
name|i
control|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
name|QTabWidget
operator|::
name|TabPosition
name|pos
init|=
name|verticalTabsEnabled
condition|?
name|vertical
index|[
name|i
index|]
else|:
name|tabPositions
index|[
name|i
index|]
decl_stmt|;
name|QTabBar
operator|::
name|Shape
name|shape
init|=
name|tabBarShapeFrom
argument_list|(
name|_tabShape
argument_list|,
name|pos
argument_list|)
decl_stmt|;
else|#
directive|else
name|QTabBar
operator|::
name|Shape
name|shape
init|=
name|verticalTabsEnabled
condition|?
name|vertical
index|[
name|i
index|]
else|:
name|QTabBar
operator|::
name|RoundedSouth
decl_stmt|;
endif|#
directive|endif
name|layout
operator|.
name|docks
index|[
name|i
index|]
operator|.
name|setTabBarShape
argument_list|(
name|shape
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABBAR
end_comment
begin_function
DECL|function|splitDockWidget
name|void
name|QMainWindowLayout
operator|::
name|splitDockWidget
parameter_list|(
name|QDockWidget
modifier|*
name|after
parameter_list|,
name|QDockWidget
modifier|*
name|dockwidget
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|)
block|{
name|addChildWidget
argument_list|(
name|dockwidget
argument_list|)
expr_stmt|;
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|splitDockWidget
argument_list|(
name|after
argument_list|,
name|dockwidget
argument_list|,
name|orientation
argument_list|)
expr_stmt|;
emit|emit
name|dockwidget
operator|->
name|dockLocationChanged
argument_list|(
name|dockWidgetArea
argument_list|(
name|after
argument_list|)
argument_list|)
emit|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dockWidgetArea
name|Qt
operator|::
name|DockWidgetArea
name|QMainWindowLayout
operator|::
name|dockWidgetArea
parameter_list|(
name|QDockWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|pathToWidget
init|=
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|indexOf
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathToWidget
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|Qt
operator|::
name|NoDockWidgetArea
return|;
return|return
name|toDockWidgetArea
argument_list|(
name|pathToWidget
operator|.
name|first
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|keepSize
name|void
name|QMainWindowLayout
operator|::
name|keepSize
parameter_list|(
name|QDockWidget
modifier|*
name|w
parameter_list|)
block|{
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|keepSize
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
end_ifndef
begin_class
DECL|class|QMainWindowTabBar
class|class
name|QMainWindowTabBar
super|:
specifier|public
name|QTabBar
block|{
public|public:
name|QMainWindowTabBar
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
constructor_decl|;
protected|protected:
DECL|member|Q_DECL_OVERRIDE
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QMainWindowTabBar
name|QMainWindowTabBar
operator|::
name|QMainWindowTabBar
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QTabBar
argument_list|(
name|parent
argument_list|)
block|{
name|setExpanding
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|event
name|bool
name|QMainWindowTabBar
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
comment|// show the tooltip if tab is too small to fit label
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|ToolTip
condition|)
return|return
name|QTabBar
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
name|QSize
name|size
init|=
name|this
operator|->
name|size
argument_list|()
decl_stmt|;
name|QSize
name|hint
init|=
name|sizeHint
argument_list|()
decl_stmt|;
if|if
condition|(
name|shape
argument_list|()
operator|==
name|QTabBar
operator|::
name|RoundedWest
operator|||
name|shape
argument_list|()
operator|==
name|QTabBar
operator|::
name|RoundedEast
condition|)
block|{
name|size
operator|=
name|size
operator|.
name|transposed
argument_list|()
expr_stmt|;
name|hint
operator|=
name|hint
operator|.
name|transposed
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|size
operator|.
name|width
argument_list|()
operator|<
name|hint
operator|.
name|width
argument_list|()
condition|)
return|return
name|QTabBar
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|getTabBar
name|QTabBar
modifier|*
name|QMainWindowLayout
operator|::
name|getTabBar
parameter_list|()
block|{
name|QTabBar
modifier|*
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|unusedTabBars
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|=
name|unusedTabBars
operator|.
name|takeLast
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|new
name|QMainWindowTabBar
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|->
name|setDrawBase
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|->
name|setElideMode
argument_list|(
name|Qt
operator|::
name|ElideRight
argument_list|)
expr_stmt|;
name|result
operator|->
name|setDocumentMode
argument_list|(
name|_documentMode
argument_list|)
expr_stmt|;
name|result
operator|->
name|setMovable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|result
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|tabChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|result
argument_list|,
operator|&
name|QTabBar
operator|::
name|tabMoved
argument_list|,
name|this
argument_list|,
operator|&
name|QMainWindowLayout
operator|::
name|tabMoved
argument_list|)
expr_stmt|;
block|}
name|usedTabBars
operator|.
name|insert
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|// Allocates a new separator widget if needed
end_comment
begin_function
DECL|function|getSeparatorWidget
name|QWidget
modifier|*
name|QMainWindowLayout
operator|::
name|getSeparatorWidget
parameter_list|()
block|{
name|QWidget
modifier|*
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|unusedSeparatorWidgets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|=
name|unusedSeparatorWidgets
operator|.
name|takeLast
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|new
name|QWidget
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_MouseNoMask
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|result
operator|->
name|setAutoFillBackground
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|result
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_qmainwindow_extended_splitter"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|usedSeparatorWidgets
operator|.
name|insert
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|tabChanged
name|void
name|QMainWindowLayout
operator|::
name|tabChanged
parameter_list|()
block|{
name|QTabBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tb
operator|==
literal|0
condition|)
return|return;
name|QDockAreaLayoutInfo
modifier|*
name|info
init|=
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|info
argument_list|(
name|tb
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|0
condition|)
return|return;
name|info
operator|->
name|apply
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|centralWidget
argument_list|()
condition|)
name|w
operator|->
name|raise
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tabMoved
name|void
name|QMainWindowLayout
operator|::
name|tabMoved
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|QTabBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QTabBar
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|QDockAreaLayoutInfo
modifier|*
name|info
init|=
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|info
argument_list|(
name|tb
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|info
operator|->
name|moveTab
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TABBAR
end_comment
begin_function
DECL|function|startSeparatorMove
name|bool
name|QMainWindowLayout
operator|::
name|startSeparatorMove
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|movingSeparator
operator|=
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|findSeparator
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|movingSeparator
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|fallbackToSizeHints
operator|=
literal|false
expr_stmt|;
name|savedState
operator|=
name|layoutState
expr_stmt|;
name|movingSeparatorPos
operator|=
name|movingSeparatorOrigin
operator|=
name|pos
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|separatorMove
name|bool
name|QMainWindowLayout
operator|::
name|separatorMove
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
if|if
condition|(
name|movingSeparator
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|movingSeparatorPos
operator|=
name|pos
expr_stmt|;
name|separatorMoveTimer
operator|.
name|start
argument_list|(
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|endSeparatorMove
name|bool
name|QMainWindowLayout
operator|::
name|endSeparatorMove
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|)
block|{
if|if
condition|(
name|movingSeparator
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|movingSeparator
operator|.
name|clear
argument_list|()
expr_stmt|;
name|savedState
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|raise
name|void
name|QMainWindowLayout
operator|::
name|raise
parameter_list|(
name|QDockWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QDockAreaLayoutInfo
modifier|*
name|info
init|=
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|info
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|0
condition|)
return|return;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
if|if
condition|(
operator|!
name|info
operator|->
name|tabbed
condition|)
return|return;
name|info
operator|->
name|setCurrentTab
argument_list|(
name|widget
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DOCKWIDGET
end_comment
begin_comment
comment|/****************************************************************************** ** QMainWindowLayoutState - layout interface */
end_comment
begin_function
DECL|function|count
name|int
name|QMainWindowLayout
operator|::
name|count
parameter_list|()
specifier|const
block|{
name|qWarning
argument_list|(
literal|"QMainWindowLayout::count: ?"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
comment|//#################################################
block|}
end_function
begin_function
DECL|function|itemAt
name|QLayoutItem
modifier|*
name|QMainWindowLayout
operator|::
name|itemAt
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|int
name|x
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QLayoutItem
modifier|*
name|ret
init|=
name|layoutState
operator|.
name|itemAt
argument_list|(
name|index
argument_list|,
operator|&
name|x
argument_list|)
condition|)
return|return
name|ret
return|;
if|if
condition|(
name|statusbar
operator|&&
name|x
operator|++
operator|==
name|index
condition|)
return|return
name|statusbar
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|takeAt
name|QLayoutItem
modifier|*
name|QMainWindowLayout
operator|::
name|takeAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|x
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QLayoutItem
modifier|*
name|ret
init|=
name|layoutState
operator|.
name|takeAt
argument_list|(
name|index
argument_list|,
operator|&
name|x
argument_list|)
condition|)
block|{
comment|// the widget might in fact have been destroyed by now
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|ret
operator|->
name|widget
argument_list|()
condition|)
block|{
name|widgetAnimator
operator|.
name|abort
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|==
name|pluggingWidget
condition|)
name|pluggingWidget
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|savedState
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|//we need to remove the item also from the saved state to prevent crash
name|savedState
operator|.
name|remove
argument_list|(
name|ret
argument_list|)
expr_stmt|;
comment|//Also, the item may be contained several times as a gap item.
name|layoutState
operator|.
name|remove
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
operator|!
name|currentGapPos
operator|.
name|isEmpty
argument_list|()
operator|&&
name|currentGapPos
operator|.
name|first
argument_list|()
operator|==
literal|0
condition|)
block|{
name|currentGapPos
operator|=
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|currentGapIndex
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|currentGapPos
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|currentGapPos
operator|.
name|prepend
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|currentGapRect
operator|=
name|layoutState
operator|.
name|itemRect
argument_list|(
name|currentGapPos
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
return|return
name|ret
return|;
block|}
if|if
condition|(
name|statusbar
operator|&&
name|x
operator|++
operator|==
name|index
condition|)
block|{
name|QLayoutItem
modifier|*
name|ret
init|=
name|statusbar
decl_stmt|;
name|statusbar
operator|=
literal|0
expr_stmt|;
return|return
name|ret
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QMainWindowLayout
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|_r
parameter_list|)
block|{
if|if
condition|(
name|savedState
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QRect
name|r
init|=
name|_r
decl_stmt|;
name|QLayout
operator|::
name|setGeometry
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|statusbar
condition|)
block|{
name|QRect
name|sbr
argument_list|(
name|QPoint
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QSize
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|statusbar
operator|->
name|heightForWidth
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|statusbar
operator|->
name|minimumSize
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sbr
operator|.
name|moveBottom
argument_list|(
name|r
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|vr
init|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|parentWidget
argument_list|()
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|_r
argument_list|,
name|sbr
argument_list|)
decl_stmt|;
name|statusbar
operator|->
name|setGeometry
argument_list|(
name|vr
argument_list|)
expr_stmt|;
name|r
operator|.
name|setBottom
argument_list|(
name|sbr
operator|.
name|top
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|layoutState
operator|.
name|rect
operator|=
name|r
expr_stmt|;
name|layoutState
operator|.
name|fitLayout
argument_list|()
expr_stmt|;
name|applyState
argument_list|(
name|layoutState
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addItem
name|void
name|QMainWindowLayout
operator|::
name|addItem
parameter_list|(
name|QLayoutItem
modifier|*
parameter_list|)
block|{
name|qWarning
argument_list|(
literal|"QMainWindowLayout::addItem: Please use the public QMainWindow API instead"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSize
name|QMainWindowLayout
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|szHint
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|szHint
operator|=
name|layoutState
operator|.
name|sizeHint
argument_list|()
expr_stmt|;
specifier|const
name|QSize
name|sbHint
init|=
name|statusbar
condition|?
name|statusbar
operator|->
name|sizeHint
argument_list|()
else|:
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|szHint
operator|=
name|QSize
argument_list|(
name|qMax
argument_list|(
name|sbHint
operator|.
name|width
argument_list|()
argument_list|,
name|szHint
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|sbHint
operator|.
name|height
argument_list|()
operator|+
name|szHint
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|szHint
return|;
block|}
end_function
begin_function
DECL|function|minimumSize
name|QSize
name|QMainWindowLayout
operator|::
name|minimumSize
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|minSize
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|minSize
operator|=
name|layoutState
operator|.
name|minimumSize
argument_list|()
expr_stmt|;
specifier|const
name|QSize
name|sbMin
init|=
name|statusbar
condition|?
name|statusbar
operator|->
name|minimumSize
argument_list|()
else|:
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|minSize
operator|=
name|QSize
argument_list|(
name|qMax
argument_list|(
name|sbMin
operator|.
name|width
argument_list|()
argument_list|,
name|minSize
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|sbMin
operator|.
name|height
argument_list|()
operator|+
name|minSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
specifier|const
name|QSize
name|storedSize
init|=
name|minSize
decl_stmt|;
name|int
name|minWidth
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
name|QToolBar
modifier|*
name|toolbar
decl|,
name|qtoolbarsInUnifiedToolbarList
control|)
block|{
name|minWidth
operator|+=
name|toolbar
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|+
literal|20
expr_stmt|;
block|}
name|minSize
operator|=
name|QSize
argument_list|(
name|qMax
argument_list|(
name|minWidth
argument_list|,
name|storedSize
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|storedSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|minSize
return|;
block|}
end_function
begin_function
DECL|function|invalidate
name|void
name|QMainWindowLayout
operator|::
name|invalidate
parameter_list|()
block|{
name|QLayout
operator|::
name|invalidate
argument_list|()
expr_stmt|;
name|minSize
operator|=
name|szHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/****************************************************************************** ** QMainWindowLayout - remaining stuff */
end_comment
begin_function
DECL|function|fixToolBarOrientation
specifier|static
name|void
name|fixToolBarOrientation
parameter_list|(
name|QLayoutItem
modifier|*
name|item
parameter_list|,
name|int
name|dockPos
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
name|QToolBar
modifier|*
name|toolBar
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|item
operator|->
name|widget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toolBar
operator|==
literal|0
condition|)
return|return;
name|QRect
name|oldGeo
init|=
name|toolBar
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|QInternal
operator|::
name|DockPosition
name|pos
init|=
cast|static_cast
argument_list|<
name|QInternal
operator|::
name|DockPosition
argument_list|>
argument_list|(
name|dockPos
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|Orientation
name|o
init|=
name|pos
operator|==
name|QInternal
operator|::
name|TopDock
operator|||
name|pos
operator|==
name|QInternal
operator|::
name|BottomDock
condition|?
name|Qt
operator|::
name|Horizontal
else|:
name|Qt
operator|::
name|Vertical
decl_stmt|;
if|if
condition|(
name|o
operator|!=
name|toolBar
operator|->
name|orientation
argument_list|()
condition|)
name|toolBar
operator|->
name|setOrientation
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|QSize
name|hint
init|=
name|toolBar
operator|->
name|sizeHint
argument_list|()
operator|.
name|boundedTo
argument_list|(
name|toolBar
operator|->
name|maximumSize
argument_list|()
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|toolBar
operator|->
name|minimumSize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toolBar
operator|->
name|size
argument_list|()
operator|!=
name|hint
condition|)
block|{
name|QRect
name|newGeo
argument_list|(
name|oldGeo
operator|.
name|topLeft
argument_list|()
argument_list|,
name|hint
argument_list|)
decl_stmt|;
if|if
condition|(
name|toolBar
operator|->
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|newGeo
operator|.
name|moveRight
argument_list|(
name|oldGeo
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|toolBar
operator|->
name|setGeometry
argument_list|(
name|newGeo
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|dockPos
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|revert
name|void
name|QMainWindowLayout
operator|::
name|revert
parameter_list|(
name|QLayoutItem
modifier|*
name|widgetItem
parameter_list|)
block|{
if|if
condition|(
operator|!
name|savedState
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QWidget
modifier|*
name|widget
init|=
name|widgetItem
operator|->
name|widget
argument_list|()
decl_stmt|;
name|layoutState
operator|=
name|savedState
expr_stmt|;
name|currentGapPos
operator|=
name|layoutState
operator|.
name|indexOf
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|fixToolBarOrientation
argument_list|(
name|widgetItem
argument_list|,
name|currentGapPos
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|layoutState
operator|.
name|unplug
argument_list|(
name|currentGapPos
argument_list|)
expr_stmt|;
name|layoutState
operator|.
name|fitLayout
argument_list|()
expr_stmt|;
name|currentGapRect
operator|=
name|layoutState
operator|.
name|itemRect
argument_list|(
name|currentGapPos
argument_list|)
expr_stmt|;
name|plug
argument_list|(
name|widgetItem
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|plug
name|bool
name|QMainWindowLayout
operator|::
name|plug
parameter_list|(
name|QLayoutItem
modifier|*
name|widgetItem
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parentWidget
argument_list|()
operator|->
name|isVisible
argument_list|()
operator|||
name|parentWidget
argument_list|()
operator|->
name|isMinimized
argument_list|()
operator|||
name|currentGapPos
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|fixToolBarOrientation
argument_list|(
name|widgetItem
argument_list|,
name|currentGapPos
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|widget
init|=
name|widgetItem
operator|->
name|widget
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|previousPath
init|=
name|layoutState
operator|.
name|indexOf
argument_list|(
name|widget
argument_list|)
decl_stmt|;
specifier|const
name|QLayoutItem
modifier|*
name|it
init|=
name|layoutState
operator|.
name|plug
argument_list|(
name|currentGapPos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|it
condition|)
return|return
literal|false
return|;
name|Q_ASSERT
argument_list|(
name|it
operator|==
name|widgetItem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|previousPath
operator|.
name|isEmpty
argument_list|()
condition|)
name|layoutState
operator|.
name|remove
argument_list|(
name|previousPath
argument_list|)
expr_stmt|;
name|pluggingWidget
operator|=
name|widget
expr_stmt|;
name|QRect
name|globalRect
init|=
name|currentGapRect
decl_stmt|;
name|globalRect
operator|.
name|moveTopLeft
argument_list|(
name|parentWidget
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|globalRect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|QDockWidgetLayout
modifier|*
name|layout
init|=
name|qobject_cast
argument_list|<
name|QDockWidgetLayout
operator|*
argument_list|>
argument_list|(
name|widget
operator|->
name|layout
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|layout
operator|->
name|nativeWindowDeco
argument_list|()
condition|)
block|{
name|globalRect
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
name|layout
operator|->
name|titleHeight
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|fw
init|=
name|widget
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DockWidgetFrameWidth
argument_list|,
literal|0
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|globalRect
operator|.
name|adjust
argument_list|(
operator|-
name|fw
argument_list|,
operator|-
name|fw
argument_list|,
name|fw
argument_list|,
name|fw
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
name|widgetAnimator
operator|.
name|animate
argument_list|(
name|widget
argument_list|,
name|globalRect
argument_list|,
name|dockOptions
operator|&
name|QMainWindow
operator|::
name|AnimatedDocks
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|animationFinished
name|void
name|QMainWindowLayout
operator|::
name|animationFinished
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
comment|//this function is called from within the Widget Animator whenever an animation is finished
comment|//on a certain widget
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|QToolBarLayout
modifier|*
name|tbl
init|=
name|qobject_cast
argument_list|<
name|QToolBarLayout
operator|*
argument_list|>
argument_list|(
name|tb
operator|->
name|layout
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|->
name|animating
condition|)
block|{
name|tbl
operator|->
name|animating
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|tbl
operator|->
name|expanded
condition|)
name|tbl
operator|->
name|layoutActions
argument_list|(
name|tb
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tb
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|widget
operator|==
name|pluggingWidget
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|QDockWidget
modifier|*
name|dw
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|dw
operator|->
name|d_func
argument_list|()
operator|->
name|plug
argument_list|(
name|currentGapRect
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|tb
operator|->
name|d_func
argument_list|()
operator|->
name|plug
argument_list|(
name|currentGapRect
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|savedState
operator|.
name|clear
argument_list|()
expr_stmt|;
name|currentGapPos
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pluggingWidget
operator|=
literal|0
expr_stmt|;
comment|//applying the state will make sure that the currentGap is updated correctly
comment|//and all the geometries (especially the one from the central widget) is correct
name|layoutState
operator|.
name|apply
argument_list|(
literal|false
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
if|if
condition|(
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
operator|!=
literal|0
condition|)
block|{
comment|// info() might return null if the widget is destroyed while
comment|// animating but before the animationFinished signal is received.
if|if
condition|(
name|QDockAreaLayoutInfo
modifier|*
name|info
init|=
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|info
argument_list|(
name|widget
argument_list|)
condition|)
name|info
operator|->
name|setCurrentTab
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
endif|#
directive|endif
block|}
if|if
condition|(
operator|!
name|widgetAnimator
operator|.
name|animating
argument_list|()
condition|)
block|{
comment|//all animations are finished
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
name|parentWidget
argument_list|()
operator|->
name|update
argument_list|(
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|separatorRegion
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
foreach|foreach
control|(
name|QTabBar
modifier|*
name|tab_bar
decl|,
name|usedTabBars
control|)
name|tab_bar
operator|->
name|show
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_TABBAR
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
block|}
name|updateGapIndicator
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|restore
name|void
name|QMainWindowLayout
operator|::
name|restore
parameter_list|(
name|bool
name|keepSavedState
parameter_list|)
block|{
if|if
condition|(
operator|!
name|savedState
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|layoutState
operator|=
name|savedState
expr_stmt|;
name|applyState
argument_list|(
name|layoutState
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|keepSavedState
condition|)
name|savedState
operator|.
name|clear
argument_list|()
expr_stmt|;
name|currentGapPos
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pluggingWidget
operator|=
literal|0
expr_stmt|;
name|updateGapIndicator
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QMainWindowLayout
name|QMainWindowLayout
operator|::
name|QMainWindowLayout
parameter_list|(
name|QMainWindow
modifier|*
name|mainwindow
parameter_list|,
name|QLayout
modifier|*
name|parentLayout
parameter_list|)
member_init_list|:
name|QLayout
argument_list|(
name|parentLayout
condition|?
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
else|:
name|mainwindow
argument_list|)
member_init_list|,
name|layoutState
argument_list|(
name|mainwindow
argument_list|)
member_init_list|,
name|savedState
argument_list|(
name|mainwindow
argument_list|)
member_init_list|,
name|dockOptions
argument_list|(
name|QMainWindow
operator|::
name|AnimatedDocks
operator||
name|QMainWindow
operator|::
name|AllowTabbedDocks
argument_list|)
member_init_list|,
name|statusbar
argument_list|(
literal|0
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
member_init_list|,
name|_documentMode
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|verticalTabsEnabled
argument_list|(
literal|false
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
member_init_list|,
name|_tabShape
argument_list|(
name|QTabWidget
operator|::
name|Rounded
argument_list|)
endif|#
directive|endif
endif|#
directive|endif
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
member_init_list|,
name|widgetAnimator
argument_list|(
name|this
argument_list|)
member_init_list|,
name|pluggingWidget
argument_list|(
literal|0
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
member_init_list|,
name|gapIndicator
argument_list|(
operator|new
name|QRubberBand
argument_list|(
name|QRubberBand
operator|::
name|Rectangle
argument_list|,
name|mainwindow
argument_list|)
argument_list|)
endif|#
directive|endif
comment|//QT_NO_RUBBERBAND
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
member_init_list|,
name|blockVisiblityCheck
argument_list|(
literal|false
argument_list|)
endif|#
directive|endif
block|{
if|if
condition|(
name|parentLayout
condition|)
name|setParent
argument_list|(
name|parentLayout
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
name|sep
operator|=
name|mainwindow
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_DockWidgetSeparatorExtent
argument_list|,
literal|0
argument_list|,
name|mainwindow
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QInternal
operator|::
name|DockCount
condition|;
operator|++
name|i
control|)
name|tabPositions
index|[
name|i
index|]
operator|=
name|QTabWidget
operator|::
name|South
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
comment|// For accessibility to identify this special widget.
name|gapIndicator
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_rubberband"
argument_list|)
argument_list|)
expr_stmt|;
name|gapIndicator
operator|->
name|hide
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|pluggingWidget
operator|=
literal|0
expr_stmt|;
name|setObjectName
argument_list|(
name|mainwindow
operator|->
name|objectName
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"_layout"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QMainWindowLayout
name|QMainWindowLayout
operator|::
name|~
name|QMainWindowLayout
parameter_list|()
block|{
name|layoutState
operator|.
name|deleteAllLayoutItems
argument_list|()
expr_stmt|;
name|layoutState
operator|.
name|deleteCentralWidgetItem
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_DEAD_CODE_FROM_QT4_MAC
name|cleanUpMacToolbarItems
argument_list|()
expr_stmt|;
endif|#
directive|endif
operator|delete
name|statusbar
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setDockOptions
name|void
name|QMainWindowLayout
operator|::
name|setDockOptions
parameter_list|(
name|QMainWindow
operator|::
name|DockOptions
name|opts
parameter_list|)
block|{
if|if
condition|(
name|opts
operator|==
name|dockOptions
condition|)
return|return;
name|dockOptions
operator|=
name|opts
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
name|setVerticalTabsEnabled
argument_list|(
name|opts
operator|&
name|QMainWindow
operator|::
name|VerticalTabs
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STATUSBAR
end_ifndef
begin_function
DECL|function|statusBar
name|QStatusBar
modifier|*
name|QMainWindowLayout
operator|::
name|statusBar
parameter_list|()
specifier|const
block|{
return|return
name|statusbar
condition|?
name|qobject_cast
argument_list|<
name|QStatusBar
operator|*
argument_list|>
argument_list|(
name|statusbar
operator|->
name|widget
argument_list|()
argument_list|)
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setStatusBar
name|void
name|QMainWindowLayout
operator|::
name|setStatusBar
parameter_list|(
name|QStatusBar
modifier|*
name|sb
parameter_list|)
block|{
if|if
condition|(
name|sb
condition|)
name|addChildWidget
argument_list|(
name|sb
argument_list|)
expr_stmt|;
operator|delete
name|statusbar
expr_stmt|;
name|statusbar
operator|=
name|sb
condition|?
operator|new
name|QWidgetItemV2
argument_list|(
name|sb
argument_list|)
else|:
literal|0
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_STATUSBAR
end_comment
begin_function
DECL|function|centralWidget
name|QWidget
modifier|*
name|QMainWindowLayout
operator|::
name|centralWidget
parameter_list|()
specifier|const
block|{
return|return
name|layoutState
operator|.
name|centralWidget
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setCentralWidget
name|void
name|QMainWindowLayout
operator|::
name|setCentralWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
if|if
condition|(
name|widget
operator|!=
literal|0
condition|)
name|addChildWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|layoutState
operator|.
name|setCentralWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|savedState
operator|.
name|isValid
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
name|savedState
operator|.
name|dockAreaLayout
operator|.
name|centralWidgetItem
operator|=
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|centralWidgetItem
expr_stmt|;
name|savedState
operator|.
name|dockAreaLayout
operator|.
name|fallbackToSizeHints
operator|=
literal|true
expr_stmt|;
else|#
directive|else
name|savedState
operator|.
name|centralWidgetItem
operator|=
name|layoutState
operator|.
name|centralWidgetItem
expr_stmt|;
endif|#
directive|endif
block|}
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unplug
name|QLayoutItem
modifier|*
name|QMainWindowLayout
operator|::
name|unplug
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|path
init|=
name|layoutState
operator|.
name|indexOf
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|QLayoutItem
modifier|*
name|item
init|=
name|layoutState
operator|.
name|item
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
operator|->
name|isWindow
argument_list|()
condition|)
return|return
name|item
return|;
name|QRect
name|r
init|=
name|layoutState
operator|.
name|itemRect
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|savedState
operator|=
name|layoutState
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|QDockWidget
modifier|*
name|dw
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|dw
operator|->
name|d_func
argument_list|()
operator|->
name|unplug
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|tb
operator|->
name|d_func
argument_list|()
operator|->
name|unplug
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|layoutState
operator|.
name|unplug
argument_list|(
name|path
argument_list|,
operator|&
name|savedState
argument_list|)
expr_stmt|;
name|savedState
operator|.
name|fitLayout
argument_list|()
expr_stmt|;
name|currentGapPos
operator|=
name|path
expr_stmt|;
name|currentGapRect
operator|=
name|r
expr_stmt|;
name|updateGapIndicator
argument_list|()
expr_stmt|;
name|fixToolBarOrientation
argument_list|(
name|item
argument_list|,
name|currentGapPos
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|item
return|;
block|}
end_function
begin_function
DECL|function|updateGapIndicator
name|void
name|QMainWindowLayout
operator|::
name|updateGapIndicator
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_RUBBERBAND
name|gapIndicator
operator|->
name|setVisible
argument_list|(
operator|!
name|widgetAnimator
operator|.
name|animating
argument_list|()
operator|&&
operator|!
name|currentGapPos
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|gapIndicator
operator|->
name|setGeometry
argument_list|(
name|currentGapRect
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|hover
name|QList
argument_list|<
name|int
argument_list|>
name|QMainWindowLayout
operator|::
name|hover
parameter_list|(
name|QLayoutItem
modifier|*
name|widgetItem
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|mousePos
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parentWidget
argument_list|()
operator|->
name|isVisible
argument_list|()
operator|||
name|parentWidget
argument_list|()
operator|->
name|isMinimized
argument_list|()
operator|||
name|pluggingWidget
operator|!=
literal|0
operator|||
name|widgetItem
operator|==
literal|0
condition|)
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
name|QWidget
modifier|*
name|widget
init|=
name|widgetItem
operator|->
name|widget
argument_list|()
decl_stmt|;
name|QPoint
name|pos
init|=
name|parentWidget
argument_list|()
operator|->
name|mapFromGlobal
argument_list|(
name|mousePos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|savedState
operator|.
name|isValid
argument_list|()
condition|)
name|savedState
operator|=
name|layoutState
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|path
init|=
name|savedState
operator|.
name|gapIndex
argument_list|(
name|widget
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bool
name|allowed
init|=
literal|false
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|QDockWidget
modifier|*
name|dw
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|allowed
operator|=
name|dw
operator|->
name|isAreaAllowed
argument_list|(
name|toDockWidgetArea
argument_list|(
name|path
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
if|if
condition|(
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|allowed
operator|=
name|tb
operator|->
name|isAreaAllowed
argument_list|(
name|toToolBarArea
argument_list|(
name|path
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|allowed
condition|)
name|path
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|==
name|currentGapPos
condition|)
return|return
name|currentGapPos
return|;
comment|// the gap is already there
name|currentGapPos
operator|=
name|path
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fixToolBarOrientation
argument_list|(
name|widgetItem
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// 2 = top dock, ie. horizontal
name|restore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
block|}
name|fixToolBarOrientation
argument_list|(
name|widgetItem
argument_list|,
name|currentGapPos
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QMainWindowLayoutState
name|newState
init|=
name|savedState
decl_stmt|;
if|if
condition|(
operator|!
name|newState
operator|.
name|insertGap
argument_list|(
name|path
argument_list|,
name|widgetItem
argument_list|)
condition|)
block|{
name|restore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// not enough space
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
block|}
name|QSize
name|min
init|=
name|newState
operator|.
name|minimumSize
argument_list|()
decl_stmt|;
name|QSize
name|size
init|=
name|newState
operator|.
name|rect
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|min
operator|.
name|width
argument_list|()
operator|>
name|size
operator|.
name|width
argument_list|()
operator|||
name|min
operator|.
name|height
argument_list|()
operator|>
name|size
operator|.
name|height
argument_list|()
condition|)
block|{
name|restore
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
block|}
name|newState
operator|.
name|fitLayout
argument_list|()
expr_stmt|;
name|currentGapRect
operator|=
name|newState
operator|.
name|gapRect
argument_list|(
name|currentGapPos
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
name|parentWidget
argument_list|()
operator|->
name|update
argument_list|(
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|separatorRegion
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|layoutState
operator|=
name|newState
expr_stmt|;
name|applyState
argument_list|(
name|layoutState
argument_list|)
expr_stmt|;
name|updateGapIndicator
argument_list|()
expr_stmt|;
return|return
name|path
return|;
block|}
end_function
begin_function
DECL|function|applyState
name|void
name|QMainWindowLayout
operator|::
name|applyState
parameter_list|(
name|QMainWindowLayoutState
modifier|&
name|newState
parameter_list|,
name|bool
name|animate
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
name|QSet
argument_list|<
name|QTabBar
modifier|*
argument_list|>
name|used
init|=
name|newState
operator|.
name|dockAreaLayout
operator|.
name|usedTabBars
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|QTabBar
modifier|*
argument_list|>
name|retired
init|=
name|usedTabBars
operator|-
name|used
decl_stmt|;
name|usedTabBars
operator|=
name|used
expr_stmt|;
foreach|foreach
control|(
name|QTabBar
modifier|*
name|tab_bar
decl|,
name|retired
control|)
block|{
name|tab_bar
operator|->
name|hide
argument_list|()
expr_stmt|;
while|while
condition|(
name|tab_bar
operator|->
name|count
argument_list|()
operator|>
literal|0
condition|)
name|tab_bar
operator|->
name|removeTab
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|unusedTabBars
operator|.
name|append
argument_list|(
name|tab_bar
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sep
operator|==
literal|1
condition|)
block|{
name|QSet
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|usedSeps
init|=
name|newState
operator|.
name|dockAreaLayout
operator|.
name|usedSeparatorWidgets
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|retiredSeps
init|=
name|usedSeparatorWidgets
operator|-
name|usedSeps
decl_stmt|;
name|usedSeparatorWidgets
operator|=
name|usedSeps
expr_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|sepWidget
decl|,
name|retiredSeps
control|)
block|{
name|unusedSeparatorWidgets
operator|.
name|append
argument_list|(
name|sepWidget
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// QT_NO_TABBAR
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
name|newState
operator|.
name|apply
argument_list|(
name|dockOptions
operator|&
name|QMainWindow
operator|::
name|AnimatedDocks
operator|&&
name|animate
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveState
name|void
name|QMainWindowLayout
operator|::
name|saveState
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|)
specifier|const
block|{
name|layoutState
operator|.
name|saveState
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|restoreState
name|bool
name|QMainWindowLayout
operator|::
name|restoreState
parameter_list|(
name|QDataStream
modifier|&
name|stream
parameter_list|)
block|{
name|savedState
operator|=
name|layoutState
expr_stmt|;
name|layoutState
operator|.
name|clear
argument_list|()
expr_stmt|;
name|layoutState
operator|.
name|rect
operator|=
name|savedState
operator|.
name|rect
expr_stmt|;
if|if
condition|(
operator|!
name|layoutState
operator|.
name|restoreState
argument_list|(
name|stream
argument_list|,
name|savedState
argument_list|)
condition|)
block|{
name|layoutState
operator|.
name|deleteAllLayoutItems
argument_list|()
expr_stmt|;
name|layoutState
operator|=
name|savedState
expr_stmt|;
if|if
condition|(
name|parentWidget
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
name|applyState
argument_list|(
name|layoutState
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// hides tabBars allocated by newState
return|return
literal|false
return|;
block|}
if|if
condition|(
name|parentWidget
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|layoutState
operator|.
name|fitLayout
argument_list|()
expr_stmt|;
name|applyState
argument_list|(
name|layoutState
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|savedState
operator|.
name|deleteAllLayoutItems
argument_list|()
expr_stmt|;
name|savedState
operator|.
name|clear
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|parentWidget
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_TABBAR
foreach|foreach
control|(
name|QTabBar
modifier|*
name|tab_bar
decl|,
name|usedTabBars
control|)
name|tab_bar
operator|->
name|show
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
endif|#
directive|endif
comment|// QT_NO_DOCKWIDGET
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// Returns if this toolbar *should* be using HIToolbar. Won't work for all in between cases
end_comment
begin_comment
comment|// for example, you have a toolbar in the top area and then you suddenly turn on
end_comment
begin_comment
comment|// HIToolbar.
end_comment
begin_function
DECL|function|usesHIToolBar
name|bool
name|QMainWindowLayout
operator|::
name|usesHIToolBar
parameter_list|(
name|QToolBar
modifier|*
name|toolbar
parameter_list|)
specifier|const
block|{
ifndef|#
directive|ifndef
name|Q_DEAD_CODE_FROM_QT4_MAC
name|Q_UNUSED
argument_list|(
name|toolbar
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
else|#
directive|else
return|return
name|qtoolbarsInUnifiedToolbarList
operator|.
name|contains
argument_list|(
name|toolbar
argument_list|)
operator|||
operator|(
operator|(
name|toolBarArea
argument_list|(
name|toolbar
argument_list|)
operator|==
name|Qt
operator|::
name|TopToolBarArea
operator|)
operator|&&
name|layoutState
operator|.
name|mainWindow
operator|->
name|unifiedTitleAndToolBarOnMac
argument_list|()
operator|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|QMainWindowLayout
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|separatorMoveTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
comment|//let's move the separators
name|separatorMoveTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|movingSeparator
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|movingSeparatorOrigin
operator|==
name|movingSeparatorPos
condition|)
return|return;
comment|//when moving the separator, we need to update the previous position
name|parentWidget
argument_list|()
operator|->
name|update
argument_list|(
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|separatorRegion
argument_list|()
argument_list|)
expr_stmt|;
name|layoutState
operator|=
name|savedState
expr_stmt|;
name|layoutState
operator|.
name|dockAreaLayout
operator|.
name|separatorMove
argument_list|(
name|movingSeparator
argument_list|,
name|movingSeparatorOrigin
argument_list|,
name|movingSeparatorPos
argument_list|)
expr_stmt|;
name|movingSeparatorPos
operator|=
name|movingSeparatorOrigin
expr_stmt|;
block|}
endif|#
directive|endif
name|QLayout
operator|::
name|timerEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MAINWINDOW
end_comment
end_unit
