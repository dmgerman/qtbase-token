begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|<private/qdatetimeedit_p.h>
end_include
begin_include
include|#
directive|include
file|<qabstractspinbox.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdatetimeedit.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<private/qlineedit_p.h>
end_include
begin_include
include|#
directive|include
file|<qlocale.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qlayout.h>
end_include
begin_include
include|#
directive|include
file|<qset.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DATETIMEEDIT
end_ifndef
begin_comment
comment|//#define QDATETIMEEDIT_QDTEDEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QDATETIMEEDIT_QDTEDEBUG
end_ifdef
begin_define
DECL|macro|QDTEDEBUG
define|#
directive|define
name|QDTEDEBUG
value|qDebug()<< QString::fromLatin1("%1:%2").arg(__FILE__).arg(__LINE__)
end_define
begin_define
DECL|macro|QDTEDEBUGN
define|#
directive|define
name|QDTEDEBUGN
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|QDTEDEBUG
define|#
directive|define
name|QDTEDEBUG
value|if (false) qDebug()
end_define
begin_define
DECL|macro|QDTEDEBUGN
define|#
directive|define
name|QDTEDEBUGN
value|if (false) qDebug
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|// --- QDateTimeEdit ---
end_comment
begin_comment
comment|/*!   \class QDateTimeEdit   \brief The QDateTimeEdit class provides a widget for editing dates and times.    \ingroup basicwidgets   \inmodule QtWidgets    QDateTimeEdit allows the user to edit dates by using the keyboard or   the arrow keys to increase and decrease date and time values. The   arrow keys can be used to move from section to section within the   QDateTimeEdit box. Dates and times appear in accordance with the   format set; see setDisplayFormat().    \snippet code/src_gui_widgets_qdatetimeedit.cpp 0    Here we've created a new QDateTimeEdit object initialized with   today's date, and restricted the valid date range to today plus or   minus 365 days. We've set the order to month, day, year.    The minimum value for QDateTimeEdit is 14 September 1752,   and 2 January 4713BC for QDate. You can change this by calling   setMinimumDate(), setMaximumDate(),  setMinimumTime(),   and setMaximumTime().    \section1 Using a Pop-up Calendar Widget    QDateTimeEdit can be configured to allow a QCalendarWidget to be used   to select dates. This is enabled by setting the calendarPopup property.   Additionally, you can supply a custom calendar widget for use as the   calendar pop-up by calling the setCalendarWidget() function. The existing   calendar widget can be retrieved with calendarWidget().    \table 100%   \row \li \inlineimage windowsxp-datetimeedit.png Screenshot of a Windows XP style date time editing widget        \li A date time editing widget shown in the \l{Windows XP Style Widget Gallery}{Windows XP widget style}.   \row \li \inlineimage macintosh-datetimeedit.png Screenshot of a Macintosh style date time editing widget        \li A date time editing widget shown in the \l{Macintosh Style Widget Gallery}{Macintosh widget style}.   \row \li \inlineimage plastique-datetimeedit.png Screenshot of a Plastique style date time editing widget        \li A date time editing widget shown in the \l{Plastique Style Widget Gallery}{Plastique widget style}.   \endtable    \sa QDateEdit, QTimeEdit, QDate, QTime */
end_comment
begin_comment
comment|/*!   \enum QDateTimeEdit::Section    \value NoSection   \value AmPmSection   \value MSecSection   \value SecondSection   \value MinuteSection   \value HourSection   \value DaySection   \value MonthSection   \value YearSection   \omitvalue DateSections_Mask   \omitvalue TimeSections_Mask */
end_comment
begin_comment
comment|/*!   \fn void QDateTimeEdit::dateTimeChanged(const QDateTime&datetime)    This signal is emitted whenever the date or time is changed. The   new date and time is passed in \a datetime. */
end_comment
begin_comment
comment|/*!   \fn void QDateTimeEdit::timeChanged(const QTime&time)    This signal is emitted whenever the time is changed. The new time   is passed in \a time. */
end_comment
begin_comment
comment|/*!   \fn void QDateTimeEdit::dateChanged(const QDate&date)    This signal is emitted whenever the date is changed. The new date   is passed in \a date. */
end_comment
begin_comment
comment|/*!   Constructs an empty date time editor with a \a parent. */
end_comment
begin_constructor
DECL|function|QDateTimeEdit
name|QDateTimeEdit
operator|::
name|QDateTimeEdit
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractSpinBox
argument_list|(
operator|*
operator|new
name|QDateTimeEditPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|QDateTime
argument_list|(
name|QDATETIMEEDIT_DATE_INITIAL
argument_list|,
name|QDATETIMEEDIT_TIME_MIN
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   Constructs an empty date time editor with a \a parent. The value   is set to \a datetime. */
end_comment
begin_constructor
DECL|function|QDateTimeEdit
name|QDateTimeEdit
operator|::
name|QDateTimeEdit
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|datetime
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractSpinBox
argument_list|(
operator|*
operator|new
name|QDateTimeEditPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|datetime
operator|.
name|isValid
argument_list|()
condition|?
name|datetime
else|:
name|QDateTime
argument_list|(
name|QDATETIMEEDIT_DATE_INITIAL
argument_list|,
name|QDATETIMEEDIT_TIME_MIN
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   \fn QDateTimeEdit::QDateTimeEdit(const QDate&date, QWidget *parent)    Constructs an empty date time editor with a \a parent.   The value is set to \a date. */
end_comment
begin_constructor
DECL|function|QDateTimeEdit
name|QDateTimeEdit
operator|::
name|QDateTimeEdit
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractSpinBox
argument_list|(
operator|*
operator|new
name|QDateTimeEditPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|date
operator|.
name|isValid
argument_list|()
condition|?
name|date
else|:
name|QDATETIMEEDIT_DATE_INITIAL
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   \fn QDateTimeEdit::QDateTimeEdit(const QTime&time, QWidget *parent)    Constructs an empty date time editor with a \a parent.   The value is set to \a time. */
end_comment
begin_constructor
DECL|function|QDateTimeEdit
name|QDateTimeEdit
operator|::
name|QDateTimeEdit
parameter_list|(
specifier|const
name|QTime
modifier|&
name|time
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractSpinBox
argument_list|(
operator|*
operator|new
name|QDateTimeEditPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|time
operator|.
name|isValid
argument_list|()
condition|?
name|time
else|:
name|QDATETIMEEDIT_TIME_MIN
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   \internal */
end_comment
begin_constructor
DECL|function|QDateTimeEdit
name|QDateTimeEdit
operator|::
name|QDateTimeEdit
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|var
parameter_list|,
name|QVariant
operator|::
name|Type
name|parserType
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractSpinBox
argument_list|(
operator|*
operator|new
name|QDateTimeEditPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|parserType
operator|=
name|parserType
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!   \property QDateTimeEdit::dateTime   \brief the QDateTime that is set in the QDateTimeEdit    When setting this property the timespec of the QDateTimeEdit remains the same   and the timespec of the new QDateTime is ignored.    By default, this property contains a date that refers to January 1,   2000 and a time of 00:00:00 and 0 milliseconds.    \sa date, time */
end_comment
begin_function
DECL|function|dateTime
name|QDateTime
name|QDateTimeEdit
operator|::
name|dateTime
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|value
operator|.
name|toDateTime
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setDateTime
name|void
name|QDateTimeEdit
operator|::
name|setDateTime
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|datetime
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|datetime
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|clearCache
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|sections
operator|&
name|DateSections_Mask
operator|)
condition|)
name|setDateRange
argument_list|(
name|datetime
operator|.
name|date
argument_list|()
argument_list|,
name|datetime
operator|.
name|date
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|setValue
argument_list|(
name|QDateTime
argument_list|(
name|datetime
operator|.
name|date
argument_list|()
argument_list|,
name|datetime
operator|.
name|time
argument_list|()
argument_list|,
name|d
operator|->
name|spec
argument_list|)
argument_list|,
name|EmitIfChanged
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \property QDateTimeEdit::date   \brief the QDate that is set in the widget    By default, this property contains a date that refers to January 1, 2000.    \sa time, dateTime */
end_comment
begin_comment
comment|/*!     Returns the date of the date time edit. */
end_comment
begin_function
DECL|function|date
name|QDate
name|QDateTimeEdit
operator|::
name|date
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|value
operator|.
name|toDate
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setDate
name|void
name|QDateTimeEdit
operator|::
name|setDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|sections
operator|&
name|DateSections_Mask
operator|)
condition|)
name|setDateRange
argument_list|(
name|date
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|d
operator|->
name|clearCache
argument_list|()
expr_stmt|;
name|d
operator|->
name|setValue
argument_list|(
name|QDateTime
argument_list|(
name|date
argument_list|,
name|d
operator|->
name|value
operator|.
name|toTime
argument_list|()
argument_list|,
name|d
operator|->
name|spec
argument_list|)
argument_list|,
name|EmitIfChanged
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateTimeSpec
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \property QDateTimeEdit::time   \brief the QTime that is set in the widget    By default, this property contains a time of 00:00:00 and 0 milliseconds.    \sa date, dateTime */
end_comment
begin_comment
comment|/*!     Returns the time of the date time edit. */
end_comment
begin_function
DECL|function|time
name|QTime
name|QDateTimeEdit
operator|::
name|time
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|value
operator|.
name|toTime
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setTime
name|void
name|QDateTimeEdit
operator|::
name|setTime
parameter_list|(
specifier|const
name|QTime
modifier|&
name|time
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|clearCache
argument_list|()
expr_stmt|;
name|d
operator|->
name|setValue
argument_list|(
name|QDateTime
argument_list|(
name|d
operator|->
name|value
operator|.
name|toDate
argument_list|()
argument_list|,
name|time
argument_list|,
name|d
operator|->
name|spec
argument_list|)
argument_list|,
name|EmitIfChanged
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \property QDateTimeEdit::minimumDateTime   \since 4.4    \brief the minimum datetime of the date time edit    When setting this property the \l maximumDateTime() is adjusted if   necessary to ensure that the range remains valid. If the datetime is   not a valid QDateTime object, this function does nothing.    The default minimumDateTime can be restored with   clearMinimumDateTime()    By default, this property contains a date that refers to September 14,   1752 and a time of 00:00:00 and 0 milliseconds.    \sa maximumDateTime(), minimumTime(), maximumTime(), minimumDate(),   maximumDate(), setDateTimeRange(), setDateRange(), setTimeRange(),   clearMaximumDateTime(), clearMinimumDate(),   clearMaximumDate(), clearMinimumTime(), clearMaximumTime() */
end_comment
begin_function
DECL|function|minimumDateTime
name|QDateTime
name|QDateTimeEdit
operator|::
name|minimumDateTime
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|minimum
operator|.
name|toDateTime
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|clearMinimumDateTime
name|void
name|QDateTimeEdit
operator|::
name|clearMinimumDateTime
parameter_list|()
block|{
name|setMinimumDateTime
argument_list|(
name|QDateTime
argument_list|(
name|QDATETIMEEDIT_COMPAT_DATE_MIN
argument_list|,
name|QDATETIMEEDIT_TIME_MIN
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMinimumDateTime
name|void
name|QDateTimeEdit
operator|::
name|setMinimumDateTime
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|dt
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|dt
operator|.
name|isValid
argument_list|()
operator|&&
name|dt
operator|.
name|date
argument_list|()
operator|>=
name|QDATETIMEEDIT_DATE_MIN
condition|)
block|{
specifier|const
name|QDateTime
name|m
init|=
name|dt
operator|.
name|toTimeSpec
argument_list|(
name|d
operator|->
name|spec
argument_list|)
decl_stmt|;
specifier|const
name|QDateTime
name|max
init|=
name|d
operator|->
name|maximum
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
name|d
operator|->
name|setRange
argument_list|(
name|m
argument_list|,
operator|(
name|max
operator|>
name|m
condition|?
name|max
else|:
name|m
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \property QDateTimeEdit::maximumDateTime   \since 4.4    \brief the maximum datetime of the date time edit    When setting this property the \l minimumDateTime() is adjusted if   necessary to ensure that the range remains valid. If the datetime is   not a valid QDateTime object, this function does nothing.    The default maximumDateTime can be restored with   clearMaximumDateTime().    By default, this property contains a date that refers to 31 December,   7999 and a time of 23:59:59 and 999 milliseconds.    \sa minimumDateTime(), minimumTime(), maximumTime(), minimumDate(),   maximumDate(), setDateTimeRange(), setDateRange(), setTimeRange(),   clearMinimumDateTime(), clearMinimumDate(),   clearMaximumDate(), clearMinimumTime(), clearMaximumTime() */
end_comment
begin_function
DECL|function|maximumDateTime
name|QDateTime
name|QDateTimeEdit
operator|::
name|maximumDateTime
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|maximum
operator|.
name|toDateTime
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|clearMaximumDateTime
name|void
name|QDateTimeEdit
operator|::
name|clearMaximumDateTime
parameter_list|()
block|{
name|setMaximumDateTime
argument_list|(
name|QDATETIMEEDIT_DATETIME_MAX
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMaximumDateTime
name|void
name|QDateTimeEdit
operator|::
name|setMaximumDateTime
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|dt
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|dt
operator|.
name|isValid
argument_list|()
operator|&&
name|dt
operator|.
name|date
argument_list|()
operator|<=
name|QDATETIMEEDIT_DATE_MAX
condition|)
block|{
specifier|const
name|QDateTime
name|m
init|=
name|dt
operator|.
name|toTimeSpec
argument_list|(
name|d
operator|->
name|spec
argument_list|)
decl_stmt|;
specifier|const
name|QDateTime
name|min
init|=
name|d
operator|->
name|minimum
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
name|d
operator|->
name|setRange
argument_list|(
operator|(
name|min
operator|<
name|m
condition|?
name|min
else|:
name|m
operator|)
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   Convenience function to set minimum and maximum date time with one   function call.   \since 4.4    \snippet code/src_gui_widgets_qdatetimeedit.cpp 1    is analogous to:    \snippet code/src_gui_widgets_qdatetimeedit.cpp 2    If either \a min or \a max are not valid, this function does   nothing.    \sa setMinimumDate(), maximumDate(), setMaximumDate(),   clearMinimumDate(), setMinimumTime(), maximumTime(),   setMaximumTime(), clearMinimumTime(), QDateTime::isValid() */
end_comment
begin_function
DECL|function|setDateTimeRange
name|void
name|QDateTimeEdit
operator|::
name|setDateTimeRange
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|min
parameter_list|,
specifier|const
name|QDateTime
modifier|&
name|max
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
specifier|const
name|QDateTime
name|minimum
init|=
name|min
operator|.
name|toTimeSpec
argument_list|(
name|d
operator|->
name|spec
argument_list|)
decl_stmt|;
name|QDateTime
name|maximum
init|=
name|max
operator|.
name|toTimeSpec
argument_list|(
name|d
operator|->
name|spec
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|>
name|max
condition|)
name|maximum
operator|=
name|minimum
expr_stmt|;
name|d
operator|->
name|setRange
argument_list|(
name|minimum
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QDateTimeEdit::minimumDate    \brief the minimum date of the date time edit    When setting this property the \l maximumDate is adjusted if   necessary, to ensure that the range remains valid. If the date is   not a valid QDate object, this function does nothing.    By default, this property contains a date that refers to September 14, 1752.   The minimum date must be at least the first day in year 100, otherwise   setMinimumDate() has no effect.    \sa minimumTime(), maximumTime(), setDateRange() */
end_comment
begin_function
DECL|function|minimumDate
name|QDate
name|QDateTimeEdit
operator|::
name|minimumDate
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|minimum
operator|.
name|toDate
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMinimumDate
name|void
name|QDateTimeEdit
operator|::
name|setMinimumDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|min
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|.
name|isValid
argument_list|()
operator|&&
name|min
operator|>=
name|QDATETIMEEDIT_DATE_MIN
condition|)
block|{
name|setMinimumDateTime
argument_list|(
name|QDateTime
argument_list|(
name|min
argument_list|,
name|d
operator|->
name|minimum
operator|.
name|toTime
argument_list|()
argument_list|,
name|d
operator|->
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|clearMinimumDate
name|void
name|QDateTimeEdit
operator|::
name|clearMinimumDate
parameter_list|()
block|{
name|setMinimumDate
argument_list|(
name|QDATETIMEEDIT_COMPAT_DATE_MIN
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QDateTimeEdit::maximumDate    \brief the maximum date of the date time edit    When setting this property the \l minimumDate is adjusted if   necessary to ensure that the range remains valid. If the date is   not a valid QDate object, this function does nothing.    By default, this property contains a date that refers to December 31, 7999.    \sa minimumDate, minimumTime, maximumTime, setDateRange() */
end_comment
begin_function
DECL|function|maximumDate
name|QDate
name|QDateTimeEdit
operator|::
name|maximumDate
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|maximum
operator|.
name|toDate
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMaximumDate
name|void
name|QDateTimeEdit
operator|::
name|setMaximumDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|max
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|max
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|setMaximumDateTime
argument_list|(
name|QDateTime
argument_list|(
name|max
argument_list|,
name|d
operator|->
name|maximum
operator|.
name|toTime
argument_list|()
argument_list|,
name|d
operator|->
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|clearMaximumDate
name|void
name|QDateTimeEdit
operator|::
name|clearMaximumDate
parameter_list|()
block|{
name|setMaximumDate
argument_list|(
name|QDATETIMEEDIT_DATE_MAX
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QDateTimeEdit::minimumTime    \brief the minimum time of the date time edit    When setting this property the \l maximumTime is adjusted if   necessary, to ensure that the range remains valid. If the time is   not a valid QTime object, this function does nothing.    By default, this property contains a time of 00:00:00 and 0 milliseconds.    \sa maximumTime, minimumDate, maximumDate, setTimeRange() */
end_comment
begin_function
DECL|function|minimumTime
name|QTime
name|QDateTimeEdit
operator|::
name|minimumTime
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|minimum
operator|.
name|toTime
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMinimumTime
name|void
name|QDateTimeEdit
operator|::
name|setMinimumTime
parameter_list|(
specifier|const
name|QTime
modifier|&
name|min
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QDateTime
name|m
argument_list|(
name|d
operator|->
name|minimum
operator|.
name|toDate
argument_list|()
argument_list|,
name|min
argument_list|,
name|d
operator|->
name|spec
argument_list|)
decl_stmt|;
name|setMinimumDateTime
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|clearMinimumTime
name|void
name|QDateTimeEdit
operator|::
name|clearMinimumTime
parameter_list|()
block|{
name|setMinimumTime
argument_list|(
name|QDATETIMEEDIT_TIME_MIN
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QDateTimeEdit::maximumTime    \brief the maximum time of the date time edit    When setting this property, the \l minimumTime is adjusted if   necessary to ensure that the range remains valid. If the time is   not a valid QTime object, this function does nothing.    By default, this property contains a time of 23:59:59 and 999 milliseconds.    \sa minimumTime, minimumDate, maximumDate, setTimeRange() */
end_comment
begin_function
DECL|function|maximumTime
name|QTime
name|QDateTimeEdit
operator|::
name|maximumTime
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|maximum
operator|.
name|toTime
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMaximumTime
name|void
name|QDateTimeEdit
operator|::
name|setMaximumTime
parameter_list|(
specifier|const
name|QTime
modifier|&
name|max
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|max
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QDateTime
name|m
argument_list|(
name|d
operator|->
name|maximum
operator|.
name|toDate
argument_list|()
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|setMaximumDateTime
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|clearMaximumTime
name|void
name|QDateTimeEdit
operator|::
name|clearMaximumTime
parameter_list|()
block|{
name|setMaximumTime
argument_list|(
name|QDATETIMEEDIT_TIME_MAX
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Convenience function to set minimum and maximum date with one   function call.    \snippet code/src_gui_widgets_qdatetimeedit.cpp 3    is analogous to:    \snippet code/src_gui_widgets_qdatetimeedit.cpp 4    If either \a min or \a max are not valid, this function does   nothing.    \sa setMinimumDate(), maximumDate(), setMaximumDate(),   clearMinimumDate(), setMinimumTime(), maximumTime(),   setMaximumTime(), clearMinimumTime(), QDate::isValid() */
end_comment
begin_function
DECL|function|setDateRange
name|void
name|QDateTimeEdit
operator|::
name|setDateRange
parameter_list|(
specifier|const
name|QDate
modifier|&
name|min
parameter_list|,
specifier|const
name|QDate
modifier|&
name|max
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|.
name|isValid
argument_list|()
operator|&&
name|max
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|setDateTimeRange
argument_list|(
name|QDateTime
argument_list|(
name|min
argument_list|,
name|d
operator|->
name|minimum
operator|.
name|toTime
argument_list|()
argument_list|,
name|d
operator|->
name|spec
argument_list|)
argument_list|,
name|QDateTime
argument_list|(
name|max
argument_list|,
name|d
operator|->
name|maximum
operator|.
name|toTime
argument_list|()
argument_list|,
name|d
operator|->
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   Convenience function to set minimum and maximum time with one   function call.    \snippet code/src_gui_widgets_qdatetimeedit.cpp 5    is analogous to:    \snippet code/src_gui_widgets_qdatetimeedit.cpp 6    If either \a min or \a max are not valid, this function does   nothing.    \sa setMinimumDate(), maximumDate(), setMaximumDate(),   clearMinimumDate(), setMinimumTime(), maximumTime(),   setMaximumTime(), clearMinimumTime(), QTime::isValid() */
end_comment
begin_function
DECL|function|setTimeRange
name|void
name|QDateTimeEdit
operator|::
name|setTimeRange
parameter_list|(
specifier|const
name|QTime
modifier|&
name|min
parameter_list|,
specifier|const
name|QTime
modifier|&
name|max
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|.
name|isValid
argument_list|()
operator|&&
name|max
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|setDateTimeRange
argument_list|(
name|QDateTime
argument_list|(
name|d
operator|->
name|minimum
operator|.
name|toDate
argument_list|()
argument_list|,
name|min
argument_list|,
name|d
operator|->
name|spec
argument_list|)
argument_list|,
name|QDateTime
argument_list|(
name|d
operator|->
name|maximum
operator|.
name|toDate
argument_list|()
argument_list|,
name|max
argument_list|,
name|d
operator|->
name|spec
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \property QDateTimeEdit::displayedSections    \brief the currently displayed fields of the date time edit    Returns a bit set of the displayed sections for this format.   \a setDisplayFormat(), displayFormat() */
end_comment
begin_function
DECL|function|displayedSections
name|QDateTimeEdit
operator|::
name|Sections
name|QDateTimeEdit
operator|::
name|displayedSections
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sections
return|;
block|}
end_function
begin_comment
comment|/*!   \property QDateTimeEdit::currentSection    \brief the current section of the spinbox   \a setCurrentSection() */
end_comment
begin_function
DECL|function|currentSection
name|QDateTimeEdit
operator|::
name|Section
name|QDateTimeEdit
operator|::
name|currentSection
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
name|d
operator|->
name|focusOnButton
condition|)
return|return
name|NoSection
return|;
endif|#
directive|endif
return|return
name|d
operator|->
name|convertToPublic
argument_list|(
name|d
operator|->
name|sectionType
argument_list|(
name|d
operator|->
name|currentSectionIndex
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setCurrentSection
name|void
name|QDateTimeEdit
operator|::
name|setCurrentSection
parameter_list|(
name|Section
name|section
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|==
name|NoSection
operator|||
operator|!
operator|(
name|section
operator|&
name|d
operator|->
name|sections
operator|)
condition|)
return|return;
name|d
operator|->
name|updateCache
argument_list|(
name|d
operator|->
name|value
argument_list|,
name|d
operator|->
name|displayText
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|size
init|=
name|d
operator|->
name|sectionNodes
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|d
operator|->
name|currentSectionIndex
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
while|while
condition|(
name|index
operator|<
name|size
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|convertToPublic
argument_list|(
name|d
operator|->
name|sectionType
argument_list|(
name|index
argument_list|)
argument_list|)
operator|==
name|section
condition|)
block|{
name|d
operator|->
name|edit
operator|->
name|setCursorPosition
argument_list|(
name|d
operator|->
name|sectionPos
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|QDTEDEBUG
operator|<<
name|d
operator|->
name|sectionPos
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return;
block|}
operator|++
name|index
expr_stmt|;
block|}
name|index
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \since 4.3    Returns the Section at \a index.    If the format is 'yyyy/MM/dd', sectionAt(0) returns YearSection,   sectionAt(1) returns MonthSection, and sectionAt(2) returns   YearSection, */
end_comment
begin_function
DECL|function|sectionAt
name|QDateTimeEdit
operator|::
name|Section
name|QDateTimeEdit
operator|::
name|sectionAt
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|d
operator|->
name|sectionNodes
operator|.
name|size
argument_list|()
condition|)
return|return
name|NoSection
return|;
return|return
name|d
operator|->
name|convertToPublic
argument_list|(
name|d
operator|->
name|sectionType
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.3    \property QDateTimeEdit::sectionCount    \brief the number of sections displayed.   If the format is 'yyyy/yy/yyyy', sectionCount returns 3 */
end_comment
begin_function
DECL|function|sectionCount
name|int
name|QDateTimeEdit
operator|::
name|sectionCount
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|sectionNodes
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.3    \property QDateTimeEdit::currentSectionIndex    \brief the current section index of the spinbox    If the format is 'yyyy/MM/dd', the displayText is '2001/05/21' and   the cursorPosition is 5 currentSectionIndex returns 1. If the   cursorPosition is 3 currentSectionIndex is 0 etc.    \a setCurrentSection()   \sa currentSection() */
end_comment
begin_function
DECL|function|currentSectionIndex
name|int
name|QDateTimeEdit
operator|::
name|currentSectionIndex
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|currentSectionIndex
return|;
block|}
end_function
begin_function
DECL|function|setCurrentSectionIndex
name|void
name|QDateTimeEdit
operator|::
name|setCurrentSectionIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|d
operator|->
name|sectionNodes
operator|.
name|size
argument_list|()
condition|)
return|return;
name|d
operator|->
name|edit
operator|->
name|setCursorPosition
argument_list|(
name|d
operator|->
name|sectionPos
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.4    \brief Returns the calendar widget for the editor if calendarPopup is   set to true and (sections()& DateSections_Mask) != 0.    This function creates and returns a calendar widget if none has been set. */
end_comment
begin_function
DECL|function|calendarWidget
name|QCalendarWidget
modifier|*
name|QDateTimeEdit
operator|::
name|calendarWidget
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|calendarPopup
operator|||
operator|!
operator|(
name|d
operator|->
name|sections
operator|&
name|QDateTimeParser
operator|::
name|DateSectionMask
operator|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|monthCalendar
condition|)
block|{
cast|const_cast
argument_list|<
name|QDateTimeEditPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|initCalendarPopup
argument_list|()
expr_stmt|;
block|}
return|return
name|d
operator|->
name|monthCalendar
operator|->
name|calendarWidget
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.4    Sets the given \a calendarWidget as the widget to be used for the calendar   pop-up. The editor does not automatically take ownership of the calendar widget.    \note calendarPopup must be set to true before setting the calendar widget.   \sa calendarPopup */
end_comment
begin_function
DECL|function|setCalendarWidget
name|void
name|QDateTimeEdit
operator|::
name|setCalendarWidget
parameter_list|(
name|QCalendarWidget
modifier|*
name|calendarWidget
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|calendarWidget
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDateTimeEdit::setCalendarWidget: Cannot set a null calendar widget"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|calendarPopup
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDateTimeEdit::setCalendarWidget: calendarPopup is set to false"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|display
operator|&
name|QDateTimeParser
operator|::
name|DateSectionMask
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDateTimeEdit::setCalendarWidget: no date sections specified"
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|initCalendarPopup
argument_list|(
name|calendarWidget
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \since 4.2    Selects \a section. If \a section doesn't exist in the currently   displayed sections this function does nothing. If \a section is   NoSection this function will unselect all text in the editor.   Otherwise this function will move the cursor and the current section   to the selected section.    \sa currentSection() */
end_comment
begin_function
DECL|function|setSelectedSection
name|void
name|QDateTimeEdit
operator|::
name|setSelectedSection
parameter_list|(
name|Section
name|section
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|==
name|NoSection
condition|)
block|{
name|d
operator|->
name|edit
operator|->
name|setSelection
argument_list|(
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|section
operator|&
name|d
operator|->
name|sections
condition|)
block|{
if|if
condition|(
name|currentSection
argument_list|()
operator|!=
name|section
condition|)
name|setCurrentSection
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|d
operator|->
name|setSelected
argument_list|(
name|d
operator|->
name|currentSectionIndex
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \fn QString QDateTimeEdit::sectionText(Section section) const    Returns the text from the given \a section.    \sa currentSection() */
end_comment
begin_function
DECL|function|sectionText
name|QString
name|QDateTimeEdit
operator|::
name|sectionText
parameter_list|(
name|Section
name|section
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|==
name|QDateTimeEdit
operator|::
name|NoSection
operator|||
operator|!
operator|(
name|section
operator|&
name|d
operator|->
name|sections
operator|)
condition|)
block|{
return|return
name|QString
argument_list|()
return|;
block|}
name|d
operator|->
name|updateCache
argument_list|(
name|d
operator|->
name|value
argument_list|,
name|d
operator|->
name|displayText
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|sectionIndex
init|=
name|d
operator|->
name|absoluteIndex
argument_list|(
name|section
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|d
operator|->
name|sectionText
argument_list|(
name|sectionIndex
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \property QDateTimeEdit::displayFormat    \brief the format used to display the time/date of the date time edit    This format is the same as the one used described in QDateTime::toString()   and QDateTime::fromString()    Example format strings (assuming that the date is 2nd of July 1969):    \table   \header \li Format \li Result   \row \li dd.MM.yyyy \li 02.07.1969   \row \li MMM d yy \li Jul 2 69   \row \li MMMM d yy \li July 2 69   \endtable    Note that if you specify a two digit year, it will be interpreted   to be in the century in which the date time edit was initialized.   The default century is the 21 (2000-2099).    If you specify an invalid format the format will not be set.    \sa QDateTime::toString(), displayedSections() */
end_comment
begin_function
DECL|function|displayFormat
name|QString
name|QDateTimeEdit
operator|::
name|displayFormat
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|isRightToLeft
argument_list|()
condition|?
name|d
operator|->
name|unreversedFormat
else|:
name|d
operator|->
name|displayFormat
return|;
block|}
end_function
begin_function
DECL|function|reverse
template|template
parameter_list|<
name|typename
name|C
parameter_list|>
specifier|static
specifier|inline
name|C
name|reverse
parameter_list|(
specifier|const
name|C
modifier|&
name|l
parameter_list|)
block|{
name|C
name|ret
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|l
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
name|ret
operator|.
name|append
argument_list|(
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|setDisplayFormat
name|void
name|QDateTimeEdit
operator|::
name|setDisplayFormat
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|parseFormat
argument_list|(
name|format
argument_list|)
condition|)
block|{
name|d
operator|->
name|unreversedFormat
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
name|d
operator|->
name|unreversedFormat
operator|=
name|format
expr_stmt|;
name|d
operator|->
name|displayFormat
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|d
operator|->
name|sectionNodes
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|d
operator|->
name|displayFormat
operator|+=
name|d
operator|->
name|separators
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|d
operator|->
name|displayFormat
operator|+=
name|d
operator|->
name|sectionFormat
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|displayFormat
operator|+=
name|d
operator|->
name|separators
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|separators
operator|=
name|reverse
argument_list|(
name|d
operator|->
name|separators
argument_list|)
expr_stmt|;
name|d
operator|->
name|sectionNodes
operator|=
name|reverse
argument_list|(
name|d
operator|->
name|sectionNodes
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|formatExplicitlySet
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|sections
operator|=
name|d
operator|->
name|convertSections
argument_list|(
name|d
operator|->
name|display
argument_list|)
expr_stmt|;
name|d
operator|->
name|clearCache
argument_list|()
expr_stmt|;
name|d
operator|->
name|currentSectionIndex
operator|=
name|qMin
argument_list|(
name|d
operator|->
name|currentSectionIndex
argument_list|,
name|d
operator|->
name|sectionNodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|timeShown
init|=
operator|(
name|d
operator|->
name|sections
operator|&
name|TimeSections_Mask
operator|)
decl_stmt|;
specifier|const
name|bool
name|dateShown
init|=
operator|(
name|d
operator|->
name|sections
operator|&
name|DateSections_Mask
operator|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|dateShown
operator|||
name|timeShown
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeShown
operator|&&
operator|!
name|dateShown
condition|)
block|{
name|QTime
name|time
init|=
name|d
operator|->
name|value
operator|.
name|toTime
argument_list|()
decl_stmt|;
name|setDateRange
argument_list|(
name|d
operator|->
name|value
operator|.
name|toDate
argument_list|()
argument_list|,
name|d
operator|->
name|value
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|minimum
operator|.
name|toTime
argument_list|()
operator|>=
name|d
operator|->
name|maximum
operator|.
name|toTime
argument_list|()
condition|)
block|{
name|setTimeRange
argument_list|(
name|QDATETIMEEDIT_TIME_MIN
argument_list|,
name|QDATETIMEEDIT_TIME_MAX
argument_list|)
expr_stmt|;
comment|// if the time range became invalid during the adjustment, the time would have been reset
name|setTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|dateShown
operator|&&
operator|!
name|timeShown
condition|)
block|{
name|setTimeRange
argument_list|(
name|QDATETIMEEDIT_TIME_MIN
argument_list|,
name|QDATETIMEEDIT_TIME_MAX
argument_list|)
expr_stmt|;
name|d
operator|->
name|value
operator|=
name|QDateTime
argument_list|(
name|d
operator|->
name|value
operator|.
name|toDate
argument_list|()
argument_list|,
name|QTime
argument_list|()
argument_list|,
name|d
operator|->
name|spec
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|updateEdit
argument_list|()
expr_stmt|;
name|d
operator|->
name|_q_editorCursorPositionChanged
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QDateTimeEdit::calendarPopup     \brief the current calendar pop-up showing mode.     \since 4.2      The calendar pop-up will be shown upon clicking the arrow button.     This property is valid only if there is a valid date display format.      \sa setDisplayFormat() */
end_comment
begin_function
DECL|function|calendarPopup
name|bool
name|QDateTimeEdit
operator|::
name|calendarPopup
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|calendarPopup
return|;
block|}
end_function
begin_function
DECL|function|setCalendarPopup
name|void
name|QDateTimeEdit
operator|::
name|setCalendarPopup
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|enable
operator|==
name|d
operator|->
name|calendarPopup
condition|)
return|return;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_MacShowFocusRect
argument_list|,
operator|!
name|enable
argument_list|)
expr_stmt|;
name|d
operator|->
name|calendarPopup
operator|=
name|enable
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
operator|!
name|enable
condition|)
name|d
operator|->
name|focusOnButton
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|updateEditFieldGeometry
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QDateTimeEdit::timeSpec     \brief the current timespec used by the date time edit.     \since 4.4 */
end_comment
begin_function
DECL|function|timeSpec
name|Qt
operator|::
name|TimeSpec
name|QDateTimeEdit
operator|::
name|timeSpec
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|spec
return|;
block|}
end_function
begin_function
DECL|function|setTimeSpec
name|void
name|QDateTimeEdit
operator|::
name|setTimeSpec
parameter_list|(
name|Qt
operator|::
name|TimeSpec
name|spec
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|spec
operator|!=
name|d
operator|->
name|spec
condition|)
block|{
name|d
operator|->
name|spec
operator|=
name|spec
expr_stmt|;
name|d
operator|->
name|updateTimeSpec
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QDateTimeEdit
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cachedSizeHint
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ensurePolished
argument_list|()
expr_stmt|;
specifier|const
name|QFontMetrics
name|fm
argument_list|(
name|fontMetrics
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|d
operator|->
name|edit
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|w
init|=
literal|0
decl_stmt|;
name|QString
name|s
decl_stmt|;
name|s
operator|=
name|d
operator|->
name|textFromValue
argument_list|(
name|d
operator|->
name|minimum
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"   "
argument_list|)
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|<
name|int
argument_list|>
argument_list|(
name|w
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|d
operator|->
name|textFromValue
argument_list|(
name|d
operator|->
name|maximum
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"   "
argument_list|)
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|<
name|int
argument_list|>
argument_list|(
name|w
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|specialValueText
operator|.
name|size
argument_list|()
condition|)
block|{
name|s
operator|=
name|d
operator|->
name|specialValueText
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|<
name|int
argument_list|>
argument_list|(
name|w
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|w
operator|+=
literal|2
expr_stmt|;
comment|// cursor blinking space
name|QSize
name|hint
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
name|d
operator|->
name|calendarPopupEnabled
argument_list|()
condition|)
block|{
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_ComboBox
argument_list|,
operator|&
name|opt
argument_list|,
name|hint
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
else|#
directive|else
block|{
endif|#
directive|endif
name|QSize
name|extra
argument_list|(
literal|35
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|QStyleOptionSpinBox
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|rect
operator|.
name|setSize
argument_list|(
name|hint
operator|+
name|extra
argument_list|)
expr_stmt|;
name|extra
operator|+=
name|hint
operator|-
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_SpinBox
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_SpinBoxEditField
argument_list|,
name|this
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// get closer to final result by repeating the calculation
name|opt
operator|.
name|rect
operator|.
name|setSize
argument_list|(
name|hint
operator|+
name|extra
argument_list|)
expr_stmt|;
name|extra
operator|+=
name|hint
operator|-
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_SpinBox
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_SpinBoxEditField
argument_list|,
name|this
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|hint
operator|+=
name|extra
expr_stmt|;
name|opt
operator|.
name|rect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_SpinBox
argument_list|,
operator|&
name|opt
argument_list|,
name|hint
argument_list|,
name|this
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|cachedMinimumSizeHint
operator|=
name|d
operator|->
name|cachedSizeHint
expr_stmt|;
comment|// essentially make minimumSizeHint return the same as sizeHint for datetimeedits
block|}
return|return
name|d
operator|->
name|cachedSizeHint
return|;
block|}
comment|/*!   \reimp */
DECL|function|event
name|bool
name|QDateTimeEdit
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|ApplicationLayoutDirectionChange
case|:
block|{
specifier|const
name|bool
name|was
init|=
name|d
operator|->
name|formatExplicitlySet
decl_stmt|;
specifier|const
name|QString
name|oldFormat
init|=
name|d
operator|->
name|displayFormat
decl_stmt|;
name|d
operator|->
name|displayFormat
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setDisplayFormat
argument_list|(
name|oldFormat
argument_list|)
expr_stmt|;
name|d
operator|->
name|formatExplicitlySet
operator|=
name|was
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|LocaleChange
case|:
name|d
operator|->
name|updateEdit
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|StyleChange
case|:
ifdef|#
directive|ifdef
name|Q_WS_MAC
case|case
name|QEvent
operator|::
name|MacSizeChange
case|:
endif|#
directive|endif
name|d
operator|->
name|setLayoutItemMargins
argument_list|(
name|QStyle
operator|::
name|SE_DateTimeEditLayoutItem
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|QAbstractSpinBox
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
comment|/*!   \reimp */
DECL|function|clear
name|void
name|QDateTimeEdit
operator|::
name|clear
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|clearSection
argument_list|(
name|d
operator|->
name|currentSectionIndex
argument_list|)
expr_stmt|;
block|}
comment|/*!   \reimp */
DECL|function|keyPressEvent
name|void
name|QDateTimeEdit
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|int
name|oldCurrent
init|=
name|d
operator|->
name|currentSectionIndex
decl_stmt|;
name|bool
name|select
init|=
literal|true
decl_stmt|;
name|bool
name|inserted
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|key
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
case|case
name|Qt
operator|::
name|Key_NumberSign
case|:
comment|//shortcut to popup calendar
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
name|d
operator|->
name|calendarPopupEnabled
argument_list|()
condition|)
block|{
name|d
operator|->
name|initCalendarPopup
argument_list|()
expr_stmt|;
name|d
operator|->
name|positionCalendarPopup
argument_list|()
expr_stmt|;
name|d
operator|->
name|monthCalendar
operator|->
name|show
argument_list|()
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|Qt
operator|::
name|Key_Select
case|:
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasEditFocus
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|focusOnButton
condition|)
block|{
name|d
operator|->
name|initCalendarPopup
argument_list|()
expr_stmt|;
name|d
operator|->
name|positionCalendarPopup
argument_list|()
expr_stmt|;
name|d
operator|->
name|monthCalendar
operator|->
name|show
argument_list|()
expr_stmt|;
name|d
operator|->
name|focusOnButton
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|setEditFocus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|selectAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//hide cursor
name|d
operator|->
name|edit
operator|->
name|d_func
argument_list|()
operator|->
name|setCursorVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|edit
operator|->
name|d_func
argument_list|()
operator|->
name|control
operator|->
name|setCursorBlinkPeriod
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|setSelected
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
endif|#
directive|endif
case|case
name|Qt
operator|::
name|Key_Enter
case|:
case|case
name|Qt
operator|::
name|Key_Return
case|:
name|d
operator|->
name|interpret
argument_list|(
name|AlwaysEmit
argument_list|)
expr_stmt|;
name|d
operator|->
name|setSelected
argument_list|(
name|d
operator|->
name|currentSectionIndex
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
emit|emit
name|editingFinished
argument_list|()
emit|;
return|return;
default|default:
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|!
name|hasEditFocus
argument_list|()
operator|&&
operator|!
name|event
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|event
operator|->
name|text
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|isLetterOrNumber
argument_list|()
condition|)
block|{
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//hide cursor
name|d
operator|->
name|edit
operator|->
name|d_func
argument_list|()
operator|->
name|setCursorVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|edit
operator|->
name|d_func
argument_list|()
operator|->
name|control
operator|->
name|setCursorBlinkPeriod
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|setSelected
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|oldCurrent
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|d
operator|->
name|isSeparatorKey
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|inserted
operator|=
name|select
operator|=
operator|!
name|event
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|event
operator|->
name|text
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|isPrint
argument_list|()
operator|&&
operator|!
operator|(
name|event
operator|->
name|modifiers
argument_list|()
operator|&
operator|~
operator|(
name|Qt
operator|::
name|ShiftModifier
operator||
name|Qt
operator|::
name|KeypadModifier
operator|)
operator|)
expr_stmt|;
break|break;
block|}
case|case
name|Qt
operator|::
name|Key_Left
case|:
case|case
name|Qt
operator|::
name|Key_Right
case|:
if|if
condition|(
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Left
operator|||
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Right
condition|)
block|{
if|if
condition|(
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|!
name|hasEditFocus
argument_list|()
operator|||
operator|!
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
endif|#
directive|endif
operator|!
operator|(
name|event
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ControlModifier
operator|)
condition|)
block|{
name|select
operator|=
literal|false
expr_stmt|;
break|break;
block|}
ifdef|#
directive|ifdef
name|Q_WS_MAC
elseif|else
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
operator|!
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
endif|#
directive|endif
block|{
name|select
operator|=
operator|(
name|event
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ShiftModifier
operator|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
block|}
comment|// else fall through
case|case
name|Qt
operator|::
name|Key_Backtab
case|:
case|case
name|Qt
operator|::
name|Key_Tab
case|:
block|{
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|specialValue
argument_list|()
condition|)
block|{
name|d
operator|->
name|edit
operator|->
name|setSelection
argument_list|(
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|bool
name|forward
init|=
name|event
operator|->
name|key
argument_list|()
operator|!=
name|Qt
operator|::
name|Key_Left
operator|&&
name|event
operator|->
name|key
argument_list|()
operator|!=
name|Qt
operator|::
name|Key_Backtab
operator|&&
operator|(
name|event
operator|->
name|key
argument_list|()
operator|!=
name|Qt
operator|::
name|Key_Tab
operator|||
operator|!
operator|(
name|event
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ShiftModifier
operator|)
operator|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
name|int
name|newSection
init|=
name|d
operator|->
name|nextPrevSection
argument_list|(
name|d
operator|->
name|currentSectionIndex
argument_list|,
name|forward
argument_list|)
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|focusOnButton
condition|)
block|{
name|newSection
operator|=
name|forward
condition|?
literal|0
else|:
name|d
operator|->
name|sectionNodes
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
name|d
operator|->
name|focusOnButton
operator|=
literal|false
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newSection
operator|<
literal|0
operator|&&
name|select
operator|&&
name|d
operator|->
name|calendarPopupEnabled
argument_list|()
condition|)
block|{
name|setSelectedSection
argument_list|(
name|NoSection
argument_list|)
expr_stmt|;
name|d
operator|->
name|focusOnButton
operator|=
literal|true
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
comment|// only allow date/time sections to be selected.
if|if
condition|(
name|newSection
operator|&
operator|~
operator|(
name|QDateTimeParser
operator|::
name|TimeSectionMask
operator||
name|QDateTimeParser
operator|::
name|DateSectionMask
operator|)
condition|)
return|return;
endif|#
directive|endif
comment|//key tab and backtab will be managed thrgout QWidget::event
if|if
condition|(
name|event
operator|->
name|key
argument_list|()
operator|!=
name|Qt
operator|::
name|Key_Backtab
operator|&&
name|event
operator|->
name|key
argument_list|()
operator|!=
name|Qt
operator|::
name|Key_Tab
condition|)
name|focusNextPrevChild
argument_list|(
name|forward
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|QAbstractSpinBox
operator|::
name|keyPressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|select
operator|&&
operator|!
name|d
operator|->
name|edit
operator|->
name|hasSelectedText
argument_list|()
condition|)
block|{
if|if
condition|(
name|inserted
operator|&&
name|d
operator|->
name|sectionAt
argument_list|(
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
argument_list|)
operator|==
name|QDateTimeParser
operator|::
name|NoSectionIndex
condition|)
block|{
name|QString
name|str
init|=
name|d
operator|->
name|displayText
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|validate
argument_list|(
name|str
argument_list|,
name|pos
argument_list|)
operator|==
name|QValidator
operator|::
name|Acceptable
operator|&&
operator|(
name|d
operator|->
name|sectionNodes
operator|.
name|at
argument_list|(
name|oldCurrent
argument_list|)
operator|.
name|count
operator|!=
literal|1
operator|||
name|d
operator|->
name|sectionMaxSize
argument_list|(
name|oldCurrent
argument_list|)
operator|==
name|d
operator|->
name|sectionSize
argument_list|(
name|oldCurrent
argument_list|)
operator|||
name|d
operator|->
name|skipToNextSection
argument_list|(
name|oldCurrent
argument_list|,
name|d
operator|->
name|value
operator|.
name|toDateTime
argument_list|()
argument_list|,
name|d
operator|->
name|sectionText
argument_list|(
name|oldCurrent
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|QDTEDEBUG
operator|<<
literal|"Setting currentsection to"
operator|<<
name|d
operator|->
name|closestSection
argument_list|(
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|<<
name|event
operator|->
name|key
argument_list|()
operator|<<
name|oldCurrent
operator|<<
name|str
expr_stmt|;
specifier|const
name|int
name|tmp
init|=
name|d
operator|->
name|closestSection
argument_list|(
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|>=
literal|0
condition|)
name|d
operator|->
name|currentSectionIndex
operator|=
name|tmp
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|currentSectionIndex
operator|!=
name|oldCurrent
condition|)
block|{
name|d
operator|->
name|setSelected
argument_list|(
name|d
operator|->
name|currentSectionIndex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|specialValue
argument_list|()
condition|)
block|{
name|d
operator|->
name|edit
operator|->
name|setSelection
argument_list|(
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*!   \reimp */
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
DECL|function|wheelEvent
name|void
name|QDateTimeEdit
operator|::
name|wheelEvent
parameter_list|(
name|QWheelEvent
modifier|*
name|event
parameter_list|)
block|{
name|QAbstractSpinBox
operator|::
name|wheelEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|/*!   \reimp */
DECL|function|focusInEvent
name|void
name|QDateTimeEdit
operator|::
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|QAbstractSpinBox
operator|::
name|focusInEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|QString
modifier|*
name|frm
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|oldPos
init|=
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|formatExplicitlySet
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|displayFormat
operator|==
name|d
operator|->
name|defaultTimeFormat
condition|)
block|{
name|frm
operator|=
operator|&
name|d
operator|->
name|defaultTimeFormat
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|displayFormat
operator|==
name|d
operator|->
name|defaultDateFormat
condition|)
block|{
name|frm
operator|=
operator|&
name|d
operator|->
name|defaultDateFormat
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|displayFormat
operator|==
name|d
operator|->
name|defaultDateTimeFormat
condition|)
block|{
name|frm
operator|=
operator|&
name|d
operator|->
name|defaultDateTimeFormat
expr_stmt|;
block|}
if|if
condition|(
name|frm
condition|)
block|{
name|d
operator|->
name|readLocaleSettings
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|displayFormat
operator|!=
operator|*
name|frm
condition|)
block|{
name|setDisplayFormat
argument_list|(
operator|*
name|frm
argument_list|)
expr_stmt|;
name|d
operator|->
name|formatExplicitlySet
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|edit
operator|->
name|setCursorPosition
argument_list|(
name|oldPos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|const
name|bool
name|oldHasHadFocus
init|=
name|d
operator|->
name|hasHadFocus
decl_stmt|;
name|d
operator|->
name|hasHadFocus
operator|=
literal|true
expr_stmt|;
name|bool
name|first
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|reason
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|BacktabFocusReason
case|:
name|first
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|MouseFocusReason
case|:
case|case
name|Qt
operator|::
name|PopupFocusReason
case|:
return|return;
case|case
name|Qt
operator|::
name|ActiveWindowFocusReason
case|:
if|if
condition|(
name|oldHasHadFocus
condition|)
return|return;
case|case
name|Qt
operator|::
name|ShortcutFocusReason
case|:
case|case
name|Qt
operator|::
name|TabFocusReason
case|:
default|default:
break|break;
block|}
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
name|first
operator|=
operator|!
name|first
expr_stmt|;
name|d
operator|->
name|updateEdit
argument_list|()
expr_stmt|;
comment|// needed to make it update specialValueText
name|d
operator|->
name|setSelected
argument_list|(
name|first
condition|?
literal|0
else|:
name|d
operator|->
name|sectionNodes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/*!   \reimp */
DECL|function|focusNextPrevChild
name|bool
name|QDateTimeEdit
operator|::
name|focusNextPrevChild
parameter_list|(
name|bool
name|next
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
specifier|const
name|int
name|newSection
init|=
name|d
operator|->
name|nextPrevSection
argument_list|(
name|d
operator|->
name|currentSectionIndex
argument_list|,
name|next
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|sectionType
argument_list|(
name|newSection
argument_list|)
condition|)
block|{
case|case
name|QDateTimeParser
operator|::
name|NoSection
case|:
case|case
name|QDateTimeParser
operator|::
name|FirstSection
case|:
case|case
name|QDateTimeParser
operator|::
name|LastSection
case|:
return|return
name|QAbstractSpinBox
operator|::
name|focusNextPrevChild
argument_list|(
name|next
argument_list|)
return|;
default|default:
name|d
operator|->
name|edit
operator|->
name|deselect
argument_list|()
expr_stmt|;
name|d
operator|->
name|edit
operator|->
name|setCursorPosition
argument_list|(
name|d
operator|->
name|sectionPos
argument_list|(
name|newSection
argument_list|)
argument_list|)
expr_stmt|;
name|QDTEDEBUG
operator|<<
name|d
operator|->
name|sectionPos
argument_list|(
name|newSection
argument_list|)
expr_stmt|;
name|d
operator|->
name|setSelected
argument_list|(
name|newSection
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/*!   \reimp */
DECL|function|stepBy
name|void
name|QDateTimeEdit
operator|::
name|stepBy
parameter_list|(
name|int
name|steps
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
comment|// with keypad navigation and not editFocus, left right change the date/time by a fixed amount.
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|!
name|hasEditFocus
argument_list|()
condition|)
block|{
comment|// if date based, shift by day.  else shift by 15min
if|if
condition|(
name|d
operator|->
name|sections
operator|&
name|DateSections_Mask
condition|)
block|{
name|setDateTime
argument_list|(
name|dateTime
argument_list|()
operator|.
name|addDays
argument_list|(
name|steps
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|minutes
init|=
name|time
argument_list|()
operator|.
name|hour
argument_list|()
operator|*
literal|60
operator|+
name|time
argument_list|()
operator|.
name|minute
argument_list|()
decl_stmt|;
name|int
name|blocks
init|=
name|minutes
operator|/
literal|15
decl_stmt|;
name|blocks
operator|+=
name|steps
expr_stmt|;
comment|/* rounding involved */
if|if
condition|(
name|minutes
operator|%
literal|15
condition|)
block|{
if|if
condition|(
name|steps
operator|<
literal|0
condition|)
block|{
name|blocks
operator|+=
literal|1
expr_stmt|;
comment|// do one less step;
block|}
block|}
name|minutes
operator|=
name|blocks
operator|*
literal|15
expr_stmt|;
comment|/* need to take wrapping into account */
if|if
condition|(
operator|!
name|d
operator|->
name|wrapping
condition|)
block|{
name|int
name|max_minutes
init|=
name|d
operator|->
name|maximum
operator|.
name|toTime
argument_list|()
operator|.
name|hour
argument_list|()
operator|*
literal|60
operator|+
name|d
operator|->
name|maximum
operator|.
name|toTime
argument_list|()
operator|.
name|minute
argument_list|()
decl_stmt|;
name|int
name|min_minutes
init|=
name|d
operator|->
name|minimum
operator|.
name|toTime
argument_list|()
operator|.
name|hour
argument_list|()
operator|*
literal|60
operator|+
name|d
operator|->
name|minimum
operator|.
name|toTime
argument_list|()
operator|.
name|minute
argument_list|()
decl_stmt|;
if|if
condition|(
name|minutes
operator|>=
name|max_minutes
condition|)
block|{
name|setTime
argument_list|(
name|maximumTime
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|minutes
operator|<=
name|min_minutes
condition|)
block|{
name|setTime
argument_list|(
name|minimumTime
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|setTime
argument_list|(
name|QTime
argument_list|(
name|minutes
operator|/
literal|60
argument_list|,
name|minutes
operator|%
literal|60
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
endif|#
directive|endif
comment|// don't optimize away steps == 0. This is the only way to select
comment|// the currentSection in Qt 4.1.x
if|if
condition|(
name|d
operator|->
name|specialValue
argument_list|()
operator|&&
name|displayedSections
argument_list|()
operator|!=
name|AmPmSection
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|sectionNodes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|sectionType
argument_list|(
name|i
argument_list|)
operator|!=
name|QDateTimeParser
operator|::
name|AmPmSection
condition|)
block|{
name|d
operator|->
name|currentSectionIndex
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
block|}
name|d
operator|->
name|setValue
argument_list|(
name|d
operator|->
name|stepBy
argument_list|(
name|d
operator|->
name|currentSectionIndex
argument_list|,
name|steps
argument_list|,
literal|false
argument_list|)
argument_list|,
name|EmitIfChanged
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateCache
argument_list|(
name|d
operator|->
name|value
argument_list|,
name|d
operator|->
name|displayText
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|setSelected
argument_list|(
name|d
operator|->
name|currentSectionIndex
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateTimeSpec
argument_list|()
expr_stmt|;
block|}
comment|/*!   This virtual function is used by the date time edit whenever it   needs to display \a dateTime.    If you reimplement this, you may also need to reimplement validate().    \sa dateTimeFromText(), validate() */
DECL|function|textFromDateTime
name|QString
name|QDateTimeEdit
operator|::
name|textFromDateTime
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|dateTime
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|locale
argument_list|()
operator|.
name|toString
argument_list|(
name|dateTime
argument_list|,
name|d
operator|->
name|displayFormat
argument_list|)
return|;
block|}
comment|/*!   Returns an appropriate datetime for the given \a text.    This virtual function is used by the datetime edit whenever it   needs to interpret text entered by the user as a value.    \sa textFromDateTime(), validate() */
DECL|function|dateTimeFromText
name|QDateTime
name|QDateTimeEdit
operator|::
name|dateTimeFromText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|QString
name|copy
init|=
name|text
decl_stmt|;
name|int
name|pos
init|=
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
name|QValidator
operator|::
name|State
name|state
init|=
name|QValidator
operator|::
name|Acceptable
decl_stmt|;
return|return
name|d
operator|->
name|validateAndInterpret
argument_list|(
name|copy
argument_list|,
name|pos
argument_list|,
name|state
argument_list|)
return|;
block|}
comment|/*!   \reimp */
DECL|function|validate
name|QValidator
operator|::
name|State
name|QDateTimeEdit
operator|::
name|validate
parameter_list|(
name|QString
modifier|&
name|text
parameter_list|,
name|int
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|QValidator
operator|::
name|State
name|state
decl_stmt|;
name|d
operator|->
name|validateAndInterpret
argument_list|(
name|text
argument_list|,
name|pos
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
comment|/*!   \reimp */
DECL|function|fixup
name|void
name|QDateTimeEdit
operator|::
name|fixup
parameter_list|(
name|QString
modifier|&
name|input
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|QValidator
operator|::
name|State
name|state
decl_stmt|;
name|int
name|copy
init|=
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
name|d
operator|->
name|validateAndInterpret
argument_list|(
name|input
argument_list|,
name|copy
argument_list|,
name|state
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*!   \reimp */
DECL|function|stepEnabled
name|QDateTimeEdit
operator|::
name|StepEnabled
name|QDateTimeEdit
operator|::
name|stepEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|readOnly
condition|)
return|return
name|StepEnabled
argument_list|(
literal|0
argument_list|)
return|;
if|if
condition|(
name|d
operator|->
name|specialValue
argument_list|()
condition|)
block|{
return|return
operator|(
name|d
operator|->
name|minimum
operator|==
name|d
operator|->
name|maximum
condition|?
name|StepEnabled
argument_list|(
literal|0
argument_list|)
else|:
name|StepEnabled
argument_list|(
name|StepUpEnabled
argument_list|)
operator|)
return|;
block|}
name|QAbstractSpinBox
operator|::
name|StepEnabled
name|ret
init|=
literal|0
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|!
name|hasEditFocus
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|wrapping
condition|)
return|return
name|StepEnabled
argument_list|(
name|StepUpEnabled
operator||
name|StepDownEnabled
argument_list|)
return|;
comment|// 3 cases.  date, time, datetime.  each case look
comment|// at just the relavant component.
name|QVariant
name|max
decl_stmt|,
name|min
decl_stmt|,
name|val
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|sections
operator|&
name|DateSections_Mask
operator|)
condition|)
block|{
comment|// time only, no date
name|max
operator|=
name|d
operator|->
name|maximum
operator|.
name|toTime
argument_list|()
expr_stmt|;
name|min
operator|=
name|d
operator|->
name|minimum
operator|.
name|toTime
argument_list|()
expr_stmt|;
name|val
operator|=
name|d
operator|->
name|value
operator|.
name|toTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|sections
operator|&
name|TimeSections_Mask
operator|)
condition|)
block|{
comment|// date only, no time
name|max
operator|=
name|d
operator|->
name|maximum
operator|.
name|toDate
argument_list|()
expr_stmt|;
name|min
operator|=
name|d
operator|->
name|minimum
operator|.
name|toDate
argument_list|()
expr_stmt|;
name|val
operator|=
name|d
operator|->
name|value
operator|.
name|toDate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// both
name|max
operator|=
name|d
operator|->
name|maximum
expr_stmt|;
name|min
operator|=
name|d
operator|->
name|minimum
expr_stmt|;
name|val
operator|=
name|d
operator|->
name|value
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|!=
name|min
condition|)
name|ret
operator||=
name|QAbstractSpinBox
operator|::
name|StepDownEnabled
expr_stmt|;
if|if
condition|(
name|val
operator|!=
name|max
condition|)
name|ret
operator||=
name|QAbstractSpinBox
operator|::
name|StepUpEnabled
expr_stmt|;
return|return
name|ret
return|;
block|}
endif|#
directive|endif
switch|switch
condition|(
name|d
operator|->
name|sectionType
argument_list|(
name|d
operator|->
name|currentSectionIndex
argument_list|)
condition|)
block|{
case|case
name|QDateTimeParser
operator|::
name|NoSection
case|:
case|case
name|QDateTimeParser
operator|::
name|FirstSection
case|:
case|case
name|QDateTimeParser
operator|::
name|LastSection
case|:
return|return
literal|0
return|;
default|default:
break|break;
block|}
if|if
condition|(
name|d
operator|->
name|wrapping
condition|)
return|return
name|StepEnabled
argument_list|(
name|StepDownEnabled
operator||
name|StepUpEnabled
argument_list|)
return|;
name|QVariant
name|v
init|=
name|d
operator|->
name|stepBy
argument_list|(
name|d
operator|->
name|currentSectionIndex
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
name|d
operator|->
name|value
condition|)
block|{
name|ret
operator||=
name|QAbstractSpinBox
operator|::
name|StepUpEnabled
expr_stmt|;
block|}
name|v
operator|=
name|d
operator|->
name|stepBy
argument_list|(
name|d
operator|->
name|currentSectionIndex
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|!=
name|d
operator|->
name|value
condition|)
block|{
name|ret
operator||=
name|QAbstractSpinBox
operator|::
name|StepDownEnabled
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/*!   \reimp */
DECL|function|mousePressEvent
name|void
name|QDateTimeEdit
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|calendarPopupEnabled
argument_list|()
condition|)
block|{
name|QAbstractSpinBox
operator|::
name|mousePressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|updateHoverControl
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hoverControl
operator|==
name|QStyle
operator|::
name|SC_ComboBoxArrow
condition|)
block|{
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|readOnly
condition|)
block|{
return|return;
block|}
name|d
operator|->
name|updateArrow
argument_list|(
name|QStyle
operator|::
name|State_Sunken
argument_list|)
expr_stmt|;
name|d
operator|->
name|initCalendarPopup
argument_list|()
expr_stmt|;
name|d
operator|->
name|positionCalendarPopup
argument_list|()
expr_stmt|;
comment|//Show the calendar
name|d
operator|->
name|monthCalendar
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QAbstractSpinBox
operator|::
name|mousePressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*!   \class QTimeEdit   \brief The QTimeEdit class provides a widget for editing times based on   the QDateTimeEdit widget.    \ingroup basicwidgets   \inmodule QtWidgets    Many of the properties and functions provided by QTimeEdit are implemented in   QDateTimeEdit. The following properties are most relevant to users of this   class:    \list   \li \l{QDateTimeEdit::time}{time} holds the date displayed by the widget.   \li \l{QDateTimeEdit::minimumTime}{minimumTime} defines the minimum (earliest) time      that can be set by the user.   \li \l{QDateTimeEdit::maximumTime}{maximumTime} defines the maximum (latest) time      that can be set by the user.   \li \l{QDateTimeEdit::displayFormat}{displayFormat} contains a string that is used      to format the time displayed in the widget.   \endlist    \table 100%   \row \li \inlineimage windowsxp-timeedit.png Screenshot of a Windows XP style time editing widget        \li A time editing widget shown in the \l{Windows XP Style Widget Gallery}{Windows XP widget style}.   \row \li \inlineimage macintosh-timeedit.png Screenshot of a Macintosh style time editing widget        \li A time editing widget shown in the \l{Macintosh Style Widget Gallery}{Macintosh widget style}.   \row \li \inlineimage plastique-timeedit.png Screenshot of a Plastique style time editing widget        \li A time editing widget shown in the \l{Plastique Style Widget Gallery}{Plastique widget style}.   \endtable    \sa QDateEdit, QDateTimeEdit */
comment|/*!   Constructs an empty time editor with a \a parent. */
DECL|function|QTimeEdit
name|QTimeEdit
operator|::
name|QTimeEdit
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDateTimeEdit
argument_list|(
name|QDATETIMEEDIT_TIME_MIN
argument_list|,
name|QVariant
operator|::
name|Time
argument_list|,
name|parent
argument_list|)
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|timeChanged
argument_list|(
name|QTime
argument_list|)
argument_list|)
argument_list|,
name|SIGNAL
argument_list|(
name|userTimeChanged
argument_list|(
name|QTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*!   Constructs an empty time editor with a \a parent. The time is set   to \a time. */
DECL|function|QTimeEdit
name|QTimeEdit
operator|::
name|QTimeEdit
parameter_list|(
specifier|const
name|QTime
modifier|&
name|time
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDateTimeEdit
argument_list|(
name|time
argument_list|,
name|QVariant
operator|::
name|Time
argument_list|,
name|parent
argument_list|)
block|{ }
comment|/*!   \property QTimeEdit::time   \internal   \sa QDateTimeEdit::time */
comment|/*!   \fn void QTimeEdit::userTimeChanged(const QTime&time)    This signal only exists to fully implement the time Q_PROPERTY on the class.   Normally timeChanged should be used instead.    \internal */
comment|/*!   \class QDateEdit   \brief The QDateEdit class provides a widget for editing dates based on   the QDateTimeEdit widget.    \ingroup basicwidgets   \inmodule QtWidgets    Many of the properties and functions provided by QDateEdit are implemented in   QDateTimeEdit. The following properties are most relevant to users of this   class:    \list   \li \l{QDateTimeEdit::date}{date} holds the date displayed by the widget.   \li \l{QDateTimeEdit::minimumDate}{minimumDate} defines the minimum (earliest)      date that can be set by the user.   \li \l{QDateTimeEdit::maximumDate}{maximumDate} defines the maximum (latest) date      that can be set by the user.   \li \l{QDateTimeEdit::displayFormat}{displayFormat} contains a string that is used      to format the date displayed in the widget.   \endlist    \table 100%   \row \li \inlineimage windowsxp-dateedit.png Screenshot of a Windows XP style date editing widget        \li A date editing widget shown in the \l{Windows XP Style Widget Gallery}{Windows XP widget style}.   \row \li \inlineimage macintosh-dateedit.png Screenshot of a Macintosh style date editing widget        \li A date editing widget shown in the \l{Macintosh Style Widget Gallery}{Macintosh widget style}.   \row \li \inlineimage plastique-dateedit.png Screenshot of a Plastique style date editing widget        \li A date editing widget shown in the \l{Plastique Style Widget Gallery}{Plastique widget style}.   \endtable    \sa QTimeEdit, QDateTimeEdit */
comment|/*!   Constructs an empty date editor with a \a parent. */
DECL|function|QDateEdit
name|QDateEdit
operator|::
name|QDateEdit
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDateTimeEdit
argument_list|(
name|QDATETIMEEDIT_DATE_INITIAL
argument_list|,
name|QVariant
operator|::
name|Date
argument_list|,
name|parent
argument_list|)
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|dateChanged
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|,
name|SIGNAL
argument_list|(
name|userDateChanged
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*!   Constructs an empty date editor with a \a parent. The date is set   to \a date. */
DECL|function|QDateEdit
name|QDateEdit
operator|::
name|QDateEdit
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDateTimeEdit
argument_list|(
name|date
argument_list|,
name|QVariant
operator|::
name|Date
argument_list|,
name|parent
argument_list|)
block|{ }
comment|/*!   \property QDateEdit::date   \internal   \sa QDateTimeEdit::date */
comment|/*!   \fn void QDateEdit::userDateChanged(const QDate&date)    This signal only exists to fully implement the date Q_PROPERTY on the class.   Normally dateChanged should be used instead.    \internal */
comment|// --- QDateTimeEditPrivate ---
comment|/*!   \internal   Constructs a QDateTimeEditPrivate object */
DECL|function|QDateTimeEditPrivate
name|QDateTimeEditPrivate
operator|::
name|QDateTimeEditPrivate
parameter_list|()
member_init_list|:
name|QDateTimeParser
argument_list|(
name|QVariant
operator|::
name|DateTime
argument_list|,
name|QDateTimeParser
operator|::
name|DateTimeEdit
argument_list|)
block|{
name|hasHadFocus
operator|=
literal|false
expr_stmt|;
name|formatExplicitlySet
operator|=
literal|false
expr_stmt|;
name|cacheGuard
operator|=
literal|false
expr_stmt|;
name|fixday
operator|=
literal|true
expr_stmt|;
name|type
operator|=
name|QVariant
operator|::
name|DateTime
expr_stmt|;
name|sections
operator|=
literal|0
expr_stmt|;
name|cachedDay
operator|=
operator|-
literal|1
expr_stmt|;
name|currentSectionIndex
operator|=
name|FirstSectionIndex
expr_stmt|;
name|first
operator|.
name|type
operator|=
name|FirstSection
expr_stmt|;
name|last
operator|.
name|type
operator|=
name|LastSection
expr_stmt|;
name|none
operator|.
name|type
operator|=
name|NoSection
expr_stmt|;
name|first
operator|.
name|pos
operator|=
literal|0
expr_stmt|;
name|last
operator|.
name|pos
operator|=
operator|-
literal|1
expr_stmt|;
name|none
operator|.
name|pos
operator|=
operator|-
literal|1
expr_stmt|;
name|sections
operator|=
literal|0
expr_stmt|;
name|calendarPopup
operator|=
literal|false
expr_stmt|;
name|minimum
operator|=
name|QDATETIMEEDIT_COMPAT_DATETIME_MIN
expr_stmt|;
name|maximum
operator|=
name|QDATETIMEEDIT_DATETIME_MAX
expr_stmt|;
name|arrowState
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
name|monthCalendar
operator|=
literal|0
expr_stmt|;
name|readLocaleSettings
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
name|focusOnButton
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|updateTimeSpec
name|void
name|QDateTimeEditPrivate
operator|::
name|updateTimeSpec
parameter_list|()
block|{
name|minimum
operator|=
name|minimum
operator|.
name|toDateTime
argument_list|()
operator|.
name|toTimeSpec
argument_list|(
name|spec
argument_list|)
expr_stmt|;
name|maximum
operator|=
name|maximum
operator|.
name|toDateTime
argument_list|()
operator|.
name|toTimeSpec
argument_list|(
name|spec
argument_list|)
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|toDateTime
argument_list|()
operator|.
name|toTimeSpec
argument_list|(
name|spec
argument_list|)
expr_stmt|;
comment|// time zone changes can lead to 00:00:00 becomes 01:00:00 and 23:59:59 becomes 00:59:59 (invalid range)
specifier|const
name|bool
name|dateShown
init|=
operator|(
name|sections
operator|&
name|QDateTimeEdit
operator|::
name|DateSections_Mask
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|dateShown
condition|)
block|{
if|if
condition|(
name|minimum
operator|.
name|toTime
argument_list|()
operator|>=
name|maximum
operator|.
name|toTime
argument_list|()
condition|)
block|{
name|minimum
operator|=
name|QDateTime
argument_list|(
name|value
operator|.
name|toDate
argument_list|()
argument_list|,
name|QDATETIMEEDIT_TIME_MIN
argument_list|,
name|spec
argument_list|)
expr_stmt|;
name|maximum
operator|=
name|QDateTime
argument_list|(
name|value
operator|.
name|toDate
argument_list|()
argument_list|,
name|QDATETIMEEDIT_TIME_MAX
argument_list|,
name|spec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|updateEdit
name|void
name|QDateTimeEditPrivate
operator|::
name|updateEdit
parameter_list|()
block|{
specifier|const
name|QString
name|newText
init|=
operator|(
name|specialValue
argument_list|()
condition|?
name|specialValueText
else|:
name|textFromValue
argument_list|(
name|value
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|newText
operator|==
name|displayText
argument_list|()
condition|)
return|return;
name|int
name|selsize
init|=
name|edit
operator|->
name|selectedText
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|sb
init|=
name|edit
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|edit
operator|->
name|setText
argument_list|(
name|newText
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|specialValue
argument_list|()
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
operator|&&
operator|!
operator|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|!
name|edit
operator|->
name|hasEditFocus
argument_list|()
operator|)
endif|#
directive|endif
condition|)
block|{
name|int
name|cursor
init|=
name|sectionPos
argument_list|(
name|currentSectionIndex
argument_list|)
decl_stmt|;
name|QDTEDEBUG
operator|<<
literal|"cursor is "
operator|<<
name|cursor
operator|<<
name|currentSectionIndex
expr_stmt|;
name|cursor
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|cursor
argument_list|,
name|displayText
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QDTEDEBUG
operator|<<
name|cursor
expr_stmt|;
if|if
condition|(
name|selsize
operator|>
literal|0
condition|)
block|{
name|edit
operator|->
name|setSelection
argument_list|(
name|cursor
argument_list|,
name|selsize
argument_list|)
expr_stmt|;
name|QDTEDEBUG
operator|<<
name|cursor
operator|<<
name|selsize
expr_stmt|;
block|}
else|else
block|{
name|edit
operator|->
name|setCursorPosition
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|QDTEDEBUG
operator|<<
name|cursor
expr_stmt|;
block|}
block|}
name|edit
operator|->
name|blockSignals
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
comment|/*!   \internal    Selects the section \a s. If \a forward is false selects backwards. */
DECL|function|setSelected
name|void
name|QDateTimeEditPrivate
operator|::
name|setSelected
parameter_list|(
name|int
name|sectionIndex
parameter_list|,
name|bool
name|forward
parameter_list|)
block|{
if|if
condition|(
name|specialValue
argument_list|()
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
operator|||
operator|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|!
name|edit
operator|->
name|hasEditFocus
argument_list|()
operator|)
endif|#
directive|endif
condition|)
block|{
name|edit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|SectionNode
modifier|&
name|node
init|=
name|sectionNode
argument_list|(
name|sectionIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|type
operator|==
name|NoSection
operator|||
name|node
operator|.
name|type
operator|==
name|LastSection
operator|||
name|node
operator|.
name|type
operator|==
name|FirstSection
condition|)
return|return;
name|updateCache
argument_list|(
name|value
argument_list|,
name|displayText
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|size
init|=
name|sectionSize
argument_list|(
name|sectionIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|forward
condition|)
block|{
name|edit
operator|->
name|setSelection
argument_list|(
name|sectionPos
argument_list|(
name|node
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|edit
operator|->
name|setSelection
argument_list|(
name|sectionPos
argument_list|(
name|node
argument_list|)
operator|+
name|size
argument_list|,
operator|-
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*!   \internal    Returns the section at index \a index or NoSection if there are no sections there. */
DECL|function|sectionAt
name|int
name|QDateTimeEditPrivate
operator|::
name|sectionAt
parameter_list|(
name|int
name|pos
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|pos
operator|<
name|separators
operator|.
name|first
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
operator|(
name|pos
operator|==
literal|0
condition|?
name|FirstSectionIndex
else|:
name|NoSectionIndex
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|displayText
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|pos
operator|<
name|separators
operator|.
name|last
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
condition|)
block|{
if|if
condition|(
name|separators
operator|.
name|last
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|sectionNodes
operator|.
name|count
argument_list|()
operator|-
literal|1
return|;
block|}
return|return
operator|(
name|pos
operator|==
name|displayText
argument_list|()
operator|.
name|size
argument_list|()
condition|?
name|LastSectionIndex
else|:
name|NoSectionIndex
operator|)
return|;
block|}
name|updateCache
argument_list|(
name|value
argument_list|,
name|displayText
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sectionNodes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|tmp
init|=
name|sectionPos
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
name|tmp
operator|+
name|sectionSize
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
operator|(
name|pos
operator|<
name|tmp
condition|?
operator|-
literal|1
else|:
name|i
operator|)
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/*!   \internal    Returns the closest section of index \a index. Searches forward   for a section if \a forward is true. Otherwise searches backwards. */
DECL|function|closestSection
name|int
name|QDateTimeEditPrivate
operator|::
name|closestSection
parameter_list|(
name|int
name|pos
parameter_list|,
name|bool
name|forward
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|pos
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|<
name|separators
operator|.
name|first
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|forward
condition|?
literal|0
else|:
name|FirstSectionIndex
return|;
block|}
elseif|else
if|if
condition|(
name|displayText
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|pos
operator|<
name|separators
operator|.
name|last
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
condition|)
block|{
return|return
name|forward
condition|?
name|LastSectionIndex
else|:
name|sectionNodes
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
name|updateCache
argument_list|(
name|value
argument_list|,
name|displayText
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sectionNodes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|tmp
init|=
name|sectionPos
argument_list|(
name|sectionNodes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|<
name|tmp
operator|+
name|sectionSize
argument_list|(
name|i
argument_list|)
condition|)
block|{
if|if
condition|(
name|pos
operator|<
name|tmp
operator|&&
operator|!
name|forward
condition|)
block|{
return|return
name|i
operator|-
literal|1
return|;
block|}
return|return
name|i
return|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|sectionNodes
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
name|pos
operator|>
name|tmp
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
name|qWarning
argument_list|(
literal|"QDateTimeEdit: Internal Error: closestSection returned NoSection"
argument_list|)
expr_stmt|;
return|return
name|NoSectionIndex
return|;
block|}
comment|/*!   \internal    Returns a copy of the section that is before or after \a current, depending on \a forward. */
DECL|function|nextPrevSection
name|int
name|QDateTimeEditPrivate
operator|::
name|nextPrevSection
parameter_list|(
name|int
name|current
parameter_list|,
name|bool
name|forward
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|)
name|forward
operator|=
operator|!
name|forward
expr_stmt|;
switch|switch
condition|(
name|current
condition|)
block|{
case|case
name|FirstSectionIndex
case|:
return|return
name|forward
condition|?
literal|0
else|:
name|FirstSectionIndex
return|;
case|case
name|LastSectionIndex
case|:
return|return
operator|(
name|forward
condition|?
name|LastSectionIndex
else|:
name|sectionNodes
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
return|;
case|case
name|NoSectionIndex
case|:
return|return
name|FirstSectionIndex
return|;
default|default:
break|break;
block|}
name|Q_ASSERT
argument_list|(
name|current
operator|>=
literal|0
operator|&&
name|current
operator|<
name|sectionNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|+=
operator|(
name|forward
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|current
operator|>=
name|sectionNodes
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|LastSectionIndex
return|;
block|}
elseif|else
if|if
condition|(
name|current
operator|<
literal|0
condition|)
block|{
return|return
name|FirstSectionIndex
return|;
block|}
return|return
name|current
return|;
block|}
comment|/*!   \internal    Clears the text of section \a s. */
DECL|function|clearSection
name|void
name|QDateTimeEditPrivate
operator|::
name|clearSection
parameter_list|(
name|int
name|index
parameter_list|)
block|{
specifier|const
name|QLatin1Char
name|space
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|int
name|cursorPos
init|=
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
name|bool
name|blocked
init|=
name|edit
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|QString
name|t
init|=
name|edit
operator|->
name|text
argument_list|()
decl_stmt|;
specifier|const
name|int
name|pos
init|=
name|sectionPos
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDateTimeEdit: Internal error (%s:%d)"
argument_list|,
name|__FILE__
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|int
name|size
init|=
name|sectionSize
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|t
operator|.
name|replace
argument_list|(
name|pos
argument_list|,
name|size
argument_list|,
name|QString
argument_list|()
operator|.
name|fill
argument_list|(
name|space
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|->
name|setText
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|edit
operator|->
name|setCursorPosition
argument_list|(
name|cursorPos
argument_list|)
expr_stmt|;
name|QDTEDEBUG
operator|<<
name|cursorPos
expr_stmt|;
name|edit
operator|->
name|blockSignals
argument_list|(
name|blocked
argument_list|)
expr_stmt|;
block|}
comment|/*!   \internal    updates the cached values */
DECL|function|updateCache
name|void
name|QDateTimeEditPrivate
operator|::
name|updateCache
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|val
parameter_list|,
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|val
operator|!=
name|cachedValue
operator|||
name|str
operator|!=
name|cachedText
operator|||
name|cacheGuard
condition|)
block|{
name|cacheGuard
operator|=
literal|true
expr_stmt|;
name|QString
name|copy
init|=
name|str
decl_stmt|;
name|int
name|unused
init|=
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
name|QValidator
operator|::
name|State
name|unusedState
decl_stmt|;
name|validateAndInterpret
argument_list|(
name|copy
argument_list|,
name|unused
argument_list|,
name|unusedState
argument_list|)
expr_stmt|;
name|cacheGuard
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/*!   \internal    parses and validates \a input */
DECL|function|validateAndInterpret
name|QDateTime
name|QDateTimeEditPrivate
operator|::
name|validateAndInterpret
parameter_list|(
name|QString
modifier|&
name|input
parameter_list|,
name|int
modifier|&
name|position
parameter_list|,
name|QValidator
operator|::
name|State
modifier|&
name|state
parameter_list|,
name|bool
name|fixup
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|input
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|sectionNodes
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|||
operator|!
name|specialValueText
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Intermediate
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
block|}
return|return
name|getZeroVariant
argument_list|()
operator|.
name|toDateTime
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|cachedText
operator|==
name|input
operator|&&
operator|!
name|fixup
condition|)
block|{
name|state
operator|=
name|cachedState
expr_stmt|;
return|return
name|cachedValue
operator|.
name|toDateTime
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|specialValueText
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bool
name|changeCase
init|=
literal|false
decl_stmt|;
specifier|const
name|int
name|max
init|=
name|qMin
argument_list|(
name|specialValueText
operator|.
name|size
argument_list|()
argument_list|,
name|input
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QChar
name|ic
init|=
name|input
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QChar
name|sc
init|=
name|specialValueText
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ic
operator|!=
name|sc
condition|)
block|{
if|if
condition|(
name|sc
operator|.
name|toLower
argument_list|()
operator|==
name|ic
operator|.
name|toLower
argument_list|()
condition|)
block|{
name|changeCase
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|i
operator|==
name|max
condition|)
block|{
name|state
operator|=
name|specialValueText
operator|.
name|size
argument_list|()
operator|==
name|input
operator|.
name|size
argument_list|()
condition|?
name|QValidator
operator|::
name|Acceptable
else|:
name|QValidator
operator|::
name|Intermediate
expr_stmt|;
if|if
condition|(
name|changeCase
condition|)
block|{
name|input
operator|=
name|specialValueText
operator|.
name|left
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
return|return
name|minimum
operator|.
name|toDateTime
argument_list|()
return|;
block|}
block|}
name|StateNode
name|tmp
init|=
name|parse
argument_list|(
name|input
argument_list|,
name|position
argument_list|,
name|value
operator|.
name|toDateTime
argument_list|()
argument_list|,
name|fixup
argument_list|)
decl_stmt|;
name|input
operator|=
name|tmp
operator|.
name|input
expr_stmt|;
name|state
operator|=
name|QValidator
operator|::
name|State
argument_list|(
name|int
argument_list|(
name|tmp
operator|.
name|state
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|QValidator
operator|::
name|Acceptable
condition|)
block|{
if|if
condition|(
name|tmp
operator|.
name|conflicts
operator|&&
name|conflictGuard
operator|!=
name|tmp
operator|.
name|value
condition|)
block|{
name|conflictGuard
operator|=
name|tmp
operator|.
name|value
expr_stmt|;
name|clearCache
argument_list|()
expr_stmt|;
name|input
operator|=
name|textFromValue
argument_list|(
name|tmp
operator|.
name|value
argument_list|)
expr_stmt|;
name|updateCache
argument_list|(
name|tmp
operator|.
name|value
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|conflictGuard
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cachedText
operator|=
name|input
expr_stmt|;
name|cachedState
operator|=
name|state
expr_stmt|;
name|cachedValue
operator|=
name|tmp
operator|.
name|value
expr_stmt|;
block|}
block|}
else|else
block|{
name|clearCache
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|tmp
operator|.
name|value
operator|.
name|isNull
argument_list|()
condition|?
name|getZeroVariant
argument_list|()
operator|.
name|toDateTime
argument_list|()
else|:
name|tmp
operator|.
name|value
operator|)
return|;
block|}
comment|/*!   \internal */
DECL|function|textFromValue
name|QString
name|QDateTimeEditPrivate
operator|::
name|textFromValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|f
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|q
operator|->
name|textFromDateTime
argument_list|(
name|f
operator|.
name|toDateTime
argument_list|()
argument_list|)
return|;
block|}
comment|/*!   \internal    This function's name is slightly confusing; it is not to be confused   with QAbstractSpinBox::valueFromText(). */
DECL|function|valueFromText
name|QVariant
name|QDateTimeEditPrivate
operator|::
name|valueFromText
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
return|return
name|q
operator|->
name|dateTimeFromText
argument_list|(
name|f
argument_list|)
operator|.
name|toTimeSpec
argument_list|(
name|spec
argument_list|)
return|;
block|}
comment|/*!   \internal    Internal function called by QDateTimeEdit::stepBy(). Also takes a   Section for which section to step on and a bool \a test for   whether or not to modify the internal cachedDay variable. This is   necessary because the function is called from the const function   QDateTimeEdit::stepEnabled() as well as QDateTimeEdit::stepBy(). */
DECL|function|stepBy
name|QDateTime
name|QDateTimeEditPrivate
operator|::
name|stepBy
parameter_list|(
name|int
name|sectionIndex
parameter_list|,
name|int
name|steps
parameter_list|,
name|bool
name|test
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|QDateTime
name|v
init|=
name|value
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
name|QString
name|str
init|=
name|displayText
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
specifier|const
name|SectionNode
name|sn
init|=
name|sectionNode
argument_list|(
name|sectionIndex
argument_list|)
decl_stmt|;
name|int
name|val
decl_stmt|;
comment|// to make sure it behaves reasonably when typing something and then stepping in non-tracking mode
if|if
condition|(
operator|!
name|test
operator|&&
name|pendingEmit
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|validate
argument_list|(
name|str
argument_list|,
name|pos
argument_list|)
operator|!=
name|QValidator
operator|::
name|Acceptable
condition|)
block|{
name|v
operator|=
name|value
operator|.
name|toDateTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|v
operator|=
name|q
operator|->
name|dateTimeFromText
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
name|val
operator|=
name|getDigit
argument_list|(
name|v
argument_list|,
name|sectionIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|val
operator|=
name|getDigit
argument_list|(
name|v
argument_list|,
name|sectionIndex
argument_list|)
expr_stmt|;
block|}
name|val
operator|+=
name|steps
expr_stmt|;
specifier|const
name|int
name|min
init|=
name|absoluteMin
argument_list|(
name|sectionIndex
argument_list|)
decl_stmt|;
specifier|const
name|int
name|max
init|=
name|absoluteMax
argument_list|(
name|sectionIndex
argument_list|,
name|value
operator|.
name|toDateTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|<
name|min
condition|)
block|{
name|val
operator|=
operator|(
name|wrapping
condition|?
name|max
operator|-
operator|(
name|min
operator|-
name|val
operator|)
operator|+
literal|1
else|:
name|min
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|>
name|max
condition|)
block|{
name|val
operator|=
operator|(
name|wrapping
condition|?
name|min
operator|+
name|val
operator|-
name|max
operator|-
literal|1
else|:
name|max
operator|)
expr_stmt|;
block|}
specifier|const
name|int
name|oldDay
init|=
name|v
operator|.
name|date
argument_list|()
operator|.
name|day
argument_list|()
decl_stmt|;
name|setDigit
argument_list|(
name|v
argument_list|,
name|sectionIndex
argument_list|,
name|val
argument_list|)
expr_stmt|;
comment|// if this sets year or month it will make
comment|// sure that days are lowered if needed.
specifier|const
name|QDateTime
name|minimumDateTime
init|=
name|minimum
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
specifier|const
name|QDateTime
name|maximumDateTime
init|=
name|maximum
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
comment|// changing one section should only modify that section, if possible
if|if
condition|(
name|sn
operator|.
name|type
operator|!=
name|AmPmSection
operator|&&
operator|(
name|v
argument_list|<
name|minimumDateTime
operator|||
name|v
argument_list|>
name|maximumDateTime
operator|)
condition|)
block|{
specifier|const
name|int
name|localmin
init|=
name|getDigit
argument_list|(
name|minimumDateTime
argument_list|,
name|sectionIndex
argument_list|)
decl_stmt|;
specifier|const
name|int
name|localmax
init|=
name|getDigit
argument_list|(
name|maximumDateTime
argument_list|,
name|sectionIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrapping
condition|)
block|{
comment|// just because we hit the roof in one direction, it
comment|// doesn't mean that we hit the floor in the other
if|if
condition|(
name|steps
operator|>
literal|0
condition|)
block|{
name|setDigit
argument_list|(
name|v
argument_list|,
name|sectionIndex
argument_list|,
name|min
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|sn
operator|.
name|type
operator|&
operator|(
name|DaySection
operator||
name|DayOfWeekSectionShort
operator||
name|DayOfWeekSectionLong
operator|)
operator|)
operator|&&
name|sections
operator|&
name|DateSectionMask
condition|)
block|{
specifier|const
name|int
name|daysInMonth
init|=
name|v
operator|.
name|date
argument_list|()
operator|.
name|daysInMonth
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|date
argument_list|()
operator|.
name|day
argument_list|()
operator|<
name|oldDay
operator|&&
name|v
operator|.
name|date
argument_list|()
operator|.
name|day
argument_list|()
operator|<
name|daysInMonth
condition|)
block|{
specifier|const
name|int
name|adds
init|=
name|qMin
argument_list|(
name|oldDay
argument_list|,
name|daysInMonth
argument_list|)
decl_stmt|;
name|v
operator|=
name|v
operator|.
name|addDays
argument_list|(
name|adds
operator|-
name|v
operator|.
name|date
argument_list|()
operator|.
name|day
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|v
operator|<
name|minimumDateTime
condition|)
block|{
name|setDigit
argument_list|(
name|v
argument_list|,
name|sectionIndex
argument_list|,
name|localmin
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|<
name|minimumDateTime
condition|)
name|setDigit
argument_list|(
name|v
argument_list|,
name|sectionIndex
argument_list|,
name|localmin
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setDigit
argument_list|(
name|v
argument_list|,
name|sectionIndex
argument_list|,
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|sn
operator|.
name|type
operator|&
operator|(
name|DaySection
operator||
name|DayOfWeekSectionShort
operator||
name|DayOfWeekSectionLong
operator|)
operator|)
operator|&&
name|sections
operator|&
name|DateSectionMask
condition|)
block|{
specifier|const
name|int
name|daysInMonth
init|=
name|v
operator|.
name|date
argument_list|()
operator|.
name|daysInMonth
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|date
argument_list|()
operator|.
name|day
argument_list|()
operator|<
name|oldDay
operator|&&
name|v
operator|.
name|date
argument_list|()
operator|.
name|day
argument_list|()
operator|<
name|daysInMonth
condition|)
block|{
specifier|const
name|int
name|adds
init|=
name|qMin
argument_list|(
name|oldDay
argument_list|,
name|daysInMonth
argument_list|)
decl_stmt|;
name|v
operator|=
name|v
operator|.
name|addDays
argument_list|(
name|adds
operator|-
name|v
operator|.
name|date
argument_list|()
operator|.
name|day
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|v
operator|>
name|maximumDateTime
condition|)
block|{
name|setDigit
argument_list|(
name|v
argument_list|,
name|sectionIndex
argument_list|,
name|localmax
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|>
name|maximumDateTime
condition|)
name|setDigit
argument_list|(
name|v
argument_list|,
name|sectionIndex
argument_list|,
name|localmax
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|setDigit
argument_list|(
name|v
argument_list|,
name|sectionIndex
argument_list|,
operator|(
name|steps
operator|>
literal|0
condition|?
name|localmax
else|:
name|localmin
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|test
operator|&&
name|oldDay
operator|!=
name|v
operator|.
name|date
argument_list|()
operator|.
name|day
argument_list|()
operator|&&
operator|!
operator|(
name|sn
operator|.
name|type
operator|&
operator|(
name|DaySection
operator||
name|DayOfWeekSectionShort
operator||
name|DayOfWeekSectionLong
operator|)
operator|)
condition|)
block|{
comment|// this should not happen when called from stepEnabled
name|cachedDay
operator|=
name|qMax
argument_list|<
name|int
argument_list|>
argument_list|(
name|oldDay
argument_list|,
name|cachedDay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|v
operator|<
name|minimumDateTime
condition|)
block|{
if|if
condition|(
name|wrapping
condition|)
block|{
name|QDateTime
name|t
init|=
name|v
decl_stmt|;
name|setDigit
argument_list|(
name|t
argument_list|,
name|sectionIndex
argument_list|,
name|steps
operator|<
literal|0
condition|?
name|max
else|:
name|min
argument_list|)
expr_stmt|;
name|bool
name|mincmp
init|=
operator|(
name|t
operator|>=
name|minimumDateTime
operator|)
decl_stmt|;
name|bool
name|maxcmp
init|=
operator|(
name|t
operator|<=
name|maximumDateTime
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|mincmp
operator|||
operator|!
name|maxcmp
condition|)
block|{
name|setDigit
argument_list|(
name|t
argument_list|,
name|sectionIndex
argument_list|,
name|getDigit
argument_list|(
name|steps
operator|<
literal|0
condition|?
name|maximumDateTime
else|:
name|minimumDateTime
argument_list|,
name|sectionIndex
argument_list|)
argument_list|)
expr_stmt|;
name|mincmp
operator|=
operator|(
name|t
operator|>=
name|minimumDateTime
operator|)
expr_stmt|;
name|maxcmp
operator|=
operator|(
name|t
operator|<=
name|maximumDateTime
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|mincmp
operator|&&
name|maxcmp
condition|)
block|{
name|v
operator|=
name|t
expr_stmt|;
block|}
block|}
else|else
block|{
name|v
operator|=
name|value
operator|.
name|toDateTime
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|v
operator|>
name|maximumDateTime
condition|)
block|{
if|if
condition|(
name|wrapping
condition|)
block|{
name|QDateTime
name|t
init|=
name|v
decl_stmt|;
name|setDigit
argument_list|(
name|t
argument_list|,
name|sectionIndex
argument_list|,
name|steps
operator|>
literal|0
condition|?
name|min
else|:
name|max
argument_list|)
expr_stmt|;
name|bool
name|mincmp
init|=
operator|(
name|t
operator|>=
name|minimumDateTime
operator|)
decl_stmt|;
name|bool
name|maxcmp
init|=
operator|(
name|t
operator|<=
name|maximumDateTime
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|mincmp
operator|||
operator|!
name|maxcmp
condition|)
block|{
name|setDigit
argument_list|(
name|t
argument_list|,
name|sectionIndex
argument_list|,
name|getDigit
argument_list|(
name|steps
operator|>
literal|0
condition|?
name|minimumDateTime
else|:
name|maximumDateTime
argument_list|,
name|sectionIndex
argument_list|)
argument_list|)
expr_stmt|;
name|mincmp
operator|=
operator|(
name|t
operator|>=
name|minimumDateTime
operator|)
expr_stmt|;
name|maxcmp
operator|=
operator|(
name|t
operator|<=
name|maximumDateTime
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|mincmp
operator|&&
name|maxcmp
condition|)
block|{
name|v
operator|=
name|t
expr_stmt|;
block|}
block|}
else|else
block|{
name|v
operator|=
name|value
operator|.
name|toDateTime
argument_list|()
expr_stmt|;
block|}
block|}
specifier|const
name|QDateTime
name|ret
init|=
name|bound
argument_list|(
name|v
argument_list|,
name|value
argument_list|,
name|steps
argument_list|)
operator|.
name|toDateTime
argument_list|()
operator|.
name|toTimeSpec
argument_list|(
name|spec
argument_list|)
decl_stmt|;
return|return
name|ret
return|;
block|}
comment|/*!   \internal */
DECL|function|emitSignals
name|void
name|QDateTimeEditPrivate
operator|::
name|emitSignals
parameter_list|(
name|EmitPolicy
name|ep
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|old
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|ep
operator|==
name|NeverEmit
condition|)
block|{
return|return;
block|}
name|pendingEmit
operator|=
literal|false
expr_stmt|;
specifier|const
name|bool
name|dodate
init|=
name|value
operator|.
name|toDate
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|sections
operator|&
name|DateSectionMask
operator|)
decl_stmt|;
specifier|const
name|bool
name|datechanged
init|=
operator|(
name|ep
operator|==
name|AlwaysEmit
operator|||
name|old
operator|.
name|toDate
argument_list|()
operator|!=
name|value
operator|.
name|toDate
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|bool
name|dotime
init|=
name|value
operator|.
name|toTime
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|sections
operator|&
name|TimeSectionMask
operator|)
decl_stmt|;
specifier|const
name|bool
name|timechanged
init|=
operator|(
name|ep
operator|==
name|AlwaysEmit
operator|||
name|old
operator|.
name|toTime
argument_list|()
operator|!=
name|value
operator|.
name|toTime
argument_list|()
operator|)
decl_stmt|;
name|updateCache
argument_list|(
name|value
argument_list|,
name|displayText
argument_list|()
argument_list|)
expr_stmt|;
name|syncCalendarWidget
argument_list|()
expr_stmt|;
if|if
condition|(
name|datechanged
operator|||
name|timechanged
condition|)
emit|emit
name|q
operator|->
name|dateTimeChanged
argument_list|(
name|value
operator|.
name|toDateTime
argument_list|()
argument_list|)
emit|;
if|if
condition|(
name|dodate
operator|&&
name|datechanged
condition|)
emit|emit
name|q
operator|->
name|dateChanged
argument_list|(
name|value
operator|.
name|toDate
argument_list|()
argument_list|)
emit|;
if|if
condition|(
name|dotime
operator|&&
name|timechanged
condition|)
emit|emit
name|q
operator|->
name|timeChanged
argument_list|(
name|value
operator|.
name|toTime
argument_list|()
argument_list|)
emit|;
block|}
comment|/*!   \internal */
DECL|function|_q_editorCursorPositionChanged
name|void
name|QDateTimeEditPrivate
operator|::
name|_q_editorCursorPositionChanged
parameter_list|(
name|int
name|oldpos
parameter_list|,
name|int
name|newpos
parameter_list|)
block|{
if|if
condition|(
name|ignoreCursorPositionChanged
operator|||
name|specialValue
argument_list|()
condition|)
return|return;
specifier|const
name|QString
name|oldText
init|=
name|displayText
argument_list|()
decl_stmt|;
name|updateCache
argument_list|(
name|value
argument_list|,
name|oldText
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|allowChange
init|=
operator|!
name|edit
operator|->
name|hasSelectedText
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|forward
init|=
name|oldpos
operator|<=
name|newpos
decl_stmt|;
name|ignoreCursorPositionChanged
operator|=
literal|true
expr_stmt|;
name|int
name|s
init|=
name|sectionAt
argument_list|(
name|newpos
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|NoSectionIndex
operator|&&
name|forward
operator|&&
name|newpos
operator|>
literal|0
condition|)
block|{
name|s
operator|=
name|sectionAt
argument_list|(
name|newpos
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|c
init|=
name|newpos
decl_stmt|;
specifier|const
name|int
name|selstart
init|=
name|edit
operator|->
name|selectionStart
argument_list|()
decl_stmt|;
specifier|const
name|int
name|selSection
init|=
name|sectionAt
argument_list|(
name|selstart
argument_list|)
decl_stmt|;
specifier|const
name|int
name|l
init|=
name|selSection
operator|!=
operator|-
literal|1
condition|?
name|sectionSize
argument_list|(
name|selSection
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|NoSectionIndex
condition|)
block|{
if|if
condition|(
name|l
operator|>
literal|0
operator|&&
name|selstart
operator|==
name|sectionPos
argument_list|(
name|selSection
argument_list|)
operator|&&
name|edit
operator|->
name|selectedText
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|l
condition|)
block|{
name|s
operator|=
name|selSection
expr_stmt|;
if|if
condition|(
name|allowChange
condition|)
name|setSelected
argument_list|(
name|selSection
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|c
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|int
name|closest
init|=
name|closestSection
argument_list|(
name|newpos
argument_list|,
name|forward
argument_list|)
decl_stmt|;
name|c
operator|=
name|sectionPos
argument_list|(
name|closest
argument_list|)
operator|+
operator|(
name|forward
condition|?
literal|0
else|:
name|qMax
argument_list|<
name|int
argument_list|>
argument_list|(
literal|0
argument_list|,
name|sectionSize
argument_list|(
name|closest
argument_list|)
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|allowChange
condition|)
block|{
name|edit
operator|->
name|setCursorPosition
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|QDTEDEBUG
operator|<<
name|c
expr_stmt|;
block|}
name|s
operator|=
name|closest
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allowChange
operator|&&
name|currentSectionIndex
operator|!=
name|s
condition|)
block|{
name|interpret
argument_list|(
name|EmitIfChanged
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
name|setSelected
argument_list|(
name|s
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|edit
operator|->
name|hasSelectedText
argument_list|()
condition|)
block|{
if|if
condition|(
name|oldpos
operator|<
name|newpos
condition|)
block|{
name|edit
operator|->
name|setCursorPosition
argument_list|(
name|displayText
argument_list|()
operator|.
name|size
argument_list|()
operator|-
operator|(
name|oldText
operator|.
name|size
argument_list|()
operator|-
name|c
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|edit
operator|->
name|setCursorPosition
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|QDTEDEBUG
operator|<<
literal|"currentSectionIndex is set to"
operator|<<
name|sectionName
argument_list|(
name|sectionType
argument_list|(
name|s
argument_list|)
argument_list|)
operator|<<
name|oldpos
operator|<<
name|newpos
operator|<<
literal|"was"
operator|<<
name|sectionName
argument_list|(
name|sectionType
argument_list|(
name|currentSectionIndex
argument_list|)
argument_list|)
expr_stmt|;
name|currentSectionIndex
operator|=
name|s
expr_stmt|;
name|Q_ASSERT_X
argument_list|(
name|currentSectionIndex
operator|<
name|sectionNodes
operator|.
name|size
argument_list|()
argument_list|,
literal|"QDateTimeEditPrivate::_q_editorCursorPositionChanged()"
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Internal error (%1 %2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|currentSectionIndex
argument_list|)
operator|.
name|arg
argument_list|(
name|sectionNodes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ignoreCursorPositionChanged
operator|=
literal|false
expr_stmt|;
block|}
comment|/*!   \internal    Try to get the format from the local settings */
DECL|function|readLocaleSettings
name|void
name|QDateTimeEditPrivate
operator|::
name|readLocaleSettings
parameter_list|()
block|{
specifier|const
name|QLocale
name|loc
decl_stmt|;
name|defaultTimeFormat
operator|=
name|loc
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
expr_stmt|;
name|defaultDateFormat
operator|=
name|loc
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
expr_stmt|;
name|defaultDateTimeFormat
operator|=
name|loc
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
expr_stmt|;
block|}
DECL|function|convertToPublic
name|QDateTimeEdit
operator|::
name|Section
name|QDateTimeEditPrivate
operator|::
name|convertToPublic
parameter_list|(
name|QDateTimeParser
operator|::
name|Section
name|s
parameter_list|)
block|{
switch|switch
condition|(
name|s
operator|&
operator|~
name|Internal
condition|)
block|{
case|case
name|AmPmSection
case|:
return|return
name|QDateTimeEdit
operator|::
name|AmPmSection
return|;
case|case
name|MSecSection
case|:
return|return
name|QDateTimeEdit
operator|::
name|MSecSection
return|;
case|case
name|SecondSection
case|:
return|return
name|QDateTimeEdit
operator|::
name|SecondSection
return|;
case|case
name|MinuteSection
case|:
return|return
name|QDateTimeEdit
operator|::
name|MinuteSection
return|;
case|case
name|DayOfWeekSectionShort
case|:
case|case
name|DayOfWeekSectionLong
case|:
case|case
name|DaySection
case|:
return|return
name|QDateTimeEdit
operator|::
name|DaySection
return|;
case|case
name|MonthSection
case|:
return|return
name|QDateTimeEdit
operator|::
name|MonthSection
return|;
case|case
name|YearSection2Digits
case|:
case|case
name|YearSection
case|:
return|return
name|QDateTimeEdit
operator|::
name|YearSection
return|;
case|case
name|Hour12Section
case|:
case|case
name|Hour24Section
case|:
return|return
name|QDateTimeEdit
operator|::
name|HourSection
return|;
case|case
name|FirstSection
case|:
case|case
name|NoSection
case|:
case|case
name|LastSection
case|:
break|break;
block|}
return|return
name|QDateTimeEdit
operator|::
name|NoSection
return|;
block|}
DECL|function|convertSections
name|QDateTimeEdit
operator|::
name|Sections
name|QDateTimeEditPrivate
operator|::
name|convertSections
parameter_list|(
name|QDateTimeParser
operator|::
name|Sections
name|s
parameter_list|)
block|{
name|QDateTimeEdit
operator|::
name|Sections
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|s
operator|&
name|QDateTimeParser
operator|::
name|MSecSection
condition|)
name|ret
operator||=
name|QDateTimeEdit
operator|::
name|MSecSection
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|QDateTimeParser
operator|::
name|SecondSection
condition|)
name|ret
operator||=
name|QDateTimeEdit
operator|::
name|SecondSection
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|QDateTimeParser
operator|::
name|MinuteSection
condition|)
name|ret
operator||=
name|QDateTimeEdit
operator|::
name|MinuteSection
expr_stmt|;
if|if
condition|(
name|s
operator|&
operator|(
name|QDateTimeParser
operator|::
name|Hour24Section
operator||
name|QDateTimeParser
operator|::
name|Hour12Section
operator|)
condition|)
name|ret
operator||=
name|QDateTimeEdit
operator|::
name|HourSection
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|QDateTimeParser
operator|::
name|AmPmSection
condition|)
name|ret
operator||=
name|QDateTimeEdit
operator|::
name|AmPmSection
expr_stmt|;
if|if
condition|(
name|s
operator|&
operator|(
name|QDateTimeParser
operator|::
name|DaySection
operator||
name|QDateTimeParser
operator|::
name|DayOfWeekSectionShort
operator||
name|QDateTimeParser
operator|::
name|DayOfWeekSectionLong
operator|)
condition|)
name|ret
operator||=
name|QDateTimeEdit
operator|::
name|DaySection
expr_stmt|;
if|if
condition|(
name|s
operator|&
name|QDateTimeParser
operator|::
name|MonthSection
condition|)
name|ret
operator||=
name|QDateTimeEdit
operator|::
name|MonthSection
expr_stmt|;
if|if
condition|(
name|s
operator|&
operator|(
name|QDateTimeParser
operator|::
name|YearSection
operator||
name|QDateTimeParser
operator|::
name|YearSection2Digits
operator|)
condition|)
name|ret
operator||=
name|QDateTimeEdit
operator|::
name|YearSection
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/*!     \reimp */
DECL|function|paintEvent
name|void
name|QDateTimeEdit
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|calendarPopupEnabled
argument_list|()
condition|)
block|{
name|QAbstractSpinBox
operator|::
name|paintEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
name|QStyleOptionSpinBox
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QStyleOptionComboBox
name|optCombo
decl_stmt|;
name|optCombo
operator|.
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|optCombo
operator|.
name|editable
operator|=
literal|true
expr_stmt|;
name|optCombo
operator|.
name|frame
operator|=
name|opt
operator|.
name|frame
expr_stmt|;
name|optCombo
operator|.
name|subControls
operator|=
name|opt
operator|.
name|subControls
expr_stmt|;
name|optCombo
operator|.
name|activeSubControls
operator|=
name|opt
operator|.
name|activeSubControls
expr_stmt|;
name|optCombo
operator|.
name|state
operator|=
name|opt
operator|.
name|state
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|readOnly
condition|)
block|{
name|optCombo
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
block|}
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|style
argument_list|()
operator|->
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|optCombo
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|getAmPmText
name|QString
name|QDateTimeEditPrivate
operator|::
name|getAmPmText
parameter_list|(
name|AmPm
name|ap
parameter_list|,
name|Case
name|cs
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|ap
operator|==
name|AmText
condition|)
block|{
return|return
operator|(
name|cs
operator|==
name|UpperCase
condition|?
name|QDateTimeEdit
operator|::
name|tr
argument_list|(
literal|"AM"
argument_list|)
else|:
name|QDateTimeEdit
operator|::
name|tr
argument_list|(
literal|"am"
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|cs
operator|==
name|UpperCase
condition|?
name|QDateTimeEdit
operator|::
name|tr
argument_list|(
literal|"PM"
argument_list|)
else|:
name|QDateTimeEdit
operator|::
name|tr
argument_list|(
literal|"pm"
argument_list|)
operator|)
return|;
block|}
block|}
DECL|function|absoluteIndex
name|int
name|QDateTimeEditPrivate
operator|::
name|absoluteIndex
parameter_list|(
name|QDateTimeEdit
operator|::
name|Section
name|s
parameter_list|,
name|int
name|index
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sectionNodes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|convertToPublic
argument_list|(
name|sectionNodes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|)
operator|==
name|s
operator|&&
name|index
operator|--
operator|==
literal|0
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
name|NoSectionIndex
return|;
block|}
DECL|function|absoluteIndex
name|int
name|QDateTimeEditPrivate
operator|::
name|absoluteIndex
parameter_list|(
specifier|const
name|SectionNode
modifier|&
name|s
parameter_list|)
specifier|const
block|{
return|return
name|sectionNodes
operator|.
name|indexOf
argument_list|(
name|s
argument_list|)
return|;
block|}
DECL|function|interpret
name|void
name|QDateTimeEditPrivate
operator|::
name|interpret
parameter_list|(
name|EmitPolicy
name|ep
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|QString
name|tmp
init|=
name|displayText
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
specifier|const
name|QValidator
operator|::
name|State
name|state
init|=
name|q
operator|->
name|validate
argument_list|(
name|tmp
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
name|QValidator
operator|::
name|Acceptable
operator|&&
name|correctionMode
operator|==
name|QAbstractSpinBox
operator|::
name|CorrectToPreviousValue
operator|&&
operator|(
name|state
operator|==
name|QValidator
operator|::
name|Invalid
operator|||
operator|!
operator|(
name|fieldInfo
argument_list|(
name|currentSectionIndex
argument_list|)
operator|&
name|AllowPartial
operator|)
operator|)
condition|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|updateTimeSpec
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QAbstractSpinBoxPrivate
operator|::
name|interpret
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|clearCache
name|void
name|QDateTimeEditPrivate
operator|::
name|clearCache
parameter_list|()
specifier|const
block|{
name|QAbstractSpinBoxPrivate
operator|::
name|clearCache
argument_list|()
expr_stmt|;
name|cachedDay
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/*!     Initialize \a option with the values from this QDataTimeEdit. This method     is useful for subclasses when they need a QStyleOptionSpinBox, but don't want     to fill in all the information themselves.      \sa QStyleOption::initFrom() */
DECL|function|initStyleOption
name|void
name|QDateTimeEdit
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionSpinBox
modifier|*
name|option
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|option
condition|)
return|return;
name|Q_D
argument_list|(
specifier|const
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|QAbstractSpinBox
operator|::
name|initStyleOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|calendarPopupEnabled
argument_list|()
condition|)
block|{
name|option
operator|->
name|subControls
operator|=
name|QStyle
operator|::
name|SC_ComboBoxFrame
operator||
name|QStyle
operator|::
name|SC_ComboBoxEditField
operator||
name|QStyle
operator|::
name|SC_ComboBoxArrow
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|arrowState
operator|==
name|QStyle
operator|::
name|State_Sunken
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
else|else
name|option
operator|->
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
block|}
block|}
DECL|function|init
name|void
name|QDateTimeEditPrivate
operator|::
name|init
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|var
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|var
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Date
case|:
name|value
operator|=
name|QDateTime
argument_list|(
name|var
operator|.
name|toDate
argument_list|()
argument_list|,
name|QDATETIMEEDIT_TIME_MIN
argument_list|)
expr_stmt|;
name|q
operator|->
name|setDisplayFormat
argument_list|(
name|defaultDateFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|sectionNodes
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// ### safeguard for broken locale
name|q
operator|->
name|setDisplayFormat
argument_list|(
name|QLatin1String
argument_list|(
literal|"dd/MM/yyyy"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|DateTime
case|:
name|value
operator|=
name|var
expr_stmt|;
name|q
operator|->
name|setDisplayFormat
argument_list|(
name|defaultDateTimeFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|sectionNodes
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// ### safeguard for broken locale
name|q
operator|->
name|setDisplayFormat
argument_list|(
name|QLatin1String
argument_list|(
literal|"dd/MM/yyyy hh:mm:ss"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Time
case|:
name|value
operator|=
name|QDateTime
argument_list|(
name|QDATETIMEEDIT_DATE_INITIAL
argument_list|,
name|var
operator|.
name|toTime
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|setDisplayFormat
argument_list|(
name|defaultTimeFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|sectionNodes
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// ### safeguard for broken locale
name|q
operator|->
name|setDisplayFormat
argument_list|(
name|QLatin1String
argument_list|(
literal|"hh:mm:ss"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Q_ASSERT_X
argument_list|(
literal|0
argument_list|,
literal|"QDateTimeEditPrivate::init"
argument_list|,
literal|"Internal error"
argument_list|)
expr_stmt|;
break|break;
block|}
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
name|q
operator|->
name|setCalendarPopup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|updateTimeSpec
argument_list|()
expr_stmt|;
name|q
operator|->
name|setInputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferNumbers
argument_list|)
expr_stmt|;
name|setLayoutItemMargins
argument_list|(
name|QStyle
operator|::
name|SE_DateTimeEditLayoutItem
argument_list|)
expr_stmt|;
block|}
DECL|function|_q_resetButton
name|void
name|QDateTimeEditPrivate
operator|::
name|_q_resetButton
parameter_list|()
block|{
name|updateArrow
argument_list|(
name|QStyle
operator|::
name|State_None
argument_list|)
expr_stmt|;
block|}
DECL|function|updateArrow
name|void
name|QDateTimeEditPrivate
operator|::
name|updateArrow
parameter_list|(
name|QStyle
operator|::
name|StateFlag
name|state
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|arrowState
operator|==
name|state
condition|)
return|return;
name|arrowState
operator|=
name|state
expr_stmt|;
if|if
condition|(
name|arrowState
operator|!=
name|QStyle
operator|::
name|State_None
condition|)
name|buttonState
operator||=
name|Mouse
expr_stmt|;
else|else
block|{
name|buttonState
operator|=
literal|0
expr_stmt|;
name|hoverControl
operator|=
name|QStyle
operator|::
name|SC_ComboBoxFrame
expr_stmt|;
block|}
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
comment|/*!     \internal     Returns the hover control at \a pos.     This will update the hoverRect and hoverControl. */
DECL|function|newHoverControl
name|QStyle
operator|::
name|SubControl
name|QDateTimeEditPrivate
operator|::
name|newHoverControl
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
if|if
condition|(
operator|!
name|calendarPopupEnabled
argument_list|()
condition|)
return|return
name|QAbstractSpinBoxPrivate
operator|::
name|newHoverControl
argument_list|(
name|pos
argument_list|)
return|;
name|Q_Q
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|QStyleOptionComboBox
name|optCombo
decl_stmt|;
name|optCombo
operator|.
name|init
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|optCombo
operator|.
name|editable
operator|=
literal|true
expr_stmt|;
name|optCombo
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_All
expr_stmt|;
name|hoverControl
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|optCombo
argument_list|,
name|pos
argument_list|,
name|q
argument_list|)
expr_stmt|;
return|return
name|hoverControl
return|;
block|}
DECL|function|updateEditFieldGeometry
name|void
name|QDateTimeEditPrivate
operator|::
name|updateEditFieldGeometry
parameter_list|()
block|{
if|if
condition|(
operator|!
name|calendarPopupEnabled
argument_list|()
condition|)
block|{
name|QAbstractSpinBoxPrivate
operator|::
name|updateEditFieldGeometry
argument_list|()
expr_stmt|;
return|return;
block|}
name|Q_Q
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|QStyleOptionComboBox
name|optCombo
decl_stmt|;
name|optCombo
operator|.
name|init
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|optCombo
operator|.
name|editable
operator|=
literal|true
expr_stmt|;
name|optCombo
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_ComboBoxEditField
expr_stmt|;
name|edit
operator|->
name|setGeometry
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|optCombo
argument_list|,
name|QStyle
operator|::
name|SC_ComboBoxEditField
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|getZeroVariant
name|QVariant
name|QDateTimeEditPrivate
operator|::
name|getZeroVariant
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|type
operator|==
name|QVariant
operator|::
name|DateTime
argument_list|)
expr_stmt|;
return|return
name|QDateTime
argument_list|(
name|QDATETIMEEDIT_DATE_INITIAL
argument_list|,
name|QTime
argument_list|()
argument_list|,
name|spec
argument_list|)
return|;
block|}
DECL|function|setRange
name|void
name|QDateTimeEditPrivate
operator|::
name|setRange
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|min
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|max
parameter_list|)
block|{
name|QAbstractSpinBoxPrivate
operator|::
name|setRange
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|syncCalendarWidget
argument_list|()
expr_stmt|;
block|}
DECL|function|isSeparatorKey
name|bool
name|QDateTimeEditPrivate
operator|::
name|isSeparatorKey
parameter_list|(
specifier|const
name|QKeyEvent
modifier|*
name|ke
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|ke
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|currentSectionIndex
operator|+
literal|1
operator|<
name|sectionNodes
operator|.
name|size
argument_list|()
operator|&&
name|currentSectionIndex
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|fieldInfo
argument_list|(
name|currentSectionIndex
argument_list|)
operator|&
name|Numeric
condition|)
block|{
if|if
condition|(
name|ke
operator|->
name|text
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|isNumber
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|ke
operator|->
name|text
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|isLetterOrNumber
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|separators
operator|.
name|at
argument_list|(
name|currentSectionIndex
operator|+
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|ke
operator|->
name|text
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|initCalendarPopup
name|void
name|QDateTimeEditPrivate
operator|::
name|initCalendarPopup
parameter_list|(
name|QCalendarWidget
modifier|*
name|cw
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|monthCalendar
condition|)
block|{
name|monthCalendar
operator|=
operator|new
name|QCalendarPopup
argument_list|(
name|q
argument_list|,
name|cw
argument_list|)
expr_stmt|;
name|monthCalendar
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_datetimedit_calendar"
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|monthCalendar
argument_list|,
name|SIGNAL
argument_list|(
name|newDateSelected
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|setDate
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|monthCalendar
argument_list|,
name|SIGNAL
argument_list|(
name|hidingCalendar
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|setDate
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|monthCalendar
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|setDate
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|monthCalendar
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|,
name|monthCalendar
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|monthCalendar
argument_list|,
name|SIGNAL
argument_list|(
name|resetButton
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_resetButton
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cw
condition|)
block|{
name|monthCalendar
operator|->
name|setCalendarWidget
argument_list|(
name|cw
argument_list|)
expr_stmt|;
block|}
name|syncCalendarWidget
argument_list|()
expr_stmt|;
block|}
DECL|function|positionCalendarPopup
name|void
name|QDateTimeEditPrivate
operator|::
name|positionCalendarPopup
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|QPoint
name|pos
init|=
operator|(
name|q
operator|->
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
condition|?
name|q
operator|->
name|rect
argument_list|()
operator|.
name|bottomRight
argument_list|()
else|:
name|q
operator|->
name|rect
argument_list|()
operator|.
name|bottomLeft
argument_list|()
decl_stmt|;
name|QPoint
name|pos2
init|=
operator|(
name|q
operator|->
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
operator|)
condition|?
name|q
operator|->
name|rect
argument_list|()
operator|.
name|topRight
argument_list|()
else|:
name|q
operator|->
name|rect
argument_list|()
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|pos
operator|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|pos2
operator|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|pos2
argument_list|)
expr_stmt|;
name|QSize
name|size
init|=
name|monthCalendar
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|QRect
name|screen
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|pos
argument_list|)
decl_stmt|;
comment|//handle popup falling "off screen"
if|if
condition|(
name|q
operator|->
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
block|{
name|pos
operator|.
name|setX
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|-
name|size
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|pos2
operator|.
name|setX
argument_list|(
name|pos2
operator|.
name|x
argument_list|()
operator|-
name|size
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|.
name|x
argument_list|()
operator|<
name|screen
operator|.
name|left
argument_list|()
condition|)
name|pos
operator|.
name|setX
argument_list|(
name|qMax
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|screen
operator|.
name|left
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|pos
operator|.
name|x
argument_list|()
operator|+
name|size
operator|.
name|width
argument_list|()
operator|>
name|screen
operator|.
name|right
argument_list|()
condition|)
name|pos
operator|.
name|setX
argument_list|(
name|qMax
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|-
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|screen
operator|.
name|right
argument_list|()
operator|-
name|size
operator|.
name|width
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|pos
operator|.
name|x
argument_list|()
operator|+
name|size
operator|.
name|width
argument_list|()
operator|>
name|screen
operator|.
name|right
argument_list|()
condition|)
name|pos
operator|.
name|setX
argument_list|(
name|screen
operator|.
name|right
argument_list|()
operator|-
name|size
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|.
name|setX
argument_list|(
name|qMax
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|screen
operator|.
name|left
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|.
name|y
argument_list|()
operator|+
name|size
operator|.
name|height
argument_list|()
operator|>
name|screen
operator|.
name|bottom
argument_list|()
condition|)
name|pos
operator|.
name|setY
argument_list|(
name|pos2
operator|.
name|y
argument_list|()
operator|-
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|pos
operator|.
name|y
argument_list|()
operator|<
name|screen
operator|.
name|top
argument_list|()
condition|)
name|pos
operator|.
name|setY
argument_list|(
name|screen
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|.
name|y
argument_list|()
operator|<
name|screen
operator|.
name|top
argument_list|()
condition|)
name|pos
operator|.
name|setY
argument_list|(
name|screen
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|.
name|y
argument_list|()
operator|+
name|size
operator|.
name|height
argument_list|()
operator|>
name|screen
operator|.
name|bottom
argument_list|()
condition|)
name|pos
operator|.
name|setY
argument_list|(
name|screen
operator|.
name|bottom
argument_list|()
operator|-
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|monthCalendar
operator|->
name|move
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
DECL|function|calendarPopupEnabled
name|bool
name|QDateTimeEditPrivate
operator|::
name|calendarPopupEnabled
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|calendarPopup
operator|&&
operator|(
name|sections
operator|&
operator|(
name|DateSectionMask
operator|)
operator|)
operator|)
return|;
block|}
DECL|function|syncCalendarWidget
name|void
name|QDateTimeEditPrivate
operator|::
name|syncCalendarWidget
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|monthCalendar
condition|)
block|{
specifier|const
name|bool
name|sb
init|=
name|monthCalendar
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|monthCalendar
operator|->
name|setDateRange
argument_list|(
name|q
operator|->
name|minimumDate
argument_list|()
argument_list|,
name|q
operator|->
name|maximumDate
argument_list|()
argument_list|)
expr_stmt|;
name|monthCalendar
operator|->
name|setDate
argument_list|(
name|q
operator|->
name|date
argument_list|()
argument_list|)
expr_stmt|;
name|monthCalendar
operator|->
name|blockSignals
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|QCalendarPopup
name|QCalendarPopup
operator|::
name|QCalendarPopup
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|QCalendarWidget
modifier|*
name|cw
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|,
name|Qt
operator|::
name|Popup
argument_list|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_WindowPropagation
argument_list|)
expr_stmt|;
name|dateChanged
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|cw
condition|)
block|{
name|verifyCalendarInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCalendarWidget
argument_list|(
name|cw
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|verifyCalendarInstance
name|QCalendarWidget
modifier|*
name|QCalendarPopup
operator|::
name|verifyCalendarInstance
parameter_list|()
block|{
if|if
condition|(
name|calendar
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QCalendarWidget
modifier|*
name|cw
init|=
operator|new
name|QCalendarWidget
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|cw
operator|->
name|setVerticalHeaderFormat
argument_list|(
name|QCalendarWidget
operator|::
name|NoVerticalHeader
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
name|cw
operator|->
name|setHorizontalHeaderFormat
argument_list|(
name|QCalendarWidget
operator|::
name|SingleLetterDayNames
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|setCalendarWidget
argument_list|(
name|cw
argument_list|)
expr_stmt|;
return|return
name|cw
return|;
block|}
else|else
block|{
return|return
name|calendar
operator|.
name|data
argument_list|()
return|;
block|}
block|}
DECL|function|setCalendarWidget
name|void
name|QCalendarPopup
operator|::
name|setCalendarWidget
parameter_list|(
name|QCalendarWidget
modifier|*
name|cw
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|cw
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|widgetLayout
init|=
name|qobject_cast
argument_list|<
name|QVBoxLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|widgetLayout
condition|)
block|{
name|widgetLayout
operator|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|widgetLayout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|widgetLayout
operator|->
name|setSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
operator|delete
name|calendar
operator|.
name|data
argument_list|()
expr_stmt|;
name|calendar
operator|=
name|QPointer
argument_list|<
name|QCalendarWidget
argument_list|>
argument_list|(
name|cw
argument_list|)
expr_stmt|;
name|widgetLayout
operator|->
name|addWidget
argument_list|(
name|cw
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|cw
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|dateSelected
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|cw
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|dateSelected
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|cw
argument_list|,
name|SIGNAL
argument_list|(
name|selectionChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|dateSelectionChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cw
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
DECL|function|setDate
name|void
name|QCalendarPopup
operator|::
name|setDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|oldDate
operator|=
name|date
expr_stmt|;
name|verifyCalendarInstance
argument_list|()
operator|->
name|setSelectedDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
DECL|function|setDateRange
name|void
name|QCalendarPopup
operator|::
name|setDateRange
parameter_list|(
specifier|const
name|QDate
modifier|&
name|min
parameter_list|,
specifier|const
name|QDate
modifier|&
name|max
parameter_list|)
block|{
name|QCalendarWidget
modifier|*
name|cw
init|=
name|verifyCalendarInstance
argument_list|()
decl_stmt|;
name|cw
operator|->
name|setMinimumDate
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|cw
operator|->
name|setMaximumDate
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
DECL|function|mousePressEvent
name|void
name|QCalendarPopup
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QDateTimeEdit
modifier|*
name|dateTime
init|=
name|qobject_cast
argument_list|<
name|QDateTimeEdit
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dateTime
condition|)
block|{
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|opt
operator|.
name|init
argument_list|(
name|dateTime
argument_list|)
expr_stmt|;
name|QRect
name|arrowRect
init|=
name|dateTime
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_ComboBoxArrow
argument_list|,
name|dateTime
argument_list|)
decl_stmt|;
name|arrowRect
operator|.
name|moveTo
argument_list|(
name|dateTime
operator|->
name|mapToGlobal
argument_list|(
name|arrowRect
operator|.
name|topLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|arrowRect
operator|.
name|contains
argument_list|(
name|event
operator|->
name|globalPos
argument_list|()
argument_list|)
operator|||
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoMouseReplay
argument_list|)
expr_stmt|;
block|}
name|QWidget
operator|::
name|mousePressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|function|mouseReleaseEvent
name|void
name|QCalendarPopup
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
block|{
emit|emit
name|resetButton
argument_list|()
emit|;
block|}
DECL|function|event
name|bool
name|QCalendarPopup
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyPress
condition|)
block|{
name|QKeyEvent
modifier|*
name|keyEvent
init|=
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyEvent
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Escape
condition|)
name|dateChanged
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
DECL|function|dateSelectionChanged
name|void
name|QCalendarPopup
operator|::
name|dateSelectionChanged
parameter_list|()
block|{
name|dateChanged
operator|=
literal|true
expr_stmt|;
emit|emit
name|newDateSelected
argument_list|(
name|verifyCalendarInstance
argument_list|()
operator|->
name|selectedDate
argument_list|()
argument_list|)
emit|;
block|}
DECL|function|dateSelected
name|void
name|QCalendarPopup
operator|::
name|dateSelected
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|dateChanged
operator|=
literal|true
expr_stmt|;
emit|emit
name|activated
argument_list|(
name|date
argument_list|)
emit|;
name|close
argument_list|()
expr_stmt|;
block|}
DECL|function|hideEvent
name|void
name|QCalendarPopup
operator|::
name|hideEvent
parameter_list|(
name|QHideEvent
modifier|*
parameter_list|)
block|{
emit|emit
name|resetButton
argument_list|()
emit|;
if|if
condition|(
operator|!
name|dateChanged
condition|)
emit|emit
name|hidingCalendar
argument_list|(
name|oldDate
argument_list|)
emit|;
block|}
name|QT_END_NAMESPACE
end_function
begin_include
include|#
directive|include
file|"moc_qdatetimeedit.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DATETIMEEDIT
end_comment
end_unit
