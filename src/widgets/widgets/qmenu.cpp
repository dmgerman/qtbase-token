begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENU
end_ifndef
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qtimer.h"
end_include
begin_include
include|#
directive|include
file|"qlayout.h"
end_include
begin_include
include|#
directive|include
file|"qpainter.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformtheme.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_OSX
end_ifdef
begin_include
include|#
directive|include
file|"qmacnativewidget_mac.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qaccessible.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_EFFECTS
end_ifndef
begin_include
include|#
directive|include
file|<private/qeffects_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
end_ifndef
begin_include
include|#
directive|include
file|<qwhatsthis.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qmenu_p.h"
end_include
begin_include
include|#
directive|include
file|"qmenubar_p.h"
end_include
begin_include
include|#
directive|include
file|"qwidgetaction.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbutton.h"
end_include
begin_include
include|#
directive|include
file|"qpushbutton.h"
end_include
begin_include
include|#
directive|include
file|"qtooltip.h"
end_include
begin_include
include|#
directive|include
file|<private/qpushbutton_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qaction_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|member|mouseDown
name|QMenu
modifier|*
name|QMenuPrivate
operator|::
name|mouseDown
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function_decl
name|QPointer
argument_list|<
name|QMenu
argument_list|>
name|QMenuPrivate
operator|::
name|previousMouseMenu
parameter_list|(
name|Q_NULLPTR
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|handleEnterLeaveEvents
specifier|static
name|void
name|handleEnterLeaveEvents
parameter_list|(
name|QPointer
argument_list|<
name|QMenu
argument_list|>
modifier|*
name|previous_ptr
parameter_list|,
name|QMenu
modifier|*
name|next
parameter_list|)
block|{
name|QWidget
modifier|*
name|previous
init|=
name|previous_ptr
operator|->
name|data
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
name|next
condition|)
block|{
if|if
condition|(
name|previous
condition|)
block|{
name|QEvent
name|leaveEvent
argument_list|(
name|QEvent
operator|::
name|Leave
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|previous
argument_list|,
operator|&
name|leaveEvent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|next
condition|)
block|{
name|QEvent
name|enterEvent
argument_list|(
name|QEvent
operator|::
name|Enter
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|next
argument_list|,
operator|&
name|enterEvent
argument_list|)
expr_stmt|;
block|}
block|}
operator|*
name|previous_ptr
operator|=
name|next
expr_stmt|;
block|}
end_function
begin_comment
comment|/* QMenu code */
end_comment
begin_comment
comment|// internal class used for the torn off popup
end_comment
begin_class
DECL|class|QTornOffMenu
class|class
name|QTornOffMenu
super|:
specifier|public
name|QMenu
block|{
name|Q_OBJECT
DECL|class|QTornOffMenuPrivate
class|class
name|QTornOffMenuPrivate
super|:
specifier|public
name|QMenuPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QMenu
parameter_list|)
specifier|public
private|:
DECL|function|QTornOffMenuPrivate
name|QTornOffMenuPrivate
parameter_list|(
name|QMenu
modifier|*
name|p
parameter_list|)
member_init_list|:
name|causedMenu
argument_list|(
name|p
argument_list|)
block|{
name|tornoff
operator|=
literal|1
expr_stmt|;
name|causedPopup
operator|.
name|widget
operator|=
literal|0
expr_stmt|;
name|causedPopup
operator|.
name|action
operator|=
operator|(
operator|(
name|QTornOffMenu
operator|*
operator|)
name|p
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|action
expr_stmt|;
name|causedStack
operator|=
operator|(
operator|(
name|QTornOffMenu
operator|*
operator|)
name|p
operator|)
operator|->
name|d_func
argument_list|()
operator|->
name|calcCausedStack
argument_list|()
expr_stmt|;
block|}
name|QVector
argument_list|<
name|QPointer
argument_list|<
name|QWidget
argument_list|>
argument_list|>
name|calcCausedStack
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|causedStack
return|;
block|}
DECL|member|causedMenu
name|QPointer
argument_list|<
name|QMenu
argument_list|>
name|causedMenu
decl_stmt|;
DECL|member|causedStack
name|QVector
argument_list|<
name|QPointer
argument_list|<
name|QWidget
argument_list|>
argument_list|>
name|causedStack
decl_stmt|;
block|}
class|;
public|public:
DECL|function|QTornOffMenu
name|QTornOffMenu
parameter_list|(
name|QMenu
modifier|*
name|p
parameter_list|)
member_init_list|:
name|QMenu
argument_list|(
operator|*
operator|(
operator|new
name|QTornOffMenuPrivate
argument_list|(
name|p
argument_list|)
operator|)
argument_list|)
block|{
name|Q_D
argument_list|(
name|QTornOffMenu
argument_list|)
expr_stmt|;
comment|// make the torn-off menu a sibling of p (instead of a child)
name|QWidget
modifier|*
name|parentWidget
init|=
name|d
operator|->
name|causedStack
operator|.
name|isEmpty
argument_list|()
condition|?
name|p
else|:
name|d
operator|->
name|causedStack
operator|.
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentWidget
operator|->
name|parentWidget
argument_list|()
condition|)
name|parentWidget
operator|=
name|parentWidget
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
name|setParent
argument_list|(
name|parentWidget
argument_list|,
name|Qt
operator|::
name|Window
operator||
name|Qt
operator|::
name|Tool
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeMenu
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|p
operator|->
name|windowTitle
argument_list|()
argument_list|)
expr_stmt|;
name|setEnabled
argument_list|(
name|p
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|//QObject::connect(this, SIGNAL(triggered(QAction*)), this, SLOT(onTrigger(QAction*)));
comment|//QObject::connect(this, SIGNAL(hovered(QAction*)), this, SLOT(onHovered(QAction*)));
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|items
init|=
name|p
operator|->
name|actions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|addAction
argument_list|(
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|syncWithMenu
name|void
name|syncWithMenu
parameter_list|(
name|QMenu
modifier|*
name|menu
parameter_list|,
name|QActionEvent
modifier|*
name|act
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QTornOffMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|menu
operator|!=
name|d
operator|->
name|causedMenu
condition|)
return|return;
if|if
condition|(
name|act
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionAdded
condition|)
block|{
name|insertAction
argument_list|(
name|act
operator|->
name|before
argument_list|()
argument_list|,
name|act
operator|->
name|action
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|act
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionRemoved
condition|)
name|removeAction
argument_list|(
name|act
operator|->
name|action
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|actionEvent
parameter_list|(
name|QActionEvent
modifier|*
name|e
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|QMenu
operator|::
name|actionEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|setFixedSize
argument_list|(
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|onTrigger
name|void
name|onTrigger
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|activateAction
argument_list|(
name|action
argument_list|,
name|QAction
operator|::
name|Trigger
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|function|onHovered
name|void
name|onHovered
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|activateAction
argument_list|(
name|action
argument_list|,
name|QAction
operator|::
name|Hover
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
private|private:
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QTornOffMenu
argument_list|)
friend|friend
class_decl|class
name|QMenuPrivate
class_decl|;
block|}
class|;
end_class
begin_function
DECL|function|init
name|void
name|QMenuPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_CustomWhatsThis
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypePopupMenu
argument_list|)
expr_stmt|;
name|defaultMenuAction
operator|=
name|menuAction
operator|=
operator|new
name|QAction
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|menuAction
operator|->
name|d_func
argument_list|()
operator|->
name|menu
operator|=
name|q
expr_stmt|;
name|q
operator|->
name|setMouseTracking
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_MouseTracking
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_Scrollable
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
condition|)
block|{
name|scroll
operator|=
operator|new
name|QMenuPrivate
operator|::
name|QMenuScroller
expr_stmt|;
name|scroll
operator|->
name|scrollFlags
operator|=
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollNone
expr_stmt|;
block|}
name|setPlatformMenu
argument_list|(
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
operator|->
name|createPlatformMenu
argument_list|()
argument_list|)
expr_stmt|;
name|sloppyState
operator|.
name|initialize
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|delayState
operator|.
name|initialize
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|mousePopupDelay
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_SubMenuPopupDelay
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPlatformMenu
name|void
name|QMenuPrivate
operator|::
name|setPlatformMenu
parameter_list|(
name|QPlatformMenu
modifier|*
name|menu
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|platformMenu
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|platformMenu
operator|->
name|parent
argument_list|()
condition|)
operator|delete
name|platformMenu
operator|.
name|data
argument_list|()
expr_stmt|;
name|platformMenu
operator|=
name|menu
expr_stmt|;
if|if
condition|(
operator|!
name|platformMenu
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|platformMenu
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToShow
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_platformMenuAboutToShow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|platformMenu
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToHide
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToHide
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// forward declare function
end_comment
begin_function_decl
specifier|static
name|void
name|copyActionToPlatformItem
parameter_list|(
specifier|const
name|QAction
modifier|*
name|action
parameter_list|,
name|QPlatformMenuItem
modifier|*
name|item
parameter_list|,
name|QPlatformMenu
modifier|*
name|itemsMenu
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|syncPlatformMenu
name|void
name|QMenuPrivate
operator|::
name|syncPlatformMenu
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|platformMenu
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QPlatformMenuItem
modifier|*
name|beforeItem
init|=
name|Q_NULLPTR
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|actions
init|=
name|q
operator|->
name|actions
argument_list|()
decl_stmt|;
for|for
control|(
name|QList
argument_list|<
name|QAction
operator|*
argument_list|>
operator|::
name|const_reverse_iterator
name|it
init|=
name|actions
operator|.
name|rbegin
argument_list|()
init|,
name|end
init|=
name|actions
operator|.
name|rend
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|QPlatformMenuItem
modifier|*
name|menuItem
init|=
name|platformMenu
operator|->
name|createMenuItem
argument_list|()
decl_stmt|;
name|QAction
modifier|*
name|action
init|=
operator|*
name|it
decl_stmt|;
name|menuItem
operator|->
name|setTag
argument_list|(
cast|reinterpret_cast
argument_list|<
name|quintptr
argument_list|>
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|menuItem
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|()
argument_list|)
argument_list|,
name|action
argument_list|,
name|SLOT
argument_list|(
name|trigger
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|menuItem
argument_list|,
name|SIGNAL
argument_list|(
name|hovered
argument_list|()
argument_list|)
argument_list|,
name|action
argument_list|,
name|SIGNAL
argument_list|(
name|hovered
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|copyActionToPlatformItem
argument_list|(
name|action
argument_list|,
name|menuItem
argument_list|,
name|platformMenu
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|platformMenu
operator|->
name|insertMenuItem
argument_list|(
name|menuItem
argument_list|,
name|beforeItem
argument_list|)
expr_stmt|;
name|beforeItem
operator|=
name|menuItem
expr_stmt|;
block|}
name|platformMenu
operator|->
name|syncSeparatorsCollapsible
argument_list|(
name|collapsibleSeparators
argument_list|)
expr_stmt|;
name|platformMenu
operator|->
name|setEnabled
argument_list|(
name|q
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scrollerHeight
name|int
name|QMenuPrivate
operator|::
name|scrollerHeight
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMenu
argument_list|)
expr_stmt|;
return|return
name|qMax
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuScrollerHeight
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//Windows and KDE allows menus to cover the taskbar, while GNOME and Mac don't
end_comment
begin_function
DECL|function|popupGeometry
name|QRect
name|QMenuPrivate
operator|::
name|popupGeometry
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
operator|&&
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|UseFullScreenForPopupMenu
argument_list|)
operator|.
name|toBool
argument_list|()
condition|)
block|{
return|return
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|widget
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|widget
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|//Windows and KDE allows menus to cover the taskbar, while GNOME and Mac don't
end_comment
begin_function
DECL|function|popupGeometry
name|QRect
name|QMenuPrivate
operator|::
name|popupGeometry
parameter_list|(
name|int
name|screen
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
operator|&&
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|UseFullScreenForPopupMenu
argument_list|)
operator|.
name|toBool
argument_list|()
condition|)
block|{
return|return
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|screen
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|screen
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|calcCausedStack
name|QVector
argument_list|<
name|QPointer
argument_list|<
name|QWidget
argument_list|>
argument_list|>
name|QMenuPrivate
operator|::
name|calcCausedStack
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QPointer
argument_list|<
name|QWidget
argument_list|>
argument_list|>
name|ret
decl_stmt|;
for|for
control|(
name|QWidget
modifier|*
name|widget
init|=
name|causedPopup
operator|.
name|widget
init|;
name|widget
condition|;
control|)
block|{
name|ret
operator|.
name|append
argument_list|(
name|widget
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTornOffMenu
modifier|*
name|qtmenu
init|=
name|qobject_cast
argument_list|<
name|QTornOffMenu
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|ret
operator|+=
name|qtmenu
operator|->
name|d_func
argument_list|()
operator|->
name|causedStack
expr_stmt|;
if|if
condition|(
name|QMenu
modifier|*
name|qmenu
init|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|widget
operator|=
name|qmenu
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|widget
expr_stmt|;
else|else
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|updateActionRects
name|void
name|QMenuPrivate
operator|::
name|updateActionRects
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMenu
argument_list|)
expr_stmt|;
name|updateActionRects
argument_list|(
name|popupGeometry
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateActionRects
name|void
name|QMenuPrivate
operator|::
name|updateActionRects
parameter_list|(
specifier|const
name|QRect
modifier|&
name|screen
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|itemsDirty
condition|)
return|return;
name|q
operator|->
name|ensurePolished
argument_list|()
expr_stmt|;
comment|//let's reinitialize the buffer
name|actionRects
operator|.
name|resize
argument_list|(
name|actions
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|actionRects
operator|.
name|fill
argument_list|(
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|lastVisibleAction
init|=
name|getLastVisibleAction
argument_list|()
decl_stmt|;
name|int
name|max_column_width
init|=
literal|0
decl_stmt|,
name|dh
init|=
name|screen
operator|.
name|height
argument_list|()
decl_stmt|,
name|y
init|=
literal|0
decl_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|q
operator|->
name|style
argument_list|()
decl_stmt|;
name|QStyleOption
name|opt
decl_stmt|;
name|opt
operator|.
name|init
argument_list|(
name|q
argument_list|)
expr_stmt|;
specifier|const
name|int
name|hmargin
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuHMargin
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|,
name|vmargin
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuVMargin
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|,
name|icone
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SmallIconSize
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|;
specifier|const
name|int
name|fw
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuPanelWidth
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|;
specifier|const
name|int
name|deskFw
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuDesktopFrameWidth
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
decl_stmt|;
specifier|const
name|int
name|tearoffHeight
init|=
name|tearoff
condition|?
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuTearoffHeight
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
else|:
literal|0
decl_stmt|;
comment|//for compatibility now - will have to refactor this away
name|tabWidth
operator|=
literal|0
expr_stmt|;
name|maxIconWidth
operator|=
literal|0
expr_stmt|;
name|hasCheckableItems
operator|=
literal|false
expr_stmt|;
name|ncols
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QAction
modifier|*
name|action
init|=
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|->
name|isSeparator
argument_list|()
operator|||
operator|!
name|action
operator|->
name|isVisible
argument_list|()
operator|||
name|widgetItems
operator|.
name|contains
argument_list|(
name|action
argument_list|)
condition|)
continue|continue;
comment|//..and some members
name|hasCheckableItems
operator||=
name|action
operator|->
name|isCheckable
argument_list|()
expr_stmt|;
name|QIcon
name|is
init|=
name|action
operator|->
name|icon
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|is
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|maxIconWidth
operator|=
name|qMax
argument_list|<
name|uint
argument_list|>
argument_list|(
name|maxIconWidth
argument_list|,
name|icone
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
comment|//calculate size
name|QFontMetrics
name|qfm
init|=
name|q
operator|->
name|fontMetrics
argument_list|()
decl_stmt|;
name|bool
name|previousWasSeparator
init|=
literal|true
decl_stmt|;
comment|// this is true to allow removing the leading separators
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|lastVisibleAction
condition|;
name|i
operator|++
control|)
block|{
name|QAction
modifier|*
name|action
init|=
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|isSection
init|=
name|action
operator|->
name|isSeparator
argument_list|()
operator|&&
operator|(
operator|!
name|action
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|action
operator|->
name|icon
argument_list|()
operator|.
name|isNull
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|bool
name|isPlainSeparator
init|=
operator|(
name|isSection
operator|&&
operator|!
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_SupportsSections
argument_list|)
operator|)
operator|||
operator|(
name|action
operator|->
name|isSeparator
argument_list|()
operator|&&
operator|!
name|isSection
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|action
operator|->
name|isVisible
argument_list|()
operator|||
operator|(
name|collapsibleSeparators
operator|&&
name|previousWasSeparator
operator|&&
name|isPlainSeparator
operator|)
condition|)
continue|continue;
comment|// we continue, this action will get an empty QRect
name|previousWasSeparator
operator|=
name|isPlainSeparator
expr_stmt|;
comment|//let the style modify the above size..
name|QStyleOptionMenuItem
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|,
name|action
argument_list|)
expr_stmt|;
specifier|const
name|QFontMetrics
modifier|&
name|fm
init|=
name|opt
operator|.
name|fontMetrics
decl_stmt|;
name|QSize
name|sz
decl_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|widgetItems
operator|.
name|value
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|sz
operator|=
name|w
operator|->
name|sizeHint
argument_list|()
operator|.
name|expandedTo
argument_list|(
name|w
operator|->
name|minimumSize
argument_list|()
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|w
operator|->
name|minimumSizeHint
argument_list|()
argument_list|)
operator|.
name|boundedTo
argument_list|(
name|w
operator|->
name|maximumSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//calc what I think the size is..
if|if
condition|(
name|action
operator|->
name|isSeparator
argument_list|()
condition|)
block|{
name|sz
operator|=
name|QSize
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|s
init|=
name|action
operator|->
name|text
argument_list|()
decl_stmt|;
name|int
name|t
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
operator|-
literal|1
condition|)
block|{
name|tabWidth
operator|=
name|qMax
argument_list|(
name|int
argument_list|(
name|tabWidth
argument_list|)
argument_list|,
name|qfm
operator|.
name|width
argument_list|(
name|s
operator|.
name|mid
argument_list|(
name|t
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|left
argument_list|(
name|t
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
block|}
else|else
block|{
name|QKeySequence
name|seq
init|=
name|action
operator|->
name|shortcut
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|seq
operator|.
name|isEmpty
argument_list|()
condition|)
name|tabWidth
operator|=
name|qMax
argument_list|(
name|int
argument_list|(
name|tabWidth
argument_list|)
argument_list|,
name|qfm
operator|.
name|width
argument_list|(
name|seq
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|NativeText
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|sz
operator|.
name|setWidth
argument_list|(
name|fm
operator|.
name|boundingRect
argument_list|(
name|QRect
argument_list|()
argument_list|,
name|Qt
operator|::
name|TextSingleLine
operator||
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|s
argument_list|)
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|sz
operator|.
name|setHeight
argument_list|(
name|qMax
argument_list|(
name|fm
operator|.
name|height
argument_list|()
argument_list|,
name|qfm
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QIcon
name|is
init|=
name|action
operator|->
name|icon
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|is
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QSize
name|is_sz
init|=
name|QSize
argument_list|(
name|icone
argument_list|,
name|icone
argument_list|)
decl_stmt|;
if|if
condition|(
name|is_sz
operator|.
name|height
argument_list|()
operator|>
name|sz
operator|.
name|height
argument_list|()
condition|)
name|sz
operator|.
name|setHeight
argument_list|(
name|is_sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sz
operator|=
name|style
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_MenuItem
argument_list|,
operator|&
name|opt
argument_list|,
name|sz
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sz
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|max_column_width
operator|=
name|qMax
argument_list|(
name|max_column_width
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
comment|//wrapping
if|if
condition|(
operator|!
name|scroll
operator|&&
name|y
operator|+
name|sz
operator|.
name|height
argument_list|()
operator|+
name|vmargin
operator|>
name|dh
operator|-
operator|(
name|deskFw
operator|*
literal|2
operator|)
condition|)
block|{
name|ncols
operator|++
expr_stmt|;
name|y
operator|=
name|vmargin
expr_stmt|;
block|}
name|y
operator|+=
name|sz
operator|.
name|height
argument_list|()
expr_stmt|;
comment|//update the item
name|actionRects
index|[
name|i
index|]
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|max_column_width
operator|+=
name|tabWidth
expr_stmt|;
comment|//finally add in the tab width
specifier|const
name|int
name|sfcMargin
init|=
name|style
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_Menu
argument_list|,
operator|&
name|opt
argument_list|,
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|,
name|q
argument_list|)
operator|.
name|width
argument_list|()
operator|-
name|QApplication
operator|::
name|globalStrut
argument_list|()
operator|.
name|width
argument_list|()
decl_stmt|;
specifier|const
name|int
name|min_column_width
init|=
name|q
operator|->
name|minimumWidth
argument_list|()
operator|-
operator|(
name|sfcMargin
operator|+
name|leftmargin
operator|+
name|rightmargin
operator|+
literal|2
operator|*
operator|(
name|fw
operator|+
name|hmargin
operator|)
operator|)
decl_stmt|;
name|max_column_width
operator|=
name|qMax
argument_list|(
name|min_column_width
argument_list|,
name|max_column_width
argument_list|)
expr_stmt|;
comment|//calculate position
specifier|const
name|int
name|base_y
init|=
name|vmargin
operator|+
name|fw
operator|+
name|topmargin
operator|+
operator|(
name|scroll
condition|?
name|scroll
operator|->
name|scrollOffset
else|:
literal|0
operator|)
operator|+
name|tearoffHeight
decl_stmt|;
name|int
name|x
init|=
name|hmargin
operator|+
name|fw
operator|+
name|leftmargin
decl_stmt|;
name|y
operator|=
name|base_y
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QRect
modifier|&
name|rect
init|=
name|actionRects
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|scroll
operator|&&
name|y
operator|+
name|rect
operator|.
name|height
argument_list|()
operator|>
name|dh
operator|-
name|deskFw
operator|*
literal|2
condition|)
block|{
name|x
operator|+=
name|max_column_width
operator|+
name|hmargin
expr_stmt|;
name|y
operator|=
name|base_y
expr_stmt|;
block|}
name|rect
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
comment|//move
name|rect
operator|.
name|setWidth
argument_list|(
name|max_column_width
argument_list|)
expr_stmt|;
comment|//uniform width
comment|//we need to update the widgets geometry
if|if
condition|(
name|QWidget
modifier|*
name|widget
init|=
name|widgetItems
operator|.
name|value
argument_list|(
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|widget
operator|->
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setVisible
argument_list|(
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|y
operator|+=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|itemsDirty
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adjustMenuSizeForScreen
name|QSize
name|QMenuPrivate
operator|::
name|adjustMenuSizeForScreen
parameter_list|(
specifier|const
name|QRect
modifier|&
name|screen
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|QSize
name|ret
init|=
name|screen
operator|.
name|size
argument_list|()
decl_stmt|;
name|itemsDirty
operator|=
literal|true
expr_stmt|;
name|updateActionRects
argument_list|(
name|screen
argument_list|)
expr_stmt|;
specifier|const
name|int
name|fw
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuPanelWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setWidth
argument_list|(
name|actionRects
operator|.
name|at
argument_list|(
name|getLastVisibleAction
argument_list|()
argument_list|)
operator|.
name|right
argument_list|()
operator|+
name|fw
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|getLastVisibleAction
name|int
name|QMenuPrivate
operator|::
name|getLastVisibleAction
parameter_list|()
specifier|const
block|{
comment|//let's try to get the last visible action
name|int
name|lastVisibleAction
init|=
name|actions
operator|.
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
for|for
control|(
init|;
name|lastVisibleAction
operator|>=
literal|0
condition|;
operator|--
name|lastVisibleAction
control|)
block|{
specifier|const
name|QAction
modifier|*
name|action
init|=
name|actions
operator|.
name|at
argument_list|(
name|lastVisibleAction
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|->
name|isVisible
argument_list|()
condition|)
block|{
comment|//removing trailing separators
if|if
condition|(
name|action
operator|->
name|isSeparator
argument_list|()
operator|&&
name|collapsibleSeparators
condition|)
continue|continue;
break|break;
block|}
block|}
return|return
name|lastVisibleAction
return|;
block|}
end_function
begin_function
DECL|function|actionRect
name|QRect
name|QMenuPrivate
operator|::
name|actionRect
parameter_list|(
name|QAction
modifier|*
name|act
parameter_list|)
specifier|const
block|{
name|int
name|index
init|=
name|actions
operator|.
name|indexOf
argument_list|(
name|act
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
return|return
name|QRect
argument_list|()
return|;
name|updateActionRects
argument_list|()
expr_stmt|;
comment|//we found the action
return|return
name|actionRects
operator|.
name|at
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hideUpToMenuBar
name|void
name|QMenuPrivate
operator|::
name|hideUpToMenuBar
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|bool
name|fadeMenus
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_FadeOutOnHide
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tornoff
condition|)
block|{
name|QWidget
modifier|*
name|caused
init|=
name|causedPopup
operator|.
name|widget
decl_stmt|;
name|hideMenu
argument_list|(
name|q
argument_list|)
expr_stmt|;
comment|//hide after getting causedPopup
while|while
condition|(
name|caused
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
if|if
condition|(
name|QMenuBar
modifier|*
name|mb
init|=
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|caused
argument_list|)
condition|)
block|{
name|mb
operator|->
name|d_func
argument_list|()
operator|->
name|setCurrentAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mb
operator|->
name|d_func
argument_list|()
operator|->
name|setKeyboardMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|caused
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
endif|#
directive|endif
if|if
condition|(
name|QMenu
modifier|*
name|m
init|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|caused
argument_list|)
condition|)
block|{
name|caused
operator|=
name|m
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|widget
expr_stmt|;
if|if
condition|(
operator|!
name|m
operator|->
name|d_func
argument_list|()
operator|->
name|tornoff
condition|)
name|hideMenu
argument_list|(
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fadeMenus
condition|)
comment|// Mac doesn't clear the action until after hidden.
name|m
operator|->
name|d_func
argument_list|()
operator|->
name|setCurrentAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|caused
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
name|setCurrentAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hideMenu
name|void
name|QMenuPrivate
operator|::
name|hideMenu
parameter_list|(
name|QMenu
modifier|*
name|menu
parameter_list|)
block|{
if|if
condition|(
operator|!
name|menu
condition|)
return|return;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_EFFECTS
argument_list|)
name|QSignalBlocker
name|blocker
argument_list|(
name|menu
argument_list|)
decl_stmt|;
name|aboutToHide
operator|=
literal|true
expr_stmt|;
comment|// Flash item which is about to trigger (if any).
if|if
condition|(
name|menu
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_FlashTriggeredItem
argument_list|)
operator|&&
name|currentAction
operator|&&
name|currentAction
operator|==
name|actionAboutToTrigger
operator|&&
name|menu
operator|->
name|actions
argument_list|()
operator|.
name|contains
argument_list|(
name|currentAction
argument_list|)
condition|)
block|{
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QAction
modifier|*
name|activeAction
init|=
name|currentAction
decl_stmt|;
name|menu
operator|->
name|setActiveAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|60
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
comment|// Select and wait 20 ms.
name|menu
operator|->
name|setActiveAction
argument_list|(
name|activeAction
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|20
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
name|aboutToHide
operator|=
literal|false
expr_stmt|;
name|blocker
operator|.
name|unblock
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_EFFECTS
if|if
condition|(
name|activeMenu
operator|==
name|menu
condition|)
name|activeMenu
operator|=
literal|0
expr_stmt|;
name|menu
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|action
operator|=
literal|0
expr_stmt|;
name|menu
operator|->
name|close
argument_list|()
expr_stmt|;
name|menu
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|widget
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|previousMouseMenu
operator|.
name|data
argument_list|()
operator|==
name|menu
condition|)
name|handleEnterLeaveEvents
argument_list|(
operator|&
name|previousMouseMenu
argument_list|,
name|Q_NULLPTR
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|popupAction
name|void
name|QMenuPrivate
operator|::
name|popupAction
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|,
name|int
name|delay
parameter_list|,
name|bool
name|activateFirst
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
condition|)
block|{
if|if
condition|(
name|action
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|delay
condition|)
name|q
operator|->
name|internalDelayedPopup
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|action
operator|->
name|menu
argument_list|()
operator|&&
operator|!
name|action
operator|->
name|menu
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
name|delayState
operator|.
name|start
argument_list|(
name|delay
argument_list|,
name|action
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|action
operator|->
name|menu
argument_list|()
condition|)
name|delayState
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|activateFirst
operator|&&
name|action
operator|->
name|menu
argument_list|()
condition|)
name|action
operator|->
name|menu
argument_list|()
operator|->
name|d_func
argument_list|()
operator|->
name|setFirstActionActive
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|QMenu
modifier|*
name|menu
init|=
name|activeMenu
condition|)
block|{
comment|//hide the current item
name|hideMenu
argument_list|(
name|menu
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setSyncAction
name|void
name|QMenuPrivate
operator|::
name|setSyncAction
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|current
init|=
name|currentAction
decl_stmt|;
if|if
condition|(
name|current
operator|&&
operator|(
operator|!
name|current
operator|->
name|isEnabled
argument_list|()
operator|||
name|current
operator|->
name|menu
argument_list|()
operator|||
name|current
operator|->
name|isSeparator
argument_list|()
operator|)
condition|)
name|current
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|QWidget
modifier|*
name|caused
init|=
name|q
init|;
name|caused
condition|;
control|)
block|{
if|if
condition|(
name|QMenu
modifier|*
name|m
init|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|caused
argument_list|)
condition|)
block|{
name|caused
operator|=
name|m
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|widget
expr_stmt|;
if|if
condition|(
name|m
operator|->
name|d_func
argument_list|()
operator|->
name|eventLoop
condition|)
name|m
operator|->
name|d_func
argument_list|()
operator|->
name|syncAction
operator|=
name|current
expr_stmt|;
comment|// synchronous operation
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setFirstActionActive
name|void
name|QMenuPrivate
operator|::
name|setFirstActionActive
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|updateActionRects
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|saccum
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QRect
modifier|&
name|rect
init|=
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|scroll
operator|&&
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuScroller
operator|::
name|ScrollUp
condition|)
block|{
name|saccum
operator|-=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|saccum
operator|>
name|scroll
operator|->
name|scrollOffset
operator|-
name|scrollerHeight
argument_list|()
condition|)
continue|continue;
block|}
name|QAction
modifier|*
name|act
init|=
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|act
operator|->
name|isSeparator
argument_list|()
operator|&&
operator|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_AllowActiveAndDisabled
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|||
name|act
operator|->
name|isEnabled
argument_list|()
operator|)
condition|)
block|{
name|setCurrentAction
argument_list|(
name|act
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_comment
comment|// popup == -1 means do not popup, 0 means immediately, others mean use a timer
end_comment
begin_function
DECL|function|setCurrentAction
name|void
name|QMenuPrivate
operator|::
name|setCurrentAction
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|,
name|int
name|popup
parameter_list|,
name|SelectionReason
name|reason
parameter_list|,
name|bool
name|activateFirst
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|tearoffHighlighted
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|action
operator|&&
operator|(
name|action
operator|->
name|isSeparator
argument_list|()
operator|||
operator|(
operator|!
name|action
operator|->
name|isEnabled
argument_list|()
operator|&&
operator|!
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_AllowActiveAndDisabled
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|)
operator|)
condition|)
name|action
operator|=
name|Q_NULLPTR
expr_stmt|;
comment|// Reselect the currently active action in case mouse moved over other menu items when
comment|// moving from sub menu action to sub menu (QTBUG-20094).
if|if
condition|(
name|reason
operator|!=
name|SelectedFromKeyboard
condition|)
block|{
if|if
condition|(
name|QMenu
modifier|*
name|menu
init|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|causedPopup
operator|.
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|causedPopup
operator|.
name|action
operator|&&
name|menu
operator|->
name|d_func
argument_list|()
operator|->
name|activeMenu
operator|==
name|q
condition|)
comment|// Reselect parent menu action only if mouse is over a menu and parent menu action is not already selected (QTBUG-47987)
if|if
condition|(
name|hasReceievedEnter
operator|&&
name|menu
operator|->
name|d_func
argument_list|()
operator|->
name|currentAction
operator|!=
name|causedPopup
operator|.
name|action
condition|)
name|menu
operator|->
name|d_func
argument_list|()
operator|->
name|setCurrentAction
argument_list|(
name|causedPopup
operator|.
name|action
argument_list|,
literal|0
argument_list|,
name|reason
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|currentAction
condition|)
name|q
operator|->
name|update
argument_list|(
name|actionRect
argument_list|(
name|currentAction
argument_list|)
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|hideActiveMenu
init|=
name|activeMenu
decl_stmt|;
name|QAction
modifier|*
name|previousAction
init|=
name|currentAction
decl_stmt|;
name|currentAction
operator|=
name|action
expr_stmt|;
if|if
condition|(
name|action
condition|)
block|{
if|if
condition|(
operator|!
name|action
operator|->
name|isSeparator
argument_list|()
condition|)
block|{
name|activateAction
argument_list|(
name|action
argument_list|,
name|QAction
operator|::
name|Hover
argument_list|)
expr_stmt|;
if|if
condition|(
name|popup
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// if the menu is visible then activate the required action,
comment|// otherwise we just mark the action as currentAction
comment|// and activate it when the menu will be popuped.
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
condition|)
name|popupAction
argument_list|(
name|currentAction
argument_list|,
name|popup
argument_list|,
name|activateFirst
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|update
argument_list|(
name|actionRect
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|reason
operator|==
name|SelectedFromKeyboard
condition|)
block|{
name|QWidget
modifier|*
name|widget
init|=
name|widgetItems
operator|.
name|value
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
condition|)
block|{
if|if
condition|(
name|widget
operator|->
name|focusPolicy
argument_list|()
operator|!=
name|Qt
operator|::
name|NoFocus
condition|)
name|widget
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|TabFocusReason
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//when the action has no QWidget, the QMenu itself should
comment|// get the focus
comment|// Since the menu is a pop-up, it uses the popup reason.
if|if
condition|(
operator|!
name|q
operator|->
name|hasFocus
argument_list|()
condition|)
block|{
name|q
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|PopupFocusReason
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_STATUSTIP
block|}
elseif|else
if|if
condition|(
name|previousAction
condition|)
block|{
name|previousAction
operator|->
name|d_func
argument_list|()
operator|->
name|showStatusText
argument_list|(
name|topCausedWidget
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|hideActiveMenu
operator|&&
name|previousAction
operator|!=
name|currentAction
condition|)
block|{
if|if
condition|(
name|popup
operator|==
operator|-
literal|1
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_EFFECTS
comment|// kill any running effect
name|qFadeEffect
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qScrollEffect
argument_list|(
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|hideMenu
argument_list|(
name|hideActiveMenu
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|currentAction
operator|||
operator|!
name|currentAction
operator|->
name|menu
argument_list|()
condition|)
block|{
name|sloppyState
operator|.
name|startTimerIfNotRunning
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QMenuSloppyState
operator|::
name|reset
parameter_list|()
block|{
name|m_enabled
operator|=
literal|false
expr_stmt|;
name|m_first_mouse
operator|=
literal|true
expr_stmt|;
name|m_init_guard
operator|=
literal|false
expr_stmt|;
name|m_uni_dir_discarded_count
operator|=
literal|0
expr_stmt|;
name|m_time
operator|.
name|stop
argument_list|()
expr_stmt|;
name|m_reset_action
operator|=
name|Q_NULLPTR
expr_stmt|;
name|m_origin_action
operator|=
name|Q_NULLPTR
expr_stmt|;
name|m_action_rect
operator|=
name|QRect
argument_list|()
expr_stmt|;
name|m_previous_point
operator|=
name|QPointF
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_sub_menu
condition|)
block|{
name|QMenuPrivate
operator|::
name|get
argument_list|(
name|m_sub_menu
argument_list|)
operator|->
name|sloppyState
operator|.
name|m_parent
operator|=
name|Q_NULLPTR
expr_stmt|;
name|m_sub_menu
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|enter
name|void
name|QMenuSloppyState
operator|::
name|enter
parameter_list|()
block|{
name|QMenuPrivate
modifier|*
name|menuPriv
init|=
name|QMenuPrivate
operator|::
name|get
argument_list|(
name|m_menu
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_discard_state_when_entering_parent
operator|&&
name|m_sub_menu
operator|==
name|menuPriv
operator|->
name|activeMenu
condition|)
block|{
name|menuPriv
operator|->
name|hideMenu
argument_list|(
name|m_sub_menu
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|m_parent
condition|)
name|m_parent
operator|->
name|childEnter
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|childLeave
name|void
name|QMenuSloppyState
operator|::
name|childLeave
parameter_list|()
block|{
if|if
condition|(
name|m_enabled
operator|&&
operator|!
name|QMenuPrivate
operator|::
name|get
argument_list|(
name|m_menu
argument_list|)
operator|->
name|hasReceievedEnter
condition|)
block|{
name|startTimer
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_parent
condition|)
name|m_parent
operator|->
name|childLeave
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setSubMenuPopup
name|void
name|QMenuSloppyState
operator|::
name|setSubMenuPopup
parameter_list|(
specifier|const
name|QRect
modifier|&
name|actionRect
parameter_list|,
name|QAction
modifier|*
name|resetAction
parameter_list|,
name|QMenu
modifier|*
name|subMenu
parameter_list|)
block|{
name|m_enabled
operator|=
literal|true
expr_stmt|;
name|m_init_guard
operator|=
literal|true
expr_stmt|;
name|m_time
operator|.
name|stop
argument_list|()
expr_stmt|;
name|m_action_rect
operator|=
name|actionRect
expr_stmt|;
name|m_sub_menu
operator|=
name|subMenu
expr_stmt|;
name|QMenuPrivate
operator|::
name|get
argument_list|(
name|subMenu
argument_list|)
operator|->
name|sloppyState
operator|.
name|m_parent
operator|=
name|this
expr_stmt|;
name|m_reset_action
operator|=
name|resetAction
expr_stmt|;
name|m_origin_action
operator|=
name|resetAction
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasParentActiveDelayTimer
name|bool
name|QMenuSloppyState
operator|::
name|hasParentActiveDelayTimer
parameter_list|()
specifier|const
block|{
return|return
name|m_parent
operator|&&
name|m_parent
operator|->
name|m_menu
operator|&&
name|QMenuPrivate
operator|::
name|get
argument_list|(
name|m_parent
operator|->
name|m_menu
argument_list|)
operator|->
name|delayState
operator|.
name|timer
operator|.
name|isActive
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|ResetOnDestroy
class|class
name|ResetOnDestroy
block|{
public|public:
DECL|function|ResetOnDestroy
name|ResetOnDestroy
parameter_list|(
name|QMenuSloppyState
modifier|*
name|sloppyState
parameter_list|,
name|bool
modifier|*
name|guard
parameter_list|)
member_init_list|:
name|toReset
argument_list|(
name|sloppyState
argument_list|)
member_init_list|,
name|guard
argument_list|(
name|guard
argument_list|)
block|{
operator|*
name|guard
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|~ResetOnDestroy
name|~
name|ResetOnDestroy
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|*
name|guard
condition|)
name|toReset
operator|->
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|member|toReset
name|QMenuSloppyState
modifier|*
name|toReset
decl_stmt|;
DECL|member|guard
name|bool
modifier|*
name|guard
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|timeout
name|void
name|QMenuSloppyState
operator|::
name|timeout
parameter_list|()
block|{
name|QMenuPrivate
modifier|*
name|menu_priv
init|=
name|QMenuPrivate
operator|::
name|get
argument_list|(
name|m_menu
argument_list|)
decl_stmt|;
if|if
condition|(
name|menu_priv
operator|->
name|currentAction
operator|==
name|m_reset_action
operator|&&
name|menu_priv
operator|->
name|hasReceievedEnter
operator|&&
operator|(
name|menu_priv
operator|->
name|currentAction
operator|&&
name|menu_priv
operator|->
name|currentAction
operator|->
name|menu
argument_list|()
operator|==
name|menu_priv
operator|->
name|activeMenu
operator|)
condition|)
block|{
return|return;
block|}
name|ResetOnDestroy
name|resetState
argument_list|(
name|this
argument_list|,
operator|&
name|m_init_guard
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasParentActiveDelayTimer
argument_list|()
operator|||
operator|!
name|m_menu
operator|||
operator|!
name|m_menu
operator|->
name|isVisible
argument_list|()
condition|)
return|return;
if|if
condition|(
name|m_sub_menu
condition|)
name|menu_priv
operator|->
name|hideMenu
argument_list|(
name|m_sub_menu
argument_list|)
expr_stmt|;
if|if
condition|(
name|menu_priv
operator|->
name|hasReceievedEnter
condition|)
name|menu_priv
operator|->
name|setCurrentAction
argument_list|(
name|m_reset_action
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|menu_priv
operator|->
name|setCurrentAction
argument_list|(
name|Q_NULLPTR
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//return the top causedPopup.widget that is not a QMenu
end_comment
begin_function
DECL|function|topCausedWidget
name|QWidget
modifier|*
name|QMenuPrivate
operator|::
name|topCausedWidget
parameter_list|()
specifier|const
block|{
name|QWidget
modifier|*
name|top
init|=
name|causedPopup
operator|.
name|widget
decl_stmt|;
while|while
condition|(
name|QMenu
modifier|*
name|m
init|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|top
argument_list|)
condition|)
name|top
operator|=
name|m
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|widget
expr_stmt|;
return|return
name|top
return|;
block|}
end_function
begin_function
DECL|function|actionAt
name|QAction
modifier|*
name|QMenuPrivate
operator|::
name|actionAt
parameter_list|(
name|QPoint
name|p
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|q_func
argument_list|()
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
comment|//sanity check
return|return
literal|0
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actionRects
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
return|return
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setOverrideMenuAction
name|void
name|QMenuPrivate
operator|::
name|setOverrideMenuAction
parameter_list|(
name|QAction
modifier|*
name|a
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
name|menuAction
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_overrideMenuActionDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
condition|)
block|{
name|menuAction
operator|=
name|a
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|a
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_overrideMenuActionDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//we revert back to the default action created by the QMenu itself
name|menuAction
operator|=
name|defaultMenuAction
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_overrideMenuActionDestroyed
name|void
name|QMenuPrivate
operator|::
name|_q_overrideMenuActionDestroyed
parameter_list|()
block|{
name|menuAction
operator|=
name|defaultMenuAction
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateLayoutDirection
name|void
name|QMenuPrivate
operator|::
name|updateLayoutDirection
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
comment|//we need to mimic the cause of the popup's layout direction
comment|//to allow setting it on a mainwindow for example
comment|//we call setLayoutDirection_helper to not overwrite a user-defined value
if|if
condition|(
operator|!
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_SetLayoutDirection
argument_list|)
condition|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|causedPopup
operator|.
name|widget
condition|)
name|setLayoutDirection_helper
argument_list|(
name|w
operator|->
name|layoutDirection
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|q
operator|->
name|parentWidget
argument_list|()
condition|)
name|setLayoutDirection_helper
argument_list|(
name|w
operator|->
name|layoutDirection
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|setLayoutDirection_helper
argument_list|(
name|QApplication
operator|::
name|layoutDirection
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the action associated with this menu. */
end_comment
begin_function
DECL|function|menuAction
name|QAction
modifier|*
name|QMenu
operator|::
name|menuAction
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|menuAction
return|;
block|}
end_function
begin_comment
comment|/*!   \property QMenu::title   \brief The title of the menu    This is equivalent to the QAction::text property of the menuAction().    By default, this property contains an empty string. */
end_comment
begin_function
DECL|function|title
name|QString
name|QMenu
operator|::
name|title
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|menuAction
operator|->
name|text
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setTitle
name|void
name|QMenu
operator|::
name|setTitle
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|menuAction
operator|->
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QMenu::icon    \brief The icon of the menu    This is equivalent to the QAction::icon property of the menuAction().    By default, if no icon is explicitly set, this property contains a null icon. */
end_comment
begin_function
DECL|function|icon
name|QIcon
name|QMenu
operator|::
name|icon
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|menuAction
operator|->
name|icon
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setIcon
name|void
name|QMenu
operator|::
name|setIcon
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|menuAction
operator|->
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//actually performs the scrolling
end_comment
begin_function
DECL|function|scrollMenu
name|void
name|QMenuPrivate
operator|::
name|scrollMenu
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|,
name|QMenuScroller
operator|::
name|ScrollLocation
name|location
parameter_list|,
name|bool
name|active
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scroll
operator|||
operator|!
name|scroll
operator|->
name|scrollFlags
condition|)
return|return;
name|updateActionRects
argument_list|()
expr_stmt|;
name|int
name|newOffset
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|topScroll
init|=
operator|(
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuScroller
operator|::
name|ScrollUp
operator|)
condition|?
name|scrollerHeight
argument_list|()
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|botScroll
init|=
operator|(
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuScroller
operator|::
name|ScrollDown
operator|)
condition|?
name|scrollerHeight
argument_list|()
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|vmargin
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuVMargin
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
specifier|const
name|int
name|fw
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuPanelWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|==
name|QMenuScroller
operator|::
name|ScrollTop
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|saccum
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|action
condition|)
block|{
name|newOffset
operator|=
name|topScroll
operator|-
name|saccum
expr_stmt|;
break|break;
block|}
name|saccum
operator|+=
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|saccum
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|saccum
operator|+=
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|action
condition|)
block|{
if|if
condition|(
name|location
operator|==
name|QMenuScroller
operator|::
name|ScrollCenter
condition|)
name|newOffset
operator|=
operator|(
operator|(
name|q
operator|->
name|height
argument_list|()
operator|/
literal|2
operator|)
operator|-
name|botScroll
operator|)
operator|-
operator|(
name|saccum
operator|-
name|topScroll
operator|)
expr_stmt|;
else|else
name|newOffset
operator|=
operator|(
name|q
operator|->
name|height
argument_list|()
operator|-
name|botScroll
operator|)
operator|-
name|saccum
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|newOffset
condition|)
name|newOffset
operator|-=
name|fw
operator|*
literal|2
expr_stmt|;
block|}
comment|//figure out which scroll flags
name|uint
name|newScrollFlags
init|=
name|QMenuScroller
operator|::
name|ScrollNone
decl_stmt|;
if|if
condition|(
name|newOffset
operator|<
literal|0
condition|)
comment|//easy and cheap one
name|newScrollFlags
operator||=
name|QMenuScroller
operator|::
name|ScrollUp
expr_stmt|;
name|int
name|saccum
init|=
name|newOffset
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actionRects
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|saccum
operator|+=
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|saccum
operator|>
name|q
operator|->
name|height
argument_list|()
condition|)
block|{
name|newScrollFlags
operator||=
name|QMenuScroller
operator|::
name|ScrollDown
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|newScrollFlags
operator|&
name|QMenuScroller
operator|::
name|ScrollDown
operator|)
operator|&&
operator|(
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuScroller
operator|::
name|ScrollDown
operator|)
condition|)
block|{
name|newOffset
operator|=
name|q
operator|->
name|height
argument_list|()
operator|-
operator|(
name|saccum
operator|-
name|newOffset
operator|)
operator|-
name|fw
operator|*
literal|2
operator|-
name|vmargin
expr_stmt|;
comment|//last item at bottom
block|}
if|if
condition|(
operator|!
operator|(
name|newScrollFlags
operator|&
name|QMenuScroller
operator|::
name|ScrollUp
operator|)
operator|&&
operator|(
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuScroller
operator|::
name|ScrollUp
operator|)
condition|)
block|{
name|newOffset
operator|=
literal|0
expr_stmt|;
comment|//first item at top
block|}
if|if
condition|(
name|newScrollFlags
operator|&
name|QMenuScroller
operator|::
name|ScrollUp
condition|)
name|newOffset
operator|-=
name|vmargin
expr_stmt|;
name|QRect
name|screen
init|=
name|popupGeometry
argument_list|(
name|q
argument_list|)
decl_stmt|;
specifier|const
name|int
name|desktopFrame
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuDesktopFrameWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|height
argument_list|()
operator|<
name|screen
operator|.
name|height
argument_list|()
operator|-
operator|(
name|desktopFrame
operator|*
literal|2
operator|)
operator|-
literal|1
condition|)
block|{
name|QRect
name|geom
init|=
name|q
operator|->
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|newOffset
operator|>
name|scroll
operator|->
name|scrollOffset
operator|&&
operator|(
name|scroll
operator|->
name|scrollFlags
operator|&
name|newScrollFlags
operator|&
name|QMenuScroller
operator|::
name|ScrollUp
operator|)
condition|)
block|{
comment|//scroll up
specifier|const
name|int
name|newHeight
init|=
name|geom
operator|.
name|height
argument_list|()
operator|-
operator|(
name|newOffset
operator|-
name|scroll
operator|->
name|scrollOffset
operator|)
decl_stmt|;
if|if
condition|(
name|newHeight
operator|>
name|geom
operator|.
name|height
argument_list|()
condition|)
name|geom
operator|.
name|setHeight
argument_list|(
name|newHeight
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scroll
operator|->
name|scrollFlags
operator|&
name|newScrollFlags
operator|&
name|QMenuScroller
operator|::
name|ScrollDown
condition|)
block|{
name|int
name|newTop
init|=
name|geom
operator|.
name|top
argument_list|()
operator|+
operator|(
name|newOffset
operator|-
name|scroll
operator|->
name|scrollOffset
operator|)
decl_stmt|;
if|if
condition|(
name|newTop
operator|<
name|desktopFrame
operator|+
name|screen
operator|.
name|top
argument_list|()
condition|)
name|newTop
operator|=
name|desktopFrame
operator|+
name|screen
operator|.
name|top
argument_list|()
expr_stmt|;
if|if
condition|(
name|newTop
operator|<
name|geom
operator|.
name|top
argument_list|()
condition|)
block|{
name|geom
operator|.
name|setTop
argument_list|(
name|newTop
argument_list|)
expr_stmt|;
name|newOffset
operator|=
literal|0
expr_stmt|;
name|newScrollFlags
operator|&=
operator|~
name|QMenuScroller
operator|::
name|ScrollUp
expr_stmt|;
block|}
block|}
if|if
condition|(
name|geom
operator|.
name|bottom
argument_list|()
operator|>
name|screen
operator|.
name|bottom
argument_list|()
operator|-
name|desktopFrame
condition|)
name|geom
operator|.
name|setBottom
argument_list|(
name|screen
operator|.
name|bottom
argument_list|()
operator|-
name|desktopFrame
argument_list|)
expr_stmt|;
if|if
condition|(
name|geom
operator|.
name|top
argument_list|()
operator|<
name|desktopFrame
operator|+
name|screen
operator|.
name|top
argument_list|()
condition|)
name|geom
operator|.
name|setTop
argument_list|(
name|desktopFrame
operator|+
name|screen
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|geom
operator|!=
name|q
operator|->
name|geometry
argument_list|()
condition|)
block|{
if|#
directive|if
literal|0
block|if (newScrollFlags& QMenuScroller::ScrollDown&&                q->geometry().top() - geom.top()>= -newOffset)                 newScrollFlags&= ~QMenuScroller::ScrollDown;
endif|#
directive|endif
name|q
operator|->
name|setGeometry
argument_list|(
name|geom
argument_list|)
expr_stmt|;
block|}
block|}
comment|//actually update flags
specifier|const
name|int
name|delta
init|=
name|qMin
argument_list|(
literal|0
argument_list|,
name|newOffset
argument_list|)
operator|-
name|scroll
operator|->
name|scrollOffset
decl_stmt|;
comment|//make sure the new offset is always negative
if|if
condition|(
operator|!
name|itemsDirty
operator|&&
name|delta
condition|)
block|{
comment|//we've scrolled so we need to update the action rects
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actionRects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QRect
modifier|&
name|current
init|=
name|actionRects
index|[
name|i
index|]
decl_stmt|;
name|current
operator|.
name|moveTop
argument_list|(
name|current
operator|.
name|top
argument_list|()
operator|+
name|delta
argument_list|)
expr_stmt|;
comment|//we need to update the widgets geometry
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|widgetItems
operator|.
name|value
argument_list|(
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|w
operator|->
name|setGeometry
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
name|scroll
operator|->
name|scrollOffset
operator|+=
name|delta
expr_stmt|;
name|scroll
operator|->
name|scrollFlags
operator|=
name|newScrollFlags
expr_stmt|;
if|if
condition|(
name|active
condition|)
name|setCurrentAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
comment|//issue an update so we see all the new state..
block|}
end_function
begin_function
DECL|function|scrollMenu
name|void
name|QMenuPrivate
operator|::
name|scrollMenu
parameter_list|(
name|QMenuScroller
operator|::
name|ScrollLocation
name|location
parameter_list|,
name|bool
name|active
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|updateActionRects
argument_list|()
expr_stmt|;
if|if
condition|(
name|location
operator|==
name|QMenuScroller
operator|::
name|ScrollBottom
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|actions
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QAction
modifier|*
name|act
init|=
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|act
operator|->
name|isSeparator
argument_list|()
operator|&&
operator|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_AllowActiveAndDisabled
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|||
name|act
operator|->
name|isEnabled
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollDown
condition|)
name|scrollMenu
argument_list|(
name|act
argument_list|,
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollBottom
argument_list|,
name|active
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|active
condition|)
name|setCurrentAction
argument_list|(
name|act
argument_list|,
comment|/*popup*/
operator|-
literal|1
argument_list|,
name|QMenuPrivate
operator|::
name|SelectedFromKeyboard
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|location
operator|==
name|QMenuScroller
operator|::
name|ScrollTop
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QAction
modifier|*
name|act
init|=
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|act
operator|->
name|isSeparator
argument_list|()
operator|&&
operator|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_AllowActiveAndDisabled
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|||
name|act
operator|->
name|isEnabled
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollUp
condition|)
name|scrollMenu
argument_list|(
name|act
argument_list|,
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollTop
argument_list|,
name|active
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|active
condition|)
name|setCurrentAction
argument_list|(
name|act
argument_list|,
comment|/*popup*/
operator|-
literal|1
argument_list|,
name|QMenuPrivate
operator|::
name|SelectedFromKeyboard
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|//only directional
end_comment
begin_function
DECL|function|scrollMenu
name|void
name|QMenuPrivate
operator|::
name|scrollMenu
parameter_list|(
name|QMenuScroller
operator|::
name|ScrollDirection
name|direction
parameter_list|,
name|bool
name|page
parameter_list|,
name|bool
name|active
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scroll
operator|||
operator|!
operator|(
name|scroll
operator|->
name|scrollFlags
operator|&
name|direction
operator|)
condition|)
comment|//not really possible...
return|return;
name|updateActionRects
argument_list|()
expr_stmt|;
specifier|const
name|int
name|topScroll
init|=
operator|(
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuScroller
operator|::
name|ScrollUp
operator|)
condition|?
name|scrollerHeight
argument_list|()
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|botScroll
init|=
operator|(
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuScroller
operator|::
name|ScrollDown
operator|)
condition|?
name|scrollerHeight
argument_list|()
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|vmargin
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuVMargin
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
specifier|const
name|int
name|fw
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuPanelWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
specifier|const
name|int
name|offset
init|=
name|topScroll
condition|?
name|topScroll
operator|-
name|vmargin
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|direction
operator|==
name|QMenuScroller
operator|::
name|ScrollUp
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|saccum
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|saccum
operator|-=
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|saccum
operator|<=
name|scroll
operator|->
name|scrollOffset
operator|-
name|offset
condition|)
block|{
name|scrollMenu
argument_list|(
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|page
condition|?
name|QMenuScroller
operator|::
name|ScrollBottom
else|:
name|QMenuScroller
operator|::
name|ScrollTop
argument_list|,
name|active
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
name|QMenuScroller
operator|::
name|ScrollDown
condition|)
block|{
name|bool
name|scrolled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|saccum
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|int
name|iHeight
init|=
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|height
argument_list|()
decl_stmt|;
name|saccum
operator|-=
name|iHeight
expr_stmt|;
if|if
condition|(
name|saccum
operator|<=
name|scroll
operator|->
name|scrollOffset
operator|-
name|offset
condition|)
block|{
specifier|const
name|int
name|scrollerArea
init|=
name|q
operator|->
name|height
argument_list|()
operator|-
name|botScroll
operator|-
name|fw
operator|*
literal|2
decl_stmt|;
name|int
name|visible
init|=
operator|(
name|scroll
operator|->
name|scrollOffset
operator|-
name|offset
operator|)
operator|-
name|saccum
decl_stmt|;
for|for
control|(
name|i
operator|++
init|;
name|i
operator|<
name|actions
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|visible
operator|+=
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|visible
operator|>
name|scrollerArea
operator|-
name|topScroll
condition|)
block|{
name|scrolled
operator|=
literal|true
expr_stmt|;
name|scrollMenu
argument_list|(
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|page
condition|?
name|QMenuScroller
operator|::
name|ScrollTop
else|:
name|QMenuScroller
operator|::
name|ScrollBottom
argument_list|,
name|active
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|scrolled
condition|)
block|{
name|scroll
operator|->
name|scrollFlags
operator|&=
operator|~
name|QMenuScroller
operator|::
name|ScrollDown
expr_stmt|;
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/* This is poor-mans eventfilters. This avoids the use of    eventFilter (which can be nasty for users of QMenuBar's). */
end_comment
begin_function
DECL|function|mouseEventTaken
name|bool
name|QMenuPrivate
operator|::
name|mouseEventTaken
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|QPoint
name|pos
init|=
name|q
operator|->
name|mapFromGlobal
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|scroll
operator|&&
operator|!
name|activeMenu
condition|)
block|{
comment|//let the scroller "steal" the event
name|bool
name|isScroll
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pos
operator|.
name|x
argument_list|()
operator|>=
literal|0
operator|&&
name|pos
operator|.
name|x
argument_list|()
operator|<
name|q
operator|->
name|width
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|dir
init|=
name|QMenuScroller
operator|::
name|ScrollUp
init|;
name|dir
operator|<=
name|QMenuScroller
operator|::
name|ScrollDown
condition|;
name|dir
operator|=
name|dir
operator|<<
literal|1
control|)
block|{
if|if
condition|(
name|scroll
operator|->
name|scrollFlags
operator|&
name|dir
condition|)
block|{
if|if
condition|(
name|dir
operator|==
name|QMenuScroller
operator|::
name|ScrollUp
condition|)
name|isScroll
operator|=
operator|(
name|pos
operator|.
name|y
argument_list|()
operator|<=
name|scrollerHeight
argument_list|()
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|dir
operator|==
name|QMenuScroller
operator|::
name|ScrollDown
condition|)
name|isScroll
operator|=
operator|(
name|pos
operator|.
name|y
argument_list|()
operator|>=
name|q
operator|->
name|height
argument_list|()
operator|-
name|scrollerHeight
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|isScroll
condition|)
block|{
name|scroll
operator|->
name|scrollDirection
operator|=
name|dir
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|isScroll
condition|)
block|{
name|scroll
operator|->
name|scrollTimer
operator|.
name|start
argument_list|(
literal|50
argument_list|,
name|q
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|scroll
operator|->
name|scrollTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tearoff
condition|)
block|{
comment|//let the tear off thingie "steal" the event..
name|QRect
name|tearRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|q
operator|->
name|width
argument_list|()
argument_list|,
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuTearoffHeight
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|scroll
operator|&&
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollUp
condition|)
name|tearRect
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
name|scrollerHeight
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|update
argument_list|(
name|tearRect
argument_list|)
expr_stmt|;
if|if
condition|(
name|tearRect
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
operator|&&
name|hasMouseMoved
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
condition|)
block|{
name|setCurrentAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|tearoffHighlighted
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonRelease
condition|)
block|{
if|if
condition|(
operator|!
name|tornPopup
condition|)
name|tornPopup
operator|=
operator|new
name|QTornOffMenu
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|tornPopup
operator|->
name|setGeometry
argument_list|(
name|q
operator|->
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
name|tornPopup
operator|->
name|show
argument_list|()
expr_stmt|;
name|hideUpToMenuBar
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
name|tearoffHighlighted
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|frameGeometry
argument_list|()
operator|.
name|contains
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
condition|)
block|{
comment|//otherwise if the event is in our rect we want it..
name|handleEnterLeaveEvents
argument_list|(
operator|&
name|previousMouseMenu
argument_list|,
name|q
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|QWidget
modifier|*
name|caused
init|=
name|causedPopup
operator|.
name|widget
init|;
name|caused
condition|;
control|)
block|{
name|bool
name|passOnEvent
init|=
literal|false
decl_stmt|;
name|QWidget
modifier|*
name|next_widget
init|=
literal|0
decl_stmt|;
name|QPoint
name|cpos
init|=
name|caused
operator|->
name|mapFromGlobal
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
if|if
condition|(
name|QMenuBar
modifier|*
name|mb
init|=
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|caused
argument_list|)
condition|)
block|{
name|passOnEvent
operator|=
name|mb
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|cpos
argument_list|)
expr_stmt|;
block|}
elseif|else
endif|#
directive|endif
if|if
condition|(
name|QMenu
modifier|*
name|m
init|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|caused
argument_list|)
condition|)
block|{
name|passOnEvent
operator|=
name|m
operator|->
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|cpos
argument_list|)
expr_stmt|;
name|next_widget
operator|=
name|m
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|widget
expr_stmt|;
block|}
if|if
condition|(
name|passOnEvent
condition|)
block|{
name|handleEnterLeaveEvents
argument_list|(
operator|&
name|previousMouseMenu
argument_list|,
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|caused
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|MouseButtonRelease
operator|||
name|mouseDown
operator|==
name|caused
condition|)
block|{
name|QMouseEvent
name|new_e
argument_list|(
name|e
operator|->
name|type
argument_list|()
argument_list|,
name|cpos
argument_list|,
name|caused
operator|->
name|mapTo
argument_list|(
name|caused
operator|->
name|topLevelWidget
argument_list|()
argument_list|,
name|cpos
argument_list|)
argument_list|,
name|e
operator|->
name|screenPos
argument_list|()
argument_list|,
name|e
operator|->
name|button
argument_list|()
argument_list|,
name|e
operator|->
name|buttons
argument_list|()
argument_list|,
name|e
operator|->
name|modifiers
argument_list|()
argument_list|,
name|e
operator|->
name|source
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|caused
argument_list|,
operator|&
name|new_e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|caused
operator|=
name|next_widget
expr_stmt|;
if|if
condition|(
operator|!
name|caused
condition|)
name|handleEnterLeaveEvents
argument_list|(
operator|&
name|previousMouseMenu
argument_list|,
name|Q_NULLPTR
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|activateCausedStack
name|void
name|QMenuPrivate
operator|::
name|activateCausedStack
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QPointer
argument_list|<
name|QWidget
argument_list|>
argument_list|>
modifier|&
name|causedStack
parameter_list|,
name|QAction
modifier|*
name|action
parameter_list|,
name|QAction
operator|::
name|ActionEvent
name|action_e
parameter_list|,
name|bool
name|self
parameter_list|)
block|{
name|QBoolBlocker
name|guard
argument_list|(
name|activationRecursionGuard
argument_list|)
decl_stmt|;
if|if
condition|(
name|self
condition|)
name|action
operator|->
name|activate
argument_list|(
name|action_e
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|causedStack
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|widget
init|=
name|causedStack
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
continue|continue;
comment|//fire
if|if
condition|(
name|QMenu
modifier|*
name|qmenu
init|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|widget
operator|=
name|qmenu
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|widget
expr_stmt|;
if|if
condition|(
name|action_e
operator|==
name|QAction
operator|::
name|Trigger
condition|)
block|{
emit|emit
name|qmenu
operator|->
name|triggered
argument_list|(
name|action
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|action_e
operator|==
name|QAction
operator|::
name|Hover
condition|)
block|{
emit|emit
name|qmenu
operator|->
name|hovered
argument_list|(
name|action
argument_list|)
emit|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
block|}
elseif|else
if|if
condition|(
name|QMenuBar
modifier|*
name|qmenubar
init|=
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|action_e
operator|==
name|QAction
operator|::
name|Trigger
condition|)
block|{
emit|emit
name|qmenubar
operator|->
name|triggered
argument_list|(
name|action
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|action_e
operator|==
name|QAction
operator|::
name|Hover
condition|)
block|{
emit|emit
name|qmenubar
operator|->
name|hovered
argument_list|(
name|action
argument_list|)
emit|;
block|}
break|break;
comment|//nothing more..
endif|#
directive|endif
block|}
block|}
block|}
end_function
begin_function
DECL|function|activateAction
name|void
name|QMenuPrivate
operator|::
name|activateAction
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|,
name|QAction
operator|::
name|ActionEvent
name|action_e
parameter_list|,
name|bool
name|self
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
name|bool
name|inWhatsThisMode
init|=
name|QWhatsThis
operator|::
name|inWhatsThisMode
argument_list|()
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|action
operator|||
operator|!
name|q
operator|->
name|isEnabled
argument_list|()
operator|||
operator|(
name|action_e
operator|==
name|QAction
operator|::
name|Trigger
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
operator|&&
operator|!
name|inWhatsThisMode
endif|#
directive|endif
operator|&&
operator|(
name|action
operator|->
name|isSeparator
argument_list|()
operator|||
operator|!
name|action
operator|->
name|isEnabled
argument_list|()
operator|)
operator|)
condition|)
return|return;
comment|/* I have to save the caused stack here because it will be undone after popup execution (ie in the hide).        Then I iterate over the list to actually send the events. --Sam     */
specifier|const
name|QVector
argument_list|<
name|QPointer
argument_list|<
name|QWidget
argument_list|>
argument_list|>
name|causedStack
init|=
name|calcCausedStack
argument_list|()
decl_stmt|;
if|if
condition|(
name|action_e
operator|==
name|QAction
operator|::
name|Trigger
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
if|if
condition|(
operator|!
name|inWhatsThisMode
condition|)
name|actionAboutToTrigger
operator|=
name|action
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
condition|)
block|{
name|hideUpToMenuBar
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|QWidget
modifier|*
name|widget
init|=
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
init|;
name|widget
condition|;
control|)
block|{
if|if
condition|(
name|QMenu
modifier|*
name|qmenu
init|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
name|qmenu
operator|==
name|q
condition|)
name|hideUpToMenuBar
argument_list|()
expr_stmt|;
name|widget
operator|=
name|qmenu
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|widget
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
if|if
condition|(
name|inWhatsThisMode
condition|)
block|{
name|QString
name|s
init|=
name|action
operator|->
name|whatsThis
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
name|s
operator|=
name|whatsThis
expr_stmt|;
name|QWhatsThis
operator|::
name|showText
argument_list|(
name|q
operator|->
name|mapToGlobal
argument_list|(
name|actionRect
argument_list|(
name|action
argument_list|)
operator|.
name|center
argument_list|()
argument_list|)
argument_list|,
name|s
argument_list|,
name|q
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
block|}
name|activateCausedStack
argument_list|(
name|causedStack
argument_list|,
name|action
argument_list|,
name|action_e
argument_list|,
name|self
argument_list|)
expr_stmt|;
if|if
condition|(
name|action_e
operator|==
name|QAction
operator|::
name|Hover
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
if|if
condition|(
name|QAccessible
operator|::
name|isActive
argument_list|()
condition|)
block|{
name|int
name|actionIndex
init|=
name|indexOf
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|QAccessibleEvent
name|focusEvent
argument_list|(
name|q
argument_list|,
name|QAccessible
operator|::
name|Focus
argument_list|)
decl_stmt|;
name|focusEvent
operator|.
name|setChild
argument_list|(
name|actionIndex
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|focusEvent
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|action
operator|->
name|showStatusText
argument_list|(
name|topCausedWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actionAboutToTrigger
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_actionTriggered
name|void
name|QMenuPrivate
operator|::
name|_q_actionTriggered
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAction
modifier|*
name|action
init|=
name|qobject_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|sender
argument_list|()
argument_list|)
condition|)
block|{
name|QPointer
argument_list|<
name|QAction
argument_list|>
name|actionGuard
init|=
name|action
decl_stmt|;
if|if
condition|(
name|platformMenu
operator|&&
name|widgetItems
operator|.
name|value
argument_list|(
name|action
argument_list|)
condition|)
name|platformMenu
operator|->
name|dismiss
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|triggered
argument_list|(
name|action
argument_list|)
emit|;
if|if
condition|(
operator|!
name|activationRecursionGuard
operator|&&
name|actionGuard
condition|)
block|{
comment|//in case the action has not been activated by the mouse
comment|//we check the parent hierarchy
name|QVector
argument_list|<
name|QPointer
argument_list|<
name|QWidget
argument_list|>
argument_list|>
name|list
decl_stmt|;
for|for
control|(
name|QWidget
modifier|*
name|widget
init|=
name|q
operator|->
name|parentWidget
argument_list|()
init|;
name|widget
condition|;
control|)
block|{
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
operator|||
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
endif|#
directive|endif
condition|)
block|{
name|list
operator|.
name|append
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|=
name|widget
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|activateCausedStack
argument_list|(
name|list
argument_list|,
name|action
argument_list|,
name|QAction
operator|::
name|Trigger
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|_q_actionHovered
name|void
name|QMenuPrivate
operator|::
name|_q_actionHovered
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAction
modifier|*
name|action
init|=
name|qobject_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|sender
argument_list|()
argument_list|)
condition|)
block|{
emit|emit
name|q
operator|->
name|hovered
argument_list|(
name|action
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|_q_platformMenuAboutToShow
name|void
name|QMenuPrivate
operator|::
name|_q_platformMenuAboutToShow
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_OSX
if|if
condition|(
name|platformMenu
condition|)
name|Q_FOREACH
argument_list|(
argument|QAction *action
argument_list|,
argument|q->actions()
argument_list|)
if|if
condition|(
name|QWidget
modifier|*
name|widget
init|=
name|widgetItems
operator|.
name|value
argument_list|(
name|action
argument_list|)
condition|)
if|if
condition|(
name|widget
operator|->
name|parent
argument_list|()
operator|==
name|q
condition|)
block|{
name|QPlatformMenuItem
modifier|*
name|menuItem
init|=
name|platformMenu
operator|->
name|menuItemForTag
argument_list|(
cast|reinterpret_cast
argument_list|<
name|quintptr
argument_list|>
argument_list|(
name|action
argument_list|)
argument_list|)
decl_stmt|;
name|moveWidgetToPlatformItem
argument_list|(
name|widget
argument_list|,
name|menuItem
argument_list|)
expr_stmt|;
name|platformMenu
operator|->
name|syncMenuItem
argument_list|(
name|menuItem
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
emit|emit
name|q
operator|->
name|aboutToShow
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|hasMouseMoved
name|bool
name|QMenuPrivate
operator|::
name|hasMouseMoved
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|globalPos
parameter_list|)
block|{
comment|//determines if the mouse has moved (ie its initial position has
comment|//changed by more than QApplication::startDragDistance()
comment|//or if there were at least 6 mouse motions)
return|return
name|motions
operator|>
literal|6
operator|||
name|QApplication
operator|::
name|startDragDistance
argument_list|()
operator|<
operator|(
name|mousePopupPos
operator|-
name|globalPos
operator|)
operator|.
name|manhattanLength
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Initialize \a option with the values from this menu and information from \a action. This method     is useful for subclasses when they need a QStyleOptionMenuItem, but don't want     to fill in all the information themselves.      \sa QStyleOption::initFrom(), QMenuBar::initStyleOption() */
end_comment
begin_function
DECL|function|initStyleOption
name|void
name|QMenu
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionMenuItem
modifier|*
name|option
parameter_list|,
specifier|const
name|QAction
modifier|*
name|action
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|option
operator|||
operator|!
name|action
condition|)
return|return;
name|Q_D
argument_list|(
specifier|const
name|QMenu
argument_list|)
expr_stmt|;
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|option
operator|->
name|palette
operator|=
name|palette
argument_list|()
expr_stmt|;
name|option
operator|->
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
if|if
condition|(
name|window
argument_list|()
operator|->
name|isActiveWindow
argument_list|()
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Active
expr_stmt|;
if|if
condition|(
name|isEnabled
argument_list|()
operator|&&
name|action
operator|->
name|isEnabled
argument_list|()
operator|&&
operator|(
operator|!
name|action
operator|->
name|menu
argument_list|()
operator|||
name|action
operator|->
name|menu
argument_list|()
operator|->
name|isEnabled
argument_list|()
operator|)
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
else|else
name|option
operator|->
name|palette
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|option
operator|->
name|font
operator|=
name|action
operator|->
name|font
argument_list|()
operator|.
name|resolve
argument_list|(
name|font
argument_list|()
argument_list|)
expr_stmt|;
name|option
operator|->
name|fontMetrics
operator|=
name|QFontMetrics
argument_list|(
name|option
operator|->
name|font
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentAction
operator|&&
name|d
operator|->
name|currentAction
operator|==
name|action
operator|&&
operator|!
name|d
operator|->
name|currentAction
operator|->
name|isSeparator
argument_list|()
condition|)
block|{
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Selected
operator||
operator|(
name|d
operator|->
name|mouseDown
condition|?
name|QStyle
operator|::
name|State_Sunken
else|:
name|QStyle
operator|::
name|State_None
operator|)
expr_stmt|;
block|}
name|option
operator|->
name|menuHasCheckableItems
operator|=
name|d
operator|->
name|hasCheckableItems
expr_stmt|;
if|if
condition|(
operator|!
name|action
operator|->
name|isCheckable
argument_list|()
condition|)
block|{
name|option
operator|->
name|checkType
operator|=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
expr_stmt|;
block|}
else|else
block|{
name|option
operator|->
name|checkType
operator|=
operator|(
name|action
operator|->
name|actionGroup
argument_list|()
operator|&&
name|action
operator|->
name|actionGroup
argument_list|()
operator|->
name|isExclusive
argument_list|()
operator|)
condition|?
name|QStyleOptionMenuItem
operator|::
name|Exclusive
else|:
name|QStyleOptionMenuItem
operator|::
name|NonExclusive
expr_stmt|;
name|option
operator|->
name|checked
operator|=
name|action
operator|->
name|isChecked
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|->
name|menu
argument_list|()
condition|)
name|option
operator|->
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|SubMenu
expr_stmt|;
elseif|else
if|if
condition|(
name|action
operator|->
name|isSeparator
argument_list|()
condition|)
name|option
operator|->
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|Separator
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|defaultAction
operator|==
name|action
condition|)
name|option
operator|->
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|DefaultItem
expr_stmt|;
else|else
name|option
operator|->
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|Normal
expr_stmt|;
if|if
condition|(
name|action
operator|->
name|isIconVisibleInMenu
argument_list|()
condition|)
name|option
operator|->
name|icon
operator|=
name|action
operator|->
name|icon
argument_list|()
expr_stmt|;
name|QString
name|textAndAccel
init|=
name|action
operator|->
name|text
argument_list|()
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
if|if
condition|(
name|textAndAccel
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|QKeySequence
name|seq
init|=
name|action
operator|->
name|shortcut
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|seq
operator|.
name|isEmpty
argument_list|()
condition|)
name|textAndAccel
operator|+=
name|QLatin1Char
argument_list|(
literal|'\t'
argument_list|)
operator|+
name|seq
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|NativeText
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|option
operator|->
name|text
operator|=
name|textAndAccel
expr_stmt|;
name|option
operator|->
name|tabWidth
operator|=
name|d
operator|->
name|tabWidth
expr_stmt|;
name|option
operator|->
name|maxIconWidth
operator|=
name|d
operator|->
name|maxIconWidth
expr_stmt|;
name|option
operator|->
name|menuRect
operator|=
name|rect
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QMenu     \brief The QMenu class provides a menu widget for use in menu     bars, context menus, and other popup menus.      \ingroup mainwindow-classes     \ingroup basicwidgets     \inmodule QtWidgets      A menu widget is a selection menu. It can be either a pull-down     menu in a menu bar or a standalone context menu. Pull-down menus     are shown by the menu bar when the user clicks on the respective     item or presses the specified shortcut key. Use     QMenuBar::addMenu() to insert a menu into a menu bar. Context     menus are usually invoked by some special keyboard key or by     right-clicking. They can be executed either asynchronously with     popup() or synchronously with exec(). Menus can also be invoked in     response to button presses; these are just like context menus     except for how they are invoked.      \table 100%     \row     \li \inlineimage fusion-menu.png     \li \inlineimage windowsxp-menu.png     \li \inlineimage macintosh-menu.png     \endtable     \caption Fig. A menu shown in \l{Fusion Style Widget Gallery}{Fusion widget style},            \l{Windows XP Style Widget Gallery}{Windows XP widget style},            and \l{Macintosh Style Widget Gallery}{Macintosh widget style}.      \section1 Actions      A menu consists of a list of action items. Actions are added with     the addAction(), addActions() and insertAction() functions. An action     is represented vertically and rendered by QStyle. In addition, actions     can have a text label, an optional icon drawn on the very left side,     and shortcut key sequence such as "Ctrl+X".      The existing actions held by a menu can be found with actions().      There are four kinds of action items: separators, actions that     show a submenu, widgets, and actions that perform an action.     Separators are inserted with addSeparator(), submenus with addMenu(),     and all other items are considered action items.      When inserting action items you usually specify a receiver and a     slot. The receiver will be notifed whenever the item is     \l{QAction::triggered()}{triggered()}. In addition, QMenu provides     two signals, activated() and highlighted(), which signal the     QAction that was triggered from the menu.      You clear a menu with clear() and remove individual action items     with removeAction().      A QMenu can also provide a tear-off menu. A tear-off menu is a     top-level window that contains a copy of the menu. This makes it     possible for the user to "tear off" frequently used menus and     position them in a convenient place on the screen. If you want     this functionality for a particular menu, insert a tear-off handle     with setTearOffEnabled(). When using tear-off menus, bear in mind     that the concept isn't typically used on Microsoft Windows so     some users may not be familiar with it. Consider using a QToolBar     instead.      Widgets can be inserted into menus with the QWidgetAction class.     Instances of this class are used to hold widgets, and are inserted     into menus with the addAction() overload that takes a QAction.      Conversely, actions can be added to widgets with the addAction(),     addActions() and insertAction() functions.      \warning To make QMenu visible on the screen, exec() or popup() should be     used instead of show().      \section1 QMenu on Qt for Windows CE      If a menu is integrated into the native menubar on Windows Mobile we     do not support the signals: aboutToHide (), aboutToShow () and hovered ().     It is not possible to display an icon in a native menu on Windows Mobile.      \section1 QMenu on OS X with Qt Build Against Cocoa      QMenu can be inserted only once in a menu/menubar. Subsequent insertions will     have no effect or will result in a disabled menu item.      See the \l{mainwindows/menus}{Menus} example for an example of how     to use QMenuBar and QMenu in your application.      \b{Important inherited functions:} addAction(), removeAction(), clear(),     addSeparator(), and addMenu().      \sa QMenuBar, {fowler}{GUI Design Handbook: Menu, Drop-Down and Pop-Up},         {Application Example}, {Menus Example} */
end_comment
begin_comment
comment|/*!     Constructs a menu with parent \a parent.      Although a popup menu is always a top-level widget, if a parent is     passed the popup menu will be deleted when that parent is     destroyed (as with any other QObject). */
end_comment
begin_constructor
DECL|function|QMenu
name|QMenu
operator|::
name|QMenu
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QMenuPrivate
argument_list|,
name|parent
argument_list|,
name|Qt
operator|::
name|Popup
argument_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a menu with a \a title and a \a parent.      Although a popup menu is always a top-level widget, if a parent is     passed the popup menu will be deleted when that parent is     destroyed (as with any other QObject).      \sa title */
end_comment
begin_constructor
DECL|function|QMenu
name|QMenu
operator|::
name|QMenu
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QMenuPrivate
argument_list|,
name|parent
argument_list|,
name|Qt
operator|::
name|Popup
argument_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
name|d
operator|->
name|menuAction
operator|->
name|setText
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! \internal  */
end_comment
begin_constructor
DECL|function|QMenu
name|QMenu
operator|::
name|QMenu
parameter_list|(
name|QMenuPrivate
modifier|&
name|dd
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|,
name|Qt
operator|::
name|Popup
argument_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the menu. */
end_comment
begin_destructor
DECL|function|~QMenu
name|QMenu
operator|::
name|~
name|QMenu
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|widgetItems
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// avoid detach on shared null hash
name|QHash
argument_list|<
name|QAction
modifier|*
argument_list|,
name|QWidget
modifier|*
argument_list|>
operator|::
name|iterator
name|it
init|=
name|d
operator|->
name|widgetItems
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|d
operator|->
name|widgetItems
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|widget
init|=
name|it
operator|.
name|value
argument_list|()
condition|)
block|{
name|QWidgetAction
modifier|*
name|action
init|=
cast|static_cast
argument_list|<
name|QWidgetAction
operator|*
argument_list|>
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
decl_stmt|;
name|action
operator|->
name|releaseWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
operator|*
name|it
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|d
operator|->
name|eventLoop
condition|)
name|d
operator|->
name|eventLoop
operator|->
name|exit
argument_list|()
expr_stmt|;
name|hideTearOffMenu
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_comment
comment|/*!     \overload      This convenience function creates a new action with \a text.     The function adds the newly created action to the menu's     list of actions, and returns it.      QMenu takes ownership of the returned QAction.      \sa QWidget::addAction() */
end_comment
begin_function
DECL|function|addAction
name|QAction
modifier|*
name|QMenu
operator|::
name|addAction
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QAction
modifier|*
name|ret
init|=
operator|new
name|QAction
argument_list|(
name|text
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|addAction
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      This convenience function creates a new action with an \a icon     and some \a text. The function adds the newly created action to     the menu's list of actions, and returns it.      QMenu takes ownership of the returned QAction.      \sa QWidget::addAction() */
end_comment
begin_function
DECL|function|addAction
name|QAction
modifier|*
name|QMenu
operator|::
name|addAction
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QAction
modifier|*
name|ret
init|=
operator|new
name|QAction
argument_list|(
name|icon
argument_list|,
name|text
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|addAction
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      This convenience function creates a new action with the text \a     text and an optional shortcut \a shortcut. The action's     \l{QAction::triggered()}{triggered()} signal is connected to the     \a receiver's \a member slot. The function adds the newly created     action to the menu's list of actions and returns it.      QMenu takes ownership of the returned QAction.      \sa QWidget::addAction() */
end_comment
begin_function
DECL|function|addAction
name|QAction
modifier|*
name|QMenu
operator|::
name|addAction
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|,
specifier|const
name|QKeySequence
modifier|&
name|shortcut
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
operator|new
name|QAction
argument_list|(
name|text
argument_list|,
name|this
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_SHORTCUT
name|Q_UNUSED
argument_list|(
name|shortcut
argument_list|)
expr_stmt|;
else|#
directive|else
name|action
operator|->
name|setShortcut
argument_list|(
name|shortcut
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QObject
operator|::
name|connect
argument_list|(
name|action
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!\fn QAction *QMenu::addAction(const QString&text, const QObject *receiver, PointerToMemberFunction method, const QKeySequence&shortcut = 0)      \since 5.6      \overload      This convenience function creates a new action with the text \a     text and an optional shortcut \a shortcut. The action's     \l{QAction::triggered()}{triggered()} signal is connected to the     \a method of the \a receiver. The function adds the newly created     action to the menu's list of actions and returns it.      QMenu takes ownership of the returned QAction. */
end_comment
begin_comment
comment|/*!\fn QAction *QMenu::addAction(const QString&text, Functor functor, const QKeySequence&shortcut = 0)      \since 5.6      \overload      This convenience function creates a new action with the text \a     text and an optional shortcut \a shortcut. The action's     \l{QAction::triggered()}{triggered()} signal is connected to the     \a functor. The function adds the newly created     action to the menu's list of actions and returns it.      QMenu takes ownership of the returned QAction. */
end_comment
begin_comment
comment|/*!\fn QAction *QMenu::addAction(const QString&text, const QObject *context, Functor functor, const QKeySequence&shortcut = 0)      \since 5.6      \overload      This convenience function creates a new action with the text \a     text and an optional shortcut \a shortcut. The action's     \l{QAction::triggered()}{triggered()} signal is connected to the     \a functor. The function adds the newly created     action to the menu's list of actions and returns it.      If \a context is destroyed, the functor will not be called.      QMenu takes ownership of the returned QAction. */
end_comment
begin_comment
comment|/*!\fn QAction *QMenu::addAction(const QIcon&icon, const QString&text, const QObject *receiver, PointerToMemberFunction method, const QKeySequence&shortcut = 0)      \since 5.6      \overload      This convenience function creates a new action with an \a icon     and some \a text and an optional shortcut \a shortcut. The action's     \l{QAction::triggered()}{triggered()} signal is connected to the     \a method of the \a receiver. The function adds the newly created     action to the menu's list of actions and returns it.      QMenu takes ownership of the returned QAction. */
end_comment
begin_comment
comment|/*!\fn QAction *QMenu::addAction(const QIcon&icon, const QString&text, Functor functor, const QKeySequence&shortcut = 0)      \since 5.6      \overload      This convenience function creates a new action with an \a icon     and some \a text and an optional shortcut \a shortcut. The action's     \l{QAction::triggered()}{triggered()} signal is connected to the     \a functor. The function adds the newly created     action to the menu's list of actions and returns it.      QMenu takes ownership of the returned QAction. */
end_comment
begin_comment
comment|/*!\fn QAction *QMenu::addAction(const QIcon&icon, const QString&text, const QObject *context, Functor functor, const QKeySequence&shortcut = 0)      \since 5.6      \overload      This convenience function creates a new action with an \a icon     and some \a text and an optional shortcut \a shortcut. The action's     \l{QAction::triggered()}{triggered()} signal is connected to the     \a functor. The function adds the newly created     action to the menu's list of actions and returns it.      If \a context is destroyed, the functor will not be called.      QMenu takes ownership of the returned QAction. */
end_comment
begin_comment
comment|/*!     \overload      This convenience function creates a new action with an \a icon and     some \a text and an optional shortcut \a shortcut. The action's     \l{QAction::triggered()}{triggered()} signal is connected to the     \a member slot of the \a receiver object. The function adds the     newly created action to the menu's list of actions, and returns it.      QMenu takes ownership of the returned QAction.      \sa QWidget::addAction() */
end_comment
begin_function
DECL|function|addAction
name|QAction
modifier|*
name|QMenu
operator|::
name|addAction
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|,
specifier|const
name|QKeySequence
modifier|&
name|shortcut
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
operator|new
name|QAction
argument_list|(
name|icon
argument_list|,
name|text
argument_list|,
name|this
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_SHORTCUT
name|Q_UNUSED
argument_list|(
name|shortcut
argument_list|)
expr_stmt|;
else|#
directive|else
name|action
operator|->
name|setShortcut
argument_list|(
name|shortcut
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QObject
operator|::
name|connect
argument_list|(
name|action
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!     This convenience function adds \a menu as a submenu to this menu.     It returns \a menu's menuAction(). This menu does not take     ownership of \a menu.      \sa QWidget::addAction(), QMenu::menuAction() */
end_comment
begin_function
DECL|function|addMenu
name|QAction
modifier|*
name|QMenu
operator|::
name|addMenu
parameter_list|(
name|QMenu
modifier|*
name|menu
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
name|menu
operator|->
name|menuAction
argument_list|()
decl_stmt|;
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!   Appends a new QMenu with \a title to the menu. The menu   takes ownership of the menu. Returns the new menu.    \sa QWidget::addAction(), QMenu::menuAction() */
end_comment
begin_function
DECL|function|addMenu
name|QMenu
modifier|*
name|QMenu
operator|::
name|addMenu
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|QMenu
modifier|*
name|menu
init|=
operator|new
name|QMenu
argument_list|(
name|title
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|addAction
argument_list|(
name|menu
operator|->
name|menuAction
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|menu
return|;
block|}
end_function
begin_comment
comment|/*!   Appends a new QMenu with \a icon and \a title to the menu. The menu   takes ownership of the menu. Returns the new menu.    \sa QWidget::addAction(), QMenu::menuAction() */
end_comment
begin_function
DECL|function|addMenu
name|QMenu
modifier|*
name|QMenu
operator|::
name|addMenu
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|QMenu
modifier|*
name|menu
init|=
operator|new
name|QMenu
argument_list|(
name|title
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|menu
operator|->
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|menu
operator|->
name|menuAction
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|menu
return|;
block|}
end_function
begin_comment
comment|/*!     This convenience function creates a new separator action, i.e. an     action with QAction::isSeparator() returning true, and adds the new     action to this menu's list of actions. It returns the newly     created action.      QMenu takes ownership of the returned QAction.      \sa QWidget::addAction() */
end_comment
begin_function
DECL|function|addSeparator
name|QAction
modifier|*
name|QMenu
operator|::
name|addSeparator
parameter_list|()
block|{
name|QAction
modifier|*
name|action
init|=
operator|new
name|QAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|action
operator|->
name|setSeparator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.1      This convenience function creates a new section action, i.e. an     action with QAction::isSeparator() returning true but also     having \a text hint, and adds the new action to this menu's list     of actions. It returns the newly created action.      The rendering of the hint is style and platform dependent. Widget     styles can use the text information in the rendering for sections,     or can choose to ignore it and render sections like simple separators.      QMenu takes ownership of the returned QAction.      \sa QWidget::addAction() */
end_comment
begin_function
DECL|function|addSection
name|QAction
modifier|*
name|QMenu
operator|::
name|addSection
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
operator|new
name|QAction
argument_list|(
name|text
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|action
operator|->
name|setSeparator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.1      This convenience function creates a new section action, i.e. an     action with QAction::isSeparator() returning true but also     having \a text and \a icon hints, and adds the new action to this menu's     list of actions. It returns the newly created action.      The rendering of the hints is style and platform dependent. Widget     styles can use the text and icon information in the rendering for sections,     or can choose to ignore them and render sections like simple separators.      QMenu takes ownership of the returned QAction.      \sa QWidget::addAction() */
end_comment
begin_function
DECL|function|addSection
name|QAction
modifier|*
name|QMenu
operator|::
name|addSection
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
operator|new
name|QAction
argument_list|(
name|icon
argument_list|,
name|text
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|action
operator|->
name|setSeparator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!     This convenience function inserts \a menu before action \a before     and returns the menus menuAction().      \sa QWidget::insertAction(), addMenu() */
end_comment
begin_function
DECL|function|insertMenu
name|QAction
modifier|*
name|QMenu
operator|::
name|insertMenu
parameter_list|(
name|QAction
modifier|*
name|before
parameter_list|,
name|QMenu
modifier|*
name|menu
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
name|menu
operator|->
name|menuAction
argument_list|()
decl_stmt|;
name|insertAction
argument_list|(
name|before
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!     This convenience function creates a new separator action, i.e. an     action with QAction::isSeparator() returning true. The function inserts     the newly created action into this menu's list of actions before     action \a before and returns it.      QMenu takes ownership of the returned QAction.      \sa QWidget::insertAction(), addSeparator() */
end_comment
begin_function
DECL|function|insertSeparator
name|QAction
modifier|*
name|QMenu
operator|::
name|insertSeparator
parameter_list|(
name|QAction
modifier|*
name|before
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
operator|new
name|QAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|action
operator|->
name|setSeparator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|insertAction
argument_list|(
name|before
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.1      This convenience function creates a new title action, i.e. an     action with QAction::isSeparator() returning true but also having     \a text hint. The function inserts the newly created action     into this menu's list of actions before action \a before and     returns it.      The rendering of the hint is style and platform dependent. Widget     styles can use the text information in the rendering for sections,     or can choose to ignore it and render sections like simple separators.      QMenu takes ownership of the returned QAction.      \sa QWidget::insertAction(), addSection() */
end_comment
begin_function
DECL|function|insertSection
name|QAction
modifier|*
name|QMenu
operator|::
name|insertSection
parameter_list|(
name|QAction
modifier|*
name|before
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
operator|new
name|QAction
argument_list|(
name|text
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|action
operator|->
name|setSeparator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|insertAction
argument_list|(
name|before
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!     \since 5.1      This convenience function creates a new title action, i.e. an     action with QAction::isSeparator() returning true but also having     \a text and \a icon hints. The function inserts the newly created action     into this menu's list of actions before action \a before and returns it.      The rendering of the hints is style and platform dependent. Widget     styles can use the text and icon information in the rendering for sections,     or can choose to ignore them and render sections like simple separators.      QMenu takes ownership of the returned QAction.      \sa QWidget::insertAction(), addSection() */
end_comment
begin_function
DECL|function|insertSection
name|QAction
modifier|*
name|QMenu
operator|::
name|insertSection
parameter_list|(
name|QAction
modifier|*
name|before
parameter_list|,
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
operator|new
name|QAction
argument_list|(
name|icon
argument_list|,
name|text
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|action
operator|->
name|setSeparator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|insertAction
argument_list|(
name|before
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!   This sets the default action to \a act. The default action may have   a visual cue, depending on the current QStyle. A default action   usually indicates what will happen by default when a drop occurs.    \sa defaultAction() */
end_comment
begin_function
DECL|function|setDefaultAction
name|void
name|QMenu
operator|::
name|setDefaultAction
parameter_list|(
name|QAction
modifier|*
name|act
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|defaultAction
operator|=
name|act
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the current default action.    \sa setDefaultAction() */
end_comment
begin_function
DECL|function|defaultAction
name|QAction
modifier|*
name|QMenu
operator|::
name|defaultAction
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|defaultAction
return|;
block|}
end_function
begin_comment
comment|/*!     \property QMenu::tearOffEnabled     \brief whether the menu supports being torn off      When true, the menu contains a special tear-off item (often shown as a dashed     line at the top of the menu) that creates a copy of the menu when it is     triggered.      This "torn-off" copy lives in a separate window. It contains the same menu     items as the original menu, with the exception of the tear-off handle.      By default, this property is \c false. */
end_comment
begin_function
DECL|function|setTearOffEnabled
name|void
name|QMenu
operator|::
name|setTearOffEnabled
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|tearoff
operator|==
name|b
condition|)
return|return;
if|if
condition|(
operator|!
name|b
condition|)
name|hideTearOffMenu
argument_list|()
expr_stmt|;
name|d
operator|->
name|tearoff
operator|=
name|b
expr_stmt|;
name|d
operator|->
name|itemsDirty
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|resize
argument_list|(
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isTearOffEnabled
name|bool
name|QMenu
operator|::
name|isTearOffEnabled
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|tearoff
return|;
block|}
end_function
begin_comment
comment|/*!   When a menu is torn off a second menu is shown to display the menu   contents in a new window. When the menu is in this mode and the menu   is visible returns \c true; otherwise false.    \sa hideTearOffMenu(), isTearOffEnabled() */
end_comment
begin_function
DECL|function|isTearOffMenuVisible
name|bool
name|QMenu
operator|::
name|isTearOffMenuVisible
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|d_func
argument_list|()
operator|->
name|tornPopup
condition|)
return|return
name|d_func
argument_list|()
operator|->
name|tornPopup
operator|->
name|isVisible
argument_list|()
return|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!    This function will forcibly hide the torn off menu making it    disappear from the users desktop.     \sa isTearOffMenuVisible(), isTearOffEnabled() */
end_comment
begin_function
DECL|function|hideTearOffMenu
name|void
name|QMenu
operator|::
name|hideTearOffMenu
parameter_list|()
block|{
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|d_func
argument_list|()
operator|->
name|tornPopup
condition|)
name|w
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Sets the currently highlighted action to \a act. */
end_comment
begin_function
DECL|function|setActiveAction
name|void
name|QMenu
operator|::
name|setActiveAction
parameter_list|(
name|QAction
modifier|*
name|act
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|d
operator|->
name|setCurrentAction
argument_list|(
name|act
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|scroll
condition|)
name|d
operator|->
name|scrollMenu
argument_list|(
name|act
argument_list|,
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollCenter
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the currently highlighted action, or 0 if no     action is currently highlighted. */
end_comment
begin_function
DECL|function|activeAction
name|QAction
modifier|*
name|QMenu
operator|::
name|activeAction
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|currentAction
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Returns \c true if there are no visible actions inserted into the menu, false     otherwise.      \sa QWidget::actions() */
end_comment
begin_function
DECL|function|isEmpty
name|bool
name|QMenu
operator|::
name|isEmpty
parameter_list|()
specifier|const
block|{
name|bool
name|ret
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|ret
operator|&&
name|i
operator|<
name|actions
argument_list|()
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QAction
modifier|*
name|action
init|=
name|actions
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|action
operator|->
name|isSeparator
argument_list|()
operator|&&
name|action
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|ret
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!     Removes all the menu's actions. Actions owned by the menu and not     shown in any other widget are deleted.      \sa removeAction() */
end_comment
begin_function
DECL|function|clear
name|void
name|QMenu
operator|::
name|clear
parameter_list|()
block|{
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|acts
init|=
name|actions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|acts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|removeAction
argument_list|(
name|acts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|acts
index|[
name|i
index|]
operator|->
name|parent
argument_list|()
operator|==
name|this
operator|&&
name|acts
index|[
name|i
index|]
operator|->
name|d_func
argument_list|()
operator|->
name|widgets
operator|.
name|isEmpty
argument_list|()
condition|)
operator|delete
name|acts
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   If a menu does not fit on the screen it lays itself out so that it   does fit. It is style dependent what layout means (for example, on   Windows it will use multiple columns).    This functions returns the number of columns necessary. */
end_comment
begin_function
DECL|function|columnCount
name|int
name|QMenu
operator|::
name|columnCount
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|ncols
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the item at \a pt; returns 0 if there is no item there. */
end_comment
begin_function
DECL|function|actionAt
name|QAction
modifier|*
name|QMenu
operator|::
name|actionAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pt
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|QAction
modifier|*
name|ret
init|=
name|d_func
argument_list|()
operator|->
name|actionAt
argument_list|(
name|pt
argument_list|)
condition|)
return|return
name|ret
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the geometry of action \a act. */
end_comment
begin_function
DECL|function|actionGeometry
name|QRect
name|QMenu
operator|::
name|actionGeometry
parameter_list|(
name|QAction
modifier|*
name|act
parameter_list|)
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|actionRect
argument_list|(
name|act
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QMenu
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMenu
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateActionRects
argument_list|()
expr_stmt|;
name|QSize
name|s
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|actionRects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
modifier|&
name|rect
init|=
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|rect
operator|.
name|bottom
argument_list|()
operator|>=
name|s
operator|.
name|height
argument_list|()
condition|)
name|s
operator|.
name|setHeight
argument_list|(
name|rect
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rect
operator|.
name|right
argument_list|()
operator|>=
name|s
operator|.
name|width
argument_list|()
condition|)
name|s
operator|.
name|setWidth
argument_list|(
name|rect
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Note that the action rects calculated above already include
comment|// the top and left margins, so we only need to add margins for
comment|// the bottom and right.
name|QStyleOption
name|opt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|opt
operator|.
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
specifier|const
name|int
name|fw
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuPanelWidth
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|s
operator|.
name|rwidth
argument_list|()
operator|+=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuHMargin
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
operator|+
name|fw
operator|+
name|d
operator|->
name|rightmargin
expr_stmt|;
name|s
operator|.
name|rheight
argument_list|()
operator|+=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuVMargin
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
operator|+
name|fw
operator|+
name|d
operator|->
name|bottommargin
expr_stmt|;
return|return
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_Menu
argument_list|,
operator|&
name|opt
argument_list|,
name|s
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Displays the menu so that the action \a atAction will be at the     specified \e global position \a p. To translate a widget's local     coordinates into global coordinates, use QWidget::mapToGlobal().      When positioning a menu with exec() or popup(), bear in mind that     you cannot rely on the menu's current size(). For performance     reasons, the menu adapts its size only when necessary, so in many     cases, the size before and after the show is different. Instead,     use sizeHint() which calculates the proper size depending on the     menu's current contents.      \sa QWidget::mapToGlobal(), exec() */
end_comment
begin_function
DECL|function|popup
name|void
name|QMenu
operator|::
name|popup
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
name|QAction
modifier|*
name|atAction
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|scroll
condition|)
block|{
comment|// reset scroll state from last popup
if|if
condition|(
name|d
operator|->
name|scroll
operator|->
name|scrollOffset
condition|)
name|d
operator|->
name|itemsDirty
operator|=
literal|1
expr_stmt|;
comment|// sizeHint will be incorrect if there is previous scroll
name|d
operator|->
name|scroll
operator|->
name|scrollOffset
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator|=
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollNone
expr_stmt|;
block|}
name|d
operator|->
name|tearoffHighlighted
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|motions
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|doChildEffects
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|updateLayoutDirection
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
comment|// if this menu is part of a chain attached to a QMenuBar, set the
comment|// _NET_WM_WINDOW_TYPE_DROPDOWN_MENU X11 window type
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_X11NetWmWindowTypeDropDownMenu
argument_list|,
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|topCausedWidget
argument_list|()
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ensurePolished
argument_list|()
expr_stmt|;
comment|// Get the right font
emit|emit
name|aboutToShow
argument_list|()
emit|;
specifier|const
name|bool
name|actionListChanged
init|=
name|d
operator|->
name|itemsDirty
decl_stmt|;
name|d
operator|->
name|updateActionRects
argument_list|()
expr_stmt|;
name|QPoint
name|pos
decl_stmt|;
name|QPushButton
modifier|*
name|causedButton
init|=
name|qobject_cast
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|causedPopup
operator|.
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|actionListChanged
operator|&&
name|causedButton
condition|)
name|pos
operator|=
name|QPushButtonPrivate
operator|::
name|get
argument_list|(
name|causedButton
argument_list|)
operator|->
name|adjustedMenuPosition
argument_list|()
expr_stmt|;
else|else
name|pos
operator|=
name|p
expr_stmt|;
name|QSize
name|size
init|=
name|sizeHint
argument_list|()
decl_stmt|;
name|QRect
name|screen
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_GRAPHICSVIEW
name|bool
name|isEmbedded
init|=
operator|!
name|bypassGraphicsProxyWidget
argument_list|(
name|this
argument_list|)
operator|&&
name|d
operator|->
name|nearestGraphicsProxyWidget
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|isEmbedded
condition|)
name|screen
operator|=
name|d
operator|->
name|popupGeometry
argument_list|(
name|this
argument_list|)
expr_stmt|;
else|else
endif|#
directive|endif
name|screen
operator|=
name|d
operator|->
name|popupGeometry
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenNumber
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|desktopFrame
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuDesktopFrameWidth
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|bool
name|adjustToDesktop
init|=
operator|!
name|window
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_DontShowOnScreen
argument_list|)
decl_stmt|;
comment|// if the screens have very different geometries and the menu is too big, we have to recalculate
if|if
condition|(
name|size
operator|.
name|height
argument_list|()
operator|>
name|screen
operator|.
name|height
argument_list|()
operator|||
name|size
operator|.
name|width
argument_list|()
operator|>
name|screen
operator|.
name|width
argument_list|()
condition|)
block|{
name|size
operator|=
name|d
operator|->
name|adjustMenuSizeForScreen
argument_list|(
name|screen
argument_list|)
expr_stmt|;
name|adjustToDesktop
operator|=
literal|true
expr_stmt|;
block|}
comment|// Layout is not right, we might be able to save horizontal space
if|if
condition|(
name|d
operator|->
name|ncols
operator|>
literal|1
operator|&&
name|size
operator|.
name|height
argument_list|()
operator|<
name|screen
operator|.
name|height
argument_list|()
condition|)
block|{
name|size
operator|=
name|d
operator|->
name|adjustMenuSizeForScreen
argument_list|(
name|screen
argument_list|)
expr_stmt|;
name|adjustToDesktop
operator|=
literal|true
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
operator|!
name|atAction
operator|&&
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
comment|// Try to have one item activated
if|if
condition|(
name|d
operator|->
name|defaultAction
operator|&&
name|d
operator|->
name|defaultAction
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|atAction
operator|=
name|d
operator|->
name|defaultAction
expr_stmt|;
comment|// TODO: This works for first level menus, not yet sub menus
block|}
else|else
block|{
foreach|foreach
control|(
name|QAction
modifier|*
name|action
decl|,
name|d
operator|->
name|actions
control|)
if|if
condition|(
name|action
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|atAction
operator|=
name|action
expr_stmt|;
break|break;
block|}
block|}
name|d
operator|->
name|currentAction
operator|=
name|atAction
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|d
operator|->
name|ncols
operator|>
literal|1
condition|)
block|{
name|pos
operator|.
name|setY
argument_list|(
name|screen
operator|.
name|top
argument_list|()
operator|+
name|desktopFrame
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|atAction
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|above_height
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|actions
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QAction
modifier|*
name|action
init|=
name|d
operator|->
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
name|atAction
condition|)
block|{
name|int
name|newY
init|=
name|pos
operator|.
name|y
argument_list|()
operator|-
name|above_height
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|scroll
operator|&&
name|newY
operator|<
name|desktopFrame
condition|)
block|{
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator|=
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator||
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollUp
expr_stmt|;
name|d
operator|->
name|scroll
operator|->
name|scrollOffset
operator|=
name|newY
expr_stmt|;
name|newY
operator|=
name|desktopFrame
expr_stmt|;
block|}
name|pos
operator|.
name|setY
argument_list|(
name|newY
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|scroll
operator|&&
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator|!=
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollNone
operator|&&
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_FillScreenWithScroll
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
block|{
name|int
name|below_height
init|=
name|above_height
operator|+
name|d
operator|->
name|scroll
operator|->
name|scrollOffset
decl_stmt|;
for|for
control|(
name|int
name|i2
init|=
name|i
init|;
name|i2
operator|<
name|d
operator|->
name|actionRects
operator|.
name|count
argument_list|()
condition|;
name|i2
operator|++
control|)
name|below_height
operator|+=
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|i2
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
name|size
operator|.
name|setHeight
argument_list|(
name|below_height
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
else|else
block|{
name|above_height
operator|+=
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|QPoint
name|mouse
init|=
name|QCursor
operator|::
name|pos
argument_list|()
decl_stmt|;
name|d
operator|->
name|mousePopupPos
operator|=
name|mouse
expr_stmt|;
specifier|const
name|bool
name|snapToMouse
init|=
operator|!
name|d
operator|->
name|causedPopup
operator|.
name|widget
operator|&&
operator|(
name|QRect
argument_list|(
name|p
operator|.
name|x
argument_list|()
operator|-
literal|3
argument_list|,
name|p
operator|.
name|y
argument_list|()
operator|-
literal|3
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|)
operator|.
name|contains
argument_list|(
name|mouse
argument_list|)
operator|)
decl_stmt|;
specifier|const
name|QSize
name|menuSize
argument_list|(
name|sizeHint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjustToDesktop
condition|)
block|{
comment|// handle popup falling "off screen"
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
if|if
condition|(
name|snapToMouse
condition|)
comment|// position flowing left from the mouse
name|pos
operator|.
name|setX
argument_list|(
name|mouse
operator|.
name|x
argument_list|()
operator|-
name|size
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
comment|// if the menu is in a menubar or is a submenu, it should be right-aligned
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|causedPopup
operator|.
name|widget
argument_list|)
operator|||
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|causedPopup
operator|.
name|widget
argument_list|)
condition|)
name|pos
operator|.
name|rx
argument_list|()
operator|-=
name|size
operator|.
name|width
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|//QT_NO_MENUBAR
if|if
condition|(
name|pos
operator|.
name|x
argument_list|()
operator|<
name|screen
operator|.
name|left
argument_list|()
operator|+
name|desktopFrame
condition|)
name|pos
operator|.
name|setX
argument_list|(
name|qMax
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|,
name|screen
operator|.
name|left
argument_list|()
operator|+
name|desktopFrame
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|.
name|x
argument_list|()
operator|+
name|size
operator|.
name|width
argument_list|()
operator|-
literal|1
operator|>
name|screen
operator|.
name|right
argument_list|()
operator|-
name|desktopFrame
condition|)
name|pos
operator|.
name|setX
argument_list|(
name|qMax
argument_list|(
name|p
operator|.
name|x
argument_list|()
operator|-
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|screen
operator|.
name|right
argument_list|()
operator|-
name|desktopFrame
operator|-
name|size
operator|.
name|width
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|pos
operator|.
name|x
argument_list|()
operator|+
name|size
operator|.
name|width
argument_list|()
operator|-
literal|1
operator|>
name|screen
operator|.
name|right
argument_list|()
operator|-
name|desktopFrame
condition|)
name|pos
operator|.
name|setX
argument_list|(
name|screen
operator|.
name|right
argument_list|()
operator|-
name|desktopFrame
operator|-
name|size
operator|.
name|width
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|.
name|x
argument_list|()
operator|<
name|screen
operator|.
name|left
argument_list|()
operator|+
name|desktopFrame
condition|)
name|pos
operator|.
name|setX
argument_list|(
name|screen
operator|.
name|left
argument_list|()
operator|+
name|desktopFrame
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|.
name|y
argument_list|()
operator|+
name|size
operator|.
name|height
argument_list|()
operator|-
literal|1
operator|>
name|screen
operator|.
name|bottom
argument_list|()
operator|-
name|desktopFrame
condition|)
block|{
if|if
condition|(
name|snapToMouse
condition|)
name|pos
operator|.
name|setY
argument_list|(
name|qMin
argument_list|(
name|mouse
operator|.
name|y
argument_list|()
operator|-
operator|(
name|size
operator|.
name|height
argument_list|()
operator|+
name|desktopFrame
operator|)
argument_list|,
name|screen
operator|.
name|bottom
argument_list|()
operator|-
name|desktopFrame
operator|-
name|size
operator|.
name|height
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|pos
operator|.
name|setY
argument_list|(
name|qMax
argument_list|(
name|p
operator|.
name|y
argument_list|()
operator|-
operator|(
name|size
operator|.
name|height
argument_list|()
operator|+
name|desktopFrame
operator|)
argument_list|,
name|screen
operator|.
name|bottom
argument_list|()
operator|-
name|desktopFrame
operator|-
name|size
operator|.
name|height
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pos
operator|.
name|y
argument_list|()
operator|<
name|screen
operator|.
name|top
argument_list|()
operator|+
name|desktopFrame
condition|)
block|{
name|pos
operator|.
name|setY
argument_list|(
name|screen
operator|.
name|top
argument_list|()
operator|+
name|desktopFrame
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|.
name|y
argument_list|()
operator|<
name|screen
operator|.
name|top
argument_list|()
operator|+
name|desktopFrame
condition|)
name|pos
operator|.
name|setY
argument_list|(
name|screen
operator|.
name|top
argument_list|()
operator|+
name|desktopFrame
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|.
name|y
argument_list|()
operator|+
name|menuSize
operator|.
name|height
argument_list|()
operator|-
literal|1
operator|>
name|screen
operator|.
name|bottom
argument_list|()
operator|-
name|desktopFrame
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|scroll
condition|)
block|{
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator||=
name|uint
argument_list|(
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollDown
argument_list|)
expr_stmt|;
name|int
name|y
init|=
name|qMax
argument_list|(
name|screen
operator|.
name|y
argument_list|()
argument_list|,
name|pos
operator|.
name|y
argument_list|()
argument_list|)
decl_stmt|;
name|size
operator|.
name|setHeight
argument_list|(
name|screen
operator|.
name|bottom
argument_list|()
operator|-
operator|(
name|desktopFrame
operator|*
literal|2
operator|)
operator|-
name|y
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Too big for screen, bias to see bottom of menu (for some reason)
name|pos
operator|.
name|setY
argument_list|(
name|screen
operator|.
name|bottom
argument_list|()
operator|-
name|size
operator|.
name|height
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|const
name|int
name|subMenuOffset
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SubMenuOverlap
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|QMenu
modifier|*
name|caused
init|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|caused
operator|&&
name|caused
operator|->
name|geometry
argument_list|()
operator|.
name|width
argument_list|()
operator|+
name|menuSize
operator|.
name|width
argument_list|()
operator|+
name|subMenuOffset
operator|<
name|screen
operator|.
name|width
argument_list|()
condition|)
block|{
name|QRect
name|parentActionRect
argument_list|(
name|caused
operator|->
name|d_func
argument_list|()
operator|->
name|actionRect
argument_list|(
name|caused
operator|->
name|d_func
argument_list|()
operator|->
name|currentAction
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|actionTopLeft
init|=
name|caused
operator|->
name|mapToGlobal
argument_list|(
name|parentActionRect
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
name|parentActionRect
operator|.
name|moveTopLeft
argument_list|(
name|actionTopLeft
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|pos
operator|.
name|x
argument_list|()
operator|+
name|menuSize
operator|.
name|width
argument_list|()
operator|>
name|parentActionRect
operator|.
name|left
argument_list|()
operator|-
name|subMenuOffset
operator|)
operator|&&
operator|(
name|pos
operator|.
name|x
argument_list|()
operator|<
name|parentActionRect
operator|.
name|right
argument_list|()
operator|)
condition|)
block|{
name|pos
operator|.
name|rx
argument_list|()
operator|=
name|parentActionRect
operator|.
name|left
argument_list|()
operator|-
name|menuSize
operator|.
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
operator|.
name|x
argument_list|()
operator|<
name|screen
operator|.
name|x
argument_list|()
condition|)
name|pos
operator|.
name|rx
argument_list|()
operator|=
name|parentActionRect
operator|.
name|right
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
operator|.
name|x
argument_list|()
operator|+
name|menuSize
operator|.
name|width
argument_list|()
operator|>
name|screen
operator|.
name|x
argument_list|()
operator|+
name|screen
operator|.
name|width
argument_list|()
condition|)
name|pos
operator|.
name|rx
argument_list|()
operator|=
name|screen
operator|.
name|x
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
name|pos
operator|.
name|x
argument_list|()
operator|<
name|parentActionRect
operator|.
name|right
argument_list|()
operator|+
name|subMenuOffset
operator|)
operator|&&
operator|(
name|pos
operator|.
name|x
argument_list|()
operator|+
name|menuSize
operator|.
name|width
argument_list|()
operator|>
name|parentActionRect
operator|.
name|left
argument_list|()
operator|)
condition|)
block|{
name|pos
operator|.
name|rx
argument_list|()
operator|=
name|parentActionRect
operator|.
name|right
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
operator|.
name|x
argument_list|()
operator|+
name|menuSize
operator|.
name|width
argument_list|()
operator|>
name|screen
operator|.
name|x
argument_list|()
operator|+
name|screen
operator|.
name|width
argument_list|()
condition|)
name|pos
operator|.
name|rx
argument_list|()
operator|=
name|parentActionRect
operator|.
name|left
argument_list|()
operator|-
name|menuSize
operator|.
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
operator|.
name|x
argument_list|()
operator|<
name|screen
operator|.
name|x
argument_list|()
condition|)
name|pos
operator|.
name|rx
argument_list|()
operator|=
name|screen
operator|.
name|x
argument_list|()
operator|+
name|screen
operator|.
name|width
argument_list|()
operator|-
name|menuSize
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|pos
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_EFFECTS
name|int
name|hGuess
init|=
name|isRightToLeft
argument_list|()
condition|?
name|QEffects
operator|::
name|LeftScroll
else|:
name|QEffects
operator|::
name|RightScroll
decl_stmt|;
name|int
name|vGuess
init|=
name|QEffects
operator|::
name|DownScroll
decl_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|snapToMouse
operator|&&
operator|(
name|pos
operator|.
name|x
argument_list|()
operator|+
name|size
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|>
name|mouse
operator|.
name|x
argument_list|()
operator|)
operator|)
operator|||
operator|(
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|causedPopup
operator|.
name|widget
argument_list|)
operator|&&
name|pos
operator|.
name|x
argument_list|()
operator|+
name|size
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|>
name|d
operator|->
name|causedPopup
operator|.
name|widget
operator|->
name|x
argument_list|()
operator|)
condition|)
name|hGuess
operator|=
name|QEffects
operator|::
name|RightScroll
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|snapToMouse
operator|&&
operator|(
name|pos
operator|.
name|x
argument_list|()
operator|+
name|size
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|<
name|mouse
operator|.
name|x
argument_list|()
operator|)
operator|)
operator|||
operator|(
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|causedPopup
operator|.
name|widget
argument_list|)
operator|&&
name|pos
operator|.
name|x
argument_list|()
operator|+
name|size
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|<
name|d
operator|->
name|causedPopup
operator|.
name|widget
operator|->
name|x
argument_list|()
operator|)
condition|)
name|hGuess
operator|=
name|QEffects
operator|::
name|LeftScroll
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
if|if
condition|(
operator|(
name|snapToMouse
operator|&&
operator|(
name|pos
operator|.
name|y
argument_list|()
operator|+
name|size
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|<
name|mouse
operator|.
name|y
argument_list|()
operator|)
operator|)
operator|||
operator|(
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|causedPopup
operator|.
name|widget
argument_list|)
operator|&&
name|pos
operator|.
name|y
argument_list|()
operator|+
name|size
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|<
name|d
operator|->
name|causedPopup
operator|.
name|widget
operator|->
name|mapToGlobal
argument_list|(
name|d
operator|->
name|causedPopup
operator|.
name|widget
operator|->
name|pos
argument_list|()
argument_list|)
operator|.
name|y
argument_list|()
operator|)
condition|)
name|vGuess
operator|=
name|QEffects
operator|::
name|UpScroll
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|QApplication
operator|::
name|isEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateMenu
argument_list|)
condition|)
block|{
name|bool
name|doChildEffects
init|=
literal|true
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
if|if
condition|(
name|QMenuBar
modifier|*
name|mb
init|=
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|causedPopup
operator|.
name|widget
argument_list|)
condition|)
block|{
name|doChildEffects
operator|=
name|mb
operator|->
name|d_func
argument_list|()
operator|->
name|doChildEffects
expr_stmt|;
name|mb
operator|->
name|d_func
argument_list|()
operator|->
name|doChildEffects
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
endif|#
directive|endif
if|if
condition|(
name|QMenu
modifier|*
name|m
init|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|causedPopup
operator|.
name|widget
argument_list|)
condition|)
block|{
name|doChildEffects
operator|=
name|m
operator|->
name|d_func
argument_list|()
operator|->
name|doChildEffects
expr_stmt|;
name|m
operator|->
name|d_func
argument_list|()
operator|->
name|doChildEffects
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|doChildEffects
condition|)
block|{
if|if
condition|(
name|QApplication
operator|::
name|isEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_FadeMenu
argument_list|)
condition|)
name|qFadeEffect
argument_list|(
name|this
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|d
operator|->
name|causedPopup
operator|.
name|widget
condition|)
name|qScrollEffect
argument_list|(
name|this
argument_list|,
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|causedPopup
operator|.
name|widget
argument_list|)
condition|?
name|hGuess
else|:
name|vGuess
argument_list|)
expr_stmt|;
else|else
name|qScrollEffect
argument_list|(
name|this
argument_list|,
name|hGuess
operator||
name|vGuess
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// kill any running effect
name|qFadeEffect
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qScrollEffect
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|show
argument_list|()
expr_stmt|;
block|}
block|}
else|else
endif|#
directive|endif
block|{
name|show
argument_list|()
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessibleEvent
name|event
argument_list|(
name|this
argument_list|,
name|QAccessible
operator|::
name|PopupMenuStart
argument_list|)
decl_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Executes this menu synchronously.      This is equivalent to \c{exec(pos())}.      This returns the triggered QAction in either the popup menu or one     of its submenus, or 0 if no item was triggered (normally because     the user pressed Esc).      In most situations you'll want to specify the position yourself,     for example, the current mouse position:     \snippet code/src_gui_widgets_qmenu.cpp 0     or aligned to a widget:     \snippet code/src_gui_widgets_qmenu.cpp 1     or in reaction to a QMouseEvent *e:     \snippet code/src_gui_widgets_qmenu.cpp 2 */
end_comment
begin_function
DECL|function|exec
name|QAction
modifier|*
name|QMenu
operator|::
name|exec
parameter_list|()
block|{
return|return
name|exec
argument_list|(
name|pos
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      Executes this menu synchronously.      Pops up the menu so that the action \a action will be at the     specified \e global position \a p. To translate a widget's local     coordinates into global coordinates, use QWidget::mapToGlobal().      This returns the triggered QAction in either the popup menu or one     of its submenus, or 0 if no item was triggered (normally because     the user pressed Esc).      Note that all signals are emitted as usual. If you connect a     QAction to a slot and call the menu's exec(), you get the result     both via the signal-slot connection and in the return value of     exec().      Common usage is to position the menu at the current mouse     position:     \snippet code/src_gui_widgets_qmenu.cpp 3     or aligned to a widget:     \snippet code/src_gui_widgets_qmenu.cpp 4     or in reaction to a QMouseEvent *e:     \snippet code/src_gui_widgets_qmenu.cpp 5      When positioning a menu with exec() or popup(), bear in mind that     you cannot rely on the menu's current size(). For performance     reasons, the menu adapts its size only when necessary. So in many     cases, the size before and after the show is different. Instead,     use sizeHint() which calculates the proper size depending on the     menu's current contents.      \sa popup(), QWidget::mapToGlobal() */
end_comment
begin_function
DECL|function|exec
name|QAction
modifier|*
name|QMenu
operator|::
name|exec
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|,
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|ensurePolished
argument_list|()
expr_stmt|;
name|createWinId
argument_list|()
expr_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|d
operator|->
name|eventLoop
operator|=
operator|&
name|eventLoop
expr_stmt|;
name|popup
argument_list|(
name|p
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QObject
argument_list|>
name|guard
init|=
name|this
decl_stmt|;
operator|(
name|void
operator|)
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
if|if
condition|(
name|guard
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|0
return|;
name|action
operator|=
name|d
operator|->
name|syncAction
expr_stmt|;
name|d
operator|->
name|syncAction
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|eventLoop
operator|=
literal|0
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      Executes a menu synchronously.      The menu's actions are specified by the list of \a actions. The menu will     pop up so that the specified action, \a at, appears at global position \a     pos. If \a at is not specified then the menu appears at position \a     pos. \a parent is the menu's parent widget; specifying the parent will     provide context when \a pos alone is not enough to decide where the menu     should go (e.g., with multiple desktops or when the parent is embedded in     QGraphicsView).      The function returns the triggered QAction in either the popup     menu or one of its submenus, or 0 if no item was triggered     (normally because the user pressed Esc).      This is equivalent to:     \snippet code/src_gui_widgets_qmenu.cpp 6      \sa popup(), QWidget::mapToGlobal() */
end_comment
begin_if
if|#
directive|if
name|QT_VERSION
operator|>=
name|QT_VERSION_CHECK
argument_list|(
literal|6
operator|,
literal|0
operator|,
literal|0
argument_list|)
end_if
begin_decl_stmt
DECL|function|exec
name|QAction
modifier|*
name|QMenu
operator|::
name|exec
argument_list|(
specifier|const
name|QList
argument_list|<
name|QAction
operator|*
argument_list|>
operator|&
name|actions
argument_list|,
specifier|const
name|QPoint
operator|&
name|pos
argument_list|,
name|QAction
operator|*
name|at
argument_list|,
name|QWidget
operator|*
name|parent
argument_list|)
else|#
directive|else
name|QAction
modifier|*
name|QMenu
operator|::
name|exec
argument_list|(
name|QList
argument_list|<
name|QAction
operator|*
argument_list|>
name|actions
argument_list|,
specifier|const
name|QPoint
operator|&
name|pos
argument_list|,
name|QAction
operator|*
name|at
argument_list|,
name|QWidget
operator|*
name|parent
argument_list|)
endif|#
directive|endif
argument_list|{
name|QMenu
name|menu
argument_list|(
name|parent
argument_list|)
argument_list|;
name|menu
operator|.
name|addActions
argument_list|(
name|actions
argument_list|)
argument_list|;     return
name|menu
operator|.
name|exec
argument_list|(
name|pos
argument_list|,
name|at
argument_list|)
argument_list|; }
comment|/*!   \reimp */
DECL|function|hideEvent
name|void
name|QMenu
operator|::
name|hideEvent
argument_list|(
name|QHideEvent
operator|*
argument_list|)
argument_list|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
argument_list|;     emit
name|aboutToHide
argument_list|()
argument_list|;     if
operator|(
name|d
operator|->
name|eventLoop
operator|)
name|d
operator|->
name|eventLoop
operator|->
name|exit
argument_list|()
argument_list|;
name|d
operator|->
name|setCurrentAction
argument_list|(
literal|0
argument_list|)
argument_list|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessibleEvent
name|event
argument_list|(
name|this
argument_list|,
name|QAccessible
operator|::
name|PopupMenuEnd
argument_list|)
argument_list|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
argument_list|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
argument_list|if
operator|(
name|QMenuBar
operator|*
name|mb
operator|=
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|causedPopup
operator|.
name|widget
argument_list|)
operator|)
name|mb
operator|->
name|d_func
argument_list|()
operator|->
name|setCurrentAction
argument_list|(
literal|0
argument_list|)
argument_list|;
endif|#
directive|endif
name|d
operator|->
name|mouseDown
operator|=
literal|0
argument_list|;
name|d
operator|->
name|hasHadMouse
operator|=
literal|false
argument_list|;     if
operator|(
name|d
operator|->
name|activeMenu
operator|)
name|d
operator|->
name|hideMenu
argument_list|(
name|d
operator|->
name|activeMenu
argument_list|)
argument_list|;
name|d
operator|->
name|causedPopup
operator|.
name|widget
operator|=
literal|0
argument_list|;
name|d
operator|->
name|causedPopup
operator|.
name|action
operator|=
literal|0
argument_list|;     if
operator|(
name|d
operator|->
name|scroll
operator|)
name|d
operator|->
name|scroll
operator|->
name|scrollTimer
operator|.
name|stop
argument_list|()
argument_list|;
comment|//make sure the timer stops
argument_list|}
comment|/*!   \reimp */
DECL|function|paintEvent
name|void
name|QMenu
operator|::
name|paintEvent
argument_list|(
name|QPaintEvent
operator|*
name|e
argument_list|)
argument_list|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
argument_list|;
name|d
operator|->
name|updateActionRects
argument_list|()
argument_list|;
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
argument_list|;
name|QRegion
name|emptyArea
operator|=
name|QRegion
argument_list|(
name|rect
argument_list|()
argument_list|)
argument_list|;
name|QStyleOptionMenuItem
name|menuOpt
argument_list|;
name|menuOpt
operator|.
name|initFrom
argument_list|(
name|this
argument_list|)
argument_list|;
name|menuOpt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
argument_list|;
name|menuOpt
operator|.
name|checkType
operator|=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
argument_list|;
name|menuOpt
operator|.
name|maxIconWidth
operator|=
literal|0
argument_list|;
name|menuOpt
operator|.
name|tabWidth
operator|=
literal|0
argument_list|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_PanelMenu
argument_list|,
operator|&
name|menuOpt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
argument_list|;
comment|//draw the items that need updating..
argument_list|for
operator|(
name|int
name|i
operator|=
literal|0
expr|;
name|i
operator|<
name|d
operator|->
name|actions
operator|.
name|count
argument_list|()
expr|;
operator|++
name|i
operator|)
block|{
name|QAction
operator|*
name|action
operator|=
name|d
operator|->
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
block|;
name|QRect
name|adjustedActionRect
operator|=
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
block|;
if|if
condition|(
operator|!
name|e
operator|->
name|rect
argument_list|()
operator|.
name|intersects
argument_list|(
name|adjustedActionRect
argument_list|)
operator|||
name|d
operator|->
name|widgetItems
operator|.
name|value
argument_list|(
name|action
argument_list|)
condition|)
continue|continue;
comment|//set the clip region to be extra safe (and adjust for the scrollers)
name|QRegion
name|adjustedActionReg
argument_list|(
name|adjustedActionRect
argument_list|)
argument_list|;
name|emptyArea
operator|-=
name|adjustedActionReg
argument_list|;
name|p
operator|.
name|setClipRegion
argument_list|(
name|adjustedActionReg
argument_list|)
argument_list|;
name|QStyleOptionMenuItem
name|opt
argument_list|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|,
name|action
argument_list|)
argument_list|;
name|opt
operator|.
name|rect
operator|=
name|adjustedActionRect
argument_list|;
name|style
argument_list|()
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_MenuItem
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
argument_list|;     }
decl|const
name|int
name|fw
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuPanelWidth
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//draw the scroller regions..
end_comment
begin_if
if|if
condition|(
name|d
operator|->
name|scroll
condition|)
block|{
name|menuOpt
operator|.
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|Scroller
expr_stmt|;
name|menuOpt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollUp
condition|)
block|{
name|menuOpt
operator|.
name|rect
operator|.
name|setRect
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|,
name|width
argument_list|()
operator|-
operator|(
name|fw
operator|*
literal|2
operator|)
argument_list|,
name|d
operator|->
name|scrollerHeight
argument_list|()
argument_list|)
expr_stmt|;
name|emptyArea
operator|-=
name|QRegion
argument_list|(
name|menuOpt
operator|.
name|rect
argument_list|)
expr_stmt|;
name|p
operator|.
name|setClipRect
argument_list|(
name|menuOpt
operator|.
name|rect
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_MenuScroller
argument_list|,
operator|&
name|menuOpt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollDown
condition|)
block|{
name|menuOpt
operator|.
name|rect
operator|.
name|setRect
argument_list|(
name|fw
argument_list|,
name|height
argument_list|()
operator|-
name|d
operator|->
name|scrollerHeight
argument_list|()
operator|-
name|fw
argument_list|,
name|width
argument_list|()
operator|-
operator|(
name|fw
operator|*
literal|2
operator|)
argument_list|,
name|d
operator|->
name|scrollerHeight
argument_list|()
argument_list|)
expr_stmt|;
name|emptyArea
operator|-=
name|QRegion
argument_list|(
name|menuOpt
operator|.
name|rect
argument_list|)
expr_stmt|;
name|menuOpt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_DownArrow
expr_stmt|;
name|p
operator|.
name|setClipRect
argument_list|(
name|menuOpt
operator|.
name|rect
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_MenuScroller
argument_list|,
operator|&
name|menuOpt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_if
begin_comment
comment|//paint the tear off..
end_comment
begin_if
if|if
condition|(
name|d
operator|->
name|tearoff
condition|)
block|{
name|menuOpt
operator|.
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|TearOff
expr_stmt|;
name|menuOpt
operator|.
name|rect
operator|.
name|setRect
argument_list|(
name|fw
argument_list|,
name|fw
argument_list|,
name|width
argument_list|()
operator|-
operator|(
name|fw
operator|*
literal|2
operator|)
argument_list|,
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuTearoffHeight
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|scroll
operator|&&
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollUp
condition|)
name|menuOpt
operator|.
name|rect
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|scrollerHeight
argument_list|()
argument_list|)
expr_stmt|;
name|emptyArea
operator|-=
name|QRegion
argument_list|(
name|menuOpt
operator|.
name|rect
argument_list|)
expr_stmt|;
name|p
operator|.
name|setClipRect
argument_list|(
name|menuOpt
operator|.
name|rect
argument_list|)
expr_stmt|;
name|menuOpt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|tearoffHighlighted
condition|)
name|menuOpt
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_MenuTearoff
argument_list|,
operator|&
name|menuOpt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_if
begin_comment
comment|//draw border
end_comment
begin_if
if|if
condition|(
name|fw
condition|)
block|{
name|QRegion
name|borderReg
decl_stmt|;
name|borderReg
operator|+=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|fw
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|//left
name|borderReg
operator|+=
name|QRect
argument_list|(
name|width
argument_list|()
operator|-
name|fw
argument_list|,
literal|0
argument_list|,
name|fw
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|//right
name|borderReg
operator|+=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|fw
argument_list|)
expr_stmt|;
comment|//top
name|borderReg
operator|+=
name|QRect
argument_list|(
literal|0
argument_list|,
name|height
argument_list|()
operator|-
name|fw
argument_list|,
name|width
argument_list|()
argument_list|,
name|fw
argument_list|)
expr_stmt|;
comment|//bottom
name|p
operator|.
name|setClipRegion
argument_list|(
name|borderReg
argument_list|)
expr_stmt|;
name|emptyArea
operator|-=
name|borderReg
expr_stmt|;
name|QStyleOptionFrame
name|frame
decl_stmt|;
name|frame
operator|.
name|rect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|frame
operator|.
name|palette
operator|=
name|palette
argument_list|()
expr_stmt|;
name|frame
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
name|frame
operator|.
name|lineWidth
operator|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuPanelWidth
argument_list|)
expr_stmt|;
name|frame
operator|.
name|midLineWidth
operator|=
literal|0
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_FrameMenu
argument_list|,
operator|&
name|frame
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_if
begin_comment
comment|//finally the rest of the space
end_comment
begin_expr_stmt
name|p
operator|.
name|setClipRegion
argument_list|(
name|emptyArea
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|menuOpt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|menuOpt
operator|.
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|EmptyArea
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|menuOpt
operator|.
name|checkType
operator|=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|menuOpt
operator|.
name|rect
operator|=
name|rect
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|menuOpt
operator|.
name|menuRect
operator|=
name|rect
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|style
argument_list|()
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_MenuEmptyArea
argument_list|,
operator|&
name|menuOpt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
end_expr_stmt
begin_ifndef
unit|}
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_comment
comment|/*!   \reimp */
end_comment
begin_macro
unit|void
DECL|function|wheelEvent
name|QMenu
end_macro
begin_expr_stmt
DECL|function|wheelEvent
operator|::
name|wheelEvent
operator|(
name|QWheelEvent
operator|*
name|e
operator|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
block|;
if|if
condition|(
name|d
operator|->
name|scroll
operator|&&
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
name|d
operator|->
name|scrollMenu
argument_list|(
name|e
operator|->
name|delta
argument_list|()
operator|>
literal|0
condition|?
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollUp
else|:
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollDown
argument_list|)
expr_stmt|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|QMenu
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|aboutToHide
operator|||
name|d
operator|->
name|mouseEventTaken
argument_list|(
name|e
argument_list|)
condition|)
return|return;
comment|// Workaround for XCB on multiple screens which doesn't have offset. If the menu is open on one screen
comment|// and mouse clicks on second screen, e->pos() is QPoint(0,0) and the menu doesn't hide. This trick makes
comment|// possible to hide the menu when mouse clicks on another screen (e->screenPos() returns correct value).
comment|// Only when mouse clicks in QPoint(0,0) on second screen, the menu doesn't hide.
if|if
condition|(
operator|(
name|e
operator|->
name|pos
argument_list|()
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|e
operator|->
name|screenPos
argument_list|()
operator|.
name|isNull
argument_list|()
operator|)
operator|||
operator|!
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|noReplayFor
operator|&&
name|QRect
argument_list|(
name|d
operator|->
name|noReplayFor
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|()
argument_list|)
argument_list|,
name|d
operator|->
name|noReplayFor
operator|->
name|size
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
condition|)
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoMouseReplay
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|eventLoop
condition|)
comment|// synchronous operation
name|d
operator|->
name|syncAction
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|hideUpToMenuBar
argument_list|()
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|mouseDown
operator|=
name|this
expr_stmt|;
name|QAction
modifier|*
name|action
init|=
name|d
operator|->
name|actionAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|->
name|setCurrentAction
argument_list|(
name|action
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QMenu
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|aboutToHide
operator|||
name|d
operator|->
name|mouseEventTaken
argument_list|(
name|e
argument_list|)
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|mouseDown
operator|!=
name|this
condition|)
block|{
name|d
operator|->
name|mouseDown
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|d
operator|->
name|mouseDown
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|setSyncAction
argument_list|()
expr_stmt|;
name|QAction
modifier|*
name|action
init|=
name|d
operator|->
name|actionAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|&&
name|action
operator|==
name|d
operator|->
name|currentAction
condition|)
block|{
if|if
condition|(
operator|!
name|action
operator|->
name|menu
argument_list|()
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
comment|//On Windows only context menus can be activated with the right button
if|if
condition|(
name|e
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|||
name|d
operator|->
name|topCausedWidget
argument_list|()
operator|==
literal|0
condition|)
endif|#
directive|endif
name|d
operator|->
name|activateAction
argument_list|(
name|action
argument_list|,
name|QAction
operator|::
name|Trigger
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
operator|!
name|action
operator|||
name|action
operator|->
name|isEnabled
argument_list|()
operator|)
operator|&&
name|d
operator|->
name|hasMouseMoved
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|)
condition|)
block|{
name|d
operator|->
name|hideUpToMenuBar
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QMenu
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StyleChange
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FontChange
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LayoutDirectionChange
condition|)
block|{
name|d
operator|->
name|itemsDirty
operator|=
literal|1
expr_stmt|;
name|setMouseTracking
argument_list|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_MouseTracking
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|resize
argument_list|(
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_Scrollable
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
block|{
operator|delete
name|d
operator|->
name|scroll
expr_stmt|;
name|d
operator|->
name|scroll
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|d
operator|->
name|scroll
condition|)
block|{
name|d
operator|->
name|scroll
operator|=
operator|new
name|QMenuPrivate
operator|::
name|QMenuScroller
expr_stmt|;
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator|=
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollNone
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|EnabledChange
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|tornPopup
condition|)
comment|// torn-off menu
name|d
operator|->
name|tornPopup
operator|->
name|setEnabled
argument_list|(
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|menuAction
operator|->
name|setEnabled
argument_list|(
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|platformMenu
operator|.
name|isNull
argument_list|()
condition|)
name|d
operator|->
name|platformMenu
operator|->
name|setEnabled
argument_list|(
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
name|bool
DECL|function|event
name|QMenu
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|Polish
case|:
name|d
operator|->
name|updateLayoutDirection
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ShortcutOverride
case|:
block|{
name|QKeyEvent
modifier|*
name|kev
init|=
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|kev
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Up
operator|||
name|kev
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Down
operator|||
name|kev
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Left
operator|||
name|kev
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Right
operator|||
name|kev
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Enter
operator|||
name|kev
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Return
operator|||
name|kev
operator|->
name|matches
argument_list|(
name|QKeySequence
operator|::
name|Cancel
argument_list|)
condition|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
case|case
name|QEvent
operator|::
name|KeyPress
case|:
block|{
name|QKeyEvent
modifier|*
name|ke
init|=
operator|(
name|QKeyEvent
operator|*
operator|)
name|e
decl_stmt|;
if|if
condition|(
name|ke
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Tab
operator|||
name|ke
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Backtab
condition|)
block|{
name|keyPressEvent
argument_list|(
name|ke
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|ContextMenu
case|:
block|{
name|bool
name|canPopup
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonPress
condition|)
name|canPopup
operator|=
operator|(
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|button
argument_list|()
operator|==
name|Qt
operator|::
name|LeftButton
operator|)
expr_stmt|;
if|if
condition|(
name|canPopup
operator|&&
name|d
operator|->
name|delayState
operator|.
name|timer
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|d
operator|->
name|delayState
operator|.
name|stop
argument_list|()
expr_stmt|;
name|internalDelayedPopup
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
name|QEvent
operator|::
name|Resize
case|:
block|{
name|QStyleHintReturnMask
name|menuMask
decl_stmt|;
name|QStyleOption
name|option
decl_stmt|;
name|option
operator|.
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_Mask
argument_list|,
operator|&
name|option
argument_list|,
name|this
argument_list|,
operator|&
name|menuMask
argument_list|)
condition|)
block|{
name|setMask
argument_list|(
name|menuMask
operator|.
name|region
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|itemsDirty
operator|=
literal|1
expr_stmt|;
name|d
operator|->
name|updateActionRects
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|Show
case|:
name|d
operator|->
name|mouseDown
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|updateActionRects
argument_list|()
expr_stmt|;
name|d
operator|->
name|sloppyState
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentAction
condition|)
name|d
operator|->
name|popupAction
argument_list|(
name|d
operator|->
name|currentAction
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
case|case
name|QEvent
operator|::
name|ToolTip
case|:
if|if
condition|(
name|d
operator|->
name|toolTipsVisible
condition|)
block|{
specifier|const
name|QHelpEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
specifier|const
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
specifier|const
name|QAction
modifier|*
name|action
init|=
name|actionAt
argument_list|(
name|ev
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|toolTip
init|=
name|action
operator|->
name|d_func
argument_list|()
operator|->
name|tooltip
decl_stmt|;
if|if
condition|(
operator|!
name|toolTip
operator|.
name|isEmpty
argument_list|()
condition|)
name|QToolTip
operator|::
name|showText
argument_list|(
name|ev
operator|->
name|globalPos
argument_list|()
argument_list|,
name|toolTip
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
endif|#
directive|endif
comment|// QT_NO_TOOLTIP
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
case|case
name|QEvent
operator|::
name|QueryWhatsThis
case|:
name|e
operator|->
name|setAccepted
argument_list|(
name|d
operator|->
name|whatsThis
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAction
modifier|*
name|action
init|=
name|d
operator|->
name|actionAt
argument_list|(
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|action
operator|->
name|whatsThis
argument_list|()
operator|.
name|size
argument_list|()
operator|||
name|action
operator|->
name|menu
argument_list|()
condition|)
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
endif|#
directive|endif
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|focusNextPrevChild
name|bool
name|QMenu
operator|::
name|focusNextPrevChild
parameter_list|(
name|bool
name|next
parameter_list|)
block|{
name|setFocus
argument_list|()
expr_stmt|;
name|QKeyEvent
name|ev
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|next
condition|?
name|Qt
operator|::
name|Key_Tab
else|:
name|Qt
operator|::
name|Key_Backtab
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|keyPressEvent
argument_list|(
operator|&
name|ev
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QMenu
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateActionRects
argument_list|()
expr_stmt|;
name|int
name|key
init|=
name|e
operator|->
name|key
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
comment|// in reverse mode open/close key for submenues are reversed
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Left
condition|)
name|key
operator|=
name|Qt
operator|::
name|Key_Right
expr_stmt|;
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Right
condition|)
name|key
operator|=
name|Qt
operator|::
name|Key_Left
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|Q_OS_MAC
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Tab
condition|)
comment|//means down
name|key
operator|=
name|Qt
operator|::
name|Key_Down
expr_stmt|;
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Backtab
condition|)
comment|//means up
name|key
operator|=
name|Qt
operator|::
name|Key_Up
expr_stmt|;
endif|#
directive|endif
name|bool
name|key_consumed
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|key
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Home
case|:
name|key_consumed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|scroll
condition|)
name|d
operator|->
name|scrollMenu
argument_list|(
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollTop
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_End
case|:
name|key_consumed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|scroll
condition|)
name|d
operator|->
name|scrollMenu
argument_list|(
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollBottom
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_PageUp
case|:
name|key_consumed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentAction
operator|&&
name|d
operator|->
name|scroll
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollUp
condition|)
name|d
operator|->
name|scrollMenu
argument_list|(
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollUp
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|scrollMenu
argument_list|(
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollTop
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|Key_PageDown
case|:
name|key_consumed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentAction
operator|&&
name|d
operator|->
name|scroll
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollDown
condition|)
name|d
operator|->
name|scrollMenu
argument_list|(
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollDown
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|scrollMenu
argument_list|(
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollBottom
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|Key_Up
case|:
case|case
name|Qt
operator|::
name|Key_Down
case|:
block|{
name|key_consumed
operator|=
literal|true
expr_stmt|;
name|QAction
modifier|*
name|nextAction
init|=
literal|0
decl_stmt|;
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollLocation
name|scroll_loc
init|=
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollStay
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|currentAction
condition|)
block|{
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Down
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|actions
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QAction
modifier|*
name|act
init|=
name|d
operator|->
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|act
operator|->
name|isSeparator
argument_list|()
operator|&&
operator|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_AllowActiveAndDisabled
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
operator|||
name|act
operator|->
name|isEnabled
argument_list|()
operator|)
condition|)
block|{
name|nextAction
operator|=
name|act
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|d
operator|->
name|actions
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QAction
modifier|*
name|act
init|=
name|d
operator|->
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|act
operator|->
name|isSeparator
argument_list|()
operator|&&
operator|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_AllowActiveAndDisabled
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
operator|||
name|act
operator|->
name|isEnabled
argument_list|()
operator|)
condition|)
block|{
name|nextAction
operator|=
name|act
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|y
init|=
literal|0
init|;
operator|!
name|nextAction
operator|&&
name|i
operator|<
name|d
operator|->
name|actions
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QAction
modifier|*
name|act
init|=
name|d
operator|->
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|act
operator|==
name|d
operator|->
name|currentAction
condition|)
block|{
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Up
condition|)
block|{
for|for
control|(
name|int
name|next_i
init|=
name|i
operator|-
literal|1
init|;
literal|true
condition|;
name|next_i
operator|--
control|)
block|{
if|if
condition|(
name|next_i
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_SelectionWrap
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
break|break;
if|if
condition|(
name|d
operator|->
name|scroll
condition|)
name|scroll_loc
operator|=
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollBottom
expr_stmt|;
name|next_i
operator|=
name|d
operator|->
name|actionRects
operator|.
name|count
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
name|QAction
modifier|*
name|next
init|=
name|d
operator|->
name|actions
operator|.
name|at
argument_list|(
name|next_i
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|d
operator|->
name|currentAction
condition|)
break|break;
if|if
condition|(
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|next_i
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|next
operator|->
name|isSeparator
argument_list|()
operator|||
operator|(
operator|!
name|next
operator|->
name|isEnabled
argument_list|()
operator|&&
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_AllowActiveAndDisabled
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
operator|)
condition|)
continue|continue;
name|nextAction
operator|=
name|next
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|scroll
operator|&&
operator|(
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollUp
operator|)
condition|)
block|{
name|int
name|topVisible
init|=
name|d
operator|->
name|scrollerHeight
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|tearoff
condition|)
name|topVisible
operator|+=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuTearoffHeight
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|y
operator|+
name|d
operator|->
name|scroll
operator|->
name|scrollOffset
operator|)
operator|-
name|topVisible
operator|)
operator|<=
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|next_i
argument_list|)
operator|.
name|height
argument_list|()
condition|)
name|scroll_loc
operator|=
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollTop
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
operator|!
name|nextAction
operator|&&
name|d
operator|->
name|tearoff
condition|)
name|d
operator|->
name|tearoffHighlighted
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|y
operator|+=
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|next_i
init|=
name|i
operator|+
literal|1
init|;
literal|true
condition|;
name|next_i
operator|++
control|)
block|{
if|if
condition|(
name|next_i
operator|==
name|d
operator|->
name|actionRects
operator|.
name|count
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_SelectionWrap
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
break|break;
if|if
condition|(
name|d
operator|->
name|scroll
condition|)
name|scroll_loc
operator|=
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollTop
expr_stmt|;
name|next_i
operator|=
literal|0
expr_stmt|;
block|}
name|QAction
modifier|*
name|next
init|=
name|d
operator|->
name|actions
operator|.
name|at
argument_list|(
name|next_i
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|d
operator|->
name|currentAction
condition|)
break|break;
if|if
condition|(
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|next_i
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|next
operator|->
name|isSeparator
argument_list|()
operator|||
operator|(
operator|!
name|next
operator|->
name|isEnabled
argument_list|()
operator|&&
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_AllowActiveAndDisabled
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
operator|)
condition|)
continue|continue;
name|nextAction
operator|=
name|next
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|scroll
operator|&&
operator|(
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollDown
operator|)
condition|)
block|{
name|int
name|bottomVisible
init|=
name|height
argument_list|()
operator|-
name|d
operator|->
name|scrollerHeight
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator|&
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollUp
condition|)
name|bottomVisible
operator|-=
name|d
operator|->
name|scrollerHeight
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|tearoff
condition|)
name|bottomVisible
operator|-=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuTearoffHeight
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|y
operator|+
name|d
operator|->
name|scroll
operator|->
name|scrollOffset
operator|+
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|next_i
argument_list|)
operator|.
name|height
argument_list|()
operator|)
operator|>
name|bottomVisible
condition|)
name|scroll_loc
operator|=
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollBottom
expr_stmt|;
block|}
break|break;
block|}
block|}
break|break;
block|}
name|y
operator|+=
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nextAction
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|scroll
operator|&&
name|scroll_loc
operator|!=
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollStay
condition|)
block|{
name|d
operator|->
name|scroll
operator|->
name|scrollTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|d
operator|->
name|scrollMenu
argument_list|(
name|nextAction
argument_list|,
name|scroll_loc
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|setCurrentAction
argument_list|(
name|nextAction
argument_list|,
comment|/*popup*/
operator|-
literal|1
argument_list|,
name|QMenuPrivate
operator|::
name|SelectedFromKeyboard
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Qt
operator|::
name|Key_Right
case|:
if|if
condition|(
name|d
operator|->
name|currentAction
operator|&&
name|d
operator|->
name|currentAction
operator|->
name|isEnabled
argument_list|()
operator|&&
name|d
operator|->
name|currentAction
operator|->
name|menu
argument_list|()
condition|)
block|{
name|d
operator|->
name|popupAction
argument_list|(
name|d
operator|->
name|currentAction
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|key_consumed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
comment|//FALL THROUGH
case|case
name|Qt
operator|::
name|Key_Left
case|:
block|{
if|if
condition|(
name|d
operator|->
name|currentAction
operator|&&
operator|!
name|d
operator|->
name|scroll
condition|)
block|{
name|QAction
modifier|*
name|nextAction
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Left
condition|)
block|{
name|QRect
name|actionR
init|=
name|d
operator|->
name|actionRect
argument_list|(
name|d
operator|->
name|currentAction
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|actionR
operator|.
name|left
argument_list|()
operator|-
literal|1
init|;
operator|!
name|nextAction
operator|&&
name|x
operator|>=
literal|0
condition|;
name|x
operator|--
control|)
name|nextAction
operator|=
name|d
operator|->
name|actionAt
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|actionR
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QRect
name|actionR
init|=
name|d
operator|->
name|actionRect
argument_list|(
name|d
operator|->
name|currentAction
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|actionR
operator|.
name|right
argument_list|()
operator|+
literal|1
init|;
operator|!
name|nextAction
operator|&&
name|x
operator|<
name|width
argument_list|()
condition|;
name|x
operator|++
control|)
name|nextAction
operator|=
name|d
operator|->
name|actionAt
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|actionR
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nextAction
condition|)
block|{
name|d
operator|->
name|setCurrentAction
argument_list|(
name|nextAction
argument_list|,
comment|/*popup*/
operator|-
literal|1
argument_list|,
name|QMenuPrivate
operator|::
name|SelectedFromKeyboard
argument_list|)
expr_stmt|;
name|key_consumed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|key_consumed
operator|&&
name|key
operator|==
name|Qt
operator|::
name|Key_Left
operator|&&
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|causedPopup
operator|.
name|widget
argument_list|)
condition|)
block|{
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|caused
init|=
name|d
operator|->
name|causedPopup
operator|.
name|widget
decl_stmt|;
name|d
operator|->
name|hideMenu
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|caused
condition|)
name|caused
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|key_consumed
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Qt
operator|::
name|Key_Alt
case|:
if|if
condition|(
name|d
operator|->
name|tornoff
condition|)
break|break;
name|key_consumed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MenuBar_AltKeyNavigation
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
block|{
name|d
operator|->
name|hideMenu
argument_list|(
name|this
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
if|if
condition|(
name|QMenuBar
modifier|*
name|mb
init|=
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|)
condition|)
block|{
name|mb
operator|->
name|d_func
argument_list|()
operator|->
name|setKeyboardMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
break|break;
case|case
name|Qt
operator|::
name|Key_Space
case|:
if|if
condition|(
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_SpaceActivatesItem
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
break|break;
comment|// for motif, fall through
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
case|case
name|Qt
operator|::
name|Key_Select
case|:
endif|#
directive|endif
case|case
name|Qt
operator|::
name|Key_Return
case|:
case|case
name|Qt
operator|::
name|Key_Enter
case|:
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|currentAction
condition|)
block|{
name|d
operator|->
name|setFirstActionActive
argument_list|()
expr_stmt|;
name|key_consumed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|d
operator|->
name|setSyncAction
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentAction
operator|->
name|menu
argument_list|()
condition|)
name|d
operator|->
name|popupAction
argument_list|(
name|d
operator|->
name|currentAction
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|activateAction
argument_list|(
name|d
operator|->
name|currentAction
argument_list|,
name|QAction
operator|::
name|Trigger
argument_list|)
expr_stmt|;
name|key_consumed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
case|case
name|Qt
operator|::
name|Key_F1
case|:
if|if
condition|(
operator|!
name|d
operator|->
name|currentAction
operator|||
name|d
operator|->
name|currentAction
operator|->
name|whatsThis
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
break|break;
name|QWhatsThis
operator|::
name|enterWhatsThisMode
argument_list|()
expr_stmt|;
name|d
operator|->
name|activateAction
argument_list|(
name|d
operator|->
name|currentAction
argument_list|,
name|QAction
operator|::
name|Trigger
argument_list|)
expr_stmt|;
return|return;
endif|#
directive|endif
default|default:
name|key_consumed
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|key_consumed
operator|&&
operator|(
name|e
operator|->
name|matches
argument_list|(
name|QKeySequence
operator|::
name|Cancel
argument_list|)
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
operator|||
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Back
endif|#
directive|endif
operator|)
condition|)
block|{
name|key_consumed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|tornoff
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
block|{
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|caused
init|=
name|d
operator|->
name|causedPopup
operator|.
name|widget
decl_stmt|;
name|d
operator|->
name|hideMenu
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// hide after getting causedPopup
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
if|if
condition|(
name|QMenuBar
modifier|*
name|mb
init|=
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|caused
argument_list|)
condition|)
block|{
name|mb
operator|->
name|d_func
argument_list|()
operator|->
name|setCurrentAction
argument_list|(
name|d
operator|->
name|menuAction
argument_list|)
expr_stmt|;
name|mb
operator|->
name|d_func
argument_list|()
operator|->
name|setKeyboardMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
block|}
if|if
condition|(
operator|!
name|key_consumed
condition|)
block|{
comment|// send to menu bar
if|if
condition|(
operator|(
operator|!
name|e
operator|->
name|modifiers
argument_list|()
operator|||
name|e
operator|->
name|modifiers
argument_list|()
operator|==
name|Qt
operator|::
name|AltModifier
operator|||
name|e
operator|->
name|modifiers
argument_list|()
operator|==
name|Qt
operator|::
name|ShiftModifier
operator|)
operator|&&
name|e
operator|->
name|text
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|bool
name|activateAction
init|=
literal|false
decl_stmt|;
name|QAction
modifier|*
name|nextAction
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_KeyboardSearch
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
operator|&&
operator|!
name|e
operator|->
name|modifiers
argument_list|()
condition|)
block|{
name|int
name|best_match_count
init|=
literal|0
decl_stmt|;
name|d
operator|->
name|searchBufferTimer
operator|.
name|start
argument_list|(
literal|2000
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|searchBuffer
operator|+=
name|e
operator|->
name|text
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|actions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|match_count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
name|QAction
modifier|*
name|act
init|=
name|d
operator|->
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|act_text
init|=
name|act
operator|->
name|text
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|d
operator|->
name|searchBuffer
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
if|if
condition|(
name|act_text
operator|.
name|indexOf
argument_list|(
name|d
operator|->
name|searchBuffer
operator|.
name|at
argument_list|(
name|c
argument_list|)
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|!=
operator|-
literal|1
condition|)
operator|++
name|match_count
expr_stmt|;
block|}
if|if
condition|(
name|match_count
operator|>
name|best_match_count
condition|)
block|{
name|best_match_count
operator|=
name|match_count
expr_stmt|;
name|nextAction
operator|=
name|act
expr_stmt|;
block|}
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
else|else
block|{
name|int
name|clashCount
init|=
literal|0
decl_stmt|;
name|QAction
modifier|*
name|first
init|=
literal|0
decl_stmt|,
modifier|*
name|currentSelected
init|=
literal|0
decl_stmt|,
modifier|*
name|firstAfterCurrent
init|=
literal|0
decl_stmt|;
name|QChar
name|c
init|=
name|e
operator|->
name|text
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|actions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
name|QAction
modifier|*
name|act
init|=
name|d
operator|->
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QKeySequence
name|sequence
init|=
name|QKeySequence
operator|::
name|mnemonic
argument_list|(
name|act
operator|->
name|text
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|key
init|=
name|sequence
index|[
literal|0
index|]
operator|&
literal|0xffff
decl_stmt|;
if|if
condition|(
name|key
operator|==
name|c
operator|.
name|unicode
argument_list|()
condition|)
block|{
name|clashCount
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|first
operator|=
name|act
expr_stmt|;
if|if
condition|(
name|act
operator|==
name|d
operator|->
name|currentAction
condition|)
name|currentSelected
operator|=
name|act
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|firstAfterCurrent
operator|&&
name|currentSelected
condition|)
name|firstAfterCurrent
operator|=
name|act
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clashCount
operator|==
literal|1
condition|)
name|activateAction
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|clashCount
operator|>=
literal|1
condition|)
block|{
if|if
condition|(
name|clashCount
operator|==
literal|1
operator|||
operator|!
name|currentSelected
operator|||
operator|!
name|firstAfterCurrent
condition|)
name|nextAction
operator|=
name|first
expr_stmt|;
else|else
name|nextAction
operator|=
name|firstAfterCurrent
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|nextAction
condition|)
block|{
name|key_consumed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|scroll
condition|)
name|d
operator|->
name|scrollMenu
argument_list|(
name|nextAction
argument_list|,
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollCenter
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|setCurrentAction
argument_list|(
name|nextAction
argument_list|,
literal|0
argument_list|,
name|QMenuPrivate
operator|::
name|SelectedFromElsewhere
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nextAction
operator|->
name|menu
argument_list|()
operator|&&
name|activateAction
condition|)
block|{
name|d
operator|->
name|setSyncAction
argument_list|()
expr_stmt|;
name|d
operator|->
name|activateAction
argument_list|(
name|nextAction
argument_list|,
name|QAction
operator|::
name|Trigger
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|key_consumed
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
if|if
condition|(
name|QMenuBar
modifier|*
name|mb
init|=
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|d
operator|->
name|topCausedWidget
argument_list|()
argument_list|)
condition|)
block|{
name|QAction
modifier|*
name|oldAct
init|=
name|mb
operator|->
name|d_func
argument_list|()
operator|->
name|currentAction
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|mb
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|mb
operator|->
name|d_func
argument_list|()
operator|->
name|currentAction
operator|!=
name|oldAct
condition|)
name|key_consumed
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
block|}
ifdef|#
directive|ifdef
name|Q_OS_WIN32
if|if
condition|(
name|key_consumed
operator|&&
operator|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Control
operator|||
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Shift
operator|||
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Meta
operator|)
condition|)
name|QApplication
operator|::
name|beep
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_WIN32
block|}
if|if
condition|(
name|key_consumed
condition|)
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
else|else
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mouseMoveEvent
name|void
name|QMenu
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|()
operator|||
name|d
operator|->
name|aboutToHide
operator|||
name|d
operator|->
name|mouseEventTaken
argument_list|(
name|e
argument_list|)
condition|)
return|return;
name|d
operator|->
name|motions
operator|++
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|motions
operator|==
literal|0
condition|)
return|return;
name|d
operator|->
name|hasHadMouse
operator|=
name|d
operator|->
name|hasHadMouse
operator|||
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|action
init|=
name|d
operator|->
name|actionAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|action
operator|||
name|action
operator|->
name|isSeparator
argument_list|()
operator|)
operator|&&
operator|!
name|d
operator|->
name|sloppyState
operator|.
name|enabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|hasHadMouse
operator|||
operator|(
operator|!
name|d
operator|->
name|currentAction
operator|||
operator|!
name|d
operator|->
name|currentAction
operator|->
name|menu
argument_list|()
operator|||
operator|!
name|d
operator|->
name|currentAction
operator|->
name|menu
argument_list|()
operator|->
name|isVisible
argument_list|()
operator|)
condition|)
block|{
name|d
operator|->
name|setCurrentAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|e
operator|->
name|buttons
argument_list|()
condition|)
name|d
operator|->
name|mouseDown
operator|=
name|this
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|activeMenu
condition|)
name|d
operator|->
name|activeMenu
operator|->
name|d_func
argument_list|()
operator|->
name|setCurrentAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QMenuSloppyState
operator|::
name|MouseEventResult
name|sloppyEventResult
init|=
name|d
operator|->
name|sloppyState
operator|.
name|processMouseEvent
argument_list|(
name|e
operator|->
name|localPos
argument_list|()
argument_list|,
name|action
argument_list|,
name|d
operator|->
name|currentAction
argument_list|)
decl_stmt|;
if|if
condition|(
name|sloppyEventResult
operator|==
name|QMenuSloppyState
operator|::
name|EventShouldBePropagated
condition|)
block|{
name|d
operator|->
name|setCurrentAction
argument_list|(
name|action
argument_list|,
name|d
operator|->
name|mousePopupDelay
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sloppyEventResult
operator|==
name|QMenuSloppyState
operator|::
name|EventDiscardsSloppyState
condition|)
block|{
name|d
operator|->
name|sloppyState
operator|.
name|reset
argument_list|()
expr_stmt|;
name|d
operator|->
name|hideMenu
argument_list|(
name|d
operator|->
name|activeMenu
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|enterEvent
name|void
name|QMenu
operator|::
name|enterEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|d
operator|->
name|hasReceievedEnter
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|sloppyState
operator|.
name|enter
argument_list|()
expr_stmt|;
name|d
operator|->
name|sloppyState
operator|.
name|startTimer
argument_list|()
expr_stmt|;
name|d
operator|->
name|motions
operator|=
operator|-
literal|1
expr_stmt|;
comment|// force us to ignore the generate mouse move in mouseMoveEvent()
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|leaveEvent
name|void
name|QMenu
operator|::
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|d
operator|->
name|hasReceievedEnter
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|sloppyState
operator|.
name|leave
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|activeMenu
operator|&&
name|d
operator|->
name|currentAction
condition|)
name|setActiveAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
name|void
DECL|function|timerEvent
name|QMenu
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|scroll
operator|&&
name|d
operator|->
name|scroll
operator|->
name|scrollTimer
operator|.
name|timerId
argument_list|()
operator|==
name|e
operator|->
name|timerId
argument_list|()
condition|)
block|{
name|d
operator|->
name|scrollMenu
argument_list|(
operator|(
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollDirection
operator|)
name|d
operator|->
name|scroll
operator|->
name|scrollDirection
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|scroll
operator|->
name|scrollFlags
operator|==
name|QMenuPrivate
operator|::
name|QMenuScroller
operator|::
name|ScrollNone
condition|)
name|d
operator|->
name|scroll
operator|->
name|scrollTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|delayState
operator|.
name|timer
operator|.
name|timerId
argument_list|()
operator|==
name|e
operator|->
name|timerId
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|currentAction
operator|&&
operator|!
name|d
operator|->
name|currentAction
operator|->
name|menu
argument_list|()
condition|)
return|return;
name|d
operator|->
name|delayState
operator|.
name|stop
argument_list|()
expr_stmt|;
name|d
operator|->
name|sloppyState
operator|.
name|stopTimer
argument_list|()
expr_stmt|;
name|internalDelayedPopup
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|sloppyState
operator|.
name|isTimerId
argument_list|(
name|e
operator|->
name|timerId
argument_list|()
argument_list|)
condition|)
block|{
name|d
operator|->
name|sloppyState
operator|.
name|timeout
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|searchBufferTimer
operator|.
name|timerId
argument_list|()
operator|==
name|e
operator|->
name|timerId
argument_list|()
condition|)
block|{
name|d
operator|->
name|searchBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|copyActionToPlatformItem
specifier|static
name|void
name|copyActionToPlatformItem
parameter_list|(
specifier|const
name|QAction
modifier|*
name|action
parameter_list|,
name|QPlatformMenuItem
modifier|*
name|item
parameter_list|,
name|QPlatformMenu
modifier|*
name|itemsMenu
parameter_list|)
block|{
name|item
operator|->
name|setText
argument_list|(
name|action
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setIsSeparator
argument_list|(
name|action
operator|->
name|isSeparator
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|->
name|isIconVisibleInMenu
argument_list|()
condition|)
block|{
name|item
operator|->
name|setIcon
argument_list|(
name|action
operator|->
name|icon
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|action
operator|->
name|parentWidget
argument_list|()
condition|)
block|{
name|QStyleOption
name|opt
decl_stmt|;
name|opt
operator|.
name|init
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|item
operator|->
name|setIconSize
argument_list|(
name|w
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SmallIconSize
argument_list|,
operator|&
name|opt
argument_list|,
name|w
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStyleOption
name|opt
decl_stmt|;
name|item
operator|->
name|setIconSize
argument_list|(
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SmallIconSize
argument_list|,
operator|&
name|opt
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|item
operator|->
name|setIcon
argument_list|(
name|QIcon
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|item
operator|->
name|setVisible
argument_list|(
name|action
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setShortcut
argument_list|(
name|action
operator|->
name|shortcut
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setCheckable
argument_list|(
name|action
operator|->
name|isCheckable
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setChecked
argument_list|(
name|action
operator|->
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setFont
argument_list|(
name|action
operator|->
name|font
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setRole
argument_list|(
operator|(
name|QPlatformMenuItem
operator|::
name|MenuRole
operator|)
name|action
operator|->
name|menuRole
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setEnabled
argument_list|(
name|action
operator|->
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|->
name|menu
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|action
operator|->
name|menu
argument_list|()
operator|->
name|platformMenu
argument_list|()
condition|)
name|action
operator|->
name|menu
argument_list|()
operator|->
name|setPlatformMenu
argument_list|(
name|itemsMenu
operator|->
name|createSubMenu
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|->
name|setMenu
argument_list|(
name|action
operator|->
name|menu
argument_list|()
operator|->
name|platformMenu
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|item
operator|->
name|setMenu
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|actionEvent
name|void
name|QMenu
operator|::
name|actionEvent
parameter_list|(
name|QActionEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|d
operator|->
name|itemsDirty
operator|=
literal|1
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Resized
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|tornPopup
condition|)
name|d
operator|->
name|tornPopup
operator|->
name|syncWithMenu
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionAdded
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|tornoff
condition|)
block|{
name|connect
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_actionTriggered
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|hovered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_actionHovered
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QWidgetAction
modifier|*
name|wa
init|=
name|qobject_cast
argument_list|<
name|QWidgetAction
operator|*
argument_list|>
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|)
condition|)
block|{
name|QWidget
modifier|*
name|widget
init|=
name|wa
operator|->
name|requestWidget
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
condition|)
name|d
operator|->
name|widgetItems
operator|.
name|insert
argument_list|(
name|wa
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionRemoved
condition|)
block|{
name|e
operator|->
name|action
argument_list|()
operator|->
name|disconnect
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|action
argument_list|()
operator|==
name|d
operator|->
name|currentAction
condition|)
name|d
operator|->
name|currentAction
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|QWidgetAction
modifier|*
name|wa
init|=
name|qobject_cast
argument_list|<
name|QWidgetAction
operator|*
argument_list|>
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|widget
init|=
name|d
operator|->
name|widgetItems
operator|.
name|value
argument_list|(
name|wa
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_OSX
name|QWidget
modifier|*
name|p
init|=
name|widget
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
name|this
operator|&&
name|qobject_cast
argument_list|<
name|QMacNativeWidget
operator|*
argument_list|>
argument_list|(
name|p
argument_list|)
condition|)
block|{
comment|// This widget was reparented into a native Mac view
comment|// (see QMenuPrivate::moveWidgetToPlatformItem).
comment|// Reset the parent and delete the native widget.
name|widget
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|p
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|wa
operator|->
name|releaseWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
name|d
operator|->
name|widgetItems
operator|.
name|remove
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|platformMenu
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionAdded
condition|)
block|{
name|QPlatformMenuItem
modifier|*
name|menuItem
init|=
name|d
operator|->
name|platformMenu
operator|->
name|createMenuItem
argument_list|()
decl_stmt|;
name|menuItem
operator|->
name|setTag
argument_list|(
cast|reinterpret_cast
argument_list|<
name|quintptr
argument_list|>
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|menuItem
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|()
argument_list|)
argument_list|,
name|e
operator|->
name|action
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|trigger
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|menuItem
argument_list|,
name|SIGNAL
argument_list|(
name|hovered
argument_list|()
argument_list|)
argument_list|,
name|e
operator|->
name|action
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|hovered
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|copyActionToPlatformItem
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|,
name|menuItem
argument_list|,
name|d
operator|->
name|platformMenu
argument_list|)
expr_stmt|;
name|QPlatformMenuItem
modifier|*
name|beforeItem
init|=
name|d
operator|->
name|platformMenu
operator|->
name|menuItemForTag
argument_list|(
cast|reinterpret_cast
argument_list|<
name|quintptr
argument_list|>
argument_list|(
name|e
operator|->
name|before
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|platformMenu
operator|->
name|insertMenuItem
argument_list|(
name|menuItem
argument_list|,
name|beforeItem
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionRemoved
condition|)
block|{
name|QPlatformMenuItem
modifier|*
name|menuItem
init|=
name|d
operator|->
name|platformMenu
operator|->
name|menuItemForTag
argument_list|(
cast|reinterpret_cast
argument_list|<
name|quintptr
argument_list|>
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|platformMenu
operator|->
name|removeMenuItem
argument_list|(
name|menuItem
argument_list|)
expr_stmt|;
operator|delete
name|menuItem
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionChanged
condition|)
block|{
name|QPlatformMenuItem
modifier|*
name|menuItem
init|=
name|d
operator|->
name|platformMenu
operator|->
name|menuItemForTag
argument_list|(
cast|reinterpret_cast
argument_list|<
name|quintptr
argument_list|>
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|menuItem
condition|)
block|{
name|copyActionToPlatformItem
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|,
name|menuItem
argument_list|,
name|d
operator|->
name|platformMenu
argument_list|)
expr_stmt|;
name|d
operator|->
name|platformMenu
operator|->
name|syncMenuItem
argument_list|(
name|menuItem
argument_list|)
expr_stmt|;
block|}
block|}
name|d
operator|->
name|platformMenu
operator|->
name|syncSeparatorsCollapsible
argument_list|(
name|d
operator|->
name|collapsibleSeparators
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_MENUBAR
argument_list|)
if|if
condition|(
operator|!
name|d
operator|->
name|wce_menu
condition|)
name|d
operator|->
name|wce_menu
operator|=
operator|new
name|QMenuPrivate
operator|::
name|QWceMenuPrivate
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionAdded
condition|)
name|d
operator|->
name|wce_menu
operator|->
name|addAction
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|,
name|d
operator|->
name|wce_menu
operator|->
name|findAction
argument_list|(
name|e
operator|->
name|before
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionRemoved
condition|)
name|d
operator|->
name|wce_menu
operator|->
name|removeAction
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionChanged
condition|)
name|d
operator|->
name|wce_menu
operator|->
name|syncAction
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
name|d
operator|->
name|updateActionRects
argument_list|()
expr_stmt|;
name|resize
argument_list|(
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|internalDelayedPopup
name|void
name|QMenu
operator|::
name|internalDelayedPopup
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
comment|//hide the current item
if|if
condition|(
name|QMenu
modifier|*
name|menu
init|=
name|d
operator|->
name|activeMenu
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|activeMenu
operator|->
name|menuAction
argument_list|()
operator|!=
name|d
operator|->
name|currentAction
condition|)
name|d
operator|->
name|hideMenu
argument_list|(
name|menu
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|currentAction
operator|||
operator|!
name|d
operator|->
name|currentAction
operator|->
name|isEnabled
argument_list|()
operator|||
operator|!
name|d
operator|->
name|currentAction
operator|->
name|menu
argument_list|()
operator|||
operator|!
name|d
operator|->
name|currentAction
operator|->
name|menu
argument_list|()
operator|->
name|isEnabled
argument_list|()
operator|||
name|d
operator|->
name|currentAction
operator|->
name|menu
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
return|return;
comment|//setup
name|d
operator|->
name|activeMenu
operator|=
name|d
operator|->
name|currentAction
operator|->
name|menu
argument_list|()
expr_stmt|;
name|d
operator|->
name|activeMenu
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|widget
operator|=
name|this
expr_stmt|;
name|d
operator|->
name|activeMenu
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|action
operator|=
name|d
operator|->
name|currentAction
expr_stmt|;
name|int
name|subMenuOffset
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SubMenuOverlap
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|actionRect
argument_list|(
name|d
operator|->
name|actionRect
argument_list|(
name|d
operator|->
name|currentAction
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|rightPos
argument_list|(
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
name|actionRect
operator|.
name|right
argument_list|()
operator|+
name|subMenuOffset
operator|+
literal|1
argument_list|,
name|actionRect
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QPoint
name|pos
argument_list|(
name|rightPos
argument_list|)
decl_stmt|;
name|d
operator|->
name|activeMenu
operator|->
name|popup
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|d
operator|->
name|sloppyState
operator|.
name|setSubMenuPopup
argument_list|(
name|actionRect
argument_list|,
name|d
operator|->
name|currentAction
argument_list|,
name|d
operator|->
name|activeMenu
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QMenu::aboutToHide()     \since 4.2      This signal is emitted just before the menu is hidden from the user.      \sa aboutToShow(), hide() */
end_comment
begin_comment
comment|/*!     \fn void QMenu::aboutToShow()      This signal is emitted just before the menu is shown to the user.      \sa aboutToHide(), show() */
end_comment
begin_comment
comment|/*!     \fn void QMenu::triggered(QAction *action)      This signal is emitted when an action in this menu is triggered.      \a action is the action that caused the signal to be emitted.      Normally, you connect each menu action's \l{QAction::}{triggered()} signal     to its own custom slot, but sometimes you will want to connect several     actions to a single slot, for example, when you have a group of closely     related actions, such as "left justify", "center", "right justify".      \note This signal is emitted for the main parent menu in a hierarchy.     Hence, only the parent menu needs to be connected to a slot; sub-menus need     not be connected.      \sa hovered(), QAction::triggered() */
end_comment
begin_comment
comment|/*!     \fn void QMenu::hovered(QAction *action)      This signal is emitted when a menu action is highlighted; \a action     is the action that caused the signal to be emitted.      Often this is used to update status information.      \sa triggered(), QAction::hovered() */
end_comment
begin_comment
comment|/*!\internal */
end_comment
begin_function
DECL|function|setNoReplayFor
name|void
name|QMenu
operator|::
name|setNoReplayFor
parameter_list|(
name|QWidget
modifier|*
name|noReplayFor
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|noReplayFor
operator|=
name|noReplayFor
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!\internal */
end_comment
begin_function
DECL|function|platformMenu
name|QPlatformMenu
modifier|*
name|QMenu
operator|::
name|platformMenu
parameter_list|()
block|{
return|return
name|d_func
argument_list|()
operator|->
name|platformMenu
return|;
block|}
end_function
begin_comment
comment|/*!\internal */
end_comment
begin_function
DECL|function|setPlatformMenu
name|void
name|QMenu
operator|::
name|setPlatformMenu
parameter_list|(
name|QPlatformMenu
modifier|*
name|platformMenu
parameter_list|)
block|{
name|d_func
argument_list|()
operator|->
name|setPlatformMenu
argument_list|(
name|platformMenu
argument_list|)
expr_stmt|;
name|d_func
argument_list|()
operator|->
name|syncPlatformMenu
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QMenu::separatorsCollapsible   \since 4.2    \brief whether consecutive separators should be collapsed    This property specifies whether consecutive separators in the menu   should be visually collapsed to a single one. Separators at the   beginning or the end of the menu are also hidden.    By default, this property is \c true. */
end_comment
begin_function
DECL|function|separatorsCollapsible
name|bool
name|QMenu
operator|::
name|separatorsCollapsible
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMenu
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|collapsibleSeparators
return|;
block|}
end_function
begin_function
DECL|function|setSeparatorsCollapsible
name|void
name|QMenu
operator|::
name|setSeparatorsCollapsible
parameter_list|(
name|bool
name|collapse
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|collapsibleSeparators
operator|==
name|collapse
condition|)
return|return;
name|d
operator|->
name|collapsibleSeparators
operator|=
name|collapse
expr_stmt|;
name|d
operator|->
name|itemsDirty
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
name|d
operator|->
name|updateActionRects
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|platformMenu
operator|.
name|isNull
argument_list|()
condition|)
name|d
operator|->
name|platformMenu
operator|->
name|syncSeparatorsCollapsible
argument_list|(
name|collapse
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \property QMenu::toolTipsVisible   \since 5.1    \brief whether tooltips of menu actions should be visible    This property specifies whether action menu entries show   their tooltip.    By default, this property is \c false. */
end_comment
begin_function
DECL|function|toolTipsVisible
name|bool
name|QMenu
operator|::
name|toolTipsVisible
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMenu
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|toolTipsVisible
return|;
block|}
end_function
begin_function
DECL|function|setToolTipsVisible
name|void
name|QMenu
operator|::
name|setToolTipsVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|toolTipsVisible
operator|==
name|visible
condition|)
return|return;
name|d
operator|->
name|toolTipsVisible
operator|=
name|visible
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_comment
comment|// for private slots
end_comment
begin_include
include|#
directive|include
file|"moc_qmenu.cpp"
end_include
begin_include
include|#
directive|include
file|"qmenu.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MENU
end_comment
end_unit
