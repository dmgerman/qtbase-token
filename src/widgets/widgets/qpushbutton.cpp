begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qapplication.h"
end_include
begin_include
include|#
directive|include
file|"qbitmap.h"
end_include
begin_include
include|#
directive|include
file|"qdesktopwidget.h"
end_include
begin_include
include|#
directive|include
file|"qdialog.h"
end_include
begin_include
include|#
directive|include
file|<private/qdialog_p.h>
end_include
begin_include
include|#
directive|include
file|"qdrawutil.h"
end_include
begin_include
include|#
directive|include
file|"qevent.h"
end_include
begin_include
include|#
directive|include
file|"qfontmetrics.h"
end_include
begin_include
include|#
directive|include
file|"qmenu.h"
end_include
begin_include
include|#
directive|include
file|"qstylepainter.h"
end_include
begin_include
include|#
directive|include
file|"qpixmap.h"
end_include
begin_include
include|#
directive|include
file|"qpointer.h"
end_include
begin_include
include|#
directive|include
file|"qpushbutton.h"
end_include
begin_include
include|#
directive|include
file|"qstyle.h"
end_include
begin_include
include|#
directive|include
file|"qstyleoption.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbar.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_include
include|#
directive|include
file|"qlayoutitem.h"
end_include
begin_include
include|#
directive|include
file|"qdialogbuttonbox.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC
end_ifdef
begin_include
include|#
directive|include
file|"qmacstyle_mac.h"
end_include
begin_include
include|#
directive|include
file|"private/qmacstyle_mac_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_WS_MAC
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|"qaccessible.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"private/qmenu_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qpushbutton_p.h"
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QPushButton     \brief The QPushButton widget provides a command button.      \ingroup basicwidgets     \inmodule QtWidgets      The push button, or command button, is perhaps the most commonly     used widget in any graphical user interface. Push (click) a button     to command the computer to perform some action, or to answer a     question. Typical buttons are OK, Apply, Cancel, Close, Yes, No     and Help.      A command button is rectangular and typically displays a text     label describing its action. A shortcut key can be specified by     preceding the preferred character with an ampersand in the     text. For example:      \snippet doc/src/snippets/code/src_gui_widgets_qpushbutton.cpp 0      In this example the shortcut is \e{Alt+D}. See the \l     {QShortcut#mnemonic}{QShortcut} documentation for details (to     display an actual ampersand, use '&&').      Push buttons display a textual label, and optionally a small     icon. These can be set using the constructors and changed later     using setText() and setIcon().  If the button is disabled the     appearance of the text and icon will be manipulated with respect     to the GUI style to make the button look "disabled".      A push button emits the signal clicked() when it is activated by     the mouse, the Spacebar or by a keyboard shortcut. Connect to     this signal to perform the button's action. Push buttons also     provide less commonly used signals, for example, pressed() and     released().      Command buttons in dialogs are by default auto-default buttons,     i.e. they become the default push button automatically when they     receive the keyboard input focus. A default button is a push     button that is activated when the user presses the Enter or Return     key in a dialog. You can change this with setAutoDefault(). Note     that auto-default buttons reserve a little extra space which is     necessary to draw a default-button indicator. If you do not want     this space around your buttons, call setAutoDefault(false).      Being so central, the button widget has grown to accommodate a     great many variations in the past decade. The Microsoft style     guide now shows about ten different states of Windows push buttons     and the text implies that there are dozens more when all the     combinations of features are taken into consideration.      The most important modes or states are:     \list     \li Available or not (grayed out, disabled).     \li Standard push button, toggling push button or menu button.     \li On or off (only for toggling push buttons).     \li Default or normal. The default button in a dialog can generally        be "clicked" using the Enter or Return key.     \li Auto-repeat or not.     \li Pressed down or not.     \endlist      As a general rule, use a push button when the application or     dialog window performs an action when the user clicks on it (such     as Apply, Cancel, Close and Help) \e and when the widget is     supposed to have a wide, rectangular shape with a text label.     Small, typically square buttons that change the state of the     window rather than performing an action (such as the buttons in     the top-right corner of the QFileDialog) are not command buttons,     but tool buttons. Qt provides a special class (QToolButton) for     these buttons.      If you need toggle behavior (see setCheckable()) or a button     that auto-repeats the activation signal when being pushed down     like the arrows in a scroll bar (see setAutoRepeat()), a command     button is probably not what you want. When in doubt, use a tool     button.      A variation of a command button is a menu button. These provide     not just one command, but several, since when they are clicked     they pop up a menu of options. Use the method setMenu() to     associate a popup menu with a push button.      Other classes of buttons are option buttons (see QRadioButton) and     check boxes (see QCheckBox).      \table 100%     \row \li \inlineimage macintosh-pushbutton.png Screenshot of a Macintosh style push button          \li A push button shown in the \l{Macintosh Style Widget Gallery}{Macintosh widget style}.           Note that when a button's width becomes smaller than 50 or          its height becomes smaller than 30, the button's corners are          changed from round to square. Use the setMinimumSize()          function to prevent this behavior.      \row \li \inlineimage windowsxp-pushbutton.png Screenshot of a Windows XP style push button          \li A push button shown in the \l{Windows XP Style Widget Gallery}{Windows XP widget style}.     \row \li \inlineimage plastique-pushbutton.png Screenshot of a Plastique style push button          \li A push button shown in the \l{Plastique Style Widget Gallery}{Plastique widget style}.     \endtable      In Qt, the QAbstractButton base class provides most of the modes     and other API, and QPushButton provides GUI logic.     See QAbstractButton for more information about the API.      \sa QToolButton, QRadioButton, QCheckBox, {fowler}{GUI Design Handbook: Push Button} */
end_comment
begin_comment
comment|/*!     \property QPushButton::autoDefault     \brief whether the push button is an auto default button      If this property is set to true then the push button is an auto     default button.      In some GUI styles a default button is drawn with an extra frame     around it, up to 3 pixels or more. Qt automatically keeps this     space free around auto-default buttons, i.e. auto-default buttons     may have a slightly larger size hint.      This property's default is true for buttons that have a QDialog     parent; otherwise it defaults to false.      See the \l default property for details of how \l default and     auto-default interact. */
end_comment
begin_comment
comment|/*!     \property QPushButton::default     \brief whether the push button is the default button      Default and autodefault buttons decide what happens when the user     presses enter in a dialog.      A button with this property set to true (i.e., the dialog's     \e default button,) will automatically be pressed when the user presses enter,     with one exception: if an \a autoDefault button currently has focus, the autoDefault     button is pressed. When the dialog has \l autoDefault buttons but no default button,     pressing enter will press either the \l autoDefault button that currently has focus, or if no     button has focus, the next \l autoDefault button in the focus chain.      In a dialog, only one push button at a time can be the default     button. This button is then displayed with an additional frame     (depending on the GUI style).      The default button behavior is provided only in dialogs. Buttons     can always be clicked from the keyboard by pressing Spacebar when     the button has focus.      If the default property is set to false on the current default button     while the dialog is visible, a new default will automatically be     assigned the next time a pushbutton in the dialog receives focus.      This property's default is false. */
end_comment
begin_comment
comment|/*!     \property QPushButton::flat     \brief whether the button border is raised      This property's default is false. If this property is set, most     styles will not paint the button background unless the button is     being pressed. setAutoFillBackground() can be used to ensure that     the background is filled using the QPalette::Button brush. */
end_comment
begin_comment
comment|/*!     Constructs a push button with no text and a \a parent. */
end_comment
begin_constructor
DECL|function|QPushButton
name|QPushButton
operator|::
name|QPushButton
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractButton
argument_list|(
operator|*
operator|new
name|QPushButtonPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a push button with the parent \a parent and the text \a     text. */
end_comment
begin_constructor
DECL|function|QPushButton
name|QPushButton
operator|::
name|QPushButton
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractButton
argument_list|(
operator|*
operator|new
name|QPushButtonPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a push button with an \a icon and a \a text, and a \a parent.      Note that you can also pass a QPixmap object as an icon (thanks to     the implicit type conversion provided by C++).  */
end_comment
begin_constructor
DECL|function|QPushButton
name|QPushButton
operator|::
name|QPushButton
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractButton
argument_list|(
operator|*
operator|new
name|QPushButtonPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*! \internal  */
end_comment
begin_constructor
DECL|function|QPushButton
name|QPushButton
operator|::
name|QPushButton
parameter_list|(
name|QPushButtonPrivate
modifier|&
name|dd
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractButton
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the push button. */
end_comment
begin_destructor
DECL|function|~QPushButton
name|QPushButton
operator|::
name|~
name|QPushButton
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|dialogParent
name|QDialog
modifier|*
name|QPushButtonPrivate
operator|::
name|dialogParent
parameter_list|()
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QPushButton
argument_list|)
expr_stmt|;
specifier|const
name|QWidget
modifier|*
name|p
init|=
name|q
decl_stmt|;
while|while
condition|(
name|p
operator|&&
operator|!
name|p
operator|->
name|isWindow
argument_list|()
condition|)
block|{
name|p
operator|=
name|p
operator|->
name|parentWidget
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
name|QDialog
modifier|*
name|dialog
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QDialog
operator|*
argument_list|>
argument_list|(
name|p
argument_list|)
condition|)
return|return
cast|const_cast
argument_list|<
name|QDialog
operator|*
argument_list|>
argument_list|(
name|dialog
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Initialize \a option with the values from this QPushButton. This method is useful     for subclasses when they need a QStyleOptionButton, but don't want to fill     in all the information themselves.      \sa QStyleOption::initFrom() */
end_comment
begin_function
DECL|function|initStyleOption
name|void
name|QPushButton
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionButton
modifier|*
name|option
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|option
condition|)
return|return;
name|Q_D
argument_list|(
specifier|const
name|QPushButton
argument_list|)
expr_stmt|;
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|option
operator|->
name|features
operator|=
name|QStyleOptionButton
operator|::
name|None
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|flat
condition|)
name|option
operator|->
name|features
operator||=
name|QStyleOptionButton
operator|::
name|Flat
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|d
operator|->
name|menu
condition|)
name|option
operator|->
name|features
operator||=
name|QStyleOptionButton
operator|::
name|HasMenu
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|autoDefault
argument_list|()
operator|||
name|d
operator|->
name|defaultButton
condition|)
name|option
operator|->
name|features
operator||=
name|QStyleOptionButton
operator|::
name|AutoDefaultButton
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|defaultButton
condition|)
name|option
operator|->
name|features
operator||=
name|QStyleOptionButton
operator|::
name|DefaultButton
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|down
operator|||
name|d
operator|->
name|menuOpen
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|checked
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_On
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|flat
operator|&&
operator|!
name|d
operator|->
name|down
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Raised
expr_stmt|;
name|option
operator|->
name|text
operator|=
name|d
operator|->
name|text
expr_stmt|;
name|option
operator|->
name|icon
operator|=
name|d
operator|->
name|icon
expr_stmt|;
name|option
operator|->
name|iconSize
operator|=
name|iconSize
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setAutoDefault
name|void
name|QPushButton
operator|::
name|setAutoDefault
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
name|uint
name|state
init|=
name|enable
condition|?
name|QPushButtonPrivate
operator|::
name|On
else|:
name|QPushButtonPrivate
operator|::
name|Off
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|autoDefault
operator|!=
name|QPushButtonPrivate
operator|::
name|Auto
operator|&&
name|d
operator|->
name|autoDefault
operator|==
name|state
condition|)
return|return;
name|d
operator|->
name|autoDefault
operator|=
name|state
expr_stmt|;
name|d
operator|->
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|autoDefault
name|bool
name|QPushButton
operator|::
name|autoDefault
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPushButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|autoDefault
operator|==
name|QPushButtonPrivate
operator|::
name|Auto
condition|)
return|return
operator|(
name|d
operator|->
name|dialogParent
argument_list|()
operator|!=
literal|0
operator|)
return|;
return|return
name|d
operator|->
name|autoDefault
return|;
block|}
end_function
begin_function
DECL|function|setDefault
name|void
name|QPushButton
operator|::
name|setDefault
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|defaultButton
operator|==
name|enable
condition|)
return|return;
name|d
operator|->
name|defaultButton
operator|=
name|enable
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|defaultButton
condition|)
block|{
if|if
condition|(
name|QDialog
modifier|*
name|dlg
init|=
name|d
operator|->
name|dialogParent
argument_list|()
condition|)
name|dlg
operator|->
name|d_func
argument_list|()
operator|->
name|setMainDefault
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|update
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
name|QAccessibleEvent
argument_list|(
name|QAccessible
operator|::
name|StateChanged
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isDefault
name|bool
name|QPushButton
operator|::
name|isDefault
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPushButton
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|defaultButton
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QPushButton
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPushButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sizeHint
operator|.
name|isValid
argument_list|()
operator|&&
name|d
operator|->
name|lastAutoDefault
operator|==
name|autoDefault
argument_list|()
condition|)
return|return
name|d
operator|->
name|sizeHint
return|;
name|d
operator|->
name|lastAutoDefault
operator|=
name|autoDefault
argument_list|()
expr_stmt|;
name|ensurePolished
argument_list|()
expr_stmt|;
name|int
name|w
init|=
literal|0
decl_stmt|,
name|h
init|=
literal|0
decl_stmt|;
name|QStyleOptionButton
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
comment|// calculate contents size...
ifndef|#
directive|ifndef
name|QT_NO_ICON
name|bool
name|showButtonBoxIcons
init|=
name|qobject_cast
argument_list|<
name|QDialogButtonBox
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
operator|&&
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_DialogButtonBox_ButtonsHaveIcons
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|icon
argument_list|()
operator|.
name|isNull
argument_list|()
operator|||
name|showButtonBoxIcons
condition|)
block|{
name|int
name|ih
init|=
name|opt
operator|.
name|iconSize
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|iw
init|=
name|opt
operator|.
name|iconSize
operator|.
name|width
argument_list|()
operator|+
literal|4
decl_stmt|;
name|w
operator|+=
name|iw
expr_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|ih
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QString
name|s
argument_list|(
name|text
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|empty
init|=
name|s
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|empty
condition|)
name|s
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"XXXX"
argument_list|)
expr_stmt|;
name|QFontMetrics
name|fm
init|=
name|fontMetrics
argument_list|()
decl_stmt|;
name|QSize
name|sz
init|=
name|fm
operator|.
name|size
argument_list|(
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|empty
operator|||
operator|!
name|w
condition|)
name|w
operator|+=
name|sz
operator|.
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|empty
operator|||
operator|!
name|h
condition|)
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|opt
operator|.
name|rect
operator|.
name|setSize
argument_list|(
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|)
expr_stmt|;
comment|// PM_MenuButtonIndicator depends on the height
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|menu
argument_list|()
condition|)
name|w
operator|+=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuButtonIndicator
argument_list|,
operator|&
name|opt
argument_list|,
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|sizeHint
operator|=
operator|(
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_PushButton
argument_list|,
operator|&
name|opt
argument_list|,
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
argument_list|,
name|this
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
operator|)
expr_stmt|;
return|return
name|d
operator|->
name|sizeHint
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp  */
end_comment
begin_function
DECL|function|minimumSizeHint
name|QSize
name|QPushButton
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
return|return
name|sizeHint
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!\reimp */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QPushButton
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QStylePainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QStyleOptionButton
name|option
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|option
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_PushButton
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QPushButton
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|e
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Enter
case|:
case|case
name|Qt
operator|::
name|Key_Return
case|:
if|if
condition|(
name|autoDefault
argument_list|()
operator|||
name|d
operator|->
name|defaultButton
condition|)
block|{
name|click
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// fall through
default|default:
name|QAbstractButton
operator|::
name|keyPressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|focusInEvent
name|void
name|QPushButton
operator|::
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|reason
argument_list|()
operator|!=
name|Qt
operator|::
name|PopupFocusReason
operator|&&
name|autoDefault
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|defaultButton
condition|)
block|{
name|d
operator|->
name|defaultButton
operator|=
literal|true
expr_stmt|;
name|QDialog
modifier|*
name|dlg
init|=
name|qobject_cast
argument_list|<
name|QDialog
operator|*
argument_list|>
argument_list|(
name|window
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dlg
condition|)
name|dlg
operator|->
name|d_func
argument_list|()
operator|->
name|setDefault
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|QAbstractButton
operator|::
name|focusInEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|focusOutEvent
name|void
name|QPushButton
operator|::
name|focusOutEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|reason
argument_list|()
operator|!=
name|Qt
operator|::
name|PopupFocusReason
operator|&&
name|autoDefault
argument_list|()
operator|&&
name|d
operator|->
name|defaultButton
condition|)
block|{
name|QDialog
modifier|*
name|dlg
init|=
name|qobject_cast
argument_list|<
name|QDialog
operator|*
argument_list|>
argument_list|(
name|window
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dlg
condition|)
name|dlg
operator|->
name|d_func
argument_list|()
operator|->
name|setDefault
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|defaultButton
operator|=
literal|false
expr_stmt|;
block|}
name|QAbstractButton
operator|::
name|focusOutEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
if|if
condition|(
name|d
operator|->
name|menu
operator|&&
name|d
operator|->
name|menu
operator|->
name|isVisible
argument_list|()
condition|)
comment|// restore pressed status
name|setDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENU
end_ifndef
begin_comment
comment|/*!     Associates the popup menu \a menu with this push button. This     turns the button into a menu button, which in some styles will     produce a small triangle to the right of the button's text.      Ownership of the menu is \e not transferred to the push button.      \table 100%     \row     \li \inlineimage plastique-pushbutton-menu.png Screenshot of a Plastique style push button with popup menu.     \li \inlineimage cleanlooks-pushbutton-menu.png Screenshot of a Cleanlooks style push button with popup menu.     \li Push buttons with popup menus shown in the \l{Plastique Style Widget Gallery}{Plastique widget style}     (left) and \l{Cleanlooks Style Widget Gallery}{Cleanlooks widget style} (right).     \endtable      \sa menu() */
end_comment
begin_function
DECL|function|setMenu
name|void
name|QPushButton
operator|::
name|setMenu
parameter_list|(
name|QMenu
modifier|*
name|menu
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|menu
operator|==
name|d
operator|->
name|menu
condition|)
return|return;
if|if
condition|(
name|menu
operator|&&
operator|!
name|d
operator|->
name|menu
condition|)
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|pressed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_popupPressed
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|UniqueConnection
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|menu
condition|)
name|removeAction
argument_list|(
name|d
operator|->
name|menu
operator|->
name|menuAction
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|menu
operator|=
name|menu
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|menu
condition|)
name|addAction
argument_list|(
name|d
operator|->
name|menu
operator|->
name|menuAction
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|resetLayoutItemMargins
argument_list|()
expr_stmt|;
name|d
operator|->
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the button's associated popup menu or 0 if no popup menu     has been set.      \sa setMenu() */
end_comment
begin_function
DECL|function|menu
name|QMenu
modifier|*
name|QPushButton
operator|::
name|menu
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPushButton
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|menu
return|;
block|}
end_function
begin_comment
comment|/*!     Shows (pops up) the associated popup menu. If there is no such     menu, this function does nothing. This function does not return     until the popup menu has been closed by the user. */
end_comment
begin_function
DECL|function|showMenu
name|void
name|QPushButton
operator|::
name|showMenu
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|||
operator|!
name|d
operator|->
name|menu
condition|)
return|return;
name|setDown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|_q_popupPressed
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_popupPressed
name|void
name|QPushButtonPrivate
operator|::
name|_q_popupPressed
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|down
operator|||
operator|!
name|menu
condition|)
return|return;
name|menu
operator|->
name|setNoReplayFor
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QPoint
name|menuPos
init|=
name|adjustedMenuPosition
argument_list|()
decl_stmt|;
name|QPointer
argument_list|<
name|QPushButton
argument_list|>
name|guard
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|QMenuPrivate
operator|::
name|get
argument_list|(
name|menu
argument_list|)
operator|->
name|causedPopup
operator|.
name|widget
operator|=
name|guard
expr_stmt|;
comment|//Because of a delay in menu effects, we must keep track of the
comment|//menu visibility to avoid flicker on button release
name|menuOpen
operator|=
literal|true
expr_stmt|;
name|menu
operator|->
name|exec
argument_list|(
name|menuPos
argument_list|)
expr_stmt|;
if|if
condition|(
name|guard
condition|)
block|{
name|menuOpen
operator|=
literal|false
expr_stmt|;
name|q
operator|->
name|setDown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|adjustedMenuPosition
name|QPoint
name|QPushButtonPrivate
operator|::
name|adjustedMenuPosition
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
name|bool
name|horizontal
init|=
literal|true
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_TOOLBAR
argument_list|)
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|tb
operator|&&
name|tb
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Vertical
condition|)
name|horizontal
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
name|QWidgetItem
name|item
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|item
operator|.
name|geometry
argument_list|()
decl_stmt|;
name|rect
operator|.
name|setRect
argument_list|(
name|rect
operator|.
name|x
argument_list|()
operator|-
name|q
operator|->
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
operator|-
name|q
operator|->
name|y
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QSize
name|menuSize
init|=
name|menu
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|QPoint
name|globalPos
init|=
name|q
operator|->
name|mapToGlobal
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|globalPos
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|globalPos
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|horizontal
condition|)
block|{
if|if
condition|(
name|globalPos
operator|.
name|y
argument_list|()
operator|+
name|rect
operator|.
name|height
argument_list|()
operator|+
name|menuSize
operator|.
name|height
argument_list|()
operator|<=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|q
argument_list|)
operator|.
name|height
argument_list|()
condition|)
block|{
name|y
operator|+=
name|rect
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|y
operator|-=
name|menuSize
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|->
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
condition|)
name|x
operator|+=
name|rect
operator|.
name|width
argument_list|()
operator|-
name|menuSize
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|globalPos
operator|.
name|x
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
operator|+
name|menu
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|<=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|q
argument_list|)
operator|.
name|width
argument_list|()
condition|)
name|x
operator|+=
name|rect
operator|.
name|width
argument_list|()
expr_stmt|;
else|else
name|x
operator|-=
name|menuSize
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
return|return
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MENU
end_comment
begin_function
DECL|function|resetLayoutItemMargins
name|void
name|QPushButtonPrivate
operator|::
name|resetLayoutItemMargins
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
name|QStyleOptionButton
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|setLayoutItemMargins
argument_list|(
name|QStyle
operator|::
name|SE_PushButtonLayoutItem
argument_list|,
operator|&
name|opt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFlat
name|void
name|QPushButton
operator|::
name|setFlat
parameter_list|(
name|bool
name|flat
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|flat
operator|==
name|flat
condition|)
return|return;
name|d
operator|->
name|flat
operator|=
name|flat
expr_stmt|;
name|d
operator|->
name|resetLayoutItemMargins
argument_list|()
expr_stmt|;
name|d
operator|->
name|sizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isFlat
name|bool
name|QPushButton
operator|::
name|isFlat
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPushButton
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|flat
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QPushButton
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ParentChange
condition|)
block|{
if|if
condition|(
name|QDialog
modifier|*
name|dialog
init|=
name|d
operator|->
name|dialogParent
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|defaultButton
condition|)
name|dialog
operator|->
name|d_func
argument_list|()
operator|->
name|setMainDefault
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StyleChange
ifdef|#
directive|ifdef
name|Q_WS_MAC
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MacSizeChange
endif|#
directive|endif
condition|)
block|{
name|d
operator|->
name|resetLayoutItemMargins
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|PolishRequest
condition|)
block|{
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
return|return
name|QAbstractButton
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC
end_ifdef
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|hitButton
name|bool
name|QPushButton
operator|::
name|hitButton
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|QStyleOptionButton
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_mac_buttonIsRenderedFlat
argument_list|(
name|this
argument_list|,
operator|&
name|opt
argument_list|)
condition|)
return|return
name|QAbstractButton
operator|::
name|hitButton
argument_list|(
name|pos
argument_list|)
return|;
comment|// Now that we know we are using the native style, let's proceed.
name|Q_D
argument_list|(
specifier|const
name|QPushButton
argument_list|)
expr_stmt|;
name|QPushButtonPrivate
modifier|*
name|nonConst
init|=
cast|const_cast
argument_list|<
name|QPushButtonPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
decl_stmt|;
comment|// In OSX buttons are round, which causes the hit method to be special.
comment|// We cannot simply relay on detecting if something is inside the rect or not,
comment|// we need to check if it is inside the "rounded area" or not. A point might
comment|// be inside the rect but not inside the rounded area.
comment|// Notice this method is only reimplemented for OSX.
return|return
name|nonConst
operator|->
name|hitButton
argument_list|(
name|pos
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hitButton
name|bool
name|QPushButtonPrivate
operator|::
name|hitButton
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
name|QRect
name|roundedRect
argument_list|(
name|q
operator|->
name|rect
argument_list|()
operator|.
name|left
argument_list|()
operator|+
name|QMacStylePrivate
operator|::
name|PushButtonLeftOffset
argument_list|,
name|q
operator|->
name|rect
argument_list|()
operator|.
name|top
argument_list|()
operator|+
name|QMacStylePrivate
operator|::
name|PushButtonContentPadding
argument_list|,
name|q
operator|->
name|rect
argument_list|()
operator|.
name|width
argument_list|()
operator|-
name|QMacStylePrivate
operator|::
name|PushButtonRightOffset
argument_list|,
name|q
operator|->
name|rect
argument_list|()
operator|.
name|height
argument_list|()
operator|-
name|QMacStylePrivate
operator|::
name|PushButtonBottomOffset
argument_list|)
decl_stmt|;
return|return
name|roundedRect
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_WS_MAC
end_comment
begin_comment
comment|/*!     \fn void QPushButton::openPopup()      Use showMenu() instead. */
end_comment
begin_comment
comment|/*!     \fn bool QPushButton::isMenuButton() const      Use menu() != 0 instead. */
end_comment
begin_comment
comment|/*!     \fn void QPushButton::setPopup(QMenu* popup)      Use setMenu() instead. */
end_comment
begin_comment
comment|/*!     \fn QMenu* QPushButton::popup() const      Use menu() instead. */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qpushbutton.cpp"
end_include
end_unit
