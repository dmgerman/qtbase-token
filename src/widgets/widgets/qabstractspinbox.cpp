begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|<private/qabstractspinbox_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qdatetime_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qlineedit_p.h>
end_include
begin_include
include|#
directive|include
file|<qabstractspinbox.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
end_ifndef
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qstylehints.h>
end_include
begin_include
include|#
directive|include
file|<qclipboard.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qdatetimeedit.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qpalette.h>
end_include
begin_include
include|#
directive|include
file|<qstylepainter.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|<qaccessible.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//#define QABSTRACTSPINBOX_QSBDEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QABSTRACTSPINBOX_QSBDEBUG
end_ifdef
begin_define
DECL|macro|QASBDEBUG
define|#
directive|define
name|QASBDEBUG
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|QASBDEBUG
define|#
directive|define
name|QASBDEBUG
value|if (false) qDebug
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*!     \class QAbstractSpinBox     \brief The QAbstractSpinBox class provides a spinbox and a line edit to     display values.      \ingroup abstractwidgets     \inmodule QtWidgets      The class is designed as a common super class for widgets like     QSpinBox, QDoubleSpinBox and QDateTimeEdit      Here are the main properties of the class:      \list 1      \li \l text: The text that is displayed in the QAbstractSpinBox.      \li \l alignment: The alignment of the text in the QAbstractSpinBox.      \li \l wrapping: Whether the QAbstractSpinBox wraps from the     minimum value to the maximum value and vica versa.      \endlist      QAbstractSpinBox provides a virtual stepBy() function that is     called whenever the user triggers a step. This function takes an     integer value to signify how many steps were taken. E.g. Pressing     Qt::Key_Down will trigger a call to stepBy(-1).      QAbstractSpinBox also provide a virtual function stepEnabled() to     determine whether stepping up/down is allowed at any point. This     function returns a bitset of StepEnabled.      \sa QAbstractSlider, QSpinBox, QDoubleSpinBox, QDateTimeEdit,         {Spin Boxes Example} */
end_comment
begin_comment
comment|/*!     \enum QAbstractSpinBox::StepEnabledFlag      \value StepNone     \value StepUpEnabled     \value StepDownEnabled */
end_comment
begin_comment
comment|/*!   \fn void QAbstractSpinBox::editingFinished()    This signal is emitted editing is finished. This happens when the   spinbox loses focus and when enter is pressed. */
end_comment
begin_comment
comment|/*!     Constructs an abstract spinbox with the given \a parent with default     \l wrapping, and \l alignment properties. */
end_comment
begin_constructor
DECL|function|QAbstractSpinBox
name|QAbstractSpinBox
operator|::
name|QAbstractSpinBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QAbstractSpinBoxPrivate
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QAbstractSpinBox
name|QAbstractSpinBox
operator|::
name|QAbstractSpinBox
parameter_list|(
name|QAbstractSpinBoxPrivate
modifier|&
name|dd
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Called when the QAbstractSpinBox is destroyed. */
end_comment
begin_destructor
DECL|function|~QAbstractSpinBox
name|QAbstractSpinBox
operator|::
name|~
name|QAbstractSpinBox
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \enum QAbstractSpinBox::ButtonSymbols      This enum type describes the symbols that can be displayed on the buttons     in a spin box.      \inlineimage qspinbox-updown.png     \inlineimage qspinbox-plusminus.png      \value UpDownArrows Little arrows in the classic style.     \value PlusMinus \b{+} and \b{-} symbols.     \value NoButtons Don't display buttons.      \sa QAbstractSpinBox::buttonSymbols */
end_comment
begin_comment
comment|/*!     \property QAbstractSpinBox::buttonSymbols      \brief the current button symbol mode      The possible values can be either \c UpDownArrows or \c PlusMinus.     The default is \c UpDownArrows.      Note that some styles might render PlusMinus and UpDownArrows     identically.      \sa ButtonSymbols */
end_comment
begin_function
DECL|function|buttonSymbols
name|QAbstractSpinBox
operator|::
name|ButtonSymbols
name|QAbstractSpinBox
operator|::
name|buttonSymbols
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|buttonSymbols
return|;
block|}
end_function
begin_function
DECL|function|setButtonSymbols
name|void
name|QAbstractSpinBox
operator|::
name|setButtonSymbols
parameter_list|(
name|ButtonSymbols
name|buttonSymbols
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|buttonSymbols
operator|!=
name|buttonSymbols
condition|)
block|{
name|d
operator|->
name|buttonSymbols
operator|=
name|buttonSymbols
expr_stmt|;
name|d
operator|->
name|updateEditFieldGeometry
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QAbstractSpinBox::text      \brief the spin box's text, including any prefix and suffix      There is no default text. */
end_comment
begin_function
DECL|function|text
name|QString
name|QAbstractSpinBox
operator|::
name|text
parameter_list|()
specifier|const
block|{
return|return
name|lineEdit
argument_list|()
operator|->
name|displayText
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QAbstractSpinBox::specialValueText     \brief the special-value text      If set, the spin box will display this text instead of a numeric     value whenever the current value is equal to minimum(). Typical use     is to indicate that this choice has a special (default) meaning.      For example, if your spin box allows the user to choose a scale factor     (or zoom level) for displaying an image, and your application is able     to automatically choose one that will enable the image to fit completely     within the display window, you can set up the spin box like this:      \snippet widgets/spinboxes/window.cpp 3      The user will then be able to choose a scale from 1% to 1000%     or select "Auto" to leave it up to the application to choose. Your code     must then interpret the spin box value of 0 as a request from the user     to scale the image to fit inside the window.      All values are displayed with the prefix and suffix (if set), \e     except for the special value, which only shows the special value     text. This special text is passed in the QSpinBox::valueChanged()     signal that passes a QString.      To turn off the special-value text display, call this function     with an empty string. The default is no special-value text, i.e.     the numeric value is shown as usual.      If no special-value text is set, specialValueText() returns an     empty string. */
end_comment
begin_function
DECL|function|specialValueText
name|QString
name|QAbstractSpinBox
operator|::
name|specialValueText
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|specialValueText
return|;
block|}
end_function
begin_function
DECL|function|setSpecialValueText
name|void
name|QAbstractSpinBox
operator|::
name|setSpecialValueText
parameter_list|(
specifier|const
name|QString
modifier|&
name|specialValueText
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|specialValueText
operator|=
name|specialValueText
expr_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
comment|// minimumSizeHint doesn't care about specialValueText
name|d
operator|->
name|clearCache
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateEdit
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QAbstractSpinBox::wrapping      \brief whether the spin box is circular.      If wrapping is true stepping up from maximum() value will take you     to the minimum() value and vica versa. Wrapping only make sense if     you have minimum() and maximum() values set.      \snippet code/src_gui_widgets_qabstractspinbox.cpp 0      \sa QSpinBox::minimum(), QSpinBox::maximum() */
end_comment
begin_function
DECL|function|wrapping
name|bool
name|QAbstractSpinBox
operator|::
name|wrapping
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|wrapping
return|;
block|}
end_function
begin_function
DECL|function|setWrapping
name|void
name|QAbstractSpinBox
operator|::
name|setWrapping
parameter_list|(
name|bool
name|wrapping
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|wrapping
operator|=
name|wrapping
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QAbstractSpinBox::readOnly     \brief whether the spin box is read only.      In read-only mode, the user can still copy the text to the     clipboard, or drag and drop the text;     but cannot edit it.      The QLineEdit in the QAbstractSpinBox does not show a cursor in     read-only mode.      \sa QLineEdit::readOnly */
end_comment
begin_function
DECL|function|isReadOnly
name|bool
name|QAbstractSpinBox
operator|::
name|isReadOnly
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|readOnly
return|;
block|}
end_function
begin_function
DECL|function|setReadOnly
name|void
name|QAbstractSpinBox
operator|::
name|setReadOnly
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|readOnly
operator|=
name|enable
expr_stmt|;
name|d
operator|->
name|edit
operator|->
name|setReadOnly
argument_list|(
name|enable
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QAbstractSpinBox::keyboardTracking     \brief whether keyboard tracking is enabled for the spinbox.     \since 4.3      If keyboard tracking is enabled (the default), the spinbox     emits the valueChanged() signal while the new value is being     entered from the keyboard.      E.g. when the user enters the value 600 by typing 6, 0, and 0,     the spinbox emits 3 signals with the values 6, 60, and 600     respectively.      If keyboard tracking is disabled, the spinbox doesn't emit the     valueChanged() signal while typing. It emits the signal later,     when the return key is pressed, when keyboard focus is lost, or     when other spinbox functionality is used, e.g. pressing an arrow     key. */
end_comment
begin_function
DECL|function|keyboardTracking
name|bool
name|QAbstractSpinBox
operator|::
name|keyboardTracking
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|keyboardTracking
return|;
block|}
end_function
begin_function
DECL|function|setKeyboardTracking
name|void
name|QAbstractSpinBox
operator|::
name|setKeyboardTracking
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|keyboardTracking
operator|=
name|enable
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QAbstractSpinBox::frame     \brief whether the spin box draws itself with a frame      If enabled (the default) the spin box draws itself inside a frame,     otherwise the spin box draws itself without any frame. */
end_comment
begin_function
DECL|function|hasFrame
name|bool
name|QAbstractSpinBox
operator|::
name|hasFrame
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|frame
return|;
block|}
end_function
begin_function
DECL|function|setFrame
name|void
name|QAbstractSpinBox
operator|::
name|setFrame
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|frame
operator|=
name|enable
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateEditFieldGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QAbstractSpinBox::accelerated     \brief whether the spin box will accelerate the frequency of the steps when     pressing the step Up/Down buttons.     \since 4.2      If enabled the spin box will increase/decrease the value faster     the longer you hold the button down. */
end_comment
begin_function
DECL|function|setAccelerated
name|void
name|QAbstractSpinBox
operator|::
name|setAccelerated
parameter_list|(
name|bool
name|accelerate
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|accelerate
operator|=
name|accelerate
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isAccelerated
name|bool
name|QAbstractSpinBox
operator|::
name|isAccelerated
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|accelerate
return|;
block|}
end_function
begin_comment
comment|/*!     \enum QAbstractSpinBox::CorrectionMode      This enum type describes the mode the spinbox will use to correct     an \l{QValidator::}{Intermediate} value if editing finishes.      \value CorrectToPreviousValue The spinbox will revert to the last                                   valid value.      \value CorrectToNearestValue The spinbox will revert to the nearest                                  valid value.      \sa correctionMode */
end_comment
begin_comment
comment|/*!     \property QAbstractSpinBox::correctionMode     \brief the mode to correct an \l{QValidator::}{Intermediate}            value if editing finishes     \since 4.2      The default mode is QAbstractSpinBox::CorrectToPreviousValue.      \sa acceptableInput, validate(), fixup() */
end_comment
begin_function
DECL|function|setCorrectionMode
name|void
name|QAbstractSpinBox
operator|::
name|setCorrectionMode
parameter_list|(
name|CorrectionMode
name|correctionMode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|correctionMode
operator|=
name|correctionMode
expr_stmt|;
block|}
end_function
begin_function
DECL|function|correctionMode
name|QAbstractSpinBox
operator|::
name|CorrectionMode
name|QAbstractSpinBox
operator|::
name|correctionMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|correctionMode
return|;
block|}
end_function
begin_comment
comment|/*!   \property QAbstractSpinBox::acceptableInput   \brief whether the input satisfies the current validation   \since 4.2    \sa validate(), fixup(), correctionMode */
end_comment
begin_function
DECL|function|hasAcceptableInput
name|bool
name|QAbstractSpinBox
operator|::
name|hasAcceptableInput
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|edit
operator|->
name|hasAcceptableInput
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \property QAbstractSpinBox::alignment     \brief the alignment of the spin box      Possible Values are Qt::AlignLeft, Qt::AlignRight, and Qt::AlignHCenter.      By default, the alignment is Qt::AlignLeft      Attempting to set the alignment to an illegal flag combination     does nothing.      \sa Qt::Alignment */
end_comment
begin_function
DECL|function|alignment
name|Qt
operator|::
name|Alignment
name|QAbstractSpinBox
operator|::
name|alignment
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
return|return
operator|(
name|Qt
operator|::
name|Alignment
operator|)
name|d
operator|->
name|edit
operator|->
name|alignment
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setAlignment
name|void
name|QAbstractSpinBox
operator|::
name|setAlignment
parameter_list|(
name|Qt
operator|::
name|Alignment
name|flag
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|edit
operator|->
name|setAlignment
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Selects all the text in the spinbox except the prefix and suffix. */
end_comment
begin_function
DECL|function|selectAll
name|void
name|QAbstractSpinBox
operator|::
name|selectAll
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|specialValue
argument_list|()
condition|)
block|{
specifier|const
name|int
name|tmp
init|=
name|d
operator|->
name|edit
operator|->
name|displayText
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|d
operator|->
name|suffix
operator|.
name|size
argument_list|()
decl_stmt|;
name|d
operator|->
name|edit
operator|->
name|setSelection
argument_list|(
name|tmp
argument_list|,
operator|-
operator|(
name|tmp
operator|-
name|d
operator|->
name|prefix
operator|.
name|size
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|edit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Clears the lineedit of all text but prefix and suffix. */
end_comment
begin_function
DECL|function|clear
name|void
name|QAbstractSpinBox
operator|::
name|clear
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|edit
operator|->
name|setText
argument_list|(
name|d
operator|->
name|prefix
operator|+
name|d
operator|->
name|suffix
argument_list|)
expr_stmt|;
name|d
operator|->
name|edit
operator|->
name|setCursorPosition
argument_list|(
name|d
operator|->
name|prefix
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|cleared
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Virtual function that determines whether stepping up and down is     legal at any given time.      The up arrow will be painted as disabled unless (stepEnabled()&     StepUpEnabled) != 0.      The default implementation will return (StepUpEnabled|     StepDownEnabled) if wrapping is turned on. Else it will return     StepDownEnabled if value is> minimum() or'ed with StepUpEnabled if     value< maximum().      If you subclass QAbstractSpinBox you will need to reimplement this function.      \sa QSpinBox::minimum(), QSpinBox::maximum(), wrapping() */
end_comment
begin_function
DECL|function|stepEnabled
name|QAbstractSpinBox
operator|::
name|StepEnabled
name|QAbstractSpinBox
operator|::
name|stepEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|readOnly
operator|||
name|d
operator|->
name|type
operator|==
name|QVariant
operator|::
name|Invalid
condition|)
return|return
name|StepNone
return|;
if|if
condition|(
name|d
operator|->
name|wrapping
condition|)
return|return
name|StepEnabled
argument_list|(
name|StepUpEnabled
operator||
name|StepDownEnabled
argument_list|)
return|;
name|StepEnabled
name|ret
init|=
name|StepNone
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|variantCompare
argument_list|(
name|d
operator|->
name|value
argument_list|,
name|d
operator|->
name|maximum
argument_list|)
operator|<
literal|0
condition|)
block|{
name|ret
operator||=
name|StepUpEnabled
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|variantCompare
argument_list|(
name|d
operator|->
name|value
argument_list|,
name|d
operator|->
name|minimum
argument_list|)
operator|>
literal|0
condition|)
block|{
name|ret
operator||=
name|StepDownEnabled
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!    This virtual function is called by the QAbstractSpinBox to    determine whether \a input is valid. The \a pos parameter indicates    the position in the string. Reimplemented in the various    subclasses. */
end_comment
begin_function
DECL|function|validate
name|QValidator
operator|::
name|State
name|QAbstractSpinBox
operator|::
name|validate
parameter_list|(
name|QString
modifier|&
comment|/* input */
parameter_list|,
name|int
modifier|&
comment|/* pos */
parameter_list|)
specifier|const
block|{
return|return
name|QValidator
operator|::
name|Acceptable
return|;
block|}
end_function
begin_comment
comment|/*!    This virtual function is called by the QAbstractSpinBox if the    \a input is not validated to QValidator::Acceptable when Return is    pressed or interpretText() is called. It will try to change the    text so it is valid. Reimplemented in the various subclasses. */
end_comment
begin_function
DECL|function|fixup
name|void
name|QAbstractSpinBox
operator|::
name|fixup
parameter_list|(
name|QString
modifier|&
comment|/* input */
parameter_list|)
specifier|const
block|{ }
end_function
begin_comment
comment|/*!   Steps up by one linestep   Calling this slot is analogous to calling stepBy(1);   \sa stepBy(), stepDown() */
end_comment
begin_function
DECL|function|stepUp
name|void
name|QAbstractSpinBox
operator|::
name|stepUp
parameter_list|()
block|{
name|stepBy
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Steps down by one linestep   Calling this slot is analogous to calling stepBy(-1);   \sa stepBy(), stepUp() */
end_comment
begin_function
DECL|function|stepDown
name|void
name|QAbstractSpinBox
operator|::
name|stepDown
parameter_list|()
block|{
name|stepBy
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Virtual function that is called whenever the user triggers a step.     The \a steps parameter indicates how many steps were taken, e.g.     Pressing Qt::Key_Down will trigger a call to stepBy(-1),     whereas pressing Qt::Key_Prior will trigger a call to     stepBy(10).      If you subclass QAbstractSpinBox you must reimplement this     function. Note that this function is called even if the resulting     value will be outside the bounds of minimum and maximum. It's this     function's job to handle these situations. */
end_comment
begin_function
DECL|function|stepBy
name|void
name|QAbstractSpinBox
operator|::
name|stepBy
parameter_list|(
name|int
name|steps
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
specifier|const
name|QVariant
name|old
init|=
name|d
operator|->
name|value
decl_stmt|;
name|QString
name|tmp
init|=
name|d
operator|->
name|edit
operator|->
name|displayText
argument_list|()
decl_stmt|;
name|int
name|cursorPos
init|=
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
name|bool
name|dontstep
init|=
literal|false
decl_stmt|;
name|EmitPolicy
name|e
init|=
name|EmitIfChanged
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|pendingEmit
condition|)
block|{
name|dontstep
operator|=
name|validate
argument_list|(
name|tmp
argument_list|,
name|cursorPos
argument_list|)
operator|!=
name|QValidator
operator|::
name|Acceptable
expr_stmt|;
name|d
operator|->
name|cleared
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|interpret
argument_list|(
name|NeverEmit
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|value
operator|!=
name|old
condition|)
name|e
operator|=
name|AlwaysEmit
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dontstep
condition|)
block|{
name|d
operator|->
name|setValue
argument_list|(
name|d
operator|->
name|bound
argument_list|(
name|d
operator|->
name|value
operator|+
operator|(
name|d
operator|->
name|singleStep
operator|*
name|steps
operator|)
argument_list|,
name|old
argument_list|,
name|steps
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|AlwaysEmit
condition|)
block|{
name|d
operator|->
name|emitSignals
argument_list|(
name|e
argument_list|,
name|old
argument_list|)
expr_stmt|;
block|}
name|selectAll
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This function returns a pointer to the line edit of the spin box. */
end_comment
begin_function
DECL|function|lineEdit
name|QLineEdit
modifier|*
name|QAbstractSpinBox
operator|::
name|lineEdit
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|edit
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QAbstractSpinBox::setLineEdit(QLineEdit *lineEdit)      Sets the line edit of the spinbox to be \a lineEdit instead of the     current line edit widget. \a lineEdit can not be 0.      QAbstractSpinBox takes ownership of the new lineEdit      If QLineEdit::validator() for the \a lineEdit returns 0, the internal     validator of the spinbox will be set on the line edit. */
end_comment
begin_function
DECL|function|setLineEdit
name|void
name|QAbstractSpinBox
operator|::
name|setLineEdit
parameter_list|(
name|QLineEdit
modifier|*
name|lineEdit
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lineEdit
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
return|return;
block|}
operator|delete
name|d
operator|->
name|edit
expr_stmt|;
name|d
operator|->
name|edit
operator|=
name|lineEdit
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|edit
operator|->
name|validator
argument_list|()
condition|)
name|d
operator|->
name|edit
operator|->
name|setValidator
argument_list|(
name|d
operator|->
name|validator
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|edit
operator|->
name|parent
argument_list|()
operator|!=
name|this
condition|)
name|d
operator|->
name|edit
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|edit
operator|->
name|setFrame
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|edit
operator|->
name|setFocusProxy
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|edit
operator|->
name|setAcceptDrops
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|type
operator|!=
name|QVariant
operator|::
name|Invalid
condition|)
block|{
name|connect
argument_list|(
name|d
operator|->
name|edit
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_editorTextChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|edit
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_editorCursorPositionChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|updateEditFieldGeometry
argument_list|()
expr_stmt|;
name|d
operator|->
name|edit
operator|->
name|setContextMenuPolicy
argument_list|(
name|Qt
operator|::
name|NoContextMenu
argument_list|)
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|d
operator|->
name|edit
operator|->
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|d
operator|->
name|updateEdit
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This function interprets the text of the spin box. If the value     has changed since last interpretation it will emit signals. */
end_comment
begin_function
DECL|function|interpretText
name|void
name|QAbstractSpinBox
operator|::
name|interpretText
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|interpret
argument_list|(
name|EmitIfChanged
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Reimplemented in 4.6, so be careful.  */
end_comment
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|inputMethodQuery
name|QVariant
name|QAbstractSpinBox
operator|::
name|inputMethodQuery
parameter_list|(
name|Qt
operator|::
name|InputMethodQuery
name|query
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|edit
operator|->
name|inputMethodQuery
argument_list|(
name|query
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QAbstractSpinBox
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|FontChange
case|:
case|case
name|QEvent
operator|::
name|StyleChange
case|:
name|d
operator|->
name|cachedSizeHint
operator|=
name|d
operator|->
name|cachedMinimumSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ApplicationLayoutDirectionChange
case|:
case|case
name|QEvent
operator|::
name|LayoutDirectionChange
case|:
name|d
operator|->
name|updateEditFieldGeometry
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|HoverEnter
case|:
case|case
name|QEvent
operator|::
name|HoverLeave
case|:
case|case
name|QEvent
operator|::
name|HoverMove
case|:
if|if
condition|(
specifier|const
name|QHoverEvent
modifier|*
name|he
init|=
cast|static_cast
argument_list|<
specifier|const
name|QHoverEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
condition|)
name|d
operator|->
name|updateHoverControl
argument_list|(
name|he
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ShortcutOverride
case|:
if|if
condition|(
name|d
operator|->
name|edit
operator|->
name|event
argument_list|(
name|event
argument_list|)
condition|)
return|return
literal|true
return|;
break|break;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
case|case
name|QEvent
operator|::
name|EnterEditFocus
case|:
case|case
name|QEvent
operator|::
name|LeaveEditFocus
case|:
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
specifier|const
name|bool
name|b
init|=
name|d
operator|->
name|edit
operator|->
name|event
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|d
operator|->
name|edit
operator|->
name|setSelection
argument_list|(
name|d
operator|->
name|edit
operator|->
name|displayText
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|d
operator|->
name|suffix
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LeaveEditFocus
condition|)
emit|emit
name|editingFinished
argument_list|()
emit|;
if|if
condition|(
name|b
condition|)
return|return
literal|true
return|;
block|}
break|break;
endif|#
directive|endif
case|case
name|QEvent
operator|::
name|InputMethod
case|:
return|return
name|d
operator|->
name|edit
operator|->
name|event
argument_list|(
name|event
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|showEvent
name|void
name|QAbstractSpinBox
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|ignoreUpdateEdit
condition|)
block|{
name|d
operator|->
name|ignoreUpdateEdit
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|updateEdit
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QAbstractSpinBox
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|StyleChange
case|:
name|d
operator|->
name|spinClickTimerInterval
operator|=
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_SpinBox_ClickAutoRepeatRate
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|spinClickThresholdTimerInterval
operator|=
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_SpinBox_ClickAutoRepeatThreshold
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateEditFieldGeometry
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|EnabledChange
case|:
if|if
condition|(
operator|!
name|isEnabled
argument_list|()
condition|)
block|{
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|QEvent
operator|::
name|ActivationChange
case|:
if|if
condition|(
operator|!
name|isActiveWindow
argument_list|()
condition|)
block|{
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pendingEmit
condition|)
comment|// pendingEmit can be true even if it hasn't changed.
name|d
operator|->
name|interpret
argument_list|(
name|EmitIfChanged
argument_list|)
expr_stmt|;
comment|// E.g. 10 to 10.0
block|}
break|break;
default|default:
break|break;
block|}
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QAbstractSpinBox
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|QWidget
operator|::
name|resizeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateEditFieldGeometry
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QAbstractSpinBox
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cachedSizeHint
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ensurePolished
argument_list|()
expr_stmt|;
specifier|const
name|QFontMetrics
name|fm
argument_list|(
name|fontMetrics
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|d
operator|->
name|edit
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|w
init|=
literal|0
decl_stmt|;
name|QString
name|s
decl_stmt|;
name|QString
name|fixedContent
init|=
name|d
operator|->
name|prefix
operator|+
name|d
operator|->
name|suffix
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|s
operator|=
name|d
operator|->
name|textFromValue
argument_list|(
name|d
operator|->
name|minimum
argument_list|)
operator|+
name|fixedContent
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|d
operator|->
name|textFromValue
argument_list|(
name|d
operator|->
name|maximum
argument_list|)
operator|+
name|fixedContent
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|specialValueText
operator|.
name|size
argument_list|()
condition|)
block|{
name|s
operator|=
name|d
operator|->
name|specialValueText
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|w
operator|+=
literal|2
expr_stmt|;
comment|// cursor blinking space
name|QStyleOptionSpinBox
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QSize
name|hint
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_SpinBox
argument_list|,
operator|&
name|opt
argument_list|,
name|hint
argument_list|,
name|this
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|d
operator|->
name|cachedSizeHint
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|minimumSizeHint
name|QSize
name|QAbstractSpinBox
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cachedMinimumSizeHint
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Use the prefix and range to calculate the minimumSizeHint
name|ensurePolished
argument_list|()
expr_stmt|;
specifier|const
name|QFontMetrics
name|fm
argument_list|(
name|fontMetrics
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|h
init|=
name|d
operator|->
name|edit
operator|->
name|minimumSizeHint
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|w
init|=
literal|0
decl_stmt|;
name|QString
name|s
decl_stmt|;
name|QString
name|fixedContent
init|=
name|d
operator|->
name|prefix
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|s
operator|=
name|d
operator|->
name|textFromValue
argument_list|(
name|d
operator|->
name|minimum
argument_list|)
operator|+
name|fixedContent
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|d
operator|->
name|textFromValue
argument_list|(
name|d
operator|->
name|maximum
argument_list|)
operator|+
name|fixedContent
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|specialValueText
operator|.
name|size
argument_list|()
condition|)
block|{
name|s
operator|=
name|d
operator|->
name|specialValueText
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|w
operator|+=
literal|2
expr_stmt|;
comment|// cursor blinking space
name|QStyleOptionSpinBox
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QSize
name|hint
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|d
operator|->
name|cachedMinimumSizeHint
operator|=
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_SpinBox
argument_list|,
operator|&
name|opt
argument_list|,
name|hint
argument_list|,
name|this
argument_list|)
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|d
operator|->
name|cachedMinimumSizeHint
return|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QAbstractSpinBox
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QStyleOptionSpinBox
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|QStylePainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_SpinBox
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp      This function handles keyboard input.      The following keys are handled specifically:     \table     \row \li Enter/Return          \li This will reinterpret the text and emit a signal even if the value has not changed          since last time a signal was emitted.     \row \li Up          \li This will invoke stepBy(1)     \row \li Down          \li This will invoke stepBy(-1)     \row \li Page up          \li This will invoke stepBy(10)     \row \li Page down          \li This will invoke stepBy(-10)     \endtable */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QAbstractSpinBox
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|event
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
operator|<
name|d
operator|->
name|prefix
operator|.
name|size
argument_list|()
condition|)
name|d
operator|->
name|edit
operator|->
name|setCursorPosition
argument_list|(
name|d
operator|->
name|prefix
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|steps
init|=
literal|1
decl_stmt|;
name|bool
name|isPgUpOrDown
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_PageUp
case|:
case|case
name|Qt
operator|::
name|Key_PageDown
case|:
name|steps
operator|*=
literal|10
expr_stmt|;
name|isPgUpOrDown
operator|=
literal|true
expr_stmt|;
case|case
name|Qt
operator|::
name|Key_Up
case|:
case|case
name|Qt
operator|::
name|Key_Down
case|:
block|{
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
comment|// Reserve up/down for nav - use left/right for edit.
if|if
condition|(
operator|!
name|hasEditFocus
argument_list|()
operator|&&
operator|(
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Up
operator|||
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Down
operator|)
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
endif|#
directive|endif
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
specifier|const
name|bool
name|up
init|=
operator|(
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_PageUp
operator|||
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Up
operator|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|stepEnabled
argument_list|()
operator|&
operator|(
name|up
condition|?
name|StepUpEnabled
else|:
name|StepDownEnabled
operator|)
operator|)
condition|)
return|return;
if|if
condition|(
operator|!
name|up
condition|)
name|steps
operator|*=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_SpinBox_AnimateButton
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
block|{
name|d
operator|->
name|buttonState
operator|=
operator|(
name|Keyboard
operator||
operator|(
name|up
condition|?
name|Up
else|:
name|Down
operator|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|spinClickTimerId
operator|==
operator|-
literal|1
condition|)
name|stepBy
argument_list|(
name|steps
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|isAutoRepeat
argument_list|()
operator|&&
operator|!
name|isPgUpOrDown
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|spinClickThresholdTimerId
operator|==
operator|-
literal|1
operator|&&
name|d
operator|->
name|spinClickTimerId
operator|==
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|updateState
argument_list|(
name|up
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessibleValueChangeEvent
name|event
argument_list|(
name|this
argument_list|,
name|d
operator|->
name|value
argument_list|)
decl_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
case|case
name|Qt
operator|::
name|Key_Left
case|:
case|case
name|Qt
operator|::
name|Key_Right
case|:
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|!
name|hasEditFocus
argument_list|()
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|Qt
operator|::
name|Key_Back
case|:
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|!
name|hasEditFocus
argument_list|()
condition|)
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
break|break;
endif|#
directive|endif
case|case
name|Qt
operator|::
name|Key_Enter
case|:
case|case
name|Qt
operator|::
name|Key_Return
case|:
name|d
operator|->
name|edit
operator|->
name|d_func
argument_list|()
operator|->
name|control
operator|->
name|clearUndo
argument_list|()
expr_stmt|;
name|d
operator|->
name|interpret
argument_list|(
name|d
operator|->
name|keyboardTracking
condition|?
name|AlwaysEmit
else|:
name|EmitIfChanged
argument_list|)
expr_stmt|;
name|selectAll
argument_list|()
expr_stmt|;
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
emit|emit
name|editingFinished
argument_list|()
emit|;
emit|emit
name|d
operator|->
name|edit
operator|->
name|returnPressed
argument_list|()
emit|;
return|return;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
case|case
name|Qt
operator|::
name|Key_Select
case|:
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
comment|// Toggles between left/right moving cursor and inc/dec.
name|setEditFocus
argument_list|(
operator|!
name|hasEditFocus
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
endif|#
directive|endif
case|case
name|Qt
operator|::
name|Key_U
case|:
if|if
condition|(
name|event
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ControlModifier
operator|&&
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"xcb"
argument_list|)
condition|)
block|{
comment|// only X11
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isReadOnly
argument_list|()
condition|)
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|Qt
operator|::
name|Key_End
case|:
case|case
name|Qt
operator|::
name|Key_Home
case|:
if|if
condition|(
name|event
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
block|{
name|int
name|currentPos
init|=
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|text
init|=
name|d
operator|->
name|edit
operator|->
name|displayText
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_End
condition|)
block|{
if|if
condition|(
operator|(
name|currentPos
operator|==
literal|0
operator|&&
operator|!
name|d
operator|->
name|prefix
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
name|text
operator|.
name|size
argument_list|()
operator|-
name|d
operator|->
name|suffix
operator|.
name|size
argument_list|()
operator|<=
name|currentPos
condition|)
block|{
break|break;
comment|// let lineedit handle this
block|}
else|else
block|{
name|d
operator|->
name|edit
operator|->
name|setSelection
argument_list|(
name|currentPos
argument_list|,
name|text
operator|.
name|size
argument_list|()
operator|-
name|d
operator|->
name|suffix
operator|.
name|size
argument_list|()
operator|-
name|currentPos
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
name|currentPos
operator|==
name|text
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|suffix
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
name|currentPos
operator|<=
name|d
operator|->
name|prefix
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
comment|// let lineedit handle this
block|}
else|else
block|{
name|d
operator|->
name|edit
operator|->
name|setSelection
argument_list|(
name|currentPos
argument_list|,
name|d
operator|->
name|prefix
operator|.
name|size
argument_list|()
operator|-
name|currentPos
argument_list|)
expr_stmt|;
block|}
block|}
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return;
block|}
break|break;
default|default:
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
if|if
condition|(
name|event
operator|==
name|QKeySequence
operator|::
name|SelectAll
condition|)
block|{
name|selectAll
argument_list|()
expr_stmt|;
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
break|break;
block|}
name|d
operator|->
name|edit
operator|->
name|event
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isVisible
argument_list|()
condition|)
name|d
operator|->
name|ignoreUpdateEdit
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|keyReleaseEvent
name|void
name|QAbstractSpinBox
operator|::
name|keyReleaseEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|buttonState
operator|&
name|Keyboard
operator|&&
operator|!
name|event
operator|->
name|isAutoRepeat
argument_list|()
condition|)
block|{
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|edit
operator|->
name|event
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_function
DECL|function|wheelEvent
name|void
name|QAbstractSpinBox
operator|::
name|wheelEvent
parameter_list|(
name|QWheelEvent
modifier|*
name|event
parameter_list|)
block|{
specifier|const
name|int
name|steps
init|=
operator|(
name|event
operator|->
name|delta
argument_list|()
operator|>
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|stepEnabled
argument_list|()
operator|&
operator|(
name|steps
operator|>
literal|0
condition|?
name|StepUpEnabled
else|:
name|StepDownEnabled
operator|)
condition|)
name|stepBy
argument_list|(
name|event
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ControlModifier
condition|?
name|steps
operator|*
literal|10
else|:
name|steps
argument_list|)
expr_stmt|;
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|focusInEvent
name|void
name|QAbstractSpinBox
operator|::
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|edit
operator|->
name|event
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|reason
argument_list|()
operator|==
name|Qt
operator|::
name|TabFocusReason
operator|||
name|event
operator|->
name|reason
argument_list|()
operator|==
name|Qt
operator|::
name|BacktabFocusReason
condition|)
block|{
name|selectAll
argument_list|()
expr_stmt|;
block|}
name|QWidget
operator|::
name|focusInEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|focusOutEvent
name|void
name|QAbstractSpinBox
operator|::
name|focusOutEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pendingEmit
condition|)
name|d
operator|->
name|interpret
argument_list|(
name|EmitIfChanged
argument_list|)
expr_stmt|;
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
name|d
operator|->
name|edit
operator|->
name|event
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateEdit
argument_list|()
expr_stmt|;
name|QWidget
operator|::
name|focusOutEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
comment|// editingFinished() is already emitted on LeaveEditFocus
if|if
condition|(
operator|!
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
endif|#
directive|endif
emit|emit
name|editingFinished
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|closeEvent
name|void
name|QAbstractSpinBox
operator|::
name|closeEvent
parameter_list|(
name|QCloseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pendingEmit
condition|)
name|d
operator|->
name|interpret
argument_list|(
name|EmitIfChanged
argument_list|)
expr_stmt|;
name|QWidget
operator|::
name|closeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|hideEvent
name|void
name|QAbstractSpinBox
operator|::
name|hideEvent
parameter_list|(
name|QHideEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pendingEmit
condition|)
name|d
operator|->
name|interpret
argument_list|(
name|EmitIfChanged
argument_list|)
expr_stmt|;
name|QWidget
operator|::
name|hideEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|timerEvent
name|void
name|QAbstractSpinBox
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|bool
name|doStep
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|spinClickThresholdTimerId
condition|)
block|{
name|killTimer
argument_list|(
name|d
operator|->
name|spinClickThresholdTimerId
argument_list|)
expr_stmt|;
name|d
operator|->
name|spinClickThresholdTimerId
operator|=
operator|-
literal|1
expr_stmt|;
name|d
operator|->
name|effectiveSpinRepeatRate
operator|=
name|d
operator|->
name|buttonState
operator|&
name|Keyboard
condition|?
name|qApp
operator|->
name|styleHints
argument_list|()
operator|->
name|keyboardAutoRepeatRate
argument_list|()
else|:
name|d
operator|->
name|spinClickTimerInterval
expr_stmt|;
name|d
operator|->
name|spinClickTimerId
operator|=
name|startTimer
argument_list|(
name|d
operator|->
name|effectiveSpinRepeatRate
argument_list|)
expr_stmt|;
name|doStep
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|spinClickTimerId
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|accelerate
condition|)
block|{
name|d
operator|->
name|acceleration
operator|=
name|d
operator|->
name|acceleration
operator|+
call|(
name|int
call|)
argument_list|(
name|d
operator|->
name|effectiveSpinRepeatRate
operator|*
literal|0.05
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|effectiveSpinRepeatRate
operator|-
name|d
operator|->
name|acceleration
operator|>=
literal|10
condition|)
block|{
name|killTimer
argument_list|(
name|d
operator|->
name|spinClickTimerId
argument_list|)
expr_stmt|;
name|d
operator|->
name|spinClickTimerId
operator|=
name|startTimer
argument_list|(
name|d
operator|->
name|effectiveSpinRepeatRate
operator|-
name|d
operator|->
name|acceleration
argument_list|)
expr_stmt|;
block|}
block|}
name|doStep
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|doStep
condition|)
block|{
specifier|const
name|StepEnabled
name|st
init|=
name|stepEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|buttonState
operator|&
name|Up
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|st
operator|&
name|StepUpEnabled
operator|)
condition|)
block|{
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|stepBy
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|buttonState
operator|&
name|Down
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|st
operator|&
name|StepDownEnabled
operator|)
condition|)
block|{
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|stepBy
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
name|QWidget
operator|::
name|timerEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|contextMenuEvent
name|void
name|QAbstractSpinBox
operator|::
name|contextMenuEvent
parameter_list|(
name|QContextMenuEvent
modifier|*
name|event
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_CONTEXTMENU
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QMenu
argument_list|>
name|menu
init|=
name|d
operator|->
name|edit
operator|->
name|createStandardContextMenu
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|menu
condition|)
return|return;
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
name|QAction
modifier|*
name|selAll
init|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"&Select All"
argument_list|)
argument_list|,
name|menu
argument_list|)
decl_stmt|;
name|menu
operator|->
name|insertAction
argument_list|(
name|d
operator|->
name|edit
operator|->
name|d_func
argument_list|()
operator|->
name|selectAllAction
argument_list|,
name|selAll
argument_list|)
expr_stmt|;
name|menu
operator|->
name|removeAction
argument_list|(
name|d
operator|->
name|edit
operator|->
name|d_func
argument_list|()
operator|->
name|selectAllAction
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
specifier|const
name|uint
name|se
init|=
name|stepEnabled
argument_list|()
decl_stmt|;
name|QAction
modifier|*
name|up
init|=
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"&Step up"
argument_list|)
argument_list|)
decl_stmt|;
name|up
operator|->
name|setEnabled
argument_list|(
name|se
operator|&
name|StepUpEnabled
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|down
init|=
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Step&down"
argument_list|)
argument_list|)
decl_stmt|;
name|down
operator|->
name|setEnabled
argument_list|(
name|se
operator|&
name|StepDownEnabled
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
specifier|const
name|QPointer
argument_list|<
name|QAbstractSpinBox
argument_list|>
name|that
init|=
name|this
decl_stmt|;
specifier|const
name|QPoint
name|pos
init|=
operator|(
name|event
operator|->
name|reason
argument_list|()
operator|==
name|QContextMenuEvent
operator|::
name|Mouse
operator|)
condition|?
name|event
operator|->
name|globalPos
argument_list|()
else|:
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
name|event
operator|->
name|pos
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|+
name|QPoint
argument_list|(
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|height
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
specifier|const
name|QAction
modifier|*
name|action
init|=
name|menu
operator|->
name|exec
argument_list|(
name|pos
argument_list|)
decl_stmt|;
operator|delete
cast|static_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|menu
argument_list|)
expr_stmt|;
if|if
condition|(
name|that
operator|&&
name|action
condition|)
block|{
if|if
condition|(
name|action
operator|==
name|up
condition|)
block|{
name|stepBy
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|down
condition|)
block|{
name|stepBy
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|selAll
condition|)
block|{
name|selectAll
argument_list|()
expr_stmt|;
block|}
block|}
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_CONTEXTMENU
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mouseMoveEvent
name|void
name|QAbstractSpinBox
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateHoverControl
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
comment|// If we have a timer ID, update the state
if|if
condition|(
name|d
operator|->
name|spinClickTimerId
operator|!=
operator|-
literal|1
operator|&&
name|d
operator|->
name|buttonSymbols
operator|!=
name|NoButtons
condition|)
block|{
specifier|const
name|StepEnabled
name|se
init|=
name|stepEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|se
operator|&
name|StepUpEnabled
operator|)
operator|&&
name|d
operator|->
name|hoverControl
operator|==
name|QStyle
operator|::
name|SC_SpinBoxUp
condition|)
name|d
operator|->
name|updateState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|se
operator|&
name|StepDownEnabled
operator|)
operator|&&
name|d
operator|->
name|hoverControl
operator|==
name|QStyle
operator|::
name|SC_SpinBoxDown
condition|)
name|d
operator|->
name|updateState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|QAbstractSpinBox
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
operator|||
name|d
operator|->
name|buttonState
operator|!=
name|None
condition|)
block|{
return|return;
block|}
name|d
operator|->
name|updateHoverControl
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
specifier|const
name|StepEnabled
name|se
init|=
operator|(
name|d
operator|->
name|buttonSymbols
operator|==
name|NoButtons
operator|)
condition|?
name|StepEnabled
argument_list|(
name|StepNone
argument_list|)
else|:
name|stepEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|se
operator|&
name|StepUpEnabled
operator|)
operator|&&
name|d
operator|->
name|hoverControl
operator|==
name|QStyle
operator|::
name|SC_SpinBoxUp
condition|)
block|{
name|d
operator|->
name|updateState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|se
operator|&
name|StepDownEnabled
operator|)
operator|&&
name|d
operator|->
name|hoverControl
operator|==
name|QStyle
operator|::
name|SC_SpinBoxDown
condition|)
block|{
name|d
operator|->
name|updateState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \reimp */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QAbstractSpinBox
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|d
operator|->
name|buttonState
operator|&
name|Mouse
operator|)
operator|!=
literal|0
condition|)
name|d
operator|->
name|reset
argument_list|()
expr_stmt|;
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// --- QAbstractSpinBoxPrivate ---
end_comment
begin_comment
comment|/*!     \internal     Constructs a QAbstractSpinBoxPrivate object */
end_comment
begin_constructor
DECL|function|QAbstractSpinBoxPrivate
name|QAbstractSpinBoxPrivate
operator|::
name|QAbstractSpinBoxPrivate
parameter_list|()
member_init_list|:
name|edit
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|type
argument_list|(
name|QVariant
operator|::
name|Invalid
argument_list|)
member_init_list|,
name|spinClickTimerId
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|spinClickTimerInterval
argument_list|(
literal|100
argument_list|)
member_init_list|,
name|spinClickThresholdTimerId
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|spinClickThresholdTimerInterval
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|effectiveSpinRepeatRate
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|buttonState
argument_list|(
name|None
argument_list|)
member_init_list|,
name|cachedText
argument_list|(
name|QLatin1String
argument_list|(
literal|"\x01"
argument_list|)
argument_list|)
member_init_list|,
name|cachedState
argument_list|(
name|QValidator
operator|::
name|Invalid
argument_list|)
member_init_list|,
name|pendingEmit
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|readOnly
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|wrapping
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|ignoreCursorPositionChanged
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|frame
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|accelerate
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|keyboardTracking
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|cleared
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|ignoreUpdateEdit
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|correctionMode
argument_list|(
name|QAbstractSpinBox
operator|::
name|CorrectToPreviousValue
argument_list|)
member_init_list|,
name|acceleration
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hoverControl
argument_list|(
name|QStyle
operator|::
name|SC_None
argument_list|)
member_init_list|,
name|buttonSymbols
argument_list|(
name|QAbstractSpinBox
operator|::
name|UpDownArrows
argument_list|)
member_init_list|,
name|validator
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*    \internal    Called when the QAbstractSpinBoxPrivate is destroyed */
end_comment
begin_destructor
DECL|function|~QAbstractSpinBoxPrivate
name|QAbstractSpinBoxPrivate
operator|::
name|~
name|QAbstractSpinBoxPrivate
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!     \internal     Updates the old and new hover control. Does nothing if the hover     control has not changed. */
end_comment
begin_function
DECL|function|updateHoverControl
name|bool
name|QAbstractSpinBoxPrivate
operator|::
name|updateHoverControl
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|QRect
name|lastHoverRect
init|=
name|hoverRect
decl_stmt|;
name|QStyle
operator|::
name|SubControl
name|lastHoverControl
init|=
name|hoverControl
decl_stmt|;
name|bool
name|doesHover
init|=
name|q
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_Hover
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastHoverControl
operator|!=
name|newHoverControl
argument_list|(
name|pos
argument_list|)
operator|&&
name|doesHover
condition|)
block|{
name|q
operator|->
name|update
argument_list|(
name|lastHoverRect
argument_list|)
expr_stmt|;
name|q
operator|->
name|update
argument_list|(
name|hoverRect
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
operator|!
name|doesHover
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Returns the hover control at \a pos.     This will update the hoverRect and hoverControl. */
end_comment
begin_function
DECL|function|newHoverControl
name|QStyle
operator|::
name|SubControl
name|QAbstractSpinBoxPrivate
operator|::
name|newHoverControl
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|QStyleOptionSpinBox
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_All
expr_stmt|;
name|hoverControl
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|hitTestComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_SpinBox
argument_list|,
operator|&
name|opt
argument_list|,
name|pos
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|hoverRect
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_SpinBox
argument_list|,
operator|&
name|opt
argument_list|,
name|hoverControl
argument_list|,
name|q
argument_list|)
expr_stmt|;
return|return
name|hoverControl
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Strips any prefix/suffix from \a text. */
end_comment
begin_function
DECL|function|stripped
name|QString
name|QAbstractSpinBoxPrivate
operator|::
name|stripped
parameter_list|(
specifier|const
name|QString
modifier|&
name|t
parameter_list|,
name|int
modifier|*
name|pos
parameter_list|)
specifier|const
block|{
name|QString
name|text
init|=
name|t
decl_stmt|;
if|if
condition|(
name|specialValueText
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|text
operator|!=
name|specialValueText
condition|)
block|{
name|int
name|from
init|=
literal|0
decl_stmt|;
name|int
name|size
init|=
name|text
operator|.
name|size
argument_list|()
decl_stmt|;
name|bool
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|size
argument_list|()
operator|&&
name|text
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|from
operator|+=
name|prefix
operator|.
name|size
argument_list|()
expr_stmt|;
name|size
operator|-=
name|from
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|suffix
operator|.
name|size
argument_list|()
operator|&&
name|text
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
condition|)
block|{
name|size
operator|-=
name|suffix
operator|.
name|size
argument_list|()
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
name|text
operator|=
name|text
operator|.
name|mid
argument_list|(
name|from
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
specifier|const
name|int
name|s
init|=
name|text
operator|.
name|size
argument_list|()
decl_stmt|;
name|text
operator|=
name|text
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
name|pos
condition|)
operator|(
operator|*
name|pos
operator|)
operator|-=
operator|(
name|s
operator|-
name|text
operator|.
name|size
argument_list|()
operator|)
expr_stmt|;
return|return
name|text
return|;
block|}
end_function
begin_function
DECL|function|updateEditFieldGeometry
name|void
name|QAbstractSpinBoxPrivate
operator|::
name|updateEditFieldGeometry
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|QStyleOptionSpinBox
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|subControls
operator|=
name|QStyle
operator|::
name|SC_SpinBoxEditField
expr_stmt|;
name|edit
operator|->
name|setGeometry
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_SpinBox
argument_list|,
operator|&
name|opt
argument_list|,
name|QStyle
operator|::
name|SC_SpinBoxEditField
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     Returns true if a specialValueText has been set and the current value is minimum. */
end_comment
begin_function
DECL|function|specialValue
name|bool
name|QAbstractSpinBoxPrivate
operator|::
name|specialValue
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|value
operator|==
name|minimum
operator|&&
operator|!
name|specialValueText
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal Virtual function that emits signals when the value     changes. Reimplemented in the different subclasses. */
end_comment
begin_function
DECL|function|emitSignals
name|void
name|QAbstractSpinBoxPrivate
operator|::
name|emitSignals
parameter_list|(
name|EmitPolicy
parameter_list|,
specifier|const
name|QVariant
modifier|&
parameter_list|)
block|{ }
end_function
begin_comment
comment|/*!     \internal      Slot connected to the line edit's textChanged(const QString&)     signal. */
end_comment
begin_function
DECL|function|_q_editorTextChanged
name|void
name|QAbstractSpinBoxPrivate
operator|::
name|_q_editorTextChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|t
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyboardTracking
condition|)
block|{
name|QString
name|tmp
init|=
name|t
decl_stmt|;
name|int
name|pos
init|=
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
name|QValidator
operator|::
name|State
name|state
init|=
name|q
operator|->
name|validate
argument_list|(
name|tmp
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|QValidator
operator|::
name|Acceptable
condition|)
block|{
specifier|const
name|QVariant
name|v
init|=
name|valueFromText
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|setValue
argument_list|(
name|v
argument_list|,
name|EmitIfChanged
argument_list|,
name|tmp
operator|!=
name|t
argument_list|)
expr_stmt|;
name|pendingEmit
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|pendingEmit
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|pendingEmit
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      Virtual slot connected to the line edit's     cursorPositionChanged(int, int) signal. Will move the cursor to a     valid position if the new one is invalid. E.g. inside the prefix.     Reimplemented in Q[Date|Time|DateTime]EditPrivate to account for     the different sections etc. */
end_comment
begin_function
DECL|function|_q_editorCursorPositionChanged
name|void
name|QAbstractSpinBoxPrivate
operator|::
name|_q_editorCursorPositionChanged
parameter_list|(
name|int
name|oldpos
parameter_list|,
name|int
name|newpos
parameter_list|)
block|{
if|if
condition|(
operator|!
name|edit
operator|->
name|hasSelectedText
argument_list|()
operator|&&
operator|!
name|ignoreCursorPositionChanged
operator|&&
operator|!
name|specialValue
argument_list|()
condition|)
block|{
name|ignoreCursorPositionChanged
operator|=
literal|true
expr_stmt|;
name|bool
name|allowSelection
init|=
literal|true
decl_stmt|;
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|newpos
operator|<
name|prefix
operator|.
name|size
argument_list|()
operator|&&
name|newpos
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|oldpos
operator|==
literal|0
condition|)
block|{
name|allowSelection
operator|=
literal|false
expr_stmt|;
name|pos
operator|=
name|prefix
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|=
name|oldpos
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|newpos
operator|>
name|edit
operator|->
name|text
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|suffix
operator|.
name|size
argument_list|()
operator|&&
name|newpos
operator|!=
name|edit
operator|->
name|text
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|oldpos
operator|==
name|edit
operator|->
name|text
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|pos
operator|=
name|edit
operator|->
name|text
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|suffix
operator|.
name|size
argument_list|()
expr_stmt|;
name|allowSelection
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|=
name|edit
operator|->
name|text
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|int
name|selSize
init|=
name|edit
operator|->
name|selectionStart
argument_list|()
operator|>=
literal|0
operator|&&
name|allowSelection
condition|?
operator|(
name|edit
operator|->
name|selectedText
argument_list|()
operator|.
name|size
argument_list|()
operator|*
operator|(
name|newpos
operator|<
name|pos
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
operator|)
operator|-
name|newpos
operator|+
name|pos
else|:
literal|0
decl_stmt|;
specifier|const
name|bool
name|wasBlocked
init|=
name|edit
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|selSize
operator|!=
literal|0
condition|)
block|{
name|edit
operator|->
name|setSelection
argument_list|(
name|pos
operator|-
name|selSize
argument_list|,
name|selSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|edit
operator|->
name|setCursorPosition
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
name|edit
operator|->
name|blockSignals
argument_list|(
name|wasBlocked
argument_list|)
expr_stmt|;
block|}
name|ignoreCursorPositionChanged
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      Initialises the QAbstractSpinBoxPrivate object. */
end_comment
begin_function
DECL|function|init
name|void
name|QAbstractSpinBoxPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|q
operator|->
name|setLineEdit
argument_list|(
operator|new
name|QLineEdit
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|edit
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_spinbox_lineedit"
argument_list|)
argument_list|)
expr_stmt|;
name|validator
operator|=
operator|new
name|QSpinBoxValidator
argument_list|(
name|q
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|edit
operator|->
name|setValidator
argument_list|(
name|validator
argument_list|)
expr_stmt|;
name|QStyleOptionSpinBox
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|spinClickTimerInterval
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_SpinBox_ClickAutoRepeatRate
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|spinClickThresholdTimerInterval
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_SpinBox_ClickAutoRepeatThreshold
argument_list|,
operator|&
name|opt
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|WheelFocus
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|SpinBox
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_MacShowFocusRect
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Resets the state of the spinbox. E.g. the state is set to     (Keyboard|Up) if Key up is currently pressed. */
end_comment
begin_function
DECL|function|reset
name|void
name|QAbstractSpinBoxPrivate
operator|::
name|reset
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|buttonState
operator|=
name|None
expr_stmt|;
if|if
condition|(
name|q
condition|)
block|{
if|if
condition|(
name|spinClickTimerId
operator|!=
operator|-
literal|1
condition|)
name|q
operator|->
name|killTimer
argument_list|(
name|spinClickTimerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|spinClickThresholdTimerId
operator|!=
operator|-
literal|1
condition|)
name|q
operator|->
name|killTimer
argument_list|(
name|spinClickThresholdTimerId
argument_list|)
expr_stmt|;
name|spinClickTimerId
operator|=
name|spinClickThresholdTimerId
operator|=
operator|-
literal|1
expr_stmt|;
name|acceleration
operator|=
literal|0
expr_stmt|;
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      Updates the state of the spinbox. */
end_comment
begin_function
DECL|function|updateState
name|void
name|QAbstractSpinBoxPrivate
operator|::
name|updateState
parameter_list|(
name|bool
name|up
parameter_list|,
name|bool
name|fromKeyboard
comment|/* = false */
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|up
operator|&&
operator|(
name|buttonState
operator|&
name|Up
operator|)
operator|)
operator|||
operator|(
operator|!
name|up
operator|&&
operator|(
name|buttonState
operator|&
name|Down
operator|)
operator|)
condition|)
return|return;
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|q
operator|&&
operator|(
name|q
operator|->
name|stepEnabled
argument_list|()
operator|&
operator|(
name|up
condition|?
name|QAbstractSpinBox
operator|::
name|StepUpEnabled
else|:
name|QAbstractSpinBox
operator|::
name|StepDownEnabled
operator|)
operator|)
condition|)
block|{
name|spinClickThresholdTimerId
operator|=
name|q
operator|->
name|startTimer
argument_list|(
name|spinClickThresholdTimerInterval
argument_list|)
expr_stmt|;
name|buttonState
operator|=
operator|(
name|up
condition|?
name|Up
else|:
name|Down
operator|)
operator||
operator|(
name|fromKeyboard
condition|?
name|Keyboard
else|:
name|Mouse
operator|)
expr_stmt|;
name|q
operator|->
name|stepBy
argument_list|(
name|up
condition|?
literal|1
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
name|QAccessibleValueChangeEvent
name|event
argument_list|(
name|q
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
operator|&
name|event
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_comment
comment|/*!     Initialize \a option with the values from this QSpinBox. This method     is useful for subclasses when they need a QStyleOptionSpinBox, but don't want     to fill in all the information themselves.      \sa QStyleOption::initFrom() */
end_comment
begin_function
DECL|function|initStyleOption
name|void
name|QAbstractSpinBox
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionSpinBox
modifier|*
name|option
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|option
condition|)
return|return;
name|Q_D
argument_list|(
specifier|const
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|option
operator|->
name|initFrom
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|option
operator|->
name|activeSubControls
operator|=
name|QStyle
operator|::
name|SC_None
expr_stmt|;
name|option
operator|->
name|buttonSymbols
operator|=
name|d
operator|->
name|buttonSymbols
expr_stmt|;
name|option
operator|->
name|subControls
operator|=
name|QStyle
operator|::
name|SC_SpinBoxFrame
operator||
name|QStyle
operator|::
name|SC_SpinBoxEditField
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|buttonSymbols
operator|!=
name|QAbstractSpinBox
operator|::
name|NoButtons
condition|)
block|{
name|option
operator|->
name|subControls
operator||=
name|QStyle
operator|::
name|SC_SpinBoxUp
operator||
name|QStyle
operator|::
name|SC_SpinBoxDown
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|buttonState
operator|&
name|Up
condition|)
block|{
name|option
operator|->
name|activeSubControls
operator|=
name|QStyle
operator|::
name|SC_SpinBoxUp
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|buttonState
operator|&
name|Down
condition|)
block|{
name|option
operator|->
name|activeSubControls
operator|=
name|QStyle
operator|::
name|SC_SpinBoxDown
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|buttonState
condition|)
block|{
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
block|}
else|else
block|{
name|option
operator|->
name|activeSubControls
operator|=
name|d
operator|->
name|hoverControl
expr_stmt|;
block|}
name|option
operator|->
name|stepEnabled
operator|=
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_SpinControls_DisableOnBounds
argument_list|)
condition|?
name|stepEnabled
argument_list|()
else|:
operator|(
name|QAbstractSpinBox
operator|::
name|StepDownEnabled
operator||
name|QAbstractSpinBox
operator|::
name|StepUpEnabled
operator|)
expr_stmt|;
name|option
operator|->
name|frame
operator|=
name|d
operator|->
name|frame
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Bounds \a val to be within minimum and maximum. Also tries to be     clever about setting it at min and max depending on what it was     and what direction it was changed etc. */
end_comment
begin_function
DECL|function|bound
name|QVariant
name|QAbstractSpinBoxPrivate
operator|::
name|bound
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|val
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|old
parameter_list|,
name|int
name|steps
parameter_list|)
specifier|const
block|{
name|QVariant
name|v
init|=
name|val
decl_stmt|;
if|if
condition|(
operator|!
name|wrapping
operator|||
name|steps
operator|==
literal|0
operator|||
name|old
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|variantCompare
argument_list|(
name|v
argument_list|,
name|minimum
argument_list|)
operator|<
literal|0
condition|)
block|{
name|v
operator|=
name|wrapping
condition|?
name|maximum
else|:
name|minimum
expr_stmt|;
block|}
if|if
condition|(
name|variantCompare
argument_list|(
name|v
argument_list|,
name|maximum
argument_list|)
operator|>
literal|0
condition|)
block|{
name|v
operator|=
name|wrapping
condition|?
name|minimum
else|:
name|maximum
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|bool
name|wasMin
init|=
name|old
operator|==
name|minimum
decl_stmt|;
specifier|const
name|bool
name|wasMax
init|=
name|old
operator|==
name|maximum
decl_stmt|;
specifier|const
name|int
name|oldcmp
init|=
name|variantCompare
argument_list|(
name|v
argument_list|,
name|old
argument_list|)
decl_stmt|;
specifier|const
name|int
name|maxcmp
init|=
name|variantCompare
argument_list|(
name|v
argument_list|,
name|maximum
argument_list|)
decl_stmt|;
specifier|const
name|int
name|mincmp
init|=
name|variantCompare
argument_list|(
name|v
argument_list|,
name|minimum
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|wrapped
init|=
operator|(
name|oldcmp
operator|>
literal|0
operator|&&
name|steps
operator|<
literal|0
operator|)
operator|||
operator|(
name|oldcmp
argument_list|<
literal|0
operator|&&
name|steps
argument_list|>
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|maxcmp
operator|>
literal|0
condition|)
block|{
name|v
operator|=
operator|(
operator|(
name|wasMax
operator|&&
operator|!
name|wrapped
operator|&&
name|steps
operator|>
literal|0
operator|)
operator|||
operator|(
name|steps
operator|<
literal|0
operator|&&
operator|!
name|wasMin
operator|&&
name|wrapped
operator|)
operator|)
condition|?
name|minimum
else|:
name|maximum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wrapped
operator|&&
operator|(
name|maxcmp
operator|>
literal|0
operator|||
name|mincmp
operator|<
literal|0
operator|)
condition|)
block|{
name|v
operator|=
operator|(
operator|(
name|wasMax
operator|&&
name|steps
operator|>
literal|0
operator|)
operator|||
operator|(
operator|!
name|wasMin
operator|&&
name|steps
operator|<
literal|0
operator|)
operator|)
condition|?
name|minimum
else|:
name|maximum
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mincmp
operator|<
literal|0
condition|)
block|{
name|v
operator|=
operator|(
operator|!
name|wasMax
operator|&&
operator|!
name|wasMin
condition|?
name|minimum
else|:
name|maximum
operator|)
expr_stmt|;
block|}
block|}
return|return
name|v
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Sets the value of the spin box to \a val. Depending on the value     of \a ep it will also emit signals. */
end_comment
begin_function
DECL|function|setValue
name|void
name|QAbstractSpinBoxPrivate
operator|::
name|setValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|val
parameter_list|,
name|EmitPolicy
name|ep
parameter_list|,
name|bool
name|doUpdate
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
specifier|const
name|QVariant
name|old
init|=
name|value
decl_stmt|;
name|value
operator|=
name|bound
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|pendingEmit
operator|=
literal|false
expr_stmt|;
name|cleared
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|doUpdate
condition|)
block|{
name|updateEdit
argument_list|()
expr_stmt|;
block|}
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
if|if
condition|(
name|ep
operator|==
name|AlwaysEmit
operator|||
operator|(
name|ep
operator|==
name|EmitIfChanged
operator|&&
name|old
operator|!=
name|value
operator|)
condition|)
block|{
name|emitSignals
argument_list|(
name|ep
argument_list|,
name|old
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal      Updates the line edit to reflect the current value of the spin box. */
end_comment
begin_function
DECL|function|updateEdit
name|void
name|QAbstractSpinBoxPrivate
operator|::
name|updateEdit
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|QVariant
operator|::
name|Invalid
condition|)
return|return;
specifier|const
name|QString
name|newText
init|=
name|specialValue
argument_list|()
condition|?
name|specialValueText
else|:
name|prefix
operator|+
name|textFromValue
argument_list|(
name|value
argument_list|)
operator|+
name|suffix
decl_stmt|;
if|if
condition|(
name|newText
operator|==
name|edit
operator|->
name|displayText
argument_list|()
operator|||
name|cleared
condition|)
return|return;
specifier|const
name|bool
name|empty
init|=
name|edit
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|int
name|cursor
init|=
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
name|int
name|selsize
init|=
name|edit
operator|->
name|selectedText
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|sb
init|=
name|edit
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|edit
operator|->
name|setText
argument_list|(
name|newText
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|specialValue
argument_list|()
condition|)
block|{
name|cursor
operator|=
name|qBound
argument_list|(
name|prefix
operator|.
name|size
argument_list|()
argument_list|,
name|cursor
argument_list|,
name|edit
operator|->
name|displayText
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|suffix
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|selsize
operator|>
literal|0
condition|)
block|{
name|edit
operator|->
name|setSelection
argument_list|(
name|cursor
argument_list|,
name|selsize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|edit
operator|->
name|setCursorPosition
argument_list|(
name|empty
condition|?
name|prefix
operator|.
name|size
argument_list|()
else|:
name|cursor
argument_list|)
expr_stmt|;
block|}
block|}
name|edit
operator|->
name|blockSignals
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Convenience function to set min/max values. */
end_comment
begin_function
DECL|function|setRange
name|void
name|QAbstractSpinBoxPrivate
operator|::
name|setRange
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|min
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|max
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
name|clearCache
argument_list|()
expr_stmt|;
name|minimum
operator|=
name|min
expr_stmt|;
name|maximum
operator|=
operator|(
name|variantCompare
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
operator|<
literal|0
condition|?
name|max
else|:
name|min
operator|)
expr_stmt|;
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|cachedMinimumSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
comment|// minimumSizeHint cares about min/max
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|bound
argument_list|(
name|value
argument_list|)
operator|==
name|value
operator|)
condition|)
block|{
name|setValue
argument_list|(
name|bound
argument_list|(
name|value
argument_list|)
argument_list|,
name|EmitIfChanged
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|==
name|minimum
operator|&&
operator|!
name|specialValueText
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updateEdit
argument_list|()
expr_stmt|;
block|}
name|q
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal      Convenience function to get a variant of the right type. */
end_comment
begin_function
DECL|function|getZeroVariant
name|QVariant
name|QAbstractSpinBoxPrivate
operator|::
name|getZeroVariant
parameter_list|()
specifier|const
block|{
name|QVariant
name|ret
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QVariant
operator|::
name|Int
case|:
name|ret
operator|=
name|QVariant
argument_list|(
operator|(
name|int
operator|)
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
name|ret
operator|=
name|QVariant
argument_list|(
operator|(
name|double
operator|)
literal|0.0
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Virtual method called that calls the public textFromValue()     functions in the subclasses. Needed to change signature from     QVariant to int/double/QDateTime etc. Used when needing to display     a value textually.      This method is reimeplemented in the various subclasses. */
end_comment
begin_function
DECL|function|textFromValue
name|QString
name|QAbstractSpinBoxPrivate
operator|::
name|textFromValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Virtual method called that calls the public valueFromText()     functions in the subclasses. Needed to change signature from     QVariant to int/double/QDateTime etc. Used when needing to     interpret a string as another type.      This method is reimeplemented in the various subclasses. */
end_comment
begin_function
DECL|function|valueFromText
name|QVariant
name|QAbstractSpinBoxPrivate
operator|::
name|valueFromText
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Interprets text and emits signals. Called when the spinbox needs     to interpret the text on the lineedit. */
end_comment
begin_function
DECL|function|interpret
name|void
name|QAbstractSpinBoxPrivate
operator|::
name|interpret
parameter_list|(
name|EmitPolicy
name|ep
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QAbstractSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|QVariant
operator|::
name|Invalid
operator|||
name|cleared
condition|)
return|return;
name|QVariant
name|v
init|=
name|getZeroVariant
argument_list|()
decl_stmt|;
name|bool
name|doInterpret
init|=
literal|true
decl_stmt|;
name|QString
name|tmp
init|=
name|edit
operator|->
name|displayText
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
specifier|const
name|int
name|oldpos
init|=
name|pos
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|validate
argument_list|(
name|tmp
argument_list|,
name|pos
argument_list|)
operator|!=
name|QValidator
operator|::
name|Acceptable
condition|)
block|{
specifier|const
name|QString
name|copy
init|=
name|tmp
decl_stmt|;
name|q
operator|->
name|fixup
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|QASBDEBUG
argument_list|()
operator|<<
literal|"QAbstractSpinBoxPrivate::interpret() text '"
operator|<<
name|edit
operator|->
name|displayText
argument_list|()
operator|<<
literal|"'>> '"
operator|<<
name|copy
operator|<<
literal|'\''
operator|<<
literal|"'>> '"
operator|<<
name|tmp
operator|<<
literal|'\''
expr_stmt|;
name|doInterpret
operator|=
name|tmp
operator|!=
name|copy
operator|&&
operator|(
name|q
operator|->
name|validate
argument_list|(
name|tmp
argument_list|,
name|pos
argument_list|)
operator|==
name|QValidator
operator|::
name|Acceptable
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|doInterpret
condition|)
block|{
name|v
operator|=
operator|(
name|correctionMode
operator|==
name|QAbstractSpinBox
operator|::
name|CorrectToNearestValue
condition|?
name|variantBound
argument_list|(
name|minimum
argument_list|,
name|v
argument_list|,
name|maximum
argument_list|)
else|:
name|value
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doInterpret
condition|)
block|{
name|v
operator|=
name|valueFromText
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|clearCache
argument_list|()
expr_stmt|;
name|setValue
argument_list|(
name|v
argument_list|,
name|ep
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldpos
operator|!=
name|pos
condition|)
name|edit
operator|->
name|setCursorPosition
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearCache
name|void
name|QAbstractSpinBoxPrivate
operator|::
name|clearCache
parameter_list|()
specifier|const
block|{
name|cachedText
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cachedValue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cachedState
operator|=
name|QValidator
operator|::
name|Acceptable
expr_stmt|;
block|}
end_function
begin_comment
comment|// --- QSpinBoxValidator ---
end_comment
begin_comment
comment|/*!     \internal     Constructs a QSpinBoxValidator object */
end_comment
begin_constructor
DECL|function|QSpinBoxValidator
name|QSpinBoxValidator
operator|::
name|QSpinBoxValidator
parameter_list|(
name|QAbstractSpinBox
modifier|*
name|qp
parameter_list|,
name|QAbstractSpinBoxPrivate
modifier|*
name|dp
parameter_list|)
member_init_list|:
name|QValidator
argument_list|(
name|qp
argument_list|)
member_init_list|,
name|qptr
argument_list|(
name|qp
argument_list|)
member_init_list|,
name|dptr
argument_list|(
name|dp
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_spinboxvalidator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal      Checks for specialValueText, prefix, suffix and calls     the virtual QAbstractSpinBox::validate function. */
end_comment
begin_function
DECL|function|validate
name|QValidator
operator|::
name|State
name|QSpinBoxValidator
operator|::
name|validate
parameter_list|(
name|QString
modifier|&
name|input
parameter_list|,
name|int
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|dptr
operator|->
name|specialValueText
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|input
operator|==
name|dptr
operator|->
name|specialValueText
condition|)
return|return
name|QValidator
operator|::
name|Acceptable
return|;
if|if
condition|(
operator|!
name|dptr
operator|->
name|prefix
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|input
operator|.
name|startsWith
argument_list|(
name|dptr
operator|->
name|prefix
argument_list|)
condition|)
block|{
name|input
operator|.
name|prepend
argument_list|(
name|dptr
operator|->
name|prefix
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|dptr
operator|->
name|prefix
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dptr
operator|->
name|suffix
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|input
operator|.
name|endsWith
argument_list|(
name|dptr
operator|->
name|suffix
argument_list|)
condition|)
name|input
operator|.
name|append
argument_list|(
name|dptr
operator|->
name|suffix
argument_list|)
expr_stmt|;
return|return
name|qptr
operator|->
name|validate
argument_list|(
name|input
argument_list|,
name|pos
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Calls the virtual QAbstractSpinBox::fixup function. */
end_comment
begin_function
DECL|function|fixup
name|void
name|QSpinBoxValidator
operator|::
name|fixup
parameter_list|(
name|QString
modifier|&
name|input
parameter_list|)
specifier|const
block|{
name|qptr
operator|->
name|fixup
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// --- global ---
end_comment
begin_comment
comment|/*!     \internal     Adds two variants together and returns the result. */
end_comment
begin_function
DECL|function|operator +
name|QVariant
name|operator
name|+
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|arg1
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|arg2
parameter_list|)
block|{
name|QVariant
name|ret
decl_stmt|;
if|if
condition|(
name|arg1
operator|.
name|type
argument_list|()
operator|!=
name|arg2
operator|.
name|type
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"QAbstractSpinBox: Internal error: Different types (%s vs %s) (%s:%d)"
argument_list|,
name|arg1
operator|.
name|typeName
argument_list|()
argument_list|,
name|arg2
operator|.
name|typeName
argument_list|()
argument_list|,
name|__FILE__
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|arg1
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Int
case|:
block|{
specifier|const
name|int
name|int1
init|=
name|arg1
operator|.
name|toInt
argument_list|()
decl_stmt|;
specifier|const
name|int
name|int2
init|=
name|arg2
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|int1
operator|>
literal|0
operator|&&
operator|(
name|int2
operator|>=
name|INT_MAX
operator|-
name|int1
operator|)
condition|)
block|{
comment|// The increment overflows
name|ret
operator|=
name|QVariant
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|int1
operator|<
literal|0
operator|&&
operator|(
name|int2
operator|<=
name|INT_MIN
operator|-
name|int1
operator|)
condition|)
block|{
comment|// The increment underflows
name|ret
operator|=
name|QVariant
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|QVariant
argument_list|(
name|int1
operator|+
name|int2
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QVariant
operator|::
name|Double
case|:
name|ret
operator|=
name|QVariant
argument_list|(
name|arg1
operator|.
name|toDouble
argument_list|()
operator|+
name|arg2
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|DateTime
case|:
block|{
name|QDateTime
name|a2
init|=
name|arg2
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
name|QDateTime
name|a1
init|=
name|arg1
operator|.
name|toDateTime
argument_list|()
operator|.
name|addDays
argument_list|(
name|QDATETIMEEDIT_DATETIME_MIN
operator|.
name|daysTo
argument_list|(
name|a2
argument_list|)
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setTime
argument_list|(
name|a1
operator|.
name|time
argument_list|()
operator|.
name|addMSecs
argument_list|(
name|QTime
argument_list|()
operator|.
name|msecsTo
argument_list|(
name|a2
operator|.
name|time
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|QVariant
argument_list|(
name|a1
argument_list|)
expr_stmt|;
block|}
default|default:
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Subtracts two variants and returns the result. */
end_comment
begin_function
DECL|function|operator -
name|QVariant
name|operator
name|-
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|arg1
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|arg2
parameter_list|)
block|{
name|QVariant
name|ret
decl_stmt|;
if|if
condition|(
name|arg1
operator|.
name|type
argument_list|()
operator|!=
name|arg2
operator|.
name|type
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"QAbstractSpinBox: Internal error: Different types (%s vs %s) (%s:%d)"
argument_list|,
name|arg1
operator|.
name|typeName
argument_list|()
argument_list|,
name|arg2
operator|.
name|typeName
argument_list|()
argument_list|,
name|__FILE__
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|arg1
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Int
case|:
name|ret
operator|=
name|QVariant
argument_list|(
name|arg1
operator|.
name|toInt
argument_list|()
operator|-
name|arg2
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
name|ret
operator|=
name|QVariant
argument_list|(
name|arg1
operator|.
name|toDouble
argument_list|()
operator|-
name|arg2
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|DateTime
case|:
block|{
name|QDateTime
name|a1
init|=
name|arg1
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
name|QDateTime
name|a2
init|=
name|arg2
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
name|int
name|days
init|=
name|a2
operator|.
name|daysTo
argument_list|(
name|a1
argument_list|)
decl_stmt|;
name|int
name|secs
init|=
name|a2
operator|.
name|secsTo
argument_list|(
name|a1
argument_list|)
decl_stmt|;
name|int
name|msecs
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|a1
operator|.
name|time
argument_list|()
operator|.
name|msec
argument_list|()
operator|-
name|a2
operator|.
name|time
argument_list|()
operator|.
name|msec
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|days
operator|<
literal|0
operator|||
name|secs
operator|<
literal|0
operator|||
name|msecs
operator|<
literal|0
condition|)
block|{
name|ret
operator|=
name|arg1
expr_stmt|;
block|}
else|else
block|{
name|QDateTime
name|dt
init|=
name|a2
operator|.
name|addDays
argument_list|(
name|days
argument_list|)
operator|.
name|addSecs
argument_list|(
name|secs
argument_list|)
decl_stmt|;
if|if
condition|(
name|msecs
operator|>
literal|0
condition|)
name|dt
operator|.
name|setTime
argument_list|(
name|dt
operator|.
name|time
argument_list|()
operator|.
name|addMSecs
argument_list|(
name|msecs
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|QVariant
argument_list|(
name|dt
argument_list|)
expr_stmt|;
block|}
block|}
default|default:
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Multiplies \a arg1 by \a multiplier and returns the result. */
end_comment
begin_function
DECL|function|operator *
name|QVariant
name|operator
name|*
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|arg1
parameter_list|,
name|double
name|multiplier
parameter_list|)
block|{
name|QVariant
name|ret
decl_stmt|;
switch|switch
condition|(
name|arg1
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Int
case|:
name|ret
operator|=
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|qBound
argument_list|<
name|double
argument_list|>
argument_list|(
name|INT_MIN
argument_list|,
name|arg1
operator|.
name|toInt
argument_list|()
operator|*
name|multiplier
argument_list|,
name|INT_MAX
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
name|ret
operator|=
name|QVariant
argument_list|(
name|arg1
operator|.
name|toDouble
argument_list|()
operator|*
name|multiplier
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|DateTime
case|:
block|{
name|double
name|days
init|=
name|QDATETIMEEDIT_DATE_MIN
operator|.
name|daysTo
argument_list|(
name|arg1
operator|.
name|toDateTime
argument_list|()
operator|.
name|date
argument_list|()
argument_list|)
operator|*
name|multiplier
decl_stmt|;
name|int
name|daysInt
init|=
operator|(
name|int
operator|)
name|days
decl_stmt|;
name|days
operator|-=
name|daysInt
expr_stmt|;
name|long
name|msecs
init|=
call|(
name|long
call|)
argument_list|(
operator|(
name|QDATETIMEEDIT_TIME_MIN
operator|.
name|msecsTo
argument_list|(
name|arg1
operator|.
name|toDateTime
argument_list|()
operator|.
name|time
argument_list|()
argument_list|)
operator|*
name|multiplier
operator|)
operator|+
operator|(
name|days
operator|*
operator|(
literal|24
operator|*
literal|3600
operator|*
literal|1000
operator|)
operator|)
argument_list|)
decl_stmt|;
name|ret
operator|=
name|QDateTime
argument_list|(
name|QDate
argument_list|()
operator|.
name|addDays
argument_list|(
name|int
argument_list|(
name|days
argument_list|)
argument_list|)
argument_list|,
name|QTime
argument_list|()
operator|.
name|addMSecs
argument_list|(
name|msecs
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|ret
operator|=
name|arg1
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|operator /
name|double
name|operator
name|/
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|arg1
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|arg2
parameter_list|)
block|{
name|double
name|a1
init|=
literal|0
decl_stmt|;
name|double
name|a2
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|arg1
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Int
case|:
name|a1
operator|=
operator|(
name|double
operator|)
name|arg1
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|a2
operator|=
operator|(
name|double
operator|)
name|arg2
operator|.
name|toInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
name|a1
operator|=
name|arg1
operator|.
name|toDouble
argument_list|()
expr_stmt|;
name|a2
operator|=
name|arg2
operator|.
name|toDouble
argument_list|()
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|DateTime
case|:
name|a1
operator|=
name|QDATETIMEEDIT_DATE_MIN
operator|.
name|daysTo
argument_list|(
name|arg1
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|a2
operator|=
name|QDATETIMEEDIT_DATE_MIN
operator|.
name|daysTo
argument_list|(
name|arg2
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|a1
operator|+=
operator|(
name|double
operator|)
name|QDATETIMEEDIT_TIME_MIN
operator|.
name|msecsTo
argument_list|(
name|arg1
operator|.
name|toDateTime
argument_list|()
operator|.
name|time
argument_list|()
argument_list|)
operator|/
call|(
name|long
call|)
argument_list|(
literal|3600
operator|*
literal|24
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|a2
operator|+=
operator|(
name|double
operator|)
name|QDATETIMEEDIT_TIME_MIN
operator|.
name|msecsTo
argument_list|(
name|arg2
operator|.
name|toDateTime
argument_list|()
operator|.
name|time
argument_list|()
argument_list|)
operator|/
call|(
name|long
call|)
argument_list|(
literal|3600
operator|*
literal|24
operator|*
literal|1000
argument_list|)
expr_stmt|;
default|default:
break|break;
block|}
return|return
operator|(
name|a1
operator|!=
literal|0
operator|&&
name|a2
operator|!=
literal|0
operator|)
condition|?
operator|(
name|a1
operator|/
name|a2
operator|)
else|:
literal|0.0
return|;
block|}
end_function
begin_function
DECL|function|variantCompare
name|int
name|QAbstractSpinBoxPrivate
operator|::
name|variantCompare
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|arg1
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|arg2
parameter_list|)
block|{
switch|switch
condition|(
name|arg2
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Date
case|:
name|Q_ASSERT_X
argument_list|(
name|arg1
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Date
argument_list|,
literal|"QAbstractSpinBoxPrivate::variantCompare"
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Internal error 1 (%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|arg1
operator|.
name|typeName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|arg1
operator|.
name|toDate
argument_list|()
operator|==
name|arg2
operator|.
name|toDate
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|arg1
operator|.
name|toDate
argument_list|()
operator|<
name|arg2
operator|.
name|toDate
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
case|case
name|QVariant
operator|::
name|Time
case|:
name|Q_ASSERT_X
argument_list|(
name|arg1
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Time
argument_list|,
literal|"QAbstractSpinBoxPrivate::variantCompare"
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Internal error 2 (%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|arg1
operator|.
name|typeName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|arg1
operator|.
name|toTime
argument_list|()
operator|==
name|arg2
operator|.
name|toTime
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|arg1
operator|.
name|toTime
argument_list|()
operator|<
name|arg2
operator|.
name|toTime
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
case|case
name|QVariant
operator|::
name|DateTime
case|:
if|if
condition|(
name|arg1
operator|.
name|toDateTime
argument_list|()
operator|==
name|arg2
operator|.
name|toDateTime
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|arg1
operator|.
name|toDateTime
argument_list|()
operator|<
name|arg2
operator|.
name|toDateTime
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
case|case
name|QVariant
operator|::
name|Int
case|:
if|if
condition|(
name|arg1
operator|.
name|toInt
argument_list|()
operator|==
name|arg2
operator|.
name|toInt
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|arg1
operator|.
name|toInt
argument_list|()
operator|<
name|arg2
operator|.
name|toInt
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
case|case
name|QVariant
operator|::
name|Double
case|:
if|if
condition|(
name|arg1
operator|.
name|toDouble
argument_list|()
operator|==
name|arg2
operator|.
name|toDouble
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|arg1
operator|.
name|toDouble
argument_list|()
operator|<
name|arg2
operator|.
name|toDouble
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
case|case
name|QVariant
operator|::
name|Invalid
case|:
if|if
condition|(
name|arg2
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Invalid
condition|)
return|return
literal|0
return|;
default|default:
name|Q_ASSERT_X
argument_list|(
literal|0
argument_list|,
literal|"QAbstractSpinBoxPrivate::variantCompare"
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Internal error 3 (%1 %2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|arg1
operator|.
name|typeName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|arg2
operator|.
name|typeName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|2
return|;
block|}
end_function
begin_function
DECL|function|variantBound
name|QVariant
name|QAbstractSpinBoxPrivate
operator|::
name|variantBound
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|min
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|max
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|variantCompare
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
operator|<=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|variantCompare
argument_list|(
name|min
argument_list|,
name|value
argument_list|)
operator|<
literal|0
condition|)
block|{
specifier|const
name|int
name|compMax
init|=
name|variantCompare
argument_list|(
name|value
argument_list|,
name|max
argument_list|)
decl_stmt|;
return|return
operator|(
name|compMax
operator|<
literal|0
condition|?
name|value
else|:
name|max
operator|)
return|;
block|}
else|else
block|{
return|return
name|min
return|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qabstractspinbox.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SPINBOX
end_comment
end_unit
