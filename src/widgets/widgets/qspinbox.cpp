begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<private/qabstractspinbox_p.h>
end_include
begin_include
include|#
directive|include
file|<qspinbox.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SPINBOX
end_ifndef
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<qlocale.h>
end_include
begin_include
include|#
directive|include
file|<qvalidator.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|<float.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|//#define QSPINBOX_QSBDEBUG
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QSPINBOX_QSBDEBUG
end_ifdef
begin_define
DECL|macro|QSBDEBUG
define|#
directive|define
name|QSBDEBUG
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
define|#
directive|define
name|QSBDEBUG
value|if (false) qDebug
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|QSpinBoxPrivate
class|class
name|QSpinBoxPrivate
super|:
specifier|public
name|QAbstractSpinBoxPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QSpinBox
parameter_list|)
specifier|public
private|:
name|QSpinBoxPrivate
parameter_list|()
constructor_decl|;
name|void
name|emitSignals
parameter_list|(
name|EmitPolicy
name|ep
parameter_list|,
specifier|const
name|QVariant
modifier|&
parameter_list|)
function_decl|;
specifier|virtual
name|QVariant
name|valueFromText
parameter_list|(
specifier|const
name|QString
modifier|&
name|n
parameter_list|)
specifier|const
function_decl|;
specifier|virtual
name|QString
name|textFromValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|n
parameter_list|)
specifier|const
function_decl|;
name|QVariant
name|validateAndInterpret
parameter_list|(
name|QString
modifier|&
name|input
parameter_list|,
name|int
modifier|&
name|pos
parameter_list|,
name|QValidator
operator|::
name|State
modifier|&
name|state
parameter_list|)
specifier|const
function_decl|;
DECL|function|init
specifier|inline
name|void
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QSpinBox
argument_list|)
expr_stmt|;
name|q
operator|->
name|setInputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhDigitsOnly
argument_list|)
expr_stmt|;
name|setLayoutItemMargins
argument_list|(
name|QStyle
operator|::
name|SE_SpinBoxLayoutItem
argument_list|)
expr_stmt|;
block|}
DECL|member|displayIntegerBase
name|int
name|displayIntegerBase
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QDoubleSpinBoxPrivate
class|class
name|QDoubleSpinBoxPrivate
super|:
specifier|public
name|QAbstractSpinBoxPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QDoubleSpinBox
parameter_list|)
specifier|public
private|:
name|QDoubleSpinBoxPrivate
parameter_list|()
constructor_decl|;
name|void
name|emitSignals
parameter_list|(
name|EmitPolicy
name|ep
parameter_list|,
specifier|const
name|QVariant
modifier|&
parameter_list|)
function_decl|;
specifier|virtual
name|QVariant
name|valueFromText
parameter_list|(
specifier|const
name|QString
modifier|&
name|n
parameter_list|)
specifier|const
function_decl|;
specifier|virtual
name|QString
name|textFromValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|n
parameter_list|)
specifier|const
function_decl|;
name|QVariant
name|validateAndInterpret
parameter_list|(
name|QString
modifier|&
name|input
parameter_list|,
name|int
modifier|&
name|pos
parameter_list|,
name|QValidator
operator|::
name|State
modifier|&
name|state
parameter_list|)
specifier|const
function_decl|;
name|double
name|round
parameter_list|(
name|double
name|input
parameter_list|)
specifier|const
function_decl|;
comment|// variables
DECL|member|decimals
name|int
name|decimals
decl_stmt|;
DECL|function|init
specifier|inline
name|void
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
name|q
operator|->
name|setInputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhFormattedNumbersOnly
argument_list|)
expr_stmt|;
block|}
comment|// When fiddling with the decimals property, we may lose precision in these properties.
DECL|member|actualMin
name|double
name|actualMin
decl_stmt|;
DECL|member|actualMax
name|double
name|actualMax
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     \class QSpinBox     \brief The QSpinBox class provides a spin box widget.      \ingroup basicwidgets     \inmodule QtWidgets      QSpinBox is designed to handle integers and discrete sets of     values (e.g., month names); use QDoubleSpinBox for floating point     values.      QSpinBox allows the user to choose a value by clicking the up/down     buttons or pressing up/down on the keyboard to increase/decrease     the value currently displayed. The user can also type the value in     manually. The spin box supports integer values but can be extended to     use different strings with validate(), textFromValue() and valueFromText().      Every time the value changes QSpinBox emits two valueChanged() signals,     one providing an int and the other a QString. The QString overload     provides the value with both prefix() and suffix().     The current value can be fetched with value() and set with setValue().      Clicking the up/down buttons or using the keyboard accelerator's     up and down arrows will increase or decrease the current value in     steps of size singleStep(). If you want to change this behaviour you     can reimplement the virtual function stepBy(). The minimum and     maximum value and the step size can be set using one of the     constructors, and can be changed later with setMinimum(),     setMaximum() and setSingleStep().      Most spin boxes are directional, but QSpinBox can also operate as     a circular spin box, i.e. if the range is 0-99 and the current     value is 99, clicking "up" will give 0 if wrapping() is set to     true. Use setWrapping() if you want circular behavior.      The displayed value can be prepended and appended with arbitrary     strings indicating, for example, currency or the unit of     measurement. See setPrefix() and setSuffix(). The text in the spin     box is retrieved with text() (which includes any prefix() and     suffix()), or with cleanText() (which has no prefix(), no suffix()     and no leading or trailing whitespace).      It is often desirable to give the user a special (often default)     choice in addition to the range of numeric values. See     setSpecialValueText() for how to do this with QSpinBox.      \table 100%     \row \li \inlineimage windowsvista-spinbox.png Screenshot of a Windows Vista spin box          \li A spin box shown in the \l{Windows Vista Style Widget Gallery}{Windows Vista widget style}.     \row \li \inlineimage fusion-spinbox.png Screenshot of a Fusion spin box          \li A spin box shown in the \l{Fusion Style Widget Gallery}{Fusion widget style}.     \row \li \inlineimage macintosh-spinbox.png Screenshot of a Macintosh spin box          \li A spin box shown in the \l{Macintosh Style Widget Gallery}{Macintosh widget style}.     \endtable      \section1 Subclassing QSpinBox      If using prefix(), suffix(), and specialValueText() don't provide     enough control, you subclass QSpinBox and reimplement     valueFromText() and textFromValue(). For example, here's the code     for a custom spin box that allows the user to enter icon sizes     (e.g., "32 x 32"):      \snippet widgets/icons/iconsizespinbox.cpp 1     \codeline     \snippet widgets/icons/iconsizespinbox.cpp 2      See the \l{widgets/icons}{Icons} example for the full source     code.      \sa QDoubleSpinBox, QDateTimeEdit, QSlider, {Spin Boxes Example} */
end_comment
begin_comment
comment|/*!     \fn void QSpinBox::valueChanged(int i)      This signal is emitted whenever the spin box's value is changed.     The new value's integer value is passed in \a i. */
end_comment
begin_comment
comment|/*!     \fn void QSpinBox::valueChanged(const QString&text)      \overload      The new value is passed in \a text with prefix() and suffix(). */
end_comment
begin_comment
comment|/*!     Constructs a spin box with 0 as minimum value and 99 as maximum value, a     step value of 1. The value is initially set to 0. It is parented to \a     parent.      \sa setMinimum(), setMaximum(), setSingleStep() */
end_comment
begin_constructor
DECL|function|QSpinBox
name|QSpinBox
operator|::
name|QSpinBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractSpinBox
argument_list|(
operator|*
operator|new
name|QSpinBoxPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destructor. */
end_comment
begin_destructor
DECL|function|~QSpinBox
name|QSpinBox
operator|::
name|~
name|QSpinBox
parameter_list|()
block|{}
end_destructor
begin_comment
comment|/*!     \property QSpinBox::value     \brief the value of the spin box      setValue() will emit valueChanged() if the new value is different     from the old one. The value property has a second notifier     signal which includes the spin box's prefix and suffix. */
end_comment
begin_function
DECL|function|value
name|int
name|QSpinBox
operator|::
name|value
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|value
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setValue
name|void
name|QSpinBox
operator|::
name|setValue
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|setValue
argument_list|(
name|QVariant
argument_list|(
name|value
argument_list|)
argument_list|,
name|EmitIfChanged
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QSpinBox::prefix     \brief the spin box's prefix      The prefix is prepended to the start of the displayed value.     Typical use is to display a unit of measurement or a currency     symbol. For example:      \snippet code/src_gui_widgets_qspinbox.cpp 0      To turn off the prefix display, set this property to an empty     string. The default is no prefix. The prefix is not displayed when     value() == minimum() and specialValueText() is set.      If no prefix is set, prefix() returns an empty string.      \sa suffix(), setSuffix(), specialValueText(), setSpecialValueText() */
end_comment
begin_function
DECL|function|prefix
name|QString
name|QSpinBox
operator|::
name|prefix
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|prefix
return|;
block|}
end_function
begin_function
DECL|function|setPrefix
name|void
name|QSpinBox
operator|::
name|setPrefix
parameter_list|(
specifier|const
name|QString
modifier|&
name|prefix
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|prefix
operator|=
name|prefix
expr_stmt|;
name|d
operator|->
name|updateEdit
argument_list|()
expr_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|cachedMinimumSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
comment|// minimumSizeHint cares about the prefix
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QSpinBox::suffix     \brief the suffix of the spin box      The suffix is appended to the end of the displayed value. Typical     use is to display a unit of measurement or a currency symbol. For     example:      \snippet code/src_gui_widgets_qspinbox.cpp 1      To turn off the suffix display, set this property to an empty     string. The default is no suffix. The suffix is not displayed for     the minimum() if specialValueText() is set.      If no suffix is set, suffix() returns an empty string.      \sa prefix(), setPrefix(), specialValueText(), setSpecialValueText() */
end_comment
begin_function
DECL|function|suffix
name|QString
name|QSpinBox
operator|::
name|suffix
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|suffix
return|;
block|}
end_function
begin_function
DECL|function|setSuffix
name|void
name|QSpinBox
operator|::
name|setSuffix
parameter_list|(
specifier|const
name|QString
modifier|&
name|suffix
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|suffix
operator|=
name|suffix
expr_stmt|;
name|d
operator|->
name|updateEdit
argument_list|()
expr_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QSpinBox::cleanText      \brief the text of the spin box excluding any prefix, suffix,     or leading or trailing whitespace.      \sa text, QSpinBox::prefix, QSpinBox::suffix */
end_comment
begin_function
DECL|function|cleanText
name|QString
name|QSpinBox
operator|::
name|cleanText
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|stripped
argument_list|(
name|d
operator|->
name|edit
operator|->
name|displayText
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QSpinBox::singleStep     \brief the step value      When the user uses the arrows to change the spin box's value the     value will be incremented/decremented by the amount of the     singleStep. The default value is 1. Setting a singleStep value of     less than 0 does nothing. */
end_comment
begin_function
DECL|function|singleStep
name|int
name|QSpinBox
operator|::
name|singleStep
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|singleStep
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setSingleStep
name|void
name|QSpinBox
operator|::
name|setSingleStep
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|>=
literal|0
condition|)
block|{
name|d
operator|->
name|singleStep
operator|=
name|QVariant
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateEdit
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QSpinBox::minimum      \brief the minimum value of the spin box      When setting this property the \l maximum is adjusted     if necessary to ensure that the range remains valid.      The default minimum value is 0.      \sa setRange(), specialValueText */
end_comment
begin_function
DECL|function|minimum
name|int
name|QSpinBox
operator|::
name|minimum
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|minimum
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMinimum
name|void
name|QSpinBox
operator|::
name|setMinimum
parameter_list|(
name|int
name|minimum
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSpinBox
argument_list|)
expr_stmt|;
specifier|const
name|QVariant
name|m
argument_list|(
name|minimum
argument_list|)
decl_stmt|;
name|d
operator|->
name|setRange
argument_list|(
name|m
argument_list|,
operator|(
name|d
operator|->
name|variantCompare
argument_list|(
name|d
operator|->
name|maximum
argument_list|,
name|m
argument_list|)
operator|>
literal|0
condition|?
name|d
operator|->
name|maximum
else|:
name|m
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QSpinBox::maximum      \brief the maximum value of the spin box      When setting this property the minimum is adjusted     if necessary, to ensure that the range remains valid.      The default maximum value is 99.      \sa setRange(), specialValueText  */
end_comment
begin_function
DECL|function|maximum
name|int
name|QSpinBox
operator|::
name|maximum
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|maximum
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMaximum
name|void
name|QSpinBox
operator|::
name|setMaximum
parameter_list|(
name|int
name|maximum
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSpinBox
argument_list|)
expr_stmt|;
specifier|const
name|QVariant
name|m
argument_list|(
name|maximum
argument_list|)
decl_stmt|;
name|d
operator|->
name|setRange
argument_list|(
operator|(
name|d
operator|->
name|variantCompare
argument_list|(
name|d
operator|->
name|minimum
argument_list|,
name|m
argument_list|)
operator|<
literal|0
condition|?
name|d
operator|->
name|minimum
else|:
name|m
operator|)
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Convenience function to set the \a minimum, and \a maximum values     with a single function call.      \snippet code/src_gui_widgets_qspinbox.cpp 2     is equivalent to:     \snippet code/src_gui_widgets_qspinbox.cpp 3      \sa minimum, maximum */
end_comment
begin_function
DECL|function|setRange
name|void
name|QSpinBox
operator|::
name|setRange
parameter_list|(
name|int
name|minimum
parameter_list|,
name|int
name|maximum
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|setRange
argument_list|(
name|QVariant
argument_list|(
name|minimum
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|maximum
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QSpinBox::displayIntegerBase      \brief the base used to display the value of the spin box      The default displayIntegerBase value is 10.      \sa textFromValue(), valueFromText()     \since 5.2 */
end_comment
begin_function
DECL|function|displayIntegerBase
name|int
name|QSpinBox
operator|::
name|displayIntegerBase
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|displayIntegerBase
return|;
block|}
end_function
begin_function
DECL|function|setDisplayIntegerBase
name|void
name|QSpinBox
operator|::
name|setDisplayIntegerBase
parameter_list|(
name|int
name|base
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSpinBox
argument_list|)
expr_stmt|;
comment|// Falls back to base 10 on invalid bases (like QString)
if|if
condition|(
name|base
argument_list|<
literal|2
operator|||
name|base
argument_list|>
literal|36
condition|)
block|{
name|qWarning
argument_list|(
literal|"QSpinBox::setDisplayIntegerBase: Invalid base (%d)"
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|base
operator|=
literal|10
expr_stmt|;
block|}
if|if
condition|(
name|base
operator|!=
name|d
operator|->
name|displayIntegerBase
condition|)
block|{
name|d
operator|->
name|displayIntegerBase
operator|=
name|base
expr_stmt|;
name|d
operator|->
name|updateEdit
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     This virtual function is used by the spin box whenever it needs to     display the given \a value. The default implementation returns a     string containing \a value printed in the standard way using     QWidget::locale().toString(), but with the thousand separator     removed unless setGroupSeparatorShown() is set. Reimplementations may     return anything. (See the example in the detailed description.)      Note: QSpinBox does not call this function for specialValueText()     and that neither prefix() nor suffix() should be included in the     return value.      If you reimplement this, you may also need to reimplement     valueFromText() and validate()      \sa valueFromText(), validate(), QLocale::groupSeparator() */
end_comment
begin_function
DECL|function|textFromValue
name|QString
name|QSpinBox
operator|::
name|textFromValue
parameter_list|(
name|int
name|value
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSpinBox
argument_list|)
expr_stmt|;
name|QString
name|str
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|displayIntegerBase
operator|!=
literal|10
condition|)
block|{
name|str
operator|=
name|QString
operator|::
name|number
argument_list|(
name|qAbs
argument_list|(
name|value
argument_list|)
argument_list|,
name|d
operator|->
name|displayIntegerBase
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|<
literal|0
condition|)
name|str
operator|.
name|prepend
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|str
operator|=
name|locale
argument_list|()
operator|.
name|toString
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|showGroupSeparator
operator|&&
operator|(
name|qAbs
argument_list|(
name|value
argument_list|)
operator|>=
literal|1000
operator|||
name|value
operator|==
name|INT_MIN
operator|)
condition|)
block|{
name|str
operator|.
name|remove
argument_list|(
name|locale
argument_list|()
operator|.
name|groupSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|str
return|;
block|}
end_function
begin_comment
comment|/*!     \fn int QSpinBox::valueFromText(const QString&text) const      This virtual function is used by the spin box whenever it needs to     interpret \a text entered by the user as a value.      Subclasses that need to display spin box values in a non-numeric     way need to reimplement this function.      Note: QSpinBox handles specialValueText() separately; this     function is only concerned with the other values.      \sa textFromValue(), validate() */
end_comment
begin_function
DECL|function|valueFromText
name|int
name|QSpinBox
operator|::
name|valueFromText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSpinBox
argument_list|)
expr_stmt|;
name|QString
name|copy
init|=
name|text
decl_stmt|;
name|int
name|pos
init|=
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
name|QValidator
operator|::
name|State
name|state
init|=
name|QValidator
operator|::
name|Acceptable
decl_stmt|;
return|return
name|d
operator|->
name|validateAndInterpret
argument_list|(
name|copy
argument_list|,
name|pos
argument_list|,
name|state
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|validate
name|QValidator
operator|::
name|State
name|QSpinBox
operator|::
name|validate
parameter_list|(
name|QString
modifier|&
name|text
parameter_list|,
name|int
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QSpinBox
argument_list|)
expr_stmt|;
name|QValidator
operator|::
name|State
name|state
decl_stmt|;
name|d
operator|->
name|validateAndInterpret
argument_list|(
name|text
argument_list|,
name|pos
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|fixup
name|void
name|QSpinBox
operator|::
name|fixup
parameter_list|(
name|QString
modifier|&
name|input
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|isGroupSeparatorShown
argument_list|()
condition|)
name|input
operator|.
name|remove
argument_list|(
name|locale
argument_list|()
operator|.
name|groupSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// --- QDoubleSpinBox ---
end_comment
begin_comment
comment|/*!     \class QDoubleSpinBox     \brief The QDoubleSpinBox class provides a spin box widget that     takes doubles.      \ingroup basicwidgets     \inmodule QtWidgets      QDoubleSpinBox allows the user to choose a value by clicking the     up and down buttons or by pressing Up or Down on the keyboard to     increase or decrease the value currently displayed. The user can     also type the value in manually. The spin box supports double     values but can be extended to use different strings with     validate(), textFromValue() and valueFromText().      Every time the value changes QDoubleSpinBox emits two     valueChanged() signals, one taking providing a double and the other     a QString. The QString overload provides the value with both     prefix() and suffix(). The current value can be fetched with     value() and set with setValue().      Note: QDoubleSpinBox will round numbers so they can be displayed     with the current precision. In a QDoubleSpinBox with decimals set     to 2, calling setValue(2.555) will cause value() to return 2.56.      Clicking the up and down buttons or using the keyboard accelerator's     Up and Down arrows will increase or decrease the current value in     steps of size singleStep(). If you want to change this behavior you     can reimplement the virtual function stepBy(). The minimum and     maximum value and the step size can be set using one of the     constructors, and can be changed later with setMinimum(),     setMaximum() and setSingleStep(). The spinbox has a default     precision of 2 decimal places but this can be changed using     setDecimals().      Most spin boxes are directional, but QDoubleSpinBox can also     operate as a circular spin box, i.e. if the range is 0.0-99.9 and     the current value is 99.9, clicking "up" will give 0 if wrapping()     is set to true. Use setWrapping() if you want circular behavior.      The displayed value can be prepended and appended with arbitrary     strings indicating, for example, currency or the unit of     measurement. See setPrefix() and setSuffix(). The text in the spin     box is retrieved with text() (which includes any prefix() and     suffix()), or with cleanText() (which has no prefix(), no suffix()     and no leading or trailing whitespace).      It is often desirable to give the user a special (often default)     choice in addition to the range of numeric values. See     setSpecialValueText() for how to do this with QDoubleSpinBox.      \sa QSpinBox, QDateTimeEdit, QSlider, {Spin Boxes Example} */
end_comment
begin_comment
comment|/*!     \fn void QDoubleSpinBox::valueChanged(double d);      This signal is emitted whenever the spin box's value is changed.     The new value is passed in \a d. */
end_comment
begin_comment
comment|/*!     \fn void QDoubleSpinBox::valueChanged(const QString&text);      \overload      The new value is passed in \a text with prefix() and suffix(). */
end_comment
begin_comment
comment|/*!     Constructs a spin box with 0.0 as minimum value and 99.99 as maximum value,     a step value of 1.0 and a precision of 2 decimal places. The value is     initially set to 0.00. The spin box has the given \a parent.      \sa setMinimum(), setMaximum(), setSingleStep() */
end_comment
begin_constructor
DECL|function|QDoubleSpinBox
name|QDoubleSpinBox
operator|::
name|QDoubleSpinBox
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractSpinBox
argument_list|(
operator|*
operator|new
name|QDoubleSpinBoxPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destructor. */
end_comment
begin_destructor
DECL|function|~QDoubleSpinBox
name|QDoubleSpinBox
operator|::
name|~
name|QDoubleSpinBox
parameter_list|()
block|{}
end_destructor
begin_comment
comment|/*!     \property QDoubleSpinBox::value     \brief the value of the spin box      setValue() will emit valueChanged() if the new value is different     from the old one. The value property has a second notifier     signal which includes the spin box's prefix and suffix.      Note: The value will be rounded so it can be displayed with the     current setting of decimals.      \sa decimals */
end_comment
begin_function
DECL|function|value
name|double
name|QDoubleSpinBox
operator|::
name|value
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|value
operator|.
name|toDouble
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setValue
name|void
name|QDoubleSpinBox
operator|::
name|setValue
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
name|QVariant
name|v
argument_list|(
name|d
operator|->
name|round
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|setValue
argument_list|(
name|v
argument_list|,
name|EmitIfChanged
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QDoubleSpinBox::prefix     \brief the spin box's prefix      The prefix is prepended to the start of the displayed value.     Typical use is to display a unit of measurement or a currency     symbol. For example:      \snippet code/src_gui_widgets_qspinbox.cpp 4      To turn off the prefix display, set this property to an empty     string. The default is no prefix. The prefix is not displayed when     value() == minimum() and specialValueText() is set.      If no prefix is set, prefix() returns an empty string.      \sa suffix(), setSuffix(), specialValueText(), setSpecialValueText() */
end_comment
begin_function
DECL|function|prefix
name|QString
name|QDoubleSpinBox
operator|::
name|prefix
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|prefix
return|;
block|}
end_function
begin_function
DECL|function|setPrefix
name|void
name|QDoubleSpinBox
operator|::
name|setPrefix
parameter_list|(
specifier|const
name|QString
modifier|&
name|prefix
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|prefix
operator|=
name|prefix
expr_stmt|;
name|d
operator|->
name|updateEdit
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QDoubleSpinBox::suffix     \brief the suffix of the spin box      The suffix is appended to the end of the displayed value. Typical     use is to display a unit of measurement or a currency symbol. For     example:      \snippet code/src_gui_widgets_qspinbox.cpp 5      To turn off the suffix display, set this property to an empty     string. The default is no suffix. The suffix is not displayed for     the minimum() if specialValueText() is set.      If no suffix is set, suffix() returns an empty string.      \sa prefix(), setPrefix(), specialValueText(), setSpecialValueText() */
end_comment
begin_function
DECL|function|suffix
name|QString
name|QDoubleSpinBox
operator|::
name|suffix
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|suffix
return|;
block|}
end_function
begin_function
DECL|function|setSuffix
name|void
name|QDoubleSpinBox
operator|::
name|setSuffix
parameter_list|(
specifier|const
name|QString
modifier|&
name|suffix
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|suffix
operator|=
name|suffix
expr_stmt|;
name|d
operator|->
name|updateEdit
argument_list|()
expr_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QDoubleSpinBox::cleanText      \brief the text of the spin box excluding any prefix, suffix,     or leading or trailing whitespace.      \sa text, QDoubleSpinBox::prefix, QDoubleSpinBox::suffix */
end_comment
begin_function
DECL|function|cleanText
name|QString
name|QDoubleSpinBox
operator|::
name|cleanText
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|stripped
argument_list|(
name|d
operator|->
name|edit
operator|->
name|displayText
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QDoubleSpinBox::singleStep     \brief the step value      When the user uses the arrows to change the spin box's value the     value will be incremented/decremented by the amount of the     singleStep. The default value is 1.0. Setting a singleStep value     of less than 0 does nothing. */
end_comment
begin_function
DECL|function|singleStep
name|double
name|QDoubleSpinBox
operator|::
name|singleStep
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|singleStep
operator|.
name|toDouble
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setSingleStep
name|void
name|QDoubleSpinBox
operator|::
name|setSingleStep
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|>=
literal|0
condition|)
block|{
name|d
operator|->
name|singleStep
operator|=
name|value
expr_stmt|;
name|d
operator|->
name|updateEdit
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QDoubleSpinBox::minimum      \brief the minimum value of the spin box      When setting this property the \l maximum is adjusted     if necessary to ensure that the range remains valid.      The default minimum value is 0.0.      Note: The minimum value will be rounded to match the decimals     property.      \sa decimals, setRange(), specialValueText */
end_comment
begin_function
DECL|function|minimum
name|double
name|QDoubleSpinBox
operator|::
name|minimum
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|minimum
operator|.
name|toDouble
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMinimum
name|void
name|QDoubleSpinBox
operator|::
name|setMinimum
parameter_list|(
name|double
name|minimum
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|actualMin
operator|=
name|minimum
expr_stmt|;
specifier|const
name|QVariant
name|m
argument_list|(
name|d
operator|->
name|round
argument_list|(
name|minimum
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|setRange
argument_list|(
name|m
argument_list|,
operator|(
name|d
operator|->
name|variantCompare
argument_list|(
name|d
operator|->
name|maximum
argument_list|,
name|m
argument_list|)
operator|>
literal|0
condition|?
name|d
operator|->
name|maximum
else|:
name|m
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QDoubleSpinBox::maximum      \brief the maximum value of the spin box      When setting this property the \l minimum is adjusted     if necessary, to ensure that the range remains valid.      The default maximum value is 99.99.      Note: The maximum value will be rounded to match the decimals     property.      \sa decimals, setRange() */
end_comment
begin_function
DECL|function|maximum
name|double
name|QDoubleSpinBox
operator|::
name|maximum
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|maximum
operator|.
name|toDouble
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setMaximum
name|void
name|QDoubleSpinBox
operator|::
name|setMaximum
parameter_list|(
name|double
name|maximum
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|actualMax
operator|=
name|maximum
expr_stmt|;
specifier|const
name|QVariant
name|m
argument_list|(
name|d
operator|->
name|round
argument_list|(
name|maximum
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|setRange
argument_list|(
operator|(
name|d
operator|->
name|variantCompare
argument_list|(
name|d
operator|->
name|minimum
argument_list|,
name|m
argument_list|)
operator|<
literal|0
condition|?
name|d
operator|->
name|minimum
else|:
name|m
operator|)
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Convenience function to set the \a minimum and \a maximum values     with a single function call.      Note: The maximum and minimum values will be rounded to match the     decimals property.      \snippet code/src_gui_widgets_qspinbox.cpp 6     is equivalent to:     \snippet code/src_gui_widgets_qspinbox.cpp 7      \sa minimum, maximum */
end_comment
begin_function
DECL|function|setRange
name|void
name|QDoubleSpinBox
operator|::
name|setRange
parameter_list|(
name|double
name|minimum
parameter_list|,
name|double
name|maximum
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|actualMin
operator|=
name|minimum
expr_stmt|;
name|d
operator|->
name|actualMax
operator|=
name|maximum
expr_stmt|;
name|d
operator|->
name|setRange
argument_list|(
name|QVariant
argument_list|(
name|d
operator|->
name|round
argument_list|(
name|minimum
argument_list|)
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|d
operator|->
name|round
argument_list|(
name|maximum
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!      \property QDoubleSpinBox::decimals       \brief the precision of the spin box, in decimals       Sets how many decimals the spinbox will use for displaying and      interpreting doubles.       \warning The maximum value for \a decimals is DBL_MAX_10_EXP +      DBL_DIG (ie. 323) because of the limitations of the double type.       Note: The maximum, minimum and value might change as a result of      changing this property. */
end_comment
begin_function
DECL|function|decimals
name|int
name|QDoubleSpinBox
operator|::
name|decimals
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|decimals
return|;
block|}
end_function
begin_function
DECL|function|setDecimals
name|void
name|QDoubleSpinBox
operator|::
name|setDecimals
parameter_list|(
name|int
name|decimals
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
name|d
operator|->
name|decimals
operator|=
name|qBound
argument_list|(
literal|0
argument_list|,
name|decimals
argument_list|,
name|DBL_MAX_10_EXP
operator|+
name|DBL_DIG
argument_list|)
expr_stmt|;
name|setRange
argument_list|(
name|d
operator|->
name|actualMin
argument_list|,
name|d
operator|->
name|actualMax
argument_list|)
expr_stmt|;
comment|// make sure values are rounded
name|setValue
argument_list|(
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This virtual function is used by the spin box whenever it needs to     display the given \a value. The default implementation returns a string     containing \a value printed using QWidget::locale().toString(\a value,     QLatin1Char('f'), decimals()) and will remove the thousand     separator unless setGroupSeparatorShown() is set. Reimplementations may     return anything.      Note: QDoubleSpinBox does not call this function for     specialValueText() and that neither prefix() nor suffix() should     be included in the return value.      If you reimplement this, you may also need to reimplement     valueFromText().      \sa valueFromText(), QLocale::groupSeparator() */
end_comment
begin_function
DECL|function|textFromValue
name|QString
name|QDoubleSpinBox
operator|::
name|textFromValue
parameter_list|(
name|double
name|value
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
name|QString
name|str
init|=
name|locale
argument_list|()
operator|.
name|toString
argument_list|(
name|value
argument_list|,
literal|'f'
argument_list|,
name|d
operator|->
name|decimals
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|showGroupSeparator
operator|&&
name|qAbs
argument_list|(
name|value
argument_list|)
operator|>=
literal|1000.0
condition|)
name|str
operator|.
name|remove
argument_list|(
name|locale
argument_list|()
operator|.
name|groupSeparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_comment
comment|/*!     This virtual function is used by the spin box whenever it needs to     interpret \a text entered by the user as a value.      Subclasses that need to display spin box values in a non-numeric     way need to reimplement this function.      Note: QDoubleSpinBox handles specialValueText() separately; this     function is only concerned with the other values.      \sa textFromValue(), validate() */
end_comment
begin_function
DECL|function|valueFromText
name|double
name|QDoubleSpinBox
operator|::
name|valueFromText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
name|QString
name|copy
init|=
name|text
decl_stmt|;
name|int
name|pos
init|=
name|d
operator|->
name|edit
operator|->
name|cursorPosition
argument_list|()
decl_stmt|;
name|QValidator
operator|::
name|State
name|state
init|=
name|QValidator
operator|::
name|Acceptable
decl_stmt|;
return|return
name|d
operator|->
name|validateAndInterpret
argument_list|(
name|copy
argument_list|,
name|pos
argument_list|,
name|state
argument_list|)
operator|.
name|toDouble
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|validate
name|QValidator
operator|::
name|State
name|QDoubleSpinBox
operator|::
name|validate
parameter_list|(
name|QString
modifier|&
name|text
parameter_list|,
name|int
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
name|QValidator
operator|::
name|State
name|state
decl_stmt|;
name|d
operator|->
name|validateAndInterpret
argument_list|(
name|text
argument_list|,
name|pos
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|fixup
name|void
name|QDoubleSpinBox
operator|::
name|fixup
parameter_list|(
name|QString
modifier|&
name|input
parameter_list|)
specifier|const
block|{
name|input
operator|.
name|remove
argument_list|(
name|locale
argument_list|()
operator|.
name|groupSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// --- QSpinBoxPrivate ---
end_comment
begin_comment
comment|/*!     \internal     Constructs a QSpinBoxPrivate object */
end_comment
begin_constructor
DECL|function|QSpinBoxPrivate
name|QSpinBoxPrivate
operator|::
name|QSpinBoxPrivate
parameter_list|()
block|{
name|minimum
operator|=
name|QVariant
argument_list|(
operator|(
name|int
operator|)
literal|0
argument_list|)
expr_stmt|;
name|maximum
operator|=
name|QVariant
argument_list|(
operator|(
name|int
operator|)
literal|99
argument_list|)
expr_stmt|;
name|value
operator|=
name|minimum
expr_stmt|;
name|displayIntegerBase
operator|=
literal|10
expr_stmt|;
name|singleStep
operator|=
name|QVariant
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|)
expr_stmt|;
name|type
operator|=
name|QVariant
operator|::
name|Int
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal     \reimp */
end_comment
begin_function
DECL|function|emitSignals
name|void
name|QSpinBoxPrivate
operator|::
name|emitSignals
parameter_list|(
name|EmitPolicy
name|ep
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|old
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|ep
operator|!=
name|NeverEmit
condition|)
block|{
name|pendingEmit
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|ep
operator|==
name|AlwaysEmit
operator|||
name|value
operator|!=
name|old
condition|)
block|{
emit|emit
name|q
operator|->
name|valueChanged
argument_list|(
name|edit
operator|->
name|displayText
argument_list|()
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|valueChanged
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
emit|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \internal     \reimp */
end_comment
begin_function
DECL|function|textFromValue
name|QString
name|QSpinBoxPrivate
operator|::
name|textFromValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QSpinBox
argument_list|)
expr_stmt|;
return|return
name|q
operator|->
name|textFromValue
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     \reimp */
end_comment
begin_function
DECL|function|valueFromText
name|QVariant
name|QSpinBoxPrivate
operator|::
name|valueFromText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QSpinBox
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|q
operator|->
name|valueFromText
argument_list|(
name|text
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal Multi purpose function that parses input, sets state to     the appropriate state and returns the value it will be interpreted     as. */
end_comment
begin_function
DECL|function|validateAndInterpret
name|QVariant
name|QSpinBoxPrivate
operator|::
name|validateAndInterpret
parameter_list|(
name|QString
modifier|&
name|input
parameter_list|,
name|int
modifier|&
name|pos
parameter_list|,
name|QValidator
operator|::
name|State
modifier|&
name|state
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|cachedText
operator|==
name|input
operator|&&
operator|!
name|input
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|state
operator|=
name|cachedState
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
literal|"cachedText was '"
operator|<<
name|cachedText
operator|<<
literal|"' state was "
operator|<<
name|state
operator|<<
literal|" and value was "
operator|<<
name|cachedValue
expr_stmt|;
return|return
name|cachedValue
return|;
block|}
specifier|const
name|int
name|max
init|=
name|maximum
operator|.
name|toInt
argument_list|()
decl_stmt|;
specifier|const
name|int
name|min
init|=
name|minimum
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QString
name|copy
init|=
name|stripped
argument_list|(
name|input
argument_list|,
operator|&
name|pos
argument_list|)
decl_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
literal|"input"
operator|<<
name|input
operator|<<
literal|"copy"
operator|<<
name|copy
expr_stmt|;
name|state
operator|=
name|QValidator
operator|::
name|Acceptable
expr_stmt|;
name|int
name|num
init|=
name|min
decl_stmt|;
if|if
condition|(
name|max
operator|!=
name|min
operator|&&
operator|(
name|copy
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|min
operator|<
literal|0
operator|&&
name|copy
operator|==
name|QLatin1String
argument_list|(
literal|"-"
argument_list|)
operator|)
operator|||
operator|(
name|max
operator|>=
literal|0
operator|&&
name|copy
operator|==
name|QLatin1String
argument_list|(
literal|"+"
argument_list|)
operator|)
operator|)
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Intermediate
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"num is set to"
operator|<<
name|num
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|copy
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|)
operator|&&
name|min
operator|>=
literal|0
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
comment|// special-case -0 will be interpreted as 0 and thus not be invalid with a range from 0-100
block|}
else|else
block|{
name|bool
name|ok
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|displayIntegerBase
operator|!=
literal|10
condition|)
block|{
name|num
operator|=
name|copy
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|,
name|displayIntegerBase
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|num
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|copy
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
operator|&&
name|copy
operator|.
name|contains
argument_list|(
name|locale
operator|.
name|groupSeparator
argument_list|()
argument_list|)
operator|&&
operator|(
name|max
operator|>=
literal|1000
operator|||
name|min
operator|<=
operator|-
literal|1000
operator|)
condition|)
block|{
name|QString
name|copy2
init|=
name|copy
decl_stmt|;
name|copy2
operator|.
name|remove
argument_list|(
name|locale
operator|.
name|groupSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|num
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|copy2
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"num is set to"
operator|<<
name|num
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|num
operator|>=
name|min
operator|&&
name|num
operator|<=
name|max
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Acceptable
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|max
operator|==
name|min
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|num
operator|>=
literal|0
operator|&&
name|num
operator|>
name|max
operator|)
operator|||
operator|(
name|num
operator|<
literal|0
operator|&&
name|num
operator|<
name|min
operator|)
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Invalid"
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|QValidator
operator|::
name|Intermediate
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Intermediate"
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|state
operator|!=
name|QValidator
operator|::
name|Acceptable
condition|)
name|num
operator|=
name|max
operator|>
literal|0
condition|?
name|min
else|:
name|max
expr_stmt|;
name|input
operator|=
name|prefix
operator|+
name|copy
operator|+
name|suffix
expr_stmt|;
name|cachedText
operator|=
name|input
expr_stmt|;
name|cachedState
operator|=
name|state
expr_stmt|;
name|cachedValue
operator|=
name|QVariant
argument_list|(
operator|(
name|int
operator|)
name|num
argument_list|)
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
literal|"cachedText is set to '"
operator|<<
name|cachedText
operator|<<
literal|"' state is set to "
operator|<<
name|state
operator|<<
literal|" and value is set to "
operator|<<
name|cachedValue
expr_stmt|;
return|return
name|cachedValue
return|;
block|}
end_function
begin_comment
comment|// --- QDoubleSpinBoxPrivate ---
end_comment
begin_comment
comment|/*!     \internal     Constructs a QSpinBoxPrivate object */
end_comment
begin_constructor
DECL|function|QDoubleSpinBoxPrivate
name|QDoubleSpinBoxPrivate
operator|::
name|QDoubleSpinBoxPrivate
parameter_list|()
block|{
name|actualMin
operator|=
literal|0.0
expr_stmt|;
name|actualMax
operator|=
literal|99.99
expr_stmt|;
name|minimum
operator|=
name|QVariant
argument_list|(
name|actualMin
argument_list|)
expr_stmt|;
name|maximum
operator|=
name|QVariant
argument_list|(
name|actualMax
argument_list|)
expr_stmt|;
name|value
operator|=
name|minimum
expr_stmt|;
name|singleStep
operator|=
name|QVariant
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
name|decimals
operator|=
literal|2
expr_stmt|;
name|type
operator|=
name|QVariant
operator|::
name|Double
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal     \reimp */
end_comment
begin_function
DECL|function|emitSignals
name|void
name|QDoubleSpinBoxPrivate
operator|::
name|emitSignals
parameter_list|(
name|EmitPolicy
name|ep
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|old
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|ep
operator|!=
name|NeverEmit
condition|)
block|{
name|pendingEmit
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|ep
operator|==
name|AlwaysEmit
operator|||
name|value
operator|!=
name|old
condition|)
block|{
emit|emit
name|q
operator|->
name|valueChanged
argument_list|(
name|edit
operator|->
name|displayText
argument_list|()
argument_list|)
emit|;
emit|emit
name|q
operator|->
name|valueChanged
argument_list|(
name|value
operator|.
name|toDouble
argument_list|()
argument_list|)
emit|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \internal     \reimp */
end_comment
begin_function
DECL|function|valueFromText
name|QVariant
name|QDoubleSpinBoxPrivate
operator|::
name|valueFromText
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|q
operator|->
name|valueFromText
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Rounds to a double value that is restricted to decimals.     E.g. // decimals = 2      round(5.555) => 5.56     */
end_comment
begin_function
DECL|function|round
name|double
name|QDoubleSpinBoxPrivate
operator|::
name|round
parameter_list|(
name|double
name|value
parameter_list|)
specifier|const
block|{
return|return
name|QString
operator|::
name|number
argument_list|(
name|value
argument_list|,
literal|'f'
argument_list|,
name|decimals
argument_list|)
operator|.
name|toDouble
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal Multi purpose function that parses input, sets state to     the appropriate state and returns the value it will be interpreted     as. */
end_comment
begin_function
DECL|function|validateAndInterpret
name|QVariant
name|QDoubleSpinBoxPrivate
operator|::
name|validateAndInterpret
parameter_list|(
name|QString
modifier|&
name|input
parameter_list|,
name|int
modifier|&
name|pos
parameter_list|,
name|QValidator
operator|::
name|State
modifier|&
name|state
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|cachedText
operator|==
name|input
operator|&&
operator|!
name|input
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|state
operator|=
name|cachedState
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
literal|"cachedText was '"
operator|<<
name|cachedText
operator|<<
literal|"' state was "
operator|<<
name|state
operator|<<
literal|" and value was "
operator|<<
name|cachedValue
expr_stmt|;
return|return
name|cachedValue
return|;
block|}
specifier|const
name|double
name|max
init|=
name|maximum
operator|.
name|toDouble
argument_list|()
decl_stmt|;
specifier|const
name|double
name|min
init|=
name|minimum
operator|.
name|toDouble
argument_list|()
decl_stmt|;
name|QString
name|copy
init|=
name|stripped
argument_list|(
name|input
argument_list|,
operator|&
name|pos
argument_list|)
decl_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
literal|"input"
operator|<<
name|input
operator|<<
literal|"copy"
operator|<<
name|copy
expr_stmt|;
name|int
name|len
init|=
name|copy
operator|.
name|size
argument_list|()
decl_stmt|;
name|double
name|num
init|=
name|min
decl_stmt|;
specifier|const
name|bool
name|plus
init|=
name|max
operator|>=
literal|0
decl_stmt|;
specifier|const
name|bool
name|minus
init|=
name|min
operator|<=
literal|0
decl_stmt|;
switch|switch
condition|(
name|len
condition|)
block|{
case|case
literal|0
case|:
name|state
operator|=
name|max
operator|!=
name|min
condition|?
name|QValidator
operator|::
name|Intermediate
else|:
name|QValidator
operator|::
name|Invalid
expr_stmt|;
goto|goto
name|end
goto|;
case|case
literal|1
case|:
if|if
condition|(
name|copy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|locale
operator|.
name|decimalPoint
argument_list|()
operator|||
operator|(
name|plus
operator|&&
name|copy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
operator|)
operator|||
operator|(
name|minus
operator|&&
name|copy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|)
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Intermediate
expr_stmt|;
goto|goto
name|end
goto|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|copy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|locale
operator|.
name|decimalPoint
argument_list|()
operator|&&
operator|(
operator|(
name|plus
operator|&&
name|copy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
operator|)
operator|||
operator|(
name|minus
operator|&&
name|copy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|)
operator|)
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Intermediate
expr_stmt|;
goto|goto
name|end
goto|;
block|}
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|copy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|locale
operator|.
name|groupSeparator
argument_list|()
condition|)
block|{
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Invalid"
expr_stmt|;
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
goto|goto
name|end
goto|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|1
condition|)
block|{
specifier|const
name|int
name|dec
init|=
name|copy
operator|.
name|indexOf
argument_list|(
name|locale
operator|.
name|decimalPoint
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dec
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|dec
operator|+
literal|1
operator|<
name|copy
operator|.
name|size
argument_list|()
operator|&&
name|copy
operator|.
name|at
argument_list|(
name|dec
operator|+
literal|1
argument_list|)
operator|==
name|locale
operator|.
name|decimalPoint
argument_list|()
operator|&&
name|pos
operator|==
name|dec
operator|+
literal|1
condition|)
block|{
name|copy
operator|.
name|remove
argument_list|(
name|dec
operator|+
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// typing a delimiter when you are on the delimiter
block|}
comment|// should be treated as typing right arrow
if|if
condition|(
name|copy
operator|.
name|size
argument_list|()
operator|-
name|dec
operator|>
name|decimals
operator|+
literal|1
condition|)
block|{
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Invalid"
expr_stmt|;
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
goto|goto
name|end
goto|;
block|}
for|for
control|(
name|int
name|i
init|=
name|dec
operator|+
literal|1
init|;
name|i
operator|<
name|copy
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|copy
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isSpace
argument_list|()
operator|||
name|copy
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|locale
operator|.
name|groupSeparator
argument_list|()
condition|)
block|{
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Invalid"
expr_stmt|;
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
goto|goto
name|end
goto|;
block|}
block|}
block|}
else|else
block|{
specifier|const
name|QChar
name|last
init|=
name|copy
operator|.
name|at
argument_list|(
name|len
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QChar
name|secondLast
init|=
name|copy
operator|.
name|at
argument_list|(
name|len
operator|-
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|last
operator|==
name|locale
operator|.
name|groupSeparator
argument_list|()
operator|||
name|last
operator|.
name|isSpace
argument_list|()
operator|)
operator|&&
operator|(
name|secondLast
operator|==
name|locale
operator|.
name|groupSeparator
argument_list|()
operator|||
name|secondLast
operator|.
name|isSpace
argument_list|()
operator|)
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Invalid"
expr_stmt|;
goto|goto
name|end
goto|;
block|}
elseif|else
if|if
condition|(
name|last
operator|.
name|isSpace
argument_list|()
operator|&&
operator|(
operator|!
name|locale
operator|.
name|groupSeparator
argument_list|()
operator|.
name|isSpace
argument_list|()
operator|||
name|secondLast
operator|.
name|isSpace
argument_list|()
operator|)
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Invalid"
expr_stmt|;
goto|goto
name|end
goto|;
block|}
block|}
block|}
block|{
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|num
operator|=
name|locale
operator|.
name|toDouble
argument_list|(
name|copy
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
name|locale
operator|<<
name|copy
operator|<<
name|num
operator|<<
name|ok
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
if|if
condition|(
name|locale
operator|.
name|groupSeparator
argument_list|()
operator|.
name|isPrint
argument_list|()
condition|)
block|{
if|if
condition|(
name|max
argument_list|<
literal|1000
operator|&&
name|min
argument_list|>
operator|-
literal|1000
operator|&&
name|copy
operator|.
name|contains
argument_list|(
name|locale
operator|.
name|groupSeparator
argument_list|()
argument_list|)
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Invalid"
expr_stmt|;
goto|goto
name|end
goto|;
block|}
specifier|const
name|int
name|len
init|=
name|copy
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|copy
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|locale
operator|.
name|groupSeparator
argument_list|()
operator|&&
name|copy
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
name|locale
operator|.
name|groupSeparator
argument_list|()
condition|)
block|{
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Invalid"
expr_stmt|;
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
goto|goto
name|end
goto|;
block|}
block|}
name|QString
name|copy2
init|=
name|copy
decl_stmt|;
name|copy2
operator|.
name|remove
argument_list|(
name|locale
operator|.
name|groupSeparator
argument_list|()
argument_list|)
expr_stmt|;
name|num
operator|=
name|locale
operator|.
name|toDouble
argument_list|(
name|copy2
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
name|locale
operator|.
name|groupSeparator
argument_list|()
operator|<<
name|num
operator|<<
name|copy2
operator|<<
name|ok
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Invalid"
expr_stmt|;
goto|goto
name|end
goto|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Invalid"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|num
operator|>=
name|min
operator|&&
name|num
operator|<=
name|max
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Acceptable
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Acceptable"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|max
operator|==
name|min
condition|)
block|{
comment|// when max and min is the same the only non-Invalid input is max (or min)
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Invalid"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|num
operator|>=
literal|0
operator|&&
name|num
operator|>
name|max
operator|)
operator|||
operator|(
name|num
operator|<
literal|0
operator|&&
name|num
operator|<
name|min
operator|)
condition|)
block|{
name|state
operator|=
name|QValidator
operator|::
name|Invalid
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Invalid"
expr_stmt|;
block|}
else|else
block|{
name|state
operator|=
name|QValidator
operator|::
name|Intermediate
expr_stmt|;
name|QSBDEBUG
argument_list|()
operator|<<
name|__FILE__
operator|<<
name|__LINE__
operator|<<
literal|"state is set to Intermediate"
expr_stmt|;
block|}
block|}
block|}
name|end
label|:
if|if
condition|(
name|state
operator|!=
name|QValidator
operator|::
name|Acceptable
condition|)
block|{
name|num
operator|=
name|max
operator|>
literal|0
condition|?
name|min
else|:
name|max
expr_stmt|;
block|}
name|input
operator|=
name|prefix
operator|+
name|copy
operator|+
name|suffix
expr_stmt|;
name|cachedText
operator|=
name|input
expr_stmt|;
name|cachedState
operator|=
name|state
expr_stmt|;
name|cachedValue
operator|=
name|QVariant
argument_list|(
name|num
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|num
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     \internal     \reimp */
end_comment
begin_function
DECL|function|textFromValue
name|QString
name|QDoubleSpinBoxPrivate
operator|::
name|textFromValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|f
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
return|return
name|q
operator|->
name|textFromValue
argument_list|(
name|f
operator|.
name|toDouble
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QSpinBox
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QSpinBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StyleChange
ifdef|#
directive|ifdef
name|Q_OS_MAC
operator|||
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MacSizeChange
endif|#
directive|endif
condition|)
name|d
operator|->
name|setLayoutItemMargins
argument_list|(
name|QStyle
operator|::
name|SE_SpinBoxLayoutItem
argument_list|)
expr_stmt|;
return|return
name|QAbstractSpinBox
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SPINBOX
end_comment
end_unit
