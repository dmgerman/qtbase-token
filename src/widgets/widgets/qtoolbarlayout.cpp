begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qaction.h>
end_include
begin_include
include|#
directive|include
file|<qwidgetaction.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbar.h>
end_include
begin_include
include|#
directive|include
file|<qstyleoption.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbutton.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_include
include|#
directive|include
file|"qmainwindowlayout_p.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbarextension_p.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbarlayout_p.h"
end_include
begin_include
include|#
directive|include
file|"qtoolbarseparator_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
end_ifndef
begin_function_decl
name|QT_BEGIN_NAMESPACE
comment|// qmainwindow.cpp
specifier|extern
name|QMainWindowLayout
modifier|*
name|qt_mainwindow_layout
parameter_list|(
specifier|const
name|QMainWindow
modifier|*
name|window
parameter_list|)
function_decl|;
end_function_decl
begin_comment
comment|/****************************************************************************** ** QToolBarItem */
end_comment
begin_constructor
DECL|function|QToolBarItem
name|QToolBarItem
operator|::
name|QToolBarItem
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
member_init_list|:
name|QWidgetItem
argument_list|(
name|widget
argument_list|)
member_init_list|,
name|action
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|customWidget
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|isEmpty
name|bool
name|QToolBarItem
operator|::
name|isEmpty
parameter_list|()
specifier|const
block|{
return|return
name|action
operator|==
literal|0
operator|||
operator|!
name|action
operator|->
name|isVisible
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/****************************************************************************** ** QToolBarLayout */
end_comment
begin_constructor
DECL|function|QToolBarLayout
name|QToolBarLayout
operator|::
name|QToolBarLayout
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QLayout
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|expanded
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|animating
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|dirty
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|expanding
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|empty
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|expandFlag
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|popupMenu
argument_list|(
literal|0
argument_list|)
block|{
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tb
condition|)
return|return;
name|extension
operator|=
operator|new
name|QToolBarExtension
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|extension
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|extension
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|tb
argument_list|,
name|SIGNAL
argument_list|(
name|orientationChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|)
argument_list|)
argument_list|,
name|extension
argument_list|,
name|SLOT
argument_list|(
name|setOrientation
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setUsePopupMenu
argument_list|(
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|tb
operator|->
name|parentWidget
argument_list|()
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QToolBarLayout
name|QToolBarLayout
operator|::
name|~
name|QToolBarLayout
parameter_list|()
block|{
while|while
condition|(
operator|!
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QToolBarItem
modifier|*
name|item
init|=
name|items
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|QWidgetAction
modifier|*
name|widgetAction
init|=
name|qobject_cast
argument_list|<
name|QWidgetAction
operator|*
argument_list|>
argument_list|(
name|item
operator|->
name|action
argument_list|)
condition|)
block|{
if|if
condition|(
name|item
operator|->
name|customWidget
condition|)
name|widgetAction
operator|->
name|releaseWidget
argument_list|(
name|item
operator|->
name|widget
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|delete
name|item
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|updateMarginAndSpacing
name|void
name|QToolBarLayout
operator|::
name|updateMarginAndSpacing
parameter_list|()
block|{
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tb
condition|)
return|return;
name|QStyle
modifier|*
name|style
init|=
name|tb
operator|->
name|style
argument_list|()
decl_stmt|;
name|QStyleOptionToolBar
name|opt
decl_stmt|;
name|tb
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|setMargin
argument_list|(
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarItemMargin
argument_list|,
operator|&
name|opt
argument_list|,
name|tb
argument_list|)
operator|+
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarFrameWidth
argument_list|,
operator|&
name|opt
argument_list|,
name|tb
argument_list|)
argument_list|)
expr_stmt|;
name|setSpacing
argument_list|(
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarItemSpacing
argument_list|,
operator|&
name|opt
argument_list|,
name|tb
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasExpandFlag
name|bool
name|QToolBarLayout
operator|::
name|hasExpandFlag
parameter_list|()
specifier|const
block|{
return|return
name|expandFlag
return|;
block|}
end_function
begin_function
DECL|function|setUsePopupMenu
name|void
name|QToolBarLayout
operator|::
name|setUsePopupMenu
parameter_list|(
name|bool
name|set
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dirty
operator|&&
operator|(
operator|(
name|popupMenu
operator|==
literal|0
operator|)
operator|==
name|set
operator|)
condition|)
name|invalidate
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|set
condition|)
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|extension
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setExpanded
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|UniqueConnection
argument_list|)
expr_stmt|;
name|extension
operator|->
name|setPopupMode
argument_list|(
name|QToolButton
operator|::
name|DelayedPopup
argument_list|)
expr_stmt|;
name|extension
operator|->
name|setMenu
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|popupMenu
expr_stmt|;
name|popupMenu
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|QObject
operator|::
name|disconnect
argument_list|(
name|extension
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setExpanded
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|extension
operator|->
name|setPopupMode
argument_list|(
name|QToolButton
operator|::
name|InstantPopup
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|popupMenu
condition|)
block|{
name|popupMenu
operator|=
operator|new
name|QMenu
argument_list|(
name|extension
argument_list|)
expr_stmt|;
block|}
name|extension
operator|->
name|setMenu
argument_list|(
name|popupMenu
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|checkUsePopupMenu
name|void
name|QToolBarLayout
operator|::
name|checkUsePopupMenu
parameter_list|()
block|{
name|QToolBar
modifier|*
name|tb
init|=
cast|static_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
decl_stmt|;
name|QMainWindow
modifier|*
name|mw
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|tb
operator|->
name|parent
argument_list|()
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|Orientation
name|o
init|=
name|tb
operator|->
name|orientation
argument_list|()
decl_stmt|;
name|setUsePopupMenu
argument_list|(
operator|!
name|mw
operator|||
name|tb
operator|->
name|isFloating
argument_list|()
operator|||
name|perp
argument_list|(
name|o
argument_list|,
name|expandedSize
argument_list|(
name|mw
operator|->
name|size
argument_list|()
argument_list|)
argument_list|)
operator|>=
name|perp
argument_list|(
name|o
argument_list|,
name|mw
operator|->
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addItem
name|void
name|QToolBarLayout
operator|::
name|addItem
parameter_list|(
name|QLayoutItem
modifier|*
parameter_list|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QToolBarLayout::addItem(): please use addAction() instead"
expr_stmt|;
return|return;
block|}
end_function
begin_function
DECL|function|itemAt
name|QLayoutItem
modifier|*
name|QToolBarLayout
operator|::
name|itemAt
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|items
operator|.
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|items
operator|.
name|at
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|takeAt
name|QLayoutItem
modifier|*
name|QToolBarLayout
operator|::
name|takeAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|items
operator|.
name|count
argument_list|()
condition|)
return|return
literal|0
return|;
name|QToolBarItem
modifier|*
name|item
init|=
name|items
operator|.
name|takeAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|popupMenu
condition|)
name|popupMenu
operator|->
name|removeAction
argument_list|(
name|item
operator|->
name|action
argument_list|)
expr_stmt|;
name|QWidgetAction
modifier|*
name|widgetAction
init|=
name|qobject_cast
argument_list|<
name|QWidgetAction
operator|*
argument_list|>
argument_list|(
name|item
operator|->
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|widgetAction
operator|!=
literal|0
operator|&&
name|item
operator|->
name|customWidget
condition|)
block|{
name|widgetAction
operator|->
name|releaseWidget
argument_list|(
name|item
operator|->
name|widget
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// destroy the QToolButton/QToolBarSeparator
name|item
operator|->
name|widget
argument_list|()
operator|->
name|hide
argument_list|()
expr_stmt|;
name|item
operator|->
name|widget
argument_list|()
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
block|}
name|invalidate
argument_list|()
expr_stmt|;
return|return
name|item
return|;
block|}
end_function
begin_function
DECL|function|insertAction
name|void
name|QToolBarLayout
operator|::
name|insertAction
parameter_list|(
name|int
name|index
parameter_list|,
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|index
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|index
operator|=
name|qMin
argument_list|(
name|items
operator|.
name|count
argument_list|()
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|QToolBarItem
modifier|*
name|item
init|=
name|createItem
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
block|{
name|items
operator|.
name|insert
argument_list|(
name|index
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|indexOf
name|int
name|QToolBarLayout
operator|::
name|indexOf
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|action
operator|==
name|action
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|count
name|int
name|QToolBarLayout
operator|::
name|count
parameter_list|()
specifier|const
block|{
return|return
name|items
operator|.
name|count
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isEmpty
name|bool
name|QToolBarLayout
operator|::
name|isEmpty
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|dirty
condition|)
name|updateGeomArray
argument_list|()
expr_stmt|;
return|return
name|empty
return|;
block|}
end_function
begin_function
DECL|function|invalidate
name|void
name|QToolBarLayout
operator|::
name|invalidate
parameter_list|()
block|{
name|dirty
operator|=
literal|true
expr_stmt|;
name|QLayout
operator|::
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|expandingDirections
name|Qt
operator|::
name|Orientations
name|QToolBarLayout
operator|::
name|expandingDirections
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|dirty
condition|)
name|updateGeomArray
argument_list|()
expr_stmt|;
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tb
condition|)
return|return
name|Qt
operator|::
name|Orientations
argument_list|(
literal|0
argument_list|)
return|;
name|Qt
operator|::
name|Orientation
name|o
init|=
name|tb
operator|->
name|orientation
argument_list|()
decl_stmt|;
return|return
name|expanding
condition|?
name|Qt
operator|::
name|Orientations
argument_list|(
name|o
argument_list|)
else|:
name|Qt
operator|::
name|Orientations
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|movable
name|bool
name|QToolBarLayout
operator|::
name|movable
parameter_list|()
specifier|const
block|{
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tb
condition|)
return|return
literal|false
return|;
name|QMainWindow
modifier|*
name|win
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|tb
operator|->
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|tb
operator|->
name|isMovable
argument_list|()
operator|&&
name|win
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|updateGeomArray
name|void
name|QToolBarLayout
operator|::
name|updateGeomArray
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|dirty
condition|)
return|return;
name|QToolBarLayout
modifier|*
name|that
init|=
cast|const_cast
argument_list|<
name|QToolBarLayout
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tb
condition|)
return|return;
name|QStyle
modifier|*
name|style
init|=
name|tb
operator|->
name|style
argument_list|()
decl_stmt|;
name|QStyleOptionToolBar
name|opt
decl_stmt|;
name|tb
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
specifier|const
name|int
name|handleExtent
init|=
name|movable
argument_list|()
condition|?
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarHandleExtent
argument_list|,
operator|&
name|opt
argument_list|,
name|tb
argument_list|)
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|margin
init|=
name|this
operator|->
name|margin
argument_list|()
decl_stmt|;
specifier|const
name|int
name|spacing
init|=
name|this
operator|->
name|spacing
argument_list|()
decl_stmt|;
specifier|const
name|int
name|extensionExtent
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarExtensionExtent
argument_list|,
operator|&
name|opt
argument_list|,
name|tb
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|Orientation
name|o
init|=
name|tb
operator|->
name|orientation
argument_list|()
decl_stmt|;
name|that
operator|->
name|minSize
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|that
operator|->
name|hint
operator|=
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rperp
argument_list|(
name|o
argument_list|,
name|that
operator|->
name|minSize
argument_list|)
operator|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarHandleExtent
argument_list|,
operator|&
name|opt
argument_list|,
name|tb
argument_list|)
expr_stmt|;
name|rperp
argument_list|(
name|o
argument_list|,
name|that
operator|->
name|hint
argument_list|)
operator|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarHandleExtent
argument_list|,
operator|&
name|opt
argument_list|,
name|tb
argument_list|)
expr_stmt|;
name|that
operator|->
name|expanding
operator|=
literal|false
expr_stmt|;
name|that
operator|->
name|empty
operator|=
literal|false
expr_stmt|;
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
name|a
argument_list|(
name|items
operator|.
name|count
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// + 1 for the stretch
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QToolBarItem
modifier|*
name|item
init|=
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QSize
name|max
init|=
name|item
operator|->
name|maximumSize
argument_list|()
decl_stmt|;
name|QSize
name|min
init|=
name|item
operator|->
name|minimumSize
argument_list|()
decl_stmt|;
name|QSize
name|hint
init|=
name|item
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|Qt
operator|::
name|Orientations
name|exp
init|=
name|item
operator|->
name|expandingDirections
argument_list|()
decl_stmt|;
name|bool
name|empty
init|=
name|item
operator|->
name|isEmpty
argument_list|()
decl_stmt|;
name|that
operator|->
name|expanding
operator|=
name|expanding
operator|||
name|exp
operator|&
name|o
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|widget
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|item
operator|->
name|widget
argument_list|()
operator|->
name|sizePolicy
argument_list|()
operator|.
name|horizontalPolicy
argument_list|()
operator|&
name|QSizePolicy
operator|::
name|ExpandFlag
operator|)
condition|)
block|{
name|that
operator|->
name|expandFlag
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|empty
condition|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
comment|// the minimum size only displays one widget
name|rpick
argument_list|(
name|o
argument_list|,
name|that
operator|->
name|minSize
argument_list|)
operator|+=
name|pick
argument_list|(
name|o
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|int
name|s
init|=
name|perp
argument_list|(
name|o
argument_list|,
name|minSize
argument_list|)
decl_stmt|;
name|rperp
argument_list|(
name|o
argument_list|,
name|that
operator|->
name|minSize
argument_list|)
operator|=
name|qMax
argument_list|(
name|s
argument_list|,
name|perp
argument_list|(
name|o
argument_list|,
name|min
argument_list|)
argument_list|)
expr_stmt|;
comment|//we only add spacing before item (ie never before the first one)
name|rpick
argument_list|(
name|o
argument_list|,
name|that
operator|->
name|hint
argument_list|)
operator|+=
operator|(
name|count
operator|==
literal|0
condition|?
literal|0
else|:
name|spacing
operator|)
operator|+
name|pick
argument_list|(
name|o
argument_list|,
name|hint
argument_list|)
expr_stmt|;
name|s
operator|=
name|perp
argument_list|(
name|o
argument_list|,
name|that
operator|->
name|hint
argument_list|)
expr_stmt|;
name|rperp
argument_list|(
name|o
argument_list|,
name|that
operator|->
name|hint
argument_list|)
operator|=
name|qMax
argument_list|(
name|s
argument_list|,
name|perp
argument_list|(
name|o
argument_list|,
name|hint
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
name|a
index|[
name|i
index|]
operator|.
name|sizeHint
operator|=
name|pick
argument_list|(
name|o
argument_list|,
name|hint
argument_list|)
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|maximumSize
operator|=
name|pick
argument_list|(
name|o
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|minimumSize
operator|=
name|pick
argument_list|(
name|o
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|expansive
operator|=
name|exp
operator|&
name|o
expr_stmt|;
if|if
condition|(
name|o
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|a
index|[
name|i
index|]
operator|.
name|stretch
operator|=
name|item
operator|->
name|widget
argument_list|()
operator|->
name|sizePolicy
argument_list|()
operator|.
name|horizontalStretch
argument_list|()
expr_stmt|;
else|else
name|a
index|[
name|i
index|]
operator|.
name|stretch
operator|=
name|item
operator|->
name|widget
argument_list|()
operator|->
name|sizePolicy
argument_list|()
operator|.
name|verticalStretch
argument_list|()
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|empty
operator|=
name|empty
expr_stmt|;
block|}
name|that
operator|->
name|geomArray
operator|=
name|a
expr_stmt|;
name|that
operator|->
name|empty
operator|=
name|count
operator|==
literal|0
expr_stmt|;
name|rpick
argument_list|(
name|o
argument_list|,
name|that
operator|->
name|minSize
argument_list|)
operator|+=
name|handleExtent
expr_stmt|;
name|that
operator|->
name|minSize
operator|+=
name|QSize
argument_list|(
literal|2
operator|*
name|margin
argument_list|,
literal|2
operator|*
name|margin
argument_list|)
expr_stmt|;
if|if
condition|(
name|items
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
name|rpick
argument_list|(
name|o
argument_list|,
name|that
operator|->
name|minSize
argument_list|)
operator|+=
name|spacing
operator|+
name|extensionExtent
expr_stmt|;
name|rpick
argument_list|(
name|o
argument_list|,
name|that
operator|->
name|hint
argument_list|)
operator|+=
name|handleExtent
expr_stmt|;
name|that
operator|->
name|hint
operator|+=
name|QSize
argument_list|(
literal|2
operator|*
name|margin
argument_list|,
literal|2
operator|*
name|margin
argument_list|)
expr_stmt|;
name|that
operator|->
name|dirty
operator|=
literal|false
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
name|QMainWindow
modifier|*
name|mw
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|mw
operator|->
name|unifiedTitleAndToolBarOnMac
argument_list|()
operator|&&
name|mw
operator|->
name|toolBarArea
argument_list|(
cast|static_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
argument_list|)
operator|==
name|Qt
operator|::
name|TopToolBarArea
condition|)
block|{
if|if
condition|(
name|expandFlag
condition|)
block|{
name|tb
operator|->
name|setMaximumSize
argument_list|(
literal|0xFFFFFF
argument_list|,
literal|0xFFFFFF
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tb
operator|->
name|setMaximumSize
argument_list|(
name|hint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
name|that
operator|->
name|dirty
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultWidgetAction
specifier|static
name|bool
name|defaultWidgetAction
parameter_list|(
name|QToolBarItem
modifier|*
name|item
parameter_list|)
block|{
name|QWidgetAction
modifier|*
name|a
init|=
name|qobject_cast
argument_list|<
name|QWidgetAction
operator|*
argument_list|>
argument_list|(
name|item
operator|->
name|action
argument_list|)
decl_stmt|;
return|return
name|a
operator|!=
literal|0
operator|&&
name|a
operator|->
name|defaultWidget
argument_list|()
operator|==
name|item
operator|->
name|widget
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setGeometry
name|void
name|QToolBarLayout
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tb
condition|)
return|return;
name|QStyle
modifier|*
name|style
init|=
name|tb
operator|->
name|style
argument_list|()
decl_stmt|;
name|QStyleOptionToolBar
name|opt
decl_stmt|;
name|tb
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
specifier|const
name|int
name|margin
init|=
name|this
operator|->
name|margin
argument_list|()
decl_stmt|;
specifier|const
name|int
name|extensionExtent
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarExtensionExtent
argument_list|,
operator|&
name|opt
argument_list|,
name|tb
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|Orientation
name|o
init|=
name|tb
operator|->
name|orientation
argument_list|()
decl_stmt|;
name|QLayout
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|bool
name|ranOutOfSpace
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|animating
condition|)
name|ranOutOfSpace
operator|=
name|layoutActions
argument_list|(
name|rect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expanded
operator|||
name|animating
operator|||
name|ranOutOfSpace
condition|)
block|{
name|Qt
operator|::
name|ToolBarArea
name|area
init|=
name|Qt
operator|::
name|TopToolBarArea
decl_stmt|;
if|if
condition|(
name|QMainWindow
modifier|*
name|win
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|tb
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
name|area
operator|=
name|win
operator|->
name|toolBarArea
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|QSize
name|hint
init|=
name|sizeHint
argument_list|()
decl_stmt|;
name|QPoint
name|pos
decl_stmt|;
name|rpick
argument_list|(
name|o
argument_list|,
name|pos
argument_list|)
operator|=
name|pick
argument_list|(
name|o
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
operator|-
name|margin
operator|-
name|extensionExtent
operator|+
literal|2
expr_stmt|;
if|if
condition|(
name|area
operator|==
name|Qt
operator|::
name|LeftToolBarArea
operator|||
name|area
operator|==
name|Qt
operator|::
name|TopToolBarArea
condition|)
name|rperp
argument_list|(
name|o
argument_list|,
name|pos
argument_list|)
operator|=
name|perp
argument_list|(
name|o
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
operator|+
name|margin
expr_stmt|;
else|else
name|rperp
argument_list|(
name|o
argument_list|,
name|pos
argument_list|)
operator|=
name|perp
argument_list|(
name|o
argument_list|,
name|rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
operator|-
name|margin
operator|-
operator|(
name|perp
argument_list|(
name|o
argument_list|,
name|hint
argument_list|)
operator|-
literal|2
operator|*
name|margin
operator|)
operator|+
literal|1
expr_stmt|;
name|QSize
name|size
decl_stmt|;
name|rpick
argument_list|(
name|o
argument_list|,
name|size
argument_list|)
operator|=
name|extensionExtent
expr_stmt|;
name|rperp
argument_list|(
name|o
argument_list|,
name|size
argument_list|)
operator|=
name|perp
argument_list|(
name|o
argument_list|,
name|hint
argument_list|)
operator|-
literal|2
operator|*
name|margin
expr_stmt|;
name|QRect
name|r
argument_list|(
name|pos
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|r
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|parentWidget
argument_list|()
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|rect
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|extension
operator|->
name|setGeometry
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|extension
operator|->
name|isHidden
argument_list|()
condition|)
name|extension
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|extension
operator|->
name|isHidden
argument_list|()
condition|)
name|extension
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
name|QMainWindow
modifier|*
name|win
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|tb
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
block|{
name|Qt
operator|::
name|ToolBarArea
name|area
init|=
name|win
operator|->
name|toolBarArea
argument_list|(
name|tb
argument_list|)
decl_stmt|;
if|if
condition|(
name|win
operator|->
name|unifiedTitleAndToolBarOnMac
argument_list|()
operator|&&
name|area
operator|==
name|Qt
operator|::
name|TopToolBarArea
condition|)
block|{
name|qt_mainwindow_layout
argument_list|(
name|win
argument_list|)
operator|->
name|fixSizeInUnifiedToolbar
argument_list|(
name|tb
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|layoutActions
name|bool
name|QToolBarLayout
operator|::
name|layoutActions
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
if|if
condition|(
name|dirty
condition|)
name|updateGeomArray
argument_list|()
expr_stmt|;
name|QRect
name|rect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|showWidgets
decl_stmt|,
name|hideWidgets
decl_stmt|;
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tb
condition|)
return|return
literal|false
return|;
name|QStyle
modifier|*
name|style
init|=
name|tb
operator|->
name|style
argument_list|()
decl_stmt|;
name|QStyleOptionToolBar
name|opt
decl_stmt|;
name|tb
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
specifier|const
name|int
name|handleExtent
init|=
name|movable
argument_list|()
condition|?
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarHandleExtent
argument_list|,
operator|&
name|opt
argument_list|,
name|tb
argument_list|)
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|margin
init|=
name|this
operator|->
name|margin
argument_list|()
decl_stmt|;
specifier|const
name|int
name|spacing
init|=
name|this
operator|->
name|spacing
argument_list|()
decl_stmt|;
specifier|const
name|int
name|extensionExtent
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarExtensionExtent
argument_list|,
operator|&
name|opt
argument_list|,
name|tb
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|Orientation
name|o
init|=
name|tb
operator|->
name|orientation
argument_list|()
decl_stmt|;
name|bool
name|extensionMenuContainsOnlyWidgetActions
init|=
literal|true
decl_stmt|;
name|int
name|space
init|=
name|pick
argument_list|(
name|o
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
operator|-
literal|2
operator|*
name|margin
operator|-
name|handleExtent
decl_stmt|;
if|if
condition|(
name|space
operator|<=
literal|0
condition|)
return|return
literal|false
return|;
comment|// nothing to do.
if|if
condition|(
name|popupMenu
condition|)
name|popupMenu
operator|->
name|clear
argument_list|()
expr_stmt|;
name|bool
name|ranOutOfSpace
init|=
literal|false
decl_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
name|int
name|rowPos
init|=
name|perp
argument_list|(
name|o
argument_list|,
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
operator|+
name|margin
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|items
operator|.
name|count
argument_list|()
condition|)
block|{
name|QVector
argument_list|<
name|QLayoutStruct
argument_list|>
name|a
init|=
name|geomArray
decl_stmt|;
name|int
name|start
init|=
name|i
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
name|int
name|prev
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|rowHeight
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|maximumSize
init|=
literal|0
decl_stmt|;
name|bool
name|expansiveRow
init|=
literal|false
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|a
index|[
name|i
index|]
operator|.
name|empty
condition|)
continue|continue;
name|int
name|newSize
init|=
name|size
operator|+
operator|(
name|count
operator|==
literal|0
condition|?
literal|0
else|:
name|spacing
operator|)
operator|+
name|a
index|[
name|i
index|]
operator|.
name|minimumSize
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
operator|-
literal|1
operator|&&
name|newSize
operator|>
name|space
condition|)
block|{
if|if
condition|(
name|rows
operator|==
literal|0
condition|)
name|ranOutOfSpace
operator|=
literal|true
expr_stmt|;
comment|// do we have to move the previous item to the next line to make space for
comment|// the extension button?
if|if
condition|(
name|count
operator|>
literal|1
operator|&&
name|size
operator|+
name|spacing
operator|+
name|extensionExtent
operator|>
name|space
condition|)
name|i
operator|=
name|prev
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|expanded
condition|)
name|rowHeight
operator|=
name|qMax
argument_list|(
name|rowHeight
argument_list|,
name|perp
argument_list|(
name|o
argument_list|,
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|sizeHint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expansiveRow
operator|=
name|expansiveRow
operator|||
name|a
index|[
name|i
index|]
operator|.
name|expansive
expr_stmt|;
name|size
operator|=
name|newSize
expr_stmt|;
name|maximumSize
operator|+=
name|spacing
operator|+
operator|(
name|a
index|[
name|i
index|]
operator|.
name|expansive
condition|?
name|a
index|[
name|i
index|]
operator|.
name|maximumSize
else|:
name|a
index|[
name|i
index|]
operator|.
name|smartSizeHint
argument_list|()
operator|)
expr_stmt|;
name|prev
operator|=
name|i
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
comment|// stretch at the end
name|a
index|[
name|i
index|]
operator|.
name|sizeHint
operator|=
literal|0
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|maximumSize
operator|=
name|QWIDGETSIZE_MAX
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|minimumSize
operator|=
literal|0
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|expansive
operator|=
literal|true
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|stretch
operator|=
literal|0
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|empty
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|expansiveRow
operator|&&
name|maximumSize
operator|<
name|space
condition|)
block|{
name|expansiveRow
operator|=
literal|false
expr_stmt|;
name|a
index|[
name|i
index|]
operator|.
name|maximumSize
operator|=
name|space
operator|-
name|maximumSize
expr_stmt|;
block|}
name|qGeomCalc
argument_list|(
name|a
argument_list|,
name|start
argument_list|,
name|i
operator|-
name|start
operator|+
operator|(
name|expansiveRow
condition|?
literal|0
else|:
literal|1
operator|)
argument_list|,
literal|0
argument_list|,
name|space
operator|-
operator|(
name|ranOutOfSpace
condition|?
operator|(
name|extensionExtent
operator|+
name|spacing
operator|)
else|:
literal|0
operator|)
argument_list|,
name|spacing
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
name|start
init|;
name|j
operator|<
name|i
condition|;
operator|++
name|j
control|)
block|{
name|QToolBarItem
modifier|*
name|item
init|=
name|items
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
index|[
name|j
index|]
operator|.
name|empty
condition|)
block|{
if|if
condition|(
operator|!
name|item
operator|->
name|widget
argument_list|()
operator|->
name|isHidden
argument_list|()
condition|)
name|hideWidgets
operator|<<
name|item
operator|->
name|widget
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|QPoint
name|pos
decl_stmt|;
name|rpick
argument_list|(
name|o
argument_list|,
name|pos
argument_list|)
operator|=
name|margin
operator|+
name|handleExtent
operator|+
name|a
index|[
name|j
index|]
operator|.
name|pos
expr_stmt|;
name|rperp
argument_list|(
name|o
argument_list|,
name|pos
argument_list|)
operator|=
name|rowPos
expr_stmt|;
name|QSize
name|size
decl_stmt|;
name|rpick
argument_list|(
name|o
argument_list|,
name|size
argument_list|)
operator|=
name|a
index|[
name|j
index|]
operator|.
name|size
expr_stmt|;
if|if
condition|(
name|expanded
condition|)
name|rperp
argument_list|(
name|o
argument_list|,
name|size
argument_list|)
operator|=
name|rowHeight
expr_stmt|;
else|else
name|rperp
argument_list|(
name|o
argument_list|,
name|size
argument_list|)
operator|=
name|perp
argument_list|(
name|o
argument_list|,
name|rect
operator|.
name|size
argument_list|()
argument_list|)
operator|-
literal|2
operator|*
name|margin
expr_stmt|;
name|QRect
name|r
argument_list|(
name|pos
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
name|Qt
operator|::
name|Horizontal
condition|)
name|r
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|parentWidget
argument_list|()
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|rect
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|item
operator|->
name|setGeometry
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|widget
argument_list|()
operator|->
name|isHidden
argument_list|()
condition|)
name|showWidgets
operator|<<
name|item
operator|->
name|widget
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|expanded
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QToolBarItem
modifier|*
name|item
init|=
name|items
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|item
operator|->
name|widget
argument_list|()
operator|->
name|isHidden
argument_list|()
condition|)
name|hideWidgets
operator|<<
name|item
operator|->
name|widget
argument_list|()
expr_stmt|;
if|if
condition|(
name|popupMenu
condition|)
block|{
if|if
condition|(
operator|!
name|defaultWidgetAction
argument_list|(
name|item
argument_list|)
condition|)
block|{
name|popupMenu
operator|->
name|addAction
argument_list|(
name|item
operator|->
name|action
argument_list|)
expr_stmt|;
name|extensionMenuContainsOnlyWidgetActions
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
break|break;
block|}
name|rowPos
operator|+=
name|rowHeight
operator|+
name|spacing
expr_stmt|;
operator|++
name|rows
expr_stmt|;
block|}
comment|// if we are using a popup menu, not the expadning toolbar effect, we cannot move custom
comment|// widgets into the menu. If only custom widget actions are chopped off, the popup menu
comment|// is empty. So we show the little extension button to show something is chopped off,
comment|// but we make it disabled.
name|extension
operator|->
name|setEnabled
argument_list|(
name|popupMenu
operator|==
literal|0
operator|||
operator|!
name|extensionMenuContainsOnlyWidgetActions
argument_list|)
expr_stmt|;
comment|// we have to do the show/hide here, because it triggers more calls to setGeometry :(
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|showWidgets
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|showWidgets
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|show
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hideWidgets
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|hideWidgets
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|hide
argument_list|()
expr_stmt|;
return|return
name|ranOutOfSpace
return|;
block|}
end_function
begin_function
DECL|function|expandedSize
name|QSize
name|QToolBarLayout
operator|::
name|expandedSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|dirty
condition|)
name|updateGeomArray
argument_list|()
expr_stmt|;
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tb
condition|)
return|return
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
name|QMainWindow
modifier|*
name|win
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|tb
operator|->
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|Orientation
name|o
init|=
name|tb
operator|->
name|orientation
argument_list|()
decl_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|tb
operator|->
name|style
argument_list|()
decl_stmt|;
name|QStyleOptionToolBar
name|opt
decl_stmt|;
name|tb
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
specifier|const
name|int
name|handleExtent
init|=
name|movable
argument_list|()
condition|?
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarHandleExtent
argument_list|,
operator|&
name|opt
argument_list|,
name|tb
argument_list|)
else|:
literal|0
decl_stmt|;
specifier|const
name|int
name|margin
init|=
name|this
operator|->
name|margin
argument_list|()
decl_stmt|;
specifier|const
name|int
name|spacing
init|=
name|this
operator|->
name|spacing
argument_list|()
decl_stmt|;
specifier|const
name|int
name|extensionExtent
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarExtensionExtent
argument_list|,
operator|&
name|opt
argument_list|,
name|tb
argument_list|)
decl_stmt|;
name|int
name|total_w
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
operator|!
name|geomArray
index|[
name|x
index|]
operator|.
name|empty
condition|)
block|{
name|total_w
operator|+=
operator|(
name|count
operator|==
literal|0
condition|?
literal|0
else|:
name|spacing
operator|)
operator|+
name|geomArray
index|[
name|x
index|]
operator|.
name|minimumSize
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
block|}
if|if
condition|(
name|count
operator|==
literal|0
condition|)
return|return
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
name|int
name|min_w
init|=
name|pick
argument_list|(
name|o
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|int
name|rows
init|=
operator|(
name|int
operator|)
name|qSqrt
argument_list|(
name|qreal
argument_list|(
name|count
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rows
operator|==
literal|1
condition|)
operator|++
name|rows
expr_stmt|;
comment|// we want to expand to at least two rows
name|int
name|space
init|=
name|total_w
operator|/
name|rows
operator|+
name|spacing
operator|+
name|extensionExtent
decl_stmt|;
name|space
operator|=
name|qMax
argument_list|(
name|space
argument_list|,
name|min_w
operator|-
literal|2
operator|*
name|margin
operator|-
name|handleExtent
argument_list|)
expr_stmt|;
if|if
condition|(
name|win
operator|!=
literal|0
condition|)
name|space
operator|=
name|qMin
argument_list|(
name|space
argument_list|,
name|pick
argument_list|(
name|o
argument_list|,
name|win
operator|->
name|size
argument_list|()
argument_list|)
operator|-
literal|2
operator|*
name|margin
operator|-
name|handleExtent
argument_list|)
expr_stmt|;
name|int
name|w
init|=
literal|0
decl_stmt|;
name|int
name|h
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|items
operator|.
name|count
argument_list|()
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
name|int
name|prev
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|rowHeight
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|items
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|geomArray
index|[
name|i
index|]
operator|.
name|empty
condition|)
continue|continue;
name|int
name|newSize
init|=
name|size
operator|+
operator|(
name|count
operator|==
literal|0
condition|?
literal|0
else|:
name|spacing
operator|)
operator|+
name|geomArray
index|[
name|i
index|]
operator|.
name|minimumSize
decl_stmt|;
name|rowHeight
operator|=
name|qMax
argument_list|(
name|rowHeight
argument_list|,
name|perp
argument_list|(
name|o
argument_list|,
name|items
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|sizeHint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prev
operator|!=
operator|-
literal|1
operator|&&
name|newSize
operator|>
name|space
condition|)
block|{
if|if
condition|(
name|count
operator|>
literal|1
operator|&&
name|size
operator|+
name|spacing
operator|+
name|extensionExtent
operator|>
name|space
condition|)
block|{
name|size
operator|-=
name|spacing
operator|+
name|geomArray
index|[
name|prev
index|]
operator|.
name|minimumSize
expr_stmt|;
name|i
operator|=
name|prev
expr_stmt|;
block|}
break|break;
block|}
name|size
operator|=
name|newSize
expr_stmt|;
name|prev
operator|=
name|i
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
name|w
operator|=
name|qMax
argument_list|(
name|size
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|h
operator|+=
name|rowHeight
operator|+
name|spacing
expr_stmt|;
block|}
name|w
operator|+=
literal|2
operator|*
name|margin
operator|+
name|handleExtent
operator|+
name|spacing
operator|+
name|extensionExtent
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|min_w
argument_list|)
expr_stmt|;
if|if
condition|(
name|win
operator|!=
literal|0
condition|)
name|w
operator|=
name|qMin
argument_list|(
name|w
argument_list|,
name|pick
argument_list|(
name|o
argument_list|,
name|win
operator|->
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|h
operator|+=
literal|2
operator|*
name|margin
operator|-
name|spacing
expr_stmt|;
comment|//there is no spacing before the first row
name|QSize
name|result
decl_stmt|;
name|rpick
argument_list|(
name|o
argument_list|,
name|result
argument_list|)
operator|=
name|w
expr_stmt|;
name|rperp
argument_list|(
name|o
argument_list|,
name|result
argument_list|)
operator|=
name|h
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|setExpanded
name|void
name|QToolBarLayout
operator|::
name|setExpanded
parameter_list|(
name|bool
name|exp
parameter_list|)
block|{
name|QWidget
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tb
condition|)
return|return;
if|if
condition|(
name|exp
operator|==
name|expanded
operator|&&
operator|!
name|tb
operator|->
name|isWindow
argument_list|()
condition|)
return|return;
name|expanded
operator|=
name|exp
expr_stmt|;
name|extension
operator|->
name|setChecked
argument_list|(
name|expanded
argument_list|)
expr_stmt|;
if|if
condition|(
name|QMainWindow
modifier|*
name|win
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|tb
operator|->
name|parentWidget
argument_list|()
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DOCKWIDGET
name|animating
operator|=
literal|false
expr_stmt|;
else|#
directive|else
name|animating
operator|=
operator|!
name|tb
operator|->
name|isWindow
argument_list|()
operator|&&
name|win
operator|->
name|isAnimated
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QMainWindowLayout
modifier|*
name|layout
init|=
name|qt_mainwindow_layout
argument_list|(
name|win
argument_list|)
decl_stmt|;
if|if
condition|(
name|expanded
condition|)
block|{
name|tb
operator|->
name|raise
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|path
init|=
name|layout
operator|->
name|layoutState
operator|.
name|indexOf
argument_list|(
name|tb
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QRect
name|rect
init|=
name|layout
operator|->
name|layoutState
operator|.
name|itemRect
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|layoutActions
argument_list|(
name|rect
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|layout
operator|->
name|layoutState
operator|.
name|toolBarAreaLayout
operator|.
name|apply
argument_list|(
name|animating
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|minimumSize
name|QSize
name|QToolBarLayout
operator|::
name|minimumSize
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|dirty
condition|)
name|updateGeomArray
argument_list|()
expr_stmt|;
return|return
name|minSize
return|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSize
name|QToolBarLayout
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|dirty
condition|)
name|updateGeomArray
argument_list|()
expr_stmt|;
return|return
name|hint
return|;
block|}
end_function
begin_function
DECL|function|createItem
name|QToolBarItem
modifier|*
name|QToolBarLayout
operator|::
name|createItem
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|bool
name|customWidget
init|=
literal|false
decl_stmt|;
name|bool
name|standardButtonWidget
init|=
literal|false
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
literal|0
decl_stmt|;
name|QToolBar
modifier|*
name|tb
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tb
condition|)
return|return
operator|(
name|QToolBarItem
operator|*
operator|)
literal|0
return|;
if|if
condition|(
name|QWidgetAction
modifier|*
name|widgetAction
init|=
name|qobject_cast
argument_list|<
name|QWidgetAction
operator|*
argument_list|>
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|widget
operator|=
name|widgetAction
operator|->
name|requestWidget
argument_list|(
name|tb
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|!=
literal|0
condition|)
block|{
name|widget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_LayoutUsesWidgetRect
argument_list|)
expr_stmt|;
name|customWidget
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|action
operator|->
name|isSeparator
argument_list|()
condition|)
block|{
name|QToolBarSeparator
modifier|*
name|sep
init|=
operator|new
name|QToolBarSeparator
argument_list|(
name|tb
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|tb
argument_list|,
name|SIGNAL
argument_list|(
name|orientationChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|)
argument_list|)
argument_list|,
name|sep
argument_list|,
name|SLOT
argument_list|(
name|setOrientation
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|=
name|sep
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|widget
condition|)
block|{
name|QToolButton
modifier|*
name|button
init|=
operator|new
name|QToolButton
argument_list|(
name|tb
argument_list|)
decl_stmt|;
name|button
operator|->
name|setAutoRaise
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|button
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|button
operator|->
name|setIconSize
argument_list|(
name|tb
operator|->
name|iconSize
argument_list|()
argument_list|)
expr_stmt|;
name|button
operator|->
name|setToolButtonStyle
argument_list|(
name|tb
operator|->
name|toolButtonStyle
argument_list|()
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|tb
argument_list|,
name|SIGNAL
argument_list|(
name|iconSizeChanged
argument_list|(
name|QSize
argument_list|)
argument_list|)
argument_list|,
name|button
argument_list|,
name|SLOT
argument_list|(
name|setIconSize
argument_list|(
name|QSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|tb
argument_list|,
name|SIGNAL
argument_list|(
name|toolButtonStyleChanged
argument_list|(
name|Qt
operator|::
name|ToolButtonStyle
argument_list|)
argument_list|)
argument_list|,
name|button
argument_list|,
name|SLOT
argument_list|(
name|setToolButtonStyle
argument_list|(
name|Qt
operator|::
name|ToolButtonStyle
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|button
operator|->
name|setDefaultAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|tb
argument_list|,
name|SIGNAL
argument_list|(
name|actionTriggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|widget
operator|=
name|button
expr_stmt|;
name|standardButtonWidget
operator|=
literal|true
expr_stmt|;
block|}
name|widget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QToolBarItem
modifier|*
name|result
init|=
operator|new
name|QToolBarItem
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|standardButtonWidget
condition|)
name|result
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignJustify
argument_list|)
expr_stmt|;
name|result
operator|->
name|customWidget
operator|=
name|customWidget
expr_stmt|;
name|result
operator|->
name|action
operator|=
name|action
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLBAR
end_comment
end_unit
