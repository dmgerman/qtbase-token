begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qcalendarwidget.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CALENDARWIDGET
end_ifndef
begin_include
include|#
directive|include
file|<qabstractitemmodel.h>
end_include
begin_include
include|#
directive|include
file|<qitemdelegate.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qtableview.h>
end_include
begin_include
include|#
directive|include
file|<qlayout.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qtextformat.h>
end_include
begin_include
include|#
directive|include
file|<qheaderview.h>
end_include
begin_include
include|#
directive|include
file|<private/qwidget_p.h>
end_include
begin_include
include|#
directive|include
file|<qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbutton.h>
end_include
begin_include
include|#
directive|include
file|<qlabel.h>
end_include
begin_include
include|#
directive|include
file|<qspinbox.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qbasictimer.h>
end_include
begin_include
include|#
directive|include
file|<qstylepainter.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|enum
type|{
DECL|enumerator|RowCount
name|RowCount
init|=
literal|6
decl_stmt|,
DECL|enumerator|ColumnCount
name|ColumnCount
init|=
literal|7
decl_stmt|,
DECL|enumerator|HeaderColumn
name|HeaderColumn
init|=
literal|0
decl_stmt|,
DECL|enumerator|HeaderRow
name|HeaderRow
init|=
literal|0
decl_stmt|,
DECL|enumerator|MinimumDayOffset
name|MinimumDayOffset
init|=
literal|1
end_decl_stmt
begin_namespace
unit|};
namespace|namespace
block|{
DECL|function|formatNumber
specifier|static
name|QString
name|formatNumber
parameter_list|(
name|int
name|number
parameter_list|,
name|int
name|fieldWidth
parameter_list|)
block|{
return|return
name|QString
operator|::
name|number
argument_list|(
name|number
argument_list|)
operator|.
name|rightJustified
argument_list|(
name|fieldWidth
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
return|;
block|}
DECL|class|QCalendarDateSectionValidator
class|class
name|QCalendarDateSectionValidator
block|{
public|public:
DECL|enum|Section
enum|enum
name|Section
block|{
DECL|enumerator|NextSection
name|NextSection
block|,
DECL|enumerator|ThisSection
name|ThisSection
block|,
DECL|enumerator|PrevSection
name|PrevSection
block|}
enum|;
DECL|function|QCalendarDateSectionValidator
name|QCalendarDateSectionValidator
parameter_list|()
block|{}
DECL|function|~QCalendarDateSectionValidator
specifier|virtual
name|~
name|QCalendarDateSectionValidator
parameter_list|()
block|{}
specifier|virtual
name|Section
name|handleKey
parameter_list|(
name|int
name|key
parameter_list|)
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|QDate
name|applyToDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|void
name|setDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|QString
name|text
parameter_list|()
specifier|const
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|QString
name|text
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|int
name|repeat
parameter_list|)
specifier|const
function_decl|=
literal|0
function_decl|;
DECL|member|m_locale
name|QLocale
name|m_locale
decl_stmt|;
protected|protected:
specifier|static
name|QString
name|highlightString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|int
name|pos
parameter_list|)
function_decl|;
private|private:
block|}
class|;
DECL|function|highlightString
name|QString
name|QCalendarDateSectionValidator
operator|::
name|highlightString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
if|if
condition|(
name|pos
operator|==
literal|0
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"<b>"
argument_list|)
operator|+
name|str
operator|+
name|QLatin1String
argument_list|(
literal|"</b>"
argument_list|)
return|;
name|int
name|startPos
init|=
name|str
operator|.
name|length
argument_list|()
operator|-
name|pos
decl_stmt|;
return|return
name|str
operator|.
name|midRef
argument_list|(
literal|0
argument_list|,
name|startPos
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"<b>"
argument_list|)
operator|+
name|str
operator|.
name|midRef
argument_list|(
name|startPos
argument_list|,
name|pos
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"</b>"
argument_list|)
return|;
block|}
DECL|class|QCalendarDayValidator
class|class
name|QCalendarDayValidator
super|:
specifier|public
name|QCalendarDateSectionValidator
block|{
public|public:
name|QCalendarDayValidator
parameter_list|()
constructor_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|Section
name|handleKey
parameter_list|(
name|int
name|key
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|QDate
name|applyToDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|void
name|setDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|QString
name|text
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|QString
name|text
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|int
name|repeat
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
private|private:
DECL|member|m_pos
name|int
name|m_pos
decl_stmt|;
DECL|member|m_day
name|int
name|m_day
decl_stmt|;
DECL|member|m_oldDay
name|int
name|m_oldDay
decl_stmt|;
block|}
class|;
DECL|function|QCalendarDayValidator
name|QCalendarDayValidator
operator|::
name|QCalendarDayValidator
parameter_list|()
member_init_list|:
name|QCalendarDateSectionValidator
argument_list|()
member_init_list|,
name|m_pos
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_day
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|m_oldDay
argument_list|(
literal|1
argument_list|)
block|{ }
DECL|function|handleKey
name|QCalendarDateSectionValidator
operator|::
name|Section
name|QCalendarDayValidator
operator|::
name|handleKey
parameter_list|(
name|int
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Right
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_Left
condition|)
block|{
name|m_pos
operator|=
literal|0
expr_stmt|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Up
condition|)
block|{
name|m_pos
operator|=
literal|0
expr_stmt|;
operator|++
name|m_day
expr_stmt|;
if|if
condition|(
name|m_day
operator|>
literal|31
condition|)
name|m_day
operator|=
literal|1
expr_stmt|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Down
condition|)
block|{
name|m_pos
operator|=
literal|0
expr_stmt|;
operator|--
name|m_day
expr_stmt|;
if|if
condition|(
name|m_day
operator|<
literal|1
condition|)
name|m_day
operator|=
literal|31
expr_stmt|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Back
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_Backspace
condition|)
block|{
operator|--
name|m_pos
expr_stmt|;
if|if
condition|(
name|m_pos
operator|<
literal|0
condition|)
name|m_pos
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|m_pos
operator|==
literal|0
condition|)
name|m_day
operator|=
name|m_oldDay
expr_stmt|;
else|else
name|m_day
operator|=
name|m_day
operator|/
literal|10
expr_stmt|;
comment|//m_day = m_oldDay / 10 * 10 + m_day / 10;
if|if
condition|(
name|m_pos
operator|==
literal|0
condition|)
return|return
name|QCalendarDateSectionValidator
operator|::
name|PrevSection
return|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
if|if
condition|(
name|key
argument_list|<
name|Qt
operator|::
name|Key_0
operator|||
name|key
argument_list|>
name|Qt
operator|::
name|Key_9
condition|)
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
name|int
name|pressedKey
init|=
name|key
operator|-
name|Qt
operator|::
name|Key_0
decl_stmt|;
if|if
condition|(
name|m_pos
operator|==
literal|0
condition|)
name|m_day
operator|=
name|pressedKey
expr_stmt|;
else|else
name|m_day
operator|=
name|m_day
operator|%
literal|10
operator|*
literal|10
operator|+
name|pressedKey
expr_stmt|;
if|if
condition|(
name|m_day
operator|>
literal|31
condition|)
name|m_day
operator|=
literal|31
expr_stmt|;
operator|++
name|m_pos
expr_stmt|;
if|if
condition|(
name|m_pos
operator|>
literal|1
condition|)
block|{
name|m_pos
operator|=
literal|0
expr_stmt|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|NextSection
return|;
block|}
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
DECL|function|applyToDate
name|QDate
name|QCalendarDayValidator
operator|::
name|applyToDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
block|{
name|int
name|day
init|=
name|m_day
decl_stmt|;
if|if
condition|(
name|day
operator|<
literal|1
condition|)
name|day
operator|=
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|day
operator|>
literal|31
condition|)
name|day
operator|=
literal|31
expr_stmt|;
if|if
condition|(
name|day
operator|>
name|date
operator|.
name|daysInMonth
argument_list|()
condition|)
name|day
operator|=
name|date
operator|.
name|daysInMonth
argument_list|()
expr_stmt|;
return|return
name|QDate
argument_list|(
name|date
operator|.
name|year
argument_list|()
argument_list|,
name|date
operator|.
name|month
argument_list|()
argument_list|,
name|day
argument_list|)
return|;
block|}
DECL|function|setDate
name|void
name|QCalendarDayValidator
operator|::
name|setDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|m_day
operator|=
name|m_oldDay
operator|=
name|date
operator|.
name|day
argument_list|()
expr_stmt|;
name|m_pos
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|text
name|QString
name|QCalendarDayValidator
operator|::
name|text
parameter_list|()
specifier|const
block|{
return|return
name|highlightString
argument_list|(
name|formatNumber
argument_list|(
name|m_day
argument_list|,
literal|2
argument_list|)
argument_list|,
name|m_pos
argument_list|)
return|;
block|}
DECL|function|text
name|QString
name|QCalendarDayValidator
operator|::
name|text
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|int
name|repeat
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|repeat
operator|<=
literal|1
condition|)
block|{
return|return
name|QString
operator|::
name|number
argument_list|(
name|date
operator|.
name|day
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|repeat
operator|==
literal|2
condition|)
block|{
return|return
name|formatNumber
argument_list|(
name|date
operator|.
name|day
argument_list|()
argument_list|,
literal|2
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|repeat
operator|==
literal|3
condition|)
block|{
return|return
name|m_locale
operator|.
name|dayName
argument_list|(
name|date
operator|.
name|dayOfWeek
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|repeat
operator|>=
literal|4
condition|)
block|{
return|return
name|m_locale
operator|.
name|dayName
argument_list|(
name|date
operator|.
name|dayOfWeek
argument_list|()
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
comment|//////////////////////////////////
DECL|class|QCalendarMonthValidator
class|class
name|QCalendarMonthValidator
super|:
specifier|public
name|QCalendarDateSectionValidator
block|{
public|public:
name|QCalendarMonthValidator
parameter_list|()
constructor_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|Section
name|handleKey
parameter_list|(
name|int
name|key
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|QDate
name|applyToDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|void
name|setDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|QString
name|text
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|QString
name|text
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|int
name|repeat
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
private|private:
DECL|member|m_pos
name|int
name|m_pos
decl_stmt|;
DECL|member|m_month
name|int
name|m_month
decl_stmt|;
DECL|member|m_oldMonth
name|int
name|m_oldMonth
decl_stmt|;
block|}
class|;
DECL|function|QCalendarMonthValidator
name|QCalendarMonthValidator
operator|::
name|QCalendarMonthValidator
parameter_list|()
member_init_list|:
name|QCalendarDateSectionValidator
argument_list|()
member_init_list|,
name|m_pos
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_month
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|m_oldMonth
argument_list|(
literal|1
argument_list|)
block|{ }
DECL|function|handleKey
name|QCalendarDateSectionValidator
operator|::
name|Section
name|QCalendarMonthValidator
operator|::
name|handleKey
parameter_list|(
name|int
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Right
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_Left
condition|)
block|{
name|m_pos
operator|=
literal|0
expr_stmt|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Up
condition|)
block|{
name|m_pos
operator|=
literal|0
expr_stmt|;
operator|++
name|m_month
expr_stmt|;
if|if
condition|(
name|m_month
operator|>
literal|12
condition|)
name|m_month
operator|=
literal|1
expr_stmt|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Down
condition|)
block|{
name|m_pos
operator|=
literal|0
expr_stmt|;
operator|--
name|m_month
expr_stmt|;
if|if
condition|(
name|m_month
operator|<
literal|1
condition|)
name|m_month
operator|=
literal|12
expr_stmt|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Back
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_Backspace
condition|)
block|{
operator|--
name|m_pos
expr_stmt|;
if|if
condition|(
name|m_pos
operator|<
literal|0
condition|)
name|m_pos
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|m_pos
operator|==
literal|0
condition|)
name|m_month
operator|=
name|m_oldMonth
expr_stmt|;
else|else
name|m_month
operator|=
name|m_month
operator|/
literal|10
expr_stmt|;
comment|//m_month = m_oldMonth / 10 * 10 + m_month / 10;
if|if
condition|(
name|m_pos
operator|==
literal|0
condition|)
return|return
name|QCalendarDateSectionValidator
operator|::
name|PrevSection
return|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
if|if
condition|(
name|key
argument_list|<
name|Qt
operator|::
name|Key_0
operator|||
name|key
argument_list|>
name|Qt
operator|::
name|Key_9
condition|)
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
name|int
name|pressedKey
init|=
name|key
operator|-
name|Qt
operator|::
name|Key_0
decl_stmt|;
if|if
condition|(
name|m_pos
operator|==
literal|0
condition|)
name|m_month
operator|=
name|pressedKey
expr_stmt|;
else|else
name|m_month
operator|=
name|m_month
operator|%
literal|10
operator|*
literal|10
operator|+
name|pressedKey
expr_stmt|;
if|if
condition|(
name|m_month
operator|>
literal|12
condition|)
name|m_month
operator|=
literal|12
expr_stmt|;
operator|++
name|m_pos
expr_stmt|;
if|if
condition|(
name|m_pos
operator|>
literal|1
condition|)
block|{
name|m_pos
operator|=
literal|0
expr_stmt|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|NextSection
return|;
block|}
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
DECL|function|applyToDate
name|QDate
name|QCalendarMonthValidator
operator|::
name|applyToDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
block|{
name|int
name|month
init|=
name|m_month
decl_stmt|;
if|if
condition|(
name|month
operator|<
literal|1
condition|)
name|month
operator|=
literal|1
expr_stmt|;
elseif|else
if|if
condition|(
name|month
operator|>
literal|12
condition|)
name|month
operator|=
literal|12
expr_stmt|;
name|QDate
name|newDate
argument_list|(
name|date
operator|.
name|year
argument_list|()
argument_list|,
name|m_month
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|day
init|=
name|date
operator|.
name|day
argument_list|()
decl_stmt|;
if|if
condition|(
name|day
operator|>
name|newDate
operator|.
name|daysInMonth
argument_list|()
condition|)
name|day
operator|=
name|newDate
operator|.
name|daysInMonth
argument_list|()
expr_stmt|;
return|return
name|QDate
argument_list|(
name|date
operator|.
name|year
argument_list|()
argument_list|,
name|month
argument_list|,
name|day
argument_list|)
return|;
block|}
DECL|function|setDate
name|void
name|QCalendarMonthValidator
operator|::
name|setDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|m_month
operator|=
name|m_oldMonth
operator|=
name|date
operator|.
name|month
argument_list|()
expr_stmt|;
name|m_pos
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|text
name|QString
name|QCalendarMonthValidator
operator|::
name|text
parameter_list|()
specifier|const
block|{
return|return
name|highlightString
argument_list|(
name|formatNumber
argument_list|(
name|m_month
argument_list|,
literal|2
argument_list|)
argument_list|,
name|m_pos
argument_list|)
return|;
block|}
DECL|function|text
name|QString
name|QCalendarMonthValidator
operator|::
name|text
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|int
name|repeat
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|repeat
operator|<=
literal|1
condition|)
block|{
return|return
name|QString
operator|::
name|number
argument_list|(
name|date
operator|.
name|month
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|repeat
operator|==
literal|2
condition|)
block|{
return|return
name|formatNumber
argument_list|(
name|date
operator|.
name|month
argument_list|()
argument_list|,
literal|2
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|repeat
operator|==
literal|3
condition|)
block|{
return|return
name|m_locale
operator|.
name|standaloneMonthName
argument_list|(
name|date
operator|.
name|month
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
block|}
else|else
comment|/*if (repeat>= 4)*/
block|{
return|return
name|m_locale
operator|.
name|standaloneMonthName
argument_list|(
name|date
operator|.
name|month
argument_list|()
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
block|}
block|}
comment|//////////////////////////////////
DECL|class|QCalendarYearValidator
class|class
name|QCalendarYearValidator
super|:
specifier|public
name|QCalendarDateSectionValidator
block|{
public|public:
name|QCalendarYearValidator
parameter_list|()
constructor_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|Section
name|handleKey
parameter_list|(
name|int
name|key
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|QDate
name|applyToDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|void
name|setDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|QString
name|text
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|QString
name|text
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|int
name|repeat
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
private|private:
name|int
name|pow10
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
DECL|member|m_pos
name|int
name|m_pos
decl_stmt|;
DECL|member|m_year
name|int
name|m_year
decl_stmt|;
DECL|member|m_oldYear
name|int
name|m_oldYear
decl_stmt|;
block|}
class|;
DECL|function|QCalendarYearValidator
name|QCalendarYearValidator
operator|::
name|QCalendarYearValidator
parameter_list|()
member_init_list|:
name|QCalendarDateSectionValidator
argument_list|()
member_init_list|,
name|m_pos
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_year
argument_list|(
literal|2000
argument_list|)
member_init_list|,
name|m_oldYear
argument_list|(
literal|2000
argument_list|)
block|{ }
DECL|function|pow10
name|int
name|QCalendarYearValidator
operator|::
name|pow10
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|int
name|power
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
name|power
operator|*=
literal|10
expr_stmt|;
return|return
name|power
return|;
block|}
DECL|function|handleKey
name|QCalendarDateSectionValidator
operator|::
name|Section
name|QCalendarYearValidator
operator|::
name|handleKey
parameter_list|(
name|int
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Right
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_Left
condition|)
block|{
name|m_pos
operator|=
literal|0
expr_stmt|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Up
condition|)
block|{
name|m_pos
operator|=
literal|0
expr_stmt|;
operator|++
name|m_year
expr_stmt|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Down
condition|)
block|{
name|m_pos
operator|=
literal|0
expr_stmt|;
operator|--
name|m_year
expr_stmt|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Back
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_Backspace
condition|)
block|{
operator|--
name|m_pos
expr_stmt|;
if|if
condition|(
name|m_pos
operator|<
literal|0
condition|)
name|m_pos
operator|=
literal|3
expr_stmt|;
name|int
name|pow
init|=
name|pow10
argument_list|(
name|m_pos
argument_list|)
decl_stmt|;
name|m_year
operator|=
name|m_oldYear
operator|/
name|pow
operator|*
name|pow
operator|+
name|m_year
operator|%
operator|(
name|pow
operator|*
literal|10
operator|)
operator|/
literal|10
expr_stmt|;
if|if
condition|(
name|m_pos
operator|==
literal|0
condition|)
return|return
name|QCalendarDateSectionValidator
operator|::
name|PrevSection
return|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
if|if
condition|(
name|key
argument_list|<
name|Qt
operator|::
name|Key_0
operator|||
name|key
argument_list|>
name|Qt
operator|::
name|Key_9
condition|)
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
name|int
name|pressedKey
init|=
name|key
operator|-
name|Qt
operator|::
name|Key_0
decl_stmt|;
name|int
name|pow
init|=
name|pow10
argument_list|(
name|m_pos
argument_list|)
decl_stmt|;
name|m_year
operator|=
name|m_year
operator|/
operator|(
name|pow
operator|*
literal|10
operator|)
operator|*
operator|(
name|pow
operator|*
literal|10
operator|)
operator|+
name|m_year
operator|%
name|pow
operator|*
literal|10
operator|+
name|pressedKey
expr_stmt|;
operator|++
name|m_pos
expr_stmt|;
if|if
condition|(
name|m_pos
operator|>
literal|3
condition|)
block|{
name|m_pos
operator|=
literal|0
expr_stmt|;
return|return
name|QCalendarDateSectionValidator
operator|::
name|NextSection
return|;
block|}
return|return
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
return|;
block|}
DECL|function|applyToDate
name|QDate
name|QCalendarYearValidator
operator|::
name|applyToDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
block|{
name|int
name|year
init|=
name|m_year
decl_stmt|;
if|if
condition|(
name|year
operator|<
literal|1
condition|)
name|year
operator|=
literal|1
expr_stmt|;
name|QDate
name|newDate
argument_list|(
name|year
argument_list|,
name|date
operator|.
name|month
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|day
init|=
name|date
operator|.
name|day
argument_list|()
decl_stmt|;
if|if
condition|(
name|day
operator|>
name|newDate
operator|.
name|daysInMonth
argument_list|()
condition|)
name|day
operator|=
name|newDate
operator|.
name|daysInMonth
argument_list|()
expr_stmt|;
return|return
name|QDate
argument_list|(
name|year
argument_list|,
name|date
operator|.
name|month
argument_list|()
argument_list|,
name|day
argument_list|)
return|;
block|}
DECL|function|setDate
name|void
name|QCalendarYearValidator
operator|::
name|setDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|m_year
operator|=
name|m_oldYear
operator|=
name|date
operator|.
name|year
argument_list|()
expr_stmt|;
name|m_pos
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|text
name|QString
name|QCalendarYearValidator
operator|::
name|text
parameter_list|()
specifier|const
block|{
return|return
name|highlightString
argument_list|(
name|formatNumber
argument_list|(
name|m_year
argument_list|,
literal|4
argument_list|)
argument_list|,
name|m_pos
argument_list|)
return|;
block|}
DECL|function|text
name|QString
name|QCalendarYearValidator
operator|::
name|text
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|int
name|repeat
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|repeat
operator|<
literal|4
condition|)
return|return
name|formatNumber
argument_list|(
name|date
operator|.
name|year
argument_list|()
operator|%
literal|100
argument_list|,
literal|2
argument_list|)
return|;
return|return
name|QString
operator|::
name|number
argument_list|(
name|date
operator|.
name|year
argument_list|()
argument_list|)
return|;
block|}
comment|///////////////////////////////////
DECL|struct|SectionToken
struct|struct
name|SectionToken
block|{
DECL|function|SectionToken
name|Q_DECL_CONSTEXPR
name|SectionToken
parameter_list|()
member_init_list|:
name|validator
argument_list|(
name|Q_NULLPTR
argument_list|)
member_init_list|,
name|repeat
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|SectionToken
name|Q_DECL_CONSTEXPR
name|SectionToken
parameter_list|(
name|QCalendarDateSectionValidator
modifier|*
name|v
parameter_list|,
name|int
name|rep
parameter_list|)
member_init_list|:
name|validator
argument_list|(
name|v
argument_list|)
member_init_list|,
name|repeat
argument_list|(
name|rep
argument_list|)
block|{}
DECL|member|validator
name|QCalendarDateSectionValidator
modifier|*
name|validator
decl_stmt|;
DECL|member|repeat
name|int
name|repeat
decl_stmt|;
DECL|function|isNull
name|Q_DECL_CONSTEXPR
name|bool
name|isNull
parameter_list|()
specifier|const
block|{
return|return
operator|!
name|validator
return|;
block|}
block|}
struct|;
block|}
end_namespace
begin_comment
comment|// unnamed namespace
end_comment
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|SectionToken
argument_list|,
name|Q_PRIMITIVE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_namespace
namespace|namespace
block|{
DECL|class|QCalendarDateValidator
class|class
name|QCalendarDateValidator
block|{
public|public:
name|QCalendarDateValidator
parameter_list|()
constructor_decl|;
name|~
name|QCalendarDateValidator
parameter_list|()
destructor_decl|;
name|void
name|handleKeyEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|keyEvent
parameter_list|)
function_decl|;
name|QString
name|currentText
parameter_list|()
specifier|const
function_decl|;
DECL|function|currentDate
name|QDate
name|currentDate
parameter_list|()
specifier|const
block|{
return|return
name|m_currentDate
return|;
block|}
name|void
name|setFormat
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
function_decl|;
name|void
name|setInitialDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
function_decl|;
name|void
name|setLocale
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
function_decl|;
private|private:
name|void
name|toNextToken
parameter_list|()
function_decl|;
name|void
name|toPreviousToken
parameter_list|()
function_decl|;
name|void
name|applyToDate
parameter_list|()
function_decl|;
name|int
name|countRepeat
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|int
name|index
parameter_list|)
specifier|const
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
DECL|member|m_separators
name|QStringList
name|m_separators
decl_stmt|;
DECL|member|m_tokens
name|QVector
argument_list|<
name|SectionToken
argument_list|>
name|m_tokens
decl_stmt|;
DECL|member|m_yearValidator
name|QCalendarYearValidator
name|m_yearValidator
decl_stmt|;
DECL|member|m_monthValidator
name|QCalendarMonthValidator
name|m_monthValidator
decl_stmt|;
DECL|member|m_dayValidator
name|QCalendarDayValidator
name|m_dayValidator
decl_stmt|;
DECL|member|m_currentToken
name|int
name|m_currentToken
decl_stmt|;
DECL|member|m_initialDate
name|QDate
name|m_initialDate
decl_stmt|;
DECL|member|m_currentDate
name|QDate
name|m_currentDate
decl_stmt|;
DECL|member|m_lastSectionMove
name|QCalendarDateSectionValidator
operator|::
name|Section
name|m_lastSectionMove
decl_stmt|;
block|}
class|;
DECL|function|QCalendarDateValidator
name|QCalendarDateValidator
operator|::
name|QCalendarDateValidator
parameter_list|()
member_init_list|:
name|m_currentToken
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|m_initialDate
argument_list|(
name|QDate
operator|::
name|currentDate
argument_list|()
argument_list|)
member_init_list|,
name|m_currentDate
argument_list|(
name|m_initialDate
argument_list|)
member_init_list|,
name|m_lastSectionMove
argument_list|(
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
argument_list|)
block|{ }
DECL|function|setLocale
name|void
name|QCalendarDateValidator
operator|::
name|setLocale
parameter_list|(
specifier|const
name|QLocale
modifier|&
name|locale
parameter_list|)
block|{
name|m_yearValidator
operator|.
name|m_locale
operator|=
name|locale
expr_stmt|;
name|m_monthValidator
operator|.
name|m_locale
operator|=
name|locale
expr_stmt|;
name|m_dayValidator
operator|.
name|m_locale
operator|=
name|locale
expr_stmt|;
block|}
DECL|function|~QCalendarDateValidator
name|QCalendarDateValidator
operator|::
name|~
name|QCalendarDateValidator
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// from qdatetime.cpp
DECL|function|countRepeat
name|int
name|QCalendarDateValidator
operator|::
name|countRepeat
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|int
name|index
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|str
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|1
decl_stmt|;
specifier|const
name|QChar
name|ch
init|=
name|str
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
while|while
condition|(
name|index
operator|+
name|count
operator|<
name|str
operator|.
name|size
argument_list|()
operator|&&
name|str
operator|.
name|at
argument_list|(
name|index
operator|+
name|count
argument_list|)
operator|==
name|ch
condition|)
operator|++
name|count
expr_stmt|;
return|return
name|count
return|;
block|}
DECL|function|setInitialDate
name|void
name|QCalendarDateValidator
operator|::
name|setInitialDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|m_yearValidator
operator|.
name|setDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|m_monthValidator
operator|.
name|setDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|m_dayValidator
operator|.
name|setDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|m_initialDate
operator|=
name|date
expr_stmt|;
name|m_currentDate
operator|=
name|date
expr_stmt|;
name|m_lastSectionMove
operator|=
name|QCalendarDateSectionValidator
operator|::
name|ThisSection
expr_stmt|;
block|}
DECL|function|currentText
name|QString
name|QCalendarDateValidator
operator|::
name|currentText
parameter_list|()
specifier|const
block|{
name|QString
name|str
decl_stmt|;
specifier|const
name|int
name|numSeps
init|=
name|m_separators
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|const
name|int
name|numTokens
init|=
name|m_tokens
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSeps
condition|;
operator|++
name|i
control|)
block|{
name|str
operator|+=
name|m_separators
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|numTokens
condition|)
block|{
specifier|const
name|SectionToken
modifier|&
name|token
init|=
name|m_tokens
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|m_currentToken
condition|)
name|str
operator|+=
name|token
operator|.
name|validator
operator|->
name|text
argument_list|()
expr_stmt|;
else|else
name|str
operator|+=
name|token
operator|.
name|validator
operator|->
name|text
argument_list|(
name|m_currentDate
argument_list|,
name|token
operator|.
name|repeat
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|str
return|;
block|}
DECL|function|clear
name|void
name|QCalendarDateValidator
operator|::
name|clear
parameter_list|()
block|{
name|m_tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_separators
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_currentToken
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|function|setFormat
name|void
name|QCalendarDateValidator
operator|::
name|setFormat
parameter_list|(
specifier|const
name|QString
modifier|&
name|format
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
specifier|const
name|QLatin1Char
name|quote
argument_list|(
literal|'\''
argument_list|)
decl_stmt|;
name|bool
name|quoting
init|=
literal|false
decl_stmt|;
name|QString
name|separator
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|format
operator|.
name|size
argument_list|()
condition|)
block|{
name|QString
name|mid
init|=
name|format
operator|.
name|mid
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|mid
operator|.
name|startsWith
argument_list|(
name|quote
argument_list|)
condition|)
block|{
name|quoting
operator|=
operator|!
name|quoting
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QChar
name|nextChar
init|=
name|format
operator|.
name|at
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|quoting
condition|)
block|{
name|separator
operator|+=
name|nextChar
expr_stmt|;
name|quoting
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|SectionToken
name|token
decl_stmt|;
if|if
condition|(
name|nextChar
operator|==
name|QLatin1Char
argument_list|(
literal|'d'
argument_list|)
condition|)
block|{
name|offset
operator|=
name|qMin
argument_list|(
literal|4
argument_list|,
name|countRepeat
argument_list|(
name|format
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|SectionToken
argument_list|(
operator|&
name|m_dayValidator
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextChar
operator|==
name|QLatin1Char
argument_list|(
literal|'M'
argument_list|)
condition|)
block|{
name|offset
operator|=
name|qMin
argument_list|(
literal|4
argument_list|,
name|countRepeat
argument_list|(
name|format
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|SectionToken
argument_list|(
operator|&
name|m_monthValidator
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextChar
operator|==
name|QLatin1Char
argument_list|(
literal|'y'
argument_list|)
condition|)
block|{
name|offset
operator|=
name|qMin
argument_list|(
literal|4
argument_list|,
name|countRepeat
argument_list|(
name|format
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|SectionToken
argument_list|(
operator|&
name|m_yearValidator
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|separator
operator|+=
name|nextChar
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|token
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|m_tokens
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|m_separators
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|separator
operator|=
name|QString
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_currentToken
operator|<
literal|0
condition|)
name|m_currentToken
operator|=
name|m_tokens
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
name|pos
operator|+=
name|offset
expr_stmt|;
block|}
name|m_separators
operator|+=
name|separator
expr_stmt|;
block|}
DECL|function|applyToDate
name|void
name|QCalendarDateValidator
operator|::
name|applyToDate
parameter_list|()
block|{
name|m_currentDate
operator|=
name|m_yearValidator
operator|.
name|applyToDate
argument_list|(
name|m_currentDate
argument_list|)
expr_stmt|;
name|m_currentDate
operator|=
name|m_monthValidator
operator|.
name|applyToDate
argument_list|(
name|m_currentDate
argument_list|)
expr_stmt|;
name|m_currentDate
operator|=
name|m_dayValidator
operator|.
name|applyToDate
argument_list|(
name|m_currentDate
argument_list|)
expr_stmt|;
block|}
DECL|function|toNextToken
name|void
name|QCalendarDateValidator
operator|::
name|toNextToken
parameter_list|()
block|{
if|if
condition|(
name|m_currentToken
operator|<
literal|0
condition|)
return|return;
operator|++
name|m_currentToken
expr_stmt|;
name|m_currentToken
operator|%=
name|m_tokens
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
DECL|function|toPreviousToken
name|void
name|QCalendarDateValidator
operator|::
name|toPreviousToken
parameter_list|()
block|{
if|if
condition|(
name|m_currentToken
operator|<
literal|0
condition|)
return|return;
operator|--
name|m_currentToken
expr_stmt|;
name|m_currentToken
operator|%=
name|m_tokens
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
DECL|function|handleKeyEvent
name|void
name|QCalendarDateValidator
operator|::
name|handleKeyEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|keyEvent
parameter_list|)
block|{
if|if
condition|(
name|m_currentToken
operator|<
literal|0
condition|)
return|return;
name|int
name|key
init|=
name|keyEvent
operator|->
name|key
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_lastSectionMove
operator|==
name|QCalendarDateSectionValidator
operator|::
name|NextSection
condition|)
block|{
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Back
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_Backspace
condition|)
name|toPreviousToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Right
condition|)
name|toNextToken
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Left
condition|)
name|toPreviousToken
argument_list|()
expr_stmt|;
name|m_lastSectionMove
operator|=
name|m_tokens
operator|.
name|at
argument_list|(
name|m_currentToken
argument_list|)
operator|.
name|validator
operator|->
name|handleKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|applyToDate
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_lastSectionMove
operator|==
name|QCalendarDateSectionValidator
operator|::
name|NextSection
condition|)
name|toNextToken
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|m_lastSectionMove
operator|==
name|QCalendarDateSectionValidator
operator|::
name|PrevSection
condition|)
name|toPreviousToken
argument_list|()
expr_stmt|;
block|}
comment|//////////////////////////////////
DECL|class|QCalendarTextNavigator
class|class
name|QCalendarTextNavigator
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|QCalendarTextNavigator
name|QCalendarTextNavigator
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_dateText
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_dateFrame
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_dateValidator
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_widget
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_editDelay
argument_list|(
literal|1500
argument_list|)
member_init_list|,
name|m_date
argument_list|(
name|QDate
operator|::
name|currentDate
argument_list|()
argument_list|)
block|{ }
name|QWidget
modifier|*
name|widget
parameter_list|()
specifier|const
function_decl|;
name|void
name|setWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
function_decl|;
name|int
name|dateEditAcceptDelay
parameter_list|()
specifier|const
function_decl|;
name|void
name|setDateEditAcceptDelay
parameter_list|(
name|int
name|delay
parameter_list|)
function_decl|;
name|QDate
name|date
parameter_list|()
specifier|const
function_decl|;
name|void
name|setDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
signals|signals:
name|void
name|dateChanged
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
function_decl|;
name|void
name|editingFinished
parameter_list|()
function_decl|;
private|private:
name|void
name|applyDate
parameter_list|()
function_decl|;
name|void
name|updateDateLabel
parameter_list|()
function_decl|;
name|void
name|createDateLabel
parameter_list|()
function_decl|;
name|void
name|removeDateLabel
parameter_list|()
function_decl|;
DECL|member|m_dateText
name|QLabel
modifier|*
name|m_dateText
decl_stmt|;
DECL|member|m_dateFrame
name|QFrame
modifier|*
name|m_dateFrame
decl_stmt|;
DECL|member|m_acceptTimer
name|QBasicTimer
name|m_acceptTimer
decl_stmt|;
DECL|member|m_dateValidator
name|QCalendarDateValidator
modifier|*
name|m_dateValidator
decl_stmt|;
DECL|member|m_widget
name|QWidget
modifier|*
name|m_widget
decl_stmt|;
DECL|member|m_editDelay
name|int
name|m_editDelay
decl_stmt|;
DECL|member|m_date
name|QDate
name|m_date
decl_stmt|;
block|}
class|;
DECL|function|widget
name|QWidget
modifier|*
name|QCalendarTextNavigator
operator|::
name|widget
parameter_list|()
specifier|const
block|{
return|return
name|m_widget
return|;
block|}
DECL|function|setWidget
name|void
name|QCalendarTextNavigator
operator|::
name|setWidget
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|m_widget
operator|=
name|widget
expr_stmt|;
block|}
DECL|function|date
name|QDate
name|QCalendarTextNavigator
operator|::
name|date
parameter_list|()
specifier|const
block|{
return|return
name|m_date
return|;
block|}
DECL|function|setDate
name|void
name|QCalendarTextNavigator
operator|::
name|setDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|m_date
operator|=
name|date
expr_stmt|;
block|}
DECL|function|updateDateLabel
name|void
name|QCalendarTextNavigator
operator|::
name|updateDateLabel
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_widget
condition|)
return|return;
name|m_acceptTimer
operator|.
name|start
argument_list|(
name|m_editDelay
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|m_dateText
operator|->
name|setText
argument_list|(
name|m_dateValidator
operator|->
name|currentText
argument_list|()
argument_list|)
expr_stmt|;
name|QSize
name|s
init|=
name|m_dateFrame
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|QRect
name|r
init|=
name|m_widget
operator|->
name|geometry
argument_list|()
decl_stmt|;
comment|// later, just the table section
name|QRect
name|newRect
argument_list|(
operator|(
name|r
operator|.
name|width
argument_list|()
operator|-
name|s
operator|.
name|width
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|r
operator|.
name|height
argument_list|()
operator|-
name|s
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
name|s
operator|.
name|width
argument_list|()
argument_list|,
name|s
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|m_dateFrame
operator|->
name|setGeometry
argument_list|(
name|newRect
argument_list|)
expr_stmt|;
comment|// need to set palette after geometry update as phonestyle sets transparency
comment|// effect in move event.
name|QPalette
name|p
init|=
name|m_dateFrame
operator|->
name|palette
argument_list|()
decl_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|m_dateFrame
operator|->
name|window
argument_list|()
operator|->
name|palette
argument_list|()
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
name|m_dateFrame
operator|->
name|setPalette
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|m_dateFrame
operator|->
name|raise
argument_list|()
expr_stmt|;
name|m_dateFrame
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
DECL|function|applyDate
name|void
name|QCalendarTextNavigator
operator|::
name|applyDate
parameter_list|()
block|{
name|QDate
name|date
init|=
name|m_dateValidator
operator|->
name|currentDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_date
operator|==
name|date
condition|)
return|return;
name|m_date
operator|=
name|date
expr_stmt|;
emit|emit
name|dateChanged
argument_list|(
name|date
argument_list|)
emit|;
block|}
DECL|function|createDateLabel
name|void
name|QCalendarTextNavigator
operator|::
name|createDateLabel
parameter_list|()
block|{
if|if
condition|(
name|m_dateFrame
condition|)
return|return;
name|m_dateFrame
operator|=
operator|new
name|QFrame
argument_list|(
name|m_widget
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|vl
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|m_dateText
operator|=
operator|new
name|QLabel
expr_stmt|;
name|vl
operator|->
name|addWidget
argument_list|(
name|m_dateText
argument_list|)
expr_stmt|;
name|m_dateFrame
operator|->
name|setLayout
argument_list|(
name|vl
argument_list|)
expr_stmt|;
name|m_dateFrame
operator|->
name|setFrameShadow
argument_list|(
name|QFrame
operator|::
name|Plain
argument_list|)
expr_stmt|;
name|m_dateFrame
operator|->
name|setFrameShape
argument_list|(
name|QFrame
operator|::
name|Box
argument_list|)
expr_stmt|;
name|m_dateValidator
operator|=
operator|new
name|QCalendarDateValidator
argument_list|()
expr_stmt|;
name|m_dateValidator
operator|->
name|setLocale
argument_list|(
name|m_widget
operator|->
name|locale
argument_list|()
argument_list|)
expr_stmt|;
name|m_dateValidator
operator|->
name|setFormat
argument_list|(
name|m_widget
operator|->
name|locale
argument_list|()
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
name|m_dateValidator
operator|->
name|setInitialDate
argument_list|(
name|m_date
argument_list|)
expr_stmt|;
name|m_dateFrame
operator|->
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m_dateFrame
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
block|}
DECL|function|removeDateLabel
name|void
name|QCalendarTextNavigator
operator|::
name|removeDateLabel
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_dateFrame
condition|)
return|return;
name|m_acceptTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|m_dateFrame
operator|->
name|hide
argument_list|()
expr_stmt|;
name|m_dateFrame
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
operator|delete
name|m_dateValidator
expr_stmt|;
name|m_dateFrame
operator|=
literal|0
expr_stmt|;
name|m_dateText
operator|=
literal|0
expr_stmt|;
name|m_dateValidator
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|eventFilter
name|bool
name|QCalendarTextNavigator
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|m_widget
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyPress
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyRelease
condition|)
block|{
name|QKeyEvent
modifier|*
name|ke
init|=
operator|(
name|QKeyEvent
operator|*
operator|)
name|e
decl_stmt|;
if|if
condition|(
operator|(
name|ke
operator|->
name|text
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|ke
operator|->
name|text
argument_list|()
index|[
literal|0
index|]
operator|.
name|isPrint
argument_list|()
operator|)
operator|||
name|m_dateFrame
condition|)
block|{
if|if
condition|(
name|ke
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Return
operator|||
name|ke
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Enter
operator|||
name|ke
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Select
condition|)
block|{
name|applyDate
argument_list|()
expr_stmt|;
emit|emit
name|editingFinished
argument_list|()
emit|;
name|removeDateLabel
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ke
operator|->
name|matches
argument_list|(
name|QKeySequence
operator|::
name|Cancel
argument_list|)
condition|)
block|{
name|removeDateLabel
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyPress
condition|)
block|{
name|createDateLabel
argument_list|()
expr_stmt|;
name|m_dateValidator
operator|->
name|handleKeyEvent
argument_list|(
name|ke
argument_list|)
expr_stmt|;
name|updateDateLabel
argument_list|()
expr_stmt|;
block|}
name|ke
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// If we are navigating let the user finish his date in old locate.
comment|// If we change our mind and want it to update immediately simply uncomment below
comment|/*         } else if (e->type() == QEvent::LocaleChange) {             if (m_dateValidator) {                 m_dateValidator->setLocale(m_widget->locale());                 m_dateValidator->setFormat(m_widget->locale().dateFormat(QLocale::ShortFormat));                 updateDateLabel();             }             */
block|}
block|}
return|return
name|QObject
operator|::
name|eventFilter
argument_list|(
name|o
argument_list|,
name|e
argument_list|)
return|;
block|}
DECL|function|timerEvent
name|void
name|QCalendarTextNavigator
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|m_acceptTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|applyDate
argument_list|()
expr_stmt|;
name|removeDateLabel
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|dateEditAcceptDelay
name|int
name|QCalendarTextNavigator
operator|::
name|dateEditAcceptDelay
parameter_list|()
specifier|const
block|{
return|return
name|m_editDelay
return|;
block|}
DECL|function|setDateEditAcceptDelay
name|void
name|QCalendarTextNavigator
operator|::
name|setDateEditAcceptDelay
parameter_list|(
name|int
name|delay
parameter_list|)
block|{
name|m_editDelay
operator|=
name|delay
expr_stmt|;
block|}
class_decl|class
name|QCalendarView
class_decl|;
comment|// a small helper class that replaces a QMap<Qt::DayOfWeek, T>,
comment|// but requires T to have a member-swap and a default constructor
comment|// which should be cheap (no memory allocations)
name|QT_WARNING_PUSH
name|QT_WARNING_DISABLE_MSVC
argument_list|(
literal|4351
argument_list|)
comment|// "new behavior: elements of array ... will be default initialized"
decl|template
decl|<
typename|typename
name|T
decl|>
DECL|class|StaticDayOfWeekAssociativeArray
name|class
name|StaticDayOfWeekAssociativeArray
argument_list|{
DECL|member|contained
name|bool
name|contained
index|[
literal|7
index|]
argument_list|;
DECL|member|data
name|T
name|data
index|[
literal|7
index|]
argument_list|;
specifier|static
name|Q_DECL_CONSTEXPR
name|int
name|day2idx
argument_list|(
argument|Qt::DayOfWeek day
argument_list|)
name|Q_DECL_NOTHROW
block|{
return|return
name|int
argument_list|(
name|day
argument_list|)
operator|-
literal|1
return|;
block|}
comment|// alt: day % 7
specifier|public
operator|:
DECL|function|noexcept
name|Q_DECL_CONSTEXPR
name|StaticDayOfWeekAssociativeArray
argument_list|()
name|Q_DECL_NOEXCEPT_EXPR
argument_list|(
noexcept|noexcept
argument_list|(
name|T
argument_list|()
argument_list|)
argument_list|)
range|:
name|contained
argument_list|()
decl_stmt|,
name|data
argument_list|()
argument_list|{}
name|Q_DECL_CONSTEXPR
name|bool
name|contains
argument_list|(
name|Qt
operator|::
name|DayOfWeek
name|day
argument_list|)
decl|const
name|Q_DECL_NOTHROW
argument_list|{ return
name|contained
index|[
name|day2idx
argument_list|(
name|day
argument_list|)
index|]
argument_list|; }
name|Q_DECL_CONSTEXPR
decl|const
name|T
modifier|&
name|value
argument_list|(
name|Qt
operator|::
name|DayOfWeek
name|day
argument_list|)
decl|const
name|Q_DECL_NOTHROW
argument_list|{ return
name|data
index|[
name|day2idx
argument_list|(
name|day
argument_list|)
index|]
argument_list|; }
name|Q_DECL_RELAXED_CONSTEXPR
name|T
modifier|&
name|operator
name|[]
argument_list|(
name|Qt
operator|::
name|DayOfWeek
name|day
argument_list|)
name|Q_DECL_NOTHROW
argument_list|{
specifier|const
name|int
name|idx
operator|=
name|day2idx
argument_list|(
name|day
argument_list|)
argument_list|;
name|contained
index|[
name|idx
index|]
operator|=
literal|true
argument_list|;         return
name|data
index|[
name|idx
index|]
argument_list|;     }
name|Q_DECL_RELAXED_CONSTEXPR
name|void
name|insert
argument_list|(
name|Qt
operator|::
name|DayOfWeek
name|day
argument_list|,
name|T
name|v
argument_list|)
name|Q_DECL_NOTHROW
argument_list|{
name|operator
name|[]
argument_list|(
name|day
argument_list|)
operator|.
name|swap
argument_list|(
name|v
argument_list|)
argument_list|;     }
block|}
end_namespace
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_WARNING_POP
end_macro
begin_class
DECL|class|QCalendarModel
class|class
name|QCalendarModel
super|:
specifier|public
name|QAbstractTableModel
block|{
name|Q_OBJECT
public|public:
name|QCalendarModel
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|int
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|RowCount
operator|+
name|m_firstRow
return|;
block|}
name|int
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|ColumnCount
operator|+
name|m_firstColumn
return|;
block|}
DECL|member|Q_DECL_OVERRIDE
name|QVariant
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|Qt
operator|::
name|ItemFlags
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
name|bool
name|insertRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|beginInsertRows
argument_list|(
name|parent
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|endInsertRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|bool
name|insertColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|beginInsertColumns
argument_list|(
name|parent
argument_list|,
name|column
argument_list|,
name|column
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|endInsertColumns
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|bool
name|removeRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|beginRemoveRows
argument_list|(
name|parent
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|endRemoveRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|bool
name|removeColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|beginRemoveColumns
argument_list|(
name|parent
argument_list|,
name|column
argument_list|,
name|column
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|endRemoveColumns
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|void
name|showMonth
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|)
function_decl|;
name|void
name|setDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|d
parameter_list|)
function_decl|;
name|void
name|setMinimumDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
function_decl|;
name|void
name|setMaximumDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
function_decl|;
name|void
name|setRange
parameter_list|(
specifier|const
name|QDate
modifier|&
name|min
parameter_list|,
specifier|const
name|QDate
modifier|&
name|max
parameter_list|)
function_decl|;
name|void
name|setHorizontalHeaderFormat
parameter_list|(
name|QCalendarWidget
operator|::
name|HorizontalHeaderFormat
name|format
parameter_list|)
function_decl|;
name|void
name|setFirstColumnDay
parameter_list|(
name|Qt
operator|::
name|DayOfWeek
name|dayOfWeek
parameter_list|)
function_decl|;
name|Qt
operator|::
name|DayOfWeek
name|firstColumnDay
parameter_list|()
specifier|const
function_decl|;
name|bool
name|weekNumbersShown
parameter_list|()
specifier|const
function_decl|;
name|void
name|setWeekNumbersShown
parameter_list|(
name|bool
name|show
parameter_list|)
function_decl|;
name|QTextCharFormat
name|formatForCell
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
specifier|const
function_decl|;
name|Qt
operator|::
name|DayOfWeek
name|dayOfWeekForColumn
parameter_list|(
name|int
name|section
parameter_list|)
specifier|const
function_decl|;
name|int
name|columnForDayOfWeek
parameter_list|(
name|Qt
operator|::
name|DayOfWeek
name|day
parameter_list|)
specifier|const
function_decl|;
name|QDate
name|dateForCell
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
function_decl|;
name|void
name|cellForDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|int
modifier|*
name|row
parameter_list|,
name|int
modifier|*
name|column
parameter_list|)
specifier|const
function_decl|;
name|QString
name|dayName
parameter_list|(
name|Qt
operator|::
name|DayOfWeek
name|day
parameter_list|)
specifier|const
function_decl|;
DECL|function|setView
name|void
name|setView
parameter_list|(
name|QCalendarView
modifier|*
name|view
parameter_list|)
block|{
name|m_view
operator|=
name|view
expr_stmt|;
block|}
name|void
name|internalUpdate
parameter_list|()
function_decl|;
name|QDate
name|referenceDate
parameter_list|()
specifier|const
function_decl|;
name|int
name|columnForFirstOfMonth
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
function_decl|;
DECL|member|m_firstColumn
name|int
name|m_firstColumn
decl_stmt|;
DECL|member|m_firstRow
name|int
name|m_firstRow
decl_stmt|;
DECL|member|m_date
name|QDate
name|m_date
decl_stmt|;
DECL|member|m_minimumDate
name|QDate
name|m_minimumDate
decl_stmt|;
DECL|member|m_maximumDate
name|QDate
name|m_maximumDate
decl_stmt|;
DECL|member|m_shownYear
name|int
name|m_shownYear
decl_stmt|;
DECL|member|m_shownMonth
name|int
name|m_shownMonth
decl_stmt|;
DECL|member|m_firstDay
name|Qt
operator|::
name|DayOfWeek
name|m_firstDay
decl_stmt|;
DECL|member|m_horizontalHeaderFormat
name|QCalendarWidget
operator|::
name|HorizontalHeaderFormat
name|m_horizontalHeaderFormat
decl_stmt|;
DECL|member|m_weekNumbersShown
name|bool
name|m_weekNumbersShown
decl_stmt|;
DECL|member|m_dayFormats
name|StaticDayOfWeekAssociativeArray
argument_list|<
name|QTextCharFormat
argument_list|>
name|m_dayFormats
decl_stmt|;
DECL|member|m_dateFormats
name|QMap
argument_list|<
name|QDate
argument_list|,
name|QTextCharFormat
argument_list|>
name|m_dateFormats
decl_stmt|;
DECL|member|m_headerFormat
name|QTextCharFormat
name|m_headerFormat
decl_stmt|;
DECL|member|m_view
name|QCalendarView
modifier|*
name|m_view
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QCalendarView
class|class
name|QCalendarView
super|:
specifier|public
name|QTableView
block|{
name|Q_OBJECT
public|public:
name|QCalendarView
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
DECL|function|internalUpdate
name|void
name|internalUpdate
parameter_list|()
block|{
name|updateGeometries
argument_list|()
expr_stmt|;
block|}
name|void
name|setReadOnly
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
specifier|virtual
name|void
name|keyboardSearch
parameter_list|(
specifier|const
name|QString
modifier|&
name|search
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|Q_UNUSED
argument_list|(
argument|search
argument_list|)
block|}
signals|signals:
name|void
name|showDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
function_decl|;
name|void
name|changeDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|bool
name|changeMonth
parameter_list|)
function_decl|;
name|void
name|clicked
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
function_decl|;
name|void
name|editingFinished
parameter_list|()
function_decl|;
protected|protected:
DECL|member|Q_DECL_OVERRIDE
name|QModelIndex
name|moveCursor
parameter_list|(
name|CursorAction
name|cursorAction
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
DECL|member|Q_DECL_OVERRIDE
name|void
name|wheelEvent
parameter_list|(
name|QWheelEvent
modifier|*
name|event
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
endif|#
directive|endif
DECL|member|Q_DECL_OVERRIDE
name|void
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
name|QDate
name|handleMouseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
function_decl|;
public|public:
DECL|member|readOnly
name|bool
name|readOnly
decl_stmt|;
private|private:
DECL|member|validDateClicked
name|bool
name|validDateClicked
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
DECL|member|origDate
name|QDate
name|origDate
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_constructor
DECL|function|QCalendarModel
name|QCalendarModel
operator|::
name|QCalendarModel
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractTableModel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_firstColumn
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|m_firstRow
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|m_date
argument_list|(
name|QDate
operator|::
name|currentDate
argument_list|()
argument_list|)
member_init_list|,
name|m_minimumDate
argument_list|(
name|QDate
operator|::
name|fromJulianDay
argument_list|(
literal|1
argument_list|)
argument_list|)
member_init_list|,
name|m_maximumDate
argument_list|(
literal|7999
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
member_init_list|,
name|m_shownYear
argument_list|(
name|m_date
operator|.
name|year
argument_list|()
argument_list|)
member_init_list|,
name|m_shownMonth
argument_list|(
name|m_date
operator|.
name|month
argument_list|()
argument_list|)
member_init_list|,
name|m_firstDay
argument_list|(
name|QLocale
argument_list|()
operator|.
name|firstDayOfWeek
argument_list|()
argument_list|)
member_init_list|,
name|m_horizontalHeaderFormat
argument_list|(
name|QCalendarWidget
operator|::
name|ShortDayNames
argument_list|)
member_init_list|,
name|m_weekNumbersShown
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|m_view
argument_list|(
name|Q_NULLPTR
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|dayOfWeekForColumn
name|Qt
operator|::
name|DayOfWeek
name|QCalendarModel
operator|::
name|dayOfWeekForColumn
parameter_list|(
name|int
name|column
parameter_list|)
specifier|const
block|{
name|int
name|col
init|=
name|column
operator|-
name|m_firstColumn
decl_stmt|;
if|if
condition|(
name|col
argument_list|<
literal|0
operator|||
name|col
argument_list|>
literal|6
condition|)
return|return
name|Qt
operator|::
name|Sunday
return|;
name|int
name|day
init|=
name|m_firstDay
operator|+
name|col
decl_stmt|;
if|if
condition|(
name|day
operator|>
literal|7
condition|)
name|day
operator|-=
literal|7
expr_stmt|;
return|return
name|Qt
operator|::
name|DayOfWeek
argument_list|(
name|day
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|columnForDayOfWeek
name|int
name|QCalendarModel
operator|::
name|columnForDayOfWeek
parameter_list|(
name|Qt
operator|::
name|DayOfWeek
name|day
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|day
argument_list|<
literal|1
operator|||
name|day
argument_list|>
literal|7
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|column
init|=
operator|(
name|int
operator|)
name|day
operator|-
operator|(
name|int
operator|)
name|m_firstDay
decl_stmt|;
if|if
condition|(
name|column
operator|<
literal|0
condition|)
name|column
operator|+=
literal|7
expr_stmt|;
return|return
name|column
operator|+
name|m_firstColumn
return|;
block|}
end_function
begin_comment
comment|/* This simple algorithm tries to generate a valid date from the month shown. Some months don't contain a first day (e.g. Jan of -4713 year, so QDate (-4713, 1, 1) would be invalid). In that case we try to generate another valid date for that month. Later, returned date's day is the number of cells calendar widget will reserve for days before referenceDate. (E.g. if returned date's day is 16, that day will be placed in 3rd or 4th row, not in the 1st or 2nd row). Depending on referenceData we can change behaviour of Oct 1582. If referenceDate is 1st of Oct we render 1 Oct in 1st or 2nd row. If referenceDate is 17 of Oct we show always 16 dates before 17 of Oct, and since this month contains the hole 5-14 Oct, the first of Oct will be rendered in 2nd or 3rd row, showing more dates from previous month. */
end_comment
begin_function
DECL|function|referenceDate
name|QDate
name|QCalendarModel
operator|::
name|referenceDate
parameter_list|()
specifier|const
block|{
name|int
name|refDay
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|refDay
operator|<=
literal|31
condition|)
block|{
name|QDate
name|refDate
argument_list|(
name|m_shownYear
argument_list|,
name|m_shownMonth
argument_list|,
name|refDay
argument_list|)
decl_stmt|;
if|if
condition|(
name|refDate
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|refDate
return|;
name|refDay
operator|+=
literal|1
expr_stmt|;
block|}
return|return
name|QDate
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|columnForFirstOfMonth
name|int
name|QCalendarModel
operator|::
name|columnForFirstOfMonth
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|columnForDayOfWeek
argument_list|(
cast|static_cast
argument_list|<
name|Qt
operator|::
name|DayOfWeek
argument_list|>
argument_list|(
name|date
operator|.
name|dayOfWeek
argument_list|()
argument_list|)
argument_list|)
operator|-
operator|(
name|date
operator|.
name|day
argument_list|()
operator|%
literal|7
operator|)
operator|+
literal|8
operator|)
operator|%
literal|7
return|;
block|}
end_function
begin_function
DECL|function|dateForCell
name|QDate
name|QCalendarModel
operator|::
name|dateForCell
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|row
argument_list|<
name|m_firstRow
operator|||
name|row
argument_list|>
name|m_firstRow
operator|+
name|RowCount
operator|-
literal|1
operator|||
name|column
argument_list|<
name|m_firstColumn
operator|||
name|column
argument_list|>
name|m_firstColumn
operator|+
name|ColumnCount
operator|-
literal|1
condition|)
return|return
name|QDate
argument_list|()
return|;
specifier|const
name|QDate
name|refDate
init|=
name|referenceDate
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|refDate
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QDate
argument_list|()
return|;
specifier|const
name|int
name|columnForFirstOfShownMonth
init|=
name|columnForFirstOfMonth
argument_list|(
name|refDate
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnForFirstOfShownMonth
operator|-
name|m_firstColumn
operator|<
name|MinimumDayOffset
condition|)
name|row
operator|-=
literal|1
expr_stmt|;
specifier|const
name|int
name|requestedDay
init|=
literal|7
operator|*
operator|(
name|row
operator|-
name|m_firstRow
operator|)
operator|+
name|column
operator|-
name|columnForFirstOfShownMonth
operator|-
name|refDate
operator|.
name|day
argument_list|()
operator|+
literal|1
decl_stmt|;
return|return
name|refDate
operator|.
name|addDays
argument_list|(
name|requestedDay
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|cellForDate
name|void
name|QCalendarModel
operator|::
name|cellForDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|int
modifier|*
name|row
parameter_list|,
name|int
modifier|*
name|column
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|row
operator|&&
operator|!
name|column
condition|)
return|return;
if|if
condition|(
name|row
condition|)
operator|*
name|row
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|column
condition|)
operator|*
name|column
operator|=
operator|-
literal|1
expr_stmt|;
specifier|const
name|QDate
name|refDate
init|=
name|referenceDate
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|refDate
operator|.
name|isValid
argument_list|()
condition|)
return|return;
specifier|const
name|int
name|columnForFirstOfShownMonth
init|=
name|columnForFirstOfMonth
argument_list|(
name|refDate
argument_list|)
decl_stmt|;
specifier|const
name|int
name|requestedPosition
init|=
name|refDate
operator|.
name|daysTo
argument_list|(
name|date
argument_list|)
operator|-
name|m_firstColumn
operator|+
name|columnForFirstOfShownMonth
operator|+
name|refDate
operator|.
name|day
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|c
init|=
name|requestedPosition
operator|%
literal|7
decl_stmt|;
name|int
name|r
init|=
name|requestedPosition
operator|/
literal|7
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
name|c
operator|+=
literal|7
expr_stmt|;
name|r
operator|-=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|columnForFirstOfShownMonth
operator|-
name|m_firstColumn
operator|<
name|MinimumDayOffset
condition|)
name|r
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|r
argument_list|<
literal|0
operator|||
name|r
argument_list|>
name|RowCount
operator|-
literal|1
operator|||
name|c
argument_list|<
literal|0
operator|||
name|c
argument_list|>
name|ColumnCount
operator|-
literal|1
condition|)
return|return;
if|if
condition|(
name|row
condition|)
operator|*
name|row
operator|=
name|r
operator|+
name|m_firstRow
expr_stmt|;
if|if
condition|(
name|column
condition|)
operator|*
name|column
operator|=
name|c
operator|+
name|m_firstColumn
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dayName
name|QString
name|QCalendarModel
operator|::
name|dayName
parameter_list|(
name|Qt
operator|::
name|DayOfWeek
name|day
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|m_horizontalHeaderFormat
condition|)
block|{
case|case
name|QCalendarWidget
operator|::
name|SingleLetterDayNames
case|:
block|{
name|QString
name|standaloneDayName
init|=
name|m_view
operator|->
name|locale
argument_list|()
operator|.
name|standaloneDayName
argument_list|(
name|day
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|standaloneDayName
operator|==
name|m_view
operator|->
name|locale
argument_list|()
operator|.
name|dayName
argument_list|(
name|day
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
condition|)
return|return
name|standaloneDayName
operator|.
name|left
argument_list|(
literal|1
argument_list|)
return|;
return|return
name|standaloneDayName
return|;
block|}
case|case
name|QCalendarWidget
operator|::
name|ShortDayNames
case|:
return|return
name|m_view
operator|->
name|locale
argument_list|()
operator|.
name|dayName
argument_list|(
name|day
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
return|;
case|case
name|QCalendarWidget
operator|::
name|LongDayNames
case|:
return|return
name|m_view
operator|->
name|locale
argument_list|()
operator|.
name|dayName
argument_list|(
name|day
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|formatForCell
name|QTextCharFormat
name|QCalendarModel
operator|::
name|formatForCell
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
specifier|const
block|{
name|QPalette
name|pal
decl_stmt|;
name|QPalette
operator|::
name|ColorGroup
name|cg
init|=
name|QPalette
operator|::
name|Active
decl_stmt|;
if|if
condition|(
name|m_view
condition|)
block|{
name|pal
operator|=
name|m_view
operator|->
name|palette
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_view
operator|->
name|isEnabled
argument_list|()
condition|)
name|cg
operator|=
name|QPalette
operator|::
name|Disabled
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|m_view
operator|->
name|isActiveWindow
argument_list|()
condition|)
name|cg
operator|=
name|QPalette
operator|::
name|Inactive
expr_stmt|;
block|}
name|QTextCharFormat
name|format
decl_stmt|;
name|format
operator|.
name|setFont
argument_list|(
name|m_view
operator|->
name|font
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|header
init|=
operator|(
name|m_weekNumbersShown
operator|&&
name|col
operator|==
name|HeaderColumn
operator|)
operator|||
operator|(
name|m_horizontalHeaderFormat
operator|!=
name|QCalendarWidget
operator|::
name|NoHorizontalHeader
operator|&&
name|row
operator|==
name|HeaderRow
operator|)
decl_stmt|;
name|format
operator|.
name|setBackground
argument_list|(
name|pal
operator|.
name|brush
argument_list|(
name|cg
argument_list|,
name|header
condition|?
name|QPalette
operator|::
name|AlternateBase
else|:
name|QPalette
operator|::
name|Base
argument_list|)
argument_list|)
expr_stmt|;
name|format
operator|.
name|setForeground
argument_list|(
name|pal
operator|.
name|brush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
condition|)
block|{
name|format
operator|.
name|merge
argument_list|(
name|m_headerFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|col
operator|>=
name|m_firstColumn
operator|&&
name|col
operator|<
name|m_firstColumn
operator|+
name|ColumnCount
condition|)
block|{
name|Qt
operator|::
name|DayOfWeek
name|dayOfWeek
init|=
name|dayOfWeekForColumn
argument_list|(
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_dayFormats
operator|.
name|contains
argument_list|(
name|dayOfWeek
argument_list|)
condition|)
name|format
operator|.
name|merge
argument_list|(
name|m_dayFormats
operator|.
name|value
argument_list|(
name|dayOfWeek
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|header
condition|)
block|{
name|QDate
name|date
init|=
name|dateForCell
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
name|format
operator|.
name|merge
argument_list|(
name|m_dateFormats
operator|.
name|value
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
argument_list|<
name|m_minimumDate
operator|||
name|date
argument_list|>
name|m_maximumDate
condition|)
name|format
operator|.
name|setBackground
argument_list|(
name|pal
operator|.
name|brush
argument_list|(
name|cg
argument_list|,
name|QPalette
operator|::
name|Window
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_shownMonth
operator|!=
name|date
operator|.
name|month
argument_list|()
condition|)
name|format
operator|.
name|setForeground
argument_list|(
name|pal
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|format
return|;
block|}
end_function
begin_function
DECL|function|data
name|QVariant
name|QCalendarModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|TextAlignmentRole
condition|)
return|return
operator|(
name|int
operator|)
name|Qt
operator|::
name|AlignCenter
return|;
name|int
name|row
init|=
name|index
operator|.
name|row
argument_list|()
decl_stmt|;
name|int
name|column
init|=
name|index
operator|.
name|column
argument_list|()
decl_stmt|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|DisplayRole
condition|)
block|{
if|if
condition|(
name|m_weekNumbersShown
operator|&&
name|column
operator|==
name|HeaderColumn
operator|&&
name|row
operator|>=
name|m_firstRow
operator|&&
name|row
operator|<
name|m_firstRow
operator|+
name|RowCount
condition|)
block|{
name|QDate
name|date
init|=
name|dateForCell
argument_list|(
name|row
argument_list|,
name|columnForDayOfWeek
argument_list|(
name|Qt
operator|::
name|Monday
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|date
operator|.
name|weekNumber
argument_list|()
return|;
block|}
if|if
condition|(
name|m_horizontalHeaderFormat
operator|!=
name|QCalendarWidget
operator|::
name|NoHorizontalHeader
operator|&&
name|row
operator|==
name|HeaderRow
operator|&&
name|column
operator|>=
name|m_firstColumn
operator|&&
name|column
operator|<
name|m_firstColumn
operator|+
name|ColumnCount
condition|)
return|return
name|dayName
argument_list|(
name|dayOfWeekForColumn
argument_list|(
name|column
argument_list|)
argument_list|)
return|;
name|QDate
name|date
init|=
name|dateForCell
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|date
operator|.
name|day
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
name|QTextCharFormat
name|fmt
init|=
name|formatForCell
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|BackgroundColorRole
condition|)
return|return
name|fmt
operator|.
name|background
argument_list|()
operator|.
name|color
argument_list|()
return|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|TextColorRole
condition|)
return|return
name|fmt
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
return|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|FontRole
condition|)
return|return
name|fmt
operator|.
name|font
argument_list|()
return|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|ToolTipRole
condition|)
return|return
name|fmt
operator|.
name|toolTip
argument_list|()
return|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|QCalendarModel
operator|::
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QDate
name|date
init|=
name|dateForCell
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|date
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QAbstractTableModel
operator|::
name|flags
argument_list|(
name|index
argument_list|)
return|;
if|if
condition|(
name|date
operator|<
name|m_minimumDate
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|date
operator|>
name|m_maximumDate
condition|)
return|return
literal|0
return|;
return|return
name|QAbstractTableModel
operator|::
name|flags
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setDate
name|void
name|QCalendarModel
operator|::
name|setDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|d
parameter_list|)
block|{
name|m_date
operator|=
name|d
expr_stmt|;
if|if
condition|(
name|m_date
operator|<
name|m_minimumDate
condition|)
name|m_date
operator|=
name|m_minimumDate
expr_stmt|;
elseif|else
if|if
condition|(
name|m_date
operator|>
name|m_maximumDate
condition|)
name|m_date
operator|=
name|m_maximumDate
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showMonth
name|void
name|QCalendarModel
operator|::
name|showMonth
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|)
block|{
if|if
condition|(
name|m_shownYear
operator|==
name|year
operator|&&
name|m_shownMonth
operator|==
name|month
condition|)
return|return;
name|m_shownYear
operator|=
name|year
expr_stmt|;
name|m_shownMonth
operator|=
name|month
expr_stmt|;
name|internalUpdate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMinimumDate
name|void
name|QCalendarModel
operator|::
name|setMinimumDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|d
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|.
name|isValid
argument_list|()
operator|||
name|d
operator|==
name|m_minimumDate
condition|)
return|return;
name|m_minimumDate
operator|=
name|d
expr_stmt|;
if|if
condition|(
name|m_maximumDate
operator|<
name|m_minimumDate
condition|)
name|m_maximumDate
operator|=
name|m_minimumDate
expr_stmt|;
if|if
condition|(
name|m_date
operator|<
name|m_minimumDate
condition|)
name|m_date
operator|=
name|m_minimumDate
expr_stmt|;
name|internalUpdate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMaximumDate
name|void
name|QCalendarModel
operator|::
name|setMaximumDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|d
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|.
name|isValid
argument_list|()
operator|||
name|d
operator|==
name|m_maximumDate
condition|)
return|return;
name|m_maximumDate
operator|=
name|d
expr_stmt|;
if|if
condition|(
name|m_minimumDate
operator|>
name|m_maximumDate
condition|)
name|m_minimumDate
operator|=
name|m_maximumDate
expr_stmt|;
if|if
condition|(
name|m_date
operator|>
name|m_maximumDate
condition|)
name|m_date
operator|=
name|m_maximumDate
expr_stmt|;
name|internalUpdate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setRange
name|void
name|QCalendarModel
operator|::
name|setRange
parameter_list|(
specifier|const
name|QDate
modifier|&
name|min
parameter_list|,
specifier|const
name|QDate
modifier|&
name|max
parameter_list|)
block|{
name|m_minimumDate
operator|=
name|min
expr_stmt|;
name|m_maximumDate
operator|=
name|max
expr_stmt|;
if|if
condition|(
name|m_minimumDate
operator|>
name|m_maximumDate
condition|)
name|qSwap
argument_list|(
name|m_minimumDate
argument_list|,
name|m_maximumDate
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_date
operator|<
name|m_minimumDate
condition|)
name|m_date
operator|=
name|m_minimumDate
expr_stmt|;
if|if
condition|(
name|m_date
operator|>
name|m_maximumDate
condition|)
name|m_date
operator|=
name|m_maximumDate
expr_stmt|;
name|internalUpdate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|internalUpdate
name|void
name|QCalendarModel
operator|::
name|internalUpdate
parameter_list|()
block|{
name|QModelIndex
name|begin
init|=
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QModelIndex
name|end
init|=
name|index
argument_list|(
name|m_firstRow
operator|+
name|RowCount
operator|-
literal|1
argument_list|,
name|m_firstColumn
operator|+
name|ColumnCount
operator|-
literal|1
argument_list|)
decl_stmt|;
emit|emit
name|dataChanged
argument_list|(
name|begin
argument_list|,
name|end
argument_list|)
emit|;
emit|emit
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|,
literal|0
argument_list|,
name|m_firstRow
operator|+
name|RowCount
operator|-
literal|1
argument_list|)
emit|;
emit|emit
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
literal|0
argument_list|,
name|m_firstColumn
operator|+
name|ColumnCount
operator|-
literal|1
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|setHorizontalHeaderFormat
name|void
name|QCalendarModel
operator|::
name|setHorizontalHeaderFormat
parameter_list|(
name|QCalendarWidget
operator|::
name|HorizontalHeaderFormat
name|format
parameter_list|)
block|{
if|if
condition|(
name|m_horizontalHeaderFormat
operator|==
name|format
condition|)
return|return;
name|int
name|oldFormat
init|=
name|m_horizontalHeaderFormat
decl_stmt|;
name|m_horizontalHeaderFormat
operator|=
name|format
expr_stmt|;
if|if
condition|(
name|oldFormat
operator|==
name|QCalendarWidget
operator|::
name|NoHorizontalHeader
condition|)
block|{
name|m_firstRow
operator|=
literal|1
expr_stmt|;
name|insertRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_horizontalHeaderFormat
operator|==
name|QCalendarWidget
operator|::
name|NoHorizontalHeader
condition|)
block|{
name|m_firstRow
operator|=
literal|0
expr_stmt|;
name|removeRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|internalUpdate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFirstColumnDay
name|void
name|QCalendarModel
operator|::
name|setFirstColumnDay
parameter_list|(
name|Qt
operator|::
name|DayOfWeek
name|dayOfWeek
parameter_list|)
block|{
if|if
condition|(
name|m_firstDay
operator|==
name|dayOfWeek
condition|)
return|return;
name|m_firstDay
operator|=
name|dayOfWeek
expr_stmt|;
name|internalUpdate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|firstColumnDay
name|Qt
operator|::
name|DayOfWeek
name|QCalendarModel
operator|::
name|firstColumnDay
parameter_list|()
specifier|const
block|{
return|return
name|m_firstDay
return|;
block|}
end_function
begin_function
DECL|function|weekNumbersShown
name|bool
name|QCalendarModel
operator|::
name|weekNumbersShown
parameter_list|()
specifier|const
block|{
return|return
name|m_weekNumbersShown
return|;
block|}
end_function
begin_function
DECL|function|setWeekNumbersShown
name|void
name|QCalendarModel
operator|::
name|setWeekNumbersShown
parameter_list|(
name|bool
name|show
parameter_list|)
block|{
if|if
condition|(
name|m_weekNumbersShown
operator|==
name|show
condition|)
return|return;
name|m_weekNumbersShown
operator|=
name|show
expr_stmt|;
if|if
condition|(
name|show
condition|)
block|{
name|m_firstColumn
operator|=
literal|1
expr_stmt|;
name|insertColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_firstColumn
operator|=
literal|0
expr_stmt|;
name|removeColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|internalUpdate
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QCalendarView
name|QCalendarView
operator|::
name|QCalendarView
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QTableView
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|readOnly
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|validDateClicked
argument_list|(
literal|false
argument_list|)
block|{
name|setTabKeyNavigation
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setShowGrid
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|verticalHeader
argument_list|()
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|horizontalHeader
argument_list|()
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setHorizontalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAlwaysOff
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|moveCursor
name|QModelIndex
name|QCalendarView
operator|::
name|moveCursor
parameter_list|(
name|CursorAction
name|cursorAction
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
name|modifiers
parameter_list|)
block|{
name|QCalendarModel
modifier|*
name|calendarModel
init|=
name|qobject_cast
argument_list|<
name|QCalendarModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|calendarModel
condition|)
return|return
name|QTableView
operator|::
name|moveCursor
argument_list|(
name|cursorAction
argument_list|,
name|modifiers
argument_list|)
return|;
if|if
condition|(
name|readOnly
condition|)
return|return
name|currentIndex
argument_list|()
return|;
name|QModelIndex
name|index
init|=
name|currentIndex
argument_list|()
decl_stmt|;
name|QDate
name|currentDate
init|=
cast|static_cast
argument_list|<
name|QCalendarModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|()
argument_list|)
operator|->
name|dateForCell
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|cursorAction
condition|)
block|{
case|case
name|QAbstractItemView
operator|::
name|MoveUp
case|:
name|currentDate
operator|=
name|currentDate
operator|.
name|addDays
argument_list|(
operator|-
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAbstractItemView
operator|::
name|MoveDown
case|:
name|currentDate
operator|=
name|currentDate
operator|.
name|addDays
argument_list|(
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAbstractItemView
operator|::
name|MoveLeft
case|:
name|currentDate
operator|=
name|currentDate
operator|.
name|addDays
argument_list|(
name|isRightToLeft
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAbstractItemView
operator|::
name|MoveRight
case|:
name|currentDate
operator|=
name|currentDate
operator|.
name|addDays
argument_list|(
name|isRightToLeft
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAbstractItemView
operator|::
name|MoveHome
case|:
name|currentDate
operator|=
name|QDate
argument_list|(
name|currentDate
operator|.
name|year
argument_list|()
argument_list|,
name|currentDate
operator|.
name|month
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAbstractItemView
operator|::
name|MoveEnd
case|:
name|currentDate
operator|=
name|QDate
argument_list|(
name|currentDate
operator|.
name|year
argument_list|()
argument_list|,
name|currentDate
operator|.
name|month
argument_list|()
argument_list|,
name|currentDate
operator|.
name|daysInMonth
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAbstractItemView
operator|::
name|MovePageUp
case|:
name|currentDate
operator|=
name|currentDate
operator|.
name|addMonths
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAbstractItemView
operator|::
name|MovePageDown
case|:
name|currentDate
operator|=
name|currentDate
operator|.
name|addMonths
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAbstractItemView
operator|::
name|MoveNext
case|:
case|case
name|QAbstractItemView
operator|::
name|MovePrevious
case|:
return|return
name|currentIndex
argument_list|()
return|;
default|default:
break|break;
block|}
emit|emit
name|changeDate
argument_list|(
name|currentDate
argument_list|,
literal|true
argument_list|)
emit|;
return|return
name|currentIndex
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|keyPressEvent
name|void
name|QCalendarView
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Select
condition|)
block|{
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|hasEditFocus
argument_list|()
condition|)
block|{
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Back
condition|)
block|{
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
name|hasEditFocus
argument_list|()
condition|)
block|{
if|if
condition|(
name|qobject_cast
argument_list|<
name|QCalendarModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|()
argument_list|)
condition|)
block|{
emit|emit
name|changeDate
argument_list|(
name|origDate
argument_list|,
literal|true
argument_list|)
emit|;
comment|//changes selection back to origDate, but doesn't activate
name|setEditFocus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|readOnly
condition|)
block|{
switch|switch
condition|(
name|event
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Return
case|:
case|case
name|Qt
operator|::
name|Key_Enter
case|:
case|case
name|Qt
operator|::
name|Key_Select
case|:
emit|emit
name|editingFinished
argument_list|()
emit|;
return|return;
default|default:
break|break;
block|}
block|}
name|QTableView
operator|::
name|keyPressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_function
DECL|function|wheelEvent
name|void
name|QCalendarView
operator|::
name|wheelEvent
parameter_list|(
name|QWheelEvent
modifier|*
name|event
parameter_list|)
block|{
specifier|const
name|int
name|numDegrees
init|=
name|event
operator|->
name|delta
argument_list|()
operator|/
literal|8
decl_stmt|;
specifier|const
name|int
name|numSteps
init|=
name|numDegrees
operator|/
literal|15
decl_stmt|;
specifier|const
name|QModelIndex
name|index
init|=
name|currentIndex
argument_list|()
decl_stmt|;
name|QDate
name|currentDate
init|=
cast|static_cast
argument_list|<
name|QCalendarModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|()
argument_list|)
operator|->
name|dateForCell
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
name|currentDate
operator|=
name|currentDate
operator|.
name|addMonths
argument_list|(
operator|-
name|numSteps
argument_list|)
expr_stmt|;
emit|emit
name|showDate
argument_list|(
name|currentDate
argument_list|)
emit|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|event
name|bool
name|QCalendarView
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FocusIn
condition|)
block|{
if|if
condition|(
name|QCalendarModel
modifier|*
name|calendarModel
init|=
name|qobject_cast
argument_list|<
name|QCalendarModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|()
argument_list|)
condition|)
block|{
name|origDate
operator|=
name|calendarModel
operator|->
name|m_date
expr_stmt|;
block|}
block|}
endif|#
directive|endif
return|return
name|QTableView
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handleMouseEvent
name|QDate
name|QCalendarView
operator|::
name|handleMouseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QCalendarModel
modifier|*
name|calendarModel
init|=
name|qobject_cast
argument_list|<
name|QCalendarModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|calendarModel
condition|)
return|return
name|QDate
argument_list|()
return|;
name|QPoint
name|pos
init|=
name|event
operator|->
name|pos
argument_list|()
decl_stmt|;
name|QModelIndex
name|index
init|=
name|indexAt
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|QDate
name|date
init|=
name|calendarModel
operator|->
name|dateForCell
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|.
name|isValid
argument_list|()
operator|&&
name|date
operator|>=
name|calendarModel
operator|->
name|m_minimumDate
operator|&&
name|date
operator|<=
name|calendarModel
operator|->
name|m_maximumDate
condition|)
block|{
return|return
name|date
return|;
block|}
return|return
name|QDate
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mouseDoubleClickEvent
name|void
name|QCalendarView
operator|::
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QCalendarModel
modifier|*
name|calendarModel
init|=
name|qobject_cast
argument_list|<
name|QCalendarModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|calendarModel
condition|)
block|{
name|QTableView
operator|::
name|mouseDoubleClickEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|readOnly
condition|)
return|return;
name|QDate
name|date
init|=
name|handleMouseEvent
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|validDateClicked
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|date
operator|==
name|calendarModel
operator|->
name|m_date
operator|&&
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ItemView_ActivateItemOnSingleClick
argument_list|)
condition|)
block|{
emit|emit
name|editingFinished
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|QCalendarView
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QCalendarModel
modifier|*
name|calendarModel
init|=
name|qobject_cast
argument_list|<
name|QCalendarModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|calendarModel
condition|)
block|{
name|QTableView
operator|::
name|mousePressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|readOnly
condition|)
return|return;
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
return|return;
name|QDate
name|date
init|=
name|handleMouseEvent
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|validDateClicked
operator|=
literal|true
expr_stmt|;
name|int
name|row
init|=
operator|-
literal|1
decl_stmt|,
name|col
init|=
operator|-
literal|1
decl_stmt|;
cast|static_cast
argument_list|<
name|QCalendarModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|()
argument_list|)
operator|->
name|cellForDate
argument_list|(
name|date
argument_list|,
operator|&
name|row
argument_list|,
operator|&
name|col
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|!=
operator|-
literal|1
operator|&&
name|col
operator|!=
operator|-
literal|1
condition|)
block|{
name|selectionModel
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
argument_list|,
name|QItemSelectionModel
operator|::
name|NoUpdate
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|validDateClicked
operator|=
literal|false
expr_stmt|;
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|QCalendarView
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QCalendarModel
modifier|*
name|calendarModel
init|=
name|qobject_cast
argument_list|<
name|QCalendarModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|calendarModel
condition|)
block|{
name|QTableView
operator|::
name|mouseMoveEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|readOnly
condition|)
return|return;
if|if
condition|(
name|validDateClicked
condition|)
block|{
name|QDate
name|date
init|=
name|handleMouseEvent
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|int
name|row
init|=
operator|-
literal|1
decl_stmt|,
name|col
init|=
operator|-
literal|1
decl_stmt|;
cast|static_cast
argument_list|<
name|QCalendarModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|()
argument_list|)
operator|->
name|cellForDate
argument_list|(
name|date
argument_list|,
operator|&
name|row
argument_list|,
operator|&
name|col
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|!=
operator|-
literal|1
operator|&&
name|col
operator|!=
operator|-
literal|1
condition|)
block|{
name|selectionModel
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
argument_list|,
name|QItemSelectionModel
operator|::
name|NoUpdate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QCalendarView
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QCalendarModel
modifier|*
name|calendarModel
init|=
name|qobject_cast
argument_list|<
name|QCalendarModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|calendarModel
condition|)
block|{
name|QTableView
operator|::
name|mouseReleaseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|event
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
return|return;
if|if
condition|(
name|readOnly
condition|)
return|return;
if|if
condition|(
name|validDateClicked
condition|)
block|{
name|QDate
name|date
init|=
name|handleMouseEvent
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|.
name|isValid
argument_list|()
condition|)
block|{
emit|emit
name|changeDate
argument_list|(
name|date
argument_list|,
literal|true
argument_list|)
emit|;
emit|emit
name|clicked
argument_list|(
name|date
argument_list|)
emit|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ItemView_ActivateItemOnSingleClick
argument_list|)
condition|)
emit|emit
name|editingFinished
argument_list|()
emit|;
block|}
name|validDateClicked
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|QCalendarDelegate
class|class
name|QCalendarDelegate
super|:
specifier|public
name|QItemDelegate
block|{
name|Q_OBJECT
public|public:
DECL|function|QCalendarDelegate
name|QCalendarDelegate
parameter_list|(
name|QCalendarWidgetPrivate
modifier|*
name|w
parameter_list|,
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QItemDelegate
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|calendarWidgetPrivate
argument_list|(
name|w
argument_list|)
block|{ }
specifier|virtual
name|void
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
DECL|member|Q_DECL_OVERRIDE
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
name|void
name|paintCell
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
function_decl|;
private|private:
DECL|member|calendarWidgetPrivate
name|QCalendarWidgetPrivate
modifier|*
name|calendarWidgetPrivate
decl_stmt|;
DECL|member|storedOption
specifier|mutable
name|QStyleOptionViewItem
name|storedOption
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|//Private tool button class
end_comment
begin_class
DECL|class|QCalToolButton
class|class
name|QCalToolButton
super|:
specifier|public
name|QToolButton
block|{
public|public:
DECL|function|QCalToolButton
name|QCalToolButton
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QToolButton
argument_list|(
name|parent
argument_list|)
block|{  }
protected|protected:
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|e
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|Q_UNUSED
argument_list|(
argument|e
argument_list|)
ifndef|#
directive|ifndef
name|Q_DEAD_CODE_FROM_QT4_MAC
name|QStyleOptionToolButton
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|.
name|state
operator|&
name|QStyle
operator|::
name|State_MouseOver
operator|||
name|isDown
argument_list|()
condition|)
block|{
comment|//act as normal button
name|setPalette
argument_list|(
name|QPalette
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//set the highlight color for button text
name|QPalette
name|toolPalette
init|=
name|palette
argument_list|()
decl_stmt|;
name|toolPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|ButtonText
argument_list|,
name|toolPalette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|HighlightedText
argument_list|)
argument_list|)
expr_stmt|;
name|setPalette
argument_list|(
name|toolPalette
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QToolButton
operator|::
name|paintEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|QPrevNextCalButton
class|class
name|QPrevNextCalButton
super|:
specifier|public
name|QToolButton
block|{
name|Q_OBJECT
public|public:
DECL|function|QPrevNextCalButton
name|QPrevNextCalButton
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QToolButton
argument_list|(
name|parent
argument_list|)
block|{}
protected|protected:
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|QStylePainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QStyleOptionToolButton
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
name|opt
operator|.
name|state
operator|&=
operator|~
name|QStyle
operator|::
name|State_HasFocus
expr_stmt|;
name|painter
operator|.
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ToolButton
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
unit|}
comment|// unnamed namespace
end_comment
begin_label
unit|class
DECL|class|QCalendarWidgetPrivate
name|QCalendarWidgetPrivate
label|:
end_label
begin_expr_stmt
DECL|class|QCalendarWidgetPrivate
specifier|public
name|QWidgetPrivate
block|{
name|Q_DECLARE_PUBLIC
argument_list|(
argument|QCalendarWidget
argument_list|)
specifier|public
operator|:
name|QCalendarWidgetPrivate
argument_list|()
block|;
name|void
name|showMonth
argument_list|(
argument|int year
argument_list|,
argument|int month
argument_list|)
block|;
name|void
name|update
argument_list|()
block|;
name|void
name|paintCell
argument_list|(
argument|QPainter *painter
argument_list|,
argument|const QRect&rect
argument_list|,
argument|const QDate&date
argument_list|)
specifier|const
block|;
name|void
name|_q_slotShowDate
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|)
block|;
name|void
name|_q_slotChangeDate
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|)
block|;
name|void
name|_q_slotChangeDate
argument_list|(
argument|const QDate&date
argument_list|,
argument|bool changeMonth
argument_list|)
block|;
name|void
name|_q_editingFinished
argument_list|()
block|;
name|void
name|_q_monthChanged
argument_list|(
name|QAction
operator|*
argument_list|)
block|;
name|void
name|_q_prevMonthClicked
argument_list|()
block|;
name|void
name|_q_nextMonthClicked
argument_list|()
block|;
name|void
name|_q_yearEditingFinished
argument_list|()
block|;
name|void
name|_q_yearClicked
argument_list|()
block|;
name|void
name|createNavigationBar
argument_list|(
name|QWidget
operator|*
name|widget
argument_list|)
block|;
name|void
name|updateButtonIcons
argument_list|()
block|;
name|void
name|updateMonthMenu
argument_list|()
block|;
name|void
name|updateMonthMenuNames
argument_list|()
block|;
name|void
name|updateNavigationBar
argument_list|()
block|;
name|void
name|updateCurrentPage
argument_list|(
specifier|const
name|QDate
operator|&
name|newDate
argument_list|)
block|;
specifier|inline
name|QDate
name|getCurrentDate
argument_list|()
block|;
name|void
name|setNavigatorEnabled
argument_list|(
argument|bool enable
argument_list|)
block|;
DECL|member|m_model
name|QCalendarModel
operator|*
name|m_model
block|;
DECL|member|m_view
name|QCalendarView
operator|*
name|m_view
block|;
DECL|member|m_delegate
name|QCalendarDelegate
operator|*
name|m_delegate
block|;
DECL|member|m_selection
name|QItemSelectionModel
operator|*
name|m_selection
block|;
DECL|member|m_navigator
name|QCalendarTextNavigator
operator|*
name|m_navigator
block|;
DECL|member|m_dateEditEnabled
name|bool
name|m_dateEditEnabled
block|;
DECL|member|nextMonth
name|QToolButton
operator|*
name|nextMonth
block|;
DECL|member|prevMonth
name|QToolButton
operator|*
name|prevMonth
block|;
DECL|member|monthButton
name|QCalToolButton
operator|*
name|monthButton
block|;
DECL|member|monthMenu
name|QMenu
operator|*
name|monthMenu
block|;
DECL|member|monthToAction
name|QMap
argument_list|<
name|int
argument_list|,
name|QAction
operator|*
argument_list|>
name|monthToAction
block|;
DECL|member|yearButton
name|QCalToolButton
operator|*
name|yearButton
block|;
DECL|member|yearEdit
name|QSpinBox
operator|*
name|yearEdit
block|;
DECL|member|navBarBackground
name|QWidget
operator|*
name|navBarBackground
block|;
DECL|member|spaceHolder
name|QSpacerItem
operator|*
name|spaceHolder
block|;
DECL|member|navBarVisible
name|bool
name|navBarVisible
block|;
DECL|member|cachedSizeHint
name|mutable
name|QSize
name|cachedSizeHint
block|;
DECL|member|oldFocusPolicy
name|Qt
operator|::
name|FocusPolicy
name|oldFocusPolicy
block|; }
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|paint
name|void
name|QCalendarDelegate
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
name|option
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QDate
name|date
init|=
name|calendarWidgetPrivate
operator|->
name|m_model
operator|->
name|dateForCell
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|storedOption
operator|=
name|option
expr_stmt|;
name|QRect
name|rect
init|=
name|option
operator|.
name|rect
decl_stmt|;
name|calendarWidgetPrivate
operator|->
name|paintCell
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QItemDelegate
operator|::
name|paint
argument_list|(
name|painter
argument_list|,
name|option
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|paintCell
name|void
name|QCalendarDelegate
operator|::
name|paintCell
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
block|{
name|storedOption
operator|.
name|rect
operator|=
name|rect
expr_stmt|;
name|int
name|row
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|col
init|=
operator|-
literal|1
decl_stmt|;
name|calendarWidgetPrivate
operator|->
name|m_model
operator|->
name|cellForDate
argument_list|(
name|date
argument_list|,
operator|&
name|row
argument_list|,
operator|&
name|col
argument_list|)
expr_stmt|;
name|QModelIndex
name|idx
init|=
name|calendarWidgetPrivate
operator|->
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
name|QItemDelegate
operator|::
name|paint
argument_list|(
name|painter
argument_list|,
name|storedOption
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QCalendarWidgetPrivate
name|QCalendarWidgetPrivate
operator|::
name|QCalendarWidgetPrivate
parameter_list|()
member_init_list|:
name|QWidgetPrivate
argument_list|()
block|{
name|m_model
operator|=
literal|0
expr_stmt|;
name|m_view
operator|=
literal|0
expr_stmt|;
name|m_delegate
operator|=
literal|0
expr_stmt|;
name|m_selection
operator|=
literal|0
expr_stmt|;
name|m_navigator
operator|=
literal|0
expr_stmt|;
name|m_dateEditEnabled
operator|=
literal|false
expr_stmt|;
name|navBarVisible
operator|=
literal|true
expr_stmt|;
name|oldFocusPolicy
operator|=
name|Qt
operator|::
name|StrongFocus
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|setNavigatorEnabled
name|void
name|QCalendarWidgetPrivate
operator|::
name|setNavigatorEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|bool
name|navigatorEnabled
init|=
operator|(
name|m_navigator
operator|->
name|widget
argument_list|()
operator|!=
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|enable
operator|==
name|navigatorEnabled
condition|)
return|return;
if|if
condition|(
name|enable
condition|)
block|{
name|m_navigator
operator|->
name|setWidget
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
name|m_navigator
argument_list|,
name|SIGNAL
argument_list|(
name|dateChanged
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_slotChangeDate
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|connect
argument_list|(
name|m_navigator
argument_list|,
name|SIGNAL
argument_list|(
name|editingFinished
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_editingFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_view
operator|->
name|installEventFilter
argument_list|(
name|m_navigator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_navigator
operator|->
name|setWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|q
operator|->
name|disconnect
argument_list|(
name|m_navigator
argument_list|,
name|SIGNAL
argument_list|(
name|dateChanged
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_slotChangeDate
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|disconnect
argument_list|(
name|m_navigator
argument_list|,
name|SIGNAL
argument_list|(
name|editingFinished
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_editingFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_view
operator|->
name|removeEventFilter
argument_list|(
name|m_navigator
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createNavigationBar
name|void
name|QCalendarWidgetPrivate
operator|::
name|createNavigationBar
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|navBarBackground
operator|=
operator|new
name|QWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|navBarBackground
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_calendar_navigationbar"
argument_list|)
argument_list|)
expr_stmt|;
name|navBarBackground
operator|->
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|navBarBackground
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Highlight
argument_list|)
expr_stmt|;
name|prevMonth
operator|=
operator|new
name|QPrevNextCalButton
argument_list|(
name|navBarBackground
argument_list|)
expr_stmt|;
name|nextMonth
operator|=
operator|new
name|QPrevNextCalButton
argument_list|(
name|navBarBackground
argument_list|)
expr_stmt|;
name|prevMonth
operator|->
name|setAutoRaise
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nextMonth
operator|->
name|setAutoRaise
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prevMonth
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
expr_stmt|;
name|nextMonth
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
expr_stmt|;
name|nextMonth
operator|->
name|setAutoRaise
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateButtonIcons
argument_list|()
expr_stmt|;
name|prevMonth
operator|->
name|setAutoRepeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nextMonth
operator|->
name|setAutoRepeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|monthButton
operator|=
operator|new
name|QCalToolButton
argument_list|(
name|navBarBackground
argument_list|)
expr_stmt|;
name|monthButton
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
expr_stmt|;
name|monthButton
operator|->
name|setAutoRaise
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|monthButton
operator|->
name|setPopupMode
argument_list|(
name|QToolButton
operator|::
name|InstantPopup
argument_list|)
expr_stmt|;
name|monthMenu
operator|=
operator|new
name|QMenu
argument_list|(
name|monthButton
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|12
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|monthName
argument_list|(
name|q
operator|->
name|locale
argument_list|()
operator|.
name|standaloneMonthName
argument_list|(
name|i
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|act
init|=
name|monthMenu
operator|->
name|addAction
argument_list|(
name|monthName
argument_list|)
decl_stmt|;
name|act
operator|->
name|setData
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|monthToAction
index|[
name|i
index|]
operator|=
name|act
expr_stmt|;
block|}
name|monthButton
operator|->
name|setMenu
argument_list|(
name|monthMenu
argument_list|)
expr_stmt|;
name|yearButton
operator|=
operator|new
name|QCalToolButton
argument_list|(
name|navBarBackground
argument_list|)
expr_stmt|;
name|yearButton
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
expr_stmt|;
name|yearButton
operator|->
name|setAutoRaise
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|yearEdit
operator|=
operator|new
name|QSpinBox
argument_list|(
name|navBarBackground
argument_list|)
expr_stmt|;
name|QFont
name|font
init|=
name|q
operator|->
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|monthButton
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|yearButton
operator|->
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|yearEdit
operator|->
name|setFrame
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|yearEdit
operator|->
name|setMinimum
argument_list|(
name|m_model
operator|->
name|m_minimumDate
operator|.
name|year
argument_list|()
argument_list|)
expr_stmt|;
name|yearEdit
operator|->
name|setMaximum
argument_list|(
name|m_model
operator|->
name|m_maximumDate
operator|.
name|year
argument_list|()
argument_list|)
expr_stmt|;
name|yearEdit
operator|->
name|hide
argument_list|()
expr_stmt|;
name|spaceHolder
operator|=
operator|new
name|QSpacerItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QHBoxLayout
modifier|*
name|headerLayout
init|=
operator|new
name|QHBoxLayout
decl_stmt|;
name|headerLayout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|headerLayout
operator|->
name|setSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|headerLayout
operator|->
name|addWidget
argument_list|(
name|prevMonth
argument_list|)
expr_stmt|;
name|headerLayout
operator|->
name|insertStretch
argument_list|(
name|headerLayout
operator|->
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|headerLayout
operator|->
name|addWidget
argument_list|(
name|monthButton
argument_list|)
expr_stmt|;
name|headerLayout
operator|->
name|addItem
argument_list|(
name|spaceHolder
argument_list|)
expr_stmt|;
name|headerLayout
operator|->
name|addWidget
argument_list|(
name|yearButton
argument_list|)
expr_stmt|;
name|headerLayout
operator|->
name|insertStretch
argument_list|(
name|headerLayout
operator|->
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|headerLayout
operator|->
name|addWidget
argument_list|(
name|nextMonth
argument_list|)
expr_stmt|;
name|navBarBackground
operator|->
name|setLayout
argument_list|(
name|headerLayout
argument_list|)
expr_stmt|;
name|yearEdit
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
name|prevMonth
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|nextMonth
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|yearButton
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|monthButton
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
comment|//set names for the header controls.
name|prevMonth
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_calendar_prevmonth"
argument_list|)
argument_list|)
expr_stmt|;
name|nextMonth
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_calendar_nextmonth"
argument_list|)
argument_list|)
expr_stmt|;
name|monthButton
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_calendar_monthbutton"
argument_list|)
argument_list|)
expr_stmt|;
name|yearButton
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_calendar_yearbutton"
argument_list|)
argument_list|)
expr_stmt|;
name|yearEdit
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_calendar_yearedit"
argument_list|)
argument_list|)
expr_stmt|;
name|updateMonthMenu
argument_list|()
expr_stmt|;
name|showMonth
argument_list|(
name|m_model
operator|->
name|m_date
operator|.
name|year
argument_list|()
argument_list|,
name|m_model
operator|->
name|m_date
operator|.
name|month
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateButtonIcons
name|void
name|QCalendarWidgetPrivate
operator|::
name|updateButtonIcons
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|prevMonth
operator|->
name|setIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|?
name|QStyle
operator|::
name|SP_ArrowRight
else|:
name|QStyle
operator|::
name|SP_ArrowLeft
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|nextMonth
operator|->
name|setIcon
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|?
name|QStyle
operator|::
name|SP_ArrowLeft
else|:
name|QStyle
operator|::
name|SP_ArrowRight
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateMonthMenu
name|void
name|QCalendarWidgetPrivate
operator|::
name|updateMonthMenu
parameter_list|()
block|{
name|int
name|beg
init|=
literal|1
decl_stmt|,
name|end
init|=
literal|12
decl_stmt|;
name|bool
name|prevEnabled
init|=
literal|true
decl_stmt|;
name|bool
name|nextEnabled
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|m_model
operator|->
name|m_shownYear
operator|==
name|m_model
operator|->
name|m_minimumDate
operator|.
name|year
argument_list|()
condition|)
block|{
name|beg
operator|=
name|m_model
operator|->
name|m_minimumDate
operator|.
name|month
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_model
operator|->
name|m_shownMonth
operator|==
name|m_model
operator|->
name|m_minimumDate
operator|.
name|month
argument_list|()
condition|)
name|prevEnabled
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|m_model
operator|->
name|m_shownYear
operator|==
name|m_model
operator|->
name|m_maximumDate
operator|.
name|year
argument_list|()
condition|)
block|{
name|end
operator|=
name|m_model
operator|->
name|m_maximumDate
operator|.
name|month
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_model
operator|->
name|m_shownMonth
operator|==
name|m_model
operator|->
name|m_maximumDate
operator|.
name|month
argument_list|()
condition|)
name|nextEnabled
operator|=
literal|false
expr_stmt|;
block|}
name|prevMonth
operator|->
name|setEnabled
argument_list|(
name|prevEnabled
argument_list|)
expr_stmt|;
name|nextMonth
operator|->
name|setEnabled
argument_list|(
name|nextEnabled
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|12
condition|;
name|i
operator|++
control|)
block|{
name|bool
name|monthEnabled
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|i
argument_list|<
name|beg
operator|||
name|i
argument_list|>
name|end
condition|)
name|monthEnabled
operator|=
literal|false
expr_stmt|;
name|monthToAction
index|[
name|i
index|]
operator|->
name|setEnabled
argument_list|(
name|monthEnabled
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateMonthMenuNames
name|void
name|QCalendarWidgetPrivate
operator|::
name|updateMonthMenuNames
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|12
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|monthName
argument_list|(
name|q
operator|->
name|locale
argument_list|()
operator|.
name|standaloneMonthName
argument_list|(
name|i
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|)
decl_stmt|;
name|monthToAction
index|[
name|i
index|]
operator|->
name|setText
argument_list|(
name|monthName
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateCurrentPage
name|void
name|QCalendarWidgetPrivate
operator|::
name|updateCurrentPage
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|QDate
name|newDate
init|=
name|date
decl_stmt|;
name|QDate
name|minDate
init|=
name|q
operator|->
name|minimumDate
argument_list|()
decl_stmt|;
name|QDate
name|maxDate
init|=
name|q
operator|->
name|maximumDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|minDate
operator|.
name|isValid
argument_list|()
operator|&&
name|minDate
operator|.
name|daysTo
argument_list|(
name|newDate
argument_list|)
operator|<
literal|0
condition|)
name|newDate
operator|=
name|minDate
expr_stmt|;
if|if
condition|(
name|maxDate
operator|.
name|isValid
argument_list|()
operator|&&
name|maxDate
operator|.
name|daysTo
argument_list|(
name|newDate
argument_list|)
operator|>
literal|0
condition|)
name|newDate
operator|=
name|maxDate
expr_stmt|;
name|showMonth
argument_list|(
name|newDate
operator|.
name|year
argument_list|()
argument_list|,
name|newDate
operator|.
name|month
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|row
init|=
operator|-
literal|1
decl_stmt|,
name|col
init|=
operator|-
literal|1
decl_stmt|;
name|m_model
operator|->
name|cellForDate
argument_list|(
name|newDate
argument_list|,
operator|&
name|row
argument_list|,
operator|&
name|col
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|!=
operator|-
literal|1
operator|&&
name|col
operator|!=
operator|-
literal|1
condition|)
block|{
name|m_view
operator|->
name|selectionModel
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
argument_list|,
name|QItemSelectionModel
operator|::
name|NoUpdate
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_monthChanged
name|void
name|QCalendarWidgetPrivate
operator|::
name|_q_monthChanged
parameter_list|(
name|QAction
modifier|*
name|act
parameter_list|)
block|{
name|monthButton
operator|->
name|setText
argument_list|(
name|act
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|QDate
name|currentDate
init|=
name|getCurrentDate
argument_list|()
decl_stmt|;
name|QDate
name|newDate
init|=
name|currentDate
operator|.
name|addMonths
argument_list|(
name|act
operator|->
name|data
argument_list|()
operator|.
name|toInt
argument_list|()
operator|-
name|currentDate
operator|.
name|month
argument_list|()
argument_list|)
decl_stmt|;
name|updateCurrentPage
argument_list|(
name|newDate
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getCurrentDate
name|QDate
name|QCalendarWidgetPrivate
operator|::
name|getCurrentDate
parameter_list|()
block|{
name|QModelIndex
name|index
init|=
name|m_view
operator|->
name|currentIndex
argument_list|()
decl_stmt|;
return|return
name|m_model
operator|->
name|dateForCell
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|_q_prevMonthClicked
name|void
name|QCalendarWidgetPrivate
operator|::
name|_q_prevMonthClicked
parameter_list|()
block|{
name|QDate
name|currentDate
init|=
name|getCurrentDate
argument_list|()
operator|.
name|addMonths
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|updateCurrentPage
argument_list|(
name|currentDate
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_nextMonthClicked
name|void
name|QCalendarWidgetPrivate
operator|::
name|_q_nextMonthClicked
parameter_list|()
block|{
name|QDate
name|currentDate
init|=
name|getCurrentDate
argument_list|()
operator|.
name|addMonths
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|updateCurrentPage
argument_list|(
name|currentDate
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_yearEditingFinished
name|void
name|QCalendarWidgetPrivate
operator|::
name|_q_yearEditingFinished
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|yearButton
operator|->
name|setText
argument_list|(
name|yearEdit
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|yearEdit
operator|->
name|hide
argument_list|()
expr_stmt|;
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|oldFocusPolicy
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|spaceHolder
operator|->
name|changeSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|yearButton
operator|->
name|show
argument_list|()
expr_stmt|;
name|QDate
name|currentDate
init|=
name|getCurrentDate
argument_list|()
decl_stmt|;
name|currentDate
operator|=
name|currentDate
operator|.
name|addYears
argument_list|(
name|yearEdit
operator|->
name|text
argument_list|()
operator|.
name|toInt
argument_list|()
operator|-
name|currentDate
operator|.
name|year
argument_list|()
argument_list|)
expr_stmt|;
name|updateCurrentPage
argument_list|(
name|currentDate
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_yearClicked
name|void
name|QCalendarWidgetPrivate
operator|::
name|_q_yearClicked
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
comment|//show the spinbox on top of the button
name|yearEdit
operator|->
name|setGeometry
argument_list|(
name|yearButton
operator|->
name|x
argument_list|()
argument_list|,
name|yearButton
operator|->
name|y
argument_list|()
argument_list|,
name|yearEdit
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|yearButton
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|spaceHolder
operator|->
name|changeSize
argument_list|(
name|yearButton
operator|->
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|yearButton
operator|->
name|hide
argument_list|()
expr_stmt|;
name|oldFocusPolicy
operator|=
name|q
operator|->
name|focusPolicy
argument_list|()
expr_stmt|;
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|yearEdit
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|installEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|yearEdit
operator|->
name|raise
argument_list|()
expr_stmt|;
name|yearEdit
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|yearEdit
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|MouseFocusReason
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showMonth
name|void
name|QCalendarWidgetPrivate
operator|::
name|showMonth
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|)
block|{
if|if
condition|(
name|m_model
operator|->
name|m_shownYear
operator|==
name|year
operator|&&
name|m_model
operator|->
name|m_shownMonth
operator|==
name|month
condition|)
return|return;
name|Q_Q
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|m_model
operator|->
name|showMonth
argument_list|(
name|year
argument_list|,
name|month
argument_list|)
expr_stmt|;
name|updateNavigationBar
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|currentPageChanged
argument_list|(
name|year
argument_list|,
name|month
argument_list|)
emit|;
name|m_view
operator|->
name|internalUpdate
argument_list|()
expr_stmt|;
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|updateMonthMenu
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateNavigationBar
name|void
name|QCalendarWidgetPrivate
operator|::
name|updateNavigationBar
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|QString
name|monthName
init|=
name|q
operator|->
name|locale
argument_list|()
operator|.
name|standaloneMonthName
argument_list|(
name|m_model
operator|->
name|m_shownMonth
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
decl_stmt|;
name|monthButton
operator|->
name|setText
argument_list|(
name|monthName
argument_list|)
expr_stmt|;
name|yearButton
operator|->
name|setText
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|m_model
operator|->
name|m_shownYear
argument_list|)
argument_list|)
expr_stmt|;
name|yearEdit
operator|->
name|setValue
argument_list|(
name|m_model
operator|->
name|m_shownYear
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|update
name|void
name|QCalendarWidgetPrivate
operator|::
name|update
parameter_list|()
block|{
name|QDate
name|currentDate
init|=
name|m_model
operator|->
name|m_date
decl_stmt|;
name|int
name|row
decl_stmt|,
name|column
decl_stmt|;
name|m_model
operator|->
name|cellForDate
argument_list|(
name|currentDate
argument_list|,
operator|&
name|row
argument_list|,
operator|&
name|column
argument_list|)
expr_stmt|;
name|QModelIndex
name|idx
decl_stmt|;
name|m_selection
operator|->
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|row
operator|!=
operator|-
literal|1
operator|&&
name|column
operator|!=
operator|-
literal|1
condition|)
block|{
name|idx
operator|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|m_selection
operator|->
name|setCurrentIndex
argument_list|(
name|idx
argument_list|,
name|QItemSelectionModel
operator|::
name|SelectCurrent
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|paintCell
name|void
name|QCalendarWidgetPrivate
operator|::
name|paintCell
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|q
operator|->
name|paintCell
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_slotShowDate
name|void
name|QCalendarWidgetPrivate
operator|::
name|_q_slotShowDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|updateCurrentPage
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_slotChangeDate
name|void
name|QCalendarWidgetPrivate
operator|::
name|_q_slotChangeDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|_q_slotChangeDate
argument_list|(
name|date
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_slotChangeDate
name|void
name|QCalendarWidgetPrivate
operator|::
name|_q_slotChangeDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
name|bool
name|changeMonth
parameter_list|)
block|{
name|QDate
name|oldDate
init|=
name|m_model
operator|->
name|m_date
decl_stmt|;
name|m_model
operator|->
name|setDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|QDate
name|newDate
init|=
name|m_model
operator|->
name|m_date
decl_stmt|;
if|if
condition|(
name|changeMonth
condition|)
name|showMonth
argument_list|(
name|newDate
operator|.
name|year
argument_list|()
argument_list|,
name|newDate
operator|.
name|month
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldDate
operator|!=
name|newDate
condition|)
block|{
name|update
argument_list|()
expr_stmt|;
name|Q_Q
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|m_navigator
operator|->
name|setDate
argument_list|(
name|newDate
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|selectionChanged
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|_q_editingFinished
name|void
name|QCalendarWidgetPrivate
operator|::
name|_q_editingFinished
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|activated
argument_list|(
name|m_model
operator|->
name|m_date
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|/*!     \class QCalendarWidget     \brief The QCalendarWidget class provides a monthly based     calendar widget allowing the user to select a date.     \since 4.2      \ingroup advanced     \inmodule QtWidgets      \image fusion-calendarwidget.png      The widget is initialized with the current month and year, but     QCalendarWidget provides several public slots to change the year     and month that is shown.      By default, today's date is selected, and the user can select a     date using both mouse and keyboard. The currently selected date     can be retrieved using the selectedDate() function. It is     possible to constrain the user selection to a given date range by     setting the minimumDate and maximumDate properties.     Alternatively, both properties can be set in one go using the     setDateRange() convenience slot. Set the \l selectionMode     property to NoSelection to prohibit the user from selecting at     all. Note that a date also can be selected programmatically using     the setSelectedDate() slot.      The currently displayed month and year can be retrieved using the     monthShown() and yearShown() functions, respectively.      A newly created calendar widget uses abbreviated day names, and     both Saturdays and Sundays are marked in red. The calendar grid is     not visible. The week numbers are displayed, and the first column     day is the first day of the week for the calendar's locale.      The notation of the days can be altered to a single letter     abbreviations ("M" for "Monday") by setting the     horizontalHeaderFormat property to     QCalendarWidget::SingleLetterDayNames. Setting the same property     to QCalendarWidget::LongDayNames makes the header display the     complete day names. The week numbers can be removed by setting     the verticalHeaderFormat property to     QCalendarWidget::NoVerticalHeader.  The calendar grid can be     turned on by setting the gridVisible property to true using the     setGridVisible() function:      \table     \row \li         \image qcalendarwidget-grid.png     \row \li         \snippet code/src_gui_widgets_qcalendarwidget.cpp 0     \endtable      Finally, the day in the first column can be altered using the     setFirstDayOfWeek() function.      The QCalendarWidget class also provides three signals,     selectionChanged(), activated() and currentPageChanged() making it     possible to respond to user interaction.      The rendering of the headers, weekdays or single days can be     largely customized by setting QTextCharFormat's for some special     weekday, a special date or for the rendering of the headers.      Only a subset of the properties in QTextCharFormat are used by the     calendar widget. Currently, the foreground, background and font     properties are used to determine the rendering of individual cells     in the widget.      \sa QDate, QDateEdit, QTextCharFormat */
end_comment
begin_comment
comment|/*!     \enum QCalendarWidget::SelectionMode      This enum describes the types of selection offered to the user for     selecting dates in the calendar.      \value NoSelection      Dates cannot be selected.     \value SingleSelection  Single dates can be selected.      \sa selectionMode */
end_comment
begin_comment
comment|/*!     Constructs a calendar widget with the given \a parent.      The widget is initialized with the current month and year, and the     currently selected date is today.      \sa setCurrentPage() */
end_comment
begin_constructor
DECL|function|QCalendarWidget
name|QCalendarWidget
operator|::
name|QCalendarWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QCalendarWidgetPrivate
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|layoutV
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|layoutV
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_model
operator|=
operator|new
name|QCalendarModel
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|QBrush
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_model
operator|->
name|m_dayFormats
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|Saturday
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_model
operator|->
name|m_dayFormats
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|Sunday
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_view
operator|=
operator|new
name|QCalendarView
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_calendar_calendarview"
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|setModel
argument_list|(
name|d
operator|->
name|m_model
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_model
operator|->
name|setView
argument_list|(
name|d
operator|->
name|m_view
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|setSelectionBehavior
argument_list|(
name|QAbstractItemView
operator|::
name|SelectItems
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|setSelectionMode
argument_list|(
name|QAbstractItemView
operator|::
name|SingleSelection
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|horizontalHeader
argument_list|()
operator|->
name|setSectionResizeMode
argument_list|(
name|QHeaderView
operator|::
name|Stretch
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|horizontalHeader
argument_list|()
operator|->
name|setSectionsClickable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|verticalHeader
argument_list|()
operator|->
name|setSectionResizeMode
argument_list|(
name|QHeaderView
operator|::
name|Stretch
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|verticalHeader
argument_list|()
operator|->
name|setSectionsClickable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_selection
operator|=
name|d
operator|->
name|m_view
operator|->
name|selectionModel
argument_list|()
expr_stmt|;
name|d
operator|->
name|createNavigationBar
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|setFrameStyle
argument_list|(
name|QFrame
operator|::
name|NoFrame
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_delegate
operator|=
operator|new
name|QCalendarDelegate
argument_list|(
name|d
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|setItemDelegate
argument_list|(
name|d
operator|->
name|m_delegate
argument_list|)
expr_stmt|;
name|d
operator|->
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateNavigationBar
argument_list|()
expr_stmt|;
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
name|setFocusProxy
argument_list|(
name|d
operator|->
name|m_view
argument_list|)
expr_stmt|;
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Preferred
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|m_view
argument_list|,
name|SIGNAL
argument_list|(
name|showDate
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_slotShowDate
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|m_view
argument_list|,
name|SIGNAL
argument_list|(
name|changeDate
argument_list|(
name|QDate
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_slotChangeDate
argument_list|(
name|QDate
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|m_view
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|QDate
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|m_view
argument_list|,
name|SIGNAL
argument_list|(
name|editingFinished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_editingFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|prevMonth
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_prevMonthClicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|nextMonth
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_nextMonthClicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|yearButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_yearClicked
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|monthMenu
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_monthChanged
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|yearEdit
argument_list|,
name|SIGNAL
argument_list|(
name|editingFinished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_yearEditingFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|layoutV
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|layoutV
operator|->
name|setSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|layoutV
operator|->
name|addWidget
argument_list|(
name|d
operator|->
name|navBarBackground
argument_list|)
expr_stmt|;
name|layoutV
operator|->
name|addWidget
argument_list|(
name|d
operator|->
name|m_view
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_navigator
operator|=
operator|new
name|QCalendarTextNavigator
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setDateEditEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!    Destroys the calendar widget. */
end_comment
begin_destructor
DECL|function|~QCalendarWidget
name|QCalendarWidget
operator|::
name|~
name|QCalendarWidget
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!    \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QCalendarWidget
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
return|return
name|minimumSizeHint
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!    \reimp */
end_comment
begin_function
DECL|function|minimumSizeHint
name|QSize
name|QCalendarWidget
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|cachedSizeHint
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|d
operator|->
name|cachedSizeHint
return|;
name|ensurePolished
argument_list|()
expr_stmt|;
name|int
name|w
init|=
literal|0
decl_stmt|;
name|int
name|h
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
literal|53
decl_stmt|;
name|int
name|rows
init|=
literal|7
decl_stmt|;
name|int
name|cols
init|=
literal|8
decl_stmt|;
specifier|const
name|int
name|marginH
init|=
operator|(
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_FocusFrameHMargin
argument_list|)
operator|+
literal|1
operator|)
operator|*
literal|2
decl_stmt|;
if|if
condition|(
name|horizontalHeaderFormat
argument_list|()
operator|==
name|QCalendarWidget
operator|::
name|NoHorizontalHeader
condition|)
block|{
name|rows
operator|=
literal|6
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|QFontMetrics
name|fm
argument_list|(
name|d
operator|->
name|m_model
operator|->
name|formatForCell
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|d
operator|->
name|m_model
operator|->
name|dayName
argument_list|(
name|d
operator|->
name|m_model
operator|->
name|dayOfWeekForColumn
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|+
name|marginH
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|fm
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|verticalHeaderFormat
argument_list|()
operator|==
name|QCalendarWidget
operator|::
name|NoVerticalHeader
condition|)
block|{
name|cols
operator|=
literal|7
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|QFontMetrics
name|fm
argument_list|(
name|d
operator|->
name|m_model
operator|->
name|formatForCell
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|end
condition|;
name|j
operator|++
control|)
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|j
argument_list|)
argument_list|)
operator|+
name|marginH
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|fm
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|QFontMetrics
name|fm
argument_list|(
name|d
operator|->
name|m_model
operator|->
name|formatForCell
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|fm
operator|.
name|width
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
name|marginH
argument_list|)
expr_stmt|;
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|fm
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|m_view
operator|->
name|showGrid
argument_list|()
condition|)
block|{
comment|// hardcoded in tableview
name|w
operator|+=
literal|1
expr_stmt|;
name|h
operator|+=
literal|1
expr_stmt|;
block|}
name|w
operator|+=
literal|1
expr_stmt|;
comment|// default column span
name|h
operator|=
name|qMax
argument_list|(
name|h
argument_list|,
name|d
operator|->
name|m_view
operator|->
name|verticalHeader
argument_list|()
operator|->
name|minimumSectionSize
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|w
argument_list|,
name|d
operator|->
name|m_view
operator|->
name|horizontalHeader
argument_list|()
operator|->
name|minimumSectionSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//add the size of the header.
name|QSize
name|headerSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|navBarVisible
condition|)
block|{
name|int
name|headerH
init|=
name|d
operator|->
name|navBarBackground
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|headerW
init|=
literal|0
decl_stmt|;
name|headerW
operator|+=
name|d
operator|->
name|prevMonth
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
name|headerW
operator|+=
name|d
operator|->
name|nextMonth
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
expr_stmt|;
name|QFontMetrics
name|fm
init|=
name|d
operator|->
name|monthButton
operator|->
name|fontMetrics
argument_list|()
decl_stmt|;
name|int
name|monthW
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|12
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|monthName
init|=
name|locale
argument_list|()
operator|.
name|standaloneMonthName
argument_list|(
name|i
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
decl_stmt|;
name|monthW
operator|=
name|qMax
argument_list|(
name|monthW
argument_list|,
name|fm
operator|.
name|boundingRect
argument_list|(
name|monthName
argument_list|)
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|const
name|int
name|buttonDecoMargin
init|=
name|d
operator|->
name|monthButton
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|-
name|fm
operator|.
name|boundingRect
argument_list|(
name|d
operator|->
name|monthButton
operator|->
name|text
argument_list|()
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
name|headerW
operator|+=
name|monthW
operator|+
name|buttonDecoMargin
expr_stmt|;
name|fm
operator|=
name|d
operator|->
name|yearButton
operator|->
name|fontMetrics
argument_list|()
expr_stmt|;
name|headerW
operator|+=
name|fm
operator|.
name|boundingRect
argument_list|(
name|QLatin1String
argument_list|(
literal|"5555"
argument_list|)
argument_list|)
operator|.
name|width
argument_list|()
operator|+
name|buttonDecoMargin
expr_stmt|;
name|headerSize
operator|=
name|QSize
argument_list|(
name|headerW
argument_list|,
name|headerH
argument_list|)
expr_stmt|;
block|}
name|w
operator|*=
name|cols
expr_stmt|;
name|w
operator|=
name|qMax
argument_list|(
name|headerSize
operator|.
name|width
argument_list|()
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|h
operator|=
operator|(
name|h
operator|*
name|rows
operator|)
operator|+
name|headerSize
operator|.
name|height
argument_list|()
expr_stmt|;
name|QMargins
name|cm
init|=
name|contentsMargins
argument_list|()
decl_stmt|;
name|w
operator|+=
name|cm
operator|.
name|left
argument_list|()
operator|+
name|cm
operator|.
name|right
argument_list|()
expr_stmt|;
name|h
operator|+=
name|cm
operator|.
name|top
argument_list|()
operator|+
name|cm
operator|.
name|bottom
argument_list|()
expr_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|(
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|cachedSizeHint
return|;
block|}
end_function
begin_comment
comment|/*!     Paints the cell specified by the given \a date, using the given \a painter and \a rect. */
end_comment
begin_function
DECL|function|paintCell
name|void
name|QCalendarWidget
operator|::
name|paintCell
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_delegate
operator|->
name|paintCell
argument_list|(
name|painter
argument_list|,
name|rect
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QCalendarWidget::selectedDate     \brief the currently selected date.      The selected date must be within the date range specified by the     minimumDate and maximumDate properties. By default, the selected     date is the current date.      \sa setDateRange() */
end_comment
begin_function
DECL|function|selectedDate
name|QDate
name|QCalendarWidget
operator|::
name|selectedDate
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_model
operator|->
name|m_date
return|;
block|}
end_function
begin_function
DECL|function|setSelectedDate
name|void
name|QCalendarWidget
operator|::
name|setSelectedDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_model
operator|->
name|m_date
operator|==
name|date
operator|&&
name|date
operator|==
name|d
operator|->
name|getCurrentDate
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|date
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|d
operator|->
name|m_model
operator|->
name|setDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|d
operator|->
name|update
argument_list|()
expr_stmt|;
name|QDate
name|newDate
init|=
name|d
operator|->
name|m_model
operator|->
name|m_date
decl_stmt|;
name|d
operator|->
name|showMonth
argument_list|(
name|newDate
operator|.
name|year
argument_list|()
argument_list|,
name|newDate
operator|.
name|month
argument_list|()
argument_list|)
expr_stmt|;
emit|emit
name|selectionChanged
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|/*!     Returns the year of the currently displayed month. Months are     numbered from 1 to 12.      \sa monthShown(), setCurrentPage() */
end_comment
begin_function
DECL|function|yearShown
name|int
name|QCalendarWidget
operator|::
name|yearShown
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_model
operator|->
name|m_shownYear
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the currently displayed month. Months are numbered from 1 to     12.      \sa yearShown(), setCurrentPage() */
end_comment
begin_function
DECL|function|monthShown
name|int
name|QCalendarWidget
operator|::
name|monthShown
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_model
operator|->
name|m_shownMonth
return|;
block|}
end_function
begin_comment
comment|/*!     Displays the given \a month of the given \a year without changing     the selected date. Use the setSelectedDate() function to alter the     selected date.      The currently displayed month and year can be retrieved using the     monthShown() and yearShown() functions respectively.      \sa yearShown(), monthShown(), showPreviousMonth(), showNextMonth(),     showPreviousYear(), showNextYear() */
end_comment
begin_function
DECL|function|setCurrentPage
name|void
name|QCalendarWidget
operator|::
name|setCurrentPage
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|QDate
name|currentDate
init|=
name|d
operator|->
name|getCurrentDate
argument_list|()
decl_stmt|;
name|int
name|day
init|=
name|currentDate
operator|.
name|day
argument_list|()
decl_stmt|;
name|int
name|daysInMonths
init|=
name|QDate
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
literal|1
argument_list|)
operator|.
name|daysInMonth
argument_list|()
decl_stmt|;
if|if
condition|(
name|day
operator|>
name|daysInMonths
condition|)
name|day
operator|=
name|daysInMonths
expr_stmt|;
name|d
operator|->
name|showMonth
argument_list|(
name|year
argument_list|,
name|month
argument_list|)
expr_stmt|;
name|QDate
name|newDate
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|)
decl_stmt|;
name|int
name|row
init|=
operator|-
literal|1
decl_stmt|,
name|col
init|=
operator|-
literal|1
decl_stmt|;
name|d
operator|->
name|m_model
operator|->
name|cellForDate
argument_list|(
name|newDate
argument_list|,
operator|&
name|row
argument_list|,
operator|&
name|col
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|!=
operator|-
literal|1
operator|&&
name|col
operator|!=
operator|-
literal|1
condition|)
block|{
name|d
operator|->
name|m_view
operator|->
name|selectionModel
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|d
operator|->
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
argument_list|,
name|QItemSelectionModel
operator|::
name|NoUpdate
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Shows the next month relative to the currently displayed     month. Note that the selected date is not changed.      \sa showPreviousMonth(), setCurrentPage(), setSelectedDate() */
end_comment
begin_function
DECL|function|showNextMonth
name|void
name|QCalendarWidget
operator|::
name|showNextMonth
parameter_list|()
block|{
name|int
name|year
init|=
name|yearShown
argument_list|()
decl_stmt|;
name|int
name|month
init|=
name|monthShown
argument_list|()
decl_stmt|;
if|if
condition|(
name|month
operator|==
literal|12
condition|)
block|{
operator|++
name|year
expr_stmt|;
name|month
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
operator|++
name|month
expr_stmt|;
block|}
name|setCurrentPage
argument_list|(
name|year
argument_list|,
name|month
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Shows the previous month relative to the currently displayed     month. Note that the selected date is not changed.      \sa showNextMonth(), setCurrentPage(), setSelectedDate() */
end_comment
begin_function
DECL|function|showPreviousMonth
name|void
name|QCalendarWidget
operator|::
name|showPreviousMonth
parameter_list|()
block|{
name|int
name|year
init|=
name|yearShown
argument_list|()
decl_stmt|;
name|int
name|month
init|=
name|monthShown
argument_list|()
decl_stmt|;
if|if
condition|(
name|month
operator|==
literal|1
condition|)
block|{
operator|--
name|year
expr_stmt|;
name|month
operator|=
literal|12
expr_stmt|;
block|}
else|else
block|{
operator|--
name|month
expr_stmt|;
block|}
name|setCurrentPage
argument_list|(
name|year
argument_list|,
name|month
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Shows the currently displayed month in the \e next year relative     to the currently displayed year. Note that the selected date is     not changed.      \sa showPreviousYear(), setCurrentPage(), setSelectedDate() */
end_comment
begin_function
DECL|function|showNextYear
name|void
name|QCalendarWidget
operator|::
name|showNextYear
parameter_list|()
block|{
name|int
name|year
init|=
name|yearShown
argument_list|()
decl_stmt|;
name|int
name|month
init|=
name|monthShown
argument_list|()
decl_stmt|;
operator|++
name|year
expr_stmt|;
name|setCurrentPage
argument_list|(
name|year
argument_list|,
name|month
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Shows the currently displayed month in the \e previous year     relative to the currently displayed year. Note that the selected     date is not changed.      \sa showNextYear(), setCurrentPage(), setSelectedDate() */
end_comment
begin_function
DECL|function|showPreviousYear
name|void
name|QCalendarWidget
operator|::
name|showPreviousYear
parameter_list|()
block|{
name|int
name|year
init|=
name|yearShown
argument_list|()
decl_stmt|;
name|int
name|month
init|=
name|monthShown
argument_list|()
decl_stmt|;
operator|--
name|year
expr_stmt|;
name|setCurrentPage
argument_list|(
name|year
argument_list|,
name|month
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Shows the month of the selected date.      \sa selectedDate(), setCurrentPage() */
end_comment
begin_function
DECL|function|showSelectedDate
name|void
name|QCalendarWidget
operator|::
name|showSelectedDate
parameter_list|()
block|{
name|QDate
name|currentDate
init|=
name|selectedDate
argument_list|()
decl_stmt|;
name|setCurrentPage
argument_list|(
name|currentDate
operator|.
name|year
argument_list|()
argument_list|,
name|currentDate
operator|.
name|month
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Shows the month of the today's date.      \sa selectedDate(), setCurrentPage() */
end_comment
begin_function
DECL|function|showToday
name|void
name|QCalendarWidget
operator|::
name|showToday
parameter_list|()
block|{
name|QDate
name|currentDate
init|=
name|QDate
operator|::
name|currentDate
argument_list|()
decl_stmt|;
name|setCurrentPage
argument_list|(
name|currentDate
operator|.
name|year
argument_list|()
argument_list|,
name|currentDate
operator|.
name|month
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QCalendarWidget::minimumDate     \brief the minimum date of the currently specified date range.      The user will not be able to select a date that is before the     currently set minimum date.      \table     \row     \li \image qcalendarwidget-minimum.png     \row     \li     \snippet code/src_gui_widgets_qcalendarwidget.cpp 1     \endtable      By default, the minimum date is the earliest date that the QDate     class can handle.      When setting a minimum date, the maximumDate and selectedDate     properties are adjusted if the selection range becomes invalid. If     the provided date is not a valid QDate object, the     setMinimumDate() function does nothing.      \sa setDateRange() */
end_comment
begin_function
DECL|function|minimumDate
name|QDate
name|QCalendarWidget
operator|::
name|minimumDate
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_model
operator|->
name|m_minimumDate
return|;
block|}
end_function
begin_function
DECL|function|setMinimumDate
name|void
name|QCalendarWidget
operator|::
name|setMinimumDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|date
operator|.
name|isValid
argument_list|()
operator|||
name|d
operator|->
name|m_model
operator|->
name|m_minimumDate
operator|==
name|date
condition|)
return|return;
name|QDate
name|oldDate
init|=
name|d
operator|->
name|m_model
operator|->
name|m_date
decl_stmt|;
name|d
operator|->
name|m_model
operator|->
name|setMinimumDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|d
operator|->
name|yearEdit
operator|->
name|setMinimum
argument_list|(
name|d
operator|->
name|m_model
operator|->
name|m_minimumDate
operator|.
name|year
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateMonthMenu
argument_list|()
expr_stmt|;
name|QDate
name|newDate
init|=
name|d
operator|->
name|m_model
operator|->
name|m_date
decl_stmt|;
if|if
condition|(
name|oldDate
operator|!=
name|newDate
condition|)
block|{
name|d
operator|->
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|showMonth
argument_list|(
name|newDate
operator|.
name|year
argument_list|()
argument_list|,
name|newDate
operator|.
name|month
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_navigator
operator|->
name|setDate
argument_list|(
name|newDate
argument_list|)
expr_stmt|;
emit|emit
name|selectionChanged
argument_list|()
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!     \property QCalendarWidget::maximumDate     \brief the maximum date of the currently specified date range.      The user will not be able to select a date which is after the     currently set maximum date.      \table     \row     \li \image qcalendarwidget-maximum.png     \row     \li     \snippet code/src_gui_widgets_qcalendarwidget.cpp 2     \endtable      By default, the maximum date is the last day the QDate class can     handle.      When setting a maximum date, the minimumDate and selectedDate     properties are adjusted if the selection range becomes invalid. If     the provided date is not a valid QDate object, the     setMaximumDate() function does nothing.      \sa setDateRange() */
end_comment
begin_function
DECL|function|maximumDate
name|QDate
name|QCalendarWidget
operator|::
name|maximumDate
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_model
operator|->
name|m_maximumDate
return|;
block|}
end_function
begin_function
DECL|function|setMaximumDate
name|void
name|QCalendarWidget
operator|::
name|setMaximumDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|date
operator|.
name|isValid
argument_list|()
operator|||
name|d
operator|->
name|m_model
operator|->
name|m_maximumDate
operator|==
name|date
condition|)
return|return;
name|QDate
name|oldDate
init|=
name|d
operator|->
name|m_model
operator|->
name|m_date
decl_stmt|;
name|d
operator|->
name|m_model
operator|->
name|setMaximumDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|d
operator|->
name|yearEdit
operator|->
name|setMaximum
argument_list|(
name|d
operator|->
name|m_model
operator|->
name|m_maximumDate
operator|.
name|year
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateMonthMenu
argument_list|()
expr_stmt|;
name|QDate
name|newDate
init|=
name|d
operator|->
name|m_model
operator|->
name|m_date
decl_stmt|;
if|if
condition|(
name|oldDate
operator|!=
name|newDate
condition|)
block|{
name|d
operator|->
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|showMonth
argument_list|(
name|newDate
operator|.
name|year
argument_list|()
argument_list|,
name|newDate
operator|.
name|month
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_navigator
operator|->
name|setDate
argument_list|(
name|newDate
argument_list|)
expr_stmt|;
emit|emit
name|selectionChanged
argument_list|()
emit|;
block|}
block|}
end_function
begin_comment
comment|/*!     Defines a date range by setting the minimumDate and maximumDate     properties.      The date range restricts the user selection, i.e. the user can     only select dates within the specified date range. Note that      \snippet code/src_gui_widgets_qcalendarwidget.cpp 3      is analogous to      \snippet code/src_gui_widgets_qcalendarwidget.cpp 4      If either the \a min or \a max parameters are not valid QDate     objects, this function does nothing.      \sa setMinimumDate(), setMaximumDate() */
end_comment
begin_function
DECL|function|setDateRange
name|void
name|QCalendarWidget
operator|::
name|setDateRange
parameter_list|(
specifier|const
name|QDate
modifier|&
name|min
parameter_list|,
specifier|const
name|QDate
modifier|&
name|max
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_model
operator|->
name|m_minimumDate
operator|==
name|min
operator|&&
name|d
operator|->
name|m_model
operator|->
name|m_maximumDate
operator|==
name|max
condition|)
return|return;
if|if
condition|(
operator|!
name|min
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|max
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QDate
name|oldDate
init|=
name|d
operator|->
name|m_model
operator|->
name|m_date
decl_stmt|;
name|d
operator|->
name|m_model
operator|->
name|setRange
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|d
operator|->
name|yearEdit
operator|->
name|setMinimum
argument_list|(
name|d
operator|->
name|m_model
operator|->
name|m_minimumDate
operator|.
name|year
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|yearEdit
operator|->
name|setMaximum
argument_list|(
name|d
operator|->
name|m_model
operator|->
name|m_maximumDate
operator|.
name|year
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateMonthMenu
argument_list|()
expr_stmt|;
name|QDate
name|newDate
init|=
name|d
operator|->
name|m_model
operator|->
name|m_date
decl_stmt|;
if|if
condition|(
name|oldDate
operator|!=
name|newDate
condition|)
block|{
name|d
operator|->
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|showMonth
argument_list|(
name|newDate
operator|.
name|year
argument_list|()
argument_list|,
name|newDate
operator|.
name|month
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_navigator
operator|->
name|setDate
argument_list|(
name|newDate
argument_list|)
expr_stmt|;
emit|emit
name|selectionChanged
argument_list|()
emit|;
block|}
block|}
end_function
begin_comment
comment|/*! \enum QCalendarWidget::HorizontalHeaderFormat      This enum type defines the various formats the horizontal header can display.      \value SingleLetterDayNames The header displays a single letter abbreviation for day names (e.g. M for Monday).     \value ShortDayNames The header displays a short abbreviation for day names (e.g. Mon for Monday).     \value LongDayNames The header displays complete day names (e.g. Monday).     \value NoHorizontalHeader The header is hidden.      \sa horizontalHeaderFormat(), VerticalHeaderFormat */
end_comment
begin_comment
comment|/*!     \property QCalendarWidget::horizontalHeaderFormat     \brief the format of the horizontal header.      The default value is QCalendarWidget::ShortDayNames. */
end_comment
begin_function
DECL|function|setHorizontalHeaderFormat
name|void
name|QCalendarWidget
operator|::
name|setHorizontalHeaderFormat
parameter_list|(
name|QCalendarWidget
operator|::
name|HorizontalHeaderFormat
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_model
operator|->
name|m_horizontalHeaderFormat
operator|==
name|format
condition|)
return|return;
name|d
operator|->
name|m_model
operator|->
name|setHorizontalHeaderFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|horizontalHeaderFormat
name|QCalendarWidget
operator|::
name|HorizontalHeaderFormat
name|QCalendarWidget
operator|::
name|horizontalHeaderFormat
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_model
operator|->
name|m_horizontalHeaderFormat
return|;
block|}
end_function
begin_comment
comment|/*!     \enum QCalendarWidget::VerticalHeaderFormat      This enum type defines the various formats the vertical header can display.      \value ISOWeekNumbers The header displays ISO week numbers as described by \l QDate::weekNumber().     \value NoVerticalHeader The header is hidden.      \sa verticalHeaderFormat(), HorizontalHeaderFormat */
end_comment
begin_comment
comment|/*!     \property QCalendarWidget::verticalHeaderFormat     \brief the format of the vertical header.      The default value is QCalendarWidget::ISOWeekNumber. */
end_comment
begin_function
DECL|function|verticalHeaderFormat
name|QCalendarWidget
operator|::
name|VerticalHeaderFormat
name|QCalendarWidget
operator|::
name|verticalHeaderFormat
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|bool
name|shown
init|=
name|d
operator|->
name|m_model
operator|->
name|weekNumbersShown
argument_list|()
decl_stmt|;
if|if
condition|(
name|shown
condition|)
return|return
name|QCalendarWidget
operator|::
name|ISOWeekNumbers
return|;
return|return
name|QCalendarWidget
operator|::
name|NoVerticalHeader
return|;
block|}
end_function
begin_function
DECL|function|setVerticalHeaderFormat
name|void
name|QCalendarWidget
operator|::
name|setVerticalHeaderFormat
parameter_list|(
name|QCalendarWidget
operator|::
name|VerticalHeaderFormat
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|bool
name|show
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|QCalendarWidget
operator|::
name|ISOWeekNumbers
condition|)
name|show
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|m_model
operator|->
name|weekNumbersShown
argument_list|()
operator|==
name|show
condition|)
return|return;
name|d
operator|->
name|m_model
operator|->
name|setWeekNumbersShown
argument_list|(
name|show
argument_list|)
expr_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QCalendarWidget::gridVisible     \brief whether the table grid is displayed.      \table     \row         \li \inlineimage qcalendarwidget-grid.png     \row         \li         \snippet code/src_gui_widgets_qcalendarwidget.cpp 5     \endtable      The default value is false. */
end_comment
begin_function
DECL|function|isGridVisible
name|bool
name|QCalendarWidget
operator|::
name|isGridVisible
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_view
operator|->
name|showGrid
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setGridVisible
name|void
name|QCalendarWidget
operator|::
name|setGridVisible
parameter_list|(
name|bool
name|show
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|setShowGrid
argument_list|(
name|show
argument_list|)
expr_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QCalendarWidget::selectionMode     \brief the type of selection the user can make in the calendar      When this property is set to SingleSelection, the user can select a date     within the minimum and maximum allowed dates, using either the mouse or     the keyboard.      When the property is set to NoSelection, the user will be unable to select     dates, but they can still be selected programmatically. Note that the date     that is selected when the property is set to NoSelection will still be     the selected date of the calendar.      The default value is SingleSelection. */
end_comment
begin_function
DECL|function|selectionMode
name|QCalendarWidget
operator|::
name|SelectionMode
name|QCalendarWidget
operator|::
name|selectionMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_view
operator|->
name|readOnly
condition|?
name|QCalendarWidget
operator|::
name|NoSelection
else|:
name|QCalendarWidget
operator|::
name|SingleSelection
return|;
block|}
end_function
begin_function
DECL|function|setSelectionMode
name|void
name|QCalendarWidget
operator|::
name|setSelectionMode
parameter_list|(
name|SelectionMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|readOnly
operator|=
operator|(
name|mode
operator|==
name|QCalendarWidget
operator|::
name|NoSelection
operator|)
expr_stmt|;
name|d
operator|->
name|setNavigatorEnabled
argument_list|(
name|isDateEditEnabled
argument_list|()
operator|&&
operator|(
name|selectionMode
argument_list|()
operator|!=
name|QCalendarWidget
operator|::
name|NoSelection
operator|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QCalendarWidget::firstDayOfWeek     \brief a value identifying the day displayed in the first column.      By default, the day displayed in the first column     is the first day of the week for the calendar's locale. */
end_comment
begin_function
DECL|function|setFirstDayOfWeek
name|void
name|QCalendarWidget
operator|::
name|setFirstDayOfWeek
parameter_list|(
name|Qt
operator|::
name|DayOfWeek
name|dayOfWeek
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|Qt
operator|::
name|DayOfWeek
operator|)
name|d
operator|->
name|m_model
operator|->
name|firstColumnDay
argument_list|()
operator|==
name|dayOfWeek
condition|)
return|return;
name|d
operator|->
name|m_model
operator|->
name|setFirstColumnDay
argument_list|(
name|dayOfWeek
argument_list|)
expr_stmt|;
name|d
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|firstDayOfWeek
name|Qt
operator|::
name|DayOfWeek
name|QCalendarWidget
operator|::
name|firstDayOfWeek
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
operator|(
name|Qt
operator|::
name|DayOfWeek
operator|)
name|d
operator|->
name|m_model
operator|->
name|firstColumnDay
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the text char format for rendering the header. */
end_comment
begin_function
DECL|function|headerTextFormat
name|QTextCharFormat
name|QCalendarWidget
operator|::
name|headerTextFormat
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_model
operator|->
name|m_headerFormat
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the text char format for rendering the header to \a format.     If you also set a weekday text format, this format's foreground and     background color will take precedence over the header's format.     The other formatting information will still be decided by     the header's format. */
end_comment
begin_function
DECL|function|setHeaderTextFormat
name|void
name|QCalendarWidget
operator|::
name|setHeaderTextFormat
parameter_list|(
specifier|const
name|QTextCharFormat
modifier|&
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_model
operator|->
name|m_headerFormat
operator|=
name|format
expr_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the text char format for rendering of day in the week \a dayOfWeek.      \sa headerTextFormat() */
end_comment
begin_function
DECL|function|weekdayTextFormat
name|QTextCharFormat
name|QCalendarWidget
operator|::
name|weekdayTextFormat
parameter_list|(
name|Qt
operator|::
name|DayOfWeek
name|dayOfWeek
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_model
operator|->
name|m_dayFormats
operator|.
name|value
argument_list|(
name|dayOfWeek
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the text char format for rendering of day in the week \a dayOfWeek to \a format.     The format will take precedence over the header format in case of foreground     and background color. Other text formatting information is taken from the headers format.      \sa setHeaderTextFormat() */
end_comment
begin_function
DECL|function|setWeekdayTextFormat
name|void
name|QCalendarWidget
operator|::
name|setWeekdayTextFormat
parameter_list|(
name|Qt
operator|::
name|DayOfWeek
name|dayOfWeek
parameter_list|,
specifier|const
name|QTextCharFormat
modifier|&
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_model
operator|->
name|m_dayFormats
index|[
name|dayOfWeek
index|]
operator|=
name|format
expr_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a QMap from QDate to QTextCharFormat showing all dates     that use a special format that alters their rendering. */
end_comment
begin_function
DECL|function|dateTextFormat
name|QMap
argument_list|<
name|QDate
argument_list|,
name|QTextCharFormat
argument_list|>
name|QCalendarWidget
operator|::
name|dateTextFormat
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_model
operator|->
name|m_dateFormats
return|;
block|}
end_function
begin_comment
comment|/*!     Returns a QTextCharFormat for \a date. The char format can be be     empty if the date is not renderd specially. */
end_comment
begin_function
DECL|function|dateTextFormat
name|QTextCharFormat
name|QCalendarWidget
operator|::
name|dateTextFormat
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_model
operator|->
name|m_dateFormats
operator|.
name|value
argument_list|(
name|date
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the format used to render the given \a date to that specified by \a format.      If \a date is null, all date formats are cleared. */
end_comment
begin_function
DECL|function|setDateTextFormat
name|void
name|QCalendarWidget
operator|::
name|setDateTextFormat
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|,
specifier|const
name|QTextCharFormat
modifier|&
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
operator|.
name|isNull
argument_list|()
condition|)
name|d
operator|->
name|m_model
operator|->
name|m_dateFormats
operator|.
name|clear
argument_list|()
expr_stmt|;
else|else
name|d
operator|->
name|m_model
operator|->
name|m_dateFormats
index|[
name|date
index|]
operator|=
name|format
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QCalendarWidget::dateEditEnabled     \brief whether the date edit popup is enabled     \since 4.3      If this property is enabled, pressing a non-modifier key will cause a     date edit to popup if the calendar widget has focus, allowing the user     to specify a date in the form specified by the current locale.      By default, this property is enabled.      The date edit is simpler in appearance than QDateEdit, but allows the     user to navigate between fields using the left and right cursor keys,     increment and decrement individual fields using the up and down cursor     keys, and enter values directly using the number keys.      \sa QCalendarWidget::dateEditAcceptDelay */
end_comment
begin_function
DECL|function|isDateEditEnabled
name|bool
name|QCalendarWidget
operator|::
name|isDateEditEnabled
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_dateEditEnabled
return|;
block|}
end_function
begin_function
DECL|function|setDateEditEnabled
name|void
name|QCalendarWidget
operator|::
name|setDateEditEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDateEditEnabled
argument_list|()
operator|==
name|enable
condition|)
return|return;
name|d
operator|->
name|m_dateEditEnabled
operator|=
name|enable
expr_stmt|;
name|d
operator|->
name|setNavigatorEnabled
argument_list|(
name|enable
operator|&&
operator|(
name|selectionMode
argument_list|()
operator|!=
name|QCalendarWidget
operator|::
name|NoSelection
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QCalendarWidget::dateEditAcceptDelay     \brief the time an inactive date edit is shown before its contents are accepted     \since 4.3      If the calendar widget's \l{dateEditEnabled}{date edit is enabled}, this     property specifies the amount of time (in millseconds) that the date edit     remains open after the most recent user input. Once this time has elapsed,     the date specified in the date edit is accepted and the popup is closed.      By default, the delay is defined to be 1500 milliseconds (1.5 seconds). */
end_comment
begin_function
DECL|function|dateEditAcceptDelay
name|int
name|QCalendarWidget
operator|::
name|dateEditAcceptDelay
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|m_navigator
operator|->
name|dateEditAcceptDelay
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setDateEditAcceptDelay
name|void
name|QCalendarWidget
operator|::
name|setDateEditAcceptDelay
parameter_list|(
name|int
name|delay
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_navigator
operator|->
name|setDateEditAcceptDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Updates the cell specified by the given \a date unless updates     are disabled or the cell is hidden.      \sa updateCells(), yearShown(), monthShown() */
end_comment
begin_function
DECL|function|updateCell
name|void
name|QCalendarWidget
operator|::
name|updateCell
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
if|if
condition|(
operator|!
name|date
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QCalendarWidget::updateCell: Invalid date"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|isVisible
argument_list|()
condition|)
return|return;
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|int
name|row
decl_stmt|,
name|column
decl_stmt|;
name|d
operator|->
name|m_model
operator|->
name|cellForDate
argument_list|(
name|date
argument_list|,
operator|&
name|row
argument_list|,
operator|&
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|==
operator|-
literal|1
operator|||
name|column
operator|==
operator|-
literal|1
condition|)
return|return;
name|QModelIndex
name|modelIndex
init|=
name|d
operator|->
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|modelIndex
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|d
operator|->
name|m_view
operator|->
name|viewport
argument_list|()
operator|->
name|update
argument_list|(
name|d
operator|->
name|m_view
operator|->
name|visualRect
argument_list|(
name|modelIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \since 4.4      Updates all visible cells unless updates are disabled.      \sa updateCell() */
end_comment
begin_function
DECL|function|updateCells
name|void
name|QCalendarWidget
operator|::
name|updateCells
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|d
operator|->
name|m_view
operator|->
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QCalendarWidget::selectionChanged()      This signal is emitted when the currently selected date is     changed.      The currently selected date can be changed by the user using the     mouse or keyboard, or by the programmer using setSelectedDate().      \sa selectedDate() */
end_comment
begin_comment
comment|/*!     \fn void QCalendarWidget::currentPageChanged(int year, int month)      This signal is emitted when the currently shown month is changed.     The new \a year and \a month are passed as parameters.      \sa setCurrentPage() */
end_comment
begin_comment
comment|/*!     \fn void QCalendarWidget::activated(const QDate&date)      This signal is emitted whenever the user presses the Return or     Enter key or double-clicks a \a date in the calendar     widget. */
end_comment
begin_comment
comment|/*!     \fn void QCalendarWidget::clicked(const QDate&date)      This signal is emitted when a mouse button is clicked. The date     the mouse was clicked on is specified by \a date. The signal is     only emitted when clicked on a valid date, e.g., dates are not     outside the minimumDate() and maximumDate(). If the selection mode     is NoSelection, this signal will not be emitted.  */
end_comment
begin_comment
comment|/*!     \property QCalendarWidget::navigationBarVisible     \brief whether the navigation bar is shown or not      \since 4.3      When this property is \c true (the default), the next month,     previous month, month selection, year selection controls are     shown on top.      When the property is set to false, these controls are hidden. */
end_comment
begin_function
DECL|function|isNavigationBarVisible
name|bool
name|QCalendarWidget
operator|::
name|isNavigationBarVisible
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QCalendarWidget
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|navBarVisible
return|;
block|}
end_function
begin_function
DECL|function|setNavigationBarVisible
name|void
name|QCalendarWidget
operator|::
name|setNavigationBarVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
name|d
operator|->
name|navBarVisible
operator|=
name|visible
expr_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|navBarBackground
operator|->
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QCalendarWidget
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|LayoutDirectionChange
case|:
name|d
operator|->
name|updateButtonIcons
argument_list|()
expr_stmt|;
case|case
name|QEvent
operator|::
name|LocaleChange
case|:
name|d
operator|->
name|m_model
operator|->
name|setFirstColumnDay
argument_list|(
name|locale
argument_list|()
operator|.
name|firstDayOfWeek
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateMonthMenuNames
argument_list|()
expr_stmt|;
name|d
operator|->
name|updateNavigationBar
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|FontChange
case|:
case|case
name|QEvent
operator|::
name|ApplicationFontChange
case|:
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|StyleChange
case|:
name|d
operator|->
name|cachedSizeHint
operator|=
name|QSize
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_view
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|eventFilter
name|bool
name|QCalendarWidget
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|watched
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseButtonPress
operator|&&
name|d
operator|->
name|yearEdit
operator|->
name|hasFocus
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|tlw
init|=
name|window
argument_list|()
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|watched
argument_list|)
decl_stmt|;
comment|//as we have a event filter on the whole application we first make sure that the top level widget
comment|//of both this and the watched widget are the same to decide if we should finish the year edition.
if|if
condition|(
name|widget
operator|->
name|window
argument_list|()
operator|==
name|tlw
condition|)
block|{
name|QPoint
name|mousePos
init|=
name|widget
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|geom
init|=
name|QRect
argument_list|(
name|d
operator|->
name|yearEdit
operator|->
name|mapTo
argument_list|(
name|tlw
argument_list|,
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|d
operator|->
name|yearEdit
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|geom
operator|.
name|contains
argument_list|(
name|mousePos
argument_list|)
condition|)
block|{
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
name|d
operator|->
name|_q_yearEditingFinished
argument_list|()
expr_stmt|;
name|setFocus
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
name|QWidget
operator|::
name|eventFilter
argument_list|(
name|watched
argument_list|,
name|event
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|QCalendarWidget
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NoMouseReplay
argument_list|)
expr_stmt|;
name|QWidget
operator|::
name|mousePressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|setFocus
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QCalendarWidget
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
comment|// XXX Should really use a QWidgetStack for yearEdit and yearButton,
comment|// XXX here we hide the year edit when the layout is likely to break
comment|// XXX the manual positioning of the yearEdit over the yearButton.
if|if
condition|(
name|d
operator|->
name|yearEdit
operator|->
name|isVisible
argument_list|()
operator|&&
name|event
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|!=
name|event
operator|->
name|oldSize
argument_list|()
operator|.
name|width
argument_list|()
condition|)
name|d
operator|->
name|_q_yearEditingFinished
argument_list|()
expr_stmt|;
name|QWidget
operator|::
name|resizeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QCalendarWidget
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QCalendarWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|yearEdit
operator|->
name|isVisible
argument_list|()
operator|&&
name|event
operator|->
name|matches
argument_list|(
name|QKeySequence
operator|::
name|Cancel
argument_list|)
condition|)
block|{
name|d
operator|->
name|yearEdit
operator|->
name|setValue
argument_list|(
name|yearShown
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|_q_yearEditingFinished
argument_list|()
expr_stmt|;
return|return;
block|}
name|QWidget
operator|::
name|keyPressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"qcalendarwidget.moc"
end_include
begin_include
include|#
directive|include
file|"moc_qcalendarwidget.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_CALENDARWIDGET
end_comment
end_unit
