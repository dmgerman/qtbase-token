begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTOOLBUTTON_H
end_ifndef
begin_define
DECL|macro|QTOOLBUTTON_H
define|#
directive|define
name|QTOOLBUTTON_H
end_define
begin_include
include|#
directive|include
file|<QtWidgets/qabstractbutton.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_TOOLBUTTON
name|class
name|QToolButtonPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMenu
name|class
name|QMenu
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QStyleOptionToolButton
name|class
name|QStyleOptionToolButton
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QToolButton
range|:
name|public
name|QAbstractButton
block|{
name|Q_OBJECT
name|Q_ENUMS
argument_list|(
argument|Qt::ToolButtonStyle Qt::ArrowType ToolButtonPopupMode
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|Q_PROPERTY
argument_list|(
argument|ToolButtonPopupMode popupMode READ popupMode WRITE setPopupMode
argument_list|)
endif|#
directive|endif
name|Q_PROPERTY
argument_list|(
argument|Qt::ToolButtonStyle toolButtonStyle READ toolButtonStyle WRITE setToolButtonStyle
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool autoRaise READ autoRaise WRITE setAutoRaise
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::ArrowType arrowType READ arrowType WRITE setArrowType
argument_list|)
name|public
operator|:
expr|enum
name|ToolButtonPopupMode
block|{
name|DelayedPopup
block|,
name|MenuButtonPopup
block|,
name|InstantPopup
block|}
block|;
name|explicit
name|QToolButton
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QToolButton
argument_list|()
block|;
name|QSize
name|sizeHint
argument_list|()
specifier|const
block|;
name|QSize
name|minimumSizeHint
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|ToolButtonStyle
name|toolButtonStyle
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|ArrowType
name|arrowType
argument_list|()
specifier|const
block|;
name|void
name|setArrowType
argument_list|(
argument|Qt::ArrowType type
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|void
name|setMenu
argument_list|(
name|QMenu
operator|*
name|menu
argument_list|)
block|;
name|QMenu
operator|*
name|menu
argument_list|()
specifier|const
block|;
name|void
name|setPopupMode
argument_list|(
argument|ToolButtonPopupMode mode
argument_list|)
block|;
name|ToolButtonPopupMode
name|popupMode
argument_list|()
specifier|const
block|;
endif|#
directive|endif
name|QAction
operator|*
name|defaultAction
argument_list|()
specifier|const
block|;
name|void
name|setAutoRaise
argument_list|(
argument|bool enable
argument_list|)
block|;
name|bool
name|autoRaise
argument_list|()
specifier|const
block|;
name|public
name|Q_SLOTS
operator|:
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|void
name|showMenu
argument_list|()
block|;
endif|#
directive|endif
name|void
name|setToolButtonStyle
argument_list|(
argument|Qt::ToolButtonStyle style
argument_list|)
block|;
name|void
name|setDefaultAction
argument_list|(
name|QAction
operator|*
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
block|;
name|protected
operator|:
name|QToolButton
argument_list|(
name|QToolButtonPrivate
operator|&
argument_list|,
name|QWidget
operator|*
name|parent
argument_list|)
block|;
name|bool
name|event
argument_list|(
name|QEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|mousePressEvent
argument_list|(
name|QMouseEvent
operator|*
argument_list|)
block|;
name|void
name|mouseReleaseEvent
argument_list|(
name|QMouseEvent
operator|*
argument_list|)
block|;
name|void
name|paintEvent
argument_list|(
name|QPaintEvent
operator|*
argument_list|)
block|;
name|void
name|actionEvent
argument_list|(
name|QActionEvent
operator|*
argument_list|)
block|;
name|void
name|enterEvent
argument_list|(
name|QEvent
operator|*
argument_list|)
block|;
name|void
name|leaveEvent
argument_list|(
name|QEvent
operator|*
argument_list|)
block|;
name|void
name|timerEvent
argument_list|(
name|QTimerEvent
operator|*
argument_list|)
block|;
name|void
name|changeEvent
argument_list|(
name|QEvent
operator|*
argument_list|)
block|;
name|bool
name|hitButton
argument_list|(
argument|const QPoint&pos
argument_list|)
specifier|const
block|;
name|void
name|nextCheckState
argument_list|()
block|;
name|void
name|initStyleOption
argument_list|(
argument|QStyleOptionToolButton *option
argument_list|)
specifier|const
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QToolButton
argument_list|)
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QToolButton
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_buttonPressed()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_updateButtonDown()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_menuTriggered(QAction*)
argument_list|)
endif|#
directive|endif
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_actionTriggered()
argument_list|)
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|public
operator|:
expr|enum
name|TextPosition
block|{
name|BesideIcon
block|,
name|BelowIcon
block|,
name|Right
operator|=
name|BesideIcon
block|,
name|Under
operator|=
name|BelowIcon
block|}
block|;
name|QT3_SUPPORT_CONSTRUCTOR
name|QToolButton
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|)
block|;
name|QT3_SUPPORT_CONSTRUCTOR
name|QToolButton
argument_list|(
argument|Qt::ArrowType type
argument_list|,
argument|QWidget *parent
argument_list|,
argument|const char* name
argument_list|)
block|;
name|QT3_SUPPORT_CONSTRUCTOR
name|QToolButton
argument_list|(
specifier|const
name|QIcon
operator|&
name|s
argument_list|,
specifier|const
name|QString
operator|&
name|textLabel
argument_list|,
specifier|const
name|QString
operator|&
name|grouptext
argument_list|,
name|QObject
operator|*
name|receiver
argument_list|,
specifier|const
name|char
operator|*
name|slot
argument_list|,
name|QWidget
operator|*
name|parent
argument_list|,
specifier|const
name|char
operator|*
name|name
operator|=
literal|0
argument_list|)
block|;
specifier|inline
name|QT3_SUPPORT
name|void
name|setPixmap
argument_list|(
argument|const QPixmap&pixmap
argument_list|)
block|{
name|setIcon
argument_list|(
name|static_cast
operator|<
name|QIcon
operator|>
operator|(
name|pixmap
operator|)
argument_list|)
block|; }
name|QT3_SUPPORT
name|void
name|setOnIconSet
argument_list|(
specifier|const
name|QIcon
operator|&
argument_list|)
block|;
name|QT3_SUPPORT
name|void
name|setOffIconSet
argument_list|(
specifier|const
name|QIcon
operator|&
argument_list|)
block|;
specifier|inline
name|QT3_SUPPORT
name|void
name|setIconSet
argument_list|(
argument|const QIcon&icon
argument_list|)
block|{
name|setIcon
argument_list|(
name|icon
argument_list|)
block|;}
name|QT3_SUPPORT
name|void
name|setIconSet
argument_list|(
argument|const QIcon&
argument_list|,
argument|bool on
argument_list|)
block|;
specifier|inline
name|QT3_SUPPORT
name|void
name|setTextLabel
argument_list|(
argument|const QString&text
argument_list|,
argument|bool tooltip = true
argument_list|)
block|{
name|setText
argument_list|(
name|text
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
if|if
condition|(
name|tooltip
condition|)
name|setToolTip
argument_list|(
name|text
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|tooltip
argument_list|)
block|;
endif|#
directive|endif
block|}
specifier|inline
name|QT3_SUPPORT
name|QString
name|textLabel
argument_list|()
specifier|const
block|{
return|return
name|text
argument_list|()
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|QT3_SUPPORT
name|QIcon
name|onIconSet
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QT3_SUPPORT
name|QIcon
name|offIconSet
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QT3_SUPPORT
name|QIcon
name|iconSet
argument_list|(
name|bool
name|on
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|QIcon
name|iconSet
argument_list|()
specifier|const
block|{
return|return
name|icon
argument_list|()
return|;
block|}
end_expr_stmt
begin_function
specifier|inline
name|QT3_SUPPORT
name|void
name|openPopup
parameter_list|()
block|{
name|showMenu
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
specifier|inline
name|QT3_SUPPORT
name|void
name|setPopup
parameter_list|(
name|QMenu
modifier|*
name|popup
parameter_list|)
block|{
name|setMenu
argument_list|(
name|popup
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|QMenu
operator|*
name|popup
argument_list|()
specifier|const
block|{
return|return
name|menu
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|bool
name|usesBigPixmap
argument_list|()
specifier|const
block|{
return|return
name|iconSize
argument_list|()
operator|.
name|height
argument_list|()
operator|>
literal|22
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|bool
name|usesTextLabel
argument_list|()
specifier|const
block|{
return|return
name|toolButtonStyle
argument_list|()
operator|!=
name|Qt
operator|::
name|ToolButtonIconOnly
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QT3_SUPPORT
name|TextPosition
name|textPosition
argument_list|()
specifier|const
block|{
return|return
name|toolButtonStyle
argument_list|()
operator|==
name|Qt
operator|::
name|ToolButtonTextUnderIcon
operator|?
name|BelowIcon
operator|:
name|BesideIcon
return|;
block|}
end_expr_stmt
begin_function_decl
name|QT3_SUPPORT
name|void
name|setPopupDelay
parameter_list|(
name|int
name|delay
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QT3_SUPPORT
name|int
name|popupDelay
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|public
name|Q_SLOTS
range|:
name|QT_MOC_COMPAT
name|void
name|setUsesBigPixmap
argument_list|(
argument|bool enable
argument_list|)
block|{
name|setIconSize
argument_list|(
name|enable
operator|?
name|QSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
operator|:
name|QSize
argument_list|(
literal|22
argument_list|,
literal|22
argument_list|)
argument_list|)
block|; }
name|QT_MOC_COMPAT
name|void
name|setUsesTextLabel
argument_list|(
argument|bool enable
argument_list|)
block|{
name|setToolButtonStyle
argument_list|(
name|enable
condition|?
name|Qt
operator|::
name|ToolButtonTextUnderIcon
else|:
name|Qt
operator|::
name|ToolButtonIconOnly
argument_list|)
block|; }
name|QT_MOC_COMPAT
name|void
name|setTextPosition
argument_list|(
argument|QToolButton::TextPosition pos
argument_list|)
block|{
name|setToolButtonStyle
argument_list|(
name|pos
operator|==
name|BesideIcon
condition|?
name|Qt
operator|::
name|ToolButtonTextBesideIcon
else|:
name|Qt
operator|::
name|ToolButtonTextUnderIcon
argument_list|)
block|; }
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_endif
unit|};
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLBUTTON
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTOOLBUTTON_H
end_comment
end_unit
