begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QTOOLBUTTON_H
end_ifndef
begin_define
DECL|macro|QTOOLBUTTON_H
define|#
directive|define
name|QTOOLBUTTON_H
end_define
begin_include
include|#
directive|include
file|<QtWidgets/qabstractbutton.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_TOOLBUTTON
name|class
name|QToolButtonPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMenu
name|class
name|QMenu
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QStyleOptionToolButton
name|class
name|QStyleOptionToolButton
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QToolButton
range|:
name|public
name|QAbstractButton
block|{
name|Q_OBJECT
name|Q_ENUMS
argument_list|(
argument|Qt::ToolButtonStyle Qt::ArrowType ToolButtonPopupMode
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|Q_PROPERTY
argument_list|(
argument|ToolButtonPopupMode popupMode READ popupMode WRITE setPopupMode
argument_list|)
endif|#
directive|endif
name|Q_PROPERTY
argument_list|(
argument|Qt::ToolButtonStyle toolButtonStyle READ toolButtonStyle WRITE setToolButtonStyle
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool autoRaise READ autoRaise WRITE setAutoRaise
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::ArrowType arrowType READ arrowType WRITE setArrowType
argument_list|)
name|public
operator|:
expr|enum
name|ToolButtonPopupMode
block|{
name|DelayedPopup
block|,
name|MenuButtonPopup
block|,
name|InstantPopup
block|}
block|;
name|explicit
name|QToolButton
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QToolButton
argument_list|()
block|;
name|QSize
name|sizeHint
argument_list|()
specifier|const
block|;
name|QSize
name|minimumSizeHint
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|ToolButtonStyle
name|toolButtonStyle
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|ArrowType
name|arrowType
argument_list|()
specifier|const
block|;
name|void
name|setArrowType
argument_list|(
argument|Qt::ArrowType type
argument_list|)
block|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|void
name|setMenu
argument_list|(
name|QMenu
operator|*
name|menu
argument_list|)
block|;
name|QMenu
operator|*
name|menu
argument_list|()
specifier|const
block|;
name|void
name|setPopupMode
argument_list|(
argument|ToolButtonPopupMode mode
argument_list|)
block|;
name|ToolButtonPopupMode
name|popupMode
argument_list|()
specifier|const
block|;
endif|#
directive|endif
name|QAction
operator|*
name|defaultAction
argument_list|()
specifier|const
block|;
name|void
name|setAutoRaise
argument_list|(
argument|bool enable
argument_list|)
block|;
name|bool
name|autoRaise
argument_list|()
specifier|const
block|;
name|public
name|Q_SLOTS
operator|:
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|void
name|showMenu
argument_list|()
block|;
endif|#
directive|endif
name|void
name|setToolButtonStyle
argument_list|(
argument|Qt::ToolButtonStyle style
argument_list|)
block|;
name|void
name|setDefaultAction
argument_list|(
name|QAction
operator|*
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
block|;
name|protected
operator|:
name|QToolButton
argument_list|(
name|QToolButtonPrivate
operator|&
argument_list|,
name|QWidget
operator|*
name|parent
argument_list|)
block|;
name|bool
name|event
argument_list|(
name|QEvent
operator|*
name|e
argument_list|)
block|;
name|void
name|mousePressEvent
argument_list|(
name|QMouseEvent
operator|*
argument_list|)
block|;
name|void
name|mouseReleaseEvent
argument_list|(
name|QMouseEvent
operator|*
argument_list|)
block|;
name|void
name|paintEvent
argument_list|(
name|QPaintEvent
operator|*
argument_list|)
block|;
name|void
name|actionEvent
argument_list|(
name|QActionEvent
operator|*
argument_list|)
block|;
name|void
name|enterEvent
argument_list|(
name|QEvent
operator|*
argument_list|)
block|;
name|void
name|leaveEvent
argument_list|(
name|QEvent
operator|*
argument_list|)
block|;
name|void
name|timerEvent
argument_list|(
name|QTimerEvent
operator|*
argument_list|)
block|;
name|void
name|changeEvent
argument_list|(
name|QEvent
operator|*
argument_list|)
block|;
name|bool
name|hitButton
argument_list|(
argument|const QPoint&pos
argument_list|)
specifier|const
block|;
name|void
name|nextCheckState
argument_list|()
block|;
name|void
name|initStyleOption
argument_list|(
argument|QStyleOptionToolButton *option
argument_list|)
specifier|const
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QToolButton
argument_list|)
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QToolButton
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_buttonPressed()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_updateButtonDown()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_menuTriggered(QAction*)
argument_list|)
endif|#
directive|endif
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_actionTriggered()
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TOOLBUTTON
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QTOOLBUTTON_H
end_comment
end_unit
