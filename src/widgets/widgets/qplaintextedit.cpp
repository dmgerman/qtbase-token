begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qplaintextedit_p.h"
end_include
begin_include
include|#
directive|include
file|<qfont.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qdrag.h>
end_include
begin_include
include|#
directive|include
file|<qclipboard.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qtimer.h>
end_include
begin_include
include|#
directive|include
file|"private/qtextdocumentlayout_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qabstracttextdocumentlayout_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextdocument.h"
end_include
begin_include
include|#
directive|include
file|"private/qtextdocument_p.h"
end_include
begin_include
include|#
directive|include
file|"qtextlist.h"
end_include
begin_include
include|#
directive|include
file|<qtextformat.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<qtexttable.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEXTEDIT
end_ifndef
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|shouldEnableInputMethod
specifier|static
specifier|inline
name|bool
name|shouldEnableInputMethod
parameter_list|(
name|QPlainTextEdit
modifier|*
name|plaintextedit
parameter_list|)
block|{
return|return
operator|!
name|plaintextedit
operator|->
name|isReadOnly
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|QPlainTextDocumentLayoutPrivate
class|class
name|QPlainTextDocumentLayoutPrivate
super|:
specifier|public
name|QAbstractTextDocumentLayoutPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QPlainTextDocumentLayout
parameter_list|)
specifier|public
private|:
DECL|function|QPlainTextDocumentLayoutPrivate
name|QPlainTextDocumentLayoutPrivate
parameter_list|()
block|{
name|mainViewPrivate
operator|=
literal|0
expr_stmt|;
name|width
operator|=
literal|0
expr_stmt|;
name|maximumWidth
operator|=
literal|0
expr_stmt|;
name|maximumWidthBlockNumber
operator|=
literal|0
expr_stmt|;
name|blockCount
operator|=
literal|1
expr_stmt|;
name|blockUpdate
operator|=
name|blockDocumentSizeChanged
operator|=
literal|false
expr_stmt|;
name|cursorWidth
operator|=
literal|1
expr_stmt|;
name|textLayoutFlags
operator|=
literal|0
expr_stmt|;
block|}
DECL|member|width
name|qreal
name|width
decl_stmt|;
DECL|member|maximumWidth
name|qreal
name|maximumWidth
decl_stmt|;
DECL|member|maximumWidthBlockNumber
name|int
name|maximumWidthBlockNumber
decl_stmt|;
DECL|member|blockCount
name|int
name|blockCount
decl_stmt|;
DECL|member|mainViewPrivate
name|QPlainTextEditPrivate
modifier|*
name|mainViewPrivate
decl_stmt|;
DECL|member|blockUpdate
name|bool
name|blockUpdate
decl_stmt|;
DECL|member|blockDocumentSizeChanged
name|bool
name|blockDocumentSizeChanged
decl_stmt|;
DECL|member|cursorWidth
name|int
name|cursorWidth
decl_stmt|;
DECL|member|textLayoutFlags
name|int
name|textLayoutFlags
decl_stmt|;
name|void
name|layoutBlock
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|)
function_decl|;
name|qreal
name|blockWidth
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|)
function_decl|;
name|void
name|relayout
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|/*! \class QPlainTextDocumentLayout     \since 4.4     \brief The QPlainTextDocumentLayout class implements a plain text layout for QTextDocument      \ingroup richtext-processing     \inmodule QtWidgets     A QPlainTextDocumentLayout is required for text documents that can    be display or edited in a QPlainTextEdit. See    QTextDocument::setDocumentLayout().     QPlainTextDocumentLayout uses the QAbstractTextDocumentLayout API    that QTextDocument requires, but redefines it partially in order to    support plain text better. For instances, it does not operate on    vertical pixels, but on paragraphs (called blocks) instead. The    height of a document is identical to the number of paragraphs it    contains. The layout also doesn't support tables or nested frames,    or any sort of advanced text layout that goes beyond a list of    paragraphs with syntax highlighting.  */
end_comment
begin_comment
comment|/*!   Constructs a plain text document layout for the text \a document.  */
end_comment
begin_constructor
DECL|function|QPlainTextDocumentLayout
name|QPlainTextDocumentLayout
operator|::
name|QPlainTextDocumentLayout
parameter_list|(
name|QTextDocument
modifier|*
name|document
parameter_list|)
member_init_list|:
name|QAbstractTextDocumentLayout
argument_list|(
operator|*
operator|new
name|QPlainTextDocumentLayoutPrivate
argument_list|,
name|document
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!   Destructs a plain text document layout.  */
end_comment
begin_destructor
DECL|function|~QPlainTextDocumentLayout
name|QPlainTextDocumentLayout
operator|::
name|~
name|QPlainTextDocumentLayout
parameter_list|()
block|{}
end_destructor
begin_comment
comment|/*!   \reimp  */
end_comment
begin_function
DECL|function|draw
name|void
name|QPlainTextDocumentLayout
operator|::
name|draw
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|PaintContext
modifier|&
parameter_list|)
block|{ }
end_function
begin_comment
comment|/*!   \reimp  */
end_comment
begin_function
DECL|function|hitTest
name|int
name|QPlainTextDocumentLayout
operator|::
name|hitTest
parameter_list|(
specifier|const
name|QPointF
modifier|&
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
parameter_list|)
specifier|const
block|{
comment|//     this function is used from
comment|//     QAbstractTextDocumentLayout::anchorAt(), but is not
comment|//     implementable in a plain text document layout, because the
comment|//     layout depends on the top block and top line which depends on
comment|//     the view
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp  */
end_comment
begin_function
DECL|function|pageCount
name|int
name|QPlainTextDocumentLayout
operator|::
name|pageCount
parameter_list|()
specifier|const
block|{
return|return
literal|1
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp  */
end_comment
begin_function
DECL|function|documentSize
name|QSizeF
name|QPlainTextDocumentLayout
operator|::
name|documentSize
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextDocumentLayout
argument_list|)
expr_stmt|;
return|return
name|QSizeF
argument_list|(
name|d
operator|->
name|maximumWidth
argument_list|,
name|document
argument_list|()
operator|->
name|lineCount
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp  */
end_comment
begin_function
DECL|function|frameBoundingRect
name|QRectF
name|QPlainTextDocumentLayout
operator|::
name|frameBoundingRect
parameter_list|(
name|QTextFrame
modifier|*
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextDocumentLayout
argument_list|)
expr_stmt|;
return|return
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|qMax
argument_list|(
name|d
operator|->
name|width
argument_list|,
name|d
operator|->
name|maximumWidth
argument_list|)
argument_list|,
name|qreal
argument_list|(
name|INT_MAX
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp  */
end_comment
begin_function
DECL|function|blockBoundingRect
name|QRectF
name|QPlainTextDocumentLayout
operator|::
name|blockBoundingRect
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|block
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
name|QRectF
argument_list|()
return|;
block|}
name|QTextLayout
modifier|*
name|tl
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tl
operator|->
name|lineCount
argument_list|()
condition|)
cast|const_cast
argument_list|<
name|QPlainTextDocumentLayout
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|layoutBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|QRectF
name|br
decl_stmt|;
if|if
condition|(
name|block
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|br
operator|=
name|QRectF
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|tl
operator|->
name|boundingRect
argument_list|()
operator|.
name|bottomRight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tl
operator|->
name|lineCount
argument_list|()
operator|==
literal|1
condition|)
name|br
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|br
operator|.
name|width
argument_list|()
argument_list|,
name|tl
operator|->
name|lineAt
argument_list|(
literal|0
argument_list|)
operator|.
name|naturalTextWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|qreal
name|margin
init|=
name|document
argument_list|()
operator|->
name|documentMargin
argument_list|()
decl_stmt|;
name|br
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|margin
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|block
operator|.
name|next
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
name|br
operator|.
name|adjust
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|margin
argument_list|)
expr_stmt|;
block|}
return|return
name|br
return|;
block|}
end_function
begin_comment
comment|/*!   Ensures that \a block has a valid layout  */
end_comment
begin_function
DECL|function|ensureBlockLayout
name|void
name|QPlainTextDocumentLayout
operator|::
name|ensureBlockLayout
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|block
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QTextLayout
modifier|*
name|tl
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tl
operator|->
name|lineCount
argument_list|()
condition|)
cast|const_cast
argument_list|<
name|QPlainTextDocumentLayout
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|layoutBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \property QPlainTextDocumentLayout::cursorWidth      This property specifies the width of the cursor in pixels. The default value is 1. */
end_comment
begin_function
DECL|function|setCursorWidth
name|void
name|QPlainTextDocumentLayout
operator|::
name|setCursorWidth
parameter_list|(
name|int
name|width
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextDocumentLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|cursorWidth
operator|=
name|width
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorWidth
name|int
name|QPlainTextDocumentLayout
operator|::
name|cursorWidth
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextDocumentLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|cursorWidth
return|;
block|}
end_function
begin_function
DECL|function|priv
name|QPlainTextDocumentLayoutPrivate
modifier|*
name|QPlainTextDocumentLayout
operator|::
name|priv
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextDocumentLayout
argument_list|)
expr_stmt|;
return|return
cast|const_cast
argument_list|<
name|QPlainTextDocumentLayoutPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Requests a complete update on all views.  */
end_comment
begin_function
DECL|function|requestUpdate
name|void
name|QPlainTextDocumentLayout
operator|::
name|requestUpdate
parameter_list|()
block|{
emit|emit
name|update
argument_list|(
name|QRectF
argument_list|(
literal|0.
argument_list|,
operator|-
name|document
argument_list|()
operator|->
name|documentMargin
argument_list|()
argument_list|,
literal|1000000000.
argument_list|,
literal|1000000000.
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|setTextWidth
name|void
name|QPlainTextDocumentLayout
operator|::
name|setTextWidth
parameter_list|(
name|qreal
name|newWidth
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextDocumentLayout
argument_list|)
expr_stmt|;
name|d
operator|->
name|width
operator|=
name|d
operator|->
name|maximumWidth
operator|=
name|newWidth
expr_stmt|;
name|d
operator|->
name|relayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textWidth
name|qreal
name|QPlainTextDocumentLayout
operator|::
name|textWidth
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextDocumentLayout
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|width
return|;
block|}
end_function
begin_function
DECL|function|relayout
name|void
name|QPlainTextDocumentLayoutPrivate
operator|::
name|relayout
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPlainTextDocumentLayout
argument_list|)
expr_stmt|;
name|QTextBlock
name|block
init|=
name|q
operator|->
name|document
argument_list|()
operator|->
name|firstBlock
argument_list|()
decl_stmt|;
while|while
condition|(
name|block
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|block
operator|.
name|layout
argument_list|()
operator|->
name|clearLayout
argument_list|()
expr_stmt|;
name|block
operator|.
name|setLineCount
argument_list|(
name|block
operator|.
name|isVisible
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
emit|emit
name|q
operator|->
name|update
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|/*! \reimp  */
end_comment
begin_function
DECL|function|documentChanged
name|void
name|QPlainTextDocumentLayout
operator|::
name|documentChanged
parameter_list|(
name|int
name|from
parameter_list|,
name|int
comment|/*charsRemoved*/
parameter_list|,
name|int
name|charsAdded
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextDocumentLayout
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|doc
init|=
name|document
argument_list|()
decl_stmt|;
name|int
name|newBlockCount
init|=
name|doc
operator|->
name|blockCount
argument_list|()
decl_stmt|;
name|QTextBlock
name|changeStartBlock
init|=
name|doc
operator|->
name|findBlock
argument_list|(
name|from
argument_list|)
decl_stmt|;
name|QTextBlock
name|changeEndBlock
init|=
name|doc
operator|->
name|findBlock
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
name|from
operator|+
name|charsAdded
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|changeStartBlock
operator|==
name|changeEndBlock
operator|&&
name|newBlockCount
operator|==
name|d
operator|->
name|blockCount
condition|)
block|{
name|QTextBlock
name|block
init|=
name|changeStartBlock
decl_stmt|;
name|int
name|blockLineCount
init|=
name|block
operator|.
name|layout
argument_list|()
operator|->
name|lineCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|block
operator|.
name|isValid
argument_list|()
operator|&&
name|blockLineCount
condition|)
block|{
name|QRectF
name|oldBr
init|=
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|layoutBlock
argument_list|(
name|block
argument_list|)
expr_stmt|;
name|QRectF
name|newBr
init|=
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|newBr
operator|.
name|height
argument_list|()
operator|==
name|oldBr
operator|.
name|height
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|blockUpdate
condition|)
emit|emit
name|updateBlock
argument_list|(
name|block
argument_list|)
emit|;
return|return;
block|}
block|}
block|}
else|else
block|{
name|QTextBlock
name|block
init|=
name|changeStartBlock
decl_stmt|;
do|do
block|{
name|block
operator|.
name|clearLayout
argument_list|()
expr_stmt|;
if|if
condition|(
name|block
operator|==
name|changeEndBlock
condition|)
break|break;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|block
operator|.
name|isValid
argument_list|()
condition|)
do|;
block|}
if|if
condition|(
name|newBlockCount
operator|!=
name|d
operator|->
name|blockCount
condition|)
block|{
name|int
name|changeEnd
init|=
name|changeEndBlock
operator|.
name|blockNumber
argument_list|()
decl_stmt|;
name|int
name|blockDiff
init|=
name|newBlockCount
operator|-
name|d
operator|->
name|blockCount
decl_stmt|;
name|int
name|oldChangeEnd
init|=
name|changeEnd
operator|-
name|blockDiff
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|maximumWidthBlockNumber
operator|>
name|oldChangeEnd
condition|)
name|d
operator|->
name|maximumWidthBlockNumber
operator|+=
name|blockDiff
expr_stmt|;
name|d
operator|->
name|blockCount
operator|=
name|newBlockCount
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|blockCount
operator|==
literal|1
condition|)
name|d
operator|->
name|maximumWidth
operator|=
name|blockWidth
argument_list|(
name|doc
operator|->
name|firstBlock
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|blockDocumentSizeChanged
condition|)
emit|emit
name|documentSizeChanged
argument_list|(
name|documentSize
argument_list|()
argument_list|)
emit|;
if|if
condition|(
name|blockDiff
operator|==
literal|1
operator|&&
name|changeEnd
operator|==
name|newBlockCount
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|blockUpdate
condition|)
block|{
name|QTextBlock
name|b
init|=
name|changeStartBlock
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
emit|emit
name|updateBlock
argument_list|(
name|b
argument_list|)
emit|;
if|if
condition|(
name|b
operator|==
name|changeEndBlock
condition|)
break|break;
name|b
operator|=
name|b
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|blockUpdate
condition|)
emit|emit
name|update
argument_list|(
name|QRectF
argument_list|(
literal|0.
argument_list|,
operator|-
name|doc
operator|->
name|documentMargin
argument_list|()
argument_list|,
literal|1000000000.
argument_list|,
literal|1000000000.
argument_list|)
argument_list|)
emit|;
comment|// optimization potential
block|}
end_function
begin_function
DECL|function|layoutBlock
name|void
name|QPlainTextDocumentLayout
operator|::
name|layoutBlock
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextDocumentLayout
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|doc
init|=
name|document
argument_list|()
decl_stmt|;
name|qreal
name|margin
init|=
name|doc
operator|->
name|documentMargin
argument_list|()
decl_stmt|;
name|qreal
name|blockMaximumWidth
init|=
literal|0
decl_stmt|;
name|qreal
name|height
init|=
literal|0
decl_stmt|;
name|QTextLayout
modifier|*
name|tl
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
name|QTextOption
name|option
init|=
name|doc
operator|->
name|defaultTextOption
argument_list|()
decl_stmt|;
name|tl
operator|->
name|setTextOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|int
name|extraMargin
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|option
operator|.
name|flags
argument_list|()
operator|&
name|QTextOption
operator|::
name|AddSpaceForLineAndParagraphSeparators
condition|)
block|{
name|QFontMetrics
name|fm
argument_list|(
name|block
operator|.
name|charFormat
argument_list|()
operator|.
name|font
argument_list|()
argument_list|)
decl_stmt|;
name|extraMargin
operator|+=
name|fm
operator|.
name|width
argument_list|(
name|QChar
argument_list|(
literal|0x21B5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tl
operator|->
name|beginLayout
argument_list|()
expr_stmt|;
name|qreal
name|availableWidth
init|=
name|d
operator|->
name|width
decl_stmt|;
if|if
condition|(
name|availableWidth
operator|<=
literal|0
condition|)
block|{
name|availableWidth
operator|=
name|qreal
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
comment|// similar to text edit with pageSize.width == 0
block|}
name|availableWidth
operator|-=
literal|2
operator|*
name|margin
operator|+
name|extraMargin
expr_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|QTextLine
name|line
init|=
name|tl
operator|->
name|createLine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|line
operator|.
name|isValid
argument_list|()
condition|)
break|break;
name|line
operator|.
name|setLeadingIncluded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|line
operator|.
name|setLineWidth
argument_list|(
name|availableWidth
argument_list|)
expr_stmt|;
name|line
operator|.
name|setPosition
argument_list|(
name|QPointF
argument_list|(
name|margin
argument_list|,
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|height
operator|+=
name|line
operator|.
name|height
argument_list|()
expr_stmt|;
name|blockMaximumWidth
operator|=
name|qMax
argument_list|(
name|blockMaximumWidth
argument_list|,
name|line
operator|.
name|naturalTextWidth
argument_list|()
operator|+
literal|2
operator|*
name|margin
argument_list|)
expr_stmt|;
block|}
name|tl
operator|->
name|endLayout
argument_list|()
expr_stmt|;
name|int
name|previousLineCount
init|=
name|doc
operator|->
name|lineCount
argument_list|()
decl_stmt|;
cast|const_cast
argument_list|<
name|QTextBlock
operator|&
argument_list|>
argument_list|(
name|block
argument_list|)
operator|.
name|setLineCount
argument_list|(
name|block
operator|.
name|isVisible
argument_list|()
condition|?
name|tl
operator|->
name|lineCount
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
name|int
name|lineCount
init|=
name|doc
operator|->
name|lineCount
argument_list|()
decl_stmt|;
name|bool
name|emitDocumentSizeChanged
init|=
name|previousLineCount
operator|!=
name|lineCount
decl_stmt|;
if|if
condition|(
name|blockMaximumWidth
operator|>
name|d
operator|->
name|maximumWidth
condition|)
block|{
comment|// new longest line
name|d
operator|->
name|maximumWidth
operator|=
name|blockMaximumWidth
expr_stmt|;
name|d
operator|->
name|maximumWidthBlockNumber
operator|=
name|block
operator|.
name|blockNumber
argument_list|()
expr_stmt|;
name|emitDocumentSizeChanged
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|block
operator|.
name|blockNumber
argument_list|()
operator|==
name|d
operator|->
name|maximumWidthBlockNumber
operator|&&
name|blockMaximumWidth
operator|<
name|d
operator|->
name|maximumWidth
condition|)
block|{
comment|// longest line shrinking
name|QTextBlock
name|b
init|=
name|doc
operator|->
name|firstBlock
argument_list|()
decl_stmt|;
name|d
operator|->
name|maximumWidth
operator|=
literal|0
expr_stmt|;
name|QTextBlock
name|maximumBlock
decl_stmt|;
while|while
condition|(
name|b
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qreal
name|blockMaximumWidth
init|=
name|blockWidth
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockMaximumWidth
operator|>
name|d
operator|->
name|maximumWidth
condition|)
block|{
name|d
operator|->
name|maximumWidth
operator|=
name|blockMaximumWidth
expr_stmt|;
name|maximumBlock
operator|=
name|b
expr_stmt|;
block|}
name|b
operator|=
name|b
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|maximumBlock
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|d
operator|->
name|maximumWidthBlockNumber
operator|=
name|maximumBlock
operator|.
name|blockNumber
argument_list|()
expr_stmt|;
name|emitDocumentSizeChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|emitDocumentSizeChanged
operator|&&
operator|!
name|d
operator|->
name|blockDocumentSizeChanged
condition|)
emit|emit
name|documentSizeChanged
argument_list|(
name|documentSize
argument_list|()
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|blockWidth
name|qreal
name|QPlainTextDocumentLayout
operator|::
name|blockWidth
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|)
block|{
name|QTextLayout
modifier|*
name|layout
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|layout
operator|->
name|lineCount
argument_list|()
condition|)
return|return
literal|0
return|;
comment|// only for layouted blocks
name|qreal
name|blockWidth
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layout
operator|->
name|lineCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextLine
name|line
init|=
name|layout
operator|->
name|lineAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|blockWidth
operator|=
name|qMax
argument_list|(
name|line
operator|.
name|naturalTextWidth
argument_list|()
operator|+
literal|8
argument_list|,
name|blockWidth
argument_list|)
expr_stmt|;
block|}
return|return
name|blockWidth
return|;
block|}
end_function
begin_constructor
DECL|function|QPlainTextEditControl
name|QPlainTextEditControl
operator|::
name|QPlainTextEditControl
parameter_list|(
name|QPlainTextEdit
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidgetTextControl
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|textEdit
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|topBlock
argument_list|(
literal|0
argument_list|)
block|{
name|setAcceptRichText
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|_q_cursorPositionChanged
name|void
name|QPlainTextEditPrivate
operator|::
name|_q_cursorPositionChanged
parameter_list|()
block|{
name|pageUpDownLastCursorYIsValid
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_q_verticalScrollbarActionTriggered
name|void
name|QPlainTextEditPrivate
operator|::
name|_q_verticalScrollbarActionTriggered
parameter_list|(
name|int
name|action
parameter_list|)
block|{
if|if
condition|(
name|action
operator|==
name|QAbstractSlider
operator|::
name|SliderPageStepAdd
condition|)
block|{
name|pageUpDown
argument_list|(
name|QTextCursor
operator|::
name|Down
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|==
name|QAbstractSlider
operator|::
name|SliderPageStepSub
condition|)
block|{
name|pageUpDown
argument_list|(
name|QTextCursor
operator|::
name|Up
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createMimeDataFromSelection
name|QMimeData
modifier|*
name|QPlainTextEditControl
operator|::
name|createMimeDataFromSelection
parameter_list|()
specifier|const
block|{
name|QPlainTextEdit
modifier|*
name|ed
init|=
name|qobject_cast
argument_list|<
name|QPlainTextEdit
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ed
condition|)
return|return
name|QWidgetTextControl
operator|::
name|createMimeDataFromSelection
argument_list|()
return|;
return|return
name|ed
operator|->
name|createMimeDataFromSelection
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|canInsertFromMimeData
name|bool
name|QPlainTextEditControl
operator|::
name|canInsertFromMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|source
parameter_list|)
specifier|const
block|{
name|QPlainTextEdit
modifier|*
name|ed
init|=
name|qobject_cast
argument_list|<
name|QPlainTextEdit
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ed
condition|)
return|return
name|QWidgetTextControl
operator|::
name|canInsertFromMimeData
argument_list|(
name|source
argument_list|)
return|;
return|return
name|ed
operator|->
name|canInsertFromMimeData
argument_list|(
name|source
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|insertFromMimeData
name|void
name|QPlainTextEditControl
operator|::
name|insertFromMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|source
parameter_list|)
block|{
name|QPlainTextEdit
modifier|*
name|ed
init|=
name|qobject_cast
argument_list|<
name|QPlainTextEdit
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ed
condition|)
name|QWidgetTextControl
operator|::
name|insertFromMimeData
argument_list|(
name|source
argument_list|)
expr_stmt|;
else|else
name|ed
operator|->
name|insertFromMimeData
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|verticalOffset
name|int
name|QPlainTextEditPrivate
operator|::
name|verticalOffset
parameter_list|(
name|int
name|topBlock
parameter_list|,
name|int
name|topLine
parameter_list|)
specifier|const
block|{
name|qreal
name|offset
init|=
literal|0
decl_stmt|;
name|QTextDocument
modifier|*
name|doc
init|=
name|control
operator|->
name|document
argument_list|()
decl_stmt|;
if|if
condition|(
name|topLine
condition|)
block|{
name|QTextBlock
name|currentBlock
init|=
name|doc
operator|->
name|findBlockByNumber
argument_list|(
name|topBlock
argument_list|)
decl_stmt|;
name|QPlainTextDocumentLayout
modifier|*
name|documentLayout
init|=
name|qobject_cast
argument_list|<
name|QPlainTextDocumentLayout
operator|*
argument_list|>
argument_list|(
name|doc
operator|->
name|documentLayout
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|documentLayout
argument_list|)
expr_stmt|;
name|QRectF
name|r
init|=
name|documentLayout
operator|->
name|blockBoundingRect
argument_list|(
name|currentBlock
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|QTextLayout
modifier|*
name|layout
init|=
name|currentBlock
operator|.
name|layout
argument_list|()
decl_stmt|;
if|if
condition|(
name|layout
operator|&&
name|topLine
operator|<=
name|layout
operator|->
name|lineCount
argument_list|()
condition|)
block|{
name|QTextLine
name|line
init|=
name|layout
operator|->
name|lineAt
argument_list|(
name|topLine
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QRectF
name|lr
init|=
name|line
operator|.
name|naturalTextRect
argument_list|()
decl_stmt|;
name|offset
operator|=
name|lr
operator|.
name|bottom
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|topBlock
operator|==
literal|0
operator|&&
name|topLine
operator|==
literal|0
condition|)
name|offset
operator|-=
name|doc
operator|->
name|documentMargin
argument_list|()
expr_stmt|;
comment|// top margin
return|return
operator|(
name|int
operator|)
name|offset
return|;
block|}
end_function
begin_function
DECL|function|verticalOffset
name|int
name|QPlainTextEditPrivate
operator|::
name|verticalOffset
parameter_list|()
specifier|const
block|{
return|return
name|verticalOffset
argument_list|(
name|control
operator|->
name|topBlock
argument_list|,
name|topLine
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|firstVisibleBlock
name|QTextBlock
name|QPlainTextEditControl
operator|::
name|firstVisibleBlock
parameter_list|()
specifier|const
block|{
return|return
name|document
argument_list|()
operator|->
name|findBlockByNumber
argument_list|(
name|topBlock
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hitTest
name|int
name|QPlainTextEditControl
operator|::
name|hitTest
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|point
parameter_list|,
name|Qt
operator|::
name|HitTestAccuracy
parameter_list|)
specifier|const
block|{
name|int
name|currentBlockNumber
init|=
name|topBlock
decl_stmt|;
name|QTextBlock
name|currentBlock
init|=
name|document
argument_list|()
operator|->
name|findBlockByNumber
argument_list|(
name|currentBlockNumber
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|currentBlock
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|QPlainTextDocumentLayout
modifier|*
name|documentLayout
init|=
name|qobject_cast
argument_list|<
name|QPlainTextDocumentLayout
operator|*
argument_list|>
argument_list|(
name|document
argument_list|()
operator|->
name|documentLayout
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|documentLayout
argument_list|)
expr_stmt|;
name|QPointF
name|offset
decl_stmt|;
name|QRectF
name|r
init|=
name|documentLayout
operator|->
name|blockBoundingRect
argument_list|(
name|currentBlock
argument_list|)
decl_stmt|;
while|while
condition|(
name|currentBlock
operator|.
name|next
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
name|r
operator|.
name|bottom
argument_list|()
operator|+
name|offset
operator|.
name|y
argument_list|()
operator|<=
name|point
operator|.
name|y
argument_list|()
condition|)
block|{
name|offset
operator|.
name|ry
argument_list|()
operator|+=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
name|currentBlock
operator|=
name|currentBlock
operator|.
name|next
argument_list|()
expr_stmt|;
operator|++
name|currentBlockNumber
expr_stmt|;
name|r
operator|=
name|documentLayout
operator|->
name|blockBoundingRect
argument_list|(
name|currentBlock
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|currentBlock
operator|.
name|previous
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
name|r
operator|.
name|top
argument_list|()
operator|+
name|offset
operator|.
name|y
argument_list|()
operator|>
name|point
operator|.
name|y
argument_list|()
condition|)
block|{
name|offset
operator|.
name|ry
argument_list|()
operator|-=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
name|currentBlock
operator|=
name|currentBlock
operator|.
name|previous
argument_list|()
expr_stmt|;
operator|--
name|currentBlockNumber
expr_stmt|;
name|r
operator|=
name|documentLayout
operator|->
name|blockBoundingRect
argument_list|(
name|currentBlock
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|currentBlock
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|QTextLayout
modifier|*
name|layout
init|=
name|currentBlock
operator|.
name|layout
argument_list|()
decl_stmt|;
name|int
name|off
init|=
literal|0
decl_stmt|;
name|QPointF
name|pos
init|=
name|point
operator|-
name|offset
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|layout
operator|->
name|lineCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QTextLine
name|line
init|=
name|layout
operator|->
name|lineAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QRectF
name|lr
init|=
name|line
operator|.
name|naturalTextRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|lr
operator|.
name|top
argument_list|()
operator|>
name|pos
operator|.
name|y
argument_list|()
condition|)
block|{
name|off
operator|=
name|qMin
argument_list|(
name|off
argument_list|,
name|line
operator|.
name|textStart
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lr
operator|.
name|bottom
argument_list|()
operator|<=
name|pos
operator|.
name|y
argument_list|()
condition|)
block|{
name|off
operator|=
name|qMax
argument_list|(
name|off
argument_list|,
name|line
operator|.
name|textStart
argument_list|()
operator|+
name|line
operator|.
name|textLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|off
operator|=
name|line
operator|.
name|xToCursor
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|overwriteMode
argument_list|()
condition|?
name|QTextLine
operator|::
name|CursorOnCharacter
else|:
name|QTextLine
operator|::
name|CursorBetweenCharacters
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|currentBlock
operator|.
name|position
argument_list|()
operator|+
name|off
return|;
block|}
end_function
begin_function
DECL|function|blockBoundingRect
name|QRectF
name|QPlainTextEditControl
operator|::
name|blockBoundingRect
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|)
specifier|const
block|{
name|int
name|currentBlockNumber
init|=
name|topBlock
decl_stmt|;
name|int
name|blockNumber
init|=
name|block
operator|.
name|blockNumber
argument_list|()
decl_stmt|;
name|QTextBlock
name|currentBlock
init|=
name|document
argument_list|()
operator|->
name|findBlockByNumber
argument_list|(
name|currentBlockNumber
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|currentBlock
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QRectF
argument_list|()
return|;
name|Q_ASSERT
argument_list|(
name|currentBlock
operator|.
name|blockNumber
argument_list|()
operator|==
name|currentBlockNumber
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|doc
init|=
name|document
argument_list|()
decl_stmt|;
name|QPlainTextDocumentLayout
modifier|*
name|documentLayout
init|=
name|qobject_cast
argument_list|<
name|QPlainTextDocumentLayout
operator|*
argument_list|>
argument_list|(
name|doc
operator|->
name|documentLayout
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|documentLayout
argument_list|)
expr_stmt|;
name|QPointF
name|offset
decl_stmt|;
if|if
condition|(
operator|!
name|block
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QRectF
argument_list|()
return|;
name|QRectF
name|r
init|=
name|documentLayout
operator|->
name|blockBoundingRect
argument_list|(
name|currentBlock
argument_list|)
decl_stmt|;
name|int
name|maxVerticalOffset
init|=
name|r
operator|.
name|height
argument_list|()
decl_stmt|;
while|while
condition|(
name|currentBlockNumber
operator|<
name|blockNumber
operator|&&
name|offset
operator|.
name|y
argument_list|()
operator|-
name|maxVerticalOffset
operator|<=
literal|2
operator|*
name|textEdit
operator|->
name|viewport
argument_list|()
operator|->
name|height
argument_list|()
condition|)
block|{
name|offset
operator|.
name|ry
argument_list|()
operator|+=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
name|currentBlock
operator|=
name|currentBlock
operator|.
name|next
argument_list|()
expr_stmt|;
operator|++
name|currentBlockNumber
expr_stmt|;
if|if
condition|(
operator|!
name|currentBlock
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|currentBlock
operator|=
name|doc
operator|->
name|findBlockByLineNumber
argument_list|(
name|currentBlock
operator|.
name|firstLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|currentBlockNumber
operator|=
name|currentBlock
operator|.
name|blockNumber
argument_list|()
expr_stmt|;
block|}
name|r
operator|=
name|documentLayout
operator|->
name|blockBoundingRect
argument_list|(
name|currentBlock
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|currentBlockNumber
operator|>
name|blockNumber
operator|&&
name|offset
operator|.
name|y
argument_list|()
operator|+
name|maxVerticalOffset
operator|>=
operator|-
name|textEdit
operator|->
name|viewport
argument_list|()
operator|->
name|height
argument_list|()
condition|)
block|{
name|currentBlock
operator|=
name|currentBlock
operator|.
name|previous
argument_list|()
expr_stmt|;
operator|--
name|currentBlockNumber
expr_stmt|;
while|while
condition|(
operator|!
name|currentBlock
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|currentBlock
operator|=
name|currentBlock
operator|.
name|previous
argument_list|()
expr_stmt|;
operator|--
name|currentBlockNumber
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|currentBlock
operator|.
name|isValid
argument_list|()
condition|)
break|break;
name|r
operator|=
name|documentLayout
operator|->
name|blockBoundingRect
argument_list|(
name|currentBlock
argument_list|)
expr_stmt|;
name|offset
operator|.
name|ry
argument_list|()
operator|-=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentBlockNumber
operator|!=
name|blockNumber
condition|)
block|{
comment|// fallback for blocks out of reach. Give it some geometry at
comment|// least, and ensure the layout is up to date.
name|r
operator|=
name|documentLayout
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentBlockNumber
operator|>
name|blockNumber
condition|)
name|offset
operator|.
name|ry
argument_list|()
operator|-=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|r
operator|.
name|translate
argument_list|(
name|offset
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|setTopLine
name|void
name|QPlainTextEditPrivate
operator|::
name|setTopLine
parameter_list|(
name|int
name|visualTopLine
parameter_list|,
name|int
name|dx
parameter_list|)
block|{
name|QTextDocument
modifier|*
name|doc
init|=
name|control
operator|->
name|document
argument_list|()
decl_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|findBlockByLineNumber
argument_list|(
name|visualTopLine
argument_list|)
decl_stmt|;
name|int
name|blockNumber
init|=
name|block
operator|.
name|blockNumber
argument_list|()
decl_stmt|;
name|int
name|lineNumber
init|=
name|visualTopLine
operator|-
name|block
operator|.
name|firstLineNumber
argument_list|()
decl_stmt|;
name|setTopBlock
argument_list|(
name|blockNumber
argument_list|,
name|lineNumber
argument_list|,
name|dx
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setTopBlock
name|void
name|QPlainTextEditPrivate
operator|::
name|setTopBlock
parameter_list|(
name|int
name|blockNumber
parameter_list|,
name|int
name|lineNumber
parameter_list|,
name|int
name|dx
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|blockNumber
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|blockNumber
argument_list|)
expr_stmt|;
name|lineNumber
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|lineNumber
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|doc
init|=
name|control
operator|->
name|document
argument_list|()
decl_stmt|;
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|findBlockByNumber
argument_list|(
name|blockNumber
argument_list|)
decl_stmt|;
name|int
name|newTopLine
init|=
name|block
operator|.
name|firstLineNumber
argument_list|()
operator|+
name|lineNumber
decl_stmt|;
name|int
name|maxTopLine
init|=
name|vbar
operator|->
name|maximum
argument_list|()
decl_stmt|;
if|if
condition|(
name|newTopLine
operator|>
name|maxTopLine
condition|)
block|{
name|block
operator|=
name|doc
operator|->
name|findBlockByLineNumber
argument_list|(
name|maxTopLine
argument_list|)
expr_stmt|;
name|blockNumber
operator|=
name|block
operator|.
name|blockNumber
argument_list|()
expr_stmt|;
name|lineNumber
operator|=
name|maxTopLine
operator|-
name|block
operator|.
name|firstLineNumber
argument_list|()
expr_stmt|;
block|}
name|bool
name|vbarSignalsBlocked
init|=
name|vbar
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|vbar
operator|->
name|setValue
argument_list|(
name|newTopLine
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|blockSignals
argument_list|(
name|vbarSignalsBlocked
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dx
operator|&&
name|blockNumber
operator|==
name|control
operator|->
name|topBlock
operator|&&
name|lineNumber
operator|==
name|topLine
condition|)
return|return;
if|if
condition|(
name|viewport
operator|->
name|updatesEnabled
argument_list|()
operator|&&
name|viewport
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|int
name|dy
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|doc
operator|->
name|findBlockByNumber
argument_list|(
name|control
operator|->
name|topBlock
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|dy
operator|=
call|(
name|int
call|)
argument_list|(
operator|-
name|q
operator|->
name|blockBoundingGeometry
argument_list|(
name|block
argument_list|)
operator|.
name|y
argument_list|()
argument_list|)
operator|+
name|verticalOffset
argument_list|()
operator|-
name|verticalOffset
argument_list|(
name|blockNumber
argument_list|,
name|lineNumber
argument_list|)
expr_stmt|;
block|}
name|control
operator|->
name|topBlock
operator|=
name|blockNumber
expr_stmt|;
name|topLine
operator|=
name|lineNumber
expr_stmt|;
name|bool
name|vbarSignalsBlocked
init|=
name|vbar
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|vbar
operator|->
name|setValue
argument_list|(
name|block
operator|.
name|firstLineNumber
argument_list|()
operator|+
name|lineNumber
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|blockSignals
argument_list|(
name|vbarSignalsBlocked
argument_list|)
expr_stmt|;
if|if
condition|(
name|dx
operator|||
name|dy
condition|)
name|viewport
operator|->
name|scroll
argument_list|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|?
operator|-
name|dx
else|:
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
else|else
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|updateRequest
argument_list|(
name|viewport
operator|->
name|rect
argument_list|()
argument_list|,
name|dy
argument_list|)
emit|;
block|}
else|else
block|{
name|control
operator|->
name|topBlock
operator|=
name|blockNumber
expr_stmt|;
name|topLine
operator|=
name|lineNumber
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ensureVisible
name|void
name|QPlainTextEditPrivate
operator|::
name|ensureVisible
parameter_list|(
name|int
name|position
parameter_list|,
name|bool
name|center
parameter_list|,
name|bool
name|forceCenter
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|QRectF
name|visible
init|=
name|QRectF
argument_list|(
name|viewport
operator|->
name|rect
argument_list|()
argument_list|)
operator|.
name|translated
argument_list|(
operator|-
name|q
operator|->
name|contentOffset
argument_list|()
argument_list|)
decl_stmt|;
name|QTextBlock
name|block
init|=
name|control
operator|->
name|document
argument_list|()
operator|->
name|findBlock
argument_list|(
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|block
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QRectF
name|br
init|=
name|control
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|br
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QRectF
name|lr
init|=
name|br
decl_stmt|;
name|QTextLine
name|line
init|=
name|block
operator|.
name|layout
argument_list|()
operator|->
name|lineForTextPosition
argument_list|(
name|position
operator|-
name|block
operator|.
name|position
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|line
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|lr
operator|=
name|line
operator|.
name|naturalTextRect
argument_list|()
operator|.
name|translated
argument_list|(
name|br
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lr
operator|.
name|bottom
argument_list|()
operator|>=
name|visible
operator|.
name|bottom
argument_list|()
operator|||
operator|(
name|center
operator|&&
name|lr
operator|.
name|top
argument_list|()
operator|<
name|visible
operator|.
name|top
argument_list|()
operator|)
operator|||
name|forceCenter
condition|)
block|{
name|qreal
name|height
init|=
name|visible
operator|.
name|height
argument_list|()
decl_stmt|;
if|if
condition|(
name|center
condition|)
name|height
operator|/=
literal|2
expr_stmt|;
name|qreal
name|h
init|=
name|center
condition|?
name|line
operator|.
name|naturalTextRect
argument_list|()
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
else|:
name|line
operator|.
name|naturalTextRect
argument_list|()
operator|.
name|bottom
argument_list|()
decl_stmt|;
name|QTextBlock
name|previousVisibleBlock
init|=
name|block
decl_stmt|;
while|while
condition|(
name|h
operator|<
name|height
operator|&&
name|block
operator|.
name|previous
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|previousVisibleBlock
operator|=
name|block
expr_stmt|;
do|do
block|{
name|block
operator|=
name|block
operator|.
name|previous
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|block
operator|.
name|isVisible
argument_list|()
operator|&&
name|block
operator|.
name|previous
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
do|;
name|h
operator|+=
name|q
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|int
name|l
init|=
literal|0
decl_stmt|;
name|int
name|lineCount
init|=
name|block
operator|.
name|layout
argument_list|()
operator|->
name|lineCount
argument_list|()
decl_stmt|;
name|int
name|voffset
init|=
name|verticalOffset
argument_list|(
name|block
operator|.
name|blockNumber
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|l
operator|<
name|lineCount
condition|)
block|{
name|QRectF
name|lineRect
init|=
name|block
operator|.
name|layout
argument_list|()
operator|->
name|lineAt
argument_list|(
name|l
argument_list|)
operator|.
name|naturalTextRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|h
operator|-
name|voffset
operator|-
name|lineRect
operator|.
name|top
argument_list|()
operator|<=
name|height
condition|)
break|break;
operator|++
name|l
expr_stmt|;
block|}
if|if
condition|(
name|l
operator|>=
name|lineCount
condition|)
block|{
name|block
operator|=
name|previousVisibleBlock
expr_stmt|;
name|l
operator|=
literal|0
expr_stmt|;
block|}
name|setTopBlock
argument_list|(
name|block
operator|.
name|blockNumber
argument_list|()
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lr
operator|.
name|top
argument_list|()
operator|<
name|visible
operator|.
name|top
argument_list|()
condition|)
block|{
name|setTopBlock
argument_list|(
name|block
operator|.
name|blockNumber
argument_list|()
argument_list|,
name|line
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateViewport
name|void
name|QPlainTextEditPrivate
operator|::
name|updateViewport
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|viewport
operator|->
name|update
argument_list|()
expr_stmt|;
emit|emit
name|q
operator|->
name|updateRequest
argument_list|(
name|viewport
operator|->
name|rect
argument_list|()
argument_list|,
literal|0
argument_list|)
emit|;
block|}
end_function
begin_constructor
DECL|function|QPlainTextEditPrivate
name|QPlainTextEditPrivate
operator|::
name|QPlainTextEditPrivate
parameter_list|()
member_init_list|:
name|control
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|tabChangesFocus
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|lineWrap
argument_list|(
name|QPlainTextEdit
operator|::
name|WidgetWidth
argument_list|)
member_init_list|,
name|wordWrap
argument_list|(
name|QTextOption
operator|::
name|WrapAtWordBoundaryOrAnywhere
argument_list|)
member_init_list|,
name|clickCausedFocus
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|topLine
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|pageUpDownLastCursorYIsValid
argument_list|(
literal|false
argument_list|)
block|{
name|showCursorOnInitialShow
operator|=
literal|true
expr_stmt|;
name|backgroundVisible
operator|=
literal|false
expr_stmt|;
name|centerOnScroll
operator|=
literal|false
expr_stmt|;
name|inDrag
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|init
name|void
name|QPlainTextEditPrivate
operator|::
name|init
parameter_list|(
specifier|const
name|QString
modifier|&
name|txt
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|control
operator|=
operator|new
name|QPlainTextEditControl
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|doc
init|=
operator|new
name|QTextDocument
argument_list|(
name|control
argument_list|)
decl_stmt|;
name|QAbstractTextDocumentLayout
modifier|*
name|layout
init|=
operator|new
name|QPlainTextDocumentLayout
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|doc
operator|->
name|setDocumentLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|control
operator|->
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|control
operator|->
name|setPalette
argument_list|(
name|q
operator|->
name|palette
argument_list|()
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|vbar
argument_list|,
name|SIGNAL
argument_list|(
name|actionTriggered
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_verticalScrollbarActionTriggered
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|control
argument_list|,
name|SIGNAL
argument_list|(
name|microFocusChanged
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|updateMicroFocus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|control
argument_list|,
name|SIGNAL
argument_list|(
name|documentSizeChanged
argument_list|(
name|QSizeF
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_adjustScrollbars
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|control
argument_list|,
name|SIGNAL
argument_list|(
name|blockCountChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|blockCountChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|control
argument_list|,
name|SIGNAL
argument_list|(
name|updateRequest
argument_list|(
name|QRectF
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_repaintContents
argument_list|(
name|QRectF
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|control
argument_list|,
name|SIGNAL
argument_list|(
name|modificationChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|modificationChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|control
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|control
argument_list|,
name|SIGNAL
argument_list|(
name|undoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|undoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|control
argument_list|,
name|SIGNAL
argument_list|(
name|redoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|redoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|control
argument_list|,
name|SIGNAL
argument_list|(
name|copyAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|copyAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|control
argument_list|,
name|SIGNAL
argument_list|(
name|selectionChanged
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|selectionChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|control
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|_q_cursorPositionChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|control
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|control
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|()
argument_list|)
argument_list|,
name|q
argument_list|,
name|SLOT
argument_list|(
name|updateMicroFocus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// set a null page size initially to avoid any relayouting until the textedit
comment|// is shown. relayoutDocument() will take care of setting the page size to the
comment|// viewport dimensions later.
name|doc
operator|->
name|setTextWidth
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|doc
operator|->
name|documentLayout
argument_list|()
operator|->
name|setPaintDevice
argument_list|(
name|viewport
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setDefaultFont
argument_list|(
name|q
operator|->
name|font
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|txt
operator|.
name|isEmpty
argument_list|()
condition|)
name|control
operator|->
name|setPlainText
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|setSingleStep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|setSingleStep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|viewport
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAcceptDrops
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|WheelFocus
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_KeyCompression
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|viewport
operator|->
name|setCursor
argument_list|(
name|Qt
operator|::
name|IBeamCursor
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|originalOffsetY
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WIN
name|setSingleFingerPanEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|_q_repaintContents
name|void
name|QPlainTextEditPrivate
operator|::
name|_q_repaintContents
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|contentsRect
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|contentsRect
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|updateViewport
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|const
name|int
name|xOffset
init|=
name|horizontalOffset
argument_list|()
decl_stmt|;
specifier|const
name|int
name|yOffset
init|=
name|verticalOffset
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|visibleRect
argument_list|(
name|xOffset
argument_list|,
name|yOffset
argument_list|,
name|viewport
operator|->
name|width
argument_list|()
argument_list|,
name|viewport
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|r
init|=
name|contentsRect
operator|.
name|adjusted
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|intersected
argument_list|(
name|visibleRect
argument_list|)
operator|.
name|toAlignedRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|r
operator|.
name|translate
argument_list|(
operator|-
name|xOffset
argument_list|,
operator|-
name|yOffset
argument_list|)
expr_stmt|;
name|viewport
operator|->
name|update
argument_list|(
name|r
argument_list|)
expr_stmt|;
emit|emit
name|q
operator|->
name|updateRequest
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|pageUpDown
name|void
name|QPlainTextEditPrivate
operator|::
name|pageUpDown
parameter_list|(
name|QTextCursor
operator|::
name|MoveOperation
name|op
parameter_list|,
name|QTextCursor
operator|::
name|MoveMode
name|moveMode
parameter_list|,
name|bool
name|moveCursor
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|control
operator|->
name|textCursor
argument_list|()
decl_stmt|;
if|if
condition|(
name|moveCursor
condition|)
block|{
name|ensureCursorVisible
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|pageUpDownLastCursorYIsValid
condition|)
name|pageUpDownLastCursorY
operator|=
name|control
operator|->
name|cursorRect
argument_list|(
name|cursor
argument_list|)
operator|.
name|top
argument_list|()
operator|-
name|verticalOffset
argument_list|()
expr_stmt|;
block|}
name|qreal
name|lastY
init|=
name|pageUpDownLastCursorY
decl_stmt|;
if|if
condition|(
name|op
operator|==
name|QTextCursor
operator|::
name|Down
condition|)
block|{
name|QRectF
name|visible
init|=
name|QRectF
argument_list|(
name|viewport
operator|->
name|rect
argument_list|()
argument_list|)
operator|.
name|translated
argument_list|(
operator|-
name|q
operator|->
name|contentOffset
argument_list|()
argument_list|)
decl_stmt|;
name|QTextBlock
name|firstVisibleBlock
init|=
name|q
operator|->
name|firstVisibleBlock
argument_list|()
decl_stmt|;
name|QTextBlock
name|block
init|=
name|firstVisibleBlock
decl_stmt|;
name|QRectF
name|br
init|=
name|q
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|qreal
name|h
init|=
literal|0
decl_stmt|;
name|int
name|atEnd
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|h
operator|+
name|br
operator|.
name|height
argument_list|()
operator|<=
name|visible
operator|.
name|bottom
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|block
operator|.
name|next
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|atEnd
operator|=
literal|true
expr_stmt|;
name|lastY
operator|=
name|visible
operator|.
name|bottom
argument_list|()
expr_stmt|;
comment|// set cursor to last line
break|break;
block|}
name|h
operator|+=
name|br
operator|.
name|height
argument_list|()
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|br
operator|=
name|q
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|atEnd
condition|)
block|{
name|int
name|line
init|=
literal|0
decl_stmt|;
name|qreal
name|diff
init|=
name|visible
operator|.
name|bottom
argument_list|()
operator|-
name|h
decl_stmt|;
name|int
name|lineCount
init|=
name|block
operator|.
name|layout
argument_list|()
operator|->
name|lineCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|<
name|lineCount
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|block
operator|.
name|layout
argument_list|()
operator|->
name|lineAt
argument_list|(
name|line
argument_list|)
operator|.
name|naturalTextRect
argument_list|()
operator|.
name|bottom
argument_list|()
operator|>
name|diff
condition|)
block|{
comment|// the first line that did not completely fit the screen
break|break;
block|}
operator|++
name|line
expr_stmt|;
block|}
name|setTopBlock
argument_list|(
name|block
operator|.
name|blockNumber
argument_list|()
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|moveCursor
condition|)
block|{
comment|// move using movePosition to keep the cursor's x
name|lastY
operator|+=
name|verticalOffset
argument_list|()
expr_stmt|;
name|bool
name|moved
init|=
literal|false
decl_stmt|;
do|do
block|{
name|moved
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|op
argument_list|,
name|moveMode
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|moved
operator|&&
name|control
operator|->
name|cursorRect
argument_list|(
name|cursor
argument_list|)
operator|.
name|top
argument_list|()
operator|<
name|lastY
condition|)
do|;
block|}
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|QTextCursor
operator|::
name|Up
condition|)
block|{
name|QRectF
name|visible
init|=
name|QRectF
argument_list|(
name|viewport
operator|->
name|rect
argument_list|()
argument_list|)
operator|.
name|translated
argument_list|(
operator|-
name|q
operator|->
name|contentOffset
argument_list|()
argument_list|)
decl_stmt|;
name|visible
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
operator|-
name|visible
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|// previous page
name|QTextBlock
name|block
init|=
name|q
operator|->
name|firstVisibleBlock
argument_list|()
decl_stmt|;
name|qreal
name|h
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|h
operator|>=
name|visible
operator|.
name|top
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|block
operator|.
name|previous
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|control
operator|->
name|topBlock
operator|==
literal|0
operator|&&
name|topLine
operator|==
literal|0
condition|)
block|{
name|lastY
operator|=
literal|0
expr_stmt|;
comment|// set cursor to first line
block|}
break|break;
block|}
name|block
operator|=
name|block
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QRectF
name|br
init|=
name|q
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|h
operator|-=
name|br
operator|.
name|height
argument_list|()
expr_stmt|;
block|}
name|int
name|line
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|block
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qreal
name|diff
init|=
name|visible
operator|.
name|top
argument_list|()
operator|-
name|h
decl_stmt|;
name|int
name|lineCount
init|=
name|block
operator|.
name|layout
argument_list|()
operator|->
name|lineCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|<
name|lineCount
condition|)
block|{
if|if
condition|(
name|block
operator|.
name|layout
argument_list|()
operator|->
name|lineAt
argument_list|(
name|line
argument_list|)
operator|.
name|naturalTextRect
argument_list|()
operator|.
name|top
argument_list|()
operator|>=
name|diff
condition|)
break|break;
operator|++
name|line
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|==
name|lineCount
condition|)
block|{
if|if
condition|(
name|block
operator|.
name|next
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
name|block
operator|.
name|next
argument_list|()
operator|!=
name|q
operator|->
name|firstVisibleBlock
argument_list|()
condition|)
block|{
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|line
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|--
name|line
expr_stmt|;
block|}
block|}
block|}
name|setTopBlock
argument_list|(
name|block
operator|.
name|blockNumber
argument_list|()
argument_list|,
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|moveCursor
condition|)
block|{
name|cursor
operator|.
name|setVisualNavigation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// move using movePosition to keep the cursor's x
name|lastY
operator|+=
name|verticalOffset
argument_list|()
expr_stmt|;
name|bool
name|moved
init|=
literal|false
decl_stmt|;
do|do
block|{
name|moved
operator|=
name|cursor
operator|.
name|movePosition
argument_list|(
name|op
argument_list|,
name|moveMode
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|moved
operator|&&
name|control
operator|->
name|cursorRect
argument_list|(
name|cursor
argument_list|)
operator|.
name|top
argument_list|()
operator|>
name|lastY
condition|)
do|;
block|}
block|}
if|if
condition|(
name|moveCursor
condition|)
block|{
name|control
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|pageUpDownLastCursorYIsValid
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SCROLLBAR
end_ifndef
begin_function
DECL|function|_q_adjustScrollbars
name|void
name|QPlainTextEditPrivate
operator|::
name|_q_adjustScrollbars
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|doc
init|=
name|control
operator|->
name|document
argument_list|()
decl_stmt|;
name|QPlainTextDocumentLayout
modifier|*
name|documentLayout
init|=
name|qobject_cast
argument_list|<
name|QPlainTextDocumentLayout
operator|*
argument_list|>
argument_list|(
name|doc
operator|->
name|documentLayout
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|documentLayout
argument_list|)
expr_stmt|;
name|bool
name|documentSizeChangedBlocked
init|=
name|documentLayout
operator|->
name|priv
argument_list|()
operator|->
name|blockDocumentSizeChanged
decl_stmt|;
name|documentLayout
operator|->
name|priv
argument_list|()
operator|->
name|blockDocumentSizeChanged
operator|=
literal|true
expr_stmt|;
name|qreal
name|margin
init|=
name|doc
operator|->
name|documentMargin
argument_list|()
decl_stmt|;
name|int
name|vmax
init|=
literal|0
decl_stmt|;
name|int
name|vSliderLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|centerOnScroll
operator|&&
name|q
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|QTextBlock
name|block
init|=
name|doc
operator|->
name|lastBlock
argument_list|()
decl_stmt|;
specifier|const
name|qreal
name|visible
init|=
name|viewport
operator|->
name|rect
argument_list|()
operator|.
name|height
argument_list|()
operator|-
name|margin
operator|-
literal|1
decl_stmt|;
name|qreal
name|y
init|=
literal|0
decl_stmt|;
name|int
name|visibleFromBottom
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|block
operator|.
name|isValid
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|block
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|block
operator|=
name|block
operator|.
name|previous
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|y
operator|+=
name|documentLayout
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
name|QTextLayout
modifier|*
name|layout
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
name|int
name|layoutLineCount
init|=
name|layout
operator|->
name|lineCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|y
operator|>
name|visible
condition|)
block|{
name|int
name|lineNumber
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|lineNumber
operator|<
name|layoutLineCount
condition|)
block|{
name|QTextLine
name|line
init|=
name|layout
operator|->
name|lineAt
argument_list|(
name|lineNumber
argument_list|)
decl_stmt|;
specifier|const
name|QRectF
name|lr
init|=
name|line
operator|.
name|naturalTextRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|lr
operator|.
name|top
argument_list|()
operator|>=
name|y
operator|-
name|visible
condition|)
break|break;
operator|++
name|lineNumber
expr_stmt|;
block|}
if|if
condition|(
name|lineNumber
operator|<
name|layoutLineCount
condition|)
name|visibleFromBottom
operator|+=
operator|(
name|layoutLineCount
operator|-
name|lineNumber
operator|)
expr_stmt|;
break|break;
block|}
name|visibleFromBottom
operator|+=
name|layoutLineCount
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|previous
argument_list|()
expr_stmt|;
block|}
name|vmax
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|doc
operator|->
name|lineCount
argument_list|()
operator|-
name|visibleFromBottom
argument_list|)
expr_stmt|;
name|vSliderLength
operator|=
name|visibleFromBottom
expr_stmt|;
block|}
else|else
block|{
name|vmax
operator|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|doc
operator|->
name|lineCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|vSliderLength
operator|=
name|viewport
operator|->
name|height
argument_list|()
operator|/
name|q
operator|->
name|fontMetrics
argument_list|()
operator|.
name|lineSpacing
argument_list|()
expr_stmt|;
block|}
name|QSizeF
name|documentSize
init|=
name|documentLayout
operator|->
name|documentSize
argument_list|()
decl_stmt|;
name|vbar
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
name|qMax
argument_list|(
literal|0
argument_list|,
name|vmax
argument_list|)
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|setPageStep
argument_list|(
name|vSliderLength
argument_list|)
expr_stmt|;
name|int
name|visualTopLine
init|=
name|vmax
decl_stmt|;
name|QTextBlock
name|firstVisibleBlock
init|=
name|q
operator|->
name|firstVisibleBlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstVisibleBlock
operator|.
name|isValid
argument_list|()
condition|)
name|visualTopLine
operator|=
name|firstVisibleBlock
operator|.
name|firstLineNumber
argument_list|()
operator|+
name|topLine
expr_stmt|;
name|bool
name|vbarSignalsBlocked
init|=
name|vbar
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|vbar
operator|->
name|setValue
argument_list|(
name|visualTopLine
argument_list|)
expr_stmt|;
name|vbar
operator|->
name|blockSignals
argument_list|(
name|vbarSignalsBlocked
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|documentSize
operator|.
name|width
argument_list|()
operator|-
name|viewport
operator|->
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|hbar
operator|->
name|setPageStep
argument_list|(
name|viewport
operator|->
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|documentLayout
operator|->
name|priv
argument_list|()
operator|->
name|blockDocumentSizeChanged
operator|=
name|documentSizeChangedBlocked
expr_stmt|;
name|setTopLine
argument_list|(
name|vbar
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|ensureViewportLayouted
name|void
name|QPlainTextEditPrivate
operator|::
name|ensureViewportLayouted
parameter_list|()
block|{ }
end_function
begin_comment
comment|/*!     \class QPlainTextEdit     \since 4.4     \brief The QPlainTextEdit class provides a widget that is used to edit and display     plain text.      \ingroup richtext-processing     \inmodule QtWidgets      \tableofcontents      \section1 Introduction and Concepts      QPlainTextEdit is an advanced viewer/editor supporting plain     text. It is optimized to handle large documents and to respond     quickly to user input.      QPlainText uses very much the same technology and concepts as     QTextEdit, but is optimized for plain text handling.      QPlainTextEdit works on paragraphs and characters. A paragraph is     a formatted string which is word-wrapped to fit into the width of     the widget. By default when reading plain text, one newline     signifies a paragraph. A document consists of zero or more     paragraphs. Paragraphs are separated by hard line breaks. Each     character within a paragraph has its own attributes, for example,     font and color.      The shape of the mouse cursor on a QPlainTextEdit is     Qt::IBeamCursor by default.  It can be changed through the     viewport()'s cursor property.      \section1 Using QPlainTextEdit as a Display Widget      The text is set or replaced using setPlainText() which deletes the     existing text and replaces it with the text passed to setPlainText().      Text can be inserted using the QTextCursor class or using the     convenience functions insertPlainText(), appendPlainText() or     paste().      By default, the text edit wraps words at whitespace to fit within     the text edit widget. The setLineWrapMode() function is used to     specify the kind of line wrap you want, \l WidgetWidth or \l     NoWrap if you don't want any wrapping.  If you use word wrap to     the widget's width \l WidgetWidth, you can specify whether to     break on whitespace or anywhere with setWordWrapMode().      The find() function can be used to find and select a given string     within the text.      If you want to limit the total number of paragraphs in a     QPlainTextEdit, as it is for example useful in a log viewer, then     you can use the maximumBlockCount property. The combination of     setMaximumBlockCount() and appendPlainText() turns QPlainTextEdit     into an efficient viewer for log text. The scrolling can be     reduced with the centerOnScroll() property, making the log viewer     even faster. Text can be formatted in a limited way, either using     a syntax highlighter (see below), or by appending html-formatted     text with appendHtml(). While QPlainTextEdit does not support     complex rich text rendering with tables and floats, it does     support limited paragraph-based formatting that you may need in a     log viewer.      \section2 Read-only Key Bindings      When QPlainTextEdit is used read-only the key bindings are limited to     navigation, and text may only be selected with the mouse:     \table     \header \li Keypresses \li Action     \row \li Qt::UpArrow        \li Moves one line up.     \row \li Qt::DownArrow        \li Moves one line down.     \row \li Qt::LeftArrow        \li Moves one character to the left.     \row \li Qt::RightArrow        \li Moves one character to the right.     \row \li PageUp        \li Moves one (viewport) page up.     \row \li PageDown        \li Moves one (viewport) page down.     \row \li Home        \li Moves to the beginning of the text.     \row \li End                \li Moves to the end of the text.     \row \li Alt+Wheel          \li Scrolls the page horizontally (the Wheel is the mouse wheel).     \row \li Ctrl+Wheel        \li Zooms the text.     \row \li Ctrl+A            \li Selects all text.     \endtable       \section1 Using QPlainTextEdit as an Editor      All the information about using QPlainTextEdit as a display widget also     applies here.      Selection of text is handled by the QTextCursor class, which provides     functionality for creating selections, retrieving the text contents or     deleting selections. You can retrieve the object that corresponds with     the user-visible cursor using the textCursor() method. If you want to set     a selection in QPlainTextEdit just create one on a QTextCursor object and     then make that cursor the visible cursor using setCursor(). The selection     can be copied to the clipboard with copy(), or cut to the clipboard with     cut(). The entire text can be selected using selectAll().      QPlainTextEdit holds a QTextDocument object which can be retrieved using the     document() method. You can also set your own document object using setDocument().     QTextDocument emits a textChanged() signal if the text changes and it also     provides a isModified() function which will return true if the text has been     modified since it was either loaded or since the last call to setModified     with false as argument. In addition it provides methods for undo and redo.      \section2 Syntax Highlighting      Just like QTextEdit, QPlainTextEdit works together with     QSyntaxHighlighter.      \section2 Editing Key Bindings      The list of key bindings which are implemented for editing:     \table     \header \li Keypresses \li Action     \row \li Backspace \li Deletes the character to the left of the cursor.     \row \li Delete \li Deletes the character to the right of the cursor.     \row \li Ctrl+C \li Copy the selected text to the clipboard.     \row \li Ctrl+Insert \li Copy the selected text to the clipboard.     \row \li Ctrl+K \li Deletes to the end of the line.     \row \li Ctrl+V \li Pastes the clipboard text into text edit.     \row \li Shift+Insert \li Pastes the clipboard text into text edit.     \row \li Ctrl+X \li Deletes the selected text and copies it to the clipboard.     \row \li Shift+Delete \li Deletes the selected text and copies it to the clipboard.     \row \li Ctrl+Z \li Undoes the last operation.     \row \li Ctrl+Y \li Redoes the last operation.     \row \li LeftArrow \li Moves the cursor one character to the left.     \row \li Ctrl+LeftArrow \li Moves the cursor one word to the left.     \row \li RightArrow \li Moves the cursor one character to the right.     \row \li Ctrl+RightArrow \li Moves the cursor one word to the right.     \row \li UpArrow \li Moves the cursor one line up.     \row \li Ctrl+UpArrow \li Moves the cursor one word up.     \row \li DownArrow \li Moves the cursor one line down.     \row \li Ctrl+Down Arrow \li Moves the cursor one word down.     \row \li PageUp \li Moves the cursor one page up.     \row \li PageDown \li Moves the cursor one page down.     \row \li Home \li Moves the cursor to the beginning of the line.     \row \li Ctrl+Home \li Moves the cursor to the beginning of the text.     \row \li End \li Moves the cursor to the end of the line.     \row \li Ctrl+End \li Moves the cursor to the end of the text.     \row \li Alt+Wheel \li Scrolls the page horizontally (the Wheel is the mouse wheel).     \row \li Ctrl+Wheel \li Zooms the text.     \endtable      To select (mark) text hold down the Shift key whilst pressing one     of the movement keystrokes, for example, \e{Shift+Right Arrow}     will select the character to the right, and \e{Shift+Ctrl+Right     Arrow} will select the word to the right, etc.     \section1 Differences to QTextEdit     QPlainTextEdit is a thin class, implemented by using most of the    technology that is behind QTextEdit and QTextDocument. Its    performance benefits over QTextEdit stem mostly from using a    different and simplified text layout called    QPlainTextDocumentLayout on the text document (see    QTextDocument::setDocumentLayout()). The plain text document layout    does not support tables nor embedded frames, and \e{replaces a    pixel-exact height calculation with a line-by-line respectively    paragraph-by-paragraph scrolling approach}. This makes it possible    to handle significantly larger documents, and still resize the    editor with line wrap enabled in real time. It also makes for a    fast log viewer (see setMaximumBlockCount()).       \sa QTextDocument, QTextCursor, {Application Example},         {Code Editor Example}, {Syntax Highlighter Example},         {Rich Text Processing}  */
end_comment
begin_comment
comment|/*!     \property QPlainTextEdit::plainText      This property gets and sets the plain text editor's contents. The previous     contents are removed and undo/redo history is reset when this property is set.      By default, for an editor with no contents, this property contains an empty string. */
end_comment
begin_comment
comment|/*!     \property QPlainTextEdit::undoRedoEnabled     \brief whether undo and redo are enabled      Users are only able to undo or redo actions if this property is     true, and if there is an action that can be undone (or redone).      By default, this property is true. */
end_comment
begin_comment
comment|/*!     \enum QPlainTextEdit::LineWrapMode      \value NoWrap     \value WidgetWidth */
end_comment
begin_comment
comment|/*!     Constructs an empty QPlainTextEdit with parent \a     parent. */
end_comment
begin_constructor
DECL|function|QPlainTextEdit
name|QPlainTextEdit
operator|::
name|QPlainTextEdit
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractScrollArea
argument_list|(
operator|*
operator|new
name|QPlainTextEditPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     \internal */
end_comment
begin_constructor
DECL|function|QPlainTextEdit
name|QPlainTextEdit
operator|::
name|QPlainTextEdit
parameter_list|(
name|QPlainTextEditPrivate
modifier|&
name|dd
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractScrollArea
argument_list|(
name|dd
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Constructs a QPlainTextEdit with parent \a parent. The text edit will display     the plain text \a text. */
end_comment
begin_constructor
DECL|function|QPlainTextEdit
name|QPlainTextEdit
operator|::
name|QPlainTextEdit
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractScrollArea
argument_list|(
operator|*
operator|new
name|QPlainTextEditPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destructor. */
end_comment
begin_destructor
DECL|function|~QPlainTextEdit
name|QPlainTextEdit
operator|::
name|~
name|QPlainTextEdit
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|documentLayoutPtr
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|documentLayoutPtr
operator|->
name|priv
argument_list|()
operator|->
name|mainViewPrivate
operator|==
name|d
condition|)
name|d
operator|->
name|documentLayoutPtr
operator|->
name|priv
argument_list|()
operator|->
name|mainViewPrivate
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_destructor
begin_comment
comment|/*!     Makes \a document the new document of the text editor.      The parent QObject of the provided document remains the owner     of the object. If the current document is a child of the text     editor, then it is deleted.      The document must have a document layout that inherits     QPlainTextDocumentLayout (see QTextDocument::setDocumentLayout()).      \sa document() */
end_comment
begin_function
DECL|function|setDocument
name|void
name|QPlainTextEdit
operator|::
name|setDocument
parameter_list|(
name|QTextDocument
modifier|*
name|document
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|QPlainTextDocumentLayout
modifier|*
name|documentLayout
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|document
condition|)
block|{
name|document
operator|=
operator|new
name|QTextDocument
argument_list|(
name|d
operator|->
name|control
argument_list|)
expr_stmt|;
name|documentLayout
operator|=
operator|new
name|QPlainTextDocumentLayout
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|document
operator|->
name|setDocumentLayout
argument_list|(
name|documentLayout
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|documentLayout
operator|=
name|qobject_cast
argument_list|<
name|QPlainTextDocumentLayout
operator|*
argument_list|>
argument_list|(
name|document
operator|->
name|documentLayout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|documentLayout
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPlainTextEdit::setDocument: Document set does not support QPlainTextDocumentLayout"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|d
operator|->
name|control
operator|->
name|setDocument
argument_list|(
name|document
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|documentLayout
operator|->
name|priv
argument_list|()
operator|->
name|mainViewPrivate
condition|)
name|documentLayout
operator|->
name|priv
argument_list|()
operator|->
name|mainViewPrivate
operator|=
name|d
expr_stmt|;
name|d
operator|->
name|documentLayoutPtr
operator|=
name|documentLayout
expr_stmt|;
name|d
operator|->
name|updateDefaultTextOption
argument_list|()
expr_stmt|;
name|d
operator|->
name|relayoutDocument
argument_list|()
expr_stmt|;
name|d
operator|->
name|_q_adjustScrollbars
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a pointer to the underlying document.      \sa setDocument() */
end_comment
begin_function
DECL|function|document
name|QTextDocument
modifier|*
name|QPlainTextEdit
operator|::
name|document
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|document
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the visible \a cursor. */
end_comment
begin_function
DECL|function|setTextCursor
name|void
name|QPlainTextEdit
operator|::
name|setTextCursor
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|cursor
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns a copy of the QTextCursor that represents the currently visible cursor.     Note that changes on the returned cursor do not affect QPlainTextEdit's cursor; use     setTextCursor() to update the visible cursor.  */
end_comment
begin_function
DECL|function|textCursor
name|QTextCursor
name|QPlainTextEdit
operator|::
name|textCursor
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|textCursor
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Returns the reference of the anchor at position \a pos, or an     empty string if no anchor exists at that point.      \since 4.7  */
end_comment
begin_function
DECL|function|anchorAt
name|QString
name|QPlainTextEdit
operator|::
name|anchorAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|int
name|cursorPos
init|=
name|d
operator|->
name|control
operator|->
name|hitTest
argument_list|(
name|pos
operator|+
name|QPoint
argument_list|(
name|d
operator|->
name|horizontalOffset
argument_list|()
argument_list|,
name|d
operator|->
name|verticalOffset
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|ExactHit
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursorPos
operator|<
literal|0
condition|)
return|return
name|QString
argument_list|()
return|;
name|QTextDocumentPrivate
modifier|*
name|pieceTable
init|=
name|document
argument_list|()
operator|->
name|docHandle
argument_list|()
decl_stmt|;
name|QTextDocumentPrivate
operator|::
name|FragmentIterator
name|it
init|=
name|pieceTable
operator|->
name|find
argument_list|(
name|cursorPos
argument_list|)
decl_stmt|;
name|QTextCharFormat
name|fmt
init|=
name|pieceTable
operator|->
name|formatCollection
argument_list|()
operator|->
name|charFormat
argument_list|(
name|it
operator|->
name|format
argument_list|)
decl_stmt|;
return|return
name|fmt
operator|.
name|anchorHref
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Undoes the last operation.      If there is no operation to undo, i.e. there is no undo step in     the undo/redo history, nothing happens.      \sa redo() */
end_comment
begin_function
DECL|function|undo
name|void
name|QPlainTextEdit
operator|::
name|undo
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|undo
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|redo
name|void
name|QPlainTextEdit
operator|::
name|redo
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|redo
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPlainTextEdit::redo()      Redoes the last operation.      If there is no operation to redo, i.e. there is no redo step in     the undo/redo history, nothing happens.      \sa undo() */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
end_ifndef
begin_comment
comment|/*!     Copies the selected text to the clipboard and deletes it from     the text edit.      If there is no selected text nothing happens.      \sa copy() paste() */
end_comment
begin_function
DECL|function|cut
name|void
name|QPlainTextEdit
operator|::
name|cut
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|cut
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Copies any selected text to the clipboard.      \sa copyAvailable() */
end_comment
begin_function
DECL|function|copy
name|void
name|QPlainTextEdit
operator|::
name|copy
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|copy
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Pastes the text from the clipboard into the text edit at the     current cursor position.      If there is no text in the clipboard nothing happens.      To change the behavior of this function, i.e. to modify what     QPlainTextEdit can paste and how it is being pasted, reimplement the     virtual canInsertFromMimeData() and insertFromMimeData()     functions.      \sa cut() copy() */
end_comment
begin_function
DECL|function|paste
name|void
name|QPlainTextEdit
operator|::
name|paste
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|paste
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     Deletes all the text in the text edit.      Note that the undo/redo history is cleared by this function.      \sa cut() setPlainText() */
end_comment
begin_function
DECL|function|clear
name|void
name|QPlainTextEdit
operator|::
name|clear
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
comment|// clears and sets empty content
name|d
operator|->
name|control
operator|->
name|topBlock
operator|=
name|d
operator|->
name|topLine
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Selects all text.      \sa copy() cut() textCursor()  */
end_comment
begin_function
DECL|function|selectAll
name|void
name|QPlainTextEdit
operator|::
name|selectAll
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|selectAll
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|event
name|bool
name|QPlainTextEdit
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ContextMenu
operator|&&
cast|static_cast
argument_list|<
name|QContextMenuEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|reason
argument_list|()
operator|==
name|QContextMenuEvent
operator|::
name|Keyboard
condition|)
block|{
name|ensureCursorVisible
argument_list|()
expr_stmt|;
specifier|const
name|QPoint
name|cursorPos
init|=
name|cursorRect
argument_list|()
operator|.
name|center
argument_list|()
decl_stmt|;
name|QContextMenuEvent
name|ce
argument_list|(
name|QContextMenuEvent
operator|::
name|Keyboard
argument_list|,
name|cursorPos
argument_list|,
name|d
operator|->
name|viewport
operator|->
name|mapToGlobal
argument_list|(
name|cursorPos
argument_list|)
argument_list|)
decl_stmt|;
name|ce
operator|.
name|setAccepted
argument_list|(
name|e
operator|->
name|isAccepted
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|result
init|=
name|QAbstractScrollArea
operator|::
name|event
argument_list|(
operator|&
name|ce
argument_list|)
decl_stmt|;
name|e
operator|->
name|setAccepted
argument_list|(
name|ce
operator|.
name|isAccepted
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_CONTEXTMENU
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ShortcutOverride
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ToolTip
condition|)
block|{
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|EnterEditFocus
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LeaveEditFocus
condition|)
block|{
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_GESTURES
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Gesture
condition|)
block|{
name|QGestureEvent
modifier|*
name|ge
init|=
cast|static_cast
argument_list|<
name|QGestureEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|QPanGesture
modifier|*
name|g
init|=
cast|static_cast
argument_list|<
name|QPanGesture
operator|*
argument_list|>
argument_list|(
name|ge
operator|->
name|gesture
argument_list|(
name|Qt
operator|::
name|PanGesture
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
condition|)
block|{
name|QScrollBar
modifier|*
name|hBar
init|=
name|horizontalScrollBar
argument_list|()
decl_stmt|;
name|QScrollBar
modifier|*
name|vBar
init|=
name|verticalScrollBar
argument_list|()
decl_stmt|;
if|if
condition|(
name|g
operator|->
name|state
argument_list|()
operator|==
name|Qt
operator|::
name|GestureStarted
condition|)
name|d
operator|->
name|originalOffsetY
operator|=
name|vBar
operator|->
name|value
argument_list|()
expr_stmt|;
name|QPointF
name|offset
init|=
name|g
operator|->
name|offset
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|offset
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|QApplication
operator|::
name|isRightToLeft
argument_list|()
condition|)
name|offset
operator|.
name|rx
argument_list|()
operator|*=
operator|-
literal|1
expr_stmt|;
comment|// QPlainTextEdit scrolls by lines only in vertical direction
name|QFontMetrics
name|fm
argument_list|(
name|document
argument_list|()
operator|->
name|defaultFont
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|lineHeight
init|=
name|fm
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|newX
init|=
name|hBar
operator|->
name|value
argument_list|()
operator|-
name|g
operator|->
name|delta
argument_list|()
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|newY
init|=
name|d
operator|->
name|originalOffsetY
operator|-
name|offset
operator|.
name|y
argument_list|()
operator|/
name|lineHeight
decl_stmt|;
name|hBar
operator|->
name|setValue
argument_list|(
name|newX
argument_list|)
expr_stmt|;
name|vBar
operator|->
name|setValue
argument_list|(
name|newY
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
endif|#
directive|endif
comment|// QT_NO_GESTURES
return|return
name|QAbstractScrollArea
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*! \internal */
end_comment
begin_function
DECL|function|timerEvent
name|void
name|QPlainTextEdit
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|autoScrollTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|QRect
name|visible
init|=
name|d
operator|->
name|viewport
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QPoint
name|pos
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|inDrag
condition|)
block|{
name|pos
operator|=
name|d
operator|->
name|autoScrollDragPos
expr_stmt|;
name|visible
operator|.
name|adjust
argument_list|(
name|qMin
argument_list|(
name|visible
operator|.
name|width
argument_list|()
operator|/
literal|3
argument_list|,
literal|20
argument_list|)
argument_list|,
name|qMin
argument_list|(
name|visible
operator|.
name|height
argument_list|()
operator|/
literal|3
argument_list|,
literal|20
argument_list|)
argument_list|,
operator|-
name|qMin
argument_list|(
name|visible
operator|.
name|width
argument_list|()
operator|/
literal|3
argument_list|,
literal|20
argument_list|)
argument_list|,
operator|-
name|qMin
argument_list|(
name|visible
operator|.
name|height
argument_list|()
operator|/
literal|3
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QPoint
name|globalPos
init|=
name|QCursor
operator|::
name|pos
argument_list|()
decl_stmt|;
name|pos
operator|=
name|d
operator|->
name|viewport
operator|->
name|mapFromGlobal
argument_list|(
name|globalPos
argument_list|)
expr_stmt|;
name|QMouseEvent
name|ev
argument_list|(
name|QEvent
operator|::
name|MouseMove
argument_list|,
name|pos
argument_list|,
name|d
operator|->
name|viewport
operator|->
name|mapTo
argument_list|(
name|d
operator|->
name|viewport
operator|->
name|topLevelWidget
argument_list|()
argument_list|,
name|pos
argument_list|)
argument_list|,
name|globalPos
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|mouseMoveEvent
argument_list|(
operator|&
name|ev
argument_list|)
expr_stmt|;
block|}
name|int
name|deltaY
init|=
name|qMax
argument_list|(
name|pos
operator|.
name|y
argument_list|()
operator|-
name|visible
operator|.
name|top
argument_list|()
argument_list|,
name|visible
operator|.
name|bottom
argument_list|()
operator|-
name|pos
operator|.
name|y
argument_list|()
argument_list|)
operator|-
name|visible
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|deltaX
init|=
name|qMax
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|-
name|visible
operator|.
name|left
argument_list|()
argument_list|,
name|visible
operator|.
name|right
argument_list|()
operator|-
name|pos
operator|.
name|x
argument_list|()
argument_list|)
operator|-
name|visible
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|delta
init|=
name|qMax
argument_list|(
name|deltaX
argument_list|,
name|deltaY
argument_list|)
decl_stmt|;
if|if
condition|(
name|delta
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|delta
operator|<
literal|7
condition|)
name|delta
operator|=
literal|7
expr_stmt|;
name|int
name|timeout
init|=
literal|4900
operator|/
operator|(
name|delta
operator|*
name|delta
operator|)
decl_stmt|;
name|d
operator|->
name|autoScrollTimer
operator|.
name|start
argument_list|(
name|timeout
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|deltaY
operator|>
literal|0
condition|)
name|d
operator|->
name|vbar
operator|->
name|triggerAction
argument_list|(
name|pos
operator|.
name|y
argument_list|()
operator|<
name|visible
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
condition|?
name|QAbstractSlider
operator|::
name|SliderSingleStepSub
else|:
name|QAbstractSlider
operator|::
name|SliderSingleStepAdd
argument_list|)
expr_stmt|;
if|if
condition|(
name|deltaX
operator|>
literal|0
condition|)
name|d
operator|->
name|hbar
operator|->
name|triggerAction
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|<
name|visible
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
condition|?
name|QAbstractSlider
operator|::
name|SliderSingleStepSub
else|:
name|QAbstractSlider
operator|::
name|SliderSingleStepAdd
argument_list|)
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
elseif|else
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|deleteAllTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|d
operator|->
name|deleteAllTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Changes the text of the text edit to the string \a text.     Any previous text is removed.      \a text is interpreted as plain text.      Note that the undo/redo history is cleared by this function.      \sa toText() */
end_comment
begin_function
DECL|function|setPlainText
name|void
name|QPlainTextEdit
operator|::
name|setPlainText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|setPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \fn QString QPlainTextEdit::toPlainText() const      Returns the text of the text edit as plain text.      \sa QPlainTextEdit::setPlainText()  */
end_comment
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QPlainTextEdit
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
switch|switch
condition|(
name|e
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Select
case|:
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|d
operator|->
name|control
operator|->
name|textInteractionFlags
argument_list|()
operator|&
name|Qt
operator|::
name|LinksAccessibleByKeyboard
operator|)
condition|)
name|setEditFocus
argument_list|(
operator|!
name|hasEditFocus
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
operator|!
name|hasEditFocus
argument_list|()
condition|)
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
else|else
block|{
name|QTextCursor
name|cursor
init|=
name|d
operator|->
name|control
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|QTextCharFormat
name|charFmt
init|=
name|cursor
operator|.
name|charFormat
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
operator|||
name|charFmt
operator|.
name|anchorHref
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setEditFocus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
break|break;
case|case
name|Qt
operator|::
name|Key_Back
case|:
case|case
name|Qt
operator|::
name|Key_No
case|:
if|if
condition|(
operator|!
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|||
operator|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|!
name|hasEditFocus
argument_list|()
operator|)
condition|)
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
break|break;
default|default:
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|hasEditFocus
argument_list|()
operator|&&
operator|!
operator|(
name|e
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ControlModifier
operator|)
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|text
argument_list|()
index|[
literal|0
index|]
operator|.
name|isPrint
argument_list|()
condition|)
block|{
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
break|break;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
name|Qt
operator|::
name|TextInteractionFlags
name|tif
init|=
name|d
operator|->
name|control
operator|->
name|textInteractionFlags
argument_list|()
decl_stmt|;
if|if
condition|(
name|tif
operator|&
name|Qt
operator|::
name|TextSelectableByKeyboard
condition|)
block|{
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectPreviousPage
condition|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|d
operator|->
name|pageUpDown
argument_list|(
name|QTextCursor
operator|::
name|Up
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|SelectNextPage
condition|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|d
operator|->
name|pageUpDown
argument_list|(
name|QTextCursor
operator|::
name|Down
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|tif
operator|&
operator|(
name|Qt
operator|::
name|TextSelectableByKeyboard
operator||
name|Qt
operator|::
name|TextEditable
operator|)
condition|)
block|{
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToPreviousPage
condition|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|d
operator|->
name|pageUpDown
argument_list|(
name|QTextCursor
operator|::
name|Up
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|e
operator|==
name|QKeySequence
operator|::
name|MoveToNextPage
condition|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|d
operator|->
name|pageUpDown
argument_list|(
name|QTextCursor
operator|::
name|Down
argument_list|,
name|QTextCursor
operator|::
name|MoveAnchor
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|tif
operator|&
name|Qt
operator|::
name|TextEditable
operator|)
condition|)
block|{
switch|switch
condition|(
name|e
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Space
case|:
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
name|d
operator|->
name|vbar
operator|->
name|triggerAction
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepSub
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|vbar
operator|->
name|triggerAction
argument_list|(
name|QAbstractSlider
operator|::
name|SliderPageStepAdd
argument_list|)
expr_stmt|;
break|break;
default|default:
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|e
operator|->
name|isAccepted
argument_list|()
operator|&&
name|e
operator|->
name|modifiers
argument_list|()
operator|==
name|Qt
operator|::
name|NoModifier
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Home
condition|)
block|{
name|d
operator|->
name|vbar
operator|->
name|triggerAction
argument_list|(
name|QAbstractSlider
operator|::
name|SliderToMinimum
argument_list|)
expr_stmt|;
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_End
condition|)
block|{
name|d
operator|->
name|vbar
operator|->
name|triggerAction
argument_list|(
name|QAbstractSlider
operator|::
name|SliderToMaximum
argument_list|)
expr_stmt|;
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|e
operator|->
name|isAccepted
argument_list|()
condition|)
block|{
name|QAbstractScrollArea
operator|::
name|keyPressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
endif|#
directive|endif
comment|// QT_NO_SHORTCUT
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
operator|!
name|e
operator|->
name|isAccepted
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|e
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Up
case|:
case|case
name|Qt
operator|::
name|Key_Down
case|:
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
comment|// Cursor position didn't change, so we want to leave
comment|// these keys to change focus.
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|Qt
operator|::
name|Key_Left
case|:
case|case
name|Qt
operator|::
name|Key_Right
case|:
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
name|QApplication
operator|::
name|navigationMode
argument_list|()
operator|==
name|Qt
operator|::
name|NavigationModeKeypadDirectional
condition|)
block|{
comment|// Same as for Key_Up and Key_Down.
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|Qt
operator|::
name|Key_Back
case|:
if|if
condition|(
operator|!
name|e
operator|->
name|isAutoRepeat
argument_list|()
condition|)
block|{
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|document
argument_list|()
operator|->
name|isEmpty
argument_list|()
condition|)
block|{
name|setEditFocus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|d
operator|->
name|deleteAllTimer
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
name|d
operator|->
name|deleteAllTimer
operator|.
name|start
argument_list|(
literal|750
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
break|break;
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|keyReleaseEvent
name|void
name|QPlainTextEdit
operator|::
name|keyReleaseEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|e
operator|->
name|isAutoRepeat
argument_list|()
operator|&&
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Back
operator|&&
name|d
operator|->
name|deleteAllTimer
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|d
operator|->
name|deleteAllTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|QTextCursor
name|cursor
init|=
name|d
operator|->
name|control
operator|->
name|textCursor
argument_list|()
decl_stmt|;
name|QTextBlockFormat
name|blockFmt
init|=
name|cursor
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QTextList
modifier|*
name|list
init|=
name|cursor
operator|.
name|currentList
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|&&
name|cursor
operator|.
name|atBlockStart
argument_list|()
condition|)
block|{
name|list
operator|->
name|remove
argument_list|(
name|cursor
operator|.
name|block
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cursor
operator|.
name|atBlockStart
argument_list|()
operator|&&
name|blockFmt
operator|.
name|indent
argument_list|()
operator|>
literal|0
condition|)
block|{
name|blockFmt
operator|.
name|setIndent
argument_list|(
name|blockFmt
operator|.
name|indent
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockFormat
argument_list|(
name|blockFmt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cursor
operator|.
name|deletePreviousChar
argument_list|()
expr_stmt|;
block|}
name|setTextCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
block|}
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|e
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Loads the resource specified by the given \a type and \a name.      This function is an extension of QTextDocument::loadResource().      \sa QTextDocument::loadResource() */
end_comment
begin_function
DECL|function|loadResource
name|QVariant
name|QPlainTextEdit
operator|::
name|loadResource
parameter_list|(
name|int
name|type
parameter_list|,
specifier|const
name|QUrl
modifier|&
name|name
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QPlainTextEdit
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|oldSize
argument_list|()
operator|.
name|width
argument_list|()
operator|!=
name|e
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
condition|)
name|d
operator|->
name|relayoutDocument
argument_list|()
expr_stmt|;
name|d
operator|->
name|_q_adjustScrollbars
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|relayoutDocument
name|void
name|QPlainTextEditPrivate
operator|::
name|relayoutDocument
parameter_list|()
block|{
name|QTextDocument
modifier|*
name|doc
init|=
name|control
operator|->
name|document
argument_list|()
decl_stmt|;
name|QPlainTextDocumentLayout
modifier|*
name|documentLayout
init|=
name|qobject_cast
argument_list|<
name|QPlainTextDocumentLayout
operator|*
argument_list|>
argument_list|(
name|doc
operator|->
name|documentLayout
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|documentLayout
argument_list|)
expr_stmt|;
name|documentLayoutPtr
operator|=
name|documentLayout
expr_stmt|;
name|int
name|width
init|=
name|viewport
operator|->
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
name|documentLayout
operator|->
name|priv
argument_list|()
operator|->
name|mainViewPrivate
operator|==
literal|0
operator|||
name|documentLayout
operator|->
name|priv
argument_list|()
operator|->
name|mainViewPrivate
operator|==
name|this
operator|||
name|width
operator|>
name|documentLayout
operator|->
name|textWidth
argument_list|()
condition|)
block|{
name|documentLayout
operator|->
name|priv
argument_list|()
operator|->
name|mainViewPrivate
operator|=
name|this
expr_stmt|;
name|documentLayout
operator|->
name|setTextWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fillBackground
specifier|static
name|void
name|fillBackground
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|QBrush
name|brush
parameter_list|,
name|QRectF
name|gradientRect
init|=
name|QRectF
argument_list|()
parameter_list|)
block|{
name|p
operator|->
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|brush
operator|.
name|style
argument_list|()
operator|>=
name|Qt
operator|::
name|LinearGradientPattern
operator|&&
name|brush
operator|.
name|style
argument_list|()
operator|<=
name|Qt
operator|::
name|ConicalGradientPattern
condition|)
block|{
if|if
condition|(
operator|!
name|gradientRect
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QTransform
name|m
init|=
name|QTransform
operator|::
name|fromTranslate
argument_list|(
name|gradientRect
operator|.
name|left
argument_list|()
argument_list|,
name|gradientRect
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
name|m
operator|.
name|scale
argument_list|(
name|gradientRect
operator|.
name|width
argument_list|()
argument_list|,
name|gradientRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|brush
operator|.
name|setTransform
argument_list|(
name|m
argument_list|)
expr_stmt|;
cast|const_cast
argument_list|<
name|QGradient
operator|*
argument_list|>
argument_list|(
name|brush
operator|.
name|gradient
argument_list|()
argument_list|)
operator|->
name|setCoordinateMode
argument_list|(
name|QGradient
operator|::
name|LogicalMode
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|p
operator|->
name|setBrushOrigin
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|,
name|brush
argument_list|)
expr_stmt|;
name|p
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QPlainTextEdit
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|e
parameter_list|)
block|{
name|QPainter
name|painter
argument_list|(
name|viewport
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|qobject_cast
argument_list|<
name|QPlainTextDocumentLayout
operator|*
argument_list|>
argument_list|(
name|document
argument_list|()
operator|->
name|documentLayout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QPointF
name|offset
argument_list|(
name|contentOffset
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|er
init|=
name|e
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QRect
name|viewportRect
init|=
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
decl_stmt|;
name|bool
name|editable
init|=
operator|!
name|isReadOnly
argument_list|()
decl_stmt|;
name|QTextBlock
name|block
init|=
name|firstVisibleBlock
argument_list|()
decl_stmt|;
name|qreal
name|maximumWidth
init|=
name|document
argument_list|()
operator|->
name|documentLayout
argument_list|()
operator|->
name|documentSize
argument_list|()
operator|.
name|width
argument_list|()
decl_stmt|;
comment|// Set a brush origin so that the WaveUnderline knows where the wave started
name|painter
operator|.
name|setBrushOrigin
argument_list|(
name|offset
argument_list|)
expr_stmt|;
comment|// keep right margin clean from full-width selection
name|int
name|maxX
init|=
name|offset
operator|.
name|x
argument_list|()
operator|+
name|qMax
argument_list|(
operator|(
name|qreal
operator|)
name|viewportRect
operator|.
name|width
argument_list|()
argument_list|,
name|maximumWidth
argument_list|)
operator|-
name|document
argument_list|()
operator|->
name|documentMargin
argument_list|()
decl_stmt|;
name|er
operator|.
name|setRight
argument_list|(
name|qMin
argument_list|(
name|er
operator|.
name|right
argument_list|()
argument_list|,
name|maxX
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setClipRect
argument_list|(
name|er
argument_list|)
expr_stmt|;
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
name|context
init|=
name|getPaintContext
argument_list|()
decl_stmt|;
while|while
condition|(
name|block
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QRectF
name|r
init|=
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
operator|.
name|translated
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|QTextLayout
modifier|*
name|layout
init|=
name|block
operator|.
name|layout
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|block
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|offset
operator|.
name|ry
argument_list|()
operator|+=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|r
operator|.
name|bottom
argument_list|()
operator|>=
name|er
operator|.
name|top
argument_list|()
operator|&&
name|r
operator|.
name|top
argument_list|()
operator|<=
name|er
operator|.
name|bottom
argument_list|()
condition|)
block|{
name|QTextBlockFormat
name|blockFormat
init|=
name|block
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QBrush
name|bg
init|=
name|blockFormat
operator|.
name|background
argument_list|()
decl_stmt|;
if|if
condition|(
name|bg
operator|!=
name|Qt
operator|::
name|NoBrush
condition|)
block|{
name|QRectF
name|contentsRect
init|=
name|r
decl_stmt|;
name|contentsRect
operator|.
name|setWidth
argument_list|(
name|qMax
argument_list|(
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|maximumWidth
argument_list|)
argument_list|)
expr_stmt|;
name|fillBackground
argument_list|(
operator|&
name|painter
argument_list|,
name|contentsRect
argument_list|,
name|bg
argument_list|)
expr_stmt|;
block|}
name|QVector
argument_list|<
name|QTextLayout
operator|::
name|FormatRange
argument_list|>
name|selections
decl_stmt|;
name|int
name|blpos
init|=
name|block
operator|.
name|position
argument_list|()
decl_stmt|;
name|int
name|bllen
init|=
name|block
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|context
operator|.
name|selections
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QAbstractTextDocumentLayout
operator|::
name|Selection
modifier|&
name|range
init|=
name|context
operator|.
name|selections
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|int
name|selStart
init|=
name|range
operator|.
name|cursor
operator|.
name|selectionStart
argument_list|()
operator|-
name|blpos
decl_stmt|;
specifier|const
name|int
name|selEnd
init|=
name|range
operator|.
name|cursor
operator|.
name|selectionEnd
argument_list|()
operator|-
name|blpos
decl_stmt|;
if|if
condition|(
name|selStart
argument_list|<
name|bllen
operator|&&
name|selEnd
argument_list|>
literal|0
operator|&&
name|selEnd
operator|>
name|selStart
condition|)
block|{
name|QTextLayout
operator|::
name|FormatRange
name|o
decl_stmt|;
name|o
operator|.
name|start
operator|=
name|selStart
expr_stmt|;
name|o
operator|.
name|length
operator|=
name|selEnd
operator|-
name|selStart
expr_stmt|;
name|o
operator|.
name|format
operator|=
name|range
operator|.
name|format
expr_stmt|;
name|selections
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|range
operator|.
name|cursor
operator|.
name|hasSelection
argument_list|()
operator|&&
name|range
operator|.
name|format
operator|.
name|hasProperty
argument_list|(
name|QTextFormat
operator|::
name|FullWidthSelection
argument_list|)
operator|&&
name|block
operator|.
name|contains
argument_list|(
name|range
operator|.
name|cursor
operator|.
name|position
argument_list|()
argument_list|)
condition|)
block|{
comment|// for full width selections we don't require an actual selection, just
comment|// a position to specify the line. that's more convenience in usage.
name|QTextLayout
operator|::
name|FormatRange
name|o
decl_stmt|;
name|QTextLine
name|l
init|=
name|layout
operator|->
name|lineForTextPosition
argument_list|(
name|range
operator|.
name|cursor
operator|.
name|position
argument_list|()
operator|-
name|blpos
argument_list|)
decl_stmt|;
name|o
operator|.
name|start
operator|=
name|l
operator|.
name|textStart
argument_list|()
expr_stmt|;
name|o
operator|.
name|length
operator|=
name|l
operator|.
name|textLength
argument_list|()
expr_stmt|;
if|if
condition|(
name|o
operator|.
name|start
operator|+
name|o
operator|.
name|length
operator|==
name|bllen
operator|-
literal|1
condition|)
operator|++
name|o
operator|.
name|length
expr_stmt|;
comment|// include newline
name|o
operator|.
name|format
operator|=
name|range
operator|.
name|format
expr_stmt|;
name|selections
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
name|bool
name|drawCursor
init|=
operator|(
operator|(
name|editable
operator|||
operator|(
name|textInteractionFlags
argument_list|()
operator|&
name|Qt
operator|::
name|TextSelectableByKeyboard
operator|)
operator|)
operator|&&
name|context
operator|.
name|cursorPosition
operator|>=
name|blpos
operator|&&
name|context
operator|.
name|cursorPosition
operator|<
name|blpos
operator|+
name|bllen
operator|)
decl_stmt|;
name|bool
name|drawCursorAsBlock
init|=
name|drawCursor
operator|&&
name|overwriteMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|drawCursorAsBlock
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|cursorPosition
operator|==
name|blpos
operator|+
name|bllen
operator|-
literal|1
condition|)
block|{
name|drawCursorAsBlock
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|QTextLayout
operator|::
name|FormatRange
name|o
decl_stmt|;
name|o
operator|.
name|start
operator|=
name|context
operator|.
name|cursorPosition
operator|-
name|blpos
expr_stmt|;
name|o
operator|.
name|length
operator|=
literal|1
expr_stmt|;
name|o
operator|.
name|format
operator|.
name|setForeground
argument_list|(
name|palette
argument_list|()
operator|.
name|base
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|.
name|format
operator|.
name|setBackground
argument_list|(
name|palette
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|selections
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
name|layout
operator|->
name|draw
argument_list|(
operator|&
name|painter
argument_list|,
name|offset
argument_list|,
name|selections
argument_list|,
name|er
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|drawCursor
operator|&&
operator|!
name|drawCursorAsBlock
operator|)
operator|||
operator|(
name|editable
operator|&&
name|context
operator|.
name|cursorPosition
operator|<
operator|-
literal|1
operator|&&
operator|!
name|layout
operator|->
name|preeditAreaText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|int
name|cpos
init|=
name|context
operator|.
name|cursorPosition
decl_stmt|;
if|if
condition|(
name|cpos
operator|<
operator|-
literal|1
condition|)
name|cpos
operator|=
name|layout
operator|->
name|preeditAreaPosition
argument_list|()
operator|-
operator|(
name|cpos
operator|+
literal|2
operator|)
expr_stmt|;
else|else
name|cpos
operator|-=
name|blpos
expr_stmt|;
name|layout
operator|->
name|drawCursor
argument_list|(
operator|&
name|painter
argument_list|,
name|offset
argument_list|,
name|cpos
argument_list|,
name|cursorWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|offset
operator|.
name|ry
argument_list|()
operator|+=
name|r
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|offset
operator|.
name|y
argument_list|()
operator|>
name|viewportRect
operator|.
name|height
argument_list|()
condition|)
break|break;
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|backgroundVisible
argument_list|()
operator|&&
operator|!
name|block
operator|.
name|isValid
argument_list|()
operator|&&
name|offset
operator|.
name|y
argument_list|()
operator|<=
name|er
operator|.
name|bottom
argument_list|()
operator|&&
operator|(
name|centerOnScroll
argument_list|()
operator|||
name|verticalScrollBar
argument_list|()
operator|->
name|maximum
argument_list|()
operator|==
name|verticalScrollBar
argument_list|()
operator|->
name|minimum
argument_list|()
operator|)
condition|)
block|{
name|painter
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
operator|(
name|int
operator|)
name|er
operator|.
name|left
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|offset
operator|.
name|y
argument_list|()
argument_list|)
argument_list|,
name|er
operator|.
name|bottomRight
argument_list|()
argument_list|)
argument_list|,
name|palette
argument_list|()
operator|.
name|background
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateDefaultTextOption
name|void
name|QPlainTextEditPrivate
operator|::
name|updateDefaultTextOption
parameter_list|()
block|{
name|QTextDocument
modifier|*
name|doc
init|=
name|control
operator|->
name|document
argument_list|()
decl_stmt|;
name|QTextOption
name|opt
init|=
name|doc
operator|->
name|defaultTextOption
argument_list|()
decl_stmt|;
name|QTextOption
operator|::
name|WrapMode
name|oldWrapMode
init|=
name|opt
operator|.
name|wrapMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|lineWrap
operator|==
name|QPlainTextEdit
operator|::
name|NoWrap
condition|)
name|opt
operator|.
name|setWrapMode
argument_list|(
name|QTextOption
operator|::
name|NoWrap
argument_list|)
expr_stmt|;
else|else
name|opt
operator|.
name|setWrapMode
argument_list|(
name|wordWrap
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|.
name|wrapMode
argument_list|()
operator|!=
name|oldWrapMode
condition|)
name|doc
operator|->
name|setDefaultTextOption
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|QPlainTextEdit
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|!
name|hasEditFocus
argument_list|()
condition|)
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|mouseMoveEvent
name|void
name|QPlainTextEdit
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|inDrag
operator|=
literal|false
expr_stmt|;
comment|// paranoia
specifier|const
name|QPoint
name|pos
init|=
name|e
operator|->
name|pos
argument_list|()
decl_stmt|;
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|e
operator|->
name|buttons
argument_list|()
operator|&
name|Qt
operator|::
name|LeftButton
operator|)
condition|)
return|return;
name|QRect
name|visible
init|=
name|d
operator|->
name|viewport
operator|->
name|rect
argument_list|()
decl_stmt|;
if|if
condition|(
name|visible
operator|.
name|contains
argument_list|(
name|pos
argument_list|)
condition|)
name|d
operator|->
name|autoScrollTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|d
operator|->
name|autoScrollTimer
operator|.
name|isActive
argument_list|()
condition|)
name|d
operator|->
name|autoScrollTimer
operator|.
name|start
argument_list|(
literal|100
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QPlainTextEdit
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|autoScrollTimer
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|d
operator|->
name|autoScrollTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|d
operator|->
name|ensureCursorVisible
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isReadOnly
argument_list|()
operator|&&
name|rect
argument_list|()
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
name|d
operator|->
name|handleSoftwareInputPanel
argument_list|(
name|e
operator|->
name|button
argument_list|()
argument_list|,
name|d
operator|->
name|clickCausedFocus
argument_list|)
expr_stmt|;
name|d
operator|->
name|clickCausedFocus
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|mouseDoubleClickEvent
name|void
name|QPlainTextEdit
operator|::
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|focusNextPrevChild
name|bool
name|QPlainTextEdit
operator|::
name|focusNextPrevChild
parameter_list|(
name|bool
name|next
parameter_list|)
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|tabChangesFocus
operator|&&
name|d
operator|->
name|control
operator|->
name|textInteractionFlags
argument_list|()
operator|&
name|Qt
operator|::
name|TextEditable
condition|)
return|return
literal|false
return|;
return|return
name|QAbstractScrollArea
operator|::
name|focusNextPrevChild
argument_list|(
name|next
argument_list|)
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_comment
comment|/*!   \fn void QPlainTextEdit::contextMenuEvent(QContextMenuEvent *event)    Shows the standard context menu created with createStandardContextMenu().    If you do not want the text edit to have a context menu, you can set   its \l contextMenuPolicy to Qt::NoContextMenu. If you want to   customize the context menu, reimplement this function. If you want   to extend the standard context menu, reimplement this function, call   createStandardContextMenu() and extend the menu returned.    Information about the event is passed in the \a event object.    \snippet code/src_gui_widgets_qplaintextedit.cpp 0 */
end_comment
begin_function
DECL|function|contextMenuEvent
name|void
name|QPlainTextEdit
operator|::
name|contextMenuEvent
parameter_list|(
name|QContextMenuEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONTEXTMENU
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DRAGANDDROP
end_ifndef
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|dragEnterEvent
name|void
name|QPlainTextEdit
operator|::
name|dragEnterEvent
parameter_list|(
name|QDragEnterEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|inDrag
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|dragLeaveEvent
name|void
name|QPlainTextEdit
operator|::
name|dragLeaveEvent
parameter_list|(
name|QDragLeaveEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|inDrag
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|autoScrollTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|dragMoveEvent
name|void
name|QPlainTextEdit
operator|::
name|dragMoveEvent
parameter_list|(
name|QDragMoveEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|autoScrollDragPos
operator|=
name|e
operator|->
name|pos
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|autoScrollTimer
operator|.
name|isActive
argument_list|()
condition|)
name|d
operator|->
name|autoScrollTimer
operator|.
name|start
argument_list|(
literal|100
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|dropEvent
name|void
name|QPlainTextEdit
operator|::
name|dropEvent
parameter_list|(
name|QDropEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|inDrag
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|autoScrollTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DRAGANDDROP
end_comment
begin_comment
comment|/*! \reimp  */
end_comment
begin_function
DECL|function|inputMethodEvent
name|void
name|QPlainTextEdit
operator|::
name|inputMethodEvent
parameter_list|(
name|QInputMethodEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
if|if
condition|(
name|d
operator|->
name|control
operator|->
name|textInteractionFlags
argument_list|()
operator|&
name|Qt
operator|::
name|TextEditable
operator|&&
name|QApplication
operator|::
name|keypadNavigationEnabled
argument_list|()
operator|&&
operator|!
name|hasEditFocus
argument_list|()
condition|)
block|{
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|selectAll
argument_list|()
expr_stmt|;
comment|// so text is replaced rather than appended to
block|}
endif|#
directive|endif
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|ensureCursorVisible
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!\reimp */
end_comment
begin_function
DECL|function|scrollContentsBy
name|void
name|QPlainTextEdit
operator|::
name|scrollContentsBy
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
comment|/*dy*/
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|setTopLine
argument_list|(
name|d
operator|->
name|vbar
operator|->
name|value
argument_list|()
argument_list|,
name|dx
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!\reimp */
end_comment
begin_function
DECL|function|inputMethodQuery
name|QVariant
name|QPlainTextEdit
operator|::
name|inputMethodQuery
parameter_list|(
name|Qt
operator|::
name|InputMethodQuery
name|property
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|d
operator|->
name|control
operator|->
name|inputMethodQuery
argument_list|(
name|property
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|offset
argument_list|(
operator|-
name|d
operator|->
name|horizontalOffset
argument_list|()
argument_list|,
operator|-
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|RectF
condition|)
name|v
operator|=
name|v
operator|.
name|toRectF
argument_list|()
operator|.
name|toRect
argument_list|()
operator|.
name|translated
argument_list|(
name|offset
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|v
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|PointF
condition|)
name|v
operator|=
name|v
operator|.
name|toPointF
argument_list|()
operator|.
name|toPoint
argument_list|()
operator|+
name|offset
expr_stmt|;
elseif|else
if|if
condition|(
name|v
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Rect
condition|)
name|v
operator|=
name|v
operator|.
name|toRect
argument_list|()
operator|.
name|translated
argument_list|(
name|offset
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|v
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Point
condition|)
name|v
operator|=
name|v
operator|.
name|toPoint
argument_list|()
operator|+
name|offset
expr_stmt|;
return|return
name|v
return|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|focusInEvent
name|void
name|QPlainTextEdit
operator|::
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|reason
argument_list|()
operator|==
name|Qt
operator|::
name|MouseFocusReason
condition|)
block|{
name|d
operator|->
name|clickCausedFocus
operator|=
literal|1
expr_stmt|;
block|}
name|QAbstractScrollArea
operator|::
name|focusInEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|focusOutEvent
name|void
name|QPlainTextEdit
operator|::
name|focusOutEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|QAbstractScrollArea
operator|::
name|focusOutEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|showEvent
name|void
name|QPlainTextEdit
operator|::
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|showCursorOnInitialShow
condition|)
block|{
name|d
operator|->
name|showCursorOnInitialShow
operator|=
literal|false
expr_stmt|;
name|ensureCursorVisible
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QPlainTextEdit
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|QAbstractScrollArea
operator|::
name|changeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ApplicationFontChange
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FontChange
condition|)
block|{
name|d
operator|->
name|control
operator|->
name|document
argument_list|()
operator|->
name|setDefaultFont
argument_list|(
name|font
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActivationChange
condition|)
block|{
if|if
condition|(
operator|!
name|isActiveWindow
argument_list|()
condition|)
name|d
operator|->
name|autoScrollTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|EnabledChange
condition|)
block|{
name|e
operator|->
name|setAccepted
argument_list|(
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|PaletteChange
condition|)
block|{
name|d
operator|->
name|control
operator|->
name|setPalette
argument_list|(
name|palette
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LayoutDirectionChange
condition|)
block|{
name|d
operator|->
name|sendControlEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*! \reimp */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_function
DECL|function|wheelEvent
name|void
name|QPlainTextEdit
operator|::
name|wheelEvent
parameter_list|(
name|QWheelEvent
modifier|*
name|e
parameter_list|)
block|{
name|QAbstractScrollArea
operator|::
name|wheelEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|updateMicroFocus
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CONTEXTMENU
end_ifndef
begin_comment
comment|/*!  This function creates the standard context menu which is shown   when the user clicks on the line edit with the right mouse   button. It is called from the default contextMenuEvent() handler.   The popup menu's ownership is transferred to the caller. */
end_comment
begin_function
DECL|function|createStandardContextMenu
name|QMenu
modifier|*
name|QPlainTextEdit
operator|::
name|createStandardContextMenu
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|createStandardContextMenu
argument_list|(
name|QPointF
argument_list|()
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CONTEXTMENU
end_comment
begin_comment
comment|/*!   returns a QTextCursor at position \a pos (in viewport coordinates). */
end_comment
begin_function
DECL|function|cursorForPosition
name|QTextCursor
name|QPlainTextEdit
operator|::
name|cursorForPosition
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pos
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|cursorForPosition
argument_list|(
name|d
operator|->
name|mapToContents
argument_list|(
name|pos
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   returns a rectangle (in viewport coordinates) that includes the   \a cursor.  */
end_comment
begin_function
DECL|function|cursorRect
name|QRect
name|QPlainTextEdit
operator|::
name|cursorRect
parameter_list|(
specifier|const
name|QTextCursor
modifier|&
name|cursor
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|cursor
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QRect
name|r
init|=
name|d
operator|->
name|control
operator|->
name|cursorRect
argument_list|(
name|cursor
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|r
operator|.
name|translate
argument_list|(
operator|-
name|d
operator|->
name|horizontalOffset
argument_list|()
argument_list|,
operator|-
name|d
operator|->
name|verticalOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function
begin_comment
comment|/*!   returns a rectangle (in viewport coordinates) that includes the   cursor of the text edit.  */
end_comment
begin_function
DECL|function|cursorRect
name|QRect
name|QPlainTextEdit
operator|::
name|cursorRect
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|QRect
name|r
init|=
name|d
operator|->
name|control
operator|->
name|cursorRect
argument_list|()
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|r
operator|.
name|translate
argument_list|(
operator|-
name|d
operator|->
name|horizontalOffset
argument_list|()
argument_list|,
operator|-
name|d
operator|->
name|verticalOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function
begin_comment
comment|/*!    \property QPlainTextEdit::overwriteMode    \brief whether text entered by the user will overwrite existing text     As with many text editors, the plain text editor widget can be configured    to insert or overwrite existing text with new text entered by the user.     If this property is true, existing text is overwritten, character-for-character    by new text; otherwise, text is inserted at the cursor position, displacing    existing text.     By default, this property is false (new text does not overwrite existing text). */
end_comment
begin_function
DECL|function|overwriteMode
name|bool
name|QPlainTextEdit
operator|::
name|overwriteMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|overwriteMode
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setOverwriteMode
name|void
name|QPlainTextEdit
operator|::
name|setOverwriteMode
parameter_list|(
name|bool
name|overwrite
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|setOverwriteMode
argument_list|(
name|overwrite
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QPlainTextEdit::tabStopWidth     \brief the tab stop width in pixels      By default, this property contains a value of 80. */
end_comment
begin_function
DECL|function|tabStopWidth
name|int
name|QPlainTextEdit
operator|::
name|tabStopWidth
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|qRound
argument_list|(
name|d
operator|->
name|control
operator|->
name|document
argument_list|()
operator|->
name|defaultTextOption
argument_list|()
operator|.
name|tabStop
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setTabStopWidth
name|void
name|QPlainTextEdit
operator|::
name|setTabStopWidth
parameter_list|(
name|int
name|width
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|QTextOption
name|opt
init|=
name|d
operator|->
name|control
operator|->
name|document
argument_list|()
operator|->
name|defaultTextOption
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|.
name|tabStop
argument_list|()
operator|==
name|width
operator|||
name|width
operator|<
literal|0
condition|)
return|return;
name|opt
operator|.
name|setTabStop
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|document
argument_list|()
operator|->
name|setDefaultTextOption
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QPlainTextEdit::cursorWidth      This property specifies the width of the cursor in pixels. The default value is 1. */
end_comment
begin_function
DECL|function|cursorWidth
name|int
name|QPlainTextEdit
operator|::
name|cursorWidth
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|cursorWidth
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|setCursorWidth
name|void
name|QPlainTextEdit
operator|::
name|setCursorWidth
parameter_list|(
name|int
name|width
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|setCursorWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     This function allows temporarily marking certain regions in the document     with a given color, specified as \a selections. This can be useful for     example in a programming editor to mark a whole line of text with a given     background color to indicate the existence of a breakpoint.      \sa QTextEdit::ExtraSelection, extraSelections() */
end_comment
begin_function
DECL|function|setExtraSelections
name|void
name|QPlainTextEdit
operator|::
name|setExtraSelections
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
modifier|&
name|selections
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|setExtraSelections
argument_list|(
name|selections
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns previously set extra selections.      \sa setExtraSelections() */
end_comment
begin_function
DECL|function|extraSelections
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
name|QPlainTextEdit
operator|::
name|extraSelections
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|extraSelections
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     This function returns a new MIME data object to represent the contents     of the text edit's current selection. It is called when the selection needs     to be encapsulated into a new QMimeData object; for example, when a drag     and drop operation is started, or when data is copied to the clipboard.      If you reimplement this function, note that the ownership of the returned     QMimeData object is passed to the caller. The selection can be retrieved     by using the textCursor() function. */
end_comment
begin_function
DECL|function|createMimeDataFromSelection
name|QMimeData
modifier|*
name|QPlainTextEdit
operator|::
name|createMimeDataFromSelection
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|QWidgetTextControl
operator|::
name|createMimeDataFromSelection
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     This function returns true if the contents of the MIME data object, specified     by \a source, can be decoded and inserted into the document. It is called     for example when during a drag operation the mouse enters this widget and it     is necessary to determine whether it is possible to accept the drag.  */
end_comment
begin_function
DECL|function|canInsertFromMimeData
name|bool
name|QPlainTextEdit
operator|::
name|canInsertFromMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|source
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|QWidgetTextControl
operator|::
name|canInsertFromMimeData
argument_list|(
name|source
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     This function inserts the contents of the MIME data object, specified     by \a source, into the text edit at the current cursor position. It is     called whenever text is inserted as the result of a clipboard paste     operation, or when the text edit accepts data from a drag and drop     operation. */
end_comment
begin_function
DECL|function|insertFromMimeData
name|void
name|QPlainTextEdit
operator|::
name|insertFromMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|source
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|QWidgetTextControl
operator|::
name|insertFromMimeData
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QPlainTextEdit::readOnly     \brief whether the text edit is read-only      In a read-only text edit the user can only navigate through the     text and select text; modifying the text is not possible.      This property's default is false. */
end_comment
begin_function
DECL|function|isReadOnly
name|bool
name|QPlainTextEdit
operator|::
name|isReadOnly
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
operator|!
operator|(
name|d
operator|->
name|control
operator|->
name|textInteractionFlags
argument_list|()
operator|&
name|Qt
operator|::
name|TextEditable
operator|)
return|;
block|}
end_function
begin_function
DECL|function|setReadOnly
name|void
name|QPlainTextEdit
operator|::
name|setReadOnly
parameter_list|(
name|bool
name|ro
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|TextInteractionFlags
name|flags
init|=
name|Qt
operator|::
name|NoTextInteraction
decl_stmt|;
if|if
condition|(
name|ro
condition|)
block|{
name|flags
operator|=
name|Qt
operator|::
name|TextSelectableByMouse
expr_stmt|;
block|}
else|else
block|{
name|flags
operator|=
name|Qt
operator|::
name|TextEditorInteraction
expr_stmt|;
block|}
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|,
name|shouldEnableInputMethod
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|setTextInteractionFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QPlainTextEdit::textInteractionFlags      Specifies how the label should interact with user input if it displays text.      If the flags contain either Qt::LinksAccessibleByKeyboard or Qt::TextSelectableByKeyboard     then the focus policy is also automatically set to Qt::ClickFocus.      The default value depends on whether the QPlainTextEdit is read-only     or editable. */
end_comment
begin_function
DECL|function|setTextInteractionFlags
name|void
name|QPlainTextEdit
operator|::
name|setTextInteractionFlags
parameter_list|(
name|Qt
operator|::
name|TextInteractionFlags
name|flags
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|setTextInteractionFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textInteractionFlags
name|Qt
operator|::
name|TextInteractionFlags
name|QPlainTextEdit
operator|::
name|textInteractionFlags
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|textInteractionFlags
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Merges the properties specified in \a modifier into the current character     format by calling QTextCursor::mergeCharFormat on the editor's cursor.     If the editor has a selection then the properties of \a modifier are     directly applied to the selection.      \sa QTextCursor::mergeCharFormat()  */
end_comment
begin_function
DECL|function|mergeCurrentCharFormat
name|void
name|QPlainTextEdit
operator|::
name|mergeCurrentCharFormat
parameter_list|(
specifier|const
name|QTextCharFormat
modifier|&
name|modifier
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|mergeCurrentCharFormat
argument_list|(
name|modifier
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Sets the char format that is be used when inserting new text to \a     format by calling QTextCursor::setCharFormat() on the editor's     cursor.  If the editor has a selection then the char format is     directly applied to the selection.  */
end_comment
begin_function
DECL|function|setCurrentCharFormat
name|void
name|QPlainTextEdit
operator|::
name|setCurrentCharFormat
parameter_list|(
specifier|const
name|QTextCharFormat
modifier|&
name|format
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|setCurrentCharFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the char format that is used when inserting new text.  */
end_comment
begin_function
DECL|function|currentCharFormat
name|QTextCharFormat
name|QPlainTextEdit
operator|::
name|currentCharFormat
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|currentCharFormat
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Convenience slot that inserts \a text at the current     cursor position.      It is equivalent to      \snippet code/src_gui_widgets_qplaintextedit.cpp 1  */
end_comment
begin_function
DECL|function|insertPlainText
name|void
name|QPlainTextEdit
operator|::
name|insertPlainText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|insertPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Moves the cursor by performing the given \a operation.      If \a mode is QTextCursor::KeepAnchor, the cursor selects the text it moves over.     This is the same effect that the user achieves when they hold down the Shift key     and move the cursor with the cursor keys.      \sa QTextCursor::movePosition() */
end_comment
begin_function
DECL|function|moveCursor
name|void
name|QPlainTextEdit
operator|::
name|moveCursor
parameter_list|(
name|QTextCursor
operator|::
name|MoveOperation
name|operation
parameter_list|,
name|QTextCursor
operator|::
name|MoveMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|moveCursor
argument_list|(
name|operation
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns whether text can be pasted from the clipboard into the textedit. */
end_comment
begin_function
DECL|function|canPaste
name|bool
name|QPlainTextEdit
operator|::
name|canPaste
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|canPaste
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Convenience function to print the text edit's document to the given \a printer. This     is equivalent to calling the print method on the document directly except that this     function also supports QPrinter::Selection as print range.      \sa QTextDocument::print() */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
end_ifndef
begin_function
DECL|function|print
name|void
name|QPlainTextEdit
operator|::
name|print
parameter_list|(
name|QPagedPaintDevice
modifier|*
name|printer
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|control
operator|->
name|print
argument_list|(
name|printer
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*! \property QPlainTextEdit::tabChangesFocus   \brief whether \uicontrol Tab changes focus or is accepted as input    In some occasions text edits should not allow the user to input   tabulators or change indentation using the \uicontrol Tab key, as this breaks   the focus chain. The default is false.  */
end_comment
begin_function
DECL|function|tabChangesFocus
name|bool
name|QPlainTextEdit
operator|::
name|tabChangesFocus
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|tabChangesFocus
return|;
block|}
end_function
begin_function
DECL|function|setTabChangesFocus
name|void
name|QPlainTextEdit
operator|::
name|setTabChangesFocus
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|tabChangesFocus
operator|=
name|b
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QPlainTextEdit::documentTitle     \brief the title of the document parsed from the text.      By default, this property contains an empty string. */
end_comment
begin_comment
comment|/*!     \property QPlainTextEdit::lineWrapMode     \brief the line wrap mode      The default mode is WidgetWidth which causes words to be     wrapped at the right edge of the text edit. Wrapping occurs at     whitespace, keeping whole words intact. If you want wrapping to     occur within words use setWordWrapMode(). */
end_comment
begin_function
DECL|function|lineWrapMode
name|QPlainTextEdit
operator|::
name|LineWrapMode
name|QPlainTextEdit
operator|::
name|lineWrapMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|lineWrap
return|;
block|}
end_function
begin_function
DECL|function|setLineWrapMode
name|void
name|QPlainTextEdit
operator|::
name|setLineWrapMode
parameter_list|(
name|LineWrapMode
name|wrap
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|lineWrap
operator|==
name|wrap
condition|)
return|return;
name|d
operator|->
name|lineWrap
operator|=
name|wrap
expr_stmt|;
name|d
operator|->
name|updateDefaultTextOption
argument_list|()
expr_stmt|;
name|d
operator|->
name|relayoutDocument
argument_list|()
expr_stmt|;
name|d
operator|->
name|_q_adjustScrollbars
argument_list|()
expr_stmt|;
name|ensureCursorVisible
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QPlainTextEdit::wordWrapMode     \brief the mode QPlainTextEdit will use when wrapping text by words      By default, this property is set to QTextOption::WrapAtWordBoundaryOrAnywhere.      \sa QTextOption::WrapMode */
end_comment
begin_function
DECL|function|wordWrapMode
name|QTextOption
operator|::
name|WrapMode
name|QPlainTextEdit
operator|::
name|wordWrapMode
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|wordWrap
return|;
block|}
end_function
begin_function
DECL|function|setWordWrapMode
name|void
name|QPlainTextEdit
operator|::
name|setWordWrapMode
parameter_list|(
name|QTextOption
operator|::
name|WrapMode
name|mode
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|d
operator|->
name|wordWrap
condition|)
return|return;
name|d
operator|->
name|wordWrap
operator|=
name|mode
expr_stmt|;
name|d
operator|->
name|updateDefaultTextOption
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QPlainTextEdit::backgroundVisible     \brief whether the palette background is visible outside the document area      If set to true, the plain text edit paints the palette background     on the viewport area not covered by the text document. Otherwise,     if set to false, it won't. The feature makes it possible for     the user to visually distinguish between the area of the document,     painted with the base color of the palette, and the empty     area not covered by any document.      The default is false. */
end_comment
begin_function
DECL|function|backgroundVisible
name|bool
name|QPlainTextEdit
operator|::
name|backgroundVisible
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|backgroundVisible
return|;
block|}
end_function
begin_function
DECL|function|setBackgroundVisible
name|void
name|QPlainTextEdit
operator|::
name|setBackgroundVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|visible
operator|==
name|d
operator|->
name|backgroundVisible
condition|)
return|return;
name|d
operator|->
name|backgroundVisible
operator|=
name|visible
expr_stmt|;
name|d
operator|->
name|updateViewport
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QPlainTextEdit::centerOnScroll     \brief whether the cursor should be centered on screen      If set to true, the plain text edit scrolls the document     vertically to make the cursor visible at the center of the     viewport. This also allows the text edit to scroll below the end     of the document. Otherwise, if set to false, the plain text edit     scrolls the smallest amount possible to ensure the cursor is     visible.  The same algorithm is applied to any new line appended     through appendPlainText().      The default is false.      \sa centerCursor(), ensureCursorVisible() */
end_comment
begin_function
DECL|function|centerOnScroll
name|bool
name|QPlainTextEdit
operator|::
name|centerOnScroll
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|centerOnScroll
return|;
block|}
end_function
begin_function
DECL|function|setCenterOnScroll
name|void
name|QPlainTextEdit
operator|::
name|setCenterOnScroll
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|enabled
operator|==
name|d
operator|->
name|centerOnScroll
condition|)
return|return;
name|d
operator|->
name|centerOnScroll
operator|=
name|enabled
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Finds the next occurrence of the string, \a exp, using the given     \a options. Returns true if \a exp was found and changes the     cursor to select the match; otherwise returns false. */
end_comment
begin_function
DECL|function|find
name|bool
name|QPlainTextEdit
operator|::
name|find
parameter_list|(
specifier|const
name|QString
modifier|&
name|exp
parameter_list|,
name|QTextDocument
operator|::
name|FindFlags
name|options
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|find
argument_list|(
name|exp
argument_list|,
name|options
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QPlainTextEdit::copyAvailable(bool yes)      This signal is emitted when text is selected or de-selected in the     text edit.      When text is selected this signal will be emitted with \a yes set     to true. If no text has been selected or if the selected text is     de-selected this signal is emitted with \a yes set to false.      If \a yes is true then copy() can be used to copy the selection to     the clipboard. If \a yes is false then copy() does nothing.      \sa selectionChanged() */
end_comment
begin_comment
comment|/*!     \fn void QPlainTextEdit::selectionChanged()      This signal is emitted whenever the selection changes.      \sa copyAvailable() */
end_comment
begin_comment
comment|/*!     \fn void QPlainTextEdit::cursorPositionChanged()      This signal is emitted whenever the position of the     cursor changed. */
end_comment
begin_comment
comment|/*!     \fn void QPlainTextEdit::updateRequest(const QRect&rect, int dy)      This signal is emitted when the text document needs an update of     the specified \a rect. If the text is scrolled, \a rect will cover     the entire viewport area. If the text is scrolled vertically, \a     dy carries the amount of pixels the viewport was scrolled.      The purpose of the signal is to support extra widgets in plain     text edit subclasses that e.g. show line numbers, breakpoints, or     other extra information. */
end_comment
begin_comment
comment|/*!  \fn void QPlainTextEdit::blockCountChanged(int newBlockCount);      This signal is emitted whenever the block count changes. The new     block count is passed in \a newBlockCount. */
end_comment
begin_comment
comment|/*!  \fn void QPlainTextEdit::modificationChanged(bool changed);      This signal is emitted whenever the content of the document     changes in a way that affects the modification state. If \a     changed is true, the document has been modified; otherwise it is     false.      For example, calling setModified(false) on a document and then     inserting text causes the signal to get emitted. If you undo that     operation, causing the document to return to its original     unmodified state, the signal will get emitted again. */
end_comment
begin_function
DECL|function|append
name|void
name|QPlainTextEditPrivate
operator|::
name|append
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|Qt
operator|::
name|TextFormat
name|format
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|QTextDocument
modifier|*
name|document
init|=
name|control
operator|->
name|document
argument_list|()
decl_stmt|;
name|QPlainTextDocumentLayout
modifier|*
name|documentLayout
init|=
name|qobject_cast
argument_list|<
name|QPlainTextDocumentLayout
operator|*
argument_list|>
argument_list|(
name|document
operator|->
name|documentLayout
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|documentLayout
argument_list|)
expr_stmt|;
name|int
name|maximumBlockCount
init|=
name|document
operator|->
name|maximumBlockCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|maximumBlockCount
condition|)
name|document
operator|->
name|setMaximumBlockCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|atBottom
init|=
name|q
operator|->
name|isVisible
argument_list|()
operator|&&
operator|(
name|control
operator|->
name|blockBoundingRect
argument_list|(
name|document
operator|->
name|lastBlock
argument_list|()
argument_list|)
operator|.
name|bottom
argument_list|()
operator|-
name|verticalOffset
argument_list|()
operator|<=
name|viewport
operator|->
name|rect
argument_list|()
operator|.
name|bottom
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|->
name|isVisible
argument_list|()
condition|)
name|showCursorOnInitialShow
operator|=
literal|true
expr_stmt|;
name|bool
name|documentSizeChangedBlocked
init|=
name|documentLayout
operator|->
name|priv
argument_list|()
operator|->
name|blockDocumentSizeChanged
decl_stmt|;
name|documentLayout
operator|->
name|priv
argument_list|()
operator|->
name|blockDocumentSizeChanged
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|format
operator|==
name|Qt
operator|::
name|RichText
condition|)
name|control
operator|->
name|appendHtml
argument_list|(
name|text
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|format
operator|==
name|Qt
operator|::
name|PlainText
condition|)
name|control
operator|->
name|appendPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
else|else
name|control
operator|->
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|maximumBlockCount
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|document
operator|->
name|blockCount
argument_list|()
operator|>
name|maximumBlockCount
condition|)
block|{
name|bool
name|blockUpdate
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|control
operator|->
name|topBlock
condition|)
block|{
name|control
operator|->
name|topBlock
operator|--
expr_stmt|;
name|blockUpdate
operator|=
literal|true
expr_stmt|;
emit|emit
name|q
operator|->
name|updateRequest
argument_list|(
name|viewport
operator|->
name|rect
argument_list|()
argument_list|,
literal|0
argument_list|)
emit|;
block|}
name|bool
name|updatesBlocked
init|=
name|documentLayout
operator|->
name|priv
argument_list|()
operator|->
name|blockUpdate
decl_stmt|;
name|documentLayout
operator|->
name|priv
argument_list|()
operator|->
name|blockUpdate
operator|=
name|blockUpdate
expr_stmt|;
name|QTextCursor
name|cursor
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|NextBlock
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|removeSelectedText
argument_list|()
expr_stmt|;
name|documentLayout
operator|->
name|priv
argument_list|()
operator|->
name|blockUpdate
operator|=
name|updatesBlocked
expr_stmt|;
block|}
name|document
operator|->
name|setMaximumBlockCount
argument_list|(
name|maximumBlockCount
argument_list|)
expr_stmt|;
block|}
name|documentLayout
operator|->
name|priv
argument_list|()
operator|->
name|blockDocumentSizeChanged
operator|=
name|documentSizeChangedBlocked
expr_stmt|;
name|_q_adjustScrollbars
argument_list|()
expr_stmt|;
if|if
condition|(
name|atBottom
condition|)
block|{
specifier|const
name|bool
name|needScroll
init|=
operator|!
name|centerOnScroll
operator|||
name|control
operator|->
name|blockBoundingRect
argument_list|(
name|document
operator|->
name|lastBlock
argument_list|()
argument_list|)
operator|.
name|bottom
argument_list|()
operator|-
name|verticalOffset
argument_list|()
operator|>
name|viewport
operator|->
name|rect
argument_list|()
operator|.
name|bottom
argument_list|()
decl_stmt|;
if|if
condition|(
name|needScroll
condition|)
name|vbar
operator|->
name|setValue
argument_list|(
name|vbar
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Appends a new paragraph with \a text to the end of the text edit.      \sa appendHtml() */
end_comment
begin_function
DECL|function|appendPlainText
name|void
name|QPlainTextEdit
operator|::
name|appendPlainText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|append
argument_list|(
name|text
argument_list|,
name|Qt
operator|::
name|PlainText
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Appends a new paragraph with \a html to the end of the text edit.      appendPlainText() */
end_comment
begin_function
DECL|function|appendHtml
name|void
name|QPlainTextEdit
operator|::
name|appendHtml
parameter_list|(
specifier|const
name|QString
modifier|&
name|html
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|append
argument_list|(
name|html
argument_list|,
name|Qt
operator|::
name|RichText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ensureCursorVisible
name|void
name|QPlainTextEditPrivate
operator|::
name|ensureCursorVisible
parameter_list|(
name|bool
name|center
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|QRect
name|visible
init|=
name|viewport
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QRect
name|cr
init|=
name|q
operator|->
name|cursorRect
argument_list|()
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|top
argument_list|()
operator|<
name|visible
operator|.
name|top
argument_list|()
operator|||
name|cr
operator|.
name|bottom
argument_list|()
operator|>
name|visible
operator|.
name|bottom
argument_list|()
condition|)
block|{
name|ensureVisible
argument_list|(
name|control
operator|->
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
name|center
argument_list|)
expr_stmt|;
block|}
specifier|const
name|bool
name|rtl
init|=
name|q
operator|->
name|isRightToLeft
argument_list|()
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|left
argument_list|()
operator|<
name|visible
operator|.
name|left
argument_list|()
operator|||
name|cr
operator|.
name|right
argument_list|()
operator|>
name|visible
operator|.
name|right
argument_list|()
condition|)
block|{
name|int
name|x
init|=
name|cr
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
operator|+
name|horizontalOffset
argument_list|()
operator|-
name|visible
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|hbar
operator|->
name|setValue
argument_list|(
name|rtl
condition|?
name|hbar
operator|->
name|maximum
argument_list|()
operator|-
name|x
else|:
name|x
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Ensures that the cursor is visible by scrolling the text edit if     necessary.      \sa centerCursor(), centerOnScroll */
end_comment
begin_function
DECL|function|ensureCursorVisible
name|void
name|QPlainTextEdit
operator|::
name|ensureCursorVisible
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureCursorVisible
argument_list|(
name|d
operator|->
name|centerOnScroll
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!  Scrolls the document in order to center the cursor vertically.  \sa ensureCursorVisible(), centerOnScroll  */
end_comment
begin_function
DECL|function|centerCursor
name|void
name|QPlainTextEdit
operator|::
name|centerCursor
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|d
operator|->
name|ensureVisible
argument_list|(
name|textCursor
argument_list|()
operator|.
name|position
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   Returns the first visible block.    \sa blockBoundingRect()  */
end_comment
begin_function
DECL|function|firstVisibleBlock
name|QTextBlock
name|QPlainTextEdit
operator|::
name|firstVisibleBlock
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|firstVisibleBlock
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!  Returns the content's origin in viewport coordinates.       The origin of the content of a plain text edit is always the top      left corner of the first visible text block. The content offset      is different from (0,0) when the text has been scrolled      horizontally, or when the first visible block has been scrolled      partially off the screen, i.e. the visible text does not start      with the first line of the first visible block, or when the first      visible block is the very first block and the editor displays a      margin.       \sa firstVisibleBlock(), horizontalScrollBar(), verticalScrollBar()  */
end_comment
begin_function
DECL|function|contentOffset
name|QPointF
name|QPlainTextEdit
operator|::
name|contentOffset
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|QPointF
argument_list|(
operator|-
name|d
operator|->
name|horizontalOffset
argument_list|()
argument_list|,
operator|-
name|d
operator|->
name|verticalOffset
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!  Returns the bounding rectangle of the text \a block in content   coordinates. Translate the rectangle with the contentOffset() to get   visual coordinates on the viewport.    \sa firstVisibleBlock(), blockBoundingRect()  */
end_comment
begin_function
DECL|function|blockBoundingGeometry
name|QRectF
name|QPlainTextEdit
operator|::
name|blockBoundingGeometry
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the bounding rectangle of the text \a block in the block's own coordinates.    \sa blockBoundingGeometry()  */
end_comment
begin_function
DECL|function|blockBoundingRect
name|QRectF
name|QPlainTextEdit
operator|::
name|blockBoundingRect
parameter_list|(
specifier|const
name|QTextBlock
modifier|&
name|block
parameter_list|)
specifier|const
block|{
name|QPlainTextDocumentLayout
modifier|*
name|documentLayout
init|=
name|qobject_cast
argument_list|<
name|QPlainTextDocumentLayout
operator|*
argument_list|>
argument_list|(
name|document
argument_list|()
operator|->
name|documentLayout
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|documentLayout
argument_list|)
expr_stmt|;
return|return
name|documentLayout
operator|->
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QPlainTextEdit::blockCount     \brief the number of text blocks in the document.      By default, in an empty document, this property contains a value of 1. */
end_comment
begin_function
DECL|function|blockCount
name|int
name|QPlainTextEdit
operator|::
name|blockCount
parameter_list|()
specifier|const
block|{
return|return
name|document
argument_list|()
operator|->
name|blockCount
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!  Returns the paint context for the viewport(), useful only when   reimplementing paintEvent().  */
end_comment
begin_function
DECL|function|getPaintContext
name|QAbstractTextDocumentLayout
operator|::
name|PaintContext
name|QPlainTextEdit
operator|::
name|getPaintContext
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QPlainTextEdit
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|control
operator|->
name|getPaintContext
argument_list|(
name|d
operator|->
name|viewport
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \property QPlainTextEdit::maximumBlockCount     \brief the limit for blocks in the document.      Specifies the maximum number of blocks the document may have. If there are     more blocks in the document that specified with this property blocks are removed     from the beginning of the document.      A negative or zero value specifies that the document may contain an unlimited     amount of blocks.      The default value is 0.      Note that setting this property will apply the limit immediately to the document     contents. Setting this property also disables the undo redo history.  */
end_comment
begin_comment
comment|/*!     \fn void QPlainTextEdit::textChanged()      This signal is emitted whenever the document's content changes; for     example, when text is inserted or deleted, or when formatting is applied. */
end_comment
begin_comment
comment|/*!     \fn void QPlainTextEdit::undoAvailable(bool available)      This signal is emitted whenever undo operations become available     (\a available is true) or unavailable (\a available is false). */
end_comment
begin_comment
comment|/*!     \fn void QPlainTextEdit::redoAvailable(bool available)      This signal is emitted whenever redo operations become available     (\a available is true) or unavailable (\a available is false). */
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|"moc_qplaintextedit.cpp"
end_include
begin_include
include|#
directive|include
file|"moc_qplaintextedit_p.cpp"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTEDIT
end_comment
end_unit
