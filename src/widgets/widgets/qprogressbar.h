begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QPROGRESSBAR_H
end_ifndef
begin_define
DECL|macro|QPROGRESSBAR_H
define|#
directive|define
name|QPROGRESSBAR_H
end_define
begin_include
include|#
directive|include
file|<QtWidgets/qframe.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_PROGRESSBAR
DECL|variable|QProgressBarPrivate
name|class
name|QProgressBarPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QStyleOptionProgressBar
name|class
name|QStyleOptionProgressBar
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QProgressBar
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|int minimum READ minimum WRITE setMinimum
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int maximum READ maximum WRITE setMaximum
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString text READ text
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int value READ value WRITE setValue NOTIFY valueChanged
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::Alignment alignment READ alignment WRITE setAlignment
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool textVisible READ isTextVisible WRITE setTextVisible
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::Orientation orientation READ orientation WRITE setOrientation
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool invertedAppearance READ invertedAppearance WRITE setInvertedAppearance
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Direction textDirection READ textDirection WRITE setTextDirection
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString format READ format WRITE setFormat RESET resetFormat
argument_list|)
name|public
operator|:
expr|enum
name|Direction
block|{
name|TopToBottom
block|,
name|BottomToTop
block|}
block|;
name|Q_ENUM
argument_list|(
argument|Direction
argument_list|)
name|explicit
name|QProgressBar
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
name|Q_NULLPTR
argument_list|)
block|;
operator|~
name|QProgressBar
argument_list|()
block|;
name|int
name|minimum
argument_list|()
specifier|const
block|;
name|int
name|maximum
argument_list|()
specifier|const
block|;
name|int
name|value
argument_list|()
specifier|const
block|;
name|virtual
name|QString
name|text
argument_list|()
specifier|const
block|;
name|void
name|setTextVisible
argument_list|(
argument|bool visible
argument_list|)
block|;
name|bool
name|isTextVisible
argument_list|()
specifier|const
block|;
name|Qt
operator|::
name|Alignment
name|alignment
argument_list|()
specifier|const
block|;
name|void
name|setAlignment
argument_list|(
argument|Qt::Alignment alignment
argument_list|)
block|;
name|QSize
name|sizeHint
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|QSize
name|minimumSizeHint
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|Qt
operator|::
name|Orientation
name|orientation
argument_list|()
specifier|const
block|;
name|void
name|setInvertedAppearance
argument_list|(
argument|bool invert
argument_list|)
block|;
name|bool
name|invertedAppearance
argument_list|()
specifier|const
block|;
name|void
name|setTextDirection
argument_list|(
argument|QProgressBar::Direction textDirection
argument_list|)
block|;
name|QProgressBar
operator|::
name|Direction
name|textDirection
argument_list|()
specifier|const
block|;
name|void
name|setFormat
argument_list|(
specifier|const
name|QString
operator|&
name|format
argument_list|)
block|;
name|void
name|resetFormat
argument_list|()
block|;
name|QString
name|format
argument_list|()
specifier|const
block|;
name|public
name|Q_SLOTS
operator|:
name|void
name|reset
argument_list|()
block|;
name|void
name|setRange
argument_list|(
argument|int minimum
argument_list|,
argument|int maximum
argument_list|)
block|;
name|void
name|setMinimum
argument_list|(
argument|int minimum
argument_list|)
block|;
name|void
name|setMaximum
argument_list|(
argument|int maximum
argument_list|)
block|;
name|void
name|setValue
argument_list|(
argument|int value
argument_list|)
block|;
name|void
name|setOrientation
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|)
block|;
name|Q_SIGNALS
operator|:
name|void
name|valueChanged
argument_list|(
argument|int value
argument_list|)
block|;
name|protected
operator|:
name|bool
name|event
argument_list|(
argument|QEvent *e
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|paintEvent
argument_list|(
argument|QPaintEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|initStyleOption
argument_list|(
argument|QStyleOptionProgressBar *option
argument_list|)
specifier|const
block|;
name|private
operator|:
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QProgressBar
argument_list|)
name|Q_DISABLE_COPY
argument_list|(
argument|QProgressBar
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PROGRESSBAR
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QPROGRESSBAR_H
end_comment
end_unit
