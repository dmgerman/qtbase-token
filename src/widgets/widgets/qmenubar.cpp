begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qmenubar.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qlayout.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
end_ifndef
begin_include
include|#
directive|include
file|<qaccessible.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qstylepainter.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qmainwindow.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbar.h>
end_include
begin_include
include|#
directive|include
file|<qtoolbutton.h>
end_include
begin_include
include|#
directive|include
file|<qwhatsthis.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
end_ifndef
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_include
include|#
directive|include
file|<private/qaction_p.h>
end_include
begin_include
include|#
directive|include
file|<qmenudata.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"qmenu_p.h"
end_include
begin_include
include|#
directive|include
file|"qmenubar_p.h"
end_include
begin_include
include|#
directive|include
file|"qdebug.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE
end_ifdef
begin_function_decl
specifier|extern
name|bool
name|qt_wince_is_mobile
parameter_list|()
function_decl|;
end_function_decl
begin_comment
comment|//defined in qguifunctions_wce.cpp
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
end_ifdef
begin_include
include|#
directive|include
file|<private/qsoftkeymanager_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QMenuBarExtension
class|class
name|QMenuBarExtension
super|:
specifier|public
name|QToolButton
block|{
public|public:
specifier|explicit
name|QMenuBarExtension
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
constructor_decl|;
name|QSize
name|sizeHint
parameter_list|()
specifier|const
function_decl|;
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|QMenuBarExtension
name|QMenuBarExtension
operator|::
name|QMenuBarExtension
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QToolButton
argument_list|(
name|parent
argument_list|)
block|{
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"qt_menubar_ext_button"
argument_list|)
argument_list|)
expr_stmt|;
name|setAutoRaise
argument_list|(
literal|true
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_MENU
name|setPopupMode
argument_list|(
name|QToolButton
operator|::
name|InstantPopup
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|setIcon
argument_list|(
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|SP_ToolBarHorizontalExtensionButton
argument_list|,
literal|0
argument_list|,
name|parentWidget
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|paintEvent
name|void
name|QMenuBarExtension
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QStylePainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QStyleOptionToolButton
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|)
expr_stmt|;
comment|// We do not need to draw both extension arrows
name|opt
operator|.
name|features
operator|&=
operator|~
name|QStyleOptionToolButton
operator|::
name|HasMenu
expr_stmt|;
name|p
operator|.
name|drawComplexControl
argument_list|(
name|QStyle
operator|::
name|CC_ToolButton
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSize
name|QMenuBarExtension
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|int
name|ext
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_ToolBarExtensionExtent
argument_list|,
literal|0
argument_list|,
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|QSize
argument_list|(
name|ext
argument_list|,
name|ext
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|actionAt
name|QAction
modifier|*
name|QMenuBarPrivate
operator|::
name|actionAt
parameter_list|(
name|QPoint
name|p
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|actionRect
argument_list|(
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
return|return
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|menuRect
name|QRect
name|QMenuBarPrivate
operator|::
name|menuRect
parameter_list|(
name|bool
name|extVisible
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMenuBar
argument_list|)
expr_stmt|;
name|int
name|hmargin
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarPanelWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|QRect
name|result
init|=
name|q
operator|->
name|rect
argument_list|()
decl_stmt|;
name|result
operator|.
name|adjust
argument_list|(
name|hmargin
argument_list|,
literal|0
argument_list|,
operator|-
name|hmargin
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|extVisible
condition|)
block|{
if|if
condition|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|)
name|result
operator|.
name|setLeft
argument_list|(
name|result
operator|.
name|left
argument_list|()
operator|+
name|extension
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|result
operator|.
name|setWidth
argument_list|(
name|result
operator|.
name|width
argument_list|()
operator|-
name|extension
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|leftWidget
operator|&&
name|leftWidget
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|QSize
name|sz
init|=
name|leftWidget
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|)
name|result
operator|.
name|setRight
argument_list|(
name|result
operator|.
name|right
argument_list|()
operator|-
name|sz
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|result
operator|.
name|setLeft
argument_list|(
name|result
operator|.
name|left
argument_list|()
operator|+
name|sz
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rightWidget
operator|&&
name|rightWidget
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|QSize
name|sz
init|=
name|rightWidget
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|)
name|result
operator|.
name|setLeft
argument_list|(
name|result
operator|.
name|left
argument_list|()
operator|+
name|sz
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|result
operator|.
name|setRight
argument_list|(
name|result
operator|.
name|right
argument_list|()
operator|-
name|sz
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|isVisible
name|bool
name|QMenuBarPrivate
operator|::
name|isVisible
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
return|return
operator|!
name|hiddenActions
operator|.
name|contains
argument_list|(
name|action
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|updateGeometries
name|void
name|QMenuBarPrivate
operator|::
name|updateGeometries
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|itemsDirty
condition|)
return|return;
name|int
name|q_width
init|=
name|q
operator|->
name|width
argument_list|()
operator|-
operator|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarPanelWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|*
literal|2
operator|)
decl_stmt|;
name|int
name|q_start
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|leftWidget
operator|||
name|rightWidget
condition|)
block|{
name|int
name|vmargin
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarVMargin
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|+
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarPanelWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|int
name|hmargin
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarHMargin
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
operator|+
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarPanelWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftWidget
operator|&&
name|leftWidget
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|QSize
name|sz
init|=
name|leftWidget
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|q_width
operator|-=
name|sz
operator|.
name|width
argument_list|()
expr_stmt|;
name|q_start
operator|=
name|sz
operator|.
name|width
argument_list|()
expr_stmt|;
name|QPoint
name|pos
argument_list|(
name|hmargin
argument_list|,
operator|(
name|q
operator|->
name|height
argument_list|()
operator|-
name|leftWidget
operator|->
name|height
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
decl_stmt|;
name|QRect
name|vRect
init|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|q
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|q
operator|->
name|rect
argument_list|()
argument_list|,
name|QRect
argument_list|(
name|pos
argument_list|,
name|sz
argument_list|)
argument_list|)
decl_stmt|;
name|leftWidget
operator|->
name|setGeometry
argument_list|(
name|vRect
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rightWidget
operator|&&
name|rightWidget
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|QSize
name|sz
init|=
name|rightWidget
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|q_width
operator|-=
name|sz
operator|.
name|width
argument_list|()
expr_stmt|;
name|QPoint
name|pos
argument_list|(
name|q
operator|->
name|width
argument_list|()
operator|-
name|sz
operator|.
name|width
argument_list|()
operator|-
name|hmargin
argument_list|,
name|vmargin
argument_list|)
decl_stmt|;
name|QRect
name|vRect
init|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|q
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|q
operator|->
name|rect
argument_list|()
argument_list|,
name|QRect
argument_list|(
name|pos
argument_list|,
name|sz
argument_list|)
argument_list|)
decl_stmt|;
name|rightWidget
operator|->
name|setGeometry
argument_list|(
name|vRect
argument_list|)
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|Q_OS_MAC
if|if
condition|(
name|q
operator|->
name|isNativeMenuBar
argument_list|()
condition|)
block|{
comment|//nothing to see here folks, move along..
name|itemsDirty
operator|=
literal|false
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|calcActionRects
argument_list|(
name|q_width
argument_list|,
name|q_start
argument_list|)
expr_stmt|;
name|currentAction
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
if|if
condition|(
name|itemsDirty
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|shortcutIndexMap
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
name|q
operator|->
name|releaseShortcut
argument_list|(
name|shortcutIndexMap
operator|.
name|value
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|shortcutIndexMap
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// faster than clear
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|shortcutIndexMap
operator|.
name|append
argument_list|(
name|q
operator|->
name|grabShortcut
argument_list|(
name|QKeySequence
operator|::
name|mnemonic
argument_list|(
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|text
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|itemsDirty
operator|=
literal|false
expr_stmt|;
name|hiddenActions
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//this is the menu rectangle without any extension
name|QRect
name|menuRect
init|=
name|this
operator|->
name|menuRect
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|//we try to see if the actions will fit there
name|bool
name|hasHiddenActions
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
modifier|&
name|rect
init|=
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|menuRect
operator|.
name|contains
argument_list|(
name|rect
argument_list|)
condition|)
block|{
name|hasHiddenActions
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
comment|//...and if not, determine the ones that fit on the menu with the extension visible
if|if
condition|(
name|hasHiddenActions
condition|)
block|{
name|menuRect
operator|=
name|this
operator|->
name|menuRect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
modifier|&
name|rect
init|=
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|menuRect
operator|.
name|contains
argument_list|(
name|rect
argument_list|)
condition|)
block|{
name|hiddenActions
operator|.
name|append
argument_list|(
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|hiddenActions
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QMenu
modifier|*
name|pop
init|=
name|extension
operator|->
name|menu
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pop
condition|)
block|{
name|pop
operator|=
operator|new
name|QMenu
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|extension
operator|->
name|setMenu
argument_list|(
name|pop
argument_list|)
expr_stmt|;
block|}
name|pop
operator|->
name|clear
argument_list|()
expr_stmt|;
name|pop
operator|->
name|addActions
argument_list|(
name|hiddenActions
argument_list|)
expr_stmt|;
name|int
name|vmargin
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarVMargin
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|q
operator|->
name|isRightToLeft
argument_list|()
condition|?
name|menuRect
operator|.
name|left
argument_list|()
operator|-
name|extension
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|+
literal|1
else|:
name|menuRect
operator|.
name|right
argument_list|()
decl_stmt|;
name|extension
operator|->
name|setGeometry
argument_list|(
name|x
argument_list|,
name|vmargin
argument_list|,
name|extension
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|menuRect
operator|.
name|height
argument_list|()
operator|-
name|vmargin
operator|*
literal|2
argument_list|)
expr_stmt|;
name|extension
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|extension
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
name|q
operator|->
name|updateGeometry
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
if|if
condition|(
name|parent
condition|)
block|{
name|QMenubarUpdatedEvent
name|menubarUpdated
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|parent
argument_list|,
operator|&
name|menubarUpdated
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|actionRect
name|QRect
name|QMenuBarPrivate
operator|::
name|actionRect
parameter_list|(
name|QAction
modifier|*
name|act
parameter_list|)
specifier|const
block|{
specifier|const
name|int
name|index
init|=
name|actions
operator|.
name|indexOf
argument_list|(
name|act
argument_list|)
decl_stmt|;
comment|//makes sure the geometries are up-to-date
cast|const_cast
argument_list|<
name|QMenuBarPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|updateGeometries
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|actionRects
operator|.
name|count
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
comment|// that can happen in case of native menubar
return|return
name|actionRects
operator|.
name|at
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|focusFirstAction
name|void
name|QMenuBarPrivate
operator|::
name|focusFirstAction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|currentAction
condition|)
block|{
name|updateGeometries
argument_list|()
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|actions
operator|.
name|count
argument_list|()
operator|&&
name|actionRects
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
operator|++
name|index
expr_stmt|;
if|if
condition|(
name|index
operator|<
name|actions
operator|.
name|count
argument_list|()
condition|)
name|setCurrentAction
argument_list|(
name|actions
operator|.
name|at
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setKeyboardMode
name|void
name|QMenuBarPrivate
operator|::
name|setKeyboardMode
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|&&
operator|!
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MenuBar_AltKeyNavigation
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
condition|)
block|{
name|setCurrentAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
name|keyboardState
operator|=
name|b
expr_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|QWidget
modifier|*
name|fw
init|=
name|QApplication
operator|::
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
name|fw
operator|!=
name|q
condition|)
name|keyboardFocusWidget
operator|=
name|fw
expr_stmt|;
name|focusFirstAction
argument_list|()
expr_stmt|;
name|q
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|MenuBarFocusReason
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|popupState
condition|)
name|setCurrentAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyboardFocusWidget
condition|)
block|{
if|if
condition|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
operator|==
name|q
condition|)
name|keyboardFocusWidget
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|MenuBarFocusReason
argument_list|)
expr_stmt|;
name|keyboardFocusWidget
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|popupAction
name|void
name|QMenuBarPrivate
operator|::
name|popupAction
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|,
name|bool
name|activateFirst
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|action
operator|||
operator|!
name|action
operator|->
name|menu
argument_list|()
operator|||
name|closePopupMode
condition|)
return|return;
name|popupState
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|action
operator|->
name|isEnabled
argument_list|()
operator|&&
name|action
operator|->
name|menu
argument_list|()
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|closePopupMode
operator|=
literal|0
expr_stmt|;
name|activeMenu
operator|=
name|action
operator|->
name|menu
argument_list|()
expr_stmt|;
name|activeMenu
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|widget
operator|=
name|q
expr_stmt|;
name|activeMenu
operator|->
name|d_func
argument_list|()
operator|->
name|causedPopup
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|QRect
name|adjustedActionRect
init|=
name|actionRect
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|QPoint
name|pos
argument_list|(
name|q
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
name|adjustedActionRect
operator|.
name|left
argument_list|()
argument_list|,
name|adjustedActionRect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSize
name|popup_size
init|=
name|activeMenu
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
comment|//we put the popup menu on the screen containing the bottom-center of the action rect
name|QRect
name|screenRect
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|pos
operator|+
name|QPoint
argument_list|(
name|adjustedActionRect
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|pos
operator|=
name|QPoint
argument_list|(
name|qMax
argument_list|(
name|pos
operator|.
name|x
argument_list|()
argument_list|,
name|screenRect
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
name|pos
operator|.
name|y
argument_list|()
argument_list|,
name|screenRect
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|fitUp
init|=
operator|(
name|q
operator|->
name|mapToGlobal
argument_list|(
name|adjustedActionRect
operator|.
name|topLeft
argument_list|()
argument_list|)
operator|.
name|y
argument_list|()
operator|>=
name|popup_size
operator|.
name|height
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|bool
name|fitDown
init|=
operator|(
name|pos
operator|.
name|y
argument_list|()
operator|+
name|popup_size
operator|.
name|height
argument_list|()
operator|<=
name|screenRect
operator|.
name|bottom
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|bool
name|rtl
init|=
name|q
operator|->
name|isRightToLeft
argument_list|()
decl_stmt|;
specifier|const
name|int
name|actionWidth
init|=
name|adjustedActionRect
operator|.
name|width
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fitUp
operator|&&
operator|!
name|fitDown
condition|)
block|{
comment|//we should shift the menu
name|bool
name|shouldShiftToRight
init|=
operator|!
name|rtl
decl_stmt|;
if|if
condition|(
name|rtl
operator|&&
name|popup_size
operator|.
name|width
argument_list|()
operator|>
name|pos
operator|.
name|x
argument_list|()
condition|)
name|shouldShiftToRight
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|actionWidth
operator|+
name|popup_size
operator|.
name|width
argument_list|()
operator|+
name|pos
operator|.
name|x
argument_list|()
operator|>
name|screenRect
operator|.
name|right
argument_list|()
condition|)
name|shouldShiftToRight
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|shouldShiftToRight
condition|)
block|{
name|pos
operator|.
name|rx
argument_list|()
operator|+=
name|actionWidth
operator|+
operator|(
name|rtl
condition|?
name|popup_size
operator|.
name|width
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
block|}
else|else
block|{
comment|//shift to left
if|if
condition|(
operator|!
name|rtl
condition|)
name|pos
operator|.
name|rx
argument_list|()
operator|-=
name|popup_size
operator|.
name|width
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rtl
condition|)
block|{
name|pos
operator|.
name|rx
argument_list|()
operator|+=
name|actionWidth
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|defaultPopDown
operator|||
operator|(
name|fitUp
operator|&&
operator|!
name|fitDown
operator|)
condition|)
name|pos
operator|.
name|setY
argument_list|(
name|qMax
argument_list|(
name|screenRect
operator|.
name|y
argument_list|()
argument_list|,
name|q
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
name|adjustedActionRect
operator|.
name|top
argument_list|()
operator|-
name|popup_size
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|activeMenu
operator|->
name|popup
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|activateFirst
condition|)
name|activeMenu
operator|->
name|d_func
argument_list|()
operator|->
name|setFirstActionActive
argument_list|()
expr_stmt|;
block|}
name|q
operator|->
name|update
argument_list|(
name|actionRect
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCurrentAction
name|void
name|QMenuBarPrivate
operator|::
name|setCurrentAction
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|,
name|bool
name|popup
parameter_list|,
name|bool
name|activateFirst
parameter_list|)
block|{
if|if
condition|(
name|currentAction
operator|==
name|action
operator|&&
name|popup
operator|==
name|popupState
condition|)
return|return;
name|autoReleaseTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|doChildEffects
operator|=
operator|(
name|popup
operator|&&
operator|!
name|activeMenu
operator|)
expr_stmt|;
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|fw
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|QMenu
modifier|*
name|menu
init|=
name|activeMenu
condition|)
block|{
name|activeMenu
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|popup
condition|)
block|{
name|fw
operator|=
name|q
operator|->
name|window
argument_list|()
operator|->
name|focusWidget
argument_list|()
expr_stmt|;
name|q
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|NoFocusReason
argument_list|)
expr_stmt|;
block|}
name|menu
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentAction
condition|)
name|q
operator|->
name|update
argument_list|(
name|actionRect
argument_list|(
name|currentAction
argument_list|)
argument_list|)
expr_stmt|;
name|popupState
operator|=
name|popup
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_STATUSTIP
name|QAction
modifier|*
name|previousAction
init|=
name|currentAction
decl_stmt|;
endif|#
directive|endif
name|currentAction
operator|=
name|action
expr_stmt|;
if|if
condition|(
name|action
condition|)
block|{
name|activateAction
argument_list|(
name|action
argument_list|,
name|QAction
operator|::
name|Hover
argument_list|)
expr_stmt|;
if|if
condition|(
name|popup
condition|)
name|popupAction
argument_list|(
name|action
argument_list|,
name|activateFirst
argument_list|)
expr_stmt|;
name|q
operator|->
name|update
argument_list|(
name|actionRect
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_STATUSTIP
block|}
elseif|else
if|if
condition|(
name|previousAction
condition|)
block|{
name|QString
name|empty
decl_stmt|;
name|QStatusTipEvent
name|tip
argument_list|(
name|empty
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|q
argument_list|,
operator|&
name|tip
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
name|fw
condition|)
name|fw
operator|->
name|setFocus
argument_list|(
name|Qt
operator|::
name|NoFocusReason
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|calcActionRects
name|void
name|QMenuBarPrivate
operator|::
name|calcActionRects
parameter_list|(
name|int
name|max_width
parameter_list|,
name|int
name|start
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|itemsDirty
condition|)
return|return;
comment|//let's reinitialize the buffer
name|actionRects
operator|.
name|resize
argument_list|(
name|actions
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|actionRects
operator|.
name|fill
argument_list|(
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QStyle
modifier|*
name|style
init|=
name|q
operator|->
name|style
argument_list|()
decl_stmt|;
specifier|const
name|int
name|itemSpacing
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarItemSpacing
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|int
name|max_item_height
init|=
literal|0
decl_stmt|,
name|separator
init|=
operator|-
literal|1
decl_stmt|,
name|separator_start
init|=
literal|0
decl_stmt|,
name|separator_len
init|=
literal|0
decl_stmt|;
comment|//calculate size
specifier|const
name|QFontMetrics
name|fm
init|=
name|q
operator|->
name|fontMetrics
argument_list|()
decl_stmt|;
specifier|const
name|int
name|hmargin
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarHMargin
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|,
name|vmargin
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarVMargin
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|,
name|icone
init|=
name|style
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SmallIconSize
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QAction
modifier|*
name|action
init|=
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|action
operator|->
name|isVisible
argument_list|()
condition|)
continue|continue;
name|QSize
name|sz
decl_stmt|;
comment|//calc what I think the size is..
if|if
condition|(
name|action
operator|->
name|isSeparator
argument_list|()
condition|)
block|{
if|if
condition|(
name|style
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_DrawMenuBarSeparator
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
condition|)
name|separator
operator|=
name|i
expr_stmt|;
continue|continue;
comment|//we don't really position these!
block|}
else|else
block|{
specifier|const
name|QString
name|s
init|=
name|action
operator|->
name|text
argument_list|()
decl_stmt|;
name|QIcon
name|is
init|=
name|action
operator|->
name|icon
argument_list|()
decl_stmt|;
comment|// If an icon is set, only the icon is visible
if|if
condition|(
operator|!
name|is
operator|.
name|isNull
argument_list|()
condition|)
name|sz
operator|=
name|sz
operator|.
name|expandedTo
argument_list|(
name|QSize
argument_list|(
name|icone
argument_list|,
name|icone
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
name|sz
operator|=
name|fm
operator|.
name|size
argument_list|(
name|Qt
operator|::
name|TextShowMnemonic
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|//let the style modify the above size..
name|QStyleOptionMenuItem
name|opt
decl_stmt|;
name|q
operator|->
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|sz
operator|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_MenuBarItem
argument_list|,
operator|&
name|opt
argument_list|,
name|sz
argument_list|,
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sz
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
block|{
comment|//update the separator state
name|int
name|iWidth
init|=
name|sz
operator|.
name|width
argument_list|()
operator|+
name|itemSpacing
decl_stmt|;
if|if
condition|(
name|separator
operator|==
operator|-
literal|1
condition|)
name|separator_start
operator|+=
name|iWidth
expr_stmt|;
else|else
name|separator_len
operator|+=
name|iWidth
expr_stmt|;
block|}
comment|//maximum height
name|max_item_height
operator|=
name|qMax
argument_list|(
name|max_item_height
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|//append
name|actionRects
index|[
name|i
index|]
operator|=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sz
operator|.
name|width
argument_list|()
argument_list|,
name|sz
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//calculate position
specifier|const
name|int
name|fw
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarPanelWidth
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|fw
operator|+
operator|(
operator|(
name|start
operator|==
operator|-
literal|1
operator|)
condition|?
name|hmargin
else|:
name|start
operator|)
operator|+
name|itemSpacing
decl_stmt|;
name|int
name|y
init|=
name|fw
operator|+
name|vmargin
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QRect
modifier|&
name|rect
init|=
name|actionRects
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
comment|//resize
name|rect
operator|.
name|setHeight
argument_list|(
name|max_item_height
argument_list|)
expr_stmt|;
comment|//move
if|if
condition|(
name|separator
operator|!=
operator|-
literal|1
operator|&&
name|i
operator|>=
name|separator
condition|)
block|{
comment|//after the separator
name|int
name|left
init|=
operator|(
name|max_width
operator|-
name|separator_len
operator|-
name|hmargin
operator|-
name|itemSpacing
operator|)
operator|+
operator|(
name|x
operator|-
name|separator_start
operator|-
name|hmargin
operator|)
decl_stmt|;
if|if
condition|(
name|left
operator|<
name|separator_start
condition|)
block|{
comment|//wrap
name|separator_start
operator|=
name|x
operator|=
name|hmargin
expr_stmt|;
name|y
operator|+=
name|max_item_height
expr_stmt|;
block|}
name|rect
operator|.
name|moveLeft
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rect
operator|.
name|moveLeft
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
name|rect
operator|.
name|moveTop
argument_list|(
name|y
argument_list|)
expr_stmt|;
comment|//keep moving along..
name|x
operator|+=
name|rect
operator|.
name|width
argument_list|()
operator|+
name|itemSpacing
expr_stmt|;
comment|//make sure we follow the layout direction
name|rect
operator|=
name|QStyle
operator|::
name|visualRect
argument_list|(
name|q
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|q
operator|->
name|rect
argument_list|()
argument_list|,
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|activateAction
name|void
name|QMenuBarPrivate
operator|::
name|activateAction
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|,
name|QAction
operator|::
name|ActionEvent
name|action_e
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|action
operator|||
operator|!
name|action
operator|->
name|isEnabled
argument_list|()
condition|)
return|return;
name|action
operator|->
name|activate
argument_list|(
name|action_e
argument_list|)
expr_stmt|;
if|if
condition|(
name|action_e
operator|==
name|QAction
operator|::
name|Hover
condition|)
name|action
operator|->
name|showStatusText
argument_list|(
name|q
argument_list|)
expr_stmt|;
comment|//     if(action_e == QAction::Trigger)
comment|//         emit q->activated(action);
comment|//     else if(action_e == QAction::Hover)
comment|//         emit q->highlighted(action);
block|}
end_function
begin_function
DECL|function|_q_actionTriggered
name|void
name|QMenuBarPrivate
operator|::
name|_q_actionTriggered
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAction
modifier|*
name|action
init|=
name|qobject_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|sender
argument_list|()
argument_list|)
condition|)
block|{
emit|emit
name|q
operator|->
name|triggered
argument_list|(
name|action
argument_list|)
emit|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
emit|emit
name|q
operator|->
name|activated
argument_list|(
name|q
operator|->
name|findIdForAction
argument_list|(
name|action
argument_list|)
argument_list|)
emit|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|_q_actionHovered
name|void
name|QMenuBarPrivate
operator|::
name|_q_actionHovered
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAction
modifier|*
name|action
init|=
name|qobject_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|q
operator|->
name|sender
argument_list|()
argument_list|)
condition|)
block|{
emit|emit
name|q
operator|->
name|hovered
argument_list|(
name|action
argument_list|)
emit|;
ifndef|#
directive|ifndef
name|QT_NO_ACCESSIBILITY
if|if
condition|(
name|QAccessible
operator|::
name|isActive
argument_list|()
condition|)
block|{
name|int
name|actionIndex
init|=
name|actions
operator|.
name|indexOf
argument_list|(
name|action
argument_list|)
decl_stmt|;
operator|++
name|actionIndex
expr_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
name|q
argument_list|,
name|actionIndex
argument_list|,
name|QAccessible
operator|::
name|Focus
argument_list|)
expr_stmt|;
name|QAccessible
operator|::
name|updateAccessibility
argument_list|(
name|q
argument_list|,
name|actionIndex
argument_list|,
name|QAccessible
operator|::
name|Selection
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|//QT_NO_ACCESSIBILITY
ifdef|#
directive|ifdef
name|QT3_SUPPORT
emit|emit
name|q
operator|->
name|highlighted
argument_list|(
name|q
operator|->
name|findIdForAction
argument_list|(
name|action
argument_list|)
argument_list|)
emit|;
endif|#
directive|endif
block|}
block|}
end_function
begin_comment
comment|/*!     Initialize \a option with the values from the menu bar and information from \a action. This method     is useful for subclasses when they need a QStyleOptionMenuItem, but don't want     to fill in all the information themselves.      \sa QStyleOption::initFrom() QMenu::initStyleOption() */
end_comment
begin_function
DECL|function|initStyleOption
name|void
name|QMenuBar
operator|::
name|initStyleOption
parameter_list|(
name|QStyleOptionMenuItem
modifier|*
name|option
parameter_list|,
specifier|const
name|QAction
modifier|*
name|action
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|option
operator|||
operator|!
name|action
condition|)
return|return;
name|Q_D
argument_list|(
specifier|const
name|QMenuBar
argument_list|)
expr_stmt|;
name|option
operator|->
name|palette
operator|=
name|palette
argument_list|()
expr_stmt|;
name|option
operator|->
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
if|if
condition|(
name|isEnabled
argument_list|()
operator|&&
name|action
operator|->
name|isEnabled
argument_list|()
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Enabled
expr_stmt|;
else|else
name|option
operator|->
name|palette
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|option
operator|->
name|fontMetrics
operator|=
name|fontMetrics
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|currentAction
operator|&&
name|d
operator|->
name|currentAction
operator|==
name|action
condition|)
block|{
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|popupState
operator|&&
operator|!
name|d
operator|->
name|closePopupMode
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_Sunken
expr_stmt|;
block|}
if|if
condition|(
name|hasFocus
argument_list|()
operator|||
name|d
operator|->
name|currentAction
condition|)
name|option
operator|->
name|state
operator||=
name|QStyle
operator|::
name|State_HasFocus
expr_stmt|;
name|option
operator|->
name|menuRect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|option
operator|->
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|Normal
expr_stmt|;
name|option
operator|->
name|checkType
operator|=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
expr_stmt|;
name|option
operator|->
name|text
operator|=
name|action
operator|->
name|text
argument_list|()
expr_stmt|;
name|option
operator|->
name|icon
operator|=
name|action
operator|->
name|icon
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \class QMenuBar     \brief The QMenuBar class provides a horizontal menu bar.      \ingroup mainwindow-classes      A menu bar consists of a list of pull-down menu items. You add     menu items with addMenu(). For example, asuming that \c menubar     is a pointer to a QMenuBar and \c fileMenu is a pointer to a     QMenu, the following statement inserts the menu into the menu bar:     \snippet doc/src/snippets/code/src_gui_widgets_qmenubar.cpp 0      The ampersand in the menu item's text sets Alt+F as a shortcut for     this menu. (You can use "\&\&" to get a real ampersand in the menu     bar.)      There is no need to lay out a menu bar. It automatically sets its     own geometry to the top of the parent widget and changes it     appropriately whenever the parent is resized.      \section1 Usage      In most main window style applications you would use the     \l{QMainWindow::}{menuBar()} function provided in QMainWindow,     adding \l{QMenu}s to the menu bar and adding \l{QAction}s to the     pop-up menus.      Example (from the \l{mainwindows/menus}{Menus} example):      \snippet examples/mainwindows/menus/mainwindow.cpp 9      Menu items may be removed with removeAction().      Widgets can be added to menus by using instances of the QWidgetAction     class to hold them. These actions can then be inserted into menus     in the usual way; see the QMenu documentation for more details.      \section1 Platform Dependent Look and Feel      Different platforms have different requirements for the appearance     of menu bars and their behavior when the user interacts with them.     For example, Windows systems are often configured so that the     underlined character mnemonics that indicate keyboard shortcuts     for items in the menu bar are only shown when the \gui{Alt} key is     pressed.      \table      \row \o \inlineimage plastique-menubar.png A menu bar shown in the     Plastique widget style.      \o The \l{QPlastiqueStyle}{Plastique widget style}, like most     other styles, handles the \gui{Help} menu in the same way as it     handles any other menu.      \row \o \inlineimage motif-menubar.png A menu bar shown in the     Motif widget style.      \o The \l{QMotifStyle}{Motif widget style} treats \gui{Help} menus     in a special way, placing them at right-hand end of the menu bar.      \endtable      \section1 QMenuBar on Mac OS X      QMenuBar on Mac OS X is a wrapper for using the system-wide menu bar.     If you have multiple menu bars in one dialog the outermost menu bar     (normally inside a widget with widget flag Qt::Window) will     be used for the system-wide menu bar.      Qt for Mac OS X also provides a menu bar merging feature to make     QMenuBar conform more closely to accepted Mac OS X menu bar layout.     The merging functionality is based on string matching the title of     a QMenu entry. These strings are translated (using QObject::tr())     in the "QMenuBar" context. If an entry is moved its slots will still     fire as if it was in the original place. The table below outlines     the strings looked for and where the entry is placed if matched:      \table     \header \i String matches \i Placement \i Notes     \row \i about.*          \i Application Menu | About<application name>          \i The application name is fetched from the \c {Info.plist} file             (see note below). If this entry is not found no About item             will appear in the Application Menu.     \row \i config, options, setup, settings or preferences          \i Application Menu | Preferences          \i If this entry is not found the Settings item will be disabled     \row \i quit or exit          \i Application Menu | Quit<application name>          \i If this entry is not found a default Quit item will be             created to call QApplication::quit()     \endtable      You can override this behavior by using the QAction::menuRole()     property.      If you want all windows in a Mac application to share one menu     bar, you must create a menu bar that does not have a parent.     Create a parent-less menu bar this way:      \snippet doc/src/snippets/code/src_gui_widgets_qmenubar.cpp 1      \bold{Note:} Do \e{not} call QMainWindow::menuBar() to create the     shared menu bar, because that menu bar will have the QMainWindow     as its parent. That menu bar would only be displayed for the     parent QMainWindow.      \bold{Note:} The text used for the application name in the menu     bar is obtained from the value set in the \c{Info.plist} file in     the application's bundle. See \l{Deploying an Application on     Mac OS X} for more information.      \section1 QMenuBar on Windows CE      QMenuBar on Windows CE is a wrapper for using the system-wide menu bar,     similar to the Mac.  This feature is activated for Windows Mobile     and integrates QMenuBar with the native soft keys. The left soft     key can be controlled with QMenuBar::setDefaultAction() and the     right soft key can be used to access the menu bar.      The hovered() signal is not supported for the native menu     integration. Also, it is not possible to display an icon in a     native menu on Windows Mobile.      \section1 Examples      The \l{mainwindows/menus}{Menus} example shows how to use QMenuBar     and QMenu.  The other \l{Main Window Examples}{main window     application examples} also provide menus using these classes.      \sa QMenu, QShortcut, QAction,         {http://developer.apple.com/documentation/UserExperience/Conceptual/AppleHIGuidelines/XHIGIntro/XHIGIntro.html}{Introduction to Apple Human Interface Guidelines},         {fowler}{GUI Design Handbook: Menu Bar}, {Menus Example} */
end_comment
begin_function
DECL|function|init
name|void
name|QMenuBarPrivate
operator|::
name|init
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|q
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|MinimumExpanding
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_CustomWhatsThis
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|macCreateMenuBar
argument_list|(
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mac_menubar
condition|)
name|q
operator|->
name|hide
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_WINCE
if|if
condition|(
name|qt_wince_is_mobile
argument_list|()
condition|)
block|{
name|wceCreateMenuBar
argument_list|(
name|q
operator|->
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|wce_menubar
condition|)
name|q
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_DontUseNativeMenuBar
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|q
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
expr_stmt|;
name|oldWindow
operator|=
name|oldParent
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
name|doAutoResize
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
name|menuBarAction
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|handleReparent
argument_list|()
expr_stmt|;
name|q
operator|->
name|setMouseTracking
argument_list|(
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MenuBar_MouseTracking
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
name|extension
operator|=
operator|new
name|QMenuBarExtension
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|extension
operator|->
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|NoFocus
argument_list|)
expr_stmt|;
name|extension
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//Gets the next action for keyboard navigation
end_comment
begin_function
DECL|function|getNextAction
name|QAction
modifier|*
name|QMenuBarPrivate
operator|::
name|getNextAction
parameter_list|(
specifier|const
name|int
name|_start
parameter_list|,
specifier|const
name|int
name|increment
parameter_list|)
specifier|const
block|{
name|Q_Q
argument_list|(
specifier|const
name|QMenuBar
argument_list|)
expr_stmt|;
cast|const_cast
argument_list|<
name|QMenuBarPrivate
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|updateGeometries
argument_list|()
expr_stmt|;
name|bool
name|allowActiveAndDisabled
init|=
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_AllowActiveAndDisabled
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
decl_stmt|;
specifier|const
name|int
name|start
init|=
operator|(
name|_start
operator|==
operator|-
literal|1
operator|&&
name|increment
operator|==
operator|-
literal|1
operator|)
condition|?
name|actions
operator|.
name|count
argument_list|()
else|:
name|_start
decl_stmt|;
specifier|const
name|int
name|end
init|=
name|increment
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|actions
operator|.
name|count
argument_list|()
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|!=
name|end
condition|;
control|)
block|{
name|i
operator|+=
name|increment
expr_stmt|;
name|QAction
modifier|*
name|current
init|=
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
operator|&&
operator|(
name|allowActiveAndDisabled
operator|||
name|current
operator|->
name|isEnabled
argument_list|()
operator|)
condition|)
return|return
name|current
return|;
block|}
if|if
condition|(
name|_start
operator|!=
operator|-
literal|1
condition|)
comment|//let's try from the beginning or the end
return|return
name|getNextAction
argument_list|(
operator|-
literal|1
argument_list|,
name|increment
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     Constructs a menu bar with parent \a parent. */
end_comment
begin_constructor
DECL|function|QMenuBar
name|QMenuBar
operator|::
name|QMenuBar
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QMenuBarPrivate
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_comment
comment|/*!     Use one of the constructors that doesn't take the \a name     argument and then use setObjectName() instead. */
end_comment
begin_constructor
DECL|function|QMenuBar
name|QMenuBar
operator|::
name|QMenuBar
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
operator|*
operator|new
name|QMenuBarPrivate
argument_list|,
name|parent
argument_list|,
literal|0
argument_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|init
argument_list|()
expr_stmt|;
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     Destroys the menu bar. */
end_comment
begin_destructor
DECL|function|~QMenuBar
name|QMenuBar
operator|::
name|~
name|QMenuBar
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|macDestroyMenuBar
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_WINCE
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|qt_wince_is_mobile
argument_list|()
condition|)
name|d
operator|->
name|wceDestroyMenuBar
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_S60
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|symbianDestroyMenuBar
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_destructor
begin_comment
comment|/*!     \overload      This convenience function creates a new action with \a text.     The function adds the newly created action to the menu's     list of actions, and returns it.      \sa QWidget::addAction(), QWidget::actions() */
end_comment
begin_function
DECL|function|addAction
name|QAction
modifier|*
name|QMenuBar
operator|::
name|addAction
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QAction
modifier|*
name|ret
init|=
operator|new
name|QAction
argument_list|(
name|text
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|addAction
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!     \overload      This convenience function creates a new action with the given \a     text. The action's triggered() signal is connected to the \a     receiver's \a member slot. The function adds the newly created     action to the menu's list of actions and returns it.      \sa QWidget::addAction(), QWidget::actions() */
end_comment
begin_function
DECL|function|addAction
name|QAction
modifier|*
name|QMenuBar
operator|::
name|addAction
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
specifier|const
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|)
block|{
name|QAction
modifier|*
name|ret
init|=
operator|new
name|QAction
argument_list|(
name|text
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|ret
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!   Appends a new QMenu with \a title to the menu bar. The menu bar   takes ownership of the menu. Returns the new menu.    \sa QWidget::addAction() QMenu::menuAction() */
end_comment
begin_function
DECL|function|addMenu
name|QMenu
modifier|*
name|QMenuBar
operator|::
name|addMenu
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|QMenu
modifier|*
name|menu
init|=
operator|new
name|QMenu
argument_list|(
name|title
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|addAction
argument_list|(
name|menu
operator|->
name|menuAction
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|menu
return|;
block|}
end_function
begin_comment
comment|/*!   Appends a new QMenu with \a icon and \a title to the menu bar. The menu bar   takes ownership of the menu. Returns the new menu.    \sa QWidget::addAction() QMenu::menuAction() */
end_comment
begin_function
DECL|function|addMenu
name|QMenu
modifier|*
name|QMenuBar
operator|::
name|addMenu
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|,
specifier|const
name|QString
modifier|&
name|title
parameter_list|)
block|{
name|QMenu
modifier|*
name|menu
init|=
operator|new
name|QMenu
argument_list|(
name|title
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|menu
operator|->
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|menu
operator|->
name|menuAction
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|menu
return|;
block|}
end_function
begin_comment
comment|/*!     Appends \a menu to the menu bar. Returns the menu's menuAction().      \note The returned QAction object can be used to hide the corresponding     menu.      \sa QWidget::addAction() QMenu::menuAction() */
end_comment
begin_function
DECL|function|addMenu
name|QAction
modifier|*
name|QMenuBar
operator|::
name|addMenu
parameter_list|(
name|QMenu
modifier|*
name|menu
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
name|menu
operator|->
name|menuAction
argument_list|()
decl_stmt|;
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!   Appends a separator to the menu. */
end_comment
begin_function
DECL|function|addSeparator
name|QAction
modifier|*
name|QMenuBar
operator|::
name|addSeparator
parameter_list|()
block|{
name|QAction
modifier|*
name|ret
init|=
operator|new
name|QAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|ret
operator|->
name|setSeparator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!     This convenience function creates a new separator action, i.e. an     action with QAction::isSeparator() returning true. The function inserts     the newly created action into this menu bar's list of actions before     action \a before and returns it.      \sa QWidget::insertAction(), addSeparator() */
end_comment
begin_function
DECL|function|insertSeparator
name|QAction
modifier|*
name|QMenuBar
operator|::
name|insertSeparator
parameter_list|(
name|QAction
modifier|*
name|before
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
operator|new
name|QAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|action
operator|->
name|setSeparator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|insertAction
argument_list|(
name|before
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!   This convenience function inserts \a menu before action \a before   and returns the menus menuAction().    \sa QWidget::insertAction() addMenu() */
end_comment
begin_function
DECL|function|insertMenu
name|QAction
modifier|*
name|QMenuBar
operator|::
name|insertMenu
parameter_list|(
name|QAction
modifier|*
name|before
parameter_list|,
name|QMenu
modifier|*
name|menu
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
name|menu
operator|->
name|menuAction
argument_list|()
decl_stmt|;
name|insertAction
argument_list|(
name|before
argument_list|,
name|action
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the QAction that is currently highlighted. A null pointer   will be returned if no action is currently selected. */
end_comment
begin_function
DECL|function|activeAction
name|QAction
modifier|*
name|QMenuBar
operator|::
name|activeAction
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMenuBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|currentAction
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.1      Sets the currently highlighted action to \a act. */
end_comment
begin_function
DECL|function|setActiveAction
name|void
name|QMenuBar
operator|::
name|setActiveAction
parameter_list|(
name|QAction
modifier|*
name|act
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|setCurrentAction
argument_list|(
name|act
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Removes all the actions from the menu bar.      \note On Mac OS X, menu items that have been merged to the system     menu bar are not removed by this function. One way to handle this     would be to remove the extra actions yourself. You can set the     \l{QAction::MenuRole}{menu role} on the different menus, so that     you know ahead of time which menu items get merged and which do     not. Then decide what to recreate or remove yourself.      \sa removeAction() */
end_comment
begin_function
DECL|function|clear
name|void
name|QMenuBar
operator|::
name|clear
parameter_list|()
block|{
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|acts
init|=
name|actions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|acts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|removeAction
argument_list|(
name|acts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \property QMenuBar::defaultUp     \brief the popup orientation      The default popup orientation. By default, menus pop "down" the     screen. By setting the property to true, the menu will pop "up".     You might call this for menus that are \e below the document to     which they refer.      If the menu would not fit on the screen, the other direction is     used automatically. */
end_comment
begin_function
DECL|function|setDefaultUp
name|void
name|QMenuBar
operator|::
name|setDefaultUp
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|defaultPopDown
operator|=
operator|!
name|b
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isDefaultUp
name|bool
name|QMenuBar
operator|::
name|isDefaultUp
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMenuBar
argument_list|)
expr_stmt|;
return|return
operator|!
name|d
operator|->
name|defaultPopDown
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|QMenuBar
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|itemsDirty
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|updateGeometries
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|paintEvent
name|void
name|QMenuBar
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QRegion
name|emptyArea
argument_list|(
name|rect
argument_list|()
argument_list|)
decl_stmt|;
comment|//draw the items
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|actions
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QAction
modifier|*
name|action
init|=
name|d
operator|->
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QRect
name|adjustedActionRect
init|=
name|d
operator|->
name|actionRect
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|adjustedActionRect
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|d
operator|->
name|isVisible
argument_list|(
name|action
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|e
operator|->
name|rect
argument_list|()
operator|.
name|intersects
argument_list|(
name|adjustedActionRect
argument_list|)
condition|)
continue|continue;
name|emptyArea
operator|-=
name|adjustedActionRect
expr_stmt|;
name|QStyleOptionMenuItem
name|opt
decl_stmt|;
name|initStyleOption
argument_list|(
operator|&
name|opt
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|opt
operator|.
name|rect
operator|=
name|adjustedActionRect
expr_stmt|;
name|p
operator|.
name|setClipRect
argument_list|(
name|adjustedActionRect
argument_list|)
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_MenuBarItem
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|//draw border
if|if
condition|(
name|int
name|fw
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarPanelWidth
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
block|{
name|QRegion
name|borderReg
decl_stmt|;
name|borderReg
operator|+=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|fw
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|//left
name|borderReg
operator|+=
name|QRect
argument_list|(
name|width
argument_list|()
operator|-
name|fw
argument_list|,
literal|0
argument_list|,
name|fw
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|//right
name|borderReg
operator|+=
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|fw
argument_list|)
expr_stmt|;
comment|//top
name|borderReg
operator|+=
name|QRect
argument_list|(
literal|0
argument_list|,
name|height
argument_list|()
operator|-
name|fw
argument_list|,
name|width
argument_list|()
argument_list|,
name|fw
argument_list|)
expr_stmt|;
comment|//bottom
name|p
operator|.
name|setClipRegion
argument_list|(
name|borderReg
argument_list|)
expr_stmt|;
name|emptyArea
operator|-=
name|borderReg
expr_stmt|;
name|QStyleOptionFrame
name|frame
decl_stmt|;
name|frame
operator|.
name|rect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|frame
operator|.
name|palette
operator|=
name|palette
argument_list|()
expr_stmt|;
name|frame
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
name|frame
operator|.
name|lineWidth
operator|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarPanelWidth
argument_list|)
expr_stmt|;
name|frame
operator|.
name|midLineWidth
operator|=
literal|0
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawPrimitive
argument_list|(
name|QStyle
operator|::
name|PE_PanelMenuBar
argument_list|,
operator|&
name|frame
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setClipRegion
argument_list|(
name|emptyArea
argument_list|)
expr_stmt|;
name|QStyleOptionMenuItem
name|menuOpt
decl_stmt|;
name|menuOpt
operator|.
name|palette
operator|=
name|palette
argument_list|()
expr_stmt|;
name|menuOpt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
name|menuOpt
operator|.
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|EmptyArea
expr_stmt|;
name|menuOpt
operator|.
name|checkType
operator|=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
expr_stmt|;
name|menuOpt
operator|.
name|rect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|menuOpt
operator|.
name|menuRect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|style
argument_list|()
operator|->
name|drawControl
argument_list|(
name|QStyle
operator|::
name|CE_MenuBarEmptyArea
argument_list|,
operator|&
name|menuOpt
argument_list|,
operator|&
name|p
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|setVisible
name|void
name|QMenuBar
operator|::
name|setVisible
parameter_list|(
name|bool
name|visible
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
if|if
condition|(
name|isNativeMenuBar
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|visible
condition|)
name|QWidget
operator|::
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
endif|#
directive|endif
name|QWidget
operator|::
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mousePressEvent
name|void
name|QMenuBar
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
condition|)
return|return;
name|d
operator|->
name|mouseDown
operator|=
literal|true
expr_stmt|;
name|QAction
modifier|*
name|action
init|=
name|d
operator|->
name|actionAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|action
operator|||
operator|!
name|d
operator|->
name|isVisible
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|d
operator|->
name|setCurrentAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
if|if
condition|(
name|QWhatsThis
operator|::
name|inWhatsThisMode
argument_list|()
condition|)
name|QWhatsThis
operator|::
name|showText
argument_list|(
name|e
operator|->
name|globalPos
argument_list|()
argument_list|,
name|d
operator|->
name|whatsThis
argument_list|,
name|this
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
if|if
condition|(
name|d
operator|->
name|currentAction
operator|==
name|action
operator|&&
name|d
operator|->
name|popupState
condition|)
block|{
if|if
condition|(
name|QMenu
modifier|*
name|menu
init|=
name|d
operator|->
name|activeMenu
condition|)
block|{
name|d
operator|->
name|activeMenu
operator|=
literal|0
expr_stmt|;
name|menu
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_WS_WIN
if|if
condition|(
operator|(
name|d
operator|->
name|closePopupMode
operator|=
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MenuBar_DismissOnSecondClick
argument_list|)
operator|)
condition|)
name|update
argument_list|(
name|d
operator|->
name|actionRect
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|d
operator|->
name|setCurrentAction
argument_list|(
name|action
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mouseReleaseEvent
name|void
name|QMenuBar
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|button
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftButton
operator|||
operator|!
name|d
operator|->
name|mouseDown
condition|)
return|return;
name|d
operator|->
name|mouseDown
operator|=
literal|false
expr_stmt|;
name|QAction
modifier|*
name|action
init|=
name|d
operator|->
name|actionAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|d
operator|->
name|closePopupMode
operator|&&
name|action
operator|==
name|d
operator|->
name|currentAction
operator|)
operator|||
operator|!
name|action
operator|||
operator|!
name|action
operator|->
name|menu
argument_list|()
condition|)
block|{
comment|//we set the current action before activating
comment|//so that we let the leave event set the current back to 0
name|d
operator|->
name|setCurrentAction
argument_list|(
name|action
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
condition|)
name|d
operator|->
name|activateAction
argument_list|(
name|action
argument_list|,
name|QAction
operator|::
name|Trigger
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|closePopupMode
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|QMenuBar
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateGeometries
argument_list|()
expr_stmt|;
name|int
name|key
init|=
name|e
operator|->
name|key
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRightToLeft
argument_list|()
condition|)
block|{
comment|// in reverse mode open/close key for submenues are reversed
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Left
condition|)
name|key
operator|=
name|Qt
operator|::
name|Key_Right
expr_stmt|;
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Right
condition|)
name|key
operator|=
name|Qt
operator|::
name|Key_Left
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Tab
condition|)
comment|//means right
name|key
operator|=
name|Qt
operator|::
name|Key_Right
expr_stmt|;
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Backtab
condition|)
comment|//means left
name|key
operator|=
name|Qt
operator|::
name|Key_Left
expr_stmt|;
name|bool
name|key_consumed
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|key
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Up
case|:
case|case
name|Qt
operator|::
name|Key_Down
case|:
case|case
name|Qt
operator|::
name|Key_Enter
case|:
case|case
name|Qt
operator|::
name|Key_Space
case|:
case|case
name|Qt
operator|::
name|Key_Return
case|:
block|{
if|if
condition|(
operator|!
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MenuBar_AltKeyNavigation
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
operator|||
operator|!
name|d
operator|->
name|currentAction
condition|)
break|break;
if|if
condition|(
name|d
operator|->
name|currentAction
operator|->
name|menu
argument_list|()
condition|)
block|{
name|d
operator|->
name|popupAction
argument_list|(
name|d
operator|->
name|currentAction
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Enter
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_Return
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_Space
condition|)
block|{
name|d
operator|->
name|activateAction
argument_list|(
name|d
operator|->
name|currentAction
argument_list|,
name|QAction
operator|::
name|Trigger
argument_list|)
expr_stmt|;
name|d
operator|->
name|setCurrentAction
argument_list|(
name|d
operator|->
name|currentAction
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|setKeyboardMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|key_consumed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
case|case
name|Qt
operator|::
name|Key_Right
case|:
case|case
name|Qt
operator|::
name|Key_Left
case|:
block|{
if|if
condition|(
name|d
operator|->
name|currentAction
condition|)
block|{
name|int
name|index
init|=
name|d
operator|->
name|actions
operator|.
name|indexOf
argument_list|(
name|d
operator|->
name|currentAction
argument_list|)
decl_stmt|;
if|if
condition|(
name|QAction
modifier|*
name|nextAction
init|=
name|d
operator|->
name|getNextAction
argument_list|(
name|index
argument_list|,
name|key
operator|==
name|Qt
operator|::
name|Key_Left
condition|?
operator|-
literal|1
else|:
operator|+
literal|1
argument_list|)
condition|)
block|{
name|d
operator|->
name|setCurrentAction
argument_list|(
name|nextAction
argument_list|,
name|d
operator|->
name|popupState
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|key_consumed
operator|=
literal|true
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|Qt
operator|::
name|Key_Escape
case|:
name|d
operator|->
name|setCurrentAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|setKeyboardMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|key_consumed
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|key_consumed
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|key_consumed
operator|&&
operator|(
operator|!
name|e
operator|->
name|modifiers
argument_list|()
operator|||
operator|(
name|e
operator|->
name|modifiers
argument_list|()
operator|&
operator|(
name|Qt
operator|::
name|MetaModifier
operator||
name|Qt
operator|::
name|AltModifier
operator|)
operator|)
operator|)
operator|&&
name|e
operator|->
name|text
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|d
operator|->
name|popupState
condition|)
block|{
name|int
name|clashCount
init|=
literal|0
decl_stmt|;
name|QAction
modifier|*
name|first
init|=
literal|0
decl_stmt|,
modifier|*
name|currentSelected
init|=
literal|0
decl_stmt|,
modifier|*
name|firstAfterCurrent
init|=
literal|0
decl_stmt|;
block|{
name|QChar
name|c
init|=
name|e
operator|->
name|text
argument_list|()
index|[
literal|0
index|]
operator|.
name|toUpper
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|actions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
name|QAction
modifier|*
name|act
init|=
name|d
operator|->
name|actions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|s
init|=
name|act
operator|->
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|ampersand
init|=
name|s
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'&'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ampersand
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|s
index|[
name|ampersand
operator|+
literal|1
index|]
operator|.
name|toUpper
argument_list|()
operator|==
name|c
condition|)
block|{
name|clashCount
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|first
operator|=
name|act
expr_stmt|;
if|if
condition|(
name|act
operator|==
name|d
operator|->
name|currentAction
condition|)
name|currentSelected
operator|=
name|act
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|firstAfterCurrent
operator|&&
name|currentSelected
condition|)
name|firstAfterCurrent
operator|=
name|act
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|QAction
modifier|*
name|next_action
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|clashCount
operator|>=
literal|1
condition|)
block|{
if|if
condition|(
name|clashCount
operator|==
literal|1
operator|||
operator|!
name|d
operator|->
name|currentAction
operator|||
operator|(
name|currentSelected
operator|&&
operator|!
name|firstAfterCurrent
operator|)
condition|)
name|next_action
operator|=
name|first
expr_stmt|;
else|else
name|next_action
operator|=
name|firstAfterCurrent
expr_stmt|;
block|}
if|if
condition|(
name|next_action
condition|)
block|{
name|key_consumed
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|setCurrentAction
argument_list|(
name|next_action
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|key_consumed
condition|)
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
else|else
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|mouseMoveEvent
name|void
name|QMenuBar
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|e
operator|->
name|buttons
argument_list|()
operator|&
name|Qt
operator|::
name|LeftButton
operator|)
condition|)
name|d
operator|->
name|mouseDown
operator|=
literal|false
expr_stmt|;
name|bool
name|popupState
init|=
name|d
operator|->
name|popupState
operator|||
name|d
operator|->
name|mouseDown
decl_stmt|;
name|QAction
modifier|*
name|action
init|=
name|d
operator|->
name|actionAt
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|action
operator|&&
name|d
operator|->
name|isVisible
argument_list|(
name|action
argument_list|)
operator|)
operator|||
operator|!
name|popupState
condition|)
name|d
operator|->
name|setCurrentAction
argument_list|(
name|action
argument_list|,
name|popupState
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|leaveEvent
name|void
name|QMenuBar
operator|::
name|leaveEvent
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|hasFocus
argument_list|()
operator|&&
operator|!
name|d
operator|->
name|popupState
operator|)
operator|||
operator|(
name|d
operator|->
name|currentAction
operator|&&
name|d
operator|->
name|currentAction
operator|->
name|menu
argument_list|()
operator|==
literal|0
operator|)
condition|)
name|d
operator|->
name|setCurrentAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|actionEvent
name|void
name|QMenuBar
operator|::
name|actionEvent
parameter_list|(
name|QActionEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|itemsDirty
operator|=
literal|true
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
if|if
condition|(
name|isNativeMenuBar
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QMenuBarPrivate
operator|::
name|QMacMenuBarPrivate
modifier|*
name|nativeMenuBar
init|=
name|d
operator|->
name|mac_menubar
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
name|QMenuBarPrivate
operator|::
name|QSymbianMenuBarPrivate
modifier|*
name|nativeMenuBar
init|=
name|d
operator|->
name|symbian_menubar
decl_stmt|;
else|#
directive|else
name|QMenuBarPrivate
operator|::
name|QWceMenuBarPrivate
modifier|*
name|nativeMenuBar
init|=
name|d
operator|->
name|wce_menubar
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|nativeMenuBar
condition|)
return|return;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionAdded
condition|)
name|nativeMenuBar
operator|->
name|addAction
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|,
name|nativeMenuBar
operator|->
name|findAction
argument_list|(
name|e
operator|->
name|before
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionRemoved
condition|)
name|nativeMenuBar
operator|->
name|removeAction
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionChanged
condition|)
name|nativeMenuBar
operator|->
name|syncAction
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionAdded
condition|)
block|{
name|connect
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_actionTriggered
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|e
operator|->
name|action
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|hovered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_actionHovered
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ActionRemoved
condition|)
block|{
name|e
operator|->
name|action
argument_list|()
operator|->
name|disconnect
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
name|d
operator|->
name|updateGeometries
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|focusInEvent
name|void
name|QMenuBar
operator|::
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|keyboardState
condition|)
name|d
operator|->
name|focusFirstAction
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|focusOutEvent
name|void
name|QMenuBar
operator|::
name|focusOutEvent
parameter_list|(
name|QFocusEvent
modifier|*
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|popupState
condition|)
block|{
name|d
operator|->
name|setCurrentAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|setKeyboardMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   \reimp  */
end_comment
begin_function
DECL|function|timerEvent
name|void
name|QMenuBar
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|d
operator|->
name|autoReleaseTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|d
operator|->
name|autoReleaseTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|d
operator|->
name|setCurrentAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|QWidget
operator|::
name|timerEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleReparent
name|void
name|QMenuBarPrivate
operator|::
name|handleReparent
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|newParent
init|=
name|q
operator|->
name|parentWidget
argument_list|()
decl_stmt|;
comment|//Note: if parent is reparented, then window may change even if parent doesn't
comment|// we need to install an event filter on parent, and remove the old one
if|if
condition|(
name|oldParent
operator|!=
name|newParent
condition|)
block|{
if|if
condition|(
name|oldParent
condition|)
name|oldParent
operator|->
name|removeEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|newParent
condition|)
name|newParent
operator|->
name|installEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
comment|//we also need event filter on top-level (for shortcuts)
name|QWidget
modifier|*
name|newWindow
init|=
name|newParent
condition|?
name|newParent
operator|->
name|window
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|oldWindow
operator|!=
name|newWindow
condition|)
block|{
if|if
condition|(
name|oldParent
operator|&&
name|oldParent
operator|!=
name|oldWindow
condition|)
name|oldWindow
operator|->
name|removeEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|newParent
operator|&&
name|newParent
operator|!=
name|newWindow
condition|)
name|newWindow
operator|->
name|installEventFilter
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
name|oldParent
operator|=
name|newParent
expr_stmt|;
name|oldWindow
operator|=
name|newWindow
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
if|if
condition|(
name|q
operator|->
name|isNativeMenuBar
argument_list|()
operator|&&
operator|!
name|macWidgetHasNativeMenubar
argument_list|(
name|newParent
argument_list|)
condition|)
block|{
comment|// If the new parent got a native menubar from before, keep that
comment|// menubar rather than replace it with this one (because a parents
comment|// menubar has precedence over children menubars).
name|macDestroyMenuBar
argument_list|()
expr_stmt|;
name|macCreateMenuBar
argument_list|(
name|newParent
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_WINCE
if|if
condition|(
name|qt_wince_is_mobile
argument_list|()
operator|&&
name|wce_menubar
condition|)
name|wce_menubar
operator|->
name|rebuild
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_S60
comment|// Construct symbian_menubar when this code path is entered first time
comment|// and when newParent != NULL
if|if
condition|(
operator|!
name|symbian_menubar
condition|)
name|symbianCreateMenuBar
argument_list|(
name|newParent
argument_list|)
expr_stmt|;
comment|// Reparent and rebuild menubar when parent is changed
if|if
condition|(
name|symbian_menubar
condition|)
block|{
if|if
condition|(
name|oldParent
operator|!=
name|newParent
condition|)
name|reparentMenuBar
argument_list|(
name|oldParent
argument_list|,
name|newParent
argument_list|)
expr_stmt|;
name|q
operator|->
name|hide
argument_list|()
expr_stmt|;
name|symbian_menubar
operator|->
name|rebuild
argument_list|()
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
comment|// Constuct menuBarAction when this code path is entered first time
if|if
condition|(
operator|!
name|menuBarAction
condition|)
block|{
if|if
condition|(
name|newParent
condition|)
block|{
name|menuBarAction
operator|=
name|QSoftKeyManager
operator|::
name|createAction
argument_list|(
name|QSoftKeyManager
operator|::
name|MenuSoftKey
argument_list|,
name|newParent
argument_list|)
expr_stmt|;
name|newParent
operator|->
name|addAction
argument_list|(
name|menuBarAction
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// If reparenting i.e. we already have menuBarAction, remove it from old parent
comment|// and add for a new parent
if|if
condition|(
name|oldParent
condition|)
name|oldParent
operator|->
name|removeAction
argument_list|(
name|menuBarAction
argument_list|)
expr_stmt|;
if|if
condition|(
name|newParent
condition|)
name|newParent
operator|->
name|addAction
argument_list|(
name|menuBarAction
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_SOFTKEYS_ENABLED
endif|#
directive|endif
comment|// Q_WS_S60
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_comment
comment|/*!     Sets whether the menu bar should automatically resize itself     when its parent widget is resized.      This feature is provided to help porting to Qt 4. We recommend     against using it in new code.      \sa autoGeometry() */
end_comment
begin_function
DECL|function|setAutoGeometry
name|void
name|QMenuBar
operator|::
name|setAutoGeometry
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|d
operator|->
name|doAutoResize
operator|=
name|b
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns true if the menu bar automatically resizes itself     when its parent widget is resized; otherwise returns false.      This feature is provided to help porting to Qt 4. We recommend     against using it in new code.      \sa setAutoGeometry() */
end_comment
begin_function
DECL|function|autoGeometry
name|bool
name|QMenuBar
operator|::
name|autoGeometry
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMenuBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|doAutoResize
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|changeEvent
name|void
name|QMenuBar
operator|::
name|changeEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StyleChange
condition|)
block|{
name|d
operator|->
name|itemsDirty
operator|=
literal|true
expr_stmt|;
name|setMouseTracking
argument_list|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MenuBar_MouseTracking
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentWidget
argument_list|()
condition|)
name|resize
argument_list|(
name|parentWidget
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|heightForWidth
argument_list|(
name|parentWidget
argument_list|()
operator|->
name|width
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|updateGeometries
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ParentChange
condition|)
block|{
name|d
operator|->
name|handleReparent
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|FontChange
operator|||
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ApplicationFontChange
condition|)
block|{
name|d
operator|->
name|itemsDirty
operator|=
literal|true
expr_stmt|;
name|d
operator|->
name|updateGeometries
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|LanguageChange
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|menuBarAction
condition|)
name|d
operator|->
name|menuBarAction
operator|->
name|setText
argument_list|(
name|QSoftKeyManager
operator|::
name|standardSoftKeyText
argument_list|(
name|QSoftKeyManager
operator|::
name|MenuSoftKey
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|QWidget
operator|::
name|changeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QMenuBar
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|KeyPress
case|:
block|{
name|QKeyEvent
modifier|*
name|ke
init|=
operator|(
name|QKeyEvent
operator|*
operator|)
name|e
decl_stmt|;
if|#
directive|if
literal|0
block|if(!d->keyboardState) {
comment|//all keypresses..
block|d->setCurrentAction(0);             return ;         }
endif|#
directive|endif
if|if
condition|(
name|ke
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Tab
operator|||
name|ke
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Backtab
condition|)
block|{
name|keyPressEvent
argument_list|(
name|ke
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
ifndef|#
directive|ifndef
name|QT_NO_SHORTCUT
case|case
name|QEvent
operator|::
name|Shortcut
case|:
block|{
name|QShortcutEvent
modifier|*
name|se
init|=
cast|static_cast
argument_list|<
name|QShortcutEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|int
name|shortcutId
init|=
name|se
operator|->
name|shortcutId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|d
operator|->
name|shortcutIndexMap
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|shortcutId
operator|==
name|d
operator|->
name|shortcutIndexMap
operator|.
name|value
argument_list|(
name|j
argument_list|)
condition|)
name|d
operator|->
name|_q_internalShortcutActivated
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
case|case
name|QEvent
operator|::
name|Show
case|:
ifdef|#
directive|ifdef
name|QT3_SUPPORT
if|if
condition|(
name|QWidget
modifier|*
name|p
init|=
name|parentWidget
argument_list|()
condition|)
block|{
comment|// If itemsDirty == true, updateGeometries sends the MenubarUpdated event.
if|if
condition|(
operator|!
name|d
operator|->
name|itemsDirty
condition|)
block|{
name|QMenubarUpdatedEvent
name|menubarUpdated
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|p
argument_list|,
operator|&
name|menubarUpdated
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
name|d
operator|->
name|_q_updateLayout
argument_list|()
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|ShortcutOverride
case|:
block|{
name|QKeyEvent
modifier|*
name|kev
init|=
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
comment|//we only filter out escape if there is a current action
if|if
condition|(
name|kev
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Escape
operator|&&
name|d
operator|->
name|currentAction
condition|)
block|{
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
ifdef|#
directive|ifdef
name|QT3_SUPPORT
case|case
name|QEvent
operator|::
name|Hide
case|:
block|{
if|if
condition|(
name|QWidget
modifier|*
name|p
init|=
name|parentWidget
argument_list|()
condition|)
block|{
name|QMenubarUpdatedEvent
name|menubarUpdated
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|p
argument_list|,
operator|&
name|menubarUpdated
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
case|case
name|QEvent
operator|::
name|QueryWhatsThis
case|:
name|e
operator|->
name|setAccepted
argument_list|(
name|d
operator|->
name|whatsThis
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QAction
modifier|*
name|action
init|=
name|d
operator|->
name|actionAt
argument_list|(
cast|static_cast
argument_list|<
name|QHelpEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|action
operator|->
name|whatsThis
argument_list|()
operator|.
name|size
argument_list|()
operator|||
name|action
operator|->
name|menu
argument_list|()
condition|)
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
endif|#
directive|endif
case|case
name|QEvent
operator|::
name|LayoutDirectionChange
case|:
name|d
operator|->
name|_q_updateLayout
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|eventFilter
name|bool
name|QMenuBar
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|==
name|parent
argument_list|()
operator|&&
name|object
condition|)
block|{
ifdef|#
directive|ifdef
name|QT3_SUPPORT
if|if
condition|(
name|d
operator|->
name|doAutoResize
operator|&&
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Resize
condition|)
block|{
name|QResizeEvent
modifier|*
name|e
init|=
operator|(
name|QResizeEvent
operator|*
operator|)
name|event
decl_stmt|;
name|int
name|w
init|=
name|e
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
decl_stmt|;
name|setGeometry
argument_list|(
literal|0
argument_list|,
name|y
argument_list|()
argument_list|,
name|w
argument_list|,
name|heightForWidth
argument_list|(
name|w
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
endif|#
directive|endif
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ParentChange
condition|)
comment|//GrandparentChange
name|d
operator|->
name|handleReparent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|object
operator|==
name|d
operator|->
name|leftWidget
operator|||
name|object
operator|==
name|d
operator|->
name|rightWidget
condition|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|ShowToParent
case|:
case|case
name|QEvent
operator|::
name|HideToParent
case|:
name|d
operator|->
name|_q_updateLayout
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MenuBar_AltKeyNavigation
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|altPressed
condition|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|KeyPress
case|:
case|case
name|QEvent
operator|::
name|KeyRelease
case|:
block|{
name|QKeyEvent
modifier|*
name|kev
init|=
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|kev
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Alt
operator|||
name|kev
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Meta
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyPress
condition|)
comment|// Alt-press does not interest us, we have the shortcut-override event
break|break;
name|d
operator|->
name|setKeyboardMode
argument_list|(
operator|!
name|d
operator|->
name|keyboardState
argument_list|)
expr_stmt|;
block|}
block|}
comment|// fall through
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
case|case
name|QEvent
operator|::
name|MouseMove
case|:
case|case
name|QEvent
operator|::
name|FocusIn
case|:
case|case
name|QEvent
operator|::
name|FocusOut
case|:
case|case
name|QEvent
operator|::
name|ActivationChange
case|:
name|d
operator|->
name|altPressed
operator|=
literal|false
expr_stmt|;
name|qApp
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|isVisible
argument_list|()
condition|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ShortcutOverride
condition|)
block|{
name|QKeyEvent
modifier|*
name|kev
init|=
cast|static_cast
argument_list|<
name|QKeyEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|kev
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Alt
operator|||
name|kev
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Meta
operator|)
operator|&&
name|kev
operator|->
name|modifiers
argument_list|()
operator|==
name|Qt
operator|::
name|AltModifier
condition|)
block|{
name|d
operator|->
name|altPressed
operator|=
literal|true
expr_stmt|;
name|qApp
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the QAction at \a pt. Returns 0 if there is no action at \a pt or if the location has a separator.      \sa addAction(), addSeparator() */
end_comment
begin_function
DECL|function|actionAt
name|QAction
modifier|*
name|QMenuBar
operator|::
name|actionAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|pt
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMenuBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|actionAt
argument_list|(
name|pt
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   Returns the geometry of action \a act as a QRect.      \sa actionAt() */
end_comment
begin_function
DECL|function|actionGeometry
name|QRect
name|QMenuBar
operator|::
name|actionGeometry
parameter_list|(
name|QAction
modifier|*
name|act
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMenuBar
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|actionRect
argument_list|(
name|act
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|minimumSizeHint
name|QSize
name|QMenuBar
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMenuBar
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
specifier|const
name|bool
name|as_gui_menubar
init|=
operator|!
name|isNativeMenuBar
argument_list|()
decl_stmt|;
else|#
directive|else
specifier|const
name|bool
name|as_gui_menubar
init|=
literal|true
decl_stmt|;
endif|#
directive|endif
name|ensurePolished
argument_list|()
expr_stmt|;
name|QSize
name|ret
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
cast|const_cast
argument_list|<
name|QMenuBarPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|updateGeometries
argument_list|()
expr_stmt|;
specifier|const
name|int
name|hmargin
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarHMargin
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
specifier|const
name|int
name|vmargin
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarVMargin
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|int
name|fw
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarPanelWidth
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|int
name|spaceBelowMenuBar
init|=
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MainWindow_SpaceBelowMenuBar
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|as_gui_menubar
condition|)
block|{
name|int
name|w
init|=
name|parentWidget
argument_list|()
condition|?
name|parentWidget
argument_list|()
operator|->
name|width
argument_list|()
else|:
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|width
argument_list|()
decl_stmt|;
name|d
operator|->
name|calcActionRects
argument_list|(
name|w
operator|-
operator|(
literal|2
operator|*
name|fw
operator|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|ret
operator|.
name|isNull
argument_list|()
operator|&&
name|i
operator|<
name|d
operator|->
name|actions
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|ret
operator|=
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|extension
operator|->
name|isHidden
argument_list|()
condition|)
name|ret
operator|+=
name|QSize
argument_list|(
name|d
operator|->
name|extension
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ret
operator|+=
name|QSize
argument_list|(
literal|2
operator|*
name|fw
operator|+
name|hmargin
argument_list|,
literal|2
operator|*
name|fw
operator|+
name|vmargin
argument_list|)
expr_stmt|;
block|}
name|int
name|margin
init|=
literal|2
operator|*
name|vmargin
operator|+
literal|2
operator|*
name|fw
operator|+
name|spaceBelowMenuBar
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|leftWidget
condition|)
block|{
name|QSize
name|sz
init|=
name|d
operator|->
name|leftWidget
operator|->
name|minimumSizeHint
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setWidth
argument_list|(
name|ret
operator|.
name|width
argument_list|()
operator|+
name|sz
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|+
name|margin
operator|>
name|ret
operator|.
name|height
argument_list|()
condition|)
name|ret
operator|.
name|setHeight
argument_list|(
name|sz
operator|.
name|height
argument_list|()
operator|+
name|margin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|rightWidget
condition|)
block|{
name|QSize
name|sz
init|=
name|d
operator|->
name|rightWidget
operator|->
name|minimumSizeHint
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setWidth
argument_list|(
name|ret
operator|.
name|width
argument_list|()
operator|+
name|sz
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|+
name|margin
operator|>
name|ret
operator|.
name|height
argument_list|()
condition|)
name|ret
operator|.
name|setHeight
argument_list|(
name|sz
operator|.
name|height
argument_list|()
operator|+
name|margin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|as_gui_menubar
condition|)
block|{
name|QStyleOptionMenuItem
name|opt
decl_stmt|;
name|opt
operator|.
name|rect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|opt
operator|.
name|menuRect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
name|opt
operator|.
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|Normal
expr_stmt|;
name|opt
operator|.
name|checkType
operator|=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
expr_stmt|;
name|opt
operator|.
name|palette
operator|=
name|palette
argument_list|()
expr_stmt|;
return|return
operator|(
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_MenuBar
argument_list|,
operator|&
name|opt
argument_list|,
name|ret
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
operator|)
return|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|QMenuBar
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMenuBar
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
specifier|const
name|bool
name|as_gui_menubar
init|=
operator|!
name|isNativeMenuBar
argument_list|()
decl_stmt|;
else|#
directive|else
specifier|const
name|bool
name|as_gui_menubar
init|=
literal|true
decl_stmt|;
endif|#
directive|endif
name|ensurePolished
argument_list|()
expr_stmt|;
name|QSize
name|ret
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
cast|const_cast
argument_list|<
name|QMenuBarPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|updateGeometries
argument_list|()
expr_stmt|;
specifier|const
name|int
name|hmargin
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarHMargin
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
specifier|const
name|int
name|vmargin
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarVMargin
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|int
name|fw
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarPanelWidth
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|int
name|spaceBelowMenuBar
init|=
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MainWindow_SpaceBelowMenuBar
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|as_gui_menubar
condition|)
block|{
specifier|const
name|int
name|w
init|=
name|parentWidget
argument_list|()
condition|?
name|parentWidget
argument_list|()
operator|->
name|width
argument_list|()
else|:
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|width
argument_list|()
decl_stmt|;
name|d
operator|->
name|calcActionRects
argument_list|(
name|w
operator|-
operator|(
literal|2
operator|*
name|fw
operator|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|actionRects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
modifier|&
name|actionRect
init|=
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ret
operator|=
name|ret
operator|.
name|expandedTo
argument_list|(
name|QSize
argument_list|(
name|actionRect
operator|.
name|x
argument_list|()
operator|+
name|actionRect
operator|.
name|width
argument_list|()
argument_list|,
name|actionRect
operator|.
name|y
argument_list|()
operator|+
name|actionRect
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//the action geometries already contain the top and left
comment|//margins. So we only need to add those from right and bottom.
name|ret
operator|+=
name|QSize
argument_list|(
name|fw
operator|+
name|hmargin
argument_list|,
name|fw
operator|+
name|vmargin
argument_list|)
expr_stmt|;
block|}
name|int
name|margin
init|=
literal|2
operator|*
name|vmargin
operator|+
literal|2
operator|*
name|fw
operator|+
name|spaceBelowMenuBar
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|leftWidget
condition|)
block|{
name|QSize
name|sz
init|=
name|d
operator|->
name|leftWidget
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setWidth
argument_list|(
name|ret
operator|.
name|width
argument_list|()
operator|+
name|sz
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|+
name|margin
operator|>
name|ret
operator|.
name|height
argument_list|()
condition|)
name|ret
operator|.
name|setHeight
argument_list|(
name|sz
operator|.
name|height
argument_list|()
operator|+
name|margin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|rightWidget
condition|)
block|{
name|QSize
name|sz
init|=
name|d
operator|->
name|rightWidget
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setWidth
argument_list|(
name|ret
operator|.
name|width
argument_list|()
operator|+
name|sz
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|.
name|height
argument_list|()
operator|+
name|margin
operator|>
name|ret
operator|.
name|height
argument_list|()
condition|)
name|ret
operator|.
name|setHeight
argument_list|(
name|sz
operator|.
name|height
argument_list|()
operator|+
name|margin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|as_gui_menubar
condition|)
block|{
name|QStyleOptionMenuItem
name|opt
decl_stmt|;
name|opt
operator|.
name|rect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|opt
operator|.
name|menuRect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
name|opt
operator|.
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|Normal
expr_stmt|;
name|opt
operator|.
name|checkType
operator|=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
expr_stmt|;
name|opt
operator|.
name|palette
operator|=
name|palette
argument_list|()
expr_stmt|;
return|return
operator|(
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_MenuBar
argument_list|,
operator|&
name|opt
argument_list|,
name|ret
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
operator|)
return|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|heightForWidth
name|int
name|QMenuBar
operator|::
name|heightForWidth
parameter_list|(
name|int
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMenuBar
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
specifier|const
name|bool
name|as_gui_menubar
init|=
operator|!
name|isNativeMenuBar
argument_list|()
decl_stmt|;
else|#
directive|else
specifier|const
name|bool
name|as_gui_menubar
init|=
literal|true
decl_stmt|;
endif|#
directive|endif
cast|const_cast
argument_list|<
name|QMenuBarPrivate
operator|*
argument_list|>
argument_list|(
name|d
argument_list|)
operator|->
name|updateGeometries
argument_list|()
expr_stmt|;
name|int
name|height
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|vmargin
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarVMargin
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|int
name|fw
init|=
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarPanelWidth
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|int
name|spaceBelowMenuBar
init|=
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MainWindow_SpaceBelowMenuBar
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|as_gui_menubar
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|actionRects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|height
operator|=
name|qMax
argument_list|(
name|height
argument_list|,
name|d
operator|->
name|actionRects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|height
condition|)
comment|//there is at least one non-null item
name|height
operator|+=
name|spaceBelowMenuBar
expr_stmt|;
name|height
operator|+=
literal|2
operator|*
name|fw
expr_stmt|;
name|height
operator|+=
literal|2
operator|*
name|vmargin
expr_stmt|;
block|}
name|int
name|margin
init|=
literal|2
operator|*
name|vmargin
operator|+
literal|2
operator|*
name|fw
operator|+
name|spaceBelowMenuBar
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|leftWidget
condition|)
name|height
operator|=
name|qMax
argument_list|(
name|d
operator|->
name|leftWidget
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
operator|+
name|margin
argument_list|,
name|height
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|rightWidget
condition|)
name|height
operator|=
name|qMax
argument_list|(
name|d
operator|->
name|rightWidget
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
operator|+
name|margin
argument_list|,
name|height
argument_list|)
expr_stmt|;
if|if
condition|(
name|as_gui_menubar
condition|)
block|{
name|QStyleOptionMenuItem
name|opt
decl_stmt|;
name|opt
operator|.
name|init
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|opt
operator|.
name|menuRect
operator|=
name|rect
argument_list|()
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
name|opt
operator|.
name|menuItemType
operator|=
name|QStyleOptionMenuItem
operator|::
name|Normal
expr_stmt|;
name|opt
operator|.
name|checkType
operator|=
name|QStyleOptionMenuItem
operator|::
name|NotCheckable
expr_stmt|;
return|return
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_MenuBar
argument_list|,
operator|&
name|opt
argument_list|,
name|QSize
argument_list|(
literal|0
argument_list|,
name|height
argument_list|)
argument_list|,
name|this
argument_list|)
operator|.
name|height
argument_list|()
return|;
comment|//not pretty..
block|}
return|return
name|height
return|;
block|}
end_function
begin_comment
comment|/*!   \internal */
end_comment
begin_function
DECL|function|_q_internalShortcutActivated
name|void
name|QMenuBarPrivate
operator|::
name|_q_internalShortcutActivated
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|act
init|=
name|actions
operator|.
name|at
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|setCurrentAction
argument_list|(
name|act
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|act
operator|&&
operator|!
name|act
operator|->
name|menu
argument_list|()
condition|)
block|{
name|activateAction
argument_list|(
name|act
argument_list|,
name|QAction
operator|::
name|Trigger
argument_list|)
expr_stmt|;
comment|//100 is the same as the default value in QPushButton::animateClick
name|autoReleaseTimer
operator|.
name|start
argument_list|(
literal|100
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|act
operator|&&
name|q
operator|->
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_MenuBar_AltKeyNavigation
argument_list|,
literal|0
argument_list|,
name|q
argument_list|)
condition|)
block|{
comment|// When we open a menu using a shortcut, we should end up in keyboard state
name|setKeyboardMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|_q_updateLayout
name|void
name|QMenuBarPrivate
operator|::
name|_q_updateLayout
parameter_list|()
block|{
name|Q_Q
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|itemsDirty
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|q
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|updateGeometries
argument_list|()
expr_stmt|;
name|q
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \fn void QMenuBar::setCornerWidget(QWidget *widget, Qt::Corner corner)      This sets the given \a widget to be shown directly on the left of the first     menu item, or on the right of the last menu item, depending on \a corner.      The menu bar takes ownership of \a widget, reparenting it into the menu bar.     However, if the \a corner already contains a widget, this previous widget     will no longer be managed and will still be a visible child of the menu bar.     \note Using a corner other than Qt::TopRightCorner or Qt::TopLeftCorner     will result in a warning. */
end_comment
begin_function
DECL|function|setCornerWidget
name|void
name|QMenuBar
operator|::
name|setCornerWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|Qt
operator|::
name|Corner
name|corner
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|corner
condition|)
block|{
case|case
name|Qt
operator|::
name|TopLeftCorner
case|:
if|if
condition|(
name|d
operator|->
name|leftWidget
condition|)
name|d
operator|->
name|leftWidget
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|leftWidget
operator|=
name|w
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TopRightCorner
case|:
if|if
condition|(
name|d
operator|->
name|rightWidget
condition|)
name|d
operator|->
name|rightWidget
operator|->
name|removeEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|rightWidget
operator|=
name|w
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QMenuBar::setCornerWidget: Only TopLeftCorner and TopRightCorner are supported"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|w
condition|)
block|{
name|w
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|w
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|_q_updateLayout
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Returns the widget on the left of the first or on the right of the last menu     item, depending on \a corner.     \note Using a corner other than Qt::TopRightCorner or Qt::TopLeftCorner     will result in a warning. */
end_comment
begin_function
DECL|function|cornerWidget
name|QWidget
modifier|*
name|QMenuBar
operator|::
name|cornerWidget
parameter_list|(
name|Qt
operator|::
name|Corner
name|corner
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMenuBar
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|corner
condition|)
block|{
case|case
name|Qt
operator|::
name|TopLeftCorner
case|:
name|w
operator|=
name|d
operator|->
name|leftWidget
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|TopRightCorner
case|:
name|w
operator|=
name|d
operator|->
name|rightWidget
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QMenuBar::cornerWidget: Only TopLeftCorner and TopRightCorner are supported"
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|w
return|;
block|}
end_function
begin_comment
comment|/*!     \property QMenuBar::nativeMenuBar     \brief Whether or not a menubar will be used as a native menubar on platforms that support it     \since 4.6      This property specifies whether or not the menubar should be used as a native menubar on platforms     that support it. The currently supported platforms are Mac OS X and Windows CE. On these platforms     if this property is true, the menubar is used in the native menubar and is not in the window of     its parent, if false the menubar remains in the window. On other platforms the value of this     attribute has no effect.      The default is to follow whether the Qt::AA_DontUseNativeMenuBar attribute     is set for the application. Explicitly settings this property overrides     the presence (or abscence) of the attribute. */
end_comment
begin_function
DECL|function|setNativeMenuBar
name|void
name|QMenuBar
operator|::
name|setNativeMenuBar
parameter_list|(
name|bool
name|nativeMenuBar
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|nativeMenuBar
operator|==
operator|-
literal|1
operator|||
operator|(
name|nativeMenuBar
operator|!=
name|bool
argument_list|(
name|d
operator|->
name|nativeMenuBar
argument_list|)
operator|)
condition|)
block|{
name|d
operator|->
name|nativeMenuBar
operator|=
name|nativeMenuBar
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
if|if
condition|(
operator|!
name|d
operator|->
name|nativeMenuBar
condition|)
block|{
specifier|extern
name|void
name|qt_mac_clear_menubar
argument_list|()
decl_stmt|;
name|qt_mac_clear_menubar
argument_list|()
expr_stmt|;
name|d
operator|->
name|macDestroyMenuBar
argument_list|()
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
modifier|&
name|menubarActions
init|=
name|actions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|menubarActions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QAction
modifier|*
name|action
init|=
name|menubarActions
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|QMenu
modifier|*
name|menu
init|=
name|action
operator|->
name|menu
argument_list|()
condition|)
block|{
operator|delete
name|menu
operator|->
name|d_func
argument_list|()
operator|->
name|mac_menu
expr_stmt|;
name|menu
operator|->
name|d_func
argument_list|()
operator|->
name|mac_menu
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|d
operator|->
name|macCreateMenuBar
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|macUpdateMenuBar
argument_list|()
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|nativeMenuBar
operator|&&
name|parentWidget
argument_list|()
condition|)
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|isNativeMenuBar
name|bool
name|QMenuBar
operator|::
name|isNativeMenuBar
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|nativeMenuBar
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|!
name|QApplication
operator|::
name|instance
argument_list|()
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|AA_DontUseNativeMenuBar
argument_list|)
return|;
block|}
return|return
name|d
operator|->
name|nativeMenuBar
return|;
block|}
end_function
begin_comment
comment|/*!   \since 4.4    Sets the default action to \a act.    The default action is assigned to the left soft key. The menu is assigned   to the right soft key.    Currently there is only support for the default action on Windows   Mobile. On all other platforms this method is not available.    \sa defaultAction() */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_WINCE
end_ifdef
begin_function
DECL|function|setDefaultAction
name|void
name|QMenuBar
operator|::
name|setDefaultAction
parameter_list|(
name|QAction
modifier|*
name|act
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|defaultAction
operator|==
name|act
condition|)
return|return;
ifdef|#
directive|ifdef
name|Q_WS_WINCE
if|if
condition|(
name|qt_wince_is_mobile
argument_list|()
condition|)
if|if
condition|(
name|d
operator|->
name|defaultAction
condition|)
block|{
name|disconnect
argument_list|(
name|d
operator|->
name|defaultAction
argument_list|,
name|SIGNAL
argument_list|(
name|changed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_updateDefaultAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|d
operator|->
name|defaultAction
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_updateDefaultAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|d
operator|->
name|defaultAction
operator|=
name|act
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WINCE
if|if
condition|(
name|qt_wince_is_mobile
argument_list|()
condition|)
if|if
condition|(
name|d
operator|->
name|defaultAction
condition|)
block|{
name|connect
argument_list|(
name|d
operator|->
name|defaultAction
argument_list|,
name|SIGNAL
argument_list|(
name|changed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_updateDefaultAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|defaultAction
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_updateDefaultAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|wce_menubar
condition|)
block|{
name|d
operator|->
name|wce_menubar
operator|->
name|rebuild
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!   \since 4.4    Returns the current default action.    \sa setDefaultAction() */
end_comment
begin_function
DECL|function|defaultAction
name|QAction
modifier|*
name|QMenuBar
operator|::
name|defaultAction
parameter_list|()
specifier|const
block|{
return|return
name|d_func
argument_list|()
operator|->
name|defaultAction
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \fn void QMenuBar::triggered(QAction *action)      This signal is emitted when an action in a menu belonging to this menubar     is triggered as a result of a mouse click; \a action is the action that     caused the signal to be emitted.      Normally, you connect each menu action to a single slot using     QAction::triggered(), but sometimes you will want to connect     several items to a single slot (most often if the user selects     from an array). This signal is useful in such cases.      \sa hovered(), QAction::triggered() */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::hovered(QAction *action)      This signal is emitted when a menu action is highlighted; \a action     is the action that caused the event to be sent.      Often this is used to update status information.      \sa triggered(), QAction::hovered() */
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT3_SUPPORT
end_ifdef
begin_comment
comment|/*!     Use style()->pixelMetric(QStyle::PM_MenuBarPanelWidth, this)     instead. */
end_comment
begin_function
DECL|function|frameWidth
name|int
name|QMenuBar
operator|::
name|frameWidth
parameter_list|()
specifier|const
block|{
return|return
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuBarPanelWidth
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|insertAny
name|int
name|QMenuBar
operator|::
name|insertAny
parameter_list|(
specifier|const
name|QIcon
modifier|*
name|icon
parameter_list|,
specifier|const
name|QString
modifier|*
name|text
parameter_list|,
specifier|const
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|,
specifier|const
name|QKeySequence
modifier|*
name|shortcut
parameter_list|,
specifier|const
name|QMenu
modifier|*
name|popup
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|QAction
modifier|*
name|act
init|=
name|popup
condition|?
name|popup
operator|->
name|menuAction
argument_list|()
else|:
operator|new
name|QAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
operator|-
literal|1
condition|)
cast|static_cast
argument_list|<
name|QMenuItem
operator|*
argument_list|>
argument_list|(
name|act
argument_list|)
operator|->
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|icon
condition|)
name|act
operator|->
name|setIcon
argument_list|(
operator|*
name|icon
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
condition|)
name|act
operator|->
name|setText
argument_list|(
operator|*
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|shortcut
condition|)
name|act
operator|->
name|setShortcut
argument_list|(
operator|*
name|shortcut
argument_list|)
expr_stmt|;
if|if
condition|(
name|receiver
operator|&&
name|member
condition|)
name|QObject
operator|::
name|connect
argument_list|(
name|act
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
operator|||
name|index
operator|>=
name|actions
argument_list|()
operator|.
name|count
argument_list|()
condition|)
name|addAction
argument_list|(
name|act
argument_list|)
expr_stmt|;
else|else
name|insertAction
argument_list|(
name|actions
argument_list|()
operator|.
name|value
argument_list|(
name|index
argument_list|)
argument_list|,
name|act
argument_list|)
expr_stmt|;
return|return
name|findIdForAction
argument_list|(
name|act
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \since 4.2      Use addSeparator() or insertAction() instead.      \oldcode         menuBar->insertSeparator();     \newcode         menuBar->addSeparator();     \endcode */
end_comment
begin_function
DECL|function|insertSeparator
name|int
name|QMenuBar
operator|::
name|insertSeparator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|QAction
modifier|*
name|act
init|=
operator|new
name|QAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|act
operator|->
name|setSeparator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
operator|||
name|index
operator|>=
name|actions
argument_list|()
operator|.
name|count
argument_list|()
condition|)
name|addAction
argument_list|(
name|act
argument_list|)
expr_stmt|;
else|else
name|insertAction
argument_list|(
name|actions
argument_list|()
operator|.
name|value
argument_list|(
name|index
argument_list|)
argument_list|,
name|act
argument_list|)
expr_stmt|;
return|return
name|findIdForAction
argument_list|(
name|act
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Use QAction::setData() instead. */
end_comment
begin_function
DECL|function|setItemParameter
name|bool
name|QMenuBar
operator|::
name|setItemParameter
parameter_list|(
name|int
name|id
parameter_list|,
name|int
name|param
parameter_list|)
block|{
if|if
condition|(
name|QAction
modifier|*
name|act
init|=
name|findActionForId
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|act
operator|->
name|d_func
argument_list|()
operator|->
name|param
operator|=
name|param
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     Use QAction::data() instead. */
end_comment
begin_function
DECL|function|itemParameter
name|int
name|QMenuBar
operator|::
name|itemParameter
parameter_list|(
name|int
name|id
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|QAction
modifier|*
name|act
init|=
name|findActionForId
argument_list|(
name|id
argument_list|)
condition|)
return|return
name|act
operator|->
name|d_func
argument_list|()
operator|->
name|param
return|;
return|return
name|id
return|;
block|}
end_function
begin_function
DECL|function|findActionForId
name|QAction
modifier|*
name|QMenuBar
operator|::
name|findActionForId
parameter_list|(
name|int
name|id
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|list
init|=
name|actions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QAction
modifier|*
name|act
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|findIdForAction
argument_list|(
name|act
argument_list|)
operator|==
name|id
condition|)
return|return
name|act
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|findIdForAction
name|int
name|QMenuBar
operator|::
name|findIdForAction
parameter_list|(
name|QAction
modifier|*
name|act
parameter_list|)
specifier|const
block|{
name|Q_ASSERT
argument_list|(
name|act
argument_list|)
expr_stmt|;
return|return
name|act
operator|->
name|d_func
argument_list|()
operator|->
name|id
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \enum QMenuBar::Separator      \compat      \value Never     \value InWindowsStyle  */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::addAction(QAction *action)     \overload      Appends the action \a action to the menu bar's list of actions.      \sa QMenu::addAction(), QWidget::addAction(), QWidget::actions() */
end_comment
begin_comment
comment|/*!     \fn uint QMenuBar::count() const      Use actions().count() instead. */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::insertItem(const QString&text, const QObject *receiver, const char* member, const QKeySequence& shortcut, int id, int index)      Use one of the insertAction() or addAction() overloads instead. */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::insertItem(const QIcon& icon, const QString&text, const QObject *receiver, const char* member, const QKeySequence& shortcut, int id, int index)      Use one of the insertAction() or addAction() overloads instead. */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::insertItem(const QPixmap&pixmap, const QObject *receiver, const char* member, const QKeySequence& shortcut, int id, int index)      Use one of the insertAction(), addAction(), insertMenu(), or     addMenu() overloads instead. */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::insertItem(const QString&text, int id, int index)      Use one of the insertAction() or addAction() overloads instead. */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::insertItem(const QIcon& icon, const QString&text, int id, int index)      Use one of the insertAction(), addAction(), insertMenu(), or     addMenu() overloads instead. */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::insertItem(const QString&text, QMenu *popup, int id, int index)      Use one of the insertMenu(), or addMenu() overloads instead. */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::insertItem(const QIcon& icon, const QString&text, QMenu *popup, int id, int index)      Use one of the insertMenu(), or addMenu() overloads instead. */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::insertItem(const QPixmap&pixmap, int id, int index)      Use one of the insertAction(), addAction(), insertMenu(), or     addMenu() overloads instead. */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::insertItem(const QPixmap&pixmap, QMenu *popup, int id, int index)      Use one of the insertMenu(), or addMenu() overloads instead. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::removeItem(int id)      Use removeAction() instead. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::removeItemAt(int index)      Use removeAction() instead. */
end_comment
begin_comment
comment|/*!     \fn QKeySequence QMenuBar::accel(int id) const      Use shortcut() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::setAccel(const QKeySequence& key, int id)      Use setShortcut() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn QIcon QMenuBar::iconSet(int id) const      Use icon() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn QString QMenuBar::text(int id) const      Use text() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn QPixmap QMenuBar::pixmap(int id) const      Use QPixmap(icon()) on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::setWhatsThis(int id, const QString&w)      Use setWhatsThis() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn QString QMenuBar::whatsThis(int id) const      Use whatsThis() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::changeItem(int id, const QString&text)      Use setText() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::changeItem(int id, const QPixmap&pixmap)      Use setText() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::changeItem(int id, const QIcon&icon, const QString&text)      Use setIcon() and setText() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn bool QMenuBar::isItemActive(int id) const      Use activeAction() instead. */
end_comment
begin_comment
comment|/*!     \fn bool QMenuBar::isItemEnabled(int id) const      Use isEnabled() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::setItemEnabled(int id, bool enable)      Use setEnabled() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn bool QMenuBar::isItemChecked(int id) const      Use isChecked() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::setItemChecked(int id, bool check)      Use setChecked() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn bool QMenuBar::isItemVisible(int id) const      Use isVisible() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::setItemVisible(int id, bool visible)      Use setVisible() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::indexOf(int id) const      Use actions().indexOf(action) on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::idAt(int index) const      Use actions instead. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::activateItemAt(int index)      Use activate() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn bool QMenuBar::connectItem(int id, const QObject *receiver, const char* member)      Use connect() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn bool QMenuBar::disconnectItem(int id,const QObject *receiver, const char* member)      Use disconnect() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn QMenuItem *QMenuBar::findItem(int id) const      Use actions instead. */
end_comment
begin_comment
comment|/*!     \fn Separator QMenuBar::separator() const      This function is provided only to make old code compile. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::setSeparator(Separator sep)      This function is provided only to make old code compile. */
end_comment
begin_comment
comment|/*!     \fn QRect QMenuBar::itemRect(int index)      Use actionGeometry() on the relevant QAction instead. */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::itemAtPos(const QPoint&p)      There is no equivalent way to achieve this in Qt 4. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::activated(int itemId);      Use triggered() instead. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::highlighted(int itemId);      Use hovered() instead. */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::setFrameRect(QRect)     \internal */
end_comment
begin_comment
comment|/*!     \fn QRect QMenuBar::frameRect() const     \internal */
end_comment
begin_comment
comment|/*!     \enum QMenuBar::DummyFrame     \internal      \value Box     \value Sunken     \value Plain     \value Raised     \value MShadow     \value NoFrame     \value Panel     \value StyledPanel     \value HLine     \value VLine     \value GroupBoxPanel     \value WinPanel     \value ToolBarPanel     \value MenuBarPanel     \value PopupPanel     \value LineEditPanel     \value TabWidgetPanel     \value MShape */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::setFrameShadow(DummyFrame)     \internal */
end_comment
begin_comment
comment|/*!     \fn DummyFrame QMenuBar::frameShadow() const     \internal */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::setFrameShape(DummyFrame)     \internal */
end_comment
begin_comment
comment|/*!     \fn DummyFrame QMenuBar::frameShape() const     \internal */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::setFrameStyle(int)     \internal */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::frameStyle() const     \internal */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::setLineWidth(int)     \internal */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::lineWidth() const     \internal */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::setMargin(int margin)     Sets the width of the margin around the contents of the widget to \a margin.      Use QWidget::setContentsMargins() instead.     \sa margin(), QWidget::setContentsMargins() */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::margin() const     Returns the width of the margin around the contents of the widget.      Use QWidget::getContentsMargins() instead.     \sa setMargin(), QWidget::getContentsMargins() */
end_comment
begin_comment
comment|/*!     \fn void QMenuBar::setMidLineWidth(int)     \internal */
end_comment
begin_comment
comment|/*!     \fn int QMenuBar::midLineWidth() const     \internal */
end_comment
begin_comment
comment|// for private slots
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_include
include|#
directive|include
file|<moc_qmenubar.cpp>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_MENUBAR
end_comment
end_unit
