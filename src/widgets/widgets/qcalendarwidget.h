begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QCALENDARWIDGET_H
end_ifndef
begin_define
DECL|macro|QCALENDARWIDGET_H
define|#
directive|define
name|QCALENDARWIDGET_H
end_define
begin_include
include|#
directive|include
file|<QtGui/qwidget.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdatetime.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
name|QT_MODULE
argument_list|(
name|Gui
argument_list|)
ifndef|#
directive|ifndef
name|QT_NO_CALENDARWIDGET
name|class
name|QDate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextCharFormat
name|class
name|QTextCharFormat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QCalendarWidgetPrivate
name|class
name|QCalendarWidgetPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_GUI_EXPORT
name|QCalendarWidget
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|Q_ENUMS
argument_list|(
argument|Qt::DayOfWeek
argument_list|)
name|Q_ENUMS
argument_list|(
argument|HorizontalHeaderFormat
argument_list|)
name|Q_ENUMS
argument_list|(
argument|VerticalHeaderFormat
argument_list|)
name|Q_ENUMS
argument_list|(
argument|SelectionMode
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QDate selectedDate READ selectedDate WRITE setSelectedDate
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QDate minimumDate READ minimumDate WRITE setMinimumDate
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QDate maximumDate READ maximumDate WRITE setMaximumDate
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::DayOfWeek firstDayOfWeek READ firstDayOfWeek WRITE setFirstDayOfWeek
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool gridVisible READ isGridVisible WRITE setGridVisible
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|SelectionMode selectionMode READ selectionMode WRITE setSelectionMode
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|HorizontalHeaderFormat horizontalHeaderFormat READ horizontalHeaderFormat WRITE setHorizontalHeaderFormat
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|VerticalHeaderFormat verticalHeaderFormat READ verticalHeaderFormat WRITE setVerticalHeaderFormat
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool headerVisible READ isHeaderVisible WRITE setHeaderVisible STORED false DESIGNABLE false
argument_list|)
comment|// obsolete
name|Q_PROPERTY
argument_list|(
argument|bool navigationBarVisible READ isNavigationBarVisible WRITE setNavigationBarVisible
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool dateEditEnabled READ isDateEditEnabled WRITE setDateEditEnabled
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int dateEditAcceptDelay READ dateEditAcceptDelay WRITE setDateEditAcceptDelay
argument_list|)
name|public
operator|:
expr|enum
name|HorizontalHeaderFormat
block|{
name|NoHorizontalHeader
block|,
name|SingleLetterDayNames
block|,
name|ShortDayNames
block|,
name|LongDayNames
block|}
block|;      enum
name|VerticalHeaderFormat
block|{
name|NoVerticalHeader
block|,
name|ISOWeekNumbers
block|}
block|;      enum
name|SelectionMode
block|{
name|NoSelection
block|,
name|SingleSelection
block|}
block|;
name|explicit
name|QCalendarWidget
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QCalendarWidget
argument_list|()
block|;
name|virtual
name|QSize
name|sizeHint
argument_list|()
specifier|const
block|;
name|virtual
name|QSize
name|minimumSizeHint
argument_list|()
specifier|const
block|;
name|QDate
name|selectedDate
argument_list|()
specifier|const
block|;
name|int
name|yearShown
argument_list|()
specifier|const
block|;
name|int
name|monthShown
argument_list|()
specifier|const
block|;
name|QDate
name|minimumDate
argument_list|()
specifier|const
block|;
name|void
name|setMinimumDate
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|)
block|;
name|QDate
name|maximumDate
argument_list|()
specifier|const
block|;
name|void
name|setMaximumDate
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|)
block|;
name|Qt
operator|::
name|DayOfWeek
name|firstDayOfWeek
argument_list|()
specifier|const
block|;
name|void
name|setFirstDayOfWeek
argument_list|(
argument|Qt::DayOfWeek dayOfWeek
argument_list|)
block|;
comment|// ### Qt 5: eliminate these two
name|bool
name|isHeaderVisible
argument_list|()
specifier|const
block|;
name|void
name|setHeaderVisible
argument_list|(
argument|bool show
argument_list|)
block|;
specifier|inline
name|bool
name|isNavigationBarVisible
argument_list|()
specifier|const
block|{
return|return
name|isHeaderVisible
argument_list|()
return|;
block|}
name|bool
name|isGridVisible
argument_list|()
specifier|const
block|;
name|SelectionMode
name|selectionMode
argument_list|()
specifier|const
block|;
name|void
name|setSelectionMode
argument_list|(
argument|SelectionMode mode
argument_list|)
block|;
name|HorizontalHeaderFormat
name|horizontalHeaderFormat
argument_list|()
specifier|const
block|;
name|void
name|setHorizontalHeaderFormat
argument_list|(
argument|HorizontalHeaderFormat format
argument_list|)
block|;
name|VerticalHeaderFormat
name|verticalHeaderFormat
argument_list|()
specifier|const
block|;
name|void
name|setVerticalHeaderFormat
argument_list|(
argument|VerticalHeaderFormat format
argument_list|)
block|;
name|QTextCharFormat
name|headerTextFormat
argument_list|()
specifier|const
block|;
name|void
name|setHeaderTextFormat
argument_list|(
specifier|const
name|QTextCharFormat
operator|&
name|format
argument_list|)
block|;
name|QTextCharFormat
name|weekdayTextFormat
argument_list|(
argument|Qt::DayOfWeek dayOfWeek
argument_list|)
specifier|const
block|;
name|void
name|setWeekdayTextFormat
argument_list|(
argument|Qt::DayOfWeek dayOfWeek
argument_list|,
argument|const QTextCharFormat&format
argument_list|)
block|;
name|QMap
operator|<
name|QDate
block|,
name|QTextCharFormat
operator|>
name|dateTextFormat
argument_list|()
specifier|const
block|;
name|QTextCharFormat
name|dateTextFormat
argument_list|(
argument|const QDate&date
argument_list|)
specifier|const
block|;
name|void
name|setDateTextFormat
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|,
specifier|const
name|QTextCharFormat
operator|&
name|format
argument_list|)
block|;
name|bool
name|isDateEditEnabled
argument_list|()
specifier|const
block|;
name|void
name|setDateEditEnabled
argument_list|(
argument|bool enable
argument_list|)
block|;
name|int
name|dateEditAcceptDelay
argument_list|()
specifier|const
block|;
name|void
name|setDateEditAcceptDelay
argument_list|(
argument|int delay
argument_list|)
block|;
name|protected
operator|:
name|bool
name|event
argument_list|(
name|QEvent
operator|*
name|event
argument_list|)
block|;
name|bool
name|eventFilter
argument_list|(
name|QObject
operator|*
name|watched
argument_list|,
name|QEvent
operator|*
name|event
argument_list|)
block|;
name|void
name|mousePressEvent
argument_list|(
name|QMouseEvent
operator|*
name|event
argument_list|)
block|;
name|void
name|resizeEvent
argument_list|(
name|QResizeEvent
operator|*
name|event
argument_list|)
block|;
name|void
name|keyPressEvent
argument_list|(
name|QKeyEvent
operator|*
name|event
argument_list|)
block|;
name|virtual
name|void
name|paintCell
argument_list|(
argument|QPainter *painter
argument_list|,
argument|const QRect&rect
argument_list|,
argument|const QDate&date
argument_list|)
specifier|const
block|;
name|void
name|updateCell
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|)
block|;
name|void
name|updateCells
argument_list|()
block|;
name|public
name|Q_SLOTS
operator|:
name|void
name|setSelectedDate
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|)
block|;
name|void
name|setDateRange
argument_list|(
specifier|const
name|QDate
operator|&
name|min
argument_list|,
specifier|const
name|QDate
operator|&
name|max
argument_list|)
block|;
name|void
name|setCurrentPage
argument_list|(
argument|int year
argument_list|,
argument|int month
argument_list|)
block|;
name|void
name|setGridVisible
argument_list|(
argument|bool show
argument_list|)
block|;
name|void
name|setNavigationBarVisible
argument_list|(
argument|bool visible
argument_list|)
block|;
name|void
name|showNextMonth
argument_list|()
block|;
name|void
name|showPreviousMonth
argument_list|()
block|;
name|void
name|showNextYear
argument_list|()
block|;
name|void
name|showPreviousYear
argument_list|()
block|;
name|void
name|showSelectedDate
argument_list|()
block|;
name|void
name|showToday
argument_list|()
block|;
name|Q_SIGNALS
operator|:
name|void
name|selectionChanged
argument_list|()
block|;
name|void
name|clicked
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|)
block|;
name|void
name|activated
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|)
block|;
name|void
name|currentPageChanged
argument_list|(
argument|int year
argument_list|,
argument|int month
argument_list|)
block|;
name|private
operator|:
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QCalendarWidget
argument_list|)
name|Q_DISABLE_COPY
argument_list|(
argument|QCalendarWidget
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_slotShowDate(const QDate&date)
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_slotChangeDate(const QDate&date)
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_slotChangeDate(const QDate&date, bool changeMonth)
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_editingFinished()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_prevMonthClicked()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_nextMonthClicked()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_yearEditingFinished()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_yearClicked()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_monthChanged(QAction *act)
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CALENDARWIDGET
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QCALENDARWIDGET_H
end_comment
end_unit
