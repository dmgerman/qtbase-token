begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtWidgets module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QCALENDARWIDGET_H
end_ifndef
begin_define
DECL|macro|QCALENDARWIDGET_H
define|#
directive|define
name|QCALENDARWIDGET_H
end_define
begin_include
include|#
directive|include
file|<QtWidgets/qwidget.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdatetime.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_CALENDARWIDGET
DECL|variable|QDate
name|class
name|QDate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextCharFormat
name|class
name|QTextCharFormat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QCalendarWidgetPrivate
name|class
name|QCalendarWidgetPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_WIDGETS_EXPORT
name|QCalendarWidget
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|Q_ENUMS
argument_list|(
argument|Qt::DayOfWeek
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QDate selectedDate READ selectedDate WRITE setSelectedDate
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QDate minimumDate READ minimumDate WRITE setMinimumDate
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QDate maximumDate READ maximumDate WRITE setMaximumDate
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::DayOfWeek firstDayOfWeek READ firstDayOfWeek WRITE setFirstDayOfWeek
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool gridVisible READ isGridVisible WRITE setGridVisible
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|SelectionMode selectionMode READ selectionMode WRITE setSelectionMode
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|HorizontalHeaderFormat horizontalHeaderFormat READ horizontalHeaderFormat WRITE setHorizontalHeaderFormat
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|VerticalHeaderFormat verticalHeaderFormat READ verticalHeaderFormat WRITE setVerticalHeaderFormat
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool navigationBarVisible READ isNavigationBarVisible WRITE setNavigationBarVisible
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool dateEditEnabled READ isDateEditEnabled WRITE setDateEditEnabled
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int dateEditAcceptDelay READ dateEditAcceptDelay WRITE setDateEditAcceptDelay
argument_list|)
name|public
operator|:
expr|enum
name|HorizontalHeaderFormat
block|{
name|NoHorizontalHeader
block|,
name|SingleLetterDayNames
block|,
name|ShortDayNames
block|,
name|LongDayNames
block|}
block|;
name|Q_ENUM
argument_list|(
name|HorizontalHeaderFormat
argument_list|)
expr|enum
name|VerticalHeaderFormat
block|{
name|NoVerticalHeader
block|,
name|ISOWeekNumbers
block|}
block|;
name|Q_ENUM
argument_list|(
name|VerticalHeaderFormat
argument_list|)
expr|enum
name|SelectionMode
block|{
name|NoSelection
block|,
name|SingleSelection
block|}
block|;
name|Q_ENUM
argument_list|(
argument|SelectionMode
argument_list|)
name|explicit
name|QCalendarWidget
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
name|Q_NULLPTR
argument_list|)
block|;
operator|~
name|QCalendarWidget
argument_list|()
block|;
name|virtual
name|QSize
name|sizeHint
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|QSize
name|minimumSizeHint
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|QDate
name|selectedDate
argument_list|()
specifier|const
block|;
name|int
name|yearShown
argument_list|()
specifier|const
block|;
name|int
name|monthShown
argument_list|()
specifier|const
block|;
name|QDate
name|minimumDate
argument_list|()
specifier|const
block|;
name|void
name|setMinimumDate
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|)
block|;
name|QDate
name|maximumDate
argument_list|()
specifier|const
block|;
name|void
name|setMaximumDate
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|)
block|;
name|Qt
operator|::
name|DayOfWeek
name|firstDayOfWeek
argument_list|()
specifier|const
block|;
name|void
name|setFirstDayOfWeek
argument_list|(
argument|Qt::DayOfWeek dayOfWeek
argument_list|)
block|;
name|bool
name|isNavigationBarVisible
argument_list|()
specifier|const
block|;
name|bool
name|isGridVisible
argument_list|()
specifier|const
block|;
name|SelectionMode
name|selectionMode
argument_list|()
specifier|const
block|;
name|void
name|setSelectionMode
argument_list|(
argument|SelectionMode mode
argument_list|)
block|;
name|HorizontalHeaderFormat
name|horizontalHeaderFormat
argument_list|()
specifier|const
block|;
name|void
name|setHorizontalHeaderFormat
argument_list|(
argument|HorizontalHeaderFormat format
argument_list|)
block|;
name|VerticalHeaderFormat
name|verticalHeaderFormat
argument_list|()
specifier|const
block|;
name|void
name|setVerticalHeaderFormat
argument_list|(
argument|VerticalHeaderFormat format
argument_list|)
block|;
name|QTextCharFormat
name|headerTextFormat
argument_list|()
specifier|const
block|;
name|void
name|setHeaderTextFormat
argument_list|(
specifier|const
name|QTextCharFormat
operator|&
name|format
argument_list|)
block|;
name|QTextCharFormat
name|weekdayTextFormat
argument_list|(
argument|Qt::DayOfWeek dayOfWeek
argument_list|)
specifier|const
block|;
name|void
name|setWeekdayTextFormat
argument_list|(
argument|Qt::DayOfWeek dayOfWeek
argument_list|,
argument|const QTextCharFormat&format
argument_list|)
block|;
name|QMap
operator|<
name|QDate
block|,
name|QTextCharFormat
operator|>
name|dateTextFormat
argument_list|()
specifier|const
block|;
name|QTextCharFormat
name|dateTextFormat
argument_list|(
argument|const QDate&date
argument_list|)
specifier|const
block|;
name|void
name|setDateTextFormat
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|,
specifier|const
name|QTextCharFormat
operator|&
name|format
argument_list|)
block|;
name|bool
name|isDateEditEnabled
argument_list|()
specifier|const
block|;
name|void
name|setDateEditEnabled
argument_list|(
argument|bool enable
argument_list|)
block|;
name|int
name|dateEditAcceptDelay
argument_list|()
specifier|const
block|;
name|void
name|setDateEditAcceptDelay
argument_list|(
argument|int delay
argument_list|)
block|;
name|protected
operator|:
name|bool
name|event
argument_list|(
argument|QEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|eventFilter
argument_list|(
argument|QObject *watched
argument_list|,
argument|QEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|mousePressEvent
argument_list|(
argument|QMouseEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|resizeEvent
argument_list|(
argument|QResizeEvent * event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|keyPressEvent
argument_list|(
argument|QKeyEvent * event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|paintCell
argument_list|(
argument|QPainter *painter
argument_list|,
argument|const QRect&rect
argument_list|,
argument|const QDate&date
argument_list|)
specifier|const
block|;
name|void
name|updateCell
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|)
block|;
name|void
name|updateCells
argument_list|()
block|;
name|public
name|Q_SLOTS
operator|:
name|void
name|setSelectedDate
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|)
block|;
name|void
name|setDateRange
argument_list|(
specifier|const
name|QDate
operator|&
name|min
argument_list|,
specifier|const
name|QDate
operator|&
name|max
argument_list|)
block|;
name|void
name|setCurrentPage
argument_list|(
argument|int year
argument_list|,
argument|int month
argument_list|)
block|;
name|void
name|setGridVisible
argument_list|(
argument|bool show
argument_list|)
block|;
name|void
name|setNavigationBarVisible
argument_list|(
argument|bool visible
argument_list|)
block|;
name|void
name|showNextMonth
argument_list|()
block|;
name|void
name|showPreviousMonth
argument_list|()
block|;
name|void
name|showNextYear
argument_list|()
block|;
name|void
name|showPreviousYear
argument_list|()
block|;
name|void
name|showSelectedDate
argument_list|()
block|;
name|void
name|showToday
argument_list|()
block|;
name|Q_SIGNALS
operator|:
name|void
name|selectionChanged
argument_list|()
block|;
name|void
name|clicked
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|)
block|;
name|void
name|activated
argument_list|(
specifier|const
name|QDate
operator|&
name|date
argument_list|)
block|;
name|void
name|currentPageChanged
argument_list|(
argument|int year
argument_list|,
argument|int month
argument_list|)
block|;
name|private
operator|:
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QCalendarWidget
argument_list|)
name|Q_DISABLE_COPY
argument_list|(
argument|QCalendarWidget
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_slotShowDate(const QDate&date)
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_slotChangeDate(const QDate&date)
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_slotChangeDate(const QDate&date, bool changeMonth)
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_editingFinished()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_prevMonthClicked()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_nextMonthClicked()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_yearEditingFinished()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_yearClicked()
argument_list|)
name|Q_PRIVATE_SLOT
argument_list|(
argument|d_func()
argument_list|,
argument|void _q_monthChanged(QAction *act)
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_CALENDARWIDGET
end_comment
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QCALENDARWIDGET_H
end_comment
end_unit
