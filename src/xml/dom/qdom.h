begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtXml module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QDOM_H
end_ifndef
begin_define
DECL|macro|QDOM_H
define|#
directive|define
name|QDOM_H
end_define
begin_include
include|#
directive|include
file|<QtXml/qtxmlglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|QT_NO_DOM
DECL|variable|QIODevice
name|class
name|QIODevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextStream
name|class
name|QTextStream
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlInputSource
name|class
name|QXmlInputSource
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlReader
name|class
name|QXmlReader
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomDocumentPrivate
name|class
name|QDomDocumentPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomDocumentTypePrivate
name|class
name|QDomDocumentTypePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomDocumentFragmentPrivate
name|class
name|QDomDocumentFragmentPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomNodePrivate
name|class
name|QDomNodePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomNodeListPrivate
name|class
name|QDomNodeListPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomImplementationPrivate
name|class
name|QDomImplementationPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomElementPrivate
name|class
name|QDomElementPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomNotationPrivate
name|class
name|QDomNotationPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomEntityPrivate
name|class
name|QDomEntityPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomEntityReferencePrivate
name|class
name|QDomEntityReferencePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomProcessingInstructionPrivate
name|class
name|QDomProcessingInstructionPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomAttrPrivate
name|class
name|QDomAttrPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomCharacterDataPrivate
name|class
name|QDomCharacterDataPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomTextPrivate
name|class
name|QDomTextPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomCommentPrivate
name|class
name|QDomCommentPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomCDATASectionPrivate
name|class
name|QDomCDATASectionPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomNamedNodeMapPrivate
name|class
name|QDomNamedNodeMapPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomImplementationPrivate
name|class
name|QDomImplementationPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomNodeList
name|class
name|QDomNodeList
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomElement
name|class
name|QDomElement
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomText
name|class
name|QDomText
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomComment
name|class
name|QDomComment
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomCDATASection
name|class
name|QDomCDATASection
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomProcessingInstruction
name|class
name|QDomProcessingInstruction
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomAttr
name|class
name|QDomAttr
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomEntityReference
name|class
name|QDomEntityReference
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomDocument
name|class
name|QDomDocument
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomNamedNodeMap
name|class
name|QDomNamedNodeMap
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomDocument
name|class
name|QDomDocument
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomDocumentFragment
name|class
name|QDomDocumentFragment
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomDocumentType
name|class
name|QDomDocumentType
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomImplementation
name|class
name|QDomImplementation
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomNode
name|class
name|QDomNode
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomEntity
name|class
name|QDomEntity
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomNotation
name|class
name|QDomNotation
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QDomCharacterData
name|class
name|QDomCharacterData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomImplementation
block|{
name|public
label|:
name|QDomImplementation
argument_list|()
expr_stmt|;
name|QDomImplementation
argument_list|(
specifier|const
name|QDomImplementation
operator|&
argument_list|)
expr_stmt|;
operator|~
name|QDomImplementation
argument_list|()
expr_stmt|;
name|QDomImplementation
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QDomImplementation
operator|&
operator|)
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QDomImplementation
operator|&
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QDomImplementation
operator|&
operator|)
specifier|const
expr_stmt|;
comment|// functions
name|bool
name|hasFeature
argument_list|(
specifier|const
name|QString
operator|&
name|feature
argument_list|,
specifier|const
name|QString
operator|&
name|version
argument_list|)
decl|const
decl_stmt|;
name|QDomDocumentType
name|createDocumentType
parameter_list|(
specifier|const
name|QString
modifier|&
name|qName
parameter_list|,
specifier|const
name|QString
modifier|&
name|publicId
parameter_list|,
specifier|const
name|QString
modifier|&
name|systemId
parameter_list|)
function_decl|;
name|QDomDocument
name|createDocument
parameter_list|(
specifier|const
name|QString
modifier|&
name|nsURI
parameter_list|,
specifier|const
name|QString
modifier|&
name|qName
parameter_list|,
specifier|const
name|QDomDocumentType
modifier|&
name|doctype
parameter_list|)
function_decl|;
enum|enum
name|InvalidDataPolicy
block|{
name|AcceptInvalidChars
init|=
literal|0
block|,
name|DropInvalidChars
block|,
name|ReturnNullNode
block|}
enum|;
specifier|static
name|InvalidDataPolicy
name|invalidDataPolicy
parameter_list|()
function_decl|;
specifier|static
name|void
name|setInvalidDataPolicy
parameter_list|(
name|InvalidDataPolicy
name|policy
parameter_list|)
function_decl|;
comment|// Qt extension
name|bool
name|isNull
parameter_list|()
function_decl|;
name|private
label|:
name|QDomImplementationPrivate
modifier|*
name|impl
decl_stmt|;
name|QDomImplementation
argument_list|(
name|QDomImplementationPrivate
operator|*
argument_list|)
expr_stmt|;
name|friend
name|class
name|QDomDocument
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomNode
block|{
name|public
label|:
enum|enum
name|NodeType
block|{
name|ElementNode
init|=
literal|1
block|,
name|AttributeNode
init|=
literal|2
block|,
name|TextNode
init|=
literal|3
block|,
name|CDATASectionNode
init|=
literal|4
block|,
name|EntityReferenceNode
init|=
literal|5
block|,
name|EntityNode
init|=
literal|6
block|,
name|ProcessingInstructionNode
init|=
literal|7
block|,
name|CommentNode
init|=
literal|8
block|,
name|DocumentNode
init|=
literal|9
block|,
name|DocumentTypeNode
init|=
literal|10
block|,
name|DocumentFragmentNode
init|=
literal|11
block|,
name|NotationNode
init|=
literal|12
block|,
name|BaseNode
init|=
literal|21
block|,
comment|// this is not in the standard
name|CharacterDataNode
init|=
literal|22
comment|// this is not in the standard
block|}
enum|;
enum|enum
name|EncodingPolicy
block|{
name|EncodingFromDocument
init|=
literal|1
block|,
name|EncodingFromTextStream
init|=
literal|2
block|}
enum|;
name|QDomNode
argument_list|()
expr_stmt|;
name|QDomNode
argument_list|(
specifier|const
name|QDomNode
operator|&
argument_list|)
expr_stmt|;
name|QDomNode
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QDomNode
operator|&
operator|)
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QDomNode
operator|&
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QDomNode
operator|&
operator|)
specifier|const
expr_stmt|;
operator|~
name|QDomNode
argument_list|()
expr_stmt|;
comment|// DOM functions
name|QDomNode
name|insertBefore
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|newChild
parameter_list|,
specifier|const
name|QDomNode
modifier|&
name|refChild
parameter_list|)
function_decl|;
name|QDomNode
name|insertAfter
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|newChild
parameter_list|,
specifier|const
name|QDomNode
modifier|&
name|refChild
parameter_list|)
function_decl|;
name|QDomNode
name|replaceChild
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|newChild
parameter_list|,
specifier|const
name|QDomNode
modifier|&
name|oldChild
parameter_list|)
function_decl|;
name|QDomNode
name|removeChild
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|oldChild
parameter_list|)
function_decl|;
name|QDomNode
name|appendChild
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|newChild
parameter_list|)
function_decl|;
name|bool
name|hasChildNodes
argument_list|()
specifier|const
expr_stmt|;
name|QDomNode
name|cloneNode
argument_list|(
name|bool
name|deep
operator|=
name|true
argument_list|)
decl|const
decl_stmt|;
name|void
name|normalize
parameter_list|()
function_decl|;
name|bool
name|isSupported
argument_list|(
specifier|const
name|QString
operator|&
name|feature
argument_list|,
specifier|const
name|QString
operator|&
name|version
argument_list|)
decl|const
decl_stmt|;
comment|// DOM read-only attributes
name|QString
name|nodeName
argument_list|()
specifier|const
expr_stmt|;
name|NodeType
name|nodeType
argument_list|()
specifier|const
expr_stmt|;
name|QDomNode
name|parentNode
argument_list|()
specifier|const
expr_stmt|;
name|QDomNodeList
name|childNodes
argument_list|()
specifier|const
expr_stmt|;
name|QDomNode
name|firstChild
argument_list|()
specifier|const
expr_stmt|;
name|QDomNode
name|lastChild
argument_list|()
specifier|const
expr_stmt|;
name|QDomNode
name|previousSibling
argument_list|()
specifier|const
expr_stmt|;
name|QDomNode
name|nextSibling
argument_list|()
specifier|const
expr_stmt|;
name|QDomNamedNodeMap
name|attributes
argument_list|()
specifier|const
expr_stmt|;
name|QDomDocument
name|ownerDocument
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|namespaceURI
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|localName
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|hasAttributes
argument_list|()
specifier|const
expr_stmt|;
comment|// DOM attributes
name|QString
name|nodeValue
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setNodeValue
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
name|QString
name|prefix
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setPrefix
parameter_list|(
specifier|const
name|QString
modifier|&
name|pre
parameter_list|)
function_decl|;
comment|// Qt extensions
name|bool
name|isAttr
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isCDATASection
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isDocumentFragment
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isDocument
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isDocumentType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isElement
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isEntityReference
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isText
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isEntity
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isNotation
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isProcessingInstruction
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isCharacterData
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isComment
argument_list|()
specifier|const
expr_stmt|;
comment|/**      * Shortcut to avoid dealing with QDomNodeList      * all the time.      */
name|QDomNode
name|namedItem
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isNull
argument_list|()
specifier|const
expr_stmt|;
name|void
name|clear
parameter_list|()
function_decl|;
name|QDomAttr
name|toAttr
argument_list|()
specifier|const
expr_stmt|;
name|QDomCDATASection
name|toCDATASection
argument_list|()
specifier|const
expr_stmt|;
name|QDomDocumentFragment
name|toDocumentFragment
argument_list|()
specifier|const
expr_stmt|;
name|QDomDocument
name|toDocument
argument_list|()
specifier|const
expr_stmt|;
name|QDomDocumentType
name|toDocumentType
argument_list|()
specifier|const
expr_stmt|;
name|QDomElement
name|toElement
argument_list|()
specifier|const
expr_stmt|;
name|QDomEntityReference
name|toEntityReference
argument_list|()
specifier|const
expr_stmt|;
name|QDomText
name|toText
argument_list|()
specifier|const
expr_stmt|;
name|QDomEntity
name|toEntity
argument_list|()
specifier|const
expr_stmt|;
name|QDomNotation
name|toNotation
argument_list|()
specifier|const
expr_stmt|;
name|QDomProcessingInstruction
name|toProcessingInstruction
argument_list|()
specifier|const
expr_stmt|;
name|QDomCharacterData
name|toCharacterData
argument_list|()
specifier|const
expr_stmt|;
name|QDomComment
name|toComment
argument_list|()
specifier|const
expr_stmt|;
name|void
name|save
argument_list|(
name|QTextStream
operator|&
argument_list|,
name|int
argument_list|,
name|EncodingPolicy
operator|=
name|QDomNode
operator|::
name|EncodingFromDocument
argument_list|)
decl|const
decl_stmt|;
name|QDomElement
name|firstChildElement
argument_list|(
specifier|const
name|QString
operator|&
name|tagName
operator|=
name|QString
argument_list|()
argument_list|)
decl|const
decl_stmt|;
name|QDomElement
name|lastChildElement
argument_list|(
specifier|const
name|QString
operator|&
name|tagName
operator|=
name|QString
argument_list|()
argument_list|)
decl|const
decl_stmt|;
name|QDomElement
name|previousSiblingElement
argument_list|(
specifier|const
name|QString
operator|&
name|tagName
operator|=
name|QString
argument_list|()
argument_list|)
decl|const
decl_stmt|;
name|QDomElement
name|nextSiblingElement
argument_list|(
specifier|const
name|QString
operator|&
name|taName
operator|=
name|QString
argument_list|()
argument_list|)
decl|const
decl_stmt|;
name|int
name|lineNumber
argument_list|()
specifier|const
expr_stmt|;
name|int
name|columnNumber
argument_list|()
specifier|const
expr_stmt|;
name|protected
label|:
name|QDomNodePrivate
modifier|*
name|impl
decl_stmt|;
name|QDomNode
argument_list|(
name|QDomNodePrivate
operator|*
argument_list|)
expr_stmt|;
name|private
label|:
name|friend
name|class
name|QDomDocument
decl_stmt|;
name|friend
name|class
name|QDomDocumentType
decl_stmt|;
name|friend
name|class
name|QDomNodeList
decl_stmt|;
name|friend
name|class
name|QDomNamedNodeMap
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomNodeList
block|{
name|public
label|:
name|QDomNodeList
argument_list|()
expr_stmt|;
name|QDomNodeList
argument_list|(
specifier|const
name|QDomNodeList
operator|&
argument_list|)
expr_stmt|;
name|QDomNodeList
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QDomNodeList
operator|&
operator|)
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QDomNodeList
operator|&
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QDomNodeList
operator|&
operator|)
specifier|const
expr_stmt|;
operator|~
name|QDomNodeList
argument_list|()
expr_stmt|;
comment|// DOM functions
name|QDomNode
name|item
argument_list|(
name|int
name|index
argument_list|)
decl|const
decl_stmt|;
specifier|inline
name|QDomNode
name|at
argument_list|(
name|int
name|index
argument_list|)
decl|const
block|{
return|return
name|item
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|// Qt API consistency
comment|// DOM read only attributes
name|int
name|length
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|length
argument_list|()
return|;
block|}
comment|// Qt API consitancy
specifier|inline
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|length
argument_list|()
return|;
block|}
comment|// Qt API consistency
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|length
argument_list|()
operator|==
literal|0
return|;
block|}
comment|// Qt API consistency
name|private
label|:
name|QDomNodeListPrivate
modifier|*
name|impl
decl_stmt|;
name|QDomNodeList
argument_list|(
name|QDomNodeListPrivate
operator|*
argument_list|)
expr_stmt|;
name|friend
name|class
name|QDomNode
decl_stmt|;
name|friend
name|class
name|QDomElement
decl_stmt|;
name|friend
name|class
name|QDomDocument
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomDocumentType
range|:
name|public
name|QDomNode
block|{
name|public
operator|:
name|QDomDocumentType
argument_list|()
block|;
name|QDomDocumentType
argument_list|(
specifier|const
name|QDomDocumentType
operator|&
name|x
argument_list|)
block|;
name|QDomDocumentType
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDomDocumentType
operator|&
operator|)
block|;
comment|// DOM read only attributes
name|QString
name|name
argument_list|()
specifier|const
block|;
name|QDomNamedNodeMap
name|entities
argument_list|()
specifier|const
block|;
name|QDomNamedNodeMap
name|notations
argument_list|()
specifier|const
block|;
name|QString
name|publicId
argument_list|()
specifier|const
block|;
name|QString
name|systemId
argument_list|()
specifier|const
block|;
name|QString
name|internalSubset
argument_list|()
specifier|const
block|;
comment|// Overridden from QDomNode
specifier|inline
name|QDomNode
operator|::
name|NodeType
name|nodeType
argument_list|()
specifier|const
block|{
return|return
name|DocumentTypeNode
return|;
block|}
name|private
operator|:
name|QDomDocumentType
argument_list|(
name|QDomDocumentTypePrivate
operator|*
argument_list|)
block|;
name|friend
name|class
name|QDomImplementation
block|;
name|friend
name|class
name|QDomDocument
block|;
name|friend
name|class
name|QDomNode
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomDocument
range|:
name|public
name|QDomNode
block|{
name|public
operator|:
name|QDomDocument
argument_list|()
block|;
name|explicit
name|QDomDocument
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|explicit
name|QDomDocument
argument_list|(
specifier|const
name|QDomDocumentType
operator|&
name|doctype
argument_list|)
block|;
name|QDomDocument
argument_list|(
specifier|const
name|QDomDocument
operator|&
name|x
argument_list|)
block|;
name|QDomDocument
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDomDocument
operator|&
operator|)
block|;
operator|~
name|QDomDocument
argument_list|()
block|;
comment|// DOM functions
name|QDomElement
name|createElement
argument_list|(
specifier|const
name|QString
operator|&
name|tagName
argument_list|)
block|;
name|QDomDocumentFragment
name|createDocumentFragment
argument_list|()
block|;
name|QDomText
name|createTextNode
argument_list|(
specifier|const
name|QString
operator|&
name|data
argument_list|)
block|;
name|QDomComment
name|createComment
argument_list|(
specifier|const
name|QString
operator|&
name|data
argument_list|)
block|;
name|QDomCDATASection
name|createCDATASection
argument_list|(
specifier|const
name|QString
operator|&
name|data
argument_list|)
block|;
name|QDomProcessingInstruction
name|createProcessingInstruction
argument_list|(
specifier|const
name|QString
operator|&
name|target
argument_list|,
specifier|const
name|QString
operator|&
name|data
argument_list|)
block|;
name|QDomAttr
name|createAttribute
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|QDomEntityReference
name|createEntityReference
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|QDomNodeList
name|elementsByTagName
argument_list|(
argument|const QString& tagname
argument_list|)
specifier|const
block|;
name|QDomNode
name|importNode
argument_list|(
argument|const QDomNode& importedNode
argument_list|,
argument|bool deep
argument_list|)
block|;
name|QDomElement
name|createElementNS
argument_list|(
specifier|const
name|QString
operator|&
name|nsURI
argument_list|,
specifier|const
name|QString
operator|&
name|qName
argument_list|)
block|;
name|QDomAttr
name|createAttributeNS
argument_list|(
specifier|const
name|QString
operator|&
name|nsURI
argument_list|,
specifier|const
name|QString
operator|&
name|qName
argument_list|)
block|;
name|QDomNodeList
name|elementsByTagNameNS
argument_list|(
specifier|const
name|QString
operator|&
name|nsURI
argument_list|,
specifier|const
name|QString
operator|&
name|localName
argument_list|)
block|;
name|QDomElement
name|elementById
argument_list|(
specifier|const
name|QString
operator|&
name|elementId
argument_list|)
block|;
comment|// DOM read only attributes
name|QDomDocumentType
name|doctype
argument_list|()
specifier|const
block|;
name|QDomImplementation
name|implementation
argument_list|()
specifier|const
block|;
name|QDomElement
name|documentElement
argument_list|()
specifier|const
block|;
comment|// Overridden from QDomNode
specifier|inline
name|QDomNode
operator|::
name|NodeType
name|nodeType
argument_list|()
specifier|const
block|{
return|return
name|DocumentNode
return|;
block|}
comment|// Qt extensions
name|bool
name|setContent
argument_list|(
argument|const QByteArray& text
argument_list|,
argument|bool namespaceProcessing
argument_list|,
argument|QString *errorMsg=
literal|0
argument_list|,
argument|int *errorLine=
literal|0
argument_list|,
argument|int *errorColumn=
literal|0
argument_list|)
block|;
name|bool
name|setContent
argument_list|(
argument|const QString& text
argument_list|,
argument|bool namespaceProcessing
argument_list|,
argument|QString *errorMsg=
literal|0
argument_list|,
argument|int *errorLine=
literal|0
argument_list|,
argument|int *errorColumn=
literal|0
argument_list|)
block|;
name|bool
name|setContent
argument_list|(
argument|QIODevice* dev
argument_list|,
argument|bool namespaceProcessing
argument_list|,
argument|QString *errorMsg=
literal|0
argument_list|,
argument|int *errorLine=
literal|0
argument_list|,
argument|int *errorColumn=
literal|0
argument_list|)
block|;
name|bool
name|setContent
argument_list|(
argument|QXmlInputSource *source
argument_list|,
argument|bool namespaceProcessing
argument_list|,
argument|QString *errorMsg=
literal|0
argument_list|,
argument|int *errorLine=
literal|0
argument_list|,
argument|int *errorColumn=
literal|0
argument_list|)
block|;
name|bool
name|setContent
argument_list|(
specifier|const
name|QByteArray
operator|&
name|text
argument_list|,
name|QString
operator|*
name|errorMsg
operator|=
literal|0
argument_list|,
name|int
operator|*
name|errorLine
operator|=
literal|0
argument_list|,
name|int
operator|*
name|errorColumn
operator|=
literal|0
argument_list|)
block|;
name|bool
name|setContent
argument_list|(
specifier|const
name|QString
operator|&
name|text
argument_list|,
name|QString
operator|*
name|errorMsg
operator|=
literal|0
argument_list|,
name|int
operator|*
name|errorLine
operator|=
literal|0
argument_list|,
name|int
operator|*
name|errorColumn
operator|=
literal|0
argument_list|)
block|;
name|bool
name|setContent
argument_list|(
name|QIODevice
operator|*
name|dev
argument_list|,
name|QString
operator|*
name|errorMsg
operator|=
literal|0
argument_list|,
name|int
operator|*
name|errorLine
operator|=
literal|0
argument_list|,
name|int
operator|*
name|errorColumn
operator|=
literal|0
argument_list|)
block|;
name|bool
name|setContent
argument_list|(
name|QXmlInputSource
operator|*
name|source
argument_list|,
name|QXmlReader
operator|*
name|reader
argument_list|,
name|QString
operator|*
name|errorMsg
operator|=
literal|0
argument_list|,
name|int
operator|*
name|errorLine
operator|=
literal|0
argument_list|,
name|int
operator|*
name|errorColumn
operator|=
literal|0
argument_list|)
block|;
comment|// Qt extensions
name|QString
name|toString
argument_list|(
argument|int =
literal|1
argument_list|)
specifier|const
block|;
name|QByteArray
name|toByteArray
argument_list|(
argument|int =
literal|1
argument_list|)
specifier|const
block|;
name|private
operator|:
name|QDomDocument
argument_list|(
name|QDomDocumentPrivate
operator|*
argument_list|)
block|;
name|friend
name|class
name|QDomNode
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomNamedNodeMap
block|{
name|public
label|:
name|QDomNamedNodeMap
argument_list|()
expr_stmt|;
name|QDomNamedNodeMap
argument_list|(
specifier|const
name|QDomNamedNodeMap
operator|&
argument_list|)
expr_stmt|;
name|QDomNamedNodeMap
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QDomNamedNodeMap
operator|&
operator|)
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QDomNamedNodeMap
operator|&
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QDomNamedNodeMap
operator|&
operator|)
specifier|const
expr_stmt|;
operator|~
name|QDomNamedNodeMap
argument_list|()
expr_stmt|;
comment|// DOM functions
name|QDomNode
name|namedItem
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|QDomNode
name|setNamedItem
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|newNode
parameter_list|)
function_decl|;
name|QDomNode
name|removeNamedItem
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
name|QDomNode
name|item
argument_list|(
name|int
name|index
argument_list|)
decl|const
decl_stmt|;
name|QDomNode
name|namedItemNS
argument_list|(
specifier|const
name|QString
operator|&
name|nsURI
argument_list|,
specifier|const
name|QString
operator|&
name|localName
argument_list|)
decl|const
decl_stmt|;
name|QDomNode
name|setNamedItemNS
parameter_list|(
specifier|const
name|QDomNode
modifier|&
name|newNode
parameter_list|)
function_decl|;
name|QDomNode
name|removeNamedItemNS
parameter_list|(
specifier|const
name|QString
modifier|&
name|nsURI
parameter_list|,
specifier|const
name|QString
modifier|&
name|localName
parameter_list|)
function_decl|;
comment|// DOM read only attributes
name|int
name|length
argument_list|()
specifier|const
expr_stmt|;
name|int
name|count
argument_list|()
specifier|const
block|{
return|return
name|length
argument_list|()
return|;
block|}
comment|// Qt API consitancy
specifier|inline
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|length
argument_list|()
return|;
block|}
comment|// Qt API consistency
specifier|inline
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|length
argument_list|()
operator|==
literal|0
return|;
block|}
comment|// Qt API consistency
comment|// Qt extension
name|bool
name|contains
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|QDomNamedNodeMapPrivate
modifier|*
name|impl
decl_stmt|;
name|QDomNamedNodeMap
argument_list|(
name|QDomNamedNodeMapPrivate
operator|*
argument_list|)
expr_stmt|;
name|friend
name|class
name|QDomNode
decl_stmt|;
name|friend
name|class
name|QDomDocumentType
decl_stmt|;
name|friend
name|class
name|QDomElement
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomDocumentFragment
range|:
name|public
name|QDomNode
block|{
name|public
operator|:
name|QDomDocumentFragment
argument_list|()
block|;
name|QDomDocumentFragment
argument_list|(
specifier|const
name|QDomDocumentFragment
operator|&
name|x
argument_list|)
block|;
name|QDomDocumentFragment
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDomDocumentFragment
operator|&
operator|)
block|;
comment|// Overridden from QDomNode
specifier|inline
name|QDomNode
operator|::
name|NodeType
name|nodeType
argument_list|()
specifier|const
block|{
return|return
name|DocumentFragmentNode
return|;
block|}
name|private
operator|:
name|QDomDocumentFragment
argument_list|(
name|QDomDocumentFragmentPrivate
operator|*
argument_list|)
block|;
name|friend
name|class
name|QDomDocument
block|;
name|friend
name|class
name|QDomNode
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomCharacterData
range|:
name|public
name|QDomNode
block|{
name|public
operator|:
name|QDomCharacterData
argument_list|()
block|;
name|QDomCharacterData
argument_list|(
specifier|const
name|QDomCharacterData
operator|&
name|x
argument_list|)
block|;
name|QDomCharacterData
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDomCharacterData
operator|&
operator|)
block|;
comment|// DOM functions
name|QString
name|substringData
argument_list|(
argument|unsigned long offset
argument_list|,
argument|unsigned long count
argument_list|)
block|;
name|void
name|appendData
argument_list|(
specifier|const
name|QString
operator|&
name|arg
argument_list|)
block|;
name|void
name|insertData
argument_list|(
argument|unsigned long offset
argument_list|,
argument|const QString& arg
argument_list|)
block|;
name|void
name|deleteData
argument_list|(
argument|unsigned long offset
argument_list|,
argument|unsigned long count
argument_list|)
block|;
name|void
name|replaceData
argument_list|(
argument|unsigned long offset
argument_list|,
argument|unsigned long count
argument_list|,
argument|const QString& arg
argument_list|)
block|;
comment|// DOM read only attributes
name|int
name|length
argument_list|()
specifier|const
block|;
comment|// DOM attributes
name|QString
name|data
argument_list|()
specifier|const
block|;
name|void
name|setData
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|;
comment|// Overridden from QDomNode
name|QDomNode
operator|::
name|NodeType
name|nodeType
argument_list|()
specifier|const
block|;
name|private
operator|:
name|QDomCharacterData
argument_list|(
name|QDomCharacterDataPrivate
operator|*
argument_list|)
block|;
name|friend
name|class
name|QDomDocument
block|;
name|friend
name|class
name|QDomText
block|;
name|friend
name|class
name|QDomComment
block|;
name|friend
name|class
name|QDomNode
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomAttr
range|:
name|public
name|QDomNode
block|{
name|public
operator|:
name|QDomAttr
argument_list|()
block|;
name|QDomAttr
argument_list|(
specifier|const
name|QDomAttr
operator|&
name|x
argument_list|)
block|;
name|QDomAttr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDomAttr
operator|&
operator|)
block|;
comment|// DOM read only attributes
name|QString
name|name
argument_list|()
specifier|const
block|;
name|bool
name|specified
argument_list|()
specifier|const
block|;
name|QDomElement
name|ownerElement
argument_list|()
specifier|const
block|;
comment|// DOM attributes
name|QString
name|value
argument_list|()
specifier|const
block|;
name|void
name|setValue
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|;
comment|// Overridden from QDomNode
specifier|inline
name|QDomNode
operator|::
name|NodeType
name|nodeType
argument_list|()
specifier|const
block|{
return|return
name|AttributeNode
return|;
block|}
name|private
operator|:
name|QDomAttr
argument_list|(
name|QDomAttrPrivate
operator|*
argument_list|)
block|;
name|friend
name|class
name|QDomDocument
block|;
name|friend
name|class
name|QDomElement
block|;
name|friend
name|class
name|QDomNode
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomElement
range|:
name|public
name|QDomNode
block|{
name|public
operator|:
name|QDomElement
argument_list|()
block|;
name|QDomElement
argument_list|(
specifier|const
name|QDomElement
operator|&
name|x
argument_list|)
block|;
name|QDomElement
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDomElement
operator|&
operator|)
block|;
comment|// DOM functions
name|QString
name|attribute
argument_list|(
argument|const QString& name
argument_list|,
argument|const QString& defValue = QString()
argument_list|)
specifier|const
block|;
name|void
name|setAttribute
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
specifier|const
name|QString
operator|&
name|value
argument_list|)
block|;
name|void
name|setAttribute
argument_list|(
argument|const QString& name
argument_list|,
argument|qlonglong value
argument_list|)
block|;
name|void
name|setAttribute
argument_list|(
argument|const QString& name
argument_list|,
argument|qulonglong value
argument_list|)
block|;
specifier|inline
name|void
name|setAttribute
argument_list|(
argument|const QString& name
argument_list|,
argument|int value
argument_list|)
block|{
name|setAttribute
argument_list|(
name|name
argument_list|,
name|qlonglong
argument_list|(
name|value
argument_list|)
argument_list|)
block|; }
specifier|inline
name|void
name|setAttribute
argument_list|(
argument|const QString& name
argument_list|,
argument|uint value
argument_list|)
block|{
name|setAttribute
argument_list|(
name|name
argument_list|,
name|qulonglong
argument_list|(
name|value
argument_list|)
argument_list|)
block|; }
name|void
name|setAttribute
argument_list|(
argument|const QString& name
argument_list|,
argument|float value
argument_list|)
block|;
name|void
name|setAttribute
argument_list|(
argument|const QString& name
argument_list|,
argument|double value
argument_list|)
block|;
name|void
name|removeAttribute
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|QDomAttr
name|attributeNode
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|QDomAttr
name|setAttributeNode
argument_list|(
specifier|const
name|QDomAttr
operator|&
name|newAttr
argument_list|)
block|;
name|QDomAttr
name|removeAttributeNode
argument_list|(
specifier|const
name|QDomAttr
operator|&
name|oldAttr
argument_list|)
block|;
name|QDomNodeList
name|elementsByTagName
argument_list|(
argument|const QString& tagname
argument_list|)
specifier|const
block|;
name|bool
name|hasAttribute
argument_list|(
argument|const QString& name
argument_list|)
specifier|const
block|;
name|QString
name|attributeNS
argument_list|(
argument|const QString nsURI
argument_list|,
argument|const QString& localName
argument_list|,
argument|const QString& defValue = QString()
argument_list|)
specifier|const
block|;
name|void
name|setAttributeNS
argument_list|(
argument|const QString nsURI
argument_list|,
argument|const QString& qName
argument_list|,
argument|const QString& value
argument_list|)
block|;
specifier|inline
name|void
name|setAttributeNS
argument_list|(
argument|const QString nsURI
argument_list|,
argument|const QString& qName
argument_list|,
argument|int value
argument_list|)
block|{
name|setAttributeNS
argument_list|(
name|nsURI
argument_list|,
name|qName
argument_list|,
name|qlonglong
argument_list|(
name|value
argument_list|)
argument_list|)
block|; }
specifier|inline
name|void
name|setAttributeNS
argument_list|(
argument|const QString nsURI
argument_list|,
argument|const QString& qName
argument_list|,
argument|uint value
argument_list|)
block|{
name|setAttributeNS
argument_list|(
name|nsURI
argument_list|,
name|qName
argument_list|,
name|qulonglong
argument_list|(
name|value
argument_list|)
argument_list|)
block|; }
name|void
name|setAttributeNS
argument_list|(
argument|const QString nsURI
argument_list|,
argument|const QString& qName
argument_list|,
argument|qlonglong value
argument_list|)
block|;
name|void
name|setAttributeNS
argument_list|(
argument|const QString nsURI
argument_list|,
argument|const QString& qName
argument_list|,
argument|qulonglong value
argument_list|)
block|;
name|void
name|setAttributeNS
argument_list|(
argument|const QString nsURI
argument_list|,
argument|const QString& qName
argument_list|,
argument|double value
argument_list|)
block|;
name|void
name|removeAttributeNS
argument_list|(
specifier|const
name|QString
operator|&
name|nsURI
argument_list|,
specifier|const
name|QString
operator|&
name|localName
argument_list|)
block|;
name|QDomAttr
name|attributeNodeNS
argument_list|(
specifier|const
name|QString
operator|&
name|nsURI
argument_list|,
specifier|const
name|QString
operator|&
name|localName
argument_list|)
block|;
name|QDomAttr
name|setAttributeNodeNS
argument_list|(
specifier|const
name|QDomAttr
operator|&
name|newAttr
argument_list|)
block|;
name|QDomNodeList
name|elementsByTagNameNS
argument_list|(
argument|const QString& nsURI
argument_list|,
argument|const QString& localName
argument_list|)
specifier|const
block|;
name|bool
name|hasAttributeNS
argument_list|(
argument|const QString& nsURI
argument_list|,
argument|const QString& localName
argument_list|)
specifier|const
block|;
comment|// DOM read only attributes
name|QString
name|tagName
argument_list|()
specifier|const
block|;
name|void
name|setTagName
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
comment|// Qt extension
comment|// Overridden from QDomNode
name|QDomNamedNodeMap
name|attributes
argument_list|()
specifier|const
block|;
specifier|inline
name|QDomNode
operator|::
name|NodeType
name|nodeType
argument_list|()
specifier|const
block|{
return|return
name|ElementNode
return|;
block|}
name|QString
name|text
argument_list|()
specifier|const
block|;
name|private
operator|:
name|QDomElement
argument_list|(
name|QDomElementPrivate
operator|*
argument_list|)
block|;
name|friend
name|class
name|QDomDocument
block|;
name|friend
name|class
name|QDomNode
block|;
name|friend
name|class
name|QDomAttr
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomText
range|:
name|public
name|QDomCharacterData
block|{
name|public
operator|:
name|QDomText
argument_list|()
block|;
name|QDomText
argument_list|(
specifier|const
name|QDomText
operator|&
name|x
argument_list|)
block|;
name|QDomText
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDomText
operator|&
operator|)
block|;
comment|// DOM functions
name|QDomText
name|splitText
argument_list|(
argument|int offset
argument_list|)
block|;
comment|// Overridden from QDomCharacterData
specifier|inline
name|QDomNode
operator|::
name|NodeType
name|nodeType
argument_list|()
specifier|const
block|{
return|return
name|TextNode
return|;
block|}
name|private
operator|:
name|QDomText
argument_list|(
name|QDomTextPrivate
operator|*
argument_list|)
block|;
name|friend
name|class
name|QDomCDATASection
block|;
name|friend
name|class
name|QDomDocument
block|;
name|friend
name|class
name|QDomNode
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomComment
range|:
name|public
name|QDomCharacterData
block|{
name|public
operator|:
name|QDomComment
argument_list|()
block|;
name|QDomComment
argument_list|(
specifier|const
name|QDomComment
operator|&
name|x
argument_list|)
block|;
name|QDomComment
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDomComment
operator|&
operator|)
block|;
comment|// Overridden from QDomCharacterData
specifier|inline
name|QDomNode
operator|::
name|NodeType
name|nodeType
argument_list|()
specifier|const
block|{
return|return
name|CommentNode
return|;
block|}
name|private
operator|:
name|QDomComment
argument_list|(
name|QDomCommentPrivate
operator|*
argument_list|)
block|;
name|friend
name|class
name|QDomDocument
block|;
name|friend
name|class
name|QDomNode
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomCDATASection
range|:
name|public
name|QDomText
block|{
name|public
operator|:
name|QDomCDATASection
argument_list|()
block|;
name|QDomCDATASection
argument_list|(
specifier|const
name|QDomCDATASection
operator|&
name|x
argument_list|)
block|;
name|QDomCDATASection
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDomCDATASection
operator|&
operator|)
block|;
comment|// Overridden from QDomText
specifier|inline
name|QDomNode
operator|::
name|NodeType
name|nodeType
argument_list|()
specifier|const
block|{
return|return
name|CDATASectionNode
return|;
block|}
name|private
operator|:
name|QDomCDATASection
argument_list|(
name|QDomCDATASectionPrivate
operator|*
argument_list|)
block|;
name|friend
name|class
name|QDomDocument
block|;
name|friend
name|class
name|QDomNode
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomNotation
range|:
name|public
name|QDomNode
block|{
name|public
operator|:
name|QDomNotation
argument_list|()
block|;
name|QDomNotation
argument_list|(
specifier|const
name|QDomNotation
operator|&
name|x
argument_list|)
block|;
name|QDomNotation
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDomNotation
operator|&
operator|)
block|;
comment|// DOM read only attributes
name|QString
name|publicId
argument_list|()
specifier|const
block|;
name|QString
name|systemId
argument_list|()
specifier|const
block|;
comment|// Overridden from QDomNode
specifier|inline
name|QDomNode
operator|::
name|NodeType
name|nodeType
argument_list|()
specifier|const
block|{
return|return
name|NotationNode
return|;
block|}
name|private
operator|:
name|QDomNotation
argument_list|(
name|QDomNotationPrivate
operator|*
argument_list|)
block|;
name|friend
name|class
name|QDomDocument
block|;
name|friend
name|class
name|QDomNode
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomEntity
range|:
name|public
name|QDomNode
block|{
name|public
operator|:
name|QDomEntity
argument_list|()
block|;
name|QDomEntity
argument_list|(
specifier|const
name|QDomEntity
operator|&
name|x
argument_list|)
block|;
name|QDomEntity
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDomEntity
operator|&
operator|)
block|;
comment|// DOM read only attributes
name|QString
name|publicId
argument_list|()
specifier|const
block|;
name|QString
name|systemId
argument_list|()
specifier|const
block|;
name|QString
name|notationName
argument_list|()
specifier|const
block|;
comment|// Overridden from QDomNode
specifier|inline
name|QDomNode
operator|::
name|NodeType
name|nodeType
argument_list|()
specifier|const
block|{
return|return
name|EntityNode
return|;
block|}
name|private
operator|:
name|QDomEntity
argument_list|(
name|QDomEntityPrivate
operator|*
argument_list|)
block|;
name|friend
name|class
name|QDomNode
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomEntityReference
range|:
name|public
name|QDomNode
block|{
name|public
operator|:
name|QDomEntityReference
argument_list|()
block|;
name|QDomEntityReference
argument_list|(
specifier|const
name|QDomEntityReference
operator|&
name|x
argument_list|)
block|;
name|QDomEntityReference
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDomEntityReference
operator|&
operator|)
block|;
comment|// Overridden from QDomNode
specifier|inline
name|QDomNode
operator|::
name|NodeType
name|nodeType
argument_list|()
specifier|const
block|{
return|return
name|EntityReferenceNode
return|;
block|}
name|private
operator|:
name|QDomEntityReference
argument_list|(
name|QDomEntityReferencePrivate
operator|*
argument_list|)
block|;
name|friend
name|class
name|QDomDocument
block|;
name|friend
name|class
name|QDomNode
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QDomProcessingInstruction
range|:
name|public
name|QDomNode
block|{
name|public
operator|:
name|QDomProcessingInstruction
argument_list|()
block|;
name|QDomProcessingInstruction
argument_list|(
specifier|const
name|QDomProcessingInstruction
operator|&
name|x
argument_list|)
block|;
name|QDomProcessingInstruction
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QDomProcessingInstruction
operator|&
operator|)
block|;
comment|// DOM read only attributes
name|QString
name|target
argument_list|()
specifier|const
block|;
comment|// DOM attributes
name|QString
name|data
argument_list|()
specifier|const
block|;
name|void
name|setData
argument_list|(
specifier|const
name|QString
operator|&
name|d
argument_list|)
block|;
comment|// Overridden from QDomNode
specifier|inline
name|QDomNode
operator|::
name|NodeType
name|nodeType
argument_list|()
specifier|const
block|{
return|return
name|ProcessingInstructionNode
return|;
block|}
name|private
operator|:
name|QDomProcessingInstruction
argument_list|(
name|QDomProcessingInstructionPrivate
operator|*
argument_list|)
block|;
name|friend
name|class
name|QDomDocument
block|;
name|friend
name|class
name|QDomNode
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_XML_EXPORT
name|QTextStream
operator|&
name|operator
operator|<<
operator|(
name|QTextStream
operator|&
operator|,
specifier|const
name|QDomNode
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_DOM
end_comment
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QDOM_H
end_comment
end_unit
