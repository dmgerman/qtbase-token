begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtXml module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QXML_H
end_ifndef
begin_define
DECL|macro|QXML_H
define|#
directive|define
name|QXML_H
end_define
begin_include
include|#
directive|include
file|<QtXml/qtxmlglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qfile.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qscopedpointer.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QXmlNamespaceSupport
name|class
name|QXmlNamespaceSupport
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlAttributes
name|class
name|QXmlAttributes
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlContentHandler
name|class
name|QXmlContentHandler
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlDefaultHandler
name|class
name|QXmlDefaultHandler
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlDTDHandler
name|class
name|QXmlDTDHandler
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlEntityResolver
name|class
name|QXmlEntityResolver
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlErrorHandler
name|class
name|QXmlErrorHandler
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlLexicalHandler
name|class
name|QXmlLexicalHandler
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlDeclHandler
name|class
name|QXmlDeclHandler
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlInputSource
name|class
name|QXmlInputSource
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlLocator
name|class
name|QXmlLocator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlNamespaceSupport
name|class
name|QXmlNamespaceSupport
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlParseException
name|class
name|QXmlParseException
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlReader
name|class
name|QXmlReader
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlSimpleReader
name|class
name|QXmlSimpleReader
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlSimpleReaderPrivate
name|class
name|QXmlSimpleReaderPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlNamespaceSupportPrivate
name|class
name|QXmlNamespaceSupportPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlAttributesPrivate
name|class
name|QXmlAttributesPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlInputSourcePrivate
name|class
name|QXmlInputSourcePrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlParseExceptionPrivate
name|class
name|QXmlParseExceptionPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlLocatorPrivate
name|class
name|QXmlLocatorPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QXmlDefaultHandlerPrivate
name|class
name|QXmlDefaultHandlerPrivate
decl_stmt|;
end_decl_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// SAX Namespace Support
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QXmlNamespaceSupport
block|{
name|public
label|:
name|QXmlNamespaceSupport
argument_list|()
expr_stmt|;
operator|~
name|QXmlNamespaceSupport
argument_list|()
expr_stmt|;
name|void
name|setPrefix
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
name|QString
name|prefix
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
decl|const
decl_stmt|;
name|QString
name|uri
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
decl|const
decl_stmt|;
name|void
name|splitName
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
name|QString
operator|&
argument_list|,
name|QString
operator|&
argument_list|)
decl|const
decl_stmt|;
name|void
name|processName
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
name|bool
argument_list|,
name|QString
operator|&
argument_list|,
name|QString
operator|&
argument_list|)
decl|const
decl_stmt|;
name|QStringList
name|prefixes
argument_list|()
specifier|const
expr_stmt|;
name|QStringList
name|prefixes
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
decl|const
decl_stmt|;
name|void
name|pushContext
parameter_list|()
function_decl|;
name|void
name|popContext
parameter_list|()
function_decl|;
name|void
name|reset
parameter_list|()
function_decl|;
name|private
label|:
name|QXmlNamespaceSupportPrivate
modifier|*
name|d
decl_stmt|;
name|friend
name|class
name|QXmlSimpleReaderPrivate
decl_stmt|;
name|Q_DISABLE_COPY
argument_list|(
argument|QXmlNamespaceSupport
argument_list|)
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// SAX Attributes
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QXmlAttributes
block|{
name|public
label|:
name|QXmlAttributes
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|QXmlAttributes
argument_list|()
expr_stmt|;
name|int
name|index
argument_list|(
specifier|const
name|QString
operator|&
name|qName
argument_list|)
decl|const
decl_stmt|;
name|int
name|index
argument_list|(
name|QLatin1String
name|qName
argument_list|)
decl|const
decl_stmt|;
name|int
name|index
argument_list|(
specifier|const
name|QString
operator|&
name|uri
argument_list|,
specifier|const
name|QString
operator|&
name|localPart
argument_list|)
decl|const
decl_stmt|;
name|int
name|length
argument_list|()
specifier|const
expr_stmt|;
name|int
name|count
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|localName
argument_list|(
name|int
name|index
argument_list|)
decl|const
decl_stmt|;
name|QString
name|qName
argument_list|(
name|int
name|index
argument_list|)
decl|const
decl_stmt|;
name|QString
name|uri
argument_list|(
name|int
name|index
argument_list|)
decl|const
decl_stmt|;
name|QString
name|type
argument_list|(
name|int
name|index
argument_list|)
decl|const
decl_stmt|;
name|QString
name|type
argument_list|(
specifier|const
name|QString
operator|&
name|qName
argument_list|)
decl|const
decl_stmt|;
name|QString
name|type
argument_list|(
specifier|const
name|QString
operator|&
name|uri
argument_list|,
specifier|const
name|QString
operator|&
name|localName
argument_list|)
decl|const
decl_stmt|;
name|QString
name|value
argument_list|(
name|int
name|index
argument_list|)
decl|const
decl_stmt|;
name|QString
name|value
argument_list|(
specifier|const
name|QString
operator|&
name|qName
argument_list|)
decl|const
decl_stmt|;
name|QString
name|value
argument_list|(
name|QLatin1String
name|qName
argument_list|)
decl|const
decl_stmt|;
name|QString
name|value
argument_list|(
specifier|const
name|QString
operator|&
name|uri
argument_list|,
specifier|const
name|QString
operator|&
name|localName
argument_list|)
decl|const
decl_stmt|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|append
parameter_list|(
specifier|const
name|QString
modifier|&
name|qName
parameter_list|,
specifier|const
name|QString
modifier|&
name|uri
parameter_list|,
specifier|const
name|QString
modifier|&
name|localPart
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
function_decl|;
name|private
label|:
struct|struct
name|Attribute
block|{
name|QString
name|qname
decl_stmt|,
name|uri
decl_stmt|,
name|localname
decl_stmt|,
name|value
decl_stmt|;
block|}
struct|;
typedef|typedef
name|QList
operator|<
name|Attribute
operator|>
name|AttributeList
expr_stmt|;
name|AttributeList
name|attList
decl_stmt|;
name|QXmlAttributesPrivate
modifier|*
name|d
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// SAX Input Source
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QXmlInputSource
block|{
name|public
label|:
name|QXmlInputSource
argument_list|()
expr_stmt|;
name|explicit
name|QXmlInputSource
parameter_list|(
name|QIODevice
modifier|*
name|dev
parameter_list|)
function_decl|;
name|virtual
operator|~
name|QXmlInputSource
argument_list|()
expr_stmt|;
name|virtual
name|void
name|setData
parameter_list|(
specifier|const
name|QString
modifier|&
name|dat
parameter_list|)
function_decl|;
name|virtual
name|void
name|setData
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|dat
parameter_list|)
function_decl|;
name|virtual
name|void
name|fetchData
parameter_list|()
function_decl|;
name|virtual
name|QString
name|data
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|QChar
name|next
parameter_list|()
function_decl|;
name|virtual
name|void
name|reset
parameter_list|()
function_decl|;
specifier|static
specifier|const
name|ushort
name|EndOfData
decl_stmt|;
specifier|static
specifier|const
name|ushort
name|EndOfDocument
decl_stmt|;
name|protected
label|:
name|virtual
name|QString
name|fromRawData
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|,
name|bool
name|beginning
init|=
name|false
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|init
parameter_list|()
function_decl|;
name|QXmlInputSourcePrivate
modifier|*
name|d
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// SAX Exception Classes
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QXmlParseException
block|{
name|public
label|:
name|explicit
name|QXmlParseException
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
init|=
name|QString
argument_list|()
parameter_list|,
name|int
name|c
init|=
operator|-
literal|1
parameter_list|,
name|int
name|l
init|=
operator|-
literal|1
parameter_list|,
specifier|const
name|QString
modifier|&
name|p
init|=
name|QString
argument_list|()
parameter_list|,
specifier|const
name|QString
modifier|&
name|s
init|=
name|QString
argument_list|()
parameter_list|)
function_decl|;
name|QXmlParseException
argument_list|(
specifier|const
name|QXmlParseException
operator|&
name|other
argument_list|)
expr_stmt|;
operator|~
name|QXmlParseException
argument_list|()
expr_stmt|;
name|int
name|columnNumber
argument_list|()
specifier|const
expr_stmt|;
name|int
name|lineNumber
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|publicId
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|systemId
argument_list|()
specifier|const
expr_stmt|;
name|QString
name|message
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|QScopedPointer
operator|<
name|QXmlParseExceptionPrivate
operator|>
name|d
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// XML Reader
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QXmlReader
block|{
name|public
label|:
name|virtual
operator|~
name|QXmlReader
argument_list|()
block|{}
name|virtual
name|bool
name|feature
argument_list|(
argument|const QString& name
argument_list|,
argument|bool *ok = Q_NULLPTR
argument_list|)
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|setFeature
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|bool
name|value
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|hasFeature
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|void
modifier|*
name|property
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
name|bool
operator|*
name|ok
operator|=
name|Q_NULLPTR
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|setProperty
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
name|void
modifier|*
name|value
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|hasProperty
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|setEntityResolver
parameter_list|(
name|QXmlEntityResolver
modifier|*
name|handler
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QXmlEntityResolver
operator|*
name|entityResolver
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|setDTDHandler
parameter_list|(
name|QXmlDTDHandler
modifier|*
name|handler
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QXmlDTDHandler
operator|*
name|DTDHandler
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|setContentHandler
parameter_list|(
name|QXmlContentHandler
modifier|*
name|handler
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QXmlContentHandler
operator|*
name|contentHandler
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|setErrorHandler
parameter_list|(
name|QXmlErrorHandler
modifier|*
name|handler
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QXmlErrorHandler
operator|*
name|errorHandler
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|setLexicalHandler
parameter_list|(
name|QXmlLexicalHandler
modifier|*
name|handler
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QXmlLexicalHandler
operator|*
name|lexicalHandler
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|setDeclHandler
parameter_list|(
name|QXmlDeclHandler
modifier|*
name|handler
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QXmlDeclHandler
operator|*
name|declHandler
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|parse
parameter_list|(
specifier|const
name|QXmlInputSource
modifier|&
name|input
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|parse
parameter_list|(
specifier|const
name|QXmlInputSource
modifier|*
name|input
parameter_list|)
init|=
literal|0
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QXmlSimpleReader
range|:
name|public
name|QXmlReader
block|{
name|public
operator|:
name|QXmlSimpleReader
argument_list|()
block|;
name|virtual
operator|~
name|QXmlSimpleReader
argument_list|()
block|;
name|bool
name|feature
argument_list|(
argument|const QString& name
argument_list|,
argument|bool *ok = Q_NULLPTR
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|setFeature
argument_list|(
argument|const QString& name
argument_list|,
argument|bool value
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|hasFeature
argument_list|(
argument|const QString& name
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
operator|*
name|property
argument_list|(
argument|const QString& name
argument_list|,
argument|bool *ok = Q_NULLPTR
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|setProperty
argument_list|(
argument|const QString& name
argument_list|,
argument|void* value
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|hasProperty
argument_list|(
argument|const QString& name
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|setEntityResolver
argument_list|(
argument|QXmlEntityResolver* handler
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QXmlEntityResolver
operator|*
name|entityResolver
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|setDTDHandler
argument_list|(
argument|QXmlDTDHandler* handler
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QXmlDTDHandler
operator|*
name|DTDHandler
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|setContentHandler
argument_list|(
argument|QXmlContentHandler* handler
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QXmlContentHandler
operator|*
name|contentHandler
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|setErrorHandler
argument_list|(
argument|QXmlErrorHandler* handler
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QXmlErrorHandler
operator|*
name|errorHandler
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|setLexicalHandler
argument_list|(
argument|QXmlLexicalHandler* handler
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QXmlLexicalHandler
operator|*
name|lexicalHandler
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|void
name|setDeclHandler
argument_list|(
argument|QXmlDeclHandler* handler
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QXmlDeclHandler
operator|*
name|declHandler
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|;
name|bool
name|parse
argument_list|(
argument|const QXmlInputSource& input
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|bool
name|parse
argument_list|(
argument|const QXmlInputSource* input
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|bool
name|parse
argument_list|(
argument|const QXmlInputSource* input
argument_list|,
argument|bool incremental
argument_list|)
block|;
name|virtual
name|bool
name|parseContinue
argument_list|()
block|;
name|private
operator|:
name|Q_DISABLE_COPY
argument_list|(
argument|QXmlSimpleReader
argument_list|)
name|Q_DECLARE_PRIVATE
argument_list|(
argument|QXmlSimpleReader
argument_list|)
name|QScopedPointer
operator|<
name|QXmlSimpleReaderPrivate
operator|>
name|d_ptr
block|;
name|friend
name|class
name|QXmlSimpleReaderLocator
block|;
name|friend
name|class
name|QDomHandler
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// SAX Locator
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QXmlLocator
block|{
name|public
label|:
name|QXmlLocator
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|QXmlLocator
argument_list|()
expr_stmt|;
name|virtual
name|int
name|columnNumber
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|int
name|lineNumber
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|//    QString getPublicId() const
comment|//    QString getSystemId() const
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|//
end_comment
begin_comment
comment|// SAX handler classes
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QXmlContentHandler
block|{
name|public
label|:
name|virtual
operator|~
name|QXmlContentHandler
argument_list|()
block|{}
name|virtual
name|void
name|setDocumentLocator
argument_list|(
name|QXmlLocator
operator|*
name|locator
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|startDocument
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|endDocument
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|startPrefixMapping
parameter_list|(
specifier|const
name|QString
modifier|&
name|prefix
parameter_list|,
specifier|const
name|QString
modifier|&
name|uri
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|endPrefixMapping
parameter_list|(
specifier|const
name|QString
modifier|&
name|prefix
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|startElement
parameter_list|(
specifier|const
name|QString
modifier|&
name|namespaceURI
parameter_list|,
specifier|const
name|QString
modifier|&
name|localName
parameter_list|,
specifier|const
name|QString
modifier|&
name|qName
parameter_list|,
specifier|const
name|QXmlAttributes
modifier|&
name|atts
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|endElement
parameter_list|(
specifier|const
name|QString
modifier|&
name|namespaceURI
parameter_list|,
specifier|const
name|QString
modifier|&
name|localName
parameter_list|,
specifier|const
name|QString
modifier|&
name|qName
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|characters
parameter_list|(
specifier|const
name|QString
modifier|&
name|ch
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|ignorableWhitespace
parameter_list|(
specifier|const
name|QString
modifier|&
name|ch
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|processingInstruction
parameter_list|(
specifier|const
name|QString
modifier|&
name|target
parameter_list|,
specifier|const
name|QString
modifier|&
name|data
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|skippedEntity
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|errorString
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QXmlErrorHandler
block|{
name|public
label|:
name|virtual
operator|~
name|QXmlErrorHandler
argument_list|()
block|{}
name|virtual
name|bool
name|warning
argument_list|(
specifier|const
name|QXmlParseException
operator|&
name|exception
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|error
parameter_list|(
specifier|const
name|QXmlParseException
modifier|&
name|exception
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|fatalError
parameter_list|(
specifier|const
name|QXmlParseException
modifier|&
name|exception
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|errorString
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QXmlDTDHandler
block|{
name|public
label|:
name|virtual
operator|~
name|QXmlDTDHandler
argument_list|()
block|{}
name|virtual
name|bool
name|notationDecl
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
specifier|const
name|QString
operator|&
name|publicId
argument_list|,
specifier|const
name|QString
operator|&
name|systemId
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|unparsedEntityDecl
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QString
modifier|&
name|publicId
parameter_list|,
specifier|const
name|QString
modifier|&
name|systemId
parameter_list|,
specifier|const
name|QString
modifier|&
name|notationName
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|errorString
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QXmlEntityResolver
block|{
name|public
label|:
name|virtual
operator|~
name|QXmlEntityResolver
argument_list|()
block|{}
name|virtual
name|bool
name|resolveEntity
argument_list|(
specifier|const
name|QString
operator|&
name|publicId
argument_list|,
specifier|const
name|QString
operator|&
name|systemId
argument_list|,
name|QXmlInputSource
operator|*
operator|&
name|ret
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|QString
name|errorString
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QXmlLexicalHandler
block|{
name|public
label|:
name|virtual
operator|~
name|QXmlLexicalHandler
argument_list|()
block|{}
name|virtual
name|bool
name|startDTD
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
specifier|const
name|QString
operator|&
name|publicId
argument_list|,
specifier|const
name|QString
operator|&
name|systemId
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|endDTD
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|startEntity
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|endEntity
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|startCDATA
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|endCDATA
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|comment
parameter_list|(
specifier|const
name|QString
modifier|&
name|ch
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|errorString
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|Q_XML_EXPORT
name|QXmlDeclHandler
block|{
name|public
label|:
name|virtual
operator|~
name|QXmlDeclHandler
argument_list|()
block|{}
name|virtual
name|bool
name|attributeDecl
argument_list|(
specifier|const
name|QString
operator|&
name|eName
argument_list|,
specifier|const
name|QString
operator|&
name|aName
argument_list|,
specifier|const
name|QString
operator|&
name|type
argument_list|,
specifier|const
name|QString
operator|&
name|valueDefault
argument_list|,
specifier|const
name|QString
operator|&
name|value
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|internalEntityDecl
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|externalEntityDecl
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QString
modifier|&
name|publicId
parameter_list|,
specifier|const
name|QString
modifier|&
name|systemId
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QString
name|errorString
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// ### Conform to SAX by adding elementDecl
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
DECL|variable|QXmlContentHandler
DECL|variable|QXmlErrorHandler
DECL|variable|QXmlDTDHandler
DECL|variable|QXmlEntityResolver
DECL|variable|QXmlLexicalHandler
name|class
name|Q_XML_EXPORT
name|QXmlDefaultHandler
range|:
name|public
name|QXmlContentHandler
decl_stmt|,
name|public
name|QXmlErrorHandler
decl_stmt|,
name|public
name|QXmlDTDHandler
decl_stmt|,
name|public
name|QXmlEntityResolver
decl_stmt|,
name|public
name|QXmlLexicalHandler
decl_stmt|,
name|public
name|QXmlDeclHandler
block|{
name|public
label|:
name|QXmlDefaultHandler
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|QXmlDefaultHandler
argument_list|()
expr_stmt|;
name|void
name|setDocumentLocator
argument_list|(
name|QXmlLocator
operator|*
name|locator
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|startDocument
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
name|bool
name|endDocument
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
name|bool
name|startPrefixMapping
argument_list|(
specifier|const
name|QString
operator|&
name|prefix
argument_list|,
specifier|const
name|QString
operator|&
name|uri
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|endPrefixMapping
argument_list|(
specifier|const
name|QString
operator|&
name|prefix
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|startElement
argument_list|(
specifier|const
name|QString
operator|&
name|namespaceURI
argument_list|,
specifier|const
name|QString
operator|&
name|localName
argument_list|,
specifier|const
name|QString
operator|&
name|qName
argument_list|,
specifier|const
name|QXmlAttributes
operator|&
name|atts
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|endElement
argument_list|(
specifier|const
name|QString
operator|&
name|namespaceURI
argument_list|,
specifier|const
name|QString
operator|&
name|localName
argument_list|,
specifier|const
name|QString
operator|&
name|qName
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|characters
argument_list|(
specifier|const
name|QString
operator|&
name|ch
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|ignorableWhitespace
argument_list|(
specifier|const
name|QString
operator|&
name|ch
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|processingInstruction
argument_list|(
specifier|const
name|QString
operator|&
name|target
argument_list|,
specifier|const
name|QString
operator|&
name|data
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|skippedEntity
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|warning
argument_list|(
specifier|const
name|QXmlParseException
operator|&
name|exception
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|error
argument_list|(
specifier|const
name|QXmlParseException
operator|&
name|exception
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|fatalError
argument_list|(
specifier|const
name|QXmlParseException
operator|&
name|exception
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|notationDecl
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
specifier|const
name|QString
operator|&
name|publicId
argument_list|,
specifier|const
name|QString
operator|&
name|systemId
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|unparsedEntityDecl
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
specifier|const
name|QString
operator|&
name|publicId
argument_list|,
specifier|const
name|QString
operator|&
name|systemId
argument_list|,
specifier|const
name|QString
operator|&
name|notationName
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|resolveEntity
argument_list|(
specifier|const
name|QString
operator|&
name|publicId
argument_list|,
specifier|const
name|QString
operator|&
name|systemId
argument_list|,
name|QXmlInputSource
operator|*
operator|&
name|ret
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|startDTD
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
specifier|const
name|QString
operator|&
name|publicId
argument_list|,
specifier|const
name|QString
operator|&
name|systemId
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|endDTD
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
name|bool
name|startEntity
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|endEntity
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|startCDATA
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
name|bool
name|endCDATA
argument_list|()
name|Q_DECL_OVERRIDE
expr_stmt|;
name|bool
name|comment
argument_list|(
specifier|const
name|QString
operator|&
name|ch
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|attributeDecl
argument_list|(
specifier|const
name|QString
operator|&
name|eName
argument_list|,
specifier|const
name|QString
operator|&
name|aName
argument_list|,
specifier|const
name|QString
operator|&
name|type
argument_list|,
specifier|const
name|QString
operator|&
name|valueDefault
argument_list|,
specifier|const
name|QString
operator|&
name|value
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|internalEntityDecl
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
specifier|const
name|QString
operator|&
name|value
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|bool
name|externalEntityDecl
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|,
specifier|const
name|QString
operator|&
name|publicId
argument_list|,
specifier|const
name|QString
operator|&
name|systemId
argument_list|)
name|Q_DECL_OVERRIDE
decl_stmt|;
name|QString
name|errorString
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
expr_stmt|;
name|private
label|:
name|QXmlDefaultHandlerPrivate
modifier|*
name|d
decl_stmt|;
name|Q_DISABLE_COPY
argument_list|(
argument|QXmlDefaultHandler
argument_list|)
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// inlines
end_comment
begin_expr_stmt
DECL|function|count
specifier|inline
name|int
name|QXmlAttributes
operator|::
name|count
argument_list|()
specifier|const
block|{
return|return
name|length
argument_list|()
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QXML_H
end_comment
end_unit
