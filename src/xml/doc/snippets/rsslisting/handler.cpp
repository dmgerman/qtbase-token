begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd and its Subsidiary(-ies) nor the **     names of its contributors may be used to endorse or promote products **     derived from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/* handler.cpp  Provides a handler for processing XML elements found by the reader.  The handler looks for<title> and<link> elements within<item> elements, and records the text found within them. Link information stored within rdf:about attributes of<item> elements is also recorded when it is available.  For each item found, a signal is emitted which specifies its title and link information. This may be used by user interfaces for the purpose of displaying items as they are read. */
end_comment
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|"handler.h"
end_include
begin_comment
comment|/*     Reset the state of the handler to ensure that new documents are     read correctly.      We return true to indicate that parsing should continue. */
end_comment
begin_function
DECL|function|startDocument
name|bool
name|Handler
operator|::
name|startDocument
parameter_list|()
block|{
name|inItem
operator|=
literal|false
expr_stmt|;
name|inTitle
operator|=
literal|false
expr_stmt|;
name|inLink
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*     Process each starting element in the XML document.      Nested item, title, or link elements are not allowed, so we return false     if we encounter any of these. We also prohibit multiple definitions of     title strings.      Link destinations are read by this function if they are specified as     attributes in item elements.      For all cases not explicitly checked for, we return true to indicate that     the element is acceptable, and that parsing should continue. By doing     this, we can ignore elements in which we are not interested. */
end_comment
begin_function
DECL|function|startElement
name|bool
name|Handler
operator|::
name|startElement
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
name|qName
parameter_list|,
specifier|const
name|QXmlAttributes
modifier|&
name|attr
parameter_list|)
block|{
if|if
condition|(
name|qName
operator|==
literal|"item"
condition|)
block|{
if|if
condition|(
name|inItem
condition|)
return|return
literal|false
return|;
else|else
block|{
name|inItem
operator|=
literal|true
expr_stmt|;
name|linkString
operator|=
name|attr
operator|.
name|value
argument_list|(
literal|"rdf:about"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|qName
operator|==
literal|"title"
condition|)
block|{
if|if
condition|(
name|inTitle
condition|)
return|return
literal|false
return|;
elseif|else
if|if
condition|(
operator|!
name|titleString
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
elseif|else
if|if
condition|(
name|inItem
condition|)
name|inTitle
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qName
operator|==
literal|"link"
condition|)
block|{
if|if
condition|(
name|inLink
condition|)
return|return
literal|false
return|;
elseif|else
if|if
condition|(
name|inItem
condition|)
name|inLink
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*     Process each ending element in the XML document.      For recognized elements, we reset flags to ensure that we can read new     instances of these elements. If we have read an item element, emit a     signal to indicate that a new item is available for display.      We return true to indicate that parsing should continue. */
end_comment
begin_function
DECL|function|endElement
name|bool
name|Handler
operator|::
name|endElement
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
name|qName
parameter_list|)
block|{
if|if
condition|(
name|qName
operator|==
literal|"title"
operator|&&
name|inTitle
condition|)
name|inTitle
operator|=
literal|false
expr_stmt|;
elseif|else
if|if
condition|(
name|qName
operator|==
literal|"link"
operator|&&
name|inLink
condition|)
name|inLink
operator|=
literal|false
expr_stmt|;
elseif|else
if|if
condition|(
name|qName
operator|==
literal|"item"
condition|)
block|{
if|if
condition|(
operator|!
name|titleString
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|linkString
operator|.
name|isEmpty
argument_list|()
condition|)
emit|emit
name|newItem
argument_list|(
name|titleString
argument_list|,
name|linkString
argument_list|)
emit|;
name|inItem
operator|=
literal|false
expr_stmt|;
name|titleString
operator|=
literal|""
expr_stmt|;
name|linkString
operator|=
literal|""
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*     Collect characters when reading the contents of title or link elements     when they occur within an item element.      We return true to indicate that parsing should continue. */
end_comment
begin_function
DECL|function|characters
name|bool
name|Handler
operator|::
name|characters
parameter_list|(
specifier|const
name|QString
modifier|&
name|chars
parameter_list|)
block|{
if|if
condition|(
name|inTitle
condition|)
name|titleString
operator|+=
name|chars
expr_stmt|;
elseif|else
if|if
condition|(
name|inLink
condition|)
name|linkString
operator|+=
name|chars
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*     Report a fatal parsing error, and return false to indicate to the reader     that parsing should stop. */
end_comment
begin_comment
comment|//! [0]
end_comment
begin_function
DECL|function|fatalError
name|bool
name|Handler
operator|::
name|fatalError
parameter_list|(
specifier|const
name|QXmlParseException
modifier|&
name|exception
parameter_list|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Fatal error on line"
operator|<<
name|exception
operator|.
name|lineNumber
argument_list|()
operator|<<
literal|", column"
operator|<<
name|exception
operator|.
name|columnNumber
argument_list|()
operator|<<
literal|":"
operator|<<
name|exception
operator|.
name|message
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//! [0]
end_comment
end_unit
