begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtSql module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSQLRELATIONALDELEGATE_H
end_ifndef
begin_define
DECL|macro|QSQLRELATIONALDELEGATE_H
define|#
directive|define
name|QSQLRELATIONALDELEGATE_H
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|QT_WIDGETS_LIB
end_ifdef
begin_include
include|#
directive|include
file|<QtWidgets/qitemdelegate.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qlistview.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/qcombobox.h>
end_include
begin_include
include|#
directive|include
file|<QtSql/qsqlrelationaltablemodel.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QSqlRelationalDelegate
range|:
name|public
name|QItemDelegate
block|{
name|public
operator|:
name|explicit
name|QSqlRelationalDelegate
argument_list|(
name|QObject
operator|*
name|aParent
operator|=
literal|0
argument_list|)
operator|:
name|QItemDelegate
argument_list|(
argument|aParent
argument_list|)
block|{}
operator|~
name|QSqlRelationalDelegate
argument_list|()
block|{}
name|QWidget
operator|*
name|createEditor
argument_list|(
argument|QWidget *aParent
argument_list|,
argument|const QStyleOptionViewItem&option
argument_list|,
argument|const QModelIndex&index
argument_list|)
specifier|const
block|{
specifier|const
name|QSqlRelationalTableModel
operator|*
name|sqlModel
operator|=
name|qobject_cast
operator|<
specifier|const
name|QSqlRelationalTableModel
operator|*
operator|>
operator|(
name|index
operator|.
name|model
argument_list|()
operator|)
block|;
name|QSqlTableModel
operator|*
name|childModel
operator|=
name|sqlModel
condition|?
name|sqlModel
operator|->
name|relationModel
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
else|:
literal|0
block|;
if|if
condition|(
operator|!
name|childModel
condition|)
return|return
name|QItemDelegate
operator|::
name|createEditor
argument_list|(
name|aParent
argument_list|,
name|option
argument_list|,
name|index
argument_list|)
return|;
name|QComboBox
operator|*
name|combo
operator|=
name|new
name|QComboBox
argument_list|(
name|aParent
argument_list|)
block|;
name|combo
operator|->
name|setModel
argument_list|(
name|childModel
argument_list|)
block|;
name|combo
operator|->
name|setModelColumn
argument_list|(
name|childModel
operator|->
name|fieldIndex
argument_list|(
name|sqlModel
operator|->
name|relation
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
operator|.
name|displayColumn
argument_list|()
argument_list|)
argument_list|)
block|;
name|combo
operator|->
name|installEventFilter
argument_list|(
name|const_cast
operator|<
name|QSqlRelationalDelegate
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;
return|return
name|combo
return|;
block|}
end_decl_stmt
begin_decl_stmt
name|void
name|setModelData
argument_list|(
name|QWidget
operator|*
name|editor
argument_list|,
name|QAbstractItemModel
operator|*
name|model
argument_list|,
specifier|const
name|QModelIndex
operator|&
name|index
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QSqlRelationalTableModel
modifier|*
name|sqlModel
init|=
name|qobject_cast
operator|<
name|QSqlRelationalTableModel
operator|*
operator|>
operator|(
name|model
operator|)
decl_stmt|;
name|QSqlTableModel
modifier|*
name|childModel
init|=
name|sqlModel
condition|?
name|sqlModel
operator|->
name|relationModel
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
else|:
literal|0
decl_stmt|;
name|QComboBox
modifier|*
name|combo
init|=
name|qobject_cast
operator|<
name|QComboBox
operator|*
operator|>
operator|(
name|editor
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|sqlModel
operator|||
operator|!
name|childModel
operator|||
operator|!
name|combo
condition|)
block|{
name|QItemDelegate
operator|::
name|setModelData
argument_list|(
name|editor
argument_list|,
name|model
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|currentItem
init|=
name|combo
operator|->
name|currentIndex
argument_list|()
decl_stmt|;
name|int
name|childColIndex
init|=
name|childModel
operator|->
name|fieldIndex
argument_list|(
name|sqlModel
operator|->
name|relation
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
operator|.
name|displayColumn
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|childEditIndex
init|=
name|childModel
operator|->
name|fieldIndex
argument_list|(
name|sqlModel
operator|->
name|relation
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
operator|.
name|indexColumn
argument_list|()
argument_list|)
decl_stmt|;
name|sqlModel
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|childModel
operator|->
name|data
argument_list|(
name|childModel
operator|->
name|index
argument_list|(
name|currentItem
argument_list|,
name|childColIndex
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
name|sqlModel
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|childModel
operator|->
name|data
argument_list|(
name|childModel
operator|->
name|index
argument_list|(
name|currentItem
argument_list|,
name|childEditIndex
argument_list|)
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
expr_stmt|;
block|}
end_decl_stmt
begin_macro
unit|};
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_WIDGETS_LIB
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSQLRELATIONALDELEGATE_H
end_comment
end_unit
