begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtSql module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsql_mysql_p.h"
end_include
begin_include
include|#
directive|include
file|<QtSql/private/qsqldriver_p.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qsqlerror.h>
end_include
begin_include
include|#
directive|include
file|<qsqlfield.h>
end_include
begin_include
include|#
directive|include
file|<qsqlindex.h>
end_include
begin_include
include|#
directive|include
file|<qsqlquery.h>
end_include
begin_include
include|#
directive|include
file|<qsqlrecord.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN32
end_ifdef
begin_comment
comment|// comment the next line out if you want to use MySQL/embedded on Win32 systems.
end_comment
begin_comment
comment|// note that it will crash if you don't statically link to the mysql/e library!
end_comment
begin_define
DECL|macro|Q_NO_MYSQL_EMBEDDED
define|#
directive|define
name|Q_NO_MYSQL_EMBEDDED
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|MYSQL_RES*
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|MYSQL*
argument_list|)
end_macro
begin_if
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
end_if
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|MYSQL_STMT*
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40100
end_if
begin_define
DECL|macro|Q_CLIENT_MULTI_STATEMENTS
define|#
directive|define
name|Q_CLIENT_MULTI_STATEMENTS
value|CLIENT_MULTI_STATEMENTS
end_define
begin_else
else|#
directive|else
end_else
begin_define
define|#
directive|define
name|Q_CLIENT_MULTI_STATEMENTS
value|0
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_class
DECL|class|QMYSQLDriverPrivate
class|class
name|QMYSQLDriverPrivate
super|:
specifier|public
name|QSqlDriverPrivate
block|{
public|public:
DECL|function|QMYSQLDriverPrivate
name|QMYSQLDriverPrivate
parameter_list|()
member_init_list|:
name|QSqlDriverPrivate
argument_list|()
member_init_list|,
name|mysql
argument_list|(
literal|0
argument_list|)
member_init_list|,
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODEC
name|tc
argument_list|(
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
argument_list|)
member_init_list|,
else|#
directive|else
name|tc
argument_list|(
literal|0
argument_list|)
member_init_list|,
endif|#
directive|endif
name|preparedQuerysEnabled
argument_list|(
literal|false
argument_list|)
block|{
name|dbmsType
operator|=
name|QSqlDriver
operator|::
name|MySqlServer
expr_stmt|;
block|}
DECL|member|mysql
name|MYSQL
modifier|*
name|mysql
decl_stmt|;
DECL|member|tc
name|QTextCodec
modifier|*
name|tc
decl_stmt|;
DECL|member|preparedQuerysEnabled
name|bool
name|preparedQuerysEnabled
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|toUnicode
specifier|static
specifier|inline
name|QString
name|toUnicode
parameter_list|(
name|QTextCodec
modifier|*
name|tc
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_TEXTCODEC
name|Q_UNUSED
argument_list|(
name|tc
argument_list|)
expr_stmt|;
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
name|str
argument_list|)
return|;
else|#
directive|else
return|return
name|tc
operator|->
name|toUnicode
argument_list|(
name|str
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|toUnicode
specifier|static
specifier|inline
name|QString
name|toUnicode
parameter_list|(
name|QTextCodec
modifier|*
name|tc
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|int
name|length
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_TEXTCODEC
name|Q_UNUSED
argument_list|(
name|tc
argument_list|)
expr_stmt|;
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
name|str
argument_list|,
name|length
argument_list|)
return|;
else|#
directive|else
return|return
name|tc
operator|->
name|toUnicode
argument_list|(
name|str
argument_list|,
name|length
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fromUnicode
specifier|static
specifier|inline
name|QByteArray
name|fromUnicode
parameter_list|(
name|QTextCodec
modifier|*
name|tc
parameter_list|,
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_TEXTCODEC
name|Q_UNUSED
argument_list|(
name|tc
argument_list|)
expr_stmt|;
return|return
name|str
operator|.
name|toLatin1
argument_list|()
return|;
else|#
directive|else
return|return
name|tc
operator|->
name|fromUnicode
argument_list|(
name|str
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qDateFromString
specifier|static
specifier|inline
name|QVariant
name|qDateFromString
parameter_list|(
specifier|const
name|QString
modifier|&
name|val
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DATESTRING
name|Q_UNUSED
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|val
argument_list|)
return|;
else|#
directive|else
if|if
condition|(
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QVariant
argument_list|(
name|QDate
argument_list|()
argument_list|)
return|;
return|return
name|QVariant
argument_list|(
name|QDate
operator|::
name|fromString
argument_list|(
name|val
argument_list|,
name|Qt
operator|::
name|ISODate
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qTimeFromString
specifier|static
specifier|inline
name|QVariant
name|qTimeFromString
parameter_list|(
specifier|const
name|QString
modifier|&
name|val
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DATESTRING
name|Q_UNUSED
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|val
argument_list|)
return|;
else|#
directive|else
if|if
condition|(
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QVariant
argument_list|(
name|QTime
argument_list|()
argument_list|)
return|;
return|return
name|QVariant
argument_list|(
name|QTime
operator|::
name|fromString
argument_list|(
name|val
argument_list|,
name|Qt
operator|::
name|ISODate
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qDateTimeFromString
specifier|static
specifier|inline
name|QVariant
name|qDateTimeFromString
parameter_list|(
name|QString
modifier|&
name|val
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_DATESTRING
name|Q_UNUSED
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|val
argument_list|)
return|;
else|#
directive|else
if|if
condition|(
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QVariant
argument_list|(
name|QDateTime
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|val
operator|.
name|length
argument_list|()
operator|==
literal|14
condition|)
comment|// TIMESTAMPS have the format yyyyMMddhhmmss
name|val
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|)
operator|.
name|insert
argument_list|(
literal|7
argument_list|,
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|)
operator|.
name|insert
argument_list|(
literal|10
argument_list|,
name|QLatin1Char
argument_list|(
literal|'T'
argument_list|)
argument_list|)
operator|.
name|insert
argument_list|(
literal|13
argument_list|,
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
operator|.
name|insert
argument_list|(
literal|16
argument_list|,
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|QDateTime
operator|::
name|fromString
argument_list|(
name|val
argument_list|,
name|Qt
operator|::
name|ISODate
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_class
DECL|class|QMYSQLResultPrivate
class|class
name|QMYSQLResultPrivate
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|QMYSQLResultPrivate
name|QMYSQLResultPrivate
parameter_list|(
specifier|const
name|QMYSQLDriver
modifier|*
name|dp
parameter_list|,
specifier|const
name|QMYSQLResult
modifier|*
name|d
parameter_list|)
member_init_list|:
name|driver
argument_list|(
name|dp
argument_list|)
member_init_list|,
name|result
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|q
argument_list|(
name|d
argument_list|)
member_init_list|,
name|rowsAffected
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hasBlobs
argument_list|(
literal|false
argument_list|)
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
member_init_list|,
name|stmt
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|meta
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|inBinds
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|outBinds
argument_list|(
literal|0
argument_list|)
endif|#
directive|endif
member_init_list|,
name|preparedQuery
argument_list|(
literal|false
argument_list|)
block|{
name|connect
argument_list|(
name|dp
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|driverDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|member|driver
specifier|const
name|QMYSQLDriver
modifier|*
name|driver
decl_stmt|;
DECL|member|result
name|MYSQL_RES
modifier|*
name|result
decl_stmt|;
DECL|member|row
name|MYSQL_ROW
name|row
decl_stmt|;
DECL|member|q
specifier|const
name|QMYSQLResult
modifier|*
name|q
decl_stmt|;
DECL|member|rowsAffected
name|int
name|rowsAffected
decl_stmt|;
name|bool
name|bindInValues
parameter_list|()
function_decl|;
name|void
name|bindBlobs
parameter_list|()
function_decl|;
DECL|member|hasBlobs
name|bool
name|hasBlobs
decl_stmt|;
DECL|struct|QMyField
struct|struct
name|QMyField
block|{
DECL|function|QMyField
name|QMyField
parameter_list|()
member_init_list|:
name|outField
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|nullIndicator
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|bufLength
argument_list|(
literal|0ul
argument_list|)
member_init_list|,
name|myField
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|type
argument_list|(
name|QVariant
operator|::
name|Invalid
argument_list|)
block|{}
DECL|member|outField
name|char
modifier|*
name|outField
decl_stmt|;
DECL|member|nullIndicator
name|my_bool
name|nullIndicator
decl_stmt|;
DECL|member|bufLength
name|ulong
name|bufLength
decl_stmt|;
DECL|member|myField
name|MYSQL_FIELD
modifier|*
name|myField
decl_stmt|;
DECL|member|type
name|QVariant
operator|::
name|Type
name|type
decl_stmt|;
block|}
struct|;
DECL|member|fields
name|QVector
argument_list|<
name|QMyField
argument_list|>
name|fields
decl_stmt|;
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
DECL|member|stmt
name|MYSQL_STMT
modifier|*
name|stmt
decl_stmt|;
DECL|member|meta
name|MYSQL_RES
modifier|*
name|meta
decl_stmt|;
DECL|member|inBinds
name|MYSQL_BIND
modifier|*
name|inBinds
decl_stmt|;
DECL|member|outBinds
name|MYSQL_BIND
modifier|*
name|outBinds
decl_stmt|;
endif|#
directive|endif
DECL|member|preparedQuery
name|bool
name|preparedQuery
decl_stmt|;
private|private
name|Q_SLOTS
private|:
DECL|function|driverDestroyed
name|void
name|driverDestroyed
parameter_list|()
block|{
name|driver
operator|=
name|NULL
expr_stmt|;
block|}
block|}
class|;
end_class
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODEC
end_ifndef
begin_function
DECL|function|codec
specifier|static
name|QTextCodec
modifier|*
name|codec
parameter_list|(
name|MYSQL
modifier|*
name|mysql
parameter_list|)
block|{
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|32321
name|QTextCodec
modifier|*
name|heuristicCodec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|mysql_character_set_name
argument_list|(
name|mysql
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|heuristicCodec
condition|)
return|return
name|heuristicCodec
return|;
endif|#
directive|endif
return|return
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_TEXTCODEC
end_comment
begin_function
DECL|function|qMakeError
specifier|static
name|QSqlError
name|qMakeError
parameter_list|(
specifier|const
name|QString
modifier|&
name|err
parameter_list|,
name|QSqlError
operator|::
name|ErrorType
name|type
parameter_list|,
specifier|const
name|QMYSQLDriverPrivate
modifier|*
name|p
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|cerr
init|=
name|p
operator|->
name|mysql
condition|?
name|mysql_error
argument_list|(
name|p
operator|->
name|mysql
argument_list|)
else|:
literal|0
decl_stmt|;
return|return
name|QSqlError
argument_list|(
name|QLatin1String
argument_list|(
literal|"QMYSQL: "
argument_list|)
operator|+
name|err
argument_list|,
name|p
operator|->
name|tc
condition|?
name|toUnicode
argument_list|(
name|p
operator|->
name|tc
argument_list|,
name|cerr
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
name|cerr
argument_list|)
argument_list|,
name|type
argument_list|,
name|mysql_errno
argument_list|(
name|p
operator|->
name|mysql
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qDecodeMYSQLType
specifier|static
name|QVariant
operator|::
name|Type
name|qDecodeMYSQLType
parameter_list|(
name|int
name|mysqltype
parameter_list|,
name|uint
name|flags
parameter_list|)
block|{
name|QVariant
operator|::
name|Type
name|type
decl_stmt|;
switch|switch
condition|(
name|mysqltype
condition|)
block|{
case|case
name|FIELD_TYPE_TINY
case|:
case|case
name|FIELD_TYPE_SHORT
case|:
case|case
name|FIELD_TYPE_LONG
case|:
case|case
name|FIELD_TYPE_INT24
case|:
name|type
operator|=
operator|(
name|flags
operator|&
name|UNSIGNED_FLAG
operator|)
condition|?
name|QVariant
operator|::
name|UInt
else|:
name|QVariant
operator|::
name|Int
expr_stmt|;
break|break;
case|case
name|FIELD_TYPE_YEAR
case|:
name|type
operator|=
name|QVariant
operator|::
name|Int
expr_stmt|;
break|break;
case|case
name|FIELD_TYPE_LONGLONG
case|:
name|type
operator|=
operator|(
name|flags
operator|&
name|UNSIGNED_FLAG
operator|)
condition|?
name|QVariant
operator|::
name|ULongLong
else|:
name|QVariant
operator|::
name|LongLong
expr_stmt|;
break|break;
case|case
name|FIELD_TYPE_FLOAT
case|:
case|case
name|FIELD_TYPE_DOUBLE
case|:
case|case
name|FIELD_TYPE_DECIMAL
case|:
if|#
directive|if
name|defined
argument_list|(
name|FIELD_TYPE_NEWDECIMAL
argument_list|)
case|case
name|FIELD_TYPE_NEWDECIMAL
case|:
endif|#
directive|endif
name|type
operator|=
name|QVariant
operator|::
name|Double
expr_stmt|;
break|break;
case|case
name|FIELD_TYPE_DATE
case|:
name|type
operator|=
name|QVariant
operator|::
name|Date
expr_stmt|;
break|break;
case|case
name|FIELD_TYPE_TIME
case|:
name|type
operator|=
name|QVariant
operator|::
name|Time
expr_stmt|;
break|break;
case|case
name|FIELD_TYPE_DATETIME
case|:
case|case
name|FIELD_TYPE_TIMESTAMP
case|:
name|type
operator|=
name|QVariant
operator|::
name|DateTime
expr_stmt|;
break|break;
case|case
name|FIELD_TYPE_STRING
case|:
case|case
name|FIELD_TYPE_VAR_STRING
case|:
case|case
name|FIELD_TYPE_BLOB
case|:
case|case
name|FIELD_TYPE_TINY_BLOB
case|:
case|case
name|FIELD_TYPE_MEDIUM_BLOB
case|:
case|case
name|FIELD_TYPE_LONG_BLOB
case|:
name|type
operator|=
operator|(
name|flags
operator|&
name|BINARY_FLAG
operator|)
condition|?
name|QVariant
operator|::
name|ByteArray
else|:
name|QVariant
operator|::
name|String
expr_stmt|;
break|break;
default|default:
case|case
name|FIELD_TYPE_ENUM
case|:
case|case
name|FIELD_TYPE_SET
case|:
name|type
operator|=
name|QVariant
operator|::
name|String
expr_stmt|;
break|break;
block|}
return|return
name|type
return|;
block|}
end_function
begin_function
DECL|function|qToField
specifier|static
name|QSqlField
name|qToField
parameter_list|(
name|MYSQL_FIELD
modifier|*
name|field
parameter_list|,
name|QTextCodec
modifier|*
name|tc
parameter_list|)
block|{
name|QSqlField
name|f
argument_list|(
name|toUnicode
argument_list|(
name|tc
argument_list|,
name|field
operator|->
name|name
argument_list|)
argument_list|,
name|qDecodeMYSQLType
argument_list|(
name|int
argument_list|(
name|field
operator|->
name|type
argument_list|)
argument_list|,
name|field
operator|->
name|flags
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|setRequired
argument_list|(
name|IS_NOT_NULL
argument_list|(
name|field
operator|->
name|flags
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|setLength
argument_list|(
name|field
operator|->
name|length
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPrecision
argument_list|(
name|field
operator|->
name|decimals
argument_list|)
expr_stmt|;
name|f
operator|.
name|setSqlType
argument_list|(
name|field
operator|->
name|type
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAutoValue
argument_list|(
name|field
operator|->
name|flags
operator|&
name|AUTO_INCREMENT_FLAG
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
end_function
begin_if
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
end_if
begin_function
DECL|function|qMakeStmtError
specifier|static
name|QSqlError
name|qMakeStmtError
parameter_list|(
specifier|const
name|QString
modifier|&
name|err
parameter_list|,
name|QSqlError
operator|::
name|ErrorType
name|type
parameter_list|,
name|MYSQL_STMT
modifier|*
name|stmt
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|cerr
init|=
name|mysql_stmt_error
argument_list|(
name|stmt
argument_list|)
decl_stmt|;
return|return
name|QSqlError
argument_list|(
name|QLatin1String
argument_list|(
literal|"QMYSQL3: "
argument_list|)
operator|+
name|err
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|cerr
argument_list|)
argument_list|,
name|type
argument_list|,
name|mysql_stmt_errno
argument_list|(
name|stmt
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qIsBlob
specifier|static
name|bool
name|qIsBlob
parameter_list|(
name|int
name|t
parameter_list|)
block|{
return|return
name|t
operator|==
name|MYSQL_TYPE_TINY_BLOB
operator|||
name|t
operator|==
name|MYSQL_TYPE_BLOB
operator|||
name|t
operator|==
name|MYSQL_TYPE_MEDIUM_BLOB
operator|||
name|t
operator|==
name|MYSQL_TYPE_LONG_BLOB
return|;
block|}
end_function
begin_function
DECL|function|qIsInteger
specifier|static
name|bool
name|qIsInteger
parameter_list|(
name|int
name|t
parameter_list|)
block|{
return|return
name|t
operator|==
name|MYSQL_TYPE_TINY
operator|||
name|t
operator|==
name|MYSQL_TYPE_SHORT
operator|||
name|t
operator|==
name|MYSQL_TYPE_LONG
operator|||
name|t
operator|==
name|MYSQL_TYPE_LONGLONG
operator|||
name|t
operator|==
name|MYSQL_TYPE_INT24
return|;
block|}
end_function
begin_function
DECL|function|bindBlobs
name|void
name|QMYSQLResultPrivate
operator|::
name|bindBlobs
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
name|MYSQL_FIELD
modifier|*
name|fieldInfo
decl_stmt|;
name|MYSQL_BIND
modifier|*
name|bind
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|fieldInfo
operator|=
name|fields
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|myField
expr_stmt|;
if|if
condition|(
name|qIsBlob
argument_list|(
name|inBinds
index|[
name|i
index|]
operator|.
name|buffer_type
argument_list|)
operator|&&
name|meta
operator|&&
name|fieldInfo
condition|)
block|{
name|bind
operator|=
operator|&
name|inBinds
index|[
name|i
index|]
expr_stmt|;
name|bind
operator|->
name|buffer_length
operator|=
name|fieldInfo
operator|->
name|max_length
expr_stmt|;
operator|delete
index|[]
cast|static_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|bind
operator|->
name|buffer
argument_list|)
expr_stmt|;
name|bind
operator|->
name|buffer
operator|=
operator|new
name|char
index|[
name|fieldInfo
operator|->
name|max_length
index|]
expr_stmt|;
name|fields
index|[
name|i
index|]
operator|.
name|outField
operator|=
cast|static_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|bind
operator|->
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|bindInValues
name|bool
name|QMYSQLResultPrivate
operator|::
name|bindInValues
parameter_list|()
block|{
name|MYSQL_BIND
modifier|*
name|bind
decl_stmt|;
name|char
modifier|*
name|field
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|meta
condition|)
name|meta
operator|=
name|mysql_stmt_result_metadata
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|meta
condition|)
return|return
literal|false
return|;
name|fields
operator|.
name|resize
argument_list|(
name|mysql_num_fields
argument_list|(
name|meta
argument_list|)
argument_list|)
expr_stmt|;
name|inBinds
operator|=
operator|new
name|MYSQL_BIND
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|memset
argument_list|(
name|inBinds
argument_list|,
literal|0
argument_list|,
name|fields
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|MYSQL_BIND
argument_list|)
argument_list|)
expr_stmt|;
name|MYSQL_FIELD
modifier|*
name|fieldInfo
decl_stmt|;
while|while
condition|(
operator|(
name|fieldInfo
operator|=
name|mysql_fetch_field
argument_list|(
name|meta
argument_list|)
operator|)
condition|)
block|{
name|QMyField
modifier|&
name|f
init|=
name|fields
index|[
name|i
index|]
decl_stmt|;
name|f
operator|.
name|myField
operator|=
name|fieldInfo
expr_stmt|;
name|f
operator|.
name|type
operator|=
name|qDecodeMYSQLType
argument_list|(
name|fieldInfo
operator|->
name|type
argument_list|,
name|fieldInfo
operator|->
name|flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|qIsBlob
argument_list|(
name|fieldInfo
operator|->
name|type
argument_list|)
condition|)
block|{
comment|// the size of a blob-field is available as soon as we call
comment|// mysql_stmt_store_result()
comment|// after mysql_stmt_exec() in QMYSQLResult::exec()
name|fieldInfo
operator|->
name|length
operator|=
literal|0
expr_stmt|;
name|hasBlobs
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// fieldInfo->length specifies the display width, which may be too
comment|// small to hold valid integer values (see
comment|// http://dev.mysql.com/doc/refman/5.0/en/numeric-types.html ), so
comment|// always use the MAX_BIGINT_WIDTH for integer types
if|if
condition|(
name|qIsInteger
argument_list|(
name|fieldInfo
operator|->
name|type
argument_list|)
condition|)
block|{
name|fieldInfo
operator|->
name|length
operator|=
name|MAX_BIGINT_WIDTH
expr_stmt|;
block|}
name|fieldInfo
operator|->
name|type
operator|=
name|MYSQL_TYPE_STRING
expr_stmt|;
block|}
name|bind
operator|=
operator|&
name|inBinds
index|[
name|i
index|]
expr_stmt|;
name|field
operator|=
operator|new
name|char
index|[
name|fieldInfo
operator|->
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|memset
argument_list|(
name|field
argument_list|,
literal|0
argument_list|,
name|fieldInfo
operator|->
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|bind
operator|->
name|buffer_type
operator|=
name|fieldInfo
operator|->
name|type
expr_stmt|;
name|bind
operator|->
name|buffer
operator|=
name|field
expr_stmt|;
name|bind
operator|->
name|buffer_length
operator|=
name|f
operator|.
name|bufLength
operator|=
name|fieldInfo
operator|->
name|length
operator|+
literal|1
expr_stmt|;
name|bind
operator|->
name|is_null
operator|=
operator|&
name|f
operator|.
name|nullIndicator
expr_stmt|;
name|bind
operator|->
name|length
operator|=
operator|&
name|f
operator|.
name|bufLength
expr_stmt|;
name|f
operator|.
name|outField
operator|=
name|field
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|QMYSQLResult
name|QMYSQLResult
operator|::
name|QMYSQLResult
parameter_list|(
specifier|const
name|QMYSQLDriver
modifier|*
name|db
parameter_list|)
member_init_list|:
name|QSqlResult
argument_list|(
name|db
argument_list|)
block|{
name|d
operator|=
operator|new
name|QMYSQLResultPrivate
argument_list|(
name|db
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QMYSQLResult
name|QMYSQLResult
operator|::
name|~
name|QMYSQLResult
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|handle
name|QVariant
name|QMYSQLResult
operator|::
name|handle
parameter_list|()
specifier|const
block|{
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
if|if
condition|(
name|d
operator|->
name|preparedQuery
condition|)
return|return
name|d
operator|->
name|meta
condition|?
name|QVariant
operator|::
name|fromValue
argument_list|(
name|d
operator|->
name|meta
argument_list|)
else|:
name|QVariant
operator|::
name|fromValue
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
return|;
else|else
endif|#
directive|endif
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|d
operator|->
name|result
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QMYSQLResult
operator|::
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|result
condition|)
name|mysql_free_result
argument_list|(
name|d
operator|->
name|result
argument_list|)
expr_stmt|;
comment|// must iterate trough leftover result sets from multi-selects or stored procedures
comment|// if this isn't done subsequent queries will fail with "Commands out of sync"
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40100
while|while
condition|(
name|d
operator|->
name|driver
operator|&&
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
operator|&&
name|mysql_next_result
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
argument_list|)
operator|==
literal|0
condition|)
block|{
name|MYSQL_RES
modifier|*
name|res
init|=
name|mysql_store_result
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
condition|)
name|mysql_free_result
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
if|if
condition|(
name|d
operator|->
name|stmt
condition|)
block|{
if|if
condition|(
name|mysql_stmt_close
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"QMYSQLResult::cleanup: unable to free statement handle"
argument_list|)
expr_stmt|;
name|d
operator|->
name|stmt
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|meta
condition|)
block|{
name|mysql_free_result
argument_list|(
name|d
operator|->
name|meta
argument_list|)
expr_stmt|;
name|d
operator|->
name|meta
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|fields
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
operator|delete
index|[]
name|d
operator|->
name|fields
index|[
name|i
index|]
operator|.
name|outField
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|outBinds
condition|)
block|{
operator|delete
index|[]
name|d
operator|->
name|outBinds
expr_stmt|;
name|d
operator|->
name|outBinds
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|inBinds
condition|)
block|{
operator|delete
index|[]
name|d
operator|->
name|inBinds
expr_stmt|;
name|d
operator|->
name|inBinds
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
name|d
operator|->
name|hasBlobs
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|fields
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|result
operator|=
name|NULL
expr_stmt|;
name|d
operator|->
name|row
operator|=
name|NULL
expr_stmt|;
name|setAt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fetch
name|bool
name|QMYSQLResult
operator|::
name|fetch
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|driver
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|isForwardOnly
argument_list|()
condition|)
block|{
comment|// fake a forward seek
if|if
condition|(
name|at
argument_list|()
operator|<
name|i
condition|)
block|{
name|int
name|x
init|=
name|i
operator|-
name|at
argument_list|()
decl_stmt|;
while|while
condition|(
operator|--
name|x
operator|&&
name|fetchNext
argument_list|()
condition|)
block|{}
empty_stmt|;
return|return
name|fetchNext
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|at
argument_list|()
operator|==
name|i
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|d
operator|->
name|preparedQuery
condition|)
block|{
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
name|mysql_stmt_data_seek
argument_list|(
name|d
operator|->
name|stmt
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|int
name|nRC
init|=
name|mysql_stmt_fetch
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|nRC
condition|)
block|{
ifdef|#
directive|ifdef
name|MYSQL_DATA_TRUNCATED
if|if
condition|(
name|nRC
operator|==
literal|1
operator|||
name|nRC
operator|==
name|MYSQL_DATA_TRUNCATED
condition|)
else|#
directive|else
if|if
condition|(
name|nRC
operator|==
literal|1
condition|)
endif|#
directive|endif
name|setLastError
argument_list|(
name|qMakeStmtError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QMYSQLResult"
argument_list|,
literal|"Unable to fetch data"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|stmt
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
else|else
block|{
name|mysql_data_seek
argument_list|(
name|d
operator|->
name|result
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|d
operator|->
name|row
operator|=
name|mysql_fetch_row
argument_list|(
name|d
operator|->
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|row
condition|)
return|return
literal|false
return|;
block|}
name|setAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fetchNext
name|bool
name|QMYSQLResult
operator|::
name|fetchNext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|driver
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|preparedQuery
condition|)
block|{
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
name|int
name|nRC
init|=
name|mysql_stmt_fetch
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|nRC
condition|)
block|{
ifdef|#
directive|ifdef
name|MYSQL_DATA_TRUNCATED
if|if
condition|(
name|nRC
operator|==
literal|1
operator|||
name|nRC
operator|==
name|MYSQL_DATA_TRUNCATED
condition|)
else|#
directive|else
if|if
condition|(
name|nRC
operator|==
literal|1
condition|)
endif|#
directive|endif
comment|// MYSQL_DATA_TRUNCATED
name|setLastError
argument_list|(
name|qMakeStmtError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QMYSQLResult"
argument_list|,
literal|"Unable to fetch data"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|stmt
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
else|else
block|{
name|d
operator|->
name|row
operator|=
name|mysql_fetch_row
argument_list|(
name|d
operator|->
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|row
condition|)
return|return
literal|false
return|;
block|}
name|setAt
argument_list|(
name|at
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fetchLast
name|bool
name|QMYSQLResult
operator|::
name|fetchLast
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|driver
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|isForwardOnly
argument_list|()
condition|)
block|{
comment|// fake this since MySQL can't seek on forward only queries
name|bool
name|success
init|=
name|fetchNext
argument_list|()
decl_stmt|;
comment|// did we move at all?
while|while
condition|(
name|fetchNext
argument_list|()
condition|)
block|{}
empty_stmt|;
return|return
name|success
return|;
block|}
name|my_ulonglong
name|numRows
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|preparedQuery
condition|)
block|{
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
name|numRows
operator|=
name|mysql_stmt_num_rows
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
expr_stmt|;
else|#
directive|else
name|numRows
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|numRows
operator|=
name|mysql_num_rows
argument_list|(
name|d
operator|->
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|at
argument_list|()
operator|==
name|int
argument_list|(
name|numRows
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|numRows
condition|)
return|return
literal|false
return|;
return|return
name|fetch
argument_list|(
name|numRows
operator|-
literal|1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fetchFirst
name|bool
name|QMYSQLResult
operator|::
name|fetchFirst
parameter_list|()
block|{
if|if
condition|(
name|at
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|isForwardOnly
argument_list|()
condition|)
return|return
operator|(
name|at
argument_list|()
operator|==
name|QSql
operator|::
name|BeforeFirstRow
operator|)
condition|?
name|fetchNext
argument_list|()
else|:
literal|false
return|;
return|return
name|fetch
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|data
name|QVariant
name|QMYSQLResult
operator|::
name|data
parameter_list|(
name|int
name|field
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSelect
argument_list|()
operator|||
name|field
operator|>=
name|d
operator|->
name|fields
operator|.
name|count
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QMYSQLResult::data: column %d out of range"
argument_list|,
name|field
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|driver
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|int
name|fieldLength
init|=
literal|0
decl_stmt|;
specifier|const
name|QMYSQLResultPrivate
operator|::
name|QMyField
modifier|&
name|f
init|=
name|d
operator|->
name|fields
operator|.
name|at
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|QString
name|val
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|preparedQuery
condition|)
block|{
if|if
condition|(
name|f
operator|.
name|nullIndicator
condition|)
return|return
name|QVariant
argument_list|(
name|f
operator|.
name|type
argument_list|)
return|;
if|if
condition|(
name|f
operator|.
name|type
operator|!=
name|QVariant
operator|::
name|ByteArray
condition|)
name|val
operator|=
name|toUnicode
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|tc
argument_list|,
name|f
operator|.
name|outField
argument_list|,
name|f
operator|.
name|bufLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|d
operator|->
name|row
index|[
name|field
index|]
operator|==
name|NULL
condition|)
block|{
comment|// NULL value
return|return
name|QVariant
argument_list|(
name|f
operator|.
name|type
argument_list|)
return|;
block|}
name|fieldLength
operator|=
name|mysql_fetch_lengths
argument_list|(
name|d
operator|->
name|result
argument_list|)
index|[
name|field
index|]
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|type
operator|!=
name|QVariant
operator|::
name|ByteArray
condition|)
name|val
operator|=
name|toUnicode
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|tc
argument_list|,
name|d
operator|->
name|row
index|[
name|field
index|]
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|f
operator|.
name|type
condition|)
block|{
case|case
name|QVariant
operator|::
name|LongLong
case|:
return|return
name|QVariant
argument_list|(
name|val
operator|.
name|toLongLong
argument_list|()
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|ULongLong
case|:
return|return
name|QVariant
argument_list|(
name|val
operator|.
name|toULongLong
argument_list|()
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Int
case|:
return|return
name|QVariant
argument_list|(
name|val
operator|.
name|toInt
argument_list|()
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|UInt
case|:
return|return
name|QVariant
argument_list|(
name|val
operator|.
name|toUInt
argument_list|()
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Double
case|:
block|{
name|QVariant
name|v
decl_stmt|;
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|double
name|dbl
init|=
name|val
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|numericalPrecisionPolicy
argument_list|()
condition|)
block|{
case|case
name|QSql
operator|::
name|LowPrecisionInt32
case|:
name|v
operator|=
name|QVariant
argument_list|(
name|dbl
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|LowPrecisionInt64
case|:
name|v
operator|=
name|QVariant
argument_list|(
name|dbl
argument_list|)
operator|.
name|toLongLong
argument_list|()
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|LowPrecisionDouble
case|:
name|v
operator|=
name|QVariant
argument_list|(
name|dbl
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|HighPrecision
case|:
default|default:
name|v
operator|=
name|val
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|ok
condition|)
return|return
name|v
return|;
else|else
return|return
name|QVariant
argument_list|()
return|;
block|}
return|return
name|QVariant
argument_list|(
name|val
operator|.
name|toDouble
argument_list|()
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Date
case|:
return|return
name|qDateFromString
argument_list|(
name|val
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Time
case|:
return|return
name|qTimeFromString
argument_list|(
name|val
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|DateTime
case|:
return|return
name|qDateTimeFromString
argument_list|(
name|val
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|ByteArray
case|:
block|{
name|QByteArray
name|ba
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|preparedQuery
condition|)
block|{
name|ba
operator|=
name|QByteArray
argument_list|(
name|f
operator|.
name|outField
argument_list|,
name|f
operator|.
name|bufLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ba
operator|=
name|QByteArray
argument_list|(
name|d
operator|->
name|row
index|[
name|field
index|]
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
block|}
return|return
name|QVariant
argument_list|(
name|ba
argument_list|)
return|;
block|}
default|default:
case|case
name|QVariant
operator|::
name|String
case|:
return|return
name|QVariant
argument_list|(
name|val
argument_list|)
return|;
block|}
name|qWarning
argument_list|(
literal|"QMYSQLResult::data: unknown data type"
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isNull
name|bool
name|QMYSQLResult
operator|::
name|isNull
parameter_list|(
name|int
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|<
literal|0
operator|||
name|field
operator|>=
name|d
operator|->
name|fields
operator|.
name|count
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|d
operator|->
name|preparedQuery
condition|)
return|return
name|d
operator|->
name|fields
operator|.
name|at
argument_list|(
name|field
argument_list|)
operator|.
name|nullIndicator
return|;
else|else
return|return
name|d
operator|->
name|row
index|[
name|field
index|]
operator|==
name|NULL
return|;
block|}
end_function
begin_function
DECL|function|reset
name|bool
name|QMYSQLResult
operator|::
name|reset
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
block|{
if|if
condition|(
operator|!
name|driver
argument_list|()
operator|||
operator|!
name|driver
argument_list|()
operator|->
name|isOpen
argument_list|()
operator|||
name|driver
argument_list|()
operator|->
name|isOpenError
argument_list|()
operator|||
operator|!
name|d
operator|->
name|driver
condition|)
return|return
literal|false
return|;
name|d
operator|->
name|preparedQuery
operator|=
literal|false
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
specifier|const
name|QByteArray
name|encQuery
argument_list|(
name|fromUnicode
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|tc
argument_list|,
name|query
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mysql_real_query
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
argument_list|,
name|encQuery
operator|.
name|data
argument_list|()
argument_list|,
name|encQuery
operator|.
name|length
argument_list|()
argument_list|)
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QMYSQLResult"
argument_list|,
literal|"Unable to execute query"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|result
operator|=
name|mysql_store_result
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|result
operator|&&
name|mysql_field_count
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
argument_list|)
operator|>
literal|0
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QMYSQLResult"
argument_list|,
literal|"Unable to store result"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|numFields
init|=
name|mysql_field_count
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
argument_list|)
decl_stmt|;
name|setSelect
argument_list|(
name|numFields
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|fields
operator|.
name|resize
argument_list|(
name|numFields
argument_list|)
expr_stmt|;
name|d
operator|->
name|rowsAffected
operator|=
name|mysql_affected_rows
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSelect
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|MYSQL_FIELD
modifier|*
name|field
init|=
name|mysql_fetch_field_direct
argument_list|(
name|d
operator|->
name|result
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|d
operator|->
name|fields
index|[
name|i
index|]
operator|.
name|type
operator|=
name|qDecodeMYSQLType
argument_list|(
name|field
operator|->
name|type
argument_list|,
name|field
operator|->
name|flags
argument_list|)
expr_stmt|;
block|}
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
block|}
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|isActive
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|size
name|int
name|QMYSQLResult
operator|::
name|size
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|driver
operator|&&
name|isSelect
argument_list|()
condition|)
if|if
condition|(
name|d
operator|->
name|preparedQuery
condition|)
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
return|return
name|mysql_stmt_num_rows
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
return|;
else|#
directive|else
return|return
operator|-
literal|1
return|;
endif|#
directive|endif
else|else
return|return
name|int
argument_list|(
name|mysql_num_rows
argument_list|(
name|d
operator|->
name|result
argument_list|)
argument_list|)
return|;
else|else
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|numRowsAffected
name|int
name|QMYSQLResult
operator|::
name|numRowsAffected
parameter_list|()
block|{
return|return
name|d
operator|->
name|rowsAffected
return|;
block|}
end_function
begin_function
DECL|function|lastInsertId
name|QVariant
name|QMYSQLResult
operator|::
name|lastInsertId
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isActive
argument_list|()
operator|||
operator|!
name|d
operator|->
name|driver
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|d
operator|->
name|preparedQuery
condition|)
block|{
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
name|quint64
name|id
init|=
name|mysql_stmt_insert_id
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
return|return
name|QVariant
argument_list|(
name|id
argument_list|)
return|;
endif|#
directive|endif
block|}
else|else
block|{
name|quint64
name|id
init|=
name|mysql_insert_id
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
return|return
name|QVariant
argument_list|(
name|id
argument_list|)
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|record
name|QSqlRecord
name|QMYSQLResult
operator|::
name|record
parameter_list|()
specifier|const
block|{
name|QSqlRecord
name|info
decl_stmt|;
name|MYSQL_RES
modifier|*
name|res
decl_stmt|;
if|if
condition|(
operator|!
name|isActive
argument_list|()
operator|||
operator|!
name|isSelect
argument_list|()
operator|||
operator|!
name|d
operator|->
name|driver
condition|)
return|return
name|info
return|;
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
name|res
operator|=
name|d
operator|->
name|preparedQuery
condition|?
name|d
operator|->
name|meta
else|:
name|d
operator|->
name|result
expr_stmt|;
else|#
directive|else
name|res
operator|=
name|d
operator|->
name|result
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|mysql_errno
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
argument_list|)
condition|)
block|{
name|mysql_field_seek
argument_list|(
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MYSQL_FIELD
modifier|*
name|field
init|=
name|mysql_fetch_field
argument_list|(
name|res
argument_list|)
decl_stmt|;
while|while
condition|(
name|field
condition|)
block|{
name|info
operator|.
name|append
argument_list|(
name|qToField
argument_list|(
name|field
argument_list|,
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|tc
argument_list|)
argument_list|)
expr_stmt|;
name|field
operator|=
name|mysql_fetch_field
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
name|mysql_field_seek
argument_list|(
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
end_function
begin_function
DECL|function|nextResult
name|bool
name|QMYSQLResult
operator|::
name|nextResult
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|driver
condition|)
return|return
literal|false
return|;
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40100
name|setAt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|result
operator|&&
name|isSelect
argument_list|()
condition|)
name|mysql_free_result
argument_list|(
name|d
operator|->
name|result
argument_list|)
expr_stmt|;
name|d
operator|->
name|result
operator|=
literal|0
expr_stmt|;
name|setSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|fields
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
operator|delete
index|[]
name|d
operator|->
name|fields
index|[
name|i
index|]
operator|.
name|outField
expr_stmt|;
name|d
operator|->
name|fields
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|status
init|=
name|mysql_next_result
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|>
literal|0
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QMYSQLResult"
argument_list|,
literal|"Unable to execute next query"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|status
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
comment|// No more result sets
block|}
name|d
operator|->
name|result
operator|=
name|mysql_store_result
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
argument_list|)
expr_stmt|;
name|int
name|numFields
init|=
name|mysql_field_count
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|result
operator|&&
name|numFields
operator|>
literal|0
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QMYSQLResult"
argument_list|,
literal|"Unable to store next result"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|setSelect
argument_list|(
name|numFields
operator|>
literal|0
argument_list|)
expr_stmt|;
name|d
operator|->
name|fields
operator|.
name|resize
argument_list|(
name|numFields
argument_list|)
expr_stmt|;
name|d
operator|->
name|rowsAffected
operator|=
name|mysql_affected_rows
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSelect
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
name|MYSQL_FIELD
modifier|*
name|field
init|=
name|mysql_fetch_field_direct
argument_list|(
name|d
operator|->
name|result
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|d
operator|->
name|fields
index|[
name|i
index|]
operator|.
name|type
operator|=
name|qDecodeMYSQLType
argument_list|(
name|field
operator|->
name|type
argument_list|,
name|field
operator|->
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|virtual_hook
name|void
name|QMYSQLResult
operator|::
name|virtual_hook
parameter_list|(
name|int
name|id
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|QSqlResult
operator|::
name|virtual_hook
argument_list|(
name|id
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
end_if
begin_function
DECL|function|toMySqlDate
specifier|static
name|MYSQL_TIME
modifier|*
name|toMySqlDate
parameter_list|(
name|QDate
name|date
parameter_list|,
name|QTime
name|time
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|type
operator|==
name|QVariant
operator|::
name|Time
operator|||
name|type
operator|==
name|QVariant
operator|::
name|Date
operator|||
name|type
operator|==
name|QVariant
operator|::
name|DateTime
argument_list|)
expr_stmt|;
name|MYSQL_TIME
modifier|*
name|myTime
init|=
operator|new
name|MYSQL_TIME
decl_stmt|;
name|memset
argument_list|(
name|myTime
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|MYSQL_TIME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|QVariant
operator|::
name|Time
operator|||
name|type
operator|==
name|QVariant
operator|::
name|DateTime
condition|)
block|{
name|myTime
operator|->
name|hour
operator|=
name|time
operator|.
name|hour
argument_list|()
expr_stmt|;
name|myTime
operator|->
name|minute
operator|=
name|time
operator|.
name|minute
argument_list|()
expr_stmt|;
name|myTime
operator|->
name|second
operator|=
name|time
operator|.
name|second
argument_list|()
expr_stmt|;
name|myTime
operator|->
name|second_part
operator|=
name|time
operator|.
name|msec
argument_list|()
operator|*
literal|1000
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|QVariant
operator|::
name|Date
operator|||
name|type
operator|==
name|QVariant
operator|::
name|DateTime
condition|)
block|{
name|myTime
operator|->
name|year
operator|=
name|date
operator|.
name|year
argument_list|()
expr_stmt|;
name|myTime
operator|->
name|month
operator|=
name|date
operator|.
name|month
argument_list|()
expr_stmt|;
name|myTime
operator|->
name|day
operator|=
name|date
operator|.
name|day
argument_list|()
expr_stmt|;
block|}
return|return
name|myTime
return|;
block|}
end_function
begin_function
DECL|function|prepare
name|bool
name|QMYSQLResult
operator|::
name|prepare
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|driver
condition|)
return|return
literal|false
return|;
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
name|cleanup
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|preparedQuerysEnabled
condition|)
return|return
name|QSqlResult
operator|::
name|prepare
argument_list|(
name|query
argument_list|)
return|;
name|int
name|r
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|stmt
condition|)
name|d
operator|->
name|stmt
operator|=
name|mysql_stmt_init
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|mysql
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|stmt
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QMYSQLResult"
argument_list|,
literal|"Unable to prepare statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|QByteArray
name|encQuery
argument_list|(
name|fromUnicode
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|tc
argument_list|,
name|query
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|=
name|mysql_stmt_prepare
argument_list|(
name|d
operator|->
name|stmt
argument_list|,
name|encQuery
operator|.
name|constData
argument_list|()
argument_list|,
name|encQuery
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeStmtError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QMYSQLResult"
argument_list|,
literal|"Unable to prepare statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|stmt
argument_list|)
argument_list|)
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|mysql_stmt_param_count
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|// allocate memory for outvalues
name|d
operator|->
name|outBinds
operator|=
operator|new
name|MYSQL_BIND
index|[
name|mysql_stmt_param_count
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
index|]
expr_stmt|;
block|}
name|setSelect
argument_list|(
name|d
operator|->
name|bindInValues
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|preparedQuery
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|exec
name|bool
name|QMYSQLResult
operator|::
name|exec
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|driver
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|preparedQuery
condition|)
return|return
name|QSqlResult
operator|::
name|exec
argument_list|()
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|stmt
condition|)
return|return
literal|false
return|;
name|int
name|r
init|=
literal|0
decl_stmt|;
name|MYSQL_BIND
modifier|*
name|currBind
decl_stmt|;
name|QVector
argument_list|<
name|MYSQL_TIME
modifier|*
argument_list|>
name|timeVector
decl_stmt|;
name|QVector
argument_list|<
name|QByteArray
argument_list|>
name|stringVector
decl_stmt|;
name|QVector
argument_list|<
name|my_bool
argument_list|>
name|nullVector
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QVariant
argument_list|>
name|values
init|=
name|boundValues
argument_list|()
decl_stmt|;
name|r
operator|=
name|mysql_stmt_reset
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeStmtError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QMYSQLResult"
argument_list|,
literal|"Unable to reset statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|stmt
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|mysql_stmt_param_count
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
operator|>
literal|0
operator|&&
name|mysql_stmt_param_count
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
operator|==
operator|(
name|uint
operator|)
name|values
operator|.
name|count
argument_list|()
condition|)
block|{
name|nullVector
operator|.
name|resize
argument_list|(
name|values
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QVariant
modifier|&
name|val
init|=
name|boundValues
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|void
modifier|*
name|data
init|=
cast|const_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|val
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|currBind
operator|=
operator|&
name|d
operator|->
name|outBinds
index|[
name|i
index|]
expr_stmt|;
name|nullVector
index|[
name|i
index|]
operator|=
cast|static_cast
argument_list|<
name|my_bool
argument_list|>
argument_list|(
name|val
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|currBind
operator|->
name|is_null
operator|=
operator|&
name|nullVector
index|[
name|i
index|]
expr_stmt|;
name|currBind
operator|->
name|length
operator|=
literal|0
expr_stmt|;
name|currBind
operator|->
name|is_unsigned
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|val
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|ByteArray
case|:
name|currBind
operator|->
name|buffer_type
operator|=
name|MYSQL_TYPE_BLOB
expr_stmt|;
name|currBind
operator|->
name|buffer
operator|=
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|val
operator|.
name|toByteArray
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|currBind
operator|->
name|buffer_length
operator|=
name|val
operator|.
name|toByteArray
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Time
case|:
case|case
name|QVariant
operator|::
name|Date
case|:
case|case
name|QVariant
operator|::
name|DateTime
case|:
block|{
name|MYSQL_TIME
modifier|*
name|myTime
init|=
name|toMySqlDate
argument_list|(
name|val
operator|.
name|toDate
argument_list|()
argument_list|,
name|val
operator|.
name|toTime
argument_list|()
argument_list|,
name|val
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
name|timeVector
operator|.
name|append
argument_list|(
name|myTime
argument_list|)
expr_stmt|;
name|currBind
operator|->
name|buffer
operator|=
name|myTime
expr_stmt|;
switch|switch
condition|(
name|val
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Time
case|:
name|currBind
operator|->
name|buffer_type
operator|=
name|MYSQL_TYPE_TIME
expr_stmt|;
name|myTime
operator|->
name|time_type
operator|=
name|MYSQL_TIMESTAMP_TIME
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Date
case|:
name|currBind
operator|->
name|buffer_type
operator|=
name|MYSQL_TYPE_DATE
expr_stmt|;
name|myTime
operator|->
name|time_type
operator|=
name|MYSQL_TIMESTAMP_DATE
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|DateTime
case|:
name|currBind
operator|->
name|buffer_type
operator|=
name|MYSQL_TYPE_DATETIME
expr_stmt|;
name|myTime
operator|->
name|time_type
operator|=
name|MYSQL_TIMESTAMP_DATETIME
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|currBind
operator|->
name|buffer_length
operator|=
sizeof|sizeof
argument_list|(
name|MYSQL_TIME
argument_list|)
expr_stmt|;
name|currBind
operator|->
name|length
operator|=
literal|0
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|UInt
case|:
case|case
name|QVariant
operator|::
name|Int
case|:
name|currBind
operator|->
name|buffer_type
operator|=
name|MYSQL_TYPE_LONG
expr_stmt|;
name|currBind
operator|->
name|buffer
operator|=
name|data
expr_stmt|;
name|currBind
operator|->
name|buffer_length
operator|=
sizeof|sizeof
argument_list|(
name|int
argument_list|)
expr_stmt|;
name|currBind
operator|->
name|is_unsigned
operator|=
operator|(
name|val
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|Int
operator|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Bool
case|:
name|currBind
operator|->
name|buffer_type
operator|=
name|MYSQL_TYPE_TINY
expr_stmt|;
name|currBind
operator|->
name|buffer
operator|=
name|data
expr_stmt|;
name|currBind
operator|->
name|buffer_length
operator|=
sizeof|sizeof
argument_list|(
name|bool
argument_list|)
expr_stmt|;
name|currBind
operator|->
name|is_unsigned
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
name|currBind
operator|->
name|buffer_type
operator|=
name|MYSQL_TYPE_DOUBLE
expr_stmt|;
name|currBind
operator|->
name|buffer
operator|=
name|data
expr_stmt|;
name|currBind
operator|->
name|buffer_length
operator|=
sizeof|sizeof
argument_list|(
name|double
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|LongLong
case|:
case|case
name|QVariant
operator|::
name|ULongLong
case|:
name|currBind
operator|->
name|buffer_type
operator|=
name|MYSQL_TYPE_LONGLONG
expr_stmt|;
name|currBind
operator|->
name|buffer
operator|=
name|data
expr_stmt|;
name|currBind
operator|->
name|buffer_length
operator|=
sizeof|sizeof
argument_list|(
name|qint64
argument_list|)
expr_stmt|;
name|currBind
operator|->
name|is_unsigned
operator|=
operator|(
name|val
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|ULongLong
operator|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
default|default:
block|{
name|QByteArray
name|ba
init|=
name|fromUnicode
argument_list|(
name|d
operator|->
name|driver
operator|->
name|d_func
argument_list|()
operator|->
name|tc
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|stringVector
operator|.
name|append
argument_list|(
name|ba
argument_list|)
expr_stmt|;
name|currBind
operator|->
name|buffer_type
operator|=
name|MYSQL_TYPE_STRING
expr_stmt|;
name|currBind
operator|->
name|buffer
operator|=
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|ba
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|currBind
operator|->
name|buffer_length
operator|=
name|ba
operator|.
name|length
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
name|r
operator|=
name|mysql_stmt_bind_param
argument_list|(
name|d
operator|->
name|stmt
argument_list|,
name|d
operator|->
name|outBinds
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeStmtError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QMYSQLResult"
argument_list|,
literal|"Unable to bind value"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|stmt
argument_list|)
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|timeVector
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|r
operator|=
name|mysql_stmt_execute
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|timeVector
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeStmtError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QMYSQLResult"
argument_list|,
literal|"Unable to execute statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|stmt
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//if there is meta-data there is also data
name|setSelect
argument_list|(
name|d
operator|->
name|meta
argument_list|)
expr_stmt|;
name|d
operator|->
name|rowsAffected
operator|=
name|mysql_stmt_affected_rows
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSelect
argument_list|()
condition|)
block|{
name|my_bool
name|update_max_length
init|=
literal|true
decl_stmt|;
name|r
operator|=
name|mysql_stmt_bind_result
argument_list|(
name|d
operator|->
name|stmt
argument_list|,
name|d
operator|->
name|inBinds
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeStmtError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QMYSQLResult"
argument_list|,
literal|"Unable to bind outvalues"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|stmt
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|d
operator|->
name|hasBlobs
condition|)
name|mysql_stmt_attr_set
argument_list|(
name|d
operator|->
name|stmt
argument_list|,
name|STMT_ATTR_UPDATE_MAX_LENGTH
argument_list|,
operator|&
name|update_max_length
argument_list|)
expr_stmt|;
name|r
operator|=
name|mysql_stmt_store_result
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeStmtError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QMYSQLResult"
argument_list|,
literal|"Unable to store statement results"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|stmt
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|d
operator|->
name|hasBlobs
condition|)
block|{
comment|// mysql_stmt_store_result() with STMT_ATTR_UPDATE_MAX_LENGTH set to true crashes
comment|// when called without a preceding call to mysql_stmt_bind_result()
comment|// in versions< 4.1.8
name|d
operator|->
name|bindBlobs
argument_list|()
expr_stmt|;
name|r
operator|=
name|mysql_stmt_bind_result
argument_list|(
name|d
operator|->
name|stmt
argument_list|,
name|d
operator|->
name|inBinds
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeStmtError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QMYSQLResult"
argument_list|,
literal|"Unable to bind outvalues"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|stmt
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
block|}
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/////////////////////////////////////////////////////////
end_comment
begin_decl_stmt
DECL|variable|qMySqlConnectionCount
specifier|static
name|int
name|qMySqlConnectionCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qMySqlInitHandledByUser
specifier|static
name|bool
name|qMySqlInitHandledByUser
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qLibraryInit
specifier|static
name|void
name|qLibraryInit
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_NO_MYSQL_EMBEDDED
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40000
if|if
condition|(
name|qMySqlInitHandledByUser
operator|||
name|qMySqlConnectionCount
operator|>
literal|1
condition|)
return|return;
if|#
directive|if
operator|(
name|MYSQL_VERSION_ID
operator|>=
literal|40110
operator|&&
name|MYSQL_VERSION_ID
operator|<
literal|50000
operator|)
operator|||
name|MYSQL_VERSION_ID
operator|>=
literal|50003
if|if
condition|(
name|mysql_library_init
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
block|{
else|#
directive|else
if|if
condition|(
name|mysql_server_init
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
block|{
endif|#
directive|endif
name|qWarning
argument_list|(
literal|"QMYSQLDriver::qServerInit: unable to start server."
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// MYSQL_VERSION_ID
endif|#
directive|endif
comment|// Q_NO_MYSQL_EMBEDDED
block|}
DECL|function|qLibraryEnd
specifier|static
name|void
name|qLibraryEnd
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_NO_MYSQL_EMBEDDED
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>
literal|40000
if|#
directive|if
operator|(
name|MYSQL_VERSION_ID
operator|>=
literal|40110
operator|&&
name|MYSQL_VERSION_ID
operator|<
literal|50000
operator|)
operator|||
name|MYSQL_VERSION_ID
operator|>=
literal|50003
name|mysql_library_end
argument_list|()
expr_stmt|;
else|#
directive|else
name|mysql_server_end
argument_list|()
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
endif|#
directive|endif
block|}
DECL|function|QMYSQLDriver
name|QMYSQLDriver
operator|::
name|QMYSQLDriver
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSqlDriver
argument_list|(
operator|*
operator|new
name|QMYSQLDriverPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|qLibraryInit
argument_list|()
expr_stmt|;
block|}
comment|/*!     Create a driver instance with the open connection handle, \a con.     The instance's parent (owner) is \a parent. */
DECL|function|QMYSQLDriver
name|QMYSQLDriver
operator|::
name|QMYSQLDriver
parameter_list|(
name|MYSQL
modifier|*
name|con
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSqlDriver
argument_list|(
operator|*
operator|new
name|QMYSQLDriverPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QMYSQLDriver
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|con
condition|)
block|{
name|d
operator|->
name|mysql
operator|=
operator|(
name|MYSQL
operator|*
operator|)
name|con
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODEC
name|d
operator|->
name|tc
operator|=
name|codec
argument_list|(
name|con
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|qMySqlConnectionCount
operator|==
literal|1
condition|)
name|qMySqlInitHandledByUser
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|qLibraryInit
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|init
name|void
name|QMYSQLDriver
operator|::
name|init
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QMYSQLDriver
argument_list|)
expr_stmt|;
name|d
operator|->
name|mysql
operator|=
literal|0
expr_stmt|;
name|qMySqlConnectionCount
operator|++
expr_stmt|;
block|}
DECL|function|~QMYSQLDriver
name|QMYSQLDriver
operator|::
name|~
name|QMYSQLDriver
parameter_list|()
block|{
name|qMySqlConnectionCount
operator|--
expr_stmt|;
if|if
condition|(
name|qMySqlConnectionCount
operator|==
literal|0
operator|&&
operator|!
name|qMySqlInitHandledByUser
condition|)
name|qLibraryEnd
argument_list|()
expr_stmt|;
block|}
DECL|function|hasFeature
name|bool
name|QMYSQLDriver
operator|::
name|hasFeature
parameter_list|(
name|DriverFeature
name|f
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMYSQLDriver
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|f
condition|)
block|{
case|case
name|Transactions
case|:
comment|// CLIENT_TRANSACTION should be defined in all recent mysql client libs> 3.23.34
ifdef|#
directive|ifdef
name|CLIENT_TRANSACTIONS
if|if
condition|(
name|d
operator|->
name|mysql
condition|)
block|{
if|if
condition|(
operator|(
name|d
operator|->
name|mysql
operator|->
name|server_capabilities
operator|&
name|CLIENT_TRANSACTIONS
operator|)
operator|==
name|CLIENT_TRANSACTIONS
condition|)
return|return
literal|true
return|;
block|}
endif|#
directive|endif
return|return
literal|false
return|;
case|case
name|NamedPlaceholders
case|:
case|case
name|BatchOperations
case|:
case|case
name|SimpleLocking
case|:
case|case
name|EventNotifications
case|:
case|case
name|FinishQuery
case|:
case|case
name|CancelQuery
case|:
return|return
literal|false
return|;
case|case
name|QuerySize
case|:
case|case
name|BLOB
case|:
case|case
name|LastInsertId
case|:
case|case
name|Unicode
case|:
case|case
name|LowPrecisionNumbers
case|:
return|return
literal|true
return|;
case|case
name|PreparedQueries
case|:
case|case
name|PositionalPlaceholders
case|:
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
return|return
name|d
operator|->
name|preparedQuerysEnabled
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
case|case
name|MultipleResultSets
case|:
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40100
return|return
literal|true
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
return|return
literal|false
return|;
block|}
DECL|function|setOptionFlag
specifier|static
name|void
name|setOptionFlag
parameter_list|(
name|uint
modifier|&
name|optionFlags
parameter_list|,
specifier|const
name|QString
modifier|&
name|opt
parameter_list|)
block|{
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"CLIENT_COMPRESS"
argument_list|)
condition|)
name|optionFlags
operator||=
name|CLIENT_COMPRESS
expr_stmt|;
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"CLIENT_FOUND_ROWS"
argument_list|)
condition|)
name|optionFlags
operator||=
name|CLIENT_FOUND_ROWS
expr_stmt|;
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"CLIENT_IGNORE_SPACE"
argument_list|)
condition|)
name|optionFlags
operator||=
name|CLIENT_IGNORE_SPACE
expr_stmt|;
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"CLIENT_INTERACTIVE"
argument_list|)
condition|)
name|optionFlags
operator||=
name|CLIENT_INTERACTIVE
expr_stmt|;
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"CLIENT_NO_SCHEMA"
argument_list|)
condition|)
name|optionFlags
operator||=
name|CLIENT_NO_SCHEMA
expr_stmt|;
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"CLIENT_ODBC"
argument_list|)
condition|)
name|optionFlags
operator||=
name|CLIENT_ODBC
expr_stmt|;
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"CLIENT_SSL"
argument_list|)
condition|)
name|optionFlags
operator||=
name|CLIENT_SSL
expr_stmt|;
else|else
name|qWarning
argument_list|(
literal|"QMYSQLDriver::open: Unknown connect option '%s'"
argument_list|,
name|opt
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|open
name|bool
name|QMYSQLDriver
operator|::
name|open
parameter_list|(
specifier|const
name|QString
modifier|&
name|db
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
name|int
name|port
parameter_list|,
specifier|const
name|QString
modifier|&
name|connOpts
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QMYSQLDriver
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOpen
argument_list|()
condition|)
name|close
argument_list|()
expr_stmt|;
comment|/* This is a hack to get MySQL's stored procedure support working.        Since a stored procedure _may_ return multiple result sets,        we have to enable CLIEN_MULTI_STATEMENTS here, otherwise _any_        stored procedure call will fail.     */
name|unsigned
name|int
name|optionFlags
init|=
name|Q_CLIENT_MULTI_STATEMENTS
decl_stmt|;
specifier|const
name|QStringList
name|opts
argument_list|(
name|connOpts
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|unixSocket
decl_stmt|;
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|50000
name|my_bool
name|reconnect
init|=
literal|false
decl_stmt|;
endif|#
directive|endif
comment|// extract the real options from the string
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|opts
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|tmp
argument_list|(
name|opts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|simplified
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|idx
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|=
name|tmp
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|QString
name|val
init|=
name|tmp
operator|.
name|mid
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
name|QString
name|opt
init|=
name|tmp
operator|.
name|left
argument_list|(
name|idx
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"UNIX_SOCKET"
argument_list|)
condition|)
name|unixSocket
operator|=
name|val
expr_stmt|;
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|50000
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"MYSQL_OPT_RECONNECT"
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
operator|==
name|QLatin1String
argument_list|(
literal|"TRUE"
argument_list|)
operator|||
name|val
operator|==
name|QLatin1String
argument_list|(
literal|"1"
argument_list|)
operator|||
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
name|reconnect
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
elseif|else
if|if
condition|(
name|val
operator|==
name|QLatin1String
argument_list|(
literal|"TRUE"
argument_list|)
operator|||
name|val
operator|==
name|QLatin1String
argument_list|(
literal|"1"
argument_list|)
condition|)
name|setOptionFlag
argument_list|(
name|optionFlags
argument_list|,
name|tmp
operator|.
name|left
argument_list|(
name|idx
argument_list|)
operator|.
name|simplified
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|qWarning
argument_list|(
literal|"QMYSQLDriver::open: Illegal connect option value '%s'"
argument_list|,
name|tmp
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setOptionFlag
argument_list|(
name|optionFlags
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|d
operator|->
name|mysql
operator|=
name|mysql_init
argument_list|(
operator|(
name|MYSQL
operator|*
operator|)
literal|0
argument_list|)
operator|)
operator|&&
name|mysql_real_connect
argument_list|(
name|d
operator|->
name|mysql
argument_list|,
name|host
operator|.
name|isNull
argument_list|()
condition|?
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
else|:
name|host
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|user
operator|.
name|isNull
argument_list|()
condition|?
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
else|:
name|user
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|password
operator|.
name|isNull
argument_list|()
condition|?
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
else|:
name|password
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|db
operator|.
name|isNull
argument_list|()
condition|?
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
else|:
name|db
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
name|port
operator|>
operator|-
literal|1
operator|)
condition|?
name|port
else|:
literal|0
argument_list|,
name|unixSocket
operator|.
name|isNull
argument_list|()
condition|?
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
else|:
name|unixSocket
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|optionFlags
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|db
operator|.
name|isEmpty
argument_list|()
operator|&&
name|mysql_select_db
argument_list|(
name|d
operator|->
name|mysql
argument_list|,
name|db
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to open database '%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|db
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|mysql_close
argument_list|(
name|d
operator|->
name|mysql
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|50000
if|if
condition|(
name|reconnect
condition|)
name|mysql_options
argument_list|(
name|d
operator|->
name|mysql
argument_list|,
name|MYSQL_OPT_RECONNECT
argument_list|,
operator|&
name|reconnect
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to connect"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|mysql_close
argument_list|(
name|d
operator|->
name|mysql
argument_list|)
expr_stmt|;
name|d
operator|->
name|mysql
operator|=
name|NULL
expr_stmt|;
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|#
directive|if
operator|(
name|MYSQL_VERSION_ID
operator|>=
literal|40113
operator|&&
name|MYSQL_VERSION_ID
operator|<
literal|50000
operator|)
operator|||
name|MYSQL_VERSION_ID
operator|>=
literal|50007
comment|// force the communication to be utf8
name|mysql_set_character_set
argument_list|(
name|d
operator|->
name|mysql
argument_list|,
literal|"utf8"
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TEXTCODEC
name|d
operator|->
name|tc
operator|=
name|codec
argument_list|(
name|d
operator|->
name|mysql
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
name|d
operator|->
name|preparedQuerysEnabled
operator|=
name|mysql_get_client_version
argument_list|()
operator|>=
literal|40108
operator|&&
name|mysql_get_server_version
argument_list|(
name|d
operator|->
name|mysql
argument_list|)
operator|>=
literal|40100
expr_stmt|;
else|#
directive|else
name|d
operator|->
name|preparedQuerysEnabled
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_THREAD
name|mysql_thread_init
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|close
name|void
name|QMYSQLDriver
operator|::
name|close
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QMYSQLDriver
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOpen
argument_list|()
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_THREAD
name|mysql_thread_end
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|mysql_close
argument_list|(
name|d
operator|->
name|mysql
argument_list|)
expr_stmt|;
name|d
operator|->
name|mysql
operator|=
name|NULL
expr_stmt|;
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|createResult
name|QSqlResult
modifier|*
name|QMYSQLDriver
operator|::
name|createResult
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QMYSQLResult
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|function|tables
name|QStringList
name|QMYSQLDriver
operator|::
name|tables
parameter_list|(
name|QSql
operator|::
name|TableType
name|type
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMYSQLDriver
argument_list|)
expr_stmt|;
name|QStringList
name|tl
decl_stmt|;
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40100
if|if
condition|(
name|mysql_get_server_version
argument_list|(
name|d
operator|->
name|mysql
argument_list|)
operator|<
literal|50000
condition|)
block|{
endif|#
directive|endif
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|tl
return|;
if|if
condition|(
operator|!
operator|(
name|type
operator|&
name|QSql
operator|::
name|Tables
operator|)
condition|)
return|return
name|tl
return|;
name|MYSQL_RES
modifier|*
name|tableRes
init|=
name|mysql_list_tables
argument_list|(
name|d
operator|->
name|mysql
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|MYSQL_ROW
name|row
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tableRes
condition|)
block|{
name|mysql_data_seek
argument_list|(
name|tableRes
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|row
operator|=
name|mysql_fetch_row
argument_list|(
name|tableRes
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|row
condition|)
break|break;
name|tl
operator|.
name|append
argument_list|(
name|toUnicode
argument_list|(
name|d
operator|->
name|tc
argument_list|,
name|row
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|mysql_free_result
argument_list|(
name|tableRes
argument_list|)
expr_stmt|;
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40100
block|}
else|else
block|{
name|QSqlQuery
name|q
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|Tables
condition|)
block|{
name|QString
name|sql
init|=
name|QLatin1String
argument_list|(
literal|"select table_name from information_schema.tables where table_schema = '"
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|d
operator|->
name|mysql
operator|->
name|db
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"' and table_type = 'BASE TABLE'"
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|sql
argument_list|)
expr_stmt|;
while|while
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
name|tl
operator|.
name|append
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|Views
condition|)
block|{
name|QString
name|sql
init|=
name|QLatin1String
argument_list|(
literal|"select table_name from information_schema.tables where table_schema = '"
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|d
operator|->
name|mysql
operator|->
name|db
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"' and table_type = 'VIEW'"
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|sql
argument_list|)
expr_stmt|;
while|while
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
name|tl
operator|.
name|append
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
return|return
name|tl
return|;
block|}
DECL|function|primaryIndex
name|QSqlIndex
name|QMYSQLDriver
operator|::
name|primaryIndex
parameter_list|(
specifier|const
name|QString
modifier|&
name|tablename
parameter_list|)
specifier|const
block|{
name|QSqlIndex
name|idx
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|idx
return|;
name|QSqlQuery
name|i
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|stmt
argument_list|(
name|QLatin1String
argument_list|(
literal|"show index from %1;"
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlRecord
name|fil
init|=
name|record
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
name|i
operator|.
name|exec
argument_list|(
name|stmt
operator|.
name|arg
argument_list|(
name|tablename
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|isActive
argument_list|()
operator|&&
name|i
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"PRIMARY"
argument_list|)
condition|)
block|{
name|idx
operator|.
name|append
argument_list|(
name|fil
operator|.
name|field
argument_list|(
name|i
operator|.
name|value
argument_list|(
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setCursorName
argument_list|(
name|i
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setName
argument_list|(
name|i
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|idx
return|;
block|}
DECL|function|record
name|QSqlRecord
name|QMYSQLDriver
operator|::
name|record
parameter_list|(
specifier|const
name|QString
modifier|&
name|tablename
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMYSQLDriver
argument_list|)
expr_stmt|;
name|QString
name|table
init|=
name|tablename
decl_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|table
operator|=
name|stripDelimiters
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
name|QSqlRecord
name|info
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|info
return|;
name|MYSQL_RES
modifier|*
name|r
init|=
name|mysql_list_fields
argument_list|(
name|d
operator|->
name|mysql
argument_list|,
name|table
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
condition|)
block|{
return|return
name|info
return|;
block|}
name|MYSQL_FIELD
modifier|*
name|field
decl_stmt|;
while|while
condition|(
operator|(
name|field
operator|=
name|mysql_fetch_field
argument_list|(
name|r
argument_list|)
operator|)
condition|)
name|info
operator|.
name|append
argument_list|(
name|qToField
argument_list|(
name|field
argument_list|,
name|d
operator|->
name|tc
argument_list|)
argument_list|)
expr_stmt|;
name|mysql_free_result
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
DECL|function|handle
name|QVariant
name|QMYSQLDriver
operator|::
name|handle
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMYSQLDriver
argument_list|)
expr_stmt|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|d
operator|->
name|mysql
argument_list|)
return|;
block|}
DECL|function|beginTransaction
name|bool
name|QMYSQLDriver
operator|::
name|beginTransaction
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QMYSQLDriver
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|CLIENT_TRANSACTIONS
return|return
literal|false
return|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QMYSQLDriver::beginTransaction: Database not open"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|mysql_query
argument_list|(
name|d
operator|->
name|mysql
argument_list|,
literal|"BEGIN WORK"
argument_list|)
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to begin transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|commitTransaction
name|bool
name|QMYSQLDriver
operator|::
name|commitTransaction
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QMYSQLDriver
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|CLIENT_TRANSACTIONS
return|return
literal|false
return|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QMYSQLDriver::commitTransaction: Database not open"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|mysql_query
argument_list|(
name|d
operator|->
name|mysql
argument_list|,
literal|"COMMIT"
argument_list|)
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to commit transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|rollbackTransaction
name|bool
name|QMYSQLDriver
operator|::
name|rollbackTransaction
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QMYSQLDriver
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|CLIENT_TRANSACTIONS
return|return
literal|false
return|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QMYSQLDriver::rollbackTransaction: Database not open"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|mysql_query
argument_list|(
name|d
operator|->
name|mysql
argument_list|,
literal|"ROLLBACK"
argument_list|)
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to rollback transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|formatValue
name|QString
name|QMYSQLDriver
operator|::
name|formatValue
parameter_list|(
specifier|const
name|QSqlField
modifier|&
name|field
parameter_list|,
name|bool
name|trimStrings
parameter_list|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QMYSQLDriver
argument_list|)
expr_stmt|;
name|QString
name|r
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|field
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|String
case|:
comment|// Escape '\' characters
name|r
operator|=
name|QSqlDriver
operator|::
name|formatValue
argument_list|(
name|field
argument_list|,
name|trimStrings
argument_list|)
expr_stmt|;
name|r
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\\\\"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|ByteArray
case|:
if|if
condition|(
name|isOpen
argument_list|()
condition|)
block|{
specifier|const
name|QByteArray
name|ba
init|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// buffer has to be at least length*2+1 bytes
name|char
modifier|*
name|buffer
init|=
operator|new
name|char
index|[
name|ba
operator|.
name|size
argument_list|()
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|escapedSize
init|=
name|int
argument_list|(
name|mysql_real_escape_string
argument_list|(
name|d
operator|->
name|mysql
argument_list|,
name|buffer
argument_list|,
name|ba
operator|.
name|data
argument_list|()
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|.
name|reserve
argument_list|(
name|escapedSize
operator|+
literal|3
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|toUnicode
argument_list|(
name|d
operator|->
name|tc
argument_list|,
name|buffer
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|buffer
expr_stmt|;
break|break;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QMYSQLDriver::formatValue: Database not open"
argument_list|)
expr_stmt|;
block|}
comment|// fall through
default|default:
name|r
operator|=
name|QSqlDriver
operator|::
name|formatValue
argument_list|(
name|field
argument_list|,
name|trimStrings
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
DECL|function|escapeIdentifier
name|QString
name|QMYSQLDriver
operator|::
name|escapeIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|identifier
parameter_list|,
name|IdentifierType
parameter_list|)
specifier|const
block|{
name|QString
name|res
init|=
name|identifier
decl_stmt|;
if|if
condition|(
operator|!
name|identifier
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|identifier
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'`'
argument_list|)
argument_list|)
operator|&&
operator|!
name|identifier
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'`'
argument_list|)
argument_list|)
condition|)
block|{
name|res
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'`'
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'`'
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"`.`"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
DECL|function|isIdentifierEscaped
name|bool
name|QMYSQLDriver
operator|::
name|isIdentifierEscaped
parameter_list|(
specifier|const
name|QString
modifier|&
name|identifier
parameter_list|,
name|IdentifierType
name|type
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|identifier
operator|.
name|size
argument_list|()
operator|>
literal|2
operator|&&
name|identifier
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'`'
argument_list|)
argument_list|)
comment|//left delimited
operator|&&
name|identifier
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'`'
argument_list|)
argument_list|)
return|;
comment|//right delimited
block|}
name|QT_END_NAMESPACE
end_function
begin_include
include|#
directive|include
file|"qsql_mysql.moc"
end_include
end_unit
