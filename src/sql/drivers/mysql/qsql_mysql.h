begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtSql module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSQL_MYSQL_H
end_ifndef
begin_define
DECL|macro|QSQL_MYSQL_H
define|#
directive|define
name|QSQL_MYSQL_H
end_define
begin_include
include|#
directive|include
file|<QtSql/qsqldriver.h>
end_include
begin_include
include|#
directive|include
file|<QtSql/qsqlresult.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtCore/qt_windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<mysql.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_PLUGIN
end_ifdef
begin_define
DECL|macro|Q_EXPORT_SQLDRIVER_MYSQL
define|#
directive|define
name|Q_EXPORT_SQLDRIVER_MYSQL
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_EXPORT_SQLDRIVER_MYSQL
define|#
directive|define
name|Q_EXPORT_SQLDRIVER_MYSQL
value|Q_SQL_EXPORT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|variable|QMYSQLDriverPrivate
name|class
name|QMYSQLDriverPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMYSQLResultPrivate
name|class
name|QMYSQLResultPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMYSQLDriver
name|class
name|QMYSQLDriver
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QSqlRecordInfo
name|class
name|QSqlRecordInfo
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QMYSQLResult
range|:
name|public
name|QSqlResult
block|{
name|friend
name|class
name|QMYSQLDriver
block|;
name|friend
name|class
name|QMYSQLResultPrivate
block|;
name|public
operator|:
name|explicit
name|QMYSQLResult
argument_list|(
specifier|const
name|QMYSQLDriver
operator|*
name|db
argument_list|)
block|;
operator|~
name|QMYSQLResult
argument_list|()
block|;
name|QVariant
name|handle
argument_list|()
specifier|const
block|;
name|protected
operator|:
name|void
name|cleanup
argument_list|()
block|;
name|bool
name|fetch
argument_list|(
argument|int i
argument_list|)
block|;
name|bool
name|fetchNext
argument_list|()
block|;
name|bool
name|fetchLast
argument_list|()
block|;
name|bool
name|fetchFirst
argument_list|()
block|;
name|QVariant
name|data
argument_list|(
argument|int field
argument_list|)
block|;
name|bool
name|isNull
argument_list|(
argument|int field
argument_list|)
block|;
name|bool
name|reset
argument_list|(
specifier|const
name|QString
operator|&
name|query
argument_list|)
block|;
name|int
name|size
argument_list|()
block|;
name|int
name|numRowsAffected
argument_list|()
block|;
name|QVariant
name|lastInsertId
argument_list|()
specifier|const
block|;
name|QSqlRecord
name|record
argument_list|()
specifier|const
block|;
name|void
name|virtual_hook
argument_list|(
argument|int id
argument_list|,
argument|void *data
argument_list|)
block|;
name|bool
name|nextResult
argument_list|()
block|;
if|#
directive|if
name|MYSQL_VERSION_ID
operator|>=
literal|40108
name|bool
name|prepare
argument_list|(
specifier|const
name|QString
operator|&
name|stmt
argument_list|)
block|;
name|bool
name|exec
argument_list|()
block|;
endif|#
directive|endif
name|private
operator|:
name|QMYSQLResultPrivate
operator|*
name|d
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_EXPORT_SQLDRIVER_MYSQL
name|QMYSQLDriver
range|:
name|public
name|QSqlDriver
block|{
name|Q_OBJECT
name|friend
name|class
name|QMYSQLResult
block|;
name|public
operator|:
name|explicit
name|QMYSQLDriver
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|explicit
name|QMYSQLDriver
argument_list|(
name|MYSQL
operator|*
name|con
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QMYSQLDriver
argument_list|()
block|;
name|bool
name|hasFeature
argument_list|(
argument|DriverFeature f
argument_list|)
specifier|const
block|;
name|bool
name|open
argument_list|(
argument|const QString& db
argument_list|,
argument|const QString& user
argument_list|,
argument|const QString& password
argument_list|,
argument|const QString& host
argument_list|,
argument|int port
argument_list|,
argument|const QString& connOpts
argument_list|)
block|;
name|void
name|close
argument_list|()
block|;
name|QSqlResult
operator|*
name|createResult
argument_list|()
specifier|const
block|;
name|QStringList
name|tables
argument_list|(
argument|QSql::TableType
argument_list|)
specifier|const
block|;
name|QSqlIndex
name|primaryIndex
argument_list|(
argument|const QString& tablename
argument_list|)
specifier|const
block|;
name|QSqlRecord
name|record
argument_list|(
argument|const QString& tablename
argument_list|)
specifier|const
block|;
name|QString
name|formatValue
argument_list|(
argument|const QSqlField&field
argument_list|,
argument|bool trimStrings
argument_list|)
specifier|const
block|;
name|QVariant
name|handle
argument_list|()
specifier|const
block|;
name|QString
name|escapeIdentifier
argument_list|(
argument|const QString&identifier
argument_list|,
argument|IdentifierType type
argument_list|)
specifier|const
block|;
name|protected
name|Q_SLOTS
operator|:
name|bool
name|isIdentifierEscapedImplementation
argument_list|(
argument|const QString&identifier
argument_list|,
argument|IdentifierType type
argument_list|)
specifier|const
block|;
name|protected
operator|:
name|bool
name|beginTransaction
argument_list|()
block|;
name|bool
name|commitTransaction
argument_list|()
block|;
name|bool
name|rollbackTransaction
argument_list|()
block|;
name|private
operator|:
name|void
name|init
argument_list|()
block|;
name|QMYSQLDriverPrivate
operator|*
name|d
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSQL_MYSQL_H
end_comment
end_unit
