begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtSql module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsql_tds.h"
end_include
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN32
end_ifdef
begin_comment
comment|// We assume that MS SQL Server is used. Set Q_USE_SYBASE to force Sybase.
end_comment
begin_comment
comment|// Conflicting declarations of LPCBYTE in sqlfront.h and winscard.h
end_comment
begin_define
DECL|macro|_WINSCARD_H_
define|#
directive|define
name|_WINSCARD_H_
end_define
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_USE_SYBASE
define|#
directive|define
name|Q_USE_SYBASE
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qsqlerror.h>
end_include
begin_include
include|#
directive|include
file|<qsqlfield.h>
end_include
begin_include
include|#
directive|include
file|<qsqlindex.h>
end_include
begin_include
include|#
directive|include
file|<qsqlquery.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_macro
name|Q_DECLARE_OPAQUE_POINTER
argument_list|(
argument|LOGINREC*
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPAQUE_POINTER
argument_list|(
argument|DBPROCESS*
argument_list|)
end_macro
begin_function
name|QT_BEGIN_NAMESPACE
ifdef|#
directive|ifdef
name|DBNTWIN32
DECL|macro|QMSGHANDLE
define|#
directive|define
name|QMSGHANDLE
value|DBMSGHANDLE_PROC
DECL|macro|QERRHANDLE
define|#
directive|define
name|QERRHANDLE
value|DBERRHANDLE_PROC
DECL|macro|QTDSCHAR
define|#
directive|define
name|QTDSCHAR
value|SQLCHAR
DECL|macro|QTDSDATETIME4
define|#
directive|define
name|QTDSDATETIME4
value|SQLDATETIM4
DECL|macro|QTDSDATETIME
define|#
directive|define
name|QTDSDATETIME
value|SQLDATETIME
DECL|macro|QTDSDATETIME_N
define|#
directive|define
name|QTDSDATETIME_N
value|SQLDATETIMN
DECL|macro|QTDSDECIMAL
define|#
directive|define
name|QTDSDECIMAL
value|SQLDECIMAL
DECL|macro|QTDSFLT4
define|#
directive|define
name|QTDSFLT4
value|SQLFLT4
DECL|macro|QTDSFLT8
define|#
directive|define
name|QTDSFLT8
value|SQLFLT8
DECL|macro|QTDSFLT8_N
define|#
directive|define
name|QTDSFLT8_N
value|SQLFLTN
DECL|macro|QTDSINT1
define|#
directive|define
name|QTDSINT1
value|SQLINT1
DECL|macro|QTDSINT2
define|#
directive|define
name|QTDSINT2
value|SQLINT2
DECL|macro|QTDSINT4
define|#
directive|define
name|QTDSINT4
value|SQLINT4
DECL|macro|QTDSINT4_N
define|#
directive|define
name|QTDSINT4_N
value|SQLINTN
DECL|macro|QTDSMONEY4
define|#
directive|define
name|QTDSMONEY4
value|SQLMONEY4
DECL|macro|QTDSMONEY
define|#
directive|define
name|QTDSMONEY
value|SQLMONEY
DECL|macro|QTDSMONEY_N
define|#
directive|define
name|QTDSMONEY_N
value|SQLMONEYN
DECL|macro|QTDSNUMERIC
define|#
directive|define
name|QTDSNUMERIC
value|SQLNUMERIC
DECL|macro|QTDSTEXT
define|#
directive|define
name|QTDSTEXT
value|SQLTEXT
DECL|macro|QTDSVARCHAR
define|#
directive|define
name|QTDSVARCHAR
value|SQLVARCHAR
DECL|macro|QTDSBIT
define|#
directive|define
name|QTDSBIT
value|SQLBIT
DECL|macro|QTDSBINARY
define|#
directive|define
name|QTDSBINARY
value|SQLBINARY
DECL|macro|QTDSVARBINARY
define|#
directive|define
name|QTDSVARBINARY
value|SQLVARBINARY
DECL|macro|QTDSIMAGE
define|#
directive|define
name|QTDSIMAGE
value|SQLIMAGE
else|#
directive|else
define|#
directive|define
name|QMSGHANDLE
value|MHANDLEFUNC
define|#
directive|define
name|QERRHANDLE
value|EHANDLEFUNC
define|#
directive|define
name|QTDSCHAR
value|SYBCHAR
define|#
directive|define
name|QTDSDATETIME4
value|SYBDATETIME4
define|#
directive|define
name|QTDSDATETIME
value|SYBDATETIME
define|#
directive|define
name|QTDSDATETIME_N
value|SYBDATETIMN
define|#
directive|define
name|QTDSDECIMAL
value|SYBDECIMAL
define|#
directive|define
name|QTDSFLT8
value|SYBFLT8
define|#
directive|define
name|QTDSFLT8_N
value|SYBFLTN
define|#
directive|define
name|QTDSFLT4
value|SYBREAL
define|#
directive|define
name|QTDSINT1
value|SYBINT1
define|#
directive|define
name|QTDSINT2
value|SYBINT2
define|#
directive|define
name|QTDSINT4
value|SYBINT4
define|#
directive|define
name|QTDSINT4_N
value|SYBINTN
define|#
directive|define
name|QTDSMONEY4
value|SYBMONEY4
define|#
directive|define
name|QTDSMONEY
value|SYBMONEY
define|#
directive|define
name|QTDSMONEY_N
value|SYBMONEYN
define|#
directive|define
name|QTDSNUMERIC
value|SYBNUMERIC
define|#
directive|define
name|QTDSTEXT
value|SYBTEXT
define|#
directive|define
name|QTDSVARCHAR
value|SYBVARCHAR
define|#
directive|define
name|QTDSBIT
value|SYBBIT
define|#
directive|define
name|QTDSBINARY
value|SYBBINARY
define|#
directive|define
name|QTDSVARBINARY
value|SYBVARBINARY
define|#
directive|define
name|QTDSIMAGE
value|SYBIMAGE
comment|// magic numbers not defined anywhere in Sybase headers
define|#
directive|define
name|QTDSDECIMAL_2
value|55
define|#
directive|define
name|QTDSNUMERIC_2
value|63
endif|#
directive|endif
comment|//DBNTWIN32
DECL|macro|TDS_CURSOR_SIZE
define|#
directive|define
name|TDS_CURSOR_SIZE
value|50
comment|// workaround for FreeTDS
ifndef|#
directive|ifndef
name|CS_PUBLIC
DECL|macro|CS_PUBLIC
define|#
directive|define
name|CS_PUBLIC
endif|#
directive|endif
DECL|function|qMakeError
name|QSqlError
name|qMakeError
parameter_list|(
specifier|const
name|QString
modifier|&
name|err
parameter_list|,
name|QSqlError
operator|::
name|ErrorType
name|type
parameter_list|,
name|int
name|errNo
init|=
operator|-
literal|1
parameter_list|)
block|{
return|return
name|QSqlError
argument_list|(
name|QLatin1String
argument_list|(
literal|"QTDS: "
argument_list|)
operator|+
name|err
argument_list|,
name|QString
argument_list|()
argument_list|,
name|type
argument_list|,
name|errNo
argument_list|)
return|;
block|}
end_function
begin_class
DECL|class|QTDSDriverPrivate
class|class
name|QTDSDriverPrivate
block|{
public|public:
DECL|function|QTDSDriverPrivate
name|QTDSDriverPrivate
parameter_list|()
member_init_list|:
name|login
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|login
name|LOGINREC
modifier|*
name|login
decl_stmt|;
comment|// login information
DECL|member|hostName
name|QString
name|hostName
decl_stmt|;
DECL|member|db
name|QString
name|db
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QTDSResultPrivate
class|class
name|QTDSResultPrivate
block|{
public|public:
DECL|function|QTDSResultPrivate
name|QTDSResultPrivate
parameter_list|()
member_init_list|:
name|login
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|dbproc
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|login
name|LOGINREC
modifier|*
name|login
decl_stmt|;
comment|// login information
DECL|member|dbproc
name|DBPROCESS
modifier|*
name|dbproc
decl_stmt|;
comment|// connection from app to server
DECL|member|lastError
name|QSqlError
name|lastError
decl_stmt|;
DECL|function|addErrorMsg
name|void
name|addErrorMsg
parameter_list|(
name|QString
modifier|&
name|errMsg
parameter_list|)
block|{
name|errorMsgs
operator|.
name|append
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
block|}
DECL|function|getErrorMsgs
name|QString
name|getErrorMsgs
parameter_list|()
block|{
return|return
name|errorMsgs
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
return|;
block|}
DECL|function|clearErrorMsgs
name|void
name|clearErrorMsgs
parameter_list|()
block|{
name|errorMsgs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|member|buffer
name|QVector
argument_list|<
name|void
modifier|*
argument_list|>
name|buffer
decl_stmt|;
DECL|member|rec
name|QSqlRecord
name|rec
decl_stmt|;
private|private:
DECL|member|errorMsgs
name|QStringList
name|errorMsgs
decl_stmt|;
block|}
class|;
end_class
begin_typedef
DECL|typedef|QTDSErrorHash
typedef|typedef
name|QHash
argument_list|<
name|DBPROCESS
modifier|*
argument_list|,
name|QTDSResultPrivate
modifier|*
argument_list|>
name|QTDSErrorHash
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QTDSErrorHash
argument_list|,
argument|errs
argument_list|)
end_macro
begin_extern
extern|extern
literal|"C"
block|{
DECL|function|qTdsMsgHandler
specifier|static
name|int
name|CS_PUBLIC
name|qTdsMsgHandler
parameter_list|(
name|DBPROCESS
modifier|*
name|dbproc
parameter_list|,
name|DBINT
name|msgno
parameter_list|,
name|int
name|msgstate
parameter_list|,
name|int
name|severity
parameter_list|,
name|char
modifier|*
name|msgtext
parameter_list|,
name|char
modifier|*
name|srvname
parameter_list|,
name|char
modifier|*
comment|/*procname*/
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|QTDSResultPrivate
modifier|*
name|p
init|=
name|errs
argument_list|()
operator|->
name|value
argument_list|(
name|dbproc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|p
condition|)
block|{
comment|//        ### umm... temporary disabled since this throws a lot of warnings...
comment|//        qWarning("QTDSDriver warning (%d): [%s] from server [%s]", msgstate, msgtext, srvname);
return|return
name|INT_CANCEL
return|;
block|}
if|if
condition|(
name|severity
operator|>
literal|0
condition|)
block|{
name|QString
name|errMsg
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 (Msg %2, Level %3, State %4, Server %5, Line %6)"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|msgtext
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|msgno
argument_list|)
operator|.
name|arg
argument_list|(
name|severity
argument_list|)
operator|.
name|arg
argument_list|(
name|msgstate
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|srvname
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|p
operator|->
name|addErrorMsg
argument_list|(
name|errMsg
argument_list|)
expr_stmt|;
if|if
condition|(
name|severity
operator|>
literal|10
condition|)
block|{
comment|// Severe messages are really errors in the sense of lastError
name|errMsg
operator|=
name|p
operator|->
name|getErrorMsgs
argument_list|()
expr_stmt|;
name|p
operator|->
name|lastError
operator|=
name|qMakeError
argument_list|(
name|errMsg
argument_list|,
name|QSqlError
operator|::
name|UnknownError
argument_list|,
name|msgno
argument_list|)
expr_stmt|;
name|p
operator|->
name|clearErrorMsgs
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|INT_CANCEL
return|;
block|}
DECL|function|qTdsErrHandler
specifier|static
name|int
name|CS_PUBLIC
name|qTdsErrHandler
parameter_list|(
name|DBPROCESS
modifier|*
name|dbproc
parameter_list|,
name|int
comment|/*severity*/
parameter_list|,
name|int
name|dberr
parameter_list|,
name|int
comment|/*oserr*/
parameter_list|,
name|char
modifier|*
name|dberrstr
parameter_list|,
name|char
modifier|*
name|oserrstr
parameter_list|)
block|{
name|QTDSResultPrivate
modifier|*
name|p
init|=
name|errs
argument_list|()
operator|->
name|value
argument_list|(
name|dbproc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|p
condition|)
block|{
name|qWarning
argument_list|(
literal|"QTDSDriver error (%d): [%s] [%s]"
argument_list|,
name|dberr
argument_list|,
name|dberrstr
argument_list|,
name|oserrstr
argument_list|)
expr_stmt|;
return|return
name|INT_CANCEL
return|;
block|}
comment|/*      * If the process is dead or NULL and      * we are not in the middle of logging in...      */
if|if
condition|(
operator|(
name|dbproc
operator|==
name|NULL
operator|||
name|DBDEAD
argument_list|(
name|dbproc
argument_list|)
operator|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QTDSDriver error (%d): [%s] [%s]"
argument_list|,
name|dberr
argument_list|,
name|dberrstr
argument_list|,
name|oserrstr
argument_list|)
expr_stmt|;
return|return
name|INT_CANCEL
return|;
block|}
name|QString
name|errMsg
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 %2\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|dberrstr
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|oserrstr
argument_list|)
argument_list|)
decl_stmt|;
name|errMsg
operator|+=
name|p
operator|->
name|getErrorMsgs
argument_list|()
expr_stmt|;
name|p
operator|->
name|lastError
operator|=
name|qMakeError
argument_list|(
name|errMsg
argument_list|,
name|QSqlError
operator|::
name|UnknownError
argument_list|,
name|dberr
argument_list|)
expr_stmt|;
name|p
operator|->
name|clearErrorMsgs
argument_list|()
expr_stmt|;
return|return
name|INT_CANCEL
return|;
block|}
block|}
end_extern
begin_comment
comment|//extern "C"
end_comment
begin_function
DECL|function|qDecodeTDSType
name|QVariant
operator|::
name|Type
name|qDecodeTDSType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|QVariant
operator|::
name|Type
name|t
init|=
name|QVariant
operator|::
name|Invalid
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QTDSCHAR
case|:
case|case
name|QTDSTEXT
case|:
case|case
name|QTDSVARCHAR
case|:
name|t
operator|=
name|QVariant
operator|::
name|String
expr_stmt|;
break|break;
case|case
name|QTDSINT1
case|:
case|case
name|QTDSINT2
case|:
case|case
name|QTDSINT4
case|:
case|case
name|QTDSINT4_N
case|:
case|case
name|QTDSBIT
case|:
name|t
operator|=
name|QVariant
operator|::
name|Int
expr_stmt|;
break|break;
case|case
name|QTDSFLT4
case|:
case|case
name|QTDSFLT8
case|:
case|case
name|QTDSFLT8_N
case|:
case|case
name|QTDSMONEY4
case|:
case|case
name|QTDSMONEY
case|:
case|case
name|QTDSDECIMAL
case|:
case|case
name|QTDSNUMERIC
case|:
ifdef|#
directive|ifdef
name|QTDSNUMERIC_2
case|case
name|QTDSNUMERIC_2
case|:
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QTDSDECIMAL_2
case|case
name|QTDSDECIMAL_2
case|:
endif|#
directive|endif
case|case
name|QTDSMONEY_N
case|:
name|t
operator|=
name|QVariant
operator|::
name|Double
expr_stmt|;
break|break;
case|case
name|QTDSDATETIME4
case|:
case|case
name|QTDSDATETIME
case|:
case|case
name|QTDSDATETIME_N
case|:
name|t
operator|=
name|QVariant
operator|::
name|DateTime
expr_stmt|;
break|break;
case|case
name|QTDSBINARY
case|:
case|case
name|QTDSVARBINARY
case|:
case|case
name|QTDSIMAGE
case|:
name|t
operator|=
name|QVariant
operator|::
name|ByteArray
expr_stmt|;
break|break;
default|default:
name|t
operator|=
name|QVariant
operator|::
name|Invalid
expr_stmt|;
break|break;
block|}
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|qFieldType
name|QVariant
operator|::
name|Type
name|qFieldType
parameter_list|(
name|QTDSResultPrivate
modifier|*
name|d
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|QVariant
operator|::
name|Type
name|type
init|=
name|qDecodeTDSType
argument_list|(
name|dbcoltype
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|type
return|;
block|}
end_function
begin_constructor
DECL|function|QTDSResult
name|QTDSResult
operator|::
name|QTDSResult
parameter_list|(
specifier|const
name|QTDSDriver
modifier|*
name|db
parameter_list|)
member_init_list|:
name|QSqlCachedResult
argument_list|(
name|db
argument_list|)
block|{
name|d
operator|=
operator|new
name|QTDSResultPrivate
argument_list|()
expr_stmt|;
name|d
operator|->
name|login
operator|=
name|db
operator|->
name|d
operator|->
name|login
expr_stmt|;
name|d
operator|->
name|dbproc
operator|=
name|dbopen
argument_list|(
name|d
operator|->
name|login
argument_list|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|db
operator|->
name|d
operator|->
name|hostName
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|dbproc
condition|)
return|return;
if|if
condition|(
name|dbuse
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|db
operator|->
name|d
operator|->
name|db
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
operator|==
name|FAIL
condition|)
return|return;
comment|// insert d in error handler dict
name|errs
argument_list|()
operator|->
name|insert
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|dbcmd
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
literal|"set quoted_identifier on"
argument_list|)
expr_stmt|;
name|dbsqlexec
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QTDSResult
name|QTDSResult
operator|::
name|~
name|QTDSResult
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|dbproc
condition|)
name|dbclose
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
expr_stmt|;
name|errs
argument_list|()
operator|->
name|remove
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|cleanup
name|void
name|QTDSResult
operator|::
name|cleanup
parameter_list|()
block|{
name|d
operator|->
name|clearErrorMsgs
argument_list|()
expr_stmt|;
name|d
operator|->
name|rec
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|buffer
operator|.
name|size
argument_list|()
operator|/
literal|2
condition|;
operator|++
name|i
control|)
name|free
argument_list|(
name|d
operator|->
name|buffer
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// "can" stands for "cancel"... very clever.
name|dbcanquery
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
expr_stmt|;
name|dbfreebuf
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
expr_stmt|;
name|QSqlCachedResult
operator|::
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handle
name|QVariant
name|QTDSResult
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|qRegisterMetaType
argument_list|<
name|DBPROCESS
operator|*
argument_list|>
argument_list|(
literal|"DBPROCESS*"
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|dbproc
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qIsNull
specifier|static
specifier|inline
name|bool
name|qIsNull
parameter_list|(
specifier|const
name|void
modifier|*
name|ind
parameter_list|)
block|{
return|return
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|DBINT
operator|*
argument_list|>
argument_list|(
operator|&
name|ind
argument_list|)
operator|==
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|gotoNext
name|bool
name|QTDSResult
operator|::
name|gotoNext
parameter_list|(
name|QSqlCachedResult
operator|::
name|ValueCache
modifier|&
name|values
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|STATUS
name|stat
init|=
name|dbnextrow
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|==
name|NO_MORE_ROWS
condition|)
block|{
name|setAt
argument_list|(
name|QSql
operator|::
name|AfterLastRow
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|stat
operator|==
name|FAIL
operator|)
operator|||
operator|(
name|stat
operator|==
name|BUF_FULL
operator|)
condition|)
block|{
name|setLastError
argument_list|(
name|d
operator|->
name|lastError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|index
operator|<
literal|0
condition|)
return|return
literal|true
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|rec
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|idx
init|=
name|index
operator|+
name|i
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|rec
operator|.
name|field
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|DateTime
case|:
if|if
condition|(
name|qIsNull
argument_list|(
name|d
operator|->
name|buffer
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|values
index|[
name|idx
index|]
operator|=
name|QVariant
argument_list|(
name|QVariant
operator|::
name|DateTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DBDATETIME
modifier|*
name|bdt
init|=
operator|(
name|DBDATETIME
operator|*
operator|)
name|d
operator|->
name|buffer
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
argument_list|)
decl_stmt|;
name|QDate
name|date
init|=
name|QDate
operator|::
name|fromString
argument_list|(
name|QLatin1String
argument_list|(
literal|"1900-01-01"
argument_list|)
argument_list|,
name|Qt
operator|::
name|ISODate
argument_list|)
decl_stmt|;
name|QTime
name|time
init|=
name|QTime
operator|::
name|fromString
argument_list|(
name|QLatin1String
argument_list|(
literal|"00:00:00"
argument_list|)
argument_list|,
name|Qt
operator|::
name|ISODate
argument_list|)
decl_stmt|;
name|values
index|[
name|idx
index|]
operator|=
name|QDateTime
argument_list|(
name|date
operator|.
name|addDays
argument_list|(
name|bdt
operator|->
name|dtdays
argument_list|)
argument_list|,
name|time
operator|.
name|addMSecs
argument_list|(
name|int
argument_list|(
name|bdt
operator|->
name|dttime
operator|/
literal|0.3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QVariant
operator|::
name|Int
case|:
if|if
condition|(
name|qIsNull
argument_list|(
name|d
operator|->
name|buffer
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
argument_list|)
condition|)
name|values
index|[
name|idx
index|]
operator|=
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
else|else
name|values
index|[
name|idx
index|]
operator|=
operator|*
operator|(
operator|(
name|int
operator|*
operator|)
name|d
operator|->
name|buffer
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
argument_list|)
operator|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
case|case
name|QVariant
operator|::
name|String
case|:
if|if
condition|(
name|qIsNull
argument_list|(
name|d
operator|->
name|buffer
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
argument_list|)
condition|)
name|values
index|[
name|idx
index|]
operator|=
name|QVariant
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
else|else
name|values
index|[
name|idx
index|]
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|d
operator|->
name|buffer
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
argument_list|)
argument_list|)
operator|.
name|trimmed
argument_list|()
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|ByteArray
case|:
block|{
if|if
condition|(
name|qIsNull
argument_list|(
name|d
operator|->
name|buffer
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
argument_list|)
condition|)
name|values
index|[
name|idx
index|]
operator|=
name|QVariant
argument_list|(
name|QVariant
operator|::
name|ByteArray
argument_list|)
expr_stmt|;
else|else
name|values
index|[
name|idx
index|]
operator|=
name|QByteArray
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|d
operator|->
name|buffer
operator|.
name|at
argument_list|(
name|i
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
comment|// should never happen, and we already fired
comment|// a warning while binding.
name|values
index|[
name|idx
index|]
operator|=
name|QVariant
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|reset
name|bool
name|QTDSResult
operator|::
name|reset
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
block|{
name|cleanup
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|driver
argument_list|()
operator|||
operator|!
name|driver
argument_list|()
operator|->
name|isOpen
argument_list|()
operator|||
name|driver
argument_list|()
operator|->
name|isOpenError
argument_list|()
condition|)
return|return
literal|false
return|;
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbcmd
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|query
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
operator|==
name|FAIL
condition|)
block|{
name|setLastError
argument_list|(
name|d
operator|->
name|lastError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|dbsqlexec
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
operator|==
name|FAIL
condition|)
block|{
name|setLastError
argument_list|(
name|d
operator|->
name|lastError
argument_list|)
expr_stmt|;
name|dbfreebuf
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|dbresults
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
operator|!=
name|SUCCEED
condition|)
block|{
name|setLastError
argument_list|(
name|d
operator|->
name|lastError
argument_list|)
expr_stmt|;
name|dbfreebuf
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|setSelect
argument_list|(
operator|(
name|DBCMDROW
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
operator|==
name|SUCCEED
operator|)
argument_list|)
expr_stmt|;
comment|// decide whether or not we are dealing with a SELECT query
name|int
name|numCols
init|=
name|dbnumcols
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
decl_stmt|;
if|if
condition|(
name|numCols
operator|>
literal|0
condition|)
block|{
name|d
operator|->
name|buffer
operator|.
name|resize
argument_list|(
name|numCols
operator|*
literal|2
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|numCols
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
operator|++
name|i
control|)
block|{
name|int
name|dbType
init|=
name|dbcoltype
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|QVariant
operator|::
name|Type
name|vType
init|=
name|qDecodeTDSType
argument_list|(
name|dbType
argument_list|)
decl_stmt|;
name|QSqlField
name|f
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|dbcolname
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|,
name|vType
argument_list|)
decl_stmt|;
name|f
operator|.
name|setSqlType
argument_list|(
name|dbType
argument_list|)
expr_stmt|;
name|f
operator|.
name|setLength
argument_list|(
name|dbcollen
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|rec
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|RETCODE
name|ret
init|=
operator|-
literal|1
decl_stmt|;
name|void
modifier|*
name|p
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|vType
condition|)
block|{
case|case
name|QVariant
operator|::
name|Int
case|:
name|p
operator|=
name|malloc
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|ret
operator|=
name|dbbind
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|INTBIND
argument_list|,
operator|(
name|DBINT
operator|)
literal|4
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|p
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
comment|// use string binding to prevent loss of precision
name|p
operator|=
name|malloc
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|ret
operator|=
name|dbbind
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|STRINGBIND
argument_list|,
literal|50
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|p
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
name|p
operator|=
name|malloc
argument_list|(
name|dbcollen
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|dbbind
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|STRINGBIND
argument_list|,
name|DBINT
argument_list|(
name|dbcollen
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|p
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|DateTime
case|:
name|p
operator|=
name|malloc
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|ret
operator|=
name|dbbind
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|DATETIMEBIND
argument_list|,
operator|(
name|DBINT
operator|)
literal|8
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|p
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|ByteArray
case|:
name|p
operator|=
name|malloc
argument_list|(
name|dbcollen
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|dbbind
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|BINARYBIND
argument_list|,
name|DBINT
argument_list|(
name|dbcollen
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|p
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|//don't bind the field since we do not support it
name|qWarning
argument_list|(
literal|"QTDSResult::reset: Unsupported type for field \"%s\""
argument_list|,
name|dbcolname
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|ret
operator|==
name|SUCCEED
condition|)
block|{
name|d
operator|->
name|buffer
index|[
name|i
operator|*
literal|2
index|]
operator|=
name|p
expr_stmt|;
name|ret
operator|=
name|dbnullbind
argument_list|(
name|d
operator|->
name|dbproc
argument_list|,
name|i
operator|+
literal|1
argument_list|,
operator|(
name|DBINT
operator|*
operator|)
operator|(
operator|&
name|d
operator|->
name|buffer
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|buffer
index|[
name|i
operator|*
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|buffer
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|free
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|ret
operator|!=
name|SUCCEED
operator|)
operator|&&
operator|(
name|ret
operator|!=
operator|-
literal|1
operator|)
condition|)
block|{
name|setLastError
argument_list|(
name|d
operator|->
name|lastError
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|size
name|int
name|QTDSResult
operator|::
name|size
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|numRowsAffected
name|int
name|QTDSResult
operator|::
name|numRowsAffected
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|DBNTWIN32
if|if
condition|(
name|dbiscount
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
condition|)
block|{
return|return
name|DBCOUNT
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
else|#
directive|else
return|return
name|DBCOUNT
argument_list|(
name|d
operator|->
name|dbproc
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|record
name|QSqlRecord
name|QTDSResult
operator|::
name|record
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|rec
return|;
block|}
end_function
begin_comment
comment|///////////////////////////////////////////////////////////////////
end_comment
begin_constructor
DECL|function|QTDSDriver
name|QTDSDriver
operator|::
name|QTDSDriver
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSqlDriver
argument_list|(
name|parent
argument_list|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QTDSDriver
name|QTDSDriver
operator|::
name|QTDSDriver
parameter_list|(
name|LOGINREC
modifier|*
name|rec
parameter_list|,
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
specifier|const
name|QString
modifier|&
name|db
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSqlDriver
argument_list|(
name|parent
argument_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|d
operator|->
name|login
operator|=
name|rec
expr_stmt|;
name|d
operator|->
name|hostName
operator|=
name|host
expr_stmt|;
name|d
operator|->
name|db
operator|=
name|db
expr_stmt|;
if|if
condition|(
name|rec
condition|)
block|{
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|handle
name|QVariant
name|QTDSDriver
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|qRegisterMetaType
argument_list|<
name|LOGINREC
operator|*
argument_list|>
argument_list|(
literal|"LOGINREC*"
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|login
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|QTDSDriver
operator|::
name|init
parameter_list|()
block|{
name|d
operator|=
operator|new
name|QTDSDriverPrivate
argument_list|()
expr_stmt|;
comment|// the following two code-lines will fail compilation on some FreeTDS versions
comment|// just comment them out if you have FreeTDS (you won't get any errors and warnings then)
name|dberrhandle
argument_list|(
operator|(
name|QERRHANDLE
operator|)
name|qTdsErrHandler
argument_list|)
expr_stmt|;
name|dbmsghandle
argument_list|(
operator|(
name|QMSGHANDLE
operator|)
name|qTdsMsgHandler
argument_list|)
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QTDSDriver
name|QTDSDriver
operator|::
name|~
name|QTDSDriver
parameter_list|()
block|{
name|dberrhandle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dbmsghandle
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// dbexit also calls dbclose if necessary
name|dbexit
argument_list|()
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|hasFeature
name|bool
name|QTDSDriver
operator|::
name|hasFeature
parameter_list|(
name|DriverFeature
name|f
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|f
condition|)
block|{
case|case
name|Transactions
case|:
case|case
name|QuerySize
case|:
case|case
name|Unicode
case|:
case|case
name|SimpleLocking
case|:
case|case
name|EventNotifications
case|:
case|case
name|MultipleResultSets
case|:
return|return
literal|false
return|;
case|case
name|BLOB
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|open
name|bool
name|QTDSDriver
operator|::
name|open
parameter_list|(
specifier|const
name|QString
modifier|&
name|db
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
name|int
comment|/*port*/
parameter_list|,
specifier|const
name|QString
modifier|&
comment|/*connOpts*/
parameter_list|)
block|{
if|if
condition|(
name|isOpen
argument_list|()
condition|)
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dbinit
argument_list|()
condition|)
block|{
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|login
operator|=
name|dblogin
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|login
condition|)
block|{
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|DBSETLPWD
argument_list|(
name|d
operator|->
name|login
argument_list|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|password
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DBSETLUSER
argument_list|(
name|d
operator|->
name|login
argument_list|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|user
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now, try to open and use the database. If this fails, return false.
name|DBPROCESS
modifier|*
name|dbproc
decl_stmt|;
name|dbproc
operator|=
name|dbopen
argument_list|(
name|d
operator|->
name|login
argument_list|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|host
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dbproc
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to open connection"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|dbuse
argument_list|(
name|dbproc
argument_list|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|db
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
operator|==
name|FAIL
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to use database"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|dbclose
argument_list|(
name|dbproc
argument_list|)
expr_stmt|;
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|hostName
operator|=
name|host
expr_stmt|;
name|d
operator|->
name|db
operator|=
name|db
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QTDSDriver
operator|::
name|close
parameter_list|()
block|{
if|if
condition|(
name|isOpen
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_USE_SYBASE
name|dbloginfree
argument_list|(
name|d
operator|->
name|login
argument_list|)
expr_stmt|;
else|#
directive|else
name|dbfreelogin
argument_list|(
name|d
operator|->
name|login
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|d
operator|->
name|login
operator|=
literal|0
expr_stmt|;
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createResult
name|QSqlResult
modifier|*
name|QTDSDriver
operator|::
name|createResult
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QTDSResult
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|beginTransaction
name|bool
name|QTDSDriver
operator|::
name|beginTransaction
parameter_list|()
block|{
return|return
literal|false
return|;
comment|/*     if (!isOpen()) {         qWarning("QTDSDriver::beginTransaction: Database not open");         return false;     }     if (dbcmd(d->dbproc, "BEGIN TRANSACTION") == FAIL) {         setLastError(d->lastError);         dbfreebuf(d->dbproc);         return false;     }     if (dbsqlexec(d->dbproc) == FAIL) {         setLastError(d->lastError);         dbfreebuf(d->dbproc);         return false;     }     while(dbresults(d->dbproc) == NO_MORE_RESULTS) {}     dbfreebuf(d->dbproc);     inTransaction = true;     return true; */
block|}
end_function
begin_function
DECL|function|commitTransaction
name|bool
name|QTDSDriver
operator|::
name|commitTransaction
parameter_list|()
block|{
return|return
literal|false
return|;
comment|/*     if (!isOpen()) {         qWarning("QTDSDriver::commitTransaction: Database not open");         return false;     }     if (dbcmd(d->dbproc, "COMMIT TRANSACTION") == FAIL) {         setLastError(d->lastError);         dbfreebuf(d->dbproc);         return false;     }     if (dbsqlexec(d->dbproc) == FAIL) {         setLastError(d->lastError);         dbfreebuf(d->dbproc);         return false;     }     while(dbresults(d->dbproc) == NO_MORE_RESULTS) {}     dbfreebuf(d->dbproc);     inTransaction = false;     return true; */
block|}
end_function
begin_function
DECL|function|rollbackTransaction
name|bool
name|QTDSDriver
operator|::
name|rollbackTransaction
parameter_list|()
block|{
return|return
literal|false
return|;
comment|/*     if (!isOpen()) {         qWarning("QTDSDriver::rollbackTransaction: Database not open");         return false;     }     if (dbcmd(d->dbproc, "ROLLBACK TRANSACTION") == FAIL) {         setLastError(d->lastError);         dbfreebuf(d->dbproc);         return false;     }     if (dbsqlexec(d->dbproc) == FAIL) {         setLastError(d->lastError);         dbfreebuf(d->dbproc);         return false;     }     while(dbresults(d->dbproc) == NO_MORE_RESULTS) {}     dbfreebuf(d->dbproc);     inTransaction = false;     return true; */
block|}
end_function
begin_function
DECL|function|record
name|QSqlRecord
name|QTDSDriver
operator|::
name|record
parameter_list|(
specifier|const
name|QString
modifier|&
name|tablename
parameter_list|)
specifier|const
block|{
name|QSqlRecord
name|info
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|info
return|;
name|QSqlQuery
name|t
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QString
name|table
init|=
name|tablename
decl_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|table
operator|=
name|stripDelimiters
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
name|QString
name|stmt
argument_list|(
name|QLatin1String
argument_list|(
literal|"select name, type, length, prec from syscolumns "
literal|"where id = (select id from sysobjects where name = '%1')"
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|.
name|exec
argument_list|(
name|stmt
operator|.
name|arg
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|next
argument_list|()
condition|)
block|{
name|QSqlField
name|f
argument_list|(
name|t
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|simplified
argument_list|()
argument_list|,
name|qDecodeTDSType
argument_list|(
name|t
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|setLength
argument_list|(
name|t
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPrecision
argument_list|(
name|t
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setSqlType
argument_list|(
name|t
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
end_function
begin_function
DECL|function|tables
name|QStringList
name|QTDSDriver
operator|::
name|tables
parameter_list|(
name|QSql
operator|::
name|TableType
name|type
parameter_list|)
specifier|const
block|{
name|QStringList
name|list
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|list
return|;
name|QStringList
name|typeFilter
decl_stmt|;
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|Tables
condition|)
name|typeFilter
operator|+=
name|QLatin1String
argument_list|(
literal|"type='U'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|SystemTables
condition|)
name|typeFilter
operator|+=
name|QLatin1String
argument_list|(
literal|"type='S'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|Views
condition|)
name|typeFilter
operator|+=
name|QLatin1String
argument_list|(
literal|"type='V'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|typeFilter
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|list
return|;
name|QSqlQuery
name|t
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|exec
argument_list|(
name|QLatin1String
argument_list|(
literal|"select name from sysobjects where "
argument_list|)
operator|+
name|typeFilter
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" or "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|next
argument_list|()
condition|)
name|list
operator|.
name|append
argument_list|(
name|t
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|simplified
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|formatValue
name|QString
name|QTDSDriver
operator|::
name|formatValue
parameter_list|(
specifier|const
name|QSqlField
modifier|&
name|field
parameter_list|,
name|bool
name|trim
parameter_list|)
specifier|const
block|{
name|QString
name|r
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isNull
argument_list|()
condition|)
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|field
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|DateTime
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|value
argument_list|()
operator|.
name|toDateTime
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|r
operator|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toDateTime
argument_list|()
operator|.
name|toString
argument_list|(
name|QLatin1String
argument_list|(
literal|"yyyyMMdd hh:mm:ss"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|ByteArray
condition|)
block|{
name|QByteArray
name|ba
init|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|QString
name|res
decl_stmt|;
specifier|static
specifier|const
name|char
name|hexchars
index|[]
init|=
literal|"0123456789abcdef"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ba
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|uchar
name|s
init|=
operator|(
name|uchar
operator|)
name|ba
index|[
name|i
index|]
decl_stmt|;
name|res
operator|+=
name|QLatin1Char
argument_list|(
name|hexchars
index|[
name|s
operator|>>
literal|4
index|]
argument_list|)
expr_stmt|;
name|res
operator|+=
name|QLatin1Char
argument_list|(
name|hexchars
index|[
name|s
operator|&
literal|0x0f
index|]
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"0x"
argument_list|)
operator|+
name|res
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|QSqlDriver
operator|::
name|formatValue
argument_list|(
name|field
argument_list|,
name|trim
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|primaryIndex
name|QSqlIndex
name|QTDSDriver
operator|::
name|primaryIndex
parameter_list|(
specifier|const
name|QString
modifier|&
name|tablename
parameter_list|)
specifier|const
block|{
name|QSqlRecord
name|rec
init|=
name|record
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
name|QString
name|table
init|=
name|tablename
decl_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|table
operator|=
name|stripDelimiters
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
name|QSqlIndex
name|idx
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|isOpen
argument_list|()
operator|)
operator|||
operator|(
name|table
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
return|return
name|QSqlIndex
argument_list|()
return|;
name|QSqlQuery
name|t
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|exec
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"sp_helpindex '%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|next
argument_list|()
condition|)
block|{
name|QStringList
name|fNames
init|=
name|t
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|simplified
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
decl_stmt|;
name|QRegExp
name|regx
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\s*(\\S+)(?:\\s+(DESC|desc))?\\s*"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|fNames
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|fNames
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|regx
operator|.
name|indexIn
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
name|QSqlField
name|f
argument_list|(
name|regx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
name|rec
operator|.
name|field
argument_list|(
name|regx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|type
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|regx
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"desc"
argument_list|)
condition|)
block|{
name|idx
operator|.
name|append
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|idx
operator|.
name|append
argument_list|(
name|f
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|idx
operator|.
name|setName
argument_list|(
name|t
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|simplified
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|idx
return|;
block|}
end_function
begin_function
DECL|function|escapeIdentifier
name|QString
name|QTDSDriver
operator|::
name|escapeIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|identifier
parameter_list|,
name|IdentifierType
name|type
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
argument|type
argument_list|)
name|QString
name|res
init|=
name|identifier
decl_stmt|;
if|if
condition|(
operator|!
name|identifier
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|identifier
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
operator|&&
operator|!
name|identifier
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
condition|)
block|{
name|res
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\"\""
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\".\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
