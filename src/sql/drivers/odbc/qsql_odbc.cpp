begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtSql module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsql_odbc.h"
end_include
begin_include
include|#
directive|include
file|<qsqlrecord.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qsqlerror.h>
end_include
begin_include
include|#
directive|include
file|<qsqlfield.h>
end_include
begin_include
include|#
directive|include
file|<qsqlindex.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QSqlQuery>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// undefine this to prevent initial check of the ODBC driver
DECL|macro|ODBC_CHECK_DRIVER
define|#
directive|define
name|ODBC_CHECK_DRIVER
DECL|variable|COLNAMESIZE
specifier|static
specifier|const
name|int
name|COLNAMESIZE
init|=
literal|256
decl_stmt|;
end_decl_stmt
begin_comment
comment|//Map Qt parameter types to ODBC types
end_comment
begin_decl_stmt
DECL|variable|qParamType
specifier|static
specifier|const
name|SQLSMALLINT
name|qParamType
index|[
literal|4
index|]
init|=
block|{
name|SQL_PARAM_INPUT
block|,
name|SQL_PARAM_INPUT
block|,
name|SQL_PARAM_OUTPUT
block|,
name|SQL_PARAM_INPUT_OUTPUT
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|fromSQLTCHAR
specifier|inline
specifier|static
name|QString
name|fromSQLTCHAR
parameter_list|(
specifier|const
name|QVarLengthArray
argument_list|<
name|SQLTCHAR
argument_list|>
modifier|&
name|input
parameter_list|,
name|int
name|size
init|=
operator|-
literal|1
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|int
name|realsize
init|=
name|qMin
argument_list|(
name|size
argument_list|,
name|input
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|realsize
operator|>
literal|0
operator|&&
name|input
index|[
name|realsize
operator|-
literal|1
index|]
operator|==
literal|0
condition|)
name|realsize
operator|--
expr_stmt|;
switch|switch
condition|(
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|result
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|.
name|constData
argument_list|()
argument_list|,
name|realsize
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|=
name|QString
operator|::
name|fromUtf16
argument_list|(
operator|(
specifier|const
name|ushort
operator|*
operator|)
name|input
operator|.
name|constData
argument_list|()
argument_list|,
name|realsize
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|result
operator|=
name|QString
operator|::
name|fromUcs4
argument_list|(
operator|(
specifier|const
name|uint
operator|*
operator|)
name|input
operator|.
name|constData
argument_list|()
argument_list|,
name|realsize
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qCritical
argument_list|(
literal|"sizeof(SQLTCHAR) is %d. Don't know how to handle this."
argument_list|,
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|toSQLTCHAR
specifier|inline
specifier|static
name|QVarLengthArray
argument_list|<
name|SQLTCHAR
argument_list|>
name|toSQLTCHAR
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|)
block|{
name|QVarLengthArray
argument_list|<
name|SQLTCHAR
argument_list|>
name|result
decl_stmt|;
name|result
operator|.
name|resize
argument_list|(
name|input
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
condition|)
block|{
case|case
literal|1
case|:
name|memcpy
argument_list|(
name|result
operator|.
name|data
argument_list|()
argument_list|,
name|input
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|input
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|memcpy
argument_list|(
name|result
operator|.
name|data
argument_list|()
argument_list|,
name|input
operator|.
name|unicode
argument_list|()
argument_list|,
name|input
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|memcpy
argument_list|(
name|result
operator|.
name|data
argument_list|()
argument_list|,
name|input
operator|.
name|toUcs4
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|input
operator|.
name|size
argument_list|()
operator|*
literal|4
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qCritical
argument_list|(
literal|"sizeof(SQLTCHAR) is %d. Don't know how to handle this."
argument_list|,
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// make sure it's null terminated, doesn't matter if it already is, it does if it isn't.
return|return
name|result
return|;
block|}
end_function
begin_class
DECL|class|QODBCDriverPrivate
class|class
name|QODBCDriverPrivate
block|{
public|public:
DECL|enum|DefaultCase
DECL|enumerator|Lower
DECL|enumerator|Mixed
DECL|enumerator|Upper
DECL|enumerator|Sensitive
enum|enum
name|DefaultCase
block|{
name|Lower
block|,
name|Mixed
block|,
name|Upper
block|,
name|Sensitive
block|}
enum|;
DECL|function|QODBCDriverPrivate
name|QODBCDriverPrivate
parameter_list|()
member_init_list|:
name|hEnv
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hDbc
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|unicode
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|useSchema
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|disconnectCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|isMySqlServer
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|isMSSqlServer
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|isFreeTDSDriver
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|hasSQLFetchScroll
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|hasMultiResultSets
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|isQuoteInitialized
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|quote
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
block|{     }
DECL|member|hEnv
name|SQLHANDLE
name|hEnv
decl_stmt|;
DECL|member|hDbc
name|SQLHANDLE
name|hDbc
decl_stmt|;
DECL|member|unicode
name|bool
name|unicode
decl_stmt|;
DECL|member|useSchema
name|bool
name|useSchema
decl_stmt|;
DECL|member|disconnectCount
name|int
name|disconnectCount
decl_stmt|;
DECL|member|isMySqlServer
name|bool
name|isMySqlServer
decl_stmt|;
DECL|member|isMSSqlServer
name|bool
name|isMSSqlServer
decl_stmt|;
DECL|member|isFreeTDSDriver
name|bool
name|isFreeTDSDriver
decl_stmt|;
DECL|member|hasSQLFetchScroll
name|bool
name|hasSQLFetchScroll
decl_stmt|;
DECL|member|hasMultiResultSets
name|bool
name|hasMultiResultSets
decl_stmt|;
name|bool
name|checkDriver
parameter_list|()
specifier|const
function_decl|;
name|void
name|checkUnicode
parameter_list|()
function_decl|;
name|void
name|checkSqlServer
parameter_list|()
function_decl|;
name|void
name|checkHasSQLFetchScroll
parameter_list|()
function_decl|;
name|void
name|checkHasMultiResults
parameter_list|()
function_decl|;
name|void
name|checkSchemaUsage
parameter_list|()
function_decl|;
name|bool
name|setConnectionOptions
parameter_list|(
specifier|const
name|QString
modifier|&
name|connOpts
parameter_list|)
function_decl|;
name|void
name|splitTableQualifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|qualifier
parameter_list|,
name|QString
modifier|&
name|catalog
parameter_list|,
name|QString
modifier|&
name|schema
parameter_list|,
name|QString
modifier|&
name|table
parameter_list|)
function_decl|;
name|DefaultCase
name|defaultCase
parameter_list|()
specifier|const
function_decl|;
name|QString
name|adjustCase
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
specifier|const
function_decl|;
name|QChar
name|quoteChar
parameter_list|()
function_decl|;
private|private:
DECL|member|isQuoteInitialized
name|bool
name|isQuoteInitialized
decl_stmt|;
DECL|member|quote
name|QChar
name|quote
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QODBCPrivate
class|class
name|QODBCPrivate
block|{
public|public:
DECL|function|QODBCPrivate
name|QODBCPrivate
parameter_list|(
name|QODBCDriverPrivate
modifier|*
name|dpp
parameter_list|)
member_init_list|:
name|hStmt
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|useSchema
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|hasSQLFetchScroll
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|driverPrivate
argument_list|(
name|dpp
argument_list|)
member_init_list|,
name|userForwardOnly
argument_list|(
literal|false
argument_list|)
block|{
name|unicode
operator|=
name|dpp
operator|->
name|unicode
expr_stmt|;
name|useSchema
operator|=
name|dpp
operator|->
name|useSchema
expr_stmt|;
name|disconnectCount
operator|=
name|dpp
operator|->
name|disconnectCount
expr_stmt|;
name|hasSQLFetchScroll
operator|=
name|dpp
operator|->
name|hasSQLFetchScroll
expr_stmt|;
block|}
DECL|function|clearValues
specifier|inline
name|void
name|clearValues
parameter_list|()
block|{
name|fieldCache
operator|.
name|fill
argument_list|(
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|fieldCacheIdx
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|dpEnv
name|SQLHANDLE
name|dpEnv
parameter_list|()
specifier|const
block|{
return|return
name|driverPrivate
condition|?
name|driverPrivate
operator|->
name|hEnv
else|:
literal|0
return|;
block|}
DECL|function|dpDbc
name|SQLHANDLE
name|dpDbc
parameter_list|()
specifier|const
block|{
return|return
name|driverPrivate
condition|?
name|driverPrivate
operator|->
name|hDbc
else|:
literal|0
return|;
block|}
DECL|member|hStmt
name|SQLHANDLE
name|hStmt
decl_stmt|;
DECL|member|unicode
name|bool
name|unicode
decl_stmt|;
DECL|member|useSchema
name|bool
name|useSchema
decl_stmt|;
DECL|member|rInf
name|QSqlRecord
name|rInf
decl_stmt|;
DECL|member|fieldCache
name|QVector
argument_list|<
name|QVariant
argument_list|>
name|fieldCache
decl_stmt|;
DECL|member|fieldCacheIdx
name|int
name|fieldCacheIdx
decl_stmt|;
DECL|member|disconnectCount
name|int
name|disconnectCount
decl_stmt|;
DECL|member|hasSQLFetchScroll
name|bool
name|hasSQLFetchScroll
decl_stmt|;
DECL|member|driverPrivate
name|QODBCDriverPrivate
modifier|*
name|driverPrivate
decl_stmt|;
DECL|member|userForwardOnly
name|bool
name|userForwardOnly
decl_stmt|;
name|bool
name|isStmtHandleValid
parameter_list|(
specifier|const
name|QSqlDriver
modifier|*
name|driver
parameter_list|)
function_decl|;
name|void
name|updateStmtHandleState
parameter_list|(
specifier|const
name|QSqlDriver
modifier|*
name|driver
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|isStmtHandleValid
name|bool
name|QODBCPrivate
operator|::
name|isStmtHandleValid
parameter_list|(
specifier|const
name|QSqlDriver
modifier|*
name|driver
parameter_list|)
block|{
specifier|const
name|QODBCDriver
modifier|*
name|odbcdriver
init|=
cast|static_cast
argument_list|<
specifier|const
name|QODBCDriver
operator|*
argument_list|>
argument_list|(
name|driver
argument_list|)
decl_stmt|;
return|return
name|disconnectCount
operator|==
name|odbcdriver
operator|->
name|d
operator|->
name|disconnectCount
return|;
block|}
end_function
begin_function
DECL|function|updateStmtHandleState
name|void
name|QODBCPrivate
operator|::
name|updateStmtHandleState
parameter_list|(
specifier|const
name|QSqlDriver
modifier|*
name|driver
parameter_list|)
block|{
specifier|const
name|QODBCDriver
modifier|*
name|odbcdriver
init|=
cast|static_cast
argument_list|<
specifier|const
name|QODBCDriver
operator|*
argument_list|>
argument_list|(
name|driver
argument_list|)
decl_stmt|;
name|disconnectCount
operator|=
name|odbcdriver
operator|->
name|d
operator|->
name|disconnectCount
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qWarnODBCHandle
specifier|static
name|QString
name|qWarnODBCHandle
parameter_list|(
name|int
name|handleType
parameter_list|,
name|SQLHANDLE
name|handle
parameter_list|,
name|int
modifier|*
name|nativeCode
init|=
literal|0
parameter_list|)
block|{
name|SQLINTEGER
name|nativeCode_
init|=
literal|0
decl_stmt|;
name|SQLSMALLINT
name|msgLen
init|=
literal|0
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQL_NO_DATA
decl_stmt|;
name|SQLTCHAR
name|state_
index|[
name|SQL_SQLSTATE_SIZE
operator|+
literal|1
index|]
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|SQLTCHAR
argument_list|>
name|description_
argument_list|(
name|SQL_MAX_MESSAGE_LENGTH
argument_list|)
decl_stmt|;
name|QString
name|result
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|description_
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
do|do
block|{
name|r
operator|=
name|SQLGetDiagRec
argument_list|(
name|handleType
argument_list|,
name|handle
argument_list|,
name|i
argument_list|,
name|state_
argument_list|,
operator|&
name|nativeCode_
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|msgLen
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|&&
name|msgLen
operator|>
literal|0
condition|)
name|description_
operator|.
name|resize
argument_list|(
name|msgLen
operator|+
literal|1
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLGetDiagRec
argument_list|(
name|handleType
argument_list|,
name|handle
argument_list|,
name|i
argument_list|,
name|state_
argument_list|,
operator|&
name|nativeCode_
argument_list|,
name|description_
operator|.
name|data
argument_list|()
argument_list|,
name|description_
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|msgLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
if|if
condition|(
name|nativeCode
condition|)
operator|*
name|nativeCode
operator|=
name|nativeCode_
expr_stmt|;
name|QString
name|tmpstore
decl_stmt|;
ifdef|#
directive|ifdef
name|UNICODE
name|tmpstore
operator|=
name|fromSQLTCHAR
argument_list|(
name|description_
argument_list|,
name|msgLen
argument_list|)
expr_stmt|;
else|#
directive|else
name|tmpstore
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|description_
operator|.
name|constData
argument_list|()
argument_list|,
name|msgLen
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|result
operator|!=
name|tmpstore
condition|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|result
operator|+=
name|tmpstore
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|r
operator|==
name|SQL_ERROR
operator|||
name|r
operator|==
name|SQL_INVALID_HANDLE
condition|)
block|{
return|return
name|result
return|;
block|}
operator|++
name|i
expr_stmt|;
block|}
do|while
condition|(
name|r
operator|!=
name|SQL_NO_DATA
condition|)
do|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|qODBCWarn
specifier|static
name|QString
name|qODBCWarn
parameter_list|(
specifier|const
name|QODBCPrivate
modifier|*
name|odbc
parameter_list|,
name|int
modifier|*
name|nativeCode
init|=
literal|0
parameter_list|)
block|{
return|return
name|QString
argument_list|(
name|qWarnODBCHandle
argument_list|(
name|SQL_HANDLE_ENV
argument_list|,
name|odbc
operator|->
name|dpEnv
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|qWarnODBCHandle
argument_list|(
name|SQL_HANDLE_DBC
argument_list|,
name|odbc
operator|->
name|dpDbc
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|qWarnODBCHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|odbc
operator|->
name|hStmt
argument_list|,
name|nativeCode
argument_list|)
argument_list|)
operator|.
name|simplified
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qODBCWarn
specifier|static
name|QString
name|qODBCWarn
parameter_list|(
specifier|const
name|QODBCDriverPrivate
modifier|*
name|odbc
parameter_list|,
name|int
modifier|*
name|nativeCode
init|=
literal|0
parameter_list|)
block|{
return|return
name|QString
argument_list|(
name|qWarnODBCHandle
argument_list|(
name|SQL_HANDLE_ENV
argument_list|,
name|odbc
operator|->
name|hEnv
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|qWarnODBCHandle
argument_list|(
name|SQL_HANDLE_DBC
argument_list|,
name|odbc
operator|->
name|hDbc
argument_list|,
name|nativeCode
argument_list|)
argument_list|)
operator|.
name|simplified
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qSqlWarning
specifier|static
name|void
name|qSqlWarning
parameter_list|(
specifier|const
name|QString
modifier|&
name|message
parameter_list|,
specifier|const
name|QODBCPrivate
modifier|*
name|odbc
parameter_list|)
block|{
name|qWarning
argument_list|()
operator|<<
name|message
operator|<<
literal|"\tError:"
operator|<<
name|qODBCWarn
argument_list|(
name|odbc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qSqlWarning
specifier|static
name|void
name|qSqlWarning
parameter_list|(
specifier|const
name|QString
modifier|&
name|message
parameter_list|,
specifier|const
name|QODBCDriverPrivate
modifier|*
name|odbc
parameter_list|)
block|{
name|qWarning
argument_list|()
operator|<<
name|message
operator|<<
literal|"\tError:"
operator|<<
name|qODBCWarn
argument_list|(
name|odbc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qMakeError
specifier|static
name|QSqlError
name|qMakeError
parameter_list|(
specifier|const
name|QString
modifier|&
name|err
parameter_list|,
name|QSqlError
operator|::
name|ErrorType
name|type
parameter_list|,
specifier|const
name|QODBCPrivate
modifier|*
name|p
parameter_list|)
block|{
name|int
name|nativeCode
init|=
operator|-
literal|1
decl_stmt|;
name|QString
name|message
init|=
name|qODBCWarn
argument_list|(
name|p
argument_list|,
operator|&
name|nativeCode
argument_list|)
decl_stmt|;
return|return
name|QSqlError
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBC3: "
argument_list|)
operator|+
name|err
argument_list|,
name|message
argument_list|,
name|type
argument_list|,
name|nativeCode
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qMakeError
specifier|static
name|QSqlError
name|qMakeError
parameter_list|(
specifier|const
name|QString
modifier|&
name|err
parameter_list|,
name|QSqlError
operator|::
name|ErrorType
name|type
parameter_list|,
specifier|const
name|QODBCDriverPrivate
modifier|*
name|p
parameter_list|)
block|{
name|int
name|nativeCode
init|=
operator|-
literal|1
decl_stmt|;
name|QString
name|message
init|=
name|qODBCWarn
argument_list|(
name|p
argument_list|,
operator|&
name|nativeCode
argument_list|)
decl_stmt|;
return|return
name|QSqlError
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBC3: "
argument_list|)
operator|+
name|err
argument_list|,
name|qODBCWarn
argument_list|(
name|p
argument_list|)
argument_list|,
name|type
argument_list|,
name|nativeCode
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|qDecodeODBCType
specifier|static
name|QVariant
operator|::
name|Type
name|qDecodeODBCType
parameter_list|(
name|SQLSMALLINT
name|sqltype
parameter_list|,
specifier|const
name|T
modifier|*
name|p
parameter_list|,
name|bool
name|isSigned
init|=
literal|true
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|QVariant
operator|::
name|Type
name|type
init|=
name|QVariant
operator|::
name|Invalid
decl_stmt|;
switch|switch
condition|(
name|sqltype
condition|)
block|{
case|case
name|SQL_DECIMAL
case|:
case|case
name|SQL_NUMERIC
case|:
case|case
name|SQL_REAL
case|:
case|case
name|SQL_FLOAT
case|:
case|case
name|SQL_DOUBLE
case|:
name|type
operator|=
name|QVariant
operator|::
name|Double
expr_stmt|;
break|break;
case|case
name|SQL_SMALLINT
case|:
case|case
name|SQL_INTEGER
case|:
case|case
name|SQL_BIT
case|:
name|type
operator|=
name|isSigned
condition|?
name|QVariant
operator|::
name|Int
else|:
name|QVariant
operator|::
name|UInt
expr_stmt|;
break|break;
case|case
name|SQL_TINYINT
case|:
name|type
operator|=
name|QVariant
operator|::
name|UInt
expr_stmt|;
break|break;
case|case
name|SQL_BIGINT
case|:
name|type
operator|=
name|isSigned
condition|?
name|QVariant
operator|::
name|LongLong
else|:
name|QVariant
operator|::
name|ULongLong
expr_stmt|;
break|break;
case|case
name|SQL_BINARY
case|:
case|case
name|SQL_VARBINARY
case|:
case|case
name|SQL_LONGVARBINARY
case|:
name|type
operator|=
name|QVariant
operator|::
name|ByteArray
expr_stmt|;
break|break;
case|case
name|SQL_DATE
case|:
case|case
name|SQL_TYPE_DATE
case|:
name|type
operator|=
name|QVariant
operator|::
name|Date
expr_stmt|;
break|break;
case|case
name|SQL_TIME
case|:
case|case
name|SQL_TYPE_TIME
case|:
name|type
operator|=
name|QVariant
operator|::
name|Time
expr_stmt|;
break|break;
case|case
name|SQL_TIMESTAMP
case|:
case|case
name|SQL_TYPE_TIMESTAMP
case|:
name|type
operator|=
name|QVariant
operator|::
name|DateTime
expr_stmt|;
break|break;
case|case
name|SQL_WCHAR
case|:
case|case
name|SQL_WVARCHAR
case|:
case|case
name|SQL_WLONGVARCHAR
case|:
name|type
operator|=
name|QVariant
operator|::
name|String
expr_stmt|;
break|break;
case|case
name|SQL_CHAR
case|:
case|case
name|SQL_VARCHAR
case|:
if|#
directive|if
operator|(
name|ODBCVER
operator|>=
literal|0x0350
operator|)
case|case
name|SQL_GUID
case|:
endif|#
directive|endif
case|case
name|SQL_LONGVARCHAR
case|:
name|type
operator|=
name|QVariant
operator|::
name|String
expr_stmt|;
break|break;
default|default:
name|type
operator|=
name|QVariant
operator|::
name|ByteArray
expr_stmt|;
break|break;
block|}
return|return
name|type
return|;
block|}
end_function
begin_function
DECL|function|qGetStringData
specifier|static
name|QString
name|qGetStringData
parameter_list|(
name|SQLHANDLE
name|hStmt
parameter_list|,
name|int
name|column
parameter_list|,
name|int
name|colSize
parameter_list|,
name|bool
name|unicode
init|=
literal|false
parameter_list|)
block|{
name|QString
name|fieldVal
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQL_ERROR
decl_stmt|;
name|SQLLEN
name|lengthIndicator
init|=
literal|0
decl_stmt|;
comment|// NB! colSize must be a multiple of 2 for unicode enabled DBs
if|if
condition|(
name|colSize
operator|<=
literal|0
condition|)
block|{
name|colSize
operator|=
literal|256
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colSize
operator|>
literal|65536
condition|)
block|{
comment|// limit buffer size to 64 KB
name|colSize
operator|=
literal|65536
expr_stmt|;
block|}
else|else
block|{
name|colSize
operator|++
expr_stmt|;
comment|// make sure there is room for more than the 0 termination
block|}
if|if
condition|(
name|unicode
condition|)
block|{
name|r
operator|=
name|SQLGetData
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|SQL_C_TCHAR
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|&&
name|lengthIndicator
operator|>
literal|0
condition|)
name|colSize
operator|=
name|lengthIndicator
operator|/
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
operator|+
literal|1
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|SQLTCHAR
argument_list|>
name|buf
argument_list|(
name|colSize
argument_list|)
decl_stmt|;
name|memset
argument_list|(
name|buf
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|colSize
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|r
operator|=
name|SQLGetData
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|SQL_C_TCHAR
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|buf
operator|.
name|data
argument_list|()
argument_list|,
name|colSize
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
if|if
condition|(
name|lengthIndicator
operator|==
name|SQL_NULL_DATA
operator|||
name|lengthIndicator
operator|==
name|SQL_NO_TOTAL
condition|)
block|{
name|fieldVal
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// if SQL_SUCCESS_WITH_INFO is returned, indicating that
comment|// more data can be fetched, the length indicator does NOT
comment|// contain the number of bytes returned - it contains the
comment|// total number of bytes that CAN be fetched
comment|// colSize-1: remove 0 termination when there is more data to fetch
name|int
name|rSize
init|=
operator|(
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
operator|)
condition|?
name|colSize
else|:
name|lengthIndicator
operator|/
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
decl_stmt|;
name|fieldVal
operator|+=
name|fromSQLTCHAR
argument_list|(
name|buf
argument_list|,
name|rSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|lengthIndicator
operator|<
name|SQLLEN
argument_list|(
name|colSize
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|)
condition|)
block|{
comment|// workaround for Drivermanagers that don't return SQL_NO_DATA
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|r
operator|==
name|SQL_NO_DATA
condition|)
block|{
break|break;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"qGetStringData: Error while fetching data ("
operator|<<
name|qWarnODBCHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|hStmt
argument_list|)
operator|<<
literal|')'
expr_stmt|;
name|fieldVal
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
name|r
operator|=
name|SQLGetData
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|SQL_C_CHAR
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|&&
name|lengthIndicator
operator|>
literal|0
condition|)
name|colSize
operator|=
name|lengthIndicator
operator|+
literal|1
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|SQLCHAR
argument_list|>
name|buf
argument_list|(
name|colSize
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|r
operator|=
name|SQLGetData
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|SQL_C_CHAR
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|buf
operator|.
name|data
argument_list|()
argument_list|,
name|colSize
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
if|if
condition|(
name|lengthIndicator
operator|==
name|SQL_NULL_DATA
operator|||
name|lengthIndicator
operator|==
name|SQL_NO_TOTAL
condition|)
block|{
name|fieldVal
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// if SQL_SUCCESS_WITH_INFO is returned, indicating that
comment|// more data can be fetched, the length indicator does NOT
comment|// contain the number of bytes returned - it contains the
comment|// total number of bytes that CAN be fetched
comment|// colSize-1: remove 0 termination when there is more data to fetch
name|int
name|rSize
init|=
operator|(
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
operator|)
condition|?
name|colSize
else|:
name|lengthIndicator
decl_stmt|;
name|fieldVal
operator|+=
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|buf
operator|.
name|constData
argument_list|()
argument_list|,
name|rSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|lengthIndicator
operator|<
name|SQLLEN
argument_list|(
name|colSize
argument_list|)
condition|)
block|{
comment|// workaround for Drivermanagers that don't return SQL_NO_DATA
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|r
operator|==
name|SQL_NO_DATA
condition|)
block|{
break|break;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"qGetStringData: Error while fetching data ("
operator|<<
name|qWarnODBCHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|hStmt
argument_list|)
operator|<<
literal|')'
expr_stmt|;
name|fieldVal
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|fieldVal
return|;
block|}
end_function
begin_function
DECL|function|qGetBinaryData
specifier|static
name|QVariant
name|qGetBinaryData
parameter_list|(
name|SQLHANDLE
name|hStmt
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|QByteArray
name|fieldVal
decl_stmt|;
name|SQLSMALLINT
name|colNameLen
decl_stmt|;
name|SQLSMALLINT
name|colType
decl_stmt|;
name|SQLULEN
name|colSize
decl_stmt|;
name|SQLSMALLINT
name|colScale
decl_stmt|;
name|SQLSMALLINT
name|nullable
decl_stmt|;
name|SQLLEN
name|lengthIndicator
init|=
literal|0
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQL_ERROR
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|SQLTCHAR
argument_list|>
name|colName
argument_list|(
name|COLNAMESIZE
argument_list|)
decl_stmt|;
name|r
operator|=
name|SQLDescribeCol
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|colName
operator|.
name|data
argument_list|()
argument_list|,
name|COLNAMESIZE
argument_list|,
operator|&
name|colNameLen
argument_list|,
operator|&
name|colType
argument_list|,
operator|&
name|colSize
argument_list|,
operator|&
name|colScale
argument_list|,
operator|&
name|nullable
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"qGetBinaryData: Unable to describe column"
operator|<<
name|column
expr_stmt|;
comment|// SQLDescribeCol may return 0 if size cannot be determined
if|if
condition|(
operator|!
name|colSize
condition|)
name|colSize
operator|=
literal|255
expr_stmt|;
elseif|else
if|if
condition|(
name|colSize
operator|>
literal|65536
condition|)
comment|// read the field in 64 KB chunks
name|colSize
operator|=
literal|65536
expr_stmt|;
name|fieldVal
operator|.
name|resize
argument_list|(
name|colSize
argument_list|)
expr_stmt|;
name|ulong
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|r
operator|=
name|SQLGetData
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|SQL_C_BINARY
argument_list|,
call|(
name|SQLPOINTER
call|)
argument_list|(
name|fieldVal
operator|.
name|constData
argument_list|()
operator|+
name|read
argument_list|)
argument_list|,
name|colSize
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
break|break;
if|if
condition|(
name|lengthIndicator
operator|==
name|SQL_NULL_DATA
condition|)
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|ByteArray
argument_list|)
return|;
if|if
condition|(
name|lengthIndicator
operator|>
name|SQLLEN
argument_list|(
name|colSize
argument_list|)
operator|||
name|lengthIndicator
operator|==
name|SQL_NO_TOTAL
condition|)
block|{
name|read
operator|+=
name|colSize
expr_stmt|;
name|colSize
operator|=
literal|65536
expr_stmt|;
block|}
else|else
block|{
name|read
operator|+=
name|lengthIndicator
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
condition|)
block|{
comment|// the whole field was read in one chunk
name|fieldVal
operator|.
name|resize
argument_list|(
name|read
argument_list|)
expr_stmt|;
break|break;
block|}
name|fieldVal
operator|.
name|resize
argument_list|(
name|fieldVal
operator|.
name|size
argument_list|()
operator|+
name|colSize
argument_list|)
expr_stmt|;
block|}
return|return
name|fieldVal
return|;
block|}
end_function
begin_function
DECL|function|qGetIntData
specifier|static
name|QVariant
name|qGetIntData
parameter_list|(
name|SQLHANDLE
name|hStmt
parameter_list|,
name|int
name|column
parameter_list|,
name|bool
name|isSigned
init|=
literal|true
parameter_list|)
block|{
name|SQLINTEGER
name|intbuf
init|=
literal|0
decl_stmt|;
name|SQLLEN
name|lengthIndicator
init|=
literal|0
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLGetData
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|isSigned
condition|?
name|SQL_C_SLONG
else|:
name|SQL_C_ULONG
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|intbuf
argument_list|,
sizeof|sizeof
argument_list|(
name|intbuf
argument_list|)
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Invalid
argument_list|)
return|;
if|if
condition|(
name|lengthIndicator
operator|==
name|SQL_NULL_DATA
condition|)
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
return|;
if|if
condition|(
name|isSigned
condition|)
return|return
name|int
argument_list|(
name|intbuf
argument_list|)
return|;
else|else
return|return
name|uint
argument_list|(
name|intbuf
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qGetDoubleData
specifier|static
name|QVariant
name|qGetDoubleData
parameter_list|(
name|SQLHANDLE
name|hStmt
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|SQLDOUBLE
name|dblbuf
decl_stmt|;
name|SQLLEN
name|lengthIndicator
init|=
literal|0
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLGetData
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|SQL_C_DOUBLE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|dblbuf
argument_list|,
literal|0
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Invalid
argument_list|)
return|;
block|}
if|if
condition|(
name|lengthIndicator
operator|==
name|SQL_NULL_DATA
condition|)
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Double
argument_list|)
return|;
return|return
operator|(
name|double
operator|)
name|dblbuf
return|;
block|}
end_function
begin_function
DECL|function|qGetBigIntData
specifier|static
name|QVariant
name|qGetBigIntData
parameter_list|(
name|SQLHANDLE
name|hStmt
parameter_list|,
name|int
name|column
parameter_list|,
name|bool
name|isSigned
init|=
literal|true
parameter_list|)
block|{
name|SQLBIGINT
name|lngbuf
init|=
literal|0
decl_stmt|;
name|SQLLEN
name|lengthIndicator
init|=
literal|0
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLGetData
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|isSigned
condition|?
name|SQL_C_SBIGINT
else|:
name|SQL_C_UBIGINT
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|lngbuf
argument_list|,
sizeof|sizeof
argument_list|(
name|lngbuf
argument_list|)
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Invalid
argument_list|)
return|;
if|if
condition|(
name|lengthIndicator
operator|==
name|SQL_NULL_DATA
condition|)
return|return
name|QVariant
argument_list|(
name|QVariant
operator|::
name|LongLong
argument_list|)
return|;
if|if
condition|(
name|isSigned
condition|)
return|return
name|qint64
argument_list|(
name|lngbuf
argument_list|)
return|;
else|else
return|return
name|quint64
argument_list|(
name|lngbuf
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// creates a QSqlField from a valid hStmt generated
end_comment
begin_comment
comment|// by SQLColumns. The hStmt has to point to a valid position.
end_comment
begin_function
DECL|function|qMakeFieldInfo
specifier|static
name|QSqlField
name|qMakeFieldInfo
parameter_list|(
specifier|const
name|SQLHANDLE
name|hStmt
parameter_list|,
specifier|const
name|QODBCDriverPrivate
modifier|*
name|p
parameter_list|)
block|{
name|QString
name|fname
init|=
name|qGetStringData
argument_list|(
name|hStmt
argument_list|,
literal|3
argument_list|,
operator|-
literal|1
argument_list|,
name|p
operator|->
name|unicode
argument_list|)
decl_stmt|;
name|int
name|type
init|=
name|qGetIntData
argument_list|(
name|hStmt
argument_list|,
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
comment|// column type
name|QSqlField
name|f
argument_list|(
name|fname
argument_list|,
name|qDecodeODBCType
argument_list|(
name|type
argument_list|,
name|p
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|var
init|=
name|qGetIntData
argument_list|(
name|hStmt
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|f
operator|.
name|setLength
argument_list|(
name|var
operator|.
name|isNull
argument_list|()
condition|?
operator|-
literal|1
else|:
name|var
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// column size
name|var
operator|=
name|qGetIntData
argument_list|(
name|hStmt
argument_list|,
literal|8
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|f
operator|.
name|setPrecision
argument_list|(
name|var
operator|.
name|isNull
argument_list|()
condition|?
operator|-
literal|1
else|:
name|var
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// precision
name|f
operator|.
name|setSqlType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|int
name|required
init|=
name|qGetIntData
argument_list|(
name|hStmt
argument_list|,
literal|10
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
comment|// nullable-flag
comment|// required can be SQL_NO_NULLS, SQL_NULLABLE or SQL_NULLABLE_UNKNOWN
if|if
condition|(
name|required
operator|==
name|SQL_NO_NULLS
condition|)
name|f
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|required
operator|==
name|SQL_NULLABLE
condition|)
name|f
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// else we don't know
return|return
name|f
return|;
block|}
end_function
begin_function
DECL|function|qMakeFieldInfo
specifier|static
name|QSqlField
name|qMakeFieldInfo
parameter_list|(
specifier|const
name|QODBCPrivate
modifier|*
name|p
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|SQLSMALLINT
name|colNameLen
decl_stmt|;
name|SQLSMALLINT
name|colType
decl_stmt|;
name|SQLULEN
name|colSize
decl_stmt|;
name|SQLSMALLINT
name|colScale
decl_stmt|;
name|SQLSMALLINT
name|nullable
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQL_ERROR
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|SQLTCHAR
argument_list|>
name|colName
argument_list|(
name|COLNAMESIZE
argument_list|)
decl_stmt|;
name|r
operator|=
name|SQLDescribeCol
argument_list|(
name|p
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|colName
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|SQLSMALLINT
operator|)
name|COLNAMESIZE
argument_list|,
operator|&
name|colNameLen
argument_list|,
operator|&
name|colType
argument_list|,
operator|&
name|colSize
argument_list|,
operator|&
name|colScale
argument_list|,
operator|&
name|nullable
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"qMakeField: Unable to describe column %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|,
name|p
argument_list|)
expr_stmt|;
return|return
name|QSqlField
argument_list|()
return|;
block|}
name|SQLLEN
name|unsignedFlag
init|=
name|SQL_FALSE
decl_stmt|;
name|r
operator|=
name|SQLColAttribute
argument_list|(
name|p
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|SQL_DESC_UNSIGNED
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|unsignedFlag
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"qMakeField: Unable to get column attributes for column %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|UNICODE
name|QString
name|qColName
argument_list|(
name|fromSQLTCHAR
argument_list|(
name|colName
argument_list|,
name|colNameLen
argument_list|)
argument_list|)
decl_stmt|;
else|#
directive|else
name|QString
name|qColName
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|colName
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|// nullable can be SQL_NO_NULLS, SQL_NULLABLE or SQL_NULLABLE_UNKNOWN
name|QVariant
operator|::
name|Type
name|type
init|=
name|qDecodeODBCType
argument_list|(
name|colType
argument_list|,
name|p
argument_list|,
name|unsignedFlag
operator|==
name|SQL_FALSE
argument_list|)
decl_stmt|;
name|QSqlField
name|f
argument_list|(
name|qColName
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|f
operator|.
name|setSqlType
argument_list|(
name|colType
argument_list|)
expr_stmt|;
name|f
operator|.
name|setLength
argument_list|(
name|colSize
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|int
argument_list|(
name|colSize
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPrecision
argument_list|(
name|colScale
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|int
argument_list|(
name|colScale
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nullable
operator|==
name|SQL_NO_NULLS
condition|)
name|f
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|nullable
operator|==
name|SQL_NULLABLE
condition|)
name|f
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// else we don't know
return|return
name|f
return|;
block|}
end_function
begin_function
DECL|function|qGetODBCVersion
specifier|static
name|int
name|qGetODBCVersion
parameter_list|(
specifier|const
name|QString
modifier|&
name|connOpts
parameter_list|)
block|{
if|if
condition|(
name|connOpts
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"SQL_ATTR_ODBC_VERSION=SQL_OV_ODBC3"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
return|return
name|SQL_OV_ODBC3
return|;
return|return
name|SQL_OV_ODBC2
return|;
block|}
end_function
begin_function
DECL|function|quoteChar
name|QChar
name|QODBCDriverPrivate
operator|::
name|quoteChar
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isQuoteInitialized
condition|)
block|{
name|SQLTCHAR
name|driverResponse
index|[
literal|4
index|]
decl_stmt|;
name|SQLSMALLINT
name|length
decl_stmt|;
name|int
name|r
init|=
name|SQLGetInfo
argument_list|(
name|hDbc
argument_list|,
name|SQL_IDENTIFIER_QUOTE_CHAR
argument_list|,
operator|&
name|driverResponse
argument_list|,
sizeof|sizeof
argument_list|(
name|driverResponse
argument_list|)
argument_list|,
operator|&
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
ifdef|#
directive|ifdef
name|UNICODE
name|quote
operator|=
name|QChar
argument_list|(
name|driverResponse
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
else|#
directive|else
name|quote
operator|=
name|QLatin1Char
argument_list|(
name|driverResponse
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
else|else
name|quote
operator|=
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|isQuoteInitialized
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|quote
return|;
block|}
end_function
begin_function
DECL|function|setConnectionOptions
name|bool
name|QODBCDriverPrivate
operator|::
name|setConnectionOptions
parameter_list|(
specifier|const
name|QString
modifier|&
name|connOpts
parameter_list|)
block|{
comment|// Set any connection attributes
specifier|const
name|QStringList
name|opts
argument_list|(
name|connOpts
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
argument_list|)
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQL_SUCCESS
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|opts
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|tmp
argument_list|(
name|opts
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|idx
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|=
name|tmp
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCDriver::open: Illegal connect option value '"
operator|<<
name|tmp
operator|<<
literal|'\''
expr_stmt|;
continue|continue;
block|}
specifier|const
name|QString
name|opt
argument_list|(
name|tmp
operator|.
name|left
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|val
argument_list|(
name|tmp
operator|.
name|mid
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|.
name|simplified
argument_list|()
argument_list|)
decl_stmt|;
name|SQLUINTEGER
name|v
init|=
literal|0
decl_stmt|;
name|r
operator|=
name|SQL_SUCCESS
expr_stmt|;
if|if
condition|(
name|opt
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_ATTR_ACCESS_MODE"
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_MODE_READ_ONLY"
argument_list|)
condition|)
block|{
name|v
operator|=
name|SQL_MODE_READ_ONLY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_MODE_READ_WRITE"
argument_list|)
condition|)
block|{
name|v
operator|=
name|SQL_MODE_READ_WRITE
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCDriver::open: Unknown option value '"
operator|<<
name|val
operator|<<
literal|'\''
expr_stmt|;
continue|continue;
block|}
name|r
operator|=
name|SQLSetConnectAttr
argument_list|(
name|hDbc
argument_list|,
name|SQL_ATTR_ACCESS_MODE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|v
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_ATTR_CONNECTION_TIMEOUT"
argument_list|)
condition|)
block|{
name|v
operator|=
name|val
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|r
operator|=
name|SQLSetConnectAttr
argument_list|(
name|hDbc
argument_list|,
name|SQL_ATTR_CONNECTION_TIMEOUT
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|v
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_ATTR_LOGIN_TIMEOUT"
argument_list|)
condition|)
block|{
name|v
operator|=
name|val
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|r
operator|=
name|SQLSetConnectAttr
argument_list|(
name|hDbc
argument_list|,
name|SQL_ATTR_LOGIN_TIMEOUT
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|v
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_ATTR_CURRENT_CATALOG"
argument_list|)
condition|)
block|{
name|val
operator|.
name|utf16
argument_list|()
expr_stmt|;
comment|// 0 terminate
name|r
operator|=
name|SQLSetConnectAttr
argument_list|(
name|hDbc
argument_list|,
name|SQL_ATTR_CURRENT_CATALOG
argument_list|,
ifdef|#
directive|ifdef
name|UNICODE
name|toSQLTCHAR
argument_list|(
name|val
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
else|#
directive|else
operator|(
name|SQLCHAR
operator|*
operator|)
name|val
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
endif|#
directive|endif
name|val
operator|.
name|length
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_ATTR_METADATA_ID"
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_TRUE"
argument_list|)
condition|)
block|{
name|v
operator|=
name|SQL_TRUE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_FALSE"
argument_list|)
condition|)
block|{
name|v
operator|=
name|SQL_FALSE
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCDriver::open: Unknown option value '"
operator|<<
name|val
operator|<<
literal|'\''
expr_stmt|;
continue|continue;
block|}
name|r
operator|=
name|SQLSetConnectAttr
argument_list|(
name|hDbc
argument_list|,
name|SQL_ATTR_METADATA_ID
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|v
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_ATTR_PACKET_SIZE"
argument_list|)
condition|)
block|{
name|v
operator|=
name|val
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|r
operator|=
name|SQLSetConnectAttr
argument_list|(
name|hDbc
argument_list|,
name|SQL_ATTR_PACKET_SIZE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|v
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_ATTR_TRACEFILE"
argument_list|)
condition|)
block|{
name|val
operator|.
name|utf16
argument_list|()
expr_stmt|;
comment|// 0 terminate
name|r
operator|=
name|SQLSetConnectAttr
argument_list|(
name|hDbc
argument_list|,
name|SQL_ATTR_TRACEFILE
argument_list|,
ifdef|#
directive|ifdef
name|UNICODE
name|toSQLTCHAR
argument_list|(
name|val
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
else|#
directive|else
operator|(
name|SQLCHAR
operator|*
operator|)
name|val
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
endif|#
directive|endif
name|val
operator|.
name|length
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_ATTR_TRACE"
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_OPT_TRACE_OFF"
argument_list|)
condition|)
block|{
name|v
operator|=
name|SQL_OPT_TRACE_OFF
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_OPT_TRACE_ON"
argument_list|)
condition|)
block|{
name|v
operator|=
name|SQL_OPT_TRACE_ON
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCDriver::open: Unknown option value '"
operator|<<
name|val
operator|<<
literal|'\''
expr_stmt|;
continue|continue;
block|}
name|r
operator|=
name|SQLSetConnectAttr
argument_list|(
name|hDbc
argument_list|,
name|SQL_ATTR_TRACE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|v
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_ATTR_CONNECTION_POOLING"
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_CP_OFF"
argument_list|)
condition|)
name|v
operator|=
name|SQL_CP_OFF
expr_stmt|;
elseif|else
if|if
condition|(
name|val
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_CP_ONE_PER_DRIVER"
argument_list|)
condition|)
name|v
operator|=
name|SQL_CP_ONE_PER_DRIVER
expr_stmt|;
elseif|else
if|if
condition|(
name|val
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_CP_ONE_PER_HENV"
argument_list|)
condition|)
name|v
operator|=
name|SQL_CP_ONE_PER_HENV
expr_stmt|;
elseif|else
if|if
condition|(
name|val
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_CP_DEFAULT"
argument_list|)
condition|)
name|v
operator|=
name|SQL_CP_DEFAULT
expr_stmt|;
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCDriver::open: Unknown option value '"
operator|<<
name|val
operator|<<
literal|'\''
expr_stmt|;
continue|continue;
block|}
name|r
operator|=
name|SQLSetConnectAttr
argument_list|(
name|hDbc
argument_list|,
name|SQL_ATTR_CONNECTION_POOLING
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|v
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_ATTR_CP_MATCH"
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_CP_STRICT_MATCH"
argument_list|)
condition|)
name|v
operator|=
name|SQL_CP_STRICT_MATCH
expr_stmt|;
elseif|else
if|if
condition|(
name|val
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_CP_RELAXED_MATCH"
argument_list|)
condition|)
name|v
operator|=
name|SQL_CP_RELAXED_MATCH
expr_stmt|;
elseif|else
if|if
condition|(
name|val
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_CP_MATCH_DEFAULT"
argument_list|)
condition|)
name|v
operator|=
name|SQL_CP_MATCH_DEFAULT
expr_stmt|;
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCDriver::open: Unknown option value '"
operator|<<
name|val
operator|<<
literal|'\''
expr_stmt|;
continue|continue;
block|}
name|r
operator|=
name|SQLSetConnectAttr
argument_list|(
name|hDbc
argument_list|,
name|SQL_ATTR_CP_MATCH
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|v
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_ATTR_ODBC_VERSION"
argument_list|)
condition|)
block|{
comment|// Already handled in QODBCDriver::open()
continue|continue;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCDriver::open: Unknown connection attribute '"
operator|<<
name|opt
operator|<<
literal|'\''
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
name|qSqlWarning
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QODBCDriver::open: Unable to set connection attribute'%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|opt
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|splitTableQualifier
name|void
name|QODBCDriverPrivate
operator|::
name|splitTableQualifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|qualifier
parameter_list|,
name|QString
modifier|&
name|catalog
parameter_list|,
name|QString
modifier|&
name|schema
parameter_list|,
name|QString
modifier|&
name|table
parameter_list|)
block|{
if|if
condition|(
operator|!
name|useSchema
condition|)
block|{
name|table
operator|=
name|qualifier
expr_stmt|;
return|return;
block|}
name|QStringList
name|l
init|=
name|qualifier
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|count
argument_list|()
operator|>
literal|3
condition|)
return|return;
comment|// can't possibly be a valid table qualifier
name|int
name|i
init|=
literal|0
decl_stmt|,
name|n
init|=
name|l
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|1
condition|)
block|{
name|table
operator|=
name|qualifier
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|l
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|n
operator|==
literal|3
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|catalog
operator|=
operator|*
name|it
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|schema
operator|=
operator|*
name|it
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|2
condition|)
block|{
name|table
operator|=
operator|*
name|it
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|n
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|schema
operator|=
operator|*
name|it
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|table
operator|=
operator|*
name|it
expr_stmt|;
block|}
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|defaultCase
name|QODBCDriverPrivate
operator|::
name|DefaultCase
name|QODBCDriverPrivate
operator|::
name|defaultCase
parameter_list|()
specifier|const
block|{
name|DefaultCase
name|ret
decl_stmt|;
name|SQLUSMALLINT
name|casing
decl_stmt|;
name|int
name|r
init|=
name|SQLGetInfo
argument_list|(
name|hDbc
argument_list|,
name|SQL_IDENTIFIER_CASE
argument_list|,
operator|&
name|casing
argument_list|,
sizeof|sizeof
argument_list|(
name|casing
argument_list|)
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|ret
operator|=
name|Mixed
expr_stmt|;
comment|//arbitrary case if driver cannot be queried
else|else
block|{
switch|switch
condition|(
name|casing
condition|)
block|{
case|case
operator|(
name|SQL_IC_UPPER
operator|)
case|:
name|ret
operator|=
name|Upper
expr_stmt|;
break|break;
case|case
operator|(
name|SQL_IC_LOWER
operator|)
case|:
name|ret
operator|=
name|Lower
expr_stmt|;
break|break;
case|case
operator|(
name|SQL_IC_SENSITIVE
operator|)
case|:
name|ret
operator|=
name|Sensitive
expr_stmt|;
break|break;
case|case
operator|(
name|SQL_IC_MIXED
operator|)
case|:
default|default:
name|ret
operator|=
name|Mixed
expr_stmt|;
break|break;
block|}
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/*    Adjust the casing of an identifier to match what the    database engine would have done to it. */
end_comment
begin_function
DECL|function|adjustCase
name|QString
name|QODBCDriverPrivate
operator|::
name|adjustCase
parameter_list|(
specifier|const
name|QString
modifier|&
name|identifier
parameter_list|)
specifier|const
block|{
name|QString
name|ret
init|=
name|identifier
decl_stmt|;
switch|switch
condition|(
name|defaultCase
argument_list|()
condition|)
block|{
case|case
operator|(
name|Lower
operator|)
case|:
name|ret
operator|=
name|identifier
operator|.
name|toLower
argument_list|()
expr_stmt|;
break|break;
case|case
operator|(
name|Upper
operator|)
case|:
name|ret
operator|=
name|identifier
operator|.
name|toUpper
argument_list|()
expr_stmt|;
break|break;
case|case
operator|(
name|Mixed
operator|)
case|:
case|case
operator|(
name|Sensitive
operator|)
case|:
default|default:
name|ret
operator|=
name|identifier
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|////////////////////////////////////////////////////////////////////////////
end_comment
begin_constructor
DECL|function|QODBCResult
name|QODBCResult
operator|::
name|QODBCResult
parameter_list|(
specifier|const
name|QODBCDriver
modifier|*
name|db
parameter_list|,
name|QODBCDriverPrivate
modifier|*
name|p
parameter_list|)
member_init_list|:
name|QSqlResult
argument_list|(
name|db
argument_list|)
block|{
name|d
operator|=
operator|new
name|QODBCPrivate
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QODBCResult
name|QODBCResult
operator|::
name|~
name|QODBCResult
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|hStmt
operator|&&
name|d
operator|->
name|isStmtHandleValid
argument_list|(
name|driver
argument_list|()
argument_list|)
operator|&&
name|driver
argument_list|()
operator|->
name|isOpen
argument_list|()
condition|)
block|{
name|SQLRETURN
name|r
init|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|d
operator|->
name|hStmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver: Unable to free statement handle "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|reset
name|bool
name|QODBCResult
operator|::
name|reset
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
block|{
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|d
operator|->
name|rInf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|fieldCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|fieldCacheIdx
operator|=
literal|0
expr_stmt|;
comment|// Always reallocate the statement handle - the statement attributes
comment|// are not reset if SQLFreeStmt() is called which causes some problems.
name|SQLRETURN
name|r
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|hStmt
operator|&&
name|d
operator|->
name|isStmtHandleValid
argument_list|(
name|driver
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|d
operator|->
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCResult::reset: Unable to free statement handle"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|r
operator|=
name|SQLAllocHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|d
operator|->
name|dpDbc
argument_list|()
argument_list|,
operator|&
name|d
operator|->
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCResult::reset: Unable to allocate statement handle"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|updateStmtHandleState
argument_list|(
name|driver
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|userForwardOnly
condition|)
block|{
name|r
operator|=
name|SQLSetStmtAttr
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_ATTR_CURSOR_TYPE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|SQL_CURSOR_FORWARD_ONLY
argument_list|,
name|SQL_IS_UINTEGER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|SQLSetStmtAttr
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_ATTR_CURSOR_TYPE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|SQL_CURSOR_STATIC
argument_list|,
name|SQL_IS_UINTEGER
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QODBCResult"
argument_list|,
literal|"QODBCResult::reset: Unable to set 'SQL_CURSOR_STATIC' as statement attribute. "
literal|"Please check your ODBC driver configuration"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
ifdef|#
directive|ifdef
name|UNICODE
name|r
operator|=
name|SQLExecDirect
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|toSQLTCHAR
argument_list|(
name|query
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|SQLINTEGER
operator|)
name|query
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QByteArray
name|query8
init|=
name|query
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|r
operator|=
name|SQLExecDirect
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
operator|(
name|SQLCHAR
operator|*
operator|)
name|query8
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|SQLINTEGER
operator|)
name|query8
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
operator|&&
name|r
operator|!=
name|SQL_NO_DATA
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QODBCResult"
argument_list|,
literal|"Unable to execute statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|r
operator|==
name|SQL_NO_DATA
condition|)
block|{
name|setSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|SQLINTEGER
name|isScrollable
decl_stmt|,
name|bufferLength
decl_stmt|;
name|r
operator|=
name|SQLGetStmtAttr
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_ATTR_CURSOR_SCROLLABLE
argument_list|,
operator|&
name|isScrollable
argument_list|,
name|SQL_IS_INTEGER
argument_list|,
operator|&
name|bufferLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
name|QSqlResult
operator|::
name|setForwardOnly
argument_list|(
name|isScrollable
operator|==
name|SQL_NONSCROLLABLE
argument_list|)
expr_stmt|;
name|SQLSMALLINT
name|count
decl_stmt|;
name|SQLNumResultCols
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
operator|&
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
condition|)
block|{
name|setSelect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|d
operator|->
name|rInf
operator|.
name|append
argument_list|(
name|qMakeFieldInfo
argument_list|(
name|d
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|fieldCache
operator|.
name|resize
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fetch
name|bool
name|QODBCResult
operator|::
name|fetch
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
operator|!
name|driver
argument_list|()
operator|->
name|isOpen
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|isForwardOnly
argument_list|()
operator|&&
name|i
operator|<
name|at
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|i
operator|==
name|at
argument_list|()
condition|)
return|return
literal|true
return|;
name|d
operator|->
name|clearValues
argument_list|()
expr_stmt|;
name|int
name|actualIdx
init|=
name|i
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|actualIdx
operator|<=
literal|0
condition|)
block|{
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|SQLRETURN
name|r
decl_stmt|;
if|if
condition|(
name|isForwardOnly
argument_list|()
condition|)
block|{
name|bool
name|ok
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|ok
operator|&&
name|i
operator|>
name|at
argument_list|()
condition|)
name|ok
operator|=
name|fetchNext
argument_list|()
expr_stmt|;
return|return
name|ok
return|;
block|}
else|else
block|{
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_FETCH_ABSOLUTE
argument_list|,
name|actualIdx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
if|if
condition|(
name|r
operator|!=
name|SQL_NO_DATA
condition|)
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QODBCResult"
argument_list|,
literal|"Unable to fetch"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|setAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fetchNext
name|bool
name|QODBCResult
operator|::
name|fetchNext
parameter_list|()
block|{
name|SQLRETURN
name|r
decl_stmt|;
name|d
operator|->
name|clearValues
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasSQLFetchScroll
condition|)
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_FETCH_NEXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
name|SQLFetch
argument_list|(
name|d
operator|->
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
if|if
condition|(
name|r
operator|!=
name|SQL_NO_DATA
condition|)
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QODBCResult"
argument_list|,
literal|"Unable to fetch next"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|setAt
argument_list|(
name|at
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fetchFirst
name|bool
name|QODBCResult
operator|::
name|fetchFirst
parameter_list|()
block|{
if|if
condition|(
name|isForwardOnly
argument_list|()
operator|&&
name|at
argument_list|()
operator|!=
name|QSql
operator|::
name|BeforeFirstRow
condition|)
return|return
literal|false
return|;
name|SQLRETURN
name|r
decl_stmt|;
name|d
operator|->
name|clearValues
argument_list|()
expr_stmt|;
if|if
condition|(
name|isForwardOnly
argument_list|()
condition|)
block|{
return|return
name|fetchNext
argument_list|()
return|;
block|}
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_FETCH_FIRST
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
if|if
condition|(
name|r
operator|!=
name|SQL_NO_DATA
condition|)
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QODBCResult"
argument_list|,
literal|"Unable to fetch first"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|setAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fetchPrevious
name|bool
name|QODBCResult
operator|::
name|fetchPrevious
parameter_list|()
block|{
if|if
condition|(
name|isForwardOnly
argument_list|()
condition|)
return|return
literal|false
return|;
name|SQLRETURN
name|r
decl_stmt|;
name|d
operator|->
name|clearValues
argument_list|()
expr_stmt|;
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_FETCH_PRIOR
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
if|if
condition|(
name|r
operator|!=
name|SQL_NO_DATA
condition|)
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QODBCResult"
argument_list|,
literal|"Unable to fetch previous"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|setAt
argument_list|(
name|at
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fetchLast
name|bool
name|QODBCResult
operator|::
name|fetchLast
parameter_list|()
block|{
name|SQLRETURN
name|r
decl_stmt|;
name|d
operator|->
name|clearValues
argument_list|()
expr_stmt|;
if|if
condition|(
name|isForwardOnly
argument_list|()
condition|)
block|{
comment|// cannot seek to last row in forwardOnly mode, so we have to use brute force
name|int
name|i
init|=
name|at
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|QSql
operator|::
name|AfterLastRow
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|i
operator|==
name|QSql
operator|::
name|BeforeFirstRow
condition|)
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|fetchNext
argument_list|()
condition|)
operator|++
name|i
expr_stmt|;
name|setAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_FETCH_LAST
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
if|if
condition|(
name|r
operator|!=
name|SQL_NO_DATA
condition|)
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QODBCResult"
argument_list|,
literal|"Unable to fetch last"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|SQLINTEGER
name|currRow
decl_stmt|;
name|r
operator|=
name|SQLGetStmtAttr
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_ROW_NUMBER
argument_list|,
operator|&
name|currRow
argument_list|,
name|SQL_IS_INTEGER
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
return|return
literal|false
return|;
name|setAt
argument_list|(
name|currRow
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|data
name|QVariant
name|QODBCResult
operator|::
name|data
parameter_list|(
name|int
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|>=
name|d
operator|->
name|rInf
operator|.
name|count
argument_list|()
operator|||
name|field
operator|<
literal|0
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCResult::data: column"
operator|<<
name|field
operator|<<
literal|"out of range"
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
if|if
condition|(
name|field
operator|<
name|d
operator|->
name|fieldCacheIdx
condition|)
return|return
name|d
operator|->
name|fieldCache
operator|.
name|at
argument_list|(
name|field
argument_list|)
return|;
name|SQLRETURN
name|r
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SQLLEN
name|lengthIndicator
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|d
operator|->
name|fieldCacheIdx
init|;
name|i
operator|<=
name|field
condition|;
operator|++
name|i
control|)
block|{
comment|// some servers do not support fetching column n after we already
comment|// fetched column n+1, so cache all previous columns here
specifier|const
name|QSqlField
name|info
init|=
name|d
operator|->
name|rInf
operator|.
name|field
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|info
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|LongLong
case|:
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|qGetBigIntData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|ULongLong
case|:
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|qGetBigIntData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Int
case|:
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|qGetIntData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|UInt
case|:
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|qGetIntData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Date
case|:
name|DATE_STRUCT
name|dbuf
decl_stmt|;
name|r
operator|=
name|SQLGetData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|SQL_C_DATE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|dbuf
argument_list|,
literal|0
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|&&
operator|(
name|lengthIndicator
operator|!=
name|SQL_NULL_DATA
operator|)
condition|)
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|QDate
argument_list|(
name|dbuf
operator|.
name|year
argument_list|,
name|dbuf
operator|.
name|month
argument_list|,
name|dbuf
operator|.
name|day
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Date
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Time
case|:
name|TIME_STRUCT
name|tbuf
decl_stmt|;
name|r
operator|=
name|SQLGetData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|SQL_C_TIME
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|tbuf
argument_list|,
literal|0
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|&&
operator|(
name|lengthIndicator
operator|!=
name|SQL_NULL_DATA
operator|)
condition|)
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|QTime
argument_list|(
name|tbuf
operator|.
name|hour
argument_list|,
name|tbuf
operator|.
name|minute
argument_list|,
name|tbuf
operator|.
name|second
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Time
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|DateTime
case|:
name|TIMESTAMP_STRUCT
name|dtbuf
decl_stmt|;
name|r
operator|=
name|SQLGetData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|SQL_C_TIMESTAMP
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|dtbuf
argument_list|,
literal|0
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|&&
operator|(
name|lengthIndicator
operator|!=
name|SQL_NULL_DATA
operator|)
condition|)
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
name|dtbuf
operator|.
name|year
argument_list|,
name|dtbuf
operator|.
name|month
argument_list|,
name|dtbuf
operator|.
name|day
argument_list|)
argument_list|,
name|QTime
argument_list|(
name|dtbuf
operator|.
name|hour
argument_list|,
name|dtbuf
operator|.
name|minute
argument_list|,
name|dtbuf
operator|.
name|second
argument_list|,
name|dtbuf
operator|.
name|fraction
operator|/
literal|1000000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|QVariant
operator|::
name|DateTime
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|ByteArray
case|:
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|qGetBinaryData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|qGetStringData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|,
name|d
operator|->
name|unicode
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
switch|switch
condition|(
name|numericalPrecisionPolicy
argument_list|()
condition|)
block|{
case|case
name|QSql
operator|::
name|LowPrecisionInt32
case|:
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|qGetIntData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|LowPrecisionInt64
case|:
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|qGetBigIntData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|LowPrecisionDouble
case|:
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|qGetDoubleData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|HighPrecision
case|:
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|qGetStringData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
default|default:
name|d
operator|->
name|fieldCache
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|qGetStringData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|d
operator|->
name|fieldCacheIdx
operator|=
name|field
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|d
operator|->
name|fieldCache
index|[
name|field
index|]
return|;
block|}
end_function
begin_function
DECL|function|isNull
name|bool
name|QODBCResult
operator|::
name|isNull
parameter_list|(
name|int
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
argument_list|<
literal|0
operator|||
name|field
argument_list|>
name|d
operator|->
name|fieldCache
operator|.
name|size
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|field
operator|<=
name|d
operator|->
name|fieldCacheIdx
condition|)
block|{
comment|// since there is no good way to find out whether the value is NULL
comment|// without fetching the field we'll fetch it here.
comment|// (data() also sets the NULL flag)
name|data
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
return|return
name|d
operator|->
name|fieldCache
operator|.
name|at
argument_list|(
name|field
argument_list|)
operator|.
name|isNull
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|size
name|int
name|QODBCResult
operator|::
name|size
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|numRowsAffected
name|int
name|QODBCResult
operator|::
name|numRowsAffected
parameter_list|()
block|{
name|SQLLEN
name|affectedRowCount
init|=
literal|0
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLRowCount
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
operator|&
name|affectedRowCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
condition|)
return|return
name|affectedRowCount
return|;
else|else
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCResult::numRowsAffected: Unable to count affected rows"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|prepare
name|bool
name|QODBCResult
operator|::
name|prepare
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
block|{
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|SQLRETURN
name|r
decl_stmt|;
name|d
operator|->
name|rInf
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hStmt
operator|&&
name|d
operator|->
name|isStmtHandleValid
argument_list|(
name|driver
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|d
operator|->
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCResult::prepare: Unable to close statement"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|r
operator|=
name|SQLAllocHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|d
operator|->
name|dpDbc
argument_list|()
argument_list|,
operator|&
name|d
operator|->
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCResult::prepare: Unable to allocate statement handle"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|updateStmtHandleState
argument_list|(
name|driver
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|userForwardOnly
condition|)
block|{
name|r
operator|=
name|SQLSetStmtAttr
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_ATTR_CURSOR_TYPE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|SQL_CURSOR_FORWARD_ONLY
argument_list|,
name|SQL_IS_UINTEGER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|SQLSetStmtAttr
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_ATTR_CURSOR_TYPE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|SQL_CURSOR_STATIC
argument_list|,
name|SQL_IS_UINTEGER
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QODBCResult"
argument_list|,
literal|"QODBCResult::reset: Unable to set 'SQL_CURSOR_STATIC' as statement attribute. "
literal|"Please check your ODBC driver configuration"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
ifdef|#
directive|ifdef
name|UNICODE
name|r
operator|=
name|SQLPrepare
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|toSQLTCHAR
argument_list|(
name|query
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|SQLINTEGER
operator|)
name|query
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QByteArray
name|query8
init|=
name|query
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|r
operator|=
name|SQLPrepare
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
operator|(
name|SQLCHAR
operator|*
operator|)
name|query8
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|SQLINTEGER
operator|)
name|query8
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QODBCResult"
argument_list|,
literal|"Unable to prepare statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|exec
name|bool
name|QODBCResult
operator|::
name|exec
parameter_list|()
block|{
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|d
operator|->
name|rInf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|fieldCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|fieldCacheIdx
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|hStmt
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCResult::exec: No statement handle available"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isSelect
argument_list|()
condition|)
name|SQLCloseCursor
argument_list|(
name|d
operator|->
name|hStmt
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|tmpStorage
decl_stmt|;
comment|// holds temporary buffers
name|QVarLengthArray
argument_list|<
name|SQLLEN
argument_list|,
literal|32
argument_list|>
name|indicators
argument_list|(
name|boundValues
argument_list|()
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
name|memset
argument_list|(
name|indicators
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|indicators
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SQLLEN
argument_list|)
argument_list|)
expr_stmt|;
comment|// bind parameters - only positional binding allowed
name|QVector
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|values
init|=
name|boundValues
argument_list|()
decl_stmt|;
name|int
name|i
decl_stmt|;
name|SQLRETURN
name|r
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|bindValueType
argument_list|(
name|i
argument_list|)
operator|&
name|QSql
operator|::
name|Out
condition|)
name|values
index|[
name|i
index|]
operator|.
name|detach
argument_list|()
expr_stmt|;
specifier|const
name|QVariant
modifier|&
name|val
init|=
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SQLLEN
modifier|*
name|ind
init|=
operator|&
name|indicators
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|isNull
argument_list|()
condition|)
operator|*
name|ind
operator|=
name|SQL_NULL_DATA
expr_stmt|;
switch|switch
condition|(
name|val
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Date
case|:
block|{
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|.
name|resize
argument_list|(
sizeof|sizeof
argument_list|(
name|DATE_STRUCT
argument_list|)
argument_list|)
expr_stmt|;
name|DATE_STRUCT
modifier|*
name|dt
init|=
operator|(
name|DATE_STRUCT
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
decl_stmt|;
name|QDate
name|qdt
init|=
name|val
operator|.
name|toDate
argument_list|()
decl_stmt|;
name|dt
operator|->
name|year
operator|=
name|qdt
operator|.
name|year
argument_list|()
expr_stmt|;
name|dt
operator|->
name|month
operator|=
name|qdt
operator|.
name|month
argument_list|()
expr_stmt|;
name|dt
operator|->
name|day
operator|=
name|qdt
operator|.
name|day
argument_list|()
expr_stmt|;
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
name|QSql
operator|::
name|InOut
index|]
argument_list|,
name|SQL_C_DATE
argument_list|,
name|SQL_DATE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|dt
argument_list|,
literal|0
argument_list|,
operator|*
name|ind
operator|==
name|SQL_NULL_DATA
condition|?
name|ind
else|:
name|NULL
argument_list|)
expr_stmt|;
name|tmpStorage
operator|.
name|append
argument_list|(
name|ba
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Time
case|:
block|{
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|.
name|resize
argument_list|(
sizeof|sizeof
argument_list|(
name|TIME_STRUCT
argument_list|)
argument_list|)
expr_stmt|;
name|TIME_STRUCT
modifier|*
name|dt
init|=
operator|(
name|TIME_STRUCT
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
decl_stmt|;
name|QTime
name|qdt
init|=
name|val
operator|.
name|toTime
argument_list|()
decl_stmt|;
name|dt
operator|->
name|hour
operator|=
name|qdt
operator|.
name|hour
argument_list|()
expr_stmt|;
name|dt
operator|->
name|minute
operator|=
name|qdt
operator|.
name|minute
argument_list|()
expr_stmt|;
name|dt
operator|->
name|second
operator|=
name|qdt
operator|.
name|second
argument_list|()
expr_stmt|;
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
name|QSql
operator|::
name|InOut
index|]
argument_list|,
name|SQL_C_TIME
argument_list|,
name|SQL_TIME
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|dt
argument_list|,
literal|0
argument_list|,
operator|*
name|ind
operator|==
name|SQL_NULL_DATA
condition|?
name|ind
else|:
name|NULL
argument_list|)
expr_stmt|;
name|tmpStorage
operator|.
name|append
argument_list|(
name|ba
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|DateTime
case|:
block|{
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|.
name|resize
argument_list|(
sizeof|sizeof
argument_list|(
name|TIMESTAMP_STRUCT
argument_list|)
argument_list|)
expr_stmt|;
name|TIMESTAMP_STRUCT
modifier|*
name|dt
init|=
operator|(
name|TIMESTAMP_STRUCT
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
decl_stmt|;
name|QDateTime
name|qdt
init|=
name|val
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
name|dt
operator|->
name|year
operator|=
name|qdt
operator|.
name|date
argument_list|()
operator|.
name|year
argument_list|()
expr_stmt|;
name|dt
operator|->
name|month
operator|=
name|qdt
operator|.
name|date
argument_list|()
operator|.
name|month
argument_list|()
expr_stmt|;
name|dt
operator|->
name|day
operator|=
name|qdt
operator|.
name|date
argument_list|()
operator|.
name|day
argument_list|()
expr_stmt|;
name|dt
operator|->
name|hour
operator|=
name|qdt
operator|.
name|time
argument_list|()
operator|.
name|hour
argument_list|()
expr_stmt|;
name|dt
operator|->
name|minute
operator|=
name|qdt
operator|.
name|time
argument_list|()
operator|.
name|minute
argument_list|()
expr_stmt|;
name|dt
operator|->
name|second
operator|=
name|qdt
operator|.
name|time
argument_list|()
operator|.
name|second
argument_list|()
expr_stmt|;
name|dt
operator|->
name|fraction
operator|=
name|qdt
operator|.
name|time
argument_list|()
operator|.
name|msec
argument_list|()
operator|*
literal|1000000
expr_stmt|;
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
name|QSql
operator|::
name|InOut
index|]
argument_list|,
name|SQL_C_TIMESTAMP
argument_list|,
name|SQL_TIMESTAMP
argument_list|,
literal|19
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|dt
argument_list|,
literal|0
argument_list|,
operator|*
name|ind
operator|==
name|SQL_NULL_DATA
condition|?
name|ind
else|:
name|NULL
argument_list|)
expr_stmt|;
name|tmpStorage
operator|.
name|append
argument_list|(
name|ba
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Int
case|:
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
name|QSql
operator|::
name|InOut
index|]
argument_list|,
name|SQL_C_SLONG
argument_list|,
name|SQL_INTEGER
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|val
operator|.
name|constData
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|*
name|ind
operator|==
name|SQL_NULL_DATA
condition|?
name|ind
else|:
name|NULL
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|UInt
case|:
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
name|QSql
operator|::
name|InOut
index|]
argument_list|,
name|SQL_C_ULONG
argument_list|,
name|SQL_NUMERIC
argument_list|,
literal|15
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|val
operator|.
name|constData
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|*
name|ind
operator|==
name|SQL_NULL_DATA
condition|?
name|ind
else|:
name|NULL
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
name|QSql
operator|::
name|InOut
index|]
argument_list|,
name|SQL_C_DOUBLE
argument_list|,
name|SQL_DOUBLE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|val
operator|.
name|constData
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|*
name|ind
operator|==
name|SQL_NULL_DATA
condition|?
name|ind
else|:
name|NULL
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|LongLong
case|:
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
name|QSql
operator|::
name|InOut
index|]
argument_list|,
name|SQL_C_SBIGINT
argument_list|,
name|SQL_BIGINT
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|val
operator|.
name|constData
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|*
name|ind
operator|==
name|SQL_NULL_DATA
condition|?
name|ind
else|:
name|NULL
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|ULongLong
case|:
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
name|QSql
operator|::
name|InOut
index|]
argument_list|,
name|SQL_C_UBIGINT
argument_list|,
name|SQL_BIGINT
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|val
operator|.
name|constData
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|*
name|ind
operator|==
name|SQL_NULL_DATA
condition|?
name|ind
else|:
name|NULL
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|ByteArray
case|:
if|if
condition|(
operator|*
name|ind
operator|!=
name|SQL_NULL_DATA
condition|)
block|{
operator|*
name|ind
operator|=
name|val
operator|.
name|toByteArray
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
name|QSql
operator|::
name|InOut
index|]
argument_list|,
name|SQL_C_BINARY
argument_list|,
name|SQL_LONGVARBINARY
argument_list|,
name|val
operator|.
name|toByteArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|val
operator|.
name|toByteArray
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|val
operator|.
name|toByteArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|ind
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Bool
case|:
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
name|QSql
operator|::
name|InOut
index|]
argument_list|,
name|SQL_C_BIT
argument_list|,
name|SQL_BIT
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|val
operator|.
name|constData
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|*
name|ind
operator|==
name|SQL_NULL_DATA
condition|?
name|ind
else|:
name|NULL
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
if|if
condition|(
name|d
operator|->
name|unicode
condition|)
block|{
name|QString
name|str
init|=
name|val
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|*
name|ind
operator|!=
name|SQL_NULL_DATA
condition|)
operator|*
name|ind
operator|=
name|str
operator|.
name|length
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
expr_stmt|;
name|int
name|strSize
init|=
name|str
operator|.
name|length
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindValueType
argument_list|(
name|i
argument_list|)
operator|&
name|QSql
operator|::
name|Out
condition|)
block|{
name|QVarLengthArray
argument_list|<
name|SQLTCHAR
argument_list|>
name|ba
argument_list|(
name|toSQLTCHAR
argument_list|(
name|str
argument_list|)
argument_list|)
decl_stmt|;
name|ba
operator|.
name|reserve
argument_list|(
name|str
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
name|QSql
operator|::
name|InOut
index|]
argument_list|,
name|SQL_C_TCHAR
argument_list|,
name|strSize
operator|>
literal|254
condition|?
name|SQL_WLONGVARCHAR
else|:
name|SQL_WVARCHAR
argument_list|,
literal|0
argument_list|,
comment|// god knows... don't change this!
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|tmpStorage
operator|.
name|append
argument_list|(
name|QByteArray
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|ba
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|QByteArray
name|strba
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|toSQLTCHAR
argument_list|(
name|str
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|str
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
name|QSql
operator|::
name|InOut
index|]
argument_list|,
name|SQL_C_TCHAR
argument_list|,
name|strSize
operator|>
literal|254
condition|?
name|SQL_WLONGVARCHAR
else|:
name|SQL_WVARCHAR
argument_list|,
name|strSize
argument_list|,
literal|0
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|strba
operator|.
name|constData
argument_list|()
argument_list|,
name|strba
operator|.
name|size
argument_list|()
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|tmpStorage
operator|.
name|append
argument_list|(
name|strba
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|QByteArray
name|str
init|=
name|val
operator|.
name|toString
argument_list|()
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
if|if
condition|(
operator|*
name|ind
operator|!=
name|SQL_NULL_DATA
condition|)
operator|*
name|ind
operator|=
name|str
operator|.
name|length
argument_list|()
expr_stmt|;
name|int
name|strSize
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
name|QSql
operator|::
name|InOut
index|]
argument_list|,
name|SQL_C_CHAR
argument_list|,
name|strSize
operator|>
literal|254
condition|?
name|SQL_LONGVARCHAR
else|:
name|SQL_VARCHAR
argument_list|,
name|strSize
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|str
operator|.
name|constData
argument_list|()
argument_list|,
name|strSize
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|tmpStorage
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// fall through
default|default:
block|{
name|QByteArray
name|ba
init|=
name|val
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|*
name|ind
operator|!=
name|SQL_NULL_DATA
condition|)
operator|*
name|ind
operator|=
name|ba
operator|.
name|size
argument_list|()
expr_stmt|;
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
name|QSql
operator|::
name|InOut
index|]
argument_list|,
name|SQL_C_BINARY
argument_list|,
name|SQL_VARBINARY
argument_list|,
name|ba
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|ba
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|tmpStorage
operator|.
name|append
argument_list|(
name|ba
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCResult::exec: unable to bind variable:"
operator|<<
name|qODBCWarn
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QODBCResult"
argument_list|,
literal|"Unable to bind variable"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|r
operator|=
name|SQLExecute
argument_list|(
name|d
operator|->
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCResult::exec: Unable to execute statement:"
operator|<<
name|qODBCWarn
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QODBCResult"
argument_list|,
literal|"Unable to execute statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|SQLINTEGER
name|isScrollable
decl_stmt|,
name|bufferLength
decl_stmt|;
name|r
operator|=
name|SQLGetStmtAttr
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_ATTR_CURSOR_SCROLLABLE
argument_list|,
operator|&
name|isScrollable
argument_list|,
name|SQL_IS_INTEGER
argument_list|,
operator|&
name|bufferLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
name|QSqlResult
operator|::
name|setForwardOnly
argument_list|(
name|isScrollable
operator|==
name|SQL_NONSCROLLABLE
argument_list|)
expr_stmt|;
name|SQLSMALLINT
name|count
decl_stmt|;
name|SQLNumResultCols
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
operator|&
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
condition|)
block|{
name|setSelect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|d
operator|->
name|rInf
operator|.
name|append
argument_list|(
name|qMakeFieldInfo
argument_list|(
name|d
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|fieldCache
operator|.
name|resize
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//get out parameters
if|if
condition|(
operator|!
name|hasOutValues
argument_list|()
condition|)
return|return
literal|true
return|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Date
case|:
block|{
name|DATE_STRUCT
name|ds
init|=
operator|*
operator|(
operator|(
name|DATE_STRUCT
operator|*
operator|)
name|tmpStorage
operator|.
name|takeFirst
argument_list|()
operator|.
name|constData
argument_list|()
operator|)
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|QDate
argument_list|(
name|ds
operator|.
name|year
argument_list|,
name|ds
operator|.
name|month
argument_list|,
name|ds
operator|.
name|day
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Time
case|:
block|{
name|TIME_STRUCT
name|dt
init|=
operator|*
operator|(
operator|(
name|TIME_STRUCT
operator|*
operator|)
name|tmpStorage
operator|.
name|takeFirst
argument_list|()
operator|.
name|constData
argument_list|()
operator|)
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|QTime
argument_list|(
name|dt
operator|.
name|hour
argument_list|,
name|dt
operator|.
name|minute
argument_list|,
name|dt
operator|.
name|second
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|DateTime
case|:
block|{
name|TIMESTAMP_STRUCT
name|dt
init|=
operator|*
operator|(
operator|(
name|TIMESTAMP_STRUCT
operator|*
operator|)
name|tmpStorage
operator|.
name|takeFirst
argument_list|()
operator|.
name|constData
argument_list|()
operator|)
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
name|dt
operator|.
name|year
argument_list|,
name|dt
operator|.
name|month
argument_list|,
name|dt
operator|.
name|day
argument_list|)
argument_list|,
name|QTime
argument_list|(
name|dt
operator|.
name|hour
argument_list|,
name|dt
operator|.
name|minute
argument_list|,
name|dt
operator|.
name|second
argument_list|,
name|dt
operator|.
name|fraction
operator|/
literal|1000000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Bool
case|:
case|case
name|QVariant
operator|::
name|Int
case|:
case|case
name|QVariant
operator|::
name|UInt
case|:
case|case
name|QVariant
operator|::
name|Double
case|:
case|case
name|QVariant
operator|::
name|ByteArray
case|:
case|case
name|QVariant
operator|::
name|LongLong
case|:
case|case
name|QVariant
operator|::
name|ULongLong
case|:
comment|//nothing to do
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
if|if
condition|(
name|d
operator|->
name|unicode
condition|)
block|{
if|if
condition|(
name|bindValueType
argument_list|(
name|i
argument_list|)
operator|&
name|QSql
operator|::
name|Out
condition|)
block|{
name|QByteArray
name|first
init|=
name|tmpStorage
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|SQLTCHAR
argument_list|>
name|array
decl_stmt|;
name|array
operator|.
name|append
argument_list|(
operator|(
name|SQLTCHAR
operator|*
operator|)
name|first
operator|.
name|constData
argument_list|()
argument_list|,
name|first
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|fromSQLTCHAR
argument_list|(
name|array
argument_list|,
name|first
operator|.
name|size
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|SQLTCHAR
operator|*
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
comment|// fall through
default|default:
block|{
if|if
condition|(
name|bindValueType
argument_list|(
name|i
argument_list|)
operator|&
name|QSql
operator|::
name|Out
condition|)
name|values
index|[
name|i
index|]
operator|=
name|tmpStorage
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|indicators
index|[
name|i
index|]
operator|==
name|SQL_NULL_DATA
condition|)
name|values
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|values
index|[
name|i
index|]
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|record
name|QSqlRecord
name|QODBCResult
operator|::
name|record
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isActive
argument_list|()
operator|||
operator|!
name|isSelect
argument_list|()
condition|)
return|return
name|QSqlRecord
argument_list|()
return|;
return|return
name|d
operator|->
name|rInf
return|;
block|}
end_function
begin_function
DECL|function|handle
name|QVariant
name|QODBCResult
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|qRegisterMetaType
argument_list|<
name|SQLHANDLE
argument_list|>
argument_list|(
literal|"SQLHANDLE"
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|hStmt
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|nextResult
name|bool
name|QODBCResult
operator|::
name|nextResult
parameter_list|()
block|{
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|d
operator|->
name|rInf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|fieldCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|fieldCacheIdx
operator|=
literal|0
expr_stmt|;
name|setSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLMoreResults
argument_list|(
name|d
operator|->
name|hStmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|int
name|nativeCode
init|=
operator|-
literal|1
decl_stmt|;
name|QString
name|message
init|=
name|qODBCWarn
argument_list|(
name|d
argument_list|,
operator|&
name|nativeCode
argument_list|)
decl_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"QODBCResult::nextResult():"
operator|<<
name|message
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|r
operator|!=
name|SQL_NO_DATA
condition|)
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QODBCResult"
argument_list|,
literal|"Unable to fetch last"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|SQLSMALLINT
name|count
decl_stmt|;
name|SQLNumResultCols
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
operator|&
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
condition|)
block|{
name|setSelect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|d
operator|->
name|rInf
operator|.
name|append
argument_list|(
name|qMakeFieldInfo
argument_list|(
name|d
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|fieldCache
operator|.
name|resize
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|virtual_hook
name|void
name|QODBCResult
operator|::
name|virtual_hook
parameter_list|(
name|int
name|id
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
switch|switch
condition|(
name|id
condition|)
block|{
case|case
name|QSqlResult
operator|::
name|DetachFromResultSet
case|:
if|if
condition|(
name|d
operator|->
name|hStmt
condition|)
name|SQLCloseCursor
argument_list|(
name|d
operator|->
name|hStmt
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSqlResult
operator|::
name|NextResult
case|:
name|Q_ASSERT
argument_list|(
name|data
argument_list|)
expr_stmt|;
operator|*
cast|static_cast
argument_list|<
name|bool
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
operator|=
name|nextResult
argument_list|()
expr_stmt|;
break|break;
default|default:
name|QSqlResult
operator|::
name|virtual_hook
argument_list|(
name|id
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setForwardOnly
name|void
name|QODBCResult
operator|::
name|setForwardOnly
parameter_list|(
name|bool
name|forward
parameter_list|)
block|{
name|d
operator|->
name|userForwardOnly
operator|=
name|forward
expr_stmt|;
name|QSqlResult
operator|::
name|setForwardOnly
argument_list|(
name|forward
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|////////////////////////////////////////
end_comment
begin_constructor
DECL|function|QODBCDriver
name|QODBCDriver
operator|::
name|QODBCDriver
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSqlDriver
argument_list|(
name|parent
argument_list|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QODBCDriver
name|QODBCDriver
operator|::
name|QODBCDriver
parameter_list|(
name|SQLHANDLE
name|env
parameter_list|,
name|SQLHANDLE
name|con
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSqlDriver
argument_list|(
name|parent
argument_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|d
operator|->
name|hEnv
operator|=
name|env
expr_stmt|;
name|d
operator|->
name|hDbc
operator|=
name|con
expr_stmt|;
if|if
condition|(
name|env
operator|&&
name|con
condition|)
block|{
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|init
name|void
name|QODBCDriver
operator|::
name|init
parameter_list|()
block|{
name|d
operator|=
operator|new
name|QODBCDriverPrivate
argument_list|()
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QODBCDriver
name|QODBCDriver
operator|::
name|~
name|QODBCDriver
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|hasFeature
name|bool
name|QODBCDriver
operator|::
name|hasFeature
parameter_list|(
name|DriverFeature
name|f
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|f
condition|)
block|{
case|case
name|Transactions
case|:
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|hDbc
condition|)
return|return
literal|false
return|;
name|SQLUSMALLINT
name|txn
decl_stmt|;
name|SQLSMALLINT
name|t
decl_stmt|;
name|int
name|r
init|=
name|SQLGetInfo
argument_list|(
name|d
operator|->
name|hDbc
argument_list|,
operator|(
name|SQLUSMALLINT
operator|)
name|SQL_TXN_CAPABLE
argument_list|,
operator|&
name|txn
argument_list|,
sizeof|sizeof
argument_list|(
name|txn
argument_list|)
argument_list|,
operator|&
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|||
name|txn
operator|==
name|SQL_TC_NONE
condition|)
return|return
literal|false
return|;
else|else
return|return
literal|true
return|;
block|}
case|case
name|Unicode
case|:
return|return
name|d
operator|->
name|unicode
return|;
case|case
name|PreparedQueries
case|:
case|case
name|PositionalPlaceholders
case|:
case|case
name|FinishQuery
case|:
case|case
name|LowPrecisionNumbers
case|:
return|return
literal|true
return|;
case|case
name|QuerySize
case|:
case|case
name|NamedPlaceholders
case|:
case|case
name|LastInsertId
case|:
case|case
name|BatchOperations
case|:
case|case
name|SimpleLocking
case|:
case|case
name|EventNotifications
case|:
return|return
literal|false
return|;
case|case
name|MultipleResultSets
case|:
return|return
name|d
operator|->
name|hasMultiResultSets
return|;
case|case
name|BLOB
case|:
block|{
if|if
condition|(
name|d
operator|->
name|isMySqlServer
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|open
name|bool
name|QODBCDriver
operator|::
name|open
parameter_list|(
specifier|const
name|QString
modifier|&
name|db
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QString
modifier|&
name|connOpts
parameter_list|)
block|{
if|if
condition|(
name|isOpen
argument_list|()
condition|)
name|close
argument_list|()
expr_stmt|;
name|SQLRETURN
name|r
decl_stmt|;
name|r
operator|=
name|SQLAllocHandle
argument_list|(
name|SQL_HANDLE_ENV
argument_list|,
name|SQL_NULL_HANDLE
argument_list|,
operator|&
name|d
operator|->
name|hEnv
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver::open: Unable to allocate environment"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|r
operator|=
name|SQLSetEnvAttr
argument_list|(
name|d
operator|->
name|hEnv
argument_list|,
name|SQL_ATTR_ODBC_VERSION
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|qGetODBCVersion
argument_list|(
name|connOpts
argument_list|)
argument_list|,
name|SQL_IS_UINTEGER
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLAllocHandle
argument_list|(
name|SQL_HANDLE_DBC
argument_list|,
name|d
operator|->
name|hEnv
argument_list|,
operator|&
name|d
operator|->
name|hDbc
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver::open: Unable to allocate connection"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|setConnectionOptions
argument_list|(
name|connOpts
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Create the connection string
name|QString
name|connQStr
decl_stmt|;
comment|// support the "DRIVER={SQL SERVER};SERVER=blah" syntax
if|if
condition|(
name|db
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|".dsn"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|connQStr
operator|=
name|QLatin1String
argument_list|(
literal|"FILEDSN="
argument_list|)
operator|+
name|db
expr_stmt|;
elseif|else
if|if
condition|(
name|db
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"DRIVER="
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|||
name|db
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"SERVER="
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|connQStr
operator|=
name|db
expr_stmt|;
else|else
name|connQStr
operator|=
name|QLatin1String
argument_list|(
literal|"DSN="
argument_list|)
operator|+
name|db
expr_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|isEmpty
argument_list|()
condition|)
name|connQStr
operator|+=
name|QLatin1String
argument_list|(
literal|";UID="
argument_list|)
operator|+
name|user
expr_stmt|;
if|if
condition|(
operator|!
name|password
operator|.
name|isEmpty
argument_list|()
condition|)
name|connQStr
operator|+=
name|QLatin1String
argument_list|(
literal|";PWD="
argument_list|)
operator|+
name|password
expr_stmt|;
name|SQLSMALLINT
name|cb
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|SQLTCHAR
argument_list|>
name|connOut
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|memset
argument_list|(
name|connOut
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|connOut
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLDriverConnect
argument_list|(
name|d
operator|->
name|hDbc
argument_list|,
name|NULL
argument_list|,
ifdef|#
directive|ifdef
name|UNICODE
name|toSQLTCHAR
argument_list|(
name|connQStr
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
else|#
directive|else
operator|(
name|SQLCHAR
operator|*
operator|)
name|connQStr
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
endif|#
directive|endif
operator|(
name|SQLSMALLINT
operator|)
name|connQStr
operator|.
name|length
argument_list|()
argument_list|,
name|connOut
operator|.
name|data
argument_list|()
argument_list|,
literal|1024
argument_list|,
operator|&
name|cb
argument_list|,
comment|/*SQL_DRIVER_NOPROMPT*/
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to connect"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|checkDriver
argument_list|()
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to connect - Driver doesn't support all "
literal|"functionality required"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|checkUnicode
argument_list|()
expr_stmt|;
name|d
operator|->
name|checkSchemaUsage
argument_list|()
expr_stmt|;
name|d
operator|->
name|checkSqlServer
argument_list|()
expr_stmt|;
name|d
operator|->
name|checkHasSQLFetchScroll
argument_list|()
expr_stmt|;
name|d
operator|->
name|checkHasMultiResults
argument_list|()
expr_stmt|;
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isMSSqlServer
condition|)
block|{
name|QSqlQuery
name|i
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|i
operator|.
name|exec
argument_list|(
name|QLatin1String
argument_list|(
literal|"SET QUOTED_IDENTIFIER ON"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QODBCDriver
operator|::
name|close
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QODBCDriver
operator|::
name|cleanup
parameter_list|()
block|{
name|SQLRETURN
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|d
condition|)
return|return;
if|if
condition|(
name|d
operator|->
name|hDbc
condition|)
block|{
comment|// Open statements/descriptors handles are automatically cleaned up by SQLDisconnect
if|if
condition|(
name|isOpen
argument_list|()
condition|)
block|{
name|r
operator|=
name|SQLDisconnect
argument_list|(
name|d
operator|->
name|hDbc
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver::disconnect: Unable to disconnect datasource"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
else|else
name|d
operator|->
name|disconnectCount
operator|++
expr_stmt|;
block|}
name|r
operator|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_DBC
argument_list|,
name|d
operator|->
name|hDbc
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver::cleanup: Unable to free connection handle"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|d
operator|->
name|hDbc
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|hEnv
condition|)
block|{
name|r
operator|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_ENV
argument_list|,
name|d
operator|->
name|hEnv
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver::cleanup: Unable to free environment handle"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|d
operator|->
name|hEnv
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// checks whether the server can return char, varchar and longvarchar
end_comment
begin_comment
comment|// as two byte unicode characters
end_comment
begin_function
DECL|function|checkUnicode
name|void
name|QODBCDriverPrivate
operator|::
name|checkUnicode
parameter_list|()
block|{
name|SQLRETURN
name|r
decl_stmt|;
name|SQLUINTEGER
name|fFunc
decl_stmt|;
name|unicode
operator|=
literal|false
expr_stmt|;
name|r
operator|=
name|SQLGetInfo
argument_list|(
name|hDbc
argument_list|,
name|SQL_CONVERT_CHAR
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|fFunc
argument_list|,
sizeof|sizeof
argument_list|(
name|fFunc
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|&&
operator|(
name|fFunc
operator|&
name|SQL_CVT_WCHAR
operator|)
condition|)
block|{
name|unicode
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|r
operator|=
name|SQLGetInfo
argument_list|(
name|hDbc
argument_list|,
name|SQL_CONVERT_VARCHAR
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|fFunc
argument_list|,
sizeof|sizeof
argument_list|(
name|fFunc
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|&&
operator|(
name|fFunc
operator|&
name|SQL_CVT_WVARCHAR
operator|)
condition|)
block|{
name|unicode
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|r
operator|=
name|SQLGetInfo
argument_list|(
name|hDbc
argument_list|,
name|SQL_CONVERT_LONGVARCHAR
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|fFunc
argument_list|,
sizeof|sizeof
argument_list|(
name|fFunc
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|&&
operator|(
name|fFunc
operator|&
name|SQL_CVT_WLONGVARCHAR
operator|)
condition|)
block|{
name|unicode
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|SQLHANDLE
name|hStmt
decl_stmt|;
name|r
operator|=
name|SQLAllocHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|hDbc
argument_list|,
operator|&
name|hStmt
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLExecDirect
argument_list|(
name|hStmt
argument_list|,
name|toSQLTCHAR
argument_list|(
name|QLatin1String
argument_list|(
literal|"select 'test'"
argument_list|)
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
name|SQL_NTS
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
condition|)
block|{
name|r
operator|=
name|SQLFetch
argument_list|(
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
condition|)
block|{
name|QVarLengthArray
argument_list|<
name|SQLWCHAR
argument_list|>
name|buffer
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|r
operator|=
name|SQLGetData
argument_list|(
name|hStmt
argument_list|,
literal|1
argument_list|,
name|SQL_C_WCHAR
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SQLWCHAR
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|&&
name|fromSQLTCHAR
argument_list|(
name|buffer
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"test"
argument_list|)
condition|)
block|{
name|unicode
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|r
operator|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|hStmt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkDriver
name|bool
name|QODBCDriverPrivate
operator|::
name|checkDriver
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|ODBC_CHECK_DRIVER
specifier|static
specifier|const
name|SQLUSMALLINT
name|reqFunc
index|[]
init|=
block|{
name|SQL_API_SQLDESCRIBECOL
block|,
name|SQL_API_SQLGETDATA
block|,
name|SQL_API_SQLCOLUMNS
block|,
name|SQL_API_SQLGETSTMTATTR
block|,
name|SQL_API_SQLGETDIAGREC
block|,
name|SQL_API_SQLEXECDIRECT
block|,
name|SQL_API_SQLGETINFO
block|,
name|SQL_API_SQLTABLES
block|,
literal|0
block|}
decl_stmt|;
comment|// these functions are optional
specifier|static
specifier|const
name|SQLUSMALLINT
name|optFunc
index|[]
init|=
block|{
name|SQL_API_SQLNUMRESULTCOLS
block|,
name|SQL_API_SQLROWCOUNT
block|,
literal|0
block|}
decl_stmt|;
name|SQLRETURN
name|r
decl_stmt|;
name|SQLUSMALLINT
name|sup
decl_stmt|;
name|int
name|i
decl_stmt|;
comment|// check the required functions
for|for
control|(
name|i
operator|=
literal|0
init|;
name|reqFunc
index|[
name|i
index|]
operator|!=
literal|0
condition|;
operator|++
name|i
control|)
block|{
name|r
operator|=
name|SQLGetFunctions
argument_list|(
name|hDbc
argument_list|,
name|reqFunc
index|[
name|i
index|]
argument_list|,
operator|&
name|sup
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver::checkDriver: Cannot get list of supported functions"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|sup
operator|==
name|SQL_FALSE
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCDriver::open: Warning - Driver doesn't support all needed functionality ("
operator|<<
name|reqFunc
index|[
name|i
index|]
operator|<<
literal|").\nPlease look at the Qt SQL Module Driver documentation for more information."
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// these functions are optional and just generate a warning
for|for
control|(
name|i
operator|=
literal|0
init|;
name|optFunc
index|[
name|i
index|]
operator|!=
literal|0
condition|;
operator|++
name|i
control|)
block|{
name|r
operator|=
name|SQLGetFunctions
argument_list|(
name|hDbc
argument_list|,
name|optFunc
index|[
name|i
index|]
argument_list|,
operator|&
name|sup
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver::checkDriver: Cannot get list of supported functions"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|sup
operator|==
name|SQL_FALSE
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCDriver::checkDriver: Warning - Driver doesn't support some non-critical functions ("
operator|<<
name|optFunc
index|[
name|i
index|]
operator|<<
literal|')'
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
endif|#
directive|endif
comment|//ODBC_CHECK_DRIVER
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|checkSchemaUsage
name|void
name|QODBCDriverPrivate
operator|::
name|checkSchemaUsage
parameter_list|()
block|{
name|SQLRETURN
name|r
decl_stmt|;
name|SQLUINTEGER
name|val
decl_stmt|;
name|r
operator|=
name|SQLGetInfo
argument_list|(
name|hDbc
argument_list|,
name|SQL_SCHEMA_USAGE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|val
argument_list|,
sizeof|sizeof
argument_list|(
name|val
argument_list|)
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
name|useSchema
operator|=
operator|(
name|val
operator|!=
literal|0
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkSqlServer
name|void
name|QODBCDriverPrivate
operator|::
name|checkSqlServer
parameter_list|()
block|{
name|SQLRETURN
name|r
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|SQLTCHAR
argument_list|>
name|serverString
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|SQLSMALLINT
name|t
decl_stmt|;
name|memset
argument_list|(
name|serverString
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|serverString
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLGetInfo
argument_list|(
name|hDbc
argument_list|,
name|SQL_DBMS_NAME
argument_list|,
name|serverString
operator|.
name|data
argument_list|()
argument_list|,
name|serverString
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|,
operator|&
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|QString
name|serverType
decl_stmt|;
ifdef|#
directive|ifdef
name|UNICODE
name|serverType
operator|=
name|fromSQLTCHAR
argument_list|(
name|serverString
argument_list|,
name|t
operator|/
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|serverType
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|serverString
operator|.
name|constData
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|isMySqlServer
operator|=
name|serverType
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"mysql"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|isMSSqlServer
operator|=
name|serverType
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"Microsoft SQL Server"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|SQLGetInfo
argument_list|(
name|hDbc
argument_list|,
name|SQL_DRIVER_NAME
argument_list|,
name|serverString
operator|.
name|data
argument_list|()
argument_list|,
name|serverString
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|,
operator|&
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|QString
name|serverType
decl_stmt|;
ifdef|#
directive|ifdef
name|UNICODE
name|serverType
operator|=
name|fromSQLTCHAR
argument_list|(
name|serverString
argument_list|,
name|t
operator|/
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|serverType
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|serverString
operator|.
name|constData
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|isFreeTDSDriver
operator|=
name|serverType
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"tdsodbc"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|unicode
operator|=
name|unicode
operator|&&
operator|!
name|isFreeTDSDriver
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|checkHasSQLFetchScroll
name|void
name|QODBCDriverPrivate
operator|::
name|checkHasSQLFetchScroll
parameter_list|()
block|{
name|SQLUSMALLINT
name|sup
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLGetFunctions
argument_list|(
name|hDbc
argument_list|,
name|SQL_API_SQLFETCHSCROLL
argument_list|,
operator|&
name|sup
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|||
name|sup
operator|!=
name|SQL_TRUE
condition|)
block|{
name|hasSQLFetchScroll
operator|=
literal|false
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"QODBCDriver::checkHasSQLFetchScroll: Warning - Driver doesn't support scrollable result sets, use forward only mode for queries"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|checkHasMultiResults
name|void
name|QODBCDriverPrivate
operator|::
name|checkHasMultiResults
parameter_list|()
block|{
name|QVarLengthArray
argument_list|<
name|SQLTCHAR
argument_list|>
name|driverResponse
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|SQLSMALLINT
name|length
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLGetInfo
argument_list|(
name|hDbc
argument_list|,
name|SQL_MULT_RESULT_SETS
argument_list|,
name|driverResponse
operator|.
name|data
argument_list|()
argument_list|,
name|driverResponse
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|,
operator|&
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
ifdef|#
directive|ifdef
name|UNICODE
name|hasMultiResultSets
operator|=
name|fromSQLTCHAR
argument_list|(
name|driverResponse
argument_list|,
name|length
operator|/
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|)
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'Y'
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|hasMultiResultSets
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|driverResponse
operator|.
name|constData
argument_list|()
argument_list|,
name|length
argument_list|)
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'Y'
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|createResult
name|QSqlResult
modifier|*
name|QODBCDriver
operator|::
name|createResult
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QODBCResult
argument_list|(
name|this
argument_list|,
name|d
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|beginTransaction
name|bool
name|QODBCDriver
operator|::
name|beginTransaction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCDriver::beginTransaction: Database not open"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|SQLUINTEGER
name|ac
argument_list|(
name|SQL_AUTOCOMMIT_OFF
argument_list|)
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLSetConnectAttr
argument_list|(
name|d
operator|->
name|hDbc
argument_list|,
name|SQL_ATTR_AUTOCOMMIT
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|ac
argument_list|,
sizeof|sizeof
argument_list|(
name|ac
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to disable autocommit"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|commitTransaction
name|bool
name|QODBCDriver
operator|::
name|commitTransaction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCDriver::commitTransaction: Database not open"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|SQLRETURN
name|r
init|=
name|SQLEndTran
argument_list|(
name|SQL_HANDLE_DBC
argument_list|,
name|d
operator|->
name|hDbc
argument_list|,
name|SQL_COMMIT
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to commit transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|endTrans
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rollbackTransaction
name|bool
name|QODBCDriver
operator|::
name|rollbackTransaction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCDriver::rollbackTransaction: Database not open"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|SQLRETURN
name|r
init|=
name|SQLEndTran
argument_list|(
name|SQL_HANDLE_DBC
argument_list|,
name|d
operator|->
name|hDbc
argument_list|,
name|SQL_ROLLBACK
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to rollback transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|endTrans
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|endTrans
name|bool
name|QODBCDriver
operator|::
name|endTrans
parameter_list|()
block|{
name|SQLUINTEGER
name|ac
argument_list|(
name|SQL_AUTOCOMMIT_ON
argument_list|)
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLSetConnectAttr
argument_list|(
name|d
operator|->
name|hDbc
argument_list|,
name|SQL_ATTR_AUTOCOMMIT
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|ac
argument_list|,
sizeof|sizeof
argument_list|(
name|ac
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to enable autocommit"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|tables
name|QStringList
name|QODBCDriver
operator|::
name|tables
parameter_list|(
name|QSql
operator|::
name|TableType
name|type
parameter_list|)
specifier|const
block|{
name|QStringList
name|tl
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|tl
return|;
name|SQLHANDLE
name|hStmt
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLAllocHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|d
operator|->
name|hDbc
argument_list|,
operator|&
name|hStmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver::tables: Unable to allocate handle"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|tl
return|;
block|}
name|r
operator|=
name|SQLSetStmtAttr
argument_list|(
name|hStmt
argument_list|,
name|SQL_ATTR_CURSOR_TYPE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|SQL_CURSOR_FORWARD_ONLY
argument_list|,
name|SQL_IS_UINTEGER
argument_list|)
expr_stmt|;
name|QStringList
name|tableType
decl_stmt|;
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|Tables
condition|)
name|tableType
operator|+=
name|QLatin1String
argument_list|(
literal|"TABLE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|Views
condition|)
name|tableType
operator|+=
name|QLatin1String
argument_list|(
literal|"VIEW"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|SystemTables
condition|)
name|tableType
operator|+=
name|QLatin1String
argument_list|(
literal|"SYSTEM TABLE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableType
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|tl
return|;
name|QString
name|joinedTableTypeString
init|=
name|tableType
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|=
name|SQLTables
argument_list|(
name|hStmt
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
ifdef|#
directive|ifdef
name|UNICODE
name|toSQLTCHAR
argument_list|(
name|joinedTableTypeString
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
else|#
directive|else
operator|(
name|SQLCHAR
operator|*
operator|)
name|joinedTableTypeString
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
endif|#
directive|endif
name|joinedTableTypeString
operator|.
name|length
argument_list|()
comment|/* characters, not bytes */
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver::tables Unable to execute table list"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasSQLFetchScroll
condition|)
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|hStmt
argument_list|,
name|SQL_FETCH_NEXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
name|SQLFetch
argument_list|(
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
operator|&&
name|r
operator|!=
name|SQL_NO_DATA
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QODBCDriver::tables failed to retrieve table/view list: ("
operator|<<
name|r
operator|<<
literal|","
operator|<<
name|qWarnODBCHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|hStmt
argument_list|)
operator|<<
literal|")"
expr_stmt|;
return|return
name|QStringList
argument_list|()
return|;
block|}
while|while
condition|(
name|r
operator|==
name|SQL_SUCCESS
condition|)
block|{
name|QString
name|fieldVal
init|=
name|qGetStringData
argument_list|(
name|hStmt
argument_list|,
literal|2
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|tl
operator|.
name|append
argument_list|(
name|fieldVal
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasSQLFetchScroll
condition|)
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|hStmt
argument_list|,
name|SQL_FETCH_NEXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
name|SQLFetch
argument_list|(
name|hStmt
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver: Unable to free statement handle"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|tl
return|;
block|}
end_function
begin_function
DECL|function|primaryIndex
name|QSqlIndex
name|QODBCDriver
operator|::
name|primaryIndex
parameter_list|(
specifier|const
name|QString
modifier|&
name|tablename
parameter_list|)
specifier|const
block|{
name|QSqlIndex
name|index
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|index
return|;
name|bool
name|usingSpecialColumns
init|=
literal|false
decl_stmt|;
name|QSqlRecord
name|rec
init|=
name|record
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
name|SQLHANDLE
name|hStmt
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLAllocHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|d
operator|->
name|hDbc
argument_list|,
operator|&
name|hStmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver::primaryIndex: Unable to list primary key"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
name|QString
name|catalog
decl_stmt|,
name|schema
decl_stmt|,
name|table
decl_stmt|;
name|d
operator|->
name|splitTableQualifier
argument_list|(
name|tablename
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|catalog
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|catalog
operator|=
name|stripDelimiters
argument_list|(
name|catalog
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|catalog
operator|=
name|d
operator|->
name|adjustCase
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|schema
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|schema
operator|=
name|stripDelimiters
argument_list|(
name|schema
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|schema
operator|=
name|d
operator|->
name|adjustCase
argument_list|(
name|schema
argument_list|)
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|table
operator|=
name|stripDelimiters
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|table
operator|=
name|d
operator|->
name|adjustCase
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLSetStmtAttr
argument_list|(
name|hStmt
argument_list|,
name|SQL_ATTR_CURSOR_TYPE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|SQL_CURSOR_FORWARD_ONLY
argument_list|,
name|SQL_IS_UINTEGER
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLPrimaryKeys
argument_list|(
name|hStmt
argument_list|,
ifdef|#
directive|ifdef
name|UNICODE
name|catalog
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|NULL
else|:
name|toSQLTCHAR
argument_list|(
name|catalog
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
else|#
directive|else
name|catalog
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|NULL
else|:
operator|(
name|SQLCHAR
operator|*
operator|)
name|catalog
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
endif|#
directive|endif
name|catalog
operator|.
name|length
argument_list|()
argument_list|,
ifdef|#
directive|ifdef
name|UNICODE
name|schema
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|NULL
else|:
name|toSQLTCHAR
argument_list|(
name|schema
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
else|#
directive|else
name|schema
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|NULL
else|:
operator|(
name|SQLCHAR
operator|*
operator|)
name|schema
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
endif|#
directive|endif
name|schema
operator|.
name|length
argument_list|()
argument_list|,
ifdef|#
directive|ifdef
name|UNICODE
name|toSQLTCHAR
argument_list|(
name|table
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
else|#
directive|else
operator|(
name|SQLCHAR
operator|*
operator|)
name|table
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
endif|#
directive|endif
name|table
operator|.
name|length
argument_list|()
comment|/* in characters, not in bytes */
argument_list|)
expr_stmt|;
comment|// if the SQLPrimaryKeys() call does not succeed (e.g the driver
comment|// does not support it) - try an alternative method to get hold of
comment|// the primary index (e.g MS Access and FoxPro)
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|r
operator|=
name|SQLSpecialColumns
argument_list|(
name|hStmt
argument_list|,
name|SQL_BEST_ROWID
argument_list|,
ifdef|#
directive|ifdef
name|UNICODE
name|catalog
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|NULL
else|:
name|toSQLTCHAR
argument_list|(
name|catalog
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
else|#
directive|else
name|catalog
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|NULL
else|:
operator|(
name|SQLCHAR
operator|*
operator|)
name|catalog
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
endif|#
directive|endif
name|catalog
operator|.
name|length
argument_list|()
argument_list|,
ifdef|#
directive|ifdef
name|UNICODE
name|schema
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|NULL
else|:
name|toSQLTCHAR
argument_list|(
name|schema
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
else|#
directive|else
name|schema
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|NULL
else|:
operator|(
name|SQLCHAR
operator|*
operator|)
name|schema
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
endif|#
directive|endif
name|schema
operator|.
name|length
argument_list|()
argument_list|,
ifdef|#
directive|ifdef
name|UNICODE
name|toSQLTCHAR
argument_list|(
name|table
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
else|#
directive|else
operator|(
name|SQLCHAR
operator|*
operator|)
name|table
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
endif|#
directive|endif
name|table
operator|.
name|length
argument_list|()
argument_list|,
name|SQL_SCOPE_CURROW
argument_list|,
name|SQL_NULLABLE
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver::primaryIndex: Unable to execute primary key list"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|usingSpecialColumns
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|->
name|hasSQLFetchScroll
condition|)
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|hStmt
argument_list|,
name|SQL_FETCH_NEXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
name|SQLFetch
argument_list|(
name|hStmt
argument_list|)
expr_stmt|;
name|int
name|fakeId
init|=
literal|0
decl_stmt|;
name|QString
name|cName
decl_stmt|,
name|idxName
decl_stmt|;
comment|// Store all fields in a StringList because some drivers can't detail fields in this FETCH loop
while|while
condition|(
name|r
operator|==
name|SQL_SUCCESS
condition|)
block|{
if|if
condition|(
name|usingSpecialColumns
condition|)
block|{
name|cName
operator|=
name|qGetStringData
argument_list|(
name|hStmt
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|d
operator|->
name|unicode
argument_list|)
expr_stmt|;
comment|// column name
name|idxName
operator|=
name|QString
operator|::
name|number
argument_list|(
name|fakeId
operator|++
argument_list|)
expr_stmt|;
comment|// invent a fake index name
block|}
else|else
block|{
name|cName
operator|=
name|qGetStringData
argument_list|(
name|hStmt
argument_list|,
literal|3
argument_list|,
operator|-
literal|1
argument_list|,
name|d
operator|->
name|unicode
argument_list|)
expr_stmt|;
comment|// column name
name|idxName
operator|=
name|qGetStringData
argument_list|(
name|hStmt
argument_list|,
literal|5
argument_list|,
operator|-
literal|1
argument_list|,
name|d
operator|->
name|unicode
argument_list|)
expr_stmt|;
comment|// pk index name
block|}
name|index
operator|.
name|append
argument_list|(
name|rec
operator|.
name|field
argument_list|(
name|cName
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|.
name|setName
argument_list|(
name|idxName
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasSQLFetchScroll
condition|)
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|hStmt
argument_list|,
name|SQL_FETCH_NEXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
name|SQLFetch
argument_list|(
name|hStmt
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver: Unable to free statement handle"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
end_function
begin_function
DECL|function|record
name|QSqlRecord
name|QODBCDriver
operator|::
name|record
parameter_list|(
specifier|const
name|QString
modifier|&
name|tablename
parameter_list|)
specifier|const
block|{
name|QSqlRecord
name|fil
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|fil
return|;
name|SQLHANDLE
name|hStmt
decl_stmt|;
name|QString
name|catalog
decl_stmt|,
name|schema
decl_stmt|,
name|table
decl_stmt|;
name|d
operator|->
name|splitTableQualifier
argument_list|(
name|tablename
argument_list|,
name|catalog
argument_list|,
name|schema
argument_list|,
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|catalog
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|catalog
operator|=
name|stripDelimiters
argument_list|(
name|catalog
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|catalog
operator|=
name|d
operator|->
name|adjustCase
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|schema
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|schema
operator|=
name|stripDelimiters
argument_list|(
name|schema
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|schema
operator|=
name|d
operator|->
name|adjustCase
argument_list|(
name|schema
argument_list|)
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|table
operator|=
name|stripDelimiters
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|table
operator|=
name|d
operator|->
name|adjustCase
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLAllocHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|d
operator|->
name|hDbc
argument_list|,
operator|&
name|hStmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver::record: Unable to allocate handle"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|fil
return|;
block|}
name|r
operator|=
name|SQLSetStmtAttr
argument_list|(
name|hStmt
argument_list|,
name|SQL_ATTR_CURSOR_TYPE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|SQL_CURSOR_FORWARD_ONLY
argument_list|,
name|SQL_IS_UINTEGER
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLColumns
argument_list|(
name|hStmt
argument_list|,
ifdef|#
directive|ifdef
name|UNICODE
name|catalog
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|NULL
else|:
name|toSQLTCHAR
argument_list|(
name|catalog
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
else|#
directive|else
name|catalog
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|NULL
else|:
operator|(
name|SQLCHAR
operator|*
operator|)
name|catalog
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
endif|#
directive|endif
name|catalog
operator|.
name|length
argument_list|()
argument_list|,
ifdef|#
directive|ifdef
name|UNICODE
name|schema
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|NULL
else|:
name|toSQLTCHAR
argument_list|(
name|schema
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
else|#
directive|else
name|schema
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|NULL
else|:
operator|(
name|SQLCHAR
operator|*
operator|)
name|schema
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
endif|#
directive|endif
name|schema
operator|.
name|length
argument_list|()
argument_list|,
ifdef|#
directive|ifdef
name|UNICODE
name|toSQLTCHAR
argument_list|(
name|table
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
else|#
directive|else
operator|(
name|SQLCHAR
operator|*
operator|)
name|table
operator|.
name|toUtf8
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
endif|#
directive|endif
name|table
operator|.
name|length
argument_list|()
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver::record: Unable to execute column list"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasSQLFetchScroll
condition|)
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|hStmt
argument_list|,
name|SQL_FETCH_NEXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
name|SQLFetch
argument_list|(
name|hStmt
argument_list|)
expr_stmt|;
comment|// Store all fields in a StringList because some drivers can't detail fields in this FETCH loop
while|while
condition|(
name|r
operator|==
name|SQL_SUCCESS
condition|)
block|{
name|fil
operator|.
name|append
argument_list|(
name|qMakeFieldInfo
argument_list|(
name|hStmt
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|hasSQLFetchScroll
condition|)
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|hStmt
argument_list|,
name|SQL_FETCH_NEXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
name|SQLFetch
argument_list|(
name|hStmt
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QODBCDriver: Unable to free statement handle "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|fil
return|;
block|}
end_function
begin_function
DECL|function|formatValue
name|QString
name|QODBCDriver
operator|::
name|formatValue
parameter_list|(
specifier|const
name|QSqlField
modifier|&
name|field
parameter_list|,
name|bool
name|trimStrings
parameter_list|)
specifier|const
block|{
name|QString
name|r
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|DateTime
condition|)
block|{
comment|// Use an escape sequence for the datetime fields
if|if
condition|(
name|field
operator|.
name|value
argument_list|()
operator|.
name|toDateTime
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QDate
name|dt
init|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toDateTime
argument_list|()
operator|.
name|date
argument_list|()
decl_stmt|;
name|QTime
name|tm
init|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toDateTime
argument_list|()
operator|.
name|time
argument_list|()
decl_stmt|;
comment|// Dateformat has to be "yyyy-MM-dd hh:mm:ss", with leading zeroes if month or day< 10
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"{ ts '"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|dt
operator|.
name|year
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|dt
operator|.
name|month
argument_list|()
argument_list|)
operator|.
name|rightJustified
argument_list|(
literal|2
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|dt
operator|.
name|day
argument_list|()
argument_list|)
operator|.
name|rightJustified
argument_list|(
literal|2
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|tm
operator|.
name|toString
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"' }"
argument_list|)
expr_stmt|;
block|}
else|else
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|ByteArray
condition|)
block|{
name|QByteArray
name|ba
init|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|QString
name|res
decl_stmt|;
specifier|static
specifier|const
name|char
name|hexchars
index|[]
init|=
literal|"0123456789abcdef"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ba
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|uchar
name|s
init|=
operator|(
name|uchar
operator|)
name|ba
index|[
name|i
index|]
decl_stmt|;
name|res
operator|+=
name|QLatin1Char
argument_list|(
name|hexchars
index|[
name|s
operator|>>
literal|4
index|]
argument_list|)
expr_stmt|;
name|res
operator|+=
name|QLatin1Char
argument_list|(
name|hexchars
index|[
name|s
operator|&
literal|0x0f
index|]
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"0x"
argument_list|)
operator|+
name|res
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|QSqlDriver
operator|::
name|formatValue
argument_list|(
name|field
argument_list|,
name|trimStrings
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|handle
name|QVariant
name|QODBCDriver
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|qRegisterMetaType
argument_list|<
name|SQLHANDLE
argument_list|>
argument_list|(
literal|"SQLHANDLE"
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|hDbc
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|escapeIdentifier
name|QString
name|QODBCDriver
operator|::
name|escapeIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|identifier
parameter_list|,
name|IdentifierType
parameter_list|)
specifier|const
block|{
name|QChar
name|quote
init|=
name|d
operator|->
name|quoteChar
argument_list|()
decl_stmt|;
name|QString
name|res
init|=
name|identifier
decl_stmt|;
if|if
condition|(
operator|!
name|identifier
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|identifier
operator|.
name|startsWith
argument_list|(
name|quote
argument_list|)
operator|&&
operator|!
name|identifier
operator|.
name|endsWith
argument_list|(
name|quote
argument_list|)
condition|)
block|{
name|res
operator|.
name|replace
argument_list|(
name|quote
argument_list|,
name|QString
argument_list|(
name|quote
argument_list|)
operator|+
name|QString
argument_list|(
name|quote
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|prepend
argument_list|(
name|quote
argument_list|)
operator|.
name|append
argument_list|(
name|quote
argument_list|)
expr_stmt|;
name|res
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|QString
argument_list|(
name|quote
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|QString
argument_list|(
name|quote
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|isIdentifierEscaped
name|bool
name|QODBCDriver
operator|::
name|isIdentifierEscaped
parameter_list|(
specifier|const
name|QString
modifier|&
name|identifier
parameter_list|,
name|IdentifierType
parameter_list|)
specifier|const
block|{
name|QChar
name|quote
init|=
name|d
operator|->
name|quoteChar
argument_list|()
decl_stmt|;
return|return
name|identifier
operator|.
name|size
argument_list|()
operator|>
literal|2
operator|&&
name|identifier
operator|.
name|startsWith
argument_list|(
name|quote
argument_list|)
comment|//left delimited
operator|&&
name|identifier
operator|.
name|endsWith
argument_list|(
name|quote
argument_list|)
return|;
comment|//right delimited
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
