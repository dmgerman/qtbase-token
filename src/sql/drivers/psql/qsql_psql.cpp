begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtSql module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsql_psql_p.h"
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qsqlerror.h>
end_include
begin_include
include|#
directive|include
file|<qsqlfield.h>
end_include
begin_include
include|#
directive|include
file|<qsqlindex.h>
end_include
begin_include
include|#
directive|include
file|<qsqlrecord.h>
end_include
begin_include
include|#
directive|include
file|<qsqlquery.h>
end_include
begin_include
include|#
directive|include
file|<qsocketnotifier.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_include
include|#
directive|include
file|<QtSql/private/qsqlresult_p.h>
end_include
begin_include
include|#
directive|include
file|<libpq-fe.h>
end_include
begin_include
include|#
directive|include
file|<pg_config.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_comment
comment|// below code taken from an example at http://www.gnu.org/software/hello/manual/autoconf/Function-Portability.html
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|isnan
end_ifndef
begin_define
DECL|macro|isnan
define|#
directive|define
name|isnan
parameter_list|(
name|x
parameter_list|)
define|\
value|(sizeof (x) == sizeof (long double) ? isnan_ld (x) \         : sizeof (x) == sizeof (double) ? isnan_d (x) \         : isnan_f (x))
end_define
begin_function
DECL|function|isnan_f
specifier|static
specifier|inline
name|int
name|isnan_f
parameter_list|(
name|float
name|x
parameter_list|)
block|{
return|return
name|x
operator|!=
name|x
return|;
block|}
end_function
begin_function
DECL|function|isnan_d
specifier|static
specifier|inline
name|int
name|isnan_d
parameter_list|(
name|double
name|x
parameter_list|)
block|{
return|return
name|x
operator|!=
name|x
return|;
block|}
end_function
begin_function
DECL|function|isnan_ld
specifier|static
specifier|inline
name|int
name|isnan_ld
parameter_list|(
name|long
name|double
name|x
parameter_list|)
block|{
return|return
name|x
operator|!=
name|x
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|isinf
end_ifndef
begin_define
DECL|macro|isinf
define|#
directive|define
name|isinf
parameter_list|(
name|x
parameter_list|)
define|\
value|(sizeof (x) == sizeof (long double) ? isinf_ld (x) \         : sizeof (x) == sizeof (double) ? isinf_d (x) \         : isinf_f (x))
end_define
begin_function
DECL|function|isinf_f
specifier|static
specifier|inline
name|int
name|isinf_f
parameter_list|(
name|float
name|x
parameter_list|)
block|{
return|return
name|isnan
argument_list|(
name|x
operator|-
name|x
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isinf_d
specifier|static
specifier|inline
name|int
name|isinf_d
parameter_list|(
name|double
name|x
parameter_list|)
block|{
return|return
name|isnan
argument_list|(
name|x
operator|-
name|x
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isinf_ld
specifier|static
specifier|inline
name|int
name|isinf_ld
parameter_list|(
name|long
name|double
name|x
parameter_list|)
block|{
return|return
name|isnan
argument_list|(
name|x
operator|-
name|x
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// workaround for postgres defining their OIDs in a private header file
end_comment
begin_define
DECL|macro|QBOOLOID
define|#
directive|define
name|QBOOLOID
value|16
end_define
begin_define
DECL|macro|QINT8OID
define|#
directive|define
name|QINT8OID
value|20
end_define
begin_define
DECL|macro|QINT2OID
define|#
directive|define
name|QINT2OID
value|21
end_define
begin_define
DECL|macro|QINT4OID
define|#
directive|define
name|QINT4OID
value|23
end_define
begin_define
DECL|macro|QNUMERICOID
define|#
directive|define
name|QNUMERICOID
value|1700
end_define
begin_define
DECL|macro|QFLOAT4OID
define|#
directive|define
name|QFLOAT4OID
value|700
end_define
begin_define
DECL|macro|QFLOAT8OID
define|#
directive|define
name|QFLOAT8OID
value|701
end_define
begin_define
DECL|macro|QABSTIMEOID
define|#
directive|define
name|QABSTIMEOID
value|702
end_define
begin_define
DECL|macro|QRELTIMEOID
define|#
directive|define
name|QRELTIMEOID
value|703
end_define
begin_define
DECL|macro|QDATEOID
define|#
directive|define
name|QDATEOID
value|1082
end_define
begin_define
DECL|macro|QTIMEOID
define|#
directive|define
name|QTIMEOID
value|1083
end_define
begin_define
DECL|macro|QTIMETZOID
define|#
directive|define
name|QTIMETZOID
value|1266
end_define
begin_define
DECL|macro|QTIMESTAMPOID
define|#
directive|define
name|QTIMESTAMPOID
value|1114
end_define
begin_define
DECL|macro|QTIMESTAMPTZOID
define|#
directive|define
name|QTIMESTAMPTZOID
value|1184
end_define
begin_define
DECL|macro|QOIDOID
define|#
directive|define
name|QOIDOID
value|2278
end_define
begin_define
DECL|macro|QBYTEAOID
define|#
directive|define
name|QBYTEAOID
value|17
end_define
begin_define
DECL|macro|QREGPROCOID
define|#
directive|define
name|QREGPROCOID
value|24
end_define
begin_define
DECL|macro|QXIDOID
define|#
directive|define
name|QXIDOID
value|28
end_define
begin_define
DECL|macro|QCIDOID
define|#
directive|define
name|QCIDOID
value|29
end_define
begin_comment
comment|/* This is a compile time switch - if PQfreemem is declared, the compiler will use that one,    otherwise it'll run in this template */
end_comment
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|PQfreemem
specifier|inline
name|void
name|PQfreemem
parameter_list|(
name|T
modifier|*
name|t
parameter_list|,
name|int
init|=
literal|0
parameter_list|)
block|{
name|free
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_OPAQUE_POINTER
argument_list|(
argument|PGconn*
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|PGconn*
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPAQUE_POINTER
argument_list|(
argument|PGresult*
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|PGresult*
argument_list|)
end_macro
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|qPQfreemem
specifier|inline
name|void
name|qPQfreemem
parameter_list|(
name|void
modifier|*
name|buffer
parameter_list|)
block|{
name|PQfreemem
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QPSQLDriverPrivate
class|class
name|QPSQLDriverPrivate
block|{
public|public:
DECL|function|QPSQLDriverPrivate
name|QPSQLDriverPrivate
parameter_list|(
name|QPSQLDriver
modifier|*
name|qq
parameter_list|)
member_init_list|:
name|q
argument_list|(
name|qq
argument_list|)
member_init_list|,
name|connection
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|isUtf8
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|pro
argument_list|(
name|QPSQLDriver
operator|::
name|Version6
argument_list|)
member_init_list|,
name|sn
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|pendingNotifyCheck
argument_list|(
literal|false
argument_list|)
block|{}
DECL|member|q
name|QPSQLDriver
modifier|*
name|q
decl_stmt|;
DECL|member|connection
name|PGconn
modifier|*
name|connection
decl_stmt|;
DECL|member|isUtf8
name|bool
name|isUtf8
decl_stmt|;
DECL|member|pro
name|QPSQLDriver
operator|::
name|Protocol
name|pro
decl_stmt|;
DECL|member|sn
name|QSocketNotifier
modifier|*
name|sn
decl_stmt|;
DECL|member|seid
name|QStringList
name|seid
decl_stmt|;
DECL|member|pendingNotifyCheck
specifier|mutable
name|bool
name|pendingNotifyCheck
decl_stmt|;
name|void
name|appendTables
parameter_list|(
name|QStringList
modifier|&
name|tl
parameter_list|,
name|QSqlQuery
modifier|&
name|t
parameter_list|,
name|QChar
name|type
parameter_list|)
function_decl|;
name|PGresult
modifier|*
name|exec
parameter_list|(
specifier|const
name|char
modifier|*
name|stmt
parameter_list|)
specifier|const
function_decl|;
name|PGresult
modifier|*
name|exec
parameter_list|(
specifier|const
name|QString
modifier|&
name|stmt
parameter_list|)
specifier|const
function_decl|;
name|QPSQLDriver
operator|::
name|Protocol
name|getPSQLVersion
parameter_list|()
function_decl|;
name|bool
name|setEncodingUtf8
parameter_list|()
function_decl|;
name|void
name|setDatestyle
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|appendTables
name|void
name|QPSQLDriverPrivate
operator|::
name|appendTables
parameter_list|(
name|QStringList
modifier|&
name|tl
parameter_list|,
name|QSqlQuery
modifier|&
name|t
parameter_list|,
name|QChar
name|type
parameter_list|)
block|{
name|QString
name|query
decl_stmt|;
if|if
condition|(
name|pro
operator|>=
name|QPSQLDriver
operator|::
name|Version73
condition|)
block|{
name|query
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"select pg_class.relname, pg_namespace.nspname from pg_class "
literal|"left join pg_namespace on (pg_class.relnamespace = pg_namespace.oid) "
literal|"where (pg_class.relkind = '%1') and (pg_class.relname !~ '^Inv') "
literal|"and (pg_class.relname !~ '^pg_') "
literal|"and (pg_namespace.nspname != 'information_schema') "
argument_list|)
operator|.
name|arg
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"select relname, null from pg_class where (relkind = '%1') "
literal|"and (relname !~ '^Inv') "
literal|"and (relname !~ '^pg_') "
argument_list|)
operator|.
name|arg
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|exec
argument_list|(
name|query
argument_list|)
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|next
argument_list|()
condition|)
block|{
name|QString
name|schema
init|=
name|t
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|schema
operator|.
name|isEmpty
argument_list|()
operator|||
name|schema
operator|==
name|QLatin1String
argument_list|(
literal|"public"
argument_list|)
condition|)
name|tl
operator|.
name|append
argument_list|(
name|t
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|tl
operator|.
name|append
argument_list|(
name|t
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
operator|.
name|prepend
argument_list|(
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|exec
name|PGresult
modifier|*
name|QPSQLDriverPrivate
operator|::
name|exec
parameter_list|(
specifier|const
name|char
modifier|*
name|stmt
parameter_list|)
specifier|const
block|{
name|PGresult
modifier|*
name|result
init|=
name|PQexec
argument_list|(
name|connection
argument_list|,
name|stmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|seid
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|pendingNotifyCheck
condition|)
block|{
name|pendingNotifyCheck
operator|=
literal|true
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|q
argument_list|,
literal|"_q_handleNotification"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|exec
name|PGresult
modifier|*
name|QPSQLDriverPrivate
operator|::
name|exec
parameter_list|(
specifier|const
name|QString
modifier|&
name|stmt
parameter_list|)
specifier|const
block|{
return|return
name|exec
argument_list|(
name|isUtf8
condition|?
name|stmt
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
else|:
name|stmt
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_class
DECL|class|QPSQLResultPrivate
class|class
name|QPSQLResultPrivate
block|{
public|public:
DECL|function|QPSQLResultPrivate
name|QPSQLResultPrivate
parameter_list|(
name|QPSQLResult
modifier|*
name|qq
parameter_list|)
member_init_list|:
name|q
argument_list|(
name|qq
argument_list|)
member_init_list|,
name|privDriver
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|result
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|currentSize
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|preparedQueriesEnabled
argument_list|(
literal|false
argument_list|)
block|{}
DECL|function|fieldSerial
specifier|static
name|QString
name|fieldSerial
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|QLatin1Char
argument_list|(
literal|'$'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|member|q
name|QPSQLResult
modifier|*
name|q
decl_stmt|;
DECL|member|privDriver
specifier|const
name|QPSQLDriverPrivate
modifier|*
name|privDriver
decl_stmt|;
DECL|member|result
name|PGresult
modifier|*
name|result
decl_stmt|;
DECL|member|currentSize
name|int
name|currentSize
decl_stmt|;
DECL|member|preparedQueriesEnabled
name|bool
name|preparedQueriesEnabled
decl_stmt|;
DECL|member|preparedStmtId
name|QString
name|preparedStmtId
decl_stmt|;
name|bool
name|processResults
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|qMakeError
specifier|static
name|QSqlError
name|qMakeError
parameter_list|(
specifier|const
name|QString
modifier|&
name|err
parameter_list|,
name|QSqlError
operator|::
name|ErrorType
name|type
parameter_list|,
specifier|const
name|QPSQLDriverPrivate
modifier|*
name|p
parameter_list|,
name|PGresult
modifier|*
name|result
init|=
literal|0
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|s
init|=
name|PQerrorMessage
argument_list|(
name|p
operator|->
name|connection
argument_list|)
decl_stmt|;
name|QString
name|msg
init|=
name|p
operator|->
name|isUtf8
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
name|s
argument_list|)
else|:
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
specifier|const
name|char
modifier|*
name|sCode
init|=
name|PQresultErrorField
argument_list|(
name|result
argument_list|,
name|PG_DIAG_SQLSTATE
argument_list|)
decl_stmt|;
name|msg
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|sCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|QSqlError
argument_list|(
name|QLatin1String
argument_list|(
literal|"QPSQL: "
argument_list|)
operator|+
name|err
argument_list|,
name|msg
argument_list|,
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|processResults
name|bool
name|QPSQLResultPrivate
operator|::
name|processResults
parameter_list|()
block|{
if|if
condition|(
operator|!
name|result
condition|)
return|return
literal|false
return|;
name|int
name|status
init|=
name|PQresultStatus
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|PGRES_TUPLES_OK
condition|)
block|{
name|q
operator|->
name|setSelect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|->
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|currentSize
operator|=
name|PQntuples
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|PGRES_COMMAND_OK
condition|)
block|{
name|q
operator|->
name|setSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|currentSize
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
name|q
operator|->
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPSQLResult"
argument_list|,
literal|"Unable to create query"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|privDriver
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qDecodePSQLType
specifier|static
name|QVariant
operator|::
name|Type
name|qDecodePSQLType
parameter_list|(
name|int
name|t
parameter_list|)
block|{
name|QVariant
operator|::
name|Type
name|type
init|=
name|QVariant
operator|::
name|Invalid
decl_stmt|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|QBOOLOID
case|:
name|type
operator|=
name|QVariant
operator|::
name|Bool
expr_stmt|;
break|break;
case|case
name|QINT8OID
case|:
name|type
operator|=
name|QVariant
operator|::
name|LongLong
expr_stmt|;
break|break;
case|case
name|QINT2OID
case|:
case|case
name|QINT4OID
case|:
case|case
name|QOIDOID
case|:
case|case
name|QREGPROCOID
case|:
case|case
name|QXIDOID
case|:
case|case
name|QCIDOID
case|:
name|type
operator|=
name|QVariant
operator|::
name|Int
expr_stmt|;
break|break;
case|case
name|QNUMERICOID
case|:
case|case
name|QFLOAT4OID
case|:
case|case
name|QFLOAT8OID
case|:
name|type
operator|=
name|QVariant
operator|::
name|Double
expr_stmt|;
break|break;
case|case
name|QABSTIMEOID
case|:
case|case
name|QRELTIMEOID
case|:
case|case
name|QDATEOID
case|:
name|type
operator|=
name|QVariant
operator|::
name|Date
expr_stmt|;
break|break;
case|case
name|QTIMEOID
case|:
case|case
name|QTIMETZOID
case|:
name|type
operator|=
name|QVariant
operator|::
name|Time
expr_stmt|;
break|break;
case|case
name|QTIMESTAMPOID
case|:
case|case
name|QTIMESTAMPTZOID
case|:
name|type
operator|=
name|QVariant
operator|::
name|DateTime
expr_stmt|;
break|break;
case|case
name|QBYTEAOID
case|:
name|type
operator|=
name|QVariant
operator|::
name|ByteArray
expr_stmt|;
break|break;
default|default:
name|type
operator|=
name|QVariant
operator|::
name|String
expr_stmt|;
break|break;
block|}
return|return
name|type
return|;
block|}
end_function
begin_function
DECL|function|qDeallocatePreparedStmt
specifier|static
name|void
name|qDeallocatePreparedStmt
parameter_list|(
name|QPSQLResultPrivate
modifier|*
name|d
parameter_list|)
block|{
specifier|const
name|QString
name|stmt
init|=
name|QLatin1String
argument_list|(
literal|"DEALLOCATE "
argument_list|)
operator|+
name|d
operator|->
name|preparedStmtId
decl_stmt|;
name|PGresult
modifier|*
name|result
init|=
name|d
operator|->
name|privDriver
operator|->
name|exec
argument_list|(
name|stmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|PQresultStatus
argument_list|(
name|result
argument_list|)
operator|!=
name|PGRES_COMMAND_OK
condition|)
name|qWarning
argument_list|(
literal|"Unable to free statement: %s"
argument_list|,
name|PQerrorMessage
argument_list|(
name|d
operator|->
name|privDriver
operator|->
name|connection
argument_list|)
argument_list|)
expr_stmt|;
name|PQclear
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|d
operator|->
name|preparedStmtId
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|QPSQLResult
name|QPSQLResult
operator|::
name|QPSQLResult
parameter_list|(
specifier|const
name|QPSQLDriver
modifier|*
name|db
parameter_list|,
specifier|const
name|QPSQLDriverPrivate
modifier|*
name|p
parameter_list|)
member_init_list|:
name|QSqlResult
argument_list|(
name|db
argument_list|)
block|{
name|d
operator|=
operator|new
name|QPSQLResultPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|privDriver
operator|=
name|p
expr_stmt|;
name|d
operator|->
name|preparedQueriesEnabled
operator|=
name|db
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|PreparedQueries
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QPSQLResult
name|QPSQLResult
operator|::
name|~
name|QPSQLResult
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|preparedQueriesEnabled
operator|&&
operator|!
name|d
operator|->
name|preparedStmtId
operator|.
name|isNull
argument_list|()
condition|)
name|qDeallocatePreparedStmt
argument_list|(
name|d
argument_list|)
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|handle
name|QVariant
name|QPSQLResult
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|d
operator|->
name|result
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QPSQLResult
operator|::
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|result
condition|)
name|PQclear
argument_list|(
name|d
operator|->
name|result
argument_list|)
expr_stmt|;
name|d
operator|->
name|result
operator|=
literal|0
expr_stmt|;
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|d
operator|->
name|currentSize
operator|=
operator|-
literal|1
expr_stmt|;
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fetch
name|bool
name|QPSQLResult
operator|::
name|fetch
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isActive
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|i
operator|>=
name|d
operator|->
name|currentSize
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|at
argument_list|()
operator|==
name|i
condition|)
return|return
literal|true
return|;
name|setAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fetchFirst
name|bool
name|QPSQLResult
operator|::
name|fetchFirst
parameter_list|()
block|{
return|return
name|fetch
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fetchLast
name|bool
name|QPSQLResult
operator|::
name|fetchLast
parameter_list|()
block|{
return|return
name|fetch
argument_list|(
name|PQntuples
argument_list|(
name|d
operator|->
name|result
argument_list|)
operator|-
literal|1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|data
name|QVariant
name|QPSQLResult
operator|::
name|data
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
name|PQnfields
argument_list|(
name|d
operator|->
name|result
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPSQLResult::data: column %d out of range"
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
name|int
name|ptype
init|=
name|PQftype
argument_list|(
name|d
operator|->
name|result
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|QVariant
operator|::
name|Type
name|type
init|=
name|qDecodePSQLType
argument_list|(
name|ptype
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|val
init|=
name|PQgetvalue
argument_list|(
name|d
operator|->
name|result
argument_list|,
name|at
argument_list|()
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|PQgetisnull
argument_list|(
name|d
operator|->
name|result
argument_list|,
name|at
argument_list|()
argument_list|,
name|i
argument_list|)
condition|)
return|return
name|QVariant
argument_list|(
name|type
argument_list|)
return|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QVariant
operator|::
name|Bool
case|:
return|return
name|QVariant
argument_list|(
call|(
name|bool
call|)
argument_list|(
name|val
index|[
literal|0
index|]
operator|==
literal|'t'
argument_list|)
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|String
case|:
return|return
name|d
operator|->
name|privDriver
operator|->
name|isUtf8
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
name|val
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
name|val
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|LongLong
case|:
if|if
condition|(
name|val
index|[
literal|0
index|]
operator|==
literal|'-'
condition|)
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
name|val
argument_list|)
operator|.
name|toLongLong
argument_list|()
return|;
else|else
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
name|val
argument_list|)
operator|.
name|toULongLong
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Int
case|:
return|return
name|atoi
argument_list|(
name|val
argument_list|)
return|;
case|case
name|QVariant
operator|::
name|Double
case|:
if|if
condition|(
name|ptype
operator|==
name|QNUMERICOID
condition|)
block|{
if|if
condition|(
name|numericalPrecisionPolicy
argument_list|()
operator|!=
name|QSql
operator|::
name|HighPrecision
condition|)
block|{
name|QVariant
name|retval
decl_stmt|;
name|bool
name|convert
decl_stmt|;
name|double
name|dbl
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|val
argument_list|)
operator|.
name|toDouble
argument_list|(
operator|&
name|convert
argument_list|)
decl_stmt|;
if|if
condition|(
name|numericalPrecisionPolicy
argument_list|()
operator|==
name|QSql
operator|::
name|LowPrecisionInt64
condition|)
name|retval
operator|=
operator|(
name|qlonglong
operator|)
name|dbl
expr_stmt|;
elseif|else
if|if
condition|(
name|numericalPrecisionPolicy
argument_list|()
operator|==
name|QSql
operator|::
name|LowPrecisionInt32
condition|)
name|retval
operator|=
operator|(
name|int
operator|)
name|dbl
expr_stmt|;
elseif|else
if|if
condition|(
name|numericalPrecisionPolicy
argument_list|()
operator|==
name|QSql
operator|::
name|LowPrecisionDouble
condition|)
name|retval
operator|=
name|dbl
expr_stmt|;
if|if
condition|(
operator|!
name|convert
condition|)
return|return
name|QVariant
argument_list|()
return|;
return|return
name|retval
return|;
block|}
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
name|val
argument_list|)
return|;
block|}
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
name|val
argument_list|)
operator|.
name|toDouble
argument_list|()
return|;
case|case
name|QVariant
operator|::
name|Date
case|:
if|if
condition|(
name|val
index|[
literal|0
index|]
operator|==
literal|'\0'
condition|)
block|{
return|return
name|QVariant
argument_list|(
name|QDate
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
return|return
name|QVariant
argument_list|(
name|QDate
operator|::
name|fromString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|val
argument_list|)
argument_list|,
name|Qt
operator|::
name|ISODate
argument_list|)
argument_list|)
return|;
else|#
directive|else
return|return
name|QVariant
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|val
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
block|}
case|case
name|QVariant
operator|::
name|Time
case|:
block|{
specifier|const
name|QString
name|str
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|val
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
if|if
condition|(
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QVariant
argument_list|(
name|QTime
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|str
operator|.
name|at
argument_list|(
name|str
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
operator|||
name|str
operator|.
name|at
argument_list|(
name|str
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
condition|)
comment|// strip the timezone
comment|// TODO: fix this when timestamp support comes into QDateTime
return|return
name|QVariant
argument_list|(
name|QTime
operator|::
name|fromString
argument_list|(
name|str
operator|.
name|left
argument_list|(
name|str
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
argument_list|,
name|Qt
operator|::
name|ISODate
argument_list|)
argument_list|)
return|;
return|return
name|QVariant
argument_list|(
name|QTime
operator|::
name|fromString
argument_list|(
name|str
argument_list|,
name|Qt
operator|::
name|ISODate
argument_list|)
argument_list|)
return|;
else|#
directive|else
return|return
name|QVariant
argument_list|(
name|str
argument_list|)
return|;
endif|#
directive|endif
block|}
case|case
name|QVariant
operator|::
name|DateTime
case|:
block|{
name|QString
name|dtval
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|val
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
if|if
condition|(
name|dtval
operator|.
name|length
argument_list|()
operator|<
literal|10
condition|)
return|return
name|QVariant
argument_list|(
name|QDateTime
argument_list|()
argument_list|)
return|;
comment|// remove the timezone
comment|// TODO: fix this when timestamp support comes into QDateTime
if|if
condition|(
name|dtval
operator|.
name|at
argument_list|(
name|dtval
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
operator|||
name|dtval
operator|.
name|at
argument_list|(
name|dtval
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
condition|)
name|dtval
operator|.
name|chop
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// milliseconds are sometimes returned with 2 digits only
if|if
condition|(
name|dtval
operator|.
name|at
argument_list|(
name|dtval
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
operator|.
name|isPunct
argument_list|()
condition|)
name|dtval
operator|+=
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
if|if
condition|(
name|dtval
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QVariant
argument_list|(
name|QDateTime
argument_list|()
argument_list|)
return|;
else|else
return|return
name|QVariant
argument_list|(
name|QDateTime
operator|::
name|fromString
argument_list|(
name|dtval
argument_list|,
name|Qt
operator|::
name|ISODate
argument_list|)
argument_list|)
return|;
else|#
directive|else
return|return
name|QVariant
argument_list|(
name|dtval
argument_list|)
return|;
endif|#
directive|endif
block|}
case|case
name|QVariant
operator|::
name|ByteArray
case|:
block|{
name|size_t
name|len
decl_stmt|;
name|unsigned
name|char
modifier|*
name|data
init|=
name|PQunescapeBytea
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|)
name|val
argument_list|,
operator|&
name|len
argument_list|)
decl_stmt|;
name|QByteArray
name|ba
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|data
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|qPQfreemem
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|ba
argument_list|)
return|;
block|}
default|default:
case|case
name|QVariant
operator|::
name|Invalid
case|:
name|qWarning
argument_list|(
literal|"QPSQLResult::data: unknown data type"
argument_list|)
expr_stmt|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isNull
name|bool
name|QPSQLResult
operator|::
name|isNull
parameter_list|(
name|int
name|field
parameter_list|)
block|{
name|PQgetvalue
argument_list|(
name|d
operator|->
name|result
argument_list|,
name|at
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
return|return
name|PQgetisnull
argument_list|(
name|d
operator|->
name|result
argument_list|,
name|at
argument_list|()
argument_list|,
name|field
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|reset
name|bool
name|QPSQLResult
operator|::
name|reset
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
block|{
name|cleanup
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|driver
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|driver
argument_list|()
operator|->
name|isOpen
argument_list|()
operator|||
name|driver
argument_list|()
operator|->
name|isOpenError
argument_list|()
condition|)
return|return
literal|false
return|;
name|d
operator|->
name|result
operator|=
name|d
operator|->
name|privDriver
operator|->
name|exec
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|processResults
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|size
name|int
name|QPSQLResult
operator|::
name|size
parameter_list|()
block|{
return|return
name|d
operator|->
name|currentSize
return|;
block|}
end_function
begin_function
DECL|function|numRowsAffected
name|int
name|QPSQLResult
operator|::
name|numRowsAffected
parameter_list|()
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
name|PQcmdTuples
argument_list|(
name|d
operator|->
name|result
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|lastInsertId
name|QVariant
name|QPSQLResult
operator|::
name|lastInsertId
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|isActive
argument_list|()
condition|)
block|{
name|Oid
name|id
init|=
name|PQoidValue
argument_list|(
name|d
operator|->
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
name|InvalidOid
condition|)
return|return
name|QVariant
argument_list|(
name|id
argument_list|)
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|record
name|QSqlRecord
name|QPSQLResult
operator|::
name|record
parameter_list|()
specifier|const
block|{
name|QSqlRecord
name|info
decl_stmt|;
if|if
condition|(
operator|!
name|isActive
argument_list|()
operator|||
operator|!
name|isSelect
argument_list|()
condition|)
return|return
name|info
return|;
name|int
name|count
init|=
name|PQnfields
argument_list|(
name|d
operator|->
name|result
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QSqlField
name|f
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|privDriver
operator|->
name|isUtf8
condition|)
name|f
operator|.
name|setName
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|PQfname
argument_list|(
name|d
operator|->
name|result
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|f
operator|.
name|setName
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|PQfname
argument_list|(
name|d
operator|->
name|result
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|setType
argument_list|(
name|qDecodePSQLType
argument_list|(
name|PQftype
argument_list|(
name|d
operator|->
name|result
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|PQfsize
argument_list|(
name|d
operator|->
name|result
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|int
name|precision
init|=
name|PQfmod
argument_list|(
name|d
operator|->
name|result
argument_list|,
name|i
argument_list|)
decl_stmt|;
comment|// swap length and precision if length == -1
if|if
condition|(
name|len
operator|==
operator|-
literal|1
operator|&&
name|precision
operator|>
operator|-
literal|1
condition|)
block|{
name|len
operator|=
name|precision
operator|-
literal|4
expr_stmt|;
name|precision
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|f
operator|.
name|setLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPrecision
argument_list|(
name|precision
argument_list|)
expr_stmt|;
name|f
operator|.
name|setSqlType
argument_list|(
name|PQftype
argument_list|(
name|d
operator|->
name|result
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
end_function
begin_function
DECL|function|virtual_hook
name|void
name|QPSQLResult
operator|::
name|virtual_hook
parameter_list|(
name|int
name|id
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|QSqlResult
operator|::
name|virtual_hook
argument_list|(
name|id
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qCreateParamString
specifier|static
name|QString
name|qCreateParamString
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QVariant
argument_list|>
name|boundValues
parameter_list|,
specifier|const
name|QSqlDriver
modifier|*
name|driver
parameter_list|)
block|{
if|if
condition|(
name|boundValues
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|params
decl_stmt|;
name|QSqlField
name|f
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|boundValues
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QVariant
modifier|&
name|val
init|=
name|boundValues
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|f
operator|.
name|setType
argument_list|(
name|val
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|.
name|isNull
argument_list|()
condition|)
name|f
operator|.
name|clear
argument_list|()
expr_stmt|;
else|else
name|f
operator|.
name|setValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|isNull
argument_list|()
condition|)
name|params
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|append
argument_list|(
name|driver
operator|->
name|formatValue
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
end_function
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QMutex
argument_list|,
argument|qMutex
argument_list|)
end_macro
begin_function
DECL|function|qMakePreparedStmtId
name|QString
name|qMakePreparedStmtId
parameter_list|()
block|{
name|qMutex
argument_list|()
operator|->
name|lock
argument_list|()
expr_stmt|;
specifier|static
name|unsigned
name|int
name|qPreparedStmtCount
init|=
literal|0
decl_stmt|;
name|QString
name|id
init|=
name|QLatin1String
argument_list|(
literal|"qpsqlpstmt_"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
operator|++
name|qPreparedStmtCount
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|qMutex
argument_list|()
operator|->
name|unlock
argument_list|()
expr_stmt|;
return|return
name|id
return|;
block|}
end_function
begin_function
DECL|function|prepare
name|bool
name|QPSQLResult
operator|::
name|prepare
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|preparedQueriesEnabled
condition|)
return|return
name|QSqlResult
operator|::
name|prepare
argument_list|(
name|query
argument_list|)
return|;
name|cleanup
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|preparedStmtId
operator|.
name|isEmpty
argument_list|()
condition|)
name|qDeallocatePreparedStmt
argument_list|(
name|d
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|stmtId
init|=
name|qMakePreparedStmtId
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|stmt
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"PREPARE %1 AS "
argument_list|)
operator|.
name|arg
argument_list|(
name|stmtId
argument_list|)
operator|.
name|append
argument_list|(
name|QSqlResultPrivate
operator|::
name|positionalToNamedBinding
argument_list|(
name|query
argument_list|,
name|QPSQLResultPrivate
operator|::
name|fieldSerial
argument_list|)
argument_list|)
decl_stmt|;
name|PGresult
modifier|*
name|result
init|=
name|d
operator|->
name|privDriver
operator|->
name|exec
argument_list|(
name|stmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|PQresultStatus
argument_list|(
name|result
argument_list|)
operator|!=
name|PGRES_COMMAND_OK
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QPSQLResult"
argument_list|,
literal|"Unable to prepare statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
operator|->
name|privDriver
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|PQclear
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|d
operator|->
name|preparedStmtId
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|PQclear
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|d
operator|->
name|preparedStmtId
operator|=
name|stmtId
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|exec
name|bool
name|QPSQLResult
operator|::
name|exec
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|preparedQueriesEnabled
condition|)
return|return
name|QSqlResult
operator|::
name|exec
argument_list|()
return|;
name|cleanup
argument_list|()
expr_stmt|;
name|QString
name|stmt
decl_stmt|;
specifier|const
name|QString
name|params
init|=
name|qCreateParamString
argument_list|(
name|boundValues
argument_list|()
argument_list|,
name|driver
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|isEmpty
argument_list|()
condition|)
name|stmt
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"EXECUTE %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|d
operator|->
name|preparedStmtId
argument_list|)
expr_stmt|;
else|else
name|stmt
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"EXECUTE %1 (%2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|d
operator|->
name|preparedStmtId
argument_list|)
operator|.
name|arg
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|d
operator|->
name|result
operator|=
name|d
operator|->
name|privDriver
operator|->
name|exec
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
return|return
name|d
operator|->
name|processResults
argument_list|()
return|;
block|}
end_function
begin_comment
comment|///////////////////////////////////////////////////////////////////
end_comment
begin_function
DECL|function|setEncodingUtf8
name|bool
name|QPSQLDriverPrivate
operator|::
name|setEncodingUtf8
parameter_list|()
block|{
name|PGresult
modifier|*
name|result
init|=
name|exec
argument_list|(
literal|"SET CLIENT_ENCODING TO 'UNICODE'"
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|PQresultStatus
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|PQclear
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|status
operator|==
name|PGRES_COMMAND_OK
return|;
block|}
end_function
begin_function
DECL|function|setDatestyle
name|void
name|QPSQLDriverPrivate
operator|::
name|setDatestyle
parameter_list|()
block|{
name|PGresult
modifier|*
name|result
init|=
name|exec
argument_list|(
literal|"SET DATESTYLE TO 'ISO'"
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|PQresultStatus
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|PGRES_COMMAND_OK
condition|)
name|qWarning
argument_list|(
literal|"%s"
argument_list|,
name|PQerrorMessage
argument_list|(
name|connection
argument_list|)
argument_list|)
expr_stmt|;
name|PQclear
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qMakePSQLVersion
specifier|static
name|QPSQLDriver
operator|::
name|Protocol
name|qMakePSQLVersion
parameter_list|(
name|int
name|vMaj
parameter_list|,
name|int
name|vMin
parameter_list|)
block|{
switch|switch
condition|(
name|vMaj
condition|)
block|{
case|case
literal|6
case|:
return|return
name|QPSQLDriver
operator|::
name|Version6
return|;
case|case
literal|7
case|:
block|{
switch|switch
condition|(
name|vMin
condition|)
block|{
case|case
literal|1
case|:
return|return
name|QPSQLDriver
operator|::
name|Version71
return|;
case|case
literal|3
case|:
return|return
name|QPSQLDriver
operator|::
name|Version73
return|;
case|case
literal|4
case|:
return|return
name|QPSQLDriver
operator|::
name|Version74
return|;
default|default:
return|return
name|QPSQLDriver
operator|::
name|Version7
return|;
block|}
break|break;
block|}
case|case
literal|8
case|:
block|{
switch|switch
condition|(
name|vMin
condition|)
block|{
case|case
literal|1
case|:
return|return
name|QPSQLDriver
operator|::
name|Version81
return|;
case|case
literal|2
case|:
return|return
name|QPSQLDriver
operator|::
name|Version82
return|;
case|case
literal|3
case|:
return|return
name|QPSQLDriver
operator|::
name|Version83
return|;
case|case
literal|4
case|:
return|return
name|QPSQLDriver
operator|::
name|Version84
return|;
default|default:
return|return
name|QPSQLDriver
operator|::
name|Version8
return|;
block|}
break|break;
block|}
case|case
literal|9
case|:
return|return
name|QPSQLDriver
operator|::
name|Version9
return|;
break|break;
default|default:
break|break;
block|}
return|return
name|QPSQLDriver
operator|::
name|VersionUnknown
return|;
block|}
end_function
begin_function
DECL|function|getPSQLVersion
name|QPSQLDriver
operator|::
name|Protocol
name|QPSQLDriverPrivate
operator|::
name|getPSQLVersion
parameter_list|()
block|{
name|QPSQLDriver
operator|::
name|Protocol
name|serverVersion
init|=
name|QPSQLDriver
operator|::
name|Version6
decl_stmt|;
name|PGresult
modifier|*
name|result
init|=
name|exec
argument_list|(
literal|"select version()"
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|PQresultStatus
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|PGRES_COMMAND_OK
operator|||
name|status
operator|==
name|PGRES_TUPLES_OK
condition|)
block|{
name|QString
name|val
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|PQgetvalue
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QRegExp
name|rx
argument_list|(
name|QLatin1String
argument_list|(
literal|"(\\d+)\\.(\\d+)"
argument_list|)
argument_list|)
decl_stmt|;
name|rx
operator|.
name|setMinimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// enforce non-greedy RegExp
if|if
condition|(
name|rx
operator|.
name|indexIn
argument_list|(
name|val
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|vMaj
init|=
name|rx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|vMin
init|=
name|rx
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|serverVersion
operator|=
name|qMakePSQLVersion
argument_list|(
name|vMaj
argument_list|,
name|vMin
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|PG_MAJORVERSION
argument_list|)
if|if
condition|(
name|rx
operator|.
name|indexIn
argument_list|(
name|QLatin1String
argument_list|(
name|PG_MAJORVERSION
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
condition|)
elif|#
directive|elif
name|defined
argument_list|(
name|PG_VERSION
argument_list|)
if|if
condition|(
name|rx
operator|.
name|indexIn
argument_list|(
name|QLatin1String
argument_list|(
name|PG_VERSION
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
condition|)
else|#
directive|else
if|if
condition|(
literal|0
condition|)
endif|#
directive|endif
block|{
name|vMaj
operator|=
name|rx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|vMin
operator|=
name|rx
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|QPSQLDriver
operator|::
name|Protocol
name|clientVersion
init|=
name|qMakePSQLVersion
argument_list|(
name|vMaj
argument_list|,
name|vMin
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverVersion
operator|>=
name|QPSQLDriver
operator|::
name|Version9
operator|&&
name|clientVersion
operator|<
name|QPSQLDriver
operator|::
name|Version9
condition|)
block|{
comment|//Client version before QPSQLDriver::Version9 only supports escape mode for bytea type,
comment|//but bytea format is set to hex by default in PSQL 9 and above. So need to force the
comment|//server use the old escape mode when connects to the new server with old client library.
name|result
operator|=
name|exec
argument_list|(
literal|"SET bytea_output=escape; "
argument_list|)
expr_stmt|;
name|status
operator|=
name|PQresultStatus
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|serverVersion
operator|==
name|QPSQLDriver
operator|::
name|VersionUnknown
condition|)
block|{
name|serverVersion
operator|=
name|clientVersion
expr_stmt|;
if|if
condition|(
name|serverVersion
operator|!=
name|QPSQLDriver
operator|::
name|VersionUnknown
condition|)
name|qWarning
argument_list|(
literal|"The server version of this PostgreSQL is unknown, falling back to the client version."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|PQclear
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|//keep the old behavior unchanged
if|if
condition|(
name|serverVersion
operator|==
name|QPSQLDriver
operator|::
name|VersionUnknown
condition|)
name|serverVersion
operator|=
name|QPSQLDriver
operator|::
name|Version6
expr_stmt|;
if|if
condition|(
name|serverVersion
operator|<
name|QPSQLDriver
operator|::
name|Version71
condition|)
block|{
name|qWarning
argument_list|(
literal|"This version of PostgreSQL is not supported and may not work."
argument_list|)
expr_stmt|;
block|}
return|return
name|serverVersion
return|;
block|}
end_function
begin_constructor
DECL|function|QPSQLDriver
name|QPSQLDriver
operator|::
name|QPSQLDriver
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSqlDriver
argument_list|(
name|parent
argument_list|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QPSQLDriver
name|QPSQLDriver
operator|::
name|QPSQLDriver
parameter_list|(
name|PGconn
modifier|*
name|conn
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSqlDriver
argument_list|(
name|parent
argument_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|d
operator|->
name|connection
operator|=
name|conn
expr_stmt|;
if|if
condition|(
name|conn
condition|)
block|{
name|d
operator|->
name|pro
operator|=
name|d
operator|->
name|getPSQLVersion
argument_list|()
expr_stmt|;
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|init
name|void
name|QPSQLDriver
operator|::
name|init
parameter_list|()
block|{
name|d
operator|=
operator|new
name|QPSQLDriverPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~QPSQLDriver
name|QPSQLDriver
operator|::
name|~
name|QPSQLDriver
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|connection
condition|)
name|PQfinish
argument_list|(
name|d
operator|->
name|connection
argument_list|)
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|handle
name|QVariant
name|QPSQLDriver
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|d
operator|->
name|connection
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hasFeature
name|bool
name|QPSQLDriver
operator|::
name|hasFeature
parameter_list|(
name|DriverFeature
name|f
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|f
condition|)
block|{
case|case
name|Transactions
case|:
case|case
name|QuerySize
case|:
case|case
name|LastInsertId
case|:
case|case
name|LowPrecisionNumbers
case|:
case|case
name|EventNotifications
case|:
return|return
literal|true
return|;
case|case
name|PreparedQueries
case|:
case|case
name|PositionalPlaceholders
case|:
return|return
name|d
operator|->
name|pro
operator|>=
name|QPSQLDriver
operator|::
name|Version82
return|;
case|case
name|BatchOperations
case|:
case|case
name|NamedPlaceholders
case|:
case|case
name|SimpleLocking
case|:
case|case
name|FinishQuery
case|:
case|case
name|MultipleResultSets
case|:
case|case
name|CancelQuery
case|:
return|return
literal|false
return|;
case|case
name|BLOB
case|:
return|return
name|d
operator|->
name|pro
operator|>=
name|QPSQLDriver
operator|::
name|Version71
return|;
case|case
name|Unicode
case|:
return|return
name|d
operator|->
name|isUtf8
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*    Quote a string for inclusion into the connection string    \ -> \\    ' -> \'    surround string by single quotes  */
end_comment
begin_function
DECL|function|qQuote
specifier|static
name|QString
name|qQuote
parameter_list|(
name|QString
name|s
parameter_list|)
block|{
name|s
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\\\\"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\\'"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
argument_list|)
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|open
name|bool
name|QPSQLDriver
operator|::
name|open
parameter_list|(
specifier|const
name|QString
modifier|&
name|db
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
name|int
name|port
parameter_list|,
specifier|const
name|QString
modifier|&
name|connOpts
parameter_list|)
block|{
if|if
condition|(
name|isOpen
argument_list|()
condition|)
name|close
argument_list|()
expr_stmt|;
name|QString
name|connectString
decl_stmt|;
if|if
condition|(
operator|!
name|host
operator|.
name|isEmpty
argument_list|()
condition|)
name|connectString
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"host="
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|qQuote
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|isEmpty
argument_list|()
condition|)
name|connectString
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|" dbname="
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|qQuote
argument_list|(
name|db
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|isEmpty
argument_list|()
condition|)
name|connectString
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|" user="
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|qQuote
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|password
operator|.
name|isEmpty
argument_list|()
condition|)
name|connectString
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|" password="
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|qQuote
argument_list|(
name|password
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|port
operator|!=
operator|-
literal|1
condition|)
name|connectString
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|" port="
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|qQuote
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|port
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// add any connect options - the server will handle error detection
if|if
condition|(
operator|!
name|connOpts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|opt
init|=
name|connOpts
decl_stmt|;
name|opt
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|connectString
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|connection
operator|=
name|PQconnectdb
argument_list|(
name|connectString
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|PQstatus
argument_list|(
name|d
operator|->
name|connection
argument_list|)
operator|==
name|CONNECTION_BAD
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to connect"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PQfinish
argument_list|(
name|d
operator|->
name|connection
argument_list|)
expr_stmt|;
name|d
operator|->
name|connection
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|pro
operator|=
name|d
operator|->
name|getPSQLVersion
argument_list|()
expr_stmt|;
name|d
operator|->
name|isUtf8
operator|=
name|d
operator|->
name|setEncodingUtf8
argument_list|()
expr_stmt|;
name|d
operator|->
name|setDatestyle
argument_list|()
expr_stmt|;
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QPSQLDriver
operator|::
name|close
parameter_list|()
block|{
if|if
condition|(
name|isOpen
argument_list|()
condition|)
block|{
name|d
operator|->
name|seid
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sn
condition|)
block|{
name|disconnect
argument_list|(
name|d
operator|->
name|sn
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_handleNotification
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|sn
expr_stmt|;
name|d
operator|->
name|sn
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|connection
condition|)
name|PQfinish
argument_list|(
name|d
operator|->
name|connection
argument_list|)
expr_stmt|;
name|d
operator|->
name|connection
operator|=
literal|0
expr_stmt|;
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createResult
name|QSqlResult
modifier|*
name|QPSQLDriver
operator|::
name|createResult
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QPSQLResult
argument_list|(
name|this
argument_list|,
name|d
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|beginTransaction
name|bool
name|QPSQLDriver
operator|::
name|beginTransaction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPSQLDriver::beginTransaction: Database not open"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|PGresult
modifier|*
name|res
init|=
name|d
operator|->
name|exec
argument_list|(
literal|"BEGIN"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|||
name|PQresultStatus
argument_list|(
name|res
argument_list|)
operator|!=
name|PGRES_COMMAND_OK
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Could not begin transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|,
name|d
argument_list|,
name|res
argument_list|)
argument_list|)
expr_stmt|;
name|PQclear
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|PQclear
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|commitTransaction
name|bool
name|QPSQLDriver
operator|::
name|commitTransaction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPSQLDriver::commitTransaction: Database not open"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|PGresult
modifier|*
name|res
init|=
name|d
operator|->
name|exec
argument_list|(
literal|"COMMIT"
argument_list|)
decl_stmt|;
name|bool
name|transaction_failed
init|=
literal|false
decl_stmt|;
comment|// XXX
comment|// This hack is used to tell if the transaction has succeeded for the protocol versions of
comment|// PostgreSQL below. For 7.x and other protocol versions we are left in the dark.
comment|// This hack can dissapear once there is an API to query this sort of information.
if|if
condition|(
name|d
operator|->
name|pro
operator|==
name|QPSQLDriver
operator|::
name|Version8
operator|||
name|d
operator|->
name|pro
operator|==
name|QPSQLDriver
operator|::
name|Version81
operator|||
name|d
operator|->
name|pro
operator|==
name|QPSQLDriver
operator|::
name|Version82
operator|||
name|d
operator|->
name|pro
operator|==
name|QPSQLDriver
operator|::
name|Version83
operator|||
name|d
operator|->
name|pro
operator|==
name|QPSQLDriver
operator|::
name|Version84
operator|||
name|d
operator|->
name|pro
operator|==
name|QPSQLDriver
operator|::
name|Version9
condition|)
block|{
name|transaction_failed
operator|=
name|qstrcmp
argument_list|(
name|PQcmdStatus
argument_list|(
name|res
argument_list|)
argument_list|,
literal|"ROLLBACK"
argument_list|)
operator|==
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|res
operator|||
name|PQresultStatus
argument_list|(
name|res
argument_list|)
operator|!=
name|PGRES_COMMAND_OK
operator|||
name|transaction_failed
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Could not commit transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|,
name|d
argument_list|,
name|res
argument_list|)
argument_list|)
expr_stmt|;
name|PQclear
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|PQclear
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|rollbackTransaction
name|bool
name|QPSQLDriver
operator|::
name|rollbackTransaction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPSQLDriver::rollbackTransaction: Database not open"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|PGresult
modifier|*
name|res
init|=
name|d
operator|->
name|exec
argument_list|(
literal|"ROLLBACK"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|||
name|PQresultStatus
argument_list|(
name|res
argument_list|)
operator|!=
name|PGRES_COMMAND_OK
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Could not rollback transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|,
name|d
argument_list|,
name|res
argument_list|)
argument_list|)
expr_stmt|;
name|PQclear
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|PQclear
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|tables
name|QStringList
name|QPSQLDriver
operator|::
name|tables
parameter_list|(
name|QSql
operator|::
name|TableType
name|type
parameter_list|)
specifier|const
block|{
name|QStringList
name|tl
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|tl
return|;
name|QSqlQuery
name|t
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|Tables
condition|)
name|d
operator|->
name|appendTables
argument_list|(
name|tl
argument_list|,
name|t
argument_list|,
name|QLatin1Char
argument_list|(
literal|'r'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|Views
condition|)
name|d
operator|->
name|appendTables
argument_list|(
name|tl
argument_list|,
name|t
argument_list|,
name|QLatin1Char
argument_list|(
literal|'v'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|SystemTables
condition|)
block|{
name|t
operator|.
name|exec
argument_list|(
name|QLatin1String
argument_list|(
literal|"select relname from pg_class where (relkind = 'r') "
literal|"and (relname like 'pg_%') "
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|next
argument_list|()
condition|)
name|tl
operator|.
name|append
argument_list|(
name|t
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tl
return|;
block|}
end_function
begin_function
DECL|function|qSplitTableName
specifier|static
name|void
name|qSplitTableName
parameter_list|(
name|QString
modifier|&
name|tablename
parameter_list|,
name|QString
modifier|&
name|schema
parameter_list|)
block|{
name|int
name|dot
init|=
name|tablename
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dot
operator|==
operator|-
literal|1
condition|)
return|return;
name|schema
operator|=
name|tablename
operator|.
name|left
argument_list|(
name|dot
argument_list|)
expr_stmt|;
name|tablename
operator|=
name|tablename
operator|.
name|mid
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|primaryIndex
name|QSqlIndex
name|QPSQLDriver
operator|::
name|primaryIndex
parameter_list|(
specifier|const
name|QString
modifier|&
name|tablename
parameter_list|)
specifier|const
block|{
name|QSqlIndex
name|idx
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|idx
return|;
name|QSqlQuery
name|i
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|stmt
decl_stmt|;
name|QString
name|tbl
init|=
name|tablename
decl_stmt|;
name|QString
name|schema
decl_stmt|;
name|qSplitTableName
argument_list|(
name|tbl
argument_list|,
name|schema
argument_list|)
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|tbl
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|tbl
operator|=
name|stripDelimiters
argument_list|(
name|tbl
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|tbl
operator|=
name|tbl
operator|.
name|toLower
argument_list|()
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|schema
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|schema
operator|=
name|stripDelimiters
argument_list|(
name|schema
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|schema
operator|=
name|schema
operator|.
name|toLower
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|d
operator|->
name|pro
condition|)
block|{
case|case
name|QPSQLDriver
operator|::
name|Version6
case|:
name|stmt
operator|=
name|QLatin1String
argument_list|(
literal|"select pg_att1.attname, int(pg_att1.atttypid), pg_cl.relname "
literal|"from pg_attribute pg_att1, pg_attribute pg_att2, pg_class pg_cl, pg_index pg_ind "
literal|"where pg_cl.relname = '%1_pkey' "
literal|"and pg_cl.oid = pg_ind.indexrelid "
literal|"and pg_att2.attrelid = pg_ind.indexrelid "
literal|"and pg_att1.attrelid = pg_ind.indrelid "
literal|"and pg_att1.attnum = pg_ind.indkey[pg_att2.attnum-1] "
literal|"order by pg_att2.attnum"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPSQLDriver
operator|::
name|Version7
case|:
case|case
name|QPSQLDriver
operator|::
name|Version71
case|:
name|stmt
operator|=
name|QLatin1String
argument_list|(
literal|"select pg_att1.attname, pg_att1.atttypid::int, pg_cl.relname "
literal|"from pg_attribute pg_att1, pg_attribute pg_att2, pg_class pg_cl, pg_index pg_ind "
literal|"where pg_cl.relname = '%1_pkey' "
literal|"and pg_cl.oid = pg_ind.indexrelid "
literal|"and pg_att2.attrelid = pg_ind.indexrelid "
literal|"and pg_att1.attrelid = pg_ind.indrelid "
literal|"and pg_att1.attnum = pg_ind.indkey[pg_att2.attnum-1] "
literal|"order by pg_att2.attnum"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPSQLDriver
operator|::
name|Version73
case|:
case|case
name|QPSQLDriver
operator|::
name|Version74
case|:
case|case
name|QPSQLDriver
operator|::
name|Version8
case|:
case|case
name|QPSQLDriver
operator|::
name|Version81
case|:
case|case
name|QPSQLDriver
operator|::
name|Version82
case|:
case|case
name|QPSQLDriver
operator|::
name|Version83
case|:
case|case
name|QPSQLDriver
operator|::
name|Version84
case|:
case|case
name|QPSQLDriver
operator|::
name|Version9
case|:
name|stmt
operator|=
name|QLatin1String
argument_list|(
literal|"SELECT pg_attribute.attname, pg_attribute.atttypid::int, "
literal|"pg_class.relname "
literal|"FROM pg_attribute, pg_class "
literal|"WHERE %1 pg_class.oid IN "
literal|"(SELECT indexrelid FROM pg_index WHERE indisprimary = true AND indrelid IN "
literal|" (SELECT oid FROM pg_class WHERE relname = '%2')) "
literal|"AND pg_attribute.attrelid = pg_class.oid "
literal|"AND pg_attribute.attisdropped = false "
literal|"ORDER BY pg_attribute.attnum"
argument_list|)
expr_stmt|;
if|if
condition|(
name|schema
operator|.
name|isEmpty
argument_list|()
condition|)
name|stmt
operator|=
name|stmt
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
literal|"pg_table_is_visible(pg_class.oid) AND"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|stmt
operator|=
name|stmt
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"pg_class.relnamespace = (select oid from "
literal|"pg_namespace where pg_namespace.nspname = '%1') AND "
argument_list|)
operator|.
name|arg
argument_list|(
name|schema
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPSQLDriver
operator|::
name|VersionUnknown
case|:
name|qFatal
argument_list|(
literal|"PSQL version is unknown"
argument_list|)
expr_stmt|;
break|break;
block|}
name|i
operator|.
name|exec
argument_list|(
name|stmt
operator|.
name|arg
argument_list|(
name|tbl
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|isActive
argument_list|()
operator|&&
name|i
operator|.
name|next
argument_list|()
condition|)
block|{
name|QSqlField
name|f
argument_list|(
name|i
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|qDecodePSQLType
argument_list|(
name|i
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|idx
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|idx
operator|.
name|setName
argument_list|(
name|i
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|idx
return|;
block|}
end_function
begin_function
DECL|function|record
name|QSqlRecord
name|QPSQLDriver
operator|::
name|record
parameter_list|(
specifier|const
name|QString
modifier|&
name|tablename
parameter_list|)
specifier|const
block|{
name|QSqlRecord
name|info
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|info
return|;
name|QString
name|tbl
init|=
name|tablename
decl_stmt|;
name|QString
name|schema
decl_stmt|;
name|qSplitTableName
argument_list|(
name|tbl
argument_list|,
name|schema
argument_list|)
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|tbl
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|tbl
operator|=
name|stripDelimiters
argument_list|(
name|tbl
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|tbl
operator|=
name|tbl
operator|.
name|toLower
argument_list|()
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|schema
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|schema
operator|=
name|stripDelimiters
argument_list|(
name|schema
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|schema
operator|=
name|schema
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|QString
name|stmt
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|pro
condition|)
block|{
case|case
name|QPSQLDriver
operator|::
name|Version6
case|:
name|stmt
operator|=
name|QLatin1String
argument_list|(
literal|"select pg_attribute.attname, int(pg_attribute.atttypid), "
literal|"pg_attribute.attnotnull, pg_attribute.attlen, pg_attribute.atttypmod, "
literal|"int(pg_attribute.attrelid), pg_attribute.attnum "
literal|"from pg_class, pg_attribute "
literal|"where pg_class.relname = '%1' "
literal|"and pg_attribute.attnum> 0 "
literal|"and pg_attribute.attrelid = pg_class.oid "
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPSQLDriver
operator|::
name|Version7
case|:
name|stmt
operator|=
name|QLatin1String
argument_list|(
literal|"select pg_attribute.attname, pg_attribute.atttypid::int, "
literal|"pg_attribute.attnotnull, pg_attribute.attlen, pg_attribute.atttypmod, "
literal|"pg_attribute.attrelid::int, pg_attribute.attnum "
literal|"from pg_class, pg_attribute "
literal|"where pg_class.relname = '%1' "
literal|"and pg_attribute.attnum> 0 "
literal|"and pg_attribute.attrelid = pg_class.oid "
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPSQLDriver
operator|::
name|Version71
case|:
name|stmt
operator|=
name|QLatin1String
argument_list|(
literal|"select pg_attribute.attname, pg_attribute.atttypid::int, "
literal|"pg_attribute.attnotnull, pg_attribute.attlen, pg_attribute.atttypmod, "
literal|"pg_attrdef.adsrc "
literal|"from pg_class, pg_attribute "
literal|"left join pg_attrdef on (pg_attrdef.adrelid = "
literal|"pg_attribute.attrelid and pg_attrdef.adnum = pg_attribute.attnum) "
literal|"where pg_class.relname = '%1' "
literal|"and pg_attribute.attnum> 0 "
literal|"and pg_attribute.attrelid = pg_class.oid "
literal|"order by pg_attribute.attnum "
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPSQLDriver
operator|::
name|Version73
case|:
case|case
name|QPSQLDriver
operator|::
name|Version74
case|:
case|case
name|QPSQLDriver
operator|::
name|Version8
case|:
case|case
name|QPSQLDriver
operator|::
name|Version81
case|:
case|case
name|QPSQLDriver
operator|::
name|Version82
case|:
case|case
name|QPSQLDriver
operator|::
name|Version83
case|:
case|case
name|QPSQLDriver
operator|::
name|Version84
case|:
case|case
name|QPSQLDriver
operator|::
name|Version9
case|:
name|stmt
operator|=
name|QLatin1String
argument_list|(
literal|"select pg_attribute.attname, pg_attribute.atttypid::int, "
literal|"pg_attribute.attnotnull, pg_attribute.attlen, pg_attribute.atttypmod, "
literal|"pg_attrdef.adsrc "
literal|"from pg_class, pg_attribute "
literal|"left join pg_attrdef on (pg_attrdef.adrelid = "
literal|"pg_attribute.attrelid and pg_attrdef.adnum = pg_attribute.attnum) "
literal|"where %1 "
literal|"and pg_class.relname = '%2' "
literal|"and pg_attribute.attnum> 0 "
literal|"and pg_attribute.attrelid = pg_class.oid "
literal|"and pg_attribute.attisdropped = false "
literal|"order by pg_attribute.attnum "
argument_list|)
expr_stmt|;
if|if
condition|(
name|schema
operator|.
name|isEmpty
argument_list|()
condition|)
name|stmt
operator|=
name|stmt
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
literal|"pg_table_is_visible(pg_class.oid)"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|stmt
operator|=
name|stmt
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"pg_class.relnamespace = (select oid from "
literal|"pg_namespace where pg_namespace.nspname = '%1')"
argument_list|)
operator|.
name|arg
argument_list|(
name|schema
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QPSQLDriver
operator|::
name|VersionUnknown
case|:
name|qFatal
argument_list|(
literal|"PSQL version is unknown"
argument_list|)
expr_stmt|;
break|break;
block|}
name|QSqlQuery
name|query
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|query
operator|.
name|exec
argument_list|(
name|stmt
operator|.
name|arg
argument_list|(
name|tbl
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|pro
operator|>=
name|QPSQLDriver
operator|::
name|Version71
condition|)
block|{
while|while
condition|(
name|query
operator|.
name|next
argument_list|()
condition|)
block|{
name|int
name|len
init|=
name|query
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|precision
init|=
name|query
operator|.
name|value
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
comment|// swap length and precision if length == -1
if|if
condition|(
name|len
operator|==
operator|-
literal|1
operator|&&
name|precision
operator|>
operator|-
literal|1
condition|)
block|{
name|len
operator|=
name|precision
operator|-
literal|4
expr_stmt|;
name|precision
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|QString
name|defVal
init|=
name|query
operator|.
name|value
argument_list|(
literal|5
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|defVal
operator|.
name|isEmpty
argument_list|()
operator|&&
name|defVal
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
condition|)
name|defVal
operator|=
name|defVal
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|defVal
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|QSqlField
name|f
argument_list|(
name|query
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|qDecodePSQLType
argument_list|(
name|query
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|setRequired
argument_list|(
name|query
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPrecision
argument_list|(
name|precision
argument_list|)
expr_stmt|;
name|f
operator|.
name|setDefaultValue
argument_list|(
name|defVal
argument_list|)
expr_stmt|;
name|f
operator|.
name|setSqlType
argument_list|(
name|query
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Postgres< 7.1 cannot handle outer joins
while|while
condition|(
name|query
operator|.
name|next
argument_list|()
condition|)
block|{
name|QString
name|defVal
decl_stmt|;
name|QString
name|stmt2
init|=
name|QLatin1String
argument_list|(
literal|"select pg_attrdef.adsrc from pg_attrdef where "
literal|"pg_attrdef.adrelid = %1 and pg_attrdef.adnum = %2 "
argument_list|)
decl_stmt|;
name|QSqlQuery
name|query2
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|query2
operator|.
name|exec
argument_list|(
name|stmt2
operator|.
name|arg
argument_list|(
name|query
operator|.
name|value
argument_list|(
literal|5
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|query
operator|.
name|value
argument_list|(
literal|6
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|query2
operator|.
name|isActive
argument_list|()
operator|&&
name|query2
operator|.
name|next
argument_list|()
condition|)
name|defVal
operator|=
name|query2
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|defVal
operator|.
name|isEmpty
argument_list|()
operator|&&
name|defVal
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
condition|)
name|defVal
operator|=
name|defVal
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|defVal
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|query
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|precision
init|=
name|query
operator|.
name|value
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
comment|// swap length and precision if length == -1
if|if
condition|(
name|len
operator|==
operator|-
literal|1
operator|&&
name|precision
operator|>
operator|-
literal|1
condition|)
block|{
name|len
operator|=
name|precision
operator|-
literal|4
expr_stmt|;
name|precision
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|QSqlField
name|f
argument_list|(
name|query
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|qDecodePSQLType
argument_list|(
name|query
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|setRequired
argument_list|(
name|query
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPrecision
argument_list|(
name|precision
argument_list|)
expr_stmt|;
name|f
operator|.
name|setDefaultValue
argument_list|(
name|defVal
argument_list|)
expr_stmt|;
name|f
operator|.
name|setSqlType
argument_list|(
name|query
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|info
return|;
block|}
end_function
begin_function
DECL|function|formatValue
name|QString
name|QPSQLDriver
operator|::
name|formatValue
parameter_list|(
specifier|const
name|QSqlField
modifier|&
name|field
parameter_list|,
name|bool
name|trimStrings
parameter_list|)
specifier|const
block|{
name|QString
name|r
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|field
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|DateTime
case|:
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
if|if
condition|(
name|field
operator|.
name|value
argument_list|()
operator|.
name|toDateTime
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QDate
name|dt
init|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toDateTime
argument_list|()
operator|.
name|date
argument_list|()
decl_stmt|;
name|QTime
name|tm
init|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toDateTime
argument_list|()
operator|.
name|time
argument_list|()
decl_stmt|;
comment|// msecs need to be right aligned otherwise psql interprets them wrong
name|r
operator|=
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|dt
operator|.
name|year
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|dt
operator|.
name|month
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|dt
operator|.
name|day
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|tm
operator|.
name|toString
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|tm
operator|.
name|msec
argument_list|()
argument_list|)
operator|.
name|rightJustified
argument_list|(
literal|3
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_DATESTRING
break|break;
case|case
name|QVariant
operator|::
name|Time
case|:
ifndef|#
directive|ifndef
name|QT_NO_DATESTRING
if|if
condition|(
name|field
operator|.
name|value
argument_list|()
operator|.
name|toTime
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|r
operator|=
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
operator|+
name|field
operator|.
name|value
argument_list|()
operator|.
name|toTime
argument_list|()
operator|.
name|toString
argument_list|(
name|QLatin1String
argument_list|(
literal|"hh:mm:ss.zzz"
argument_list|)
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
block|{
comment|// Escape '\' characters
name|r
operator|=
name|QSqlDriver
operator|::
name|formatValue
argument_list|(
name|field
argument_list|,
name|trimStrings
argument_list|)
expr_stmt|;
name|r
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\\\\"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Bool
case|:
if|if
condition|(
name|field
operator|.
name|value
argument_list|()
operator|.
name|toBool
argument_list|()
condition|)
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"TRUE"
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"FALSE"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|ByteArray
case|:
block|{
name|QByteArray
name|ba
argument_list|(
name|field
operator|.
name|value
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|size_t
name|len
decl_stmt|;
if|#
directive|if
name|defined
name|PG_VERSION_NUM
operator|&&
name|PG_VERSION_NUM
operator|-
literal|0
operator|>=
literal|80200
name|unsigned
name|char
modifier|*
name|data
init|=
name|PQescapeByteaConn
argument_list|(
name|d
operator|->
name|connection
argument_list|,
operator|(
name|unsigned
name|char
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|len
argument_list|)
decl_stmt|;
else|#
directive|else
name|unsigned
name|char
modifier|*
name|data
init|=
name|PQescapeBytea
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|len
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|r
operator|+=
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|r
operator|+=
name|QLatin1String
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|data
argument_list|)
expr_stmt|;
name|r
operator|+=
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|qPQfreemem
argument_list|(
name|data
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Double
case|:
block|{
name|double
name|val
init|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|isnan
argument_list|(
name|val
argument_list|)
condition|)
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"'NaN'"
argument_list|)
expr_stmt|;
else|else
block|{
name|int
name|res
init|=
name|isinf
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|1
condition|)
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"'Infinity'"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|res
operator|==
operator|-
literal|1
condition|)
name|r
operator|=
name|QLatin1String
argument_list|(
literal|"'-Infinity'"
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
name|QSqlDriver
operator|::
name|formatValue
argument_list|(
name|field
argument_list|,
name|trimStrings
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
name|r
operator|=
name|QSqlDriver
operator|::
name|formatValue
argument_list|(
name|field
argument_list|,
name|trimStrings
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|r
return|;
block|}
end_function
begin_function
DECL|function|escapeIdentifier
name|QString
name|QPSQLDriver
operator|::
name|escapeIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|identifier
parameter_list|,
name|IdentifierType
parameter_list|)
specifier|const
block|{
name|QString
name|res
init|=
name|identifier
decl_stmt|;
if|if
condition|(
operator|!
name|identifier
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|identifier
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
operator|&&
operator|!
name|identifier
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
condition|)
block|{
name|res
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\"\""
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\".\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|isOpen
name|bool
name|QPSQLDriver
operator|::
name|isOpen
parameter_list|()
specifier|const
block|{
return|return
name|PQstatus
argument_list|(
name|d
operator|->
name|connection
argument_list|)
operator|==
name|CONNECTION_OK
return|;
block|}
end_function
begin_function
DECL|function|protocol
name|QPSQLDriver
operator|::
name|Protocol
name|QPSQLDriver
operator|::
name|protocol
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|pro
return|;
block|}
end_function
begin_function
DECL|function|subscribeToNotification
name|bool
name|QPSQLDriver
operator|::
name|subscribeToNotification
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPSQLDriver::subscribeToNotificationImplementation: database not open."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|d
operator|->
name|seid
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPSQLDriver::subscribeToNotificationImplementation: already subscribing to '%s'."
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|socket
init|=
name|PQsocket
argument_list|(
name|d
operator|->
name|connection
argument_list|)
decl_stmt|;
if|if
condition|(
name|socket
condition|)
block|{
comment|// Add the name to the list of subscriptions here so that QSQLDriverPrivate::exec knows
comment|// to check for notifications immediately after executing the LISTEN
name|d
operator|->
name|seid
operator|<<
name|name
expr_stmt|;
name|QString
name|query
init|=
name|QLatin1String
argument_list|(
literal|"LISTEN "
argument_list|)
operator|+
name|escapeIdentifier
argument_list|(
name|name
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
decl_stmt|;
name|PGresult
modifier|*
name|result
init|=
name|d
operator|->
name|exec
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|PQresultStatus
argument_list|(
name|result
argument_list|)
operator|!=
name|PGRES_COMMAND_OK
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to subscribe"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|sn
condition|)
block|{
name|d
operator|->
name|sn
operator|=
operator|new
name|QSocketNotifier
argument_list|(
name|socket
argument_list|,
name|QSocketNotifier
operator|::
name|Read
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|d
operator|->
name|sn
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_handleNotification
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QPSQLDriver::subscribeToNotificationImplementation: PQsocket didn't return a valid socket to listen on"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|unsubscribeFromNotification
name|bool
name|QPSQLDriver
operator|::
name|unsubscribeFromNotification
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPSQLDriver::unsubscribeFromNotificationImplementation: database not open."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|seid
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QPSQLDriver::unsubscribeFromNotificationImplementation: not subscribed to '%s'."
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QString
name|query
init|=
name|QLatin1String
argument_list|(
literal|"UNLISTEN "
argument_list|)
operator|+
name|escapeIdentifier
argument_list|(
name|name
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
decl_stmt|;
name|PGresult
modifier|*
name|result
init|=
name|d
operator|->
name|exec
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|PQresultStatus
argument_list|(
name|result
argument_list|)
operator|!=
name|PGRES_COMMAND_OK
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to unsubscribe"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|seid
operator|.
name|removeAll
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|seid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|disconnect
argument_list|(
name|d
operator|->
name|sn
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|_q_handleNotification
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|d
operator|->
name|sn
expr_stmt|;
name|d
operator|->
name|sn
operator|=
literal|0
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|subscribedToNotifications
name|QStringList
name|QPSQLDriver
operator|::
name|subscribedToNotifications
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|seid
return|;
block|}
end_function
begin_function
DECL|function|_q_handleNotification
name|void
name|QPSQLDriver
operator|::
name|_q_handleNotification
parameter_list|(
name|int
parameter_list|)
block|{
name|d
operator|->
name|pendingNotifyCheck
operator|=
literal|false
expr_stmt|;
name|PQconsumeInput
argument_list|(
name|d
operator|->
name|connection
argument_list|)
expr_stmt|;
name|PGnotify
modifier|*
name|notify
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|notify
operator|=
name|PQnotifies
argument_list|(
name|d
operator|->
name|connection
argument_list|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|QString
name|name
argument_list|(
name|QLatin1String
argument_list|(
name|notify
operator|->
name|relname
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|seid
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|QString
name|payload
decl_stmt|;
if|#
directive|if
name|defined
name|PG_VERSION_NUM
operator|&&
name|PG_VERSION_NUM
operator|-
literal|0
operator|>=
literal|70400
if|if
condition|(
name|notify
operator|->
name|extra
condition|)
name|payload
operator|=
name|d
operator|->
name|isUtf8
condition|?
name|QString
operator|::
name|fromUtf8
argument_list|(
name|notify
operator|->
name|extra
argument_list|)
else|:
name|QString
operator|::
name|fromLatin1
argument_list|(
name|notify
operator|->
name|extra
argument_list|)
expr_stmt|;
endif|#
directive|endif
emit|emit
name|notification
argument_list|(
name|name
argument_list|)
emit|;
name|QSqlDriver
operator|::
name|NotificationSource
name|source
init|=
operator|(
name|notify
operator|->
name|be_pid
operator|==
name|PQbackendPID
argument_list|(
name|d
operator|->
name|connection
argument_list|)
operator|)
condition|?
name|QSqlDriver
operator|::
name|SelfSource
else|:
name|QSqlDriver
operator|::
name|OtherSource
decl_stmt|;
emit|emit
name|notification
argument_list|(
name|name
argument_list|,
name|source
argument_list|,
name|payload
argument_list|)
emit|;
block|}
else|else
name|qWarning
argument_list|(
literal|"QPSQLDriver: received notification for '%s' which isn't subscribed to."
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|qPQfreemem
argument_list|(
name|notify
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
