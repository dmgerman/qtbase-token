begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtSql module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSQL_PSQL_H
end_ifndef
begin_define
DECL|macro|QSQL_PSQL_H
define|#
directive|define
name|QSQL_PSQL_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|<QtSql/qsqlresult.h>
end_include
begin_include
include|#
directive|include
file|<QtSql/qsqldriver.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_PLUGIN
end_ifdef
begin_define
DECL|macro|Q_EXPORT_SQLDRIVER_PSQL
define|#
directive|define
name|Q_EXPORT_SQLDRIVER_PSQL
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_EXPORT_SQLDRIVER_PSQL
define|#
directive|define
name|Q_EXPORT_SQLDRIVER_PSQL
value|Q_SQL_EXPORT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_typedef
DECL|typedef|PGconn
typedef|typedef
name|struct
name|pg_conn
name|PGconn
typedef|;
end_typedef
begin_typedef
DECL|typedef|PGresult
typedef|typedef
name|struct
name|pg_result
name|PGresult
typedef|;
end_typedef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QPSQLResultPrivate
name|class
name|QPSQLResultPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPSQLDriverPrivate
name|class
name|QPSQLDriverPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPSQLDriver
name|class
name|QPSQLDriver
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QSqlRecordInfo
name|class
name|QSqlRecordInfo
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QPSQLResult
range|:
name|public
name|QSqlResult
block|{
name|friend
name|class
name|QPSQLResultPrivate
block|;
name|public
operator|:
name|QPSQLResult
argument_list|(
specifier|const
name|QPSQLDriver
operator|*
name|db
argument_list|,
specifier|const
name|QPSQLDriverPrivate
operator|*
name|p
argument_list|)
block|;
operator|~
name|QPSQLResult
argument_list|()
block|;
name|QVariant
name|handle
argument_list|()
specifier|const
block|;
name|void
name|virtual_hook
argument_list|(
argument|int id
argument_list|,
argument|void *data
argument_list|)
block|;
name|protected
operator|:
name|void
name|cleanup
argument_list|()
block|;
name|bool
name|fetch
argument_list|(
argument|int i
argument_list|)
block|;
name|bool
name|fetchFirst
argument_list|()
block|;
name|bool
name|fetchLast
argument_list|()
block|;
name|QVariant
name|data
argument_list|(
argument|int i
argument_list|)
block|;
name|bool
name|isNull
argument_list|(
argument|int field
argument_list|)
block|;
name|bool
name|reset
argument_list|(
specifier|const
name|QString
operator|&
name|query
argument_list|)
block|;
name|int
name|size
argument_list|()
block|;
name|int
name|numRowsAffected
argument_list|()
block|;
name|QSqlRecord
name|record
argument_list|()
specifier|const
block|;
name|QVariant
name|lastInsertId
argument_list|()
specifier|const
block|;
name|bool
name|prepare
argument_list|(
specifier|const
name|QString
operator|&
name|query
argument_list|)
block|;
name|bool
name|exec
argument_list|()
block|;
name|private
operator|:
name|QPSQLResultPrivate
operator|*
name|d
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_EXPORT_SQLDRIVER_PSQL
name|QPSQLDriver
range|:
name|public
name|QSqlDriver
block|{
name|Q_OBJECT
name|public
operator|:
expr|enum
name|Protocol
block|{
name|VersionUnknown
operator|=
operator|-
literal|1
block|,
name|Version6
operator|=
literal|6
block|,
name|Version7
operator|=
literal|7
block|,
name|Version71
operator|=
literal|8
block|,
name|Version73
operator|=
literal|9
block|,
name|Version74
operator|=
literal|10
block|,
name|Version8
operator|=
literal|11
block|,
name|Version81
operator|=
literal|12
block|,
name|Version82
operator|=
literal|13
block|,
name|Version83
operator|=
literal|14
block|,
name|Version84
operator|=
literal|15
block|,
name|Version9
operator|=
literal|16
block|,     }
block|;
name|explicit
name|QPSQLDriver
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|explicit
name|QPSQLDriver
argument_list|(
name|PGconn
operator|*
name|conn
argument_list|,
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|QPSQLDriver
argument_list|()
block|;
name|bool
name|hasFeature
argument_list|(
argument|DriverFeature f
argument_list|)
specifier|const
block|;
name|bool
name|open
argument_list|(
argument|const QString& db
argument_list|,
argument|const QString& user
argument_list|,
argument|const QString& password
argument_list|,
argument|const QString& host
argument_list|,
argument|int port
argument_list|,
argument|const QString& connOpts
argument_list|)
block|;
name|bool
name|isOpen
argument_list|()
specifier|const
block|;
name|void
name|close
argument_list|()
block|;
name|QSqlResult
operator|*
name|createResult
argument_list|()
specifier|const
block|;
name|QStringList
name|tables
argument_list|(
argument|QSql::TableType
argument_list|)
specifier|const
block|;
name|QSqlIndex
name|primaryIndex
argument_list|(
argument|const QString& tablename
argument_list|)
specifier|const
block|;
name|QSqlRecord
name|record
argument_list|(
argument|const QString& tablename
argument_list|)
specifier|const
block|;
name|Protocol
name|protocol
argument_list|()
specifier|const
block|;
name|QVariant
name|handle
argument_list|()
specifier|const
block|;
name|QString
name|escapeIdentifier
argument_list|(
argument|const QString&identifier
argument_list|,
argument|IdentifierType type
argument_list|)
specifier|const
block|;
name|QString
name|formatValue
argument_list|(
argument|const QSqlField&field
argument_list|,
argument|bool trimStrings
argument_list|)
specifier|const
block|;
name|bool
name|subscribeToNotification
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|bool
name|unsubscribeFromNotification
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|QStringList
name|subscribedToNotifications
argument_list|()
specifier|const
block|;
name|protected
operator|:
name|bool
name|beginTransaction
argument_list|()
block|;
name|bool
name|commitTransaction
argument_list|()
block|;
name|bool
name|rollbackTransaction
argument_list|()
block|;
name|private
name|Q_SLOTS
operator|:
name|void
name|_q_handleNotification
argument_list|(
name|int
argument_list|)
block|;
name|private
operator|:
name|void
name|init
argument_list|()
block|;
name|QPSQLDriverPrivate
operator|*
name|d
block|; }
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSQL_PSQL_H
end_comment
end_unit
