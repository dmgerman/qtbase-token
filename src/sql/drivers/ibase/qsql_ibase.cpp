begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtSql module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsql_ibase_p.h"
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qsqlerror.h>
end_include
begin_include
include|#
directive|include
file|<qsqlfield.h>
end_include
begin_include
include|#
directive|include
file|<qsqlindex.h>
end_include
begin_include
include|#
directive|include
file|<qsqlquery.h>
end_include
begin_include
include|#
directive|include
file|<QtSql/private/qsqlcachedresult_p.h>
end_include
begin_include
include|#
directive|include
file|<QtSql/private/qsqldriver_p.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QVarLengthArray>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|macro|FBVERSION
define|#
directive|define
name|FBVERSION
value|SQL_DIALECT_V6
ifndef|#
directive|ifndef
name|SQLDA_CURRENT_VERSION
DECL|macro|SQLDA_CURRENT_VERSION
define|#
directive|define
name|SQLDA_CURRENT_VERSION
value|SQLDA_VERSION1
endif|#
directive|endif
DECL|enumerator|QIBaseChunkSize
name|enum
type|{
name|QIBaseChunkSize
init|=
name|SHRT_MAX
operator|/
literal|2
end_decl_stmt
begin_if
unit|};
if|#
directive|if
name|defined
argument_list|(
name|FB_API_VER
argument_list|)
operator|&&
name|FB_API_VER
operator|>=
literal|20
end_if
begin_decl_stmt
DECL|function|getIBaseError
specifier|static
name|bool
name|getIBaseError
argument_list|(
name|QString
operator|&
name|msg
argument_list|,
specifier|const
name|ISC_STATUS
operator|*
name|status
argument_list|,
name|ISC_LONG
operator|&
name|sqlcode
argument_list|,
name|QTextCodec
operator|*
name|tc
argument_list|)
else|#
directive|else
decl|static
name|bool
name|getIBaseError
argument_list|(
name|QString
operator|&
name|msg
argument_list|,
name|ISC_STATUS
operator|*
name|status
argument_list|,
name|ISC_LONG
operator|&
name|sqlcode
argument_list|,
name|QTextCodec
operator|*
name|tc
argument_list|)
endif|#
directive|endif
argument_list|{     if
operator|(
name|status
index|[
literal|0
index|]
operator|!=
literal|1
operator|||
name|status
index|[
literal|1
index|]
operator|<=
literal|0
operator|)
return|return
literal|false
return|;
end_decl_stmt
begin_expr_stmt
name|msg
operator|.
name|clear
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|sqlcode
operator|=
name|isc_sqlcode
argument_list|(
name|status
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|char
name|buf
index|[
literal|512
index|]
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|FB_API_VER
argument_list|)
operator|&&
name|FB_API_VER
operator|>=
literal|20
end_if
begin_while
while|while
condition|(
name|fb_interpret
argument_list|(
name|buf
argument_list|,
literal|512
argument_list|,
operator|&
name|status
argument_list|)
condition|)
block|{
else|#
directive|else
while|while
condition|(
name|isc_interprete
argument_list|(
name|buf
argument_list|,
operator|&
name|status
argument_list|)
condition|)
block|{
endif|#
directive|endif
if|if
condition|(
operator|!
name|msg
operator|.
name|isEmpty
argument_list|()
condition|)
name|msg
operator|+=
name|QLatin1String
argument_list|(
literal|" - "
argument_list|)
expr_stmt|;
if|if
condition|(
name|tc
condition|)
name|msg
operator|+=
name|tc
operator|->
name|toUnicode
argument_list|(
name|buf
argument_list|)
expr_stmt|;
else|else
name|msg
operator|+=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_while
begin_function
DECL|function|createDA
specifier|static
name|void
name|createDA
parameter_list|(
name|XSQLDA
modifier|*
modifier|&
name|sqlda
parameter_list|)
block|{
name|sqlda
operator|=
operator|(
name|XSQLDA
operator|*
operator|)
name|malloc
argument_list|(
name|XSQLDA_LENGTH
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlda
operator|==
operator|(
name|XSQLDA
operator|*
operator|)
literal|0
condition|)
return|return;
name|sqlda
operator|->
name|sqln
operator|=
literal|1
expr_stmt|;
name|sqlda
operator|->
name|sqld
operator|=
literal|0
expr_stmt|;
name|sqlda
operator|->
name|version
operator|=
name|SQLDA_CURRENT_VERSION
expr_stmt|;
name|sqlda
operator|->
name|sqlvar
index|[
literal|0
index|]
operator|.
name|sqlind
operator|=
literal|0
expr_stmt|;
name|sqlda
operator|->
name|sqlvar
index|[
literal|0
index|]
operator|.
name|sqldata
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|enlargeDA
specifier|static
name|void
name|enlargeDA
parameter_list|(
name|XSQLDA
modifier|*
modifier|&
name|sqlda
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|sqlda
operator|!=
operator|(
name|XSQLDA
operator|*
operator|)
literal|0
condition|)
name|free
argument_list|(
name|sqlda
argument_list|)
expr_stmt|;
name|sqlda
operator|=
operator|(
name|XSQLDA
operator|*
operator|)
name|malloc
argument_list|(
name|XSQLDA_LENGTH
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlda
operator|==
operator|(
name|XSQLDA
operator|*
operator|)
literal|0
condition|)
return|return;
name|sqlda
operator|->
name|sqln
operator|=
name|n
expr_stmt|;
name|sqlda
operator|->
name|version
operator|=
name|SQLDA_CURRENT_VERSION
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initDA
specifier|static
name|void
name|initDA
parameter_list|(
name|XSQLDA
modifier|*
name|sqlda
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sqlda
operator|->
name|sqld
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqltype
operator|&
operator|~
literal|1
condition|)
block|{
case|case
name|SQL_INT64
case|:
case|case
name|SQL_LONG
case|:
case|case
name|SQL_SHORT
case|:
case|case
name|SQL_FLOAT
case|:
case|case
name|SQL_DOUBLE
case|:
case|case
name|SQL_TIMESTAMP
case|:
case|case
name|SQL_TYPE_TIME
case|:
case|case
name|SQL_TYPE_DATE
case|:
case|case
name|SQL_TEXT
case|:
case|case
name|SQL_BLOB
case|:
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqldata
operator|=
operator|new
name|char
index|[
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqllen
index|]
expr_stmt|;
break|break;
case|case
name|SQL_ARRAY
case|:
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqldata
operator|=
operator|new
name|char
index|[
sizeof|sizeof
argument_list|(
name|ISC_QUAD
argument_list|)
index|]
expr_stmt|;
name|memset
argument_list|(
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqldata
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|ISC_QUAD
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_VARYING
case|:
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqldata
operator|=
operator|new
name|char
index|[
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqllen
operator|+
sizeof|sizeof
argument_list|(
name|short
argument_list|)
index|]
expr_stmt|;
break|break;
default|default:
comment|// not supported - do not bind.
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqldata
operator|=
literal|0
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqltype
operator|&
literal|1
condition|)
block|{
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqlind
operator|=
operator|new
name|short
index|[
literal|1
index|]
expr_stmt|;
operator|*
operator|(
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqlind
operator|)
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqlind
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|delDA
specifier|static
name|void
name|delDA
parameter_list|(
name|XSQLDA
modifier|*
modifier|&
name|sqlda
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sqlda
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sqlda
operator|->
name|sqld
condition|;
operator|++
name|i
control|)
block|{
operator|delete
index|[]
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqlind
expr_stmt|;
operator|delete
index|[]
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqldata
expr_stmt|;
block|}
name|free
argument_list|(
name|sqlda
argument_list|)
expr_stmt|;
name|sqlda
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qIBaseTypeName
specifier|static
name|QVariant
operator|::
name|Type
name|qIBaseTypeName
parameter_list|(
name|int
name|iType
parameter_list|,
name|bool
name|hasScale
parameter_list|)
block|{
switch|switch
condition|(
name|iType
condition|)
block|{
case|case
name|blr_varying
case|:
case|case
name|blr_varying2
case|:
case|case
name|blr_text
case|:
case|case
name|blr_cstring
case|:
case|case
name|blr_cstring2
case|:
return|return
name|QVariant
operator|::
name|String
return|;
case|case
name|blr_sql_time
case|:
return|return
name|QVariant
operator|::
name|Time
return|;
case|case
name|blr_sql_date
case|:
return|return
name|QVariant
operator|::
name|Date
return|;
case|case
name|blr_timestamp
case|:
return|return
name|QVariant
operator|::
name|DateTime
return|;
case|case
name|blr_blob
case|:
return|return
name|QVariant
operator|::
name|ByteArray
return|;
case|case
name|blr_quad
case|:
case|case
name|blr_short
case|:
case|case
name|blr_long
case|:
return|return
operator|(
name|hasScale
condition|?
name|QVariant
operator|::
name|Double
else|:
name|QVariant
operator|::
name|Int
operator|)
return|;
case|case
name|blr_int64
case|:
return|return
operator|(
name|hasScale
condition|?
name|QVariant
operator|::
name|Double
else|:
name|QVariant
operator|::
name|LongLong
operator|)
return|;
case|case
name|blr_float
case|:
case|case
name|blr_d_float
case|:
case|case
name|blr_double
case|:
return|return
name|QVariant
operator|::
name|Double
return|;
block|}
name|qWarning
argument_list|(
literal|"qIBaseTypeName: unknown datatype: %d"
argument_list|,
name|iType
argument_list|)
expr_stmt|;
return|return
name|QVariant
operator|::
name|Invalid
return|;
block|}
end_function
begin_function
DECL|function|qIBaseTypeName2
specifier|static
name|QVariant
operator|::
name|Type
name|qIBaseTypeName2
parameter_list|(
name|int
name|iType
parameter_list|,
name|bool
name|hasScale
parameter_list|)
block|{
switch|switch
condition|(
name|iType
operator|&
operator|~
literal|1
condition|)
block|{
case|case
name|SQL_VARYING
case|:
case|case
name|SQL_TEXT
case|:
return|return
name|QVariant
operator|::
name|String
return|;
case|case
name|SQL_LONG
case|:
case|case
name|SQL_SHORT
case|:
return|return
operator|(
name|hasScale
condition|?
name|QVariant
operator|::
name|Double
else|:
name|QVariant
operator|::
name|Int
operator|)
return|;
case|case
name|SQL_INT64
case|:
return|return
operator|(
name|hasScale
condition|?
name|QVariant
operator|::
name|Double
else|:
name|QVariant
operator|::
name|LongLong
operator|)
return|;
case|case
name|SQL_FLOAT
case|:
case|case
name|SQL_DOUBLE
case|:
return|return
name|QVariant
operator|::
name|Double
return|;
case|case
name|SQL_TIMESTAMP
case|:
return|return
name|QVariant
operator|::
name|DateTime
return|;
case|case
name|SQL_TYPE_TIME
case|:
return|return
name|QVariant
operator|::
name|Time
return|;
case|case
name|SQL_TYPE_DATE
case|:
return|return
name|QVariant
operator|::
name|Date
return|;
case|case
name|SQL_ARRAY
case|:
return|return
name|QVariant
operator|::
name|List
return|;
case|case
name|SQL_BLOB
case|:
return|return
name|QVariant
operator|::
name|ByteArray
return|;
default|default:
return|return
name|QVariant
operator|::
name|Invalid
return|;
block|}
block|}
end_function
begin_function
DECL|function|toTimeStamp
specifier|static
name|ISC_TIMESTAMP
name|toTimeStamp
parameter_list|(
specifier|const
name|QDateTime
modifier|&
name|dt
parameter_list|)
block|{
specifier|static
specifier|const
name|QTime
name|midnight
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|QDate
name|basedate
argument_list|(
literal|1858
argument_list|,
literal|11
argument_list|,
literal|17
argument_list|)
decl_stmt|;
name|ISC_TIMESTAMP
name|ts
decl_stmt|;
name|ts
operator|.
name|timestamp_time
operator|=
name|midnight
operator|.
name|msecsTo
argument_list|(
name|dt
operator|.
name|time
argument_list|()
argument_list|)
operator|*
literal|10
expr_stmt|;
name|ts
operator|.
name|timestamp_date
operator|=
name|basedate
operator|.
name|daysTo
argument_list|(
name|dt
operator|.
name|date
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ts
return|;
block|}
end_function
begin_function
DECL|function|fromTimeStamp
specifier|static
name|QDateTime
name|fromTimeStamp
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|)
block|{
specifier|static
specifier|const
name|QDate
name|bd
argument_list|(
literal|1858
argument_list|,
literal|11
argument_list|,
literal|17
argument_list|)
decl_stmt|;
name|QTime
name|t
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QDate
name|d
decl_stmt|;
comment|// have to demangle the structure ourselves because isc_decode_time
comment|// strips the msecs
name|t
operator|=
name|t
operator|.
name|addMSecs
argument_list|(
name|int
argument_list|(
operator|(
operator|(
name|ISC_TIMESTAMP
operator|*
operator|)
name|buffer
operator|)
operator|->
name|timestamp_time
operator|/
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
name|bd
operator|.
name|addDays
argument_list|(
name|int
argument_list|(
operator|(
operator|(
name|ISC_TIMESTAMP
operator|*
operator|)
name|buffer
operator|)
operator|->
name|timestamp_date
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QDateTime
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|toTime
specifier|static
name|ISC_TIME
name|toTime
parameter_list|(
specifier|const
name|QTime
modifier|&
name|t
parameter_list|)
block|{
specifier|static
specifier|const
name|QTime
name|midnight
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|(
name|ISC_TIME
operator|)
name|midnight
operator|.
name|msecsTo
argument_list|(
name|t
argument_list|)
operator|*
literal|10
return|;
block|}
end_function
begin_function
DECL|function|fromTime
specifier|static
name|QTime
name|fromTime
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|)
block|{
name|QTime
name|t
decl_stmt|;
comment|// have to demangle the structure ourselves because isc_decode_time
comment|// strips the msecs
name|t
operator|=
name|t
operator|.
name|addMSecs
argument_list|(
name|int
argument_list|(
operator|(
operator|*
operator|(
name|ISC_TIME
operator|*
operator|)
name|buffer
operator|)
operator|/
literal|10
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|toDate
specifier|static
name|ISC_DATE
name|toDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|t
parameter_list|)
block|{
specifier|static
specifier|const
name|QDate
name|basedate
argument_list|(
literal|1858
argument_list|,
literal|11
argument_list|,
literal|17
argument_list|)
decl_stmt|;
name|ISC_DATE
name|date
decl_stmt|;
name|date
operator|=
name|basedate
operator|.
name|daysTo
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|date
return|;
block|}
end_function
begin_function
DECL|function|fromDate
specifier|static
name|QDate
name|fromDate
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|)
block|{
specifier|static
specifier|const
name|QDate
name|bd
argument_list|(
literal|1858
argument_list|,
literal|11
argument_list|,
literal|17
argument_list|)
decl_stmt|;
name|QDate
name|d
decl_stmt|;
comment|// have to demangle the structure ourselves because isc_decode_time
comment|// strips the msecs
name|d
operator|=
name|bd
operator|.
name|addDays
argument_list|(
name|int
argument_list|(
operator|(
operator|(
name|ISC_TIMESTAMP
operator|*
operator|)
name|buffer
operator|)
operator|->
name|timestamp_date
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_function
DECL|function|encodeString
specifier|static
name|QByteArray
name|encodeString
parameter_list|(
name|QTextCodec
modifier|*
name|tc
parameter_list|,
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
if|if
condition|(
name|tc
condition|)
return|return
name|tc
operator|->
name|fromUnicode
argument_list|(
name|str
argument_list|)
return|;
return|return
name|str
operator|.
name|toUtf8
argument_list|()
return|;
block|}
end_function
begin_struct
DECL|struct|QIBaseEventBuffer
struct|struct
name|QIBaseEventBuffer
block|{
if|#
directive|if
name|defined
argument_list|(
name|FB_API_VER
argument_list|)
operator|&&
name|FB_API_VER
operator|>=
literal|20
DECL|member|eventBuffer
name|ISC_UCHAR
modifier|*
name|eventBuffer
decl_stmt|;
DECL|member|resultBuffer
name|ISC_UCHAR
modifier|*
name|resultBuffer
decl_stmt|;
else|#
directive|else
name|char
modifier|*
name|eventBuffer
decl_stmt|;
name|char
modifier|*
name|resultBuffer
decl_stmt|;
endif|#
directive|endif
DECL|member|bufferLength
name|ISC_LONG
name|bufferLength
decl_stmt|;
DECL|member|eventId
name|ISC_LONG
name|eventId
decl_stmt|;
DECL|enum|QIBaseSubscriptionState
DECL|enumerator|Starting
DECL|enumerator|Subscribed
DECL|enumerator|Finished
enum|enum
name|QIBaseSubscriptionState
block|{
name|Starting
block|,
name|Subscribed
block|,
name|Finished
block|}
enum|;
DECL|member|subscriptionState
name|QIBaseSubscriptionState
name|subscriptionState
decl_stmt|;
block|}
struct|;
end_struct
begin_class
DECL|class|QIBaseDriverPrivate
class|class
name|QIBaseDriverPrivate
super|:
specifier|public
name|QSqlDriverPrivate
block|{
name|Q_DECLARE_PUBLIC
parameter_list|(
name|QIBaseDriver
parameter_list|)
specifier|public
private|:
DECL|function|QIBaseDriverPrivate
name|QIBaseDriverPrivate
parameter_list|()
member_init_list|:
name|QSqlDriverPrivate
argument_list|()
member_init_list|,
name|ibase
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|trans
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|tc
argument_list|(
literal|0
argument_list|)
block|{
name|dbmsType
operator|=
name|Interbase
expr_stmt|;
block|}
DECL|function|isError
name|bool
name|isError
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
name|QSqlError
operator|::
name|ErrorType
name|typ
init|=
name|QSqlError
operator|::
name|UnknownError
parameter_list|)
block|{
name|Q_Q
argument_list|(
name|QIBaseDriver
argument_list|)
expr_stmt|;
name|QString
name|imsg
decl_stmt|;
name|ISC_LONG
name|sqlcode
decl_stmt|;
if|if
condition|(
operator|!
name|getIBaseError
argument_list|(
name|imsg
argument_list|,
name|status
argument_list|,
name|sqlcode
argument_list|,
name|tc
argument_list|)
condition|)
return|return
literal|false
return|;
name|q
operator|->
name|setLastError
argument_list|(
name|QSqlError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QIBaseDriver"
argument_list|,
name|msg
argument_list|)
argument_list|,
name|imsg
argument_list|,
name|typ
argument_list|,
name|int
argument_list|(
name|sqlcode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
public|public:
DECL|member|ibase
name|isc_db_handle
name|ibase
decl_stmt|;
DECL|member|trans
name|isc_tr_handle
name|trans
decl_stmt|;
DECL|member|tc
name|QTextCodec
modifier|*
name|tc
decl_stmt|;
DECL|member|status
name|ISC_STATUS
name|status
index|[
literal|20
index|]
decl_stmt|;
DECL|member|eventBuffers
name|QMap
argument_list|<
name|QString
argument_list|,
name|QIBaseEventBuffer
modifier|*
argument_list|>
name|eventBuffers
decl_stmt|;
block|}
class|;
end_class
begin_typedef
DECL|typedef|QIBaseBufferDriverMap
typedef|typedef
name|QMap
argument_list|<
name|void
modifier|*
argument_list|,
name|QIBaseDriver
modifier|*
argument_list|>
name|QIBaseBufferDriverMap
typedef|;
end_typedef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QIBaseBufferDriverMap
argument_list|,
argument|qBufferDriverMap
argument_list|)
end_macro
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|QMutex
argument_list|,
name|qMutex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|qFreeEventBuffer
specifier|static
name|void
name|qFreeEventBuffer
parameter_list|(
name|QIBaseEventBuffer
modifier|*
name|eBuffer
parameter_list|)
block|{
name|qMutex
argument_list|()
operator|->
name|lock
argument_list|()
expr_stmt|;
name|qBufferDriverMap
argument_list|()
operator|->
name|remove
argument_list|(
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|eBuffer
operator|->
name|resultBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|qMutex
argument_list|()
operator|->
name|unlock
argument_list|()
expr_stmt|;
operator|delete
name|eBuffer
expr_stmt|;
block|}
end_function
begin_class_decl
class_decl|class
name|QIBaseResultPrivate
class_decl|;
end_class_decl
begin_class
DECL|class|QIBaseResult
class|class
name|QIBaseResult
super|:
specifier|public
name|QSqlCachedResult
block|{
friend|friend
class_decl|class
name|QIBaseResultPrivate
class_decl|;
public|public:
specifier|explicit
name|QIBaseResult
parameter_list|(
specifier|const
name|QIBaseDriver
modifier|*
name|db
parameter_list|)
constructor_decl|;
specifier|virtual
name|~
name|QIBaseResult
parameter_list|()
destructor_decl|;
name|bool
name|prepare
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
function_decl|;
name|bool
name|exec
parameter_list|()
function_decl|;
name|QVariant
name|handle
parameter_list|()
specifier|const
function_decl|;
protected|protected:
name|bool
name|gotoNext
parameter_list|(
name|QSqlCachedResult
operator|::
name|ValueCache
modifier|&
name|row
parameter_list|,
name|int
name|rowIdx
parameter_list|)
function_decl|;
name|bool
name|reset
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
function_decl|;
name|int
name|size
parameter_list|()
function_decl|;
name|int
name|numRowsAffected
parameter_list|()
function_decl|;
name|QSqlRecord
name|record
parameter_list|()
specifier|const
function_decl|;
private|private:
DECL|member|d
name|QIBaseResultPrivate
modifier|*
name|d
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QIBaseResultPrivate
class|class
name|QIBaseResultPrivate
block|{
public|public:
name|QIBaseResultPrivate
parameter_list|(
name|QIBaseResult
modifier|*
name|d
parameter_list|,
specifier|const
name|QIBaseDriver
modifier|*
name|ddb
parameter_list|)
constructor_decl|;
DECL|function|~QIBaseResultPrivate
name|~
name|QIBaseResultPrivate
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
name|void
name|cleanup
parameter_list|()
function_decl|;
DECL|function|isError
name|bool
name|isError
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
name|QSqlError
operator|::
name|ErrorType
name|typ
init|=
name|QSqlError
operator|::
name|UnknownError
parameter_list|)
block|{
name|QString
name|imsg
decl_stmt|;
name|ISC_LONG
name|sqlcode
decl_stmt|;
if|if
condition|(
operator|!
name|getIBaseError
argument_list|(
name|imsg
argument_list|,
name|status
argument_list|,
name|sqlcode
argument_list|,
name|tc
argument_list|)
condition|)
return|return
literal|false
return|;
name|q
operator|->
name|setLastError
argument_list|(
name|QSqlError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QIBaseResult"
argument_list|,
name|msg
argument_list|)
argument_list|,
name|imsg
argument_list|,
name|typ
argument_list|,
name|int
argument_list|(
name|sqlcode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|bool
name|transaction
parameter_list|()
function_decl|;
name|bool
name|commit
parameter_list|()
function_decl|;
name|bool
name|isSelect
parameter_list|()
function_decl|;
name|QVariant
name|fetchBlob
parameter_list|(
name|ISC_QUAD
modifier|*
name|bId
parameter_list|)
function_decl|;
name|bool
name|writeBlob
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|ba
parameter_list|)
function_decl|;
name|QVariant
name|fetchArray
parameter_list|(
name|int
name|pos
parameter_list|,
name|ISC_QUAD
modifier|*
name|arr
parameter_list|)
function_decl|;
name|bool
name|writeArray
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|list
parameter_list|)
function_decl|;
public|public:
DECL|member|q
name|QIBaseResult
modifier|*
name|q
decl_stmt|;
DECL|member|db
specifier|const
name|QIBaseDriver
modifier|*
name|db
decl_stmt|;
DECL|member|status
name|ISC_STATUS
name|status
index|[
literal|20
index|]
decl_stmt|;
DECL|member|trans
name|isc_tr_handle
name|trans
decl_stmt|;
comment|//indicator whether we have a local transaction or a transaction on driver level
DECL|member|localTransaction
name|bool
name|localTransaction
decl_stmt|;
DECL|member|stmt
name|isc_stmt_handle
name|stmt
decl_stmt|;
DECL|member|ibase
name|isc_db_handle
name|ibase
decl_stmt|;
DECL|member|sqlda
name|XSQLDA
modifier|*
name|sqlda
decl_stmt|;
comment|// output sqlda
DECL|member|inda
name|XSQLDA
modifier|*
name|inda
decl_stmt|;
comment|// input parameters
DECL|member|queryType
name|int
name|queryType
decl_stmt|;
DECL|member|tc
name|QTextCodec
modifier|*
name|tc
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QIBaseResultPrivate
name|QIBaseResultPrivate
operator|::
name|QIBaseResultPrivate
parameter_list|(
name|QIBaseResult
modifier|*
name|d
parameter_list|,
specifier|const
name|QIBaseDriver
modifier|*
name|ddb
parameter_list|)
member_init_list|:
name|q
argument_list|(
name|d
argument_list|)
member_init_list|,
name|db
argument_list|(
name|ddb
argument_list|)
member_init_list|,
name|trans
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|stmt
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|ibase
argument_list|(
name|ddb
operator|->
name|d_func
argument_list|()
operator|->
name|ibase
argument_list|)
member_init_list|,
name|sqlda
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|inda
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|queryType
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|tc
argument_list|(
name|ddb
operator|->
name|d_func
argument_list|()
operator|->
name|tc
argument_list|)
block|{
name|localTransaction
operator|=
operator|(
name|ddb
operator|->
name|d_func
argument_list|()
operator|->
name|ibase
operator|==
literal|0
operator|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|cleanup
name|void
name|QIBaseResultPrivate
operator|::
name|cleanup
parameter_list|()
block|{
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|localTransaction
condition|)
name|trans
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|stmt
condition|)
block|{
name|isc_dsql_free_statement
argument_list|(
name|status
argument_list|,
operator|&
name|stmt
argument_list|,
name|DSQL_drop
argument_list|)
expr_stmt|;
name|stmt
operator|=
literal|0
expr_stmt|;
block|}
name|delDA
argument_list|(
name|sqlda
argument_list|)
expr_stmt|;
name|delDA
argument_list|(
name|inda
argument_list|)
expr_stmt|;
name|queryType
operator|=
operator|-
literal|1
expr_stmt|;
name|q
operator|->
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeBlob
name|bool
name|QIBaseResultPrivate
operator|::
name|writeBlob
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|ba
parameter_list|)
block|{
name|isc_blob_handle
name|handle
init|=
literal|0
decl_stmt|;
name|ISC_QUAD
modifier|*
name|bId
init|=
operator|(
name|ISC_QUAD
operator|*
operator|)
name|inda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqldata
decl_stmt|;
name|isc_create_blob2
argument_list|(
name|status
argument_list|,
operator|&
name|ibase
argument_list|,
operator|&
name|trans
argument_list|,
operator|&
name|handle
argument_list|,
name|bId
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Unable to create BLOB"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|ba
operator|.
name|size
argument_list|()
condition|)
block|{
name|isc_put_segment
argument_list|(
name|status
argument_list|,
operator|&
name|handle
argument_list|,
name|qMin
argument_list|(
name|ba
operator|.
name|size
argument_list|()
operator|-
name|i
argument_list|,
name|int
argument_list|(
name|QIBaseChunkSize
argument_list|)
argument_list|)
argument_list|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|ba
operator|.
name|data
argument_list|()
argument_list|)
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Unable to write BLOB"
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
name|i
operator|+=
name|qMin
argument_list|(
name|ba
operator|.
name|size
argument_list|()
operator|-
name|i
argument_list|,
name|int
argument_list|(
name|QIBaseChunkSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|isc_close_blob
argument_list|(
name|status
argument_list|,
operator|&
name|handle
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fetchBlob
name|QVariant
name|QIBaseResultPrivate
operator|::
name|fetchBlob
parameter_list|(
name|ISC_QUAD
modifier|*
name|bId
parameter_list|)
block|{
name|isc_blob_handle
name|handle
init|=
literal|0
decl_stmt|;
name|isc_open_blob2
argument_list|(
name|status
argument_list|,
operator|&
name|ibase
argument_list|,
operator|&
name|trans
argument_list|,
operator|&
name|handle
argument_list|,
name|bId
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Unable to open BLOB"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|unsigned
name|short
name|len
init|=
literal|0
decl_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|int
name|chunkSize
init|=
name|QIBaseChunkSize
decl_stmt|;
name|ba
operator|.
name|resize
argument_list|(
name|chunkSize
argument_list|)
expr_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|isc_get_segment
argument_list|(
name|status
argument_list|,
operator|&
name|handle
argument_list|,
operator|&
name|len
argument_list|,
name|chunkSize
argument_list|,
name|ba
operator|.
name|data
argument_list|()
operator|+
name|read
argument_list|)
operator|==
literal|0
operator|||
name|status
index|[
literal|1
index|]
operator|==
name|isc_segment
condition|)
block|{
name|read
operator|+=
name|len
expr_stmt|;
name|ba
operator|.
name|resize
argument_list|(
name|read
operator|+
name|chunkSize
argument_list|)
expr_stmt|;
block|}
name|ba
operator|.
name|resize
argument_list|(
name|read
argument_list|)
expr_stmt|;
name|bool
name|isErr
init|=
operator|(
name|status
index|[
literal|1
index|]
operator|==
name|isc_segstr_eof
condition|?
literal|false
else|:
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Unable to read BLOB"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
operator|)
decl_stmt|;
name|isc_close_blob
argument_list|(
name|status
argument_list|,
operator|&
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|isErr
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|ba
operator|.
name|resize
argument_list|(
name|read
argument_list|)
expr_stmt|;
return|return
name|ba
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|toList
specifier|static
name|QList
argument_list|<
name|QVariant
argument_list|>
name|toList
parameter_list|(
name|char
modifier|*
modifier|*
name|buf
parameter_list|,
name|int
name|count
parameter_list|,
name|T
modifier|*
init|=
literal|0
parameter_list|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|res
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|res
operator|.
name|append
argument_list|(
operator|*
operator|(
name|T
operator|*
operator|)
operator|(
operator|*
name|buf
operator|)
argument_list|)
expr_stmt|;
operator|*
name|buf
operator|+=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_comment
comment|/* char** ? seems like bad influence from oracle ... */
end_comment
begin_function
template|template
parameter_list|<>
DECL|function|toList
name|QList
argument_list|<
name|QVariant
argument_list|>
name|toList
argument_list|<
name|long
argument_list|>
parameter_list|(
name|char
modifier|*
modifier|*
name|buf
parameter_list|,
name|int
name|count
parameter_list|,
name|long
modifier|*
parameter_list|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|res
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|long
argument_list|)
condition|)
name|res
operator|.
name|append
argument_list|(
name|int
argument_list|(
operator|(
operator|*
operator|(
name|long
operator|*
operator|)
operator|(
operator|*
name|buf
operator|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|res
operator|.
name|append
argument_list|(
call|(
name|qint64
call|)
argument_list|(
operator|*
operator|(
name|long
operator|*
operator|)
operator|(
operator|*
name|buf
operator|)
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|buf
operator|+=
sizeof|sizeof
argument_list|(
name|long
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|readArrayBuffer
specifier|static
name|char
modifier|*
name|readArrayBuffer
parameter_list|(
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|list
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|,
name|short
name|curDim
parameter_list|,
name|short
modifier|*
name|numElements
parameter_list|,
name|ISC_ARRAY_DESC
modifier|*
name|arrayDesc
parameter_list|,
name|QTextCodec
modifier|*
name|tc
parameter_list|)
block|{
specifier|const
name|short
name|dim
init|=
name|arrayDesc
operator|->
name|array_desc_dimensions
operator|-
literal|1
decl_stmt|;
specifier|const
name|unsigned
name|char
name|dataType
init|=
name|arrayDesc
operator|->
name|array_desc_dtype
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|valList
decl_stmt|;
name|unsigned
name|short
name|strLen
init|=
name|arrayDesc
operator|->
name|array_desc_length
decl_stmt|;
if|if
condition|(
name|curDim
operator|!=
name|dim
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numElements
index|[
name|curDim
index|]
condition|;
operator|++
name|i
control|)
name|buffer
operator|=
name|readArrayBuffer
argument_list|(
name|list
argument_list|,
name|buffer
argument_list|,
name|curDim
operator|+
literal|1
argument_list|,
name|numElements
argument_list|,
name|arrayDesc
argument_list|,
name|tc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|dataType
condition|)
block|{
case|case
name|blr_varying
case|:
case|case
name|blr_varying2
case|:
name|strLen
operator|+=
literal|2
expr_stmt|;
comment|// for the two terminating null values
case|case
name|blr_text
case|:
case|case
name|blr_text2
case|:
block|{
name|int
name|o
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numElements
index|[
name|dim
index|]
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|o
operator|=
literal|0
init|;
name|o
operator|<
name|strLen
operator|&&
name|buffer
index|[
name|o
index|]
operator|!=
literal|0
condition|;
operator|++
name|o
control|)
empty_stmt|;
if|if
condition|(
name|tc
condition|)
name|valList
operator|.
name|append
argument_list|(
name|tc
operator|->
name|toUnicode
argument_list|(
name|buffer
argument_list|,
name|o
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|valList
operator|.
name|append
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|buffer
argument_list|,
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|+=
name|strLen
expr_stmt|;
block|}
break|break;
block|}
case|case
name|blr_long
case|:
name|valList
operator|=
name|toList
argument_list|<
name|long
argument_list|>
argument_list|(
operator|&
name|buffer
argument_list|,
name|numElements
index|[
name|dim
index|]
argument_list|,
cast|static_cast
argument_list|<
name|long
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|blr_short
case|:
name|valList
operator|=
name|toList
argument_list|<
name|short
argument_list|>
argument_list|(
operator|&
name|buffer
argument_list|,
name|numElements
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|blr_int64
case|:
name|valList
operator|=
name|toList
argument_list|<
name|qint64
argument_list|>
argument_list|(
operator|&
name|buffer
argument_list|,
name|numElements
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|blr_float
case|:
name|valList
operator|=
name|toList
argument_list|<
name|float
argument_list|>
argument_list|(
operator|&
name|buffer
argument_list|,
name|numElements
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|blr_double
case|:
name|valList
operator|=
name|toList
argument_list|<
name|double
argument_list|>
argument_list|(
operator|&
name|buffer
argument_list|,
name|numElements
index|[
name|dim
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|blr_timestamp
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numElements
index|[
name|dim
index|]
condition|;
operator|++
name|i
control|)
block|{
name|valList
operator|.
name|append
argument_list|(
name|fromTimeStamp
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|+=
sizeof|sizeof
argument_list|(
name|ISC_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|blr_sql_time
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numElements
index|[
name|dim
index|]
condition|;
operator|++
name|i
control|)
block|{
name|valList
operator|.
name|append
argument_list|(
name|fromTime
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|+=
sizeof|sizeof
argument_list|(
name|ISC_TIME
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|blr_sql_date
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numElements
index|[
name|dim
index|]
condition|;
operator|++
name|i
control|)
block|{
name|valList
operator|.
name|append
argument_list|(
name|fromDate
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|+=
sizeof|sizeof
argument_list|(
name|ISC_DATE
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|dim
operator|>
literal|0
condition|)
name|list
operator|.
name|append
argument_list|(
name|valList
argument_list|)
expr_stmt|;
else|else
name|list
operator|+=
name|valList
expr_stmt|;
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|fetchArray
name|QVariant
name|QIBaseResultPrivate
operator|::
name|fetchArray
parameter_list|(
name|int
name|pos
parameter_list|,
name|ISC_QUAD
modifier|*
name|arr
parameter_list|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|list
decl_stmt|;
name|ISC_ARRAY_DESC
name|desc
decl_stmt|;
if|if
condition|(
operator|!
name|arr
condition|)
return|return
name|list
return|;
name|QByteArray
name|relname
argument_list|(
name|sqlda
operator|->
name|sqlvar
index|[
name|pos
index|]
operator|.
name|relname
argument_list|,
name|sqlda
operator|->
name|sqlvar
index|[
name|pos
index|]
operator|.
name|relname_length
argument_list|)
decl_stmt|;
name|QByteArray
name|sqlname
argument_list|(
name|sqlda
operator|->
name|sqlvar
index|[
name|pos
index|]
operator|.
name|aliasname
argument_list|,
name|sqlda
operator|->
name|sqlvar
index|[
name|pos
index|]
operator|.
name|aliasname_length
argument_list|)
decl_stmt|;
name|isc_array_lookup_bounds
argument_list|(
name|status
argument_list|,
operator|&
name|ibase
argument_list|,
operator|&
name|trans
argument_list|,
name|relname
operator|.
name|data
argument_list|()
argument_list|,
name|sqlname
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Could not find array"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
condition|)
return|return
name|list
return|;
name|int
name|arraySize
init|=
literal|1
decl_stmt|,
name|subArraySize
decl_stmt|;
name|short
name|dimensions
init|=
name|desc
operator|.
name|array_desc_dimensions
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|short
argument_list|>
name|numElements
argument_list|(
name|dimensions
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dimensions
condition|;
operator|++
name|i
control|)
block|{
name|subArraySize
operator|=
operator|(
name|desc
operator|.
name|array_desc_bounds
index|[
name|i
index|]
operator|.
name|array_bound_upper
operator|-
name|desc
operator|.
name|array_desc_bounds
index|[
name|i
index|]
operator|.
name|array_bound_lower
operator|+
literal|1
operator|)
expr_stmt|;
name|numElements
index|[
name|i
index|]
operator|=
name|subArraySize
expr_stmt|;
name|arraySize
operator|=
name|subArraySize
operator|*
name|arraySize
expr_stmt|;
block|}
name|ISC_LONG
name|bufLen
decl_stmt|;
name|QByteArray
name|ba
decl_stmt|;
comment|/* varying arrayelements are stored with 2 trailing null bytes        indicating the length of the string      */
if|if
condition|(
name|desc
operator|.
name|array_desc_dtype
operator|==
name|blr_varying
operator|||
name|desc
operator|.
name|array_desc_dtype
operator|==
name|blr_varying2
condition|)
block|{
name|desc
operator|.
name|array_desc_length
operator|+=
literal|2
expr_stmt|;
name|bufLen
operator|=
name|desc
operator|.
name|array_desc_length
operator|*
name|arraySize
operator|*
sizeof|sizeof
argument_list|(
name|short
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bufLen
operator|=
name|desc
operator|.
name|array_desc_length
operator|*
name|arraySize
expr_stmt|;
block|}
name|ba
operator|.
name|resize
argument_list|(
name|int
argument_list|(
name|bufLen
argument_list|)
argument_list|)
expr_stmt|;
name|isc_array_get_slice
argument_list|(
name|status
argument_list|,
operator|&
name|ibase
argument_list|,
operator|&
name|trans
argument_list|,
name|arr
argument_list|,
operator|&
name|desc
argument_list|,
name|ba
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|bufLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Could not get array data"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
condition|)
return|return
name|list
return|;
name|readArrayBuffer
argument_list|(
name|list
argument_list|,
name|ba
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|numElements
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|desc
argument_list|,
name|tc
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|list
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|fillList
specifier|static
name|char
modifier|*
name|fillList
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|list
parameter_list|,
name|T
modifier|*
init|=
literal|0
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|T
name|val
decl_stmt|;
name|val
operator|=
name|qvariant_cast
argument_list|<
name|T
argument_list|>
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|buffer
argument_list|,
operator|&
name|val
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|+=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|fillList
name|char
modifier|*
name|fillList
argument_list|<
name|float
argument_list|>
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|list
parameter_list|,
name|float
modifier|*
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|double
name|val
decl_stmt|;
name|float
name|val2
init|=
literal|0
decl_stmt|;
name|val
operator|=
name|qvariant_cast
argument_list|<
name|double
argument_list|>
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|val2
operator|=
operator|(
name|float
operator|)
name|val
expr_stmt|;
name|memcpy
argument_list|(
name|buffer
argument_list|,
operator|&
name|val2
argument_list|,
sizeof|sizeof
argument_list|(
name|float
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|+=
sizeof|sizeof
argument_list|(
name|float
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|qFillBufferWithString
specifier|static
name|char
modifier|*
name|qFillBufferWithString
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
specifier|const
name|QString
modifier|&
name|string
parameter_list|,
name|short
name|buflen
parameter_list|,
name|bool
name|varying
parameter_list|,
name|bool
name|array
parameter_list|,
name|QTextCodec
modifier|*
name|tc
parameter_list|)
block|{
name|QByteArray
name|str
init|=
name|encodeString
argument_list|(
name|tc
argument_list|,
name|string
argument_list|)
decl_stmt|;
comment|// keep a copy of the string alive in this scope
if|if
condition|(
name|varying
condition|)
block|{
name|short
name|tmpBuflen
init|=
name|buflen
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|length
argument_list|()
operator|<
name|buflen
condition|)
name|buflen
operator|=
name|str
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|array
condition|)
block|{
comment|// interbase stores varying arrayelements different than normal varying elements
name|memcpy
argument_list|(
name|buffer
argument_list|,
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|buflen
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|buffer
operator|+
name|buflen
argument_list|,
literal|0
argument_list|,
name|tmpBuflen
operator|-
name|buflen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|*
operator|(
name|short
operator|*
operator|)
name|buffer
operator|=
name|buflen
expr_stmt|;
comment|// first two bytes is the length
name|memcpy
argument_list|(
name|buffer
operator|+
sizeof|sizeof
argument_list|(
name|short
argument_list|)
argument_list|,
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|buflen
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|+=
name|tmpBuflen
expr_stmt|;
block|}
else|else
block|{
name|str
operator|=
name|str
operator|.
name|leftJustified
argument_list|(
name|buflen
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|buffer
argument_list|,
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|buflen
argument_list|)
expr_stmt|;
name|buffer
operator|+=
name|buflen
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|createArrayBuffer
specifier|static
name|char
modifier|*
name|createArrayBuffer
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|list
parameter_list|,
name|QVariant
operator|::
name|Type
name|type
parameter_list|,
name|short
name|curDim
parameter_list|,
name|ISC_ARRAY_DESC
modifier|*
name|arrayDesc
parameter_list|,
name|QString
modifier|&
name|error
parameter_list|,
name|QTextCodec
modifier|*
name|tc
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|ISC_ARRAY_BOUND
modifier|*
name|bounds
init|=
name|arrayDesc
operator|->
name|array_desc_bounds
decl_stmt|;
name|short
name|dim
init|=
name|arrayDesc
operator|->
name|array_desc_dimensions
operator|-
literal|1
decl_stmt|;
name|int
name|elements
init|=
operator|(
name|bounds
index|[
name|curDim
index|]
operator|.
name|array_bound_upper
operator|-
name|bounds
index|[
name|curDim
index|]
operator|.
name|array_bound_lower
operator|+
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
name|elements
condition|)
block|{
comment|// size mismatch
name|error
operator|=
name|QLatin1String
argument_list|(
literal|"Expected size: %1. Supplied size: %2"
argument_list|)
expr_stmt|;
name|error
operator|=
name|QLatin1String
argument_list|(
literal|"Array size mismatch. Fieldname: %1 "
argument_list|)
operator|+
name|error
operator|.
name|arg
argument_list|(
name|elements
argument_list|)
operator|.
name|arg
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|curDim
operator|!=
name|dim
condition|)
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|List
condition|)
block|{
comment|// dimensions mismatch
name|error
operator|=
name|QLatin1String
argument_list|(
literal|"Array dimensons mismatch. Fieldname: %1"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|buffer
operator|=
name|createArrayBuffer
argument_list|(
name|buffer
argument_list|,
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|type
argument_list|,
name|curDim
operator|+
literal|1
argument_list|,
name|arrayDesc
argument_list|,
name|error
argument_list|,
name|tc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|buffer
condition|)
return|return
literal|0
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QVariant
operator|::
name|Int
case|:
case|case
name|QVariant
operator|::
name|UInt
case|:
if|if
condition|(
name|arrayDesc
operator|->
name|array_desc_dtype
operator|==
name|blr_short
condition|)
name|buffer
operator|=
name|fillList
argument_list|<
name|short
argument_list|>
argument_list|(
name|buffer
argument_list|,
name|list
argument_list|)
expr_stmt|;
else|else
name|buffer
operator|=
name|fillList
argument_list|<
name|int
argument_list|>
argument_list|(
name|buffer
argument_list|,
name|list
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
if|if
condition|(
name|arrayDesc
operator|->
name|array_desc_dtype
operator|==
name|blr_float
condition|)
name|buffer
operator|=
name|fillList
argument_list|<
name|float
argument_list|>
argument_list|(
name|buffer
argument_list|,
name|list
argument_list|,
cast|static_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|buffer
operator|=
name|fillList
argument_list|<
name|double
argument_list|>
argument_list|(
name|buffer
argument_list|,
name|list
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|LongLong
case|:
name|buffer
operator|=
name|fillList
argument_list|<
name|qint64
argument_list|>
argument_list|(
name|buffer
argument_list|,
name|list
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|ULongLong
case|:
name|buffer
operator|=
name|fillList
argument_list|<
name|quint64
argument_list|>
argument_list|(
name|buffer
argument_list|,
name|list
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|buffer
operator|=
name|qFillBufferWithString
argument_list|(
name|buffer
argument_list|,
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|arrayDesc
operator|->
name|array_desc_length
argument_list|,
name|arrayDesc
operator|->
name|array_desc_dtype
operator|==
name|blr_varying
argument_list|,
literal|true
argument_list|,
name|tc
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Date
case|:
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
operator|*
operator|(
operator|(
name|ISC_DATE
operator|*
operator|)
name|buffer
operator|)
operator|=
name|toDate
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|+=
sizeof|sizeof
argument_list|(
name|ISC_DATE
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QVariant
operator|::
name|Time
case|:
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
operator|*
operator|(
operator|(
name|ISC_TIME
operator|*
operator|)
name|buffer
operator|)
operator|=
name|toTime
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toTime
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|+=
sizeof|sizeof
argument_list|(
name|ISC_TIME
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QVariant
operator|::
name|DateTime
case|:
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
operator|*
operator|(
operator|(
name|ISC_TIMESTAMP
operator|*
operator|)
name|buffer
operator|)
operator|=
name|toTimeStamp
argument_list|(
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|+=
sizeof|sizeof
argument_list|(
name|ISC_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
return|return
name|buffer
return|;
block|}
end_function
begin_function
DECL|function|writeArray
name|bool
name|QIBaseResultPrivate
operator|::
name|writeArray
parameter_list|(
name|int
name|column
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|list
parameter_list|)
block|{
name|QString
name|error
decl_stmt|;
name|ISC_QUAD
modifier|*
name|arrayId
init|=
operator|(
name|ISC_QUAD
operator|*
operator|)
name|inda
operator|->
name|sqlvar
index|[
name|column
index|]
operator|.
name|sqldata
decl_stmt|;
name|ISC_ARRAY_DESC
name|desc
decl_stmt|;
name|QByteArray
name|relname
argument_list|(
name|inda
operator|->
name|sqlvar
index|[
name|column
index|]
operator|.
name|relname
argument_list|,
name|inda
operator|->
name|sqlvar
index|[
name|column
index|]
operator|.
name|relname_length
argument_list|)
decl_stmt|;
name|QByteArray
name|sqlname
argument_list|(
name|inda
operator|->
name|sqlvar
index|[
name|column
index|]
operator|.
name|aliasname
argument_list|,
name|inda
operator|->
name|sqlvar
index|[
name|column
index|]
operator|.
name|aliasname_length
argument_list|)
decl_stmt|;
name|isc_array_lookup_bounds
argument_list|(
name|status
argument_list|,
operator|&
name|ibase
argument_list|,
operator|&
name|trans
argument_list|,
name|relname
operator|.
name|data
argument_list|()
argument_list|,
name|sqlname
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Could not find array"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
condition|)
return|return
literal|false
return|;
name|short
name|arraySize
init|=
literal|1
decl_stmt|;
name|ISC_LONG
name|bufLen
decl_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|subList
init|=
name|list
decl_stmt|;
name|short
name|dimensions
init|=
name|desc
operator|.
name|array_desc_dimensions
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dimensions
condition|;
operator|++
name|i
control|)
block|{
name|arraySize
operator|*=
operator|(
name|desc
operator|.
name|array_desc_bounds
index|[
name|i
index|]
operator|.
name|array_bound_upper
operator|-
name|desc
operator|.
name|array_desc_bounds
index|[
name|i
index|]
operator|.
name|array_bound_lower
operator|+
literal|1
operator|)
expr_stmt|;
block|}
comment|/* varying arrayelements are stored with 2 trailing null bytes        indicating the length of the string      */
if|if
condition|(
name|desc
operator|.
name|array_desc_dtype
operator|==
name|blr_varying
operator|||
name|desc
operator|.
name|array_desc_dtype
operator|==
name|blr_varying2
condition|)
name|desc
operator|.
name|array_desc_length
operator|+=
literal|2
expr_stmt|;
name|bufLen
operator|=
name|desc
operator|.
name|array_desc_length
operator|*
name|arraySize
expr_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|.
name|resize
argument_list|(
name|int
argument_list|(
name|bufLen
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
name|arraySize
condition|)
block|{
name|error
operator|=
name|QLatin1String
argument_list|(
literal|"Array size missmatch: size of %1 is %2, size of provided list is %3"
argument_list|)
expr_stmt|;
name|error
operator|=
name|error
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|sqlname
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|arraySize
argument_list|)
operator|.
name|arg
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|->
name|setLastError
argument_list|(
name|QSqlError
argument_list|(
name|error
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|createArrayBuffer
argument_list|(
name|ba
operator|.
name|data
argument_list|()
argument_list|,
name|list
argument_list|,
name|qIBaseTypeName
argument_list|(
name|desc
operator|.
name|array_desc_dtype
argument_list|,
name|inda
operator|->
name|sqlvar
index|[
name|column
index|]
operator|.
name|sqlscale
operator|<
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|&
name|desc
argument_list|,
name|error
argument_list|,
name|tc
argument_list|)
condition|)
block|{
name|q
operator|->
name|setLastError
argument_list|(
name|QSqlError
argument_list|(
name|error
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|sqlname
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/* readjust the buffer size*/
if|if
condition|(
name|desc
operator|.
name|array_desc_dtype
operator|==
name|blr_varying
operator|||
name|desc
operator|.
name|array_desc_dtype
operator|==
name|blr_varying2
condition|)
name|desc
operator|.
name|array_desc_length
operator|-=
literal|2
expr_stmt|;
name|isc_array_put_slice
argument_list|(
name|status
argument_list|,
operator|&
name|ibase
argument_list|,
operator|&
name|trans
argument_list|,
name|arrayId
argument_list|,
operator|&
name|desc
argument_list|,
name|ba
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|bufLen
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|isSelect
name|bool
name|QIBaseResultPrivate
operator|::
name|isSelect
parameter_list|()
block|{
name|char
name|acBuffer
index|[
literal|9
index|]
decl_stmt|;
name|char
name|qType
init|=
name|isc_info_sql_stmt_type
decl_stmt|;
name|isc_dsql_sql_info
argument_list|(
name|status
argument_list|,
operator|&
name|stmt
argument_list|,
literal|1
argument_list|,
operator|&
name|qType
argument_list|,
sizeof|sizeof
argument_list|(
name|acBuffer
argument_list|)
argument_list|,
name|acBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Could not get query info"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
condition|)
return|return
literal|false
return|;
name|int
name|iLength
init|=
name|isc_vax_integer
argument_list|(
operator|&
name|acBuffer
index|[
literal|1
index|]
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|queryType
operator|=
name|isc_vax_integer
argument_list|(
operator|&
name|acBuffer
index|[
literal|3
index|]
argument_list|,
name|iLength
argument_list|)
expr_stmt|;
return|return
operator|(
name|queryType
operator|==
name|isc_info_sql_stmt_select
operator|||
name|queryType
operator|==
name|isc_info_sql_stmt_exec_procedure
operator|)
return|;
block|}
end_function
begin_function
DECL|function|transaction
name|bool
name|QIBaseResultPrivate
operator|::
name|transaction
parameter_list|()
block|{
if|if
condition|(
name|trans
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|db
operator|->
name|d_func
argument_list|()
operator|->
name|trans
condition|)
block|{
name|localTransaction
operator|=
literal|false
expr_stmt|;
name|trans
operator|=
name|db
operator|->
name|d_func
argument_list|()
operator|->
name|trans
expr_stmt|;
return|return
literal|true
return|;
block|}
name|localTransaction
operator|=
literal|true
expr_stmt|;
name|isc_start_transaction
argument_list|(
name|status
argument_list|,
operator|&
name|trans
argument_list|,
literal|1
argument_list|,
operator|&
name|ibase
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Could not start transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// does nothing if the transaction is on the
end_comment
begin_comment
comment|// driver level
end_comment
begin_function
DECL|function|commit
name|bool
name|QIBaseResultPrivate
operator|::
name|commit
parameter_list|()
block|{
if|if
condition|(
operator|!
name|trans
condition|)
return|return
literal|false
return|;
comment|// don't commit driver's transaction, the driver will do it for us
if|if
condition|(
operator|!
name|localTransaction
condition|)
return|return
literal|true
return|;
name|isc_commit_transaction
argument_list|(
name|status
argument_list|,
operator|&
name|trans
argument_list|)
expr_stmt|;
name|trans
operator|=
literal|0
expr_stmt|;
return|return
operator|!
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Unable to commit transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//////////
end_comment
begin_constructor
DECL|function|QIBaseResult
name|QIBaseResult
operator|::
name|QIBaseResult
parameter_list|(
specifier|const
name|QIBaseDriver
modifier|*
name|db
parameter_list|)
member_init_list|:
name|QSqlCachedResult
argument_list|(
name|db
argument_list|)
block|{
name|d
operator|=
operator|new
name|QIBaseResultPrivate
argument_list|(
name|this
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QIBaseResult
name|QIBaseResult
operator|::
name|~
name|QIBaseResult
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|prepare
name|bool
name|QIBaseResult
operator|::
name|prepare
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
block|{
comment|//     qDebug("prepare: %s", qPrintable(query));
if|if
condition|(
operator|!
name|driver
argument_list|()
operator|||
operator|!
name|driver
argument_list|()
operator|->
name|isOpen
argument_list|()
operator|||
name|driver
argument_list|()
operator|->
name|isOpenError
argument_list|()
condition|)
return|return
literal|false
return|;
name|d
operator|->
name|cleanup
argument_list|()
expr_stmt|;
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|createDA
argument_list|(
name|d
operator|->
name|sqlda
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sqlda
operator|==
operator|(
name|XSQLDA
operator|*
operator|)
literal|0
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QIOBaseResult: createDA(): failed to allocate memory"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|createDA
argument_list|(
name|d
operator|->
name|inda
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|inda
operator|==
operator|(
name|XSQLDA
operator|*
operator|)
literal|0
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QIOBaseResult: createDA():  failed to allocate memory"
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|d
operator|->
name|transaction
argument_list|()
condition|)
return|return
literal|false
return|;
name|isc_dsql_allocate_statement
argument_list|(
name|d
operator|->
name|status
argument_list|,
operator|&
name|d
operator|->
name|ibase
argument_list|,
operator|&
name|d
operator|->
name|stmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Could not allocate statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
condition|)
return|return
literal|false
return|;
name|isc_dsql_prepare
argument_list|(
name|d
operator|->
name|status
argument_list|,
operator|&
name|d
operator|->
name|trans
argument_list|,
operator|&
name|d
operator|->
name|stmt
argument_list|,
literal|0
argument_list|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|encodeString
argument_list|(
name|d
operator|->
name|tc
argument_list|,
name|query
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|FBVERSION
argument_list|,
name|d
operator|->
name|sqlda
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Could not prepare statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
condition|)
return|return
literal|false
return|;
name|isc_dsql_describe_bind
argument_list|(
name|d
operator|->
name|status
argument_list|,
operator|&
name|d
operator|->
name|stmt
argument_list|,
name|FBVERSION
argument_list|,
name|d
operator|->
name|inda
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Could not describe input statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|inda
operator|->
name|sqld
operator|>
name|d
operator|->
name|inda
operator|->
name|sqln
condition|)
block|{
name|enlargeDA
argument_list|(
name|d
operator|->
name|inda
argument_list|,
name|d
operator|->
name|inda
operator|->
name|sqld
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|inda
operator|==
operator|(
name|XSQLDA
operator|*
operator|)
literal|0
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QIOBaseResult: enlargeDA(): failed to allocate memory"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|isc_dsql_describe_bind
argument_list|(
name|d
operator|->
name|status
argument_list|,
operator|&
name|d
operator|->
name|stmt
argument_list|,
name|FBVERSION
argument_list|,
name|d
operator|->
name|inda
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Could not describe input statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|initDA
argument_list|(
name|d
operator|->
name|inda
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sqlda
operator|->
name|sqld
operator|>
name|d
operator|->
name|sqlda
operator|->
name|sqln
condition|)
block|{
comment|// need more field descriptors
name|enlargeDA
argument_list|(
name|d
operator|->
name|sqlda
argument_list|,
name|d
operator|->
name|sqlda
operator|->
name|sqld
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sqlda
operator|==
operator|(
name|XSQLDA
operator|*
operator|)
literal|0
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"QIOBaseResult: enlargeDA(): failed to allocate memory"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|isc_dsql_describe
argument_list|(
name|d
operator|->
name|status
argument_list|,
operator|&
name|d
operator|->
name|stmt
argument_list|,
name|FBVERSION
argument_list|,
name|d
operator|->
name|sqlda
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Could not describe statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|initDA
argument_list|(
name|d
operator|->
name|sqlda
argument_list|)
expr_stmt|;
name|setSelect
argument_list|(
name|d
operator|->
name|isSelect
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSelect
argument_list|()
condition|)
block|{
name|free
argument_list|(
name|d
operator|->
name|sqlda
argument_list|)
expr_stmt|;
name|d
operator|->
name|sqlda
operator|=
literal|0
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|exec
name|bool
name|QIBaseResult
operator|::
name|exec
parameter_list|()
block|{
name|bool
name|ok
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|trans
condition|)
name|d
operator|->
name|transaction
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|driver
argument_list|()
operator|||
operator|!
name|driver
argument_list|()
operator|->
name|isOpen
argument_list|()
operator|||
name|driver
argument_list|()
operator|->
name|isOpenError
argument_list|()
condition|)
return|return
literal|false
return|;
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|inda
condition|)
block|{
name|QVector
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|values
init|=
name|boundValues
argument_list|()
decl_stmt|;
name|int
name|i
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|count
argument_list|()
operator|>
name|d
operator|->
name|inda
operator|->
name|sqld
condition|)
block|{
name|qWarning
argument_list|(
literal|"QIBaseResult::exec: Parameter mismatch, expected %d, got %d parameters"
argument_list|,
name|d
operator|->
name|inda
operator|->
name|sqld
argument_list|,
name|values
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|para
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|para
operator|=
name|i
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqldata
condition|)
comment|// skip unknown datatypes
continue|continue;
specifier|const
name|QVariant
name|val
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqltype
operator|&
literal|1
condition|)
block|{
if|if
condition|(
name|val
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// set null indicator
operator|*
operator|(
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqlind
operator|)
operator|=
operator|-
literal|1
expr_stmt|;
comment|// and set the value to 0, otherwise it would count as empty string.
comment|// it seems to be working with just setting sqlind to -1
comment|//*((char*)d->inda->sqlvar[para].sqldata) = 0;
continue|continue;
block|}
comment|// a value of 0 means non-null.
operator|*
operator|(
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqlind
operator|)
operator|=
literal|0
expr_stmt|;
block|}
switch|switch
condition|(
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqltype
operator|&
operator|~
literal|1
condition|)
block|{
case|case
name|SQL_INT64
case|:
if|if
condition|(
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqlscale
operator|<
literal|0
condition|)
operator|*
operator|(
operator|(
name|qint64
operator|*
operator|)
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqldata
operator|)
operator|=
operator|(
name|qint64
operator|)
name|floor
argument_list|(
literal|0.5
operator|+
name|val
operator|.
name|toDouble
argument_list|()
operator|*
name|pow
argument_list|(
literal|10.0
argument_list|,
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqlscale
operator|*
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
operator|*
operator|(
operator|(
name|qint64
operator|*
operator|)
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqldata
operator|)
operator|=
name|val
operator|.
name|toLongLong
argument_list|()
expr_stmt|;
break|break;
case|case
name|SQL_LONG
case|:
if|if
condition|(
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqlscale
operator|<
literal|0
condition|)
operator|*
operator|(
operator|(
name|long
operator|*
operator|)
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqldata
operator|)
operator|=
operator|(
name|long
operator|)
name|floor
argument_list|(
literal|0.5
operator|+
name|val
operator|.
name|toDouble
argument_list|()
operator|*
name|pow
argument_list|(
literal|10.0
argument_list|,
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqlscale
operator|*
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
operator|*
operator|(
operator|(
name|long
operator|*
operator|)
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqldata
operator|)
operator|=
operator|(
name|long
operator|)
name|val
operator|.
name|toLongLong
argument_list|()
expr_stmt|;
break|break;
case|case
name|SQL_SHORT
case|:
if|if
condition|(
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqlscale
operator|<
literal|0
condition|)
operator|*
operator|(
operator|(
name|short
operator|*
operator|)
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqldata
operator|)
operator|=
operator|(
name|short
operator|)
name|floor
argument_list|(
literal|0.5
operator|+
name|val
operator|.
name|toDouble
argument_list|()
operator|*
name|pow
argument_list|(
literal|10.0
argument_list|,
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqlscale
operator|*
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|else
operator|*
operator|(
operator|(
name|short
operator|*
operator|)
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqldata
operator|)
operator|=
operator|(
name|short
operator|)
name|val
operator|.
name|toInt
argument_list|()
expr_stmt|;
break|break;
case|case
name|SQL_FLOAT
case|:
operator|*
operator|(
operator|(
name|float
operator|*
operator|)
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqldata
operator|)
operator|=
operator|(
name|float
operator|)
name|val
operator|.
name|toDouble
argument_list|()
expr_stmt|;
break|break;
case|case
name|SQL_DOUBLE
case|:
operator|*
operator|(
operator|(
name|double
operator|*
operator|)
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqldata
operator|)
operator|=
name|val
operator|.
name|toDouble
argument_list|()
expr_stmt|;
break|break;
case|case
name|SQL_TIMESTAMP
case|:
operator|*
operator|(
operator|(
name|ISC_TIMESTAMP
operator|*
operator|)
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqldata
operator|)
operator|=
name|toTimeStamp
argument_list|(
name|val
operator|.
name|toDateTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_TYPE_TIME
case|:
operator|*
operator|(
operator|(
name|ISC_TIME
operator|*
operator|)
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqldata
operator|)
operator|=
name|toTime
argument_list|(
name|val
operator|.
name|toTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_TYPE_DATE
case|:
operator|*
operator|(
operator|(
name|ISC_DATE
operator|*
operator|)
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqldata
operator|)
operator|=
name|toDate
argument_list|(
name|val
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_VARYING
case|:
case|case
name|SQL_TEXT
case|:
name|qFillBufferWithString
argument_list|(
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqldata
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|,
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqllen
argument_list|,
operator|(
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqltype
operator|&
operator|~
literal|1
operator|)
operator|==
name|SQL_VARYING
argument_list|,
literal|false
argument_list|,
name|d
operator|->
name|tc
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_BLOB
case|:
name|ok
operator|&=
name|d
operator|->
name|writeBlob
argument_list|(
name|para
argument_list|,
name|val
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_ARRAY
case|:
name|ok
operator|&=
name|d
operator|->
name|writeArray
argument_list|(
name|para
argument_list|,
name|val
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|qWarning
argument_list|(
literal|"QIBaseResult::exec: Unknown datatype %d"
argument_list|,
name|d
operator|->
name|inda
operator|->
name|sqlvar
index|[
name|para
index|]
operator|.
name|sqltype
operator|&
operator|~
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|ok
condition|)
block|{
if|if
condition|(
name|colCount
argument_list|()
operator|&&
name|d
operator|->
name|queryType
operator|!=
name|isc_info_sql_stmt_exec_procedure
condition|)
block|{
name|isc_dsql_free_statement
argument_list|(
name|d
operator|->
name|status
argument_list|,
operator|&
name|d
operator|->
name|stmt
argument_list|,
name|DSQL_close
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Unable to close statement"
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
name|cleanup
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|queryType
operator|==
name|isc_info_sql_stmt_exec_procedure
condition|)
name|isc_dsql_execute2
argument_list|(
name|d
operator|->
name|status
argument_list|,
operator|&
name|d
operator|->
name|trans
argument_list|,
operator|&
name|d
operator|->
name|stmt
argument_list|,
name|FBVERSION
argument_list|,
name|d
operator|->
name|inda
argument_list|,
name|d
operator|->
name|sqlda
argument_list|)
expr_stmt|;
else|else
name|isc_dsql_execute
argument_list|(
name|d
operator|->
name|status
argument_list|,
operator|&
name|d
operator|->
name|trans
argument_list|,
operator|&
name|d
operator|->
name|stmt
argument_list|,
name|FBVERSION
argument_list|,
name|d
operator|->
name|inda
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Unable to execute query"
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// Not all stored procedures necessarily return values.
if|if
condition|(
name|d
operator|->
name|queryType
operator|==
name|isc_info_sql_stmt_exec_procedure
operator|&&
name|d
operator|->
name|sqlda
operator|&&
name|d
operator|->
name|sqlda
operator|->
name|sqld
operator|==
literal|0
condition|)
name|delDA
argument_list|(
name|d
operator|->
name|sqlda
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|sqlda
condition|)
name|init
argument_list|(
name|d
operator|->
name|sqlda
operator|->
name|sqld
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSelect
argument_list|()
condition|)
name|d
operator|->
name|commit
argument_list|()
expr_stmt|;
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|reset
name|bool
name|QIBaseResult
operator|::
name|reset
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
block|{
if|if
condition|(
operator|!
name|prepare
argument_list|(
name|query
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|exec
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|gotoNext
name|bool
name|QIBaseResult
operator|::
name|gotoNext
parameter_list|(
name|QSqlCachedResult
operator|::
name|ValueCache
modifier|&
name|row
parameter_list|,
name|int
name|rowIdx
parameter_list|)
block|{
name|ISC_STATUS
name|stat
init|=
literal|0
decl_stmt|;
comment|// Stored Procedures are special - they populate our d->sqlda when executing,
comment|// so we don't have to call isc_dsql_fetch
if|if
condition|(
name|d
operator|->
name|queryType
operator|==
name|isc_info_sql_stmt_exec_procedure
condition|)
block|{
comment|// the first "fetch" shall succeed, all consecutive ones will fail since
comment|// we only have one row to fetch for stored procedures
if|if
condition|(
name|rowIdx
operator|!=
literal|0
condition|)
name|stat
operator|=
literal|100
expr_stmt|;
block|}
else|else
block|{
name|stat
operator|=
name|isc_dsql_fetch
argument_list|(
name|d
operator|->
name|status
argument_list|,
operator|&
name|d
operator|->
name|stmt
argument_list|,
name|FBVERSION
argument_list|,
name|d
operator|->
name|sqlda
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stat
operator|==
literal|100
condition|)
block|{
comment|// no more rows
name|setAt
argument_list|(
name|QSql
operator|::
name|AfterLastRow
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|d
operator|->
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Could not fetch next item"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|rowIdx
operator|<
literal|0
condition|)
comment|// not interested in actual values
return|return
literal|true
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|sqlda
operator|->
name|sqld
condition|;
operator|++
name|i
control|)
block|{
name|int
name|idx
init|=
name|rowIdx
operator|+
name|i
decl_stmt|;
name|char
modifier|*
name|buf
init|=
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqldata
decl_stmt|;
name|int
name|size
init|=
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqllen
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqltype
operator|&
literal|1
operator|)
operator|&&
operator|*
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqlind
condition|)
block|{
comment|// null value
name|QVariant
name|v
decl_stmt|;
name|v
operator|.
name|convert
argument_list|(
name|qIBaseTypeName2
argument_list|(
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqltype
argument_list|,
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqlscale
operator|<
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Double
condition|)
block|{
switch|switch
condition|(
name|numericalPrecisionPolicy
argument_list|()
condition|)
block|{
case|case
name|QSql
operator|::
name|LowPrecisionInt32
case|:
name|v
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|LowPrecisionInt64
case|:
name|v
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|LongLong
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|HighPrecision
case|:
name|v
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|LowPrecisionDouble
case|:
comment|// no conversion
break|break;
block|}
block|}
name|row
index|[
name|idx
index|]
operator|=
name|v
expr_stmt|;
continue|continue;
block|}
switch|switch
condition|(
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqltype
operator|&
operator|~
literal|1
condition|)
block|{
case|case
name|SQL_VARYING
case|:
comment|// pascal strings - a short with a length information followed by the data
if|if
condition|(
name|d
operator|->
name|tc
condition|)
name|row
index|[
name|idx
index|]
operator|=
name|d
operator|->
name|tc
operator|->
name|toUnicode
argument_list|(
name|buf
operator|+
sizeof|sizeof
argument_list|(
name|short
argument_list|)
argument_list|,
operator|*
operator|(
name|short
operator|*
operator|)
name|buf
argument_list|)
expr_stmt|;
else|else
name|row
index|[
name|idx
index|]
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|buf
operator|+
sizeof|sizeof
argument_list|(
name|short
argument_list|)
argument_list|,
operator|*
operator|(
name|short
operator|*
operator|)
name|buf
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_INT64
case|:
if|if
condition|(
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqlscale
operator|<
literal|0
condition|)
name|row
index|[
name|idx
index|]
operator|=
operator|*
operator|(
name|qint64
operator|*
operator|)
name|buf
operator|*
name|pow
argument_list|(
literal|10.0
argument_list|,
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqlscale
argument_list|)
expr_stmt|;
else|else
name|row
index|[
name|idx
index|]
operator|=
name|QVariant
argument_list|(
operator|*
operator|(
name|qint64
operator|*
operator|)
name|buf
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_LONG
case|:
if|if
condition|(
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqllen
operator|==
literal|4
condition|)
if|if
condition|(
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqlscale
operator|<
literal|0
condition|)
name|row
index|[
name|idx
index|]
operator|=
name|QVariant
argument_list|(
operator|*
operator|(
name|qint32
operator|*
operator|)
name|buf
operator|*
name|pow
argument_list|(
literal|10.0
argument_list|,
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqlscale
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|row
index|[
name|idx
index|]
operator|=
name|QVariant
argument_list|(
operator|*
operator|(
name|qint32
operator|*
operator|)
name|buf
argument_list|)
expr_stmt|;
else|else
name|row
index|[
name|idx
index|]
operator|=
name|QVariant
argument_list|(
operator|*
operator|(
name|qint64
operator|*
operator|)
name|buf
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_SHORT
case|:
if|if
condition|(
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqlscale
operator|<
literal|0
condition|)
name|row
index|[
name|idx
index|]
operator|=
name|QVariant
argument_list|(
name|long
argument_list|(
operator|(
operator|*
operator|(
name|short
operator|*
operator|)
name|buf
operator|)
argument_list|)
operator|*
name|pow
argument_list|(
literal|10.0
argument_list|,
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqlscale
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|row
index|[
name|idx
index|]
operator|=
name|QVariant
argument_list|(
name|int
argument_list|(
operator|(
operator|*
operator|(
name|short
operator|*
operator|)
name|buf
operator|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_FLOAT
case|:
name|row
index|[
name|idx
index|]
operator|=
name|QVariant
argument_list|(
name|double
argument_list|(
operator|(
operator|*
operator|(
name|float
operator|*
operator|)
name|buf
operator|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_DOUBLE
case|:
name|row
index|[
name|idx
index|]
operator|=
name|QVariant
argument_list|(
operator|*
operator|(
name|double
operator|*
operator|)
name|buf
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_TIMESTAMP
case|:
name|row
index|[
name|idx
index|]
operator|=
name|fromTimeStamp
argument_list|(
name|buf
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_TYPE_TIME
case|:
name|row
index|[
name|idx
index|]
operator|=
name|fromTime
argument_list|(
name|buf
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_TYPE_DATE
case|:
name|row
index|[
name|idx
index|]
operator|=
name|fromDate
argument_list|(
name|buf
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_TEXT
case|:
if|if
condition|(
name|d
operator|->
name|tc
condition|)
name|row
index|[
name|idx
index|]
operator|=
name|d
operator|->
name|tc
operator|->
name|toUnicode
argument_list|(
name|buf
argument_list|,
name|size
argument_list|)
expr_stmt|;
else|else
name|row
index|[
name|idx
index|]
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|buf
argument_list|,
name|size
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_BLOB
case|:
name|row
index|[
name|idx
index|]
operator|=
name|d
operator|->
name|fetchBlob
argument_list|(
operator|(
name|ISC_QUAD
operator|*
operator|)
name|buf
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQL_ARRAY
case|:
name|row
index|[
name|idx
index|]
operator|=
name|d
operator|->
name|fetchArray
argument_list|(
name|i
argument_list|,
operator|(
name|ISC_QUAD
operator|*
operator|)
name|buf
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// unknown type - don't even try to fetch
name|row
index|[
name|idx
index|]
operator|=
name|QVariant
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
operator|.
name|sqlscale
operator|<
literal|0
condition|)
block|{
name|QVariant
name|v
init|=
name|row
index|[
name|idx
index|]
decl_stmt|;
switch|switch
condition|(
name|numericalPrecisionPolicy
argument_list|()
condition|)
block|{
case|case
name|QSql
operator|::
name|LowPrecisionInt32
case|:
if|if
condition|(
name|v
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
condition|)
name|row
index|[
name|idx
index|]
operator|=
name|v
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|LowPrecisionInt64
case|:
if|if
condition|(
name|v
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|LongLong
argument_list|)
condition|)
name|row
index|[
name|idx
index|]
operator|=
name|v
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|LowPrecisionDouble
case|:
if|if
condition|(
name|v
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|Double
argument_list|)
condition|)
name|row
index|[
name|idx
index|]
operator|=
name|v
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|HighPrecision
case|:
if|if
condition|(
name|v
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
condition|)
name|row
index|[
name|idx
index|]
operator|=
name|v
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|size
name|int
name|QIBaseResult
operator|::
name|size
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
if|#
directive|if
literal|0
comment|/// ### FIXME
block|static char sizeInfo[] = {isc_info_sql_records};     char buf[64];
comment|//qDebug()<< sizeInfo;
block|if (!isActive() || !isSelect())         return -1;          char ct;         short len;         int val = 0;
comment|//    while(val == 0) {
block|isc_dsql_sql_info(d->status,&d->stmt, sizeof(sizeInfo), sizeInfo, sizeof(buf), buf);
comment|//        isc_database_info(d->status,&d->ibase, sizeof(sizeInfo), sizeInfo, sizeof(buf), buf);
block|for(int i = 0; i< 66; ++i)             qDebug()<< QString::number(buf[i]);          for (char* c = buf + 3; *c != isc_info_end;
comment|/*nothing*/
block|) {             ct = *(c++);             len = isc_vax_integer(c, 2);             c += 2;             val = isc_vax_integer(c, len);             c += len;             qDebug()<< "size"<< val;             if (ct == isc_info_req_select_count)                 return val;         }
comment|//qDebug()<< "size -1";
block|return -1;          unsigned int i, result_size;         if (buf[0] == isc_info_sql_records) {             i = 3;             result_size = isc_vax_integer(&buf[1],2);             while (buf[i] != isc_info_end&& i< result_size) {                 len = (short)isc_vax_integer(&buf[i+1],2);                 if (buf[i] == isc_info_req_select_count)                      return (isc_vax_integer(&buf[i+3],len));                 i += len+3;            }         }
comment|//    }
block|return -1;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|numRowsAffected
name|int
name|QIBaseResult
operator|::
name|numRowsAffected
parameter_list|()
block|{
specifier|static
name|char
name|acCountInfo
index|[]
init|=
block|{
name|isc_info_sql_records
block|}
decl_stmt|;
name|char
name|cCountType
decl_stmt|;
name|bool
name|bIsProcedure
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|d
operator|->
name|queryType
condition|)
block|{
case|case
name|isc_info_sql_stmt_select
case|:
name|cCountType
operator|=
name|isc_info_req_select_count
expr_stmt|;
break|break;
case|case
name|isc_info_sql_stmt_update
case|:
name|cCountType
operator|=
name|isc_info_req_update_count
expr_stmt|;
break|break;
case|case
name|isc_info_sql_stmt_delete
case|:
name|cCountType
operator|=
name|isc_info_req_delete_count
expr_stmt|;
break|break;
case|case
name|isc_info_sql_stmt_insert
case|:
name|cCountType
operator|=
name|isc_info_req_insert_count
expr_stmt|;
break|break;
case|case
name|isc_info_sql_stmt_exec_procedure
case|:
name|bIsProcedure
operator|=
literal|true
expr_stmt|;
comment|// will sum all changes
break|break;
default|default:
name|qWarning
argument_list|()
operator|<<
literal|"numRowsAffected: Unknown statement type ("
operator|<<
name|d
operator|->
name|queryType
operator|<<
literal|")"
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|char
name|acBuffer
index|[
literal|33
index|]
decl_stmt|;
name|int
name|iResult
init|=
operator|-
literal|1
decl_stmt|;
name|isc_dsql_sql_info
argument_list|(
name|d
operator|->
name|status
argument_list|,
operator|&
name|d
operator|->
name|stmt
argument_list|,
sizeof|sizeof
argument_list|(
name|acCountInfo
argument_list|)
argument_list|,
name|acCountInfo
argument_list|,
sizeof|sizeof
argument_list|(
name|acBuffer
argument_list|)
argument_list|,
name|acBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseResult"
argument_list|,
literal|"Could not get statement info"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
for|for
control|(
name|char
modifier|*
name|pcBuf
init|=
name|acBuffer
operator|+
literal|3
init|;
operator|*
name|pcBuf
operator|!=
name|isc_info_end
condition|;
comment|/*nothing*/
control|)
block|{
name|char
name|cType
init|=
operator|*
name|pcBuf
operator|++
decl_stmt|;
name|short
name|sLength
init|=
name|isc_vax_integer
argument_list|(
name|pcBuf
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|pcBuf
operator|+=
literal|2
expr_stmt|;
name|int
name|iValue
init|=
name|isc_vax_integer
argument_list|(
name|pcBuf
argument_list|,
name|sLength
argument_list|)
decl_stmt|;
name|pcBuf
operator|+=
name|sLength
expr_stmt|;
if|if
condition|(
name|bIsProcedure
condition|)
block|{
if|if
condition|(
name|cType
operator|==
name|isc_info_req_insert_count
operator|||
name|cType
operator|==
name|isc_info_req_update_count
operator|||
name|cType
operator|==
name|isc_info_req_delete_count
condition|)
block|{
if|if
condition|(
name|iResult
operator|==
operator|-
literal|1
condition|)
name|iResult
operator|=
literal|0
expr_stmt|;
name|iResult
operator|+=
name|iValue
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|cType
operator|==
name|cCountType
condition|)
block|{
name|iResult
operator|=
name|iValue
expr_stmt|;
break|break;
block|}
block|}
return|return
name|iResult
return|;
block|}
end_function
begin_function
DECL|function|record
name|QSqlRecord
name|QIBaseResult
operator|::
name|record
parameter_list|()
specifier|const
block|{
name|QSqlRecord
name|rec
decl_stmt|;
if|if
condition|(
operator|!
name|isActive
argument_list|()
operator|||
operator|!
name|d
operator|->
name|sqlda
condition|)
return|return
name|rec
return|;
name|XSQLVAR
name|v
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|sqlda
operator|->
name|sqld
condition|;
operator|++
name|i
control|)
block|{
name|v
operator|=
name|d
operator|->
name|sqlda
operator|->
name|sqlvar
index|[
name|i
index|]
expr_stmt|;
name|QSqlField
name|f
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|v
operator|.
name|aliasname
argument_list|,
name|v
operator|.
name|aliasname_length
argument_list|)
operator|.
name|simplified
argument_list|()
argument_list|,
name|qIBaseTypeName2
argument_list|(
name|v
operator|.
name|sqltype
argument_list|,
name|v
operator|.
name|sqlscale
operator|<
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|.
name|setLength
argument_list|(
name|v
operator|.
name|sqllen
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPrecision
argument_list|(
name|qAbs
argument_list|(
name|v
operator|.
name|sqlscale
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|setRequiredStatus
argument_list|(
operator|(
name|v
operator|.
name|sqltype
operator|&
literal|1
operator|)
operator|==
literal|0
condition|?
name|QSqlField
operator|::
name|Required
else|:
name|QSqlField
operator|::
name|Optional
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|sqlscale
operator|<
literal|0
condition|)
block|{
name|QSqlQuery
name|q
argument_list|(
operator|new
name|QIBaseResult
argument_list|(
name|d
operator|->
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QLatin1String
argument_list|(
literal|"select b.RDB$FIELD_PRECISION, b.RDB$FIELD_SCALE, b.RDB$FIELD_LENGTH, a.RDB$NULL_FLAG "
literal|"FROM RDB$RELATION_FIELDS a, RDB$FIELDS b "
literal|"WHERE b.RDB$FIELD_NAME = a.RDB$FIELD_SOURCE "
literal|"AND a.RDB$RELATION_NAME = '"
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
name|v
operator|.
name|relname
argument_list|,
name|v
operator|.
name|relname_length
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"' "
literal|"AND a.RDB$FIELD_NAME = '"
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
name|v
operator|.
name|sqlname
argument_list|,
name|v
operator|.
name|sqlname_length
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"' "
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|first
argument_list|()
condition|)
block|{
if|if
condition|(
name|v
operator|.
name|sqlscale
operator|<
literal|0
condition|)
block|{
name|f
operator|.
name|setLength
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPrecision
argument_list|(
name|qAbs
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f
operator|.
name|setLength
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPrecision
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|setRequiredStatus
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toBool
argument_list|()
condition|?
name|QSqlField
operator|::
name|Required
else|:
name|QSqlField
operator|::
name|Optional
argument_list|)
expr_stmt|;
block|}
block|}
name|f
operator|.
name|setSqlType
argument_list|(
name|v
operator|.
name|sqltype
argument_list|)
expr_stmt|;
name|rec
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|rec
return|;
block|}
end_function
begin_function
DECL|function|handle
name|QVariant
name|QIBaseResult
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|qRegisterMetaType
argument_list|<
name|isc_stmt_handle
argument_list|>
argument_list|(
literal|"isc_stmt_handle"
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|stmt
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*********************************/
end_comment
begin_constructor
DECL|function|QIBaseDriver
name|QIBaseDriver
operator|::
name|QIBaseDriver
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSqlDriver
argument_list|(
operator|*
operator|new
name|QIBaseDriverPrivate
argument_list|,
name|parent
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|QIBaseDriver
name|QIBaseDriver
operator|::
name|QIBaseDriver
parameter_list|(
name|isc_db_handle
name|connection
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSqlDriver
argument_list|(
operator|*
operator|new
name|QIBaseDriverPrivate
argument_list|,
name|parent
argument_list|)
block|{
name|Q_D
argument_list|(
name|QIBaseDriver
argument_list|)
expr_stmt|;
name|d
operator|->
name|ibase
operator|=
name|connection
expr_stmt|;
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QIBaseDriver
name|QIBaseDriver
operator|::
name|~
name|QIBaseDriver
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|hasFeature
name|bool
name|QIBaseDriver
operator|::
name|hasFeature
parameter_list|(
name|DriverFeature
name|f
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|f
condition|)
block|{
case|case
name|QuerySize
case|:
case|case
name|NamedPlaceholders
case|:
case|case
name|LastInsertId
case|:
case|case
name|BatchOperations
case|:
case|case
name|SimpleLocking
case|:
case|case
name|FinishQuery
case|:
case|case
name|MultipleResultSets
case|:
case|case
name|CancelQuery
case|:
return|return
literal|false
return|;
case|case
name|Transactions
case|:
case|case
name|PreparedQueries
case|:
case|case
name|PositionalPlaceholders
case|:
case|case
name|Unicode
case|:
case|case
name|BLOB
case|:
case|case
name|EventNotifications
case|:
case|case
name|LowPrecisionNumbers
case|:
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|open
name|bool
name|QIBaseDriver
operator|::
name|open
parameter_list|(
specifier|const
name|QString
modifier|&
name|db
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
name|int
name|port
parameter_list|,
specifier|const
name|QString
modifier|&
name|connOpts
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QIBaseDriver
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOpen
argument_list|()
condition|)
name|close
argument_list|()
expr_stmt|;
specifier|const
name|QStringList
name|opts
argument_list|(
name|connOpts
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|encString
decl_stmt|;
name|QByteArray
name|role
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|opts
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|tmp
argument_list|(
name|opts
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|simplified
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|idx
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|=
name|tmp
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|QString
name|val
init|=
name|tmp
operator|.
name|mid
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
name|QString
name|opt
init|=
name|tmp
operator|.
name|left
argument_list|(
name|idx
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"ISC_DPB_LC_CTYPE"
argument_list|)
condition|)
name|encString
operator|=
name|val
expr_stmt|;
elseif|else
if|if
condition|(
name|opt
operator|.
name|toUpper
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"ISC_DPB_SQL_ROLE_NAME"
argument_list|)
condition|)
block|{
name|role
operator|=
name|val
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
name|role
operator|.
name|truncate
argument_list|(
literal|255
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Use UNICODE_FSS when no ISC_DPB_LC_CTYPE is provided
if|if
condition|(
name|encString
operator|.
name|isEmpty
argument_list|()
condition|)
name|encString
operator|=
name|QLatin1String
argument_list|(
literal|"UNICODE_FSS"
argument_list|)
expr_stmt|;
else|else
block|{
name|d
operator|->
name|tc
operator|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|encString
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|tc
condition|)
block|{
name|qWarning
argument_list|(
literal|"Unsupported encoding: %s. Using UNICODE_FFS for ISC_DPB_LC_CTYPE."
argument_list|,
name|encString
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|encString
operator|=
name|QLatin1String
argument_list|(
literal|"UNICODE_FSS"
argument_list|)
expr_stmt|;
comment|// Fallback to UNICODE_FSS
block|}
block|}
name|QByteArray
name|enc
init|=
name|encString
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
name|QByteArray
name|usr
init|=
name|user
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
name|QByteArray
name|pass
init|=
name|password
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
name|enc
operator|.
name|truncate
argument_list|(
literal|255
argument_list|)
expr_stmt|;
name|usr
operator|.
name|truncate
argument_list|(
literal|255
argument_list|)
expr_stmt|;
name|pass
operator|.
name|truncate
argument_list|(
literal|255
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|.
name|reserve
argument_list|(
name|usr
operator|.
name|length
argument_list|()
operator|+
name|pass
operator|.
name|length
argument_list|()
operator|+
name|enc
operator|.
name|length
argument_list|()
operator|+
name|role
operator|.
name|length
argument_list|()
operator|+
literal|9
argument_list|)
expr_stmt|;
name|ba
operator|.
name|append
argument_list|(
name|char
argument_list|(
name|isc_dpb_version1
argument_list|)
argument_list|)
expr_stmt|;
name|ba
operator|.
name|append
argument_list|(
name|char
argument_list|(
name|isc_dpb_user_name
argument_list|)
argument_list|)
expr_stmt|;
name|ba
operator|.
name|append
argument_list|(
name|char
argument_list|(
name|usr
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ba
operator|.
name|append
argument_list|(
name|usr
operator|.
name|data
argument_list|()
argument_list|,
name|usr
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|ba
operator|.
name|append
argument_list|(
name|char
argument_list|(
name|isc_dpb_password
argument_list|)
argument_list|)
expr_stmt|;
name|ba
operator|.
name|append
argument_list|(
name|char
argument_list|(
name|pass
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ba
operator|.
name|append
argument_list|(
name|pass
operator|.
name|data
argument_list|()
argument_list|,
name|pass
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|ba
operator|.
name|append
argument_list|(
name|char
argument_list|(
name|isc_dpb_lc_ctype
argument_list|)
argument_list|)
expr_stmt|;
name|ba
operator|.
name|append
argument_list|(
name|char
argument_list|(
name|enc
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ba
operator|.
name|append
argument_list|(
name|enc
operator|.
name|data
argument_list|()
argument_list|,
name|enc
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|role
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ba
operator|.
name|append
argument_list|(
name|char
argument_list|(
name|isc_dpb_sql_role_name
argument_list|)
argument_list|)
expr_stmt|;
name|ba
operator|.
name|append
argument_list|(
name|char
argument_list|(
name|role
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ba
operator|.
name|append
argument_list|(
name|role
operator|.
name|data
argument_list|()
argument_list|,
name|role
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QString
name|portString
decl_stmt|;
if|if
condition|(
name|port
operator|!=
operator|-
literal|1
condition|)
name|portString
operator|=
name|QStringLiteral
argument_list|(
literal|"/%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|QString
name|ldb
decl_stmt|;
if|if
condition|(
operator|!
name|host
operator|.
name|isEmpty
argument_list|()
condition|)
name|ldb
operator|+=
name|host
operator|+
name|portString
operator|+
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|ldb
operator|+=
name|db
expr_stmt|;
name|isc_attach_database
argument_list|(
name|d
operator|->
name|status
argument_list|,
literal|0
argument_list|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|ldb
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|ibase
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|,
name|ba
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseDriver"
argument_list|,
literal|"Error opening database"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|)
condition|)
block|{
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QIBaseDriver
operator|::
name|close
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QIBaseDriver
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOpen
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|eventBuffers
operator|.
name|size
argument_list|()
condition|)
block|{
name|ISC_STATUS
name|status
index|[
literal|20
index|]
decl_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QIBaseEventBuffer
modifier|*
argument_list|>
operator|::
name|const_iterator
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|d
operator|->
name|eventBuffers
operator|.
name|constBegin
argument_list|()
init|;
name|i
operator|!=
name|d
operator|->
name|eventBuffers
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QIBaseEventBuffer
modifier|*
name|eBuffer
init|=
name|i
operator|.
name|value
argument_list|()
decl_stmt|;
name|eBuffer
operator|->
name|subscriptionState
operator|=
name|QIBaseEventBuffer
operator|::
name|Finished
expr_stmt|;
name|isc_cancel_events
argument_list|(
name|status
argument_list|,
operator|&
name|d
operator|->
name|ibase
argument_list|,
operator|&
name|eBuffer
operator|->
name|eventId
argument_list|)
expr_stmt|;
name|qFreeEventBuffer
argument_list|(
name|eBuffer
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|eventBuffers
operator|.
name|clear
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|FB_API_VER
argument_list|)
comment|// Workaround for Firebird crash
name|QTime
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|timer
operator|.
name|elapsed
argument_list|()
operator|<
literal|500
condition|)
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
name|isc_detach_database
argument_list|(
name|d
operator|->
name|status
argument_list|,
operator|&
name|d
operator|->
name|ibase
argument_list|)
expr_stmt|;
name|d
operator|->
name|ibase
operator|=
literal|0
expr_stmt|;
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createResult
name|QSqlResult
modifier|*
name|QIBaseDriver
operator|::
name|createResult
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QIBaseResult
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|beginTransaction
name|bool
name|QIBaseDriver
operator|::
name|beginTransaction
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QIBaseDriver
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
operator|||
name|isOpenError
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|d
operator|->
name|trans
condition|)
return|return
literal|false
return|;
name|isc_start_transaction
argument_list|(
name|d
operator|->
name|status
argument_list|,
operator|&
name|d
operator|->
name|trans
argument_list|,
literal|1
argument_list|,
operator|&
name|d
operator|->
name|ibase
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
return|return
operator|!
name|d
operator|->
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseDriver"
argument_list|,
literal|"Could not start transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|commitTransaction
name|bool
name|QIBaseDriver
operator|::
name|commitTransaction
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QIBaseDriver
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
operator|||
name|isOpenError
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|trans
condition|)
return|return
literal|false
return|;
name|isc_commit_transaction
argument_list|(
name|d
operator|->
name|status
argument_list|,
operator|&
name|d
operator|->
name|trans
argument_list|)
expr_stmt|;
name|d
operator|->
name|trans
operator|=
literal|0
expr_stmt|;
return|return
operator|!
name|d
operator|->
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseDriver"
argument_list|,
literal|"Unable to commit transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rollbackTransaction
name|bool
name|QIBaseDriver
operator|::
name|rollbackTransaction
parameter_list|()
block|{
name|Q_D
argument_list|(
name|QIBaseDriver
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
operator|||
name|isOpenError
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|d
operator|->
name|trans
condition|)
return|return
literal|false
return|;
name|isc_rollback_transaction
argument_list|(
name|d
operator|->
name|status
argument_list|,
operator|&
name|d
operator|->
name|trans
argument_list|)
expr_stmt|;
name|d
operator|->
name|trans
operator|=
literal|0
expr_stmt|;
return|return
operator|!
name|d
operator|->
name|isError
argument_list|(
name|QT_TRANSLATE_NOOP
argument_list|(
literal|"QIBaseDriver"
argument_list|,
literal|"Unable to rollback transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|tables
name|QStringList
name|QIBaseDriver
operator|::
name|tables
parameter_list|(
name|QSql
operator|::
name|TableType
name|type
parameter_list|)
specifier|const
block|{
name|QStringList
name|res
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|res
return|;
name|QString
name|typeFilter
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|QSql
operator|::
name|SystemTables
condition|)
block|{
name|typeFilter
operator|+=
name|QLatin1String
argument_list|(
literal|"RDB$SYSTEM_FLAG != 0"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
operator|(
name|QSql
operator|::
name|SystemTables
operator||
name|QSql
operator|::
name|Views
operator|)
condition|)
block|{
name|typeFilter
operator|+=
name|QLatin1String
argument_list|(
literal|"RDB$SYSTEM_FLAG != 0 OR RDB$VIEW_BLR NOT NULL"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|type
operator|&
name|QSql
operator|::
name|SystemTables
operator|)
condition|)
name|typeFilter
operator|+=
name|QLatin1String
argument_list|(
literal|"RDB$SYSTEM_FLAG = 0 AND "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|type
operator|&
name|QSql
operator|::
name|Views
operator|)
condition|)
name|typeFilter
operator|+=
name|QLatin1String
argument_list|(
literal|"RDB$VIEW_BLR IS NULL AND "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|type
operator|&
name|QSql
operator|::
name|Tables
operator|)
condition|)
name|typeFilter
operator|+=
name|QLatin1String
argument_list|(
literal|"RDB$VIEW_BLR IS NOT NULL AND "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|typeFilter
operator|.
name|isEmpty
argument_list|()
condition|)
name|typeFilter
operator|.
name|chop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|typeFilter
operator|.
name|isEmpty
argument_list|()
condition|)
name|typeFilter
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"where "
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|.
name|exec
argument_list|(
name|QLatin1String
argument_list|(
literal|"select rdb$relation_name from rdb$relations "
argument_list|)
operator|+
name|typeFilter
argument_list|)
condition|)
return|return
name|res
return|;
while|while
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
name|res
operator|<<
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|simplified
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|record
name|QSqlRecord
name|QIBaseDriver
operator|::
name|record
parameter_list|(
specifier|const
name|QString
modifier|&
name|tablename
parameter_list|)
specifier|const
block|{
name|QSqlRecord
name|rec
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|rec
return|;
name|QSqlQuery
name|q
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QString
name|table
init|=
name|tablename
decl_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|table
operator|=
name|stripDelimiters
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|table
operator|=
name|table
operator|.
name|toUpper
argument_list|()
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QLatin1String
argument_list|(
literal|"SELECT a.RDB$FIELD_NAME, b.RDB$FIELD_TYPE, b.RDB$FIELD_LENGTH, "
literal|"b.RDB$FIELD_SCALE, b.RDB$FIELD_PRECISION, a.RDB$NULL_FLAG "
literal|"FROM RDB$RELATION_FIELDS a, RDB$FIELDS b "
literal|"WHERE b.RDB$FIELD_NAME = a.RDB$FIELD_SOURCE "
literal|"AND a.RDB$RELATION_NAME = '"
argument_list|)
operator|+
name|table
operator|+
name|QLatin1String
argument_list|(
literal|"' "
literal|"ORDER BY a.RDB$FIELD_POSITION"
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
block|{
name|int
name|type
init|=
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|bool
name|hasScale
init|=
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toInt
argument_list|()
operator|<
literal|0
decl_stmt|;
name|QSqlField
name|f
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|simplified
argument_list|()
argument_list|,
name|qIBaseTypeName
argument_list|(
name|type
argument_list|,
name|hasScale
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasScale
condition|)
block|{
name|f
operator|.
name|setLength
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPrecision
argument_list|(
name|qAbs
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f
operator|.
name|setLength
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPrecision
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|setRequired
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|5
argument_list|)
operator|.
name|toInt
argument_list|()
operator|>
literal|0
condition|?
literal|true
else|:
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|setSqlType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|rec
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|rec
return|;
block|}
end_function
begin_function
DECL|function|primaryIndex
name|QSqlIndex
name|QIBaseDriver
operator|::
name|primaryIndex
parameter_list|(
specifier|const
name|QString
modifier|&
name|table
parameter_list|)
specifier|const
block|{
name|QSqlIndex
name|index
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|index
return|;
name|QString
name|tablename
init|=
name|table
decl_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|tablename
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|tablename
operator|=
name|stripDelimiters
argument_list|(
name|tablename
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|tablename
operator|=
name|tablename
operator|.
name|toUpper
argument_list|()
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QLatin1String
argument_list|(
literal|"SELECT a.RDB$INDEX_NAME, b.RDB$FIELD_NAME, d.RDB$FIELD_TYPE, d.RDB$FIELD_SCALE "
literal|"FROM RDB$RELATION_CONSTRAINTS a, RDB$INDEX_SEGMENTS b, RDB$RELATION_FIELDS c, RDB$FIELDS d "
literal|"WHERE a.RDB$CONSTRAINT_TYPE = 'PRIMARY KEY' "
literal|"AND a.RDB$RELATION_NAME = '"
argument_list|)
operator|+
name|tablename
operator|+
name|QLatin1String
argument_list|(
literal|" 'AND a.RDB$INDEX_NAME = b.RDB$INDEX_NAME "
literal|"AND c.RDB$RELATION_NAME = a.RDB$RELATION_NAME "
literal|"AND c.RDB$FIELD_NAME = b.RDB$FIELD_NAME "
literal|"AND d.RDB$FIELD_NAME = c.RDB$FIELD_SOURCE "
literal|"ORDER BY b.RDB$FIELD_POSITION"
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
block|{
name|QSqlField
name|field
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|simplified
argument_list|()
argument_list|,
name|qIBaseTypeName
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toInt
argument_list|()
operator|<
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|index
operator|.
name|append
argument_list|(
name|field
argument_list|)
expr_stmt|;
comment|//TODO: asc? desc?
name|index
operator|.
name|setName
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
end_function
begin_function
DECL|function|formatValue
name|QString
name|QIBaseDriver
operator|::
name|formatValue
parameter_list|(
specifier|const
name|QSqlField
modifier|&
name|field
parameter_list|,
name|bool
name|trimStrings
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|field
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|DateTime
case|:
block|{
name|QDateTime
name|datetime
init|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|datetime
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|datetime
operator|.
name|date
argument_list|()
operator|.
name|year
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|datetime
operator|.
name|date
argument_list|()
operator|.
name|month
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|datetime
operator|.
name|date
argument_list|()
operator|.
name|day
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|datetime
operator|.
name|time
argument_list|()
operator|.
name|hour
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|datetime
operator|.
name|time
argument_list|()
operator|.
name|minute
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|datetime
operator|.
name|time
argument_list|()
operator|.
name|second
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|datetime
operator|.
name|time
argument_list|()
operator|.
name|msec
argument_list|()
argument_list|)
operator|.
name|rightJustified
argument_list|(
literal|3
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
return|;
else|else
return|return
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
return|;
block|}
case|case
name|QVariant
operator|::
name|Time
case|:
block|{
name|QTime
name|time
init|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|time
operator|.
name|hour
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|time
operator|.
name|minute
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|time
operator|.
name|second
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|time
operator|.
name|msec
argument_list|()
argument_list|)
operator|.
name|rightJustified
argument_list|(
literal|3
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
return|;
else|else
return|return
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
return|;
block|}
case|case
name|QVariant
operator|::
name|Date
case|:
block|{
name|QDate
name|date
init|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|date
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|date
operator|.
name|year
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|date
operator|.
name|month
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|date
operator|.
name|day
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
return|;
else|else
return|return
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
return|;
block|}
default|default:
return|return
name|QSqlDriver
operator|::
name|formatValue
argument_list|(
name|field
argument_list|,
name|trimStrings
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|handle
name|QVariant
name|QIBaseDriver
operator|::
name|handle
parameter_list|()
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QIBaseDriver
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|qRegisterMetaType
argument_list|<
name|isc_db_handle
argument_list|>
argument_list|(
literal|"isc_db_handle"
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|ibase
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|FB_API_VER
argument_list|)
operator|&&
name|FB_API_VER
operator|>=
literal|20
end_if
begin_decl_stmt
DECL|function|qEventCallback
specifier|static
name|ISC_EVENT_CALLBACK
name|qEventCallback
argument_list|(
name|char
operator|*
name|result
argument_list|,
name|ISC_USHORT
name|length
argument_list|,
specifier|const
name|ISC_UCHAR
operator|*
name|updated
argument_list|)
else|#
directive|else
decl|static
name|isc_callback
name|qEventCallback
argument_list|(
name|char
operator|*
name|result
argument_list|,
name|short
name|length
argument_list|,
name|char
operator|*
name|updated
argument_list|)
endif|#
directive|endif
argument_list|{     if
operator|(
operator|!
name|updated
operator|)
return|return
literal|0
return|;
end_decl_stmt
begin_expr_stmt
name|memcpy
argument_list|(
name|result
argument_list|,
name|updated
argument_list|,
name|length
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qMutex
argument_list|()
operator|->
name|lock
argument_list|()
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QIBaseDriver
modifier|*
name|driver
init|=
name|qBufferDriverMap
argument_list|()
operator|->
name|value
argument_list|(
name|result
argument_list|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|qMutex
argument_list|()
operator|->
name|unlock
argument_list|()
expr_stmt|;
end_expr_stmt
begin_comment
comment|// We use an asynchronous call (i.e., queued connection) because the event callback
end_comment
begin_comment
comment|// is executed in a different thread than the one in which the driver lives.
end_comment
begin_if
if|if
condition|(
name|driver
condition|)
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|driver
argument_list|,
literal|"qHandleEventNotification"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|void
operator|*
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|result
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_if
begin_return
return|return
literal|0
return|;
end_return
begin_macro
unit|}  bool
DECL|function|subscribeToNotification
name|QIBaseDriver
end_macro
begin_expr_stmt
DECL|function|subscribeToNotification
operator|::
name|subscribeToNotification
operator|(
specifier|const
name|QString
operator|&
name|name
operator|)
block|{
name|Q_D
argument_list|(
name|QIBaseDriver
argument_list|)
block|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QIBaseDriver::subscribeFromNotificationImplementation: database not open."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_expr_stmt
begin_if
if|if
condition|(
name|d
operator|->
name|eventBuffers
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QIBaseDriver::subscribeToNotificationImplementation: already subscribing to '%s'."
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_if
begin_decl_stmt
name|QIBaseEventBuffer
modifier|*
name|eBuffer
init|=
operator|new
name|QIBaseEventBuffer
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|eBuffer
operator|->
name|subscriptionState
operator|=
name|QIBaseEventBuffer
operator|::
name|Starting
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|eBuffer
operator|->
name|bufferLength
operator|=
name|isc_event_block
argument_list|(
operator|&
name|eBuffer
operator|->
name|eventBuffer
argument_list|,
operator|&
name|eBuffer
operator|->
name|resultBuffer
argument_list|,
literal|1
argument_list|,
name|name
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qMutex
argument_list|()
operator|->
name|lock
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qBufferDriverMap
argument_list|()
operator|->
name|insert
argument_list|(
name|eBuffer
operator|->
name|resultBuffer
argument_list|,
name|this
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qMutex
argument_list|()
operator|->
name|unlock
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|d
operator|->
name|eventBuffers
operator|.
name|insert
argument_list|(
name|name
argument_list|,
name|eBuffer
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|ISC_STATUS
name|status
index|[
literal|20
index|]
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|isc_que_events
argument_list|(
name|status
argument_list|,
operator|&
name|d
operator|->
name|ibase
argument_list|,
operator|&
name|eBuffer
operator|->
name|eventId
argument_list|,
name|eBuffer
operator|->
name|bufferLength
argument_list|,
name|eBuffer
operator|->
name|eventBuffer
argument_list|,
if|#
directive|if
name|defined
argument_list|(
name|FB_API_VER
argument_list|)
operator|&&
name|FB_API_VER
operator|>=
literal|20
operator|(
name|ISC_EVENT_CALLBACK
operator|)
name|qEventCallback
argument_list|,
else|#
directive|else
operator|(
name|isc_callback
operator|)
name|qEventCallback
argument_list|,
endif|#
directive|endif
name|eBuffer
operator|->
name|resultBuffer
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|status
index|[
literal|0
index|]
operator|==
literal|1
operator|&&
name|status
index|[
literal|1
index|]
condition|)
block|{
name|setLastError
argument_list|(
name|QSqlError
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Could not subscribe to event notifications for %1."
argument_list|)
operator|.
name|arg
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|eventBuffers
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|qFreeEventBuffer
argument_list|(
name|eBuffer
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_if
begin_return
return|return
literal|true
return|;
end_return
begin_macro
unit|}  bool
DECL|function|unsubscribeFromNotification
name|QIBaseDriver
end_macro
begin_expr_stmt
DECL|function|unsubscribeFromNotification
operator|::
name|unsubscribeFromNotification
operator|(
specifier|const
name|QString
operator|&
name|name
operator|)
block|{
name|Q_D
argument_list|(
name|QIBaseDriver
argument_list|)
block|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QIBaseDriver::unsubscribeFromNotificationImplementation: database not open."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|d
operator|->
name|eventBuffers
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"QIBaseDriver::QIBaseSubscriptionState not subscribed to '%s'."
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_if
begin_decl_stmt
name|QIBaseEventBuffer
modifier|*
name|eBuffer
init|=
name|d
operator|->
name|eventBuffers
operator|.
name|value
argument_list|(
name|name
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|ISC_STATUS
name|status
index|[
literal|20
index|]
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|eBuffer
operator|->
name|subscriptionState
operator|=
name|QIBaseEventBuffer
operator|::
name|Finished
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|isc_cancel_events
argument_list|(
name|status
argument_list|,
operator|&
name|d
operator|->
name|ibase
argument_list|,
operator|&
name|eBuffer
operator|->
name|eventId
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
name|status
index|[
literal|0
index|]
operator|==
literal|1
operator|&&
name|status
index|[
literal|1
index|]
condition|)
block|{
name|setLastError
argument_list|(
name|QSqlError
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Could not unsubscribe from event notifications for %1."
argument_list|)
operator|.
name|arg
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_if
begin_expr_stmt
name|d
operator|->
name|eventBuffers
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|qFreeEventBuffer
argument_list|(
name|eBuffer
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
literal|true
return|;
end_return
begin_macro
unit|}  QStringList
DECL|function|subscribedToNotifications
name|QIBaseDriver
end_macro
begin_expr_stmt
DECL|function|subscribedToNotifications
operator|::
name|subscribedToNotifications
operator|(
operator|)
specifier|const
block|{
name|Q_D
argument_list|(
specifier|const
name|QIBaseDriver
argument_list|)
block|;
return|return
name|QStringList
argument_list|(
name|d
operator|->
name|eventBuffers
operator|.
name|keys
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
DECL|function|qHandleEventNotification
name|void
name|QIBaseDriver
operator|::
name|qHandleEventNotification
parameter_list|(
name|void
modifier|*
name|updatedResultBuffer
parameter_list|)
block|{
name|Q_D
argument_list|(
name|QIBaseDriver
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QIBaseEventBuffer
modifier|*
argument_list|>
operator|::
name|const_iterator
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|d
operator|->
name|eventBuffers
operator|.
name|constBegin
argument_list|()
init|;
name|i
operator|!=
name|d
operator|->
name|eventBuffers
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QIBaseEventBuffer
modifier|*
name|eBuffer
init|=
name|i
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|eBuffer
operator|->
name|resultBuffer
argument_list|)
operator|!=
name|updatedResultBuffer
condition|)
continue|continue;
name|ISC_ULONG
name|counts
index|[
literal|20
index|]
decl_stmt|;
name|memset
argument_list|(
name|counts
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|counts
argument_list|)
argument_list|)
expr_stmt|;
name|isc_event_counts
argument_list|(
name|counts
argument_list|,
name|eBuffer
operator|->
name|bufferLength
argument_list|,
name|eBuffer
operator|->
name|eventBuffer
argument_list|,
name|eBuffer
operator|->
name|resultBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|counts
index|[
literal|0
index|]
condition|)
block|{
if|if
condition|(
name|eBuffer
operator|->
name|subscriptionState
operator|==
name|QIBaseEventBuffer
operator|::
name|Subscribed
condition|)
block|{
emit|emit
name|notification
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
emit|;
emit|emit
name|notification
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|,
name|QSqlDriver
operator|::
name|UnknownSource
argument_list|,
name|QVariant
argument_list|()
argument_list|)
emit|;
block|}
elseif|else
if|if
condition|(
name|eBuffer
operator|->
name|subscriptionState
operator|==
name|QIBaseEventBuffer
operator|::
name|Starting
condition|)
name|eBuffer
operator|->
name|subscriptionState
operator|=
name|QIBaseEventBuffer
operator|::
name|Subscribed
expr_stmt|;
name|ISC_STATUS
name|status
index|[
literal|20
index|]
decl_stmt|;
name|isc_que_events
argument_list|(
name|status
argument_list|,
operator|&
name|d
operator|->
name|ibase
argument_list|,
operator|&
name|eBuffer
operator|->
name|eventId
argument_list|,
name|eBuffer
operator|->
name|bufferLength
argument_list|,
name|eBuffer
operator|->
name|eventBuffer
argument_list|,
if|#
directive|if
name|defined
argument_list|(
name|FB_API_VER
argument_list|)
operator|&&
name|FB_API_VER
operator|>=
literal|20
operator|(
name|ISC_EVENT_CALLBACK
operator|)
name|qEventCallback
argument_list|,
else|#
directive|else
operator|(
name|isc_callback
operator|)
name|qEventCallback
argument_list|,
endif|#
directive|endif
name|eBuffer
operator|->
name|resultBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
index|[
literal|0
index|]
operator|==
literal|1
operator|&&
name|status
index|[
literal|1
index|]
condition|)
block|{
name|qCritical
argument_list|(
literal|"QIBaseDriver::qHandleEventNotification: could not resubscribe to '%s'"
argument_list|,
name|qPrintable
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
end_function
begin_function
DECL|function|escapeIdentifier
name|QString
name|QIBaseDriver
operator|::
name|escapeIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|identifier
parameter_list|,
name|IdentifierType
parameter_list|)
specifier|const
block|{
name|QString
name|res
init|=
name|identifier
decl_stmt|;
if|if
condition|(
operator|!
name|identifier
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|identifier
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
operator|&&
operator|!
name|identifier
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
condition|)
block|{
name|res
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\"\""
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\".\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
