begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtSql module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsql_sqlite.h"
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qsqlerror.h>
end_include
begin_include
include|#
directive|include
file|<qsqlfield.h>
end_include
begin_include
include|#
directive|include
file|<qsqlindex.h>
end_include
begin_include
include|#
directive|include
file|<qsqlquery.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_if
if|#
directive|if
name|defined
name|Q_OS_WIN
end_if
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<sqlite3.h>
end_include
begin_macro
name|Q_DECLARE_OPAQUE_POINTER
argument_list|(
argument|sqlite3*
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|sqlite3*
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_OPAQUE_POINTER
argument_list|(
argument|sqlite3_stmt*
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|sqlite3_stmt*
argument_list|)
end_macro
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|_q_escapeIdentifier
specifier|static
name|QString
name|_q_escapeIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|identifier
parameter_list|)
block|{
name|QString
name|res
init|=
name|identifier
decl_stmt|;
if|if
condition|(
operator|!
name|identifier
operator|.
name|isEmpty
argument_list|()
operator|&&
name|identifier
operator|.
name|left
argument_list|(
literal|1
argument_list|)
operator|!=
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
operator|&&
name|identifier
operator|.
name|right
argument_list|(
literal|1
argument_list|)
operator|!=
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
condition|)
block|{
name|res
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\"\""
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\".\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|qGetColumnType
specifier|static
name|QVariant
operator|::
name|Type
name|qGetColumnType
parameter_list|(
specifier|const
name|QString
modifier|&
name|tpName
parameter_list|)
block|{
specifier|const
name|QString
name|typeName
init|=
name|tpName
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeName
operator|==
name|QLatin1String
argument_list|(
literal|"integer"
argument_list|)
operator|||
name|typeName
operator|==
name|QLatin1String
argument_list|(
literal|"int"
argument_list|)
condition|)
return|return
name|QVariant
operator|::
name|Int
return|;
if|if
condition|(
name|typeName
operator|==
name|QLatin1String
argument_list|(
literal|"double"
argument_list|)
operator|||
name|typeName
operator|==
name|QLatin1String
argument_list|(
literal|"float"
argument_list|)
operator|||
name|typeName
operator|==
name|QLatin1String
argument_list|(
literal|"real"
argument_list|)
operator|||
name|typeName
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"numeric"
argument_list|)
argument_list|)
condition|)
return|return
name|QVariant
operator|::
name|Double
return|;
if|if
condition|(
name|typeName
operator|==
name|QLatin1String
argument_list|(
literal|"blob"
argument_list|)
condition|)
return|return
name|QVariant
operator|::
name|ByteArray
return|;
if|if
condition|(
name|typeName
operator|==
name|QLatin1String
argument_list|(
literal|"boolean"
argument_list|)
operator|||
name|typeName
operator|==
name|QLatin1String
argument_list|(
literal|"bool"
argument_list|)
condition|)
return|return
name|QVariant
operator|::
name|Bool
return|;
return|return
name|QVariant
operator|::
name|String
return|;
block|}
end_function
begin_function
DECL|function|qMakeError
specifier|static
name|QSqlError
name|qMakeError
parameter_list|(
name|sqlite3
modifier|*
name|access
parameter_list|,
specifier|const
name|QString
modifier|&
name|descr
parameter_list|,
name|QSqlError
operator|::
name|ErrorType
name|type
parameter_list|,
name|int
name|errorCode
init|=
operator|-
literal|1
parameter_list|)
block|{
return|return
name|QSqlError
argument_list|(
name|descr
argument_list|,
name|QString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|sqlite3_errmsg16
argument_list|(
name|access
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|type
argument_list|,
name|errorCode
argument_list|)
return|;
block|}
end_function
begin_class
DECL|class|QSQLiteDriverPrivate
class|class
name|QSQLiteDriverPrivate
block|{
public|public:
DECL|function|QSQLiteDriverPrivate
specifier|inline
name|QSQLiteDriverPrivate
parameter_list|()
member_init_list|:
name|access
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|access
name|sqlite3
modifier|*
name|access
decl_stmt|;
DECL|member|results
name|QList
argument_list|<
name|QSQLiteResult
modifier|*
argument_list|>
name|results
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QSQLiteResultPrivate
class|class
name|QSQLiteResultPrivate
block|{
public|public:
name|QSQLiteResultPrivate
parameter_list|(
name|QSQLiteResult
modifier|*
name|res
parameter_list|)
constructor_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
name|bool
name|fetchNext
parameter_list|(
name|QSqlCachedResult
operator|::
name|ValueCache
modifier|&
name|values
parameter_list|,
name|int
name|idx
parameter_list|,
name|bool
name|initialFetch
parameter_list|)
function_decl|;
comment|// initializes the recordInfo and the cache
name|void
name|initColumns
parameter_list|(
name|bool
name|emptyResultset
parameter_list|)
function_decl|;
name|void
name|finalize
parameter_list|()
function_decl|;
DECL|member|q
name|QSQLiteResult
modifier|*
name|q
decl_stmt|;
DECL|member|access
name|sqlite3
modifier|*
name|access
decl_stmt|;
DECL|member|stmt
name|sqlite3_stmt
modifier|*
name|stmt
decl_stmt|;
DECL|member|skippedStatus
name|bool
name|skippedStatus
decl_stmt|;
comment|// the status of the fetchNext() that's skipped
DECL|member|skipRow
name|bool
name|skipRow
decl_stmt|;
comment|// skip the next fetchNext()?
DECL|member|rInf
name|QSqlRecord
name|rInf
decl_stmt|;
DECL|member|firstRow
name|QVector
argument_list|<
name|QVariant
argument_list|>
name|firstRow
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QSQLiteResultPrivate
name|QSQLiteResultPrivate
operator|::
name|QSQLiteResultPrivate
parameter_list|(
name|QSQLiteResult
modifier|*
name|res
parameter_list|)
member_init_list|:
name|q
argument_list|(
name|res
argument_list|)
member_init_list|,
name|access
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|stmt
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|skippedStatus
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|skipRow
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|cleanup
name|void
name|QSQLiteResultPrivate
operator|::
name|cleanup
parameter_list|()
block|{
name|finalize
argument_list|()
expr_stmt|;
name|rInf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|skippedStatus
operator|=
literal|false
expr_stmt|;
name|skipRow
operator|=
literal|false
expr_stmt|;
name|q
operator|->
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|q
operator|->
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|q
operator|->
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|finalize
name|void
name|QSQLiteResultPrivate
operator|::
name|finalize
parameter_list|()
block|{
if|if
condition|(
operator|!
name|stmt
condition|)
return|return;
name|sqlite3_finalize
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|stmt
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initColumns
name|void
name|QSQLiteResultPrivate
operator|::
name|initColumns
parameter_list|(
name|bool
name|emptyResultset
parameter_list|)
block|{
name|int
name|nCols
init|=
name|sqlite3_column_count
argument_list|(
name|stmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|nCols
operator|<=
literal|0
condition|)
return|return;
name|q
operator|->
name|init
argument_list|(
name|nCols
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nCols
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|colName
init|=
name|QString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|sqlite3_column_name16
argument_list|(
name|stmt
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
decl_stmt|;
comment|// must use typeName for resolving the type to match QSqliteDriver::record
name|QString
name|typeName
init|=
name|QString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|sqlite3_column_decltype16
argument_list|(
name|stmt
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// sqlite3_column_type is documented to have undefined behavior if the result set is empty
name|int
name|stp
init|=
name|emptyResultset
condition|?
operator|-
literal|1
else|:
name|sqlite3_column_type
argument_list|(
name|stmt
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|QVariant
operator|::
name|Type
name|fieldType
decl_stmt|;
if|if
condition|(
operator|!
name|typeName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fieldType
operator|=
name|qGetColumnType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Get the proper type for the field based on stp value
switch|switch
condition|(
name|stp
condition|)
block|{
case|case
name|SQLITE_INTEGER
case|:
name|fieldType
operator|=
name|QVariant
operator|::
name|Int
expr_stmt|;
break|break;
case|case
name|SQLITE_FLOAT
case|:
name|fieldType
operator|=
name|QVariant
operator|::
name|Double
expr_stmt|;
break|break;
case|case
name|SQLITE_BLOB
case|:
name|fieldType
operator|=
name|QVariant
operator|::
name|ByteArray
expr_stmt|;
break|break;
case|case
name|SQLITE_TEXT
case|:
name|fieldType
operator|=
name|QVariant
operator|::
name|String
expr_stmt|;
break|break;
case|case
name|SQLITE_NULL
case|:
default|default:
name|fieldType
operator|=
name|QVariant
operator|::
name|Invalid
expr_stmt|;
break|break;
block|}
block|}
name|int
name|dotIdx
init|=
name|colName
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlField
name|fld
argument_list|(
name|colName
operator|.
name|mid
argument_list|(
name|dotIdx
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|dotIdx
operator|+
literal|1
argument_list|)
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|fld
operator|.
name|setSqlType
argument_list|(
name|stp
argument_list|)
expr_stmt|;
name|rInf
operator|.
name|append
argument_list|(
name|fld
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fetchNext
name|bool
name|QSQLiteResultPrivate
operator|::
name|fetchNext
parameter_list|(
name|QSqlCachedResult
operator|::
name|ValueCache
modifier|&
name|values
parameter_list|,
name|int
name|idx
parameter_list|,
name|bool
name|initialFetch
parameter_list|)
block|{
name|int
name|res
decl_stmt|;
name|int
name|i
decl_stmt|;
if|if
condition|(
name|skipRow
condition|)
block|{
comment|// already fetched
name|Q_ASSERT
argument_list|(
operator|!
name|initialFetch
argument_list|)
expr_stmt|;
name|skipRow
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|firstRow
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|values
index|[
name|i
index|]
operator|=
name|firstRow
index|[
name|i
index|]
expr_stmt|;
return|return
name|skippedStatus
return|;
block|}
name|skipRow
operator|=
name|initialFetch
expr_stmt|;
if|if
condition|(
name|initialFetch
condition|)
block|{
name|firstRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|firstRow
operator|.
name|resize
argument_list|(
name|sqlite3_column_count
argument_list|(
name|stmt
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|stmt
condition|)
block|{
name|q
operator|->
name|setLastError
argument_list|(
name|QSqlError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QSQLiteResult"
argument_list|,
literal|"Unable to fetch row"
argument_list|)
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QSQLiteResult"
argument_list|,
literal|"No query"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAt
argument_list|(
name|QSql
operator|::
name|AfterLastRow
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|res
operator|=
name|sqlite3_step
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|res
condition|)
block|{
case|case
name|SQLITE_ROW
case|:
comment|// check to see if should fill out columns
if|if
condition|(
name|rInf
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// must be first call.
name|initColumns
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
operator|&&
operator|!
name|initialFetch
condition|)
return|return
literal|true
return|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|rInf
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|sqlite3_column_type
argument_list|(
name|stmt
argument_list|,
name|i
argument_list|)
condition|)
block|{
case|case
name|SQLITE_BLOB
case|:
name|values
index|[
name|i
operator|+
name|idx
index|]
operator|=
name|QByteArray
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|sqlite3_column_blob
argument_list|(
name|stmt
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|,
name|sqlite3_column_bytes
argument_list|(
name|stmt
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQLITE_INTEGER
case|:
name|values
index|[
name|i
operator|+
name|idx
index|]
operator|=
name|sqlite3_column_int64
argument_list|(
name|stmt
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|SQLITE_FLOAT
case|:
switch|switch
condition|(
name|q
operator|->
name|numericalPrecisionPolicy
argument_list|()
condition|)
block|{
case|case
name|QSql
operator|::
name|LowPrecisionInt32
case|:
name|values
index|[
name|i
operator|+
name|idx
index|]
operator|=
name|sqlite3_column_int
argument_list|(
name|stmt
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|LowPrecisionInt64
case|:
name|values
index|[
name|i
operator|+
name|idx
index|]
operator|=
name|sqlite3_column_int64
argument_list|(
name|stmt
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|LowPrecisionDouble
case|:
case|case
name|QSql
operator|::
name|HighPrecision
case|:
default|default:
name|values
index|[
name|i
operator|+
name|idx
index|]
operator|=
name|sqlite3_column_double
argument_list|(
name|stmt
argument_list|,
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
empty_stmt|;
break|break;
case|case
name|SQLITE_NULL
case|:
name|values
index|[
name|i
operator|+
name|idx
index|]
operator|=
name|QVariant
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
break|break;
default|default:
name|values
index|[
name|i
operator|+
name|idx
index|]
operator|=
name|QString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|sqlite3_column_text16
argument_list|(
name|stmt
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|,
name|sqlite3_column_bytes16
argument_list|(
name|stmt
argument_list|,
name|i
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
literal|true
return|;
case|case
name|SQLITE_DONE
case|:
if|if
condition|(
name|rInf
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// must be first call.
name|initColumns
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAt
argument_list|(
name|QSql
operator|::
name|AfterLastRow
argument_list|)
expr_stmt|;
name|sqlite3_reset
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
case|case
name|SQLITE_CONSTRAINT
case|:
case|case
name|SQLITE_ERROR
case|:
comment|// SQLITE_ERROR is a generic error code and we must call sqlite3_reset()
comment|// to get the specific error message.
name|res
operator|=
name|sqlite3_reset
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|q
operator|->
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|access
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QSQLiteResult"
argument_list|,
literal|"Unable to fetch row"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|res
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAt
argument_list|(
name|QSql
operator|::
name|AfterLastRow
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
case|case
name|SQLITE_MISUSE
case|:
case|case
name|SQLITE_BUSY
case|:
default|default:
comment|// something wrong, don't get col info, but still return false
name|q
operator|->
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|access
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QSQLiteResult"
argument_list|,
literal|"Unable to fetch row"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|res
argument_list|)
argument_list|)
expr_stmt|;
name|sqlite3_reset
argument_list|(
name|stmt
argument_list|)
expr_stmt|;
name|q
operator|->
name|setAt
argument_list|(
name|QSql
operator|::
name|AfterLastRow
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_constructor
DECL|function|QSQLiteResult
name|QSQLiteResult
operator|::
name|QSQLiteResult
parameter_list|(
specifier|const
name|QSQLiteDriver
modifier|*
name|db
parameter_list|)
member_init_list|:
name|QSqlCachedResult
argument_list|(
name|db
argument_list|)
block|{
name|d
operator|=
operator|new
name|QSQLiteResultPrivate
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|access
operator|=
name|db
operator|->
name|d
operator|->
name|access
expr_stmt|;
name|db
operator|->
name|d
operator|->
name|results
operator|.
name|append
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QSQLiteResult
name|QSQLiteResult
operator|::
name|~
name|QSQLiteResult
parameter_list|()
block|{
specifier|const
name|QSqlDriver
modifier|*
name|sqlDriver
init|=
name|driver
argument_list|()
decl_stmt|;
if|if
condition|(
name|sqlDriver
condition|)
name|qobject_cast
argument_list|<
specifier|const
name|QSQLiteDriver
operator|*
argument_list|>
argument_list|(
name|sqlDriver
argument_list|)
operator|->
name|d
operator|->
name|results
operator|.
name|removeOne
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|d
operator|->
name|cleanup
argument_list|()
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|virtual_hook
name|void
name|QSQLiteResult
operator|::
name|virtual_hook
parameter_list|(
name|int
name|id
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|QSqlCachedResult
operator|::
name|virtual_hook
argument_list|(
name|id
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reset
name|bool
name|QSQLiteResult
operator|::
name|reset
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
block|{
if|if
condition|(
operator|!
name|prepare
argument_list|(
name|query
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
name|exec
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|prepare
name|bool
name|QSQLiteResult
operator|::
name|prepare
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
block|{
if|if
condition|(
operator|!
name|driver
argument_list|()
operator|||
operator|!
name|driver
argument_list|()
operator|->
name|isOpen
argument_list|()
operator|||
name|driver
argument_list|()
operator|->
name|isOpenError
argument_list|()
condition|)
return|return
literal|false
return|;
name|d
operator|->
name|cleanup
argument_list|()
expr_stmt|;
name|setSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|const
name|void
modifier|*
name|pzTail
init|=
name|NULL
decl_stmt|;
if|#
directive|if
operator|(
name|SQLITE_VERSION_NUMBER
operator|>=
literal|3003011
operator|)
name|int
name|res
init|=
name|sqlite3_prepare16_v2
argument_list|(
name|d
operator|->
name|access
argument_list|,
name|query
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
name|query
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|stmt
argument_list|,
operator|&
name|pzTail
argument_list|)
decl_stmt|;
else|#
directive|else
name|int
name|res
init|=
name|sqlite3_prepare16
argument_list|(
name|d
operator|->
name|access
argument_list|,
name|query
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
name|query
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|stmt
argument_list|,
operator|&
name|pzTail
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|res
operator|!=
name|SQLITE_OK
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|d
operator|->
name|access
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QSQLiteResult"
argument_list|,
literal|"Unable to execute statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|res
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|finalize
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|pzTail
operator|&&
operator|!
name|QString
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|QChar
operator|*
argument_list|>
argument_list|(
name|pzTail
argument_list|)
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|d
operator|->
name|access
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QSQLiteResult"
argument_list|,
literal|"Unable to execute multiple statements at a time"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|SQLITE_MISUSE
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|finalize
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|exec
name|bool
name|QSQLiteResult
operator|::
name|exec
parameter_list|()
block|{
specifier|const
name|QVector
argument_list|<
name|QVariant
argument_list|>
name|values
init|=
name|boundValues
argument_list|()
decl_stmt|;
name|d
operator|->
name|skippedStatus
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|skipRow
operator|=
literal|false
expr_stmt|;
name|d
operator|->
name|rInf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clearValues
argument_list|()
expr_stmt|;
name|setLastError
argument_list|(
name|QSqlError
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|res
init|=
name|sqlite3_reset
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
name|SQLITE_OK
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|d
operator|->
name|access
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QSQLiteResult"
argument_list|,
literal|"Unable to reset statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|res
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|finalize
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|paramCount
init|=
name|sqlite3_bind_parameter_count
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramCount
operator|==
name|values
operator|.
name|count
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paramCount
condition|;
operator|++
name|i
control|)
block|{
name|res
operator|=
name|SQLITE_OK
expr_stmt|;
specifier|const
name|QVariant
name|value
init|=
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|res
operator|=
name|sqlite3_bind_null
argument_list|(
name|d
operator|->
name|stmt
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|value
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|ByteArray
case|:
block|{
specifier|const
name|QByteArray
modifier|*
name|ba
init|=
cast|static_cast
argument_list|<
specifier|const
name|QByteArray
operator|*
argument_list|>
argument_list|(
name|value
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|res
operator|=
name|sqlite3_bind_blob
argument_list|(
name|d
operator|->
name|stmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|ba
operator|->
name|constData
argument_list|()
argument_list|,
name|ba
operator|->
name|size
argument_list|()
argument_list|,
name|SQLITE_STATIC
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Int
case|:
case|case
name|QVariant
operator|::
name|Bool
case|:
name|res
operator|=
name|sqlite3_bind_int
argument_list|(
name|d
operator|->
name|stmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
name|res
operator|=
name|sqlite3_bind_double
argument_list|(
name|d
operator|->
name|stmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|value
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|UInt
case|:
case|case
name|QVariant
operator|::
name|LongLong
case|:
name|res
operator|=
name|sqlite3_bind_int64
argument_list|(
name|d
operator|->
name|stmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|value
operator|.
name|toLongLong
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
block|{
comment|// lifetime of string == lifetime of its qvariant
specifier|const
name|QString
modifier|*
name|str
init|=
cast|static_cast
argument_list|<
specifier|const
name|QString
operator|*
argument_list|>
argument_list|(
name|value
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|res
operator|=
name|sqlite3_bind_text16
argument_list|(
name|d
operator|->
name|stmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|str
operator|->
name|utf16
argument_list|()
argument_list|,
operator|(
name|str
operator|->
name|size
argument_list|()
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|,
name|SQLITE_STATIC
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|QString
name|str
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// SQLITE_TRANSIENT makes sure that sqlite buffers the data
name|res
operator|=
name|sqlite3_bind_text16
argument_list|(
name|d
operator|->
name|stmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|str
operator|.
name|utf16
argument_list|()
argument_list|,
operator|(
name|str
operator|.
name|size
argument_list|()
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|,
name|SQLITE_TRANSIENT
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|res
operator|!=
name|SQLITE_OK
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|d
operator|->
name|access
argument_list|,
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QSQLiteResult"
argument_list|,
literal|"Unable to bind parameters"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|res
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|finalize
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
name|setLastError
argument_list|(
name|QSqlError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QSQLiteResult"
argument_list|,
literal|"Parameter count mismatch"
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|skippedStatus
operator|=
name|d
operator|->
name|fetchNext
argument_list|(
name|d
operator|->
name|firstRow
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastError
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|setSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|setSelect
argument_list|(
operator|!
name|d
operator|->
name|rInf
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|gotoNext
name|bool
name|QSQLiteResult
operator|::
name|gotoNext
parameter_list|(
name|QSqlCachedResult
operator|::
name|ValueCache
modifier|&
name|row
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
return|return
name|d
operator|->
name|fetchNext
argument_list|(
name|row
argument_list|,
name|idx
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|size
name|int
name|QSQLiteResult
operator|::
name|size
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|numRowsAffected
name|int
name|QSQLiteResult
operator|::
name|numRowsAffected
parameter_list|()
block|{
return|return
name|sqlite3_changes
argument_list|(
name|d
operator|->
name|access
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|lastInsertId
name|QVariant
name|QSQLiteResult
operator|::
name|lastInsertId
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|isActive
argument_list|()
condition|)
block|{
name|qint64
name|id
init|=
name|sqlite3_last_insert_rowid
argument_list|(
name|d
operator|->
name|access
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
condition|)
return|return
name|id
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|record
name|QSqlRecord
name|QSQLiteResult
operator|::
name|record
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isActive
argument_list|()
operator|||
operator|!
name|isSelect
argument_list|()
condition|)
return|return
name|QSqlRecord
argument_list|()
return|;
return|return
name|d
operator|->
name|rInf
return|;
block|}
end_function
begin_function
DECL|function|detachFromResultSet
name|void
name|QSQLiteResult
operator|::
name|detachFromResultSet
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|stmt
condition|)
name|sqlite3_reset
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handle
name|QVariant
name|QSQLiteResult
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|d
operator|->
name|stmt
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/////////////////////////////////////////////////////////
end_comment
begin_constructor
DECL|function|QSQLiteDriver
name|QSQLiteDriver
operator|::
name|QSQLiteDriver
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSqlDriver
argument_list|(
name|parent
argument_list|)
block|{
name|d
operator|=
operator|new
name|QSQLiteDriverPrivate
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QSQLiteDriver
name|QSQLiteDriver
operator|::
name|QSQLiteDriver
parameter_list|(
name|sqlite3
modifier|*
name|connection
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSqlDriver
argument_list|(
name|parent
argument_list|)
block|{
name|d
operator|=
operator|new
name|QSQLiteDriverPrivate
argument_list|()
expr_stmt|;
name|d
operator|->
name|access
operator|=
name|connection
expr_stmt|;
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QSQLiteDriver
name|QSQLiteDriver
operator|::
name|~
name|QSQLiteDriver
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|hasFeature
name|bool
name|QSQLiteDriver
operator|::
name|hasFeature
parameter_list|(
name|DriverFeature
name|f
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|f
condition|)
block|{
case|case
name|BLOB
case|:
case|case
name|Transactions
case|:
case|case
name|Unicode
case|:
case|case
name|LastInsertId
case|:
case|case
name|PreparedQueries
case|:
case|case
name|PositionalPlaceholders
case|:
case|case
name|SimpleLocking
case|:
case|case
name|FinishQuery
case|:
case|case
name|LowPrecisionNumbers
case|:
return|return
literal|true
return|;
case|case
name|QuerySize
case|:
case|case
name|NamedPlaceholders
case|:
case|case
name|BatchOperations
case|:
case|case
name|EventNotifications
case|:
case|case
name|MultipleResultSets
case|:
case|case
name|CancelQuery
case|:
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*    SQLite dbs have no user name, passwords, hosts or ports.    just file names. */
end_comment
begin_function
DECL|function|open
name|bool
name|QSQLiteDriver
operator|::
name|open
parameter_list|(
specifier|const
name|QString
modifier|&
name|db
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QString
modifier|&
name|conOpts
parameter_list|)
block|{
if|if
condition|(
name|isOpen
argument_list|()
condition|)
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|bool
name|sharedCache
init|=
literal|false
decl_stmt|;
name|int
name|openMode
init|=
name|SQLITE_OPEN_READWRITE
operator||
name|SQLITE_OPEN_CREATE
decl_stmt|,
name|timeOut
init|=
literal|5000
decl_stmt|;
name|QStringList
name|opts
init|=
name|QString
argument_list|(
name|conOpts
argument_list|)
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|option
decl|,
name|opts
control|)
block|{
if|if
condition|(
name|option
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"QSQLITE_BUSY_TIMEOUT="
argument_list|)
argument_list|)
condition|)
block|{
name|bool
name|ok
decl_stmt|;
name|int
name|nt
init|=
name|option
operator|.
name|mid
argument_list|(
literal|21
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
name|timeOut
operator|=
name|nt
expr_stmt|;
block|}
if|if
condition|(
name|option
operator|==
name|QLatin1String
argument_list|(
literal|"QSQLITE_OPEN_READONLY"
argument_list|)
condition|)
name|openMode
operator|=
name|SQLITE_OPEN_READONLY
expr_stmt|;
if|if
condition|(
name|option
operator|==
name|QLatin1String
argument_list|(
literal|"QSQLITE_ENABLE_SHARED_CACHE"
argument_list|)
condition|)
name|sharedCache
operator|=
literal|true
expr_stmt|;
block|}
name|sqlite3_enable_shared_cache
argument_list|(
name|sharedCache
argument_list|)
expr_stmt|;
if|if
condition|(
name|sqlite3_open_v2
argument_list|(
name|db
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|d
operator|->
name|access
argument_list|,
name|openMode
argument_list|,
name|NULL
argument_list|)
operator|==
name|SQLITE_OK
condition|)
block|{
name|sqlite3_busy_timeout
argument_list|(
name|d
operator|->
name|access
argument_list|,
name|timeOut
argument_list|)
expr_stmt|;
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|d
operator|->
name|access
condition|)
block|{
name|sqlite3_close
argument_list|(
name|d
operator|->
name|access
argument_list|)
expr_stmt|;
name|d
operator|->
name|access
operator|=
literal|0
expr_stmt|;
block|}
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|d
operator|->
name|access
argument_list|,
name|tr
argument_list|(
literal|"Error opening database"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|)
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|close
name|void
name|QSQLiteDriver
operator|::
name|close
parameter_list|()
block|{
if|if
condition|(
name|isOpen
argument_list|()
condition|)
block|{
foreach|foreach
control|(
name|QSQLiteResult
modifier|*
name|result
decl|,
name|d
operator|->
name|results
control|)
block|{
name|result
operator|->
name|d
operator|->
name|finalize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sqlite3_close
argument_list|(
name|d
operator|->
name|access
argument_list|)
operator|!=
name|SQLITE_OK
condition|)
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|d
operator|->
name|access
argument_list|,
name|tr
argument_list|(
literal|"Error closing database"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|access
operator|=
literal|0
expr_stmt|;
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createResult
name|QSqlResult
modifier|*
name|QSQLiteDriver
operator|::
name|createResult
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QSQLiteResult
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|beginTransaction
name|bool
name|QSQLiteDriver
operator|::
name|beginTransaction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
operator|||
name|isOpenError
argument_list|()
condition|)
return|return
literal|false
return|;
name|QSqlQuery
name|q
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|.
name|exec
argument_list|(
name|QLatin1String
argument_list|(
literal|"BEGIN"
argument_list|)
argument_list|)
condition|)
block|{
name|setLastError
argument_list|(
name|QSqlError
argument_list|(
name|tr
argument_list|(
literal|"Unable to begin transaction"
argument_list|)
argument_list|,
name|q
operator|.
name|lastError
argument_list|()
operator|.
name|databaseText
argument_list|()
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|commitTransaction
name|bool
name|QSQLiteDriver
operator|::
name|commitTransaction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
operator|||
name|isOpenError
argument_list|()
condition|)
return|return
literal|false
return|;
name|QSqlQuery
name|q
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|.
name|exec
argument_list|(
name|QLatin1String
argument_list|(
literal|"COMMIT"
argument_list|)
argument_list|)
condition|)
block|{
name|setLastError
argument_list|(
name|QSqlError
argument_list|(
name|tr
argument_list|(
literal|"Unable to commit transaction"
argument_list|)
argument_list|,
name|q
operator|.
name|lastError
argument_list|()
operator|.
name|databaseText
argument_list|()
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|rollbackTransaction
name|bool
name|QSQLiteDriver
operator|::
name|rollbackTransaction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
operator|||
name|isOpenError
argument_list|()
condition|)
return|return
literal|false
return|;
name|QSqlQuery
name|q
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|.
name|exec
argument_list|(
name|QLatin1String
argument_list|(
literal|"ROLLBACK"
argument_list|)
argument_list|)
condition|)
block|{
name|setLastError
argument_list|(
name|QSqlError
argument_list|(
name|tr
argument_list|(
literal|"Unable to rollback transaction"
argument_list|)
argument_list|,
name|q
operator|.
name|lastError
argument_list|()
operator|.
name|databaseText
argument_list|()
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|tables
name|QStringList
name|QSQLiteDriver
operator|::
name|tables
parameter_list|(
name|QSql
operator|::
name|TableType
name|type
parameter_list|)
specifier|const
block|{
name|QStringList
name|res
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|res
return|;
name|QSqlQuery
name|q
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QString
name|sql
init|=
name|QLatin1String
argument_list|(
literal|"SELECT name FROM sqlite_master WHERE %1 "
literal|"UNION ALL SELECT name FROM sqlite_temp_master WHERE %1"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|type
operator|&
name|QSql
operator|::
name|Tables
operator|)
operator|&&
operator|(
name|type
operator|&
name|QSql
operator|::
name|Views
operator|)
condition|)
name|sql
operator|=
name|sql
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
literal|"type='table' OR type='view'"
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|Tables
condition|)
name|sql
operator|=
name|sql
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
literal|"type='table'"
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|Views
condition|)
name|sql
operator|=
name|sql
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
literal|"type='view'"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|sql
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|sql
operator|.
name|isEmpty
argument_list|()
operator|&&
name|q
operator|.
name|exec
argument_list|(
name|sql
argument_list|)
condition|)
block|{
while|while
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
name|res
operator|.
name|append
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|SystemTables
condition|)
block|{
comment|// there are no internal tables beside this one:
name|res
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"sqlite_master"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|qGetTableInfo
specifier|static
name|QSqlIndex
name|qGetTableInfo
parameter_list|(
name|QSqlQuery
modifier|&
name|q
parameter_list|,
specifier|const
name|QString
modifier|&
name|tableName
parameter_list|,
name|bool
name|onlyPIndex
init|=
literal|false
parameter_list|)
block|{
name|QString
name|schema
decl_stmt|;
name|QString
name|table
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|indexOfSeparator
init|=
name|tableName
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexOfSeparator
operator|>
operator|-
literal|1
condition|)
block|{
name|schema
operator|=
name|tableName
operator|.
name|left
argument_list|(
name|indexOfSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|=
name|tableName
operator|.
name|mid
argument_list|(
name|indexOfSeparator
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|q
operator|.
name|exec
argument_list|(
name|QLatin1String
argument_list|(
literal|"PRAGMA "
argument_list|)
operator|+
name|schema
operator|+
name|QLatin1String
argument_list|(
literal|"table_info ("
argument_list|)
operator|+
name|_q_escapeIdentifier
argument_list|(
name|table
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|")"
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlIndex
name|ind
decl_stmt|;
while|while
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
block|{
name|bool
name|isPk
init|=
name|q
operator|.
name|value
argument_list|(
literal|5
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|onlyPIndex
operator|&&
operator|!
name|isPk
condition|)
continue|continue;
name|QString
name|typeName
init|=
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QSqlField
name|fld
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|qGetColumnType
argument_list|(
name|typeName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPk
operator|&&
operator|(
name|typeName
operator|==
name|QLatin1String
argument_list|(
literal|"integer"
argument_list|)
operator|)
condition|)
comment|// INTEGER PRIMARY KEY fields are auto-generated in sqlite
comment|// INT PRIMARY KEY is not the same as INTEGER PRIMARY KEY!
name|fld
operator|.
name|setAutoValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fld
operator|.
name|setRequired
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toInt
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|fld
operator|.
name|setDefaultValue
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|ind
operator|.
name|append
argument_list|(
name|fld
argument_list|)
expr_stmt|;
block|}
return|return
name|ind
return|;
block|}
end_function
begin_function
DECL|function|primaryIndex
name|QSqlIndex
name|QSQLiteDriver
operator|::
name|primaryIndex
parameter_list|(
specifier|const
name|QString
modifier|&
name|tblname
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|QSqlIndex
argument_list|()
return|;
name|QString
name|table
init|=
name|tblname
decl_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|table
operator|=
name|stripDelimiters
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|qGetTableInfo
argument_list|(
name|q
argument_list|,
name|table
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|record
name|QSqlRecord
name|QSQLiteDriver
operator|::
name|record
parameter_list|(
specifier|const
name|QString
modifier|&
name|tbl
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|QSqlRecord
argument_list|()
return|;
name|QString
name|table
init|=
name|tbl
decl_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|table
operator|=
name|stripDelimiters
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|createResult
argument_list|()
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|qGetTableInfo
argument_list|(
name|q
argument_list|,
name|table
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handle
name|QVariant
name|QSQLiteDriver
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|d
operator|->
name|access
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|escapeIdentifier
name|QString
name|QSQLiteDriver
operator|::
name|escapeIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|identifier
parameter_list|,
name|IdentifierType
name|type
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|_q_escapeIdentifier
argument_list|(
name|identifier
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
