begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtSql module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qsql_db2.h"
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qsqlfield.h>
end_include
begin_include
include|#
directive|include
file|<qsqlerror.h>
end_include
begin_include
include|#
directive|include
file|<qsqlindex.h>
end_include
begin_include
include|#
directive|include
file|<qsqlrecord.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_BOR
argument_list|)
end_if
begin_comment
comment|// DB2's sqlsystm.h (included through sqlcli1.h) defines the SQL_BIGINT_TYPE
end_comment
begin_comment
comment|// and SQL_BIGUINT_TYPE to wrong the types for Borland; so do the defines to
end_comment
begin_comment
comment|// the right type before including the header
end_comment
begin_define
DECL|macro|SQL_BIGINT_TYPE
define|#
directive|define
name|SQL_BIGINT_TYPE
value|qint64
end_define
begin_define
DECL|macro|SQL_BIGUINT_TYPE
define|#
directive|define
name|SQL_BIGUINT_TYPE
value|quint64
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|UNICODE
define|#
directive|define
name|UNICODE
end_define
begin_include
include|#
directive|include
file|<sqlcli1.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|COLNAMESIZE
specifier|static
specifier|const
name|int
name|COLNAMESIZE
init|=
literal|255
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qParamType
specifier|static
specifier|const
name|SQLSMALLINT
name|qParamType
index|[
literal|4
index|]
init|=
block|{
name|SQL_PARAM_INPUT
block|,
name|SQL_PARAM_INPUT
block|,
name|SQL_PARAM_OUTPUT
block|,
name|SQL_PARAM_INPUT_OUTPUT
block|}
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|QDB2DriverPrivate
class|class
name|QDB2DriverPrivate
block|{
public|public:
DECL|function|QDB2DriverPrivate
name|QDB2DriverPrivate
parameter_list|()
member_init_list|:
name|hEnv
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|hDbc
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|hEnv
name|SQLHANDLE
name|hEnv
decl_stmt|;
DECL|member|hDbc
name|SQLHANDLE
name|hDbc
decl_stmt|;
DECL|member|user
name|QString
name|user
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QDB2ResultPrivate
class|class
name|QDB2ResultPrivate
block|{
public|public:
DECL|function|QDB2ResultPrivate
name|QDB2ResultPrivate
parameter_list|(
specifier|const
name|QDB2DriverPrivate
modifier|*
name|d
parameter_list|)
member_init_list|:
name|dp
argument_list|(
name|d
argument_list|)
member_init_list|,
name|hStmt
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|~QDB2ResultPrivate
name|~
name|QDB2ResultPrivate
parameter_list|()
block|{
name|emptyValueCache
argument_list|()
expr_stmt|;
block|}
DECL|function|clearValueCache
name|void
name|clearValueCache
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valueCache
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
operator|delete
name|valueCache
index|[
name|i
index|]
expr_stmt|;
name|valueCache
index|[
name|i
index|]
operator|=
name|NULL
expr_stmt|;
block|}
block|}
DECL|function|emptyValueCache
name|void
name|emptyValueCache
parameter_list|()
block|{
name|clearValueCache
argument_list|()
expr_stmt|;
name|valueCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|member|dp
specifier|const
name|QDB2DriverPrivate
modifier|*
name|dp
decl_stmt|;
DECL|member|hStmt
name|SQLHANDLE
name|hStmt
decl_stmt|;
DECL|member|recInf
name|QSqlRecord
name|recInf
decl_stmt|;
DECL|member|valueCache
name|QVector
argument_list|<
name|QVariant
modifier|*
argument_list|>
name|valueCache
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|qFromTChar
specifier|static
name|QString
name|qFromTChar
parameter_list|(
name|SQLTCHAR
modifier|*
name|str
parameter_list|)
block|{
return|return
name|QString
argument_list|(
operator|(
specifier|const
name|QChar
operator|*
operator|)
name|str
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// dangerous!! (but fast). Don't use in functions that
end_comment
begin_comment
comment|// require out parameters!
end_comment
begin_function
DECL|function|qToTChar
specifier|static
name|SQLTCHAR
modifier|*
name|qToTChar
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
return|return
operator|(
name|SQLTCHAR
operator|*
operator|)
name|str
operator|.
name|utf16
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qWarnDB2Handle
specifier|static
name|QString
name|qWarnDB2Handle
parameter_list|(
name|int
name|handleType
parameter_list|,
name|SQLHANDLE
name|handle
parameter_list|)
block|{
name|SQLINTEGER
name|nativeCode
decl_stmt|;
name|SQLSMALLINT
name|msgLen
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQL_ERROR
decl_stmt|;
name|SQLTCHAR
name|state
index|[
name|SQL_SQLSTATE_SIZE
operator|+
literal|1
index|]
decl_stmt|;
name|SQLTCHAR
name|description
index|[
name|SQL_MAX_MESSAGE_LENGTH
index|]
decl_stmt|;
name|r
operator|=
name|SQLGetDiagRec
argument_list|(
name|handleType
argument_list|,
name|handle
argument_list|,
literal|1
argument_list|,
operator|(
name|SQLTCHAR
operator|*
operator|)
name|state
argument_list|,
operator|&
name|nativeCode
argument_list|,
operator|(
name|SQLTCHAR
operator|*
operator|)
name|description
argument_list|,
name|SQL_MAX_MESSAGE_LENGTH
operator|-
literal|1
argument_list|,
comment|/* in bytes, not in characters */
operator|&
name|msgLen
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
return|return
name|QString
argument_list|(
name|qFromTChar
argument_list|(
name|description
argument_list|)
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|qDB2Warn
specifier|static
name|QString
name|qDB2Warn
parameter_list|(
specifier|const
name|QDB2DriverPrivate
modifier|*
name|d
parameter_list|)
block|{
return|return
operator|(
name|qWarnDB2Handle
argument_list|(
name|SQL_HANDLE_ENV
argument_list|,
name|d
operator|->
name|hEnv
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|qWarnDB2Handle
argument_list|(
name|SQL_HANDLE_DBC
argument_list|,
name|d
operator|->
name|hDbc
argument_list|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qDB2Warn
specifier|static
name|QString
name|qDB2Warn
parameter_list|(
specifier|const
name|QDB2ResultPrivate
modifier|*
name|d
parameter_list|)
block|{
return|return
operator|(
name|qWarnDB2Handle
argument_list|(
name|SQL_HANDLE_ENV
argument_list|,
name|d
operator|->
name|dp
operator|->
name|hEnv
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|qWarnDB2Handle
argument_list|(
name|SQL_HANDLE_DBC
argument_list|,
name|d
operator|->
name|dp
operator|->
name|hDbc
argument_list|)
operator|+
name|qWarnDB2Handle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|d
operator|->
name|hStmt
argument_list|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qSqlWarning
specifier|static
name|void
name|qSqlWarning
parameter_list|(
specifier|const
name|QString
modifier|&
name|message
parameter_list|,
specifier|const
name|QDB2DriverPrivate
modifier|*
name|d
parameter_list|)
block|{
name|qWarning
argument_list|(
literal|"%s\tError: %s"
argument_list|,
name|message
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|qDB2Warn
argument_list|(
name|d
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qSqlWarning
specifier|static
name|void
name|qSqlWarning
parameter_list|(
specifier|const
name|QString
modifier|&
name|message
parameter_list|,
specifier|const
name|QDB2ResultPrivate
modifier|*
name|d
parameter_list|)
block|{
name|qWarning
argument_list|(
literal|"%s\tError: %s"
argument_list|,
name|message
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|qDB2Warn
argument_list|(
name|d
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qMakeError
specifier|static
name|QSqlError
name|qMakeError
parameter_list|(
specifier|const
name|QString
modifier|&
name|err
parameter_list|,
name|QSqlError
operator|::
name|ErrorType
name|type
parameter_list|,
specifier|const
name|QDB2DriverPrivate
modifier|*
name|p
parameter_list|)
block|{
return|return
name|QSqlError
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2: "
argument_list|)
operator|+
name|err
argument_list|,
name|qDB2Warn
argument_list|(
name|p
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qMakeError
specifier|static
name|QSqlError
name|qMakeError
parameter_list|(
specifier|const
name|QString
modifier|&
name|err
parameter_list|,
name|QSqlError
operator|::
name|ErrorType
name|type
parameter_list|,
specifier|const
name|QDB2ResultPrivate
modifier|*
name|p
parameter_list|)
block|{
return|return
name|QSqlError
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2: "
argument_list|)
operator|+
name|err
argument_list|,
name|qDB2Warn
argument_list|(
name|p
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qDecodeDB2Type
specifier|static
name|QVariant
operator|::
name|Type
name|qDecodeDB2Type
parameter_list|(
name|SQLSMALLINT
name|sqltype
parameter_list|)
block|{
name|QVariant
operator|::
name|Type
name|type
init|=
name|QVariant
operator|::
name|Invalid
decl_stmt|;
switch|switch
condition|(
name|sqltype
condition|)
block|{
case|case
name|SQL_REAL
case|:
case|case
name|SQL_FLOAT
case|:
case|case
name|SQL_DOUBLE
case|:
case|case
name|SQL_DECIMAL
case|:
case|case
name|SQL_NUMERIC
case|:
name|type
operator|=
name|QVariant
operator|::
name|Double
expr_stmt|;
break|break;
case|case
name|SQL_SMALLINT
case|:
case|case
name|SQL_INTEGER
case|:
case|case
name|SQL_BIT
case|:
case|case
name|SQL_TINYINT
case|:
name|type
operator|=
name|QVariant
operator|::
name|Int
expr_stmt|;
break|break;
case|case
name|SQL_BIGINT
case|:
name|type
operator|=
name|QVariant
operator|::
name|LongLong
expr_stmt|;
break|break;
case|case
name|SQL_BLOB
case|:
case|case
name|SQL_BINARY
case|:
case|case
name|SQL_VARBINARY
case|:
case|case
name|SQL_LONGVARBINARY
case|:
case|case
name|SQL_CLOB
case|:
case|case
name|SQL_DBCLOB
case|:
name|type
operator|=
name|QVariant
operator|::
name|ByteArray
expr_stmt|;
break|break;
case|case
name|SQL_DATE
case|:
case|case
name|SQL_TYPE_DATE
case|:
name|type
operator|=
name|QVariant
operator|::
name|Date
expr_stmt|;
break|break;
case|case
name|SQL_TIME
case|:
case|case
name|SQL_TYPE_TIME
case|:
name|type
operator|=
name|QVariant
operator|::
name|Time
expr_stmt|;
break|break;
case|case
name|SQL_TIMESTAMP
case|:
case|case
name|SQL_TYPE_TIMESTAMP
case|:
name|type
operator|=
name|QVariant
operator|::
name|DateTime
expr_stmt|;
break|break;
case|case
name|SQL_WCHAR
case|:
case|case
name|SQL_WVARCHAR
case|:
case|case
name|SQL_WLONGVARCHAR
case|:
case|case
name|SQL_CHAR
case|:
case|case
name|SQL_VARCHAR
case|:
case|case
name|SQL_LONGVARCHAR
case|:
name|type
operator|=
name|QVariant
operator|::
name|String
expr_stmt|;
break|break;
default|default:
name|type
operator|=
name|QVariant
operator|::
name|ByteArray
expr_stmt|;
break|break;
block|}
return|return
name|type
return|;
block|}
end_function
begin_function
DECL|function|qMakeFieldInfo
specifier|static
name|QSqlField
name|qMakeFieldInfo
parameter_list|(
specifier|const
name|QDB2ResultPrivate
modifier|*
name|d
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|SQLSMALLINT
name|colNameLen
decl_stmt|;
name|SQLSMALLINT
name|colType
decl_stmt|;
name|SQLUINTEGER
name|colSize
decl_stmt|;
name|SQLSMALLINT
name|colScale
decl_stmt|;
name|SQLSMALLINT
name|nullable
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQL_ERROR
decl_stmt|;
name|SQLTCHAR
name|colName
index|[
name|COLNAMESIZE
index|]
decl_stmt|;
name|r
operator|=
name|SQLDescribeCol
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|colName
argument_list|,
operator|(
name|SQLSMALLINT
operator|)
name|COLNAMESIZE
argument_list|,
operator|&
name|colNameLen
argument_list|,
operator|&
name|colType
argument_list|,
operator|&
name|colSize
argument_list|,
operator|&
name|colScale
argument_list|,
operator|&
name|nullable
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"qMakeFieldInfo: Unable to describe column %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|QSqlField
argument_list|()
return|;
block|}
name|QSqlField
name|f
argument_list|(
name|qFromTChar
argument_list|(
name|colName
argument_list|)
argument_list|,
name|qDecodeDB2Type
argument_list|(
name|colType
argument_list|)
argument_list|)
decl_stmt|;
comment|// nullable can be SQL_NO_NULLS, SQL_NULLABLE or SQL_NULLABLE_UNKNOWN
if|if
condition|(
name|nullable
operator|==
name|SQL_NO_NULLS
condition|)
name|f
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|nullable
operator|==
name|SQL_NULLABLE
condition|)
name|f
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// else required is unknown
name|f
operator|.
name|setLength
argument_list|(
name|colSize
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|int
argument_list|(
name|colSize
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPrecision
argument_list|(
name|colScale
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|int
argument_list|(
name|colScale
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|setSqlType
argument_list|(
name|int
argument_list|(
name|colType
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
end_function
begin_function
DECL|function|qGetIntData
specifier|static
name|int
name|qGetIntData
parameter_list|(
name|SQLHANDLE
name|hStmt
parameter_list|,
name|int
name|column
parameter_list|,
name|bool
modifier|&
name|isNull
parameter_list|)
block|{
name|SQLINTEGER
name|intbuf
decl_stmt|;
name|isNull
operator|=
literal|false
expr_stmt|;
name|SQLINTEGER
name|lengthIndicator
init|=
literal|0
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLGetData
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|SQL_C_SLONG
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|intbuf
argument_list|,
literal|0
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|||
name|lengthIndicator
operator|==
name|SQL_NULL_DATA
condition|)
block|{
name|isNull
operator|=
literal|true
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|int
argument_list|(
name|intbuf
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qGetDoubleData
specifier|static
name|double
name|qGetDoubleData
parameter_list|(
name|SQLHANDLE
name|hStmt
parameter_list|,
name|int
name|column
parameter_list|,
name|bool
modifier|&
name|isNull
parameter_list|)
block|{
name|SQLDOUBLE
name|dblbuf
decl_stmt|;
name|isNull
operator|=
literal|false
expr_stmt|;
name|SQLINTEGER
name|lengthIndicator
init|=
literal|0
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLGetData
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|SQL_C_DOUBLE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|dblbuf
argument_list|,
literal|0
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|||
name|lengthIndicator
operator|==
name|SQL_NULL_DATA
condition|)
block|{
name|isNull
operator|=
literal|true
expr_stmt|;
return|return
literal|0.0
return|;
block|}
return|return
operator|(
name|double
operator|)
name|dblbuf
return|;
block|}
end_function
begin_function
DECL|function|qGetBigIntData
specifier|static
name|SQLBIGINT
name|qGetBigIntData
parameter_list|(
name|SQLHANDLE
name|hStmt
parameter_list|,
name|int
name|column
parameter_list|,
name|bool
modifier|&
name|isNull
parameter_list|)
block|{
name|SQLBIGINT
name|lngbuf
init|=
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|isNull
operator|=
literal|false
expr_stmt|;
name|SQLINTEGER
name|lengthIndicator
init|=
literal|0
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLGetData
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|SQL_C_SBIGINT
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|lngbuf
argument_list|,
literal|0
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|||
name|lengthIndicator
operator|==
name|SQL_NULL_DATA
condition|)
name|isNull
operator|=
literal|true
expr_stmt|;
return|return
name|lngbuf
return|;
block|}
end_function
begin_function
DECL|function|qGetStringData
specifier|static
name|QString
name|qGetStringData
parameter_list|(
name|SQLHANDLE
name|hStmt
parameter_list|,
name|int
name|column
parameter_list|,
name|int
name|colSize
parameter_list|,
name|bool
modifier|&
name|isNull
parameter_list|)
block|{
name|QString
name|fieldVal
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQL_ERROR
decl_stmt|;
name|SQLINTEGER
name|lengthIndicator
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|colSize
operator|<=
literal|0
condition|)
name|colSize
operator|=
literal|255
expr_stmt|;
elseif|else
if|if
condition|(
name|colSize
operator|>
literal|65536
condition|)
comment|// limit buffer size to 64 KB
name|colSize
operator|=
literal|65536
expr_stmt|;
else|else
name|colSize
operator|++
expr_stmt|;
comment|// make sure there is room for more than the 0 termination
name|SQLTCHAR
modifier|*
name|buf
init|=
operator|new
name|SQLTCHAR
index|[
name|colSize
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|r
operator|=
name|SQLGetData
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|SQL_C_WCHAR
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|buf
argument_list|,
name|colSize
operator|*
sizeof|sizeof
argument_list|(
name|SQLTCHAR
argument_list|)
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
if|if
condition|(
name|lengthIndicator
operator|==
name|SQL_NULL_DATA
operator|||
name|lengthIndicator
operator|==
name|SQL_NO_TOTAL
condition|)
block|{
name|fieldVal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|isNull
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|fieldVal
operator|+=
name|qFromTChar
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|==
name|SQL_NO_DATA
condition|)
block|{
break|break;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"qGetStringData: Error while fetching data (%d)"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|fieldVal
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
operator|delete
index|[]
name|buf
expr_stmt|;
return|return
name|fieldVal
return|;
block|}
end_function
begin_function
DECL|function|qGetBinaryData
specifier|static
name|QByteArray
name|qGetBinaryData
parameter_list|(
name|SQLHANDLE
name|hStmt
parameter_list|,
name|int
name|column
parameter_list|,
name|SQLINTEGER
modifier|&
name|lengthIndicator
parameter_list|,
name|bool
modifier|&
name|isNull
parameter_list|)
block|{
name|QByteArray
name|fieldVal
decl_stmt|;
name|SQLSMALLINT
name|colNameLen
decl_stmt|;
name|SQLSMALLINT
name|colType
decl_stmt|;
name|SQLUINTEGER
name|colSize
decl_stmt|;
name|SQLSMALLINT
name|colScale
decl_stmt|;
name|SQLSMALLINT
name|nullable
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQL_ERROR
decl_stmt|;
name|SQLTCHAR
name|colName
index|[
name|COLNAMESIZE
index|]
decl_stmt|;
name|r
operator|=
name|SQLDescribeCol
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|colName
argument_list|,
name|COLNAMESIZE
argument_list|,
operator|&
name|colNameLen
argument_list|,
operator|&
name|colType
argument_list|,
operator|&
name|colSize
argument_list|,
operator|&
name|colScale
argument_list|,
operator|&
name|nullable
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qWarning
argument_list|(
literal|"qGetBinaryData: Unable to describe column %d"
argument_list|,
name|column
argument_list|)
expr_stmt|;
comment|// SQLDescribeCol may return 0 if size cannot be determined
if|if
condition|(
operator|!
name|colSize
condition|)
name|colSize
operator|=
literal|255
expr_stmt|;
elseif|else
if|if
condition|(
name|colSize
operator|>
literal|65536
condition|)
comment|// read the field in 64 KB chunks
name|colSize
operator|=
literal|65536
expr_stmt|;
name|char
modifier|*
name|buf
init|=
operator|new
name|char
index|[
name|colSize
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|r
operator|=
name|SQLGetData
argument_list|(
name|hStmt
argument_list|,
name|column
operator|+
literal|1
argument_list|,
name|colType
operator|==
name|SQL_DBCLOB
condition|?
name|SQL_C_CHAR
else|:
name|SQL_C_BINARY
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|buf
argument_list|,
name|colSize
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
if|if
condition|(
name|lengthIndicator
operator|==
name|SQL_NULL_DATA
condition|)
block|{
name|isNull
operator|=
literal|true
expr_stmt|;
break|break;
block|}
else|else
block|{
name|int
name|rSize
decl_stmt|;
name|r
operator|==
name|SQL_SUCCESS
condition|?
name|rSize
operator|=
name|lengthIndicator
else|:
name|rSize
operator|=
name|colSize
expr_stmt|;
if|if
condition|(
name|lengthIndicator
operator|==
name|SQL_NO_TOTAL
condition|)
comment|// size cannot be determined
name|rSize
operator|=
name|colSize
expr_stmt|;
name|fieldVal
operator|.
name|append
argument_list|(
name|QByteArray
argument_list|(
name|buf
argument_list|,
name|rSize
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
condition|)
comment|// the whole field was read in one chunk
break|break;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
operator|delete
index|[]
name|buf
expr_stmt|;
return|return
name|fieldVal
return|;
block|}
end_function
begin_function
DECL|function|qSplitTableQualifier
specifier|static
name|void
name|qSplitTableQualifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|qualifier
parameter_list|,
name|QString
modifier|*
name|catalog
parameter_list|,
name|QString
modifier|*
name|schema
parameter_list|,
name|QString
modifier|*
name|table
parameter_list|)
block|{
if|if
condition|(
operator|!
name|catalog
operator|||
operator|!
name|schema
operator|||
operator|!
name|table
condition|)
return|return;
name|QStringList
name|l
init|=
name|qualifier
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|count
argument_list|()
operator|>
literal|3
condition|)
return|return;
comment|// can't possibly be a valid table qualifier
name|int
name|i
init|=
literal|0
decl_stmt|,
name|n
init|=
name|l
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|1
condition|)
block|{
operator|*
name|table
operator|=
name|qualifier
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|l
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|n
operator|==
literal|3
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
operator|*
name|catalog
operator|=
operator|*
name|it
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
operator|*
name|schema
operator|=
operator|*
name|it
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|2
condition|)
operator|*
name|table
operator|=
operator|*
name|it
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
operator|*
name|schema
operator|=
operator|*
name|it
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
operator|*
name|table
operator|=
operator|*
name|it
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// creates a QSqlField from a valid hStmt generated
end_comment
begin_comment
comment|// by SQLColumns. The hStmt has to point to a valid position.
end_comment
begin_function
DECL|function|qMakeFieldInfo
specifier|static
name|QSqlField
name|qMakeFieldInfo
parameter_list|(
specifier|const
name|SQLHANDLE
name|hStmt
parameter_list|)
block|{
name|bool
name|isNull
decl_stmt|;
name|int
name|type
init|=
name|qGetIntData
argument_list|(
name|hStmt
argument_list|,
literal|4
argument_list|,
name|isNull
argument_list|)
decl_stmt|;
name|QSqlField
name|f
argument_list|(
name|qGetStringData
argument_list|(
name|hStmt
argument_list|,
literal|3
argument_list|,
operator|-
literal|1
argument_list|,
name|isNull
argument_list|)
argument_list|,
name|qDecodeDB2Type
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|required
init|=
name|qGetIntData
argument_list|(
name|hStmt
argument_list|,
literal|10
argument_list|,
name|isNull
argument_list|)
decl_stmt|;
comment|// nullable-flag
comment|// required can be SQL_NO_NULLS, SQL_NULLABLE or SQL_NULLABLE_UNKNOWN
if|if
condition|(
name|required
operator|==
name|SQL_NO_NULLS
condition|)
name|f
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|required
operator|==
name|SQL_NULLABLE
condition|)
name|f
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// else we don't know.
name|f
operator|.
name|setLength
argument_list|(
name|qGetIntData
argument_list|(
name|hStmt
argument_list|,
literal|6
argument_list|,
name|isNull
argument_list|)
argument_list|)
expr_stmt|;
comment|// column size
name|f
operator|.
name|setPrecision
argument_list|(
name|qGetIntData
argument_list|(
name|hStmt
argument_list|,
literal|8
argument_list|,
name|isNull
argument_list|)
argument_list|)
expr_stmt|;
comment|// precision
name|f
operator|.
name|setSqlType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
end_function
begin_function
DECL|function|qMakeStatement
specifier|static
name|bool
name|qMakeStatement
parameter_list|(
name|QDB2ResultPrivate
modifier|*
name|d
parameter_list|,
name|bool
name|forwardOnly
parameter_list|,
name|bool
name|setForwardOnly
init|=
literal|true
parameter_list|)
block|{
name|SQLRETURN
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|hStmt
condition|)
block|{
name|r
operator|=
name|SQLAllocHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|d
operator|->
name|dp
operator|->
name|hDbc
argument_list|,
operator|&
name|d
operator|->
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Result::reset: Unable to allocate statement handle"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|r
operator|=
name|SQLFreeStmt
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_CLOSE
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Result::reset: Unable to close statement handle"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|setForwardOnly
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|forwardOnly
condition|)
block|{
name|r
operator|=
name|SQLSetStmtAttr
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_ATTR_CURSOR_TYPE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|SQL_CURSOR_FORWARD_ONLY
argument_list|,
name|SQL_IS_UINTEGER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
name|SQLSetStmtAttr
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_ATTR_CURSOR_TYPE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|SQL_CURSOR_STATIC
argument_list|,
name|SQL_IS_UINTEGER
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QDB2Result::reset: Unable to set %1 attribute."
argument_list|)
operator|.
name|arg
argument_list|(
name|forwardOnly
condition|?
name|QLatin1String
argument_list|(
literal|"SQL_CURSOR_FORWARD_ONLY"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"SQL_CURSOR_STATIC"
argument_list|)
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|handle
name|QVariant
name|QDB2Result
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|qRegisterMetaType
argument_list|<
name|SQLHANDLE
argument_list|>
argument_list|(
literal|"SQLHANDLE"
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|hStmt
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/************************************/
end_comment
begin_constructor
DECL|function|QDB2Result
name|QDB2Result
operator|::
name|QDB2Result
parameter_list|(
specifier|const
name|QDB2Driver
modifier|*
name|dr
parameter_list|,
specifier|const
name|QDB2DriverPrivate
modifier|*
name|dp
parameter_list|)
member_init_list|:
name|QSqlResult
argument_list|(
name|dr
argument_list|)
block|{
name|d
operator|=
operator|new
name|QDB2ResultPrivate
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QDB2Result
name|QDB2Result
operator|::
name|~
name|QDB2Result
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|hStmt
condition|)
block|{
name|SQLRETURN
name|r
init|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|d
operator|->
name|hStmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Driver: Unable to free statement handle "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|reset
name|bool
name|QDB2Result
operator|::
name|reset
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
block|{
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|SQLRETURN
name|r
decl_stmt|;
name|d
operator|->
name|recInf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|emptyValueCache
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|qMakeStatement
argument_list|(
name|d
argument_list|,
name|isForwardOnly
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
name|r
operator|=
name|SQLExecDirect
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|qToTChar
argument_list|(
name|query
argument_list|)
argument_list|,
operator|(
name|SQLINTEGER
operator|)
name|query
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QDB2Result"
argument_list|,
literal|"Unable to execute statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|SQLSMALLINT
name|count
decl_stmt|;
name|r
operator|=
name|SQLNumResultCols
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
operator|&
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
condition|)
block|{
name|setSelect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|d
operator|->
name|recInf
operator|.
name|append
argument_list|(
name|qMakeFieldInfo
argument_list|(
name|d
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|d
operator|->
name|valueCache
operator|.
name|resize
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|d
operator|->
name|valueCache
operator|.
name|fill
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|prepare
name|bool
name|QDB2Result
operator|::
name|prepare
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
block|{
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|SQLRETURN
name|r
decl_stmt|;
name|d
operator|->
name|recInf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|emptyValueCache
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|qMakeStatement
argument_list|(
name|d
argument_list|,
name|isForwardOnly
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
name|r
operator|=
name|SQLPrepare
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|qToTChar
argument_list|(
name|query
argument_list|)
argument_list|,
operator|(
name|SQLINTEGER
operator|)
name|query
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QDB2Result"
argument_list|,
literal|"Unable to prepare statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|exec
name|bool
name|QDB2Result
operator|::
name|exec
parameter_list|()
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|tmpStorage
decl_stmt|;
comment|// holds temporary ptrs
name|QVarLengthArray
argument_list|<
name|SQLINTEGER
argument_list|,
literal|32
argument_list|>
name|indicators
argument_list|(
name|boundValues
argument_list|()
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
name|memset
argument_list|(
name|indicators
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|indicators
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SQLINTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|SQLRETURN
name|r
decl_stmt|;
name|d
operator|->
name|recInf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|emptyValueCache
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|qMakeStatement
argument_list|(
name|d
argument_list|,
name|isForwardOnly
argument_list|()
argument_list|,
literal|false
argument_list|)
condition|)
return|return
literal|false
return|;
name|QVector
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|values
init|=
name|boundValues
argument_list|()
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// bind parameters - only positional binding allowed
name|SQLINTEGER
modifier|*
name|ind
init|=
operator|&
name|indicators
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
operator|*
name|ind
operator|=
name|SQL_NULL_DATA
expr_stmt|;
if|if
condition|(
name|bindValueType
argument_list|(
name|i
argument_list|)
operator|&
name|QSql
operator|::
name|Out
condition|)
name|values
index|[
name|i
index|]
operator|.
name|detach
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Date
case|:
block|{
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|.
name|resize
argument_list|(
sizeof|sizeof
argument_list|(
name|DATE_STRUCT
argument_list|)
argument_list|)
expr_stmt|;
name|DATE_STRUCT
modifier|*
name|dt
init|=
operator|(
name|DATE_STRUCT
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
decl_stmt|;
name|QDate
name|qdt
init|=
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toDate
argument_list|()
decl_stmt|;
name|dt
operator|->
name|year
operator|=
name|qdt
operator|.
name|year
argument_list|()
expr_stmt|;
name|dt
operator|->
name|month
operator|=
name|qdt
operator|.
name|month
argument_list|()
expr_stmt|;
name|dt
operator|->
name|day
operator|=
name|qdt
operator|.
name|day
argument_list|()
expr_stmt|;
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
literal|3
index|]
argument_list|,
name|SQL_C_DATE
argument_list|,
name|SQL_DATE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|dt
argument_list|,
literal|0
argument_list|,
operator|*
name|ind
operator|==
name|SQL_NULL_DATA
condition|?
name|ind
else|:
name|NULL
argument_list|)
expr_stmt|;
name|tmpStorage
operator|.
name|append
argument_list|(
name|ba
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Time
case|:
block|{
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|.
name|resize
argument_list|(
sizeof|sizeof
argument_list|(
name|TIME_STRUCT
argument_list|)
argument_list|)
expr_stmt|;
name|TIME_STRUCT
modifier|*
name|dt
init|=
operator|(
name|TIME_STRUCT
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
decl_stmt|;
name|QTime
name|qdt
init|=
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toTime
argument_list|()
decl_stmt|;
name|dt
operator|->
name|hour
operator|=
name|qdt
operator|.
name|hour
argument_list|()
expr_stmt|;
name|dt
operator|->
name|minute
operator|=
name|qdt
operator|.
name|minute
argument_list|()
expr_stmt|;
name|dt
operator|->
name|second
operator|=
name|qdt
operator|.
name|second
argument_list|()
expr_stmt|;
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
literal|3
index|]
argument_list|,
name|SQL_C_TIME
argument_list|,
name|SQL_TIME
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|dt
argument_list|,
literal|0
argument_list|,
operator|*
name|ind
operator|==
name|SQL_NULL_DATA
condition|?
name|ind
else|:
name|NULL
argument_list|)
expr_stmt|;
name|tmpStorage
operator|.
name|append
argument_list|(
name|ba
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|DateTime
case|:
block|{
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|.
name|resize
argument_list|(
sizeof|sizeof
argument_list|(
name|TIMESTAMP_STRUCT
argument_list|)
argument_list|)
expr_stmt|;
name|TIMESTAMP_STRUCT
modifier|*
name|dt
init|=
operator|(
name|TIMESTAMP_STRUCT
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
decl_stmt|;
name|QDateTime
name|qdt
init|=
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
name|dt
operator|->
name|year
operator|=
name|qdt
operator|.
name|date
argument_list|()
operator|.
name|year
argument_list|()
expr_stmt|;
name|dt
operator|->
name|month
operator|=
name|qdt
operator|.
name|date
argument_list|()
operator|.
name|month
argument_list|()
expr_stmt|;
name|dt
operator|->
name|day
operator|=
name|qdt
operator|.
name|date
argument_list|()
operator|.
name|day
argument_list|()
expr_stmt|;
name|dt
operator|->
name|hour
operator|=
name|qdt
operator|.
name|time
argument_list|()
operator|.
name|hour
argument_list|()
expr_stmt|;
name|dt
operator|->
name|minute
operator|=
name|qdt
operator|.
name|time
argument_list|()
operator|.
name|minute
argument_list|()
expr_stmt|;
name|dt
operator|->
name|second
operator|=
name|qdt
operator|.
name|time
argument_list|()
operator|.
name|second
argument_list|()
expr_stmt|;
name|dt
operator|->
name|fraction
operator|=
name|qdt
operator|.
name|time
argument_list|()
operator|.
name|msec
argument_list|()
operator|*
literal|1000000
expr_stmt|;
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
literal|3
index|]
argument_list|,
name|SQL_C_TIMESTAMP
argument_list|,
name|SQL_TIMESTAMP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|dt
argument_list|,
literal|0
argument_list|,
operator|*
name|ind
operator|==
name|SQL_NULL_DATA
condition|?
name|ind
else|:
name|NULL
argument_list|)
expr_stmt|;
name|tmpStorage
operator|.
name|append
argument_list|(
name|ba
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Int
case|:
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
literal|3
index|]
argument_list|,
name|SQL_C_SLONG
argument_list|,
name|SQL_INTEGER
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|*
name|ind
operator|==
name|SQL_NULL_DATA
condition|?
name|ind
else|:
name|NULL
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
literal|3
index|]
argument_list|,
name|SQL_C_DOUBLE
argument_list|,
name|SQL_DOUBLE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|*
name|ind
operator|==
name|SQL_NULL_DATA
condition|?
name|ind
else|:
name|NULL
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|ByteArray
case|:
block|{
name|int
name|len
init|=
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toByteArray
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|*
name|ind
operator|!=
name|SQL_NULL_DATA
condition|)
operator|*
name|ind
operator|=
name|len
expr_stmt|;
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
literal|3
index|]
argument_list|,
name|SQL_C_BINARY
argument_list|,
name|SQL_LONGVARBINARY
argument_list|,
name|len
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toByteArray
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|len
argument_list|,
name|ind
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|String
case|:
block|{
name|QString
name|str
argument_list|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|*
name|ind
operator|!=
name|SQL_NULL_DATA
condition|)
operator|*
name|ind
operator|=
name|str
operator|.
name|length
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
expr_stmt|;
if|if
condition|(
name|bindValueType
argument_list|(
name|i
argument_list|)
operator|&
name|QSql
operator|::
name|Out
condition|)
block|{
name|QByteArray
name|ba
argument_list|(
operator|(
name|char
operator|*
operator|)
name|str
operator|.
name|utf16
argument_list|()
argument_list|,
name|str
operator|.
name|capacity
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
literal|3
index|]
argument_list|,
name|SQL_C_WCHAR
argument_list|,
name|SQL_WVARCHAR
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|tmpStorage
operator|.
name|append
argument_list|(
name|ba
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|void
modifier|*
name|data
init|=
operator|(
name|void
operator|*
operator|)
name|str
operator|.
name|utf16
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
literal|3
index|]
argument_list|,
name|SQL_C_WCHAR
argument_list|,
name|SQL_WVARCHAR
argument_list|,
name|len
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
name|len
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|,
name|ind
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
name|QByteArray
name|ba
init|=
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toAscii
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|ba
operator|.
name|length
argument_list|()
operator|+
literal|1
decl_stmt|;
if|if
condition|(
operator|*
name|ind
operator|!=
name|SQL_NULL_DATA
condition|)
operator|*
name|ind
operator|=
name|ba
operator|.
name|length
argument_list|()
expr_stmt|;
name|r
operator|=
name|SQLBindParameter
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|qParamType
index|[
call|(
name|QFlag
call|)
argument_list|(
name|bindValueType
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&
literal|3
index|]
argument_list|,
name|SQL_C_CHAR
argument_list|,
name|SQL_VARCHAR
argument_list|,
name|len
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
operator|)
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|len
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|tmpStorage
operator|.
name|append
argument_list|(
name|ba
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDB2Result::exec: unable to bind variable: %s"
argument_list|,
name|qDB2Warn
argument_list|(
name|d
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QDB2Result"
argument_list|,
literal|"Unable to bind variable"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|r
operator|=
name|SQLExecute
argument_list|(
name|d
operator|->
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDB2Result::exec: Unable to execute statement: %s"
argument_list|,
name|qDB2Warn
argument_list|(
name|d
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QDB2Result"
argument_list|,
literal|"Unable to execute statement"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|SQLSMALLINT
name|count
decl_stmt|;
name|r
operator|=
name|SQLNumResultCols
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
operator|&
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
condition|)
block|{
name|setSelect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|d
operator|->
name|recInf
operator|.
name|append
argument_list|(
name|qMakeFieldInfo
argument_list|(
name|d
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|setSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|->
name|valueCache
operator|.
name|resize
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|d
operator|->
name|valueCache
operator|.
name|fill
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
comment|//get out parameters
if|if
condition|(
operator|!
name|hasOutValues
argument_list|()
condition|)
return|return
literal|true
return|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|values
index|[
name|i
index|]
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Date
case|:
block|{
name|DATE_STRUCT
name|ds
init|=
operator|*
operator|(
operator|(
name|DATE_STRUCT
operator|*
operator|)
name|tmpStorage
operator|.
name|takeFirst
argument_list|()
operator|.
name|constData
argument_list|()
operator|)
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|QDate
argument_list|(
name|ds
operator|.
name|year
argument_list|,
name|ds
operator|.
name|month
argument_list|,
name|ds
operator|.
name|day
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Time
case|:
block|{
name|TIME_STRUCT
name|dt
init|=
operator|*
operator|(
operator|(
name|TIME_STRUCT
operator|*
operator|)
name|tmpStorage
operator|.
name|takeFirst
argument_list|()
operator|.
name|constData
argument_list|()
operator|)
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|QTime
argument_list|(
name|dt
operator|.
name|hour
argument_list|,
name|dt
operator|.
name|minute
argument_list|,
name|dt
operator|.
name|second
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|DateTime
case|:
block|{
name|TIMESTAMP_STRUCT
name|dt
init|=
operator|*
operator|(
operator|(
name|TIMESTAMP_STRUCT
operator|*
operator|)
name|tmpStorage
operator|.
name|takeFirst
argument_list|()
operator|.
name|constData
argument_list|()
operator|)
decl_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
name|dt
operator|.
name|year
argument_list|,
name|dt
operator|.
name|month
argument_list|,
name|dt
operator|.
name|day
argument_list|)
argument_list|,
name|QTime
argument_list|(
name|dt
operator|.
name|hour
argument_list|,
name|dt
operator|.
name|minute
argument_list|,
name|dt
operator|.
name|second
argument_list|,
name|dt
operator|.
name|fraction
operator|/
literal|1000000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QVariant
operator|::
name|Int
case|:
case|case
name|QVariant
operator|::
name|Double
case|:
case|case
name|QVariant
operator|::
name|ByteArray
case|:
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
if|if
condition|(
name|bindValueType
argument_list|(
name|i
argument_list|)
operator|&
name|QSql
operator|::
name|Out
condition|)
name|values
index|[
name|i
index|]
operator|=
name|QString
argument_list|(
operator|(
specifier|const
name|QChar
operator|*
operator|)
name|tmpStorage
operator|.
name|takeFirst
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
block|{
name|values
index|[
name|i
index|]
operator|=
name|QString
operator|::
name|fromAscii
argument_list|(
name|tmpStorage
operator|.
name|takeFirst
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|indicators
index|[
name|i
index|]
operator|==
name|SQL_NULL_DATA
condition|)
name|values
index|[
name|i
index|]
operator|=
name|QVariant
argument_list|(
name|values
index|[
name|i
index|]
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fetch
name|bool
name|QDB2Result
operator|::
name|fetch
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|isForwardOnly
argument_list|()
operator|&&
name|i
operator|<
name|at
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|i
operator|==
name|at
argument_list|()
condition|)
return|return
literal|true
return|;
name|d
operator|->
name|clearValueCache
argument_list|()
expr_stmt|;
name|int
name|actualIdx
init|=
name|i
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|actualIdx
operator|<=
literal|0
condition|)
block|{
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|SQLRETURN
name|r
decl_stmt|;
if|if
condition|(
name|isForwardOnly
argument_list|()
condition|)
block|{
name|bool
name|ok
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|ok
operator|&&
name|i
operator|>
name|at
argument_list|()
condition|)
name|ok
operator|=
name|fetchNext
argument_list|()
expr_stmt|;
return|return
name|ok
return|;
block|}
else|else
block|{
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_FETCH_ABSOLUTE
argument_list|,
name|actualIdx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
operator|&&
name|r
operator|!=
name|SQL_NO_DATA
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QDB2Result"
argument_list|,
literal|"Unable to fetch record %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|r
operator|==
name|SQL_NO_DATA
condition|)
return|return
literal|false
return|;
name|setAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fetchNext
name|bool
name|QDB2Result
operator|::
name|fetchNext
parameter_list|()
block|{
name|SQLRETURN
name|r
decl_stmt|;
name|d
operator|->
name|clearValueCache
argument_list|()
expr_stmt|;
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_FETCH_NEXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
if|if
condition|(
name|r
operator|!=
name|SQL_NO_DATA
condition|)
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QDB2Result"
argument_list|,
literal|"Unable to fetch next"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|setAt
argument_list|(
name|at
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fetchFirst
name|bool
name|QDB2Result
operator|::
name|fetchFirst
parameter_list|()
block|{
if|if
condition|(
name|isForwardOnly
argument_list|()
operator|&&
name|at
argument_list|()
operator|!=
name|QSql
operator|::
name|BeforeFirstRow
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|isForwardOnly
argument_list|()
condition|)
return|return
name|fetchNext
argument_list|()
return|;
name|d
operator|->
name|clearValueCache
argument_list|()
expr_stmt|;
name|SQLRETURN
name|r
decl_stmt|;
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|SQL_FETCH_FIRST
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
if|if
condition|(
name|r
operator|!=
name|SQL_NO_DATA
condition|)
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QDB2Result"
argument_list|,
literal|"Unable to fetch first"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|StatementError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|setAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fetchLast
name|bool
name|QDB2Result
operator|::
name|fetchLast
parameter_list|()
block|{
name|d
operator|->
name|clearValueCache
argument_list|()
expr_stmt|;
name|int
name|i
init|=
name|at
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|QSql
operator|::
name|AfterLastRow
condition|)
block|{
if|if
condition|(
name|isForwardOnly
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|fetch
argument_list|(
literal|0
argument_list|)
condition|)
return|return
literal|false
return|;
name|i
operator|=
name|at
argument_list|()
expr_stmt|;
block|}
block|}
while|while
condition|(
name|fetchNext
argument_list|()
condition|)
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|QSql
operator|::
name|BeforeFirstRow
condition|)
block|{
name|setAt
argument_list|(
name|QSql
operator|::
name|AfterLastRow
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|isForwardOnly
argument_list|()
condition|)
return|return
name|fetch
argument_list|(
name|i
argument_list|)
return|;
name|setAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|data
name|QVariant
name|QDB2Result
operator|::
name|data
parameter_list|(
name|int
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|>=
name|d
operator|->
name|recInf
operator|.
name|count
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDB2Result::data: column %d out of range"
argument_list|,
name|field
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
name|SQLRETURN
name|r
init|=
literal|0
decl_stmt|;
name|SQLINTEGER
name|lengthIndicator
init|=
literal|0
decl_stmt|;
name|bool
name|isNull
init|=
literal|false
decl_stmt|;
specifier|const
name|QSqlField
name|info
init|=
name|d
operator|->
name|recInf
operator|.
name|field
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|isValid
argument_list|()
operator|||
name|field
operator|>=
name|d
operator|->
name|valueCache
operator|.
name|size
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|d
operator|->
name|valueCache
index|[
name|field
index|]
condition|)
return|return
operator|*
name|d
operator|->
name|valueCache
index|[
name|field
index|]
return|;
name|QVariant
modifier|*
name|v
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|info
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|LongLong
case|:
name|v
operator|=
operator|new
name|QVariant
argument_list|(
operator|(
name|qint64
operator|)
name|qGetBigIntData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|field
argument_list|,
name|isNull
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Int
case|:
name|v
operator|=
operator|new
name|QVariant
argument_list|(
name|qGetIntData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|field
argument_list|,
name|isNull
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Date
case|:
block|{
name|DATE_STRUCT
name|dbuf
decl_stmt|;
name|r
operator|=
name|SQLGetData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|field
operator|+
literal|1
argument_list|,
name|SQL_C_DATE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|dbuf
argument_list|,
literal|0
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|&&
operator|(
name|lengthIndicator
operator|!=
name|SQL_NULL_DATA
operator|)
condition|)
block|{
name|v
operator|=
operator|new
name|QVariant
argument_list|(
name|QDate
argument_list|(
name|dbuf
operator|.
name|year
argument_list|,
name|dbuf
operator|.
name|month
argument_list|,
name|dbuf
operator|.
name|day
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|v
operator|=
operator|new
name|QVariant
argument_list|(
name|QDate
argument_list|()
argument_list|)
expr_stmt|;
name|isNull
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QVariant
operator|::
name|Time
case|:
block|{
name|TIME_STRUCT
name|tbuf
decl_stmt|;
name|r
operator|=
name|SQLGetData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|field
operator|+
literal|1
argument_list|,
name|SQL_C_TIME
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|tbuf
argument_list|,
literal|0
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|&&
operator|(
name|lengthIndicator
operator|!=
name|SQL_NULL_DATA
operator|)
condition|)
block|{
name|v
operator|=
operator|new
name|QVariant
argument_list|(
name|QTime
argument_list|(
name|tbuf
operator|.
name|hour
argument_list|,
name|tbuf
operator|.
name|minute
argument_list|,
name|tbuf
operator|.
name|second
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|v
operator|=
operator|new
name|QVariant
argument_list|(
name|QTime
argument_list|()
argument_list|)
expr_stmt|;
name|isNull
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QVariant
operator|::
name|DateTime
case|:
block|{
name|TIMESTAMP_STRUCT
name|dtbuf
decl_stmt|;
name|r
operator|=
name|SQLGetData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|field
operator|+
literal|1
argument_list|,
name|SQL_C_TIMESTAMP
argument_list|,
operator|(
name|SQLPOINTER
operator|)
operator|&
name|dtbuf
argument_list|,
literal|0
argument_list|,
operator|&
name|lengthIndicator
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
operator|)
operator|&&
operator|(
name|lengthIndicator
operator|!=
name|SQL_NULL_DATA
operator|)
condition|)
block|{
name|v
operator|=
operator|new
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
name|dtbuf
operator|.
name|year
argument_list|,
name|dtbuf
operator|.
name|month
argument_list|,
name|dtbuf
operator|.
name|day
argument_list|)
argument_list|,
name|QTime
argument_list|(
name|dtbuf
operator|.
name|hour
argument_list|,
name|dtbuf
operator|.
name|minute
argument_list|,
name|dtbuf
operator|.
name|second
argument_list|,
name|dtbuf
operator|.
name|fraction
operator|/
literal|1000000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|v
operator|=
operator|new
name|QVariant
argument_list|(
name|QDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|isNull
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
case|case
name|QVariant
operator|::
name|ByteArray
case|:
name|v
operator|=
operator|new
name|QVariant
argument_list|(
name|qGetBinaryData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|field
argument_list|,
name|lengthIndicator
argument_list|,
name|isNull
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
block|{
switch|switch
condition|(
name|numericalPrecisionPolicy
argument_list|()
condition|)
block|{
case|case
name|QSql
operator|::
name|LowPrecisionInt32
case|:
name|v
operator|=
operator|new
name|QVariant
argument_list|(
name|qGetIntData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|field
argument_list|,
name|isNull
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|LowPrecisionInt64
case|:
name|v
operator|=
operator|new
name|QVariant
argument_list|(
name|qGetBigIntData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|field
argument_list|,
name|isNull
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|LowPrecisionDouble
case|:
name|v
operator|=
operator|new
name|QVariant
argument_list|(
name|qGetDoubleData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|field
argument_list|,
name|isNull
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QSql
operator|::
name|HighPrecision
case|:
default|default:
comment|// length + 1 for the comma
name|v
operator|=
operator|new
name|QVariant
argument_list|(
name|qGetStringData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|field
argument_list|,
name|info
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|isNull
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
break|break;
block|}
case|case
name|QVariant
operator|::
name|String
case|:
default|default:
name|v
operator|=
operator|new
name|QVariant
argument_list|(
name|qGetStringData
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
name|field
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|,
name|isNull
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|isNull
condition|)
operator|*
name|v
operator|=
name|QVariant
argument_list|(
name|info
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|valueCache
index|[
name|field
index|]
operator|=
name|v
expr_stmt|;
return|return
operator|*
name|v
return|;
block|}
end_function
begin_function
DECL|function|isNull
name|bool
name|QDB2Result
operator|::
name|isNull
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
name|d
operator|->
name|valueCache
operator|.
name|size
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|d
operator|->
name|valueCache
index|[
name|i
index|]
condition|)
return|return
name|d
operator|->
name|valueCache
index|[
name|i
index|]
operator|->
name|isNull
argument_list|()
return|;
return|return
name|data
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|numRowsAffected
name|int
name|QDB2Result
operator|::
name|numRowsAffected
parameter_list|()
block|{
name|SQLINTEGER
name|affectedRowCount
init|=
literal|0
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLRowCount
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
operator|&
name|affectedRowCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|SQL_SUCCESS
operator|||
name|r
operator|==
name|SQL_SUCCESS_WITH_INFO
condition|)
return|return
name|affectedRowCount
return|;
else|else
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Result::numRowsAffected: Unable to count affected rows"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|size
name|int
name|QDB2Result
operator|::
name|size
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|record
name|QSqlRecord
name|QDB2Result
operator|::
name|record
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|isActive
argument_list|()
condition|)
return|return
name|d
operator|->
name|recInf
return|;
return|return
name|QSqlRecord
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|nextResult
name|bool
name|QDB2Result
operator|::
name|nextResult
parameter_list|()
block|{
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|d
operator|->
name|recInf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|emptyValueCache
argument_list|()
expr_stmt|;
name|setSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLMoreResults
argument_list|(
name|d
operator|->
name|hStmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
if|if
condition|(
name|r
operator|!=
name|SQL_NO_DATA
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QODBCResult"
argument_list|,
literal|"Unable to fetch last"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|SQLSMALLINT
name|fieldCount
decl_stmt|;
name|r
operator|=
name|SQLNumResultCols
argument_list|(
name|d
operator|->
name|hStmt
argument_list|,
operator|&
name|fieldCount
argument_list|)
expr_stmt|;
name|setSelect
argument_list|(
name|fieldCount
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldCount
condition|;
operator|++
name|i
control|)
name|d
operator|->
name|recInf
operator|.
name|append
argument_list|(
name|qMakeFieldInfo
argument_list|(
name|d
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|valueCache
operator|.
name|resize
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
name|d
operator|->
name|valueCache
operator|.
name|fill
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|virtual_hook
name|void
name|QDB2Result
operator|::
name|virtual_hook
parameter_list|(
name|int
name|id
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
switch|switch
condition|(
name|id
condition|)
block|{
case|case
name|QSqlResult
operator|::
name|NextResult
case|:
name|Q_ASSERT
argument_list|(
name|data
argument_list|)
expr_stmt|;
operator|*
cast|static_cast
argument_list|<
name|bool
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
operator|=
name|nextResult
argument_list|()
expr_stmt|;
break|break;
case|case
name|QSqlResult
operator|::
name|DetachFromResultSet
case|:
if|if
condition|(
name|d
operator|->
name|hStmt
condition|)
name|SQLCloseCursor
argument_list|(
name|d
operator|->
name|hStmt
argument_list|)
expr_stmt|;
break|break;
default|default:
name|QSqlResult
operator|::
name|virtual_hook
argument_list|(
name|id
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/************************************/
end_comment
begin_constructor
DECL|function|QDB2Driver
name|QDB2Driver
operator|::
name|QDB2Driver
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSqlDriver
argument_list|(
name|parent
argument_list|)
block|{
name|d
operator|=
operator|new
name|QDB2DriverPrivate
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|QDB2Driver
name|QDB2Driver
operator|::
name|QDB2Driver
parameter_list|(
name|Qt
operator|::
name|HANDLE
name|env
parameter_list|,
name|Qt
operator|::
name|HANDLE
name|con
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSqlDriver
argument_list|(
name|parent
argument_list|)
block|{
name|d
operator|=
operator|new
name|QDB2DriverPrivate
expr_stmt|;
name|d
operator|->
name|hEnv
operator|=
operator|(
name|SQLHANDLE
operator|)
name|env
expr_stmt|;
name|d
operator|->
name|hDbc
operator|=
operator|(
name|SQLHANDLE
operator|)
name|con
expr_stmt|;
if|if
condition|(
name|env
operator|&&
name|con
condition|)
block|{
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_destructor
DECL|function|~QDB2Driver
name|QDB2Driver
operator|::
name|~
name|QDB2Driver
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|open
name|bool
name|QDB2Driver
operator|::
name|open
parameter_list|(
specifier|const
name|QString
modifier|&
name|db
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
name|int
name|port
parameter_list|,
specifier|const
name|QString
modifier|&
name|connOpts
parameter_list|)
block|{
if|if
condition|(
name|isOpen
argument_list|()
condition|)
name|close
argument_list|()
expr_stmt|;
name|SQLRETURN
name|r
decl_stmt|;
name|r
operator|=
name|SQLAllocHandle
argument_list|(
name|SQL_HANDLE_ENV
argument_list|,
name|SQL_NULL_HANDLE
argument_list|,
operator|&
name|d
operator|->
name|hEnv
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Driver::open: Unable to allocate environment"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|r
operator|=
name|SQLAllocHandle
argument_list|(
name|SQL_HANDLE_DBC
argument_list|,
name|d
operator|->
name|hEnv
argument_list|,
operator|&
name|d
operator|->
name|hDbc
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Driver::open: Unable to allocate connection"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QString
name|protocol
decl_stmt|;
comment|// Set connection attributes
specifier|const
name|QStringList
name|opts
argument_list|(
name|connOpts
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|opts
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|tmp
argument_list|(
name|opts
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|idx
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|=
name|tmp
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDB2Driver::open: Illegal connect option value '%s'"
argument_list|,
name|tmp
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|const
name|QString
name|opt
argument_list|(
name|tmp
operator|.
name|left
argument_list|(
name|idx
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|val
argument_list|(
name|tmp
operator|.
name|mid
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
operator|.
name|simplified
argument_list|()
argument_list|)
decl_stmt|;
name|SQLUINTEGER
name|v
init|=
literal|0
decl_stmt|;
name|r
operator|=
name|SQL_SUCCESS
expr_stmt|;
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_ATTR_ACCESS_MODE"
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_MODE_READ_ONLY"
argument_list|)
condition|)
block|{
name|v
operator|=
name|SQL_MODE_READ_ONLY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_MODE_READ_WRITE"
argument_list|)
condition|)
block|{
name|v
operator|=
name|SQL_MODE_READ_WRITE
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QDB2Driver::open: Unknown option value '%s'"
argument_list|,
name|tmp
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|r
operator|=
name|SQLSetConnectAttr
argument_list|(
name|d
operator|->
name|hDbc
argument_list|,
name|SQL_ATTR_ACCESS_MODE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|v
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
name|QLatin1String
argument_list|(
literal|"SQL_ATTR_LOGIN_TIMEOUT"
argument_list|)
condition|)
block|{
name|v
operator|=
name|val
operator|.
name|toUInt
argument_list|()
expr_stmt|;
name|r
operator|=
name|SQLSetConnectAttr
argument_list|(
name|d
operator|->
name|hDbc
argument_list|,
name|SQL_ATTR_LOGIN_TIMEOUT
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|v
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"PROTOCOL"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
name|protocol
operator|=
name|tmp
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"QDB2Driver::open: Unknown connection attribute '%s'"
argument_list|,
name|tmp
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
name|qSqlWarning
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QDB2Driver::open: "
literal|"Unable to set connection attribute '%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|opt
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|protocol
operator|.
name|isEmpty
argument_list|()
condition|)
name|protocol
operator|=
name|QLatin1String
argument_list|(
literal|"PROTOCOL=TCPIP"
argument_list|)
expr_stmt|;
if|if
condition|(
name|port
operator|<
literal|0
condition|)
name|port
operator|=
literal|50000
expr_stmt|;
name|QString
name|connQStr
decl_stmt|;
name|connQStr
operator|=
name|protocol
operator|+
name|QLatin1String
argument_list|(
literal|";DATABASE="
argument_list|)
operator|+
name|db
operator|+
name|QLatin1String
argument_list|(
literal|";HOSTNAME="
argument_list|)
operator|+
name|host
operator|+
name|QLatin1String
argument_list|(
literal|";PORT="
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|port
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|";UID="
argument_list|)
operator|+
name|user
operator|+
name|QLatin1String
argument_list|(
literal|";PWD="
argument_list|)
operator|+
name|password
expr_stmt|;
name|SQLTCHAR
name|connOut
index|[
name|SQL_MAX_OPTION_STRING_LENGTH
index|]
decl_stmt|;
name|SQLSMALLINT
name|cb
decl_stmt|;
name|r
operator|=
name|SQLDriverConnect
argument_list|(
name|d
operator|->
name|hDbc
argument_list|,
name|NULL
argument_list|,
name|qToTChar
argument_list|(
name|connQStr
argument_list|)
argument_list|,
operator|(
name|SQLSMALLINT
operator|)
name|connQStr
operator|.
name|length
argument_list|()
argument_list|,
name|connOut
argument_list|,
name|SQL_MAX_OPTION_STRING_LENGTH
argument_list|,
operator|&
name|cb
argument_list|,
name|SQL_DRIVER_NOPROMPT
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to connect"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|d
operator|->
name|user
operator|=
name|user
expr_stmt|;
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|close
name|void
name|QDB2Driver
operator|::
name|close
parameter_list|()
block|{
name|SQLRETURN
name|r
decl_stmt|;
if|if
condition|(
name|d
operator|->
name|hDbc
condition|)
block|{
comment|// Open statements/descriptors handles are automatically cleaned up by SQLDisconnect
if|if
condition|(
name|isOpen
argument_list|()
condition|)
block|{
name|r
operator|=
name|SQLDisconnect
argument_list|(
name|d
operator|->
name|hDbc
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Driver::close: Unable to disconnect datasource"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_DBC
argument_list|,
name|d
operator|->
name|hDbc
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Driver::close: Unable to free connection handle"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|d
operator|->
name|hDbc
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|->
name|hEnv
condition|)
block|{
name|r
operator|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_ENV
argument_list|,
name|d
operator|->
name|hEnv
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Driver::close: Unable to free environment handle"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|d
operator|->
name|hEnv
operator|=
literal|0
expr_stmt|;
block|}
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setOpenError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createResult
name|QSqlResult
modifier|*
name|QDB2Driver
operator|::
name|createResult
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|QDB2Result
argument_list|(
name|this
argument_list|,
name|d
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|record
name|QSqlRecord
name|QDB2Driver
operator|::
name|record
parameter_list|(
specifier|const
name|QString
modifier|&
name|tableName
parameter_list|)
specifier|const
block|{
name|QSqlRecord
name|fil
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|fil
return|;
name|SQLHANDLE
name|hStmt
decl_stmt|;
name|QString
name|catalog
decl_stmt|,
name|schema
decl_stmt|,
name|table
decl_stmt|;
name|qSplitTableQualifier
argument_list|(
name|tableName
argument_list|,
operator|&
name|catalog
argument_list|,
operator|&
name|schema
argument_list|,
operator|&
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|schema
operator|.
name|isEmpty
argument_list|()
condition|)
name|schema
operator|=
name|d
operator|->
name|user
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|catalog
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|catalog
operator|=
name|stripDelimiters
argument_list|(
name|catalog
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|catalog
operator|=
name|catalog
operator|.
name|toUpper
argument_list|()
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|schema
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|schema
operator|=
name|stripDelimiters
argument_list|(
name|schema
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|schema
operator|=
name|schema
operator|.
name|toUpper
argument_list|()
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|table
operator|=
name|stripDelimiters
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|table
operator|=
name|table
operator|.
name|toUpper
argument_list|()
expr_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLAllocHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|d
operator|->
name|hDbc
argument_list|,
operator|&
name|hStmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Driver::record: Unable to allocate handle"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|fil
return|;
block|}
name|r
operator|=
name|SQLSetStmtAttr
argument_list|(
name|hStmt
argument_list|,
name|SQL_ATTR_CURSOR_TYPE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|SQL_CURSOR_FORWARD_ONLY
argument_list|,
name|SQL_IS_UINTEGER
argument_list|)
expr_stmt|;
comment|//Aside: szSchemaName and szTableName parameters of SQLColumns
comment|//are case sensitive search patterns, so no escaping is used.
name|r
operator|=
name|SQLColumns
argument_list|(
name|hStmt
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|qToTChar
argument_list|(
name|schema
argument_list|)
argument_list|,
name|schema
operator|.
name|length
argument_list|()
argument_list|,
name|qToTChar
argument_list|(
name|table
argument_list|)
argument_list|,
name|table
operator|.
name|length
argument_list|()
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Driver::record: Unable to execute column list"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|hStmt
argument_list|,
name|SQL_FETCH_NEXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
name|r
operator|==
name|SQL_SUCCESS
condition|)
block|{
name|fil
operator|.
name|append
argument_list|(
name|qMakeFieldInfo
argument_list|(
name|hStmt
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|hStmt
argument_list|,
name|SQL_FETCH_NEXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Driver: Unable to free statement handle "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|fil
return|;
block|}
end_function
begin_function
DECL|function|tables
name|QStringList
name|QDB2Driver
operator|::
name|tables
parameter_list|(
name|QSql
operator|::
name|TableType
name|type
parameter_list|)
specifier|const
block|{
name|QStringList
name|tl
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|tl
return|;
name|SQLHANDLE
name|hStmt
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLAllocHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|d
operator|->
name|hDbc
argument_list|,
operator|&
name|hStmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Driver::tables: Unable to allocate handle"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|tl
return|;
block|}
name|r
operator|=
name|SQLSetStmtAttr
argument_list|(
name|hStmt
argument_list|,
name|SQL_ATTR_CURSOR_TYPE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|SQL_CURSOR_FORWARD_ONLY
argument_list|,
name|SQL_IS_UINTEGER
argument_list|)
expr_stmt|;
name|QString
name|tableType
decl_stmt|;
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|Tables
condition|)
name|tableType
operator|+=
name|QLatin1String
argument_list|(
literal|"TABLE,"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|Views
condition|)
name|tableType
operator|+=
name|QLatin1String
argument_list|(
literal|"VIEW,"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|&
name|QSql
operator|::
name|SystemTables
condition|)
name|tableType
operator|+=
name|QLatin1String
argument_list|(
literal|"SYSTEM TABLE,"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableType
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|tl
return|;
name|tableType
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLTables
argument_list|(
name|hStmt
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|qToTChar
argument_list|(
name|tableType
argument_list|)
argument_list|,
name|tableType
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
operator|&&
name|r
operator|!=
name|SQL_SUCCESS_WITH_INFO
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Driver::tables: Unable to execute table list"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|hStmt
argument_list|,
name|SQL_FETCH_NEXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
name|r
operator|==
name|SQL_SUCCESS
condition|)
block|{
name|bool
name|isNull
decl_stmt|;
name|QString
name|fieldVal
init|=
name|qGetStringData
argument_list|(
name|hStmt
argument_list|,
literal|2
argument_list|,
operator|-
literal|1
argument_list|,
name|isNull
argument_list|)
decl_stmt|;
name|QString
name|userVal
init|=
name|qGetStringData
argument_list|(
name|hStmt
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|isNull
argument_list|)
decl_stmt|;
name|QString
name|user
init|=
name|d
operator|->
name|user
decl_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|user
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|user
operator|=
name|stripDelimiters
argument_list|(
name|user
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|user
operator|=
name|user
operator|.
name|toUpper
argument_list|()
expr_stmt|;
if|if
condition|(
name|userVal
operator|!=
name|user
condition|)
name|fieldVal
operator|=
name|userVal
operator|+
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|fieldVal
expr_stmt|;
name|tl
operator|.
name|append
argument_list|(
name|fieldVal
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|hStmt
argument_list|,
name|SQL_FETCH_NEXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Driver::tables: Unable to free statement handle "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|tl
return|;
block|}
end_function
begin_function
DECL|function|primaryIndex
name|QSqlIndex
name|QDB2Driver
operator|::
name|primaryIndex
parameter_list|(
specifier|const
name|QString
modifier|&
name|tablename
parameter_list|)
specifier|const
block|{
name|QSqlIndex
name|index
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
return|return
name|index
return|;
name|QSqlRecord
name|rec
init|=
name|record
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
name|SQLHANDLE
name|hStmt
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLAllocHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|d
operator|->
name|hDbc
argument_list|,
operator|&
name|hStmt
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Driver::primaryIndex: Unable to list primary key"
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
name|QString
name|catalog
decl_stmt|,
name|schema
decl_stmt|,
name|table
decl_stmt|;
name|qSplitTableQualifier
argument_list|(
name|tablename
argument_list|,
operator|&
name|catalog
argument_list|,
operator|&
name|schema
argument_list|,
operator|&
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|catalog
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|catalog
operator|=
name|stripDelimiters
argument_list|(
name|catalog
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|catalog
operator|=
name|catalog
operator|.
name|toUpper
argument_list|()
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|schema
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|schema
operator|=
name|stripDelimiters
argument_list|(
name|schema
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|schema
operator|=
name|schema
operator|.
name|toUpper
argument_list|()
expr_stmt|;
if|if
condition|(
name|isIdentifierEscaped
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|table
operator|=
name|stripDelimiters
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
else|else
name|table
operator|=
name|table
operator|.
name|toUpper
argument_list|()
expr_stmt|;
name|r
operator|=
name|SQLSetStmtAttr
argument_list|(
name|hStmt
argument_list|,
name|SQL_ATTR_CURSOR_TYPE
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|SQL_CURSOR_FORWARD_ONLY
argument_list|,
name|SQL_IS_UINTEGER
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLPrimaryKeys
argument_list|(
name|hStmt
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|qToTChar
argument_list|(
name|schema
argument_list|)
argument_list|,
name|schema
operator|.
name|length
argument_list|()
argument_list|,
name|qToTChar
argument_list|(
name|table
argument_list|)
argument_list|,
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|hStmt
argument_list|,
name|SQL_FETCH_NEXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bool
name|isNull
decl_stmt|;
name|QString
name|cName
decl_stmt|,
name|idxName
decl_stmt|;
comment|// Store all fields in a StringList because the driver can't detail fields in this FETCH loop
while|while
condition|(
name|r
operator|==
name|SQL_SUCCESS
condition|)
block|{
name|cName
operator|=
name|qGetStringData
argument_list|(
name|hStmt
argument_list|,
literal|3
argument_list|,
operator|-
literal|1
argument_list|,
name|isNull
argument_list|)
expr_stmt|;
comment|// column name
name|idxName
operator|=
name|qGetStringData
argument_list|(
name|hStmt
argument_list|,
literal|5
argument_list|,
operator|-
literal|1
argument_list|,
name|isNull
argument_list|)
expr_stmt|;
comment|// pk index name
name|index
operator|.
name|append
argument_list|(
name|rec
operator|.
name|field
argument_list|(
name|cName
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|.
name|setName
argument_list|(
name|idxName
argument_list|)
expr_stmt|;
name|r
operator|=
name|SQLFetchScroll
argument_list|(
name|hStmt
argument_list|,
name|SQL_FETCH_NEXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|r
operator|=
name|SQLFreeHandle
argument_list|(
name|SQL_HANDLE_STMT
argument_list|,
name|hStmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
name|qSqlWarning
argument_list|(
name|QLatin1String
argument_list|(
literal|"QDB2Driver: Unable to free statement handle "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|r
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
end_function
begin_function
DECL|function|hasFeature
name|bool
name|QDB2Driver
operator|::
name|hasFeature
parameter_list|(
name|DriverFeature
name|f
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|f
condition|)
block|{
case|case
name|QuerySize
case|:
case|case
name|NamedPlaceholders
case|:
case|case
name|BatchOperations
case|:
case|case
name|LastInsertId
case|:
case|case
name|SimpleLocking
case|:
case|case
name|EventNotifications
case|:
return|return
literal|false
return|;
case|case
name|BLOB
case|:
case|case
name|Transactions
case|:
case|case
name|MultipleResultSets
case|:
case|case
name|PreparedQueries
case|:
case|case
name|PositionalPlaceholders
case|:
case|case
name|LowPrecisionNumbers
case|:
case|case
name|FinishQuery
case|:
return|return
literal|true
return|;
case|case
name|Unicode
case|:
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|beginTransaction
name|bool
name|QDB2Driver
operator|::
name|beginTransaction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDB2Driver::beginTransaction: Database not open"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|commitTransaction
name|bool
name|QDB2Driver
operator|::
name|commitTransaction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDB2Driver::commitTransaction: Database not open"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|SQLRETURN
name|r
init|=
name|SQLEndTran
argument_list|(
name|SQL_HANDLE_DBC
argument_list|,
name|d
operator|->
name|hDbc
argument_list|,
name|SQL_COMMIT
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to commit transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rollbackTransaction
name|bool
name|QDB2Driver
operator|::
name|rollbackTransaction
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"QDB2Driver::rollbackTransaction: Database not open"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|SQLRETURN
name|r
init|=
name|SQLEndTran
argument_list|(
name|SQL_HANDLE_DBC
argument_list|,
name|d
operator|->
name|hDbc
argument_list|,
name|SQL_ROLLBACK
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to rollback transaction"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setAutoCommit
name|bool
name|QDB2Driver
operator|::
name|setAutoCommit
parameter_list|(
name|bool
name|autoCommit
parameter_list|)
block|{
name|SQLUINTEGER
name|ac
init|=
name|autoCommit
condition|?
name|SQL_AUTOCOMMIT_ON
else|:
name|SQL_AUTOCOMMIT_OFF
decl_stmt|;
name|SQLRETURN
name|r
init|=
name|SQLSetConnectAttr
argument_list|(
name|d
operator|->
name|hDbc
argument_list|,
name|SQL_ATTR_AUTOCOMMIT
argument_list|,
operator|(
name|SQLPOINTER
operator|)
name|ac
argument_list|,
sizeof|sizeof
argument_list|(
name|ac
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|SQL_SUCCESS
condition|)
block|{
name|setLastError
argument_list|(
name|qMakeError
argument_list|(
name|tr
argument_list|(
literal|"Unable to set autocommit"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|TransactionError
argument_list|,
name|d
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|formatValue
name|QString
name|QDB2Driver
operator|::
name|formatValue
parameter_list|(
specifier|const
name|QSqlField
modifier|&
name|field
parameter_list|,
name|bool
name|trimStrings
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|field
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
return|;
switch|switch
condition|(
name|field
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|DateTime
case|:
block|{
comment|// Use an escape sequence for the datetime fields
if|if
condition|(
name|field
operator|.
name|value
argument_list|()
operator|.
name|toDateTime
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QDate
name|dt
init|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toDateTime
argument_list|()
operator|.
name|date
argument_list|()
decl_stmt|;
name|QTime
name|tm
init|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toDateTime
argument_list|()
operator|.
name|time
argument_list|()
decl_stmt|;
comment|// Dateformat has to be "yyyy-MM-dd hh:mm:ss", with leading zeroes if month or day< 10
return|return
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|dt
operator|.
name|year
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|dt
operator|.
name|month
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|dt
operator|.
name|day
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|tm
operator|.
name|hour
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|tm
operator|.
name|minute
argument_list|()
argument_list|)
operator|.
name|rightJustified
argument_list|(
literal|2
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|tm
operator|.
name|second
argument_list|()
argument_list|)
operator|.
name|rightJustified
argument_list|(
literal|2
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|tm
operator|.
name|msec
argument_list|()
operator|*
literal|1000
argument_list|)
operator|.
name|rightJustified
argument_list|(
literal|6
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|QLatin1String
argument_list|(
literal|"NULL"
argument_list|)
return|;
block|}
block|}
case|case
name|QVariant
operator|::
name|ByteArray
case|:
block|{
name|QByteArray
name|ba
init|=
name|field
operator|.
name|value
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|QString
name|res
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"BLOB(X'"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|char
name|hexchars
index|[]
init|=
literal|"0123456789abcdef"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ba
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|uchar
name|s
init|=
operator|(
name|uchar
operator|)
name|ba
index|[
name|i
index|]
decl_stmt|;
name|res
operator|+=
name|QLatin1Char
argument_list|(
name|hexchars
index|[
name|s
operator|>>
literal|4
index|]
argument_list|)
expr_stmt|;
name|res
operator|+=
name|QLatin1Char
argument_list|(
name|hexchars
index|[
name|s
operator|&
literal|0x0f
index|]
argument_list|)
expr_stmt|;
block|}
name|res
operator|+=
name|QLatin1String
argument_list|(
literal|"')"
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
default|default:
return|return
name|QSqlDriver
operator|::
name|formatValue
argument_list|(
name|field
argument_list|,
name|trimStrings
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|handle
name|QVariant
name|QDB2Driver
operator|::
name|handle
parameter_list|()
specifier|const
block|{
return|return
name|QVariant
argument_list|(
name|qRegisterMetaType
argument_list|<
name|SQLHANDLE
argument_list|>
argument_list|(
literal|"SQLHANDLE"
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|hDbc
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|escapeIdentifier
name|QString
name|QDB2Driver
operator|::
name|escapeIdentifier
parameter_list|(
specifier|const
name|QString
modifier|&
name|identifier
parameter_list|,
name|IdentifierType
parameter_list|)
specifier|const
block|{
name|QString
name|res
init|=
name|identifier
decl_stmt|;
if|if
condition|(
operator|!
name|identifier
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|identifier
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
operator|&&
operator|!
name|identifier
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
condition|)
block|{
name|res
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\"\""
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\".\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
