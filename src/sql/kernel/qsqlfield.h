begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtSql module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSQLFIELD_H
end_ifndef
begin_define
DECL|macro|QSQLFIELD_H
define|#
directive|define
name|QSQLFIELD_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qvariant.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_include
include|#
directive|include
file|<QtSql/qsql.h>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|variable|QSqlFieldPrivate
name|class
name|QSqlFieldPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Q_SQL_EXPORT
name|QSqlField
block|{
name|public
label|:
enum|enum
name|RequiredStatus
block|{
name|Unknown
init|=
operator|-
literal|1
block|,
name|Optional
init|=
literal|0
block|,
name|Required
init|=
literal|1
block|}
enum|;
name|explicit
name|QSqlField
argument_list|(
specifier|const
name|QString
operator|&
name|fieldName
operator|=
name|QString
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Type
name|type
operator|=
name|QVariant
operator|::
name|Invalid
argument_list|)
decl_stmt|;
name|QSqlField
argument_list|(
specifier|const
name|QSqlField
operator|&
name|other
argument_list|)
expr_stmt|;
name|QSqlField
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QSqlField
operator|&
name|other
operator|)
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QSqlField
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QSqlField
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|other
operator|)
return|;
block|}
operator|~
name|QSqlField
argument_list|()
expr_stmt|;
name|void
name|setValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
function_decl|;
specifier|inline
name|QVariant
name|value
argument_list|()
specifier|const
block|{
return|return
name|val
return|;
block|}
name|void
name|setName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
name|QString
name|name
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isNull
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setReadOnly
parameter_list|(
name|bool
name|readOnly
parameter_list|)
function_decl|;
name|bool
name|isReadOnly
argument_list|()
specifier|const
expr_stmt|;
name|void
name|clear
parameter_list|()
function_decl|;
name|QVariant
operator|::
name|Type
name|type
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isAutoValue
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setType
argument_list|(
name|QVariant
operator|::
name|Type
name|type
argument_list|)
decl_stmt|;
name|void
name|setRequiredStatus
parameter_list|(
name|RequiredStatus
name|status
parameter_list|)
function_decl|;
specifier|inline
name|void
name|setRequired
parameter_list|(
name|bool
name|required
parameter_list|)
block|{
name|setRequiredStatus
argument_list|(
name|required
condition|?
name|Required
else|:
name|Optional
argument_list|)
expr_stmt|;
block|}
name|void
name|setLength
parameter_list|(
name|int
name|fieldLength
parameter_list|)
function_decl|;
name|void
name|setPrecision
parameter_list|(
name|int
name|precision
parameter_list|)
function_decl|;
name|void
name|setDefaultValue
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
function_decl|;
name|void
name|setSqlType
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
name|void
name|setGenerated
parameter_list|(
name|bool
name|gen
parameter_list|)
function_decl|;
name|void
name|setAutoValue
parameter_list|(
name|bool
name|autoVal
parameter_list|)
function_decl|;
name|RequiredStatus
name|requiredStatus
argument_list|()
specifier|const
expr_stmt|;
name|int
name|length
argument_list|()
specifier|const
expr_stmt|;
name|int
name|precision
argument_list|()
specifier|const
expr_stmt|;
name|QVariant
name|defaultValue
argument_list|()
specifier|const
expr_stmt|;
name|int
name|typeID
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isGenerated
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|void
name|detach
parameter_list|()
function_decl|;
name|QVariant
name|val
decl_stmt|;
name|QSqlFieldPrivate
modifier|*
name|d
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_SQL_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QSqlField
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSQLFIELD_H
end_comment
end_unit
