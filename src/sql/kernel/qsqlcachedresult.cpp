begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtSql module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"private/qsqlcachedresult_p.h"
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|/*    QSqlCachedResult is a convenience class for databases that only allow    forward only fetching. It will cache all the results so we can iterate    backwards over the results again.     All you need to do is to inherit from QSqlCachedResult and reimplement    gotoNext(). gotoNext() will have a reference to the internal cache and    will give you an index where you can start filling in your data. Special    case: If the user actually wants a forward-only query, idx will be -1    to indicate that we are not interested in the actual values. */
DECL|variable|initial_cache_size
specifier|static
specifier|const
name|uint
name|initial_cache_size
init|=
literal|128
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|QSqlCachedResultPrivate
name|QSqlCachedResultPrivate
operator|::
name|QSqlCachedResultPrivate
parameter_list|()
member_init_list|:
name|rowCacheEnd
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|colCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|forwardOnly
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|atEnd
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|cleanup
name|void
name|QSqlCachedResultPrivate
operator|::
name|cleanup
parameter_list|()
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|forwardOnly
operator|=
literal|false
expr_stmt|;
name|atEnd
operator|=
literal|false
expr_stmt|;
name|colCount
operator|=
literal|0
expr_stmt|;
name|rowCacheEnd
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|QSqlCachedResultPrivate
operator|::
name|init
parameter_list|(
name|int
name|count
parameter_list|,
name|bool
name|fo
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
name|forwardOnly
operator|=
name|fo
expr_stmt|;
name|colCount
operator|=
name|count
expr_stmt|;
if|if
condition|(
name|fo
condition|)
block|{
name|cache
operator|.
name|resize
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|rowCacheEnd
operator|=
name|count
expr_stmt|;
block|}
else|else
block|{
name|cache
operator|.
name|resize
argument_list|(
name|initial_cache_size
operator|*
name|count
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|nextIndex
name|int
name|QSqlCachedResultPrivate
operator|::
name|nextIndex
parameter_list|()
block|{
if|if
condition|(
name|forwardOnly
condition|)
return|return
literal|0
return|;
name|int
name|newIdx
init|=
name|rowCacheEnd
decl_stmt|;
if|if
condition|(
name|newIdx
operator|+
name|colCount
operator|>
name|cache
operator|.
name|size
argument_list|()
condition|)
name|cache
operator|.
name|resize
argument_list|(
name|qMin
argument_list|(
name|cache
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|,
name|cache
operator|.
name|size
argument_list|()
operator|+
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|rowCacheEnd
operator|+=
name|colCount
expr_stmt|;
return|return
name|newIdx
return|;
block|}
end_function
begin_function
DECL|function|canSeek
name|bool
name|QSqlCachedResultPrivate
operator|::
name|canSeek
parameter_list|(
name|int
name|i
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|forwardOnly
operator|||
name|i
operator|<
literal|0
condition|)
return|return
literal|false
return|;
return|return
name|rowCacheEnd
operator|>=
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
name|colCount
return|;
block|}
end_function
begin_function
DECL|function|revertLast
name|void
name|QSqlCachedResultPrivate
operator|::
name|revertLast
parameter_list|()
block|{
if|if
condition|(
name|forwardOnly
condition|)
return|return;
name|rowCacheEnd
operator|-=
name|colCount
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cacheCount
specifier|inline
name|int
name|QSqlCachedResultPrivate
operator|::
name|cacheCount
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|forwardOnly
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|colCount
argument_list|)
expr_stmt|;
return|return
name|rowCacheEnd
operator|/
name|colCount
return|;
block|}
end_function
begin_comment
comment|//////////////
end_comment
begin_constructor
DECL|function|QSqlCachedResult
name|QSqlCachedResult
operator|::
name|QSqlCachedResult
parameter_list|(
specifier|const
name|QSqlDriver
modifier|*
name|db
parameter_list|)
member_init_list|:
name|QSqlResult
argument_list|(
name|db
argument_list|)
block|{
name|d
operator|=
operator|new
name|QSqlCachedResultPrivate
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QSqlCachedResult
name|QSqlCachedResult
operator|::
name|~
name|QSqlCachedResult
parameter_list|()
block|{
operator|delete
name|d
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|init
name|void
name|QSqlCachedResult
operator|::
name|init
parameter_list|(
name|int
name|colCount
parameter_list|)
block|{
name|d
operator|->
name|init
argument_list|(
name|colCount
argument_list|,
name|isForwardOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fetch
name|bool
name|QSqlCachedResult
operator|::
name|fetch
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|!
name|isActive
argument_list|()
operator|)
operator|||
operator|(
name|i
operator|<
literal|0
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|at
argument_list|()
operator|==
name|i
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|d
operator|->
name|forwardOnly
condition|)
block|{
comment|// speed hack - do not copy values if not needed
if|if
condition|(
name|at
argument_list|()
operator|>
name|i
operator|||
name|at
argument_list|()
operator|==
name|QSql
operator|::
name|AfterLastRow
condition|)
return|return
literal|false
return|;
while|while
condition|(
name|at
argument_list|()
operator|<
name|i
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|gotoNext
argument_list|(
name|d
operator|->
name|cache
argument_list|,
operator|-
literal|1
argument_list|)
condition|)
return|return
literal|false
return|;
name|setAt
argument_list|(
name|at
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|gotoNext
argument_list|(
name|d
operator|->
name|cache
argument_list|,
literal|0
argument_list|)
condition|)
return|return
literal|false
return|;
name|setAt
argument_list|(
name|at
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|d
operator|->
name|canSeek
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|setAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|d
operator|->
name|rowCacheEnd
operator|>
literal|0
condition|)
name|setAt
argument_list|(
name|d
operator|->
name|cacheCount
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|at
argument_list|()
operator|<
name|i
operator|+
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|cacheNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|canSeek
argument_list|(
name|i
argument_list|)
condition|)
break|break;
return|return
literal|false
return|;
block|}
block|}
name|setAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fetchNext
name|bool
name|QSqlCachedResult
operator|::
name|fetchNext
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|canSeek
argument_list|(
name|at
argument_list|()
operator|+
literal|1
argument_list|)
condition|)
block|{
name|setAt
argument_list|(
name|at
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|cacheNext
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|fetchPrevious
name|bool
name|QSqlCachedResult
operator|::
name|fetchPrevious
parameter_list|()
block|{
return|return
name|fetch
argument_list|(
name|at
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fetchFirst
name|bool
name|QSqlCachedResult
operator|::
name|fetchFirst
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|forwardOnly
operator|&&
name|at
argument_list|()
operator|!=
name|QSql
operator|::
name|BeforeFirstRow
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|d
operator|->
name|canSeek
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|setAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|cacheNext
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|fetchLast
name|bool
name|QSqlCachedResult
operator|::
name|fetchLast
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|atEnd
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|forwardOnly
condition|)
return|return
literal|false
return|;
else|else
return|return
name|fetch
argument_list|(
name|d
operator|->
name|cacheCount
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
name|int
name|i
init|=
name|at
argument_list|()
decl_stmt|;
while|while
condition|(
name|fetchNext
argument_list|()
condition|)
operator|++
name|i
expr_stmt|;
comment|/* brute force */
if|if
condition|(
name|d
operator|->
name|forwardOnly
operator|&&
name|at
argument_list|()
operator|==
name|QSql
operator|::
name|AfterLastRow
condition|)
block|{
name|setAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|fetch
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|data
name|QVariant
name|QSqlCachedResult
operator|::
name|data
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|int
name|idx
init|=
name|d
operator|->
name|forwardOnly
condition|?
name|i
else|:
name|at
argument_list|()
operator|*
name|d
operator|->
name|colCount
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|i
operator|>=
name|d
operator|->
name|colCount
operator|||
name|i
operator|<
literal|0
operator|||
name|at
argument_list|()
operator|<
literal|0
operator|||
name|idx
operator|>=
name|d
operator|->
name|rowCacheEnd
condition|)
return|return
name|QVariant
argument_list|()
return|;
return|return
name|d
operator|->
name|cache
operator|.
name|at
argument_list|(
name|idx
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isNull
name|bool
name|QSqlCachedResult
operator|::
name|isNull
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|int
name|idx
init|=
name|d
operator|->
name|forwardOnly
condition|?
name|i
else|:
name|at
argument_list|()
operator|*
name|d
operator|->
name|colCount
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|i
operator|>=
name|d
operator|->
name|colCount
operator|||
name|i
operator|<
literal|0
operator|||
name|at
argument_list|()
operator|<
literal|0
operator|||
name|idx
operator|>=
name|d
operator|->
name|rowCacheEnd
condition|)
return|return
literal|true
return|;
return|return
name|d
operator|->
name|cache
operator|.
name|at
argument_list|(
name|idx
argument_list|)
operator|.
name|isNull
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|QSqlCachedResult
operator|::
name|cleanup
parameter_list|()
block|{
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|d
operator|->
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearValues
name|void
name|QSqlCachedResult
operator|::
name|clearValues
parameter_list|()
block|{
name|setAt
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|d
operator|->
name|rowCacheEnd
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|atEnd
operator|=
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cacheNext
name|bool
name|QSqlCachedResult
operator|::
name|cacheNext
parameter_list|()
block|{
if|if
condition|(
name|d
operator|->
name|atEnd
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|isForwardOnly
argument_list|()
condition|)
block|{
name|d
operator|->
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|cache
operator|.
name|resize
argument_list|(
name|d
operator|->
name|colCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|gotoNext
argument_list|(
name|d
operator|->
name|cache
argument_list|,
name|d
operator|->
name|nextIndex
argument_list|()
argument_list|)
condition|)
block|{
name|d
operator|->
name|revertLast
argument_list|()
expr_stmt|;
name|d
operator|->
name|atEnd
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
name|setAt
argument_list|(
name|at
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|colCount
name|int
name|QSqlCachedResult
operator|::
name|colCount
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|colCount
return|;
block|}
end_function
begin_function
DECL|function|cache
name|QSqlCachedResult
operator|::
name|ValueCache
modifier|&
name|QSqlCachedResult
operator|::
name|cache
parameter_list|()
block|{
return|return
name|d
operator|->
name|cache
return|;
block|}
end_function
begin_function
DECL|function|virtual_hook
name|void
name|QSqlCachedResult
operator|::
name|virtual_hook
parameter_list|(
name|int
name|id
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|QSqlResult
operator|::
name|virtual_hook
argument_list|(
name|id
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detachFromResultSet
name|void
name|QSqlCachedResult
operator|::
name|detachFromResultSet
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setNumericalPrecisionPolicy
name|void
name|QSqlCachedResult
operator|::
name|setNumericalPrecisionPolicy
parameter_list|(
name|QSql
operator|::
name|NumericalPrecisionPolicy
name|policy
parameter_list|)
block|{
name|QSqlResult
operator|::
name|setNumericalPrecisionPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
