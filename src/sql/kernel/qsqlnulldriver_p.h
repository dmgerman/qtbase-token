begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtSql module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSQLNULLDRIVER_P_H
end_ifndef
begin_define
DECL|macro|QSQLNULLDRIVER_P_H
define|#
directive|define
name|QSQLNULLDRIVER_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  This header file may
end_comment
begin_comment
comment|// change from version to version without notice, or even be
end_comment
begin_comment
comment|// removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"QtCore/qvariant.h"
end_include
begin_include
include|#
directive|include
file|"QtSql/qsqldriver.h"
end_include
begin_include
include|#
directive|include
file|"QtSql/qsqlerror.h"
end_include
begin_include
include|#
directive|include
file|"QtSql/qsqlresult.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|QSqlNullResult
range|:
name|public
name|QSqlResult
block|{
name|public
operator|:
specifier|inline
name|explicit
name|QSqlNullResult
argument_list|(
specifier|const
name|QSqlDriver
operator|*
name|d
argument_list|)
operator|:
name|QSqlResult
argument_list|(
argument|d
argument_list|)
block|{
name|QSqlResult
operator|::
name|setLastError
argument_list|(
name|QSqlError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Driver not loaded"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Driver not loaded"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|)
argument_list|)
block|; }
name|protected
operator|:
specifier|inline
name|QVariant
name|data
argument_list|(
argument|int
argument_list|)
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|reset
argument_list|(
argument|const QString&
argument_list|)
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|bool
name|fetch
argument_list|(
argument|int
argument_list|)
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|bool
name|fetchFirst
argument_list|()
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|bool
name|fetchLast
argument_list|()
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|bool
name|isNull
argument_list|(
argument|int
argument_list|)
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|int
name|size
argument_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|inline
name|int
name|numRowsAffected
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|inline
name|void
name|setAt
argument_list|(
argument|int
argument_list|)
block|{}
specifier|inline
name|void
name|setActive
argument_list|(
argument|bool
argument_list|)
block|{}
specifier|inline
name|void
name|setLastError
argument_list|(
argument|const QSqlError&
argument_list|)
block|{}
specifier|inline
name|void
name|setQuery
argument_list|(
argument|const QString&
argument_list|)
block|{}
specifier|inline
name|void
name|setSelect
argument_list|(
argument|bool
argument_list|)
block|{}
specifier|inline
name|void
name|setForwardOnly
argument_list|(
argument|bool
argument_list|)
block|{}
specifier|inline
name|bool
name|exec
argument_list|()
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|bool
name|prepare
argument_list|(
argument|const QString&
argument_list|)
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|bool
name|savePrepare
argument_list|(
argument|const QString&
argument_list|)
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|void
name|bindValue
argument_list|(
argument|int
argument_list|,
argument|const QVariant&
argument_list|,
argument|QSql::ParamType
argument_list|)
block|{}
specifier|inline
name|void
name|bindValue
argument_list|(
argument|const QString&
argument_list|,
argument|const QVariant&
argument_list|,
argument|QSql::ParamType
argument_list|)
block|{}
expr|}
block|;
name|class
name|QSqlNullDriver
operator|:
name|public
name|QSqlDriver
block|{
name|public
operator|:
specifier|inline
name|QSqlNullDriver
argument_list|()
operator|:
name|QSqlDriver
argument_list|()
block|{
name|QSqlDriver
operator|::
name|setLastError
argument_list|(
name|QSqlError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Driver not loaded"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Driver not loaded"
argument_list|)
argument_list|,
name|QSqlError
operator|::
name|ConnectionError
argument_list|)
argument_list|)
block|; }
specifier|inline
name|bool
name|hasFeature
argument_list|(
argument|DriverFeature
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|bool
name|open
argument_list|(
argument|const QString&
argument_list|,
argument|const QString&
argument_list|,
argument|const QString&
argument_list|,
argument|const QString&
argument_list|,
argument|int
argument_list|,
argument|const QString&
argument_list|)
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|void
name|close
argument_list|()
block|{}
specifier|inline
name|QSqlResult
operator|*
name|createResult
argument_list|()
specifier|const
block|{
return|return
name|new
name|QSqlNullResult
argument_list|(
name|this
argument_list|)
return|;
block|}
name|protected
operator|:
specifier|inline
name|void
name|setOpen
argument_list|(
argument|bool
argument_list|)
block|{}
specifier|inline
name|void
name|setOpenError
argument_list|(
argument|bool
argument_list|)
block|{}
specifier|inline
name|void
name|setLastError
argument_list|(
argument|const QSqlError&
argument_list|)
block|{}
expr|}
block|;
name|QT_END_NAMESPACE
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSQLNULLDRIVER_P_H
end_comment
end_unit
