begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtSql module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSQLERROR_H
end_ifndef
begin_define
DECL|macro|QSQLERROR_H
define|#
directive|define
name|QSQLERROR_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_function
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|function|QT_MODULE
name|QT_MODULE
parameter_list|(
name|Sql
parameter_list|)
name|class
name|Q_SQL_EXPORT
name|QSqlError
decl_stmt|{ public:     enum ErrorType
block|{
name|NoError
operator|,
name|ConnectionError
operator|,
name|StatementError
operator|,
name|TransactionError
operator|,
name|UnknownError
ifdef|#
directive|ifdef
name|QT3_SUPPORT
operator|,
name|None
operator|=
name|NoError
operator|,
name|Connection
operator|=
name|ConnectionError
operator|,
name|Statement
operator|=
name|StatementError
operator|,
name|Transaction
operator|=
name|TransactionError
operator|,
name|Unknown
operator|=
name|UnknownError
endif|#
directive|endif
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QSqlError
argument_list|(
argument|const QString& driverText = QString()
argument_list|,
argument|const QString& databaseText = QString()
argument_list|,
argument|ErrorType type = NoError
argument_list|,
argument|int number = -
literal|1
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|QSqlError
argument_list|(
specifier|const
name|QSqlError
operator|&
name|other
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QSqlError
modifier|&
name|operator
init|=
operator|(
specifier|const
name|QSqlError
operator|&
name|other
operator|)
decl_stmt|;
end_decl_stmt
begin_expr_stmt
operator|~
name|QSqlError
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|driverText
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setDriverText
parameter_list|(
specifier|const
name|QString
modifier|&
name|driverText
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QString
name|databaseText
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setDatabaseText
parameter_list|(
specifier|const
name|QString
modifier|&
name|databaseText
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|ErrorType
name|type
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setType
parameter_list|(
name|ErrorType
name|type
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|int
name|number
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setNumber
parameter_list|(
name|int
name|number
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QString
name|text
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|QString
name|driverError
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QString
name|databaseError
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|ErrorType
name|errorType
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|errorNumber
decl_stmt|;
end_decl_stmt
begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_STREAM
end_ifndef
begin_expr_stmt
name|Q_SQL_EXPORT
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
operator|,
specifier|const
name|QSqlError
operator|&
operator|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSQLERROR_H
end_comment
end_unit
