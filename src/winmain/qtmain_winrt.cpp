begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the Windows main function of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*   This file contains the code in the qtmain library for WinRT.   qtmain contains the WinRT startup code and is required for   linking to the Qt DLL.    When a Windows application starts, the WinMain function is   invoked. WinMain creates the WinRT application which in turn   calls the main entry point. */
end_comment
begin_extern
extern|extern
literal|"C"
name|int
name|main
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_extern
begin_include
include|#
directive|include
file|<qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<Windows.ApplicationModel.core.h>
end_include
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|ApplicationModel
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_define
DECL|macro|qHString
define|#
directive|define
name|qHString
parameter_list|(
name|x
parameter_list|)
value|Wrappers::HString::MakeReference(x).Get()
end_define
begin_define
DECL|macro|CoreApplicationClass
define|#
directive|define
name|CoreApplicationClass
value|RuntimeClass_Windows_ApplicationModel_Core_CoreApplication
end_define
begin_typedef
DECL|typedef|ActivatedHandler
typedef|typedef
name|ITypedEventHandler
argument_list|<
name|Core
operator|::
name|CoreApplicationView
operator|*
argument_list|,
name|Activation
operator|::
name|IActivatedEventArgs
operator|*
argument_list|>
name|ActivatedHandler
typedef|;
end_typedef
begin_class
DECL|class|AppContainer
class|class
name|AppContainer
super|:
specifier|public
name|Microsoft
operator|::
name|WRL
operator|::
name|RuntimeClass
argument_list|<
name|Core
operator|::
name|IFrameworkView
argument_list|>
block|{
public|public:
DECL|function|AppContainer
name|AppContainer
parameter_list|(
name|int
name|argc
parameter_list|,
name|wchar_t
modifier|*
modifier|*
name|argv
parameter_list|)
member_init_list|:
name|m_argc
argument_list|(
name|argc
argument_list|)
block|{
name|m_argv
operator|.
name|reserve
argument_list|(
name|argc
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argc
condition|;
operator|++
name|i
control|)
block|{
name|QByteArray
name|arg
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
name|m_argv
operator|.
name|append
argument_list|(
name|qstrdup
argument_list|(
name|arg
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|~AppContainer
name|~
name|AppContainer
parameter_list|()
block|{
foreach|foreach
control|(
specifier|const
name|char
modifier|*
name|arg
decl|,
name|m_argv
control|)
operator|delete
index|[]
name|arg
expr_stmt|;
block|}
comment|// IFrameworkView Methods
DECL|function|Initialize
name|HRESULT
name|__stdcall
name|Initialize
parameter_list|(
name|Core
operator|::
name|ICoreApplicationView
modifier|*
name|view
parameter_list|)
block|{
name|view
operator|->
name|add_Activated
argument_list|(
name|Callback
argument_list|<
name|ActivatedHandler
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|AppContainer
operator|::
name|onActivated
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|m_activationToken
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
DECL|function|SetWindow
name|HRESULT
name|__stdcall
name|SetWindow
parameter_list|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
modifier|*
parameter_list|)
block|{
return|return
name|S_OK
return|;
block|}
DECL|function|Load
name|HRESULT
name|__stdcall
name|Load
parameter_list|(
name|HSTRING
parameter_list|)
block|{
return|return
name|S_OK
return|;
block|}
DECL|function|Run
name|HRESULT
name|__stdcall
name|Run
parameter_list|()
block|{
return|return
name|main
argument_list|(
name|m_argv
operator|.
name|count
argument_list|()
argument_list|,
name|m_argv
operator|.
name|data
argument_list|()
argument_list|)
return|;
block|}
DECL|function|Uninitialize
name|HRESULT
name|__stdcall
name|Uninitialize
parameter_list|()
block|{
return|return
name|S_OK
return|;
block|}
private|private:
comment|// Activation handler
DECL|function|onActivated
name|HRESULT
name|onActivated
parameter_list|(
name|Core
operator|::
name|ICoreApplicationView
modifier|*
parameter_list|,
name|Activation
operator|::
name|IActivatedEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|Activation
operator|::
name|ILaunchActivatedEventArgs
modifier|*
name|launchArgs
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|args
operator|->
name|QueryInterface
argument_list|(
operator|&
name|launchArgs
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|m_argc
init|;
name|i
operator|<
name|m_argv
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
operator|delete
index|[]
name|m_argv
index|[
name|i
index|]
expr_stmt|;
name|m_argv
operator|.
name|resize
argument_list|(
name|m_argc
argument_list|)
expr_stmt|;
name|HSTRING
name|arguments
decl_stmt|;
name|launchArgs
operator|->
name|get_Arguments
argument_list|(
operator|&
name|arguments
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QByteArray
modifier|&
name|arg
decl|,
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|WindowsGetStringRawBuffer
argument_list|(
name|arguments
argument_list|,
literal|nullptr
argument_list|)
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|split
argument_list|(
literal|' '
argument_list|)
control|)
block|{
name|m_argv
operator|.
name|append
argument_list|(
name|qstrdup
argument_list|(
name|arg
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|S_OK
return|;
block|}
DECL|member|m_argc
name|int
name|m_argc
decl_stmt|;
DECL|member|m_argv
name|QVector
argument_list|<
name|char
modifier|*
argument_list|>
name|m_argv
decl_stmt|;
DECL|member|m_activationToken
name|EventRegistrationToken
name|m_activationToken
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|AppViewSource
class|class
name|AppViewSource
super|:
specifier|public
name|Microsoft
operator|::
name|WRL
operator|::
name|RuntimeClass
argument_list|<
name|Core
operator|::
name|IFrameworkViewSource
argument_list|>
block|{
public|public:
DECL|function|AppViewSource
name|AppViewSource
parameter_list|(
name|int
name|argc
parameter_list|,
name|wchar_t
modifier|*
name|argv
index|[]
parameter_list|)
member_init_list|:
name|argc
argument_list|(
name|argc
argument_list|)
member_init_list|,
name|argv
argument_list|(
name|argv
argument_list|)
block|{ }
DECL|function|CreateView
name|HRESULT
name|__stdcall
name|CreateView
parameter_list|(
name|Core
operator|::
name|IFrameworkView
modifier|*
modifier|*
name|frameworkView
parameter_list|)
block|{
return|return
operator|(
operator|*
name|frameworkView
operator|=
name|Make
argument_list|<
name|AppContainer
argument_list|>
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
operator|.
name|Detach
argument_list|()
operator|)
condition|?
name|S_OK
else|:
name|E_OUTOFMEMORY
return|;
block|}
private|private:
DECL|member|argc
name|int
name|argc
decl_stmt|;
DECL|member|argv
name|wchar_t
modifier|*
modifier|*
name|argv
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Main entry point for Appx containers
end_comment
begin_function
DECL|function|wmain
name|int
name|wmain
parameter_list|(
name|int
name|argc
parameter_list|,
name|wchar_t
modifier|*
name|argv
index|[]
parameter_list|)
block|{
if|if
condition|(
name|FAILED
argument_list|(
name|RoInitialize
argument_list|(
name|RO_INIT_MULTITHREADED
argument_list|)
argument_list|)
condition|)
return|return
literal|1
return|;
name|Core
operator|::
name|ICoreApplication
modifier|*
name|appFactory
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|RoGetActivationFactory
argument_list|(
name|qHString
argument_list|(
name|CoreApplicationClass
argument_list|)
argument_list|,
name|IID_PPV_ARGS
argument_list|(
operator|&
name|appFactory
argument_list|)
argument_list|)
argument_list|)
condition|)
return|return
literal|2
return|;
return|return
name|appFactory
operator|->
name|Run
argument_list|(
name|Make
argument_list|<
name|AppViewSource
argument_list|>
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|)
return|;
block|}
end_function
end_unit
