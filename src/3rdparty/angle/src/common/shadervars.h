begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// shadervars.h:
end_comment
begin_comment
comment|//  Types to represent GL variables (varyings, uniforms, etc)
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMMON_SHADERVARIABLE_H_
end_ifndef
begin_define
DECL|macro|COMMON_SHADERVARIABLE_H_
define|#
directive|define
name|COMMON_SHADERVARIABLE_H_
end_define
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|"GLSLANG/ShaderLang.h"
end_include
begin_decl_stmt
name|namespace
name|sh
block|{
comment|// Varying interpolation qualifier, see section 4.3.9 of the ESSL 3.00.4 spec
enum|enum
name|InterpolationType
block|{
name|INTERPOLATION_SMOOTH
block|,
name|INTERPOLATION_CENTROID
block|,
name|INTERPOLATION_FLAT
block|}
enum|;
comment|// Uniform block layout qualifier, see section 4.3.8.3 of the ESSL 3.00.4 spec
enum|enum
name|BlockLayoutType
block|{
name|BLOCKLAYOUT_STANDARD
block|,
name|BLOCKLAYOUT_PACKED
block|,
name|BLOCKLAYOUT_SHARED
block|}
enum|;
comment|// Base class for all variables defined in shaders, including Varyings, Uniforms, etc
struct|struct
name|ShaderVariable
block|{
name|ShaderVariable
argument_list|()
operator|:
name|type
argument_list|(
literal|0
argument_list|)
operator|,
name|precision
argument_list|(
literal|0
argument_list|)
operator|,
name|arraySize
argument_list|(
literal|0
argument_list|)
operator|,
name|staticUse
argument_list|(
argument|false
argument_list|)
block|{}
name|ShaderVariable
argument_list|(
argument|GLenum typeIn
argument_list|,
argument|GLenum precisionIn
argument_list|,
argument|const char *nameIn
argument_list|,
argument|unsigned int arraySizeIn
argument_list|)
operator|:
name|type
argument_list|(
name|typeIn
argument_list|)
operator|,
name|precision
argument_list|(
name|precisionIn
argument_list|)
operator|,
name|name
argument_list|(
name|nameIn
argument_list|)
operator|,
name|arraySize
argument_list|(
name|arraySizeIn
argument_list|)
operator|,
name|staticUse
argument_list|(
argument|false
argument_list|)
block|{}
name|bool
name|isArray
argument_list|()
specifier|const
block|{
return|return
name|arraySize
operator|>
literal|0
return|;
block|}
name|unsigned
name|int
name|elementCount
argument_list|()
specifier|const
block|{
return|return
name|std
operator|::
name|max
argument_list|(
literal|1u
argument_list|,
name|arraySize
argument_list|)
return|;
block|}
name|GLenum
name|type
decl_stmt|;
name|GLenum
name|precision
decl_stmt|;
name|std
operator|::
name|string
name|name
expr_stmt|;
name|std
operator|::
name|string
name|mappedName
expr_stmt|;
name|unsigned
name|int
name|arraySize
decl_stmt|;
name|bool
name|staticUse
decl_stmt|;
block|}
struct|;
name|struct
name|Uniform
range|:
name|public
name|ShaderVariable
block|{
name|Uniform
argument_list|()
block|{}
name|Uniform
argument_list|(
argument|GLenum typeIn
argument_list|,
argument|GLenum precisionIn
argument_list|,
argument|const char *nameIn
argument_list|,
argument|unsigned int arraySizeIn
argument_list|)
operator|:
name|ShaderVariable
argument_list|(
argument|typeIn
argument_list|,
argument|precisionIn
argument_list|,
argument|nameIn
argument_list|,
argument|arraySizeIn
argument_list|)
block|{}
name|bool
name|isStruct
argument_list|()
specifier|const
block|{
return|return
operator|!
name|fields
operator|.
name|empty
argument_list|()
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|Uniform
operator|>
name|fields
block|; }
decl_stmt|;
name|struct
name|Attribute
range|:
name|public
name|ShaderVariable
block|{
name|Attribute
argument_list|()
operator|:
name|location
argument_list|(
argument|-
literal|1
argument_list|)
block|{}
name|Attribute
argument_list|(
argument|GLenum typeIn
argument_list|,
argument|GLenum precisionIn
argument_list|,
argument|const char *nameIn
argument_list|,
argument|unsigned int arraySizeIn
argument_list|,
argument|int locationIn
argument_list|)
operator|:
name|ShaderVariable
argument_list|(
name|typeIn
argument_list|,
name|precisionIn
argument_list|,
name|nameIn
argument_list|,
name|arraySizeIn
argument_list|)
block|,
name|location
argument_list|(
argument|locationIn
argument_list|)
block|{}
name|int
name|location
block|; }
decl_stmt|;
name|struct
name|InterfaceBlockField
range|:
name|public
name|ShaderVariable
block|{
name|InterfaceBlockField
argument_list|()
operator|:
name|isRowMajorMatrix
argument_list|(
argument|false
argument_list|)
block|{}
name|InterfaceBlockField
argument_list|(
argument|GLenum typeIn
argument_list|,
argument|GLenum precisionIn
argument_list|,
argument|const char *nameIn
argument_list|,
argument|unsigned int arraySizeIn
argument_list|,
argument|bool isRowMajorMatrix
argument_list|)
operator|:
name|ShaderVariable
argument_list|(
name|typeIn
argument_list|,
name|precisionIn
argument_list|,
name|nameIn
argument_list|,
name|arraySizeIn
argument_list|)
block|,
name|isRowMajorMatrix
argument_list|(
argument|isRowMajorMatrix
argument_list|)
block|{}
name|bool
name|isStruct
argument_list|()
specifier|const
block|{
return|return
operator|!
name|fields
operator|.
name|empty
argument_list|()
return|;
block|}
name|bool
name|isRowMajorMatrix
block|;
name|std
operator|::
name|vector
operator|<
name|InterfaceBlockField
operator|>
name|fields
block|; }
decl_stmt|;
name|struct
name|Varying
range|:
name|public
name|ShaderVariable
block|{
name|Varying
argument_list|()
operator|:
name|interpolation
argument_list|(
argument|INTERPOLATION_SMOOTH
argument_list|)
block|{}
name|Varying
argument_list|(
argument|GLenum typeIn
argument_list|,
argument|GLenum precisionIn
argument_list|,
argument|const char *nameIn
argument_list|,
argument|unsigned int arraySizeIn
argument_list|,
argument|InterpolationType interpolationIn
argument_list|)
operator|:
name|ShaderVariable
argument_list|(
name|typeIn
argument_list|,
name|precisionIn
argument_list|,
name|nameIn
argument_list|,
name|arraySizeIn
argument_list|)
block|,
name|interpolation
argument_list|(
argument|interpolationIn
argument_list|)
block|{}
name|bool
name|isStruct
argument_list|()
specifier|const
block|{
return|return
operator|!
name|fields
operator|.
name|empty
argument_list|()
return|;
block|}
name|InterpolationType
name|interpolation
block|;
name|std
operator|::
name|vector
operator|<
name|Varying
operator|>
name|fields
block|;
name|std
operator|::
name|string
name|structName
block|; }
decl_stmt|;
struct|struct
name|InterfaceBlock
block|{
name|InterfaceBlock
argument_list|()
operator|:
name|arraySize
argument_list|(
literal|0
argument_list|)
operator|,
name|layout
argument_list|(
name|BLOCKLAYOUT_PACKED
argument_list|)
operator|,
name|isRowMajorLayout
argument_list|(
name|false
argument_list|)
operator|,
name|staticUse
argument_list|(
argument|false
argument_list|)
block|{}
name|InterfaceBlock
argument_list|(
argument|const char *name
argument_list|,
argument|unsigned int arraySize
argument_list|)
operator|:
name|name
argument_list|(
name|name
argument_list|)
operator|,
name|arraySize
argument_list|(
name|arraySize
argument_list|)
operator|,
name|layout
argument_list|(
name|BLOCKLAYOUT_SHARED
argument_list|)
operator|,
name|isRowMajorLayout
argument_list|(
name|false
argument_list|)
operator|,
name|staticUse
argument_list|(
argument|false
argument_list|)
block|{}
name|std
operator|::
name|string
name|name
expr_stmt|;
name|std
operator|::
name|string
name|mappedName
expr_stmt|;
name|unsigned
name|int
name|arraySize
decl_stmt|;
name|BlockLayoutType
name|layout
decl_stmt|;
name|bool
name|isRowMajorLayout
decl_stmt|;
name|bool
name|staticUse
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|InterfaceBlockField
operator|>
name|fields
expr_stmt|;
block|}
struct|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMMON_SHADERVARIABLE_H_
end_comment
end_unit
