begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"common/MemoryBuffer.h"
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|<cstdlib>
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|MemoryBuffer
name|MemoryBuffer
operator|::
name|MemoryBuffer
parameter_list|()
member_init_list|:
name|mSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mData
argument_list|(
name|NULL
argument_list|)
block|{ }
DECL|function|~MemoryBuffer
name|MemoryBuffer
operator|::
name|~
name|MemoryBuffer
parameter_list|()
block|{
name|free
argument_list|(
name|mData
argument_list|)
expr_stmt|;
name|mData
operator|=
name|NULL
expr_stmt|;
block|}
DECL|function|resize
name|bool
name|MemoryBuffer
operator|::
name|resize
parameter_list|(
name|size_t
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
name|free
argument_list|(
name|mData
argument_list|)
expr_stmt|;
name|mData
operator|=
name|NULL
expr_stmt|;
name|mSize
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|size
operator|==
name|mSize
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Only reallocate if the size has changed.
name|uint8_t
modifier|*
name|newMemory
init|=
cast|reinterpret_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|uint8_t
argument_list|)
operator|*
name|size
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|newMemory
operator|==
name|NULL
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|mData
condition|)
block|{
comment|// Copy the intersection of the old data and the new data
name|std
operator|::
name|copy
argument_list|(
name|mData
argument_list|,
name|mData
operator|+
name|std
operator|::
name|min
argument_list|(
name|mSize
argument_list|,
name|size
argument_list|)
argument_list|,
name|newMemory
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|mData
argument_list|)
expr_stmt|;
block|}
name|mData
operator|=
name|newMemory
expr_stmt|;
name|mSize
operator|=
name|size
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|size
name|size_t
name|MemoryBuffer
operator|::
name|size
parameter_list|()
specifier|const
block|{
return|return
name|mSize
return|;
block|}
DECL|function|data
specifier|const
name|uint8_t
modifier|*
name|MemoryBuffer
operator|::
name|data
parameter_list|()
specifier|const
block|{
return|return
name|mData
return|;
block|}
DECL|function|data
name|uint8_t
modifier|*
name|MemoryBuffer
operator|::
name|data
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|mData
argument_list|)
expr_stmt|;
return|return
name|mData
return|;
block|}
block|}
end_namespace
end_unit
