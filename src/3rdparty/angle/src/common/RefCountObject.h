begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// RefCountObject.h: Defines the gl::RefCountObject base class that provides
end_comment
begin_comment
comment|// lifecycle support for GL objects using the traditional BindObject scheme, but
end_comment
begin_comment
comment|// that need to be reference counted for correct cross-context deletion.
end_comment
begin_comment
comment|// (Concretely, textures, buffers and renderbuffers.)
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMMON_REFCOUNTOBJECT_H_
end_ifndef
begin_define
DECL|macro|COMMON_REFCOUNTOBJECT_H_
define|#
directive|define
name|COMMON_REFCOUNTOBJECT_H_
end_define
begin_include
include|#
directive|include
file|<cstddef>
end_include
begin_define
DECL|macro|GL_APICALL
define|#
directive|define
name|GL_APICALL
end_define
begin_include
include|#
directive|include
file|<GLES2/gl2.h>
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_decl_stmt
name|class
name|RefCountObject
block|{
name|public
label|:
name|explicit
name|RefCountObject
parameter_list|(
name|GLuint
name|id
parameter_list|)
function_decl|;
name|virtual
operator|~
name|RefCountObject
argument_list|()
expr_stmt|;
name|virtual
name|void
name|addRef
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|void
name|release
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|id
argument_list|()
specifier|const
block|{
return|return
name|mId
return|;
block|}
name|private
label|:
name|GLuint
name|mId
decl_stmt|;
name|mutable
name|std
operator|::
name|size_t
name|mRefCount
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|RefCountObjectBindingPointer
block|{
name|protected
label|:
name|RefCountObjectBindingPointer
argument_list|()
operator|:
name|mObject
argument_list|(
argument|NULL
argument_list|)
block|{ }
operator|~
name|RefCountObjectBindingPointer
argument_list|()
block|{
name|ASSERT
argument_list|(
name|mObject
operator|==
name|NULL
argument_list|)
block|; }
comment|// Objects have to be released before the resource manager is destroyed, so they must be explicitly cleaned up.
name|void
name|set
argument_list|(
name|RefCountObject
operator|*
name|newObject
argument_list|)
expr_stmt|;
name|RefCountObject
operator|*
name|get
argument_list|()
specifier|const
block|{
return|return
name|mObject
return|;
block|}
name|public
label|:
name|GLuint
name|id
argument_list|()
specifier|const
block|{
return|return
operator|(
name|mObject
operator|!=
name|NULL
operator|)
operator|?
name|mObject
operator|->
name|id
argument_list|()
operator|:
literal|0
return|;
block|}
name|bool
name|operator
operator|!
operator|(
operator|)
specifier|const
block|{
return|return
operator|(
name|get
argument_list|()
operator|==
name|NULL
operator|)
return|;
block|}
name|private
label|:
name|RefCountObject
modifier|*
name|mObject
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|ObjectType
operator|>
name|class
name|BindingPointer
operator|:
name|public
name|RefCountObjectBindingPointer
block|{
name|public
operator|:
name|void
name|set
argument_list|(
argument|ObjectType *newObject
argument_list|)
block|{
name|RefCountObjectBindingPointer
operator|::
name|set
argument_list|(
name|newObject
argument_list|)
block|; }
name|ObjectType
operator|*
name|get
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|ObjectType
operator|*
operator|>
operator|(
name|RefCountObjectBindingPointer
operator|::
name|get
argument_list|()
operator|)
return|;
block|}
name|ObjectType
operator|*
name|operator
operator|->
expr|(
end_expr_stmt
begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|get
argument_list|()
return|;
block|}
end_expr_stmt
begin_endif
unit|};
endif|#
directive|endif
end_endif
begin_comment
comment|// COMMON_REFCOUNTOBJECT_H_
end_comment
end_unit
