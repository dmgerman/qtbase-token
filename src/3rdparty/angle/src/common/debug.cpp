begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// debug.cpp: Debugging utilities.
end_comment
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"common/platform.h"
end_include
begin_include
include|#
directive|include
file|<stdarg.h>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|<fstream>
end_include
begin_include
include|#
directive|include
file|<cstdio>
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_PERF
argument_list|)
DECL|typedef|PerfOutputFunction
typedef|typedef
name|void
function_decl|(
name|WINAPI
modifier|*
name|PerfOutputFunction
function_decl|)
parameter_list|(
name|D3DCOLOR
parameter_list|,
name|LPCWSTR
parameter_list|)
function_decl|;
else|#
directive|else
typedef|typedef
name|void
function_decl|(
modifier|*
name|PerfOutputFunction
function_decl|)
parameter_list|(
name|unsigned
name|int
parameter_list|,
specifier|const
name|wchar_t
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
DECL|function|output
specifier|static
name|void
name|output
parameter_list|(
name|bool
name|traceFileDebugOnly
parameter_list|,
name|PerfOutputFunction
name|perfFunc
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|va_list
name|vararg
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_PERF
argument_list|)
operator|||
name|defined
argument_list|(
name|ANGLE_ENABLE_TRACE
argument_list|)
specifier|static
name|std
operator|::
name|vector
argument_list|<
name|char
argument_list|>
name|asciiMessageBuffer
argument_list|(
literal|512
argument_list|)
decl_stmt|;
comment|// Attempt to just print to the current buffer
name|int
name|len
init|=
name|vsnprintf
argument_list|(
operator|&
name|asciiMessageBuffer
index|[
literal|0
index|]
argument_list|,
name|asciiMessageBuffer
operator|.
name|size
argument_list|()
argument_list|,
name|format
argument_list|,
name|vararg
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|len
argument_list|)
operator|>=
name|asciiMessageBuffer
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Buffer was not large enough, calculate the required size and resize the buffer
name|len
operator|=
name|vsnprintf
argument_list|(
name|NULL
argument_list|,
literal|0
argument_list|,
name|format
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
name|asciiMessageBuffer
operator|.
name|resize
argument_list|(
name|len
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Print again
name|vsnprintf
argument_list|(
operator|&
name|asciiMessageBuffer
index|[
literal|0
index|]
argument_list|,
name|asciiMessageBuffer
operator|.
name|size
argument_list|()
argument_list|,
name|format
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
block|}
comment|// NULL terminate the buffer to be safe
name|asciiMessageBuffer
index|[
name|len
index|]
operator|=
literal|'\0'
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_PERF
argument_list|)
if|if
condition|(
name|perfActive
argument_list|()
condition|)
block|{
comment|// The perf function only accepts wide strings, widen the ascii message
specifier|static
name|std
operator|::
name|wstring
name|wideMessage
decl_stmt|;
if|if
condition|(
name|wideMessage
operator|.
name|capacity
argument_list|()
operator|<
name|asciiMessageBuffer
operator|.
name|size
argument_list|()
condition|)
block|{
name|wideMessage
operator|.
name|reserve
argument_list|(
name|asciiMessageBuffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|wideMessage
operator|.
name|assign
argument_list|(
name|asciiMessageBuffer
operator|.
name|begin
argument_list|()
argument_list|,
name|asciiMessageBuffer
operator|.
name|begin
argument_list|()
operator|+
name|len
argument_list|)
expr_stmt|;
name|perfFunc
argument_list|(
literal|0
argument_list|,
name|wideMessage
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// ANGLE_ENABLE_PERF
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_TRACE
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|NDEBUG
argument_list|)
if|if
condition|(
name|traceFileDebugOnly
condition|)
block|{
return|return;
block|}
endif|#
directive|endif
comment|// NDEBUG
specifier|static
name|std
operator|::
name|ofstream
name|file
argument_list|(
name|TRACE_OUTPUT_FILE
argument_list|,
name|std
operator|::
name|ofstream
operator|::
name|app
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
condition|)
block|{
name|file
operator|.
name|write
argument_list|(
operator|&
name|asciiMessageBuffer
index|[
literal|0
index|]
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|file
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|// ANGLE_ENABLE_TRACE
block|}
DECL|function|trace
name|void
name|trace
parameter_list|(
name|bool
name|traceFileDebugOnly
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|vararg
decl_stmt|;
name|va_start
argument_list|(
name|vararg
argument_list|,
name|format
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_PERF
argument_list|)
name|output
argument_list|(
name|traceFileDebugOnly
argument_list|,
name|D3DPERF_SetMarker
argument_list|,
name|format
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
else|#
directive|else
name|output
argument_list|(
name|traceFileDebugOnly
argument_list|,
name|NULL
argument_list|,
name|format
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|va_end
argument_list|(
name|vararg
argument_list|)
expr_stmt|;
block|}
DECL|function|perfActive
name|bool
name|perfActive
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_PERF
argument_list|)
specifier|static
name|bool
name|active
init|=
name|D3DPERF_GetStatus
argument_list|()
operator|!=
literal|0
decl_stmt|;
return|return
name|active
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
DECL|function|ScopedPerfEventHelper
name|ScopedPerfEventHelper
operator|::
name|ScopedPerfEventHelper
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_PERF
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_ENABLE_TRACE
argument_list|)
if|if
condition|(
operator|!
name|perfActive
argument_list|()
condition|)
block|{
return|return;
block|}
endif|#
directive|endif
comment|// !ANGLE_ENABLE_TRACE
name|va_list
name|vararg
decl_stmt|;
name|va_start
argument_list|(
name|vararg
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|output
argument_list|(
literal|true
argument_list|,
cast|reinterpret_cast
argument_list|<
name|PerfOutputFunction
argument_list|>
argument_list|(
name|D3DPERF_BeginEvent
argument_list|)
argument_list|,
name|format
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|vararg
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// ANGLE_ENABLE_PERF
block|}
DECL|function|~ScopedPerfEventHelper
name|ScopedPerfEventHelper
operator|::
name|~
name|ScopedPerfEventHelper
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_PERF
argument_list|)
if|if
condition|(
name|perfActive
argument_list|()
condition|)
block|{
name|D3DPERF_EndEvent
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
block|}
end_namespace
end_unit
