begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// debug.cpp: Debugging utilities.
end_comment
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"common/platform.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|<stdarg.h>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|<fstream>
end_include
begin_include
include|#
directive|include
file|<cstdio>
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
namespace|namespace
block|{
DECL|enum|DebugTraceOutputType
enum|enum
name|DebugTraceOutputType
block|{
DECL|enumerator|DebugTraceOutputTypeNone
name|DebugTraceOutputTypeNone
block|,
DECL|enumerator|DebugTraceOutputTypeSetMarker
name|DebugTraceOutputTypeSetMarker
block|,
DECL|enumerator|DebugTraceOutputTypeBeginEvent
name|DebugTraceOutputTypeBeginEvent
block|}
enum|;
DECL|member|g_debugAnnotator
name|DebugAnnotator
modifier|*
name|g_debugAnnotator
init|=
literal|nullptr
decl_stmt|;
DECL|function|output
name|void
name|output
parameter_list|(
name|bool
name|traceInDebugOnly
parameter_list|,
name|MessageType
name|messageType
parameter_list|,
name|DebugTraceOutputType
name|outputType
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|va_list
name|vararg
parameter_list|)
block|{
if|if
condition|(
name|DebugAnnotationsActive
argument_list|()
condition|)
block|{
specifier|static
name|std
operator|::
name|vector
argument_list|<
name|char
argument_list|>
name|buffer
argument_list|(
literal|512
argument_list|)
decl_stmt|;
name|size_t
name|len
init|=
name|FormatStringIntoVector
argument_list|(
name|format
argument_list|,
name|vararg
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|std
operator|::
name|wstring
name|formattedWideMessage
argument_list|(
name|buffer
operator|.
name|begin
argument_list|()
argument_list|,
name|buffer
operator|.
name|begin
argument_list|()
operator|+
name|len
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|g_debugAnnotator
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|outputType
condition|)
block|{
case|case
name|DebugTraceOutputTypeNone
case|:
break|break;
case|case
name|DebugTraceOutputTypeBeginEvent
case|:
name|g_debugAnnotator
operator|->
name|beginEvent
argument_list|(
name|formattedWideMessage
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DebugTraceOutputTypeSetMarker
case|:
name|g_debugAnnotator
operator|->
name|setMarker
argument_list|(
name|formattedWideMessage
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|std
operator|::
name|string
name|formattedMessage
decl_stmt|;
name|UNUSED_VARIABLE
argument_list|(
name|formattedMessage
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|NDEBUG
argument_list|)
operator|&&
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
if|if
condition|(
name|messageType
operator|==
name|MESSAGE_ERR
condition|)
block|{
if|if
condition|(
name|formattedMessage
operator|.
name|empty
argument_list|()
condition|)
block|{
name|formattedMessage
operator|=
name|FormatString
argument_list|(
name|format
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
block|}
name|OutputDebugStringA
argument_list|(
name|formattedMessage
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_DEBUG_TRACE
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|NDEBUG
argument_list|)
if|if
condition|(
name|traceInDebugOnly
condition|)
block|{
return|return;
block|}
endif|#
directive|endif
comment|// NDEBUG
if|if
condition|(
name|formattedMessage
operator|.
name|empty
argument_list|()
condition|)
block|{
name|formattedMessage
operator|=
name|FormatString
argument_list|(
name|format
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
block|}
specifier|static
name|std
operator|::
name|ofstream
name|file
argument_list|(
name|TRACE_OUTPUT_FILE
argument_list|,
name|std
operator|::
name|ofstream
operator|::
name|app
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
condition|)
block|{
name|file
operator|.
name|write
argument_list|(
name|formattedMessage
operator|.
name|c_str
argument_list|()
argument_list|,
name|formattedMessage
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_DEBUG_TRACE_TO_DEBUGGER
argument_list|)
name|OutputDebugStringA
argument_list|(
name|formattedMessage
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// ANGLE_ENABLE_DEBUG_TRACE_TO_DEBUGGER
endif|#
directive|endif
comment|// ANGLE_ENABLE_DEBUG_TRACE
block|}
block|}
comment|// namespace
DECL|function|DebugAnnotationsActive
name|bool
name|DebugAnnotationsActive
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_DEBUG_ANNOTATIONS
argument_list|)
return|return
name|g_debugAnnotator
operator|!=
literal|nullptr
operator|&&
name|g_debugAnnotator
operator|->
name|getStatus
argument_list|()
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
DECL|function|InitializeDebugAnnotations
name|void
name|InitializeDebugAnnotations
parameter_list|(
name|DebugAnnotator
modifier|*
name|debugAnnotator
parameter_list|)
block|{
name|UninitializeDebugAnnotations
argument_list|()
expr_stmt|;
name|g_debugAnnotator
operator|=
name|debugAnnotator
expr_stmt|;
block|}
DECL|function|UninitializeDebugAnnotations
name|void
name|UninitializeDebugAnnotations
parameter_list|()
block|{
comment|// Pointer is not managed.
name|g_debugAnnotator
operator|=
literal|nullptr
expr_stmt|;
block|}
DECL|function|trace
name|void
name|trace
parameter_list|(
name|bool
name|traceInDebugOnly
parameter_list|,
name|MessageType
name|messageType
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|vararg
decl_stmt|;
name|va_start
argument_list|(
name|vararg
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|output
argument_list|(
name|traceInDebugOnly
argument_list|,
name|messageType
argument_list|,
name|DebugTraceOutputTypeSetMarker
argument_list|,
name|format
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|vararg
argument_list|)
expr_stmt|;
block|}
DECL|function|ScopedPerfEventHelper
name|ScopedPerfEventHelper
operator|::
name|ScopedPerfEventHelper
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_ENABLE_DEBUG_TRACE
argument_list|)
if|if
condition|(
operator|!
name|DebugAnnotationsActive
argument_list|()
condition|)
block|{
return|return;
block|}
endif|#
directive|endif
comment|// !ANGLE_ENABLE_DEBUG_TRACE
name|va_list
name|vararg
decl_stmt|;
name|va_start
argument_list|(
name|vararg
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|output
argument_list|(
literal|true
argument_list|,
name|MESSAGE_EVENT
argument_list|,
name|DebugTraceOutputTypeBeginEvent
argument_list|,
name|format
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|vararg
argument_list|)
expr_stmt|;
block|}
DECL|function|~ScopedPerfEventHelper
name|ScopedPerfEventHelper
operator|::
name|~
name|ScopedPerfEventHelper
parameter_list|()
block|{
if|if
condition|(
name|DebugAnnotationsActive
argument_list|()
condition|)
block|{
name|g_debugAnnotator
operator|->
name|endEvent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_namespace
end_unit
