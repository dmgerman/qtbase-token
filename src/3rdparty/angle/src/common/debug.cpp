begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// debug.cpp: Debugging utilities.
end_comment
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"common/platform.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|<stdarg.h>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|<fstream>
end_include
begin_include
include|#
directive|include
file|<cstdio>
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_DEBUG_ANNOTATIONS
argument_list|)
comment|// Wraps the D3D9/D3D11 debug annotation functions.
DECL|class|DebugAnnotationWrapper
class|class
name|DebugAnnotationWrapper
block|{
public|public:
DECL|function|DebugAnnotationWrapper
name|DebugAnnotationWrapper
parameter_list|()
block|{ }
empty_stmt|;
DECL|function|~DebugAnnotationWrapper
specifier|virtual
name|~
name|DebugAnnotationWrapper
parameter_list|()
block|{ }
empty_stmt|;
specifier|virtual
name|void
name|beginEvent
parameter_list|(
specifier|const
name|std
operator|::
name|wstring
modifier|&
name|eventName
parameter_list|)
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|void
name|endEvent
parameter_list|()
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|void
name|setMarker
parameter_list|(
specifier|const
name|std
operator|::
name|wstring
modifier|&
name|markerName
parameter_list|)
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|bool
name|getStatus
parameter_list|()
function_decl|=
literal|0
function_decl|;
block|}
class|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
DECL|class|D3D9DebugAnnotationWrapper
class|class
name|D3D9DebugAnnotationWrapper
super|:
specifier|public
name|DebugAnnotationWrapper
block|{
public|public:
DECL|function|beginEvent
name|void
name|beginEvent
parameter_list|(
specifier|const
name|std
operator|::
name|wstring
modifier|&
name|eventName
parameter_list|)
block|{
name|D3DPERF_BeginEvent
argument_list|(
literal|0
argument_list|,
name|eventName
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|endEvent
name|void
name|endEvent
parameter_list|()
block|{
name|D3DPERF_EndEvent
argument_list|()
expr_stmt|;
block|}
DECL|function|setMarker
name|void
name|setMarker
parameter_list|(
specifier|const
name|std
operator|::
name|wstring
modifier|&
name|markerName
parameter_list|)
block|{
name|D3DPERF_SetMarker
argument_list|(
literal|0
argument_list|,
name|markerName
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|getStatus
name|bool
name|getStatus
parameter_list|()
block|{
return|return
operator|!
operator|!
name|D3DPERF_GetStatus
argument_list|()
return|;
block|}
block|}
class|;
endif|#
directive|endif
comment|// ANGLE_ENABLE_D3D9
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
DECL|class|D3D11DebugAnnotationWrapper
class|class
name|D3D11DebugAnnotationWrapper
super|:
specifier|public
name|DebugAnnotationWrapper
block|{
public|public:
DECL|function|D3D11DebugAnnotationWrapper
name|D3D11DebugAnnotationWrapper
parameter_list|()
member_init_list|:
name|mInitialized
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mD3d11Module
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mUserDefinedAnnotation
argument_list|(
name|NULL
argument_list|)
block|{
comment|// D3D11 devices can't be created during DllMain.
comment|// We defer device creation until the object is actually used.
block|}
DECL|function|~D3D11DebugAnnotationWrapper
name|~
name|D3D11DebugAnnotationWrapper
parameter_list|()
block|{
if|if
condition|(
name|mInitialized
condition|)
block|{
name|SafeRelease
argument_list|(
name|mUserDefinedAnnotation
argument_list|)
expr_stmt|;
name|FreeLibrary
argument_list|(
name|mD3d11Module
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|beginEvent
specifier|virtual
name|void
name|beginEvent
parameter_list|(
specifier|const
name|std
operator|::
name|wstring
modifier|&
name|eventName
parameter_list|)
block|{
name|initializeDevice
argument_list|()
expr_stmt|;
name|mUserDefinedAnnotation
operator|->
name|BeginEvent
argument_list|(
name|eventName
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|endEvent
specifier|virtual
name|void
name|endEvent
parameter_list|()
block|{
name|initializeDevice
argument_list|()
expr_stmt|;
name|mUserDefinedAnnotation
operator|->
name|EndEvent
argument_list|()
expr_stmt|;
block|}
DECL|function|setMarker
specifier|virtual
name|void
name|setMarker
parameter_list|(
specifier|const
name|std
operator|::
name|wstring
modifier|&
name|markerName
parameter_list|)
block|{
name|initializeDevice
argument_list|()
expr_stmt|;
name|mUserDefinedAnnotation
operator|->
name|SetMarker
argument_list|(
name|markerName
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|getStatus
specifier|virtual
name|bool
name|getStatus
parameter_list|()
block|{
comment|// ID3DUserDefinedAnnotation::GetStatus doesn't work with the Graphics Diagnostics tools in Visual Studio 2013.
if|#
directive|if
name|defined
argument_list|(
name|_DEBUG
argument_list|)
operator|&&
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
comment|// In the Windows Store, we can use IDXGraphicsAnalysis. The call to GetDebugInterface1 only succeeds if the app is under capture.
comment|// This should only be called in DEBUG mode.
comment|// If an app links against DXGIGetDebugInterface1 in release mode then it will fail Windows Store ingestion checks.
name|IDXGraphicsAnalysis
modifier|*
name|graphicsAnalysis
decl_stmt|;
name|DXGIGetDebugInterface1
argument_list|(
literal|0
argument_list|,
name|IID_PPV_ARGS
argument_list|(
operator|&
name|graphicsAnalysis
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|underCapture
init|=
operator|(
name|graphicsAnalysis
operator|!=
name|NULL
operator|)
decl_stmt|;
name|SafeRelease
argument_list|(
name|graphicsAnalysis
argument_list|)
expr_stmt|;
return|return
name|underCapture
return|;
endif|#
directive|endif
comment|// Otherwise, we have to return true here.
return|return
literal|true
return|;
block|}
protected|protected:
DECL|function|initializeDevice
name|void
name|initializeDevice
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mInitialized
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
name|mD3d11Module
operator|=
name|LoadLibrary
argument_list|(
name|TEXT
argument_list|(
literal|"d3d11.dll"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|mD3d11Module
argument_list|)
expr_stmt|;
name|PFN_D3D11_CREATE_DEVICE
name|D3D11CreateDevice
init|=
operator|(
name|PFN_D3D11_CREATE_DEVICE
operator|)
name|GetProcAddress
argument_list|(
name|mD3d11Module
argument_list|,
literal|"D3D11CreateDevice"
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|D3D11CreateDevice
operator|!=
name|NULL
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// !ANGLE_ENABLE_WINDOWS_STORE
name|ID3D11Device
modifier|*
name|device
init|=
name|NULL
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|context
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|hr
init|=
name|E_FAIL
decl_stmt|;
comment|// Create a D3D_DRIVER_TYPE_NULL device, which is much cheaper than other types of device.
name|hr
operator|=
name|D3D11CreateDevice
argument_list|(
name|NULL
argument_list|,
name|D3D_DRIVER_TYPE_NULL
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|D3D11_SDK_VERSION
argument_list|,
operator|&
name|device
argument_list|,
name|NULL
argument_list|,
operator|&
name|context
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|context
operator|->
name|QueryInterface
argument_list|(
name|__uuidof
argument_list|(
name|mUserDefinedAnnotation
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|mUserDefinedAnnotation
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|&&
name|mUserDefinedAnnotation
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|device
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|mInitialized
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|member|mInitialized
name|bool
name|mInitialized
decl_stmt|;
DECL|member|mD3d11Module
name|HMODULE
name|mD3d11Module
decl_stmt|;
DECL|member|mUserDefinedAnnotation
name|ID3DUserDefinedAnnotation
modifier|*
name|mUserDefinedAnnotation
decl_stmt|;
block|}
class|;
endif|#
directive|endif
comment|// ANGLE_ENABLE_D3D11
DECL|member|g_DebugAnnotationWrapper
specifier|static
name|DebugAnnotationWrapper
modifier|*
name|g_DebugAnnotationWrapper
init|=
name|NULL
decl_stmt|;
DECL|function|InitializeDebugAnnotations
name|void
name|InitializeDebugAnnotations
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
name|g_DebugAnnotationWrapper
operator|=
operator|new
name|D3D9DebugAnnotationWrapper
argument_list|()
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
comment|// If the project uses D3D9 then we can use the D3D9 debug annotations, even with the D3D11 renderer.
comment|// However, if D3D9 is unavailable (e.g. in Windows Store), then we use D3D11 debug annotations.
comment|// The D3D11 debug annotations are methods on ID3DUserDefinedAnnotation, which is implemented by the DeviceContext.
comment|// This doesn't have to be the same DeviceContext that the renderer uses, though.
name|g_DebugAnnotationWrapper
operator|=
operator|new
name|D3D11DebugAnnotationWrapper
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|UninitializeDebugAnnotations
name|void
name|UninitializeDebugAnnotations
parameter_list|()
block|{
if|if
condition|(
name|g_DebugAnnotationWrapper
operator|!=
name|NULL
condition|)
block|{
name|SafeDelete
argument_list|(
name|g_DebugAnnotationWrapper
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// ANGLE_ENABLE_DEBUG_ANNOTATIONS
DECL|enum|DebugTraceOutputType
enum|enum
name|DebugTraceOutputType
block|{
DECL|enumerator|DebugTraceOutputTypeNone
name|DebugTraceOutputTypeNone
block|,
DECL|enumerator|DebugTraceOutputTypeSetMarker
name|DebugTraceOutputTypeSetMarker
block|,
DECL|enumerator|DebugTraceOutputTypeBeginEvent
name|DebugTraceOutputTypeBeginEvent
block|}
enum|;
DECL|function|output
specifier|static
name|void
name|output
parameter_list|(
name|bool
name|traceInDebugOnly
parameter_list|,
name|DebugTraceOutputType
name|outputType
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|va_list
name|vararg
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_DEBUG_ANNOTATIONS
argument_list|)
specifier|static
name|std
operator|::
name|vector
argument_list|<
name|char
argument_list|>
name|buffer
argument_list|(
literal|512
argument_list|)
decl_stmt|;
if|if
condition|(
name|perfActive
argument_list|()
condition|)
block|{
name|size_t
name|len
init|=
name|FormatStringIntoVector
argument_list|(
name|format
argument_list|,
name|vararg
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|std
operator|::
name|wstring
name|formattedWideMessage
argument_list|(
name|buffer
operator|.
name|begin
argument_list|()
argument_list|,
name|buffer
operator|.
name|begin
argument_list|()
operator|+
name|len
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|outputType
condition|)
block|{
case|case
name|DebugTraceOutputTypeNone
case|:
break|break;
case|case
name|DebugTraceOutputTypeBeginEvent
case|:
name|g_DebugAnnotationWrapper
operator|->
name|beginEvent
argument_list|(
name|formattedWideMessage
argument_list|)
expr_stmt|;
break|break;
case|case
name|DebugTraceOutputTypeSetMarker
case|:
name|g_DebugAnnotationWrapper
operator|->
name|setMarker
argument_list|(
name|formattedWideMessage
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
endif|#
directive|endif
comment|// ANGLE_ENABLE_DEBUG_ANNOTATIONS
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_DEBUG_TRACE
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|NDEBUG
argument_list|)
if|if
condition|(
name|traceInDebugOnly
condition|)
block|{
return|return;
block|}
endif|#
directive|endif
comment|// NDEBUG
name|std
operator|::
name|string
name|formattedMessage
init|=
name|FormatString
argument_list|(
name|format
argument_list|,
name|vararg
argument_list|)
decl_stmt|;
specifier|static
name|std
operator|::
name|ofstream
name|file
argument_list|(
name|TRACE_OUTPUT_FILE
argument_list|,
name|std
operator|::
name|ofstream
operator|::
name|app
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
condition|)
block|{
name|file
operator|.
name|write
argument_list|(
name|formattedMessage
operator|.
name|c_str
argument_list|()
argument_list|,
name|formattedMessage
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_DEBUG_TRACE_TO_DEBUGGER
argument_list|)
name|OutputDebugStringA
argument_list|(
name|formattedMessage
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// ANGLE_ENABLE_DEBUG_TRACE_TO_DEBUGGER
endif|#
directive|endif
comment|// ANGLE_ENABLE_DEBUG_TRACE
block|}
DECL|function|trace
name|void
name|trace
parameter_list|(
name|bool
name|traceInDebugOnly
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|vararg
decl_stmt|;
name|va_start
argument_list|(
name|vararg
argument_list|,
name|format
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_DEBUG_ANNOTATIONS
argument_list|)
name|output
argument_list|(
name|traceInDebugOnly
argument_list|,
name|DebugTraceOutputTypeSetMarker
argument_list|,
name|format
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
else|#
directive|else
name|output
argument_list|(
name|traceInDebugOnly
argument_list|,
name|DebugTraceOutputTypeNone
argument_list|,
name|format
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|va_end
argument_list|(
name|vararg
argument_list|)
expr_stmt|;
block|}
DECL|function|perfActive
name|bool
name|perfActive
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_DEBUG_ANNOTATIONS
argument_list|)
specifier|static
name|bool
name|active
init|=
name|g_DebugAnnotationWrapper
operator|->
name|getStatus
argument_list|()
decl_stmt|;
return|return
name|active
return|;
else|#
directive|else
return|return
literal|false
return|;
endif|#
directive|endif
block|}
DECL|function|ScopedPerfEventHelper
name|ScopedPerfEventHelper
operator|::
name|ScopedPerfEventHelper
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_ENABLE_DEBUG_TRACE
argument_list|)
if|if
condition|(
operator|!
name|perfActive
argument_list|()
condition|)
block|{
return|return;
block|}
endif|#
directive|endif
comment|// !ANGLE_ENABLE_DEBUG_TRACE
name|va_list
name|vararg
decl_stmt|;
name|va_start
argument_list|(
name|vararg
argument_list|,
name|format
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_DEBUG_ANNOTATIONS
argument_list|)
name|output
argument_list|(
literal|true
argument_list|,
name|DebugTraceOutputTypeBeginEvent
argument_list|,
name|format
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
else|#
directive|else
name|output
argument_list|(
literal|true
argument_list|,
name|DebugTraceOutputTypeNone
argument_list|,
name|format
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// ANGLE_ENABLE_DEBUG_ANNOTATIONS
name|va_end
argument_list|(
name|vararg
argument_list|)
expr_stmt|;
block|}
DECL|function|~ScopedPerfEventHelper
name|ScopedPerfEventHelper
operator|::
name|~
name|ScopedPerfEventHelper
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_DEBUG_ANNOTATIONS
argument_list|)
if|if
condition|(
name|perfActive
argument_list|()
condition|)
block|{
name|g_DebugAnnotationWrapper
operator|->
name|endEvent
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
block|}
end_namespace
end_unit
