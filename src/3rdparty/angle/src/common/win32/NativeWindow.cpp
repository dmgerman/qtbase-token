begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// NativeWindow.cpp: Handler for managing HWND native window types.
end_comment
begin_include
include|#
directive|include
file|"common/NativeWindow.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|IsValidEGLNativeWindowType
name|bool
name|IsValidEGLNativeWindowType
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
block|{
return|return
operator|(
name|IsWindow
argument_list|(
name|window
argument_list|)
operator|==
name|TRUE
operator|)
return|;
block|}
DECL|function|NativeWindow
name|NativeWindow
operator|::
name|NativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|,
name|EGLNativeDisplayType
name|display
parameter_list|)
member_init_list|:
name|mWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|mDisplay
argument_list|(
name|display
argument_list|)
block|{ }
DECL|function|initialize
name|bool
name|NativeWindow
operator|::
name|initialize
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|function|getClientRect
name|bool
name|NativeWindow
operator|::
name|getClientRect
parameter_list|(
name|LPRECT
name|rect
parameter_list|)
block|{
return|return
name|GetClientRect
argument_list|(
name|mWindow
argument_list|,
name|rect
argument_list|)
operator|==
name|TRUE
return|;
block|}
DECL|function|isIconic
name|bool
name|NativeWindow
operator|::
name|isIconic
parameter_list|()
block|{
return|return
name|IsIconic
argument_list|(
name|mWindow
argument_list|)
operator|==
name|TRUE
return|;
block|}
DECL|function|createSwapChain
name|HRESULT
name|NativeWindow
operator|::
name|createSwapChain
parameter_list|(
name|ID3D11Device
modifier|*
name|device
parameter_list|,
name|DXGIFactory
modifier|*
name|factory
parameter_list|,
name|DXGI_FORMAT
name|format
parameter_list|,
name|unsigned
name|int
name|width
parameter_list|,
name|unsigned
name|int
name|height
parameter_list|,
name|DXGISwapChain
modifier|*
modifier|*
name|swapChain
parameter_list|)
block|{
if|if
condition|(
name|device
operator|==
name|NULL
operator|||
name|factory
operator|==
name|NULL
operator|||
name|swapChain
operator|==
name|NULL
operator|||
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
condition|)
block|{
return|return
name|E_INVALIDARG
return|;
block|}
name|DXGI_SWAP_CHAIN_DESC
name|swapChainDesc
init|=
block|{
literal|0
block|}
decl_stmt|;
name|swapChainDesc
operator|.
name|BufferCount
operator|=
literal|1
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferDesc
operator|.
name|Format
operator|=
name|format
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferDesc
operator|.
name|Width
operator|=
name|width
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferDesc
operator|.
name|Height
operator|=
name|height
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferDesc
operator|.
name|Scaling
operator|=
name|DXGI_MODE_SCALING_UNSPECIFIED
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferDesc
operator|.
name|ScanlineOrdering
operator|=
name|DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferDesc
operator|.
name|RefreshRate
operator|.
name|Numerator
operator|=
literal|0
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferDesc
operator|.
name|RefreshRate
operator|.
name|Denominator
operator|=
literal|1
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferUsage
operator|=
name|DXGI_USAGE_RENDER_TARGET_OUTPUT
operator||
name|DXGI_USAGE_BACK_BUFFER
expr_stmt|;
name|swapChainDesc
operator|.
name|Flags
operator|=
literal|0
expr_stmt|;
name|swapChainDesc
operator|.
name|OutputWindow
operator|=
name|mWindow
expr_stmt|;
name|swapChainDesc
operator|.
name|SampleDesc
operator|.
name|Count
operator|=
literal|1
expr_stmt|;
name|swapChainDesc
operator|.
name|SampleDesc
operator|.
name|Quality
operator|=
literal|0
expr_stmt|;
name|swapChainDesc
operator|.
name|Windowed
operator|=
name|TRUE
expr_stmt|;
name|swapChainDesc
operator|.
name|SwapEffect
operator|=
name|DXGI_SWAP_EFFECT_DISCARD
expr_stmt|;
return|return
name|factory
operator|->
name|CreateSwapChain
argument_list|(
name|device
argument_list|,
operator|&
name|swapChainDesc
argument_list|,
name|swapChain
argument_list|)
return|;
block|}
block|}
end_namespace
end_unit
