begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// BitSetIterator:
end_comment
begin_comment
comment|//   A helper class to quickly bitscan bitsets for set bits.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMMON_BITSETITERATOR_H_
end_ifndef
begin_define
DECL|macro|COMMON_BITSETITERATOR_H_
define|#
directive|define
name|COMMON_BITSETITERATOR_H_
end_define
begin_include
include|#
directive|include
file|<stdint.h>
end_include
begin_include
include|#
directive|include
file|<bitset>
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"common/platform.h"
end_include
begin_decl_stmt
name|namespace
name|angle
block|{
name|template
operator|<
name|size_t
name|N
operator|>
name|class
name|BitSetIterator
name|final
block|{
name|public
operator|:
name|BitSetIterator
argument_list|(
specifier|const
name|std
operator|::
name|bitset
operator|<
name|N
operator|>
operator|&
name|bitset
argument_list|)
block|;
name|BitSetIterator
argument_list|(
specifier|const
name|BitSetIterator
operator|&
name|other
argument_list|)
block|;
name|BitSetIterator
operator|&
name|operator
operator|=
operator|(
specifier|const
name|BitSetIterator
operator|&
name|other
operator|)
block|;
name|class
name|Iterator
name|final
block|{
name|public
operator|:
name|Iterator
argument_list|(
specifier|const
name|std
operator|::
name|bitset
operator|<
name|N
operator|>
operator|&
name|bits
argument_list|)
block|;
name|Iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Iterator
operator|&
name|other
operator|)
specifier|const
block|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Iterator
operator|&
name|other
operator|)
specifier|const
block|;
name|unsigned
name|long
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|mCurrentBit
return|;
block|}
name|private
operator|:
name|unsigned
name|long
name|getNextBit
argument_list|()
block|;
specifier|static
specifier|const
name|size_t
name|BitsPerWord
operator|=
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
operator|*
literal|8
block|;
name|std
operator|::
name|bitset
operator|<
name|N
operator|>
name|mBits
block|;
name|unsigned
name|long
name|mCurrentBit
block|;
name|unsigned
name|long
name|mOffset
block|;     }
block|;
name|Iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Iterator
argument_list|(
name|mBits
argument_list|)
return|;
block|}
name|Iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Iterator
argument_list|(
name|std
operator|::
name|bitset
operator|<
name|N
operator|>
operator|(
literal|0
operator|)
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|std
operator|::
name|bitset
operator|<
name|N
operator|>
name|mBits
block|; }
expr_stmt|;
name|template
operator|<
name|size_t
name|N
operator|>
name|BitSetIterator
operator|<
name|N
operator|>
operator|::
name|BitSetIterator
argument_list|(
specifier|const
name|std
operator|::
name|bitset
operator|<
name|N
operator|>
operator|&
name|bitset
argument_list|)
operator|:
name|mBits
argument_list|(
argument|bitset
argument_list|)
block|{ }
name|template
operator|<
name|size_t
name|N
operator|>
name|BitSetIterator
operator|<
name|N
operator|>
operator|::
name|BitSetIterator
argument_list|(
specifier|const
name|BitSetIterator
operator|&
name|other
argument_list|)
operator|:
name|mBits
argument_list|(
argument|other.mBits
argument_list|)
block|{ }
name|template
operator|<
name|size_t
name|N
operator|>
name|BitSetIterator
operator|<
name|N
operator|>
operator|&
name|BitSetIterator
operator|<
name|N
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|BitSetIterator
operator|&
name|other
operator|)
block|{
name|mBits
operator|=
name|other
operator|.
name|mBits
block|;
return|return
operator|*
name|this
return|;
block|}
name|template
operator|<
name|size_t
name|N
operator|>
name|BitSetIterator
operator|<
name|N
operator|>
operator|::
name|Iterator
operator|::
name|Iterator
argument_list|(
specifier|const
name|std
operator|::
name|bitset
operator|<
name|N
operator|>
operator|&
name|bits
argument_list|)
operator|:
name|mBits
argument_list|(
name|bits
argument_list|)
operator|,
name|mCurrentBit
argument_list|(
literal|0
argument_list|)
operator|,
name|mOffset
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|bits
operator|.
name|any
argument_list|()
condition|)
block|{
name|mCurrentBit
operator|=
name|getNextBit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mOffset
operator|=
name|static_cast
operator|<
name|unsigned
name|long
operator|>
operator|(
name|rx
operator|::
name|roundUp
argument_list|(
name|N
argument_list|,
name|BitsPerWord
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
name|template
operator|<
name|size_t
name|N
operator|>
name|typename
name|BitSetIterator
operator|<
name|N
operator|>
operator|::
name|Iterator
operator|&
name|BitSetIterator
operator|<
name|N
operator|>
operator|::
name|Iterator
operator|::
name|operator
operator|++
operator|(
operator|)
block|{
name|ASSERT
argument_list|(
name|mBits
operator|.
name|any
argument_list|()
argument_list|)
block|;
name|mBits
operator|.
name|set
argument_list|(
name|mCurrentBit
operator|-
name|mOffset
argument_list|,
literal|0
argument_list|)
block|;
name|mCurrentBit
operator|=
name|getNextBit
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
specifier|inline
name|unsigned
name|long
name|ScanForward
parameter_list|(
name|unsigned
name|long
name|bits
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|bits
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINDOWS
argument_list|)
name|unsigned
name|long
name|firstBitIndex
init|=
literal|0ul
decl_stmt|;
name|unsigned
name|char
name|ret
init|=
name|_BitScanForward
argument_list|(
operator|&
name|firstBitIndex
argument_list|,
name|bits
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|ret
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|firstBitIndex
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_PLATFORM_POSIX
argument_list|)
return|return
name|static_cast
operator|<
name|unsigned
name|long
operator|>
operator|(
name|__builtin_ctzl
argument_list|(
name|bits
argument_list|)
operator|)
return|;
else|#
directive|else
error|#
directive|error
error|Please implement bit-scan-forward for your platform!
endif|#
directive|endif
block|}
name|template
operator|<
name|size_t
name|N
operator|>
name|bool
name|BitSetIterator
operator|<
name|N
operator|>
operator|::
name|Iterator
operator|::
name|operator
operator|==
operator|(
specifier|const
name|Iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|mOffset
operator|==
name|other
operator|.
name|mOffset
operator|&&
name|mBits
operator|==
name|other
operator|.
name|mBits
return|;
block|}
name|template
operator|<
name|size_t
name|N
operator|>
name|bool
name|BitSetIterator
operator|<
name|N
operator|>
operator|::
name|Iterator
operator|::
name|operator
operator|!=
operator|(
specifier|const
name|Iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|template
operator|<
name|size_t
name|N
operator|>
name|unsigned
name|long
name|BitSetIterator
operator|<
name|N
operator|>
operator|::
name|Iterator
operator|::
name|getNextBit
argument_list|()
block|{
specifier|static
name|std
operator|::
name|bitset
operator|<
name|N
operator|>
name|wordMask
argument_list|(
argument|std::numeric_limits<unsigned long>::max()
argument_list|)
block|;
while|while
condition|(
name|mOffset
operator|<
name|N
condition|)
block|{
name|unsigned
name|long
name|wordBits
init|=
operator|(
name|mBits
operator|&
name|wordMask
operator|)
operator|.
name|to_ulong
argument_list|()
decl_stmt|;
if|if
condition|(
name|wordBits
operator|!=
literal|0ul
condition|)
block|{
return|return
name|ScanForward
argument_list|(
name|wordBits
argument_list|)
operator|+
name|mOffset
return|;
block|}
name|mBits
operator|>>=
name|BitsPerWord
expr_stmt|;
name|mOffset
operator|+=
name|BitsPerWord
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|// Helper to avoid needing to specify the template parameter size
name|template
operator|<
name|size_t
name|N
operator|>
name|BitSetIterator
operator|<
name|N
operator|>
name|IterateBitSet
argument_list|(
argument|const std::bitset<N>&bitset
argument_list|)
block|{
return|return
name|BitSetIterator
operator|<
name|N
operator|>
operator|(
name|bitset
operator|)
return|;
block|}
block|}
end_decl_stmt
begin_comment
comment|// angle
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// COMMON_BITSETITERATOR_H_
end_comment
end_unit
