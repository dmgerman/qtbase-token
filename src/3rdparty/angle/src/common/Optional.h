begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Optional.h:
end_comment
begin_comment
comment|//   Represents a type that may be invalid, similar to std::optional.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMMON_OPTIONAL_H_
end_ifndef
begin_define
DECL|macro|COMMON_OPTIONAL_H_
define|#
directive|define
name|COMMON_OPTIONAL_H_
end_define
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
expr|struct
DECL|struct|Optional
name|Optional
block|{
DECL|function|Optional
name|Optional
argument_list|()
operator|:
name|mValid
argument_list|(
name|false
argument_list|)
block|,
name|mValue
argument_list|(
argument|T()
argument_list|)
block|{}
DECL|function|Optional
name|explicit
name|Optional
argument_list|(
specifier|const
name|T
operator|&
name|valueIn
argument_list|)
operator|:
name|mValid
argument_list|(
name|true
argument_list|)
block|,
name|mValue
argument_list|(
argument|valueIn
argument_list|)
block|{}
DECL|function|Optional
name|Optional
argument_list|(
specifier|const
name|Optional
operator|&
name|other
argument_list|)
operator|:
name|mValid
argument_list|(
name|other
operator|.
name|mValid
argument_list|)
block|,
name|mValue
argument_list|(
argument|other.mValue
argument_list|)
block|{}
DECL|member|operator
name|Optional
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Optional
operator|&
name|other
operator|)
block|{
name|this
operator|->
name|mValid
operator|=
name|other
operator|.
name|mValid
block|;
name|this
operator|->
name|mValue
operator|=
name|other
operator|.
name|mValue
block|;
return|return
operator|*
name|this
return|;
block|}
specifier|static
name|Optional
name|None
argument_list|()
block|{
return|return
name|Optional
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|bool
name|valid
argument_list|()
specifier|const
block|{
return|return
name|mValid
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|const
name|T
operator|&
name|value
argument_list|()
specifier|const
block|{
return|return
name|mValue
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Optional
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|(
operator|(
name|mValid
operator|==
name|other
operator|.
name|mValid
operator|)
operator|&&
operator|(
operator|!
name|mValid
operator|||
operator|(
name|mValue
operator|==
name|other
operator|.
name|mValue
operator|)
operator|)
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Optional
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|bool
name|mValid
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|mValue
name|T
name|mValue
decl_stmt|;
end_decl_stmt
begin_endif
unit|};
endif|#
directive|endif
end_endif
begin_comment
comment|// COMMON_OPTIONAL_H_
end_comment
end_unit
