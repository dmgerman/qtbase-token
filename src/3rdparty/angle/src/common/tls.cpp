begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// tls.cpp: Simple cross-platform interface for thread local storage.
end_comment
begin_include
include|#
directive|include
file|"common/tls.h"
end_include
begin_include
include|#
directive|include
file|<assert.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
end_if
begin_include
include|#
directive|include
file|<vector>
end_include
begin_decl_stmt
DECL|variable|tls
name|std
operator|::
name|vector
argument_list|<
name|void
modifier|*
argument_list|>
modifier|*
name|tls
init|=
literal|nullptr
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|freeIndices
name|std
operator|::
name|vector
argument_list|<
name|TLSIndex
argument_list|>
modifier|*
name|freeIndices
init|=
literal|nullptr
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|CreateTLSIndex
name|TLSIndex
name|CreateTLSIndex
parameter_list|()
block|{
name|TLSIndex
name|index
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
if|if
condition|(
operator|!
name|tls
condition|)
name|tls
operator|=
operator|new
name|std
operator|::
name|vector
argument_list|<
name|void
operator|*
argument_list|>
expr_stmt|;
if|if
condition|(
name|freeIndices
operator|&&
operator|!
name|freeIndices
operator|->
name|empty
argument_list|()
condition|)
block|{
name|index
operator|=
name|freeIndices
operator|->
name|back
argument_list|()
expr_stmt|;
name|freeIndices
operator|->
name|pop_back
argument_list|()
expr_stmt|;
return|return
name|index
return|;
block|}
else|else
block|{
name|tls
operator|->
name|push_back
argument_list|(
literal|nullptr
argument_list|)
expr_stmt|;
return|return
name|tls
operator|->
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINDOWS
argument_list|)
name|index
operator|=
name|TlsAlloc
argument_list|()
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_PLATFORM_POSIX
argument_list|)
comment|// Create global pool key
if|if
condition|(
operator|(
name|pthread_key_create
argument_list|(
operator|&
name|index
argument_list|,
name|NULL
argument_list|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|index
operator|=
name|TLS_INVALID_INDEX
expr_stmt|;
block|}
endif|#
directive|endif
name|assert
argument_list|(
name|index
operator|!=
name|TLS_INVALID_INDEX
operator|&&
literal|"CreateTLSIndex(): Unable to allocate Thread Local Storage"
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
end_function
begin_function
DECL|function|DestroyTLSIndex
name|bool
name|DestroyTLSIndex
parameter_list|(
name|TLSIndex
name|index
parameter_list|)
block|{
name|assert
argument_list|(
name|index
operator|!=
name|TLS_INVALID_INDEX
operator|&&
literal|"DestroyTLSIndex(): Invalid TLS Index"
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|TLS_INVALID_INDEX
condition|)
block|{
return|return
literal|false
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
if|if
condition|(
operator|!
name|freeIndices
condition|)
name|freeIndices
operator|=
operator|new
name|std
operator|::
name|vector
argument_list|<
name|TLSIndex
argument_list|>
expr_stmt|;
name|freeIndices
operator|->
name|push_back
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
elif|#
directive|elif
name|ANGLE_PLATFORM_WINDOWS
return|return
operator|(
name|TlsFree
argument_list|(
name|index
argument_list|)
operator|==
name|TRUE
operator|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_PLATFORM_POSIX
argument_list|)
return|return
operator|(
name|pthread_key_delete
argument_list|(
name|index
argument_list|)
operator|==
literal|0
operator|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|SetTLSValue
name|bool
name|SetTLSValue
parameter_list|(
name|TLSIndex
name|index
parameter_list|,
name|void
modifier|*
name|value
parameter_list|)
block|{
name|assert
argument_list|(
name|index
operator|!=
name|TLS_INVALID_INDEX
operator|&&
literal|"SetTLSValue(): Invalid TLS Index"
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
name|TLS_INVALID_INDEX
condition|)
block|{
return|return
literal|false
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
name|tls
operator|->
name|at
argument_list|(
name|index
argument_list|)
operator|=
name|value
expr_stmt|;
return|return
literal|true
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINDOWS
argument_list|)
return|return
operator|(
name|TlsSetValue
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
operator|==
name|TRUE
operator|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_PLATFORM_POSIX
argument_list|)
return|return
operator|(
name|pthread_setspecific
argument_list|(
name|index
argument_list|,
name|value
argument_list|)
operator|==
literal|0
operator|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|GetTLSValue
name|void
modifier|*
name|GetTLSValue
parameter_list|(
name|TLSIndex
name|index
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
comment|// Valid on WinRT, as Alloc handles the index creation
name|assert
argument_list|(
name|index
operator|!=
name|TLS_INVALID_INDEX
operator|&&
literal|"GetTLSValue(): Invalid TLS Index"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|index
operator|==
name|TLS_INVALID_INDEX
condition|)
block|{
return|return
name|NULL
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
return|return
name|tls
operator|->
name|at
argument_list|(
name|index
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINDOWS
argument_list|)
return|return
name|TlsGetValue
argument_list|(
name|index
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_PLATFORM_POSIX
argument_list|)
return|return
name|pthread_getspecific
argument_list|(
name|index
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
end_unit
