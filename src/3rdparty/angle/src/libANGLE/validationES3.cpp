begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// validationES3.cpp: Validation functions for OpenGL ES 3.0 entry point parameters
end_comment
begin_include
include|#
directive|include
file|"libANGLE/validationES3.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/validationES.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Context.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|struct|ES3FormatCombination
struct|struct
name|ES3FormatCombination
block|{
DECL|member|internalFormat
name|GLenum
name|internalFormat
decl_stmt|;
DECL|member|format
name|GLenum
name|format
decl_stmt|;
DECL|member|type
name|GLenum
name|type
decl_stmt|;
block|}
struct|;
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|ES3FormatCombination
modifier|&
name|a
parameter_list|,
specifier|const
name|ES3FormatCombination
modifier|&
name|b
parameter_list|)
block|{
return|return
name|memcmp
argument_list|(
operator|&
name|a
argument_list|,
operator|&
name|b
argument_list|,
sizeof|sizeof
argument_list|(
name|ES3FormatCombination
argument_list|)
argument_list|)
operator|<
literal|0
return|;
block|}
DECL|typedef|ES3FormatCombinationSet
typedef|typedef
name|std
operator|::
name|set
argument_list|<
name|ES3FormatCombination
argument_list|>
name|ES3FormatCombinationSet
typedef|;
DECL|function|InsertES3FormatCombo
specifier|static
specifier|inline
name|void
name|InsertES3FormatCombo
parameter_list|(
name|ES3FormatCombinationSet
modifier|*
name|set
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|)
block|{
name|ES3FormatCombination
name|info
decl_stmt|;
name|info
operator|.
name|internalFormat
operator|=
name|internalFormat
expr_stmt|;
name|info
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|info
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|set
operator|->
name|insert
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
DECL|function|BuildES3FormatSet
name|ES3FormatCombinationSet
name|BuildES3FormatSet
parameter_list|()
block|{
name|ES3FormatCombinationSet
name|set
decl_stmt|;
comment|// Format combinations from ES 3.0.1 spec, table 3.2
comment|//                        | Internal format      | Format            | Type                            |
comment|//                        |                      |                   |                                 |
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA8
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB5_A1
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA4
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_SRGB8_ALPHA8
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA8_SNORM
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA4
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_4_4_4_4
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB10_A2
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB5_A1
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB5_A1
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_5_5_5_1
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA16F
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA16F
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA32F
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA16F
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA8UI
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA8I
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA16UI
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA16I
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_SHORT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA32UI
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA32I
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_INT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB10_A2UI
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB8
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB565
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_SRGB8
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB8_SNORM
argument_list|,
name|GL_RGB
argument_list|,
name|GL_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB565
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_SHORT_5_6_5
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R11F_G11F_B10F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_INT_10F_11F_11F_REV
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB9_E5
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_INT_5_9_9_9_REV
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB16F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB16F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R11F_G11F_B10F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R11F_G11F_B10F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB9_E5
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB9_E5
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB32F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB16F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R11F_G11F_B10F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB9_E5
argument_list|,
name|GL_RGB
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB8UI
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB8I
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB16UI
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB16I
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_SHORT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB32UI
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB32I
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_INT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RG8
argument_list|,
name|GL_RG
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RG8_SNORM
argument_list|,
name|GL_RG
argument_list|,
name|GL_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RG16F
argument_list|,
name|GL_RG
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RG16F
argument_list|,
name|GL_RG
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RG32F
argument_list|,
name|GL_RG
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RG16F
argument_list|,
name|GL_RG
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RG8UI
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RG8I
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RG16UI
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RG16I
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_SHORT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RG32UI
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RG32I
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_INT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R8
argument_list|,
name|GL_RED
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R8_SNORM
argument_list|,
name|GL_RED
argument_list|,
name|GL_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R16F
argument_list|,
name|GL_RED
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R16F
argument_list|,
name|GL_RED
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R32F
argument_list|,
name|GL_RED
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R16F
argument_list|,
name|GL_RED
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R8UI
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R8I
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R16UI
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R16I
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_SHORT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R32UI
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_R32I
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_INT
argument_list|)
expr_stmt|;
comment|// Unsized formats
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_4_4_4_4
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_5_5_5_1
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_RGB
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_SHORT_5_6_5
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_SRGB_ALPHA_EXT
argument_list|,
name|GL_SRGB_ALPHA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_SRGB_EXT
argument_list|,
name|GL_SRGB_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
comment|// Depth stencil formats
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_DEPTH_COMPONENT16
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_DEPTH_COMPONENT24
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_DEPTH_COMPONENT16
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_DEPTH_COMPONENT32F
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_DEPTH24_STENCIL8
argument_list|,
name|GL_DEPTH_STENCIL
argument_list|,
name|GL_UNSIGNED_INT_24_8
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_DEPTH32F_STENCIL8
argument_list|,
name|GL_DEPTH_STENCIL
argument_list|,
name|GL_FLOAT_32_UNSIGNED_INT_24_8_REV
argument_list|)
expr_stmt|;
comment|// From GL_EXT_sRGB
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_SRGB8_ALPHA8_EXT
argument_list|,
name|GL_SRGB_ALPHA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_SRGB8
argument_list|,
name|GL_SRGB_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
comment|// From GL_OES_texture_float
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
comment|// From GL_OES_texture_half_float
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
expr_stmt|;
comment|// From GL_EXT_texture_format_BGRA8888
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
comment|// From GL_EXT_texture_storage
comment|//                    | Internal format          | Format            | Type                            |
comment|//                    |                          |                   |                                 |
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_ALPHA8_EXT
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE8_EXT
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE8_ALPHA8_EXT
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_ALPHA32F_EXT
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE32F_EXT
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE_ALPHA32F_EXT
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_ALPHA16F_EXT
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_ALPHA16F_EXT
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE16F_EXT
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE16F_EXT
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE_ALPHA16F_EXT
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_LUMINANCE_ALPHA16F_EXT
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
expr_stmt|;
comment|// From GL_EXT_texture_storage and GL_EXT_texture_format_BGRA8888
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_BGRA8_EXT
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_BGRA4_ANGLEX
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_BGRA4_ANGLEX
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_BGR5_A1_ANGLEX
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_BGR5_A1_ANGLEX
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
comment|// From GL_ANGLE_depth_texture
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_DEPTH_COMPONENT32_OES
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_INT_24_8_OES
argument_list|)
expr_stmt|;
comment|// Compressed formats
comment|// From ES 3.0.1 spec, table 3.16
comment|//                    | Internal format                             | Format                                      | Type           |
comment|//                    |                                             |                                             |                |
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_R11_EAC
argument_list|,
name|GL_COMPRESSED_R11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_R11_EAC
argument_list|,
name|GL_COMPRESSED_R11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_SIGNED_R11_EAC
argument_list|,
name|GL_COMPRESSED_SIGNED_R11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_RG11_EAC
argument_list|,
name|GL_COMPRESSED_RG11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_SIGNED_RG11_EAC
argument_list|,
name|GL_COMPRESSED_SIGNED_RG11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_RGB8_ETC2
argument_list|,
name|GL_COMPRESSED_RGB8_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_SRGB8_ETC2
argument_list|,
name|GL_COMPRESSED_SRGB8_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_RGBA8_ETC2_EAC
argument_list|,
name|GL_COMPRESSED_RGBA8_ETC2_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
comment|// From GL_EXT_texture_compression_dxt1
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
argument_list|,
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
comment|// From GL_ANGLE_texture_compression_dxt3
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
comment|// From GL_ANGLE_texture_compression_dxt5
name|InsertES3FormatCombo
argument_list|(
operator|&
name|set
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
DECL|function|ValidateTexImageFormatCombination
specifier|static
name|bool
name|ValidateTexImageFormatCombination
parameter_list|(
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|)
block|{
comment|// Note: dEQP 2013.4 expects an INVALID_VALUE error for TexImage3D with an invalid
comment|// internal format. (dEQP-GLES3.functional.negative_api.texture.teximage3d)
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|formatInfo
operator|.
name|textureSupport
argument_list|(
name|context
operator|->
name|getClientVersion
argument_list|()
argument_list|,
name|context
operator|->
name|getExtensions
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// The type and format are valid if any supported internal format has that type and format
name|bool
name|formatSupported
init|=
literal|false
decl_stmt|;
name|bool
name|typeSupported
init|=
literal|false
decl_stmt|;
specifier|static
specifier|const
name|ES3FormatCombinationSet
name|es3FormatSet
init|=
name|BuildES3FormatSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ES3FormatCombinationSet
operator|::
name|const_iterator
name|i
init|=
name|es3FormatSet
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|es3FormatSet
operator|.
name|end
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|->
name|format
operator|==
name|format
operator|||
name|i
operator|->
name|type
operator|==
name|type
condition|)
block|{
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|info
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|i
operator|->
name|internalFormat
argument_list|)
decl_stmt|;
name|bool
name|supported
init|=
name|info
operator|.
name|textureSupport
argument_list|(
name|context
operator|->
name|getClientVersion
argument_list|()
argument_list|,
name|context
operator|->
name|getExtensions
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|supported
operator|&&
name|i
operator|->
name|type
operator|==
name|type
condition|)
block|{
name|typeSupported
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|supported
operator|&&
name|i
operator|->
name|format
operator|==
name|format
condition|)
block|{
name|formatSupported
operator|=
literal|true
expr_stmt|;
block|}
comment|// Early-out if both type and format are supported now
if|if
condition|(
name|typeSupported
operator|&&
name|formatSupported
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|typeSupported
operator|||
operator|!
name|formatSupported
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Check if this is a valid format combination to load texture data
name|ES3FormatCombination
name|searchFormat
decl_stmt|;
name|searchFormat
operator|.
name|internalFormat
operator|=
name|internalFormat
expr_stmt|;
name|searchFormat
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|searchFormat
operator|.
name|type
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|es3FormatSet
operator|.
name|find
argument_list|(
name|searchFormat
argument_list|)
operator|==
name|es3FormatSet
operator|.
name|end
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateES3TexImageParameters
name|bool
name|ValidateES3TexImageParameters
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|isCompressed
parameter_list|,
name|bool
name|isSubImage
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ValidTexture2DDestinationTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Validate image size
if|if
condition|(
operator|!
name|ValidImageSize
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Verify zero border
if|if
condition|(
name|border
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|xoffset
operator|<
literal|0
operator|||
name|yoffset
operator|<
literal|0
operator|||
name|zoffset
operator|<
literal|0
operator|||
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|xoffset
operator|<
name|width
operator|||
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|yoffset
operator|<
name|height
operator|||
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|zoffset
operator|<
name|depth
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max2DTextureSize
operator|>>
name|level
operator|)
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max2DTextureSize
operator|>>
name|level
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
case|:
if|if
condition|(
operator|!
name|isSubImage
operator|&&
name|width
operator|!=
name|height
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|maxCubeMapTextureSize
operator|>>
name|level
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_TEXTURE_3D
case|:
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max3DTextureSize
operator|>>
name|level
operator|)
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max3DTextureSize
operator|>>
name|level
operator|)
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|depth
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max3DTextureSize
operator|>>
name|level
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max2DTextureSize
operator|>>
name|level
operator|)
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max2DTextureSize
operator|>>
name|level
operator|)
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|depth
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|maxArrayTextureLayers
operator|>>
name|level
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|IsCubeMapTextureTarget
argument_list|(
name|target
argument_list|)
condition|?
name|GL_TEXTURE_CUBE_MAP
else|:
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|texture
operator|->
name|isImmutable
argument_list|()
operator|&&
operator|!
name|isSubImage
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Validate texture formats
name|GLenum
name|actualInternalFormat
init|=
name|isSubImage
condition|?
name|texture
operator|->
name|getInternalFormat
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
else|:
name|internalformat
decl_stmt|;
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|actualFormatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|actualInternalFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCompressed
condition|)
block|{
if|if
condition|(
operator|!
name|ValidCompressedImageSize
argument_list|(
name|context
argument_list|,
name|actualInternalFormat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|actualFormatInfo
operator|.
name|compressed
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|target
operator|==
name|GL_TEXTURE_3D
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|ValidateTexImageFormatCombination
argument_list|(
name|context
argument_list|,
name|actualInternalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|target
operator|==
name|GL_TEXTURE_3D
operator|&&
operator|(
name|format
operator|==
name|GL_DEPTH_COMPONENT
operator|||
name|format
operator|==
name|GL_DEPTH_STENCIL
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// Validate sub image parameters
if|if
condition|(
name|isSubImage
condition|)
block|{
if|if
condition|(
name|isCompressed
operator|!=
name|actualFormatInfo
operator|.
name|compressed
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
operator|||
name|depth
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|xoffset
operator|<
literal|0
operator|||
name|yoffset
operator|<
literal|0
operator|||
name|zoffset
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|xoffset
operator|<
name|width
operator|||
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|yoffset
operator|<
name|height
operator|||
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|zoffset
operator|<
name|depth
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|xoffset
operator|+
name|width
argument_list|)
operator|>
name|texture
operator|->
name|getWidth
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
operator|||
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|yoffset
operator|+
name|height
argument_list|)
operator|>
name|texture
operator|->
name|getHeight
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
operator|||
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|zoffset
operator|+
name|depth
argument_list|)
operator|>
name|texture
operator|->
name|getDepth
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// Check for pixel unpack buffer related API errors
name|gl
operator|::
name|Buffer
modifier|*
name|pixelUnpackBuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|GL_PIXEL_UNPACK_BUFFER
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixelUnpackBuffer
operator|!=
name|NULL
condition|)
block|{
comment|// ...the data would be unpacked from the buffer object such that the memory reads required
comment|// would exceed the data store size.
name|size_t
name|widthSize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|width
argument_list|)
decl_stmt|;
name|size_t
name|heightSize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|height
argument_list|)
decl_stmt|;
name|size_t
name|depthSize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|depth
argument_list|)
decl_stmt|;
name|GLenum
name|sizedFormat
init|=
name|GetSizedInternalFormat
argument_list|(
name|actualInternalFormat
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|size_t
name|pixelBytes
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|sizedFormat
argument_list|)
operator|.
name|pixelBytes
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rx
operator|::
name|IsUnsignedMultiplicationSafe
argument_list|(
name|widthSize
argument_list|,
name|heightSize
argument_list|)
operator|||
operator|!
name|rx
operator|::
name|IsUnsignedMultiplicationSafe
argument_list|(
name|widthSize
operator|*
name|heightSize
argument_list|,
name|depthSize
argument_list|)
operator|||
operator|!
name|rx
operator|::
name|IsUnsignedMultiplicationSafe
argument_list|(
name|widthSize
operator|*
name|heightSize
operator|*
name|depthSize
argument_list|,
name|pixelBytes
argument_list|)
condition|)
block|{
comment|// Overflow past the end of the buffer
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|sizedFormat
argument_list|)
decl_stmt|;
name|size_t
name|copyBytes
init|=
name|formatInfo
operator|.
name|computeBlockSize
argument_list|(
name|type
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|size_t
name|offset
init|=
cast|reinterpret_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|pixels
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rx
operator|::
name|IsUnsignedAdditionSafe
argument_list|(
name|offset
argument_list|,
name|copyBytes
argument_list|)
operator|||
operator|(
operator|(
name|offset
operator|+
name|copyBytes
operator|)
operator|>
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|pixelUnpackBuffer
operator|->
name|getSize
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// Overflow past the end of the buffer
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ...data is not evenly divisible into the number of bytes needed to store in memory a datum
comment|// indicated by type.
if|if
condition|(
operator|!
name|isCompressed
condition|)
block|{
name|size_t
name|dataBytesPerPixel
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|gl
operator|::
name|GetTypeInfo
argument_list|(
name|type
argument_list|)
operator|.
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|offset
operator|%
name|dataBytesPerPixel
operator|)
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// ...the buffer object's data store is currently mapped.
if|if
condition|(
name|pixelUnpackBuffer
operator|->
name|isMapped
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|struct|EffectiveInternalFormatInfo
struct|struct
name|EffectiveInternalFormatInfo
block|{
DECL|member|mEffectiveFormat
name|GLenum
name|mEffectiveFormat
decl_stmt|;
DECL|member|mDestFormat
name|GLenum
name|mDestFormat
decl_stmt|;
DECL|member|mMinRedBits
name|GLuint
name|mMinRedBits
decl_stmt|;
DECL|member|mMaxRedBits
name|GLuint
name|mMaxRedBits
decl_stmt|;
DECL|member|mMinGreenBits
name|GLuint
name|mMinGreenBits
decl_stmt|;
DECL|member|mMaxGreenBits
name|GLuint
name|mMaxGreenBits
decl_stmt|;
DECL|member|mMinBlueBits
name|GLuint
name|mMinBlueBits
decl_stmt|;
DECL|member|mMaxBlueBits
name|GLuint
name|mMaxBlueBits
decl_stmt|;
DECL|member|mMinAlphaBits
name|GLuint
name|mMinAlphaBits
decl_stmt|;
DECL|member|mMaxAlphaBits
name|GLuint
name|mMaxAlphaBits
decl_stmt|;
DECL|function|EffectiveInternalFormatInfo
name|EffectiveInternalFormatInfo
parameter_list|(
name|GLenum
name|effectiveFormat
parameter_list|,
name|GLenum
name|destFormat
parameter_list|,
name|GLuint
name|minRedBits
parameter_list|,
name|GLuint
name|maxRedBits
parameter_list|,
name|GLuint
name|minGreenBits
parameter_list|,
name|GLuint
name|maxGreenBits
parameter_list|,
name|GLuint
name|minBlueBits
parameter_list|,
name|GLuint
name|maxBlueBits
parameter_list|,
name|GLuint
name|minAlphaBits
parameter_list|,
name|GLuint
name|maxAlphaBits
parameter_list|)
member_init_list|:
name|mEffectiveFormat
argument_list|(
name|effectiveFormat
argument_list|)
member_init_list|,
name|mDestFormat
argument_list|(
name|destFormat
argument_list|)
member_init_list|,
name|mMinRedBits
argument_list|(
name|minRedBits
argument_list|)
member_init_list|,
name|mMaxRedBits
argument_list|(
name|maxRedBits
argument_list|)
member_init_list|,
name|mMinGreenBits
argument_list|(
name|minGreenBits
argument_list|)
member_init_list|,
name|mMaxGreenBits
argument_list|(
name|maxGreenBits
argument_list|)
member_init_list|,
name|mMinBlueBits
argument_list|(
name|minBlueBits
argument_list|)
member_init_list|,
name|mMaxBlueBits
argument_list|(
name|maxBlueBits
argument_list|)
member_init_list|,
name|mMinAlphaBits
argument_list|(
name|minAlphaBits
argument_list|)
member_init_list|,
name|mMaxAlphaBits
argument_list|(
name|maxAlphaBits
argument_list|)
block|{}
empty_stmt|;
block|}
struct|;
DECL|typedef|EffectiveInternalFormatList
typedef|typedef
name|std
operator|::
name|vector
argument_list|<
name|EffectiveInternalFormatInfo
argument_list|>
name|EffectiveInternalFormatList
typedef|;
DECL|function|BuildSizedEffectiveInternalFormatList
specifier|static
name|EffectiveInternalFormatList
name|BuildSizedEffectiveInternalFormatList
parameter_list|()
block|{
name|EffectiveInternalFormatList
name|list
decl_stmt|;
comment|// OpenGL ES 3.0.3 Specification, Table 3.17, pg 141: Effective internal format coresponding to destination internal format and
comment|//                                                    linear source buffer component sizes.
comment|//                                                                            | Source channel min/max sizes |
comment|//                                         Effective Internal Format |  N/A   |  R   |  G   |  B   |  A      |
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_ALPHA8_EXT
argument_list|,
name|GL_NONE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_R8
argument_list|,
name|GL_NONE
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RG8
argument_list|,
name|GL_NONE
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGB565
argument_list|,
name|GL_NONE
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGB8
argument_list|,
name|GL_NONE
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGBA4
argument_list|,
name|GL_NONE
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGB5_A1
argument_list|,
name|GL_NONE
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGBA8
argument_list|,
name|GL_NONE
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGB10_A2
argument_list|,
name|GL_NONE
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
DECL|function|BuildUnsizedEffectiveInternalFormatList
specifier|static
name|EffectiveInternalFormatList
name|BuildUnsizedEffectiveInternalFormatList
parameter_list|()
block|{
name|EffectiveInternalFormatList
name|list
decl_stmt|;
comment|// OpenGL ES 3.0.3 Specification, Table 3.17, pg 141: Effective internal format coresponding to destination internal format and
comment|//                                                    linear source buffer component sizes.
comment|//                                                                                        |          Source channel min/max sizes            |
comment|//                                         Effective Internal Format |    Dest Format     |     R     |      G     |      B     |      A     |
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_ALPHA8_EXT
argument_list|,
name|GL_ALPHA
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_LUMINANCE8_EXT
argument_list|,
name|GL_LUMINANCE
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_LUMINANCE8_ALPHA8_EXT
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGB565
argument_list|,
name|GL_RGB
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGB8
argument_list|,
name|GL_RGB
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGBA4
argument_list|,
name|GL_RGBA
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGB5_A1
argument_list|,
name|GL_RGBA
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGBA8
argument_list|,
name|GL_RGBA
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
DECL|function|GetEffectiveInternalFormat
specifier|static
name|bool
name|GetEffectiveInternalFormat
parameter_list|(
specifier|const
name|InternalFormat
modifier|&
name|srcFormat
parameter_list|,
specifier|const
name|InternalFormat
modifier|&
name|destFormat
parameter_list|,
name|GLenum
modifier|*
name|outEffectiveFormat
parameter_list|)
block|{
specifier|const
name|EffectiveInternalFormatList
modifier|*
name|list
init|=
name|NULL
decl_stmt|;
name|GLenum
name|targetFormat
init|=
name|GL_NONE
decl_stmt|;
if|if
condition|(
name|destFormat
operator|.
name|pixelBytes
operator|>
literal|0
condition|)
block|{
specifier|static
specifier|const
name|EffectiveInternalFormatList
name|sizedList
init|=
name|BuildSizedEffectiveInternalFormatList
argument_list|()
decl_stmt|;
name|list
operator|=
operator|&
name|sizedList
expr_stmt|;
block|}
else|else
block|{
specifier|static
specifier|const
name|EffectiveInternalFormatList
name|unsizedList
init|=
name|BuildUnsizedEffectiveInternalFormatList
argument_list|()
decl_stmt|;
name|list
operator|=
operator|&
name|unsizedList
expr_stmt|;
name|targetFormat
operator|=
name|destFormat
operator|.
name|format
expr_stmt|;
block|}
for|for
control|(
name|size_t
name|curFormat
init|=
literal|0
init|;
name|curFormat
operator|<
name|list
operator|->
name|size
argument_list|()
condition|;
operator|++
name|curFormat
control|)
block|{
specifier|const
name|EffectiveInternalFormatInfo
modifier|&
name|formatInfo
init|=
name|list
operator|->
name|at
argument_list|(
name|curFormat
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|formatInfo
operator|.
name|mDestFormat
operator|==
name|targetFormat
operator|)
operator|&&
operator|(
name|formatInfo
operator|.
name|mMinRedBits
operator|<=
name|srcFormat
operator|.
name|redBits
operator|&&
name|formatInfo
operator|.
name|mMaxRedBits
operator|>=
name|srcFormat
operator|.
name|redBits
operator|)
operator|&&
operator|(
name|formatInfo
operator|.
name|mMinGreenBits
operator|<=
name|srcFormat
operator|.
name|greenBits
operator|&&
name|formatInfo
operator|.
name|mMaxGreenBits
operator|>=
name|srcFormat
operator|.
name|greenBits
operator|)
operator|&&
operator|(
name|formatInfo
operator|.
name|mMinBlueBits
operator|<=
name|srcFormat
operator|.
name|blueBits
operator|&&
name|formatInfo
operator|.
name|mMaxBlueBits
operator|>=
name|srcFormat
operator|.
name|blueBits
operator|)
operator|&&
operator|(
name|formatInfo
operator|.
name|mMinAlphaBits
operator|<=
name|srcFormat
operator|.
name|alphaBits
operator|&&
name|formatInfo
operator|.
name|mMaxAlphaBits
operator|>=
name|srcFormat
operator|.
name|alphaBits
operator|)
condition|)
block|{
operator|*
name|outEffectiveFormat
operator|=
name|formatInfo
operator|.
name|mEffectiveFormat
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|struct|CopyConversion
struct|struct
name|CopyConversion
block|{
DECL|member|mTextureFormat
name|GLenum
name|mTextureFormat
decl_stmt|;
DECL|member|mFramebufferFormat
name|GLenum
name|mFramebufferFormat
decl_stmt|;
DECL|function|CopyConversion
name|CopyConversion
parameter_list|(
name|GLenum
name|textureFormat
parameter_list|,
name|GLenum
name|framebufferFormat
parameter_list|)
member_init_list|:
name|mTextureFormat
argument_list|(
name|textureFormat
argument_list|)
member_init_list|,
name|mFramebufferFormat
argument_list|(
name|framebufferFormat
argument_list|)
block|{ }
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|CopyConversion
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|memcmp
argument_list|(
name|this
argument_list|,
operator|&
name|other
argument_list|,
sizeof|sizeof
argument_list|(
name|CopyConversion
argument_list|)
argument_list|)
operator|<
literal|0
return|;
block|}
block|}
struct|;
DECL|typedef|CopyConversionSet
typedef|typedef
name|std
operator|::
name|set
argument_list|<
name|CopyConversion
argument_list|>
name|CopyConversionSet
typedef|;
DECL|function|BuildValidES3CopyTexImageCombinations
specifier|static
name|CopyConversionSet
name|BuildValidES3CopyTexImageCombinations
parameter_list|()
block|{
name|CopyConversionSet
name|set
decl_stmt|;
comment|// From ES 3.0.1 spec, table 3.15
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_ALPHA
argument_list|,
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|GL_RED
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|GL_RG
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|GL_RGB
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED
argument_list|,
name|GL_RED
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED
argument_list|,
name|GL_RG
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED
argument_list|,
name|GL_RGB
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED
argument_list|,
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RG
argument_list|,
name|GL_RG
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RG
argument_list|,
name|GL_RGB
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RG
argument_list|,
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGB
argument_list|,
name|GL_RGB
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGB
argument_list|,
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGBA
argument_list|,
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
comment|// Necessary for ANGLE back-buffers
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_ALPHA
argument_list|,
name|GL_BGRA_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|GL_BGRA_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_BGRA_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED
argument_list|,
name|GL_BGRA_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RG
argument_list|,
name|GL_BGRA_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGB
argument_list|,
name|GL_BGRA_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGBA
argument_list|,
name|GL_BGRA_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED_INTEGER
argument_list|,
name|GL_RED_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED_INTEGER
argument_list|,
name|GL_RG_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED_INTEGER
argument_list|,
name|GL_RGB_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED_INTEGER
argument_list|,
name|GL_RGBA_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RG_INTEGER
argument_list|,
name|GL_RG_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RG_INTEGER
argument_list|,
name|GL_RGB_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RG_INTEGER
argument_list|,
name|GL_RGBA_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGB_INTEGER
argument_list|,
name|GL_RGB_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGB_INTEGER
argument_list|,
name|GL_RGBA_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGBA_INTEGER
argument_list|,
name|GL_RGBA_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
DECL|function|IsValidES3CopyTexImageCombination
specifier|static
name|bool
name|IsValidES3CopyTexImageCombination
parameter_list|(
name|GLenum
name|textureInternalFormat
parameter_list|,
name|GLenum
name|frameBufferInternalFormat
parameter_list|,
name|GLuint
name|readBufferHandle
parameter_list|)
block|{
specifier|const
name|InternalFormat
modifier|&
name|textureInternalFormatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|textureInternalFormat
argument_list|)
decl_stmt|;
specifier|const
name|InternalFormat
modifier|&
name|framebufferInternalFormatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|frameBufferInternalFormat
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|CopyConversionSet
name|conversionSet
init|=
name|BuildValidES3CopyTexImageCombinations
argument_list|()
decl_stmt|;
if|if
condition|(
name|conversionSet
operator|.
name|find
argument_list|(
name|CopyConversion
argument_list|(
name|textureInternalFormatInfo
operator|.
name|format
argument_list|,
name|framebufferInternalFormatInfo
operator|.
name|format
argument_list|)
argument_list|)
operator|!=
name|conversionSet
operator|.
name|end
argument_list|()
condition|)
block|{
comment|// Section 3.8.5 of the GLES 3.0.3 spec states that source and destination formats
comment|// must both be signed, unsigned, or fixed point and both source and destinations
comment|// must be either both SRGB or both not SRGB. EXT_color_buffer_float adds allowed
comment|// conversion between fixed and floating point.
if|if
condition|(
operator|(
name|textureInternalFormatInfo
operator|.
name|colorEncoding
operator|==
name|GL_SRGB
operator|)
operator|!=
operator|(
name|framebufferInternalFormatInfo
operator|.
name|colorEncoding
operator|==
name|GL_SRGB
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
operator|(
name|textureInternalFormatInfo
operator|.
name|componentType
operator|==
name|GL_INT
operator|)
operator|!=
operator|(
name|framebufferInternalFormatInfo
operator|.
name|componentType
operator|==
name|GL_INT
operator|)
operator|)
operator|||
operator|(
operator|(
name|textureInternalFormatInfo
operator|.
name|componentType
operator|==
name|GL_UNSIGNED_INT
operator|)
operator|!=
operator|(
name|framebufferInternalFormatInfo
operator|.
name|componentType
operator|==
name|GL_UNSIGNED_INT
operator|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|textureInternalFormatInfo
operator|.
name|componentType
operator|==
name|GL_UNSIGNED_NORMALIZED
operator|||
name|textureInternalFormatInfo
operator|.
name|componentType
operator|==
name|GL_SIGNED_NORMALIZED
operator|||
name|textureInternalFormatInfo
operator|.
name|componentType
operator|==
name|GL_FLOAT
operator|)
operator|&&
operator|!
operator|(
name|framebufferInternalFormatInfo
operator|.
name|componentType
operator|==
name|GL_UNSIGNED_NORMALIZED
operator|||
name|framebufferInternalFormatInfo
operator|.
name|componentType
operator|==
name|GL_SIGNED_NORMALIZED
operator|||
name|framebufferInternalFormatInfo
operator|.
name|componentType
operator|==
name|GL_FLOAT
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// GLES specification 3.0.3, sec 3.8.5, pg 139-140:
comment|// The effective internal format of the source buffer is determined with the following rules applied in order:
comment|//    * If the source buffer is a texture or renderbuffer that was created with a sized internal format then the
comment|//      effective internal format is the source buffer's sized internal format.
comment|//    * If the source buffer is a texture that was created with an unsized base internal format, then the
comment|//      effective internal format is the source image array's effective internal format, as specified by table
comment|//      3.12, which is determined from the<format> and<type> that were used when the source image array was
comment|//      specified by TexImage*.
comment|//    * Otherwise the effective internal format is determined by the row in table 3.17 or 3.18 where
comment|//      Destination Internal Format matches internalformat and where the [source channel sizes] are consistent
comment|//      with the values of the source buffer's [channel sizes]. Table 3.17 is used if the
comment|//      FRAMEBUFFER_ATTACHMENT_ENCODING is LINEAR and table 3.18 is used if the FRAMEBUFFER_ATTACHMENT_ENCODING
comment|//      is SRGB.
specifier|const
name|InternalFormat
modifier|*
name|sourceEffectiveFormat
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|readBufferHandle
operator|!=
literal|0
condition|)
block|{
comment|// Not the default framebuffer, therefore the read buffer must be a user-created texture or renderbuffer
if|if
condition|(
name|framebufferInternalFormatInfo
operator|.
name|pixelBytes
operator|>
literal|0
condition|)
block|{
name|sourceEffectiveFormat
operator|=
operator|&
name|framebufferInternalFormatInfo
expr_stmt|;
block|}
else|else
block|{
comment|// Renderbuffers cannot be created with an unsized internal format, so this must be an unsized-format
comment|// texture. We can use the same table we use when creating textures to get its effective sized format.
name|GLenum
name|sizedInternalFormat
init|=
name|GetSizedInternalFormat
argument_list|(
name|framebufferInternalFormatInfo
operator|.
name|format
argument_list|,
name|framebufferInternalFormatInfo
operator|.
name|type
argument_list|)
decl_stmt|;
name|sourceEffectiveFormat
operator|=
operator|&
name|GetInternalFormatInfo
argument_list|(
name|sizedInternalFormat
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// The effective internal format must be derived from the source framebuffer's channel sizes.
comment|// This is done in GetEffectiveInternalFormat for linear buffers (table 3.17)
if|if
condition|(
name|framebufferInternalFormatInfo
operator|.
name|colorEncoding
operator|==
name|GL_LINEAR
condition|)
block|{
name|GLenum
name|effectiveFormat
decl_stmt|;
if|if
condition|(
name|GetEffectiveInternalFormat
argument_list|(
name|framebufferInternalFormatInfo
argument_list|,
name|textureInternalFormatInfo
argument_list|,
operator|&
name|effectiveFormat
argument_list|)
condition|)
block|{
name|sourceEffectiveFormat
operator|=
operator|&
name|GetInternalFormatInfo
argument_list|(
name|effectiveFormat
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|framebufferInternalFormatInfo
operator|.
name|colorEncoding
operator|==
name|GL_SRGB
condition|)
block|{
comment|// SRGB buffers can only be copied to sized format destinations according to table 3.18
if|if
condition|(
operator|(
name|textureInternalFormatInfo
operator|.
name|pixelBytes
operator|>
literal|0
operator|)
operator|&&
operator|(
name|framebufferInternalFormatInfo
operator|.
name|redBits
operator|>=
literal|1
operator|&&
name|framebufferInternalFormatInfo
operator|.
name|redBits
operator|<=
literal|8
operator|)
operator|&&
operator|(
name|framebufferInternalFormatInfo
operator|.
name|greenBits
operator|>=
literal|1
operator|&&
name|framebufferInternalFormatInfo
operator|.
name|greenBits
operator|<=
literal|8
operator|)
operator|&&
operator|(
name|framebufferInternalFormatInfo
operator|.
name|blueBits
operator|>=
literal|1
operator|&&
name|framebufferInternalFormatInfo
operator|.
name|blueBits
operator|<=
literal|8
operator|)
operator|&&
operator|(
name|framebufferInternalFormatInfo
operator|.
name|alphaBits
operator|>=
literal|1
operator|&&
name|framebufferInternalFormatInfo
operator|.
name|alphaBits
operator|<=
literal|8
operator|)
condition|)
block|{
name|sourceEffectiveFormat
operator|=
operator|&
name|GetInternalFormatInfo
argument_list|(
name|GL_SRGB8_ALPHA8
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|textureInternalFormatInfo
operator|.
name|pixelBytes
operator|>
literal|0
condition|)
block|{
comment|// Section 3.8.5 of the GLES 3.0.3 spec, pg 139, requires that, if the destination format is sized,
comment|// component sizes of the source and destination formats must exactly match
if|if
condition|(
name|textureInternalFormatInfo
operator|.
name|redBits
operator|!=
name|sourceEffectiveFormat
operator|->
name|redBits
operator|||
name|textureInternalFormatInfo
operator|.
name|greenBits
operator|!=
name|sourceEffectiveFormat
operator|->
name|greenBits
operator|||
name|textureInternalFormatInfo
operator|.
name|blueBits
operator|!=
name|sourceEffectiveFormat
operator|->
name|blueBits
operator|||
name|textureInternalFormatInfo
operator|.
name|alphaBits
operator|!=
name|sourceEffectiveFormat
operator|->
name|alphaBits
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
comment|// A conversion function exists, and no rule in the specification has precluded conversion
comment|// between these formats.
block|}
return|return
literal|false
return|;
block|}
DECL|function|ValidateES3CopyTexImageParameters
name|bool
name|ValidateES3CopyTexImageParameters
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|isSubImage
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|)
block|{
name|GLenum
name|textureInternalFormat
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateCopyTexImageParametersBase
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|isSubImage
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
operator|&
name|textureInternalFormat
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|framebuffer
operator|->
name|checkStatus
argument_list|(
name|context
operator|->
name|getData
argument_list|()
argument_list|)
operator|!=
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_FRAMEBUFFER_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
operator|->
name|id
argument_list|()
operator|!=
literal|0
operator|&&
name|framebuffer
operator|->
name|getSamples
argument_list|(
name|context
operator|->
name|getData
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|source
init|=
name|framebuffer
operator|->
name|getReadColorbuffer
argument_list|()
decl_stmt|;
name|GLenum
name|colorbufferInternalFormat
init|=
name|source
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSubImage
condition|)
block|{
if|if
condition|(
operator|!
name|IsValidES3CopyTexImageCombination
argument_list|(
name|textureInternalFormat
argument_list|,
name|colorbufferInternalFormat
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
operator|->
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|IsValidES3CopyTexImageCombination
argument_list|(
name|internalformat
argument_list|,
name|colorbufferInternalFormat
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
operator|->
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// If width or height is zero, it is a no-op.  Return false without setting an error.
return|return
operator|(
name|width
operator|>
literal|0
operator|&&
name|height
operator|>
literal|0
operator|)
return|;
block|}
DECL|function|ValidateES3TexStorageParameters
name|bool
name|ValidateES3TexStorageParameters
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
block|{
if|if
condition|(
name|width
operator|<
literal|1
operator|||
name|height
operator|<
literal|1
operator|||
name|depth
operator|<
literal|1
operator|||
name|levels
operator|<
literal|1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|levels
operator|>
name|gl
operator|::
name|log2
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|,
name|depth
argument_list|)
argument_list|)
operator|+
literal|1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
name|caps
operator|.
name|max2DTextureSize
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
name|caps
operator|.
name|max2DTextureSize
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP
case|:
block|{
if|if
condition|(
name|width
operator|!=
name|height
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
name|caps
operator|.
name|maxCubeMapTextureSize
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_3D
case|:
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
name|caps
operator|.
name|max3DTextureSize
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
name|caps
operator|.
name|max3DTextureSize
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|depth
argument_list|)
operator|>
name|caps
operator|.
name|max3DTextureSize
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
name|caps
operator|.
name|max2DTextureSize
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
name|caps
operator|.
name|max2DTextureSize
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|depth
argument_list|)
operator|>
name|caps
operator|.
name|maxArrayTextureLayers
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
operator|||
name|texture
operator|->
name|id
argument_list|()
operator|==
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|texture
operator|->
name|isImmutable
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|formatInfo
operator|.
name|textureSupport
argument_list|(
name|context
operator|->
name|getClientVersion
argument_list|()
argument_list|,
name|context
operator|->
name|getExtensions
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|formatInfo
operator|.
name|pixelBytes
operator|==
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateFramebufferTextureLayer
name|bool
name|ValidateFramebufferTextureLayer
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLuint
name|texture
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|layer
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidateFramebufferTextureBase
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|texture
argument_list|,
name|level
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
if|if
condition|(
name|texture
operator|!=
literal|0
condition|)
block|{
name|gl
operator|::
name|Texture
modifier|*
name|tex
init|=
name|context
operator|->
name|getTexture
argument_list|(
name|texture
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|tex
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|tex
operator|->
name|getTarget
argument_list|()
condition|)
block|{
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
block|{
if|if
condition|(
name|level
operator|>
name|gl
operator|::
name|log2
argument_list|(
name|caps
operator|.
name|max2DTextureSize
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|layer
argument_list|)
operator|>=
name|caps
operator|.
name|maxArrayTextureLayers
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_3D
case|:
block|{
if|if
condition|(
name|level
operator|>
name|gl
operator|::
name|log2
argument_list|(
name|caps
operator|.
name|max3DTextureSize
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|layer
argument_list|)
operator|>=
name|caps
operator|.
name|max3DTextureSize
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|internalFormatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|tex
operator|->
name|getInternalFormat
argument_list|(
name|tex
operator|->
name|getTarget
argument_list|()
argument_list|,
name|level
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|internalFormatInfo
operator|.
name|compressed
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidES3ReadFormatType
name|bool
name|ValidES3ReadFormatType
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|)
block|{
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|internalFormatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|GL_RGBA
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
break|break;
case|case
name|GL_UNSIGNED_INT_2_10_10_10_REV
case|:
if|if
condition|(
name|internalFormat
operator|!=
name|GL_RGB10_A2
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_FLOAT
case|:
if|if
condition|(
name|internalFormatInfo
operator|.
name|componentType
operator|!=
name|GL_FLOAT
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
default|default:
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RGBA_INTEGER
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_INT
case|:
if|if
condition|(
name|internalFormatInfo
operator|.
name|componentType
operator|!=
name|GL_INT
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_UNSIGNED_INT
case|:
if|if
condition|(
name|internalFormatInfo
operator|.
name|componentType
operator|!=
name|GL_UNSIGNED_INT
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
default|default:
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_BGRA_EXT
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
case|:
case|case
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
case|:
break|break;
default|default:
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RG_EXT
case|:
case|case
name|GL_RED_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureRG
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
break|break;
default|default:
return|return
literal|false
return|;
block|}
break|break;
default|default:
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateES3RenderbufferStorageParameters
name|bool
name|ValidateES3RenderbufferStorageParameters
parameter_list|(
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|samples
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ValidateRenderbufferStorageParametersBase
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//The ES3 spec(section 4.4.2) states that the internal format must be sized and not an integer format if samples is greater than zero.
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|formatInfo
operator|.
name|componentType
operator|==
name|GL_UNSIGNED_INT
operator|||
name|formatInfo
operator|.
name|componentType
operator|==
name|GL_INT
operator|)
operator|&&
name|samples
operator|>
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// The behavior is different than the ANGLE version, which would generate a GL_OUT_OF_MEMORY.
specifier|const
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|context
operator|->
name|getTextureCaps
argument_list|()
operator|.
name|get
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|samples
argument_list|)
operator|>
name|formatCaps
operator|.
name|getMaxSamples
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateInvalidateFramebufferParameters
name|bool
name|ValidateInvalidateFramebufferParameters
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|numAttachments
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|)
block|{
name|bool
name|defaultFramebuffer
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_DRAW_FRAMEBUFFER
case|:
case|case
name|GL_FRAMEBUFFER
case|:
name|defaultFramebuffer
operator|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
operator|->
name|id
argument_list|()
operator|==
literal|0
expr_stmt|;
break|break;
case|case
name|GL_READ_FRAMEBUFFER
case|:
name|defaultFramebuffer
operator|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
operator|->
name|id
argument_list|()
operator|==
literal|0
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAttachments
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|attachments
index|[
name|i
index|]
operator|>=
name|GL_COLOR_ATTACHMENT0
operator|&&
name|attachments
index|[
name|i
index|]
operator|<=
name|GL_COLOR_ATTACHMENT15
condition|)
block|{
if|if
condition|(
name|defaultFramebuffer
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|attachments
index|[
name|i
index|]
operator|>=
name|GL_COLOR_ATTACHMENT0
operator|+
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxColorAttachments
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|attachments
index|[
name|i
index|]
condition|)
block|{
case|case
name|GL_DEPTH_ATTACHMENT
case|:
case|case
name|GL_STENCIL_ATTACHMENT
case|:
case|case
name|GL_DEPTH_STENCIL_ATTACHMENT
case|:
if|if
condition|(
name|defaultFramebuffer
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COLOR
case|:
case|case
name|GL_DEPTH
case|:
case|case
name|GL_STENCIL
case|:
if|if
condition|(
operator|!
name|defaultFramebuffer
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateClearBuffer
name|bool
name|ValidateClearBuffer
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|Framebuffer
modifier|*
name|fbo
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fbo
operator|||
name|fbo
operator|->
name|checkStatus
argument_list|(
name|context
operator|->
name|getData
argument_list|()
argument_list|)
operator|!=
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_FRAMEBUFFER_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateGetUniformuiv
name|bool
name|ValidateGetUniformuiv
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLuint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|ValidateGetUniformBase
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|location
argument_list|)
return|;
block|}
DECL|function|ValidateReadBuffer
name|bool
name|ValidateReadBuffer
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|src
parameter_list|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Framebuffer
modifier|*
name|readFBO
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|readFBO
operator|==
literal|nullptr
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"No active read framebuffer."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|src
operator|==
name|GL_NONE
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|src
operator|!=
name|GL_BACK
operator|&&
operator|(
name|src
argument_list|<
name|GL_COLOR_ATTACHMENT0
operator|||
name|src
argument_list|>
name|GL_COLOR_ATTACHMENT15
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Unknown enum for 'src' in ReadBuffer"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|readFBO
operator|->
name|id
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|src
operator|!=
name|GL_BACK
condition|)
block|{
specifier|const
name|char
modifier|*
name|errorMsg
init|=
literal|"'src' must be GL_NONE or GL_BACK when reading from the default framebuffer."
decl_stmt|;
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|GLuint
name|drawBuffer
init|=
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|src
operator|-
name|GL_COLOR_ATTACHMENT0
argument_list|)
decl_stmt|;
if|if
condition|(
name|drawBuffer
operator|>=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxDrawBuffers
condition|)
block|{
specifier|const
name|char
modifier|*
name|errorMsg
init|=
literal|"'src' is greater than MAX_DRAW_BUFFERS."
decl_stmt|;
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_namespace
end_unit
