begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// ResourceManager.h : Defines the ResourceManager class, which tracks objects
end_comment
begin_comment
comment|// shared by multiple GL contexts.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RESOURCEMANAGER_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RESOURCEMANAGER_H_
define|#
directive|define
name|LIBANGLE_RESOURCEMANAGER_H_
end_define
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/HandleAllocator.h"
end_include
begin_include
include|#
directive|include
file|<map>
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|ImplFactory
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Buffer
decl_stmt|;
struct_decl|struct
name|Data
struct_decl|;
name|class
name|FenceSync
decl_stmt|;
struct_decl|struct
name|Limitations
struct_decl|;
name|class
name|Program
decl_stmt|;
name|class
name|Renderbuffer
decl_stmt|;
name|class
name|Sampler
decl_stmt|;
name|class
name|Shader
decl_stmt|;
name|class
name|Texture
decl_stmt|;
name|class
name|ResourceManager
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|explicit
name|ResourceManager
argument_list|(
name|rx
operator|::
name|ImplFactory
operator|*
name|factory
argument_list|)
block|;
operator|~
name|ResourceManager
argument_list|()
block|;
name|void
name|addRef
argument_list|()
block|;
name|void
name|release
argument_list|()
block|;
name|GLuint
name|createBuffer
argument_list|()
block|;
name|GLuint
name|createShader
argument_list|(
argument|const gl::Limitations&rendererLimitations
argument_list|,
argument|GLenum type
argument_list|)
block|;
name|GLuint
name|createProgram
argument_list|()
block|;
name|GLuint
name|createTexture
argument_list|()
block|;
name|GLuint
name|createRenderbuffer
argument_list|()
block|;
name|GLuint
name|createSampler
argument_list|()
block|;
name|GLuint
name|createFenceSync
argument_list|()
block|;
name|void
name|deleteBuffer
argument_list|(
argument|GLuint buffer
argument_list|)
block|;
name|void
name|deleteShader
argument_list|(
argument|GLuint shader
argument_list|)
block|;
name|void
name|deleteProgram
argument_list|(
argument|GLuint program
argument_list|)
block|;
name|void
name|deleteTexture
argument_list|(
argument|GLuint texture
argument_list|)
block|;
name|void
name|deleteRenderbuffer
argument_list|(
argument|GLuint renderbuffer
argument_list|)
block|;
name|void
name|deleteSampler
argument_list|(
argument|GLuint sampler
argument_list|)
block|;
name|void
name|deleteFenceSync
argument_list|(
argument|GLuint fenceSync
argument_list|)
block|;
name|Buffer
operator|*
name|getBuffer
argument_list|(
argument|GLuint handle
argument_list|)
block|;
name|Shader
operator|*
name|getShader
argument_list|(
argument|GLuint handle
argument_list|)
block|;
name|Program
operator|*
name|getProgram
argument_list|(
argument|GLuint handle
argument_list|)
specifier|const
block|;
name|Texture
operator|*
name|getTexture
argument_list|(
argument|GLuint handle
argument_list|)
block|;
name|Renderbuffer
operator|*
name|getRenderbuffer
argument_list|(
argument|GLuint handle
argument_list|)
block|;
name|Sampler
operator|*
name|getSampler
argument_list|(
argument|GLuint handle
argument_list|)
block|;
name|FenceSync
operator|*
name|getFenceSync
argument_list|(
argument|GLuint handle
argument_list|)
block|;
name|void
name|setRenderbuffer
argument_list|(
argument|GLuint handle
argument_list|,
argument|Renderbuffer *renderbuffer
argument_list|)
block|;
name|void
name|checkBufferAllocation
argument_list|(
argument|GLuint handle
argument_list|)
block|;
name|void
name|checkTextureAllocation
argument_list|(
argument|GLuint handle
argument_list|,
argument|GLenum type
argument_list|)
block|;
name|void
name|checkRenderbufferAllocation
argument_list|(
argument|GLuint handle
argument_list|)
block|;
name|void
name|checkSamplerAllocation
argument_list|(
argument|GLuint sampler
argument_list|)
block|;
name|bool
name|isSampler
argument_list|(
argument|GLuint sampler
argument_list|)
block|;
name|private
operator|:
name|void
name|createTextureInternal
argument_list|(
argument|GLuint handle
argument_list|)
block|;
name|rx
operator|::
name|ImplFactory
operator|*
name|mFactory
block|;
name|std
operator|::
name|size_t
name|mRefCount
block|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|GLuint
operator|,
name|Buffer
operator|*
operator|>
name|BufferMap
expr_stmt|;
name|BufferMap
name|mBufferMap
decl_stmt|;
name|HandleAllocator
name|mBufferHandleAllocator
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|GLuint
operator|,
name|Shader
operator|*
operator|>
name|ShaderMap
expr_stmt|;
name|ShaderMap
name|mShaderMap
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|GLuint
operator|,
name|Program
operator|*
operator|>
name|ProgramMap
expr_stmt|;
name|ProgramMap
name|mProgramMap
decl_stmt|;
name|HandleAllocator
name|mProgramShaderHandleAllocator
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|GLuint
operator|,
name|Texture
operator|*
operator|>
name|TextureMap
expr_stmt|;
name|TextureMap
name|mTextureMap
decl_stmt|;
name|HandleAllocator
name|mTextureHandleAllocator
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|GLuint
operator|,
name|Renderbuffer
operator|*
operator|>
name|RenderbufferMap
expr_stmt|;
name|RenderbufferMap
name|mRenderbufferMap
decl_stmt|;
name|HandleAllocator
name|mRenderbufferHandleAllocator
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|GLuint
operator|,
name|Sampler
operator|*
operator|>
name|SamplerMap
expr_stmt|;
name|SamplerMap
name|mSamplerMap
decl_stmt|;
name|HandleAllocator
name|mSamplerHandleAllocator
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|GLuint
operator|,
name|FenceSync
operator|*
operator|>
name|FenceMap
expr_stmt|;
name|FenceMap
name|mFenceSyncMap
decl_stmt|;
name|HandleAllocator
name|mFenceSyncHandleAllocator
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RESOURCEMANAGER_H_
end_comment
end_unit
