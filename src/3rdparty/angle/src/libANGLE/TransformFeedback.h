begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_TRANSFORM_FEEDBACK_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_TRANSFORM_FEEDBACK_H_
define|#
directive|define
name|LIBANGLE_TRANSFORM_FEEDBACK_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/RefCountObject.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Debug.h"
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|TransformFeedbackImpl
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Buffer
decl_stmt|;
struct_decl|struct
name|Caps
struct_decl|;
name|class
name|TransformFeedback
name|final
range|:
name|public
name|RefCountObject
decl_stmt|,
name|public
name|LabeledObject
block|{
name|public
label|:
name|TransformFeedback
argument_list|(
argument|rx::TransformFeedbackImpl* impl
argument_list|,
argument|GLuint id
argument_list|,
argument|const Caps&caps
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|TransformFeedback
argument_list|()
expr_stmt|;
name|void
name|setLabel
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|label
argument_list|)
name|override
decl_stmt|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getLabel
argument_list|()
specifier|const
name|override
expr_stmt|;
name|void
name|begin
parameter_list|(
name|GLenum
name|primitiveMode
parameter_list|)
function_decl|;
name|void
name|end
parameter_list|()
function_decl|;
name|void
name|pause
parameter_list|()
function_decl|;
name|void
name|resume
parameter_list|()
function_decl|;
name|bool
name|isActive
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isPaused
argument_list|()
specifier|const
expr_stmt|;
name|GLenum
name|getPrimitiveMode
argument_list|()
specifier|const
expr_stmt|;
name|void
name|bindGenericBuffer
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|)
function_decl|;
specifier|const
name|BindingPointer
operator|<
name|Buffer
operator|>
operator|&
name|getGenericBuffer
argument_list|()
specifier|const
expr_stmt|;
name|void
name|bindIndexedBuffer
parameter_list|(
name|size_t
name|index
parameter_list|,
name|Buffer
modifier|*
name|buffer
parameter_list|,
name|size_t
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
specifier|const
name|OffsetBindingPointer
operator|<
name|Buffer
operator|>
operator|&
name|getIndexedBuffer
argument_list|(
argument|size_t index
argument_list|)
specifier|const
expr_stmt|;
name|size_t
name|getIndexedBufferCount
argument_list|()
specifier|const
expr_stmt|;
name|void
name|detachBuffer
parameter_list|(
name|GLuint
name|bufferName
parameter_list|)
function_decl|;
name|rx
operator|::
name|TransformFeedbackImpl
operator|*
name|getImplementation
argument_list|()
expr_stmt|;
specifier|const
name|rx
operator|::
name|TransformFeedbackImpl
operator|*
name|getImplementation
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|rx
operator|::
name|TransformFeedbackImpl
operator|*
name|mImplementation
expr_stmt|;
name|std
operator|::
name|string
name|mLabel
expr_stmt|;
name|bool
name|mActive
decl_stmt|;
name|GLenum
name|mPrimitiveMode
decl_stmt|;
name|bool
name|mPaused
decl_stmt|;
name|BindingPointer
operator|<
name|Buffer
operator|>
name|mGenericBuffer
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|OffsetBindingPointer
operator|<
name|Buffer
operator|>>
name|mIndexedBuffers
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_TRANSFORM_FEEDBACK_H_
end_comment
end_unit
