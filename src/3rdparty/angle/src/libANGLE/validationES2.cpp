begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// validationES2.cpp: Validation functions for OpenGL ES 2.0 entry point parameters
end_comment
begin_include
include|#
directive|include
file|"libANGLE/validationES2.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/validationES.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Context.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
namespace|namespace
block|{
DECL|function|IsPartialBlit
name|bool
name|IsPartialBlit
parameter_list|(
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|,
specifier|const
name|FramebufferAttachment
modifier|*
name|readBuffer
parameter_list|,
specifier|const
name|FramebufferAttachment
modifier|*
name|writeBuffer
parameter_list|,
name|GLint
name|srcX0
parameter_list|,
name|GLint
name|srcY0
parameter_list|,
name|GLint
name|srcX1
parameter_list|,
name|GLint
name|srcY1
parameter_list|,
name|GLint
name|dstX0
parameter_list|,
name|GLint
name|dstY0
parameter_list|,
name|GLint
name|dstX1
parameter_list|,
name|GLint
name|dstY1
parameter_list|)
block|{
specifier|const
name|Extents
modifier|&
name|writeSize
init|=
name|writeBuffer
operator|->
name|getSize
argument_list|()
decl_stmt|;
specifier|const
name|Extents
modifier|&
name|readSize
init|=
name|readBuffer
operator|->
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcX0
operator|!=
literal|0
operator|||
name|srcY0
operator|!=
literal|0
operator|||
name|dstX0
operator|!=
literal|0
operator|||
name|dstY0
operator|!=
literal|0
operator|||
name|dstX1
operator|!=
name|writeSize
operator|.
name|width
operator|||
name|dstY1
operator|!=
name|writeSize
operator|.
name|height
operator|||
name|srcX1
operator|!=
name|readSize
operator|.
name|width
operator|||
name|srcY1
operator|!=
name|readSize
operator|.
name|height
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|isScissorTestEnabled
argument_list|()
condition|)
block|{
specifier|const
name|Rectangle
modifier|&
name|scissor
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getScissor
argument_list|()
decl_stmt|;
return|return
name|scissor
operator|.
name|x
operator|>
literal|0
operator|||
name|scissor
operator|.
name|y
operator|>
literal|0
operator|||
name|scissor
operator|.
name|width
operator|<
name|writeSize
operator|.
name|width
operator|||
name|scissor
operator|.
name|height
operator|<
name|writeSize
operator|.
name|height
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|// anonymous namespace
DECL|function|ValidateES2TexImageParameters
name|bool
name|ValidateES2TexImageParameters
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|isCompressed
parameter_list|,
name|bool
name|isSubImage
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ValidTexture2DDestinationTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidImageSizeParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|isSubImage
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|level
operator|<
literal|0
operator|||
name|xoffset
operator|<
literal|0
operator|||
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|xoffset
operator|<
name|width
operator|||
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|yoffset
operator|<
name|height
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|isSubImage
operator|&&
operator|!
name|isCompressed
operator|&&
name|internalformat
operator|!=
name|format
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
if|if
condition|(
name|target
operator|==
name|GL_TEXTURE_2D
condition|)
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max2DTextureSize
operator|>>
name|level
operator|)
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max2DTextureSize
operator|>>
name|level
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|IsCubeMapTextureTarget
argument_list|(
name|target
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isSubImage
operator|&&
name|width
operator|!=
name|height
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|maxCubeMapTextureSize
operator|>>
name|level
operator|)
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|maxCubeMapTextureSize
operator|>>
name|level
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|IsCubeMapTextureTarget
argument_list|(
name|target
argument_list|)
condition|?
name|GL_TEXTURE_CUBE_MAP
else|:
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isSubImage
condition|)
block|{
if|if
condition|(
name|format
operator|!=
name|GL_NONE
condition|)
block|{
if|if
condition|(
name|gl
operator|::
name|GetSizedInternalFormat
argument_list|(
name|format
argument_list|,
name|type
argument_list|)
operator|!=
name|texture
operator|->
name|getInternalFormat
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|xoffset
operator|+
name|width
argument_list|)
operator|>
name|texture
operator|->
name|getWidth
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
operator|||
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|yoffset
operator|+
name|height
argument_list|)
operator|>
name|texture
operator|->
name|getHeight
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|texture
operator|->
name|getImmutableFormat
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// Verify zero border
if|if
condition|(
name|border
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isCompressed
condition|)
block|{
name|GLenum
name|actualInternalFormat
init|=
name|isSubImage
condition|?
name|texture
operator|->
name|getInternalFormat
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
else|:
name|internalformat
decl_stmt|;
switch|switch
condition|(
name|actualInternalFormat
condition|)
block|{
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT5
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_ETC1_RGB8_OES
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|compressedETC1RGB8Texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_ETC1_RGB8_LOSSY_DECODE_ANGLE
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|lossyETCDecode
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"ANGLE_lossy_etc_decode extension is not supported"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"internalformat is not a supported compressed internal format"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidCompressedImageSize
argument_list|(
name|context
argument_list|,
name|actualInternalFormat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// validate<type> by itself (used as secondary key below)
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_UNSIGNED_SHORT_5_6_5
case|:
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4
case|:
case|case
name|GL_UNSIGNED_SHORT_5_5_5_1
case|:
case|case
name|GL_UNSIGNED_SHORT
case|:
case|case
name|GL_UNSIGNED_INT
case|:
case|case
name|GL_UNSIGNED_INT_24_8_OES
case|:
case|case
name|GL_HALF_FLOAT_OES
case|:
case|case
name|GL_FLOAT
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// validate<format> +<type> combinations
comment|// - invalid<format> -> sets INVALID_ENUM
comment|// - invalid<format>+<type> combination -> sets INVALID_OPERATION
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|GL_ALPHA
case|:
case|case
name|GL_LUMINANCE
case|:
case|case
name|GL_LUMINANCE_ALPHA
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_FLOAT
case|:
case|case
name|GL_HALF_FLOAT_OES
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RED
case|:
case|case
name|GL_RG
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureRG
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_FLOAT
case|:
case|case
name|GL_HALF_FLOAT_OES
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RGB
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_UNSIGNED_SHORT_5_6_5
case|:
case|case
name|GL_FLOAT
case|:
case|case
name|GL_HALF_FLOAT_OES
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RGBA
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4
case|:
case|case
name|GL_UNSIGNED_SHORT_5_5_5_1
case|:
case|case
name|GL_FLOAT
case|:
case|case
name|GL_HALF_FLOAT_OES
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_BGRA_EXT
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_SRGB_EXT
case|:
case|case
name|GL_SRGB_ALPHA_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|sRGB
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
comment|// error cases for compressed textures are handled below
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
break|break;
case|case
name|GL_DEPTH_COMPONENT
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_SHORT
case|:
case|case
name|GL_UNSIGNED_INT
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_DEPTH_STENCIL_OES
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_INT_24_8_OES
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT5
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_ETC1_RGB8_OES
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|compressedETC1RGB8Texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_ETC1_RGB8_LOSSY_DECODE_ANGLE
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|lossyETCDecode
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"ETC1_RGB8_LOSSY_DECODE_ANGLE can't work with this type."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"ANGLE_lossy_etc_decode extension is not supported."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_DEPTH_COMPONENT
case|:
case|case
name|GL_DEPTH_STENCIL_OES
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|depthTextures
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|target
operator|!=
name|GL_TEXTURE_2D
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// OES_depth_texture supports loading depth data and multiple levels,
comment|// but ANGLE_depth_texture does not
if|if
condition|(
name|pixels
operator|!=
name|NULL
operator|||
name|level
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|type
operator|==
name|GL_FLOAT
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureFloat
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|GL_HALF_FLOAT_OES
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureHalfFloat
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateES2CopyTexImageParameters
name|bool
name|ValidateES2CopyTexImageParameters
parameter_list|(
name|ValidationContext
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|isSubImage
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|)
block|{
name|GLenum
name|textureInternalFormat
init|=
name|GL_NONE
decl_stmt|;
if|if
condition|(
operator|!
name|ValidTexture2DDestinationTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid texture target"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidateCopyTexImageParametersBase
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|isSubImage
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
operator|&
name|textureInternalFormat
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
decl_stmt|;
name|GLenum
name|colorbufferFormat
init|=
name|framebuffer
operator|->
name|getReadColorbuffer
argument_list|()
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
specifier|const
specifier|auto
modifier|&
name|internalFormatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|textureInternalFormat
argument_list|)
decl_stmt|;
name|GLenum
name|textureFormat
init|=
name|internalFormatInfo
operator|.
name|format
decl_stmt|;
comment|// [OpenGL ES 2.0.24] table 3.9
if|if
condition|(
name|isSubImage
condition|)
block|{
switch|switch
condition|(
name|textureFormat
condition|)
block|{
case|case
name|GL_ALPHA
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_ALPHA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_LUMINANCE
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_R8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RG8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RED_EXT
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_R8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RG8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_R32F
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RG32F
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB32F
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA32F
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RG_EXT
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_RG8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RG32F
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB32F
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA32F
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RGB
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB32F
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA32F
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_LUMINANCE_ALPHA
case|:
case|case
name|GL_RGBA
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA32F
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
case|case
name|GL_ETC1_RGB8_OES
case|:
case|case
name|GL_ETC1_RGB8_LOSSY_DECODE_ANGLE
case|:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
case|case
name|GL_DEPTH_COMPONENT
case|:
case|case
name|GL_DEPTH_STENCIL_OES
case|:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|internalFormatInfo
operator|.
name|type
operator|==
name|GL_FLOAT
operator|&&
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureFloat
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_ALPHA
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_ALPHA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGRA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGR5_A1_ANGLEX
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_LUMINANCE
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_R8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RG8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGRA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGR5_A1_ANGLEX
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RED_EXT
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_R8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RG8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGRA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGR5_A1_ANGLEX
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RG_EXT
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_RG8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGRA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGR5_A1_ANGLEX
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RGB
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGRA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGR5_A1_ANGLEX
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_LUMINANCE_ALPHA
case|:
case|case
name|GL_RGBA
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGRA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGR5_A1_ANGLEX
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT5
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_ETC1_RGB8_OES
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|compressedETC1RGB8Texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_ETC1_RGB8_LOSSY_DECODE_ANGLE
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|lossyETCDecode
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"ETC1_RGB8_LOSSY_DECODE_ANGLE can't be copied to."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"ANGLE_lossy_etc_decode extension is not supported."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_DEPTH_COMPONENT
case|:
case|case
name|GL_DEPTH_COMPONENT16
case|:
case|case
name|GL_DEPTH_COMPONENT32_OES
case|:
case|case
name|GL_DEPTH_STENCIL_OES
case|:
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|depthTextures
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// If width or height is zero, it is a no-op.  Return false without setting an error.
return|return
operator|(
name|width
operator|>
literal|0
operator|&&
name|height
operator|>
literal|0
operator|)
return|;
block|}
DECL|function|ValidateES2TexStorageParameters
name|bool
name|ValidateES2TexStorageParameters
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
if|if
condition|(
name|target
operator|!=
name|GL_TEXTURE_2D
operator|&&
name|target
operator|!=
name|GL_TEXTURE_CUBE_MAP
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|width
operator|<
literal|1
operator|||
name|height
operator|<
literal|1
operator|||
name|levels
operator|<
literal|1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|target
operator|==
name|GL_TEXTURE_CUBE_MAP
operator|&&
name|width
operator|!=
name|height
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|levels
operator|!=
literal|1
operator|&&
name|levels
operator|!=
name|gl
operator|::
name|log2
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
operator|+
literal|1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatInfo
operator|.
name|format
operator|==
name|GL_NONE
operator|||
name|formatInfo
operator|.
name|type
operator|==
name|GL_NONE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
name|caps
operator|.
name|max2DTextureSize
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
name|caps
operator|.
name|max2DTextureSize
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP
case|:
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
name|caps
operator|.
name|maxCubeMapTextureSize
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
name|caps
operator|.
name|maxCubeMapTextureSize
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|levels
operator|!=
literal|1
operator|&&
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureNPOT
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|width
argument_list|)
operator|||
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|height
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT5
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_ETC1_RGB8_OES
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|compressedETC1RGB8Texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_ETC1_RGB8_LOSSY_DECODE_ANGLE
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|lossyETCDecode
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"ANGLE_lossy_etc_decode extension is not supported."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RGBA32F_EXT
case|:
case|case
name|GL_RGB32F_EXT
case|:
case|case
name|GL_ALPHA32F_EXT
case|:
case|case
name|GL_LUMINANCE32F_EXT
case|:
case|case
name|GL_LUMINANCE_ALPHA32F_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureFloat
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RGBA16F_EXT
case|:
case|case
name|GL_RGB16F_EXT
case|:
case|case
name|GL_ALPHA16F_EXT
case|:
case|case
name|GL_LUMINANCE16F_EXT
case|:
case|case
name|GL_LUMINANCE_ALPHA16F_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureHalfFloat
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_R8_EXT
case|:
case|case
name|GL_RG8_EXT
case|:
case|case
name|GL_R16F_EXT
case|:
case|case
name|GL_RG16F_EXT
case|:
case|case
name|GL_R32F_EXT
case|:
case|case
name|GL_RG32F_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureRG
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_DEPTH_COMPONENT16
case|:
case|case
name|GL_DEPTH_COMPONENT32_OES
case|:
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|depthTextures
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|target
operator|!=
name|GL_TEXTURE_2D
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ANGLE_depth_texture only supports 1-level textures
if|if
condition|(
name|levels
operator|!=
literal|1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
default|default:
break|break;
block|}
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
operator|||
name|texture
operator|->
name|id
argument_list|()
operator|==
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|texture
operator|->
name|getImmutableFormat
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|// check for combinations of format and type that are valid for ReadPixels
DECL|function|ValidES2ReadFormatType
name|bool
name|ValidES2ReadFormatType
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|GL_RGBA
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
break|break;
default|default:
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_BGRA_EXT
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
case|:
case|case
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
case|:
break|break;
default|default:
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RG_EXT
case|:
case|case
name|GL_RED_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureRG
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
break|break;
default|default:
return|return
literal|false
return|;
block|}
break|break;
default|default:
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateDiscardFramebufferEXT
name|bool
name|ValidateDiscardFramebufferEXT
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|numAttachments
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|discardFramebuffer
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|bool
name|defaultFramebuffer
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_FRAMEBUFFER
case|:
name|defaultFramebuffer
operator|=
operator|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetFramebuffer
argument_list|(
name|GL_FRAMEBUFFER
argument_list|)
operator|->
name|id
argument_list|()
operator|==
literal|0
operator|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid framebuffer target"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|ValidateDiscardFramebufferBase
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|,
name|defaultFramebuffer
argument_list|)
return|;
block|}
DECL|function|ValidateBindVertexArrayOES
name|bool
name|ValidateBindVertexArrayOES
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLuint
name|array
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|vertexArrayObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|ValidateBindVertexArrayBase
argument_list|(
name|context
argument_list|,
name|array
argument_list|)
return|;
block|}
DECL|function|ValidateDeleteVertexArraysOES
name|bool
name|ValidateDeleteVertexArraysOES
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLsizei
name|n
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|vertexArrayObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|ValidateDeleteVertexArraysBase
argument_list|(
name|context
argument_list|,
name|n
argument_list|)
return|;
block|}
DECL|function|ValidateGenVertexArraysOES
name|bool
name|ValidateGenVertexArraysOES
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLsizei
name|n
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|vertexArrayObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|ValidateGenVertexArraysBase
argument_list|(
name|context
argument_list|,
name|n
argument_list|)
return|;
block|}
DECL|function|ValidateIsVertexArrayOES
name|bool
name|ValidateIsVertexArrayOES
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|vertexArrayObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateProgramBinaryOES
name|bool
name|ValidateProgramBinaryOES
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLuint
name|program
parameter_list|,
name|GLenum
name|binaryFormat
parameter_list|,
specifier|const
name|void
modifier|*
name|binary
parameter_list|,
name|GLint
name|length
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|getProgramBinary
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|ValidateProgramBinaryBase
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
return|;
block|}
DECL|function|ValidateGetProgramBinaryOES
name|bool
name|ValidateGetProgramBinaryOES
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLenum
modifier|*
name|binaryFormat
parameter_list|,
name|void
modifier|*
name|binary
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|getProgramBinary
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|ValidateGetProgramBinaryBase
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|)
return|;
block|}
DECL|function|ValidDebugSource
specifier|static
name|bool
name|ValidDebugSource
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|bool
name|mustBeThirdPartyOrApplication
parameter_list|)
block|{
switch|switch
condition|(
name|source
condition|)
block|{
case|case
name|GL_DEBUG_SOURCE_API
case|:
case|case
name|GL_DEBUG_SOURCE_SHADER_COMPILER
case|:
case|case
name|GL_DEBUG_SOURCE_WINDOW_SYSTEM
case|:
case|case
name|GL_DEBUG_SOURCE_OTHER
case|:
comment|// Only THIRD_PARTY and APPLICATION sources are allowed to be manually inserted
return|return
operator|!
name|mustBeThirdPartyOrApplication
return|;
case|case
name|GL_DEBUG_SOURCE_THIRD_PARTY
case|:
case|case
name|GL_DEBUG_SOURCE_APPLICATION
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
DECL|function|ValidDebugType
specifier|static
name|bool
name|ValidDebugType
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_DEBUG_TYPE_ERROR
case|:
case|case
name|GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
case|:
case|case
name|GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
case|:
case|case
name|GL_DEBUG_TYPE_PERFORMANCE
case|:
case|case
name|GL_DEBUG_TYPE_PORTABILITY
case|:
case|case
name|GL_DEBUG_TYPE_OTHER
case|:
case|case
name|GL_DEBUG_TYPE_MARKER
case|:
case|case
name|GL_DEBUG_TYPE_PUSH_GROUP
case|:
case|case
name|GL_DEBUG_TYPE_POP_GROUP
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
DECL|function|ValidDebugSeverity
specifier|static
name|bool
name|ValidDebugSeverity
parameter_list|(
name|GLenum
name|severity
parameter_list|)
block|{
switch|switch
condition|(
name|severity
condition|)
block|{
case|case
name|GL_DEBUG_SEVERITY_HIGH
case|:
case|case
name|GL_DEBUG_SEVERITY_MEDIUM
case|:
case|case
name|GL_DEBUG_SEVERITY_LOW
case|:
case|case
name|GL_DEBUG_SEVERITY_NOTIFICATION
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
DECL|function|ValidateDebugMessageControlKHR
name|bool
name|ValidateDebugMessageControlKHR
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|source
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLenum
name|severity
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|ids
parameter_list|,
name|GLboolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|debug
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidDebugSource
argument_list|(
name|source
argument_list|,
literal|false
argument_list|)
operator|&&
name|source
operator|!=
name|GL_DONT_CARE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid debug source."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidDebugType
argument_list|(
name|type
argument_list|)
operator|&&
name|type
operator|!=
name|GL_DONT_CARE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid debug type."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidDebugSeverity
argument_list|(
name|severity
argument_list|)
operator|&&
name|severity
operator|!=
name|GL_DONT_CARE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid debug severity."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|source
operator|==
name|GL_DONT_CARE
operator|||
name|type
operator|==
name|GL_DONT_CARE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"If count is greater than zero, source and severity cannot be GL_DONT_CARE."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|severity
operator|!=
name|GL_DONT_CARE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"If count is greater than zero, severity must be GL_DONT_CARE."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateDebugMessageInsertKHR
name|bool
name|ValidateDebugMessageInsertKHR
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|source
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|GLenum
name|severity
parameter_list|,
name|GLsizei
name|length
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|buf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|debug
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDebug
argument_list|()
operator|.
name|isOutputEnabled
argument_list|()
condition|)
block|{
comment|// If the DEBUG_OUTPUT state is disabled calls to DebugMessageInsert are discarded and do
comment|// not generate an error.
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidDebugSeverity
argument_list|(
name|severity
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid debug severity."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidDebugType
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid debug type."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidDebugSource
argument_list|(
name|source
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid debug source."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|size_t
name|messageLength
init|=
operator|(
name|length
operator|<
literal|0
operator|)
condition|?
name|strlen
argument_list|(
name|buf
argument_list|)
else|:
name|length
decl_stmt|;
if|if
condition|(
name|messageLength
operator|>
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|maxDebugMessageLength
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"Message length is larger than GL_MAX_DEBUG_MESSAGE_LENGTH."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateDebugMessageCallbackKHR
name|bool
name|ValidateDebugMessageCallbackKHR
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLDEBUGPROCKHR
name|callback
parameter_list|,
specifier|const
name|void
modifier|*
name|userParam
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|debug
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateGetDebugMessageLogKHR
name|bool
name|ValidateGetDebugMessageLogKHR
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLuint
name|count
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLenum
modifier|*
name|sources
parameter_list|,
name|GLenum
modifier|*
name|types
parameter_list|,
name|GLuint
modifier|*
name|ids
parameter_list|,
name|GLenum
modifier|*
name|severities
parameter_list|,
name|GLsizei
modifier|*
name|lengths
parameter_list|,
name|GLchar
modifier|*
name|messageLog
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|debug
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|bufSize
operator|<
literal|0
operator|&&
name|messageLog
operator|!=
literal|nullptr
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"bufSize must be positive if messageLog is not null."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidatePushDebugGroupKHR
name|bool
name|ValidatePushDebugGroupKHR
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|source
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|GLsizei
name|length
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|debug
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidDebugSource
argument_list|(
name|source
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid debug source."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|size_t
name|messageLength
init|=
operator|(
name|length
operator|<
literal|0
operator|)
condition|?
name|strlen
argument_list|(
name|message
argument_list|)
else|:
name|length
decl_stmt|;
if|if
condition|(
name|messageLength
operator|>
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|maxDebugMessageLength
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"Message length is larger than GL_MAX_DEBUG_MESSAGE_LENGTH."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|size_t
name|currentStackSize
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDebug
argument_list|()
operator|.
name|getGroupStackDepth
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentStackSize
operator|>=
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|maxDebugGroupStackDepth
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_STACK_OVERFLOW
argument_list|,
literal|"Cannot push more than GL_MAX_DEBUG_GROUP_STACK_DEPTH debug groups."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidatePopDebugGroupKHR
name|bool
name|ValidatePopDebugGroupKHR
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|debug
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|size_t
name|currentStackSize
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDebug
argument_list|()
operator|.
name|getGroupStackDepth
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentStackSize
operator|<=
literal|1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_STACK_UNDERFLOW
argument_list|,
literal|"Cannot pop the default debug group."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateObjectIdentifierAndName
specifier|static
name|bool
name|ValidateObjectIdentifierAndName
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|identifier
parameter_list|,
name|GLuint
name|name
parameter_list|)
block|{
switch|switch
condition|(
name|identifier
condition|)
block|{
case|case
name|GL_BUFFER
case|:
if|if
condition|(
name|context
operator|->
name|getBuffer
argument_list|(
name|name
argument_list|)
operator|==
literal|nullptr
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"name is not a valid buffer."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|GL_SHADER
case|:
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|name
argument_list|)
operator|==
literal|nullptr
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"name is not a valid shader."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|GL_PROGRAM
case|:
if|if
condition|(
name|context
operator|->
name|getProgram
argument_list|(
name|name
argument_list|)
operator|==
literal|nullptr
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"name is not a valid program."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|GL_VERTEX_ARRAY
case|:
if|if
condition|(
name|context
operator|->
name|getVertexArray
argument_list|(
name|name
argument_list|)
operator|==
literal|nullptr
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"name is not a valid vertex array."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|GL_QUERY
case|:
if|if
condition|(
name|context
operator|->
name|getQuery
argument_list|(
name|name
argument_list|)
operator|==
literal|nullptr
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"name is not a valid query."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|GL_TRANSFORM_FEEDBACK
case|:
if|if
condition|(
name|context
operator|->
name|getTransformFeedback
argument_list|(
name|name
argument_list|)
operator|==
literal|nullptr
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"name is not a valid transform feedback."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|GL_SAMPLER
case|:
if|if
condition|(
name|context
operator|->
name|getSampler
argument_list|(
name|name
argument_list|)
operator|==
literal|nullptr
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"name is not a valid sampler."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|GL_TEXTURE
case|:
if|if
condition|(
name|context
operator|->
name|getTexture
argument_list|(
name|name
argument_list|)
operator|==
literal|nullptr
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"name is not a valid texture."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|GL_RENDERBUFFER
case|:
if|if
condition|(
name|context
operator|->
name|getRenderbuffer
argument_list|(
name|name
argument_list|)
operator|==
literal|nullptr
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"name is not a valid renderbuffer."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|GL_FRAMEBUFFER
case|:
if|if
condition|(
name|context
operator|->
name|getFramebuffer
argument_list|(
name|name
argument_list|)
operator|==
literal|nullptr
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"name is not a valid framebuffer."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid identifier."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateObjectLabelKHR
name|bool
name|ValidateObjectLabelKHR
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|identifier
parameter_list|,
name|GLuint
name|name
parameter_list|,
name|GLsizei
name|length
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|label
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|debug
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidateObjectIdentifierAndName
argument_list|(
name|context
argument_list|,
name|identifier
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|size_t
name|labelLength
init|=
operator|(
name|length
operator|<
literal|0
operator|)
condition|?
name|strlen
argument_list|(
name|label
argument_list|)
else|:
name|length
decl_stmt|;
if|if
condition|(
name|labelLength
operator|>
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|maxLabelLength
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"Label length is larger than GL_MAX_LABEL_LENGTH."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateGetObjectLabelKHR
name|bool
name|ValidateGetObjectLabelKHR
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|identifier
parameter_list|,
name|GLuint
name|name
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|label
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|debug
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|bufSize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"bufSize cannot be negative."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidateObjectIdentifierAndName
argument_list|(
name|context
argument_list|,
name|identifier
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Can no-op if bufSize is zero.
return|return
name|bufSize
operator|>
literal|0
return|;
block|}
DECL|function|ValidateObjectPtrName
specifier|static
name|bool
name|ValidateObjectPtrName
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
if|if
condition|(
name|context
operator|->
name|getFenceSync
argument_list|(
cast|reinterpret_cast
argument_list|<
name|GLsync
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|ptr
argument_list|)
argument_list|)
argument_list|)
operator|==
literal|nullptr
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"name is not a valid sync."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateObjectPtrLabelKHR
name|bool
name|ValidateObjectPtrLabelKHR
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|GLsizei
name|length
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|label
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|debug
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidateObjectPtrName
argument_list|(
name|context
argument_list|,
name|ptr
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|size_t
name|labelLength
init|=
operator|(
name|length
operator|<
literal|0
operator|)
condition|?
name|strlen
argument_list|(
name|label
argument_list|)
else|:
name|length
decl_stmt|;
if|if
condition|(
name|labelLength
operator|>
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|maxLabelLength
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"Label length is larger than GL_MAX_LABEL_LENGTH."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateGetObjectPtrLabelKHR
name|bool
name|ValidateGetObjectPtrLabelKHR
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|label
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|debug
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|bufSize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"bufSize cannot be negative."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidateObjectPtrName
argument_list|(
name|context
argument_list|,
name|ptr
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Can no-op if bufSize is zero.
return|return
name|bufSize
operator|>
literal|0
return|;
block|}
DECL|function|ValidateGetPointervKHR
name|bool
name|ValidateGetPointervKHR
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|void
modifier|*
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|debug
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// TODO: represent this in Context::getQueryParameterInfo.
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_DEBUG_CALLBACK_FUNCTION
case|:
case|case
name|GL_DEBUG_CALLBACK_USER_PARAM
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid pname."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateBlitFramebufferANGLE
name|bool
name|ValidateBlitFramebufferANGLE
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLint
name|srcX0
parameter_list|,
name|GLint
name|srcY0
parameter_list|,
name|GLint
name|srcX1
parameter_list|,
name|GLint
name|srcY1
parameter_list|,
name|GLint
name|dstX0
parameter_list|,
name|GLint
name|dstY0
parameter_list|,
name|GLint
name|dstX1
parameter_list|,
name|GLint
name|dstY1
parameter_list|,
name|GLbitfield
name|mask
parameter_list|,
name|GLenum
name|filter
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|framebufferBlit
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Blit extension not available."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|srcX1
operator|-
name|srcX0
operator|!=
name|dstX1
operator|-
name|dstX0
operator|||
name|srcY1
operator|-
name|srcY0
operator|!=
name|dstY1
operator|-
name|dstY0
condition|)
block|{
comment|// TODO(jmadill): Determine if this should be available on other implementations.
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Scaling and flipping in BlitFramebufferANGLE not supported by this implementation."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|filter
operator|==
name|GL_LINEAR
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Linear blit not supported in this extension"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|Framebuffer
modifier|*
name|readFramebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
decl_stmt|;
specifier|const
name|Framebuffer
modifier|*
name|drawFramebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|mask
operator|&
name|GL_COLOR_BUFFER_BIT
condition|)
block|{
specifier|const
name|FramebufferAttachment
modifier|*
name|readColorAttachment
init|=
name|readFramebuffer
operator|->
name|getReadColorbuffer
argument_list|()
decl_stmt|;
specifier|const
name|FramebufferAttachment
modifier|*
name|drawColorAttachment
init|=
name|drawFramebuffer
operator|->
name|getFirstColorbuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|readColorAttachment
operator|&&
name|drawColorAttachment
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|readColorAttachment
operator|->
name|type
argument_list|()
operator|==
name|GL_TEXTURE
operator|&&
name|readColorAttachment
operator|->
name|getTextureImageIndex
argument_list|()
operator|.
name|type
operator|==
name|GL_TEXTURE_2D
operator|)
operator|&&
name|readColorAttachment
operator|->
name|type
argument_list|()
operator|!=
name|GL_RENDERBUFFER
operator|&&
name|readColorAttachment
operator|->
name|type
argument_list|()
operator|!=
name|GL_FRAMEBUFFER_DEFAULT
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|size_t
name|drawbufferIdx
init|=
literal|0
init|;
name|drawbufferIdx
operator|<
name|drawFramebuffer
operator|->
name|getDrawbufferStateCount
argument_list|()
condition|;
operator|++
name|drawbufferIdx
control|)
block|{
specifier|const
name|FramebufferAttachment
modifier|*
name|attachment
init|=
name|drawFramebuffer
operator|->
name|getDrawBuffer
argument_list|(
name|drawbufferIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|attachment
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|attachment
operator|->
name|type
argument_list|()
operator|==
name|GL_TEXTURE
operator|&&
name|attachment
operator|->
name|getTextureImageIndex
argument_list|()
operator|.
name|type
operator|==
name|GL_TEXTURE_2D
operator|)
operator|&&
name|attachment
operator|->
name|type
argument_list|()
operator|!=
name|GL_RENDERBUFFER
operator|&&
name|attachment
operator|->
name|type
argument_list|()
operator|!=
name|GL_FRAMEBUFFER_DEFAULT
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Return an error if the destination formats do not match
if|if
condition|(
name|attachment
operator|->
name|getInternalFormat
argument_list|()
operator|!=
name|readColorAttachment
operator|->
name|getInternalFormat
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
name|int
name|readSamples
init|=
name|readFramebuffer
operator|->
name|getSamples
argument_list|(
name|context
operator|->
name|getData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|readSamples
operator|!=
literal|0
operator|&&
name|IsPartialBlit
argument_list|(
name|context
argument_list|,
name|readColorAttachment
argument_list|,
name|drawColorAttachment
argument_list|,
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
name|GLenum
name|masks
index|[]
init|=
block|{
name|GL_DEPTH_BUFFER_BIT
block|,
name|GL_STENCIL_BUFFER_BIT
block|}
decl_stmt|;
name|GLenum
name|attachments
index|[]
init|=
block|{
name|GL_DEPTH_ATTACHMENT
block|,
name|GL_STENCIL_ATTACHMENT
block|}
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|mask
operator|&
name|masks
index|[
name|i
index|]
condition|)
block|{
specifier|const
name|FramebufferAttachment
modifier|*
name|readBuffer
init|=
name|readFramebuffer
operator|->
name|getAttachment
argument_list|(
name|attachments
index|[
name|i
index|]
argument_list|)
decl_stmt|;
specifier|const
name|FramebufferAttachment
modifier|*
name|drawBuffer
init|=
name|drawFramebuffer
operator|->
name|getAttachment
argument_list|(
name|attachments
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|readBuffer
operator|&&
name|drawBuffer
condition|)
block|{
if|if
condition|(
name|IsPartialBlit
argument_list|(
name|context
argument_list|,
name|readBuffer
argument_list|,
name|drawBuffer
argument_list|,
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|)
condition|)
block|{
comment|// only whole-buffer copies are permitted
name|ERR
argument_list|(
literal|"Only whole-buffer depth and stencil blits are supported by this "
literal|"implementation."
argument_list|)
expr_stmt|;
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|readBuffer
operator|->
name|getSamples
argument_list|()
operator|!=
literal|0
operator|||
name|drawBuffer
operator|->
name|getSamples
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
name|ValidateBlitFramebufferParameters
argument_list|(
name|context
argument_list|,
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|)
return|;
block|}
DECL|function|ValidateClear
name|bool
name|ValidateClear
parameter_list|(
name|ValidationContext
modifier|*
name|context
parameter_list|,
name|GLbitfield
name|mask
parameter_list|)
block|{
specifier|const
name|Framebuffer
modifier|*
name|framebufferObject
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|framebufferObject
argument_list|)
expr_stmt|;
if|if
condition|(
name|framebufferObject
operator|->
name|checkStatus
argument_list|(
name|context
operator|->
name|getData
argument_list|()
argument_list|)
operator|!=
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_FRAMEBUFFER_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|mask
operator|&
operator|~
operator|(
name|GL_COLOR_BUFFER_BIT
operator||
name|GL_DEPTH_BUFFER_BIT
operator||
name|GL_STENCIL_BUFFER_BIT
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateDrawBuffersEXT
name|bool
name|ValidateDrawBuffersEXT
parameter_list|(
name|ValidationContext
modifier|*
name|context
parameter_list|,
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|bufs
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|drawBuffers
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not supported."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|ValidateDrawBuffersBase
argument_list|(
name|context
argument_list|,
name|n
argument_list|,
name|bufs
argument_list|)
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace gl
end_comment
end_unit
