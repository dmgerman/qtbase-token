begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Framebuffer.cpp: Implements the gl::Framebuffer class. Implements GL framebuffer
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4 page 105.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Config.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Context.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Surface.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/FramebufferImpl.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/ImplFactory.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/RenderbufferImpl.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/Workarounds.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
namespace|namespace
block|{
DECL|function|DeleteMatchingAttachment
name|void
name|DeleteMatchingAttachment
parameter_list|(
name|FramebufferAttachment
modifier|*
modifier|&
name|attachment
parameter_list|,
name|GLenum
name|matchType
parameter_list|,
name|GLuint
name|matchId
parameter_list|)
block|{
if|if
condition|(
name|attachment
operator|&&
name|attachment
operator|->
name|type
argument_list|()
operator|==
name|matchType
operator|&&
name|attachment
operator|->
name|id
argument_list|()
operator|==
name|matchId
condition|)
block|{
name|SafeDelete
argument_list|(
name|attachment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|Data
name|Framebuffer
operator|::
name|Data
operator|::
name|Data
parameter_list|(
specifier|const
name|Caps
modifier|&
name|caps
parameter_list|)
member_init_list|:
name|mColorAttachments
argument_list|(
name|caps
operator|.
name|maxColorAttachments
argument_list|,
literal|nullptr
argument_list|)
member_init_list|,
name|mDepthAttachment
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mStencilAttachment
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mDrawBufferStates
argument_list|(
name|caps
operator|.
name|maxDrawBuffers
argument_list|,
name|GL_NONE
argument_list|)
member_init_list|,
name|mReadBufferState
argument_list|(
name|GL_COLOR_ATTACHMENT0_EXT
argument_list|)
block|{
name|mDrawBufferStates
index|[
literal|0
index|]
operator|=
name|GL_COLOR_ATTACHMENT0_EXT
expr_stmt|;
block|}
DECL|function|~Data
name|Framebuffer
operator|::
name|Data
operator|::
name|~
name|Data
parameter_list|()
block|{
for|for
control|(
name|auto
name|it
init|=
name|mColorAttachments
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|mColorAttachments
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|SafeDelete
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
block|}
name|SafeDelete
argument_list|(
name|mDepthAttachment
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mStencilAttachment
argument_list|)
expr_stmt|;
block|}
DECL|function|getReadAttachment
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|Data
operator|::
name|getReadAttachment
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|mReadBufferState
operator|==
name|GL_BACK
operator|||
operator|(
name|mReadBufferState
operator|>=
name|GL_COLOR_ATTACHMENT0
operator|&&
name|mReadBufferState
operator|<=
name|GL_COLOR_ATTACHMENT15
operator|)
argument_list|)
expr_stmt|;
name|size_t
name|readIndex
init|=
operator|(
name|mReadBufferState
operator|==
name|GL_BACK
condition|?
literal|0
else|:
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|mReadBufferState
operator|-
name|GL_COLOR_ATTACHMENT0
argument_list|)
operator|)
decl_stmt|;
name|ASSERT
argument_list|(
name|readIndex
operator|<
name|mColorAttachments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mColorAttachments
index|[
name|readIndex
index|]
return|;
block|}
DECL|function|getFirstColorAttachment
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|Data
operator|::
name|getFirstColorAttachment
parameter_list|()
specifier|const
block|{
for|for
control|(
name|auto
name|it
init|=
name|mColorAttachments
operator|.
name|cbegin
argument_list|()
init|;
name|it
operator|!=
name|mColorAttachments
operator|.
name|cend
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|*
name|it
operator|!=
literal|nullptr
condition|)
block|{
return|return
operator|*
name|it
return|;
block|}
block|}
return|return
literal|nullptr
return|;
block|}
DECL|function|getDepthOrStencilAttachment
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|Data
operator|::
name|getDepthOrStencilAttachment
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mDepthAttachment
operator|!=
literal|nullptr
condition|?
name|mDepthAttachment
else|:
name|mStencilAttachment
operator|)
return|;
block|}
DECL|function|Framebuffer
name|Framebuffer
operator|::
name|Framebuffer
parameter_list|(
specifier|const
name|Caps
modifier|&
name|caps
parameter_list|,
name|rx
operator|::
name|ImplFactory
modifier|*
name|factory
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|mData
argument_list|(
name|caps
argument_list|)
member_init_list|,
name|mImpl
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mId
argument_list|(
name|id
argument_list|)
block|{
if|if
condition|(
name|mId
operator|==
literal|0
condition|)
block|{
name|mImpl
operator|=
name|factory
operator|->
name|createDefaultFramebuffer
argument_list|(
name|mData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mImpl
operator|=
name|factory
operator|->
name|createFramebuffer
argument_list|(
name|mData
argument_list|)
expr_stmt|;
block|}
name|ASSERT
argument_list|(
name|mImpl
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
block|}
DECL|function|~Framebuffer
name|Framebuffer
operator|::
name|~
name|Framebuffer
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mImpl
argument_list|)
expr_stmt|;
block|}
DECL|function|detachTexture
name|void
name|Framebuffer
operator|::
name|detachTexture
parameter_list|(
name|GLuint
name|textureId
parameter_list|)
block|{
name|detachResourceById
argument_list|(
name|GL_TEXTURE
argument_list|,
name|textureId
argument_list|)
expr_stmt|;
block|}
DECL|function|detachRenderbuffer
name|void
name|Framebuffer
operator|::
name|detachRenderbuffer
parameter_list|(
name|GLuint
name|renderbufferId
parameter_list|)
block|{
name|detachResourceById
argument_list|(
name|GL_RENDERBUFFER
argument_list|,
name|renderbufferId
argument_list|)
expr_stmt|;
block|}
DECL|function|detachResourceById
name|void
name|Framebuffer
operator|::
name|detachResourceById
parameter_list|(
name|GLenum
name|resourceType
parameter_list|,
name|GLuint
name|resourceId
parameter_list|)
block|{
for|for
control|(
name|auto
name|it
init|=
name|mData
operator|.
name|mColorAttachments
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|mData
operator|.
name|mColorAttachments
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|DeleteMatchingAttachment
argument_list|(
operator|*
name|it
argument_list|,
name|resourceType
argument_list|,
name|resourceId
argument_list|)
expr_stmt|;
block|}
name|DeleteMatchingAttachment
argument_list|(
name|mData
operator|.
name|mDepthAttachment
argument_list|,
name|resourceType
argument_list|,
name|resourceId
argument_list|)
expr_stmt|;
name|DeleteMatchingAttachment
argument_list|(
name|mData
operator|.
name|mStencilAttachment
argument_list|,
name|resourceType
argument_list|,
name|resourceId
argument_list|)
expr_stmt|;
block|}
DECL|function|getColorbuffer
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getColorbuffer
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|colorAttachment
operator|<
name|mData
operator|.
name|mColorAttachments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mData
operator|.
name|mColorAttachments
index|[
name|colorAttachment
index|]
return|;
block|}
DECL|function|getDepthbuffer
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getDepthbuffer
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|mDepthAttachment
return|;
block|}
DECL|function|getStencilbuffer
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getStencilbuffer
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|mStencilAttachment
return|;
block|}
DECL|function|getDepthStencilBuffer
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getDepthStencilBuffer
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|hasValidDepthStencil
argument_list|()
condition|?
name|mData
operator|.
name|mDepthAttachment
else|:
name|NULL
operator|)
return|;
block|}
DECL|function|getDepthOrStencilbuffer
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getDepthOrStencilbuffer
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getDepthOrStencilAttachment
argument_list|()
return|;
block|}
DECL|function|getReadColorbuffer
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getReadColorbuffer
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getReadAttachment
argument_list|()
return|;
block|}
DECL|function|getReadColorbufferType
name|GLenum
name|Framebuffer
operator|::
name|getReadColorbufferType
parameter_list|()
specifier|const
block|{
name|FramebufferAttachment
modifier|*
name|readAttachment
init|=
name|mData
operator|.
name|getReadAttachment
argument_list|()
decl_stmt|;
return|return
operator|(
name|readAttachment
condition|?
name|readAttachment
operator|->
name|type
argument_list|()
else|:
name|GL_NONE
operator|)
return|;
block|}
DECL|function|getFirstColorbuffer
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getFirstColorbuffer
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getFirstColorAttachment
argument_list|()
return|;
block|}
DECL|function|getAttachment
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getAttachment
parameter_list|(
name|GLenum
name|attachment
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|attachment
operator|>=
name|GL_COLOR_ATTACHMENT0
operator|&&
name|attachment
operator|<=
name|GL_COLOR_ATTACHMENT15
condition|)
block|{
return|return
name|getColorbuffer
argument_list|(
name|attachment
operator|-
name|GL_COLOR_ATTACHMENT0
argument_list|)
return|;
block|}
else|else
block|{
switch|switch
condition|(
name|attachment
condition|)
block|{
case|case
name|GL_COLOR
case|:
case|case
name|GL_BACK
case|:
return|return
name|getColorbuffer
argument_list|(
literal|0
argument_list|)
return|;
case|case
name|GL_DEPTH
case|:
case|case
name|GL_DEPTH_ATTACHMENT
case|:
return|return
name|getDepthbuffer
argument_list|()
return|;
case|case
name|GL_STENCIL
case|:
case|case
name|GL_STENCIL_ATTACHMENT
case|:
return|return
name|getStencilbuffer
argument_list|()
return|;
case|case
name|GL_DEPTH_STENCIL
case|:
case|case
name|GL_DEPTH_STENCIL_ATTACHMENT
case|:
return|return
name|getDepthStencilBuffer
argument_list|()
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|NULL
return|;
block|}
block|}
block|}
DECL|function|getDrawBufferState
name|GLenum
name|Framebuffer
operator|::
name|getDrawBufferState
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|colorAttachment
operator|<
name|mData
operator|.
name|mDrawBufferStates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mData
operator|.
name|mDrawBufferStates
index|[
name|colorAttachment
index|]
return|;
block|}
DECL|function|setDrawBuffers
name|void
name|Framebuffer
operator|::
name|setDrawBuffers
parameter_list|(
name|size_t
name|count
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|buffers
parameter_list|)
block|{
name|auto
operator|&
name|drawStates
operator|=
name|mData
operator|.
name|mDrawBufferStates
expr_stmt|;
name|ASSERT
argument_list|(
name|count
operator|<=
name|drawStates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|std
operator|::
name|copy
argument_list|(
name|buffers
argument_list|,
name|buffers
operator|+
name|count
argument_list|,
name|drawStates
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|std
operator|::
name|fill
argument_list|(
name|drawStates
operator|.
name|begin
argument_list|()
operator|+
name|count
argument_list|,
name|drawStates
operator|.
name|end
argument_list|()
argument_list|,
name|GL_NONE
argument_list|)
expr_stmt|;
name|mImpl
operator|->
name|setDrawBuffers
argument_list|(
name|count
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
block|}
DECL|function|getReadBufferState
name|GLenum
name|Framebuffer
operator|::
name|getReadBufferState
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|mReadBufferState
return|;
block|}
DECL|function|setReadBuffer
name|void
name|Framebuffer
operator|::
name|setReadBuffer
parameter_list|(
name|GLenum
name|buffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|buffer
operator|==
name|GL_BACK
operator|||
name|buffer
operator|==
name|GL_NONE
operator|||
operator|(
name|buffer
operator|>=
name|GL_COLOR_ATTACHMENT0
operator|&&
operator|(
name|buffer
operator|-
name|GL_COLOR_ATTACHMENT0
operator|)
operator|<
name|mData
operator|.
name|mColorAttachments
operator|.
name|size
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|mData
operator|.
name|mReadBufferState
operator|=
name|buffer
expr_stmt|;
name|mImpl
operator|->
name|setReadBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
DECL|function|isEnabledColorAttachment
name|bool
name|Framebuffer
operator|::
name|isEnabledColorAttachment
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|colorAttachment
operator|<
name|mData
operator|.
name|mColorAttachments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|mData
operator|.
name|mColorAttachments
index|[
name|colorAttachment
index|]
operator|&&
name|mData
operator|.
name|mDrawBufferStates
index|[
name|colorAttachment
index|]
operator|!=
name|GL_NONE
operator|)
return|;
block|}
DECL|function|hasEnabledColorAttachment
name|bool
name|Framebuffer
operator|::
name|hasEnabledColorAttachment
parameter_list|()
specifier|const
block|{
for|for
control|(
name|size_t
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|mData
operator|.
name|mColorAttachments
operator|.
name|size
argument_list|()
condition|;
operator|++
name|colorAttachment
control|)
block|{
if|if
condition|(
name|isEnabledColorAttachment
argument_list|(
name|colorAttachment
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|hasStencil
name|bool
name|Framebuffer
operator|::
name|hasStencil
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mData
operator|.
name|mStencilAttachment
operator|&&
name|mData
operator|.
name|mStencilAttachment
operator|->
name|getStencilSize
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
DECL|function|usingExtendedDrawBuffers
name|bool
name|Framebuffer
operator|::
name|usingExtendedDrawBuffers
parameter_list|()
specifier|const
block|{
for|for
control|(
name|size_t
name|colorAttachment
init|=
literal|1
init|;
name|colorAttachment
operator|<
name|mData
operator|.
name|mColorAttachments
operator|.
name|size
argument_list|()
condition|;
operator|++
name|colorAttachment
control|)
block|{
if|if
condition|(
name|isEnabledColorAttachment
argument_list|(
name|colorAttachment
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|checkStatus
name|GLenum
name|Framebuffer
operator|::
name|checkStatus
parameter_list|(
specifier|const
name|gl
operator|::
name|Data
modifier|&
name|data
parameter_list|)
specifier|const
block|{
comment|// The default framebuffer *must* always be complete, though it may not be
comment|// subject to the same rules as application FBOs. ie, it could have 0x0 size.
if|if
condition|(
name|mId
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_COMPLETE
return|;
block|}
name|int
name|width
init|=
literal|0
decl_stmt|;
name|int
name|height
init|=
literal|0
decl_stmt|;
name|unsigned
name|int
name|colorbufferSize
init|=
literal|0
decl_stmt|;
name|int
name|samples
init|=
operator|-
literal|1
decl_stmt|;
name|bool
name|missingAttachment
init|=
literal|true
decl_stmt|;
for|for
control|(
name|auto
name|it
init|=
name|mData
operator|.
name|mColorAttachments
operator|.
name|cbegin
argument_list|()
init|;
name|it
operator|!=
name|mData
operator|.
name|mColorAttachments
operator|.
name|cend
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
specifier|auto
modifier|&
name|colorAttachment
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
name|colorAttachment
operator|!=
literal|nullptr
condition|)
block|{
if|if
condition|(
name|colorAttachment
operator|->
name|getWidth
argument_list|()
operator|==
literal|0
operator|||
name|colorAttachment
operator|->
name|getHeight
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
name|GLenum
name|internalformat
init|=
name|colorAttachment
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
specifier|const
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|data
operator|.
name|textureCaps
operator|->
name|get
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
specifier|const
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorAttachment
operator|->
name|type
argument_list|()
operator|==
name|GL_TEXTURE
condition|)
block|{
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
if|if
condition|(
name|formatInfo
operator|.
name|depthBits
operator|>
literal|0
operator|||
name|formatInfo
operator|.
name|stencilBits
operator|>
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|colorAttachment
operator|->
name|type
argument_list|()
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
operator|||
name|formatInfo
operator|.
name|depthBits
operator|>
literal|0
operator|||
name|formatInfo
operator|.
name|stencilBits
operator|>
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
if|if
condition|(
operator|!
name|missingAttachment
condition|)
block|{
comment|// all color attachments must have the same width and height
if|if
condition|(
name|colorAttachment
operator|->
name|getWidth
argument_list|()
operator|!=
name|width
operator|||
name|colorAttachment
operator|->
name|getHeight
argument_list|()
operator|!=
name|height
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
return|;
block|}
comment|// APPLE_framebuffer_multisample, which EXT_draw_buffers refers to, requires that
comment|// all color attachments have the same number of samples for the FBO to be complete.
if|if
condition|(
name|colorAttachment
operator|->
name|getSamples
argument_list|()
operator|!=
name|samples
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
return|;
block|}
comment|// in GLES 2.0, all color attachments attachments must have the same number of bitplanes
comment|// in GLES 3.0, there is no such restriction
if|if
condition|(
name|data
operator|.
name|clientVersion
operator|<
literal|3
condition|)
block|{
if|if
condition|(
name|formatInfo
operator|.
name|pixelBytes
operator|!=
name|colorbufferSize
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
block|}
block|}
else|else
block|{
name|width
operator|=
name|colorAttachment
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|height
operator|=
name|colorAttachment
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|samples
operator|=
name|colorAttachment
operator|->
name|getSamples
argument_list|()
expr_stmt|;
name|colorbufferSize
operator|=
name|formatInfo
operator|.
name|pixelBytes
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|const
name|FramebufferAttachment
modifier|*
name|depthAttachment
init|=
name|mData
operator|.
name|mDepthAttachment
decl_stmt|;
if|if
condition|(
name|depthAttachment
operator|!=
literal|nullptr
condition|)
block|{
if|if
condition|(
name|depthAttachment
operator|->
name|getWidth
argument_list|()
operator|==
literal|0
operator|||
name|depthAttachment
operator|->
name|getHeight
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
name|GLenum
name|internalformat
init|=
name|depthAttachment
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
specifier|const
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|data
operator|.
name|textureCaps
operator|->
name|get
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
specifier|const
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|depthAttachment
operator|->
name|type
argument_list|()
operator|==
name|GL_TEXTURE
condition|)
block|{
comment|// depth texture attachments require OES/ANGLE_depth_texture
if|if
condition|(
operator|!
name|data
operator|.
name|extensions
operator|->
name|depthTextures
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
if|if
condition|(
name|formatInfo
operator|.
name|depthBits
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|depthAttachment
operator|->
name|type
argument_list|()
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
operator|||
name|formatInfo
operator|.
name|depthBits
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
if|if
condition|(
name|missingAttachment
condition|)
block|{
name|width
operator|=
name|depthAttachment
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|height
operator|=
name|depthAttachment
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|samples
operator|=
name|depthAttachment
operator|->
name|getSamples
argument_list|()
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|width
operator|!=
name|depthAttachment
operator|->
name|getWidth
argument_list|()
operator|||
name|height
operator|!=
name|depthAttachment
operator|->
name|getHeight
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
return|;
block|}
elseif|else
if|if
condition|(
name|samples
operator|!=
name|depthAttachment
operator|->
name|getSamples
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
return|;
block|}
block|}
specifier|const
name|FramebufferAttachment
modifier|*
name|stencilAttachment
init|=
name|mData
operator|.
name|mStencilAttachment
decl_stmt|;
if|if
condition|(
name|stencilAttachment
condition|)
block|{
if|if
condition|(
name|stencilAttachment
operator|->
name|getWidth
argument_list|()
operator|==
literal|0
operator|||
name|stencilAttachment
operator|->
name|getHeight
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
name|GLenum
name|internalformat
init|=
name|stencilAttachment
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
specifier|const
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|data
operator|.
name|textureCaps
operator|->
name|get
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
specifier|const
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|stencilAttachment
operator|->
name|type
argument_list|()
operator|==
name|GL_TEXTURE
condition|)
block|{
comment|// texture stencil attachments come along as part
comment|// of OES_packed_depth_stencil + OES/ANGLE_depth_texture
if|if
condition|(
operator|!
name|data
operator|.
name|extensions
operator|->
name|depthTextures
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
if|if
condition|(
name|formatInfo
operator|.
name|stencilBits
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|stencilAttachment
operator|->
name|type
argument_list|()
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
operator|||
name|formatInfo
operator|.
name|stencilBits
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
if|if
condition|(
name|missingAttachment
condition|)
block|{
name|width
operator|=
name|stencilAttachment
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|height
operator|=
name|stencilAttachment
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|samples
operator|=
name|stencilAttachment
operator|->
name|getSamples
argument_list|()
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|width
operator|!=
name|stencilAttachment
operator|->
name|getWidth
argument_list|()
operator|||
name|height
operator|!=
name|stencilAttachment
operator|->
name|getHeight
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
return|;
block|}
elseif|else
if|if
condition|(
name|samples
operator|!=
name|stencilAttachment
operator|->
name|getSamples
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
return|;
block|}
block|}
comment|// if we have both a depth and stencil buffer, they must refer to the same object
comment|// since we only support packed_depth_stencil and not separate depth and stencil
if|if
condition|(
name|depthAttachment
operator|&&
name|stencilAttachment
operator|&&
operator|!
name|hasValidDepthStencil
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
comment|// we need to have at least one attachment to be complete
if|if
condition|(
name|missingAttachment
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
return|;
block|}
return|return
name|mImpl
operator|->
name|checkStatus
argument_list|()
return|;
block|}
DECL|function|invalidate
name|Error
name|Framebuffer
operator|::
name|invalidate
parameter_list|(
name|size_t
name|count
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|)
block|{
return|return
name|mImpl
operator|->
name|invalidate
argument_list|(
name|count
argument_list|,
name|attachments
argument_list|)
return|;
block|}
DECL|function|invalidateSub
name|Error
name|Framebuffer
operator|::
name|invalidateSub
parameter_list|(
name|size_t
name|count
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|&
name|area
parameter_list|)
block|{
return|return
name|mImpl
operator|->
name|invalidateSub
argument_list|(
name|count
argument_list|,
name|attachments
argument_list|,
name|area
argument_list|)
return|;
block|}
DECL|function|clear
name|Error
name|Framebuffer
operator|::
name|clear
parameter_list|(
specifier|const
name|gl
operator|::
name|Data
modifier|&
name|data
parameter_list|,
name|GLbitfield
name|mask
parameter_list|)
block|{
return|return
name|mImpl
operator|->
name|clear
argument_list|(
name|data
argument_list|,
name|mask
argument_list|)
return|;
block|}
DECL|function|clearBufferfv
name|Error
name|Framebuffer
operator|::
name|clearBufferfv
parameter_list|(
specifier|const
name|State
modifier|&
name|state
parameter_list|,
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
return|return
name|mImpl
operator|->
name|clearBufferfv
argument_list|(
name|state
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|values
argument_list|)
return|;
block|}
DECL|function|clearBufferuiv
name|Error
name|Framebuffer
operator|::
name|clearBufferuiv
parameter_list|(
specifier|const
name|State
modifier|&
name|state
parameter_list|,
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|values
parameter_list|)
block|{
return|return
name|mImpl
operator|->
name|clearBufferuiv
argument_list|(
name|state
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|values
argument_list|)
return|;
block|}
DECL|function|clearBufferiv
name|Error
name|Framebuffer
operator|::
name|clearBufferiv
parameter_list|(
specifier|const
name|State
modifier|&
name|state
parameter_list|,
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLint
modifier|*
name|values
parameter_list|)
block|{
return|return
name|mImpl
operator|->
name|clearBufferiv
argument_list|(
name|state
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|values
argument_list|)
return|;
block|}
DECL|function|clearBufferfi
name|Error
name|Framebuffer
operator|::
name|clearBufferfi
parameter_list|(
specifier|const
name|State
modifier|&
name|state
parameter_list|,
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
name|GLfloat
name|depth
parameter_list|,
name|GLint
name|stencil
parameter_list|)
block|{
return|return
name|mImpl
operator|->
name|clearBufferfi
argument_list|(
name|state
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|depth
argument_list|,
name|stencil
argument_list|)
return|;
block|}
DECL|function|getImplementationColorReadFormat
name|GLenum
name|Framebuffer
operator|::
name|getImplementationColorReadFormat
parameter_list|()
specifier|const
block|{
return|return
name|mImpl
operator|->
name|getImplementationColorReadFormat
argument_list|()
return|;
block|}
DECL|function|getImplementationColorReadType
name|GLenum
name|Framebuffer
operator|::
name|getImplementationColorReadType
parameter_list|()
specifier|const
block|{
return|return
name|mImpl
operator|->
name|getImplementationColorReadType
argument_list|()
return|;
block|}
DECL|function|readPixels
name|Error
name|Framebuffer
operator|::
name|readPixels
parameter_list|(
specifier|const
name|gl
operator|::
name|State
modifier|&
name|state
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|&
name|area
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLvoid
modifier|*
name|pixels
parameter_list|)
specifier|const
block|{
return|return
name|mImpl
operator|->
name|readPixels
argument_list|(
name|state
argument_list|,
name|area
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
return|;
block|}
DECL|function|blit
name|Error
name|Framebuffer
operator|::
name|blit
parameter_list|(
specifier|const
name|gl
operator|::
name|State
modifier|&
name|state
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|&
name|sourceArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|&
name|destArea
parameter_list|,
name|GLbitfield
name|mask
parameter_list|,
name|GLenum
name|filter
parameter_list|,
specifier|const
name|gl
operator|::
name|Framebuffer
modifier|*
name|sourceFramebuffer
parameter_list|)
block|{
return|return
name|mImpl
operator|->
name|blit
argument_list|(
name|state
argument_list|,
name|sourceArea
argument_list|,
name|destArea
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|,
name|sourceFramebuffer
argument_list|)
return|;
block|}
DECL|function|getSamples
name|int
name|Framebuffer
operator|::
name|getSamples
parameter_list|(
specifier|const
name|gl
operator|::
name|Data
modifier|&
name|data
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|checkStatus
argument_list|(
name|data
argument_list|)
operator|==
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
comment|// for a complete framebuffer, all attachments must have the same sample count
comment|// in this case return the first nonzero sample size
for|for
control|(
name|auto
name|it
init|=
name|mData
operator|.
name|mColorAttachments
operator|.
name|cbegin
argument_list|()
init|;
name|it
operator|!=
name|mData
operator|.
name|mColorAttachments
operator|.
name|cend
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|*
name|it
operator|!=
literal|nullptr
condition|)
block|{
return|return
operator|(
operator|*
name|it
operator|)
operator|->
name|getSamples
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|function|hasValidDepthStencil
name|bool
name|Framebuffer
operator|::
name|hasValidDepthStencil
parameter_list|()
specifier|const
block|{
comment|// A valid depth-stencil attachment has the same resource bound to both the
comment|// depth and stencil attachment points.
return|return
operator|(
name|mData
operator|.
name|mDepthAttachment
operator|&&
name|mData
operator|.
name|mStencilAttachment
operator|&&
name|mData
operator|.
name|mDepthAttachment
operator|->
name|type
argument_list|()
operator|==
name|mData
operator|.
name|mStencilAttachment
operator|->
name|type
argument_list|()
operator|&&
name|mData
operator|.
name|mDepthAttachment
operator|->
name|id
argument_list|()
operator|==
name|mData
operator|.
name|mStencilAttachment
operator|->
name|id
argument_list|()
operator|)
return|;
block|}
DECL|function|setTextureAttachment
name|void
name|Framebuffer
operator|::
name|setTextureAttachment
parameter_list|(
name|GLenum
name|attachment
parameter_list|,
name|Texture
modifier|*
name|texture
parameter_list|,
specifier|const
name|ImageIndex
modifier|&
name|imageIndex
parameter_list|)
block|{
name|setAttachment
argument_list|(
name|attachment
argument_list|,
operator|new
name|TextureAttachment
argument_list|(
name|attachment
argument_list|,
name|texture
argument_list|,
name|imageIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setRenderbufferAttachment
name|void
name|Framebuffer
operator|::
name|setRenderbufferAttachment
parameter_list|(
name|GLenum
name|attachment
parameter_list|,
name|Renderbuffer
modifier|*
name|renderbuffer
parameter_list|)
block|{
name|setAttachment
argument_list|(
name|attachment
argument_list|,
operator|new
name|RenderbufferAttachment
argument_list|(
name|attachment
argument_list|,
name|renderbuffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setNULLAttachment
name|void
name|Framebuffer
operator|::
name|setNULLAttachment
parameter_list|(
name|GLenum
name|attachment
parameter_list|)
block|{
name|setAttachment
argument_list|(
name|attachment
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
DECL|function|setAttachment
name|void
name|Framebuffer
operator|::
name|setAttachment
parameter_list|(
name|GLenum
name|attachment
parameter_list|,
name|FramebufferAttachment
modifier|*
name|attachmentObj
parameter_list|)
block|{
if|if
condition|(
name|attachment
operator|>=
name|GL_COLOR_ATTACHMENT0
operator|&&
name|attachment
operator|<
operator|(
name|GL_COLOR_ATTACHMENT0
operator|+
name|mData
operator|.
name|mColorAttachments
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
name|size_t
name|colorAttachment
init|=
name|attachment
operator|-
name|GL_COLOR_ATTACHMENT0
decl_stmt|;
name|SafeDelete
argument_list|(
name|mData
operator|.
name|mColorAttachments
index|[
name|colorAttachment
index|]
argument_list|)
expr_stmt|;
name|mData
operator|.
name|mColorAttachments
index|[
name|colorAttachment
index|]
operator|=
name|attachmentObj
expr_stmt|;
name|mImpl
operator|->
name|setColorAttachment
argument_list|(
name|colorAttachment
argument_list|,
name|attachmentObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attachment
operator|==
name|GL_BACK
condition|)
block|{
name|SafeDelete
argument_list|(
name|mData
operator|.
name|mColorAttachments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|mData
operator|.
name|mColorAttachments
index|[
literal|0
index|]
operator|=
name|attachmentObj
expr_stmt|;
name|mImpl
operator|->
name|setColorAttachment
argument_list|(
literal|0
argument_list|,
name|attachmentObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attachment
operator|==
name|GL_DEPTH_ATTACHMENT
operator|||
name|attachment
operator|==
name|GL_DEPTH
condition|)
block|{
name|SafeDelete
argument_list|(
name|mData
operator|.
name|mDepthAttachment
argument_list|)
expr_stmt|;
name|mData
operator|.
name|mDepthAttachment
operator|=
name|attachmentObj
expr_stmt|;
name|mImpl
operator|->
name|setDepthAttachment
argument_list|(
name|attachmentObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attachment
operator|==
name|GL_STENCIL_ATTACHMENT
operator|||
name|attachment
operator|==
name|GL_STENCIL
condition|)
block|{
name|SafeDelete
argument_list|(
name|mData
operator|.
name|mStencilAttachment
argument_list|)
expr_stmt|;
name|mData
operator|.
name|mStencilAttachment
operator|=
name|attachmentObj
expr_stmt|;
name|mImpl
operator|->
name|setStencilAttachment
argument_list|(
name|attachmentObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attachment
operator|==
name|GL_DEPTH_STENCIL_ATTACHMENT
operator|||
name|attachment
operator|==
name|GL_DEPTH_STENCIL
condition|)
block|{
name|SafeDelete
argument_list|(
name|mData
operator|.
name|mDepthAttachment
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mData
operator|.
name|mStencilAttachment
argument_list|)
expr_stmt|;
comment|// ensure this is a legitimate depth+stencil format
if|if
condition|(
name|attachmentObj
operator|&&
name|attachmentObj
operator|->
name|getDepthSize
argument_list|()
operator|>
literal|0
operator|&&
name|attachmentObj
operator|->
name|getStencilSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mData
operator|.
name|mDepthAttachment
operator|=
name|attachmentObj
expr_stmt|;
name|mImpl
operator|->
name|setDepthAttachment
argument_list|(
name|attachmentObj
argument_list|)
expr_stmt|;
comment|// Make a new attachment object to ensure we do not double-delete
comment|// See angle issue 686
if|if
condition|(
name|attachmentObj
operator|->
name|type
argument_list|()
operator|==
name|GL_TEXTURE
condition|)
block|{
name|mData
operator|.
name|mStencilAttachment
operator|=
operator|new
name|TextureAttachment
argument_list|(
name|GL_DEPTH_STENCIL_ATTACHMENT
argument_list|,
name|attachmentObj
operator|->
name|getTexture
argument_list|()
argument_list|,
operator|*
name|attachmentObj
operator|->
name|getTextureImageIndex
argument_list|()
argument_list|)
expr_stmt|;
name|mImpl
operator|->
name|setStencilAttachment
argument_list|(
name|mData
operator|.
name|mStencilAttachment
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attachmentObj
operator|->
name|type
argument_list|()
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
name|mData
operator|.
name|mStencilAttachment
operator|=
operator|new
name|RenderbufferAttachment
argument_list|(
name|GL_DEPTH_STENCIL_ATTACHMENT
argument_list|,
name|attachmentObj
operator|->
name|getRenderbuffer
argument_list|()
argument_list|)
expr_stmt|;
name|mImpl
operator|->
name|setStencilAttachment
argument_list|(
name|mData
operator|.
name|mStencilAttachment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|DefaultFramebuffer
name|DefaultFramebuffer
operator|::
name|DefaultFramebuffer
parameter_list|(
specifier|const
name|Caps
modifier|&
name|caps
parameter_list|,
name|rx
operator|::
name|ImplFactory
modifier|*
name|factory
parameter_list|,
name|egl
operator|::
name|Surface
modifier|*
name|surface
parameter_list|)
member_init_list|:
name|Framebuffer
argument_list|(
name|caps
argument_list|,
name|factory
argument_list|,
literal|0
argument_list|)
block|{
specifier|const
name|egl
operator|::
name|Config
modifier|*
name|config
init|=
name|surface
operator|->
name|getConfig
argument_list|()
decl_stmt|;
name|setAttachment
argument_list|(
name|GL_BACK
argument_list|,
operator|new
name|DefaultAttachment
argument_list|(
name|GL_BACK
argument_list|,
name|surface
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|->
name|depthSize
operator|>
literal|0
condition|)
block|{
name|setAttachment
argument_list|(
name|GL_DEPTH
argument_list|,
operator|new
name|DefaultAttachment
argument_list|(
name|GL_DEPTH
argument_list|,
name|surface
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|->
name|stencilSize
operator|>
literal|0
condition|)
block|{
name|setAttachment
argument_list|(
name|GL_STENCIL
argument_list|,
operator|new
name|DefaultAttachment
argument_list|(
name|GL_STENCIL
argument_list|,
name|surface
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|GLenum
name|drawBufferState
init|=
name|GL_BACK
decl_stmt|;
name|setDrawBuffers
argument_list|(
literal|1
argument_list|,
operator|&
name|drawBufferState
argument_list|)
expr_stmt|;
name|setReadBuffer
argument_list|(
name|GL_BACK
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
end_unit
