begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Framebuffer.cpp: Implements the gl::Framebuffer class. Implements GL framebuffer
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4 page 105.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"common/Optional.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Config.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Context.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Surface.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/FramebufferImpl.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/ImplFactory.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/RenderbufferImpl.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/SurfaceImpl.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
namespace|namespace
block|{
DECL|function|DetachMatchingAttachment
name|void
name|DetachMatchingAttachment
parameter_list|(
name|FramebufferAttachment
modifier|*
name|attachment
parameter_list|,
name|GLenum
name|matchType
parameter_list|,
name|GLuint
name|matchId
parameter_list|)
block|{
if|if
condition|(
name|attachment
operator|->
name|isAttached
argument_list|()
operator|&&
name|attachment
operator|->
name|type
argument_list|()
operator|==
name|matchType
operator|&&
name|attachment
operator|->
name|id
argument_list|()
operator|==
name|matchId
condition|)
block|{
name|attachment
operator|->
name|detach
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|Data
name|Framebuffer
operator|::
name|Data
operator|::
name|Data
parameter_list|()
member_init_list|:
name|mLabel
argument_list|()
member_init_list|,
name|mColorAttachments
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|mDrawBufferStates
argument_list|(
literal|1
argument_list|,
name|GL_NONE
argument_list|)
member_init_list|,
name|mReadBufferState
argument_list|(
name|GL_COLOR_ATTACHMENT0_EXT
argument_list|)
block|{
name|mDrawBufferStates
index|[
literal|0
index|]
operator|=
name|GL_COLOR_ATTACHMENT0_EXT
expr_stmt|;
block|}
DECL|function|Data
name|Framebuffer
operator|::
name|Data
operator|::
name|Data
parameter_list|(
specifier|const
name|Caps
modifier|&
name|caps
parameter_list|)
member_init_list|:
name|mLabel
argument_list|()
member_init_list|,
name|mColorAttachments
argument_list|(
name|caps
operator|.
name|maxColorAttachments
argument_list|)
member_init_list|,
name|mDrawBufferStates
argument_list|(
name|caps
operator|.
name|maxDrawBuffers
argument_list|,
name|GL_NONE
argument_list|)
member_init_list|,
name|mReadBufferState
argument_list|(
name|GL_COLOR_ATTACHMENT0_EXT
argument_list|)
block|{
name|ASSERT
argument_list|(
name|mDrawBufferStates
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|mDrawBufferStates
index|[
literal|0
index|]
operator|=
name|GL_COLOR_ATTACHMENT0_EXT
expr_stmt|;
block|}
DECL|function|~Data
name|Framebuffer
operator|::
name|Data
operator|::
name|~
name|Data
parameter_list|()
block|{ }
DECL|function|getLabel
specifier|const
name|std
operator|::
name|string
modifier|&
name|Framebuffer
operator|::
name|Data
operator|::
name|getLabel
parameter_list|()
block|{
return|return
name|mLabel
return|;
block|}
DECL|function|getReadAttachment
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|Data
operator|::
name|getReadAttachment
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|mReadBufferState
operator|==
name|GL_BACK
operator|||
operator|(
name|mReadBufferState
operator|>=
name|GL_COLOR_ATTACHMENT0
operator|&&
name|mReadBufferState
operator|<=
name|GL_COLOR_ATTACHMENT15
operator|)
argument_list|)
expr_stmt|;
name|size_t
name|readIndex
init|=
operator|(
name|mReadBufferState
operator|==
name|GL_BACK
condition|?
literal|0
else|:
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|mReadBufferState
operator|-
name|GL_COLOR_ATTACHMENT0
argument_list|)
operator|)
decl_stmt|;
name|ASSERT
argument_list|(
name|readIndex
operator|<
name|mColorAttachments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mColorAttachments
index|[
name|readIndex
index|]
operator|.
name|isAttached
argument_list|()
condition|?
operator|&
name|mColorAttachments
index|[
name|readIndex
index|]
else|:
literal|nullptr
return|;
block|}
DECL|function|getFirstColorAttachment
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|Data
operator|::
name|getFirstColorAttachment
parameter_list|()
specifier|const
block|{
for|for
control|(
specifier|const
name|FramebufferAttachment
modifier|&
name|colorAttachment
range|:
name|mColorAttachments
control|)
block|{
if|if
condition|(
name|colorAttachment
operator|.
name|isAttached
argument_list|()
condition|)
block|{
return|return
operator|&
name|colorAttachment
return|;
block|}
block|}
return|return
literal|nullptr
return|;
block|}
DECL|function|getDepthOrStencilAttachment
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|Data
operator|::
name|getDepthOrStencilAttachment
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|mDepthAttachment
operator|.
name|isAttached
argument_list|()
condition|)
block|{
return|return
operator|&
name|mDepthAttachment
return|;
block|}
if|if
condition|(
name|mStencilAttachment
operator|.
name|isAttached
argument_list|()
condition|)
block|{
return|return
operator|&
name|mStencilAttachment
return|;
block|}
return|return
literal|nullptr
return|;
block|}
DECL|function|getColorAttachment
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|Data
operator|::
name|getColorAttachment
parameter_list|(
name|size_t
name|colorAttachment
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|colorAttachment
operator|<
name|mColorAttachments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mColorAttachments
index|[
name|colorAttachment
index|]
operator|.
name|isAttached
argument_list|()
condition|?
operator|&
name|mColorAttachments
index|[
name|colorAttachment
index|]
else|:
literal|nullptr
return|;
block|}
DECL|function|getDepthAttachment
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|Data
operator|::
name|getDepthAttachment
parameter_list|()
specifier|const
block|{
return|return
name|mDepthAttachment
operator|.
name|isAttached
argument_list|()
condition|?
operator|&
name|mDepthAttachment
else|:
literal|nullptr
return|;
block|}
DECL|function|getStencilAttachment
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|Data
operator|::
name|getStencilAttachment
parameter_list|()
specifier|const
block|{
return|return
name|mStencilAttachment
operator|.
name|isAttached
argument_list|()
condition|?
operator|&
name|mStencilAttachment
else|:
literal|nullptr
return|;
block|}
DECL|function|getDepthStencilAttachment
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|Data
operator|::
name|getDepthStencilAttachment
parameter_list|()
specifier|const
block|{
comment|// A valid depth-stencil attachment has the same resource bound to both the
comment|// depth and stencil attachment points.
if|if
condition|(
name|mDepthAttachment
operator|.
name|isAttached
argument_list|()
operator|&&
name|mStencilAttachment
operator|.
name|isAttached
argument_list|()
operator|&&
name|mDepthAttachment
operator|.
name|type
argument_list|()
operator|==
name|mStencilAttachment
operator|.
name|type
argument_list|()
operator|&&
name|mDepthAttachment
operator|.
name|id
argument_list|()
operator|==
name|mStencilAttachment
operator|.
name|id
argument_list|()
condition|)
block|{
return|return
operator|&
name|mDepthAttachment
return|;
block|}
return|return
literal|nullptr
return|;
block|}
DECL|function|attachmentsHaveSameDimensions
name|bool
name|Framebuffer
operator|::
name|Data
operator|::
name|attachmentsHaveSameDimensions
parameter_list|()
specifier|const
block|{
name|Optional
argument_list|<
name|Extents
argument_list|>
name|attachmentSize
decl_stmt|;
name|auto
name|hasMismatchedSize
init|=
capture|[
modifier|&
name|attachmentSize
capture|]
parameter_list|(
specifier|const
name|FramebufferAttachment
modifier|&
name|attachment
parameter_list|)
block|{
if|if
condition|(
operator|!
name|attachment
operator|.
name|isAttached
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|attachmentSize
operator|.
name|valid
argument_list|()
condition|)
block|{
name|attachmentSize
operator|=
name|attachment
operator|.
name|getSize
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
operator|(
name|attachment
operator|.
name|getSize
argument_list|()
operator|!=
name|attachmentSize
operator|.
name|value
argument_list|()
operator|)
return|;
block|}
decl_stmt|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|attachment
range|:
name|mColorAttachments
control|)
block|{
if|if
condition|(
name|hasMismatchedSize
argument_list|(
name|attachment
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|hasMismatchedSize
argument_list|(
name|mDepthAttachment
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|!
name|hasMismatchedSize
argument_list|(
name|mStencilAttachment
argument_list|)
return|;
block|}
DECL|function|Framebuffer
name|Framebuffer
operator|::
name|Framebuffer
parameter_list|(
specifier|const
name|Caps
modifier|&
name|caps
parameter_list|,
name|rx
operator|::
name|ImplFactory
modifier|*
name|factory
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|mData
argument_list|(
name|caps
argument_list|)
member_init_list|,
name|mImpl
argument_list|(
name|factory
operator|->
name|createFramebuffer
argument_list|(
name|mData
argument_list|)
argument_list|)
member_init_list|,
name|mId
argument_list|(
name|id
argument_list|)
block|{
name|ASSERT
argument_list|(
name|mId
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|mImpl
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
block|}
DECL|function|Framebuffer
name|Framebuffer
operator|::
name|Framebuffer
parameter_list|(
name|rx
operator|::
name|SurfaceImpl
modifier|*
name|surface
parameter_list|)
member_init_list|:
name|mData
argument_list|()
member_init_list|,
name|mImpl
argument_list|(
name|surface
operator|->
name|createDefaultFramebuffer
argument_list|(
name|mData
argument_list|)
argument_list|)
member_init_list|,
name|mId
argument_list|(
literal|0
argument_list|)
block|{
name|ASSERT
argument_list|(
name|mImpl
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
block|}
DECL|function|~Framebuffer
name|Framebuffer
operator|::
name|~
name|Framebuffer
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mImpl
argument_list|)
expr_stmt|;
block|}
DECL|function|setLabel
name|void
name|Framebuffer
operator|::
name|setLabel
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|label
parameter_list|)
block|{
name|mData
operator|.
name|mLabel
operator|=
name|label
expr_stmt|;
block|}
DECL|function|getLabel
specifier|const
name|std
operator|::
name|string
modifier|&
name|Framebuffer
operator|::
name|getLabel
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|mLabel
return|;
block|}
DECL|function|detachTexture
name|void
name|Framebuffer
operator|::
name|detachTexture
parameter_list|(
name|GLuint
name|textureId
parameter_list|)
block|{
name|detachResourceById
argument_list|(
name|GL_TEXTURE
argument_list|,
name|textureId
argument_list|)
expr_stmt|;
block|}
DECL|function|detachRenderbuffer
name|void
name|Framebuffer
operator|::
name|detachRenderbuffer
parameter_list|(
name|GLuint
name|renderbufferId
parameter_list|)
block|{
name|detachResourceById
argument_list|(
name|GL_RENDERBUFFER
argument_list|,
name|renderbufferId
argument_list|)
expr_stmt|;
block|}
DECL|function|detachResourceById
name|void
name|Framebuffer
operator|::
name|detachResourceById
parameter_list|(
name|GLenum
name|resourceType
parameter_list|,
name|GLuint
name|resourceId
parameter_list|)
block|{
for|for
control|(
name|auto
operator|&
name|colorAttachment
operator|:
name|mData
operator|.
name|mColorAttachments
control|)
block|{
name|DetachMatchingAttachment
argument_list|(
operator|&
name|colorAttachment
argument_list|,
name|resourceType
argument_list|,
name|resourceId
argument_list|)
expr_stmt|;
block|}
name|DetachMatchingAttachment
argument_list|(
operator|&
name|mData
operator|.
name|mDepthAttachment
argument_list|,
name|resourceType
argument_list|,
name|resourceId
argument_list|)
expr_stmt|;
name|DetachMatchingAttachment
argument_list|(
operator|&
name|mData
operator|.
name|mStencilAttachment
argument_list|,
name|resourceType
argument_list|,
name|resourceId
argument_list|)
expr_stmt|;
block|}
DECL|function|getColorbuffer
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getColorbuffer
parameter_list|(
name|size_t
name|colorAttachment
parameter_list|)
specifier|const
block|{
return|return
name|mData
operator|.
name|getColorAttachment
argument_list|(
name|colorAttachment
argument_list|)
return|;
block|}
DECL|function|getDepthbuffer
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getDepthbuffer
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getDepthAttachment
argument_list|()
return|;
block|}
DECL|function|getStencilbuffer
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getStencilbuffer
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getStencilAttachment
argument_list|()
return|;
block|}
DECL|function|getDepthStencilBuffer
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getDepthStencilBuffer
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getDepthStencilAttachment
argument_list|()
return|;
block|}
DECL|function|getDepthOrStencilbuffer
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getDepthOrStencilbuffer
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getDepthOrStencilAttachment
argument_list|()
return|;
block|}
DECL|function|getReadColorbuffer
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getReadColorbuffer
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getReadAttachment
argument_list|()
return|;
block|}
DECL|function|getReadColorbufferType
name|GLenum
name|Framebuffer
operator|::
name|getReadColorbufferType
parameter_list|()
specifier|const
block|{
specifier|const
name|FramebufferAttachment
modifier|*
name|readAttachment
init|=
name|mData
operator|.
name|getReadAttachment
argument_list|()
decl_stmt|;
return|return
operator|(
name|readAttachment
operator|!=
literal|nullptr
condition|?
name|readAttachment
operator|->
name|type
argument_list|()
else|:
name|GL_NONE
operator|)
return|;
block|}
DECL|function|getFirstColorbuffer
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getFirstColorbuffer
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getFirstColorAttachment
argument_list|()
return|;
block|}
DECL|function|getAttachment
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getAttachment
parameter_list|(
name|GLenum
name|attachment
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|attachment
operator|>=
name|GL_COLOR_ATTACHMENT0
operator|&&
name|attachment
operator|<=
name|GL_COLOR_ATTACHMENT15
condition|)
block|{
return|return
name|mData
operator|.
name|getColorAttachment
argument_list|(
name|attachment
operator|-
name|GL_COLOR_ATTACHMENT0
argument_list|)
return|;
block|}
else|else
block|{
switch|switch
condition|(
name|attachment
condition|)
block|{
case|case
name|GL_COLOR
case|:
case|case
name|GL_BACK
case|:
return|return
name|mData
operator|.
name|getColorAttachment
argument_list|(
literal|0
argument_list|)
return|;
case|case
name|GL_DEPTH
case|:
case|case
name|GL_DEPTH_ATTACHMENT
case|:
return|return
name|mData
operator|.
name|getDepthAttachment
argument_list|()
return|;
case|case
name|GL_STENCIL
case|:
case|case
name|GL_STENCIL_ATTACHMENT
case|:
return|return
name|mData
operator|.
name|getStencilAttachment
argument_list|()
return|;
case|case
name|GL_DEPTH_STENCIL
case|:
case|case
name|GL_DEPTH_STENCIL_ATTACHMENT
case|:
return|return
name|getDepthStencilBuffer
argument_list|()
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|nullptr
return|;
block|}
block|}
block|}
DECL|function|getDrawbufferStateCount
name|size_t
name|Framebuffer
operator|::
name|getDrawbufferStateCount
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|mDrawBufferStates
operator|.
name|size
argument_list|()
return|;
block|}
DECL|function|getDrawBufferState
name|GLenum
name|Framebuffer
operator|::
name|getDrawBufferState
parameter_list|(
name|size_t
name|drawBuffer
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|drawBuffer
operator|<
name|mData
operator|.
name|mDrawBufferStates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mData
operator|.
name|mDrawBufferStates
index|[
name|drawBuffer
index|]
return|;
block|}
DECL|function|setDrawBuffers
name|void
name|Framebuffer
operator|::
name|setDrawBuffers
parameter_list|(
name|size_t
name|count
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|buffers
parameter_list|)
block|{
name|auto
operator|&
name|drawStates
operator|=
name|mData
operator|.
name|mDrawBufferStates
expr_stmt|;
name|ASSERT
argument_list|(
name|count
operator|<=
name|drawStates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|std
operator|::
name|copy
argument_list|(
name|buffers
argument_list|,
name|buffers
operator|+
name|count
argument_list|,
name|drawStates
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|std
operator|::
name|fill
argument_list|(
name|drawStates
operator|.
name|begin
argument_list|()
operator|+
name|count
argument_list|,
name|drawStates
operator|.
name|end
argument_list|()
argument_list|,
name|GL_NONE
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_DRAW_BUFFERS
argument_list|)
expr_stmt|;
block|}
DECL|function|getDrawBuffer
specifier|const
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getDrawBuffer
parameter_list|(
name|size_t
name|drawBuffer
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|drawBuffer
operator|<
name|mData
operator|.
name|mDrawBufferStates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mData
operator|.
name|mDrawBufferStates
index|[
name|drawBuffer
index|]
operator|!=
name|GL_NONE
condition|)
block|{
comment|// ES3 spec: "If the GL is bound to a draw framebuffer object, the ith buffer listed in bufs
comment|// must be COLOR_ATTACHMENTi or NONE"
name|ASSERT
argument_list|(
name|mData
operator|.
name|mDrawBufferStates
index|[
name|drawBuffer
index|]
operator|==
name|GL_COLOR_ATTACHMENT0
operator|+
name|drawBuffer
operator|||
operator|(
name|drawBuffer
operator|==
literal|0
operator|&&
name|mData
operator|.
name|mDrawBufferStates
index|[
name|drawBuffer
index|]
operator|==
name|GL_BACK
operator|)
argument_list|)
expr_stmt|;
return|return
name|getAttachment
argument_list|(
name|mData
operator|.
name|mDrawBufferStates
index|[
name|drawBuffer
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|nullptr
return|;
block|}
block|}
DECL|function|hasEnabledDrawBuffer
name|bool
name|Framebuffer
operator|::
name|hasEnabledDrawBuffer
parameter_list|()
specifier|const
block|{
for|for
control|(
name|size_t
name|drawbufferIdx
init|=
literal|0
init|;
name|drawbufferIdx
operator|<
name|mData
operator|.
name|mDrawBufferStates
operator|.
name|size
argument_list|()
condition|;
operator|++
name|drawbufferIdx
control|)
block|{
if|if
condition|(
name|getDrawBuffer
argument_list|(
name|drawbufferIdx
argument_list|)
operator|!=
literal|nullptr
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|getReadBufferState
name|GLenum
name|Framebuffer
operator|::
name|getReadBufferState
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|mReadBufferState
return|;
block|}
DECL|function|setReadBuffer
name|void
name|Framebuffer
operator|::
name|setReadBuffer
parameter_list|(
name|GLenum
name|buffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|buffer
operator|==
name|GL_BACK
operator|||
name|buffer
operator|==
name|GL_NONE
operator|||
operator|(
name|buffer
operator|>=
name|GL_COLOR_ATTACHMENT0
operator|&&
operator|(
name|buffer
operator|-
name|GL_COLOR_ATTACHMENT0
operator|)
operator|<
name|mData
operator|.
name|mColorAttachments
operator|.
name|size
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|mData
operator|.
name|mReadBufferState
operator|=
name|buffer
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_READ_BUFFER
argument_list|)
expr_stmt|;
block|}
DECL|function|getNumColorBuffers
name|size_t
name|Framebuffer
operator|::
name|getNumColorBuffers
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|mColorAttachments
operator|.
name|size
argument_list|()
return|;
block|}
DECL|function|hasDepth
name|bool
name|Framebuffer
operator|::
name|hasDepth
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mData
operator|.
name|mDepthAttachment
operator|.
name|isAttached
argument_list|()
operator|&&
name|mData
operator|.
name|mDepthAttachment
operator|.
name|getDepthSize
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
DECL|function|hasStencil
name|bool
name|Framebuffer
operator|::
name|hasStencil
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mData
operator|.
name|mStencilAttachment
operator|.
name|isAttached
argument_list|()
operator|&&
name|mData
operator|.
name|mStencilAttachment
operator|.
name|getStencilSize
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
DECL|function|usingExtendedDrawBuffers
name|bool
name|Framebuffer
operator|::
name|usingExtendedDrawBuffers
parameter_list|()
specifier|const
block|{
for|for
control|(
name|size_t
name|drawbufferIdx
init|=
literal|1
init|;
name|drawbufferIdx
operator|<
name|mData
operator|.
name|mDrawBufferStates
operator|.
name|size
argument_list|()
condition|;
operator|++
name|drawbufferIdx
control|)
block|{
if|if
condition|(
name|getDrawBuffer
argument_list|(
name|drawbufferIdx
argument_list|)
operator|!=
literal|nullptr
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|checkStatus
name|GLenum
name|Framebuffer
operator|::
name|checkStatus
parameter_list|(
specifier|const
name|gl
operator|::
name|Data
modifier|&
name|data
parameter_list|)
specifier|const
block|{
comment|// The default framebuffer *must* always be complete, though it may not be
comment|// subject to the same rules as application FBOs. ie, it could have 0x0 size.
if|if
condition|(
name|mId
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_COMPLETE
return|;
block|}
name|unsigned
name|int
name|colorbufferSize
init|=
literal|0
decl_stmt|;
name|int
name|samples
init|=
operator|-
literal|1
decl_stmt|;
name|bool
name|missingAttachment
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|const
name|FramebufferAttachment
modifier|&
name|colorAttachment
range|:
name|mData
operator|.
name|mColorAttachments
control|)
block|{
if|if
condition|(
name|colorAttachment
operator|.
name|isAttached
argument_list|()
condition|)
block|{
specifier|const
name|Extents
modifier|&
name|size
init|=
name|colorAttachment
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|.
name|width
operator|==
literal|0
operator|||
name|size
operator|.
name|height
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
name|GLenum
name|internalformat
init|=
name|colorAttachment
operator|.
name|getInternalFormat
argument_list|()
decl_stmt|;
specifier|const
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|data
operator|.
name|textureCaps
operator|->
name|get
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
specifier|const
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorAttachment
operator|.
name|type
argument_list|()
operator|==
name|GL_TEXTURE
condition|)
block|{
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|formatInfo
operator|.
name|depthBits
operator|>
literal|0
operator|||
name|formatInfo
operator|.
name|stencilBits
operator|>
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|colorAttachment
operator|.
name|layer
argument_list|()
operator|>=
name|size
operator|.
name|depth
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
comment|// ES3 specifies that cube map texture attachments must be cube complete.
comment|// This language is missing from the ES2 spec, but we enforce it here because some
comment|// desktop OpenGL drivers also enforce this validation.
comment|// TODO(jmadill): Check if OpenGL ES2 drivers enforce cube completeness.
specifier|const
name|Texture
modifier|*
name|texture
init|=
name|colorAttachment
operator|.
name|getTexture
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|texture
argument_list|)
expr_stmt|;
if|if
condition|(
name|texture
operator|->
name|getTarget
argument_list|()
operator|==
name|GL_TEXTURE_CUBE_MAP
operator|&&
operator|!
name|texture
operator|->
name|isCubeComplete
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|colorAttachment
operator|.
name|type
argument_list|()
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
operator|||
name|formatInfo
operator|.
name|depthBits
operator|>
literal|0
operator|||
name|formatInfo
operator|.
name|stencilBits
operator|>
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
if|if
condition|(
operator|!
name|missingAttachment
condition|)
block|{
comment|// APPLE_framebuffer_multisample, which EXT_draw_buffers refers to, requires that
comment|// all color attachments have the same number of samples for the FBO to be complete.
if|if
condition|(
name|colorAttachment
operator|.
name|getSamples
argument_list|()
operator|!=
name|samples
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
return|;
block|}
comment|// in GLES 2.0, all color attachments attachments must have the same number of bitplanes
comment|// in GLES 3.0, there is no such restriction
if|if
condition|(
name|data
operator|.
name|clientVersion
operator|<
literal|3
condition|)
block|{
if|if
condition|(
name|formatInfo
operator|.
name|pixelBytes
operator|!=
name|colorbufferSize
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
block|}
block|}
else|else
block|{
name|samples
operator|=
name|colorAttachment
operator|.
name|getSamples
argument_list|()
expr_stmt|;
name|colorbufferSize
operator|=
name|formatInfo
operator|.
name|pixelBytes
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|const
name|FramebufferAttachment
modifier|&
name|depthAttachment
init|=
name|mData
operator|.
name|mDepthAttachment
decl_stmt|;
if|if
condition|(
name|depthAttachment
operator|.
name|isAttached
argument_list|()
condition|)
block|{
specifier|const
name|Extents
modifier|&
name|size
init|=
name|depthAttachment
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|.
name|width
operator|==
literal|0
operator|||
name|size
operator|.
name|height
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
name|GLenum
name|internalformat
init|=
name|depthAttachment
operator|.
name|getInternalFormat
argument_list|()
decl_stmt|;
specifier|const
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|data
operator|.
name|textureCaps
operator|->
name|get
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
specifier|const
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|depthAttachment
operator|.
name|type
argument_list|()
operator|==
name|GL_TEXTURE
condition|)
block|{
comment|// depth texture attachments require OES/ANGLE_depth_texture
if|if
condition|(
operator|!
name|data
operator|.
name|extensions
operator|->
name|depthTextures
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|formatInfo
operator|.
name|depthBits
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|depthAttachment
operator|.
name|type
argument_list|()
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
operator|||
name|formatInfo
operator|.
name|depthBits
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
if|if
condition|(
name|missingAttachment
condition|)
block|{
name|samples
operator|=
name|depthAttachment
operator|.
name|getSamples
argument_list|()
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|samples
operator|!=
name|depthAttachment
operator|.
name|getSamples
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
return|;
block|}
block|}
specifier|const
name|FramebufferAttachment
modifier|&
name|stencilAttachment
init|=
name|mData
operator|.
name|mStencilAttachment
decl_stmt|;
if|if
condition|(
name|stencilAttachment
operator|.
name|isAttached
argument_list|()
condition|)
block|{
specifier|const
name|Extents
modifier|&
name|size
init|=
name|stencilAttachment
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|.
name|width
operator|==
literal|0
operator|||
name|size
operator|.
name|height
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
name|GLenum
name|internalformat
init|=
name|stencilAttachment
operator|.
name|getInternalFormat
argument_list|()
decl_stmt|;
specifier|const
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|data
operator|.
name|textureCaps
operator|->
name|get
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
specifier|const
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|stencilAttachment
operator|.
name|type
argument_list|()
operator|==
name|GL_TEXTURE
condition|)
block|{
comment|// texture stencil attachments come along as part
comment|// of OES_packed_depth_stencil + OES/ANGLE_depth_texture
if|if
condition|(
operator|!
name|data
operator|.
name|extensions
operator|->
name|depthTextures
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|formatInfo
operator|.
name|stencilBits
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|stencilAttachment
operator|.
name|type
argument_list|()
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
operator|||
name|formatInfo
operator|.
name|stencilBits
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
if|if
condition|(
name|missingAttachment
condition|)
block|{
name|samples
operator|=
name|stencilAttachment
operator|.
name|getSamples
argument_list|()
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|samples
operator|!=
name|stencilAttachment
operator|.
name|getSamples
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
return|;
block|}
block|}
comment|// we need to have at least one attachment to be complete
if|if
condition|(
name|missingAttachment
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
return|;
block|}
comment|// In ES 2.0, all color attachments must have the same width and height.
comment|// In ES 3.0, there is no such restriction.
if|if
condition|(
name|data
operator|.
name|clientVersion
operator|<
literal|3
operator|&&
operator|!
name|mData
operator|.
name|attachmentsHaveSameDimensions
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
return|;
block|}
name|syncState
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|mImpl
operator|->
name|checkStatus
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
return|return
name|GL_FRAMEBUFFER_COMPLETE
return|;
block|}
DECL|function|discard
name|Error
name|Framebuffer
operator|::
name|discard
parameter_list|(
name|size_t
name|count
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|)
block|{
return|return
name|mImpl
operator|->
name|discard
argument_list|(
name|count
argument_list|,
name|attachments
argument_list|)
return|;
block|}
DECL|function|invalidate
name|Error
name|Framebuffer
operator|::
name|invalidate
parameter_list|(
name|size_t
name|count
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|)
block|{
return|return
name|mImpl
operator|->
name|invalidate
argument_list|(
name|count
argument_list|,
name|attachments
argument_list|)
return|;
block|}
DECL|function|invalidateSub
name|Error
name|Framebuffer
operator|::
name|invalidateSub
parameter_list|(
name|size_t
name|count
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|&
name|area
parameter_list|)
block|{
return|return
name|mImpl
operator|->
name|invalidateSub
argument_list|(
name|count
argument_list|,
name|attachments
argument_list|,
name|area
argument_list|)
return|;
block|}
DECL|function|clear
name|Error
name|Framebuffer
operator|::
name|clear
parameter_list|(
specifier|const
name|gl
operator|::
name|Data
modifier|&
name|data
parameter_list|,
name|GLbitfield
name|mask
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|state
operator|->
name|isRasterizerDiscardEnabled
argument_list|()
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
return|return
name|mImpl
operator|->
name|clear
argument_list|(
name|data
argument_list|,
name|mask
argument_list|)
return|;
block|}
DECL|function|clearBufferfv
name|Error
name|Framebuffer
operator|::
name|clearBufferfv
parameter_list|(
specifier|const
name|gl
operator|::
name|Data
modifier|&
name|data
parameter_list|,
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|state
operator|->
name|isRasterizerDiscardEnabled
argument_list|()
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
return|return
name|mImpl
operator|->
name|clearBufferfv
argument_list|(
name|data
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|values
argument_list|)
return|;
block|}
DECL|function|clearBufferuiv
name|Error
name|Framebuffer
operator|::
name|clearBufferuiv
parameter_list|(
specifier|const
name|gl
operator|::
name|Data
modifier|&
name|data
parameter_list|,
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|values
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|state
operator|->
name|isRasterizerDiscardEnabled
argument_list|()
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
return|return
name|mImpl
operator|->
name|clearBufferuiv
argument_list|(
name|data
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|values
argument_list|)
return|;
block|}
DECL|function|clearBufferiv
name|Error
name|Framebuffer
operator|::
name|clearBufferiv
parameter_list|(
specifier|const
name|gl
operator|::
name|Data
modifier|&
name|data
parameter_list|,
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLint
modifier|*
name|values
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|state
operator|->
name|isRasterizerDiscardEnabled
argument_list|()
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
return|return
name|mImpl
operator|->
name|clearBufferiv
argument_list|(
name|data
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|values
argument_list|)
return|;
block|}
DECL|function|clearBufferfi
name|Error
name|Framebuffer
operator|::
name|clearBufferfi
parameter_list|(
specifier|const
name|gl
operator|::
name|Data
modifier|&
name|data
parameter_list|,
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
name|GLfloat
name|depth
parameter_list|,
name|GLint
name|stencil
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|state
operator|->
name|isRasterizerDiscardEnabled
argument_list|()
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
return|return
name|mImpl
operator|->
name|clearBufferfi
argument_list|(
name|data
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|depth
argument_list|,
name|stencil
argument_list|)
return|;
block|}
DECL|function|getImplementationColorReadFormat
name|GLenum
name|Framebuffer
operator|::
name|getImplementationColorReadFormat
parameter_list|()
specifier|const
block|{
return|return
name|mImpl
operator|->
name|getImplementationColorReadFormat
argument_list|()
return|;
block|}
DECL|function|getImplementationColorReadType
name|GLenum
name|Framebuffer
operator|::
name|getImplementationColorReadType
parameter_list|()
specifier|const
block|{
return|return
name|mImpl
operator|->
name|getImplementationColorReadType
argument_list|()
return|;
block|}
DECL|function|readPixels
name|Error
name|Framebuffer
operator|::
name|readPixels
parameter_list|(
specifier|const
name|State
modifier|&
name|state
parameter_list|,
specifier|const
name|Rectangle
modifier|&
name|area
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLvoid
modifier|*
name|pixels
parameter_list|)
specifier|const
block|{
name|Error
name|error
init|=
name|mImpl
operator|->
name|readPixels
argument_list|(
name|state
argument_list|,
name|area
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|Buffer
modifier|*
name|unpackBuffer
init|=
name|state
operator|.
name|getUnpackState
argument_list|()
operator|.
name|pixelBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|unpackBuffer
condition|)
block|{
name|unpackBuffer
operator|->
name|onPixelUnpack
argument_list|()
expr_stmt|;
block|}
return|return
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|blit
name|Error
name|Framebuffer
operator|::
name|blit
parameter_list|(
specifier|const
name|State
modifier|&
name|state
parameter_list|,
specifier|const
name|Rectangle
modifier|&
name|sourceArea
parameter_list|,
specifier|const
name|Rectangle
modifier|&
name|destArea
parameter_list|,
name|GLbitfield
name|mask
parameter_list|,
name|GLenum
name|filter
parameter_list|,
specifier|const
name|Framebuffer
modifier|*
name|sourceFramebuffer
parameter_list|)
block|{
return|return
name|mImpl
operator|->
name|blit
argument_list|(
name|state
argument_list|,
name|sourceArea
argument_list|,
name|destArea
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|,
name|sourceFramebuffer
argument_list|)
return|;
block|}
DECL|function|getSamples
name|int
name|Framebuffer
operator|::
name|getSamples
parameter_list|(
specifier|const
name|gl
operator|::
name|Data
modifier|&
name|data
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|checkStatus
argument_list|(
name|data
argument_list|)
operator|==
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
comment|// for a complete framebuffer, all attachments must have the same sample count
comment|// in this case return the first nonzero sample size
for|for
control|(
specifier|const
name|FramebufferAttachment
modifier|&
name|colorAttachment
range|:
name|mData
operator|.
name|mColorAttachments
control|)
block|{
if|if
condition|(
name|colorAttachment
operator|.
name|isAttached
argument_list|()
condition|)
block|{
return|return
name|colorAttachment
operator|.
name|getSamples
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|function|hasValidDepthStencil
name|bool
name|Framebuffer
operator|::
name|hasValidDepthStencil
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getDepthStencilAttachment
argument_list|()
operator|!=
literal|nullptr
return|;
block|}
DECL|function|setAttachment
name|void
name|Framebuffer
operator|::
name|setAttachment
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLenum
name|binding
parameter_list|,
specifier|const
name|ImageIndex
modifier|&
name|textureIndex
parameter_list|,
name|FramebufferAttachmentObject
modifier|*
name|resource
parameter_list|)
block|{
if|if
condition|(
name|binding
operator|==
name|GL_DEPTH_STENCIL
operator|||
name|binding
operator|==
name|GL_DEPTH_STENCIL_ATTACHMENT
condition|)
block|{
comment|// ensure this is a legitimate depth+stencil format
name|FramebufferAttachmentObject
modifier|*
name|attachmentObj
init|=
name|resource
decl_stmt|;
if|if
condition|(
name|resource
condition|)
block|{
name|FramebufferAttachment
operator|::
name|Target
name|target
argument_list|(
name|binding
argument_list|,
name|textureIndex
argument_list|)
decl_stmt|;
name|GLenum
name|internalFormat
init|=
name|resource
operator|->
name|getAttachmentInternalFormat
argument_list|(
name|target
argument_list|)
decl_stmt|;
specifier|const
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatInfo
operator|.
name|depthBits
operator|==
literal|0
operator|||
name|formatInfo
operator|.
name|stencilBits
operator|==
literal|0
condition|)
block|{
comment|// Attaching nullptr detaches the current attachment.
name|attachmentObj
operator|=
literal|nullptr
expr_stmt|;
block|}
block|}
name|mData
operator|.
name|mDepthAttachment
operator|.
name|attach
argument_list|(
name|type
argument_list|,
name|binding
argument_list|,
name|textureIndex
argument_list|,
name|attachmentObj
argument_list|)
expr_stmt|;
name|mData
operator|.
name|mStencilAttachment
operator|.
name|attach
argument_list|(
name|type
argument_list|,
name|binding
argument_list|,
name|textureIndex
argument_list|,
name|attachmentObj
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_DEPTH_ATTACHMENT
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_ATTACHMENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|binding
condition|)
block|{
case|case
name|GL_DEPTH
case|:
case|case
name|GL_DEPTH_ATTACHMENT
case|:
name|mData
operator|.
name|mDepthAttachment
operator|.
name|attach
argument_list|(
name|type
argument_list|,
name|binding
argument_list|,
name|textureIndex
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_DEPTH_ATTACHMENT
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_STENCIL
case|:
case|case
name|GL_STENCIL_ATTACHMENT
case|:
name|mData
operator|.
name|mStencilAttachment
operator|.
name|attach
argument_list|(
name|type
argument_list|,
name|binding
argument_list|,
name|textureIndex
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_ATTACHMENT
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BACK
case|:
name|mData
operator|.
name|mColorAttachments
index|[
literal|0
index|]
operator|.
name|attach
argument_list|(
name|type
argument_list|,
name|binding
argument_list|,
name|textureIndex
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_COLOR_ATTACHMENT_0
argument_list|)
expr_stmt|;
break|break;
default|default:
block|{
name|size_t
name|colorIndex
init|=
name|binding
operator|-
name|GL_COLOR_ATTACHMENT0
decl_stmt|;
name|ASSERT
argument_list|(
name|colorIndex
operator|<
name|mData
operator|.
name|mColorAttachments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|mData
operator|.
name|mColorAttachments
index|[
name|colorIndex
index|]
operator|.
name|attach
argument_list|(
name|type
argument_list|,
name|binding
argument_list|,
name|textureIndex
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_COLOR_ATTACHMENT_0
operator|+
name|colorIndex
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
DECL|function|resetAttachment
name|void
name|Framebuffer
operator|::
name|resetAttachment
parameter_list|(
name|GLenum
name|binding
parameter_list|)
block|{
name|setAttachment
argument_list|(
name|GL_NONE
argument_list|,
name|binding
argument_list|,
name|ImageIndex
operator|::
name|MakeInvalid
argument_list|()
argument_list|,
literal|nullptr
argument_list|)
expr_stmt|;
block|}
DECL|function|syncState
name|void
name|Framebuffer
operator|::
name|syncState
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|mDirtyBits
operator|.
name|any
argument_list|()
condition|)
block|{
name|mImpl
operator|->
name|syncState
argument_list|(
name|mDirtyBits
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_namespace
begin_comment
comment|// namespace gl
end_comment
end_unit
