begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// FramebufferAttachment.cpp: the gl::FramebufferAttachment class and its derived classes
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4.3 page 108.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Config.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Surface.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/FramebufferImpl.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
comment|////// FramebufferAttachment::Target Implementation //////
DECL|function|Target
name|FramebufferAttachment
operator|::
name|Target
operator|::
name|Target
parameter_list|()
member_init_list|:
name|mBinding
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|mTextureIndex
argument_list|(
name|ImageIndex
operator|::
name|MakeInvalid
argument_list|()
argument_list|)
block|{ }
DECL|function|Target
name|FramebufferAttachment
operator|::
name|Target
operator|::
name|Target
parameter_list|(
name|GLenum
name|binding
parameter_list|,
specifier|const
name|ImageIndex
modifier|&
name|imageIndex
parameter_list|)
member_init_list|:
name|mBinding
argument_list|(
name|binding
argument_list|)
member_init_list|,
name|mTextureIndex
argument_list|(
name|imageIndex
argument_list|)
block|{ }
DECL|function|Target
name|FramebufferAttachment
operator|::
name|Target
operator|::
name|Target
parameter_list|(
specifier|const
name|Target
modifier|&
name|other
parameter_list|)
member_init_list|:
name|mBinding
argument_list|(
name|other
operator|.
name|mBinding
argument_list|)
member_init_list|,
name|mTextureIndex
argument_list|(
name|other
operator|.
name|mTextureIndex
argument_list|)
block|{ }
DECL|function|operator =
name|FramebufferAttachment
operator|::
name|Target
modifier|&
name|FramebufferAttachment
operator|::
name|Target
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|Target
modifier|&
name|other
parameter_list|)
block|{
name|this
operator|->
name|mBinding
operator|=
name|other
operator|.
name|mBinding
expr_stmt|;
name|this
operator|->
name|mTextureIndex
operator|=
name|other
operator|.
name|mTextureIndex
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
comment|////// FramebufferAttachment Implementation //////
DECL|function|FramebufferAttachment
name|FramebufferAttachment
operator|::
name|FramebufferAttachment
parameter_list|()
member_init_list|:
name|mType
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|mResource
argument_list|(
literal|nullptr
argument_list|)
block|{ }
DECL|function|FramebufferAttachment
name|FramebufferAttachment
operator|::
name|FramebufferAttachment
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLenum
name|binding
parameter_list|,
specifier|const
name|ImageIndex
modifier|&
name|textureIndex
parameter_list|,
name|FramebufferAttachmentObject
modifier|*
name|resource
parameter_list|)
member_init_list|:
name|mResource
argument_list|(
literal|nullptr
argument_list|)
block|{
name|attach
argument_list|(
name|type
argument_list|,
name|binding
argument_list|,
name|textureIndex
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
DECL|function|FramebufferAttachment
name|FramebufferAttachment
operator|::
name|FramebufferAttachment
parameter_list|(
specifier|const
name|FramebufferAttachment
modifier|&
name|other
parameter_list|)
member_init_list|:
name|mResource
argument_list|(
literal|nullptr
argument_list|)
block|{
name|attach
argument_list|(
name|other
operator|.
name|mType
argument_list|,
name|other
operator|.
name|mTarget
operator|.
name|binding
argument_list|()
argument_list|,
name|other
operator|.
name|mTarget
operator|.
name|textureIndex
argument_list|()
argument_list|,
name|other
operator|.
name|mResource
argument_list|)
expr_stmt|;
block|}
DECL|function|operator =
name|FramebufferAttachment
modifier|&
name|FramebufferAttachment
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|FramebufferAttachment
modifier|&
name|other
parameter_list|)
block|{
name|attach
argument_list|(
name|other
operator|.
name|mType
argument_list|,
name|other
operator|.
name|mTarget
operator|.
name|binding
argument_list|()
argument_list|,
name|other
operator|.
name|mTarget
operator|.
name|textureIndex
argument_list|()
argument_list|,
name|other
operator|.
name|mResource
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|~FramebufferAttachment
name|FramebufferAttachment
operator|::
name|~
name|FramebufferAttachment
parameter_list|()
block|{
name|detach
argument_list|()
expr_stmt|;
block|}
DECL|function|detach
name|void
name|FramebufferAttachment
operator|::
name|detach
parameter_list|()
block|{
name|mType
operator|=
name|GL_NONE
expr_stmt|;
if|if
condition|(
name|mResource
operator|!=
literal|nullptr
condition|)
block|{
name|mResource
operator|->
name|onDetach
argument_list|()
expr_stmt|;
name|mResource
operator|=
literal|nullptr
expr_stmt|;
block|}
comment|// not technically necessary, could omit for performance
name|mTarget
operator|=
name|Target
argument_list|()
expr_stmt|;
block|}
DECL|function|attach
name|void
name|FramebufferAttachment
operator|::
name|attach
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLenum
name|binding
parameter_list|,
specifier|const
name|ImageIndex
modifier|&
name|textureIndex
parameter_list|,
name|FramebufferAttachmentObject
modifier|*
name|resource
parameter_list|)
block|{
name|mType
operator|=
name|type
expr_stmt|;
name|mTarget
operator|=
name|Target
argument_list|(
name|binding
argument_list|,
name|textureIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
condition|)
block|{
name|resource
operator|->
name|onAttach
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mResource
operator|!=
literal|nullptr
condition|)
block|{
name|mResource
operator|->
name|onDetach
argument_list|()
expr_stmt|;
block|}
name|mResource
operator|=
name|resource
expr_stmt|;
block|}
DECL|function|getRedSize
name|GLuint
name|FramebufferAttachment
operator|::
name|getRedSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|()
argument_list|)
operator|.
name|redBits
return|;
block|}
DECL|function|getGreenSize
name|GLuint
name|FramebufferAttachment
operator|::
name|getGreenSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|()
argument_list|)
operator|.
name|greenBits
return|;
block|}
DECL|function|getBlueSize
name|GLuint
name|FramebufferAttachment
operator|::
name|getBlueSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|()
argument_list|)
operator|.
name|blueBits
return|;
block|}
DECL|function|getAlphaSize
name|GLuint
name|FramebufferAttachment
operator|::
name|getAlphaSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|()
argument_list|)
operator|.
name|alphaBits
return|;
block|}
DECL|function|getDepthSize
name|GLuint
name|FramebufferAttachment
operator|::
name|getDepthSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|()
argument_list|)
operator|.
name|depthBits
return|;
block|}
DECL|function|getStencilSize
name|GLuint
name|FramebufferAttachment
operator|::
name|getStencilSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|()
argument_list|)
operator|.
name|stencilBits
return|;
block|}
DECL|function|getComponentType
name|GLenum
name|FramebufferAttachment
operator|::
name|getComponentType
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|()
argument_list|)
operator|.
name|componentType
return|;
block|}
DECL|function|getColorEncoding
name|GLenum
name|FramebufferAttachment
operator|::
name|getColorEncoding
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|()
argument_list|)
operator|.
name|colorEncoding
return|;
block|}
DECL|function|id
name|GLuint
name|FramebufferAttachment
operator|::
name|id
parameter_list|()
specifier|const
block|{
return|return
name|mResource
operator|->
name|getId
argument_list|()
return|;
block|}
DECL|function|getTextureImageIndex
specifier|const
name|ImageIndex
modifier|&
name|FramebufferAttachment
operator|::
name|getTextureImageIndex
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|type
argument_list|()
operator|==
name|GL_TEXTURE
argument_list|)
expr_stmt|;
return|return
name|mTarget
operator|.
name|textureIndex
argument_list|()
return|;
block|}
DECL|function|cubeMapFace
name|GLenum
name|FramebufferAttachment
operator|::
name|cubeMapFace
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|mType
operator|==
name|GL_TEXTURE
argument_list|)
expr_stmt|;
specifier|const
specifier|auto
modifier|&
name|index
init|=
name|mTarget
operator|.
name|textureIndex
argument_list|()
decl_stmt|;
return|return
name|IsCubeMapTextureTarget
argument_list|(
name|index
operator|.
name|type
argument_list|)
condition|?
name|index
operator|.
name|type
else|:
name|GL_NONE
return|;
block|}
DECL|function|mipLevel
name|GLint
name|FramebufferAttachment
operator|::
name|mipLevel
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|type
argument_list|()
operator|==
name|GL_TEXTURE
argument_list|)
expr_stmt|;
return|return
name|mTarget
operator|.
name|textureIndex
argument_list|()
operator|.
name|mipIndex
return|;
block|}
DECL|function|layer
name|GLint
name|FramebufferAttachment
operator|::
name|layer
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|mType
operator|==
name|GL_TEXTURE
argument_list|)
expr_stmt|;
specifier|const
specifier|auto
modifier|&
name|index
init|=
name|mTarget
operator|.
name|textureIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|type
operator|==
name|GL_TEXTURE_2D_ARRAY
operator|||
name|index
operator|.
name|type
operator|==
name|GL_TEXTURE_3D
condition|)
block|{
return|return
name|index
operator|.
name|layerIndex
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|getTexture
name|Texture
modifier|*
name|FramebufferAttachment
operator|::
name|getTexture
parameter_list|()
specifier|const
block|{
return|return
name|rx
operator|::
name|GetAs
argument_list|<
name|Texture
argument_list|>
argument_list|(
name|mResource
argument_list|)
return|;
block|}
DECL|function|getRenderbuffer
name|Renderbuffer
modifier|*
name|FramebufferAttachment
operator|::
name|getRenderbuffer
parameter_list|()
specifier|const
block|{
return|return
name|rx
operator|::
name|GetAs
argument_list|<
name|Renderbuffer
argument_list|>
argument_list|(
name|mResource
argument_list|)
return|;
block|}
DECL|function|getSurface
specifier|const
name|egl
operator|::
name|Surface
modifier|*
name|FramebufferAttachment
operator|::
name|getSurface
parameter_list|()
specifier|const
block|{
return|return
name|rx
operator|::
name|GetAs
argument_list|<
name|egl
operator|::
name|Surface
argument_list|>
argument_list|(
name|mResource
argument_list|)
return|;
block|}
block|}
end_namespace
end_unit
