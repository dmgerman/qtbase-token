begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// formatutils.h: Queries for GL image formats.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_FORMATUTILS_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_FORMATUTILS_H_
define|#
directive|define
name|LIBANGLE_FORMATUTILS_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/Caps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|<cstddef>
end_include
begin_include
include|#
directive|include
file|<stdint.h>
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
struct|struct
name|Type
block|{
name|Type
argument_list|()
expr_stmt|;
name|GLuint
name|bytes
decl_stmt|;
name|GLuint
name|bytesShift
decl_stmt|;
comment|// Bit shift by this value to effectively divide/multiply by "bytes" in a more optimal way
name|bool
name|specialInterpretation
decl_stmt|;
block|}
struct|;
specifier|const
name|Type
modifier|&
name|GetTypeInfo
parameter_list|(
name|GLenum
name|type
parameter_list|)
function_decl|;
struct|struct
name|InternalFormat
block|{
name|InternalFormat
argument_list|()
expr_stmt|;
name|GLuint
name|redBits
decl_stmt|;
name|GLuint
name|greenBits
decl_stmt|;
name|GLuint
name|blueBits
decl_stmt|;
name|GLuint
name|luminanceBits
decl_stmt|;
name|GLuint
name|alphaBits
decl_stmt|;
name|GLuint
name|sharedBits
decl_stmt|;
name|GLuint
name|depthBits
decl_stmt|;
name|GLuint
name|stencilBits
decl_stmt|;
name|GLuint
name|pixelBytes
decl_stmt|;
name|GLuint
name|componentCount
decl_stmt|;
name|bool
name|compressed
decl_stmt|;
name|GLuint
name|compressedBlockWidth
decl_stmt|;
name|GLuint
name|compressedBlockHeight
decl_stmt|;
name|GLenum
name|format
decl_stmt|;
name|GLenum
name|type
decl_stmt|;
name|GLenum
name|componentType
decl_stmt|;
name|GLenum
name|colorEncoding
decl_stmt|;
typedef|typedef
name|bool
function_decl|(
modifier|*
name|SupportCheckFunction
function_decl|)
parameter_list|(
name|GLuint
parameter_list|,
specifier|const
name|Extensions
modifier|&
parameter_list|)
function_decl|;
name|SupportCheckFunction
name|textureSupport
decl_stmt|;
name|SupportCheckFunction
name|renderSupport
decl_stmt|;
name|SupportCheckFunction
name|filterSupport
decl_stmt|;
name|GLuint
name|computeRowPitch
argument_list|(
name|GLenum
name|formatType
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLint
name|alignment
argument_list|,
name|GLint
name|rowLength
argument_list|)
decl|const
decl_stmt|;
name|GLuint
name|computeDepthPitch
argument_list|(
name|GLenum
name|formatType
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|GLint
name|alignment
argument_list|,
name|GLint
name|rowLength
argument_list|,
name|GLint
name|imageHeight
argument_list|)
decl|const
decl_stmt|;
name|GLuint
name|computeBlockSize
argument_list|(
name|GLenum
name|formatType
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|)
decl|const
decl_stmt|;
name|GLuint
name|computeSkipPixels
argument_list|(
name|GLint
name|rowPitch
argument_list|,
name|GLint
name|depthPitch
argument_list|,
name|GLint
name|skipImages
argument_list|,
name|GLint
name|skipRows
argument_list|,
name|GLint
name|skipPixels
argument_list|)
decl|const
decl_stmt|;
block|}
struct|;
specifier|const
name|InternalFormat
modifier|&
name|GetInternalFormatInfo
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
function_decl|;
name|GLenum
name|GetSizedInternalFormat
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|type
parameter_list|)
function_decl|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|GLenum
operator|>
name|FormatSet
expr_stmt|;
specifier|const
name|FormatSet
modifier|&
name|GetAllSizedInternalFormats
parameter_list|()
function_decl|;
comment|// From the ESSL 3.00.4 spec:
comment|// Vertex shader inputs can only be float, floating-point vectors, matrices, signed and unsigned
comment|// integers and integer vectors. Vertex shader inputs cannot be arrays or structures.
enum|enum
name|AttributeType
block|{
name|ATTRIBUTE_FLOAT
block|,
name|ATTRIBUTE_VEC2
block|,
name|ATTRIBUTE_VEC3
block|,
name|ATTRIBUTE_VEC4
block|,
name|ATTRIBUTE_INT
block|,
name|ATTRIBUTE_IVEC2
block|,
name|ATTRIBUTE_IVEC3
block|,
name|ATTRIBUTE_IVEC4
block|,
name|ATTRIBUTE_UINT
block|,
name|ATTRIBUTE_UVEC2
block|,
name|ATTRIBUTE_UVEC3
block|,
name|ATTRIBUTE_UVEC4
block|,
name|ATTRIBUTE_MAT2
block|,
name|ATTRIBUTE_MAT3
block|,
name|ATTRIBUTE_MAT4
block|,
name|ATTRIBUTE_MAT2x3
block|,
name|ATTRIBUTE_MAT2x4
block|,
name|ATTRIBUTE_MAT3x2
block|,
name|ATTRIBUTE_MAT3x4
block|,
name|ATTRIBUTE_MAT4x2
block|,
name|ATTRIBUTE_MAT4x3
block|, }
enum|;
name|AttributeType
name|GetAttributeType
parameter_list|(
name|GLenum
name|enumValue
parameter_list|)
function_decl|;
enum|enum
name|VertexFormatType
block|{
name|VERTEX_FORMAT_INVALID
block|,
name|VERTEX_FORMAT_SBYTE1
block|,
name|VERTEX_FORMAT_SBYTE1_NORM
block|,
name|VERTEX_FORMAT_SBYTE2
block|,
name|VERTEX_FORMAT_SBYTE2_NORM
block|,
name|VERTEX_FORMAT_SBYTE3
block|,
name|VERTEX_FORMAT_SBYTE3_NORM
block|,
name|VERTEX_FORMAT_SBYTE4
block|,
name|VERTEX_FORMAT_SBYTE4_NORM
block|,
name|VERTEX_FORMAT_UBYTE1
block|,
name|VERTEX_FORMAT_UBYTE1_NORM
block|,
name|VERTEX_FORMAT_UBYTE2
block|,
name|VERTEX_FORMAT_UBYTE2_NORM
block|,
name|VERTEX_FORMAT_UBYTE3
block|,
name|VERTEX_FORMAT_UBYTE3_NORM
block|,
name|VERTEX_FORMAT_UBYTE4
block|,
name|VERTEX_FORMAT_UBYTE4_NORM
block|,
name|VERTEX_FORMAT_SSHORT1
block|,
name|VERTEX_FORMAT_SSHORT1_NORM
block|,
name|VERTEX_FORMAT_SSHORT2
block|,
name|VERTEX_FORMAT_SSHORT2_NORM
block|,
name|VERTEX_FORMAT_SSHORT3
block|,
name|VERTEX_FORMAT_SSHORT3_NORM
block|,
name|VERTEX_FORMAT_SSHORT4
block|,
name|VERTEX_FORMAT_SSHORT4_NORM
block|,
name|VERTEX_FORMAT_USHORT1
block|,
name|VERTEX_FORMAT_USHORT1_NORM
block|,
name|VERTEX_FORMAT_USHORT2
block|,
name|VERTEX_FORMAT_USHORT2_NORM
block|,
name|VERTEX_FORMAT_USHORT3
block|,
name|VERTEX_FORMAT_USHORT3_NORM
block|,
name|VERTEX_FORMAT_USHORT4
block|,
name|VERTEX_FORMAT_USHORT4_NORM
block|,
name|VERTEX_FORMAT_SINT1
block|,
name|VERTEX_FORMAT_SINT1_NORM
block|,
name|VERTEX_FORMAT_SINT2
block|,
name|VERTEX_FORMAT_SINT2_NORM
block|,
name|VERTEX_FORMAT_SINT3
block|,
name|VERTEX_FORMAT_SINT3_NORM
block|,
name|VERTEX_FORMAT_SINT4
block|,
name|VERTEX_FORMAT_SINT4_NORM
block|,
name|VERTEX_FORMAT_UINT1
block|,
name|VERTEX_FORMAT_UINT1_NORM
block|,
name|VERTEX_FORMAT_UINT2
block|,
name|VERTEX_FORMAT_UINT2_NORM
block|,
name|VERTEX_FORMAT_UINT3
block|,
name|VERTEX_FORMAT_UINT3_NORM
block|,
name|VERTEX_FORMAT_UINT4
block|,
name|VERTEX_FORMAT_UINT4_NORM
block|,
name|VERTEX_FORMAT_SBYTE1_INT
block|,
name|VERTEX_FORMAT_SBYTE2_INT
block|,
name|VERTEX_FORMAT_SBYTE3_INT
block|,
name|VERTEX_FORMAT_SBYTE4_INT
block|,
name|VERTEX_FORMAT_UBYTE1_INT
block|,
name|VERTEX_FORMAT_UBYTE2_INT
block|,
name|VERTEX_FORMAT_UBYTE3_INT
block|,
name|VERTEX_FORMAT_UBYTE4_INT
block|,
name|VERTEX_FORMAT_SSHORT1_INT
block|,
name|VERTEX_FORMAT_SSHORT2_INT
block|,
name|VERTEX_FORMAT_SSHORT3_INT
block|,
name|VERTEX_FORMAT_SSHORT4_INT
block|,
name|VERTEX_FORMAT_USHORT1_INT
block|,
name|VERTEX_FORMAT_USHORT2_INT
block|,
name|VERTEX_FORMAT_USHORT3_INT
block|,
name|VERTEX_FORMAT_USHORT4_INT
block|,
name|VERTEX_FORMAT_SINT1_INT
block|,
name|VERTEX_FORMAT_SINT2_INT
block|,
name|VERTEX_FORMAT_SINT3_INT
block|,
name|VERTEX_FORMAT_SINT4_INT
block|,
name|VERTEX_FORMAT_UINT1_INT
block|,
name|VERTEX_FORMAT_UINT2_INT
block|,
name|VERTEX_FORMAT_UINT3_INT
block|,
name|VERTEX_FORMAT_UINT4_INT
block|,
name|VERTEX_FORMAT_FIXED1
block|,
name|VERTEX_FORMAT_FIXED2
block|,
name|VERTEX_FORMAT_FIXED3
block|,
name|VERTEX_FORMAT_FIXED4
block|,
name|VERTEX_FORMAT_HALF1
block|,
name|VERTEX_FORMAT_HALF2
block|,
name|VERTEX_FORMAT_HALF3
block|,
name|VERTEX_FORMAT_HALF4
block|,
name|VERTEX_FORMAT_FLOAT1
block|,
name|VERTEX_FORMAT_FLOAT2
block|,
name|VERTEX_FORMAT_FLOAT3
block|,
name|VERTEX_FORMAT_FLOAT4
block|,
name|VERTEX_FORMAT_SINT210
block|,
name|VERTEX_FORMAT_UINT210
block|,
name|VERTEX_FORMAT_SINT210_NORM
block|,
name|VERTEX_FORMAT_UINT210_NORM
block|,
name|VERTEX_FORMAT_SINT210_INT
block|,
name|VERTEX_FORMAT_UINT210_INT
block|, }
enum|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|gl
operator|::
name|VertexFormatType
operator|>
name|InputLayout
expr_stmt|;
name|struct
name|VertexFormat
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|VertexFormat
argument_list|(
argument|GLenum typeIn
argument_list|,
argument|GLboolean normalizedIn
argument_list|,
argument|GLuint componentsIn
argument_list|,
argument|bool pureIntegerIn
argument_list|)
block|;
name|GLenum
name|type
block|;
name|GLboolean
name|normalized
block|;
name|GLuint
name|components
block|;
name|bool
name|pureInteger
block|; }
decl_stmt|;
name|VertexFormatType
name|GetVertexFormatType
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLboolean
name|normalized
parameter_list|,
name|GLuint
name|components
parameter_list|,
name|bool
name|pureInteger
parameter_list|)
function_decl|;
name|VertexFormatType
name|GetVertexFormatType
parameter_list|(
specifier|const
name|VertexAttribute
modifier|&
name|attrib
parameter_list|)
function_decl|;
name|VertexFormatType
name|GetVertexFormatType
parameter_list|(
specifier|const
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
name|GLenum
name|currentValueType
parameter_list|)
function_decl|;
specifier|const
name|VertexFormat
modifier|&
name|GetVertexFormatFromType
parameter_list|(
name|VertexFormatType
name|vertexFormatType
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_comment
comment|// namespace gl
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_FORMATUTILS_H_
end_comment
end_unit
