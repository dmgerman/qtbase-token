begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Config.cpp: Implements the egl::Config class, describing the format, type
end_comment
begin_comment
comment|// and size for an egl::Surface. Implements EGLConfig and related functionality.
end_comment
begin_comment
comment|// [EGL 1.5] section 3.4 page 19.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/Config.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/AttributeMap.h"
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|<EGL/eglext.h>
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_namespace
DECL|namespace|egl
namespace|namespace
name|egl
block|{
DECL|function|Config
name|Config
operator|::
name|Config
parameter_list|()
member_init_list|:
name|renderTargetFormat
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|depthStencilFormat
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|bufferSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|redSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|greenSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|blueSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|luminanceSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|alphaSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|alphaMaskSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bindToTextureRGB
argument_list|(
name|EGL_FALSE
argument_list|)
member_init_list|,
name|bindToTextureRGBA
argument_list|(
name|EGL_FALSE
argument_list|)
member_init_list|,
name|colorBufferType
argument_list|(
name|EGL_NONE
argument_list|)
member_init_list|,
name|configCaveat
argument_list|(
name|EGL_NONE
argument_list|)
member_init_list|,
name|configID
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|conformant
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|depthSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|level
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|matchNativePixmap
argument_list|(
name|EGL_FALSE
argument_list|)
member_init_list|,
name|maxPBufferWidth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maxPBufferHeight
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maxPBufferPixels
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maxSwapInterval
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|minSwapInterval
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|nativeRenderable
argument_list|(
name|EGL_FALSE
argument_list|)
member_init_list|,
name|nativeVisualID
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|nativeVisualType
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|renderableType
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sampleBuffers
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|samples
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|stencilSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|surfaceType
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|transparentType
argument_list|(
name|EGL_NONE
argument_list|)
member_init_list|,
name|transparentRedValue
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|transparentGreenValue
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|transparentBlueValue
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|add
name|EGLint
name|ConfigSet
operator|::
name|add
parameter_list|(
specifier|const
name|Config
modifier|&
name|config
parameter_list|)
block|{
comment|// Set the config's ID to a small number that starts at 1 ([EGL 1.5] section 3.4)
name|EGLint
name|id
init|=
name|mConfigs
operator|.
name|size
argument_list|()
operator|+
literal|1
decl_stmt|;
name|Config
name|copyConfig
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|copyConfig
operator|.
name|configID
operator|=
name|id
expr_stmt|;
name|mConfigs
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|id
argument_list|,
name|copyConfig
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
DECL|function|get
specifier|const
name|Config
modifier|&
name|ConfigSet
operator|::
name|get
parameter_list|(
name|EGLint
name|id
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|mConfigs
operator|.
name|find
argument_list|(
name|id
argument_list|)
operator|!=
name|mConfigs
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mConfigs
operator|.
name|find
argument_list|(
name|id
argument_list|)
operator|->
name|second
return|;
block|}
DECL|function|clear
name|void
name|ConfigSet
operator|::
name|clear
parameter_list|()
block|{
name|mConfigs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|size
name|size_t
name|ConfigSet
operator|::
name|size
parameter_list|()
specifier|const
block|{
return|return
name|mConfigs
operator|.
name|size
argument_list|()
return|;
block|}
DECL|function|contains
name|bool
name|ConfigSet
operator|::
name|contains
parameter_list|(
specifier|const
name|Config
modifier|*
name|config
parameter_list|)
specifier|const
block|{
for|for
control|(
name|auto
name|i
init|=
name|mConfigs
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|mConfigs
operator|.
name|end
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|Config
modifier|&
name|item
init|=
name|i
operator|->
name|second
decl_stmt|;
if|if
condition|(
name|config
operator|==
operator|&
name|item
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// Function object used by STL sorting routines for ordering Configs according to [EGL 1.5] section 3.4.1.2 page 28.
DECL|class|ConfigSorter
class|class
name|ConfigSorter
block|{
public|public:
DECL|function|ConfigSorter
specifier|explicit
name|ConfigSorter
parameter_list|(
specifier|const
name|AttributeMap
modifier|&
name|attributeMap
parameter_list|)
member_init_list|:
name|mWantRed
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mWantGreen
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mWantBlue
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mWantAlpha
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mWantLuminance
argument_list|(
literal|false
argument_list|)
block|{
name|scanForWantedComponents
argument_list|(
name|attributeMap
argument_list|)
expr_stmt|;
block|}
DECL|function|operator ()
name|bool
name|operator
name|()
parameter_list|(
specifier|const
name|Config
modifier|*
name|x
parameter_list|,
specifier|const
name|Config
modifier|*
name|y
parameter_list|)
specifier|const
block|{
return|return
call|(
modifier|*
name|this
call|)
argument_list|(
operator|*
name|x
argument_list|,
operator|*
name|y
argument_list|)
return|;
block|}
DECL|function|operator ()
name|bool
name|operator
name|()
parameter_list|(
specifier|const
name|Config
modifier|&
name|x
parameter_list|,
specifier|const
name|Config
modifier|&
name|y
parameter_list|)
specifier|const
block|{
DECL|macro|SORT
define|#
directive|define
name|SORT
parameter_list|(
name|attribute
parameter_list|)
define|\
value|if (x.attribute != y.attribute)            \             {                                          \                 return x.attribute< y.attribute;      \             }
assert|static_assert
argument_list|(
name|EGL_NONE
operator|<
name|EGL_SLOW_CONFIG
operator|&&
name|EGL_SLOW_CONFIG
operator|<
name|EGL_NON_CONFORMANT_CONFIG
argument_list|,
literal|"Unexpected EGL enum value."
argument_list|)
assert|;
name|SORT
argument_list|(
name|configCaveat
argument_list|)
expr_stmt|;
assert|static_assert
argument_list|(
name|EGL_RGB_BUFFER
operator|<
name|EGL_LUMINANCE_BUFFER
argument_list|,
literal|"Unexpected EGL enum value."
argument_list|)
assert|;
name|SORT
argument_list|(
name|colorBufferType
argument_list|)
expr_stmt|;
comment|// By larger total number of color bits, only considering those that are requested to be> 0.
name|EGLint
name|xComponentsSize
init|=
name|wantedComponentsSize
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|EGLint
name|yComponentsSize
init|=
name|wantedComponentsSize
argument_list|(
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|xComponentsSize
operator|!=
name|yComponentsSize
condition|)
block|{
return|return
name|xComponentsSize
operator|>
name|yComponentsSize
return|;
block|}
name|SORT
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|SORT
argument_list|(
name|sampleBuffers
argument_list|)
expr_stmt|;
name|SORT
argument_list|(
name|samples
argument_list|)
expr_stmt|;
name|SORT
argument_list|(
name|depthSize
argument_list|)
expr_stmt|;
name|SORT
argument_list|(
name|stencilSize
argument_list|)
expr_stmt|;
name|SORT
argument_list|(
name|alphaMaskSize
argument_list|)
expr_stmt|;
name|SORT
argument_list|(
name|nativeVisualType
argument_list|)
expr_stmt|;
name|SORT
argument_list|(
name|configID
argument_list|)
expr_stmt|;
DECL|macro|SORT
undef|#
directive|undef
name|SORT
return|return
literal|false
return|;
block|}
private|private:
DECL|function|scanForWantedComponents
name|void
name|scanForWantedComponents
parameter_list|(
specifier|const
name|AttributeMap
modifier|&
name|attributeMap
parameter_list|)
block|{
comment|// [EGL 1.5] section 3.4.1.2 page 30
comment|// Sorting rule #3: by larger total number of color bits, not considering
comment|// components that are 0 or don't-care.
for|for
control|(
name|auto
name|attribIter
init|=
name|attributeMap
operator|.
name|begin
argument_list|()
init|;
name|attribIter
operator|!=
name|attributeMap
operator|.
name|end
argument_list|()
condition|;
name|attribIter
operator|++
control|)
block|{
name|EGLint
name|attributeKey
init|=
name|attribIter
operator|->
name|first
decl_stmt|;
name|EGLint
name|attributeValue
init|=
name|attribIter
operator|->
name|second
decl_stmt|;
if|if
condition|(
name|attributeKey
operator|!=
literal|0
operator|&&
name|attributeValue
operator|!=
name|EGL_DONT_CARE
condition|)
block|{
switch|switch
condition|(
name|attributeKey
condition|)
block|{
case|case
name|EGL_RED_SIZE
case|:
name|mWantRed
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|EGL_GREEN_SIZE
case|:
name|mWantGreen
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|EGL_BLUE_SIZE
case|:
name|mWantBlue
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|EGL_ALPHA_SIZE
case|:
name|mWantAlpha
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|EGL_LUMINANCE_SIZE
case|:
name|mWantLuminance
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
DECL|function|wantedComponentsSize
name|EGLint
name|wantedComponentsSize
parameter_list|(
specifier|const
name|Config
modifier|&
name|config
parameter_list|)
specifier|const
block|{
name|EGLint
name|total
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|mWantRed
condition|)
name|total
operator|+=
name|config
operator|.
name|redSize
expr_stmt|;
if|if
condition|(
name|mWantGreen
condition|)
name|total
operator|+=
name|config
operator|.
name|greenSize
expr_stmt|;
if|if
condition|(
name|mWantBlue
condition|)
name|total
operator|+=
name|config
operator|.
name|blueSize
expr_stmt|;
if|if
condition|(
name|mWantAlpha
condition|)
name|total
operator|+=
name|config
operator|.
name|alphaSize
expr_stmt|;
if|if
condition|(
name|mWantLuminance
condition|)
name|total
operator|+=
name|config
operator|.
name|luminanceSize
expr_stmt|;
return|return
name|total
return|;
block|}
DECL|member|mWantRed
name|bool
name|mWantRed
decl_stmt|;
DECL|member|mWantGreen
name|bool
name|mWantGreen
decl_stmt|;
DECL|member|mWantBlue
name|bool
name|mWantBlue
decl_stmt|;
DECL|member|mWantAlpha
name|bool
name|mWantAlpha
decl_stmt|;
DECL|member|mWantLuminance
name|bool
name|mWantLuminance
decl_stmt|;
block|}
class|;
DECL|function|filter
name|std
operator|::
name|vector
argument_list|<
specifier|const
name|Config
modifier|*
argument_list|>
name|ConfigSet
operator|::
name|filter
parameter_list|(
specifier|const
name|AttributeMap
modifier|&
name|attributeMap
parameter_list|)
specifier|const
block|{
name|std
operator|::
name|vector
argument_list|<
specifier|const
name|Config
modifier|*
argument_list|>
name|result
decl_stmt|;
name|result
operator|.
name|reserve
argument_list|(
name|mConfigs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|auto
name|configIter
init|=
name|mConfigs
operator|.
name|begin
argument_list|()
init|;
name|configIter
operator|!=
name|mConfigs
operator|.
name|end
argument_list|()
condition|;
name|configIter
operator|++
control|)
block|{
specifier|const
name|Config
modifier|&
name|config
init|=
name|configIter
operator|->
name|second
decl_stmt|;
name|bool
name|match
init|=
literal|true
decl_stmt|;
for|for
control|(
name|auto
name|attribIter
init|=
name|attributeMap
operator|.
name|begin
argument_list|()
init|;
name|attribIter
operator|!=
name|attributeMap
operator|.
name|end
argument_list|()
condition|;
name|attribIter
operator|++
control|)
block|{
name|EGLint
name|attributeKey
init|=
name|attribIter
operator|->
name|first
decl_stmt|;
name|EGLint
name|attributeValue
init|=
name|attribIter
operator|->
name|second
decl_stmt|;
switch|switch
condition|(
name|attributeKey
condition|)
block|{
case|case
name|EGL_BUFFER_SIZE
case|:
name|match
operator|=
name|config
operator|.
name|bufferSize
operator|>=
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_ALPHA_SIZE
case|:
name|match
operator|=
name|config
operator|.
name|alphaSize
operator|>=
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_BLUE_SIZE
case|:
name|match
operator|=
name|config
operator|.
name|blueSize
operator|>=
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_GREEN_SIZE
case|:
name|match
operator|=
name|config
operator|.
name|greenSize
operator|>=
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_RED_SIZE
case|:
name|match
operator|=
name|config
operator|.
name|redSize
operator|>=
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_DEPTH_SIZE
case|:
name|match
operator|=
name|config
operator|.
name|depthSize
operator|>=
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_STENCIL_SIZE
case|:
name|match
operator|=
name|config
operator|.
name|stencilSize
operator|>=
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_CONFIG_CAVEAT
case|:
name|match
operator|=
name|config
operator|.
name|configCaveat
operator|==
operator|(
name|EGLenum
operator|)
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_CONFIG_ID
case|:
name|match
operator|=
name|config
operator|.
name|configID
operator|==
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_LEVEL
case|:
name|match
operator|=
name|config
operator|.
name|level
operator|>=
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_NATIVE_RENDERABLE
case|:
name|match
operator|=
name|config
operator|.
name|nativeRenderable
operator|==
operator|(
name|EGLBoolean
operator|)
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_NATIVE_VISUAL_TYPE
case|:
name|match
operator|=
name|config
operator|.
name|nativeVisualType
operator|==
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_SAMPLES
case|:
name|match
operator|=
name|config
operator|.
name|samples
operator|>=
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_SAMPLE_BUFFERS
case|:
name|match
operator|=
name|config
operator|.
name|sampleBuffers
operator|>=
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_SURFACE_TYPE
case|:
name|match
operator|=
operator|(
name|config
operator|.
name|surfaceType
operator|&
name|attributeValue
operator|)
operator|==
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_TRANSPARENT_TYPE
case|:
name|match
operator|=
name|config
operator|.
name|transparentType
operator|==
operator|(
name|EGLenum
operator|)
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_TRANSPARENT_BLUE_VALUE
case|:
name|match
operator|=
name|config
operator|.
name|transparentBlueValue
operator|==
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_TRANSPARENT_GREEN_VALUE
case|:
name|match
operator|=
name|config
operator|.
name|transparentGreenValue
operator|==
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_TRANSPARENT_RED_VALUE
case|:
name|match
operator|=
name|config
operator|.
name|transparentRedValue
operator|==
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_BIND_TO_TEXTURE_RGB
case|:
name|match
operator|=
name|config
operator|.
name|bindToTextureRGB
operator|==
operator|(
name|EGLBoolean
operator|)
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_BIND_TO_TEXTURE_RGBA
case|:
name|match
operator|=
name|config
operator|.
name|bindToTextureRGBA
operator|==
operator|(
name|EGLBoolean
operator|)
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_MIN_SWAP_INTERVAL
case|:
name|match
operator|=
name|config
operator|.
name|minSwapInterval
operator|==
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_MAX_SWAP_INTERVAL
case|:
name|match
operator|=
name|config
operator|.
name|maxSwapInterval
operator|==
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_LUMINANCE_SIZE
case|:
name|match
operator|=
name|config
operator|.
name|luminanceSize
operator|>=
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_ALPHA_MASK_SIZE
case|:
name|match
operator|=
name|config
operator|.
name|alphaMaskSize
operator|>=
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_COLOR_BUFFER_TYPE
case|:
name|match
operator|=
name|config
operator|.
name|colorBufferType
operator|==
operator|(
name|EGLenum
operator|)
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_RENDERABLE_TYPE
case|:
name|match
operator|=
operator|(
name|config
operator|.
name|renderableType
operator|&
name|attributeValue
operator|)
operator|==
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_MATCH_NATIVE_PIXMAP
case|:
name|match
operator|=
literal|false
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_CONFORMANT
case|:
name|match
operator|=
operator|(
name|config
operator|.
name|conformant
operator|&
name|attributeValue
operator|)
operator|==
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_MAX_PBUFFER_WIDTH
case|:
name|match
operator|=
name|config
operator|.
name|maxPBufferWidth
operator|>=
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_MAX_PBUFFER_HEIGHT
case|:
name|match
operator|=
name|config
operator|.
name|maxPBufferHeight
operator|>=
name|attributeValue
expr_stmt|;
break|break;
case|case
name|EGL_MAX_PBUFFER_PIXELS
case|:
name|match
operator|=
name|config
operator|.
name|maxPBufferPixels
operator|>=
name|attributeValue
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|match
condition|)
block|{
name|result
operator|.
name|push_back
argument_list|(
operator|&
name|config
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Sort the result
name|std
operator|::
name|sort
argument_list|(
name|result
operator|.
name|begin
argument_list|()
argument_list|,
name|result
operator|.
name|end
argument_list|()
argument_list|,
name|ConfigSorter
argument_list|(
name|attributeMap
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_namespace
end_unit
