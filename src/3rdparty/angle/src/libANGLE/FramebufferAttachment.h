begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// FramebufferAttachment.h: Defines the wrapper class gl::FramebufferAttachment, as well as the
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4.3 page 108.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_FRAMEBUFFERATTACHMENT_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_FRAMEBUFFERATTACHMENT_H_
define|#
directive|define
name|LIBANGLE_FRAMEBUFFERATTACHMENT_H_
end_define
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/ImageIndex.h"
end_include
begin_decl_stmt
name|namespace
name|egl
block|{
name|class
name|Surface
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|rx
block|{
comment|// An implementation-specific object associated with an attachment.
name|class
name|FramebufferAttachmentRenderTarget
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|FramebufferAttachmentRenderTarget
argument_list|()
block|{}
name|virtual
operator|~
name|FramebufferAttachmentRenderTarget
argument_list|()
block|{}
block|}
decl_stmt|;
name|class
name|FramebufferAttachmentObjectImpl
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|FramebufferAttachmentObject
decl_stmt|;
name|class
name|Renderbuffer
decl_stmt|;
name|class
name|Texture
decl_stmt|;
comment|// FramebufferAttachment implements a GL framebuffer attachment.
comment|// Attachments are "light" containers, which store pointers to ref-counted GL objects.
comment|// We support GL texture (2D/3D/Cube/2D array) and renderbuffer object attachments.
comment|// Note: Our old naming scheme used the term "Renderbuffer" for both GL renderbuffers and for
comment|// framebuffer attachments, which confused their usage.
name|class
name|FramebufferAttachment
name|final
block|{
name|public
label|:
name|FramebufferAttachment
argument_list|()
expr_stmt|;
name|FramebufferAttachment
argument_list|(
argument|GLenum type
argument_list|,
argument|GLenum binding
argument_list|,
argument|const ImageIndex&textureIndex
argument_list|,
argument|FramebufferAttachmentObject *resource
argument_list|)
empty_stmt|;
name|FramebufferAttachment
argument_list|(
specifier|const
name|FramebufferAttachment
operator|&
name|other
argument_list|)
expr_stmt|;
name|FramebufferAttachment
modifier|&
name|operator
init|=
operator|(
specifier|const
name|FramebufferAttachment
operator|&
name|other
operator|)
decl_stmt|;
operator|~
name|FramebufferAttachment
argument_list|()
expr_stmt|;
comment|// A framebuffer attachment points to one of three types of resources: Renderbuffers,
comment|// Textures and egl::Surface. The "Target" struct indicates which part of the
comment|// object an attachment references. For the three types:
comment|//   - a Renderbuffer has a unique renderable target, and needs no target index
comment|//   - a Texture has targets for every image and uses an ImageIndex
comment|//   - a Surface has targets for Color and Depth/Stencil, and uses the attachment binding
name|class
name|Target
block|{
name|public
label|:
name|Target
argument_list|()
expr_stmt|;
name|Target
argument_list|(
argument|GLenum binding
argument_list|,
argument|const ImageIndex&imageIndex
argument_list|)
empty_stmt|;
name|Target
argument_list|(
specifier|const
name|Target
operator|&
name|other
argument_list|)
expr_stmt|;
name|Target
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Target
operator|&
name|other
operator|)
decl_stmt|;
name|GLenum
name|binding
argument_list|()
specifier|const
block|{
return|return
name|mBinding
return|;
block|}
specifier|const
name|ImageIndex
operator|&
name|textureIndex
argument_list|()
specifier|const
block|{
return|return
name|mTextureIndex
return|;
block|}
name|private
label|:
name|GLenum
name|mBinding
decl_stmt|;
name|ImageIndex
name|mTextureIndex
decl_stmt|;
block|}
empty_stmt|;
name|void
name|detach
parameter_list|()
function_decl|;
name|void
name|attach
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLenum
name|binding
parameter_list|,
specifier|const
name|ImageIndex
modifier|&
name|textureIndex
parameter_list|,
name|FramebufferAttachmentObject
modifier|*
name|resource
parameter_list|)
function_decl|;
comment|// Helper methods
name|GLuint
name|getRedSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getGreenSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getBlueSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getAlphaSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getDepthSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getStencilSize
argument_list|()
specifier|const
expr_stmt|;
name|GLenum
name|getComponentType
argument_list|()
specifier|const
expr_stmt|;
name|GLenum
name|getColorEncoding
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isTextureWithId
argument_list|(
name|GLuint
name|textureId
argument_list|)
decl|const
block|{
return|return
name|mType
operator|==
name|GL_TEXTURE
operator|&&
name|id
argument_list|()
operator|==
name|textureId
return|;
block|}
name|bool
name|isRenderbufferWithId
argument_list|(
name|GLuint
name|renderbufferId
argument_list|)
decl|const
block|{
return|return
name|mType
operator|==
name|GL_RENDERBUFFER
operator|&&
name|id
argument_list|()
operator|==
name|renderbufferId
return|;
block|}
name|GLenum
name|getBinding
argument_list|()
specifier|const
block|{
return|return
name|mTarget
operator|.
name|binding
argument_list|()
return|;
block|}
name|GLuint
name|id
argument_list|()
specifier|const
expr_stmt|;
comment|// These methods are only legal to call on Texture attachments
specifier|const
name|ImageIndex
operator|&
name|getTextureImageIndex
argument_list|()
specifier|const
expr_stmt|;
name|GLenum
name|cubeMapFace
argument_list|()
specifier|const
expr_stmt|;
name|GLint
name|mipLevel
argument_list|()
specifier|const
expr_stmt|;
name|GLint
name|layer
argument_list|()
specifier|const
expr_stmt|;
comment|// The size of the underlying resource the attachment points to. The 'depth' value will
comment|// correspond to a 3D texture depth or the layer count of a 2D array texture. For Surfaces and
comment|// Renderbuffers, it will always be 1.
name|Extents
name|getSize
argument_list|()
specifier|const
expr_stmt|;
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
expr_stmt|;
name|GLsizei
name|getSamples
argument_list|()
specifier|const
expr_stmt|;
name|GLenum
name|type
argument_list|()
specifier|const
block|{
return|return
name|mType
return|;
block|}
name|bool
name|isAttached
argument_list|()
specifier|const
block|{
return|return
name|mType
operator|!=
name|GL_NONE
return|;
block|}
name|Renderbuffer
operator|*
name|getRenderbuffer
argument_list|()
specifier|const
expr_stmt|;
name|Texture
operator|*
name|getTexture
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|egl
operator|::
name|Surface
operator|*
name|getSurface
argument_list|()
specifier|const
expr_stmt|;
comment|// "T" must be static_castable from FramebufferAttachmentRenderTarget
name|template
operator|<
name|typename
name|T
operator|>
name|gl
operator|::
name|Error
name|getRenderTarget
argument_list|(
argument|T **rtOut
argument_list|)
specifier|const
block|{
comment|// Cast through the pointer-to-pointer type
name|rx
operator|::
name|FramebufferAttachmentRenderTarget
operator|*
name|rtPtr
operator|=
name|nullptr
block|;
name|gl
operator|::
name|Error
name|error
operator|=
name|getRenderTarget
argument_list|(
operator|&
name|rtPtr
argument_list|)
block|;
operator|*
name|rtOut
operator|=
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|rtPtr
operator|)
block|;
return|return
name|error
return|;
block|}
name|private
label|:
name|gl
operator|::
name|Error
name|getRenderTarget
argument_list|(
argument|rx::FramebufferAttachmentRenderTarget **rtOut
argument_list|)
specifier|const
expr_stmt|;
name|GLenum
name|mType
decl_stmt|;
name|Target
name|mTarget
decl_stmt|;
name|FramebufferAttachmentObject
modifier|*
name|mResource
decl_stmt|;
block|}
empty_stmt|;
comment|// A base class for objects that FBO Attachments may point to.
name|class
name|FramebufferAttachmentObject
block|{
name|public
label|:
name|FramebufferAttachmentObject
argument_list|()
block|{}
name|virtual
operator|~
name|FramebufferAttachmentObject
argument_list|()
block|{}
name|virtual
name|Extents
name|getAttachmentSize
argument_list|(
argument|const FramebufferAttachment::Target&target
argument_list|)
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLenum
name|getAttachmentInternalFormat
argument_list|(
specifier|const
name|FramebufferAttachment
operator|::
name|Target
operator|&
name|target
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|GLsizei
name|getAttachmentSamples
argument_list|(
specifier|const
name|FramebufferAttachment
operator|::
name|Target
operator|&
name|target
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|onAttach
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|onDetach
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|GLuint
name|getId
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|Error
name|getAttachmentRenderTarget
argument_list|(
specifier|const
name|FramebufferAttachment
operator|::
name|Target
operator|&
name|target
argument_list|,
name|rx
operator|::
name|FramebufferAttachmentRenderTarget
operator|*
operator|*
name|rtOut
argument_list|)
decl|const
decl_stmt|;
name|protected
label|:
name|virtual
name|rx
operator|::
name|FramebufferAttachmentObjectImpl
operator|*
name|getAttachmentImpl
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
block|}
empty_stmt|;
specifier|inline
name|Extents
name|FramebufferAttachment
operator|::
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|mResource
operator|->
name|getAttachmentSize
argument_list|(
name|mTarget
argument_list|)
return|;
block|}
specifier|inline
name|GLenum
name|FramebufferAttachment
operator|::
name|getInternalFormat
argument_list|()
specifier|const
block|{
return|return
name|mResource
operator|->
name|getAttachmentInternalFormat
argument_list|(
name|mTarget
argument_list|)
return|;
block|}
specifier|inline
name|GLsizei
name|FramebufferAttachment
operator|::
name|getSamples
argument_list|()
specifier|const
block|{
return|return
name|mResource
operator|->
name|getAttachmentSamples
argument_list|(
name|mTarget
argument_list|)
return|;
block|}
specifier|inline
name|gl
operator|::
name|Error
name|FramebufferAttachment
operator|::
name|getRenderTarget
argument_list|(
argument|rx::FramebufferAttachmentRenderTarget **rtOut
argument_list|)
specifier|const
block|{
return|return
name|mResource
operator|->
name|getAttachmentRenderTarget
argument_list|(
name|mTarget
argument_list|,
name|rtOut
argument_list|)
return|;
block|}
block|}
end_decl_stmt
begin_comment
comment|// namespace gl
end_comment
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|FramebufferAttachmentObjectImpl
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|FramebufferAttachmentObjectImpl
argument_list|()
block|{}
name|virtual
operator|~
name|FramebufferAttachmentObjectImpl
argument_list|()
block|{}
name|virtual
name|gl
operator|::
name|Error
name|getAttachmentRenderTarget
argument_list|(
specifier|const
name|gl
operator|::
name|FramebufferAttachment
operator|::
name|Target
operator|&
name|target
argument_list|,
name|FramebufferAttachmentRenderTarget
operator|*
operator|*
name|rtOut
argument_list|)
operator|=
literal|0
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace rx
end_comment
begin_decl_stmt
name|namespace
name|gl
block|{
specifier|inline
name|Error
name|FramebufferAttachmentObject
operator|::
name|getAttachmentRenderTarget
argument_list|(
argument|const FramebufferAttachment::Target&target
argument_list|,
argument|rx::FramebufferAttachmentRenderTarget **rtOut
argument_list|)
specifier|const
block|{
return|return
name|getAttachmentImpl
argument_list|()
operator|->
name|getAttachmentRenderTarget
argument_list|(
name|target
argument_list|,
name|rtOut
argument_list|)
return|;
block|}
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_FRAMEBUFFERATTACHMENT_H_
end_comment
end_unit
