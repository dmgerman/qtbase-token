begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// FramebufferAttachment.h: Defines the wrapper class gl::FramebufferAttachment, as well as the
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4.3 page 108.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_FRAMEBUFFERATTACHMENT_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_FRAMEBUFFERATTACHMENT_H_
define|#
directive|define
name|LIBANGLE_FRAMEBUFFERATTACHMENT_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/RefCountObject.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Renderbuffer
decl_stmt|;
comment|// FramebufferAttachment implements a GL framebuffer attachment.
comment|// Attachments are "light" containers, which store pointers to ref-counted GL objects.
comment|// We support GL texture (2D/3D/Cube/2D array) and renderbuffer object attachments.
comment|// Note: Our old naming scheme used the term "Renderbuffer" for both GL renderbuffers and for
comment|// framebuffer attachments, which confused their usage.
name|class
name|FramebufferAttachment
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|explicit
name|FramebufferAttachment
argument_list|(
argument|GLenum binding
argument_list|)
block|;
name|virtual
operator|~
name|FramebufferAttachment
argument_list|()
block|;
comment|// Helper methods
name|GLuint
name|getRedSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getGreenSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getBlueSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getAlphaSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getDepthSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getStencilSize
argument_list|()
specifier|const
block|;
name|GLenum
name|getComponentType
argument_list|()
specifier|const
block|;
name|GLenum
name|getColorEncoding
argument_list|()
specifier|const
block|;
name|bool
name|isTextureWithId
argument_list|(
argument|GLuint textureId
argument_list|)
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|GL_TEXTURE
operator|&&
name|id
argument_list|()
operator|==
name|textureId
return|;
block|}
name|bool
name|isRenderbufferWithId
argument_list|(
argument|GLuint renderbufferId
argument_list|)
specifier|const
block|{
return|return
name|type
argument_list|()
operator|==
name|GL_RENDERBUFFER
operator|&&
name|id
argument_list|()
operator|==
name|renderbufferId
return|;
block|}
name|GLenum
name|getBinding
argument_list|()
specifier|const
block|{
return|return
name|mBinding
return|;
block|}
comment|// Child class interface
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|GLuint
name|id
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|GLenum
name|type
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|GLint
name|mipLevel
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|GLenum
name|cubeMapFace
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|GLint
name|layer
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|Texture
operator|*
name|getTexture
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
specifier|const
name|ImageIndex
operator|*
name|getTextureImageIndex
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|Renderbuffer
operator|*
name|getRenderbuffer
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|private
operator|:
name|GLenum
name|mBinding
block|; }
decl_stmt|;
name|class
name|TextureAttachment
range|:
name|public
name|FramebufferAttachment
block|{
name|public
operator|:
name|TextureAttachment
argument_list|(
argument|GLenum binding
argument_list|,
argument|Texture *texture
argument_list|,
argument|const ImageIndex&index
argument_list|)
block|;
name|virtual
operator|~
name|TextureAttachment
argument_list|()
block|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
block|;
name|virtual
name|GLuint
name|id
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|type
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|mipLevel
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|cubeMapFace
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|layer
argument_list|()
specifier|const
block|;
name|virtual
name|Texture
operator|*
name|getTexture
argument_list|()
specifier|const
block|;
name|virtual
specifier|const
name|ImageIndex
operator|*
name|getTextureImageIndex
argument_list|()
specifier|const
block|;
name|virtual
name|Renderbuffer
operator|*
name|getRenderbuffer
argument_list|()
specifier|const
block|;
name|private
operator|:
name|BindingPointer
operator|<
name|Texture
operator|>
name|mTexture
block|;
name|ImageIndex
name|mIndex
block|; }
decl_stmt|;
name|class
name|RenderbufferAttachment
range|:
name|public
name|FramebufferAttachment
block|{
name|public
operator|:
name|RenderbufferAttachment
argument_list|(
argument|GLenum binding
argument_list|,
argument|Renderbuffer *renderbuffer
argument_list|)
block|;
name|virtual
operator|~
name|RenderbufferAttachment
argument_list|()
block|;
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
block|;
name|virtual
name|GLuint
name|id
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|type
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|mipLevel
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|cubeMapFace
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|layer
argument_list|()
specifier|const
block|;
name|virtual
name|Texture
operator|*
name|getTexture
argument_list|()
specifier|const
block|;
name|virtual
specifier|const
name|ImageIndex
operator|*
name|getTextureImageIndex
argument_list|()
specifier|const
block|;
name|virtual
name|Renderbuffer
operator|*
name|getRenderbuffer
argument_list|()
specifier|const
block|;
name|private
operator|:
name|BindingPointer
operator|<
name|Renderbuffer
operator|>
name|mRenderbuffer
block|; }
decl_stmt|;
name|class
name|DefaultAttachment
range|:
name|public
name|FramebufferAttachment
block|{
name|public
operator|:
name|DefaultAttachment
argument_list|(
argument|GLenum binding
argument_list|,
argument|egl::Surface *surface
argument_list|)
block|;
name|virtual
operator|~
name|DefaultAttachment
argument_list|()
block|;
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
block|;
name|virtual
name|GLuint
name|id
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|type
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|mipLevel
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|cubeMapFace
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|layer
argument_list|()
specifier|const
block|;
name|virtual
name|Texture
operator|*
name|getTexture
argument_list|()
specifier|const
block|;
name|virtual
specifier|const
name|ImageIndex
operator|*
name|getTextureImageIndex
argument_list|()
specifier|const
block|;
name|virtual
name|Renderbuffer
operator|*
name|getRenderbuffer
argument_list|()
specifier|const
block|;
specifier|const
name|egl
operator|::
name|Surface
operator|*
name|getSurface
argument_list|()
specifier|const
block|{
return|return
name|mSurface
operator|.
name|get
argument_list|()
return|;
block|}
name|private
operator|:
name|BindingPointer
operator|<
name|egl
operator|::
name|Surface
operator|>
name|mSurface
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_FRAMEBUFFERATTACHMENT_H_
end_comment
end_unit
