begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Display.h: Defines the egl::Display class, representing the abstract
end_comment
begin_comment
comment|// display on which graphics are drawn. Implements EGLDisplay.
end_comment
begin_comment
comment|// [EGL 1.4] section 2.1.2 page 3.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_DISPLAY_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_DISPLAY_H_
define|#
directive|define
name|LIBANGLE_DISPLAY_H_
end_define
begin_include
include|#
directive|include
file|<set>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Caps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Config.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/AttributeMap.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Context
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|DisplayImpl
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|egl
block|{
name|class
name|Surface
decl_stmt|;
name|class
name|Display
name|final
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
operator|~
name|Display
argument_list|()
block|;
name|Error
name|initialize
argument_list|()
block|;
name|void
name|terminate
argument_list|()
block|;
specifier|static
name|egl
operator|::
name|Display
operator|*
name|getDisplay
argument_list|(
argument|EGLNativeDisplayType displayId
argument_list|,
argument|const AttributeMap&attribMap
argument_list|)
block|;
specifier|static
specifier|const
name|ClientExtensions
operator|&
name|getClientExtensions
argument_list|()
block|;
specifier|static
specifier|const
name|std
operator|::
name|string
operator|&
name|getClientExtensionString
argument_list|()
block|;
name|std
operator|::
name|vector
operator|<
specifier|const
name|Config
operator|*
operator|>
name|getConfigs
argument_list|(
argument|const egl::AttributeMap&attribs
argument_list|)
specifier|const
block|;
name|bool
name|getConfigAttrib
argument_list|(
argument|const Config *configuration
argument_list|,
argument|EGLint attribute
argument_list|,
argument|EGLint *value
argument_list|)
block|;
name|Error
name|createWindowSurface
argument_list|(
argument|const Config *configuration
argument_list|,
argument|EGLNativeWindowType window
argument_list|,
argument|const AttributeMap&attribs
argument_list|,
argument|Surface **outSurface
argument_list|)
block|;
name|Error
name|createPbufferSurface
argument_list|(
specifier|const
name|Config
operator|*
name|configuration
argument_list|,
specifier|const
name|AttributeMap
operator|&
name|attribs
argument_list|,
name|Surface
operator|*
operator|*
name|outSurface
argument_list|)
block|;
name|Error
name|createPbufferFromClientBuffer
argument_list|(
argument|const Config *configuration
argument_list|,
argument|EGLClientBuffer shareHandle
argument_list|,
argument|const AttributeMap&attribs
argument_list|,
argument|Surface **outSurface
argument_list|)
block|;
name|Error
name|createPixmapSurface
argument_list|(
argument|const Config *configuration
argument_list|,
argument|NativePixmapType nativePixmap
argument_list|,
argument|const AttributeMap&attribs
argument_list|,
argument|Surface **outSurface
argument_list|)
block|;
name|Error
name|createContext
argument_list|(
specifier|const
name|Config
operator|*
name|configuration
argument_list|,
name|gl
operator|::
name|Context
operator|*
name|shareContext
argument_list|,
specifier|const
name|AttributeMap
operator|&
name|attribs
argument_list|,
name|gl
operator|::
name|Context
operator|*
operator|*
name|outContext
argument_list|)
block|;
name|Error
name|makeCurrent
argument_list|(
name|egl
operator|::
name|Surface
operator|*
name|drawSurface
argument_list|,
name|egl
operator|::
name|Surface
operator|*
name|readSurface
argument_list|,
name|gl
operator|::
name|Context
operator|*
name|context
argument_list|)
block|;
name|void
name|destroySurface
argument_list|(
name|egl
operator|::
name|Surface
operator|*
name|surface
argument_list|)
block|;
name|void
name|destroyContext
argument_list|(
name|gl
operator|::
name|Context
operator|*
name|context
argument_list|)
block|;
name|bool
name|isInitialized
argument_list|()
specifier|const
block|;
name|bool
name|isValidConfig
argument_list|(
argument|const Config *config
argument_list|)
specifier|const
block|;
name|bool
name|isValidContext
argument_list|(
argument|gl::Context *context
argument_list|)
specifier|const
block|;
name|bool
name|isValidSurface
argument_list|(
argument|egl::Surface *surface
argument_list|)
specifier|const
block|;
name|bool
name|isValidNativeWindow
argument_list|(
argument|EGLNativeWindowType window
argument_list|)
specifier|const
block|;
specifier|static
name|bool
name|isValidNativeDisplay
argument_list|(
argument|EGLNativeDisplayType display
argument_list|)
block|;
specifier|static
name|bool
name|hasExistingWindowSurface
argument_list|(
argument|EGLNativeWindowType window
argument_list|)
block|;
name|bool
name|isDeviceLost
argument_list|()
specifier|const
block|;
name|bool
name|testDeviceLost
argument_list|()
block|;
name|void
name|notifyDeviceLost
argument_list|()
block|;
specifier|const
name|Caps
operator|&
name|getCaps
argument_list|()
specifier|const
block|;
specifier|const
name|DisplayExtensions
operator|&
name|getExtensions
argument_list|()
specifier|const
block|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getExtensionString
argument_list|()
specifier|const
block|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getVendorString
argument_list|()
specifier|const
block|;
specifier|const
name|AttributeMap
operator|&
name|getAttributeMap
argument_list|()
specifier|const
block|{
return|return
name|mAttributeMap
return|;
block|}
name|EGLNativeDisplayType
name|getNativeDisplayId
argument_list|()
specifier|const
block|{
return|return
name|mDisplayId
return|;
block|}
name|rx
operator|::
name|DisplayImpl
operator|*
name|getImplementation
argument_list|()
block|{
return|return
name|mImplementation
return|;
block|}
name|private
operator|:
name|Display
argument_list|(
argument|EGLNativeDisplayType displayId
argument_list|)
block|;
name|void
name|setAttributes
argument_list|(
name|rx
operator|::
name|DisplayImpl
operator|*
name|impl
argument_list|,
specifier|const
name|AttributeMap
operator|&
name|attribMap
argument_list|)
block|;
name|Error
name|restoreLostDevice
argument_list|()
block|;
name|void
name|initDisplayExtensions
argument_list|()
block|;
name|void
name|initVendorString
argument_list|()
block|;
name|rx
operator|::
name|DisplayImpl
operator|*
name|mImplementation
block|;
name|EGLNativeDisplayType
name|mDisplayId
block|;
name|AttributeMap
name|mAttributeMap
block|;
name|ConfigSet
name|mConfigSet
block|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|gl
operator|::
name|Context
operator|*
operator|>
name|ContextSet
expr_stmt|;
name|ContextSet
name|mContextSet
decl_stmt|;
name|bool
name|mInitialized
decl_stmt|;
name|Caps
name|mCaps
decl_stmt|;
name|DisplayExtensions
name|mDisplayExtensions
decl_stmt|;
name|std
operator|::
name|string
name|mDisplayExtensionString
expr_stmt|;
name|std
operator|::
name|string
name|mVendorString
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_DISPLAY_H_
end_comment
end_unit
