begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Device.h: Implements the egl::Device class, representing the abstract
end_comment
begin_comment
comment|// device. Implements EGLDevice.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_DEVICE_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_DEVICE_H_
define|#
directive|define
name|LIBANGLE_DEVICE_H_
end_define
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Display.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|DeviceImpl
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|egl
block|{
name|class
name|Device
name|final
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|virtual
operator|~
name|Device
argument_list|()
block|;
name|Error
name|getDevice
argument_list|(
name|EGLAttrib
operator|*
name|value
argument_list|)
block|;
name|Display
operator|*
name|getOwningDisplay
argument_list|()
block|{
return|return
name|mOwningDisplay
return|;
block|}
block|;
name|EGLint
name|getType
argument_list|()
block|;
specifier|const
name|DeviceExtensions
operator|&
name|getExtensions
argument_list|()
specifier|const
block|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getExtensionString
argument_list|()
specifier|const
block|;
name|rx
operator|::
name|DeviceImpl
operator|*
name|getImplementation
argument_list|()
block|{
return|return
name|mImplementation
return|;
block|}
specifier|static
name|egl
operator|::
name|Error
name|CreateDevice
argument_list|(
argument|void *devicePointer
argument_list|,
argument|EGLint deviceType
argument_list|,
argument|Device **outDevice
argument_list|)
block|;
specifier|static
name|egl
operator|::
name|Error
name|CreateDevice
argument_list|(
name|Display
operator|*
name|owningDisplay
argument_list|,
name|rx
operator|::
name|DeviceImpl
operator|*
name|impl
argument_list|,
name|Device
operator|*
operator|*
name|outDevice
argument_list|)
block|;
specifier|static
name|bool
name|IsValidDevice
argument_list|(
name|Device
operator|*
name|device
argument_list|)
block|;
name|private
operator|:
name|Device
argument_list|(
name|Display
operator|*
name|owningDisplay
argument_list|,
name|rx
operator|::
name|DeviceImpl
operator|*
name|impl
argument_list|)
block|;
name|void
name|initDeviceExtensions
argument_list|()
block|;
name|Display
operator|*
name|mOwningDisplay
block|;
name|rx
operator|::
name|DeviceImpl
operator|*
name|mImplementation
block|;
name|DeviceExtensions
name|mDeviceExtensions
block|;
name|std
operator|::
name|string
name|mDeviceExtensionString
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_DEVICE_H_
end_comment
end_unit
