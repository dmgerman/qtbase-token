begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Error.cpp: Implements the egl::Error and gl::Error classes which encapsulate API errors
end_comment
begin_comment
comment|// and optional error messages.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|<cstdarg>
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|Error
name|Error
operator|::
name|Error
parameter_list|(
name|GLenum
name|errorCode
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
modifier|...
parameter_list|)
member_init_list|:
name|mCode
argument_list|(
name|errorCode
argument_list|)
member_init_list|,
name|mMessage
argument_list|(
literal|nullptr
argument_list|)
block|{
name|va_list
name|vararg
decl_stmt|;
name|va_start
argument_list|(
name|vararg
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|createMessageString
argument_list|()
expr_stmt|;
operator|*
name|mMessage
operator|=
name|FormatString
argument_list|(
name|msg
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|vararg
argument_list|)
expr_stmt|;
block|}
DECL|function|createMessageString
name|void
name|Error
operator|::
name|createMessageString
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|mMessage
operator|==
literal|nullptr
condition|)
block|{
name|mMessage
operator|=
operator|new
name|std
operator|::
name|string
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|getMessage
specifier|const
name|std
operator|::
name|string
modifier|&
name|Error
operator|::
name|getMessage
parameter_list|()
specifier|const
block|{
name|createMessageString
argument_list|()
expr_stmt|;
return|return
operator|*
name|mMessage
return|;
block|}
block|}
end_namespace
begin_namespace
DECL|namespace|egl
namespace|namespace
name|egl
block|{
DECL|function|Error
name|Error
operator|::
name|Error
parameter_list|(
name|EGLint
name|errorCode
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
modifier|...
parameter_list|)
member_init_list|:
name|mCode
argument_list|(
name|errorCode
argument_list|)
member_init_list|,
name|mID
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mMessage
argument_list|(
literal|nullptr
argument_list|)
block|{
name|va_list
name|vararg
decl_stmt|;
name|va_start
argument_list|(
name|vararg
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|createMessageString
argument_list|()
expr_stmt|;
operator|*
name|mMessage
operator|=
name|FormatString
argument_list|(
name|msg
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|vararg
argument_list|)
expr_stmt|;
block|}
DECL|function|Error
name|Error
operator|::
name|Error
parameter_list|(
name|EGLint
name|errorCode
parameter_list|,
name|EGLint
name|id
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|,
modifier|...
parameter_list|)
member_init_list|:
name|mCode
argument_list|(
name|errorCode
argument_list|)
member_init_list|,
name|mID
argument_list|(
name|id
argument_list|)
member_init_list|,
name|mMessage
argument_list|(
literal|nullptr
argument_list|)
block|{
name|va_list
name|vararg
decl_stmt|;
name|va_start
argument_list|(
name|vararg
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|createMessageString
argument_list|()
expr_stmt|;
operator|*
name|mMessage
operator|=
name|FormatString
argument_list|(
name|msg
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|vararg
argument_list|)
expr_stmt|;
block|}
DECL|function|createMessageString
name|void
name|Error
operator|::
name|createMessageString
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|mMessage
operator|==
literal|nullptr
condition|)
block|{
name|mMessage
operator|=
operator|new
name|std
operator|::
name|string
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|getMessage
specifier|const
name|std
operator|::
name|string
modifier|&
name|Error
operator|::
name|getMessage
parameter_list|()
specifier|const
block|{
name|createMessageString
argument_list|()
expr_stmt|;
return|return
operator|*
name|mMessage
return|;
block|}
block|}
end_namespace
end_unit
