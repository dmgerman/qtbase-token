begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Program.h: Defines the gl::Program class. Implements GL program objects
end_comment
begin_comment
comment|// and related functionality. [OpenGL ES 2.0.24] section 2.10.3 page 28.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_PROGRAM_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_PROGRAM_H_
define|#
directive|define
name|LIBANGLE_PROGRAM_H_
end_define
begin_include
include|#
directive|include
file|<GLES2/gl2.h>
end_include
begin_include
include|#
directive|include
file|<GLSLANG/ShaderLang.h>
end_include
begin_include
include|#
directive|include
file|<set>
end_include
begin_include
include|#
directive|include
file|<sstream>
end_include
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"common/Optional.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Constants.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Debug.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/RefCountObject.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|ImplFactory
decl_stmt|;
name|class
name|ProgramImpl
decl_stmt|;
struct_decl|struct
name|TranslatedAttribute
struct_decl|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
struct_decl|struct
name|Caps
struct_decl|;
struct_decl|struct
name|Data
struct_decl|;
name|class
name|ResourceManager
decl_stmt|;
name|class
name|Shader
decl_stmt|;
name|class
name|InfoLog
decl_stmt|;
name|class
name|AttributeBindings
decl_stmt|;
name|class
name|Buffer
decl_stmt|;
name|class
name|Framebuffer
decl_stmt|;
struct_decl|struct
name|UniformBlock
struct_decl|;
struct_decl|struct
name|LinkedUniform
struct_decl|;
specifier|extern
specifier|const
name|char
modifier|*
specifier|const
name|g_fakepath
decl_stmt|;
name|class
name|AttributeBindings
block|{
name|public
label|:
name|AttributeBindings
argument_list|()
expr_stmt|;
operator|~
name|AttributeBindings
argument_list|()
expr_stmt|;
name|void
name|bindAttributeLocation
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|int
name|getAttributeBinding
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>
name|mAttributeBinding
index|[
name|MAX_VERTEX_ATTRIBS
index|]
expr_stmt|;
block|}
empty_stmt|;
name|class
name|InfoLog
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|InfoLog
argument_list|()
block|;
operator|~
name|InfoLog
argument_list|()
block|;
name|size_t
name|getLength
argument_list|()
specifier|const
block|;
name|void
name|getLog
argument_list|(
argument|GLsizei bufSize
argument_list|,
argument|GLsizei *length
argument_list|,
argument|char *infoLog
argument_list|)
specifier|const
block|;
name|void
name|appendSanitized
argument_list|(
specifier|const
name|char
operator|*
name|message
argument_list|)
block|;
name|void
name|reset
argument_list|()
block|;
comment|// This helper class ensures we append a newline after writing a line.
name|class
name|StreamHelper
operator|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|StreamHelper
argument_list|(
name|StreamHelper
operator|&&
name|rhs
argument_list|)
operator|:
name|mStream
argument_list|(
argument|rhs.mStream
argument_list|)
block|{
name|rhs
operator|.
name|mStream
operator|=
name|nullptr
block|;         }
name|StreamHelper
operator|&
name|operator
operator|=
operator|(
name|StreamHelper
operator|&&
name|rhs
operator|)
block|{
name|std
operator|::
name|swap
argument_list|(
name|mStream
argument_list|,
name|rhs
operator|.
name|mStream
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
operator|~
name|StreamHelper
argument_list|()
block|{
comment|// Write newline when destroyed on the stack
if|if
condition|(
name|mStream
condition|)
block|{
operator|(
operator|*
name|mStream
operator|)
operator|<<
name|std
operator|::
name|endl
expr_stmt|;
block|}
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|StreamHelper
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|T
operator|&
name|value
operator|)
block|{
operator|(
operator|*
name|mStream
operator|)
operator|<<
name|value
block|;
return|return
operator|*
name|this
return|;
block|}
name|private
operator|:
name|friend
name|class
name|InfoLog
block|;
name|StreamHelper
argument_list|(
name|std
operator|::
name|stringstream
operator|*
name|stream
argument_list|)
operator|:
name|mStream
argument_list|(
argument|stream
argument_list|)
block|{
name|ASSERT
argument_list|(
name|stream
argument_list|)
block|;         }
name|std
operator|::
name|stringstream
operator|*
name|mStream
block|;     }
block|;
name|template
operator|<
name|typename
name|T
operator|>
name|StreamHelper
name|operator
operator|<<
operator|(
specifier|const
name|T
operator|&
name|value
operator|)
block|{
name|StreamHelper
name|helper
argument_list|(
operator|&
name|mStream
argument_list|)
block|;
name|helper
operator|<<
name|value
block|;
return|return
name|helper
return|;
block|}
name|std
operator|::
name|string
name|str
argument_list|()
specifier|const
block|{
return|return
name|mStream
operator|.
name|str
argument_list|()
return|;
block|}
name|private
operator|:
name|std
operator|::
name|stringstream
name|mStream
block|; }
decl_stmt|;
comment|// Struct used for correlating uniforms/elements of uniform arrays to handles
struct|struct
name|VariableLocation
block|{
name|VariableLocation
argument_list|()
expr_stmt|;
name|VariableLocation
argument_list|(
argument|const std::string&name
argument_list|,
argument|unsigned int element
argument_list|,
argument|unsigned int index
argument_list|)
empty_stmt|;
name|std
operator|::
name|string
name|name
expr_stmt|;
name|unsigned
name|int
name|element
decl_stmt|;
name|unsigned
name|int
name|index
decl_stmt|;
block|}
struct|;
name|class
name|Program
name|final
range|:
name|angle
operator|::
name|NonCopyable
decl_stmt|,
name|public
name|LabeledObject
block|{
name|public
label|:
name|class
name|Data
name|final
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|Data
argument_list|()
block|;
operator|~
name|Data
argument_list|()
block|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getLabel
argument_list|()
block|;
specifier|const
name|Shader
operator|*
name|getAttachedVertexShader
argument_list|()
specifier|const
block|{
return|return
name|mAttachedVertexShader
return|;
block|}
specifier|const
name|Shader
operator|*
name|getAttachedFragmentShader
argument_list|()
specifier|const
block|{
return|return
name|mAttachedFragmentShader
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|getTransformFeedbackVaryingNames
argument_list|()
specifier|const
block|{
return|return
name|mTransformFeedbackVaryingNames
return|;
block|}
name|GLint
name|getTransformFeedbackBufferMode
argument_list|()
specifier|const
block|{
return|return
name|mTransformFeedbackBufferMode
return|;
block|}
name|GLuint
name|getUniformBlockBinding
argument_list|(
argument|GLuint uniformBlockIndex
argument_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|uniformBlockIndex
operator|<
name|IMPLEMENTATION_MAX_COMBINED_SHADER_UNIFORM_BUFFERS
argument_list|)
block|;
return|return
name|mUniformBlockBindings
index|[
name|uniformBlockIndex
index|]
return|;
block|}
specifier|const
name|UniformBlockBindingMask
operator|&
name|getActiveUniformBlockBindingsMask
argument_list|()
specifier|const
block|{
return|return
name|mActiveUniformBlockBindings
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Attribute
operator|>
operator|&
name|getAttributes
argument_list|()
specifier|const
block|{
return|return
name|mAttributes
return|;
block|}
specifier|const
name|AttributesMask
operator|&
name|getActiveAttribLocationsMask
argument_list|()
specifier|const
block|{
return|return
name|mActiveAttribLocationsMask
return|;
block|}
specifier|const
name|std
operator|::
name|map
operator|<
name|int
block|,
name|VariableLocation
operator|>
operator|&
name|getOutputVariables
argument_list|()
specifier|const
block|{
return|return
name|mOutputVariables
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|LinkedUniform
operator|>
operator|&
name|getUniforms
argument_list|()
specifier|const
block|{
return|return
name|mUniforms
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|VariableLocation
operator|>
operator|&
name|getUniformLocations
argument_list|()
specifier|const
block|{
return|return
name|mUniformLocations
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|UniformBlock
operator|>
operator|&
name|getUniformBlocks
argument_list|()
specifier|const
block|{
return|return
name|mUniformBlocks
return|;
block|}
specifier|const
name|LinkedUniform
operator|*
name|getUniformByName
argument_list|(
argument|const std::string&name
argument_list|)
specifier|const
block|;
name|GLint
name|getUniformLocation
argument_list|(
argument|const std::string&name
argument_list|)
specifier|const
block|;
name|GLuint
name|getUniformIndex
argument_list|(
argument|const std::string&name
argument_list|)
specifier|const
block|;
name|private
operator|:
name|friend
name|class
name|Program
block|;
name|std
operator|::
name|string
name|mLabel
block|;
name|Shader
operator|*
name|mAttachedFragmentShader
block|;
name|Shader
operator|*
name|mAttachedVertexShader
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|mTransformFeedbackVaryingNames
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Varying
operator|>
name|mTransformFeedbackVaryingVars
block|;
name|GLenum
name|mTransformFeedbackBufferMode
block|;
name|GLuint
name|mUniformBlockBindings
index|[
name|IMPLEMENTATION_MAX_COMBINED_SHADER_UNIFORM_BUFFERS
index|]
block|;
name|UniformBlockBindingMask
name|mActiveUniformBlockBindings
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Attribute
operator|>
name|mAttributes
block|;
name|std
operator|::
name|bitset
operator|<
name|MAX_VERTEX_ATTRIBS
operator|>
name|mActiveAttribLocationsMask
block|;
comment|// Uniforms are sorted in order:
comment|//  1. Non-sampler uniforms
comment|//  2. Sampler uniforms
comment|//  3. Uniform block uniforms
comment|// This makes sampler validation easier, since we don't need a separate list.
name|std
operator|::
name|vector
operator|<
name|LinkedUniform
operator|>
name|mUniforms
block|;
name|std
operator|::
name|vector
operator|<
name|VariableLocation
operator|>
name|mUniformLocations
block|;
name|std
operator|::
name|vector
operator|<
name|UniformBlock
operator|>
name|mUniformBlocks
block|;
comment|// TODO(jmadill): use unordered/hash map when available
name|std
operator|::
name|map
operator|<
name|int
block|,
name|VariableLocation
operator|>
name|mOutputVariables
block|;
name|bool
name|mBinaryRetrieveableHint
block|;     }
decl_stmt|;
name|Program
argument_list|(
argument|rx::ImplFactory *factory
argument_list|,
argument|ResourceManager *manager
argument_list|,
argument|GLuint handle
argument_list|)
empty_stmt|;
operator|~
name|Program
argument_list|()
expr_stmt|;
name|GLuint
name|id
argument_list|()
specifier|const
block|{
return|return
name|mHandle
return|;
block|}
name|void
name|setLabel
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|label
argument_list|)
name|override
decl_stmt|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getLabel
argument_list|()
specifier|const
name|override
expr_stmt|;
name|rx
operator|::
name|ProgramImpl
operator|*
name|getImplementation
argument_list|()
block|{
return|return
name|mProgram
return|;
block|}
specifier|const
name|rx
operator|::
name|ProgramImpl
operator|*
name|getImplementation
argument_list|()
specifier|const
block|{
return|return
name|mProgram
return|;
block|}
name|bool
name|attachShader
parameter_list|(
name|Shader
modifier|*
name|shader
parameter_list|)
function_decl|;
name|bool
name|detachShader
parameter_list|(
name|Shader
modifier|*
name|shader
parameter_list|)
function_decl|;
name|int
name|getAttachedShadersCount
argument_list|()
specifier|const
expr_stmt|;
name|void
name|bindAttributeLocation
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|Error
name|link
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
name|data
argument_list|)
decl_stmt|;
name|bool
name|isLinked
argument_list|()
specifier|const
expr_stmt|;
name|Error
name|loadBinary
parameter_list|(
name|GLenum
name|binaryFormat
parameter_list|,
specifier|const
name|void
modifier|*
name|binary
parameter_list|,
name|GLsizei
name|length
parameter_list|)
function_decl|;
name|Error
name|saveBinary
argument_list|(
name|GLenum
operator|*
name|binaryFormat
argument_list|,
name|void
operator|*
name|binary
argument_list|,
name|GLsizei
name|bufSize
argument_list|,
name|GLsizei
operator|*
name|length
argument_list|)
decl|const
decl_stmt|;
name|GLint
name|getBinaryLength
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setBinaryRetrievableHint
parameter_list|(
name|bool
name|retrievable
parameter_list|)
function_decl|;
name|bool
name|getBinaryRetrievableHint
argument_list|()
specifier|const
expr_stmt|;
name|int
name|getInfoLogLength
argument_list|()
specifier|const
expr_stmt|;
name|void
name|getInfoLog
argument_list|(
name|GLsizei
name|bufSize
argument_list|,
name|GLsizei
operator|*
name|length
argument_list|,
name|char
operator|*
name|infoLog
argument_list|)
decl|const
decl_stmt|;
name|void
name|getAttachedShaders
argument_list|(
name|GLsizei
name|maxCount
argument_list|,
name|GLsizei
operator|*
name|count
argument_list|,
name|GLuint
operator|*
name|shaders
argument_list|)
decl|const
decl_stmt|;
name|GLuint
name|getAttributeLocation
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isAttribLocationActive
argument_list|(
name|size_t
name|attribLocation
argument_list|)
decl|const
decl_stmt|;
name|void
name|getActiveAttribute
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|GLchar
modifier|*
name|name
parameter_list|)
function_decl|;
name|GLint
name|getActiveAttributeCount
argument_list|()
specifier|const
expr_stmt|;
name|GLint
name|getActiveAttributeMaxLength
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Attribute
operator|>
operator|&
name|getAttributes
argument_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|mAttributes
return|;
block|}
name|GLint
name|getFragDataLocation
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|void
name|getActiveUniform
argument_list|(
name|GLuint
name|index
argument_list|,
name|GLsizei
name|bufsize
argument_list|,
name|GLsizei
operator|*
name|length
argument_list|,
name|GLint
operator|*
name|size
argument_list|,
name|GLenum
operator|*
name|type
argument_list|,
name|GLchar
operator|*
name|name
argument_list|)
decl|const
decl_stmt|;
name|GLint
name|getActiveUniformCount
argument_list|()
specifier|const
expr_stmt|;
name|GLint
name|getActiveUniformMaxLength
argument_list|()
specifier|const
expr_stmt|;
name|GLint
name|getActiveUniformi
argument_list|(
name|GLuint
name|index
argument_list|,
name|GLenum
name|pname
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isValidUniformLocation
argument_list|(
name|GLint
name|location
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|LinkedUniform
modifier|&
name|getUniformByLocation
argument_list|(
name|GLint
name|location
argument_list|)
decl|const
decl_stmt|;
name|GLint
name|getUniformLocation
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|GLuint
name|getUniformIndex
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|void
name|setUniform1fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform1iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform2iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform3iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform4iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform1uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform2uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform3uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform4uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix2x3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix3x2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix2x4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix4x2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix3x4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix4x3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|getUniformfv
argument_list|(
name|GLint
name|location
argument_list|,
name|GLfloat
operator|*
name|params
argument_list|)
decl|const
decl_stmt|;
name|void
name|getUniformiv
argument_list|(
name|GLint
name|location
argument_list|,
name|GLint
operator|*
name|params
argument_list|)
decl|const
decl_stmt|;
name|void
name|getUniformuiv
argument_list|(
name|GLint
name|location
argument_list|,
name|GLuint
operator|*
name|params
argument_list|)
decl|const
decl_stmt|;
name|void
name|getActiveUniformBlockName
argument_list|(
name|GLuint
name|uniformBlockIndex
argument_list|,
name|GLsizei
name|bufSize
argument_list|,
name|GLsizei
operator|*
name|length
argument_list|,
name|GLchar
operator|*
name|uniformBlockName
argument_list|)
decl|const
decl_stmt|;
name|void
name|getActiveUniformBlockiv
argument_list|(
name|GLuint
name|uniformBlockIndex
argument_list|,
name|GLenum
name|pname
argument_list|,
name|GLint
operator|*
name|params
argument_list|)
decl|const
decl_stmt|;
name|GLuint
name|getActiveUniformBlockCount
argument_list|()
specifier|const
expr_stmt|;
name|GLint
name|getActiveUniformBlockMaxLength
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getUniformBlockIndex
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|void
name|bindUniformBlock
parameter_list|(
name|GLuint
name|uniformBlockIndex
parameter_list|,
name|GLuint
name|uniformBlockBinding
parameter_list|)
function_decl|;
name|GLuint
name|getUniformBlockBinding
argument_list|(
name|GLuint
name|uniformBlockIndex
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|UniformBlock
modifier|&
name|getUniformBlockByIndex
argument_list|(
name|GLuint
name|index
argument_list|)
decl|const
decl_stmt|;
name|void
name|setTransformFeedbackVaryings
parameter_list|(
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLchar
modifier|*
specifier|const
modifier|*
name|varyings
parameter_list|,
name|GLenum
name|bufferMode
parameter_list|)
function_decl|;
name|void
name|getTransformFeedbackVarying
argument_list|(
name|GLuint
name|index
argument_list|,
name|GLsizei
name|bufSize
argument_list|,
name|GLsizei
operator|*
name|length
argument_list|,
name|GLsizei
operator|*
name|size
argument_list|,
name|GLenum
operator|*
name|type
argument_list|,
name|GLchar
operator|*
name|name
argument_list|)
decl|const
decl_stmt|;
name|GLsizei
name|getTransformFeedbackVaryingCount
argument_list|()
specifier|const
expr_stmt|;
name|GLsizei
name|getTransformFeedbackVaryingMaxLength
argument_list|()
specifier|const
expr_stmt|;
name|GLenum
name|getTransformFeedbackBufferMode
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|bool
name|linkValidateUniforms
argument_list|(
name|InfoLog
operator|&
name|infoLog
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|uniformName
argument_list|,
specifier|const
name|sh
operator|::
name|Uniform
operator|&
name|vertexUniform
argument_list|,
specifier|const
name|sh
operator|::
name|Uniform
operator|&
name|fragmentUniform
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|linkValidateInterfaceBlockFields
argument_list|(
name|InfoLog
operator|&
name|infoLog
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|uniformName
argument_list|,
specifier|const
name|sh
operator|::
name|InterfaceBlockField
operator|&
name|vertexUniform
argument_list|,
specifier|const
name|sh
operator|::
name|InterfaceBlockField
operator|&
name|fragmentUniform
argument_list|)
decl_stmt|;
name|void
name|addRef
parameter_list|()
function_decl|;
name|void
name|release
parameter_list|()
function_decl|;
name|unsigned
name|int
name|getRefCount
argument_list|()
specifier|const
expr_stmt|;
name|void
name|flagForDeletion
parameter_list|()
function_decl|;
name|bool
name|isFlaggedForDeletion
argument_list|()
specifier|const
expr_stmt|;
name|void
name|validate
parameter_list|(
specifier|const
name|Caps
modifier|&
name|caps
parameter_list|)
function_decl|;
name|bool
name|validateSamplers
parameter_list|(
name|InfoLog
modifier|*
name|infoLog
parameter_list|,
specifier|const
name|Caps
modifier|&
name|caps
parameter_list|)
function_decl|;
name|bool
name|isValidated
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|AttributesMask
operator|&
name|getActiveAttribLocationsMask
argument_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|mActiveAttribLocationsMask
return|;
block|}
name|private
label|:
name|void
name|unlink
parameter_list|(
name|bool
name|destroy
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|resetUniformBlockBindings
parameter_list|()
function_decl|;
name|bool
name|linkAttributes
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
name|data
argument_list|,
name|InfoLog
operator|&
name|infoLog
argument_list|,
specifier|const
name|AttributeBindings
operator|&
name|attributeBindings
argument_list|,
specifier|const
name|Shader
operator|*
name|vertexShader
argument_list|)
decl_stmt|;
name|bool
name|linkUniformBlocks
parameter_list|(
name|InfoLog
modifier|&
name|infoLog
parameter_list|,
specifier|const
name|Caps
modifier|&
name|caps
parameter_list|)
function_decl|;
specifier|static
name|bool
name|linkVaryings
parameter_list|(
name|InfoLog
modifier|&
name|infoLog
parameter_list|,
specifier|const
name|Shader
modifier|*
name|vertexShader
parameter_list|,
specifier|const
name|Shader
modifier|*
name|fragmentShader
parameter_list|)
function_decl|;
name|bool
name|linkUniforms
argument_list|(
name|gl
operator|::
name|InfoLog
operator|&
name|infoLog
argument_list|,
specifier|const
name|gl
operator|::
name|Caps
operator|&
name|caps
argument_list|)
decl_stmt|;
name|void
name|indexUniforms
parameter_list|()
function_decl|;
name|bool
name|areMatchingInterfaceBlocks
argument_list|(
name|gl
operator|::
name|InfoLog
operator|&
name|infoLog
argument_list|,
specifier|const
name|sh
operator|::
name|InterfaceBlock
operator|&
name|vertexInterfaceBlock
argument_list|,
specifier|const
name|sh
operator|::
name|InterfaceBlock
operator|&
name|fragmentInterfaceBlock
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|linkValidateVariablesBase
argument_list|(
name|InfoLog
operator|&
name|infoLog
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|variableName
argument_list|,
specifier|const
name|sh
operator|::
name|ShaderVariable
operator|&
name|vertexVariable
argument_list|,
specifier|const
name|sh
operator|::
name|ShaderVariable
operator|&
name|fragmentVariable
argument_list|,
name|bool
name|validatePrecision
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|linkValidateVaryings
argument_list|(
name|InfoLog
operator|&
name|infoLog
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|varyingName
argument_list|,
specifier|const
name|sh
operator|::
name|Varying
operator|&
name|vertexVarying
argument_list|,
specifier|const
name|sh
operator|::
name|Varying
operator|&
name|fragmentVarying
argument_list|)
decl_stmt|;
name|bool
name|linkValidateTransformFeedback
argument_list|(
name|InfoLog
operator|&
name|infoLog
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
specifier|const
name|sh
operator|::
name|Varying
operator|*
operator|>
operator|&
name|linkedVaryings
argument_list|,
specifier|const
name|Caps
operator|&
name|caps
argument_list|)
decl|const
decl_stmt|;
name|void
name|gatherTransformFeedbackVaryings
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
specifier|const
name|sh
operator|::
name|Varying
operator|*
operator|>
operator|&
name|varyings
argument_list|)
decl_stmt|;
name|bool
name|assignUniformBlockRegister
parameter_list|(
name|InfoLog
modifier|&
name|infoLog
parameter_list|,
name|UniformBlock
modifier|*
name|uniformBlock
parameter_list|,
name|GLenum
name|shader
parameter_list|,
name|unsigned
name|int
name|registerIndex
parameter_list|,
specifier|const
name|Caps
modifier|&
name|caps
parameter_list|)
function_decl|;
name|void
name|defineOutputVariables
parameter_list|(
name|Shader
modifier|*
name|fragmentShader
parameter_list|)
function_decl|;
name|std
operator|::
name|vector
operator|<
specifier|const
name|sh
operator|::
name|Varying
operator|*
operator|>
name|getMergedVaryings
argument_list|()
specifier|const
expr_stmt|;
name|void
name|linkOutputVariables
parameter_list|()
function_decl|;
name|bool
name|flattenUniformsAndCheckCaps
parameter_list|(
specifier|const
name|Caps
modifier|&
name|caps
parameter_list|,
name|InfoLog
modifier|&
name|infoLog
parameter_list|)
function_decl|;
struct|struct
name|VectorAndSamplerCount
block|{
name|VectorAndSamplerCount
argument_list|()
operator|:
name|vectorCount
argument_list|(
literal|0
argument_list|)
operator|,
name|samplerCount
argument_list|(
literal|0
argument_list|)
block|{}
name|VectorAndSamplerCount
argument_list|(
specifier|const
name|VectorAndSamplerCount
operator|&
name|other
argument_list|)
operator|=
expr|default
expr_stmt|;
name|VectorAndSamplerCount
modifier|&
name|operator
init|=
operator|(
specifier|const
name|VectorAndSamplerCount
operator|&
name|other
operator|)
operator|=
expr|default
decl_stmt|;
name|VectorAndSamplerCount
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|VectorAndSamplerCount
operator|&
name|other
operator|)
block|{
name|vectorCount
operator|+=
name|other
operator|.
name|vectorCount
block|;
name|samplerCount
operator|+=
name|other
operator|.
name|samplerCount
block|;
return|return
operator|*
name|this
return|;
block|}
name|unsigned
name|int
name|vectorCount
decl_stmt|;
name|unsigned
name|int
name|samplerCount
decl_stmt|;
block|}
struct|;
name|VectorAndSamplerCount
name|flattenUniform
argument_list|(
specifier|const
name|sh
operator|::
name|ShaderVariable
operator|&
name|uniform
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|fullName
argument_list|,
name|std
operator|::
name|vector
operator|<
name|LinkedUniform
operator|>
operator|*
name|samplerUniforms
argument_list|)
decl_stmt|;
name|void
name|gatherInterfaceBlockInfo
parameter_list|()
function_decl|;
name|template
operator|<
name|typename
name|VarT
operator|>
name|void
name|defineUniformBlockMembers
argument_list|(
argument|const std::vector<VarT>&fields
argument_list|,
argument|const std::string&prefix
argument_list|,
argument|int blockIndex
argument_list|)
expr_stmt|;
name|void
name|defineUniformBlock
argument_list|(
specifier|const
name|sh
operator|::
name|InterfaceBlock
operator|&
name|interfaceBlock
argument_list|,
name|GLenum
name|shaderType
argument_list|)
decl_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|setUniformInternal
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|const T *v
argument_list|)
expr_stmt|;
name|template
operator|<
name|size_t
name|cols
operator|,
name|size_t
name|rows
operator|,
name|typename
name|T
operator|>
name|void
name|setMatrixUniformInternal
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|GLboolean transpose
argument_list|,
argument|const T *v
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|DestT
operator|>
name|void
name|getUniformInternal
argument_list|(
argument|GLint location
argument_list|,
argument|DestT *dataOut
argument_list|)
specifier|const
expr_stmt|;
name|Data
name|mData
decl_stmt|;
name|rx
operator|::
name|ProgramImpl
operator|*
name|mProgram
expr_stmt|;
name|bool
name|mValidated
decl_stmt|;
name|AttributeBindings
name|mAttributeBindings
decl_stmt|;
name|bool
name|mLinked
decl_stmt|;
name|bool
name|mDeleteStatus
decl_stmt|;
comment|// Flag to indicate that the program can be deleted when no longer in use
name|unsigned
name|int
name|mRefCount
decl_stmt|;
name|ResourceManager
modifier|*
name|mResourceManager
decl_stmt|;
specifier|const
name|GLuint
name|mHandle
decl_stmt|;
name|InfoLog
name|mInfoLog
decl_stmt|;
comment|// Cache for sampler validation
name|Optional
operator|<
name|bool
operator|>
name|mCachedValidateSamplersResult
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|GLenum
operator|>
name|mTextureUnitTypesCache
expr_stmt|;
name|RangeUI
name|mSamplerUniformRange
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_PROGRAM_H_
end_comment
end_unit
