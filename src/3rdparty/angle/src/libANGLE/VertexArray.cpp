begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Implementation of the state class for mananging GLES 3 Vertex Array Objects.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"libANGLE/VertexArray.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Buffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/ImplFactory.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/VertexArrayImpl.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|Data
name|VertexArray
operator|::
name|Data
operator|::
name|Data
parameter_list|(
name|size_t
name|maxAttribs
parameter_list|)
member_init_list|:
name|mLabel
argument_list|()
member_init_list|,
name|mVertexAttributes
argument_list|(
name|maxAttribs
argument_list|)
member_init_list|,
name|mMaxEnabledAttribute
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|~Data
name|VertexArray
operator|::
name|Data
operator|::
name|~
name|Data
parameter_list|()
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getMaxAttribs
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|mVertexAttributes
index|[
name|i
index|]
operator|.
name|buffer
operator|.
name|set
argument_list|(
literal|nullptr
argument_list|)
expr_stmt|;
block|}
name|mElementArrayBuffer
operator|.
name|set
argument_list|(
literal|nullptr
argument_list|)
expr_stmt|;
block|}
DECL|function|VertexArray
name|VertexArray
operator|::
name|VertexArray
parameter_list|(
name|rx
operator|::
name|ImplFactory
modifier|*
name|factory
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|size_t
name|maxAttribs
parameter_list|)
member_init_list|:
name|mId
argument_list|(
name|id
argument_list|)
member_init_list|,
name|mVertexArray
argument_list|(
name|factory
operator|->
name|createVertexArray
argument_list|(
name|mData
argument_list|)
argument_list|)
member_init_list|,
name|mData
argument_list|(
name|maxAttribs
argument_list|)
block|{ }
DECL|function|~VertexArray
name|VertexArray
operator|::
name|~
name|VertexArray
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mVertexArray
argument_list|)
expr_stmt|;
block|}
DECL|function|id
name|GLuint
name|VertexArray
operator|::
name|id
parameter_list|()
specifier|const
block|{
return|return
name|mId
return|;
block|}
DECL|function|setLabel
name|void
name|VertexArray
operator|::
name|setLabel
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|label
parameter_list|)
block|{
name|mData
operator|.
name|mLabel
operator|=
name|label
expr_stmt|;
block|}
DECL|function|getLabel
specifier|const
name|std
operator|::
name|string
modifier|&
name|VertexArray
operator|::
name|getLabel
parameter_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|mLabel
return|;
block|}
DECL|function|detachBuffer
name|void
name|VertexArray
operator|::
name|detachBuffer
parameter_list|(
name|GLuint
name|bufferName
parameter_list|)
block|{
for|for
control|(
name|size_t
name|attribute
init|=
literal|0
init|;
name|attribute
operator|<
name|getMaxAttribs
argument_list|()
condition|;
name|attribute
operator|++
control|)
block|{
if|if
condition|(
name|mData
operator|.
name|mVertexAttributes
index|[
name|attribute
index|]
operator|.
name|buffer
operator|.
name|id
argument_list|()
operator|==
name|bufferName
condition|)
block|{
name|mData
operator|.
name|mVertexAttributes
index|[
name|attribute
index|]
operator|.
name|buffer
operator|.
name|set
argument_list|(
literal|nullptr
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mData
operator|.
name|mElementArrayBuffer
operator|.
name|id
argument_list|()
operator|==
name|bufferName
condition|)
block|{
name|mData
operator|.
name|mElementArrayBuffer
operator|.
name|set
argument_list|(
literal|nullptr
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getVertexAttribute
specifier|const
name|VertexAttribute
modifier|&
name|VertexArray
operator|::
name|getVertexAttribute
parameter_list|(
name|size_t
name|attributeIndex
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|attributeIndex
operator|<
name|getMaxAttribs
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mData
operator|.
name|mVertexAttributes
index|[
name|attributeIndex
index|]
return|;
block|}
DECL|function|setVertexAttribDivisor
name|void
name|VertexArray
operator|::
name|setVertexAttribDivisor
parameter_list|(
name|size_t
name|index
parameter_list|,
name|GLuint
name|divisor
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|index
operator|<
name|getMaxAttribs
argument_list|()
argument_list|)
expr_stmt|;
name|mData
operator|.
name|mVertexAttributes
index|[
name|index
index|]
operator|.
name|divisor
operator|=
name|divisor
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_ATTRIB_0_DIVISOR
operator|+
name|index
argument_list|)
expr_stmt|;
block|}
DECL|function|enableAttribute
name|void
name|VertexArray
operator|::
name|enableAttribute
parameter_list|(
name|size_t
name|attributeIndex
parameter_list|,
name|bool
name|enabledState
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|attributeIndex
operator|<
name|getMaxAttribs
argument_list|()
argument_list|)
expr_stmt|;
name|mData
operator|.
name|mVertexAttributes
index|[
name|attributeIndex
index|]
operator|.
name|enabled
operator|=
name|enabledState
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_ATTRIB_0_ENABLED
operator|+
name|attributeIndex
argument_list|)
expr_stmt|;
comment|// Update state cache
if|if
condition|(
name|enabledState
condition|)
block|{
name|mData
operator|.
name|mMaxEnabledAttribute
operator|=
name|std
operator|::
name|max
argument_list|(
name|attributeIndex
operator|+
literal|1
argument_list|,
name|mData
operator|.
name|mMaxEnabledAttribute
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mData
operator|.
name|mMaxEnabledAttribute
operator|==
name|attributeIndex
operator|+
literal|1
condition|)
block|{
while|while
condition|(
name|mData
operator|.
name|mMaxEnabledAttribute
operator|>
literal|0
operator|&&
operator|!
name|mData
operator|.
name|mVertexAttributes
index|[
name|mData
operator|.
name|mMaxEnabledAttribute
operator|-
literal|1
index|]
operator|.
name|enabled
condition|)
block|{
operator|--
name|mData
operator|.
name|mMaxEnabledAttribute
expr_stmt|;
block|}
block|}
block|}
DECL|function|setAttributeState
name|void
name|VertexArray
operator|::
name|setAttributeState
parameter_list|(
name|size_t
name|attributeIndex
parameter_list|,
name|gl
operator|::
name|Buffer
modifier|*
name|boundBuffer
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|bool
name|normalized
parameter_list|,
name|bool
name|pureInteger
parameter_list|,
name|GLsizei
name|stride
parameter_list|,
specifier|const
name|void
modifier|*
name|pointer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|attributeIndex
operator|<
name|getMaxAttribs
argument_list|()
argument_list|)
expr_stmt|;
name|VertexAttribute
modifier|*
name|attrib
init|=
operator|&
name|mData
operator|.
name|mVertexAttributes
index|[
name|attributeIndex
index|]
decl_stmt|;
name|attrib
operator|->
name|buffer
operator|.
name|set
argument_list|(
name|boundBuffer
argument_list|)
expr_stmt|;
name|attrib
operator|->
name|size
operator|=
name|size
expr_stmt|;
name|attrib
operator|->
name|type
operator|=
name|type
expr_stmt|;
name|attrib
operator|->
name|normalized
operator|=
name|normalized
expr_stmt|;
name|attrib
operator|->
name|pureInteger
operator|=
name|pureInteger
expr_stmt|;
name|attrib
operator|->
name|stride
operator|=
name|stride
expr_stmt|;
name|attrib
operator|->
name|pointer
operator|=
name|pointer
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_ATTRIB_0_POINTER
operator|+
name|attributeIndex
argument_list|)
expr_stmt|;
block|}
DECL|function|setElementArrayBuffer
name|void
name|VertexArray
operator|::
name|setElementArrayBuffer
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|)
block|{
name|mData
operator|.
name|mElementArrayBuffer
operator|.
name|set
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_ELEMENT_ARRAY_BUFFER
argument_list|)
expr_stmt|;
block|}
DECL|function|syncImplState
name|void
name|VertexArray
operator|::
name|syncImplState
parameter_list|()
block|{
if|if
condition|(
name|mDirtyBits
operator|.
name|any
argument_list|()
condition|)
block|{
name|mVertexArray
operator|->
name|syncState
argument_list|(
name|mDirtyBits
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_namespace
end_unit
