begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// formatutils.cpp: Queries for GL image formats.
end_comment
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Context.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/Renderer.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
comment|// ES2 requires that format is equal to internal format at all glTex*Image2D entry points and the implementation
comment|// can decide the true, sized, internal format. The ES2FormatMap determines the internal format for all valid
comment|// format and type combinations.
DECL|typedef|FormatTypePair
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|GLenum
argument_list|,
name|GLenum
argument_list|>
name|FormatTypePair
typedef|;
DECL|typedef|FormatPair
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|FormatTypePair
argument_list|,
name|GLenum
argument_list|>
name|FormatPair
typedef|;
DECL|typedef|FormatMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|FormatTypePair
argument_list|,
name|GLenum
argument_list|>
name|FormatMap
typedef|;
comment|// A helper function to insert data into the format map with fewer characters.
DECL|function|InsertFormatMapping
specifier|static
specifier|inline
name|void
name|InsertFormatMapping
parameter_list|(
name|FormatMap
modifier|*
name|map
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|map
operator|->
name|insert
argument_list|(
name|FormatPair
argument_list|(
name|FormatTypePair
argument_list|(
name|format
argument_list|,
name|type
argument_list|)
argument_list|,
name|internalFormat
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|BuildFormatMap
name|FormatMap
name|BuildFormatMap
parameter_list|()
block|{
name|FormatMap
name|map
decl_stmt|;
comment|//                       | Format               | Type                             | Internal format          |
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_RGBA8
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_RGBA8_SNORM
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_4_4_4_4
argument_list|,
name|GL_RGBA4
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_5_5_5_1
argument_list|,
name|GL_RGB5_A1
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|,
name|GL_RGB10_A2
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_RGBA32F
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_RGBA16F
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|,
name|GL_RGBA16F
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_RGBA8UI
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_RGBA8I
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_RGBA16UI
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_RGBA16I
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_RGBA32UI
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_RGBA32I
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|,
name|GL_RGB10_A2UI
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_RGB8
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_RGB8_SNORM
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_SHORT_5_6_5
argument_list|,
name|GL_RGB565
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_INT_10F_11F_11F_REV
argument_list|,
name|GL_R11F_G11F_B10F
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_INT_5_9_9_9_REV
argument_list|,
name|GL_RGB9_E5
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_RGB32F
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_RGB16F
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|,
name|GL_RGB16F
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_RGB8UI
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_RGB8I
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_RGB16UI
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_RGB16I
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_RGB32UI
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_RGB32I
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_RG8
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_RG8_SNORM
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_RG32F
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_RG16F
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|,
name|GL_RG16F
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_RG8UI
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_RG8I
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_RG16UI
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_RG16I
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_RG32UI
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_RG32I
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_R8
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_R8_SNORM
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_R32F
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_R16F
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|,
name|GL_R16F
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_R8UI
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_R8I
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_R16UI
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_R16I
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_R32UI
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_R32I
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_LUMINANCE8_ALPHA8_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_LUMINANCE8_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_ALPHA8_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_LUMINANCE_ALPHA32F_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_LUMINANCE32F_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_ALPHA32F_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_LUMINANCE_ALPHA16F_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|,
name|GL_LUMINANCE_ALPHA16F_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_LUMINANCE16F_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|,
name|GL_LUMINANCE16F_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_ALPHA16F_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|,
name|GL_ALPHA16F_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_BGRA8_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
argument_list|,
name|GL_BGRA4_ANGLEX
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
argument_list|,
name|GL_BGR5_A1_ANGLEX
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_SRGB_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_SRGB8
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_SRGB_ALPHA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_SRGB8_ALPHA8
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_DEPTH_COMPONENT16
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_DEPTH_COMPONENT32_OES
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_DEPTH_COMPONENT32F
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_STENCIL
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_STENCIL_INDEX8
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_DEPTH_STENCIL
argument_list|,
name|GL_UNSIGNED_INT_24_8
argument_list|,
name|GL_DEPTH24_STENCIL8
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_DEPTH_STENCIL
argument_list|,
name|GL_FLOAT_32_UNSIGNED_INT_24_8_REV
argument_list|,
name|GL_DEPTH32F_STENCIL8
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|function|Type
name|Type
operator|::
name|Type
parameter_list|()
member_init_list|:
name|bytes
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|bytesShift
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|specialInterpretation
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|GenTypeInfo
specifier|static
name|Type
name|GenTypeInfo
parameter_list|(
name|GLuint
name|bytes
parameter_list|,
name|bool
name|specialInterpretation
parameter_list|)
block|{
name|Type
name|info
decl_stmt|;
name|info
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|GLuint
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
literal|1u
operator|<<
name|i
operator|)
operator|<
name|bytes
condition|)
block|{
operator|++
name|i
expr_stmt|;
block|}
name|info
operator|.
name|bytesShift
operator|=
name|i
expr_stmt|;
name|ASSERT
argument_list|(
operator|(
literal|1u
operator|<<
name|info
operator|.
name|bytesShift
operator|)
operator|==
name|bytes
argument_list|)
expr_stmt|;
name|info
operator|.
name|specialInterpretation
operator|=
name|specialInterpretation
expr_stmt|;
return|return
name|info
return|;
block|}
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|Type
modifier|&
name|a
parameter_list|,
specifier|const
name|Type
modifier|&
name|b
parameter_list|)
block|{
return|return
name|memcmp
argument_list|(
operator|&
name|a
argument_list|,
operator|&
name|b
argument_list|,
sizeof|sizeof
argument_list|(
name|Type
argument_list|)
argument_list|)
operator|<
literal|0
return|;
block|}
comment|// Information about internal formats
DECL|function|AlwaysSupported
specifier|static
name|bool
name|AlwaysSupported
parameter_list|(
name|GLuint
parameter_list|,
specifier|const
name|Extensions
modifier|&
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
DECL|function|NeverSupported
specifier|static
name|bool
name|NeverSupported
parameter_list|(
name|GLuint
parameter_list|,
specifier|const
name|Extensions
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
template|template
parameter_list|<
name|GLuint
name|minCoreGLVersion
parameter_list|>
DECL|function|RequireES
specifier|static
name|bool
name|RequireES
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
parameter_list|)
block|{
return|return
name|clientVersion
operator|>=
name|minCoreGLVersion
return|;
block|}
comment|// Pointer to a boolean memeber of the Extensions struct
DECL|typedef|bool
typedef|typedef
name|bool
argument_list|(
name|Extensions
operator|::
modifier|*
name|ExtensionBool
argument_list|)
expr_stmt|;
comment|// Check support for a single extension
template|template
parameter_list|<
name|ExtensionBool
name|bool1
parameter_list|>
DECL|function|RequireExt
specifier|static
name|bool
name|RequireExt
parameter_list|(
name|GLuint
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|extensions
operator|.*
name|bool1
return|;
block|}
comment|// Check for a minimum client version or a single extension
template|template
parameter_list|<
name|GLuint
name|minCoreGLVersion
parameter_list|,
name|ExtensionBool
name|bool1
parameter_list|>
DECL|function|RequireESOrExt
specifier|static
name|bool
name|RequireESOrExt
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|clientVersion
operator|>=
name|minCoreGLVersion
operator|||
name|extensions
operator|.*
name|bool1
return|;
block|}
comment|// Check for a minimum client version or two extensions
template|template
parameter_list|<
name|GLuint
name|minCoreGLVersion
parameter_list|,
name|ExtensionBool
name|bool1
parameter_list|,
name|ExtensionBool
name|bool2
parameter_list|>
DECL|function|RequireESOrExtAndExt
specifier|static
name|bool
name|RequireESOrExtAndExt
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|clientVersion
operator|>=
name|minCoreGLVersion
operator|||
operator|(
name|extensions
operator|.*
name|bool1
operator|&&
name|extensions
operator|.*
name|bool2
operator|)
return|;
block|}
comment|// Check for a minimum client version or at least one of two extensions
template|template
parameter_list|<
name|GLuint
name|minCoreGLVersion
parameter_list|,
name|ExtensionBool
name|bool1
parameter_list|,
name|ExtensionBool
name|bool2
parameter_list|>
DECL|function|RequireESOrExtOrExt
specifier|static
name|bool
name|RequireESOrExtOrExt
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|clientVersion
operator|>=
name|minCoreGLVersion
operator|||
name|extensions
operator|.*
name|bool1
operator|||
name|extensions
operator|.*
name|bool2
return|;
block|}
comment|// Check support for two extensions
template|template
parameter_list|<
name|ExtensionBool
name|bool1
parameter_list|,
name|ExtensionBool
name|bool2
parameter_list|>
DECL|function|RequireExtAndExt
specifier|static
name|bool
name|RequireExtAndExt
parameter_list|(
name|GLuint
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|extensions
operator|.*
name|bool1
operator|&&
name|extensions
operator|.*
name|bool2
return|;
block|}
comment|// Check support for either of two extensions
template|template
parameter_list|<
name|ExtensionBool
name|bool1
parameter_list|,
name|ExtensionBool
name|bool2
parameter_list|>
DECL|function|RequireExtOrExt
specifier|static
name|bool
name|RequireExtOrExt
parameter_list|(
name|GLuint
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|extensions
operator|.*
name|bool1
operator|||
name|extensions
operator|.*
name|bool2
return|;
block|}
comment|// Special function for half float formats with three or four channels.
DECL|function|HalfFloatSupport
specifier|static
name|bool
name|HalfFloatSupport
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|clientVersion
operator|>=
literal|3
operator|||
name|extensions
operator|.
name|textureHalfFloat
return|;
block|}
DECL|function|HalfFloatRenderableSupport
specifier|static
name|bool
name|HalfFloatRenderableSupport
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|HalfFloatSupport
argument_list|(
name|clientVersion
argument_list|,
name|extensions
argument_list|)
operator|&&
name|extensions
operator|.
name|colorBufferHalfFloat
return|;
block|}
comment|// Special function for half float formats with one or two channels.
DECL|function|HalfFloatSupportRG
specifier|static
name|bool
name|HalfFloatSupportRG
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|clientVersion
operator|>=
literal|3
operator|||
operator|(
name|extensions
operator|.
name|textureHalfFloat
operator|&&
name|extensions
operator|.
name|textureRG
operator|)
return|;
block|}
DECL|function|HalfFloatRenderableSupportRG
specifier|static
name|bool
name|HalfFloatRenderableSupportRG
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|HalfFloatSupportRG
argument_list|(
name|clientVersion
argument_list|,
name|extensions
argument_list|)
operator|&&
name|extensions
operator|.
name|colorBufferHalfFloat
return|;
block|}
comment|// Special function for float formats with three or four channels.
DECL|function|FloatSupport
specifier|static
name|bool
name|FloatSupport
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|clientVersion
operator|>=
literal|3
operator|||
name|extensions
operator|.
name|textureFloat
return|;
block|}
DECL|function|FloatRenderableSupport
specifier|static
name|bool
name|FloatRenderableSupport
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
comment|// We don't expose colorBufferFloat in ES2, but we silently support rendering to float.
return|return
name|FloatSupport
argument_list|(
name|clientVersion
argument_list|,
name|extensions
argument_list|)
operator|&&
operator|(
name|extensions
operator|.
name|colorBufferFloat
operator|||
name|clientVersion
operator|==
literal|2
operator|)
return|;
block|}
comment|// Special function for float formats with one or two channels.
DECL|function|FloatSupportRG
specifier|static
name|bool
name|FloatSupportRG
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|clientVersion
operator|>=
literal|3
operator|||
operator|(
name|extensions
operator|.
name|textureFloat
operator|&&
name|extensions
operator|.
name|textureRG
operator|)
return|;
block|}
DECL|function|FloatRenderableSupportRG
specifier|static
name|bool
name|FloatRenderableSupportRG
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
comment|// We don't expose colorBufferFloat in ES2, but we silently support rendering to float.
return|return
name|FloatSupportRG
argument_list|(
name|clientVersion
argument_list|,
name|extensions
argument_list|)
operator|&&
operator|(
name|extensions
operator|.
name|colorBufferFloat
operator|||
name|clientVersion
operator|==
literal|2
operator|)
return|;
block|}
DECL|function|InternalFormat
name|InternalFormat
operator|::
name|InternalFormat
parameter_list|()
member_init_list|:
name|redBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|greenBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|blueBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|luminanceBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|alphaBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sharedBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|depthBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|stencilBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|pixelBytes
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|componentCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|compressed
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|compressedBlockWidth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|compressedBlockHeight
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|format
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|type
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|componentType
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|colorEncoding
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|textureSupport
argument_list|(
name|NeverSupported
argument_list|)
member_init_list|,
name|renderSupport
argument_list|(
name|NeverSupported
argument_list|)
member_init_list|,
name|filterSupport
argument_list|(
name|NeverSupported
argument_list|)
block|{ }
DECL|function|UnsizedFormat
specifier|static
name|InternalFormat
name|UnsizedFormat
parameter_list|(
name|GLenum
name|format
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|textureSupport
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|renderSupport
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|filterSupport
parameter_list|)
block|{
name|InternalFormat
name|formatInfo
decl_stmt|;
name|formatInfo
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|formatInfo
operator|.
name|textureSupport
operator|=
name|textureSupport
expr_stmt|;
name|formatInfo
operator|.
name|renderSupport
operator|=
name|renderSupport
expr_stmt|;
name|formatInfo
operator|.
name|filterSupport
operator|=
name|filterSupport
expr_stmt|;
return|return
name|formatInfo
return|;
block|}
DECL|function|RGBAFormat
specifier|static
name|InternalFormat
name|RGBAFormat
parameter_list|(
name|GLuint
name|red
parameter_list|,
name|GLuint
name|green
parameter_list|,
name|GLuint
name|blue
parameter_list|,
name|GLuint
name|alpha
parameter_list|,
name|GLuint
name|shared
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLenum
name|componentType
parameter_list|,
name|bool
name|srgb
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|textureSupport
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|renderSupport
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|filterSupport
parameter_list|)
block|{
name|InternalFormat
name|formatInfo
decl_stmt|;
name|formatInfo
operator|.
name|redBits
operator|=
name|red
expr_stmt|;
name|formatInfo
operator|.
name|greenBits
operator|=
name|green
expr_stmt|;
name|formatInfo
operator|.
name|blueBits
operator|=
name|blue
expr_stmt|;
name|formatInfo
operator|.
name|alphaBits
operator|=
name|alpha
expr_stmt|;
name|formatInfo
operator|.
name|sharedBits
operator|=
name|shared
expr_stmt|;
name|formatInfo
operator|.
name|pixelBytes
operator|=
operator|(
name|red
operator|+
name|green
operator|+
name|blue
operator|+
name|alpha
operator|+
name|shared
operator|)
operator|/
literal|8
expr_stmt|;
name|formatInfo
operator|.
name|componentCount
operator|=
operator|(
operator|(
name|red
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
operator|(
name|green
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
operator|(
name|blue
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
operator|(
name|alpha
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|formatInfo
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|formatInfo
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|formatInfo
operator|.
name|componentType
operator|=
name|componentType
expr_stmt|;
name|formatInfo
operator|.
name|colorEncoding
operator|=
operator|(
name|srgb
condition|?
name|GL_SRGB
else|:
name|GL_LINEAR
operator|)
expr_stmt|;
name|formatInfo
operator|.
name|textureSupport
operator|=
name|textureSupport
expr_stmt|;
name|formatInfo
operator|.
name|renderSupport
operator|=
name|renderSupport
expr_stmt|;
name|formatInfo
operator|.
name|filterSupport
operator|=
name|filterSupport
expr_stmt|;
return|return
name|formatInfo
return|;
block|}
DECL|function|LUMAFormat
specifier|static
name|InternalFormat
name|LUMAFormat
parameter_list|(
name|GLuint
name|luminance
parameter_list|,
name|GLuint
name|alpha
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLenum
name|componentType
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|textureSupport
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|renderSupport
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|filterSupport
parameter_list|)
block|{
name|InternalFormat
name|formatInfo
decl_stmt|;
name|formatInfo
operator|.
name|luminanceBits
operator|=
name|luminance
expr_stmt|;
name|formatInfo
operator|.
name|alphaBits
operator|=
name|alpha
expr_stmt|;
name|formatInfo
operator|.
name|pixelBytes
operator|=
operator|(
name|luminance
operator|+
name|alpha
operator|)
operator|/
literal|8
expr_stmt|;
name|formatInfo
operator|.
name|componentCount
operator|=
operator|(
operator|(
name|luminance
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
operator|(
name|alpha
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|formatInfo
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|formatInfo
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|formatInfo
operator|.
name|componentType
operator|=
name|componentType
expr_stmt|;
name|formatInfo
operator|.
name|colorEncoding
operator|=
name|GL_LINEAR
expr_stmt|;
name|formatInfo
operator|.
name|textureSupport
operator|=
name|textureSupport
expr_stmt|;
name|formatInfo
operator|.
name|renderSupport
operator|=
name|renderSupport
expr_stmt|;
name|formatInfo
operator|.
name|filterSupport
operator|=
name|filterSupport
expr_stmt|;
return|return
name|formatInfo
return|;
block|}
DECL|function|DepthStencilFormat
specifier|static
name|InternalFormat
name|DepthStencilFormat
parameter_list|(
name|GLuint
name|depthBits
parameter_list|,
name|GLuint
name|stencilBits
parameter_list|,
name|GLuint
name|unusedBits
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLenum
name|componentType
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|textureSupport
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|renderSupport
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|filterSupport
parameter_list|)
block|{
name|InternalFormat
name|formatInfo
decl_stmt|;
name|formatInfo
operator|.
name|depthBits
operator|=
name|depthBits
expr_stmt|;
name|formatInfo
operator|.
name|stencilBits
operator|=
name|stencilBits
expr_stmt|;
name|formatInfo
operator|.
name|pixelBytes
operator|=
operator|(
name|depthBits
operator|+
name|stencilBits
operator|+
name|unusedBits
operator|)
operator|/
literal|8
expr_stmt|;
name|formatInfo
operator|.
name|componentCount
operator|=
operator|(
operator|(
name|depthBits
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
operator|(
name|stencilBits
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|formatInfo
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|formatInfo
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|formatInfo
operator|.
name|componentType
operator|=
name|componentType
expr_stmt|;
name|formatInfo
operator|.
name|colorEncoding
operator|=
name|GL_LINEAR
expr_stmt|;
name|formatInfo
operator|.
name|textureSupport
operator|=
name|textureSupport
expr_stmt|;
name|formatInfo
operator|.
name|renderSupport
operator|=
name|renderSupport
expr_stmt|;
name|formatInfo
operator|.
name|filterSupport
operator|=
name|filterSupport
expr_stmt|;
return|return
name|formatInfo
return|;
block|}
DECL|function|CompressedFormat
specifier|static
name|InternalFormat
name|CompressedFormat
parameter_list|(
name|GLuint
name|compressedBlockWidth
parameter_list|,
name|GLuint
name|compressedBlockHeight
parameter_list|,
name|GLuint
name|compressedBlockSize
parameter_list|,
name|GLuint
name|componentCount
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|bool
name|srgb
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|textureSupport
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|renderSupport
parameter_list|,
name|InternalFormat
operator|::
name|SupportCheckFunction
name|filterSupport
parameter_list|)
block|{
name|InternalFormat
name|formatInfo
decl_stmt|;
name|formatInfo
operator|.
name|compressedBlockWidth
operator|=
name|compressedBlockWidth
expr_stmt|;
name|formatInfo
operator|.
name|compressedBlockHeight
operator|=
name|compressedBlockHeight
expr_stmt|;
name|formatInfo
operator|.
name|pixelBytes
operator|=
name|compressedBlockSize
operator|/
literal|8
expr_stmt|;
name|formatInfo
operator|.
name|componentCount
operator|=
name|componentCount
expr_stmt|;
name|formatInfo
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|formatInfo
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|formatInfo
operator|.
name|componentType
operator|=
name|GL_UNSIGNED_NORMALIZED
expr_stmt|;
name|formatInfo
operator|.
name|colorEncoding
operator|=
operator|(
name|srgb
condition|?
name|GL_SRGB
else|:
name|GL_LINEAR
operator|)
expr_stmt|;
name|formatInfo
operator|.
name|compressed
operator|=
literal|true
expr_stmt|;
name|formatInfo
operator|.
name|textureSupport
operator|=
name|textureSupport
expr_stmt|;
name|formatInfo
operator|.
name|renderSupport
operator|=
name|renderSupport
expr_stmt|;
name|formatInfo
operator|.
name|filterSupport
operator|=
name|filterSupport
expr_stmt|;
return|return
name|formatInfo
return|;
block|}
DECL|typedef|InternalFormatInfoPair
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|GLenum
argument_list|,
name|InternalFormat
argument_list|>
name|InternalFormatInfoPair
typedef|;
DECL|typedef|InternalFormatInfoMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|GLenum
argument_list|,
name|InternalFormat
argument_list|>
name|InternalFormatInfoMap
typedef|;
DECL|function|BuildInternalFormatInfoMap
specifier|static
name|InternalFormatInfoMap
name|BuildInternalFormatInfoMap
parameter_list|()
block|{
name|InternalFormatInfoMap
name|map
decl_stmt|;
comment|// clang-format off
comment|// From ES 3.0.1 spec, table 3.12
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_NONE
argument_list|,
name|InternalFormat
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//                               | Internal format     |          | R | G | B | A |S | Format         | Type                           | Component type        | SRGB | Texture supported                        | Renderable                               | Filterable    |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R8
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureRG
argument_list|>
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureRG
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R8_SNORM
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_SIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG8
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureRG
argument_list|>
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureRG
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG8_SNORM
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_SIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB8
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|rgb8rgba8
argument_list|>
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|rgb8rgba8
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB8_SNORM
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_SIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB565
argument_list|,
name|RGBAFormat
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_SHORT_5_6_5
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA4
argument_list|,
name|RGBAFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_4_4_4_4
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB5_A1
argument_list|,
name|RGBAFormat
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_5_5_5_1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA8
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|rgb8rgba8
argument_list|>
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|rgb8rgba8
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA8_SNORM
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_SIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB10_A2
argument_list|,
name|RGBAFormat
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB10_A2UI
argument_list|,
name|RGBAFormat
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_SRGB8
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|true
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|sRGB
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_SRGB8_ALPHA8
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|true
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|sRGB
argument_list|>
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|sRGB
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R11F_G11F_B10F
argument_list|,
name|RGBAFormat
argument_list|(
literal|11
argument_list|,
literal|11
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_INT_10F_11F_11F_REV
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|colorBufferFloat
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB9_E5
argument_list|,
name|RGBAFormat
argument_list|(
literal|9
argument_list|,
literal|9
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_INT_5_9_9_9_REV
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R8I
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R8UI
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R16I
argument_list|,
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R16UI
argument_list|,
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R32I
argument_list|,
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R32UI
argument_list|,
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG8I
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG8UI
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG16I
argument_list|,
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG16UI
argument_list|,
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG32I
argument_list|,
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG32UI
argument_list|,
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB8I
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB8UI
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB16I
argument_list|,
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB16UI
argument_list|,
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB32I
argument_list|,
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB32UI
argument_list|,
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA8I
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA8UI
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA16I
argument_list|,
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA16UI
argument_list|,
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA32I
argument_list|,
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA32UI
argument_list|,
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_BGRA8_EXT
argument_list|,
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFormatBGRA8888
argument_list|>
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFormatBGRA8888
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_BGRA4_ANGLEX
argument_list|,
name|RGBAFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFormatBGRA8888
argument_list|>
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFormatBGRA8888
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_BGR5_A1_ANGLEX
argument_list|,
name|RGBAFormat
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFormatBGRA8888
argument_list|>
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFormatBGRA8888
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Floating point renderability and filtering is provided by OES_texture_float and OES_texture_half_float
comment|//                               | Internal format     |          | D |S | Format             | Type                                   | Comp   | SRGB |  Texture supported | Renderable                  | Filterable                                    |
comment|//                               |                     |          |   |  |                    |                                        | type   |      |                    |                             |                                               |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R16F
argument_list|,
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|HalfFloatSupportRG
argument_list|,
name|HalfFloatRenderableSupportRG
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureHalfFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG16F
argument_list|,
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|HalfFloatSupportRG
argument_list|,
name|HalfFloatRenderableSupportRG
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureHalfFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB16F
argument_list|,
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|HalfFloatSupport
argument_list|,
name|HalfFloatRenderableSupport
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureHalfFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA16F
argument_list|,
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|HalfFloatSupport
argument_list|,
name|HalfFloatRenderableSupport
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureHalfFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R32F
argument_list|,
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|FloatSupportRG
argument_list|,
name|FloatRenderableSupportRG
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG32F
argument_list|,
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|FloatSupportRG
argument_list|,
name|FloatRenderableSupportRG
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB32F
argument_list|,
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|FloatSupport
argument_list|,
name|FloatRenderableSupport
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA32F
argument_list|,
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|FloatSupport
argument_list|,
name|FloatRenderableSupport
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Depth stencil formats
comment|//                               | Internal format         |                  | D |S | X | Format            | Type                             | Component type        | Supported                                    | Renderable                                                                         | Filterable                                  |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH_COMPONENT16
argument_list|,
name|DepthStencilFormat
argument_list|(
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|depthTextures
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH_COMPONENT24
argument_list|,
name|DepthStencilFormat
argument_list|(
literal|24
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|depthTextures
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH_COMPONENT32F
argument_list|,
name|DepthStencilFormat
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|depthTextures
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH_COMPONENT32_OES
argument_list|,
name|DepthStencilFormat
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|depthTextures
argument_list|,
operator|&
name|Extensions
operator|::
name|depth32
argument_list|>
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|depthTextures
argument_list|,
operator|&
name|Extensions
operator|::
name|depth32
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH24_STENCIL8
argument_list|,
name|DepthStencilFormat
argument_list|(
literal|24
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_DEPTH_STENCIL
argument_list|,
name|GL_UNSIGNED_INT_24_8
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|depthTextures
argument_list|>
argument_list|,
name|RequireESOrExtOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|depthTextures
argument_list|,
operator|&
name|Extensions
operator|::
name|packedDepthStencil
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH32F_STENCIL8
argument_list|,
name|DepthStencilFormat
argument_list|(
literal|32
argument_list|,
literal|8
argument_list|,
literal|24
argument_list|,
name|GL_DEPTH_STENCIL
argument_list|,
name|GL_FLOAT_32_UNSIGNED_INT_24_8_REV
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// STENCIL_INDEX8 is special-cased, see around the bottom of the list.
comment|// Luminance alpha formats
comment|//                               | Internal format          |          | L | A | Format            | Type            | Component type        | Supported                                                                    | Renderable    | Filterable    |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_ALPHA8_EXT
argument_list|,
name|LUMAFormat
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE8_EXT
argument_list|,
name|LUMAFormat
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_ALPHA32F_EXT
argument_list|,
name|LUMAFormat
argument_list|(
literal|0
argument_list|,
literal|32
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireExtAndExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|,
operator|&
name|Extensions
operator|::
name|textureFloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE32F_EXT
argument_list|,
name|LUMAFormat
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireExtAndExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|,
operator|&
name|Extensions
operator|::
name|textureFloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_ALPHA16F_EXT
argument_list|,
name|LUMAFormat
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireExtAndExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|,
operator|&
name|Extensions
operator|::
name|textureHalfFloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE16F_EXT
argument_list|,
name|LUMAFormat
argument_list|(
literal|16
argument_list|,
literal|0
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireExtAndExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|,
operator|&
name|Extensions
operator|::
name|textureHalfFloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE8_ALPHA8_EXT
argument_list|,
name|LUMAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE_ALPHA32F_EXT
argument_list|,
name|LUMAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireExtAndExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|,
operator|&
name|Extensions
operator|::
name|textureFloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE_ALPHA16F_EXT
argument_list|,
name|LUMAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireExtAndExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|,
operator|&
name|Extensions
operator|::
name|textureHalfFloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unsized formats
comment|//                               | Internal format   |             | Format            | Supported                                         | Renderable                                        | Filterable    |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_ALPHA
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_ALPHA
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE_ALPHA
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_LUMINANCE_ALPHA
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RED
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_RED
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureRG
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_RG
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureRG
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_RGB
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_RGBA
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RED_INTEGER
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_RED_INTEGER
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG_INTEGER
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_RG_INTEGER
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB_INTEGER
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_RGB_INTEGER
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA_INTEGER
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_RGBA_INTEGER
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_BGRA_EXT
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_BGRA_EXT
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFormatBGRA8888
argument_list|>
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFormatBGRA8888
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH_COMPONENT
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_DEPTH_COMPONENT
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH_STENCIL
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_DEPTH_STENCIL
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|packedDepthStencil
argument_list|>
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|packedDepthStencil
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_SRGB_EXT
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_RGB
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|sRGB
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_SRGB_ALPHA_EXT
argument_list|,
name|UnsizedFormat
argument_list|(
name|GL_RGBA
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|sRGB
argument_list|>
argument_list|,
name|RequireESOrExt
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|sRGB
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Compressed formats, From ES 3.0.1 spec, table 3.16
comment|//                               | Internal format                             |                |W |H | BS |CC| Format                                      | Type            | SRGB | Supported   | Renderable    | Filterable    |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_R11_EAC
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
name|GL_COMPRESSED_R11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SIGNED_R11_EAC
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
name|GL_COMPRESSED_SIGNED_R11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RG11_EAC
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|2
argument_list|,
name|GL_COMPRESSED_RG11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SIGNED_RG11_EAC
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|2
argument_list|,
name|GL_COMPRESSED_SIGNED_RG11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGB8_ETC2
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|3
argument_list|,
name|GL_COMPRESSED_RGB8_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ETC2
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|3
argument_list|,
name|GL_COMPRESSED_SRGB8_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|3
argument_list|,
name|GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|3
argument_list|,
name|GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA8_ETC2_EAC
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA8_ETC2_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireES
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_EXT_texture_compression_dxt1
comment|//                               | Internal format                   |                |W |H | BS |CC| Format                            | Type            | SRGB | Supported                                         | Renderable    | Filterable    |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|3
argument_list|,
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionDXT1
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionDXT1
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_ANGLE_texture_compression_dxt3
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionDXT5
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_ANGLE_texture_compression_dxt5
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionDXT5
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_OES_compressed_ETC1_RGB8_texture
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_ETC1_RGB8_OES
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|3
argument_list|,
name|GL_ETC1_RGB8_OES
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|compressedETC1RGB8Texture
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// From KHR_texture_compression_astc_hdr
comment|//                               | Internal format                          |                | W | H | BS |CC| Format                                   | Type            | SRGB | Supported                                                                                     | Renderable     | Filterable    |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_ASTC_4x4_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_ASTC_4x4_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_ASTC_5x4_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_ASTC_5x4_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_ASTC_5x5_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_ASTC_5x5_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_ASTC_6x5_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|6
argument_list|,
literal|5
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_ASTC_6x5_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_ASTC_6x6_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|6
argument_list|,
literal|6
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_ASTC_6x6_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_ASTC_8x5_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|8
argument_list|,
literal|5
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_ASTC_8x5_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_ASTC_8x6_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|8
argument_list|,
literal|6
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_ASTC_8x6_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_ASTC_8x8_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_ASTC_8x8_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_ASTC_10x5_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_ASTC_10x5_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_ASTC_10x6_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|10
argument_list|,
literal|6
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_ASTC_10x6_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_ASTC_10x8_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|10
argument_list|,
literal|8
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_ASTC_10x8_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_ASTC_10x10_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_ASTC_10x10_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_ASTC_12x10_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|12
argument_list|,
literal|10
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_ASTC_12x10_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_ASTC_12x12_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|12
argument_list|,
literal|12
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_ASTC_12x12_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|6
argument_list|,
literal|5
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|6
argument_list|,
literal|6
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|8
argument_list|,
literal|5
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|8
argument_list|,
literal|6
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|10
argument_list|,
literal|6
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|10
argument_list|,
literal|8
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|12
argument_list|,
literal|10
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
argument_list|,
name|CompressedFormat
argument_list|(
literal|12
argument_list|,
literal|12
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|RequireExtOrExt
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionASTCHDR
argument_list|,
operator|&
name|Extensions
operator|::
name|textureCompressionASTCLDR
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// For STENCIL_INDEX8 we chose a normalized component type for the following reasons:
comment|// - Multisampled buffer are disallowed for non-normalized integer component types and we want to support it for STENCIL_INDEX8
comment|// - All other stencil formats (all depth-stencil) are either float or normalized
comment|// - It affects only validation of internalformat in RenderbufferStorageMultisample.
comment|//                               | Internal format  |                  |D |S |X | Format          | Type            | Component type        | Supported   | Renderable  | Filterable   |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_STENCIL_INDEX8
argument_list|,
name|DepthStencilFormat
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_DEPTH_STENCIL
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|RequireES
argument_list|<
literal|2
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_ANGLE_lossy_etc_decode
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_ETC1_RGB8_LOSSY_DECODE_ANGLE
argument_list|,
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|3
argument_list|,
name|GL_ETC1_RGB8_OES
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExt
argument_list|<
operator|&
name|Extensions
operator|::
name|lossyETCDecode
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// clang-format on
return|return
name|map
return|;
block|}
DECL|function|GetInternalFormatMap
specifier|static
specifier|const
name|InternalFormatInfoMap
modifier|&
name|GetInternalFormatMap
parameter_list|()
block|{
specifier|static
specifier|const
name|InternalFormatInfoMap
name|formatMap
init|=
name|BuildInternalFormatInfoMap
argument_list|()
decl_stmt|;
return|return
name|formatMap
return|;
block|}
DECL|function|BuildAllSizedInternalFormatSet
specifier|static
name|FormatSet
name|BuildAllSizedInternalFormatSet
parameter_list|()
block|{
name|FormatSet
name|result
decl_stmt|;
specifier|const
name|InternalFormatInfoMap
modifier|&
name|formats
init|=
name|GetInternalFormatMap
argument_list|()
decl_stmt|;
for|for
control|(
name|InternalFormatInfoMap
operator|::
name|const_iterator
name|i
init|=
name|formats
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|formats
operator|.
name|end
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|->
name|second
operator|.
name|pixelBytes
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|insert
argument_list|(
name|i
operator|->
name|first
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|function|GetTypeInfo
specifier|const
name|Type
modifier|&
name|GetTypeInfo
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_BYTE
case|:
block|{
specifier|static
specifier|const
name|Type
name|info
init|=
name|GenTypeInfo
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|GL_UNSIGNED_SHORT
case|:
case|case
name|GL_SHORT
case|:
case|case
name|GL_HALF_FLOAT
case|:
case|case
name|GL_HALF_FLOAT_OES
case|:
block|{
specifier|static
specifier|const
name|Type
name|info
init|=
name|GenTypeInfo
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|GL_UNSIGNED_INT
case|:
case|case
name|GL_INT
case|:
case|case
name|GL_FLOAT
case|:
block|{
specifier|static
specifier|const
name|Type
name|info
init|=
name|GenTypeInfo
argument_list|(
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|GL_UNSIGNED_SHORT_5_6_5
case|:
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4
case|:
case|case
name|GL_UNSIGNED_SHORT_5_5_5_1
case|:
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
case|:
case|case
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
case|:
block|{
specifier|static
specifier|const
name|Type
name|info
init|=
name|GenTypeInfo
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|GL_UNSIGNED_INT_2_10_10_10_REV
case|:
case|case
name|GL_UNSIGNED_INT_24_8
case|:
case|case
name|GL_UNSIGNED_INT_10F_11F_11F_REV
case|:
case|case
name|GL_UNSIGNED_INT_5_9_9_9_REV
case|:
block|{
name|ASSERT
argument_list|(
name|GL_UNSIGNED_INT_24_8_OES
operator|==
name|GL_UNSIGNED_INT_24_8
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|Type
name|info
init|=
name|GenTypeInfo
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|GL_FLOAT_32_UNSIGNED_INT_24_8_REV
case|:
block|{
specifier|static
specifier|const
name|Type
name|info
init|=
name|GenTypeInfo
argument_list|(
literal|8
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
default|default:
block|{
specifier|static
specifier|const
name|Type
name|defaultInfo
decl_stmt|;
return|return
name|defaultInfo
return|;
block|}
block|}
block|}
DECL|function|GetInternalFormatInfo
specifier|const
name|InternalFormat
modifier|&
name|GetInternalFormatInfo
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
specifier|const
name|InternalFormatInfoMap
modifier|&
name|formatMap
init|=
name|GetInternalFormatMap
argument_list|()
decl_stmt|;
name|InternalFormatInfoMap
operator|::
name|const_iterator
name|iter
init|=
name|formatMap
operator|.
name|find
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|formatMap
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|iter
operator|->
name|second
return|;
block|}
else|else
block|{
specifier|static
specifier|const
name|InternalFormat
name|defaultInternalFormat
decl_stmt|;
return|return
name|defaultInternalFormat
return|;
block|}
block|}
DECL|function|computeRowPitch
name|GLuint
name|InternalFormat
operator|::
name|computeRowPitch
parameter_list|(
name|GLenum
name|formatType
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLint
name|alignment
parameter_list|,
name|GLint
name|rowLength
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|alignment
operator|>
literal|0
operator|&&
name|isPow2
argument_list|(
name|alignment
argument_list|)
argument_list|)
expr_stmt|;
name|GLuint
name|rowBytes
decl_stmt|;
if|if
condition|(
name|rowLength
operator|>
literal|0
condition|)
block|{
name|ASSERT
argument_list|(
operator|!
name|compressed
argument_list|)
expr_stmt|;
name|rowBytes
operator|=
name|pixelBytes
operator|*
name|rowLength
expr_stmt|;
block|}
else|else
block|{
name|rowBytes
operator|=
name|computeBlockSize
argument_list|(
name|formatType
argument_list|,
name|width
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|rx
operator|::
name|roundUp
argument_list|(
name|rowBytes
argument_list|,
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|alignment
argument_list|)
argument_list|)
return|;
block|}
DECL|function|computeDepthPitch
name|GLuint
name|InternalFormat
operator|::
name|computeDepthPitch
parameter_list|(
name|GLenum
name|formatType
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|alignment
parameter_list|,
name|GLint
name|rowLength
parameter_list|,
name|GLint
name|imageHeight
parameter_list|)
specifier|const
block|{
name|GLuint
name|rows
decl_stmt|;
if|if
condition|(
name|imageHeight
operator|>
literal|0
condition|)
block|{
name|rows
operator|=
name|imageHeight
expr_stmt|;
block|}
else|else
block|{
name|rows
operator|=
name|height
expr_stmt|;
block|}
return|return
name|computeRowPitch
argument_list|(
name|formatType
argument_list|,
name|width
argument_list|,
name|alignment
argument_list|,
name|rowLength
argument_list|)
operator|*
name|rows
return|;
block|}
DECL|function|computeBlockSize
name|GLuint
name|InternalFormat
operator|::
name|computeBlockSize
parameter_list|(
name|GLenum
name|formatType
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|compressed
condition|)
block|{
name|GLsizei
name|numBlocksWide
init|=
operator|(
name|width
operator|+
name|compressedBlockWidth
operator|-
literal|1
operator|)
operator|/
name|compressedBlockWidth
decl_stmt|;
name|GLsizei
name|numBlocksHight
init|=
operator|(
name|height
operator|+
name|compressedBlockHeight
operator|-
literal|1
operator|)
operator|/
name|compressedBlockHeight
decl_stmt|;
return|return
operator|(
name|pixelBytes
operator|*
name|numBlocksWide
operator|*
name|numBlocksHight
operator|)
return|;
block|}
else|else
block|{
specifier|const
name|Type
modifier|&
name|typeInfo
init|=
name|GetTypeInfo
argument_list|(
name|formatType
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeInfo
operator|.
name|specialInterpretation
condition|)
block|{
return|return
name|typeInfo
operator|.
name|bytes
operator|*
name|width
operator|*
name|height
return|;
block|}
else|else
block|{
return|return
name|componentCount
operator|*
name|typeInfo
operator|.
name|bytes
operator|*
name|width
operator|*
name|height
return|;
block|}
block|}
block|}
DECL|function|computeSkipPixels
name|GLuint
name|InternalFormat
operator|::
name|computeSkipPixels
parameter_list|(
name|GLint
name|rowPitch
parameter_list|,
name|GLint
name|depthPitch
parameter_list|,
name|GLint
name|skipImages
parameter_list|,
name|GLint
name|skipRows
parameter_list|,
name|GLint
name|skipPixels
parameter_list|)
specifier|const
block|{
return|return
name|skipImages
operator|*
name|depthPitch
operator|+
name|skipRows
operator|*
name|rowPitch
operator|+
name|skipPixels
operator|*
name|pixelBytes
return|;
block|}
DECL|function|GetSizedInternalFormat
name|GLenum
name|GetSizedInternalFormat
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|type
parameter_list|)
block|{
specifier|const
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatInfo
operator|.
name|pixelBytes
operator|>
literal|0
condition|)
block|{
return|return
name|internalFormat
return|;
block|}
else|else
block|{
specifier|static
specifier|const
name|FormatMap
name|formatMap
init|=
name|BuildFormatMap
argument_list|()
decl_stmt|;
name|FormatMap
operator|::
name|const_iterator
name|iter
init|=
name|formatMap
operator|.
name|find
argument_list|(
name|FormatTypePair
argument_list|(
name|internalFormat
argument_list|,
name|type
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|formatMap
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|iter
operator|->
name|second
return|;
block|}
else|else
block|{
return|return
name|GL_NONE
return|;
block|}
block|}
block|}
DECL|function|GetAllSizedInternalFormats
specifier|const
name|FormatSet
modifier|&
name|GetAllSizedInternalFormats
parameter_list|()
block|{
specifier|static
name|FormatSet
name|formatSet
init|=
name|BuildAllSizedInternalFormatSet
argument_list|()
decl_stmt|;
return|return
name|formatSet
return|;
block|}
DECL|function|GetAttributeType
name|AttributeType
name|GetAttributeType
parameter_list|(
name|GLenum
name|enumValue
parameter_list|)
block|{
switch|switch
condition|(
name|enumValue
condition|)
block|{
case|case
name|GL_FLOAT
case|:
return|return
name|ATTRIBUTE_FLOAT
return|;
case|case
name|GL_FLOAT_VEC2
case|:
return|return
name|ATTRIBUTE_VEC2
return|;
case|case
name|GL_FLOAT_VEC3
case|:
return|return
name|ATTRIBUTE_VEC3
return|;
case|case
name|GL_FLOAT_VEC4
case|:
return|return
name|ATTRIBUTE_VEC4
return|;
case|case
name|GL_INT
case|:
return|return
name|ATTRIBUTE_INT
return|;
case|case
name|GL_INT_VEC2
case|:
return|return
name|ATTRIBUTE_IVEC2
return|;
case|case
name|GL_INT_VEC3
case|:
return|return
name|ATTRIBUTE_IVEC3
return|;
case|case
name|GL_INT_VEC4
case|:
return|return
name|ATTRIBUTE_IVEC4
return|;
case|case
name|GL_UNSIGNED_INT
case|:
return|return
name|ATTRIBUTE_UINT
return|;
case|case
name|GL_UNSIGNED_INT_VEC2
case|:
return|return
name|ATTRIBUTE_UVEC2
return|;
case|case
name|GL_UNSIGNED_INT_VEC3
case|:
return|return
name|ATTRIBUTE_UVEC3
return|;
case|case
name|GL_UNSIGNED_INT_VEC4
case|:
return|return
name|ATTRIBUTE_UVEC4
return|;
case|case
name|GL_FLOAT_MAT2
case|:
return|return
name|ATTRIBUTE_MAT2
return|;
case|case
name|GL_FLOAT_MAT3
case|:
return|return
name|ATTRIBUTE_MAT3
return|;
case|case
name|GL_FLOAT_MAT4
case|:
return|return
name|ATTRIBUTE_MAT4
return|;
case|case
name|GL_FLOAT_MAT2x3
case|:
return|return
name|ATTRIBUTE_MAT2x3
return|;
case|case
name|GL_FLOAT_MAT2x4
case|:
return|return
name|ATTRIBUTE_MAT2x4
return|;
case|case
name|GL_FLOAT_MAT3x2
case|:
return|return
name|ATTRIBUTE_MAT3x2
return|;
case|case
name|GL_FLOAT_MAT3x4
case|:
return|return
name|ATTRIBUTE_MAT3x4
return|;
case|case
name|GL_FLOAT_MAT4x2
case|:
return|return
name|ATTRIBUTE_MAT4x2
return|;
case|case
name|GL_FLOAT_MAT4x3
case|:
return|return
name|ATTRIBUTE_MAT4x3
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|ATTRIBUTE_FLOAT
return|;
block|}
block|}
DECL|function|GetVertexFormatType
name|VertexFormatType
name|GetVertexFormatType
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLboolean
name|normalized
parameter_list|,
name|GLuint
name|components
parameter_list|,
name|bool
name|pureInteger
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_BYTE
case|:
switch|switch
condition|(
name|components
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_SBYTE1_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_SBYTE1_NORM
return|;
return|return
name|VERTEX_FORMAT_SBYTE1
return|;
case|case
literal|2
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_SBYTE2_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_SBYTE2_NORM
return|;
return|return
name|VERTEX_FORMAT_SBYTE2
return|;
case|case
literal|3
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_SBYTE3_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_SBYTE3_NORM
return|;
return|return
name|VERTEX_FORMAT_SBYTE3
return|;
case|case
literal|4
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_SBYTE4_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_SBYTE4_NORM
return|;
return|return
name|VERTEX_FORMAT_SBYTE4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GL_UNSIGNED_BYTE
case|:
switch|switch
condition|(
name|components
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_UBYTE1_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_UBYTE1_NORM
return|;
return|return
name|VERTEX_FORMAT_UBYTE1
return|;
case|case
literal|2
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_UBYTE2_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_UBYTE2_NORM
return|;
return|return
name|VERTEX_FORMAT_UBYTE2
return|;
case|case
literal|3
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_UBYTE3_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_UBYTE3_NORM
return|;
return|return
name|VERTEX_FORMAT_UBYTE3
return|;
case|case
literal|4
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_UBYTE4_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_UBYTE4_NORM
return|;
return|return
name|VERTEX_FORMAT_UBYTE4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GL_SHORT
case|:
switch|switch
condition|(
name|components
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_SSHORT1_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_SSHORT1_NORM
return|;
return|return
name|VERTEX_FORMAT_SSHORT1
return|;
case|case
literal|2
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_SSHORT2_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_SSHORT2_NORM
return|;
return|return
name|VERTEX_FORMAT_SSHORT2
return|;
case|case
literal|3
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_SSHORT3_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_SSHORT3_NORM
return|;
return|return
name|VERTEX_FORMAT_SSHORT3
return|;
case|case
literal|4
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_SSHORT4_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_SSHORT4_NORM
return|;
return|return
name|VERTEX_FORMAT_SSHORT4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GL_UNSIGNED_SHORT
case|:
switch|switch
condition|(
name|components
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_USHORT1_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_USHORT1_NORM
return|;
return|return
name|VERTEX_FORMAT_USHORT1
return|;
case|case
literal|2
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_USHORT2_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_USHORT2_NORM
return|;
return|return
name|VERTEX_FORMAT_USHORT2
return|;
case|case
literal|3
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_USHORT3_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_USHORT3_NORM
return|;
return|return
name|VERTEX_FORMAT_USHORT3
return|;
case|case
literal|4
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_USHORT4_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_USHORT4_NORM
return|;
return|return
name|VERTEX_FORMAT_USHORT4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GL_INT
case|:
switch|switch
condition|(
name|components
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_SINT1_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_SINT1_NORM
return|;
return|return
name|VERTEX_FORMAT_SINT1
return|;
case|case
literal|2
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_SINT2_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_SINT2_NORM
return|;
return|return
name|VERTEX_FORMAT_SINT2
return|;
case|case
literal|3
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_SINT3_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_SINT3_NORM
return|;
return|return
name|VERTEX_FORMAT_SINT3
return|;
case|case
literal|4
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_SINT4_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_SINT4_NORM
return|;
return|return
name|VERTEX_FORMAT_SINT4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GL_UNSIGNED_INT
case|:
switch|switch
condition|(
name|components
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_UINT1_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_UINT1_NORM
return|;
return|return
name|VERTEX_FORMAT_UINT1
return|;
case|case
literal|2
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_UINT2_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_UINT2_NORM
return|;
return|return
name|VERTEX_FORMAT_UINT2
return|;
case|case
literal|3
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_UINT3_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_UINT3_NORM
return|;
return|return
name|VERTEX_FORMAT_UINT3
return|;
case|case
literal|4
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_UINT4_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_UINT4_NORM
return|;
return|return
name|VERTEX_FORMAT_UINT4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GL_FLOAT
case|:
switch|switch
condition|(
name|components
condition|)
block|{
case|case
literal|1
case|:
return|return
name|VERTEX_FORMAT_FLOAT1
return|;
case|case
literal|2
case|:
return|return
name|VERTEX_FORMAT_FLOAT2
return|;
case|case
literal|3
case|:
return|return
name|VERTEX_FORMAT_FLOAT3
return|;
case|case
literal|4
case|:
return|return
name|VERTEX_FORMAT_FLOAT4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GL_HALF_FLOAT
case|:
switch|switch
condition|(
name|components
condition|)
block|{
case|case
literal|1
case|:
return|return
name|VERTEX_FORMAT_HALF1
return|;
case|case
literal|2
case|:
return|return
name|VERTEX_FORMAT_HALF2
return|;
case|case
literal|3
case|:
return|return
name|VERTEX_FORMAT_HALF3
return|;
case|case
literal|4
case|:
return|return
name|VERTEX_FORMAT_HALF4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GL_FIXED
case|:
switch|switch
condition|(
name|components
condition|)
block|{
case|case
literal|1
case|:
return|return
name|VERTEX_FORMAT_FIXED1
return|;
case|case
literal|2
case|:
return|return
name|VERTEX_FORMAT_FIXED2
return|;
case|case
literal|3
case|:
return|return
name|VERTEX_FORMAT_FIXED3
return|;
case|case
literal|4
case|:
return|return
name|VERTEX_FORMAT_FIXED4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GL_INT_2_10_10_10_REV
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_SINT210_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_SINT210_NORM
return|;
return|return
name|VERTEX_FORMAT_SINT210
return|;
case|case
name|GL_UNSIGNED_INT_2_10_10_10_REV
case|:
if|if
condition|(
name|pureInteger
condition|)
return|return
name|VERTEX_FORMAT_UINT210_INT
return|;
if|if
condition|(
name|normalized
condition|)
return|return
name|VERTEX_FORMAT_UINT210_NORM
return|;
return|return
name|VERTEX_FORMAT_UINT210
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
name|VERTEX_FORMAT_UBYTE1
return|;
block|}
DECL|function|GetVertexFormatType
name|VertexFormatType
name|GetVertexFormatType
parameter_list|(
specifier|const
name|VertexAttribute
modifier|&
name|attrib
parameter_list|)
block|{
return|return
name|GetVertexFormatType
argument_list|(
name|attrib
operator|.
name|type
argument_list|,
name|attrib
operator|.
name|normalized
argument_list|,
name|attrib
operator|.
name|size
argument_list|,
name|attrib
operator|.
name|pureInteger
argument_list|)
return|;
block|}
DECL|function|GetVertexFormatType
name|VertexFormatType
name|GetVertexFormatType
parameter_list|(
specifier|const
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
name|GLenum
name|currentValueType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|attrib
operator|.
name|enabled
condition|)
block|{
return|return
name|GetVertexFormatType
argument_list|(
name|currentValueType
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
operator|(
name|currentValueType
operator|!=
name|GL_FLOAT
operator|)
argument_list|)
return|;
block|}
return|return
name|GetVertexFormatType
argument_list|(
name|attrib
argument_list|)
return|;
block|}
DECL|function|GetVertexFormatFromType
specifier|const
name|VertexFormat
modifier|&
name|GetVertexFormatFromType
parameter_list|(
name|VertexFormatType
name|vertexFormatType
parameter_list|)
block|{
switch|switch
condition|(
name|vertexFormatType
condition|)
block|{
case|case
name|VERTEX_FORMAT_SBYTE1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SBYTE1_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_BYTE
argument_list|,
name|GL_TRUE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SBYTE2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SBYTE2_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_BYTE
argument_list|,
name|GL_TRUE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SBYTE3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SBYTE3_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_BYTE
argument_list|,
name|GL_TRUE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SBYTE4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SBYTE4_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_BYTE
argument_list|,
name|GL_TRUE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UBYTE1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UBYTE1_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_TRUE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UBYTE2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UBYTE2_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_TRUE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UBYTE3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UBYTE3_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_TRUE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UBYTE4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UBYTE4_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_TRUE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SSHORT1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SSHORT1_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_SHORT
argument_list|,
name|GL_TRUE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SSHORT2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SSHORT2_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_SHORT
argument_list|,
name|GL_TRUE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SSHORT3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SSHORT3_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_SHORT
argument_list|,
name|GL_TRUE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SSHORT4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SSHORT4_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_SHORT
argument_list|,
name|GL_TRUE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_USHORT1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_USHORT1_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_TRUE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_USHORT2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_USHORT2_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_TRUE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_USHORT3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_USHORT3_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_TRUE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_USHORT4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_USHORT4_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_TRUE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT1_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT
argument_list|,
name|GL_TRUE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT2_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT
argument_list|,
name|GL_TRUE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT3_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT
argument_list|,
name|GL_TRUE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT4_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT
argument_list|,
name|GL_TRUE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT1_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|GL_TRUE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT2_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|GL_TRUE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT3_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|GL_TRUE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT4_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|GL_TRUE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SBYTE1_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SBYTE2_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SBYTE3_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SBYTE4_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UBYTE1_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UBYTE2_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UBYTE3_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UBYTE4_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SSHORT1_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SSHORT2_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SSHORT3_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SSHORT4_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_USHORT1_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_USHORT2_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_USHORT3_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_USHORT4_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT1_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT2_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT3_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT4_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT1_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT2_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT3_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT4_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_FIXED1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_FIXED
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_FIXED2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_FIXED
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_FIXED3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_FIXED
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_FIXED4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_FIXED
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_HALF1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_HALF_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_HALF2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_HALF_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_HALF3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_HALF_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_HALF4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_HALF_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_FLOAT1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_FLOAT2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_FLOAT3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_FLOAT4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT210
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT_2_10_10_10_REV
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT210
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT210_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT_2_10_10_10_REV
argument_list|,
name|GL_TRUE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT210_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|,
name|GL_TRUE
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_SINT210_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_INT_2_10_10_10_REV
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
case|case
name|VERTEX_FORMAT_UINT210_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
default|default:
block|{
specifier|static
specifier|const
name|VertexFormat
name|format
argument_list|(
name|GL_NONE
argument_list|,
name|GL_FALSE
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|format
return|;
block|}
block|}
block|}
DECL|function|VertexFormat
name|VertexFormat
operator|::
name|VertexFormat
parameter_list|(
name|GLenum
name|typeIn
parameter_list|,
name|GLboolean
name|normalizedIn
parameter_list|,
name|GLuint
name|componentsIn
parameter_list|,
name|bool
name|pureIntegerIn
parameter_list|)
member_init_list|:
name|type
argument_list|(
name|typeIn
argument_list|)
member_init_list|,
name|normalized
argument_list|(
name|normalizedIn
argument_list|)
member_init_list|,
name|components
argument_list|(
name|componentsIn
argument_list|)
member_init_list|,
name|pureInteger
argument_list|(
name|pureIntegerIn
argument_list|)
block|{
comment|// float -> !normalized
name|ASSERT
argument_list|(
operator|!
operator|(
name|type
operator|==
name|GL_FLOAT
operator|||
name|type
operator|==
name|GL_HALF_FLOAT
operator|||
name|type
operator|==
name|GL_FIXED
operator|)
operator|||
name|normalized
operator|==
name|GL_FALSE
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
end_unit
