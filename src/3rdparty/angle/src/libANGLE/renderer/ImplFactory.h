begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// ImplFactory.h:
end_comment
begin_comment
comment|//   Factory interface for Impl objects.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_IMPLFACTORY_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_IMPLFACTORY_H_
define|#
directive|define
name|LIBANGLE_RENDERER_IMPLFACTORY_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Program.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Shader.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/VertexArray.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|BufferImpl
decl_stmt|;
name|class
name|CompilerImpl
decl_stmt|;
name|class
name|FenceNVImpl
decl_stmt|;
name|class
name|FenceSyncImpl
decl_stmt|;
name|class
name|FramebufferImpl
decl_stmt|;
name|class
name|ProgramImpl
decl_stmt|;
name|class
name|QueryImpl
decl_stmt|;
name|class
name|RenderbufferImpl
decl_stmt|;
name|class
name|SamplerImpl
decl_stmt|;
name|class
name|ShaderImpl
decl_stmt|;
name|class
name|TextureImpl
decl_stmt|;
name|class
name|TransformFeedbackImpl
decl_stmt|;
name|class
name|VertexArrayImpl
decl_stmt|;
name|class
name|ImplFactory
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|ImplFactory
argument_list|()
block|{}
name|virtual
operator|~
name|ImplFactory
argument_list|()
block|{}
comment|// Shader creation
name|virtual
name|CompilerImpl
operator|*
name|createCompiler
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|ShaderImpl
operator|*
name|createShader
argument_list|(
specifier|const
name|gl
operator|::
name|Shader
operator|::
name|Data
operator|&
name|data
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|ProgramImpl
operator|*
name|createProgram
argument_list|(
specifier|const
name|gl
operator|::
name|Program
operator|::
name|Data
operator|&
name|data
argument_list|)
operator|=
literal|0
block|;
comment|// Framebuffer creation
name|virtual
name|FramebufferImpl
operator|*
name|createFramebuffer
argument_list|(
specifier|const
name|gl
operator|::
name|Framebuffer
operator|::
name|Data
operator|&
name|data
argument_list|)
operator|=
literal|0
block|;
comment|// Texture creation
name|virtual
name|TextureImpl
operator|*
name|createTexture
argument_list|(
argument|GLenum target
argument_list|)
operator|=
literal|0
block|;
comment|// Renderbuffer creation
name|virtual
name|RenderbufferImpl
operator|*
name|createRenderbuffer
argument_list|()
operator|=
literal|0
block|;
comment|// Buffer creation
name|virtual
name|BufferImpl
operator|*
name|createBuffer
argument_list|()
operator|=
literal|0
block|;
comment|// Vertex Array creation
name|virtual
name|VertexArrayImpl
operator|*
name|createVertexArray
argument_list|(
specifier|const
name|gl
operator|::
name|VertexArray
operator|::
name|Data
operator|&
name|data
argument_list|)
operator|=
literal|0
block|;
comment|// Query and Fence creation
name|virtual
name|QueryImpl
operator|*
name|createQuery
argument_list|(
argument|GLenum type
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|FenceNVImpl
operator|*
name|createFenceNV
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|FenceSyncImpl
operator|*
name|createFenceSync
argument_list|()
operator|=
literal|0
block|;
comment|// Transform Feedback creation
name|virtual
name|TransformFeedbackImpl
operator|*
name|createTransformFeedback
argument_list|()
operator|=
literal|0
block|;
comment|// Sampler object creation
name|virtual
name|SamplerImpl
operator|*
name|createSampler
argument_list|()
operator|=
literal|0
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_IMPLFACTORY_H_
end_comment
end_unit
