begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// DisplayImpl.h: Implementation methods of egl::Display
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_DISPLAYIMPL_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_DISPLAYIMPL_H_
define|#
directive|define
name|LIBANGLE_RENDERER_DISPLAYIMPL_H_
end_define
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Caps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Config.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/Renderer.h"
end_include
begin_include
include|#
directive|include
file|<set>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_decl_stmt
name|namespace
name|egl
block|{
name|class
name|AttributeMap
decl_stmt|;
name|class
name|Display
decl_stmt|;
struct_decl|struct
name|Config
struct_decl|;
name|class
name|Surface
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Context
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|SurfaceImpl
decl_stmt|;
struct_decl|struct
name|ConfigDesc
struct_decl|;
name|class
name|DisplayImpl
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|DisplayImpl
argument_list|()
block|;
name|virtual
operator|~
name|DisplayImpl
argument_list|()
block|;
name|virtual
name|egl
operator|::
name|Error
name|initialize
argument_list|(
name|egl
operator|::
name|Display
operator|*
name|display
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|terminate
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|egl
operator|::
name|Error
name|createWindowSurface
argument_list|(
argument|const egl::Config *configuration
argument_list|,
argument|EGLNativeWindowType window
argument_list|,
argument|const egl::AttributeMap&attribs
argument_list|,
argument|SurfaceImpl **outSurface
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|egl
operator|::
name|Error
name|createPbufferSurface
argument_list|(
specifier|const
name|egl
operator|::
name|Config
operator|*
name|configuration
argument_list|,
specifier|const
name|egl
operator|::
name|AttributeMap
operator|&
name|attribs
argument_list|,
name|SurfaceImpl
operator|*
operator|*
name|outSurface
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|egl
operator|::
name|Error
name|createPbufferFromClientBuffer
argument_list|(
argument|const egl::Config *configuration
argument_list|,
argument|EGLClientBuffer shareHandle
argument_list|,
argument|const egl::AttributeMap&attribs
argument_list|,
argument|SurfaceImpl **outSurface
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|egl
operator|::
name|Error
name|createPixmapSurface
argument_list|(
argument|const egl::Config *configuration
argument_list|,
argument|NativePixmapType nativePixmap
argument_list|,
argument|const egl::AttributeMap&attribs
argument_list|,
argument|SurfaceImpl **outSurface
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|egl
operator|::
name|Error
name|createContext
argument_list|(
specifier|const
name|egl
operator|::
name|Config
operator|*
name|config
argument_list|,
specifier|const
name|gl
operator|::
name|Context
operator|*
name|shareContext
argument_list|,
specifier|const
name|egl
operator|::
name|AttributeMap
operator|&
name|attribs
argument_list|,
name|gl
operator|::
name|Context
operator|*
operator|*
name|outContext
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|egl
operator|::
name|Error
name|makeCurrent
argument_list|(
name|egl
operator|::
name|Surface
operator|*
name|drawSurface
argument_list|,
name|egl
operator|::
name|Surface
operator|*
name|readSurface
argument_list|,
name|gl
operator|::
name|Context
operator|*
name|context
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|egl
operator|::
name|ConfigSet
name|generateConfigs
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|bool
name|isDeviceLost
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|bool
name|testDeviceLost
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|egl
operator|::
name|Error
name|restoreLostDevice
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|bool
name|isValidNativeWindow
argument_list|(
argument|EGLNativeWindowType window
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|std
operator|::
name|string
name|getVendorString
argument_list|()
specifier|const
operator|=
literal|0
block|;
specifier|const
name|egl
operator|::
name|Caps
operator|&
name|getCaps
argument_list|()
specifier|const
block|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|egl
operator|::
name|Surface
operator|*
operator|>
name|SurfaceSet
expr_stmt|;
specifier|const
name|SurfaceSet
operator|&
name|getSurfaceSet
argument_list|()
specifier|const
block|{
return|return
name|mSurfaceSet
return|;
block|}
name|SurfaceSet
operator|&
name|getSurfaceSet
argument_list|()
block|{
return|return
name|mSurfaceSet
return|;
block|}
name|void
name|destroySurface
argument_list|(
name|egl
operator|::
name|Surface
operator|*
name|surface
argument_list|)
decl_stmt|;
specifier|const
name|egl
operator|::
name|DisplayExtensions
operator|&
name|getExtensions
argument_list|()
specifier|const
expr_stmt|;
name|protected
label|:
comment|// Place the surface set here so it can be accessible for handling
comment|// context loss events. (It is shared between the Display and Impl.)
name|SurfaceSet
name|mSurfaceSet
decl_stmt|;
name|private
label|:
name|virtual
name|void
name|generateExtensions
argument_list|(
name|egl
operator|::
name|DisplayExtensions
operator|*
name|outExtensions
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|generateCaps
argument_list|(
name|egl
operator|::
name|Caps
operator|*
name|outCaps
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|mutable
name|bool
name|mExtensionsInitialized
decl_stmt|;
name|mutable
name|egl
operator|::
name|DisplayExtensions
name|mExtensions
expr_stmt|;
name|mutable
name|bool
name|mCapsInitialized
decl_stmt|;
name|mutable
name|egl
operator|::
name|Caps
name|mCaps
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_DISPLAYIMPL_H_
end_comment
end_unit
