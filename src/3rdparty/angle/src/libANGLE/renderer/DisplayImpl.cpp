begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// DisplayImpl.cpp: Implementation methods of egl::Display
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/DisplayImpl.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Surface.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|DisplayImpl
name|DisplayImpl
operator|::
name|DisplayImpl
parameter_list|()
member_init_list|:
name|mExtensionsInitialized
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mCapsInitialized
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|~DisplayImpl
name|DisplayImpl
operator|::
name|~
name|DisplayImpl
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|mSurfaceSet
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|destroySurface
name|void
name|DisplayImpl
operator|::
name|destroySurface
parameter_list|(
name|egl
operator|::
name|Surface
modifier|*
name|surface
parameter_list|)
block|{
name|mSurfaceSet
operator|.
name|erase
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|surface
operator|->
name|onDestroy
argument_list|()
expr_stmt|;
block|}
DECL|function|getExtensions
specifier|const
name|egl
operator|::
name|DisplayExtensions
modifier|&
name|DisplayImpl
operator|::
name|getExtensions
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|mExtensionsInitialized
condition|)
block|{
name|generateExtensions
argument_list|(
operator|&
name|mExtensions
argument_list|)
expr_stmt|;
name|mExtensionsInitialized
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|mExtensions
return|;
block|}
DECL|function|getCaps
specifier|const
name|egl
operator|::
name|Caps
modifier|&
name|DisplayImpl
operator|::
name|getCaps
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|mCapsInitialized
condition|)
block|{
name|generateCaps
argument_list|(
operator|&
name|mCaps
argument_list|)
expr_stmt|;
name|mCapsInitialized
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|mCaps
return|;
block|}
block|}
end_namespace
end_unit
