begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// IndexDataManager.cpp: Defines the IndexDataManager, a class that
end_comment
begin_comment
comment|// runs the Buffer translation process for index buffers.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/IndexDataManager.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/BufferD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/IndexBuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Buffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
namespace|namespace
block|{
template|template
parameter_list|<
name|typename
name|InputT
parameter_list|,
name|typename
name|DestT
parameter_list|>
DECL|function|ConvertIndexArray
name|void
name|ConvertIndexArray
parameter_list|(
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|GLenum
name|sourceType
parameter_list|,
name|void
modifier|*
name|output
parameter_list|,
name|GLenum
name|destinationType
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|bool
name|usePrimitiveRestartFixedIndex
parameter_list|)
block|{
specifier|const
name|InputT
modifier|*
name|in
init|=
cast|static_cast
argument_list|<
specifier|const
name|InputT
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|DestT
modifier|*
name|out
init|=
cast|static_cast
argument_list|<
name|DestT
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
name|usePrimitiveRestartFixedIndex
condition|)
block|{
name|InputT
name|srcRestartIndex
init|=
cast|static_cast
argument_list|<
name|InputT
argument_list|>
argument_list|(
name|gl
operator|::
name|GetPrimitiveRestartIndex
argument_list|(
name|sourceType
argument_list|)
argument_list|)
decl_stmt|;
name|DestT
name|destRestartIndex
init|=
cast|static_cast
argument_list|<
name|DestT
argument_list|>
argument_list|(
name|gl
operator|::
name|GetPrimitiveRestartIndex
argument_list|(
name|destinationType
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
name|i
index|]
operator|=
operator|(
name|in
index|[
name|i
index|]
operator|==
name|srcRestartIndex
condition|?
name|destRestartIndex
else|:
cast|static_cast
argument_list|<
name|DestT
argument_list|>
argument_list|(
name|in
index|[
name|i
index|]
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
name|i
index|]
operator|=
cast|static_cast
argument_list|<
name|DestT
argument_list|>
argument_list|(
name|in
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|ConvertIndices
name|void
name|ConvertIndices
parameter_list|(
name|GLenum
name|sourceType
parameter_list|,
name|GLenum
name|destinationType
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|void
modifier|*
name|output
parameter_list|,
name|bool
name|usePrimitiveRestartFixedIndex
parameter_list|)
block|{
if|if
condition|(
name|sourceType
operator|==
name|destinationType
condition|)
block|{
specifier|const
name|gl
operator|::
name|Type
modifier|&
name|typeInfo
init|=
name|gl
operator|::
name|GetTypeInfo
argument_list|(
name|destinationType
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|output
argument_list|,
name|input
argument_list|,
name|count
operator|*
name|typeInfo
operator|.
name|bytes
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|sourceType
operator|==
name|GL_UNSIGNED_BYTE
condition|)
block|{
name|ASSERT
argument_list|(
name|destinationType
operator|==
name|GL_UNSIGNED_SHORT
argument_list|)
expr_stmt|;
name|ConvertIndexArray
argument_list|<
name|GLubyte
argument_list|,
name|GLushort
argument_list|>
argument_list|(
name|input
argument_list|,
name|sourceType
argument_list|,
name|output
argument_list|,
name|destinationType
argument_list|,
name|count
argument_list|,
name|usePrimitiveRestartFixedIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sourceType
operator|==
name|GL_UNSIGNED_SHORT
condition|)
block|{
name|ASSERT
argument_list|(
name|destinationType
operator|==
name|GL_UNSIGNED_INT
argument_list|)
expr_stmt|;
name|ConvertIndexArray
argument_list|<
name|GLushort
argument_list|,
name|GLuint
argument_list|>
argument_list|(
name|input
argument_list|,
name|sourceType
argument_list|,
name|output
argument_list|,
name|destinationType
argument_list|,
name|count
argument_list|,
name|usePrimitiveRestartFixedIndex
argument_list|)
expr_stmt|;
block|}
else|else
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
DECL|function|StreamInIndexBuffer
name|gl
operator|::
name|Error
name|StreamInIndexBuffer
parameter_list|(
name|IndexBufferInterface
modifier|*
name|buffer
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|data
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|,
name|GLenum
name|srcType
parameter_list|,
name|GLenum
name|dstType
parameter_list|,
name|bool
name|usePrimitiveRestartFixedIndex
parameter_list|,
name|unsigned
name|int
modifier|*
name|offset
parameter_list|)
block|{
specifier|const
name|gl
operator|::
name|Type
modifier|&
name|dstTypeInfo
init|=
name|gl
operator|::
name|GetTypeInfo
argument_list|(
name|dstType
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
operator|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|unsigned
name|int
argument_list|>
operator|::
name|max
argument_list|()
operator|>>
name|dstTypeInfo
operator|.
name|bytesShift
operator|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Reserving %u indices of %u bytes each exceeds the maximum buffer size."
argument_list|,
name|count
argument_list|,
name|dstTypeInfo
operator|.
name|bytes
argument_list|)
return|;
block|}
name|unsigned
name|int
name|bufferSizeRequired
init|=
name|count
operator|<<
name|dstTypeInfo
operator|.
name|bytesShift
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|buffer
operator|->
name|reserveBufferSpace
argument_list|(
name|bufferSizeRequired
argument_list|,
name|dstType
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|void
modifier|*
name|output
init|=
literal|nullptr
decl_stmt|;
name|error
operator|=
name|buffer
operator|->
name|mapBuffer
argument_list|(
name|bufferSizeRequired
argument_list|,
operator|&
name|output
argument_list|,
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|ConvertIndices
argument_list|(
name|srcType
argument_list|,
name|dstType
argument_list|,
name|data
argument_list|,
name|count
argument_list|,
name|output
argument_list|,
name|usePrimitiveRestartFixedIndex
argument_list|)
expr_stmt|;
name|error
operator|=
name|buffer
operator|->
name|unmapBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
block|}
comment|// anonymous namespace
DECL|function|IndexDataManager
name|IndexDataManager
operator|::
name|IndexDataManager
parameter_list|(
name|BufferFactoryD3D
modifier|*
name|factory
parameter_list|,
name|RendererClass
name|rendererClass
parameter_list|)
member_init_list|:
name|mFactory
argument_list|(
name|factory
argument_list|)
member_init_list|,
name|mRendererClass
argument_list|(
name|rendererClass
argument_list|)
member_init_list|,
name|mStreamingBufferShort
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mStreamingBufferInt
argument_list|(
literal|nullptr
argument_list|)
block|{ }
DECL|function|~IndexDataManager
name|IndexDataManager
operator|::
name|~
name|IndexDataManager
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mStreamingBufferShort
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mStreamingBufferInt
argument_list|)
expr_stmt|;
block|}
comment|// This function translates a GL-style indices into DX-style indices, with their description
comment|// returned in translated.
comment|// GL can specify vertex data in immediate mode (pointer to CPU array of indices), which is not
comment|// possible in DX and requires streaming (Case 1). If the GL indices are specified with a buffer
comment|// (Case 2), in a format supported by DX (subcase a) then all is good.
comment|// When we have a buffer with an unsupported format (subcase b) then we need to do some translation:
comment|// we will start by falling back to streaming, and after a while will start using a static translated
comment|// copy of the index buffer.
DECL|function|prepareIndexData
name|gl
operator|::
name|Error
name|IndexDataManager
operator|::
name|prepareIndexData
parameter_list|(
name|GLenum
name|srcType
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|gl
operator|::
name|Buffer
modifier|*
name|glBuffer
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|,
name|TranslatedIndexData
modifier|*
name|translated
parameter_list|,
name|bool
name|primitiveRestartFixedIndexEnabled
parameter_list|)
block|{
comment|// Avoid D3D11's primitive restart index value
comment|// see http://msdn.microsoft.com/en-us/library/windows/desktop/bb205124(v=vs.85).aspx
name|bool
name|hasPrimitiveRestartIndex
init|=
name|translated
operator|->
name|indexRange
operator|.
name|vertexIndexCount
operator|<
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|count
argument_list|)
operator|||
name|translated
operator|->
name|indexRange
operator|.
name|end
operator|==
name|gl
operator|::
name|GetPrimitiveRestartIndex
argument_list|(
name|srcType
argument_list|)
decl_stmt|;
name|bool
name|primitiveRestartWorkaround
init|=
name|mRendererClass
operator|==
name|RENDERER_D3D11
operator|&&
operator|!
name|primitiveRestartFixedIndexEnabled
operator|&&
name|hasPrimitiveRestartIndex
operator|&&
name|srcType
operator|==
name|GL_UNSIGNED_SHORT
decl_stmt|;
comment|// We should never have to deal with MAX_UINT indices, since we restrict it via
comment|// MAX_ELEMENT_INDEX.
name|ASSERT
argument_list|(
operator|!
operator|(
name|mRendererClass
operator|==
name|RENDERER_D3D11
operator|&&
operator|!
name|primitiveRestartFixedIndexEnabled
operator|&&
name|hasPrimitiveRestartIndex
operator|&&
name|srcType
operator|==
name|GL_UNSIGNED_INT
operator|)
argument_list|)
expr_stmt|;
specifier|const
name|GLenum
name|dstType
init|=
operator|(
name|srcType
operator|==
name|GL_UNSIGNED_INT
operator|||
name|primitiveRestartWorkaround
operator|)
condition|?
name|GL_UNSIGNED_INT
else|:
name|GL_UNSIGNED_SHORT
decl_stmt|;
specifier|const
name|gl
operator|::
name|Type
modifier|&
name|srcTypeInfo
init|=
name|gl
operator|::
name|GetTypeInfo
argument_list|(
name|srcType
argument_list|)
decl_stmt|;
specifier|const
name|gl
operator|::
name|Type
modifier|&
name|dstTypeInfo
init|=
name|gl
operator|::
name|GetTypeInfo
argument_list|(
name|dstType
argument_list|)
decl_stmt|;
name|BufferD3D
modifier|*
name|buffer
init|=
name|glBuffer
condition|?
name|GetImplAs
argument_list|<
name|BufferD3D
argument_list|>
argument_list|(
name|glBuffer
argument_list|)
else|:
literal|nullptr
decl_stmt|;
name|translated
operator|->
name|indexType
operator|=
name|dstType
expr_stmt|;
name|translated
operator|->
name|srcIndexData
operator|.
name|srcBuffer
operator|=
name|buffer
expr_stmt|;
name|translated
operator|->
name|srcIndexData
operator|.
name|srcIndices
operator|=
name|indices
expr_stmt|;
name|translated
operator|->
name|srcIndexData
operator|.
name|srcIndexType
operator|=
name|srcType
expr_stmt|;
name|translated
operator|->
name|srcIndexData
operator|.
name|srcCount
operator|=
name|count
expr_stmt|;
comment|// Case 1: the indices are passed by pointer, which forces the streaming of index data
if|if
condition|(
name|glBuffer
operator|==
literal|nullptr
condition|)
block|{
name|translated
operator|->
name|storage
operator|=
literal|nullptr
expr_stmt|;
return|return
name|streamIndexData
argument_list|(
name|indices
argument_list|,
name|count
argument_list|,
name|srcType
argument_list|,
name|dstType
argument_list|,
name|primitiveRestartFixedIndexEnabled
argument_list|,
name|translated
argument_list|)
return|;
block|}
comment|// Case 2: the indices are already in a buffer
name|unsigned
name|int
name|offset
init|=
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
name|uintptr_t
argument_list|>
argument_list|(
name|indices
argument_list|)
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|srcTypeInfo
operator|.
name|bytes
operator|*
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|count
argument_list|)
operator|+
name|offset
operator|<=
name|buffer
operator|->
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|offsetAligned
decl_stmt|;
switch|switch
condition|(
name|srcType
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
name|offsetAligned
operator|=
operator|(
name|offset
operator|%
sizeof|sizeof
argument_list|(
name|GLubyte
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|GL_UNSIGNED_SHORT
case|:
name|offsetAligned
operator|=
operator|(
name|offset
operator|%
sizeof|sizeof
argument_list|(
name|GLushort
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|GL_UNSIGNED_INT
case|:
name|offsetAligned
operator|=
operator|(
name|offset
operator|%
sizeof|sizeof
argument_list|(
name|GLuint
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
name|offsetAligned
operator|=
literal|false
expr_stmt|;
block|}
comment|// Case 2a: the buffer can be used directly
if|if
condition|(
name|offsetAligned
operator|&&
name|buffer
operator|->
name|supportsDirectBinding
argument_list|()
operator|&&
name|dstType
operator|==
name|srcType
operator|&&
operator|!
name|primitiveRestartWorkaround
condition|)
block|{
name|translated
operator|->
name|storage
operator|=
name|buffer
expr_stmt|;
name|translated
operator|->
name|indexBuffer
operator|=
literal|nullptr
expr_stmt|;
name|translated
operator|->
name|serial
operator|=
name|buffer
operator|->
name|getSerial
argument_list|()
expr_stmt|;
name|translated
operator|->
name|startIndex
operator|=
operator|(
name|offset
operator|>>
name|srcTypeInfo
operator|.
name|bytesShift
operator|)
expr_stmt|;
name|translated
operator|->
name|startOffset
operator|=
name|offset
expr_stmt|;
name|buffer
operator|->
name|promoteStaticUsage
argument_list|(
name|count
operator|<<
name|srcTypeInfo
operator|.
name|bytesShift
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
else|else
block|{
name|translated
operator|->
name|storage
operator|=
literal|nullptr
expr_stmt|;
block|}
comment|// Case 2b: use a static translated copy or fall back to streaming
name|StaticIndexBufferInterface
modifier|*
name|staticBuffer
init|=
name|buffer
operator|->
name|getStaticIndexBuffer
argument_list|()
decl_stmt|;
name|bool
name|staticBufferInitialized
init|=
name|staticBuffer
operator|&&
name|staticBuffer
operator|->
name|getBufferSize
argument_list|()
operator|!=
literal|0
decl_stmt|;
name|bool
name|staticBufferUsable
init|=
name|staticBuffer
operator|&&
name|offsetAligned
operator|&&
name|staticBuffer
operator|->
name|getIndexType
argument_list|()
operator|==
name|dstType
decl_stmt|;
if|if
condition|(
name|staticBufferInitialized
operator|&&
operator|!
name|staticBufferUsable
condition|)
block|{
name|buffer
operator|->
name|invalidateStaticData
argument_list|(
name|D3D_BUFFER_INVALIDATE_WHOLE_CACHE
argument_list|)
expr_stmt|;
name|staticBuffer
operator|=
literal|nullptr
expr_stmt|;
block|}
if|if
condition|(
name|staticBuffer
operator|==
literal|nullptr
operator|||
operator|!
name|offsetAligned
condition|)
block|{
specifier|const
name|uint8_t
modifier|*
name|bufferData
init|=
literal|nullptr
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|buffer
operator|->
name|getData
argument_list|(
operator|&
name|bufferData
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|ASSERT
argument_list|(
name|bufferData
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|error
operator|=
name|streamIndexData
argument_list|(
name|bufferData
operator|+
name|offset
argument_list|,
name|count
argument_list|,
name|srcType
argument_list|,
name|dstType
argument_list|,
name|primitiveRestartFixedIndexEnabled
argument_list|,
name|translated
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|staticBufferInitialized
condition|)
block|{
specifier|const
name|uint8_t
modifier|*
name|bufferData
init|=
literal|nullptr
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|buffer
operator|->
name|getData
argument_list|(
operator|&
name|bufferData
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|ASSERT
argument_list|(
name|bufferData
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|unsigned
name|int
name|convertCount
init|=
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|buffer
operator|->
name|getSize
argument_list|()
argument_list|)
operator|>>
name|srcTypeInfo
operator|.
name|bytesShift
decl_stmt|;
name|error
operator|=
name|StreamInIndexBuffer
argument_list|(
name|staticBuffer
argument_list|,
name|bufferData
argument_list|,
name|convertCount
argument_list|,
name|srcType
argument_list|,
name|dstType
argument_list|,
name|primitiveRestartFixedIndexEnabled
argument_list|,
literal|nullptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
name|ASSERT
argument_list|(
name|offsetAligned
operator|&&
name|staticBuffer
operator|->
name|getIndexType
argument_list|()
operator|==
name|dstType
argument_list|)
expr_stmt|;
name|translated
operator|->
name|indexBuffer
operator|=
name|staticBuffer
operator|->
name|getIndexBuffer
argument_list|()
expr_stmt|;
name|translated
operator|->
name|serial
operator|=
name|staticBuffer
operator|->
name|getSerial
argument_list|()
expr_stmt|;
name|translated
operator|->
name|startIndex
operator|=
operator|(
name|offset
operator|>>
name|srcTypeInfo
operator|.
name|bytesShift
operator|)
expr_stmt|;
name|translated
operator|->
name|startOffset
operator|=
operator|(
name|offset
operator|>>
name|srcTypeInfo
operator|.
name|bytesShift
operator|)
operator|<<
name|dstTypeInfo
operator|.
name|bytesShift
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|streamIndexData
name|gl
operator|::
name|Error
name|IndexDataManager
operator|::
name|streamIndexData
parameter_list|(
specifier|const
name|GLvoid
modifier|*
name|data
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|,
name|GLenum
name|srcType
parameter_list|,
name|GLenum
name|dstType
parameter_list|,
name|bool
name|usePrimitiveRestartFixedIndex
parameter_list|,
name|TranslatedIndexData
modifier|*
name|translated
parameter_list|)
block|{
specifier|const
name|gl
operator|::
name|Type
modifier|&
name|dstTypeInfo
init|=
name|gl
operator|::
name|GetTypeInfo
argument_list|(
name|dstType
argument_list|)
decl_stmt|;
name|IndexBufferInterface
modifier|*
name|indexBuffer
init|=
literal|nullptr
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|getStreamingIndexBuffer
argument_list|(
name|dstType
argument_list|,
operator|&
name|indexBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|ASSERT
argument_list|(
name|indexBuffer
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|unsigned
name|int
name|offset
decl_stmt|;
name|StreamInIndexBuffer
argument_list|(
name|indexBuffer
argument_list|,
name|data
argument_list|,
name|count
argument_list|,
name|srcType
argument_list|,
name|dstType
argument_list|,
name|usePrimitiveRestartFixedIndex
argument_list|,
operator|&
name|offset
argument_list|)
expr_stmt|;
name|translated
operator|->
name|indexBuffer
operator|=
name|indexBuffer
operator|->
name|getIndexBuffer
argument_list|()
expr_stmt|;
name|translated
operator|->
name|serial
operator|=
name|indexBuffer
operator|->
name|getSerial
argument_list|()
expr_stmt|;
name|translated
operator|->
name|startIndex
operator|=
operator|(
name|offset
operator|>>
name|dstTypeInfo
operator|.
name|bytesShift
operator|)
expr_stmt|;
name|translated
operator|->
name|startOffset
operator|=
name|offset
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getStreamingIndexBuffer
name|gl
operator|::
name|Error
name|IndexDataManager
operator|::
name|getStreamingIndexBuffer
parameter_list|(
name|GLenum
name|destinationIndexType
parameter_list|,
name|IndexBufferInterface
modifier|*
modifier|*
name|outBuffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|outBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|destinationIndexType
operator|==
name|GL_UNSIGNED_INT
condition|)
block|{
if|if
condition|(
operator|!
name|mStreamingBufferInt
condition|)
block|{
name|mStreamingBufferInt
operator|=
operator|new
name|StreamingIndexBufferInterface
argument_list|(
name|mFactory
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|mStreamingBufferInt
operator|->
name|reserveBufferSpace
argument_list|(
name|INITIAL_INDEX_BUFFER_SIZE
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SafeDelete
argument_list|(
name|mStreamingBufferInt
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
block|}
operator|*
name|outBuffer
operator|=
name|mStreamingBufferInt
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
else|else
block|{
name|ASSERT
argument_list|(
name|destinationIndexType
operator|==
name|GL_UNSIGNED_SHORT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mStreamingBufferShort
condition|)
block|{
name|mStreamingBufferShort
operator|=
operator|new
name|StreamingIndexBufferInterface
argument_list|(
name|mFactory
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|mStreamingBufferShort
operator|->
name|reserveBufferSpace
argument_list|(
name|INITIAL_INDEX_BUFFER_SIZE
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SafeDelete
argument_list|(
name|mStreamingBufferShort
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
block|}
operator|*
name|outBuffer
operator|=
name|mStreamingBufferShort
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
block|}
block|}
end_namespace
end_unit
