begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// IndexDataManager.cpp: Defines the IndexDataManager, a class that
end_comment
begin_comment
comment|// runs the Buffer translation process for index buffers.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/IndexDataManager.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/BufferD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/IndexBuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Buffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|ConvertIndices
specifier|static
name|void
name|ConvertIndices
parameter_list|(
name|GLenum
name|sourceType
parameter_list|,
name|GLenum
name|destinationType
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
if|if
condition|(
name|sourceType
operator|==
name|GL_UNSIGNED_BYTE
condition|)
block|{
name|ASSERT
argument_list|(
name|destinationType
operator|==
name|GL_UNSIGNED_SHORT
argument_list|)
expr_stmt|;
specifier|const
name|GLubyte
modifier|*
name|in
init|=
cast|static_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|GLushort
modifier|*
name|out
init|=
cast|static_cast
argument_list|<
name|GLushort
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
decl_stmt|;
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
name|i
index|]
operator|=
name|in
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sourceType
operator|==
name|GL_UNSIGNED_INT
condition|)
block|{
name|ASSERT
argument_list|(
name|destinationType
operator|==
name|GL_UNSIGNED_INT
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|output
argument_list|,
name|input
argument_list|,
name|count
operator|*
sizeof|sizeof
argument_list|(
name|GLuint
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sourceType
operator|==
name|GL_UNSIGNED_SHORT
condition|)
block|{
if|if
condition|(
name|destinationType
operator|==
name|GL_UNSIGNED_SHORT
condition|)
block|{
name|memcpy
argument_list|(
name|output
argument_list|,
name|input
argument_list|,
name|count
operator|*
sizeof|sizeof
argument_list|(
name|GLushort
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|destinationType
operator|==
name|GL_UNSIGNED_INT
condition|)
block|{
specifier|const
name|GLushort
modifier|*
name|in
init|=
cast|static_cast
argument_list|<
specifier|const
name|GLushort
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|GLuint
modifier|*
name|out
init|=
cast|static_cast
argument_list|<
name|GLuint
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
decl_stmt|;
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
name|i
index|]
operator|=
name|in
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
else|else
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
DECL|function|IndexDataManager
name|IndexDataManager
operator|::
name|IndexDataManager
parameter_list|(
name|BufferFactoryD3D
modifier|*
name|factory
parameter_list|,
name|RendererClass
name|rendererClass
parameter_list|)
member_init_list|:
name|mFactory
argument_list|(
name|factory
argument_list|)
member_init_list|,
name|mRendererClass
argument_list|(
name|rendererClass
argument_list|)
member_init_list|,
name|mStreamingBufferShort
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mStreamingBufferInt
argument_list|(
literal|nullptr
argument_list|)
block|{ }
DECL|function|~IndexDataManager
name|IndexDataManager
operator|::
name|~
name|IndexDataManager
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mStreamingBufferShort
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mStreamingBufferInt
argument_list|)
expr_stmt|;
block|}
DECL|function|prepareIndexData
name|gl
operator|::
name|Error
name|IndexDataManager
operator|::
name|prepareIndexData
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|,
name|TranslatedIndexData
modifier|*
name|translated
parameter_list|)
block|{
specifier|const
name|gl
operator|::
name|Type
modifier|&
name|typeInfo
init|=
name|gl
operator|::
name|GetTypeInfo
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|GLenum
name|destinationIndexType
init|=
operator|(
name|type
operator|==
name|GL_UNSIGNED_INT
operator|)
condition|?
name|GL_UNSIGNED_INT
else|:
name|GL_UNSIGNED_SHORT
decl_stmt|;
name|unsigned
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|bool
name|alignedOffset
init|=
literal|false
decl_stmt|;
name|BufferD3D
modifier|*
name|storage
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
name|NULL
condition|)
block|{
name|offset
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
name|uintptr_t
argument_list|>
argument_list|(
name|indices
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|=
name|GetImplAs
argument_list|<
name|BufferD3D
argument_list|>
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
comment|// We'll trust that the compiler will optimize the % below:
comment|// the operands are unsigned and the divisor is a constant.
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
name|alignedOffset
operator|=
operator|(
name|offset
operator|%
sizeof|sizeof
argument_list|(
name|GLubyte
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|GL_UNSIGNED_SHORT
case|:
name|alignedOffset
operator|=
operator|(
name|offset
operator|%
sizeof|sizeof
argument_list|(
name|GLushort
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|GL_UNSIGNED_INT
case|:
name|alignedOffset
operator|=
operator|(
name|offset
operator|%
sizeof|sizeof
argument_list|(
name|GLuint
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
name|alignedOffset
operator|=
literal|false
expr_stmt|;
block|}
name|ASSERT
argument_list|(
name|typeInfo
operator|.
name|bytes
operator|*
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|count
argument_list|)
operator|+
name|offset
operator|<=
name|storage
operator|->
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|uint8_t
modifier|*
name|bufferData
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|storage
operator|->
name|getData
argument_list|(
operator|&
name|bufferData
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|indices
operator|=
name|bufferData
operator|+
name|offset
expr_stmt|;
block|}
name|StaticIndexBufferInterface
modifier|*
name|staticBuffer
init|=
name|storage
condition|?
name|storage
operator|->
name|getStaticIndexBuffer
argument_list|()
else|:
name|NULL
decl_stmt|;
name|IndexBufferInterface
modifier|*
name|indexBuffer
init|=
name|NULL
decl_stmt|;
name|bool
name|directStorage
init|=
name|alignedOffset
operator|&&
name|storage
operator|&&
name|storage
operator|->
name|supportsDirectBinding
argument_list|()
operator|&&
name|destinationIndexType
operator|==
name|type
decl_stmt|;
name|unsigned
name|int
name|streamOffset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|directStorage
condition|)
block|{
name|streamOffset
operator|=
name|offset
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|staticBuffer
operator|&&
name|staticBuffer
operator|->
name|getBufferSize
argument_list|()
operator|!=
literal|0
operator|&&
name|staticBuffer
operator|->
name|getIndexType
argument_list|()
operator|==
name|type
operator|&&
name|alignedOffset
condition|)
block|{
name|indexBuffer
operator|=
name|staticBuffer
expr_stmt|;
comment|// Using bit-shift here is faster than using division.
name|streamOffset
operator|=
operator|(
name|offset
operator|>>
name|typeInfo
operator|.
name|bytesShift
operator|)
operator|<<
name|gl
operator|::
name|GetTypeInfo
argument_list|(
name|destinationIndexType
argument_list|)
operator|.
name|bytesShift
expr_stmt|;
block|}
comment|// Avoid D3D11's primitive restart index value
comment|// see http://msdn.microsoft.com/en-us/library/windows/desktop/bb205124(v=vs.85).aspx
if|if
condition|(
name|translated
operator|->
name|indexRange
operator|.
name|end
operator|==
literal|0xFFFF
operator|&&
name|type
operator|==
name|GL_UNSIGNED_SHORT
operator|&&
name|mRendererClass
operator|==
name|RENDERER_D3D11
condition|)
block|{
name|destinationIndexType
operator|=
name|GL_UNSIGNED_INT
expr_stmt|;
name|directStorage
operator|=
literal|false
expr_stmt|;
name|indexBuffer
operator|=
name|NULL
expr_stmt|;
block|}
specifier|const
name|gl
operator|::
name|Type
modifier|&
name|destTypeInfo
init|=
name|gl
operator|::
name|GetTypeInfo
argument_list|(
name|destinationIndexType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|directStorage
operator|&&
operator|!
name|indexBuffer
condition|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|getStreamingIndexBuffer
argument_list|(
name|destinationIndexType
argument_list|,
operator|&
name|indexBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|unsigned
name|int
name|convertCount
init|=
name|count
decl_stmt|;
if|if
condition|(
name|staticBuffer
condition|)
block|{
if|if
condition|(
name|staticBuffer
operator|->
name|getBufferSize
argument_list|()
operator|==
literal|0
operator|&&
name|alignedOffset
condition|)
block|{
name|indexBuffer
operator|=
name|staticBuffer
expr_stmt|;
comment|// Using bit-shift here is faster than using division.
name|convertCount
operator|=
name|storage
operator|->
name|getSize
argument_list|()
operator|>>
name|typeInfo
operator|.
name|bytesShift
expr_stmt|;
block|}
else|else
block|{
name|storage
operator|->
name|invalidateStaticData
argument_list|()
expr_stmt|;
name|staticBuffer
operator|=
name|NULL
expr_stmt|;
block|}
block|}
name|ASSERT
argument_list|(
name|indexBuffer
argument_list|)
expr_stmt|;
comment|// Using bit-shift here is faster than using division.
if|if
condition|(
name|convertCount
operator|>
operator|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|unsigned
name|int
argument_list|>
operator|::
name|max
argument_list|()
operator|>>
name|destTypeInfo
operator|.
name|bytesShift
operator|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Reserving %u indices of %u bytes each exceeds the maximum buffer size."
argument_list|,
name|convertCount
argument_list|,
name|destTypeInfo
operator|.
name|bytes
argument_list|)
return|;
block|}
name|unsigned
name|int
name|bufferSizeRequired
init|=
name|convertCount
operator|<<
name|destTypeInfo
operator|.
name|bytesShift
decl_stmt|;
name|error
operator|=
name|indexBuffer
operator|->
name|reserveBufferSpace
argument_list|(
name|bufferSizeRequired
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|void
modifier|*
name|output
init|=
name|NULL
decl_stmt|;
name|error
operator|=
name|indexBuffer
operator|->
name|mapBuffer
argument_list|(
name|bufferSizeRequired
argument_list|,
operator|&
name|output
argument_list|,
operator|&
name|streamOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
specifier|const
name|uint8_t
modifier|*
name|dataPointer
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|indices
argument_list|)
decl_stmt|;
if|if
condition|(
name|staticBuffer
condition|)
block|{
name|error
operator|=
name|storage
operator|->
name|getData
argument_list|(
operator|&
name|dataPointer
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
name|ConvertIndices
argument_list|(
name|type
argument_list|,
name|destinationIndexType
argument_list|,
name|dataPointer
argument_list|,
name|convertCount
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|error
operator|=
name|indexBuffer
operator|->
name|unmapBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
if|if
condition|(
name|staticBuffer
condition|)
block|{
comment|// Using bit-shift here is faster than using division.
name|streamOffset
operator|=
operator|(
name|offset
operator|>>
name|typeInfo
operator|.
name|bytesShift
operator|)
operator|<<
name|destTypeInfo
operator|.
name|bytesShift
expr_stmt|;
block|}
block|}
name|translated
operator|->
name|storage
operator|=
name|directStorage
condition|?
name|storage
else|:
name|NULL
expr_stmt|;
name|translated
operator|->
name|indexBuffer
operator|=
name|indexBuffer
condition|?
name|indexBuffer
operator|->
name|getIndexBuffer
argument_list|()
else|:
name|NULL
expr_stmt|;
name|translated
operator|->
name|serial
operator|=
name|directStorage
condition|?
name|storage
operator|->
name|getSerial
argument_list|()
else|:
name|indexBuffer
operator|->
name|getSerial
argument_list|()
expr_stmt|;
comment|// Using bit-shift here is faster than using division.
name|translated
operator|->
name|startIndex
operator|=
operator|(
name|streamOffset
operator|>>
name|destTypeInfo
operator|.
name|bytesShift
operator|)
expr_stmt|;
name|translated
operator|->
name|startOffset
operator|=
name|streamOffset
expr_stmt|;
name|translated
operator|->
name|indexType
operator|=
name|destinationIndexType
expr_stmt|;
if|if
condition|(
name|storage
condition|)
block|{
name|storage
operator|->
name|promoteStaticUsage
argument_list|(
name|count
operator|<<
name|typeInfo
operator|.
name|bytesShift
argument_list|)
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getStreamingIndexBuffer
name|gl
operator|::
name|Error
name|IndexDataManager
operator|::
name|getStreamingIndexBuffer
parameter_list|(
name|GLenum
name|destinationIndexType
parameter_list|,
name|IndexBufferInterface
modifier|*
modifier|*
name|outBuffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|outBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|destinationIndexType
operator|==
name|GL_UNSIGNED_INT
condition|)
block|{
if|if
condition|(
operator|!
name|mStreamingBufferInt
condition|)
block|{
name|mStreamingBufferInt
operator|=
operator|new
name|StreamingIndexBufferInterface
argument_list|(
name|mFactory
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|mStreamingBufferInt
operator|->
name|reserveBufferSpace
argument_list|(
name|INITIAL_INDEX_BUFFER_SIZE
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SafeDelete
argument_list|(
name|mStreamingBufferInt
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
block|}
operator|*
name|outBuffer
operator|=
name|mStreamingBufferInt
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
else|else
block|{
name|ASSERT
argument_list|(
name|destinationIndexType
operator|==
name|GL_UNSIGNED_SHORT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mStreamingBufferShort
condition|)
block|{
name|mStreamingBufferShort
operator|=
operator|new
name|StreamingIndexBufferInterface
argument_list|(
name|mFactory
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|mStreamingBufferShort
operator|->
name|reserveBufferSpace
argument_list|(
name|INITIAL_INDEX_BUFFER_SIZE
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SafeDelete
argument_list|(
name|mStreamingBufferShort
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
block|}
operator|*
name|outBuffer
operator|=
name|mStreamingBufferShort
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
block|}
block|}
end_namespace
end_unit
