begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// VaryingPacking:
end_comment
begin_comment
comment|//   Class which describes a mapping from varyings to registers in D3D
end_comment
begin_comment
comment|//   for linking between shader stages.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D_VARYINGPACKING_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D_VARYINGPACKING_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D_VARYINGPACKING_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/RendererD3D.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|ProgramD3DMetadata
decl_stmt|;
struct|struct
name|PackedVarying
block|{
name|PackedVarying
argument_list|(
argument|const sh::ShaderVariable&varyingIn
argument_list|,
argument|sh::InterpolationType interpolationIn
argument_list|)
block|:
name|varying
argument_list|(
operator|&
name|varyingIn
argument_list|)
operator|,
name|vertexOnly
argument_list|(
name|false
argument_list|)
operator|,
name|interpolation
argument_list|(
argument|interpolationIn
argument_list|)
block|{     }
name|PackedVarying
argument_list|(
argument|const sh::ShaderVariable&varyingIn
argument_list|,
argument|sh::InterpolationType interpolationIn
argument_list|,
argument|const std::string&parentStructNameIn
argument_list|)
operator|:
name|varying
argument_list|(
operator|&
name|varyingIn
argument_list|)
operator|,
name|vertexOnly
argument_list|(
name|false
argument_list|)
operator|,
name|interpolation
argument_list|(
name|interpolationIn
argument_list|)
operator|,
name|parentStructName
argument_list|(
argument|parentStructNameIn
argument_list|)
block|{     }
name|bool
name|isStructField
argument_list|()
specifier|const
block|{
return|return
operator|!
name|parentStructName
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|const
name|sh
operator|::
name|ShaderVariable
operator|*
name|varying
expr_stmt|;
comment|// Transform feedback varyings can be only referenced in the VS.
name|bool
name|vertexOnly
decl_stmt|;
comment|// Cached so we can store sh::ShaderVariable to point to varying fields.
name|sh
operator|::
name|InterpolationType
name|interpolation
expr_stmt|;
comment|// Struct name
name|std
operator|::
name|string
name|parentStructName
expr_stmt|;
block|}
struct|;
struct|struct
name|PackedVaryingRegister
name|final
block|{
name|PackedVaryingRegister
argument_list|()
operator|:
name|packedVarying
argument_list|(
name|nullptr
argument_list|)
operator|,
name|varyingArrayIndex
argument_list|(
literal|0
argument_list|)
operator|,
name|varyingRowIndex
argument_list|(
literal|0
argument_list|)
operator|,
name|registerRow
argument_list|(
literal|0
argument_list|)
operator|,
name|registerColumn
argument_list|(
literal|0
argument_list|)
block|{     }
name|PackedVaryingRegister
argument_list|(
specifier|const
name|PackedVaryingRegister
operator|&
argument_list|)
operator|=
expr|default
expr_stmt|;
name|PackedVaryingRegister
modifier|&
name|operator
init|=
operator|(
specifier|const
name|PackedVaryingRegister
operator|&
operator|)
operator|=
expr|default
decl_stmt|;
name|bool
name|operator
operator|<
operator|(
specifier|const
name|PackedVaryingRegister
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|sortOrder
argument_list|()
operator|<
name|other
operator|.
name|sortOrder
argument_list|()
return|;
block|}
name|unsigned
name|int
name|sortOrder
argument_list|()
specifier|const
block|{
comment|// TODO(jmadill): Handle interpolation types
return|return
name|registerRow
operator|*
literal|4
operator|+
name|registerColumn
return|;
block|}
name|bool
name|isStructField
argument_list|()
specifier|const
block|{
return|return
operator|!
name|structFieldName
operator|.
name|empty
argument_list|()
return|;
block|}
comment|// Index to the array of varyings.
specifier|const
name|PackedVarying
modifier|*
name|packedVarying
decl_stmt|;
comment|// The array element of the packed varying.
name|unsigned
name|int
name|varyingArrayIndex
decl_stmt|;
comment|// The row of the array element of the packed varying.
name|unsigned
name|int
name|varyingRowIndex
decl_stmt|;
comment|// The register row to which we've assigned this packed varying.
name|unsigned
name|int
name|registerRow
decl_stmt|;
comment|// The column of the register row into which we've packed this varying.
name|unsigned
name|int
name|registerColumn
decl_stmt|;
comment|// Assigned after packing
name|unsigned
name|int
name|semanticIndex
decl_stmt|;
comment|// Struct member this varying corresponds to.
name|std
operator|::
name|string
name|structFieldName
expr_stmt|;
block|}
struct|;
name|class
name|VaryingPacking
name|final
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|VaryingPacking
argument_list|(
argument|GLuint maxVaryingVectors
argument_list|)
block|;
name|bool
name|packVaryings
argument_list|(
name|gl
operator|::
name|InfoLog
operator|&
name|infoLog
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|PackedVarying
operator|>
operator|&
name|packedVaryings
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|transformFeedbackVaryings
argument_list|)
block|;      struct
name|Register
block|{
name|Register
argument_list|()
block|{
name|data
index|[
literal|0
index|]
operator|=
name|data
index|[
literal|1
index|]
operator|=
name|data
index|[
literal|2
index|]
operator|=
name|data
index|[
literal|3
index|]
operator|=
name|false
block|; }
name|bool
operator|&
name|operator
index|[]
operator|(
name|unsigned
name|int
name|index
operator|)
block|{
return|return
name|data
index|[
name|index
index|]
return|;
block|}
name|bool
name|operator
index|[]
operator|(
name|unsigned
name|int
name|index
operator|)
specifier|const
block|{
return|return
name|data
index|[
name|index
index|]
return|;
block|}
name|bool
name|data
index|[
literal|4
index|]
block|;     }
block|;
name|Register
operator|&
name|operator
index|[]
operator|(
name|unsigned
name|int
name|index
operator|)
block|{
return|return
name|mRegisterMap
index|[
name|index
index|]
return|;
block|}
specifier|const
name|Register
operator|&
name|operator
index|[]
operator|(
name|unsigned
name|int
name|index
operator|)
specifier|const
block|{
return|return
name|mRegisterMap
index|[
name|index
index|]
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|PackedVaryingRegister
operator|>
operator|&
name|getRegisterList
argument_list|()
specifier|const
block|{
return|return
name|mRegisterList
return|;
block|}
name|unsigned
name|int
name|getMaxSemanticIndex
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|mRegisterList
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
name|unsigned
name|int
name|getRegisterCount
argument_list|()
specifier|const
block|;
name|void
name|enableBuiltins
argument_list|(
argument|ShaderType shaderType
argument_list|,
argument|const ProgramD3DMetadata&programMetadata
argument_list|)
block|;      struct
name|BuiltinVarying
name|final
operator|:
name|angle
operator|::
name|NonCopyable
block|{
name|BuiltinVarying
argument_list|()
block|;
name|std
operator|::
name|string
name|str
argument_list|()
specifier|const
block|;
name|void
name|enableSystem
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|systemValueSemantic
argument_list|)
block|;
name|void
name|enable
argument_list|(
argument|const std::string&semanticVal
argument_list|,
argument|unsigned int indexVal
argument_list|)
block|;
name|bool
name|enabled
block|;
name|std
operator|::
name|string
name|semantic
block|;
name|unsigned
name|int
name|index
block|;
name|bool
name|systemValue
block|;     }
block|;      struct
name|BuiltinInfo
block|{
name|BuiltinVarying
name|dxPosition
block|;
name|BuiltinVarying
name|glPosition
block|;
name|BuiltinVarying
name|glFragCoord
block|;
name|BuiltinVarying
name|glPointCoord
block|;
name|BuiltinVarying
name|glPointSize
block|;     }
block|;
specifier|const
name|BuiltinInfo
operator|&
name|builtins
argument_list|(
argument|ShaderType shaderType
argument_list|)
specifier|const
block|{
return|return
name|mBuiltinInfo
index|[
name|shaderType
index|]
return|;
block|}
name|bool
name|usesPointSize
argument_list|()
specifier|const
block|{
return|return
name|mBuiltinInfo
index|[
name|SHADER_VERTEX
index|]
operator|.
name|glPointSize
operator|.
name|enabled
return|;
block|}
name|private
operator|:
name|bool
name|packVarying
argument_list|(
specifier|const
name|PackedVarying
operator|&
name|packedVarying
argument_list|)
block|;
name|bool
name|isFree
argument_list|(
argument|unsigned int registerRow
argument_list|,
argument|unsigned int registerColumn
argument_list|,
argument|unsigned int varyingRows
argument_list|,
argument|unsigned int varyingColumns
argument_list|)
specifier|const
block|;
name|void
name|insert
argument_list|(
argument|unsigned int registerRow
argument_list|,
argument|unsigned int registerColumn
argument_list|,
argument|const PackedVarying&packedVarying
argument_list|)
block|;
name|std
operator|::
name|vector
operator|<
name|Register
operator|>
name|mRegisterMap
block|;
name|std
operator|::
name|vector
operator|<
name|PackedVaryingRegister
operator|>
name|mRegisterList
block|;
name|std
operator|::
name|vector
operator|<
name|BuiltinInfo
operator|>
name|mBuiltinInfo
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace rx
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D_VARYINGPACKING_H_
end_comment
end_unit
