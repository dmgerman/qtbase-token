begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// ShaderD3D.cpp: Defines the rx::ShaderD3D class which implements rx::ShaderImpl.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/ShaderD3D.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Compiler.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Shader.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/features.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/RendererD3D.h"
end_include
begin_comment
comment|// Definitions local to the translation unit
end_comment
begin_namespace
namespace|namespace
block|{
DECL|function|GetShaderTypeString
specifier|const
name|char
modifier|*
name|GetShaderTypeString
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_VERTEX_SHADER
case|:
return|return
literal|"VERTEX"
return|;
case|case
name|GL_FRAGMENT_SHADER
case|:
return|return
literal|"FRAGMENT"
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
block|}
end_namespace
begin_comment
comment|// anonymous namespace
end_comment
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|ShaderD3D
name|ShaderD3D
operator|::
name|ShaderD3D
parameter_list|(
specifier|const
name|gl
operator|::
name|Shader
operator|::
name|Data
modifier|&
name|data
parameter_list|)
member_init_list|:
name|ShaderImpl
argument_list|(
name|data
argument_list|)
block|{
name|uncompile
argument_list|()
expr_stmt|;
block|}
DECL|function|~ShaderD3D
name|ShaderD3D
operator|::
name|~
name|ShaderD3D
parameter_list|()
block|{ }
DECL|function|getDebugInfo
name|std
operator|::
name|string
name|ShaderD3D
operator|::
name|getDebugInfo
parameter_list|()
specifier|const
block|{
return|return
name|mDebugInfo
operator|+
name|std
operator|::
name|string
argument_list|(
literal|"\n// "
argument_list|)
operator|+
name|GetShaderTypeString
argument_list|(
name|mData
operator|.
name|getShaderType
argument_list|()
argument_list|)
operator|+
literal|" SHADER END\n"
return|;
block|}
comment|// initialize/clean up previous state
DECL|function|uncompile
name|void
name|ShaderD3D
operator|::
name|uncompile
parameter_list|()
block|{
comment|// set by compileToHLSL
name|mCompilerOutputType
operator|=
name|SH_ESSL_OUTPUT
expr_stmt|;
name|mUsesMultipleRenderTargets
operator|=
literal|false
expr_stmt|;
name|mUsesFragColor
operator|=
literal|false
expr_stmt|;
name|mUsesFragData
operator|=
literal|false
expr_stmt|;
name|mUsesFragCoord
operator|=
literal|false
expr_stmt|;
name|mUsesFrontFacing
operator|=
literal|false
expr_stmt|;
name|mUsesPointSize
operator|=
literal|false
expr_stmt|;
name|mUsesPointCoord
operator|=
literal|false
expr_stmt|;
name|mUsesDepthRange
operator|=
literal|false
expr_stmt|;
name|mUsesFragDepth
operator|=
literal|false
expr_stmt|;
name|mUsesDiscardRewriting
operator|=
literal|false
expr_stmt|;
name|mUsesNestedBreak
operator|=
literal|false
expr_stmt|;
name|mUsesDeferredInit
operator|=
literal|false
expr_stmt|;
name|mRequiresIEEEStrictCompiling
operator|=
literal|false
expr_stmt|;
name|mDebugInfo
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|generateWorkarounds
name|void
name|ShaderD3D
operator|::
name|generateWorkarounds
parameter_list|(
name|D3DCompilerWorkarounds
modifier|*
name|workarounds
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|mUsesDiscardRewriting
condition|)
block|{
comment|// ANGLE issue 486:
comment|// Work-around a D3D9 compiler bug that presents itself when using conditional discard, by disabling optimization
name|workarounds
operator|->
name|skipOptimization
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mUsesNestedBreak
condition|)
block|{
comment|// ANGLE issue 603:
comment|// Work-around a D3D9 compiler bug that presents itself when using break in a nested loop, by maximizing optimization
comment|// We want to keep the use of ANGLE_D3D_WORKAROUND_MAX_OPTIMIZATION minimal to prevent hangs, so usesDiscard takes precedence
name|workarounds
operator|->
name|useMaxOptimization
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|mRequiresIEEEStrictCompiling
condition|)
block|{
comment|// IEEE Strictness for D3D compiler needs to be enabled for NaNs to work.
name|workarounds
operator|->
name|enableIEEEStrictness
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|function|getUniformRegister
name|unsigned
name|int
name|ShaderD3D
operator|::
name|getUniformRegister
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|uniformName
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|mUniformRegisterMap
operator|.
name|count
argument_list|(
name|uniformName
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
name|mUniformRegisterMap
operator|.
name|find
argument_list|(
name|uniformName
argument_list|)
operator|->
name|second
return|;
block|}
DECL|function|getInterfaceBlockRegister
name|unsigned
name|int
name|ShaderD3D
operator|::
name|getInterfaceBlockRegister
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|blockName
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|mInterfaceBlockRegisterMap
operator|.
name|count
argument_list|(
name|blockName
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
name|mInterfaceBlockRegisterMap
operator|.
name|find
argument_list|(
name|blockName
argument_list|)
operator|->
name|second
return|;
block|}
DECL|function|getCompilerOutputType
name|ShShaderOutput
name|ShaderD3D
operator|::
name|getCompilerOutputType
parameter_list|()
specifier|const
block|{
return|return
name|mCompilerOutputType
return|;
block|}
DECL|function|prepareSourceAndReturnOptions
name|int
name|ShaderD3D
operator|::
name|prepareSourceAndReturnOptions
parameter_list|(
name|std
operator|::
name|stringstream
modifier|*
name|shaderSourceStream
parameter_list|,
name|std
operator|::
name|string
modifier|*
name|sourcePath
parameter_list|)
block|{
name|uncompile
argument_list|()
expr_stmt|;
name|int
name|additionalOptions
init|=
literal|0
decl_stmt|;
specifier|const
name|std
operator|::
name|string
modifier|&
name|source
init|=
name|mData
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
if|if
condition|(
name|gl
operator|::
name|DebugAnnotationsActive
argument_list|()
condition|)
block|{
operator|*
name|sourcePath
operator|=
name|getTempPath
argument_list|()
expr_stmt|;
name|writeFile
argument_list|(
name|sourcePath
operator|->
name|c_str
argument_list|()
argument_list|,
name|source
operator|.
name|c_str
argument_list|()
argument_list|,
name|source
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|additionalOptions
operator||=
name|SH_LINE_DIRECTIVES
operator||
name|SH_SOURCE_PATH
expr_stmt|;
block|}
endif|#
directive|endif
operator|*
name|shaderSourceStream
operator|<<
name|source
expr_stmt|;
return|return
name|additionalOptions
return|;
block|}
DECL|function|postTranslateCompile
name|bool
name|ShaderD3D
operator|::
name|postTranslateCompile
parameter_list|(
name|gl
operator|::
name|Compiler
modifier|*
name|compiler
parameter_list|,
name|std
operator|::
name|string
modifier|*
name|infoLog
parameter_list|)
block|{
comment|// TODO(jmadill): We shouldn't need to cache this.
name|mCompilerOutputType
operator|=
name|compiler
operator|->
name|getShaderOutputType
argument_list|()
expr_stmt|;
specifier|const
name|std
operator|::
name|string
modifier|&
name|translatedSource
init|=
name|mData
operator|.
name|getTranslatedSource
argument_list|()
decl_stmt|;
name|mUsesMultipleRenderTargets
operator|=
name|translatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_MRT"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFragColor
operator|=
name|translatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_FRAG_COLOR"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFragData
operator|=
name|translatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_FRAG_DATA"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFragCoord
operator|=
name|translatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_FRAG_COORD"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFrontFacing
operator|=
name|translatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_FRONT_FACING"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesPointSize
operator|=
name|translatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_POINT_SIZE"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesPointCoord
operator|=
name|translatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_POINT_COORD"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesDepthRange
operator|=
name|translatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_DEPTH_RANGE"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFragDepth
operator|=
name|translatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_FRAG_DEPTH"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesDiscardRewriting
operator|=
name|translatedSource
operator|.
name|find
argument_list|(
literal|"ANGLE_USES_DISCARD_REWRITING"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesNestedBreak
operator|=
name|translatedSource
operator|.
name|find
argument_list|(
literal|"ANGLE_USES_NESTED_BREAK"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesDeferredInit
operator|=
name|translatedSource
operator|.
name|find
argument_list|(
literal|"ANGLE_USES_DEFERRED_INIT"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mRequiresIEEEStrictCompiling
operator|=
name|translatedSource
operator|.
name|find
argument_list|(
literal|"ANGLE_REQUIRES_IEEE_STRICT_COMPILING"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|ShHandle
name|compilerHandle
init|=
name|compiler
operator|->
name|getCompilerHandle
argument_list|(
name|mData
operator|.
name|getShaderType
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|const
name|sh
operator|::
name|Uniform
modifier|&
name|uniform
range|:
name|mData
operator|.
name|getUniforms
argument_list|()
control|)
block|{
if|if
condition|(
name|uniform
operator|.
name|staticUse
operator|&&
operator|!
name|uniform
operator|.
name|isBuiltIn
argument_list|()
condition|)
block|{
name|unsigned
name|int
name|index
init|=
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|bool
name|getUniformRegisterResult
init|=
name|ShGetUniformRegister
argument_list|(
name|compilerHandle
argument_list|,
name|uniform
operator|.
name|name
argument_list|,
operator|&
name|index
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|getUniformRegisterResult
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|getUniformRegisterResult
argument_list|)
expr_stmt|;
name|mUniformRegisterMap
index|[
name|uniform
operator|.
name|name
index|]
operator|=
name|index
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|const
name|sh
operator|::
name|InterfaceBlock
modifier|&
name|interfaceBlock
range|:
name|mData
operator|.
name|getInterfaceBlocks
argument_list|()
control|)
block|{
if|if
condition|(
name|interfaceBlock
operator|.
name|staticUse
condition|)
block|{
name|unsigned
name|int
name|index
init|=
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|bool
name|blockRegisterResult
init|=
name|ShGetInterfaceBlockRegister
argument_list|(
name|compilerHandle
argument_list|,
name|interfaceBlock
operator|.
name|name
argument_list|,
operator|&
name|index
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|blockRegisterResult
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|blockRegisterResult
argument_list|)
expr_stmt|;
name|mInterfaceBlockRegisterMap
index|[
name|interfaceBlock
operator|.
name|name
index|]
operator|=
name|index
expr_stmt|;
block|}
block|}
name|mDebugInfo
operator|+=
name|std
operator|::
name|string
argument_list|(
literal|"// "
argument_list|)
operator|+
name|GetShaderTypeString
argument_list|(
name|mData
operator|.
name|getShaderType
argument_list|()
argument_list|)
operator|+
literal|" SHADER BEGIN\n"
expr_stmt|;
name|mDebugInfo
operator|+=
literal|"\n// GLSL BEGIN\n\n"
operator|+
name|mData
operator|.
name|getSource
argument_list|()
operator|+
literal|"\n\n// GLSL END\n\n\n"
expr_stmt|;
name|mDebugInfo
operator|+=
literal|"// INITIAL HLSL BEGIN\n\n"
operator|+
name|translatedSource
operator|+
literal|"\n// INITIAL HLSL END\n\n\n"
expr_stmt|;
comment|// Successive steps will append more info
return|return
literal|true
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace rx
end_comment
end_unit
