begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// ShaderD3D.cpp: Defines the rx::ShaderD3D class which implements rx::ShaderImpl.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/Shader.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Compiler.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/RendererD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/ShaderD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/CompilerD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/features.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_comment
comment|// Definitions local to the translation unit
end_comment
begin_namespace
namespace|namespace
block|{
DECL|function|GetShaderTypeString
specifier|const
name|char
modifier|*
name|GetShaderTypeString
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_VERTEX_SHADER
case|:
return|return
literal|"VERTEX"
return|;
case|case
name|GL_FRAGMENT_SHADER
case|:
return|return
literal|"FRAGMENT"
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
block|}
end_namespace
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
template|template
parameter_list|<
name|typename
name|VarT
parameter_list|>
DECL|function|FilterInactiveVariables
name|void
name|FilterInactiveVariables
parameter_list|(
name|std
operator|::
name|vector
argument_list|<
name|VarT
argument_list|>
modifier|*
name|variableList
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|variableList
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|varIndex
init|=
literal|0
init|;
name|varIndex
operator|<
name|variableList
operator|->
name|size
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|*
name|variableList
operator|)
index|[
name|varIndex
index|]
operator|.
name|staticUse
condition|)
block|{
name|variableList
operator|->
name|erase
argument_list|(
name|variableList
operator|->
name|begin
argument_list|()
operator|+
name|varIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|varIndex
operator|++
expr_stmt|;
block|}
block|}
block|}
template|template
parameter_list|<
name|typename
name|VarT
parameter_list|>
DECL|function|GetShaderVariables
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|VarT
argument_list|>
modifier|*
name|GetShaderVariables
parameter_list|(
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|VarT
argument_list|>
modifier|*
name|variableList
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|variableList
argument_list|)
expr_stmt|;
return|return
name|variableList
return|;
block|}
DECL|function|ShaderD3D
name|ShaderD3D
operator|::
name|ShaderD3D
parameter_list|(
name|GLenum
name|type
parameter_list|)
member_init_list|:
name|mShaderType
argument_list|(
name|type
argument_list|)
member_init_list|,
name|mShaderVersion
argument_list|(
literal|100
argument_list|)
block|{
name|uncompile
argument_list|()
expr_stmt|;
block|}
DECL|function|~ShaderD3D
name|ShaderD3D
operator|::
name|~
name|ShaderD3D
parameter_list|()
block|{ }
DECL|function|makeShaderD3D
name|ShaderD3D
modifier|*
name|ShaderD3D
operator|::
name|makeShaderD3D
parameter_list|(
name|ShaderImpl
modifier|*
name|impl
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|ShaderD3D
operator|*
argument_list|,
name|impl
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|ShaderD3D
operator|*
argument_list|>
argument_list|(
name|impl
argument_list|)
return|;
block|}
DECL|function|makeShaderD3D
specifier|const
name|ShaderD3D
modifier|*
name|ShaderD3D
operator|::
name|makeShaderD3D
parameter_list|(
specifier|const
name|ShaderImpl
modifier|*
name|impl
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
specifier|const
name|ShaderD3D
operator|*
argument_list|,
name|impl
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
specifier|const
name|ShaderD3D
operator|*
argument_list|>
argument_list|(
name|impl
argument_list|)
return|;
block|}
DECL|function|getDebugInfo
name|std
operator|::
name|string
name|ShaderD3D
operator|::
name|getDebugInfo
parameter_list|()
specifier|const
block|{
return|return
name|mDebugInfo
operator|+
name|std
operator|::
name|string
argument_list|(
literal|"\n// "
argument_list|)
operator|+
name|GetShaderTypeString
argument_list|(
name|mShaderType
argument_list|)
operator|+
literal|" SHADER END\n"
return|;
block|}
DECL|function|parseVaryings
name|void
name|ShaderD3D
operator|::
name|parseVaryings
parameter_list|(
name|ShHandle
name|compiler
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mTranslatedSource
operator|.
name|empty
argument_list|()
condition|)
block|{
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|Varying
argument_list|>
modifier|*
name|varyings
init|=
name|ShGetVaryings
argument_list|(
name|compiler
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|varyings
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|varyingIndex
init|=
literal|0
init|;
name|varyingIndex
operator|<
name|varyings
operator|->
name|size
argument_list|()
condition|;
name|varyingIndex
operator|++
control|)
block|{
name|mVaryings
operator|.
name|push_back
argument_list|(
name|gl
operator|::
name|PackedVarying
argument_list|(
operator|(
operator|*
name|varyings
operator|)
index|[
name|varyingIndex
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mUsesMultipleRenderTargets
operator|=
name|mTranslatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_MRT"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFragColor
operator|=
name|mTranslatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_FRAG_COLOR"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFragData
operator|=
name|mTranslatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_FRAG_DATA"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFragCoord
operator|=
name|mTranslatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_FRAG_COORD"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFrontFacing
operator|=
name|mTranslatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_FRONT_FACING"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesPointSize
operator|=
name|mTranslatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_POINT_SIZE"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesPointCoord
operator|=
name|mTranslatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_POINT_COORD"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesDepthRange
operator|=
name|mTranslatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_DEPTH_RANGE"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFragDepth
operator|=
name|mTranslatedSource
operator|.
name|find
argument_list|(
literal|"GL_USES_FRAG_DEPTH"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesDiscardRewriting
operator|=
name|mTranslatedSource
operator|.
name|find
argument_list|(
literal|"ANGLE_USES_DISCARD_REWRITING"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesNestedBreak
operator|=
name|mTranslatedSource
operator|.
name|find
argument_list|(
literal|"ANGLE_USES_NESTED_BREAK"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesDeferredInit
operator|=
name|mTranslatedSource
operator|.
name|find
argument_list|(
literal|"ANGLE_USES_DEFERRED_INIT"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mRequiresIEEEStrictCompiling
operator|=
name|mTranslatedSource
operator|.
name|find
argument_list|(
literal|"ANGLE_REQUIRES_IEEE_STRICT_COMPILING"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
block|}
block|}
DECL|function|resetVaryingsRegisterAssignment
name|void
name|ShaderD3D
operator|::
name|resetVaryingsRegisterAssignment
parameter_list|()
block|{
for|for
control|(
name|size_t
name|varyingIndex
init|=
literal|0
init|;
name|varyingIndex
operator|<
name|mVaryings
operator|.
name|size
argument_list|()
condition|;
name|varyingIndex
operator|++
control|)
block|{
name|mVaryings
index|[
name|varyingIndex
index|]
operator|.
name|resetRegisterAssignment
argument_list|()
expr_stmt|;
block|}
block|}
comment|// initialize/clean up previous state
DECL|function|uncompile
name|void
name|ShaderD3D
operator|::
name|uncompile
parameter_list|()
block|{
comment|// set by compileToHLSL
name|mCompilerOutputType
operator|=
name|SH_ESSL_OUTPUT
expr_stmt|;
name|mTranslatedSource
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mInfoLog
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mUsesMultipleRenderTargets
operator|=
literal|false
expr_stmt|;
name|mUsesFragColor
operator|=
literal|false
expr_stmt|;
name|mUsesFragData
operator|=
literal|false
expr_stmt|;
name|mUsesFragCoord
operator|=
literal|false
expr_stmt|;
name|mUsesFrontFacing
operator|=
literal|false
expr_stmt|;
name|mUsesPointSize
operator|=
literal|false
expr_stmt|;
name|mUsesPointCoord
operator|=
literal|false
expr_stmt|;
name|mUsesDepthRange
operator|=
literal|false
expr_stmt|;
name|mUsesFragDepth
operator|=
literal|false
expr_stmt|;
name|mShaderVersion
operator|=
literal|100
expr_stmt|;
name|mUsesDiscardRewriting
operator|=
literal|false
expr_stmt|;
name|mUsesNestedBreak
operator|=
literal|false
expr_stmt|;
name|mUsesDeferredInit
operator|=
literal|false
expr_stmt|;
name|mRequiresIEEEStrictCompiling
operator|=
literal|false
expr_stmt|;
name|mVaryings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mUniforms
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mInterfaceBlocks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mActiveAttributes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mActiveOutputVariables
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mDebugInfo
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|compileToHLSL
name|void
name|ShaderD3D
operator|::
name|compileToHLSL
parameter_list|(
name|ShHandle
name|compiler
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|source
parameter_list|)
block|{
name|int
name|compileOptions
init|=
operator|(
name|SH_OBJECT_CODE
operator||
name|SH_VARIABLES
operator|)
decl_stmt|;
name|std
operator|::
name|string
name|sourcePath
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
if|if
condition|(
name|gl
operator|::
name|DebugAnnotationsActive
argument_list|()
condition|)
block|{
name|sourcePath
operator|=
name|getTempPath
argument_list|()
expr_stmt|;
name|writeFile
argument_list|(
name|sourcePath
operator|.
name|c_str
argument_list|()
argument_list|,
name|source
operator|.
name|c_str
argument_list|()
argument_list|,
name|source
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|compileOptions
operator||=
name|SH_LINE_DIRECTIVES
expr_stmt|;
block|}
endif|#
directive|endif
name|int
name|result
decl_stmt|;
if|if
condition|(
name|sourcePath
operator|.
name|empty
argument_list|()
condition|)
block|{
specifier|const
name|char
modifier|*
name|sourceStrings
index|[]
init|=
block|{
name|source
operator|.
name|c_str
argument_list|()
block|,         }
decl_stmt|;
name|result
operator|=
name|ShCompile
argument_list|(
name|compiler
argument_list|,
name|sourceStrings
argument_list|,
name|ArraySize
argument_list|(
name|sourceStrings
argument_list|)
argument_list|,
name|compileOptions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|char
modifier|*
name|sourceStrings
index|[]
init|=
block|{
name|sourcePath
operator|.
name|c_str
argument_list|()
block|,
name|source
operator|.
name|c_str
argument_list|()
block|,         }
decl_stmt|;
name|result
operator|=
name|ShCompile
argument_list|(
name|compiler
argument_list|,
name|sourceStrings
argument_list|,
name|ArraySize
argument_list|(
name|sourceStrings
argument_list|)
argument_list|,
name|compileOptions
operator||
name|SH_SOURCE_PATH
argument_list|)
expr_stmt|;
block|}
name|mShaderVersion
operator|=
name|ShGetShaderVersion
argument_list|(
name|compiler
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|mTranslatedSource
operator|=
name|ShGetObjectCode
argument_list|(
name|compiler
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|_DEBUG
comment|// Prefix hlsl shader with commented out glsl shader
comment|// Useful in diagnostics tools like pix which capture the hlsl shaders
name|std
operator|::
name|ostringstream
name|hlslStream
decl_stmt|;
name|hlslStream
operator|<<
literal|"// GLSL\n"
expr_stmt|;
name|hlslStream
operator|<<
literal|"//\n"
expr_stmt|;
name|size_t
name|curPos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|curPos
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
condition|)
block|{
name|size_t
name|nextLine
init|=
name|source
operator|.
name|find
argument_list|(
literal|"\n"
argument_list|,
name|curPos
argument_list|)
decl_stmt|;
name|size_t
name|len
init|=
operator|(
name|nextLine
operator|==
name|std
operator|::
name|string
operator|::
name|npos
operator|)
condition|?
name|std
operator|::
name|string
operator|::
name|npos
else|:
operator|(
name|nextLine
operator|-
name|curPos
operator|+
literal|1
operator|)
decl_stmt|;
name|hlslStream
operator|<<
literal|"// "
operator|<<
name|source
operator|.
name|substr
argument_list|(
name|curPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|curPos
operator|=
operator|(
name|nextLine
operator|==
name|std
operator|::
name|string
operator|::
name|npos
operator|)
condition|?
name|std
operator|::
name|string
operator|::
name|npos
else|:
operator|(
name|nextLine
operator|+
literal|1
operator|)
expr_stmt|;
block|}
name|hlslStream
operator|<<
literal|"\n\n"
expr_stmt|;
name|hlslStream
operator|<<
name|mTranslatedSource
expr_stmt|;
name|mTranslatedSource
operator|=
name|hlslStream
operator|.
name|str
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|mUniforms
operator|=
operator|*
name|GetShaderVariables
argument_list|(
name|ShGetUniforms
argument_list|(
name|compiler
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|uniformIndex
init|=
literal|0
init|;
name|uniformIndex
operator|<
name|mUniforms
operator|.
name|size
argument_list|()
condition|;
name|uniformIndex
operator|++
control|)
block|{
specifier|const
name|sh
operator|::
name|Uniform
modifier|&
name|uniform
init|=
name|mUniforms
index|[
name|uniformIndex
index|]
decl_stmt|;
if|if
condition|(
name|uniform
operator|.
name|staticUse
condition|)
block|{
name|unsigned
name|int
name|index
init|=
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|bool
name|getUniformRegisterResult
init|=
name|ShGetUniformRegister
argument_list|(
name|compiler
argument_list|,
name|uniform
operator|.
name|name
argument_list|,
operator|&
name|index
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|getUniformRegisterResult
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|getUniformRegisterResult
argument_list|)
expr_stmt|;
name|mUniformRegisterMap
index|[
name|uniform
operator|.
name|name
index|]
operator|=
name|index
expr_stmt|;
block|}
block|}
name|mInterfaceBlocks
operator|=
operator|*
name|GetShaderVariables
argument_list|(
name|ShGetInterfaceBlocks
argument_list|(
name|compiler
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|blockIndex
init|=
literal|0
init|;
name|blockIndex
operator|<
name|mInterfaceBlocks
operator|.
name|size
argument_list|()
condition|;
name|blockIndex
operator|++
control|)
block|{
specifier|const
name|sh
operator|::
name|InterfaceBlock
modifier|&
name|interfaceBlock
init|=
name|mInterfaceBlocks
index|[
name|blockIndex
index|]
decl_stmt|;
if|if
condition|(
name|interfaceBlock
operator|.
name|staticUse
condition|)
block|{
name|unsigned
name|int
name|index
init|=
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|bool
name|blockRegisterResult
init|=
name|ShGetInterfaceBlockRegister
argument_list|(
name|compiler
argument_list|,
name|interfaceBlock
operator|.
name|name
argument_list|,
operator|&
name|index
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|blockRegisterResult
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|blockRegisterResult
argument_list|)
expr_stmt|;
name|mInterfaceBlockRegisterMap
index|[
name|interfaceBlock
operator|.
name|name
index|]
operator|=
name|index
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|mInfoLog
operator|=
name|ShGetInfoLog
argument_list|(
name|compiler
argument_list|)
expr_stmt|;
name|TRACE
argument_list|(
literal|"\n%s"
argument_list|,
name|mInfoLog
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|generateWorkarounds
name|void
name|ShaderD3D
operator|::
name|generateWorkarounds
parameter_list|(
name|D3DCompilerWorkarounds
modifier|*
name|workarounds
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|mUsesDiscardRewriting
condition|)
block|{
comment|// ANGLE issue 486:
comment|// Work-around a D3D9 compiler bug that presents itself when using conditional discard, by disabling optimization
name|workarounds
operator|->
name|skipOptimization
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mUsesNestedBreak
condition|)
block|{
comment|// ANGLE issue 603:
comment|// Work-around a D3D9 compiler bug that presents itself when using break in a nested loop, by maximizing optimization
comment|// We want to keep the use of ANGLE_D3D_WORKAROUND_MAX_OPTIMIZATION minimal to prevent hangs, so usesDiscard takes precedence
name|workarounds
operator|->
name|useMaxOptimization
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|mRequiresIEEEStrictCompiling
condition|)
block|{
comment|// IEEE Strictness for D3D compiler needs to be enabled for NaNs to work.
name|workarounds
operator|->
name|enableIEEEStrictness
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// true if varying x has a higher priority in packing than y
DECL|function|compareVarying
name|bool
name|ShaderD3D
operator|::
name|compareVarying
parameter_list|(
specifier|const
name|gl
operator|::
name|PackedVarying
modifier|&
name|x
parameter_list|,
specifier|const
name|gl
operator|::
name|PackedVarying
modifier|&
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|type
operator|==
name|y
operator|.
name|type
condition|)
block|{
return|return
name|x
operator|.
name|arraySize
operator|>
name|y
operator|.
name|arraySize
return|;
block|}
comment|// Special case for handling structs: we sort these to the end of the list
if|if
condition|(
name|x
operator|.
name|type
operator|==
name|GL_STRUCT_ANGLEX
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|y
operator|.
name|type
operator|==
name|GL_STRUCT_ANGLEX
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|gl
operator|::
name|VariableSortOrder
argument_list|(
name|x
operator|.
name|type
argument_list|)
operator|<
name|gl
operator|::
name|VariableSortOrder
argument_list|(
name|y
operator|.
name|type
argument_list|)
return|;
block|}
DECL|function|getUniformRegister
name|unsigned
name|int
name|ShaderD3D
operator|::
name|getUniformRegister
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|uniformName
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|mUniformRegisterMap
operator|.
name|count
argument_list|(
name|uniformName
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
name|mUniformRegisterMap
operator|.
name|find
argument_list|(
name|uniformName
argument_list|)
operator|->
name|second
return|;
block|}
DECL|function|getInterfaceBlockRegister
name|unsigned
name|int
name|ShaderD3D
operator|::
name|getInterfaceBlockRegister
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|blockName
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|mInterfaceBlockRegisterMap
operator|.
name|count
argument_list|(
name|blockName
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
name|mInterfaceBlockRegisterMap
operator|.
name|find
argument_list|(
name|blockName
argument_list|)
operator|->
name|second
return|;
block|}
DECL|function|getShaderType
name|GLenum
name|ShaderD3D
operator|::
name|getShaderType
parameter_list|()
specifier|const
block|{
return|return
name|mShaderType
return|;
block|}
DECL|function|getCompilerOutputType
name|ShShaderOutput
name|ShaderD3D
operator|::
name|getCompilerOutputType
parameter_list|()
specifier|const
block|{
return|return
name|mCompilerOutputType
return|;
block|}
DECL|function|compile
name|bool
name|ShaderD3D
operator|::
name|compile
parameter_list|(
name|gl
operator|::
name|Compiler
modifier|*
name|compiler
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|source
parameter_list|)
block|{
name|uncompile
argument_list|()
expr_stmt|;
name|CompilerD3D
modifier|*
name|compilerD3D
init|=
name|CompilerD3D
operator|::
name|makeCompilerD3D
argument_list|(
name|compiler
operator|->
name|getImplementation
argument_list|()
argument_list|)
decl_stmt|;
name|ShHandle
name|compilerHandle
init|=
name|compilerD3D
operator|->
name|getCompilerHandle
argument_list|(
name|mShaderType
argument_list|)
decl_stmt|;
name|mCompilerOutputType
operator|=
name|ShGetShaderOutputType
argument_list|(
name|compilerHandle
argument_list|)
expr_stmt|;
name|compileToHLSL
argument_list|(
name|compilerHandle
argument_list|,
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|mShaderType
operator|==
name|GL_VERTEX_SHADER
condition|)
block|{
name|parseAttributes
argument_list|(
name|compilerHandle
argument_list|)
expr_stmt|;
block|}
name|parseVaryings
argument_list|(
name|compilerHandle
argument_list|)
expr_stmt|;
if|if
condition|(
name|mShaderType
operator|==
name|GL_FRAGMENT_SHADER
condition|)
block|{
name|std
operator|::
name|sort
argument_list|(
name|mVaryings
operator|.
name|begin
argument_list|()
argument_list|,
name|mVaryings
operator|.
name|end
argument_list|()
argument_list|,
name|compareVarying
argument_list|)
expr_stmt|;
specifier|const
name|std
operator|::
name|string
modifier|&
name|hlsl
init|=
name|getTranslatedSource
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hlsl
operator|.
name|empty
argument_list|()
condition|)
block|{
name|mActiveOutputVariables
operator|=
operator|*
name|GetShaderVariables
argument_list|(
name|ShGetOutputVariables
argument_list|(
name|compilerHandle
argument_list|)
argument_list|)
expr_stmt|;
name|FilterInactiveVariables
argument_list|(
operator|&
name|mActiveOutputVariables
argument_list|)
expr_stmt|;
block|}
block|}
if|#
directive|if
name|ANGLE_SHADER_DEBUG_INFO
operator|==
name|ANGLE_ENABLED
name|mDebugInfo
operator|+=
name|std
operator|::
name|string
argument_list|(
literal|"// "
argument_list|)
operator|+
name|GetShaderTypeString
argument_list|(
name|mShaderType
argument_list|)
operator|+
literal|" SHADER BEGIN\n"
expr_stmt|;
name|mDebugInfo
operator|+=
literal|"\n// GLSL BEGIN\n\n"
operator|+
name|source
operator|+
literal|"\n\n// GLSL END\n\n\n"
expr_stmt|;
name|mDebugInfo
operator|+=
literal|"// INITIAL HLSL BEGIN\n\n"
operator|+
name|getTranslatedSource
argument_list|()
operator|+
literal|"\n// INITIAL HLSL END\n\n\n"
expr_stmt|;
comment|// Successive steps will append more info
else|#
directive|else
name|mDebugInfo
operator|+=
name|getTranslatedSource
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
operator|!
name|getTranslatedSource
argument_list|()
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|function|parseAttributes
name|void
name|ShaderD3D
operator|::
name|parseAttributes
parameter_list|(
name|ShHandle
name|compiler
parameter_list|)
block|{
specifier|const
name|std
operator|::
name|string
modifier|&
name|hlsl
init|=
name|getTranslatedSource
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hlsl
operator|.
name|empty
argument_list|()
condition|)
block|{
name|mActiveAttributes
operator|=
operator|*
name|GetShaderVariables
argument_list|(
name|ShGetAttributes
argument_list|(
name|compiler
argument_list|)
argument_list|)
expr_stmt|;
name|FilterInactiveVariables
argument_list|(
operator|&
name|mActiveAttributes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_namespace
end_unit
