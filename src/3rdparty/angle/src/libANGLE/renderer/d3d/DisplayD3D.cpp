begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// DisplayD3D.cpp: D3D implementation of egl::Display
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/DisplayD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Context.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Config.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Display.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Surface.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/histogram_macros.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/EGLImageD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/RendererD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/SurfaceD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/SwapChainD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/DeviceD3D.h"
end_include
begin_include
include|#
directive|include
file|<EGL/eglext.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
end_if
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d9/Renderer9.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ANGLE_ENABLE_D3D9
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
end_if
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ANGLE_ENABLE_D3D11
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_TEST_CONFIG
argument_list|)
end_if
begin_define
DECL|macro|ANGLE_DEFAULT_D3D11
define|#
directive|define
name|ANGLE_DEFAULT_D3D11
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_DEFAULT_D3D11
argument_list|)
end_if
begin_comment
comment|// Enables use of the Direct3D 11 API for a default display, when available
end_comment
begin_define
DECL|macro|ANGLE_DEFAULT_D3D11
define|#
directive|define
name|ANGLE_DEFAULT_D3D11
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|typedef|CreateRendererD3DFunction
typedef|typedef
name|RendererD3D
modifier|*
function_decl|(
modifier|*
name|CreateRendererD3DFunction
function_decl|)
parameter_list|(
name|egl
operator|::
name|Display
modifier|*
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|RendererType
parameter_list|>
DECL|function|CreateTypedRendererD3D
specifier|static
name|RendererD3D
modifier|*
name|CreateTypedRendererD3D
parameter_list|(
name|egl
operator|::
name|Display
modifier|*
name|display
parameter_list|)
block|{
return|return
operator|new
name|RendererType
argument_list|(
name|display
argument_list|)
return|;
block|}
DECL|function|CreateRendererD3D
name|egl
operator|::
name|Error
name|CreateRendererD3D
parameter_list|(
name|egl
operator|::
name|Display
modifier|*
name|display
parameter_list|,
name|RendererD3D
modifier|*
modifier|*
name|outRenderer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|outRenderer
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|std
operator|::
name|vector
argument_list|<
name|CreateRendererD3DFunction
argument_list|>
name|rendererCreationFunctions
decl_stmt|;
if|if
condition|(
name|display
operator|->
name|getPlatform
argument_list|()
operator|==
name|EGL_PLATFORM_ANGLE_ANGLE
condition|)
block|{
specifier|const
specifier|auto
modifier|&
name|attribMap
init|=
name|display
operator|->
name|getAttributeMap
argument_list|()
decl_stmt|;
name|EGLNativeDisplayType
name|nativeDisplay
init|=
name|display
operator|->
name|getNativeDisplayId
argument_list|()
decl_stmt|;
name|EGLint
name|requestedDisplayType
init|=
name|attribMap
operator|.
name|get
argument_list|(
name|EGL_PLATFORM_ANGLE_TYPE_ANGLE
argument_list|,
name|EGL_PLATFORM_ANGLE_TYPE_DEFAULT_ANGLE
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
if|if
condition|(
name|nativeDisplay
operator|==
name|EGL_D3D11_ELSE_D3D9_DISPLAY_ANGLE
operator|||
name|nativeDisplay
operator|==
name|EGL_D3D11_ONLY_DISPLAY_ANGLE
operator|||
name|requestedDisplayType
operator|==
name|EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE
condition|)
block|{
name|rendererCreationFunctions
operator|.
name|push_back
argument_list|(
name|CreateTypedRendererD3D
argument_list|<
name|Renderer11
argument_list|>
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
if|if
condition|(
name|nativeDisplay
operator|==
name|EGL_D3D11_ELSE_D3D9_DISPLAY_ANGLE
operator|||
name|requestedDisplayType
operator|==
name|EGL_PLATFORM_ANGLE_TYPE_D3D9_ANGLE
condition|)
block|{
name|rendererCreationFunctions
operator|.
name|push_back
argument_list|(
name|CreateTypedRendererD3D
argument_list|<
name|Renderer9
argument_list|>
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|nativeDisplay
operator|!=
name|EGL_D3D11_ELSE_D3D9_DISPLAY_ANGLE
operator|&&
name|nativeDisplay
operator|!=
name|EGL_D3D11_ONLY_DISPLAY_ANGLE
operator|&&
name|requestedDisplayType
operator|==
name|EGL_PLATFORM_ANGLE_TYPE_DEFAULT_ANGLE
condition|)
block|{
comment|// The default display is requested, try the D3D9 and D3D11 renderers, order them using
comment|// the definition of ANGLE_DEFAULT_D3D11
if|#
directive|if
name|ANGLE_DEFAULT_D3D11
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
name|rendererCreationFunctions
operator|.
name|push_back
argument_list|(
name|CreateTypedRendererD3D
argument_list|<
name|Renderer11
argument_list|>
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
name|rendererCreationFunctions
operator|.
name|push_back
argument_list|(
name|CreateTypedRendererD3D
argument_list|<
name|Renderer9
argument_list|>
argument_list|)
expr_stmt|;
endif|#
directive|endif
else|#
directive|else
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
name|rendererCreationFunctions
operator|.
name|push_back
argument_list|(
name|CreateTypedRendererD3D
argument_list|<
name|Renderer9
argument_list|>
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
name|rendererCreationFunctions
operator|.
name|push_back
argument_list|(
name|CreateTypedRendererD3D
argument_list|<
name|Renderer11
argument_list|>
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|}
block|}
elseif|else
if|if
condition|(
name|display
operator|->
name|getPlatform
argument_list|()
operator|==
name|EGL_PLATFORM_DEVICE_EXT
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
if|if
condition|(
name|display
operator|->
name|getDevice
argument_list|()
operator|->
name|getType
argument_list|()
operator|==
name|EGL_D3D11_DEVICE_ANGLE
condition|)
block|{
name|rendererCreationFunctions
operator|.
name|push_back
argument_list|(
name|CreateTypedRendererD3D
argument_list|<
name|Renderer11
argument_list|>
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
else|else
block|{
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
name|egl
operator|::
name|Error
name|result
argument_list|(
name|EGL_NOT_INITIALIZED
argument_list|,
literal|"No available renderers."
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rendererCreationFunctions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RendererD3D
modifier|*
name|renderer
init|=
name|rendererCreationFunctions
index|[
name|i
index|]
operator|(
name|display
operator|)
decl_stmt|;
name|result
operator|=
name|renderer
operator|->
name|initialize
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
if|if
condition|(
name|renderer
operator|->
name|getRendererClass
argument_list|()
operator|==
name|RENDERER_D3D11
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|.
name|getID
argument_list|()
operator|>=
literal|0
operator|&&
name|result
operator|.
name|getID
argument_list|()
operator|<
name|NUM_D3D11_INIT_ERRORS
argument_list|)
expr_stmt|;
name|ANGLE_HISTOGRAM_ENUMERATION
argument_list|(
literal|"GPU.ANGLE.D3D11InitializeResult"
argument_list|,
name|result
operator|.
name|getID
argument_list|()
argument_list|,
name|NUM_D3D11_INIT_ERRORS
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
if|if
condition|(
name|renderer
operator|->
name|getRendererClass
argument_list|()
operator|==
name|RENDERER_D3D9
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|.
name|getID
argument_list|()
operator|>=
literal|0
operator|&&
name|result
operator|.
name|getID
argument_list|()
operator|<
name|NUM_D3D9_INIT_ERRORS
argument_list|)
expr_stmt|;
name|ANGLE_HISTOGRAM_ENUMERATION
argument_list|(
literal|"GPU.ANGLE.D3D9InitializeResult"
argument_list|,
name|result
operator|.
name|getID
argument_list|()
argument_list|,
name|NUM_D3D9_INIT_ERRORS
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|result
operator|.
name|isError
argument_list|()
condition|)
block|{
operator|*
name|outRenderer
operator|=
name|renderer
expr_stmt|;
break|break;
block|}
else|else
block|{
comment|// Failed to create the renderer, try the next
name|SafeDelete
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|function|DisplayD3D
name|DisplayD3D
operator|::
name|DisplayD3D
parameter_list|()
member_init_list|:
name|mRenderer
argument_list|(
literal|nullptr
argument_list|)
block|{ }
DECL|function|createWindowSurface
name|SurfaceImpl
modifier|*
name|DisplayD3D
operator|::
name|createWindowSurface
parameter_list|(
specifier|const
name|egl
operator|::
name|Config
modifier|*
name|configuration
parameter_list|,
name|EGLNativeWindowType
name|window
parameter_list|,
specifier|const
name|egl
operator|::
name|AttributeMap
modifier|&
name|attribs
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|mRenderer
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|EGLint
name|width
init|=
name|attribs
operator|.
name|get
argument_list|(
name|EGL_WIDTH
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|EGLint
name|height
init|=
name|attribs
operator|.
name|get
argument_list|(
name|EGL_HEIGHT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|EGLint
name|fixedSize
init|=
name|attribs
operator|.
name|get
argument_list|(
name|EGL_FIXED_SIZE_ANGLE
argument_list|,
name|EGL_FALSE
argument_list|)
decl_stmt|;
name|EGLint
name|orientation
init|=
name|attribs
operator|.
name|get
argument_list|(
name|EGL_SURFACE_ORIENTATION_ANGLE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|EGLint
name|directComposition
init|=
name|attribs
operator|.
name|get
argument_list|(
name|EGL_DIRECT_COMPOSITION_ANGLE
argument_list|,
name|EGL_FALSE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fixedSize
condition|)
block|{
name|width
operator|=
operator|-
literal|1
expr_stmt|;
name|height
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|SurfaceD3D
operator|::
name|createFromWindow
argument_list|(
name|mRenderer
argument_list|,
name|mDisplay
argument_list|,
name|configuration
argument_list|,
name|window
argument_list|,
name|fixedSize
argument_list|,
name|directComposition
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|orientation
argument_list|)
return|;
block|}
DECL|function|createPbufferSurface
name|SurfaceImpl
modifier|*
name|DisplayD3D
operator|::
name|createPbufferSurface
parameter_list|(
specifier|const
name|egl
operator|::
name|Config
modifier|*
name|configuration
parameter_list|,
specifier|const
name|egl
operator|::
name|AttributeMap
modifier|&
name|attribs
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|mRenderer
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|EGLint
name|width
init|=
name|attribs
operator|.
name|get
argument_list|(
name|EGL_WIDTH
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|EGLint
name|height
init|=
name|attribs
operator|.
name|get
argument_list|(
name|EGL_HEIGHT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|SurfaceD3D
operator|::
name|createOffscreen
argument_list|(
name|mRenderer
argument_list|,
name|mDisplay
argument_list|,
name|configuration
argument_list|,
literal|nullptr
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
DECL|function|createPbufferFromClientBuffer
name|SurfaceImpl
modifier|*
name|DisplayD3D
operator|::
name|createPbufferFromClientBuffer
parameter_list|(
specifier|const
name|egl
operator|::
name|Config
modifier|*
name|configuration
parameter_list|,
name|EGLClientBuffer
name|shareHandle
parameter_list|,
specifier|const
name|egl
operator|::
name|AttributeMap
modifier|&
name|attribs
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|mRenderer
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|EGLint
name|width
init|=
name|attribs
operator|.
name|get
argument_list|(
name|EGL_WIDTH
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|EGLint
name|height
init|=
name|attribs
operator|.
name|get
argument_list|(
name|EGL_HEIGHT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|SurfaceD3D
operator|::
name|createOffscreen
argument_list|(
name|mRenderer
argument_list|,
name|mDisplay
argument_list|,
name|configuration
argument_list|,
name|shareHandle
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
DECL|function|createPixmapSurface
name|SurfaceImpl
modifier|*
name|DisplayD3D
operator|::
name|createPixmapSurface
parameter_list|(
specifier|const
name|egl
operator|::
name|Config
modifier|*
name|configuration
parameter_list|,
name|NativePixmapType
name|nativePixmap
parameter_list|,
specifier|const
name|egl
operator|::
name|AttributeMap
modifier|&
name|attribs
parameter_list|)
block|{
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|nullptr
return|;
block|}
DECL|function|createImage
name|ImageImpl
modifier|*
name|DisplayD3D
operator|::
name|createImage
parameter_list|(
name|EGLenum
name|target
parameter_list|,
name|egl
operator|::
name|ImageSibling
modifier|*
name|buffer
parameter_list|,
specifier|const
name|egl
operator|::
name|AttributeMap
modifier|&
name|attribs
parameter_list|)
block|{
return|return
operator|new
name|EGLImageD3D
argument_list|(
name|mRenderer
argument_list|,
name|target
argument_list|,
name|buffer
argument_list|,
name|attribs
argument_list|)
return|;
block|}
DECL|function|getDevice
name|egl
operator|::
name|Error
name|DisplayD3D
operator|::
name|getDevice
parameter_list|(
name|DeviceImpl
modifier|*
modifier|*
name|device
parameter_list|)
block|{
return|return
name|mRenderer
operator|->
name|getEGLDevice
argument_list|(
name|device
argument_list|)
return|;
block|}
DECL|function|createContext
name|gl
operator|::
name|Context
modifier|*
name|DisplayD3D
operator|::
name|createContext
parameter_list|(
specifier|const
name|egl
operator|::
name|Config
modifier|*
name|config
parameter_list|,
specifier|const
name|gl
operator|::
name|Context
modifier|*
name|shareContext
parameter_list|,
specifier|const
name|egl
operator|::
name|AttributeMap
modifier|&
name|attribs
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|mRenderer
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
return|return
operator|new
name|gl
operator|::
name|Context
argument_list|(
name|config
argument_list|,
name|shareContext
argument_list|,
name|mRenderer
argument_list|,
name|attribs
argument_list|)
return|;
block|}
DECL|function|makeCurrent
name|egl
operator|::
name|Error
name|DisplayD3D
operator|::
name|makeCurrent
parameter_list|(
name|egl
operator|::
name|Surface
modifier|*
name|drawSurface
parameter_list|,
name|egl
operator|::
name|Surface
modifier|*
name|readSurface
parameter_list|,
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|)
block|{
return|return
name|egl
operator|::
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|initialize
name|egl
operator|::
name|Error
name|DisplayD3D
operator|::
name|initialize
parameter_list|(
name|egl
operator|::
name|Display
modifier|*
name|display
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|mRenderer
operator|==
literal|nullptr
operator|&&
name|display
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|mDisplay
operator|=
name|display
expr_stmt|;
name|egl
operator|::
name|Error
name|error
init|=
name|CreateRendererD3D
argument_list|(
name|display
argument_list|,
operator|&
name|mRenderer
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
return|return
name|egl
operator|::
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|terminate
name|void
name|DisplayD3D
operator|::
name|terminate
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mRenderer
argument_list|)
expr_stmt|;
block|}
DECL|function|generateConfigs
name|egl
operator|::
name|ConfigSet
name|DisplayD3D
operator|::
name|generateConfigs
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|mRenderer
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
return|return
name|mRenderer
operator|->
name|generateConfigs
argument_list|()
return|;
block|}
DECL|function|isDeviceLost
name|bool
name|DisplayD3D
operator|::
name|isDeviceLost
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|mRenderer
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
return|return
name|mRenderer
operator|->
name|isDeviceLost
argument_list|()
return|;
block|}
DECL|function|testDeviceLost
name|bool
name|DisplayD3D
operator|::
name|testDeviceLost
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|mRenderer
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
return|return
name|mRenderer
operator|->
name|testDeviceLost
argument_list|()
return|;
block|}
DECL|function|restoreLostDevice
name|egl
operator|::
name|Error
name|DisplayD3D
operator|::
name|restoreLostDevice
parameter_list|()
block|{
comment|// Release surface resources to make the Reset() succeed
for|for
control|(
name|auto
operator|&
name|surface
operator|:
name|mSurfaceSet
control|)
block|{
if|if
condition|(
name|surface
operator|->
name|getBoundTexture
argument_list|()
condition|)
block|{
name|surface
operator|->
name|releaseTexImage
argument_list|(
name|EGL_BACK_BUFFER
argument_list|)
expr_stmt|;
block|}
name|SurfaceD3D
modifier|*
name|surfaceD3D
init|=
name|GetImplAs
argument_list|<
name|SurfaceD3D
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|surfaceD3D
operator|->
name|releaseSwapChain
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mRenderer
operator|->
name|resetDevice
argument_list|()
condition|)
block|{
return|return
name|egl
operator|::
name|Error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|)
return|;
block|}
comment|// Restore any surfaces that may have been lost
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|surface
range|:
name|mSurfaceSet
control|)
block|{
name|SurfaceD3D
modifier|*
name|surfaceD3D
init|=
name|GetImplAs
argument_list|<
name|SurfaceD3D
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|egl
operator|::
name|Error
name|error
init|=
name|surfaceD3D
operator|->
name|resetSwapChain
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
return|return
name|egl
operator|::
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|isValidNativeWindow
name|bool
name|DisplayD3D
operator|::
name|isValidNativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
specifier|const
block|{
return|return
name|NativeWindow
operator|::
name|isValidNativeWindow
argument_list|(
name|window
argument_list|)
return|;
block|}
DECL|function|generateExtensions
name|void
name|DisplayD3D
operator|::
name|generateExtensions
parameter_list|(
name|egl
operator|::
name|DisplayExtensions
modifier|*
name|outExtensions
parameter_list|)
specifier|const
block|{
name|mRenderer
operator|->
name|generateDisplayExtensions
argument_list|(
name|outExtensions
argument_list|)
expr_stmt|;
block|}
DECL|function|getVendorString
name|std
operator|::
name|string
name|DisplayD3D
operator|::
name|getVendorString
parameter_list|()
specifier|const
block|{
name|std
operator|::
name|string
name|vendorString
init|=
literal|"Google Inc."
decl_stmt|;
if|if
condition|(
name|mRenderer
condition|)
block|{
name|vendorString
operator|+=
literal|" "
operator|+
name|mRenderer
operator|->
name|getVendorString
argument_list|()
expr_stmt|;
block|}
return|return
name|vendorString
return|;
block|}
DECL|function|generateCaps
name|void
name|DisplayD3D
operator|::
name|generateCaps
parameter_list|(
name|egl
operator|::
name|Caps
modifier|*
name|outCaps
parameter_list|)
specifier|const
block|{
comment|// Display must be initialized to generate caps
name|ASSERT
argument_list|(
name|mRenderer
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|outCaps
operator|->
name|textureNPOT
operator|=
name|mRenderer
operator|->
name|getRendererExtensions
argument_list|()
operator|.
name|textureNPOT
expr_stmt|;
block|}
DECL|function|waitClient
name|egl
operator|::
name|Error
name|DisplayD3D
operator|::
name|waitClient
parameter_list|()
specifier|const
block|{
comment|// Unimplemented as it is a noop on D3D
return|return
name|egl
operator|::
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|waitNative
name|egl
operator|::
name|Error
name|DisplayD3D
operator|::
name|waitNative
parameter_list|(
name|EGLint
name|engine
parameter_list|,
name|egl
operator|::
name|Surface
modifier|*
name|drawSurface
parameter_list|,
name|egl
operator|::
name|Surface
modifier|*
name|readSurface
parameter_list|)
specifier|const
block|{
comment|// Unimplemented as it is a noop on D3D
return|return
name|egl
operator|::
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
block|}
end_namespace
end_unit
