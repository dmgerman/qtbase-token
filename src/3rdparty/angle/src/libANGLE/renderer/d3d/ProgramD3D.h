begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// ProgramD3D.h: Defines the rx::ProgramD3D class which implements rx::ProgramImpl.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D_PROGRAMD3D_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D_PROGRAMD3D_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D_PROGRAMD3D_H_
end_define
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|"compiler/translator/blocklayoutHLSL.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Constants.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/ProgramImpl.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/DynamicHLSL.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/WorkaroundsD3D.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|RendererD3D
decl_stmt|;
name|class
name|UniformStorageD3D
decl_stmt|;
name|class
name|ShaderExecutableD3D
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_COMPILE_OPTIMIZATION_LEVEL
argument_list|)
comment|// WARNING: D3DCOMPILE_OPTIMIZATION_LEVEL3 may lead to a DX9 shader compiler hang.
comment|// It should only be used selectively to work around specific bugs.
DECL|macro|ANGLE_COMPILE_OPTIMIZATION_LEVEL
define|#
directive|define
name|ANGLE_COMPILE_OPTIMIZATION_LEVEL
value|D3DCOMPILE_OPTIMIZATION_LEVEL1
endif|#
directive|endif
comment|// Helper struct representing a single shader uniform
name|struct
name|D3DUniform
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|D3DUniform
argument_list|(
argument|GLenum typeIn
argument_list|,
argument|const std::string&nameIn
argument_list|,
argument|unsigned int arraySizeIn
argument_list|,
argument|bool defaultBlock
argument_list|)
block|;
operator|~
name|D3DUniform
argument_list|()
block|;
name|bool
name|isSampler
argument_list|()
specifier|const
block|;
name|unsigned
name|int
name|elementCount
argument_list|()
specifier|const
block|{
return|return
name|std
operator|::
name|max
argument_list|(
literal|1u
argument_list|,
name|arraySize
argument_list|)
return|;
block|}
name|bool
name|isReferencedByVertexShader
argument_list|()
specifier|const
block|;
name|bool
name|isReferencedByFragmentShader
argument_list|()
specifier|const
block|;
comment|// Duplicated from the GL layer
name|GLenum
name|type
block|;
name|std
operator|::
name|string
name|name
block|;
name|unsigned
name|int
name|arraySize
block|;
comment|// Pointer to a system copy of the data.
comment|// TODO(jmadill): remove this in favor of gl::LinkedUniform::data().
name|uint8_t
operator|*
name|data
block|;
comment|// Has the data been updated since the last sync?
name|bool
name|dirty
block|;
comment|// Register information.
name|unsigned
name|int
name|vsRegisterIndex
block|;
name|unsigned
name|int
name|psRegisterIndex
block|;
name|unsigned
name|int
name|registerCount
block|;
comment|// Register "elements" are used for uniform structs in ES3, to appropriately identify single
comment|// uniforms
comment|// inside aggregate types, which are packed according C-like structure rules.
name|unsigned
name|int
name|registerElement
block|; }
decl_stmt|;
struct|struct
name|D3DUniformBlock
block|{
name|D3DUniformBlock
argument_list|()
operator|:
name|vsRegisterIndex
argument_list|(
name|GL_INVALID_INDEX
argument_list|)
operator|,
name|psRegisterIndex
argument_list|(
argument|GL_INVALID_INDEX
argument_list|)
block|{}
name|bool
name|vertexStaticUse
argument_list|()
specifier|const
block|{
return|return
name|vsRegisterIndex
operator|!=
name|GL_INVALID_INDEX
return|;
block|}
name|bool
name|fragmentStaticUse
argument_list|()
specifier|const
block|{
return|return
name|psRegisterIndex
operator|!=
name|GL_INVALID_INDEX
return|;
block|}
name|unsigned
name|int
name|vsRegisterIndex
decl_stmt|;
name|unsigned
name|int
name|psRegisterIndex
decl_stmt|;
block|}
struct|;
struct|struct
name|D3DVarying
name|final
block|{
name|D3DVarying
argument_list|()
expr_stmt|;
name|D3DVarying
argument_list|(
argument|const std::string&semanticNameIn
argument_list|,
argument|unsigned int semanticIndexIn
argument_list|,
argument|unsigned int componentCountIn
argument_list|,
argument|unsigned int outputSlotIn
argument_list|)
empty_stmt|;
name|D3DVarying
argument_list|(
specifier|const
name|D3DVarying
operator|&
argument_list|)
operator|=
expr|default
expr_stmt|;
name|D3DVarying
modifier|&
name|operator
init|=
operator|(
specifier|const
name|D3DVarying
operator|&
operator|)
operator|=
expr|default
decl_stmt|;
name|std
operator|::
name|string
name|semanticName
expr_stmt|;
name|unsigned
name|int
name|semanticIndex
decl_stmt|;
name|unsigned
name|int
name|componentCount
decl_stmt|;
name|unsigned
name|int
name|outputSlot
decl_stmt|;
block|}
struct|;
name|class
name|ProgramD3DMetadata
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|ProgramD3DMetadata
argument_list|(
argument|int rendererMajorShaderModel
argument_list|,
argument|const std::string&shaderModelSuffix
argument_list|,
argument|bool usesInstancedPointSpriteEmulation
argument_list|,
argument|bool usesViewScale
argument_list|,
argument|const ShaderD3D *vertexShader
argument_list|,
argument|const ShaderD3D *fragmentShader
argument_list|)
block|;
name|int
name|getRendererMajorShaderModel
argument_list|()
specifier|const
block|;
name|bool
name|usesBroadcast
argument_list|(
argument|const gl::Data&data
argument_list|)
specifier|const
block|;
name|bool
name|usesFragDepth
argument_list|(
argument|const gl::Program::Data&programData
argument_list|)
specifier|const
block|;
name|bool
name|usesPointCoord
argument_list|()
specifier|const
block|;
name|bool
name|usesFragCoord
argument_list|()
specifier|const
block|;
name|bool
name|usesPointSize
argument_list|()
specifier|const
block|;
name|bool
name|usesInsertedPointCoordValue
argument_list|()
specifier|const
block|;
name|bool
name|usesViewScale
argument_list|()
specifier|const
block|;
name|bool
name|addsPointCoordToVertexShader
argument_list|()
specifier|const
block|;
name|bool
name|usesTransformFeedbackGLPosition
argument_list|()
specifier|const
block|;
name|bool
name|usesSystemValuePointSize
argument_list|()
specifier|const
block|;
name|bool
name|usesMultipleFragmentOuts
argument_list|()
specifier|const
block|;
name|GLint
name|getMajorShaderVersion
argument_list|()
specifier|const
block|;
specifier|const
name|ShaderD3D
operator|*
name|getFragmentShader
argument_list|()
specifier|const
block|;
name|private
operator|:
specifier|const
name|int
name|mRendererMajorShaderModel
block|;
specifier|const
name|std
operator|::
name|string
name|mShaderModelSuffix
block|;
specifier|const
name|bool
name|mUsesInstancedPointSpriteEmulation
block|;
specifier|const
name|bool
name|mUsesViewScale
block|;
specifier|const
name|ShaderD3D
operator|*
name|mVertexShader
block|;
specifier|const
name|ShaderD3D
operator|*
name|mFragmentShader
block|; }
decl_stmt|;
name|class
name|ProgramD3D
range|:
name|public
name|ProgramImpl
block|{
name|public
operator|:
typedef|typedef
name|int
name|SemanticIndexArray
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
typedef|;
name|ProgramD3D
argument_list|(
specifier|const
name|gl
operator|::
name|Program
operator|::
name|Data
operator|&
name|data
argument_list|,
name|RendererD3D
operator|*
name|renderer
argument_list|)
decl_stmt|;
name|virtual
operator|~
name|ProgramD3D
argument_list|()
expr_stmt|;
specifier|const
name|std
operator|::
name|vector
operator|<
name|PixelShaderOutputVariable
operator|>
operator|&
name|getPixelShaderKey
argument_list|()
block|{
return|return
name|mPixelShaderKey
return|;
block|}
name|GLint
name|getSamplerMapping
argument_list|(
name|gl
operator|::
name|SamplerType
name|type
argument_list|,
name|unsigned
name|int
name|samplerIndex
argument_list|,
specifier|const
name|gl
operator|::
name|Caps
operator|&
name|caps
argument_list|)
decl|const
decl_stmt|;
name|GLenum
name|getSamplerTextureType
argument_list|(
name|gl
operator|::
name|SamplerType
name|type
argument_list|,
name|unsigned
name|int
name|samplerIndex
argument_list|)
decl|const
decl_stmt|;
name|GLint
name|getUsedSamplerRange
argument_list|(
name|gl
operator|::
name|SamplerType
name|type
argument_list|)
decl|const
decl_stmt|;
name|void
name|updateSamplerMapping
parameter_list|()
function_decl|;
name|bool
name|usesPointSize
argument_list|()
specifier|const
block|{
return|return
name|mUsesPointSize
return|;
block|}
name|bool
name|usesPointSpriteEmulation
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|usesGeometryShader
argument_list|(
name|GLenum
name|drawMode
argument_list|)
decl|const
decl_stmt|;
name|bool
name|usesInstancedPointSpriteEmulation
argument_list|()
specifier|const
expr_stmt|;
name|LinkResult
name|load
argument_list|(
name|gl
operator|::
name|InfoLog
operator|&
name|infoLog
argument_list|,
name|gl
operator|::
name|BinaryInputStream
operator|*
name|stream
argument_list|)
name|override
decl_stmt|;
name|gl
operator|::
name|Error
name|save
argument_list|(
argument|gl::BinaryOutputStream *stream
argument_list|)
name|override
expr_stmt|;
name|void
name|setBinaryRetrievableHint
argument_list|(
name|bool
name|retrievable
argument_list|)
name|override
decl_stmt|;
name|gl
operator|::
name|Error
name|getPixelExecutableForFramebuffer
argument_list|(
specifier|const
name|gl
operator|::
name|Framebuffer
operator|*
name|fbo
argument_list|,
name|ShaderExecutableD3D
operator|*
operator|*
name|outExectuable
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Error
name|getPixelExecutableForOutputLayout
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|GLenum
operator|>
operator|&
name|outputLayout
argument_list|,
name|ShaderExecutableD3D
operator|*
operator|*
name|outExectuable
argument_list|,
name|gl
operator|::
name|InfoLog
operator|*
name|infoLog
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Error
name|getVertexExecutableForInputLayout
argument_list|(
specifier|const
name|gl
operator|::
name|InputLayout
operator|&
name|inputLayout
argument_list|,
name|ShaderExecutableD3D
operator|*
operator|*
name|outExectuable
argument_list|,
name|gl
operator|::
name|InfoLog
operator|*
name|infoLog
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Error
name|getGeometryExecutableForPrimitiveType
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLenum drawMode
argument_list|,
argument|ShaderExecutableD3D **outExecutable
argument_list|,
argument|gl::InfoLog *infoLog
argument_list|)
expr_stmt|;
name|LinkResult
name|link
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
name|data
argument_list|,
name|gl
operator|::
name|InfoLog
operator|&
name|infoLog
argument_list|)
name|override
decl_stmt|;
name|GLboolean
name|validate
argument_list|(
specifier|const
name|gl
operator|::
name|Caps
operator|&
name|caps
argument_list|,
name|gl
operator|::
name|InfoLog
operator|*
name|infoLog
argument_list|)
name|override
decl_stmt|;
name|bool
name|getUniformBlockSize
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|blockName
argument_list|,
name|size_t
operator|*
name|sizeOut
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|getUniformBlockMemberInfo
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|memberUniformName
argument_list|,
name|sh
operator|::
name|BlockMemberInfo
operator|*
name|memberInfoOut
argument_list|)
decl|const
name|override
decl_stmt|;
name|void
name|initializeUniformStorage
parameter_list|()
function_decl|;
name|gl
operator|::
name|Error
name|applyUniforms
argument_list|(
argument|GLenum drawMode
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Error
name|applyUniformBuffers
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
name|data
argument_list|)
expr_stmt|;
name|void
name|dirtyAllUniforms
parameter_list|()
function_decl|;
name|void
name|setUniform1fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform1iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform2iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform3iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform4iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform1uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform2uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform3uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniform4uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|v
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix2x3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix3x2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix2x4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix4x2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix3x4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformMatrix4x3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|setUniformBlockBinding
argument_list|(
name|GLuint
name|uniformBlockIndex
argument_list|,
name|GLuint
name|uniformBlockBinding
argument_list|)
name|override
decl_stmt|;
specifier|const
name|UniformStorageD3D
operator|&
name|getVertexUniformStorage
argument_list|()
specifier|const
block|{
return|return
operator|*
name|mVertexUniformStorage
return|;
block|}
specifier|const
name|UniformStorageD3D
operator|&
name|getFragmentUniformStorage
argument_list|()
specifier|const
block|{
return|return
operator|*
name|mFragmentUniformStorage
return|;
block|}
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
expr_stmt|;
name|void
name|sortAttributesByLayout
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|TranslatedAttribute
operator|>
operator|&
name|unsortedAttributes
argument_list|,
name|int
name|sortedSemanticIndicesOut
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
argument_list|,
specifier|const
name|rx
operator|::
name|TranslatedAttribute
operator|*
name|sortedAttributesOut
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|SemanticIndexArray
operator|&
name|getSemanticIndexes
argument_list|()
specifier|const
block|{
return|return
name|mSemanticIndexes
return|;
block|}
specifier|const
name|SemanticIndexArray
operator|&
name|getAttributesByLayout
argument_list|()
specifier|const
block|{
return|return
name|mAttributesByLayout
return|;
block|}
name|void
name|updateCachedInputLayout
argument_list|(
specifier|const
name|gl
operator|::
name|State
operator|&
name|state
argument_list|)
decl_stmt|;
specifier|const
name|gl
operator|::
name|InputLayout
operator|&
name|getCachedInputLayout
argument_list|()
specifier|const
block|{
return|return
name|mCachedInputLayout
return|;
block|}
name|bool
name|isSamplerMappingDirty
parameter_list|()
block|{
return|return
name|mDirtySamplerMapping
return|;
block|}
name|private
label|:
name|class
name|VertexExecutable
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|bool
operator|>
name|Signature
expr_stmt|;
name|VertexExecutable
argument_list|(
specifier|const
name|gl
operator|::
name|InputLayout
operator|&
name|inputLayout
argument_list|,
specifier|const
name|Signature
operator|&
name|signature
argument_list|,
name|ShaderExecutableD3D
operator|*
name|shaderExecutable
argument_list|)
expr_stmt|;
operator|~
name|VertexExecutable
argument_list|()
expr_stmt|;
name|bool
name|matchesSignature
argument_list|(
specifier|const
name|Signature
operator|&
name|signature
argument_list|)
decl|const
decl_stmt|;
specifier|static
name|void
name|getSignature
argument_list|(
name|RendererD3D
operator|*
name|renderer
argument_list|,
specifier|const
name|gl
operator|::
name|InputLayout
operator|&
name|inputLayout
argument_list|,
name|Signature
operator|*
name|signatureOut
argument_list|)
decl_stmt|;
specifier|const
name|gl
operator|::
name|InputLayout
operator|&
name|inputs
argument_list|()
specifier|const
block|{
return|return
name|mInputs
return|;
block|}
specifier|const
name|Signature
operator|&
name|signature
argument_list|()
specifier|const
block|{
return|return
name|mSignature
return|;
block|}
name|ShaderExecutableD3D
operator|*
name|shaderExecutable
argument_list|()
specifier|const
block|{
return|return
name|mShaderExecutable
return|;
block|}
name|private
label|:
name|gl
operator|::
name|InputLayout
name|mInputs
expr_stmt|;
name|Signature
name|mSignature
decl_stmt|;
name|ShaderExecutableD3D
modifier|*
name|mShaderExecutable
decl_stmt|;
block|}
empty_stmt|;
name|class
name|PixelExecutable
block|{
name|public
label|:
name|PixelExecutable
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|GLenum
operator|>
operator|&
name|outputSignature
argument_list|,
name|ShaderExecutableD3D
operator|*
name|shaderExecutable
argument_list|)
expr_stmt|;
operator|~
name|PixelExecutable
argument_list|()
expr_stmt|;
name|bool
name|matchesSignature
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|GLenum
operator|>
operator|&
name|signature
argument_list|)
decl|const
block|{
return|return
name|mOutputSignature
operator|==
name|signature
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|GLenum
operator|>
operator|&
name|outputSignature
argument_list|()
specifier|const
block|{
return|return
name|mOutputSignature
return|;
block|}
name|ShaderExecutableD3D
operator|*
name|shaderExecutable
argument_list|()
specifier|const
block|{
return|return
name|mShaderExecutable
return|;
block|}
name|private
label|:
name|std
operator|::
name|vector
operator|<
name|GLenum
operator|>
name|mOutputSignature
expr_stmt|;
name|ShaderExecutableD3D
modifier|*
name|mShaderExecutable
decl_stmt|;
block|}
empty_stmt|;
struct|struct
name|Sampler
block|{
name|Sampler
argument_list|()
expr_stmt|;
name|bool
name|active
decl_stmt|;
name|GLint
name|logicalTextureUnit
decl_stmt|;
name|GLenum
name|textureType
decl_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|D3DUniform
operator|*
operator|>
name|D3DUniformMap
expr_stmt|;
name|void
name|defineUniformsAndAssignRegisters
parameter_list|()
function_decl|;
name|void
name|defineUniformBase
argument_list|(
specifier|const
name|gl
operator|::
name|Shader
operator|*
name|shader
argument_list|,
specifier|const
name|sh
operator|::
name|Uniform
operator|&
name|uniform
argument_list|,
name|D3DUniformMap
operator|*
name|uniformMap
argument_list|)
decl_stmt|;
name|void
name|defineUniform
argument_list|(
name|GLenum
name|shaderType
argument_list|,
specifier|const
name|sh
operator|::
name|ShaderVariable
operator|&
name|uniform
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|fullName
argument_list|,
name|sh
operator|::
name|HLSLBlockEncoder
operator|*
name|encoder
argument_list|,
name|D3DUniformMap
operator|*
name|uniformMap
argument_list|)
decl_stmt|;
name|void
name|assignAllSamplerRegisters
parameter_list|()
function_decl|;
name|void
name|assignSamplerRegisters
parameter_list|(
specifier|const
name|D3DUniform
modifier|*
name|d3dUniform
parameter_list|)
function_decl|;
specifier|static
name|void
name|AssignSamplers
argument_list|(
name|unsigned
name|int
name|startSamplerIndex
argument_list|,
name|GLenum
name|samplerType
argument_list|,
name|unsigned
name|int
name|samplerCount
argument_list|,
name|std
operator|::
name|vector
operator|<
name|Sampler
operator|>
operator|&
name|outSamplers
argument_list|,
name|GLuint
operator|*
name|outUsedRange
argument_list|)
decl_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|setUniform
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|const T *v
argument_list|,
argument|GLenum targetUniformType
argument_list|)
expr_stmt|;
name|template
operator|<
name|int
name|cols
operator|,
name|int
name|rows
operator|>
name|void
name|setUniformMatrixfv
argument_list|(
argument|GLint location
argument_list|,
argument|GLsizei count
argument_list|,
argument|GLboolean transpose
argument_list|,
argument|const GLfloat *value
argument_list|,
argument|GLenum targetUniformType
argument_list|)
expr_stmt|;
name|LinkResult
name|compileProgramExecutables
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
name|data
argument_list|,
name|gl
operator|::
name|InfoLog
operator|&
name|infoLog
argument_list|)
decl_stmt|;
name|void
name|gatherTransformFeedbackVaryings
parameter_list|(
specifier|const
name|VaryingPacking
modifier|&
name|varyings
parameter_list|)
function_decl|;
name|D3DUniform
modifier|*
name|getD3DUniformByName
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|)
decl_stmt|;
name|D3DUniform
modifier|*
name|getD3DUniformFromLocation
parameter_list|(
name|GLint
name|location
parameter_list|)
function_decl|;
name|void
name|initSemanticIndex
parameter_list|()
function_decl|;
name|void
name|initAttributesByLayout
parameter_list|()
function_decl|;
name|void
name|reset
parameter_list|()
function_decl|;
name|void
name|assignUniformBlockRegisters
parameter_list|()
function_decl|;
name|void
name|initUniformBlockInfo
parameter_list|()
function_decl|;
name|size_t
name|getUniformBlockInfo
argument_list|(
specifier|const
name|sh
operator|::
name|InterfaceBlock
operator|&
name|interfaceBlock
argument_list|)
decl_stmt|;
name|RendererD3D
modifier|*
name|mRenderer
decl_stmt|;
name|DynamicHLSL
modifier|*
name|mDynamicHLSL
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|VertexExecutable
operator|*
operator|>
name|mVertexExecutables
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|PixelExecutable
operator|*
operator|>
name|mPixelExecutables
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|ShaderExecutableD3D
operator|*
operator|>
name|mGeometryExecutables
expr_stmt|;
name|std
operator|::
name|string
name|mVertexHLSL
expr_stmt|;
name|D3DCompilerWorkarounds
name|mVertexWorkarounds
decl_stmt|;
name|std
operator|::
name|string
name|mPixelHLSL
expr_stmt|;
name|D3DCompilerWorkarounds
name|mPixelWorkarounds
decl_stmt|;
name|bool
name|mUsesFragDepth
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|PixelShaderOutputVariable
operator|>
name|mPixelShaderKey
expr_stmt|;
comment|// Common code for all dynamic geometry shaders. Consists mainly of the GS input and output
comment|// structures, built from the linked varying info. We store the string itself instead of the
comment|// packed varyings for simplicity.
name|std
operator|::
name|string
name|mGeometryShaderPreamble
expr_stmt|;
name|bool
name|mUsesPointSize
decl_stmt|;
name|bool
name|mUsesFlatInterpolation
decl_stmt|;
name|UniformStorageD3D
modifier|*
name|mVertexUniformStorage
decl_stmt|;
name|UniformStorageD3D
modifier|*
name|mFragmentUniformStorage
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Sampler
operator|>
name|mSamplersPS
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Sampler
operator|>
name|mSamplersVS
expr_stmt|;
name|GLuint
name|mUsedVertexSamplerRange
decl_stmt|;
name|GLuint
name|mUsedPixelSamplerRange
decl_stmt|;
name|bool
name|mDirtySamplerMapping
decl_stmt|;
comment|// Cache for getPixelExecutableForFramebuffer
name|std
operator|::
name|vector
operator|<
name|GLenum
operator|>
name|mPixelShaderOutputFormatCache
expr_stmt|;
name|SemanticIndexArray
name|mSemanticIndexes
decl_stmt|;
name|SemanticIndexArray
name|mAttributesByLayout
decl_stmt|;
name|unsigned
name|int
name|mSerial
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|GLint
operator|>
name|mVertexUBOCache
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|GLint
operator|>
name|mFragmentUBOCache
expr_stmt|;
name|VertexExecutable
operator|::
name|Signature
name|mCachedVertexSignature
expr_stmt|;
name|gl
operator|::
name|InputLayout
name|mCachedInputLayout
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|D3DVarying
operator|>
name|mStreamOutVaryings
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|D3DUniform
operator|*
operator|>
name|mD3DUniforms
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|D3DUniformBlock
operator|>
name|mD3DUniformBlocks
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|sh
operator|::
name|BlockMemberInfo
operator|>
name|mBlockInfo
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|size_t
operator|>
name|mBlockDataSizes
expr_stmt|;
specifier|static
name|unsigned
name|int
name|issueSerial
parameter_list|()
function_decl|;
specifier|static
name|unsigned
name|int
name|mCurrentSerial
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D_PROGRAMD3D_H_
end_comment
end_unit
