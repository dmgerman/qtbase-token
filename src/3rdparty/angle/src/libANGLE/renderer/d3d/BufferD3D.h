begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// BufferD3D.h: Defines the rx::BufferD3D class, an implementation of BufferImpl.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D_BUFFERD3D_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D_BUFFERD3D_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D_BUFFERD3D_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/renderer/BufferImpl.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/angletypes.h"
end_include
begin_include
include|#
directive|include
file|<stdint.h>
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|BufferFactoryD3D
decl_stmt|;
name|class
name|StaticIndexBufferInterface
decl_stmt|;
name|class
name|StaticVertexBufferInterface
decl_stmt|;
name|class
name|BufferD3D
range|:
name|public
name|BufferImpl
block|{
name|public
operator|:
name|BufferD3D
argument_list|(
name|BufferFactoryD3D
operator|*
name|factory
argument_list|)
block|;
name|virtual
operator|~
name|BufferD3D
argument_list|()
block|;
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
block|{
return|return
name|mSerial
return|;
block|}
name|virtual
name|size_t
name|getSize
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|bool
name|supportsDirectBinding
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|void
name|markTransformFeedbackUsage
argument_list|()
operator|=
literal|0
block|;
name|StaticVertexBufferInterface
operator|*
name|getStaticVertexBuffer
argument_list|()
block|{
return|return
name|mStaticVertexBuffer
return|;
block|}
name|StaticIndexBufferInterface
operator|*
name|getStaticIndexBuffer
argument_list|()
block|{
return|return
name|mStaticIndexBuffer
return|;
block|}
name|void
name|initializeStaticData
argument_list|()
block|;
name|void
name|invalidateStaticData
argument_list|()
block|;
name|void
name|promoteStaticUsage
argument_list|(
argument|int dataSize
argument_list|)
block|;
name|protected
operator|:
name|void
name|updateSerial
argument_list|()
block|;
name|BufferFactoryD3D
operator|*
name|mFactory
block|;
name|unsigned
name|int
name|mSerial
block|;
specifier|static
name|unsigned
name|int
name|mNextSerial
block|;
name|StaticVertexBufferInterface
operator|*
name|mStaticVertexBuffer
block|;
name|StaticIndexBufferInterface
operator|*
name|mStaticIndexBuffer
block|;
name|unsigned
name|int
name|mUnmodifiedDataUse
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D_BUFFERD3D_H_
end_comment
end_unit
