begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// DeviceD3D.cpp: D3D implementation of egl::Device
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/DeviceD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/RendererD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Device.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Display.h"
end_include
begin_include
include|#
directive|include
file|<EGL/eglext.h>
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|DeviceD3D
name|DeviceD3D
operator|::
name|DeviceD3D
parameter_list|()
member_init_list|:
name|mDevice
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mDeviceType
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mDeviceExternallySourced
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mIsInitialized
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|~DeviceD3D
name|DeviceD3D
operator|::
name|~
name|DeviceD3D
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
if|if
condition|(
name|mDeviceType
operator|==
name|EGL_D3D11_DEVICE_ANGLE
condition|)
block|{
comment|// DeviceD3D holds a ref to an externally-sourced D3D11 device. We must release it.
name|ID3D11Device
modifier|*
name|device
init|=
cast|reinterpret_cast
argument_list|<
name|ID3D11Device
operator|*
argument_list|>
argument_list|(
name|mDevice
argument_list|)
decl_stmt|;
name|device
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
DECL|function|getDevice
name|egl
operator|::
name|Error
name|DeviceD3D
operator|::
name|getDevice
parameter_list|(
name|void
modifier|*
modifier|*
name|outValue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mIsInitialized
condition|)
block|{
operator|*
name|outValue
operator|=
literal|nullptr
expr_stmt|;
return|return
name|egl
operator|::
name|Error
argument_list|(
name|EGL_BAD_DEVICE_EXT
argument_list|)
return|;
block|}
operator|*
name|outValue
operator|=
name|mDevice
expr_stmt|;
return|return
name|egl
operator|::
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|initialize
name|egl
operator|::
name|Error
name|DeviceD3D
operator|::
name|initialize
parameter_list|(
name|void
modifier|*
name|device
parameter_list|,
name|EGLint
name|deviceType
parameter_list|,
name|EGLBoolean
name|deviceExternallySourced
parameter_list|)
block|{
name|ASSERT
argument_list|(
operator|!
name|mIsInitialized
argument_list|)
expr_stmt|;
if|if
condition|(
name|mIsInitialized
condition|)
block|{
return|return
name|egl
operator|::
name|Error
argument_list|(
name|EGL_BAD_DEVICE_EXT
argument_list|)
return|;
block|}
name|mDevice
operator|=
name|device
expr_stmt|;
name|mDeviceType
operator|=
name|deviceType
expr_stmt|;
name|mDeviceExternallySourced
operator|=
operator|!
operator|!
name|deviceExternallySourced
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
if|if
condition|(
name|mDeviceType
operator|==
name|EGL_D3D11_DEVICE_ANGLE
condition|)
block|{
comment|// Validate the device
name|IUnknown
modifier|*
name|iunknown
init|=
cast|reinterpret_cast
argument_list|<
name|IUnknown
operator|*
argument_list|>
argument_list|(
name|device
argument_list|)
decl_stmt|;
name|ID3D11Device
modifier|*
name|d3dDevice
init|=
literal|nullptr
decl_stmt|;
name|HRESULT
name|hr
init|=
name|iunknown
operator|->
name|QueryInterface
argument_list|(
name|__uuidof
argument_list|(
name|ID3D11Device
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|d3dDevice
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
return|return
name|egl
operator|::
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|,
literal|"Invalid D3D device passed into EGLDeviceEXT"
argument_list|)
return|;
block|}
comment|// The QI to ID3D11Device adds a ref to the D3D11 device.
comment|// Deliberately don't release the ref here, so that the DeviceD3D holds a ref to the
comment|// D3D11 device.
block|}
else|else
endif|#
directive|endif
block|{
name|ASSERT
argument_list|(
operator|!
name|mDeviceExternallySourced
argument_list|)
expr_stmt|;
block|}
name|mIsInitialized
operator|=
literal|true
expr_stmt|;
return|return
name|egl
operator|::
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|getType
name|EGLint
name|DeviceD3D
operator|::
name|getType
parameter_list|()
block|{
return|return
name|mDeviceType
return|;
block|}
DECL|function|generateExtensions
name|void
name|DeviceD3D
operator|::
name|generateExtensions
parameter_list|(
name|egl
operator|::
name|DeviceExtensions
modifier|*
name|outExtensions
parameter_list|)
specifier|const
block|{
name|outExtensions
operator|->
name|deviceD3D
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_namespace
end_unit
