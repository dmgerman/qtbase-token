begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// ShaderD3D.h: Defines the rx::ShaderD3D class which implements rx::ShaderImpl.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D_SHADERD3D_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D_SHADERD3D_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D_SHADERD3D_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/renderer/ShaderImpl.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/Workarounds.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Shader.h"
end_include
begin_include
include|#
directive|include
file|<map>
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|DynamicHLSL
decl_stmt|;
name|class
name|RendererD3D
decl_stmt|;
name|class
name|ShaderD3D
range|:
name|public
name|ShaderImpl
block|{
name|friend
name|class
name|DynamicHLSL
block|;
name|public
operator|:
name|ShaderD3D
argument_list|(
argument|GLenum type
argument_list|)
block|;
name|virtual
operator|~
name|ShaderD3D
argument_list|()
block|;
specifier|static
name|ShaderD3D
operator|*
name|makeShaderD3D
argument_list|(
name|ShaderImpl
operator|*
name|impl
argument_list|)
block|;
specifier|static
specifier|const
name|ShaderD3D
operator|*
name|makeShaderD3D
argument_list|(
specifier|const
name|ShaderImpl
operator|*
name|impl
argument_list|)
block|;
comment|// ShaderImpl implementation
name|virtual
name|std
operator|::
name|string
name|getDebugInfo
argument_list|()
specifier|const
block|;
comment|// D3D-specific methods
name|virtual
name|void
name|uncompile
argument_list|()
block|;
name|void
name|resetVaryingsRegisterAssignment
argument_list|()
block|;
name|unsigned
name|int
name|getUniformRegister
argument_list|(
argument|const std::string&uniformName
argument_list|)
specifier|const
block|;
name|unsigned
name|int
name|getInterfaceBlockRegister
argument_list|(
argument|const std::string&blockName
argument_list|)
specifier|const
block|;
name|void
name|appendDebugInfo
argument_list|(
argument|const std::string&info
argument_list|)
block|{
name|mDebugInfo
operator|+=
name|info
block|; }
name|void
name|generateWorkarounds
argument_list|(
argument|D3DCompilerWorkarounds *workarounds
argument_list|)
specifier|const
block|;
name|int
name|getShaderVersion
argument_list|()
specifier|const
block|{
return|return
name|mShaderVersion
return|;
block|}
name|bool
name|usesDepthRange
argument_list|()
specifier|const
block|{
return|return
name|mUsesDepthRange
return|;
block|}
name|bool
name|usesPointSize
argument_list|()
specifier|const
block|{
return|return
name|mUsesPointSize
return|;
block|}
name|bool
name|usesDeferredInit
argument_list|()
specifier|const
block|{
return|return
name|mUsesDeferredInit
return|;
block|}
name|GLenum
name|getShaderType
argument_list|()
specifier|const
block|;
name|ShShaderOutput
name|getCompilerOutputType
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|compile
argument_list|(
name|gl
operator|::
name|Compiler
operator|*
name|compiler
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|source
argument_list|)
block|;
name|private
operator|:
name|void
name|compileToHLSL
argument_list|(
argument|ShHandle compiler
argument_list|,
argument|const std::string&source
argument_list|)
block|;
name|void
name|parseVaryings
argument_list|(
argument|ShHandle compiler
argument_list|)
block|;
name|void
name|parseAttributes
argument_list|(
argument|ShHandle compiler
argument_list|)
block|;
specifier|static
name|bool
name|compareVarying
argument_list|(
specifier|const
name|gl
operator|::
name|PackedVarying
operator|&
name|x
argument_list|,
specifier|const
name|gl
operator|::
name|PackedVarying
operator|&
name|y
argument_list|)
block|;
name|GLenum
name|mShaderType
block|;
name|int
name|mShaderVersion
block|;
name|bool
name|mUsesMultipleRenderTargets
block|;
name|bool
name|mUsesFragColor
block|;
name|bool
name|mUsesFragData
block|;
name|bool
name|mUsesFragCoord
block|;
name|bool
name|mUsesFrontFacing
block|;
name|bool
name|mUsesPointSize
block|;
name|bool
name|mUsesPointCoord
block|;
name|bool
name|mUsesDepthRange
block|;
name|bool
name|mUsesFragDepth
block|;
name|bool
name|mUsesDiscardRewriting
block|;
name|bool
name|mUsesNestedBreak
block|;
name|bool
name|mUsesDeferredInit
block|;
name|bool
name|mRequiresIEEEStrictCompiling
block|;
name|ShShaderOutput
name|mCompilerOutputType
block|;
name|std
operator|::
name|string
name|mDebugInfo
block|;
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
block|,
name|unsigned
name|int
operator|>
name|mUniformRegisterMap
block|;
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
block|,
name|unsigned
name|int
operator|>
name|mInterfaceBlockRegisterMap
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D_SHADERD3D_H_
end_comment
end_unit
