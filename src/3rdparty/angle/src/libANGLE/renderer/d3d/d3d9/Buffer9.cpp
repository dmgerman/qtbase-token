begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Buffer9.cpp Defines the Buffer9 class.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d9/Buffer9.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d9/Renderer9.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|Buffer9
name|Buffer9
operator|::
name|Buffer9
parameter_list|(
name|Renderer9
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|BufferD3D
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mRenderer
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mSize
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|~Buffer9
name|Buffer9
operator|::
name|~
name|Buffer9
parameter_list|()
block|{
name|mSize
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|makeBuffer9
name|Buffer9
modifier|*
name|Buffer9
operator|::
name|makeBuffer9
parameter_list|(
name|BufferImpl
modifier|*
name|buffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|Buffer9
operator|*
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|Buffer9
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
return|;
block|}
DECL|function|setData
name|gl
operator|::
name|Error
name|Buffer9
operator|::
name|setData
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|size
parameter_list|,
name|GLenum
name|usage
parameter_list|)
block|{
if|if
condition|(
name|size
operator|>
name|mMemory
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|mMemory
operator|.
name|resize
argument_list|(
name|size
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to resize internal buffer."
argument_list|)
return|;
block|}
block|}
name|mSize
operator|=
name|size
expr_stmt|;
if|if
condition|(
name|data
operator|&&
name|size
operator|>
literal|0
condition|)
block|{
name|memcpy
argument_list|(
name|mMemory
operator|.
name|data
argument_list|()
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|invalidateStaticData
argument_list|()
expr_stmt|;
if|if
condition|(
name|usage
operator|==
name|GL_STATIC_DRAW
condition|)
block|{
name|initializeStaticData
argument_list|()
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getData
name|gl
operator|::
name|Error
name|Buffer9
operator|::
name|getData
parameter_list|(
specifier|const
name|uint8_t
modifier|*
modifier|*
name|outData
parameter_list|)
block|{
operator|*
name|outData
operator|=
name|mMemory
operator|.
name|data
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|setSubData
name|gl
operator|::
name|Error
name|Buffer9
operator|::
name|setSubData
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|offset
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|+
name|size
operator|>
name|mMemory
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|mMemory
operator|.
name|resize
argument_list|(
name|offset
operator|+
name|size
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to resize internal buffer."
argument_list|)
return|;
block|}
block|}
name|mSize
operator|=
name|std
operator|::
name|max
argument_list|(
name|mSize
argument_list|,
name|offset
operator|+
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|&&
name|size
operator|>
literal|0
condition|)
block|{
name|memcpy
argument_list|(
name|mMemory
operator|.
name|data
argument_list|()
operator|+
name|offset
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|invalidateStaticData
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|copySubData
name|gl
operator|::
name|Error
name|Buffer9
operator|::
name|copySubData
parameter_list|(
name|BufferImpl
modifier|*
name|source
parameter_list|,
name|GLintptr
name|sourceOffset
parameter_list|,
name|GLintptr
name|destOffset
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|)
block|{
comment|// Note: this method is currently unreachable
name|Buffer9
modifier|*
name|sourceBuffer
init|=
name|makeBuffer9
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|sourceBuffer
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|mMemory
operator|.
name|data
argument_list|()
operator|+
name|destOffset
argument_list|,
name|sourceBuffer
operator|->
name|mMemory
operator|.
name|data
argument_list|()
operator|+
name|sourceOffset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|invalidateStaticData
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
comment|// We do not support buffer mapping in D3D9
DECL|function|map
name|gl
operator|::
name|Error
name|Buffer9
operator|::
name|map
parameter_list|(
name|size_t
name|offset
parameter_list|,
name|size_t
name|length
parameter_list|,
name|GLbitfield
name|access
parameter_list|,
name|GLvoid
modifier|*
modifier|*
name|mapPtr
parameter_list|)
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
return|;
block|}
DECL|function|unmap
name|gl
operator|::
name|Error
name|Buffer9
operator|::
name|unmap
parameter_list|()
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
return|;
block|}
DECL|function|markTransformFeedbackUsage
name|void
name|Buffer9
operator|::
name|markTransformFeedbackUsage
parameter_list|()
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
end_namespace
end_unit
