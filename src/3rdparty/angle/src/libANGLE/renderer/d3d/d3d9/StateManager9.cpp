begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// StateManager9.cpp: Defines a class for caching D3D9 state
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d9/StateManager9.h"
end_include
begin_include
include|#
directive|include
file|"common/BitSetIterator.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d9/renderer9_utils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d9/Framebuffer9.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d9/Renderer9.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|StateManager9
name|StateManager9
operator|::
name|StateManager9
parameter_list|(
name|Renderer9
modifier|*
name|renderer9
parameter_list|)
member_init_list|:
name|mCurBlendState
argument_list|()
member_init_list|,
name|mCurBlendColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
member_init_list|,
name|mCurSampleMask
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mCurRasterState
argument_list|()
member_init_list|,
name|mCurDepthSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mCurDepthStencilState
argument_list|()
member_init_list|,
name|mCurStencilRef
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mCurStencilBackRef
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mCurFrontFaceCCW
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mCurStencilSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mCurScissorRect
argument_list|()
member_init_list|,
name|mCurScissorEnabled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mCurViewport
argument_list|()
member_init_list|,
name|mCurNear
argument_list|(
literal|0.0f
argument_list|)
member_init_list|,
name|mCurFar
argument_list|(
literal|0.0f
argument_list|)
member_init_list|,
name|mCurDepthFront
argument_list|(
literal|0.0f
argument_list|)
member_init_list|,
name|mCurIgnoreViewport
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mRenderer9
argument_list|(
name|renderer9
argument_list|)
member_init_list|,
name|mDirtyBits
argument_list|()
block|{
name|mBlendStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_BLEND_ENABLED
argument_list|)
expr_stmt|;
name|mBlendStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_BLEND_COLOR
argument_list|)
expr_stmt|;
name|mBlendStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_BLEND_FUNCS_EQUATIONS
argument_list|)
expr_stmt|;
name|mBlendStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_SAMPLE_ALPHA_TO_COVERAGE
argument_list|)
expr_stmt|;
name|mBlendStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_COLOR_MASK
argument_list|)
expr_stmt|;
name|mBlendStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_DITHER
argument_list|)
expr_stmt|;
name|mBlendStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_SAMPLE_MASK
argument_list|)
expr_stmt|;
name|mRasterizerStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_CULL_MODE
argument_list|)
expr_stmt|;
name|mRasterizerStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_DEPTH_BIAS
argument_list|)
expr_stmt|;
name|mDepthStencilStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_DEPTH_MASK
argument_list|)
expr_stmt|;
name|mDepthStencilStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_DEPTH_FUNC
argument_list|)
expr_stmt|;
name|mDepthStencilStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_TEST_ENABLED
argument_list|)
expr_stmt|;
name|mDepthStencilStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_FUNCS_FRONT
argument_list|)
expr_stmt|;
name|mDepthStencilStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_FUNCS_BACK
argument_list|)
expr_stmt|;
name|mDepthStencilStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_WRITEMASK_FRONT
argument_list|)
expr_stmt|;
name|mDepthStencilStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_WRITEMASK_BACK
argument_list|)
expr_stmt|;
name|mDepthStencilStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_OPS_FRONT
argument_list|)
expr_stmt|;
name|mDepthStencilStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_OPS_BACK
argument_list|)
expr_stmt|;
name|mScissorStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_SCISSOR_ENABLED
argument_list|)
expr_stmt|;
name|mScissorStateDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_SCISSOR_RECT
argument_list|)
expr_stmt|;
block|}
DECL|function|~StateManager9
name|StateManager9
operator|::
name|~
name|StateManager9
parameter_list|()
block|{ }
DECL|function|forceSetBlendState
name|void
name|StateManager9
operator|::
name|forceSetBlendState
parameter_list|()
block|{
name|mDirtyBits
operator||=
name|mBlendStateDirtyBits
expr_stmt|;
block|}
DECL|function|forceSetRasterState
name|void
name|StateManager9
operator|::
name|forceSetRasterState
parameter_list|()
block|{
name|mDirtyBits
operator||=
name|mRasterizerStateDirtyBits
expr_stmt|;
block|}
DECL|function|forceSetDepthStencilState
name|void
name|StateManager9
operator|::
name|forceSetDepthStencilState
parameter_list|()
block|{
name|mDirtyBits
operator||=
name|mDepthStencilStateDirtyBits
expr_stmt|;
block|}
DECL|function|forceSetScissorState
name|void
name|StateManager9
operator|::
name|forceSetScissorState
parameter_list|()
block|{
name|mDirtyBits
operator||=
name|mScissorStateDirtyBits
expr_stmt|;
block|}
DECL|function|forceSetViewportState
name|void
name|StateManager9
operator|::
name|forceSetViewportState
parameter_list|()
block|{
name|mForceSetViewport
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|forceSetDXUniformsState
name|void
name|StateManager9
operator|::
name|forceSetDXUniformsState
parameter_list|()
block|{
name|mDxUniformsDirty
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|updateStencilSizeIfChanged
name|void
name|StateManager9
operator|::
name|updateStencilSizeIfChanged
parameter_list|(
name|bool
name|depthStencilInitialized
parameter_list|,
name|unsigned
name|int
name|stencilSize
parameter_list|)
block|{
if|if
condition|(
operator|!
name|depthStencilInitialized
operator|||
name|stencilSize
operator|!=
name|mCurStencilSize
condition|)
block|{
name|mCurStencilSize
operator|=
name|stencilSize
expr_stmt|;
name|forceSetDepthStencilState
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|syncState
name|void
name|StateManager9
operator|::
name|syncState
parameter_list|(
specifier|const
name|gl
operator|::
name|State
modifier|&
name|state
parameter_list|,
specifier|const
name|gl
operator|::
name|State
operator|::
name|DirtyBits
modifier|&
name|dirtyBits
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dirtyBits
operator|.
name|any
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|auto
name|dirtyBit
range|:
name|angle
operator|::
name|IterateBitSet
argument_list|(
name|dirtyBits
argument_list|)
control|)
block|{
switch|switch
condition|(
name|dirtyBit
condition|)
block|{
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_BLEND_ENABLED
case|:
if|if
condition|(
name|state
operator|.
name|getBlendState
argument_list|()
operator|.
name|blend
operator|!=
name|mCurBlendState
operator|.
name|blend
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_BLEND_ENABLED
argument_list|)
expr_stmt|;
comment|// BlendColor and funcs and equations has to be set if blend is enabled
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_BLEND_COLOR
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_BLEND_FUNCS_EQUATIONS
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_BLEND_FUNCS
case|:
block|{
specifier|const
name|gl
operator|::
name|BlendState
modifier|&
name|blendState
init|=
name|state
operator|.
name|getBlendState
argument_list|()
decl_stmt|;
if|if
condition|(
name|blendState
operator|.
name|sourceBlendRGB
operator|!=
name|mCurBlendState
operator|.
name|sourceBlendRGB
operator|||
name|blendState
operator|.
name|destBlendRGB
operator|!=
name|mCurBlendState
operator|.
name|destBlendRGB
operator|||
name|blendState
operator|.
name|sourceBlendAlpha
operator|!=
name|mCurBlendState
operator|.
name|sourceBlendAlpha
operator|||
name|blendState
operator|.
name|destBlendAlpha
operator|!=
name|mCurBlendState
operator|.
name|destBlendAlpha
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_BLEND_FUNCS_EQUATIONS
argument_list|)
expr_stmt|;
comment|// BlendColor depends on the values of blend funcs
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_BLEND_COLOR
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_BLEND_EQUATIONS
case|:
block|{
specifier|const
name|gl
operator|::
name|BlendState
modifier|&
name|blendState
init|=
name|state
operator|.
name|getBlendState
argument_list|()
decl_stmt|;
if|if
condition|(
name|blendState
operator|.
name|blendEquationRGB
operator|!=
name|mCurBlendState
operator|.
name|blendEquationRGB
operator|||
name|blendState
operator|.
name|blendEquationAlpha
operator|!=
name|mCurBlendState
operator|.
name|blendEquationAlpha
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_BLEND_FUNCS_EQUATIONS
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_SAMPLE_ALPHA_TO_COVERAGE_ENABLED
case|:
if|if
condition|(
name|state
operator|.
name|getBlendState
argument_list|()
operator|.
name|sampleAlphaToCoverage
operator|!=
name|mCurBlendState
operator|.
name|sampleAlphaToCoverage
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_SAMPLE_ALPHA_TO_COVERAGE
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_COLOR_MASK
case|:
block|{
specifier|const
name|gl
operator|::
name|BlendState
modifier|&
name|blendState
init|=
name|state
operator|.
name|getBlendState
argument_list|()
decl_stmt|;
if|if
condition|(
name|blendState
operator|.
name|colorMaskRed
operator|!=
name|mCurBlendState
operator|.
name|colorMaskRed
operator|||
name|blendState
operator|.
name|colorMaskGreen
operator|!=
name|mCurBlendState
operator|.
name|colorMaskGreen
operator|||
name|blendState
operator|.
name|colorMaskBlue
operator|!=
name|mCurBlendState
operator|.
name|colorMaskBlue
operator|||
name|blendState
operator|.
name|colorMaskAlpha
operator|!=
name|mCurBlendState
operator|.
name|colorMaskAlpha
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_COLOR_MASK
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_DITHER_ENABLED
case|:
if|if
condition|(
name|state
operator|.
name|getBlendState
argument_list|()
operator|.
name|dither
operator|!=
name|mCurBlendState
operator|.
name|dither
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_DITHER
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_BLEND_COLOR
case|:
if|if
condition|(
name|state
operator|.
name|getBlendColor
argument_list|()
operator|!=
name|mCurBlendColor
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_BLEND_COLOR
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_CULL_FACE_ENABLED
case|:
if|if
condition|(
name|state
operator|.
name|getRasterizerState
argument_list|()
operator|.
name|cullFace
operator|!=
name|mCurRasterState
operator|.
name|cullFace
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_CULL_MODE
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_CULL_FACE
case|:
if|if
condition|(
name|state
operator|.
name|getRasterizerState
argument_list|()
operator|.
name|cullMode
operator|!=
name|mCurRasterState
operator|.
name|cullMode
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_CULL_MODE
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_FRONT_FACE
case|:
if|if
condition|(
name|state
operator|.
name|getRasterizerState
argument_list|()
operator|.
name|frontFace
operator|!=
name|mCurRasterState
operator|.
name|frontFace
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_CULL_MODE
argument_list|)
expr_stmt|;
comment|// Viewport state depends on rasterizer.frontface
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_VIEWPORT
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_POLYGON_OFFSET_FILL_ENABLED
case|:
if|if
condition|(
name|state
operator|.
name|getRasterizerState
argument_list|()
operator|.
name|polygonOffsetFill
operator|!=
name|mCurRasterState
operator|.
name|polygonOffsetFill
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_DEPTH_BIAS
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_POLYGON_OFFSET
case|:
block|{
specifier|const
name|gl
operator|::
name|RasterizerState
modifier|&
name|rasterizerState
init|=
name|state
operator|.
name|getRasterizerState
argument_list|()
decl_stmt|;
if|if
condition|(
name|rasterizerState
operator|.
name|polygonOffsetFactor
operator|!=
name|mCurRasterState
operator|.
name|polygonOffsetFactor
operator|||
name|rasterizerState
operator|.
name|polygonOffsetUnits
operator|!=
name|mCurRasterState
operator|.
name|polygonOffsetUnits
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_DEPTH_BIAS
argument_list|)
expr_stmt|;
block|}
block|}
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_DEPTH_MASK
case|:
if|if
condition|(
name|state
operator|.
name|getDepthStencilState
argument_list|()
operator|.
name|depthMask
operator|!=
name|mCurDepthStencilState
operator|.
name|depthMask
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_DEPTH_MASK
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_DEPTH_TEST_ENABLED
case|:
if|if
condition|(
name|state
operator|.
name|getDepthStencilState
argument_list|()
operator|.
name|depthTest
operator|!=
name|mCurDepthStencilState
operator|.
name|depthTest
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_DEPTH_FUNC
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_DEPTH_FUNC
case|:
if|if
condition|(
name|state
operator|.
name|getDepthStencilState
argument_list|()
operator|.
name|depthFunc
operator|!=
name|mCurDepthStencilState
operator|.
name|depthFunc
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_DEPTH_FUNC
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_STENCIL_TEST_ENABLED
case|:
if|if
condition|(
name|state
operator|.
name|getDepthStencilState
argument_list|()
operator|.
name|stencilTest
operator|!=
name|mCurDepthStencilState
operator|.
name|stencilTest
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_TEST_ENABLED
argument_list|)
expr_stmt|;
comment|// If we enable the stencil test, all of these must be set
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_WRITEMASK_BACK
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_WRITEMASK_FRONT
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_FUNCS_FRONT
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_FUNCS_BACK
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_OPS_FRONT
argument_list|)
expr_stmt|;
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_OPS_BACK
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_STENCIL_FUNCS_FRONT
case|:
block|{
specifier|const
name|gl
operator|::
name|DepthStencilState
modifier|&
name|depthStencilState
init|=
name|state
operator|.
name|getDepthStencilState
argument_list|()
decl_stmt|;
if|if
condition|(
name|depthStencilState
operator|.
name|stencilFunc
operator|!=
name|mCurDepthStencilState
operator|.
name|stencilFunc
operator|||
name|depthStencilState
operator|.
name|stencilMask
operator|!=
name|mCurDepthStencilState
operator|.
name|stencilMask
operator|||
name|state
operator|.
name|getStencilRef
argument_list|()
operator|!=
name|mCurStencilRef
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_FUNCS_FRONT
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_STENCIL_FUNCS_BACK
case|:
block|{
specifier|const
name|gl
operator|::
name|DepthStencilState
modifier|&
name|depthStencilState
init|=
name|state
operator|.
name|getDepthStencilState
argument_list|()
decl_stmt|;
if|if
condition|(
name|depthStencilState
operator|.
name|stencilBackFunc
operator|!=
name|mCurDepthStencilState
operator|.
name|stencilBackFunc
operator|||
name|depthStencilState
operator|.
name|stencilBackMask
operator|!=
name|mCurDepthStencilState
operator|.
name|stencilBackMask
operator|||
name|state
operator|.
name|getStencilBackRef
argument_list|()
operator|!=
name|mCurStencilBackRef
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_FUNCS_BACK
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_STENCIL_WRITEMASK_FRONT
case|:
if|if
condition|(
name|state
operator|.
name|getDepthStencilState
argument_list|()
operator|.
name|stencilWritemask
operator|!=
name|mCurDepthStencilState
operator|.
name|stencilWritemask
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_WRITEMASK_FRONT
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_STENCIL_WRITEMASK_BACK
case|:
if|if
condition|(
name|state
operator|.
name|getDepthStencilState
argument_list|()
operator|.
name|stencilBackWritemask
operator|!=
name|mCurDepthStencilState
operator|.
name|stencilBackWritemask
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_WRITEMASK_BACK
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_STENCIL_OPS_FRONT
case|:
block|{
specifier|const
name|gl
operator|::
name|DepthStencilState
modifier|&
name|depthStencilState
init|=
name|state
operator|.
name|getDepthStencilState
argument_list|()
decl_stmt|;
if|if
condition|(
name|depthStencilState
operator|.
name|stencilFail
operator|!=
name|mCurDepthStencilState
operator|.
name|stencilFail
operator|||
name|depthStencilState
operator|.
name|stencilPassDepthFail
operator|!=
name|mCurDepthStencilState
operator|.
name|stencilPassDepthFail
operator|||
name|depthStencilState
operator|.
name|stencilPassDepthPass
operator|!=
name|mCurDepthStencilState
operator|.
name|stencilPassDepthPass
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_OPS_FRONT
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_STENCIL_OPS_BACK
case|:
block|{
specifier|const
name|gl
operator|::
name|DepthStencilState
modifier|&
name|depthStencilState
init|=
name|state
operator|.
name|getDepthStencilState
argument_list|()
decl_stmt|;
if|if
condition|(
name|depthStencilState
operator|.
name|stencilBackFail
operator|!=
name|mCurDepthStencilState
operator|.
name|stencilBackFail
operator|||
name|depthStencilState
operator|.
name|stencilBackPassDepthFail
operator|!=
name|mCurDepthStencilState
operator|.
name|stencilBackPassDepthFail
operator|||
name|depthStencilState
operator|.
name|stencilBackPassDepthPass
operator|!=
name|mCurDepthStencilState
operator|.
name|stencilBackPassDepthPass
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_STENCIL_OPS_BACK
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_SCISSOR_TEST_ENABLED
case|:
if|if
condition|(
name|state
operator|.
name|isScissorTestEnabled
argument_list|()
operator|!=
name|mCurScissorEnabled
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_SCISSOR_ENABLED
argument_list|)
expr_stmt|;
comment|// If scissor is enabled, we have to set the scissor rect
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_SCISSOR_RECT
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_SCISSOR
case|:
if|if
condition|(
name|state
operator|.
name|getScissor
argument_list|()
operator|!=
name|mCurScissorRect
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_SCISSOR_RECT
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_DEPTH_RANGE
case|:
if|if
condition|(
name|state
operator|.
name|getNearPlane
argument_list|()
operator|!=
name|mCurNear
operator|||
name|state
operator|.
name|getFarPlane
argument_list|()
operator|!=
name|mCurFar
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_VIEWPORT
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|gl
operator|::
name|State
operator|::
name|DIRTY_BIT_VIEWPORT
case|:
if|if
condition|(
name|state
operator|.
name|getViewport
argument_list|()
operator|!=
name|mCurViewport
condition|)
block|{
name|mDirtyBits
operator|.
name|set
argument_list|(
name|DIRTY_BIT_VIEWPORT
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
block|}
DECL|function|setBlendDepthRasterStates
name|gl
operator|::
name|Error
name|StateManager9
operator|::
name|setBlendDepthRasterStates
parameter_list|(
specifier|const
name|gl
operator|::
name|State
modifier|&
name|glState
parameter_list|,
name|unsigned
name|int
name|sampleMask
parameter_list|)
block|{
specifier|const
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|glState
operator|.
name|getDrawFramebuffer
argument_list|()
decl_stmt|;
specifier|const
name|gl
operator|::
name|BlendState
modifier|&
name|blendState
init|=
name|glState
operator|.
name|getBlendState
argument_list|()
decl_stmt|;
specifier|const
name|gl
operator|::
name|ColorF
modifier|&
name|blendColor
init|=
name|glState
operator|.
name|getBlendColor
argument_list|()
decl_stmt|;
specifier|const
name|gl
operator|::
name|RasterizerState
modifier|&
name|rasterState
init|=
name|glState
operator|.
name|getRasterizerState
argument_list|()
decl_stmt|;
specifier|const
specifier|auto
modifier|&
name|depthStencilState
init|=
name|glState
operator|.
name|getDepthStencilState
argument_list|()
decl_stmt|;
name|bool
name|frontFaceCCW
init|=
operator|(
name|glState
operator|.
name|getRasterizerState
argument_list|()
operator|.
name|frontFace
operator|==
name|GL_CCW
operator|)
decl_stmt|;
name|unsigned
name|int
name|maxStencil
init|=
operator|(
literal|1
operator|<<
name|mCurStencilSize
operator|)
operator|-
literal|1
decl_stmt|;
comment|// All the depth stencil states depends on the front face ccw variable
if|if
condition|(
name|frontFaceCCW
operator|!=
name|mCurFrontFaceCCW
condition|)
block|{
name|forceSetDepthStencilState
argument_list|()
expr_stmt|;
name|mCurFrontFaceCCW
operator|=
name|frontFaceCCW
expr_stmt|;
block|}
for|for
control|(
name|auto
name|dirtyBit
range|:
name|angle
operator|::
name|IterateBitSet
argument_list|(
name|mDirtyBits
argument_list|)
control|)
block|{
switch|switch
condition|(
name|dirtyBit
condition|)
block|{
case|case
name|DIRTY_BIT_BLEND_ENABLED
case|:
name|setBlendEnabled
argument_list|(
name|blendState
operator|.
name|blend
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_BLEND_COLOR
case|:
name|setBlendColor
argument_list|(
name|blendState
argument_list|,
name|blendColor
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_BLEND_FUNCS_EQUATIONS
case|:
name|setBlendFuncsEquations
argument_list|(
name|blendState
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_SAMPLE_ALPHA_TO_COVERAGE
case|:
name|setSampleAlphaToCoverage
argument_list|(
name|blendState
operator|.
name|sampleAlphaToCoverage
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_COLOR_MASK
case|:
name|setColorMask
argument_list|(
name|framebuffer
argument_list|,
name|blendState
operator|.
name|colorMaskRed
argument_list|,
name|blendState
operator|.
name|colorMaskBlue
argument_list|,
name|blendState
operator|.
name|colorMaskGreen
argument_list|,
name|blendState
operator|.
name|colorMaskAlpha
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_DITHER
case|:
name|setDither
argument_list|(
name|blendState
operator|.
name|dither
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_CULL_MODE
case|:
name|setCullMode
argument_list|(
name|rasterState
operator|.
name|cullFace
argument_list|,
name|rasterState
operator|.
name|cullMode
argument_list|,
name|rasterState
operator|.
name|frontFace
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_DEPTH_BIAS
case|:
name|setDepthBias
argument_list|(
name|rasterState
operator|.
name|polygonOffsetFill
argument_list|,
name|rasterState
operator|.
name|polygonOffsetFactor
argument_list|,
name|rasterState
operator|.
name|polygonOffsetUnits
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_STENCIL_DEPTH_MASK
case|:
name|setDepthMask
argument_list|(
name|depthStencilState
operator|.
name|depthMask
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_STENCIL_DEPTH_FUNC
case|:
name|setDepthFunc
argument_list|(
name|depthStencilState
operator|.
name|depthTest
argument_list|,
name|depthStencilState
operator|.
name|depthFunc
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_STENCIL_TEST_ENABLED
case|:
name|setStencilTestEnabled
argument_list|(
name|depthStencilState
operator|.
name|stencilTest
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_STENCIL_FUNCS_FRONT
case|:
name|setStencilFuncsFront
argument_list|(
name|depthStencilState
operator|.
name|stencilFunc
argument_list|,
name|depthStencilState
operator|.
name|stencilMask
argument_list|,
name|glState
operator|.
name|getStencilRef
argument_list|()
argument_list|,
name|frontFaceCCW
argument_list|,
name|maxStencil
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_STENCIL_FUNCS_BACK
case|:
name|setStencilFuncsBack
argument_list|(
name|depthStencilState
operator|.
name|stencilBackFunc
argument_list|,
name|depthStencilState
operator|.
name|stencilBackMask
argument_list|,
name|glState
operator|.
name|getStencilBackRef
argument_list|()
argument_list|,
name|frontFaceCCW
argument_list|,
name|maxStencil
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_STENCIL_WRITEMASK_FRONT
case|:
name|setStencilWriteMask
argument_list|(
name|depthStencilState
operator|.
name|stencilWritemask
argument_list|,
name|frontFaceCCW
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_STENCIL_WRITEMASK_BACK
case|:
name|setStencilBackWriteMask
argument_list|(
name|depthStencilState
operator|.
name|stencilBackWritemask
argument_list|,
name|frontFaceCCW
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_STENCIL_OPS_FRONT
case|:
name|setStencilOpsFront
argument_list|(
name|depthStencilState
operator|.
name|stencilFail
argument_list|,
name|depthStencilState
operator|.
name|stencilPassDepthFail
argument_list|,
name|depthStencilState
operator|.
name|stencilPassDepthPass
argument_list|,
name|frontFaceCCW
argument_list|)
expr_stmt|;
break|break;
case|case
name|DIRTY_BIT_STENCIL_OPS_BACK
case|:
name|setStencilOpsBack
argument_list|(
name|depthStencilState
operator|.
name|stencilBackFail
argument_list|,
name|depthStencilState
operator|.
name|stencilBackPassDepthFail
argument_list|,
name|depthStencilState
operator|.
name|stencilBackPassDepthPass
argument_list|,
name|frontFaceCCW
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|sampleMask
operator|!=
name|mCurSampleMask
condition|)
block|{
name|setSampleMask
argument_list|(
name|sampleMask
argument_list|)
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|setViewportState
name|void
name|StateManager9
operator|::
name|setViewportState
parameter_list|(
specifier|const
name|gl
operator|::
name|Caps
modifier|*
name|caps
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|&
name|viewport
parameter_list|,
name|float
name|zNear
parameter_list|,
name|float
name|zFar
parameter_list|,
name|GLenum
name|drawMode
parameter_list|,
name|GLenum
name|frontFace
parameter_list|,
name|bool
name|ignoreViewport
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mDirtyBits
operator|.
name|test
argument_list|(
name|DIRTY_BIT_VIEWPORT
argument_list|)
operator|&&
name|mCurIgnoreViewport
operator|==
name|ignoreViewport
condition|)
return|return;
name|gl
operator|::
name|Rectangle
name|actualViewport
init|=
name|viewport
decl_stmt|;
name|float
name|actualZNear
init|=
name|gl
operator|::
name|clamp01
argument_list|(
name|zNear
argument_list|)
decl_stmt|;
name|float
name|actualZFar
init|=
name|gl
operator|::
name|clamp01
argument_list|(
name|zFar
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignoreViewport
condition|)
block|{
name|actualViewport
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|actualViewport
operator|.
name|y
operator|=
literal|0
expr_stmt|;
name|actualViewport
operator|.
name|width
operator|=
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|mRenderTargetBounds
operator|.
name|width
argument_list|)
expr_stmt|;
name|actualViewport
operator|.
name|height
operator|=
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|mRenderTargetBounds
operator|.
name|height
argument_list|)
expr_stmt|;
name|actualZNear
operator|=
literal|0.0f
expr_stmt|;
name|actualZFar
operator|=
literal|1.0f
expr_stmt|;
block|}
name|D3DVIEWPORT9
name|dxViewport
decl_stmt|;
name|dxViewport
operator|.
name|X
operator|=
name|gl
operator|::
name|clamp
argument_list|(
name|actualViewport
operator|.
name|x
argument_list|,
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|mRenderTargetBounds
operator|.
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|dxViewport
operator|.
name|Y
operator|=
name|gl
operator|::
name|clamp
argument_list|(
name|actualViewport
operator|.
name|y
argument_list|,
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|mRenderTargetBounds
operator|.
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|dxViewport
operator|.
name|Width
operator|=
name|gl
operator|::
name|clamp
argument_list|(
name|actualViewport
operator|.
name|width
argument_list|,
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|mRenderTargetBounds
operator|.
name|width
argument_list|)
operator|-
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|dxViewport
operator|.
name|X
argument_list|)
argument_list|)
expr_stmt|;
name|dxViewport
operator|.
name|Height
operator|=
name|gl
operator|::
name|clamp
argument_list|(
name|actualViewport
operator|.
name|height
argument_list|,
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|mRenderTargetBounds
operator|.
name|height
argument_list|)
operator|-
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|dxViewport
operator|.
name|Y
argument_list|)
argument_list|)
expr_stmt|;
name|dxViewport
operator|.
name|MinZ
operator|=
name|actualZNear
expr_stmt|;
name|dxViewport
operator|.
name|MaxZ
operator|=
name|actualZFar
expr_stmt|;
name|float
name|depthFront
init|=
operator|!
name|gl
operator|::
name|IsTriangleMode
argument_list|(
name|drawMode
argument_list|)
condition|?
literal|0.0f
else|:
operator|(
name|frontFace
operator|==
name|GL_CCW
condition|?
literal|1.0f
else|:
operator|-
literal|1.0f
operator|)
decl_stmt|;
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetViewport
argument_list|(
operator|&
name|dxViewport
argument_list|)
expr_stmt|;
name|mCurViewport
operator|=
name|actualViewport
expr_stmt|;
name|mCurNear
operator|=
name|actualZNear
expr_stmt|;
name|mCurFar
operator|=
name|actualZFar
expr_stmt|;
name|mCurDepthFront
operator|=
name|depthFront
expr_stmt|;
name|mCurIgnoreViewport
operator|=
name|ignoreViewport
expr_stmt|;
comment|// Setting shader constants
name|dx_VertexConstants9
name|vc
init|=
block|{}
decl_stmt|;
name|dx_PixelConstants9
name|pc
init|=
block|{}
decl_stmt|;
name|vc
operator|.
name|viewAdjust
index|[
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
operator|(
name|actualViewport
operator|.
name|width
operator|-
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|dxViewport
operator|.
name|Width
argument_list|)
operator|)
operator|+
literal|2
operator|*
operator|(
name|actualViewport
operator|.
name|x
operator|-
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|dxViewport
operator|.
name|X
argument_list|)
operator|)
operator|-
literal|1
argument_list|)
operator|/
name|dxViewport
operator|.
name|Width
expr_stmt|;
name|vc
operator|.
name|viewAdjust
index|[
literal|1
index|]
operator|=
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
operator|(
name|actualViewport
operator|.
name|height
operator|-
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|dxViewport
operator|.
name|Height
argument_list|)
operator|)
operator|+
literal|2
operator|*
operator|(
name|actualViewport
operator|.
name|y
operator|-
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|dxViewport
operator|.
name|Y
argument_list|)
operator|)
operator|-
literal|1
argument_list|)
operator|/
name|dxViewport
operator|.
name|Height
expr_stmt|;
name|vc
operator|.
name|viewAdjust
index|[
literal|2
index|]
operator|=
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|actualViewport
operator|.
name|width
argument_list|)
operator|/
name|dxViewport
operator|.
name|Width
expr_stmt|;
name|vc
operator|.
name|viewAdjust
index|[
literal|3
index|]
operator|=
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|actualViewport
operator|.
name|height
argument_list|)
operator|/
name|dxViewport
operator|.
name|Height
expr_stmt|;
name|pc
operator|.
name|viewCoords
index|[
literal|0
index|]
operator|=
name|actualViewport
operator|.
name|width
operator|*
literal|0.5f
expr_stmt|;
name|pc
operator|.
name|viewCoords
index|[
literal|1
index|]
operator|=
name|actualViewport
operator|.
name|height
operator|*
literal|0.5f
expr_stmt|;
name|pc
operator|.
name|viewCoords
index|[
literal|2
index|]
operator|=
name|actualViewport
operator|.
name|x
operator|+
operator|(
name|actualViewport
operator|.
name|width
operator|*
literal|0.5f
operator|)
expr_stmt|;
name|pc
operator|.
name|viewCoords
index|[
literal|3
index|]
operator|=
name|actualViewport
operator|.
name|y
operator|+
operator|(
name|actualViewport
operator|.
name|height
operator|*
literal|0.5f
operator|)
expr_stmt|;
name|pc
operator|.
name|depthFront
index|[
literal|0
index|]
operator|=
operator|(
name|actualZFar
operator|-
name|actualZNear
operator|)
operator|*
literal|0.5f
expr_stmt|;
name|pc
operator|.
name|depthFront
index|[
literal|1
index|]
operator|=
operator|(
name|actualZNear
operator|+
name|actualZFar
operator|)
operator|*
literal|0.5f
expr_stmt|;
name|pc
operator|.
name|depthFront
index|[
literal|2
index|]
operator|=
name|depthFront
expr_stmt|;
name|vc
operator|.
name|depthRange
index|[
literal|0
index|]
operator|=
name|actualZNear
expr_stmt|;
name|vc
operator|.
name|depthRange
index|[
literal|1
index|]
operator|=
name|actualZFar
expr_stmt|;
name|vc
operator|.
name|depthRange
index|[
literal|2
index|]
operator|=
name|actualZFar
operator|-
name|actualZNear
expr_stmt|;
name|pc
operator|.
name|depthRange
index|[
literal|0
index|]
operator|=
name|actualZNear
expr_stmt|;
name|pc
operator|.
name|depthRange
index|[
literal|1
index|]
operator|=
name|actualZFar
expr_stmt|;
name|pc
operator|.
name|depthRange
index|[
literal|2
index|]
operator|=
name|actualZFar
operator|-
name|actualZNear
expr_stmt|;
if|if
condition|(
name|memcmp
argument_list|(
operator|&
name|vc
argument_list|,
operator|&
name|mVertexConstants
argument_list|,
sizeof|sizeof
argument_list|(
name|dx_VertexConstants9
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|mVertexConstants
operator|=
name|vc
expr_stmt|;
name|mDxUniformsDirty
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|memcmp
argument_list|(
operator|&
name|pc
argument_list|,
operator|&
name|mPixelConstants
argument_list|,
sizeof|sizeof
argument_list|(
name|dx_PixelConstants9
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|mPixelConstants
operator|=
name|pc
expr_stmt|;
name|mDxUniformsDirty
operator|=
literal|true
expr_stmt|;
block|}
name|mForceSetViewport
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|setShaderConstants
name|void
name|StateManager9
operator|::
name|setShaderConstants
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mDxUniformsDirty
condition|)
return|return;
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer9
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|device
operator|->
name|SetVertexShaderConstantF
argument_list|(
literal|0
argument_list|,
cast|reinterpret_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
operator|&
name|mVertexConstants
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|dx_VertexConstants9
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|float
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetPixelShaderConstantF
argument_list|(
literal|0
argument_list|,
cast|reinterpret_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
operator|&
name|mPixelConstants
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|dx_PixelConstants9
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|float
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|mDxUniformsDirty
operator|=
literal|false
expr_stmt|;
block|}
comment|// This is separate from the main state loop because other functions
comment|// outside call only setScissorState to update scissor state
DECL|function|setScissorState
name|void
name|StateManager9
operator|::
name|setScissorState
parameter_list|(
specifier|const
name|gl
operator|::
name|Rectangle
modifier|&
name|scissor
parameter_list|,
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|mDirtyBits
operator|.
name|test
argument_list|(
name|DIRTY_BIT_SCISSOR_ENABLED
argument_list|)
condition|)
name|setScissorEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|mDirtyBits
operator|.
name|test
argument_list|(
name|DIRTY_BIT_SCISSOR_RECT
argument_list|)
condition|)
name|setScissorRect
argument_list|(
name|scissor
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
block|}
DECL|function|setRenderTargetBounds
name|void
name|StateManager9
operator|::
name|setRenderTargetBounds
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|)
block|{
name|mRenderTargetBounds
operator|.
name|width
operator|=
operator|(
name|int
operator|)
name|width
expr_stmt|;
name|mRenderTargetBounds
operator|.
name|height
operator|=
operator|(
name|int
operator|)
name|height
expr_stmt|;
name|forceSetViewportState
argument_list|()
expr_stmt|;
block|}
DECL|function|setScissorEnabled
name|void
name|StateManager9
operator|::
name|setScissorEnabled
parameter_list|(
name|bool
name|scissorEnabled
parameter_list|)
block|{
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_SCISSORTESTENABLE
argument_list|,
name|scissorEnabled
condition|?
name|TRUE
else|:
name|FALSE
argument_list|)
expr_stmt|;
name|mCurScissorEnabled
operator|=
name|scissorEnabled
expr_stmt|;
block|}
DECL|function|setScissorRect
name|void
name|StateManager9
operator|::
name|setScissorRect
parameter_list|(
specifier|const
name|gl
operator|::
name|Rectangle
modifier|&
name|scissor
parameter_list|,
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
return|return;
name|RECT
name|rect
decl_stmt|;
name|rect
operator|.
name|left
operator|=
name|gl
operator|::
name|clamp
argument_list|(
name|scissor
operator|.
name|x
argument_list|,
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|mRenderTargetBounds
operator|.
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|top
operator|=
name|gl
operator|::
name|clamp
argument_list|(
name|scissor
operator|.
name|y
argument_list|,
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|mRenderTargetBounds
operator|.
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|right
operator|=
name|gl
operator|::
name|clamp
argument_list|(
name|scissor
operator|.
name|x
operator|+
name|scissor
operator|.
name|width
argument_list|,
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|mRenderTargetBounds
operator|.
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|rect
operator|.
name|bottom
operator|=
name|gl
operator|::
name|clamp
argument_list|(
name|scissor
operator|.
name|y
operator|+
name|scissor
operator|.
name|height
argument_list|,
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|mRenderTargetBounds
operator|.
name|height
argument_list|)
argument_list|)
expr_stmt|;
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetScissorRect
argument_list|(
operator|&
name|rect
argument_list|)
expr_stmt|;
block|}
DECL|function|setDepthFunc
name|void
name|StateManager9
operator|::
name|setDepthFunc
parameter_list|(
name|bool
name|depthTest
parameter_list|,
name|GLenum
name|depthFunc
parameter_list|)
block|{
if|if
condition|(
name|depthTest
condition|)
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer9
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_ZENABLE
argument_list|,
name|D3DZB_TRUE
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_ZFUNC
argument_list|,
name|gl_d3d9
operator|::
name|ConvertComparison
argument_list|(
name|depthFunc
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_ZENABLE
argument_list|,
name|D3DZB_FALSE
argument_list|)
expr_stmt|;
block|}
name|mCurDepthStencilState
operator|.
name|depthTest
operator|=
name|depthTest
expr_stmt|;
name|mCurDepthStencilState
operator|.
name|depthFunc
operator|=
name|depthFunc
expr_stmt|;
block|}
DECL|function|setStencilOpsFront
name|void
name|StateManager9
operator|::
name|setStencilOpsFront
parameter_list|(
name|GLenum
name|stencilFail
parameter_list|,
name|GLenum
name|stencilPassDepthFail
parameter_list|,
name|GLenum
name|stencilPassDepthPass
parameter_list|,
name|bool
name|frontFaceCCW
parameter_list|)
block|{
comment|// TODO(dianx) It may be slightly more efficient todo these and other similar areas
comment|// with separate dirty bits.
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer9
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|frontFaceCCW
condition|?
name|D3DRS_STENCILFAIL
else|:
name|D3DRS_CCW_STENCILFAIL
argument_list|,
name|gl_d3d9
operator|::
name|ConvertStencilOp
argument_list|(
name|stencilFail
argument_list|)
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|frontFaceCCW
condition|?
name|D3DRS_STENCILZFAIL
else|:
name|D3DRS_CCW_STENCILZFAIL
argument_list|,
name|gl_d3d9
operator|::
name|ConvertStencilOp
argument_list|(
name|stencilPassDepthFail
argument_list|)
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|frontFaceCCW
condition|?
name|D3DRS_STENCILPASS
else|:
name|D3DRS_CCW_STENCILPASS
argument_list|,
name|gl_d3d9
operator|::
name|ConvertStencilOp
argument_list|(
name|stencilPassDepthPass
argument_list|)
argument_list|)
expr_stmt|;
name|mCurDepthStencilState
operator|.
name|stencilFail
operator|=
name|stencilFail
expr_stmt|;
name|mCurDepthStencilState
operator|.
name|stencilPassDepthFail
operator|=
name|stencilPassDepthFail
expr_stmt|;
name|mCurDepthStencilState
operator|.
name|stencilPassDepthPass
operator|=
name|stencilPassDepthPass
expr_stmt|;
block|}
DECL|function|setStencilOpsBack
name|void
name|StateManager9
operator|::
name|setStencilOpsBack
parameter_list|(
name|GLenum
name|stencilBackFail
parameter_list|,
name|GLenum
name|stencilBackPassDepthFail
parameter_list|,
name|GLenum
name|stencilBackPassDepthPass
parameter_list|,
name|bool
name|frontFaceCCW
parameter_list|)
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer9
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
operator|!
name|frontFaceCCW
condition|?
name|D3DRS_STENCILFAIL
else|:
name|D3DRS_CCW_STENCILFAIL
argument_list|,
name|gl_d3d9
operator|::
name|ConvertStencilOp
argument_list|(
name|stencilBackFail
argument_list|)
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
operator|!
name|frontFaceCCW
condition|?
name|D3DRS_STENCILZFAIL
else|:
name|D3DRS_CCW_STENCILZFAIL
argument_list|,
name|gl_d3d9
operator|::
name|ConvertStencilOp
argument_list|(
name|stencilBackPassDepthFail
argument_list|)
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
operator|!
name|frontFaceCCW
condition|?
name|D3DRS_STENCILPASS
else|:
name|D3DRS_CCW_STENCILPASS
argument_list|,
name|gl_d3d9
operator|::
name|ConvertStencilOp
argument_list|(
name|stencilBackPassDepthPass
argument_list|)
argument_list|)
expr_stmt|;
name|mCurDepthStencilState
operator|.
name|stencilBackFail
operator|=
name|stencilBackFail
expr_stmt|;
name|mCurDepthStencilState
operator|.
name|stencilBackPassDepthFail
operator|=
name|stencilBackPassDepthFail
expr_stmt|;
name|mCurDepthStencilState
operator|.
name|stencilBackPassDepthPass
operator|=
name|stencilBackPassDepthPass
expr_stmt|;
block|}
DECL|function|setStencilBackWriteMask
name|void
name|StateManager9
operator|::
name|setStencilBackWriteMask
parameter_list|(
name|GLuint
name|stencilBackWriteMask
parameter_list|,
name|bool
name|frontFaceCCW
parameter_list|)
block|{
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetRenderState
argument_list|(
operator|!
name|frontFaceCCW
condition|?
name|D3DRS_STENCILWRITEMASK
else|:
name|D3DRS_CCW_STENCILWRITEMASK
argument_list|,
name|stencilBackWriteMask
argument_list|)
expr_stmt|;
name|mCurDepthStencilState
operator|.
name|stencilBackWritemask
operator|=
name|stencilBackWriteMask
expr_stmt|;
block|}
DECL|function|setStencilFuncsBack
name|void
name|StateManager9
operator|::
name|setStencilFuncsBack
parameter_list|(
name|GLenum
name|stencilBackFunc
parameter_list|,
name|GLuint
name|stencilBackMask
parameter_list|,
name|GLint
name|stencilBackRef
parameter_list|,
name|bool
name|frontFaceCCW
parameter_list|,
name|unsigned
name|int
name|maxStencil
parameter_list|)
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer9
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
operator|!
name|frontFaceCCW
condition|?
name|D3DRS_STENCILFUNC
else|:
name|D3DRS_CCW_STENCILFUNC
argument_list|,
name|gl_d3d9
operator|::
name|ConvertComparison
argument_list|(
name|stencilBackFunc
argument_list|)
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
operator|!
name|frontFaceCCW
condition|?
name|D3DRS_STENCILREF
else|:
name|D3DRS_CCW_STENCILREF
argument_list|,
operator|(
name|stencilBackRef
operator|<
operator|(
name|int
operator|)
name|maxStencil
operator|)
condition|?
name|stencilBackRef
else|:
name|maxStencil
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
operator|!
name|frontFaceCCW
condition|?
name|D3DRS_STENCILMASK
else|:
name|D3DRS_CCW_STENCILMASK
argument_list|,
name|stencilBackMask
argument_list|)
expr_stmt|;
name|mCurDepthStencilState
operator|.
name|stencilBackFunc
operator|=
name|stencilBackFunc
expr_stmt|;
name|mCurStencilBackRef
operator|=
name|stencilBackRef
expr_stmt|;
name|mCurDepthStencilState
operator|.
name|stencilBackMask
operator|=
name|stencilBackMask
expr_stmt|;
block|}
DECL|function|setStencilWriteMask
name|void
name|StateManager9
operator|::
name|setStencilWriteMask
parameter_list|(
name|GLuint
name|stencilWriteMask
parameter_list|,
name|bool
name|frontFaceCCW
parameter_list|)
block|{
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetRenderState
argument_list|(
name|frontFaceCCW
condition|?
name|D3DRS_STENCILWRITEMASK
else|:
name|D3DRS_CCW_STENCILWRITEMASK
argument_list|,
name|stencilWriteMask
argument_list|)
expr_stmt|;
name|mCurDepthStencilState
operator|.
name|stencilWritemask
operator|=
name|stencilWriteMask
expr_stmt|;
block|}
DECL|function|setStencilFuncsFront
name|void
name|StateManager9
operator|::
name|setStencilFuncsFront
parameter_list|(
name|GLenum
name|stencilFunc
parameter_list|,
name|GLuint
name|stencilMask
parameter_list|,
name|GLint
name|stencilRef
parameter_list|,
name|bool
name|frontFaceCCW
parameter_list|,
name|unsigned
name|int
name|maxStencil
parameter_list|)
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer9
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|frontFaceCCW
condition|?
name|D3DRS_STENCILFUNC
else|:
name|D3DRS_CCW_STENCILFUNC
argument_list|,
name|gl_d3d9
operator|::
name|ConvertComparison
argument_list|(
name|stencilFunc
argument_list|)
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|frontFaceCCW
condition|?
name|D3DRS_STENCILREF
else|:
name|D3DRS_CCW_STENCILREF
argument_list|,
operator|(
name|stencilRef
operator|<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|maxStencil
argument_list|)
operator|)
condition|?
name|stencilRef
else|:
name|maxStencil
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|frontFaceCCW
condition|?
name|D3DRS_STENCILMASK
else|:
name|D3DRS_CCW_STENCILMASK
argument_list|,
name|stencilMask
argument_list|)
expr_stmt|;
name|mCurDepthStencilState
operator|.
name|stencilFunc
operator|=
name|stencilFunc
expr_stmt|;
name|mCurStencilRef
operator|=
name|stencilRef
expr_stmt|;
name|mCurDepthStencilState
operator|.
name|stencilMask
operator|=
name|stencilMask
expr_stmt|;
block|}
DECL|function|setStencilTestEnabled
name|void
name|StateManager9
operator|::
name|setStencilTestEnabled
parameter_list|(
name|bool
name|stencilTestEnabled
parameter_list|)
block|{
if|if
condition|(
name|stencilTestEnabled
operator|&&
name|mCurStencilSize
operator|>
literal|0
condition|)
block|{
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_STENCILENABLE
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_STENCILENABLE
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
block|}
name|mCurDepthStencilState
operator|.
name|stencilTest
operator|=
name|stencilTestEnabled
expr_stmt|;
block|}
DECL|function|setDepthMask
name|void
name|StateManager9
operator|::
name|setDepthMask
parameter_list|(
name|bool
name|depthMask
parameter_list|)
block|{
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_ZWRITEENABLE
argument_list|,
name|depthMask
condition|?
name|TRUE
else|:
name|FALSE
argument_list|)
expr_stmt|;
name|mCurDepthStencilState
operator|.
name|depthMask
operator|=
name|depthMask
expr_stmt|;
block|}
comment|// TODO(dianx) one bit for sampleAlphaToCoverage
DECL|function|setSampleAlphaToCoverage
name|void
name|StateManager9
operator|::
name|setSampleAlphaToCoverage
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|FIXME
argument_list|(
literal|"Sample alpha to coverage is unimplemented."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|setBlendColor
name|void
name|StateManager9
operator|::
name|setBlendColor
parameter_list|(
specifier|const
name|gl
operator|::
name|BlendState
modifier|&
name|blendState
parameter_list|,
specifier|const
name|gl
operator|::
name|ColorF
modifier|&
name|blendColor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|blendState
operator|.
name|blend
condition|)
return|return;
if|if
condition|(
name|blendState
operator|.
name|sourceBlendRGB
operator|!=
name|GL_CONSTANT_ALPHA
operator|&&
name|blendState
operator|.
name|sourceBlendRGB
operator|!=
name|GL_ONE_MINUS_CONSTANT_ALPHA
operator|&&
name|blendState
operator|.
name|destBlendRGB
operator|!=
name|GL_CONSTANT_ALPHA
operator|&&
name|blendState
operator|.
name|destBlendRGB
operator|!=
name|GL_ONE_MINUS_CONSTANT_ALPHA
condition|)
block|{
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_BLENDFACTOR
argument_list|,
name|gl_d3d9
operator|::
name|ConvertColor
argument_list|(
name|blendColor
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_BLENDFACTOR
argument_list|,
name|D3DCOLOR_RGBA
argument_list|(
name|gl
operator|::
name|unorm
argument_list|<
literal|8
argument_list|>
argument_list|(
name|blendColor
operator|.
name|alpha
argument_list|)
argument_list|,
name|gl
operator|::
name|unorm
argument_list|<
literal|8
argument_list|>
argument_list|(
name|blendColor
operator|.
name|alpha
argument_list|)
argument_list|,
name|gl
operator|::
name|unorm
argument_list|<
literal|8
argument_list|>
argument_list|(
name|blendColor
operator|.
name|alpha
argument_list|)
argument_list|,
name|gl
operator|::
name|unorm
argument_list|<
literal|8
argument_list|>
argument_list|(
name|blendColor
operator|.
name|alpha
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mCurBlendColor
operator|=
name|blendColor
expr_stmt|;
block|}
DECL|function|setBlendFuncsEquations
name|void
name|StateManager9
operator|::
name|setBlendFuncsEquations
parameter_list|(
specifier|const
name|gl
operator|::
name|BlendState
modifier|&
name|blendState
parameter_list|)
block|{
if|if
condition|(
operator|!
name|blendState
operator|.
name|blend
condition|)
return|return;
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer9
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_SRCBLEND
argument_list|,
name|gl_d3d9
operator|::
name|ConvertBlendFunc
argument_list|(
name|blendState
operator|.
name|sourceBlendRGB
argument_list|)
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_DESTBLEND
argument_list|,
name|gl_d3d9
operator|::
name|ConvertBlendFunc
argument_list|(
name|blendState
operator|.
name|destBlendRGB
argument_list|)
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_BLENDOP
argument_list|,
name|gl_d3d9
operator|::
name|ConvertBlendOp
argument_list|(
name|blendState
operator|.
name|blendEquationRGB
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|blendState
operator|.
name|sourceBlendRGB
operator|!=
name|blendState
operator|.
name|sourceBlendAlpha
operator|||
name|blendState
operator|.
name|destBlendRGB
operator|!=
name|blendState
operator|.
name|destBlendAlpha
operator|||
name|blendState
operator|.
name|blendEquationRGB
operator|!=
name|blendState
operator|.
name|blendEquationAlpha
condition|)
block|{
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_SEPARATEALPHABLENDENABLE
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_SRCBLENDALPHA
argument_list|,
name|gl_d3d9
operator|::
name|ConvertBlendFunc
argument_list|(
name|blendState
operator|.
name|sourceBlendAlpha
argument_list|)
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_DESTBLENDALPHA
argument_list|,
name|gl_d3d9
operator|::
name|ConvertBlendFunc
argument_list|(
name|blendState
operator|.
name|destBlendAlpha
argument_list|)
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_BLENDOPALPHA
argument_list|,
name|gl_d3d9
operator|::
name|ConvertBlendOp
argument_list|(
name|blendState
operator|.
name|blendEquationAlpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_SEPARATEALPHABLENDENABLE
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
block|}
name|mCurBlendState
operator|.
name|sourceBlendRGB
operator|=
name|blendState
operator|.
name|sourceBlendRGB
expr_stmt|;
name|mCurBlendState
operator|.
name|destBlendRGB
operator|=
name|blendState
operator|.
name|destBlendRGB
expr_stmt|;
name|mCurBlendState
operator|.
name|blendEquationRGB
operator|=
name|blendState
operator|.
name|blendEquationRGB
expr_stmt|;
name|mCurBlendState
operator|.
name|blendEquationAlpha
operator|=
name|blendState
operator|.
name|blendEquationAlpha
expr_stmt|;
block|}
DECL|function|setBlendEnabled
name|void
name|StateManager9
operator|::
name|setBlendEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_ALPHABLENDENABLE
argument_list|,
name|enabled
condition|?
name|TRUE
else|:
name|FALSE
argument_list|)
expr_stmt|;
name|mCurBlendState
operator|.
name|blend
operator|=
name|enabled
expr_stmt|;
block|}
DECL|function|setDither
name|void
name|StateManager9
operator|::
name|setDither
parameter_list|(
name|bool
name|dither
parameter_list|)
block|{
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_DITHERENABLE
argument_list|,
name|dither
condition|?
name|TRUE
else|:
name|FALSE
argument_list|)
expr_stmt|;
name|mCurBlendState
operator|.
name|dither
operator|=
name|dither
expr_stmt|;
block|}
comment|// TODO(dianx) one bit for color mask
DECL|function|setColorMask
name|void
name|StateManager9
operator|::
name|setColorMask
parameter_list|(
specifier|const
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
parameter_list|,
name|bool
name|red
parameter_list|,
name|bool
name|blue
parameter_list|,
name|bool
name|green
parameter_list|,
name|bool
name|alpha
parameter_list|)
block|{
comment|// Set the color mask
name|bool
name|zeroColorMaskAllowed
init|=
name|mRenderer9
operator|->
name|getVendorId
argument_list|()
operator|!=
name|VENDOR_ID_AMD
decl_stmt|;
comment|// Apparently some ATI cards have a bug where a draw with a zero color
comment|// write mask can cause later draws to have incorrect results. Instead,
comment|// set a nonzero color write mask but modify the blend state so that no
comment|// drawing is done.
comment|// http://code.google.com/p/angleproject/issues/detail?id=169
specifier|const
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|attachment
init|=
name|framebuffer
operator|->
name|getFirstColorbuffer
argument_list|()
decl_stmt|;
name|GLenum
name|internalFormat
init|=
name|attachment
condition|?
name|attachment
operator|->
name|getInternalFormat
argument_list|()
else|:
name|GL_NONE
decl_stmt|;
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
name|DWORD
name|colorMask
init|=
name|gl_d3d9
operator|::
name|ConvertColorMask
argument_list|(
name|formatInfo
operator|.
name|redBits
operator|>
literal|0
operator|&&
name|red
argument_list|,
name|formatInfo
operator|.
name|greenBits
operator|>
literal|0
operator|&&
name|green
argument_list|,
name|formatInfo
operator|.
name|blueBits
operator|>
literal|0
operator|&&
name|blue
argument_list|,
name|formatInfo
operator|.
name|alphaBits
operator|>
literal|0
operator|&&
name|alpha
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorMask
operator|==
literal|0
operator|&&
operator|!
name|zeroColorMaskAllowed
condition|)
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer9
operator|->
name|getDevice
argument_list|()
decl_stmt|;
comment|// Enable green channel, but set blending so nothing will be drawn.
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_COLORWRITEENABLE
argument_list|,
name|D3DCOLORWRITEENABLE_GREEN
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_ALPHABLENDENABLE
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_SRCBLEND
argument_list|,
name|D3DBLEND_ZERO
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_DESTBLEND
argument_list|,
name|D3DBLEND_ONE
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_BLENDOP
argument_list|,
name|D3DBLENDOP_ADD
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_COLORWRITEENABLE
argument_list|,
name|colorMask
argument_list|)
expr_stmt|;
block|}
name|mCurBlendState
operator|.
name|colorMaskRed
operator|=
name|red
expr_stmt|;
name|mCurBlendState
operator|.
name|colorMaskGreen
operator|=
name|green
expr_stmt|;
name|mCurBlendState
operator|.
name|colorMaskBlue
operator|=
name|blue
expr_stmt|;
name|mCurBlendState
operator|.
name|colorMaskAlpha
operator|=
name|alpha
expr_stmt|;
block|}
DECL|function|setSampleMask
name|void
name|StateManager9
operator|::
name|setSampleMask
parameter_list|(
name|unsigned
name|int
name|sampleMask
parameter_list|)
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer9
operator|->
name|getDevice
argument_list|()
decl_stmt|;
comment|// Set the multisample mask
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_MULTISAMPLEANTIALIAS
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_MULTISAMPLEMASK
argument_list|,
cast|static_cast
argument_list|<
name|DWORD
argument_list|>
argument_list|(
name|sampleMask
argument_list|)
argument_list|)
expr_stmt|;
name|mCurSampleMask
operator|=
name|sampleMask
expr_stmt|;
block|}
DECL|function|setCullMode
name|void
name|StateManager9
operator|::
name|setCullMode
parameter_list|(
name|bool
name|cullFace
parameter_list|,
name|GLenum
name|cullMode
parameter_list|,
name|GLenum
name|frontFace
parameter_list|)
block|{
if|if
condition|(
name|cullFace
condition|)
block|{
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_CULLMODE
argument_list|,
name|gl_d3d9
operator|::
name|ConvertCullMode
argument_list|(
name|cullMode
argument_list|,
name|frontFace
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mRenderer9
operator|->
name|getDevice
argument_list|()
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_CULLMODE
argument_list|,
name|D3DCULL_NONE
argument_list|)
expr_stmt|;
block|}
name|mCurRasterState
operator|.
name|cullFace
operator|=
name|cullFace
expr_stmt|;
name|mCurRasterState
operator|.
name|cullMode
operator|=
name|cullMode
expr_stmt|;
name|mCurRasterState
operator|.
name|frontFace
operator|=
name|frontFace
expr_stmt|;
block|}
DECL|function|setDepthBias
name|void
name|StateManager9
operator|::
name|setDepthBias
parameter_list|(
name|bool
name|polygonOffsetFill
parameter_list|,
name|GLfloat
name|polygonOffsetFactor
parameter_list|,
name|GLfloat
name|polygonOffsetUnits
parameter_list|)
block|{
if|if
condition|(
name|polygonOffsetFill
condition|)
block|{
if|if
condition|(
name|mCurDepthSize
operator|>
literal|0
condition|)
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer9
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_SLOPESCALEDEPTHBIAS
argument_list|,
operator|*
operator|(
name|DWORD
operator|*
operator|)
operator|&
name|polygonOffsetFactor
argument_list|)
expr_stmt|;
name|float
name|depthBias
init|=
name|ldexp
argument_list|(
name|polygonOffsetUnits
argument_list|,
operator|-
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|mCurDepthSize
argument_list|)
argument_list|)
decl_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_DEPTHBIAS
argument_list|,
operator|*
operator|(
name|DWORD
operator|*
operator|)
operator|&
name|depthBias
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer9
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_SLOPESCALEDEPTHBIAS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_DEPTHBIAS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|mCurRasterState
operator|.
name|polygonOffsetFill
operator|=
name|polygonOffsetFill
expr_stmt|;
name|mCurRasterState
operator|.
name|polygonOffsetFactor
operator|=
name|polygonOffsetFactor
expr_stmt|;
name|mCurRasterState
operator|.
name|polygonOffsetUnits
operator|=
name|polygonOffsetUnits
expr_stmt|;
block|}
DECL|function|updateDepthSizeIfChanged
name|void
name|StateManager9
operator|::
name|updateDepthSizeIfChanged
parameter_list|(
name|bool
name|depthStencilInitialized
parameter_list|,
name|unsigned
name|int
name|depthSize
parameter_list|)
block|{
if|if
condition|(
operator|!
name|depthStencilInitialized
operator|||
name|depthSize
operator|!=
name|mCurDepthSize
condition|)
block|{
name|mCurDepthSize
operator|=
name|depthSize
expr_stmt|;
name|forceSetRasterState
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_namespace
begin_comment
comment|// namespace rx
end_comment
end_unit
