begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// TextureStorage9.cpp: Implements the abstract rx::TextureStorage9 class and its concrete derived
end_comment
begin_comment
comment|// classes TextureStorage9_2D and TextureStorage9_Cube, which act as the interface to the
end_comment
begin_comment
comment|// D3D9 texture.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d9/TextureStorage9.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d9/Renderer9.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d9/SwapChain9.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d9/RenderTarget9.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d9/renderer9_utils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d9/formatutils9.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/TextureD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Texture.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|TextureStorage9
name|TextureStorage9
operator|::
name|TextureStorage9
parameter_list|(
name|Renderer9
modifier|*
name|renderer
parameter_list|,
name|DWORD
name|usage
parameter_list|)
member_init_list|:
name|mTopLevel
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mMipLevels
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mTextureWidth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mTextureHeight
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mInternalFormat
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|mTextureFormat
argument_list|(
name|D3DFMT_UNKNOWN
argument_list|)
member_init_list|,
name|mRenderer
argument_list|(
name|Renderer9
operator|::
name|makeRenderer9
argument_list|(
name|renderer
argument_list|)
argument_list|)
member_init_list|,
name|mD3DUsage
argument_list|(
name|usage
argument_list|)
member_init_list|,
name|mD3DPool
argument_list|(
name|mRenderer
operator|->
name|getTexturePool
argument_list|(
name|usage
argument_list|)
argument_list|)
block|{ }
DECL|function|~TextureStorage9
name|TextureStorage9
operator|::
name|~
name|TextureStorage9
parameter_list|()
block|{ }
DECL|function|makeTextureStorage9
name|TextureStorage9
modifier|*
name|TextureStorage9
operator|::
name|makeTextureStorage9
parameter_list|(
name|TextureStorage
modifier|*
name|storage
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|TextureStorage9
operator|*
argument_list|,
name|storage
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|TextureStorage9
operator|*
argument_list|>
argument_list|(
name|storage
argument_list|)
return|;
block|}
DECL|function|GetTextureUsage
name|DWORD
name|TextureStorage9
operator|::
name|GetTextureUsage
parameter_list|(
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|renderTarget
parameter_list|)
block|{
name|DWORD
name|d3dusage
init|=
literal|0
decl_stmt|;
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
specifier|const
name|d3d9
operator|::
name|TextureFormat
modifier|&
name|d3dFormatInfo
init|=
name|d3d9
operator|::
name|GetTextureFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatInfo
operator|.
name|depthBits
operator|>
literal|0
operator|||
name|formatInfo
operator|.
name|stencilBits
operator|>
literal|0
condition|)
block|{
name|d3dusage
operator||=
name|D3DUSAGE_DEPTHSTENCIL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|renderTarget
operator|&&
operator|(
name|d3dFormatInfo
operator|.
name|renderFormat
operator|!=
name|D3DFMT_UNKNOWN
operator|)
condition|)
block|{
name|d3dusage
operator||=
name|D3DUSAGE_RENDERTARGET
expr_stmt|;
block|}
return|return
name|d3dusage
return|;
block|}
DECL|function|isRenderTarget
name|bool
name|TextureStorage9
operator|::
name|isRenderTarget
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mD3DUsage
operator|&
operator|(
name|D3DUSAGE_RENDERTARGET
operator||
name|D3DUSAGE_DEPTHSTENCIL
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
DECL|function|isManaged
name|bool
name|TextureStorage9
operator|::
name|isManaged
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mD3DPool
operator|==
name|D3DPOOL_MANAGED
operator|)
return|;
block|}
DECL|function|getPool
name|D3DPOOL
name|TextureStorage9
operator|::
name|getPool
parameter_list|()
specifier|const
block|{
return|return
name|mD3DPool
return|;
block|}
DECL|function|getUsage
name|DWORD
name|TextureStorage9
operator|::
name|getUsage
parameter_list|()
specifier|const
block|{
return|return
name|mD3DUsage
return|;
block|}
DECL|function|getTopLevel
name|int
name|TextureStorage9
operator|::
name|getTopLevel
parameter_list|()
specifier|const
block|{
return|return
name|mTopLevel
return|;
block|}
DECL|function|getLevelCount
name|int
name|TextureStorage9
operator|::
name|getLevelCount
parameter_list|()
specifier|const
block|{
return|return
name|mMipLevels
operator|-
name|mTopLevel
return|;
block|}
DECL|function|setData
name|gl
operator|::
name|Error
name|TextureStorage9
operator|::
name|setData
parameter_list|(
specifier|const
name|gl
operator|::
name|ImageIndex
modifier|&
name|index
parameter_list|,
name|ImageD3D
modifier|*
name|image
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|*
name|destBox
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|gl
operator|::
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|pixelData
parameter_list|)
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
return|;
block|}
DECL|function|TextureStorage9_2D
name|TextureStorage9_2D
operator|::
name|TextureStorage9_2D
parameter_list|(
name|Renderer9
modifier|*
name|renderer
parameter_list|,
name|SwapChain9
modifier|*
name|swapchain
parameter_list|)
member_init_list|:
name|TextureStorage9
argument_list|(
name|renderer
argument_list|,
name|D3DUSAGE_RENDERTARGET
argument_list|)
block|{
name|IDirect3DTexture9
modifier|*
name|surfaceTexture
init|=
name|swapchain
operator|->
name|getOffscreenTexture
argument_list|()
decl_stmt|;
name|mTexture
operator|=
name|surfaceTexture
expr_stmt|;
name|mMipLevels
operator|=
name|surfaceTexture
operator|->
name|GetLevelCount
argument_list|()
expr_stmt|;
name|mInternalFormat
operator|=
name|swapchain
operator|->
name|GetBackBufferInternalFormat
argument_list|()
expr_stmt|;
name|D3DSURFACE_DESC
name|surfaceDesc
decl_stmt|;
name|surfaceTexture
operator|->
name|GetLevelDesc
argument_list|(
literal|0
argument_list|,
operator|&
name|surfaceDesc
argument_list|)
expr_stmt|;
name|mTextureWidth
operator|=
name|surfaceDesc
operator|.
name|Width
expr_stmt|;
name|mTextureHeight
operator|=
name|surfaceDesc
operator|.
name|Height
expr_stmt|;
name|mTextureFormat
operator|=
name|surfaceDesc
operator|.
name|Format
expr_stmt|;
name|mRenderTarget
operator|=
name|NULL
expr_stmt|;
name|initializeSerials
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|function|TextureStorage9_2D
name|TextureStorage9_2D
operator|::
name|TextureStorage9_2D
parameter_list|(
name|Renderer9
modifier|*
name|renderer
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|renderTarget
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|levels
parameter_list|)
member_init_list|:
name|TextureStorage9
argument_list|(
name|renderer
argument_list|,
name|GetTextureUsage
argument_list|(
name|internalformat
argument_list|,
name|renderTarget
argument_list|)
argument_list|)
block|{
name|mTexture
operator|=
name|NULL
expr_stmt|;
name|mRenderTarget
operator|=
name|NULL
expr_stmt|;
name|mInternalFormat
operator|=
name|internalformat
expr_stmt|;
specifier|const
name|d3d9
operator|::
name|TextureFormat
modifier|&
name|d3dFormatInfo
init|=
name|d3d9
operator|::
name|GetTextureFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
name|mTextureFormat
operator|=
name|d3dFormatInfo
operator|.
name|texFormat
expr_stmt|;
name|d3d9
operator|::
name|MakeValidSize
argument_list|(
literal|false
argument_list|,
name|d3dFormatInfo
operator|.
name|texFormat
argument_list|,
operator|&
name|width
argument_list|,
operator|&
name|height
argument_list|,
operator|&
name|mTopLevel
argument_list|)
expr_stmt|;
name|mTextureWidth
operator|=
name|width
expr_stmt|;
name|mTextureHeight
operator|=
name|height
expr_stmt|;
name|mMipLevels
operator|=
name|mTopLevel
operator|+
name|levels
expr_stmt|;
name|initializeSerials
argument_list|(
name|getLevelCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|function|~TextureStorage9_2D
name|TextureStorage9_2D
operator|::
name|~
name|TextureStorage9_2D
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mTexture
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mRenderTarget
argument_list|)
expr_stmt|;
block|}
DECL|function|makeTextureStorage9_2D
name|TextureStorage9_2D
modifier|*
name|TextureStorage9_2D
operator|::
name|makeTextureStorage9_2D
parameter_list|(
name|TextureStorage
modifier|*
name|storage
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|TextureStorage9_2D
operator|*
argument_list|,
name|storage
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|TextureStorage9_2D
operator|*
argument_list|>
argument_list|(
name|storage
argument_list|)
return|;
block|}
comment|// Increments refcount on surface.
comment|// caller must Release() the returned surface
DECL|function|getSurfaceLevel
name|gl
operator|::
name|Error
name|TextureStorage9_2D
operator|::
name|getSurfaceLevel
parameter_list|(
name|int
name|level
parameter_list|,
name|bool
name|dirty
parameter_list|,
name|IDirect3DSurface9
modifier|*
modifier|*
name|outSurface
parameter_list|)
block|{
name|IDirect3DBaseTexture9
modifier|*
name|baseTexture
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|getBaseTexture
argument_list|(
operator|&
name|baseTexture
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|IDirect3DTexture9
modifier|*
name|texture
init|=
cast|static_cast
argument_list|<
name|IDirect3DTexture9
operator|*
argument_list|>
argument_list|(
name|baseTexture
argument_list|)
decl_stmt|;
name|HRESULT
name|result
init|=
name|texture
operator|->
name|GetSurfaceLevel
argument_list|(
name|level
operator|+
name|mTopLevel
argument_list|,
name|outSurface
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to get the surface from a texture, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
comment|// With managed textures the driver needs to be informed of updates to the lower mipmap levels
if|if
condition|(
name|level
operator|+
name|mTopLevel
operator|!=
literal|0
operator|&&
name|isManaged
argument_list|()
operator|&&
name|dirty
condition|)
block|{
name|texture
operator|->
name|AddDirtyRect
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getRenderTarget
name|gl
operator|::
name|Error
name|TextureStorage9_2D
operator|::
name|getRenderTarget
parameter_list|(
specifier|const
name|gl
operator|::
name|ImageIndex
modifier|&
comment|/*index*/
parameter_list|,
name|RenderTargetD3D
modifier|*
modifier|*
name|outRT
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mRenderTarget
operator|&&
name|isRenderTarget
argument_list|()
condition|)
block|{
name|IDirect3DSurface9
modifier|*
name|surface
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|getSurfaceLevel
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
operator|&
name|surface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|mRenderTarget
operator|=
operator|new
name|TextureRenderTarget9
argument_list|(
name|surface
argument_list|,
name|mInternalFormat
argument_list|,
name|mTextureWidth
argument_list|,
name|mTextureHeight
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|ASSERT
argument_list|(
name|outRT
argument_list|)
expr_stmt|;
operator|*
name|outRT
operator|=
name|mRenderTarget
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|generateMipmap
name|gl
operator|::
name|Error
name|TextureStorage9_2D
operator|::
name|generateMipmap
parameter_list|(
specifier|const
name|gl
operator|::
name|ImageIndex
modifier|&
name|sourceIndex
parameter_list|,
specifier|const
name|gl
operator|::
name|ImageIndex
modifier|&
name|destIndex
parameter_list|)
block|{
name|IDirect3DSurface9
modifier|*
name|upper
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|getSurfaceLevel
argument_list|(
name|sourceIndex
operator|.
name|mipIndex
argument_list|,
literal|false
argument_list|,
operator|&
name|upper
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|IDirect3DSurface9
modifier|*
name|lower
init|=
name|NULL
decl_stmt|;
name|error
operator|=
name|getSurfaceLevel
argument_list|(
name|destIndex
operator|.
name|mipIndex
argument_list|,
literal|true
argument_list|,
operator|&
name|lower
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SafeRelease
argument_list|(
name|upper
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|ASSERT
argument_list|(
name|upper
operator|&&
name|lower
argument_list|)
expr_stmt|;
name|error
operator|=
name|mRenderer
operator|->
name|boxFilter
argument_list|(
name|upper
argument_list|,
name|lower
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|upper
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|lower
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
DECL|function|getBaseTexture
name|gl
operator|::
name|Error
name|TextureStorage9_2D
operator|::
name|getBaseTexture
parameter_list|(
name|IDirect3DBaseTexture9
modifier|*
modifier|*
name|outTexture
parameter_list|)
block|{
comment|// if the width or height is not positive this should be treated as an incomplete texture
comment|// we handle that here by skipping the d3d texture creation
if|if
condition|(
name|mTexture
operator|==
name|NULL
operator|&&
name|mTextureWidth
operator|>
literal|0
operator|&&
name|mTextureHeight
operator|>
literal|0
condition|)
block|{
name|ASSERT
argument_list|(
name|mMipLevels
operator|>
literal|0
argument_list|)
expr_stmt|;
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateTexture
argument_list|(
name|mTextureWidth
argument_list|,
name|mTextureHeight
argument_list|,
name|mMipLevels
argument_list|,
name|getUsage
argument_list|()
argument_list|,
name|mTextureFormat
argument_list|,
name|getPool
argument_list|()
argument_list|,
operator|&
name|mTexture
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|D3DERR_OUTOFVIDEOMEMORY
operator|||
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to create 2D storage texture, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
block|}
operator|*
name|outTexture
operator|=
name|mTexture
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|copyToStorage
name|gl
operator|::
name|Error
name|TextureStorage9_2D
operator|::
name|copyToStorage
parameter_list|(
name|TextureStorage
modifier|*
name|destStorage
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|destStorage
argument_list|)
expr_stmt|;
name|TextureStorage9_2D
modifier|*
name|dest9
init|=
name|TextureStorage9_2D
operator|::
name|makeTextureStorage9_2D
argument_list|(
name|destStorage
argument_list|)
decl_stmt|;
name|int
name|levels
init|=
name|getLevelCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|levels
condition|;
operator|++
name|i
control|)
block|{
name|IDirect3DSurface9
modifier|*
name|srcSurf
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|getSurfaceLevel
argument_list|(
name|i
argument_list|,
literal|false
argument_list|,
operator|&
name|srcSurf
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|IDirect3DSurface9
modifier|*
name|dstSurf
init|=
name|NULL
decl_stmt|;
name|error
operator|=
name|dest9
operator|->
name|getSurfaceLevel
argument_list|(
name|i
argument_list|,
literal|true
argument_list|,
operator|&
name|dstSurf
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SafeRelease
argument_list|(
name|srcSurf
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|error
operator|=
name|mRenderer
operator|->
name|copyToRenderTarget
argument_list|(
name|dstSurf
argument_list|,
name|srcSurf
argument_list|,
name|isManaged
argument_list|()
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|srcSurf
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|dstSurf
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|TextureStorage9_Cube
name|TextureStorage9_Cube
operator|::
name|TextureStorage9_Cube
parameter_list|(
name|Renderer9
modifier|*
name|renderer
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|renderTarget
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|levels
parameter_list|,
name|bool
name|hintLevelZeroOnly
parameter_list|)
member_init_list|:
name|TextureStorage9
argument_list|(
name|renderer
argument_list|,
name|GetTextureUsage
argument_list|(
name|internalformat
argument_list|,
name|renderTarget
argument_list|)
argument_list|)
block|{
name|mTexture
operator|=
name|NULL
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CUBE_FACE_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|mRenderTarget
index|[
name|i
index|]
operator|=
name|NULL
expr_stmt|;
block|}
name|mInternalFormat
operator|=
name|internalformat
expr_stmt|;
specifier|const
name|d3d9
operator|::
name|TextureFormat
modifier|&
name|d3dFormatInfo
init|=
name|d3d9
operator|::
name|GetTextureFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
name|mTextureFormat
operator|=
name|d3dFormatInfo
operator|.
name|texFormat
expr_stmt|;
name|int
name|height
init|=
name|size
decl_stmt|;
name|d3d9
operator|::
name|MakeValidSize
argument_list|(
literal|false
argument_list|,
name|d3dFormatInfo
operator|.
name|texFormat
argument_list|,
operator|&
name|size
argument_list|,
operator|&
name|height
argument_list|,
operator|&
name|mTopLevel
argument_list|)
expr_stmt|;
name|mTextureWidth
operator|=
name|size
expr_stmt|;
name|mTextureHeight
operator|=
name|size
expr_stmt|;
name|mMipLevels
operator|=
name|mTopLevel
operator|+
name|levels
expr_stmt|;
name|initializeSerials
argument_list|(
name|getLevelCount
argument_list|()
operator|*
name|CUBE_FACE_COUNT
argument_list|,
name|CUBE_FACE_COUNT
argument_list|)
expr_stmt|;
block|}
DECL|function|~TextureStorage9_Cube
name|TextureStorage9_Cube
operator|::
name|~
name|TextureStorage9_Cube
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mTexture
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CUBE_FACE_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|SafeDelete
argument_list|(
name|mRenderTarget
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|makeTextureStorage9_Cube
name|TextureStorage9_Cube
modifier|*
name|TextureStorage9_Cube
operator|::
name|makeTextureStorage9_Cube
parameter_list|(
name|TextureStorage
modifier|*
name|storage
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|TextureStorage9_Cube
operator|*
argument_list|,
name|storage
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|TextureStorage9_Cube
operator|*
argument_list|>
argument_list|(
name|storage
argument_list|)
return|;
block|}
comment|// Increments refcount on surface.
comment|// caller must Release() the returned surface
DECL|function|getCubeMapSurface
name|gl
operator|::
name|Error
name|TextureStorage9_Cube
operator|::
name|getCubeMapSurface
parameter_list|(
name|GLenum
name|faceTarget
parameter_list|,
name|int
name|level
parameter_list|,
name|bool
name|dirty
parameter_list|,
name|IDirect3DSurface9
modifier|*
modifier|*
name|outSurface
parameter_list|)
block|{
name|IDirect3DBaseTexture9
modifier|*
name|baseTexture
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|getBaseTexture
argument_list|(
operator|&
name|baseTexture
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|IDirect3DCubeTexture9
modifier|*
name|texture
init|=
cast|static_cast
argument_list|<
name|IDirect3DCubeTexture9
operator|*
argument_list|>
argument_list|(
name|baseTexture
argument_list|)
decl_stmt|;
name|D3DCUBEMAP_FACES
name|face
init|=
name|gl_d3d9
operator|::
name|ConvertCubeFace
argument_list|(
name|faceTarget
argument_list|)
decl_stmt|;
name|HRESULT
name|result
init|=
name|texture
operator|->
name|GetCubeMapSurface
argument_list|(
name|face
argument_list|,
name|level
operator|+
name|mTopLevel
argument_list|,
name|outSurface
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to get the surface from a texture, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
comment|// With managed textures the driver needs to be informed of updates to the lower mipmap levels
if|if
condition|(
name|level
operator|!=
literal|0
operator|&&
name|isManaged
argument_list|()
operator|&&
name|dirty
condition|)
block|{
name|texture
operator|->
name|AddDirtyRect
argument_list|(
name|face
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getRenderTarget
name|gl
operator|::
name|Error
name|TextureStorage9_Cube
operator|::
name|getRenderTarget
parameter_list|(
specifier|const
name|gl
operator|::
name|ImageIndex
modifier|&
name|index
parameter_list|,
name|RenderTargetD3D
modifier|*
modifier|*
name|outRT
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|outRT
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|index
operator|.
name|mipIndex
operator|==
literal|0
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|index
operator|.
name|layerIndex
operator|>=
literal|0
operator|&&
name|index
operator|.
name|layerIndex
operator|<
name|CUBE_FACE_COUNT
argument_list|)
expr_stmt|;
if|if
condition|(
name|mRenderTarget
index|[
name|index
operator|.
name|layerIndex
index|]
operator|==
name|NULL
operator|&&
name|isRenderTarget
argument_list|()
condition|)
block|{
name|IDirect3DSurface9
modifier|*
name|surface
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|getCubeMapSurface
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|+
name|index
operator|.
name|layerIndex
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
operator|&
name|surface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|mRenderTarget
index|[
name|index
operator|.
name|layerIndex
index|]
operator|=
operator|new
name|TextureRenderTarget9
argument_list|(
name|surface
argument_list|,
name|mInternalFormat
argument_list|,
name|mTextureWidth
argument_list|,
name|mTextureHeight
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
operator|*
name|outRT
operator|=
name|mRenderTarget
index|[
name|index
operator|.
name|layerIndex
index|]
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|generateMipmap
name|gl
operator|::
name|Error
name|TextureStorage9_Cube
operator|::
name|generateMipmap
parameter_list|(
specifier|const
name|gl
operator|::
name|ImageIndex
modifier|&
name|sourceIndex
parameter_list|,
specifier|const
name|gl
operator|::
name|ImageIndex
modifier|&
name|destIndex
parameter_list|)
block|{
name|IDirect3DSurface9
modifier|*
name|upper
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|getCubeMapSurface
argument_list|(
name|sourceIndex
operator|.
name|type
argument_list|,
name|sourceIndex
operator|.
name|mipIndex
argument_list|,
literal|false
argument_list|,
operator|&
name|upper
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|IDirect3DSurface9
modifier|*
name|lower
init|=
name|NULL
decl_stmt|;
name|error
operator|=
name|getCubeMapSurface
argument_list|(
name|destIndex
operator|.
name|type
argument_list|,
name|destIndex
operator|.
name|mipIndex
argument_list|,
literal|true
argument_list|,
operator|&
name|lower
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SafeRelease
argument_list|(
name|upper
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|ASSERT
argument_list|(
name|upper
operator|&&
name|lower
argument_list|)
expr_stmt|;
name|error
operator|=
name|mRenderer
operator|->
name|boxFilter
argument_list|(
name|upper
argument_list|,
name|lower
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|upper
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|lower
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
DECL|function|getBaseTexture
name|gl
operator|::
name|Error
name|TextureStorage9_Cube
operator|::
name|getBaseTexture
parameter_list|(
name|IDirect3DBaseTexture9
modifier|*
modifier|*
name|outTexture
parameter_list|)
block|{
comment|// if the size is not positive this should be treated as an incomplete texture
comment|// we handle that here by skipping the d3d texture creation
if|if
condition|(
name|mTexture
operator|==
name|NULL
operator|&&
name|mTextureWidth
operator|>
literal|0
operator|&&
name|mTextureHeight
operator|>
literal|0
condition|)
block|{
name|ASSERT
argument_list|(
name|mMipLevels
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|mTextureWidth
operator|==
name|mTextureHeight
argument_list|)
expr_stmt|;
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateCubeTexture
argument_list|(
name|mTextureWidth
argument_list|,
name|mMipLevels
argument_list|,
name|getUsage
argument_list|()
argument_list|,
name|mTextureFormat
argument_list|,
name|getPool
argument_list|()
argument_list|,
operator|&
name|mTexture
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|D3DERR_OUTOFVIDEOMEMORY
operator|||
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to create cube storage texture, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
block|}
operator|*
name|outTexture
operator|=
name|mTexture
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|copyToStorage
name|gl
operator|::
name|Error
name|TextureStorage9_Cube
operator|::
name|copyToStorage
parameter_list|(
name|TextureStorage
modifier|*
name|destStorage
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|destStorage
argument_list|)
expr_stmt|;
name|TextureStorage9_Cube
modifier|*
name|dest9
init|=
name|TextureStorage9_Cube
operator|::
name|makeTextureStorage9_Cube
argument_list|(
name|destStorage
argument_list|)
decl_stmt|;
name|int
name|levels
init|=
name|getLevelCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|CUBE_FACE_COUNT
condition|;
name|f
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|levels
condition|;
name|i
operator|++
control|)
block|{
name|IDirect3DSurface9
modifier|*
name|srcSurf
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|getCubeMapSurface
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|+
name|f
argument_list|,
name|i
argument_list|,
literal|false
argument_list|,
operator|&
name|srcSurf
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|IDirect3DSurface9
modifier|*
name|dstSurf
init|=
name|NULL
decl_stmt|;
name|error
operator|=
name|dest9
operator|->
name|getCubeMapSurface
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|+
name|f
argument_list|,
name|i
argument_list|,
literal|true
argument_list|,
operator|&
name|dstSurf
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SafeRelease
argument_list|(
name|srcSurf
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|error
operator|=
name|mRenderer
operator|->
name|copyToRenderTarget
argument_list|(
name|dstSurf
argument_list|,
name|srcSurf
argument_list|,
name|isManaged
argument_list|()
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|srcSurf
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|dstSurf
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
block|}
end_namespace
end_unit
