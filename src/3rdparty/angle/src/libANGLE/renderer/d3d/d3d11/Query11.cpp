begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Query11.cpp: Defines the rx::Query11 class which implements rx::QueryImpl.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Query11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|<GLES2/gl2ext.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_MINGW32_COMPAT
argument_list|)
end_if
begin_typedef
DECL|struct|D3D11_QUERY_DATA_SO_STATISTICS
typedef|typedef
struct|struct
name|D3D11_QUERY_DATA_SO_STATISTICS
block|{
DECL|member|NumPrimitivesWritten
name|UINT64
name|NumPrimitivesWritten
decl_stmt|;
DECL|member|PrimitivesStorageNeeded
name|UINT64
name|PrimitivesStorageNeeded
decl_stmt|;
block|}
DECL|typedef|D3D11_QUERY_DATA_SO_STATISTICS
name|D3D11_QUERY_DATA_SO_STATISTICS
typedef|;
end_typedef
begin_typedef
DECL|struct|D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
typedef|typedef
struct|struct
name|D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
block|{
DECL|member|Frequency
name|UINT64
name|Frequency
decl_stmt|;
DECL|member|Disjoint
name|BOOL
name|Disjoint
decl_stmt|;
block|}
DECL|typedef|D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
name|D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|Query11
name|Query11
operator|::
name|Query11
parameter_list|(
name|Renderer11
modifier|*
name|renderer
parameter_list|,
name|GLenum
name|type
parameter_list|)
member_init_list|:
name|QueryImpl
argument_list|(
name|type
argument_list|)
member_init_list|,
name|mResult
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mQueryFinished
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mRenderer
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mQuery
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mTimestampBeginQuery
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mTimestampEndQuery
argument_list|(
literal|nullptr
argument_list|)
block|{ }
DECL|function|~Query11
name|Query11
operator|::
name|~
name|Query11
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mQuery
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mTimestampBeginQuery
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mTimestampEndQuery
argument_list|)
expr_stmt|;
block|}
DECL|function|begin
name|gl
operator|::
name|Error
name|Query11
operator|::
name|begin
parameter_list|()
block|{
if|if
condition|(
name|mQuery
operator|==
literal|nullptr
condition|)
block|{
name|D3D11_QUERY_DESC
name|queryDesc
decl_stmt|;
name|queryDesc
operator|.
name|Query
operator|=
name|gl_d3d11
operator|::
name|ConvertQueryType
argument_list|(
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|queryDesc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateQuery
argument_list|(
operator|&
name|queryDesc
argument_list|,
operator|&
name|mQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Internal query creation failed, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
comment|// If we are doing time elapsed we also need a query to actually query the timestamp
if|if
condition|(
name|getType
argument_list|()
operator|==
name|GL_TIME_ELAPSED_EXT
condition|)
block|{
name|D3D11_QUERY_DESC
name|desc
decl_stmt|;
name|desc
operator|.
name|Query
operator|=
name|D3D11_QUERY_TIMESTAMP
expr_stmt|;
name|desc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateQuery
argument_list|(
operator|&
name|desc
argument_list|,
operator|&
name|mTimestampBeginQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Internal query creation failed, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
name|result
operator|=
name|device
operator|->
name|CreateQuery
argument_list|(
operator|&
name|desc
argument_list|,
operator|&
name|mTimestampEndQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Internal query creation failed, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
block|}
block|}
name|ID3D11DeviceContext
modifier|*
name|context
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|context
operator|->
name|Begin
argument_list|(
name|mQuery
argument_list|)
expr_stmt|;
comment|// If we are doing time elapsed query the begin timestamp
if|if
condition|(
name|getType
argument_list|()
operator|==
name|GL_TIME_ELAPSED_EXT
condition|)
block|{
name|context
operator|->
name|End
argument_list|(
name|mTimestampBeginQuery
argument_list|)
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|end
name|gl
operator|::
name|Error
name|Query11
operator|::
name|end
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|mQuery
argument_list|)
expr_stmt|;
name|ID3D11DeviceContext
modifier|*
name|context
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
comment|// If we are doing time elapsed query the end timestamp
if|if
condition|(
name|getType
argument_list|()
operator|==
name|GL_TIME_ELAPSED_EXT
condition|)
block|{
name|context
operator|->
name|End
argument_list|(
name|mTimestampEndQuery
argument_list|)
expr_stmt|;
block|}
name|context
operator|->
name|End
argument_list|(
name|mQuery
argument_list|)
expr_stmt|;
name|mQueryFinished
operator|=
literal|false
expr_stmt|;
name|mResult
operator|=
name|GL_FALSE
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|queryCounter
name|gl
operator|::
name|Error
name|Query11
operator|::
name|queryCounter
parameter_list|()
block|{
comment|// This doesn't do anything for D3D11 as we don't support timestamps
name|ASSERT
argument_list|(
name|getType
argument_list|()
operator|==
name|GL_TIMESTAMP_EXT
argument_list|)
expr_stmt|;
name|mQueryFinished
operator|=
literal|true
expr_stmt|;
name|mResult
operator|=
literal|0
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|getResultBase
name|gl
operator|::
name|Error
name|Query11
operator|::
name|getResultBase
parameter_list|(
name|T
modifier|*
name|params
parameter_list|)
block|{
while|while
condition|(
operator|!
name|mQueryFinished
condition|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|testQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
if|if
condition|(
operator|!
name|mQueryFinished
condition|)
block|{
name|ScheduleYield
argument_list|()
expr_stmt|;
block|}
block|}
name|ASSERT
argument_list|(
name|mQueryFinished
argument_list|)
expr_stmt|;
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|T
argument_list|>
argument_list|(
name|mResult
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getResult
name|gl
operator|::
name|Error
name|Query11
operator|::
name|getResult
parameter_list|(
name|GLint
modifier|*
name|params
parameter_list|)
block|{
return|return
name|getResultBase
argument_list|(
name|params
argument_list|)
return|;
block|}
DECL|function|getResult
name|gl
operator|::
name|Error
name|Query11
operator|::
name|getResult
parameter_list|(
name|GLuint
modifier|*
name|params
parameter_list|)
block|{
return|return
name|getResultBase
argument_list|(
name|params
argument_list|)
return|;
block|}
DECL|function|getResult
name|gl
operator|::
name|Error
name|Query11
operator|::
name|getResult
parameter_list|(
name|GLint64
modifier|*
name|params
parameter_list|)
block|{
return|return
name|getResultBase
argument_list|(
name|params
argument_list|)
return|;
block|}
DECL|function|getResult
name|gl
operator|::
name|Error
name|Query11
operator|::
name|getResult
parameter_list|(
name|GLuint64
modifier|*
name|params
parameter_list|)
block|{
return|return
name|getResultBase
argument_list|(
name|params
argument_list|)
return|;
block|}
DECL|function|isResultAvailable
name|gl
operator|::
name|Error
name|Query11
operator|::
name|isResultAvailable
parameter_list|(
name|bool
modifier|*
name|available
parameter_list|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|testQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
operator|*
name|available
operator|=
name|mQueryFinished
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|testQuery
name|gl
operator|::
name|Error
name|Query11
operator|::
name|testQuery
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mQueryFinished
condition|)
block|{
name|ASSERT
argument_list|(
name|mQuery
argument_list|)
expr_stmt|;
name|ID3D11DeviceContext
modifier|*
name|context
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|getType
argument_list|()
condition|)
block|{
case|case
name|GL_ANY_SAMPLES_PASSED_EXT
case|:
case|case
name|GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT
case|:
block|{
name|UINT64
name|numPixels
init|=
literal|0
decl_stmt|;
name|HRESULT
name|result
init|=
name|context
operator|->
name|GetData
argument_list|(
name|mQuery
argument_list|,
operator|&
name|numPixels
argument_list|,
sizeof|sizeof
argument_list|(
name|numPixels
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to get the data of an internal query, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
if|if
condition|(
name|result
operator|==
name|S_OK
condition|)
block|{
name|mQueryFinished
operator|=
literal|true
expr_stmt|;
name|mResult
operator|=
operator|(
name|numPixels
operator|>
literal|0
operator|)
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
expr_stmt|;
block|}
block|}
break|break;
case|case
name|GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
case|:
block|{
name|D3D11_QUERY_DATA_SO_STATISTICS
name|soStats
init|=
block|{
literal|0
block|}
decl_stmt|;
name|HRESULT
name|result
init|=
name|context
operator|->
name|GetData
argument_list|(
name|mQuery
argument_list|,
operator|&
name|soStats
argument_list|,
sizeof|sizeof
argument_list|(
name|soStats
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to get the data of an internal query, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
if|if
condition|(
name|result
operator|==
name|S_OK
condition|)
block|{
name|mQueryFinished
operator|=
literal|true
expr_stmt|;
name|mResult
operator|=
cast|static_cast
argument_list|<
name|GLuint64
argument_list|>
argument_list|(
name|soStats
operator|.
name|NumPrimitivesWritten
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|GL_TIME_ELAPSED_EXT
case|:
block|{
name|D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
name|timeStats
init|=
block|{
literal|0
block|}
decl_stmt|;
name|HRESULT
name|result
init|=
name|context
operator|->
name|GetData
argument_list|(
name|mQuery
argument_list|,
operator|&
name|timeStats
argument_list|,
sizeof|sizeof
argument_list|(
name|timeStats
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to get the data of an internal query, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
if|if
condition|(
name|result
operator|==
name|S_OK
condition|)
block|{
name|UINT64
name|beginTime
init|=
literal|0
decl_stmt|;
name|HRESULT
name|beginRes
init|=
name|context
operator|->
name|GetData
argument_list|(
name|mTimestampBeginQuery
argument_list|,
operator|&
name|beginTime
argument_list|,
sizeof|sizeof
argument_list|(
name|UINT64
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|beginRes
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to get the data of an internal query, result: 0x%X."
argument_list|,
name|beginRes
argument_list|)
return|;
block|}
name|UINT64
name|endTime
init|=
literal|0
decl_stmt|;
name|HRESULT
name|endRes
init|=
name|context
operator|->
name|GetData
argument_list|(
name|mTimestampEndQuery
argument_list|,
operator|&
name|endTime
argument_list|,
sizeof|sizeof
argument_list|(
name|UINT64
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|endRes
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to get the data of an internal query, result: 0x%X."
argument_list|,
name|endRes
argument_list|)
return|;
block|}
if|if
condition|(
name|beginRes
operator|==
name|S_OK
operator|&&
name|endRes
operator|==
name|S_OK
condition|)
block|{
name|mQueryFinished
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|timeStats
operator|.
name|Disjoint
condition|)
block|{
name|mRenderer
operator|->
name|setGPUDisjoint
argument_list|()
expr_stmt|;
block|}
assert|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|UINT64
argument_list|)
operator|==
expr|sizeof
operator|(
name|unsigned
name|long
name|long
operator|)
argument_list|,
literal|"D3D UINT64 isn't 64 bits"
argument_list|)
assert|;
if|if
condition|(
name|rx
operator|::
name|IsUnsignedMultiplicationSafe
argument_list|(
name|endTime
operator|-
name|beginTime
argument_list|,
literal|1000000000ull
argument_list|)
condition|)
block|{
name|mResult
operator|=
operator|(
operator|(
name|endTime
operator|-
name|beginTime
operator|)
operator|*
literal|1000000000ull
operator|)
operator|/
name|timeStats
operator|.
name|Frequency
expr_stmt|;
block|}
else|else
block|{
name|mResult
operator|=
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLuint64
argument_list|>
operator|::
name|max
argument_list|()
operator|/
name|timeStats
operator|.
name|Frequency
expr_stmt|;
comment|// If an overflow does somehow occur, there is no way the elapsed time
comment|// is accurate, so we generate a disjoint event
name|mRenderer
operator|->
name|setGPUDisjoint
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
break|break;
case|case
name|GL_TIMESTAMP_EXT
case|:
block|{
comment|// D3D11 doesn't support GL timestamp queries as D3D timestamps are not guaranteed
comment|// to have any sort of continuity outside of a disjoint timestamp query block, which
comment|// GL depends on
name|mResult
operator|=
literal|0
expr_stmt|;
block|}
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|mQueryFinished
operator|&&
name|mRenderer
operator|->
name|testDeviceLost
argument_list|()
condition|)
block|{
name|mRenderer
operator|->
name|notifyDeviceLost
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to test get query result, device is lost."
argument_list|)
return|;
block|}
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
block|}
end_namespace
end_unit
