begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// NativeWindow.cpp: Handler for managing HWND native window types.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/NativeWindow.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|<initguid.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__MINGW32__
argument_list|)
end_if
begin_include
include|#
directive|include
file|<dcomp.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|NativeWindow
name|NativeWindow
operator|::
name|NativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|,
specifier|const
name|egl
operator|::
name|Config
modifier|*
name|config
parameter_list|,
name|bool
name|directComposition
parameter_list|)
member_init_list|:
name|mWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|mDirectComposition
argument_list|(
name|directComposition
argument_list|)
member_init_list|,
name|mDevice
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mCompositionTarget
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mVisual
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mConfig
argument_list|(
name|config
argument_list|)
block|{ }
DECL|function|~NativeWindow
name|NativeWindow
operator|::
name|~
name|NativeWindow
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__MINGW32__
argument_list|)
name|SafeRelease
argument_list|(
name|mCompositionTarget
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mDevice
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mVisual
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|initialize
name|bool
name|NativeWindow
operator|::
name|initialize
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|function|getClientRect
name|bool
name|NativeWindow
operator|::
name|getClientRect
parameter_list|(
name|LPRECT
name|rect
parameter_list|)
block|{
return|return
name|GetClientRect
argument_list|(
name|mWindow
argument_list|,
name|rect
argument_list|)
operator|==
name|TRUE
return|;
block|}
DECL|function|isIconic
name|bool
name|NativeWindow
operator|::
name|isIconic
parameter_list|()
block|{
return|return
name|IsIconic
argument_list|(
name|mWindow
argument_list|)
operator|==
name|TRUE
return|;
block|}
DECL|function|isValidNativeWindow
name|bool
name|NativeWindow
operator|::
name|isValidNativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
block|{
return|return
name|IsWindow
argument_list|(
name|window
argument_list|)
operator|==
name|TRUE
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
DECL|function|createSwapChain
name|HRESULT
name|NativeWindow
operator|::
name|createSwapChain
parameter_list|(
name|ID3D11Device
modifier|*
name|device
parameter_list|,
name|DXGIFactory
modifier|*
name|factory
parameter_list|,
name|DXGI_FORMAT
name|format
parameter_list|,
name|unsigned
name|int
name|width
parameter_list|,
name|unsigned
name|int
name|height
parameter_list|,
name|DXGISwapChain
modifier|*
modifier|*
name|swapChain
parameter_list|)
block|{
if|if
condition|(
name|device
operator|==
name|NULL
operator|||
name|factory
operator|==
name|NULL
operator|||
name|swapChain
operator|==
name|NULL
operator|||
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
condition|)
block|{
return|return
name|E_INVALIDARG
return|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__MINGW32__
argument_list|)
if|if
condition|(
name|mDirectComposition
condition|)
block|{
name|HMODULE
name|dcomp
init|=
operator|::
name|GetModuleHandle
argument_list|(
name|TEXT
argument_list|(
literal|"dcomp.dll"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dcomp
condition|)
block|{
return|return
name|E_INVALIDARG
return|;
block|}
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|PFN_DCOMPOSITION_CREATE_DEVICE
function_decl|)
parameter_list|(
name|IDXGIDevice
modifier|*
name|dxgiDevice
parameter_list|,
name|REFIID
name|iid
parameter_list|,
name|void
modifier|*
modifier|*
name|dcompositionDevice
parameter_list|)
function_decl|;
name|PFN_DCOMPOSITION_CREATE_DEVICE
name|createDComp
init|=
cast|reinterpret_cast
argument_list|<
name|PFN_DCOMPOSITION_CREATE_DEVICE
argument_list|>
argument_list|(
name|GetProcAddress
argument_list|(
name|dcomp
argument_list|,
literal|"DCompositionCreateDevice"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|createDComp
condition|)
block|{
return|return
name|E_INVALIDARG
return|;
block|}
if|if
condition|(
operator|!
name|mDevice
condition|)
block|{
name|IDXGIDevice
modifier|*
name|dxgiDevice
init|=
name|d3d11
operator|::
name|DynamicCastComObject
argument_list|<
name|IDXGIDevice
argument_list|>
argument_list|(
name|device
argument_list|)
decl_stmt|;
name|HRESULT
name|result
init|=
name|createDComp
argument_list|(
name|dxgiDevice
argument_list|,
name|__uuidof
argument_list|(
name|IDCompositionDevice
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|mDevice
argument_list|)
argument_list|)
decl_stmt|;
name|SafeRelease
argument_list|(
name|dxgiDevice
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
if|if
condition|(
operator|!
name|mCompositionTarget
condition|)
block|{
name|HRESULT
name|result
init|=
name|mDevice
operator|->
name|CreateTargetForHwnd
argument_list|(
name|mWindow
argument_list|,
name|TRUE
argument_list|,
operator|&
name|mCompositionTarget
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
if|if
condition|(
operator|!
name|mVisual
condition|)
block|{
name|HRESULT
name|result
init|=
name|mDevice
operator|->
name|CreateVisual
argument_list|(
operator|&
name|mVisual
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
name|IDXGIFactory2
modifier|*
name|factory2
init|=
name|d3d11
operator|::
name|DynamicCastComObject
argument_list|<
name|IDXGIFactory2
argument_list|>
argument_list|(
name|factory
argument_list|)
decl_stmt|;
name|DXGI_SWAP_CHAIN_DESC1
name|swapChainDesc
init|=
block|{
literal|0
block|}
decl_stmt|;
name|swapChainDesc
operator|.
name|Width
operator|=
name|width
expr_stmt|;
name|swapChainDesc
operator|.
name|Height
operator|=
name|height
expr_stmt|;
name|swapChainDesc
operator|.
name|Format
operator|=
name|format
expr_stmt|;
name|swapChainDesc
operator|.
name|Stereo
operator|=
name|FALSE
expr_stmt|;
name|swapChainDesc
operator|.
name|SampleDesc
operator|.
name|Count
operator|=
literal|1
expr_stmt|;
name|swapChainDesc
operator|.
name|SampleDesc
operator|.
name|Quality
operator|=
literal|0
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferUsage
operator|=
name|DXGI_USAGE_RENDER_TARGET_OUTPUT
operator||
name|DXGI_USAGE_BACK_BUFFER
operator||
name|DXGI_USAGE_SHADER_INPUT
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferCount
operator|=
literal|2
expr_stmt|;
name|swapChainDesc
operator|.
name|Scaling
operator|=
name|DXGI_SCALING_STRETCH
expr_stmt|;
name|swapChainDesc
operator|.
name|SwapEffect
operator|=
name|DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL
expr_stmt|;
name|swapChainDesc
operator|.
name|AlphaMode
operator|=
name|mConfig
operator|->
name|alphaSize
operator|==
literal|0
condition|?
name|DXGI_ALPHA_MODE_IGNORE
else|:
name|DXGI_ALPHA_MODE_PREMULTIPLIED
expr_stmt|;
name|swapChainDesc
operator|.
name|Flags
operator|=
literal|0
expr_stmt|;
name|IDXGISwapChain1
modifier|*
name|swapChain1
init|=
literal|nullptr
decl_stmt|;
name|HRESULT
name|result
init|=
name|factory2
operator|->
name|CreateSwapChainForComposition
argument_list|(
name|device
argument_list|,
operator|&
name|swapChainDesc
argument_list|,
literal|nullptr
argument_list|,
operator|&
name|swapChain1
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
operator|*
name|swapChain
operator|=
cast|static_cast
argument_list|<
name|DXGISwapChain
operator|*
argument_list|>
argument_list|(
name|swapChain1
argument_list|)
expr_stmt|;
block|}
name|mVisual
operator|->
name|SetContent
argument_list|(
name|swapChain1
argument_list|)
expr_stmt|;
name|mCompositionTarget
operator|->
name|SetRoot
argument_list|(
name|mVisual
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|factory2
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Use IDXGIFactory2::CreateSwapChainForHwnd if DXGI 1.2 is available to create a DXGI_SWAP_EFFECT_SEQUENTIAL swap chain.
name|IDXGIFactory2
modifier|*
name|factory2
init|=
name|d3d11
operator|::
name|DynamicCastComObject
argument_list|<
name|IDXGIFactory2
argument_list|>
argument_list|(
name|factory
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory2
operator|!=
literal|nullptr
condition|)
block|{
name|DXGI_SWAP_CHAIN_DESC1
name|swapChainDesc
init|=
block|{
literal|0
block|}
decl_stmt|;
name|swapChainDesc
operator|.
name|Width
operator|=
name|width
expr_stmt|;
name|swapChainDesc
operator|.
name|Height
operator|=
name|height
expr_stmt|;
name|swapChainDesc
operator|.
name|Format
operator|=
name|format
expr_stmt|;
name|swapChainDesc
operator|.
name|Stereo
operator|=
name|FALSE
expr_stmt|;
name|swapChainDesc
operator|.
name|SampleDesc
operator|.
name|Count
operator|=
literal|1
expr_stmt|;
name|swapChainDesc
operator|.
name|SampleDesc
operator|.
name|Quality
operator|=
literal|0
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferUsage
operator|=
name|DXGI_USAGE_RENDER_TARGET_OUTPUT
operator||
name|DXGI_USAGE_SHADER_INPUT
operator||
name|DXGI_USAGE_BACK_BUFFER
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferCount
operator|=
literal|1
expr_stmt|;
name|swapChainDesc
operator|.
name|Scaling
operator|=
name|DXGI_SCALING_STRETCH
expr_stmt|;
name|swapChainDesc
operator|.
name|SwapEffect
operator|=
name|DXGI_SWAP_EFFECT_SEQUENTIAL
expr_stmt|;
name|swapChainDesc
operator|.
name|AlphaMode
operator|=
name|DXGI_ALPHA_MODE_UNSPECIFIED
expr_stmt|;
name|swapChainDesc
operator|.
name|Flags
operator|=
literal|0
expr_stmt|;
name|IDXGISwapChain1
modifier|*
name|swapChain1
init|=
literal|nullptr
decl_stmt|;
name|HRESULT
name|result
init|=
name|factory2
operator|->
name|CreateSwapChainForHwnd
argument_list|(
name|device
argument_list|,
name|mWindow
argument_list|,
operator|&
name|swapChainDesc
argument_list|,
literal|nullptr
argument_list|,
literal|nullptr
argument_list|,
operator|&
name|swapChain1
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
specifier|const
name|HRESULT
name|makeWindowAssociationResult
init|=
name|factory
operator|->
name|MakeWindowAssociation
argument_list|(
name|mWindow
argument_list|,
name|DXGI_MWA_NO_ALT_ENTER
argument_list|)
decl_stmt|;
name|UNUSED_VARIABLE
argument_list|(
name|makeWindowAssociationResult
argument_list|)
expr_stmt|;
operator|*
name|swapChain
operator|=
cast|static_cast
argument_list|<
name|DXGISwapChain
operator|*
argument_list|>
argument_list|(
name|swapChain1
argument_list|)
expr_stmt|;
block|}
name|SafeRelease
argument_list|(
name|factory2
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
endif|#
directive|endif
comment|// !__MINGW32__
name|DXGI_SWAP_CHAIN_DESC
name|swapChainDesc
init|=
block|{}
decl_stmt|;
name|swapChainDesc
operator|.
name|BufferCount
operator|=
literal|1
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferDesc
operator|.
name|Format
operator|=
name|format
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferDesc
operator|.
name|Width
operator|=
name|width
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferDesc
operator|.
name|Height
operator|=
name|height
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferDesc
operator|.
name|Scaling
operator|=
name|DXGI_MODE_SCALING_UNSPECIFIED
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferDesc
operator|.
name|ScanlineOrdering
operator|=
name|DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferDesc
operator|.
name|RefreshRate
operator|.
name|Numerator
operator|=
literal|0
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferDesc
operator|.
name|RefreshRate
operator|.
name|Denominator
operator|=
literal|1
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferUsage
operator|=
name|DXGI_USAGE_RENDER_TARGET_OUTPUT
operator||
name|DXGI_USAGE_SHADER_INPUT
operator||
name|DXGI_USAGE_BACK_BUFFER
expr_stmt|;
name|swapChainDesc
operator|.
name|Flags
operator|=
literal|0
expr_stmt|;
name|swapChainDesc
operator|.
name|OutputWindow
operator|=
name|mWindow
expr_stmt|;
name|swapChainDesc
operator|.
name|SampleDesc
operator|.
name|Count
operator|=
literal|1
expr_stmt|;
name|swapChainDesc
operator|.
name|SampleDesc
operator|.
name|Quality
operator|=
literal|0
expr_stmt|;
name|swapChainDesc
operator|.
name|Windowed
operator|=
name|TRUE
expr_stmt|;
name|swapChainDesc
operator|.
name|SwapEffect
operator|=
name|DXGI_SWAP_EFFECT_DISCARD
expr_stmt|;
specifier|const
name|HRESULT
name|result
init|=
name|factory
operator|->
name|CreateSwapChain
argument_list|(
name|device
argument_list|,
operator|&
name|swapChainDesc
argument_list|,
name|swapChain
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
specifier|const
name|HRESULT
name|makeWindowAssociationResult
init|=
name|factory
operator|->
name|MakeWindowAssociation
argument_list|(
name|mWindow
argument_list|,
name|DXGI_MWA_NO_ALT_ENTER
argument_list|)
decl_stmt|;
name|UNUSED_VARIABLE
argument_list|(
name|makeWindowAssociationResult
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
endif|#
directive|endif
DECL|function|commitChange
name|void
name|NativeWindow
operator|::
name|commitChange
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__MINGW32__
argument_list|)
if|if
condition|(
name|mDevice
condition|)
block|{
name|mDevice
operator|->
name|Commit
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
block|}
end_namespace
end_unit
