begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// InspectableNativeWindow.cpp: NativeWindow base class for managing IInspectable native window types.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/winrt/CoreWindowNativeWindow.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/winrt/SwapChainPanelNativeWindow.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|NativeWindow
name|NativeWindow
operator|::
name|NativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
block|{
name|mWindow
operator|=
name|window
expr_stmt|;
block|}
DECL|function|initialize
name|bool
name|NativeWindow
operator|::
name|initialize
parameter_list|()
block|{
comment|// If the native window type is a IPropertySet, extract the
comment|// EGLNativeWindowType (IInspectable) and initialize the
comment|// proper host with this IPropertySet.
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Collections
operator|::
name|IPropertySet
argument_list|>
name|propertySet
decl_stmt|;
name|ComPtr
argument_list|<
name|IInspectable
argument_list|>
name|eglNativeWindow
decl_stmt|;
if|if
condition|(
name|IsEGLConfiguredPropertySet
argument_list|(
name|mWindow
argument_list|,
operator|&
name|propertySet
argument_list|,
operator|&
name|eglNativeWindow
argument_list|)
condition|)
block|{
comment|// A property set was found and the EGLNativeWindowType was
comment|// retrieved. The mWindow member of the host to must be updated
comment|// to use the EGLNativeWindowType specified in the property set.
comment|// mWindow is treated as a raw pointer not an AddRef'd interface, so
comment|// the old mWindow does not need a Release() before this assignment.
name|mWindow
operator|=
name|eglNativeWindow
operator|.
name|Get
argument_list|()
expr_stmt|;
block|}
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
argument_list|>
name|coreWindow
decl_stmt|;
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
operator|::
name|Controls
operator|::
name|ISwapChainPanel
argument_list|>
name|swapChainPanel
decl_stmt|;
if|if
condition|(
name|IsCoreWindow
argument_list|(
name|mWindow
argument_list|,
operator|&
name|coreWindow
argument_list|)
condition|)
block|{
name|mImpl
operator|=
name|std
operator|::
name|make_shared
argument_list|<
name|CoreWindowNativeWindow
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|mImpl
condition|)
block|{
return|return
name|mImpl
operator|->
name|initialize
argument_list|(
name|mWindow
argument_list|,
name|propertySet
operator|.
name|Get
argument_list|()
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|IsSwapChainPanel
argument_list|(
name|mWindow
argument_list|,
operator|&
name|swapChainPanel
argument_list|)
condition|)
block|{
name|mImpl
operator|=
name|std
operator|::
name|make_shared
argument_list|<
name|SwapChainPanelNativeWindow
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|mImpl
condition|)
block|{
return|return
name|mImpl
operator|->
name|initialize
argument_list|(
name|mWindow
argument_list|,
name|propertySet
operator|.
name|Get
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|ERR
argument_list|(
literal|"Invalid IInspectable EGLNativeWindowType detected. Valid IInspectables include ICoreWindow, ISwapChainPanel and IPropertySet"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|getClientRect
name|bool
name|NativeWindow
operator|::
name|getClientRect
parameter_list|(
name|RECT
modifier|*
name|rect
parameter_list|)
block|{
if|if
condition|(
name|mImpl
condition|)
block|{
return|return
name|mImpl
operator|->
name|getClientRect
argument_list|(
name|rect
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
operator|&&
operator|(
name|WINAPI_FAMILY
operator|==
name|WINAPI_FAMILY_PHONE_APP
operator|)
DECL|function|rotationFlags
name|NativeWindow
operator|::
name|RotationFlags
name|NativeWindow
operator|::
name|rotationFlags
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|mImpl
condition|)
block|{
return|return
name|mImpl
operator|->
name|rotationFlags
argument_list|()
return|;
block|}
return|return
name|NativeWindow
operator|::
name|RotateNone
return|;
block|}
endif|#
directive|endif
DECL|function|isIconic
name|bool
name|NativeWindow
operator|::
name|isIconic
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|function|isValidNativeWindow
name|bool
name|NativeWindow
operator|::
name|isValidNativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
block|{
return|return
name|IsValidEGLNativeWindowType
argument_list|(
name|window
argument_list|)
return|;
block|}
DECL|function|createSwapChain
name|HRESULT
name|NativeWindow
operator|::
name|createSwapChain
parameter_list|(
name|ID3D11Device
modifier|*
name|device
parameter_list|,
name|DXGIFactory
modifier|*
name|factory
parameter_list|,
name|DXGI_FORMAT
name|format
parameter_list|,
name|unsigned
name|int
name|width
parameter_list|,
name|unsigned
name|int
name|height
parameter_list|,
name|DXGISwapChain
modifier|*
modifier|*
name|swapChain
parameter_list|)
block|{
if|if
condition|(
name|mImpl
condition|)
block|{
return|return
name|mImpl
operator|->
name|createSwapChain
argument_list|(
name|device
argument_list|,
name|factory
argument_list|,
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|swapChain
argument_list|)
return|;
block|}
return|return
name|E_UNEXPECTED
return|;
block|}
DECL|function|IsCoreWindow
name|bool
name|IsCoreWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|,
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
argument_list|>
modifier|*
name|coreWindow
parameter_list|)
block|{
if|if
condition|(
operator|!
name|window
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ComPtr
argument_list|<
name|IInspectable
argument_list|>
name|win
init|=
name|window
decl_stmt|;
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
argument_list|>
name|coreWin
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|win
operator|.
name|As
argument_list|(
operator|&
name|coreWin
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|coreWindow
operator|!=
literal|nullptr
condition|)
block|{
operator|*
name|coreWindow
operator|=
name|coreWin
operator|.
name|Detach
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|IsSwapChainPanel
name|bool
name|IsSwapChainPanel
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|,
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
operator|::
name|Controls
operator|::
name|ISwapChainPanel
argument_list|>
modifier|*
name|swapChainPanel
parameter_list|)
block|{
if|if
condition|(
operator|!
name|window
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ComPtr
argument_list|<
name|IInspectable
argument_list|>
name|win
init|=
name|window
decl_stmt|;
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
operator|::
name|Controls
operator|::
name|ISwapChainPanel
argument_list|>
name|panel
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|win
operator|.
name|As
argument_list|(
operator|&
name|panel
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|swapChainPanel
operator|!=
literal|nullptr
condition|)
block|{
operator|*
name|swapChainPanel
operator|=
name|panel
operator|.
name|Detach
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|IsEGLConfiguredPropertySet
name|bool
name|IsEGLConfiguredPropertySet
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|,
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Collections
operator|::
name|IPropertySet
modifier|*
modifier|*
name|propertySet
parameter_list|,
name|IInspectable
modifier|*
modifier|*
name|eglNativeWindow
parameter_list|)
block|{
if|if
condition|(
operator|!
name|window
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ComPtr
argument_list|<
name|IInspectable
argument_list|>
name|props
init|=
name|window
decl_stmt|;
name|ComPtr
argument_list|<
name|IPropertySet
argument_list|>
name|propSet
decl_stmt|;
name|ComPtr
argument_list|<
name|IInspectable
argument_list|>
name|nativeWindow
decl_stmt|;
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Collections
operator|::
name|IMap
argument_list|<
name|HSTRING
argument_list|,
name|IInspectable
modifier|*
argument_list|>
argument_list|>
name|propMap
decl_stmt|;
name|boolean
name|hasEglNativeWindowPropertyKey
init|=
literal|false
decl_stmt|;
name|HRESULT
name|result
init|=
name|props
operator|.
name|As
argument_list|(
operator|&
name|propSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|propSet
operator|.
name|As
argument_list|(
operator|&
name|propMap
argument_list|)
expr_stmt|;
block|}
comment|// Look for the presence of the EGLNativeWindowType in the property set
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|propMap
operator|->
name|HasKey
argument_list|(
name|HStringReference
argument_list|(
name|EGLNativeWindowTypeProperty
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|hasEglNativeWindowPropertyKey
argument_list|)
expr_stmt|;
block|}
comment|// If the IPropertySet does not contain the required EglNativeWindowType key, the property set is
comment|// considered invalid.
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
operator|&&
operator|!
name|hasEglNativeWindowPropertyKey
condition|)
block|{
name|ERR
argument_list|(
literal|"Could not find EGLNativeWindowTypeProperty in IPropertySet. Valid EGLNativeWindowTypeProperty values include ICoreWindow"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// The EglNativeWindowType property exists, so retreive the IInspectable that represents the EGLNativeWindowType
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
operator|&&
name|hasEglNativeWindowPropertyKey
condition|)
block|{
name|result
operator|=
name|propMap
operator|->
name|Lookup
argument_list|(
name|HStringReference
argument_list|(
name|EGLNativeWindowTypeProperty
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|nativeWindow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
if|if
condition|(
name|propertySet
operator|!=
literal|nullptr
condition|)
block|{
name|result
operator|=
name|propSet
operator|.
name|CopyTo
argument_list|(
name|propertySet
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
if|if
condition|(
name|eglNativeWindow
operator|!=
literal|nullptr
condition|)
block|{
name|result
operator|=
name|nativeWindow
operator|.
name|CopyTo
argument_list|(
name|eglNativeWindow
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// A Valid EGLNativeWindowType IInspectable can only be:
comment|//
comment|// ICoreWindow
comment|// IPropertySet
comment|//
comment|// Anything else will be rejected as an invalid IInspectable.
DECL|function|IsValidEGLNativeWindowType
name|bool
name|IsValidEGLNativeWindowType
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
block|{
return|return
name|IsCoreWindow
argument_list|(
name|window
argument_list|)
operator|||
name|IsSwapChainPanel
argument_list|(
name|window
argument_list|)
operator|||
name|IsEGLConfiguredPropertySet
argument_list|(
name|window
argument_list|)
return|;
block|}
comment|// Attempts to read an optional SIZE property value that is assumed to be in the form of
comment|// an ABI::Windows::Foundation::Size.  This function validates the Size value before returning
comment|// it to the caller.
comment|//
comment|// Possible return values are:
comment|// S_OK, valueExists == true - optional SIZE value was successfully retrieved and validated
comment|// S_OK, valueExists == false - optional SIZE value was not found
comment|// E_INVALIDARG, valueExists = false - optional SIZE value was malformed in the property set.
comment|//    * Incorrect property type ( must be PropertyType_Size)
comment|//    * Invalid property value (width/height must be> 0)
comment|// Additional errors may be returned from IMap or IPropertyValue
comment|//
DECL|function|GetOptionalSizePropertyValue
name|HRESULT
name|GetOptionalSizePropertyValue
parameter_list|(
specifier|const
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Collections
operator|::
name|IMap
argument_list|<
name|HSTRING
argument_list|,
name|IInspectable
modifier|*
argument_list|>
argument_list|>
modifier|&
name|propertyMap
parameter_list|,
specifier|const
name|wchar_t
modifier|*
name|propertyName
parameter_list|,
name|SIZE
modifier|*
name|value
parameter_list|,
name|bool
modifier|*
name|valueExists
parameter_list|)
block|{
if|if
condition|(
operator|!
name|propertyMap
operator|||
operator|!
name|propertyName
operator|||
operator|!
name|value
operator|||
operator|!
name|valueExists
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Assume that the value does not exist
operator|*
name|valueExists
operator|=
literal|false
expr_stmt|;
operator|*
name|value
operator|=
block|{
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|IPropertyValue
argument_list|>
name|propertyValue
decl_stmt|;
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|PropertyType
name|propertyType
init|=
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|PropertyType
operator|::
name|PropertyType_Empty
decl_stmt|;
name|Size
name|sizeValue
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|boolean
name|hasKey
init|=
literal|false
decl_stmt|;
name|HRESULT
name|result
init|=
name|propertyMap
operator|->
name|HasKey
argument_list|(
name|HStringReference
argument_list|(
name|propertyName
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|hasKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
operator|&&
operator|!
name|hasKey
condition|)
block|{
comment|// Value does not exist, so return S_OK and set the exists parameter to false to indicate
comment|// that a the optional property does not exist.
operator|*
name|valueExists
operator|=
literal|false
expr_stmt|;
return|return
name|S_OK
return|;
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|propertyMap
operator|->
name|Lookup
argument_list|(
name|HStringReference
argument_list|(
name|propertyName
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|propertyValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|propertyValue
operator|->
name|get_Type
argument_list|(
operator|&
name|propertyType
argument_list|)
expr_stmt|;
block|}
comment|// Check if the expected Size property is of PropertyType_Size type.
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
operator|&&
name|propertyType
operator|==
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|PropertyType
operator|::
name|PropertyType_Size
condition|)
block|{
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|propertyValue
operator|->
name|GetSize
argument_list|(
operator|&
name|sizeValue
argument_list|)
argument_list|)
operator|&&
operator|(
name|sizeValue
operator|.
name|Width
operator|>
literal|0
operator|&&
name|sizeValue
operator|.
name|Height
operator|>
literal|0
operator|)
condition|)
block|{
comment|// A valid property value exists
operator|*
name|value
operator|=
block|{
cast|static_cast
argument_list|<
name|long
argument_list|>
argument_list|(
name|sizeValue
operator|.
name|Width
argument_list|)
block|,
expr|static_cast
operator|<
name|long
operator|>
operator|(
name|sizeValue
operator|.
name|Height
operator|)
block|}
expr_stmt|;
operator|*
name|valueExists
operator|=
literal|true
expr_stmt|;
name|result
operator|=
name|S_OK
expr_stmt|;
block|}
else|else
block|{
comment|// An invalid Size property was detected. Width/Height values must> 0
name|result
operator|=
name|E_INVALIDARG
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// An invalid property type was detected. Size property must be of PropertyType_Size
name|result
operator|=
name|E_INVALIDARG
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_namespace
end_unit
