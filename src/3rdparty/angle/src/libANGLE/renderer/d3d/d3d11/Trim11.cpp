begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Trim11.cpp: Trim support utility class.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Trim11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
end_if
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|ApplicationModel
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|ApplicationModel
operator|::
name|Core
namespace|;
end_using
begin_endif
endif|#
directive|endif
end_endif
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|Trim11
name|Trim11
operator|::
name|Trim11
parameter_list|(
name|rx
operator|::
name|Renderer11
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
block|{
name|bool
name|result
init|=
literal|true
decl_stmt|;
name|result
operator|=
name|registerForRendererTrimRequest
argument_list|()
expr_stmt|;
name|ASSERT
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|function|~Trim11
name|Trim11
operator|::
name|~
name|Trim11
parameter_list|()
block|{
name|unregisterForRendererTrimRequest
argument_list|()
expr_stmt|;
block|}
DECL|function|trim
name|void
name|Trim11
operator|::
name|trim
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mRenderer
condition|)
block|{
return|return;
block|}
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
comment|// IDXGIDevice3 is only supported on Windows 8.1 and Windows Phone 8.1 and above.
name|IDXGIDevice3
modifier|*
name|dxgiDevice3
init|=
name|d3d11
operator|::
name|DynamicCastComObject
argument_list|<
name|IDXGIDevice3
argument_list|>
argument_list|(
name|device
argument_list|)
decl_stmt|;
if|if
condition|(
name|dxgiDevice3
condition|)
block|{
name|dxgiDevice3
operator|->
name|Trim
argument_list|()
expr_stmt|;
block|}
name|SafeRelease
argument_list|(
name|dxgiDevice3
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|registerForRendererTrimRequest
name|bool
name|Trim11
operator|::
name|registerForRendererTrimRequest
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
name|ICoreApplication
modifier|*
name|coreApplication
init|=
literal|nullptr
decl_stmt|;
name|HRESULT
name|result
init|=
name|GetActivationFactory
argument_list|(
name|HStringReference
argument_list|(
name|RuntimeClass_Windows_ApplicationModel_Core_CoreApplication
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|coreApplication
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|auto
name|suspendHandler
init|=
name|Callback
argument_list|<
name|IEventHandler
argument_list|<
name|SuspendingEventArgs
operator|*
argument_list|>
argument_list|>
argument_list|(
capture|[
name|this
capture|]
parameter_list|(
name|IInspectable
modifier|*
parameter_list|,
name|ISuspendingEventArgs
modifier|*
parameter_list|)
lambda|->
name|HRESULT
block|{
name|trim
argument_list|()
expr_stmt|;
return|return
name|S_OK
return|;
block|}
argument_list|)
decl_stmt|;
name|result
operator|=
name|coreApplication
operator|->
name|add_Suspending
argument_list|(
name|suspendHandler
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|mApplicationSuspendedEventToken
argument_list|)
expr_stmt|;
block|}
name|SafeRelease
argument_list|(
name|coreApplication
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
endif|#
directive|endif
return|return
literal|true
return|;
block|}
DECL|function|unregisterForRendererTrimRequest
name|void
name|Trim11
operator|::
name|unregisterForRendererTrimRequest
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
if|if
condition|(
name|mApplicationSuspendedEventToken
operator|.
name|value
operator|!=
literal|0
condition|)
block|{
name|ICoreApplication
modifier|*
name|coreApplication
init|=
literal|nullptr
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|GetActivationFactory
argument_list|(
name|HStringReference
argument_list|(
name|RuntimeClass_Windows_ApplicationModel_Core_CoreApplication
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|coreApplication
argument_list|)
argument_list|)
condition|)
block|{
name|coreApplication
operator|->
name|remove_Suspending
argument_list|(
name|mApplicationSuspendedEventToken
argument_list|)
expr_stmt|;
block|}
name|mApplicationSuspendedEventToken
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|SafeRelease
argument_list|(
name|coreApplication
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
block|}
end_namespace
end_unit
