begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// NativeWindow.h: Defines NativeWindow, a class for managing and
end_comment
begin_comment
comment|// performing operations on an EGLNativeWindowType.
end_comment
begin_comment
comment|// It is used for HWND (Desktop Windows) and IInspectable objects
end_comment
begin_comment
comment|//(Windows Store Applications).
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D_D3D11_NATIVEWINDOW_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D_D3D11_NATIVEWINDOW_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D_D3D11_NATIVEWINDOW_H_
end_define
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"common/platform.h"
end_include
begin_include
include|#
directive|include
file|<EGL/eglplatform.h>
end_include
begin_comment
comment|// DXGISwapChain and DXGIFactory are typedef'd to specific required
end_comment
begin_comment
comment|// types. The HWND NativeWindow implementation requires IDXGISwapChain
end_comment
begin_comment
comment|// and IDXGIFactory and the Windows Store NativeWindow
end_comment
begin_comment
comment|// implementation requires IDXGISwapChain1 and IDXGIFactory2.
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
end_if
begin_typedef
DECL|typedef|DXGISwapChain
typedef|typedef
name|IDXGISwapChain1
name|DXGISwapChain
typedef|;
end_typedef
begin_typedef
DECL|typedef|DXGIFactory
typedef|typedef
name|IDXGIFactory2
name|DXGIFactory
typedef|;
end_typedef
begin_include
include|#
directive|include
file|<wrl.h>
end_include
begin_include
include|#
directive|include
file|<wrl/wrappers/corewrappers.h>
end_include
begin_include
include|#
directive|include
file|<windows.applicationmodel.core.h>
end_include
begin_include
include|#
directive|include
file|<memory>
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|InspectableNativeWindow
decl_stmt|;
block|}
end_decl_stmt
begin_expr_stmt
DECL|member|WRL
name|using
name|namespace
name|Microsoft
operator|::
name|WRL
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|member|Wrappers
name|using
name|namespace
name|Microsoft
operator|::
name|WRL
operator|::
name|Wrappers
expr_stmt|;
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_typedef
DECL|typedef|DXGISwapChain
typedef|typedef
name|IDXGISwapChain
name|DXGISwapChain
typedef|;
end_typedef
begin_typedef
DECL|typedef|DXGIFactory
typedef|typedef
name|IDXGIFactory
name|DXGIFactory
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|NativeWindow
block|{
name|public
label|:
enum|enum
name|RotationFlags
block|{
name|RotateNone
init|=
literal|0
block|,
name|RotateLeft
init|=
literal|1
block|,
name|RotateRight
init|=
literal|2
block|}
enum|;
name|explicit
name|NativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
function_decl|;
name|bool
name|initialize
parameter_list|()
function_decl|;
name|bool
name|getClientRect
parameter_list|(
name|LPRECT
name|rect
parameter_list|)
function_decl|;
name|bool
name|isIconic
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
operator|&&
operator|(
name|WINAPI_FAMILY
operator|==
name|WINAPI_FAMILY_PHONE_APP
operator|)
name|RotationFlags
name|rotationFlags
argument_list|()
specifier|const
expr_stmt|;
endif|#
directive|endif
specifier|static
name|bool
name|isValidNativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
function_decl|;
name|HRESULT
name|createSwapChain
parameter_list|(
name|ID3D11Device
modifier|*
name|device
parameter_list|,
name|DXGIFactory
modifier|*
name|factory
parameter_list|,
name|DXGI_FORMAT
name|format
parameter_list|,
name|UINT
name|width
parameter_list|,
name|UINT
name|height
parameter_list|,
name|DXGISwapChain
modifier|*
modifier|*
name|swapChain
parameter_list|)
function_decl|;
specifier|inline
name|EGLNativeWindowType
name|getNativeWindow
argument_list|()
specifier|const
block|{
return|return
name|mWindow
return|;
block|}
name|private
label|:
name|EGLNativeWindowType
name|mWindow
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
name|std
operator|::
name|shared_ptr
operator|<
name|InspectableNativeWindow
operator|>
name|mImpl
expr_stmt|;
endif|#
directive|endif
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D_D3D11_NATIVEWINDOW_H_
end_comment
end_unit
