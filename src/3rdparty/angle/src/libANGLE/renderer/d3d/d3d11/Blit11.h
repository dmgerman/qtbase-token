begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Blit11.cpp: Texture copy utility class.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D_D3D11_BLIT11_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D_D3D11_BLIT11_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D_D3D11_BLIT11_H_
end_define
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_include
include|#
directive|include
file|<map>
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|Renderer11
decl_stmt|;
name|class
name|Blit11
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|explicit
name|Blit11
argument_list|(
name|Renderer11
operator|*
name|renderer
argument_list|)
block|;
operator|~
name|Blit11
argument_list|()
block|;
name|gl
operator|::
name|Error
name|swizzleTexture
argument_list|(
argument|ID3D11ShaderResourceView *source
argument_list|,
argument|ID3D11RenderTargetView *dest
argument_list|,
argument|const gl::Extents&size
argument_list|,
argument|GLenum swizzleRed
argument_list|,
argument|GLenum swizzleGreen
argument_list|,
argument|GLenum swizzleBlue
argument_list|,
argument|GLenum swizzleAlpha
argument_list|)
block|;
name|gl
operator|::
name|Error
name|copyTexture
argument_list|(
argument|ID3D11ShaderResourceView *source
argument_list|,
argument|const gl::Box&sourceArea
argument_list|,
argument|const gl::Extents&sourceSize
argument_list|,
argument|ID3D11RenderTargetView *dest
argument_list|,
argument|const gl::Box&destArea
argument_list|,
argument|const gl::Extents&destSize
argument_list|,
argument|const gl::Rectangle *scissor
argument_list|,
argument|GLenum destFormat
argument_list|,
argument|GLenum filter
argument_list|,
argument|bool maskOffAlpha
argument_list|)
block|;
name|gl
operator|::
name|Error
name|copyStencil
argument_list|(
argument|ID3D11Resource *source
argument_list|,
argument|unsigned int sourceSubresource
argument_list|,
argument|const gl::Box&sourceArea
argument_list|,
argument|const gl::Extents&sourceSize
argument_list|,
argument|ID3D11Resource *dest
argument_list|,
argument|unsigned int destSubresource
argument_list|,
argument|const gl::Box&destArea
argument_list|,
argument|const gl::Extents&destSize
argument_list|,
argument|const gl::Rectangle *scissor
argument_list|)
block|;
name|gl
operator|::
name|Error
name|copyDepth
argument_list|(
name|ID3D11ShaderResourceView
operator|*
name|source
argument_list|,
specifier|const
name|gl
operator|::
name|Box
operator|&
name|sourceArea
argument_list|,
specifier|const
name|gl
operator|::
name|Extents
operator|&
name|sourceSize
argument_list|,
name|ID3D11DepthStencilView
operator|*
name|dest
argument_list|,
specifier|const
name|gl
operator|::
name|Box
operator|&
name|destArea
argument_list|,
specifier|const
name|gl
operator|::
name|Extents
operator|&
name|destSize
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|*
name|scissor
argument_list|)
block|;
name|gl
operator|::
name|Error
name|copyDepthStencil
argument_list|(
argument|ID3D11Resource *source
argument_list|,
argument|unsigned int sourceSubresource
argument_list|,
argument|const gl::Box&sourceArea
argument_list|,
argument|const gl::Extents&sourceSize
argument_list|,
argument|ID3D11Resource *dest
argument_list|,
argument|unsigned int destSubresource
argument_list|,
argument|const gl::Box&destArea
argument_list|,
argument|const gl::Extents&destSize
argument_list|,
argument|const gl::Rectangle *scissor
argument_list|)
block|;
name|private
operator|:
expr|enum
name|BlitShaderType
block|{
name|BLITSHADER_INVALID
block|,
name|BLITSHADER_2D_RGBAF
block|,
name|BLITSHADER_2D_BGRAF
block|,
name|BLITSHADER_2D_RGBF
block|,
name|BLITSHADER_2D_RGF
block|,
name|BLITSHADER_2D_RF
block|,
name|BLITSHADER_2D_ALPHA
block|,
name|BLITSHADER_2D_LUMA
block|,
name|BLITSHADER_2D_LUMAALPHA
block|,
name|BLITSHADER_2D_RGBAUI
block|,
name|BLITSHADER_2D_RGBAI
block|,
name|BLITSHADER_2D_RGBUI
block|,
name|BLITSHADER_2D_RGBI
block|,
name|BLITSHADER_2D_RGUI
block|,
name|BLITSHADER_2D_RGI
block|,
name|BLITSHADER_2D_RUI
block|,
name|BLITSHADER_2D_RI
block|,
name|BLITSHADER_3D_RGBAF
block|,
name|BLITSHADER_3D_RGBAUI
block|,
name|BLITSHADER_3D_RGBAI
block|,
name|BLITSHADER_3D_BGRAF
block|,
name|BLITSHADER_3D_RGBF
block|,
name|BLITSHADER_3D_RGBUI
block|,
name|BLITSHADER_3D_RGBI
block|,
name|BLITSHADER_3D_RGF
block|,
name|BLITSHADER_3D_RGUI
block|,
name|BLITSHADER_3D_RGI
block|,
name|BLITSHADER_3D_RF
block|,
name|BLITSHADER_3D_RUI
block|,
name|BLITSHADER_3D_RI
block|,
name|BLITSHADER_3D_ALPHA
block|,
name|BLITSHADER_3D_LUMA
block|,
name|BLITSHADER_3D_LUMAALPHA
block|,     }
block|;      enum
name|SwizzleShaderType
block|{
name|SWIZZLESHADER_INVALID
block|,
name|SWIZZLESHADER_2D_FLOAT
block|,
name|SWIZZLESHADER_2D_UINT
block|,
name|SWIZZLESHADER_2D_INT
block|,
name|SWIZZLESHADER_CUBE_FLOAT
block|,
name|SWIZZLESHADER_CUBE_UINT
block|,
name|SWIZZLESHADER_CUBE_INT
block|,
name|SWIZZLESHADER_3D_FLOAT
block|,
name|SWIZZLESHADER_3D_UINT
block|,
name|SWIZZLESHADER_3D_INT
block|,
name|SWIZZLESHADER_ARRAY_FLOAT
block|,
name|SWIZZLESHADER_ARRAY_UINT
block|,
name|SWIZZLESHADER_ARRAY_INT
block|,     }
block|;
typedef|typedef
name|void
argument_list|(
argument|*WriteVertexFunction
argument_list|)
operator|(
specifier|const
name|gl
operator|::
name|Box
operator|&
name|sourceArea
expr|,
specifier|const
name|gl
operator|::
name|Extents
operator|&
name|sourceSize
expr|,
specifier|const
name|gl
operator|::
name|Box
operator|&
name|destArea
expr|,
specifier|const
name|gl
operator|::
name|Extents
operator|&
name|destSize
expr|,
name|void
operator|*
name|outVertices
expr|,
name|unsigned
name|int
operator|*
name|outStride
expr|,
name|unsigned
name|int
operator|*
name|outVertexCount
expr|,
name|D3D11_PRIMITIVE_TOPOLOGY
operator|*
name|outTopology
operator|)
expr_stmt|;
block|enum
name|ShaderDimension
block|{
name|SHADER_2D
block|,
name|SHADER_3D
block|,     }
decl_stmt|;
struct|struct
name|Shader
block|{
name|ShaderDimension
name|dimension
decl_stmt|;
name|ID3D11PixelShader
modifier|*
name|pixelShader
decl_stmt|;
block|}
struct|;
struct|struct
name|ShaderSupport
block|{
name|ID3D11InputLayout
modifier|*
name|inputLayout
decl_stmt|;
name|ID3D11VertexShader
modifier|*
name|vertexShader
decl_stmt|;
name|ID3D11GeometryShader
modifier|*
name|geometryShader
decl_stmt|;
name|WriteVertexFunction
name|vertexWriteFunction
decl_stmt|;
block|}
struct|;
name|gl
operator|::
name|Error
name|initResources
argument_list|()
expr_stmt|;
name|void
name|freeResources
parameter_list|()
function_decl|;
name|ShaderSupport
name|getShaderSupport
parameter_list|(
specifier|const
name|Shader
modifier|&
name|shader
parameter_list|)
function_decl|;
specifier|static
name|BlitShaderType
name|GetBlitShaderType
parameter_list|(
name|GLenum
name|destinationFormat
parameter_list|,
name|bool
name|isSigned
parameter_list|,
name|ShaderDimension
name|dimension
parameter_list|)
function_decl|;
specifier|static
name|SwizzleShaderType
name|GetSwizzleShaderType
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|D3D11_SRV_DIMENSION
name|dimensionality
parameter_list|)
function_decl|;
name|gl
operator|::
name|Error
name|copyDepthStencil
argument_list|(
argument|ID3D11Resource *source
argument_list|,
argument|unsigned int sourceSubresource
argument_list|,
argument|const gl::Box&sourceArea
argument_list|,
argument|const gl::Extents&sourceSize
argument_list|,
argument|ID3D11Resource *dest
argument_list|,
argument|unsigned int destSubresource
argument_list|,
argument|const gl::Box&destArea
argument_list|,
argument|const gl::Extents&destSize
argument_list|,
argument|const gl::Rectangle *scissor
argument_list|,
argument|bool stencilOnly
argument_list|)
expr_stmt|;
name|void
name|addBlitShaderToMap
parameter_list|(
name|BlitShaderType
name|blitShaderType
parameter_list|,
name|ShaderDimension
name|dimension
parameter_list|,
name|ID3D11PixelShader
modifier|*
name|ps
parameter_list|)
function_decl|;
name|gl
operator|::
name|Error
name|getBlitShader
argument_list|(
argument|GLenum destFormat
argument_list|,
argument|bool isSigned
argument_list|,
argument|ShaderDimension dimension
argument_list|,
argument|const Shader **shaderOut
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Error
name|getSwizzleShader
argument_list|(
argument|GLenum type
argument_list|,
argument|D3D11_SRV_DIMENSION viewDimension
argument_list|,
argument|const Shader **shaderOut
argument_list|)
expr_stmt|;
name|void
name|addSwizzleShaderToMap
parameter_list|(
name|SwizzleShaderType
name|swizzleShaderType
parameter_list|,
name|ShaderDimension
name|dimension
parameter_list|,
name|ID3D11PixelShader
modifier|*
name|ps
parameter_list|)
function_decl|;
name|void
name|clearShaderMap
parameter_list|()
function_decl|;
name|Renderer11
modifier|*
name|mRenderer
decl_stmt|;
name|std
operator|::
name|map
operator|<
name|BlitShaderType
operator|,
name|Shader
operator|>
name|mBlitShaderMap
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|SwizzleShaderType
operator|,
name|Shader
operator|>
name|mSwizzleShaderMap
expr_stmt|;
name|bool
name|mResourcesInitialized
decl_stmt|;
name|ID3D11Buffer
modifier|*
name|mVertexBuffer
decl_stmt|;
name|ID3D11SamplerState
modifier|*
name|mPointSampler
decl_stmt|;
name|ID3D11SamplerState
modifier|*
name|mLinearSampler
decl_stmt|;
name|ID3D11RasterizerState
modifier|*
name|mScissorEnabledRasterizerState
decl_stmt|;
name|ID3D11RasterizerState
modifier|*
name|mScissorDisabledRasterizerState
decl_stmt|;
name|ID3D11DepthStencilState
modifier|*
name|mDepthStencilState
decl_stmt|;
name|d3d11
operator|::
name|LazyInputLayout
name|mQuad2DIL
expr_stmt|;
name|d3d11
operator|::
name|LazyShader
operator|<
name|ID3D11VertexShader
operator|>
name|mQuad2DVS
expr_stmt|;
name|d3d11
operator|::
name|LazyShader
operator|<
name|ID3D11PixelShader
operator|>
name|mDepthPS
expr_stmt|;
name|d3d11
operator|::
name|LazyInputLayout
name|mQuad3DIL
expr_stmt|;
name|d3d11
operator|::
name|LazyShader
operator|<
name|ID3D11VertexShader
operator|>
name|mQuad3DVS
expr_stmt|;
name|d3d11
operator|::
name|LazyShader
operator|<
name|ID3D11GeometryShader
operator|>
name|mQuad3DGS
expr_stmt|;
name|d3d11
operator|::
name|LazyBlendState
name|mAlphaMaskBlendState
expr_stmt|;
name|ID3D11Buffer
modifier|*
name|mSwizzleCB
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D_D3D11_BLIT11_H_
end_comment
end_unit
