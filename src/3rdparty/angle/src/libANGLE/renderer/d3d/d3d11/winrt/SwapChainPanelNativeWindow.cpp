begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// SwapChainPanelNativeWindow.cpp: NativeWindow for managing ISwapChainPanel native window types.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/winrt/SwapChainPanelNativeWindow.h"
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Collections
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|~SwapChainPanelNativeWindow
name|SwapChainPanelNativeWindow
operator|::
name|~
name|SwapChainPanelNativeWindow
parameter_list|()
block|{
name|unregisterForSizeChangeEvents
argument_list|()
expr_stmt|;
block|}
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
DECL|struct|AddFtmBase
name|AddFtmBase
block|{
DECL|typedef|Type
typedef|typedef
name|Implements
argument_list|<
name|RuntimeClassFlags
argument_list|<
name|ClassicCom
argument_list|>
argument_list|,
name|T
argument_list|,
name|FtmBase
argument_list|>
name|Type
typedef|;
block|}
struct|;
template|template
parameter_list|<
name|typename
name|CODE
parameter_list|>
DECL|function|RunOnUIThread
name|HRESULT
name|RunOnUIThread
parameter_list|(
name|CODE
modifier|&&
name|code
parameter_list|,
specifier|const
name|ComPtr
argument_list|<
name|ICoreDispatcher
argument_list|>
modifier|&
name|dispatcher
parameter_list|)
block|{
name|ComPtr
argument_list|<
name|IAsyncAction
argument_list|>
name|asyncAction
decl_stmt|;
name|HRESULT
name|result
init|=
name|S_OK
decl_stmt|;
name|boolean
name|hasThreadAccess
decl_stmt|;
name|result
operator|=
name|dispatcher
operator|->
name|get_HasThreadAccess
argument_list|(
operator|&
name|hasThreadAccess
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
if|if
condition|(
name|hasThreadAccess
condition|)
block|{
return|return
name|code
argument_list|()
return|;
block|}
else|else
block|{
name|Event
name|waitEvent
argument_list|(
name|CreateEventEx
argument_list|(
name|NULL
argument_list|,
name|NULL
argument_list|,
name|CREATE_EVENT_MANUAL_RESET
argument_list|,
name|EVENT_ALL_ACCESS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|waitEvent
operator|.
name|IsValid
argument_list|()
condition|)
block|{
return|return
name|E_FAIL
return|;
block|}
name|HRESULT
name|codeResult
init|=
name|E_FAIL
decl_stmt|;
name|auto
name|handler
init|=
name|Callback
argument_list|<
name|AddFtmBase
argument_list|<
name|IDispatchedHandler
argument_list|>
operator|::
name|Type
argument_list|>
argument_list|(
capture|[
modifier|&
name|codeResult
capture|,
modifier|&
name|code
capture|,
modifier|&
name|waitEvent
capture|]
block|{
name|codeResult
operator|=
name|code
argument_list|()
expr_stmt|;
name|SetEvent
argument_list|(
name|waitEvent
operator|.
name|Get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|S_OK
return|;
block|}
argument_list|)
decl_stmt|;
name|result
operator|=
name|dispatcher
operator|->
name|RunAsync
argument_list|(
name|CoreDispatcherPriority_Normal
argument_list|,
name|handler
operator|.
name|Get
argument_list|()
argument_list|,
name|asyncAction
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|result
return|;
block|}
name|auto
name|waitResult
init|=
name|WaitForSingleObjectEx
argument_list|(
name|waitEvent
operator|.
name|Get
argument_list|()
argument_list|,
literal|10
operator|*
literal|1000
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|waitResult
operator|!=
name|WAIT_OBJECT_0
condition|)
block|{
comment|// Wait 10 seconds before giving up. At this point, the application is in an
comment|// unrecoverable state (probably deadlocked). We therefore terminate the application
comment|// entirely. This also prevents stack corruption if the async operation is eventually
comment|// run.
name|ERR
argument_list|(
literal|"Timeout waiting for async action on UI thread. The UI thread might be blocked."
argument_list|)
expr_stmt|;
name|std
operator|::
name|terminate
argument_list|()
expr_stmt|;
return|return
name|E_FAIL
return|;
block|}
return|return
name|codeResult
return|;
block|}
block|}
DECL|function|initialize
name|bool
name|SwapChainPanelNativeWindow
operator|::
name|initialize
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|,
name|IPropertySet
modifier|*
name|propertySet
parameter_list|)
block|{
name|ComPtr
argument_list|<
name|IPropertySet
argument_list|>
name|props
init|=
name|propertySet
decl_stmt|;
name|ComPtr
argument_list|<
name|IInspectable
argument_list|>
name|win
init|=
name|window
decl_stmt|;
name|SIZE
name|swapChainSize
init|=
block|{}
decl_stmt|;
name|HRESULT
name|result
init|=
name|S_OK
decl_stmt|;
comment|// IPropertySet is an optional parameter and can be null.
comment|// If one is specified, cache as an IMap and read the properties
comment|// used for initial host initialization.
if|if
condition|(
name|propertySet
condition|)
block|{
name|result
operator|=
name|props
operator|.
name|As
argument_list|(
operator|&
name|mPropertyMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// The EGLRenderSurfaceSizeProperty is optional and may be missing. The IPropertySet
comment|// was prevalidated to contain the EGLNativeWindowType before being passed to
comment|// this host.
name|result
operator|=
name|GetOptionalSizePropertyValue
argument_list|(
name|mPropertyMap
argument_list|,
name|EGLRenderSurfaceSizeProperty
argument_list|,
operator|&
name|swapChainSize
argument_list|,
operator|&
name|mSwapChainSizeSpecified
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// The EGLRenderResolutionScaleProperty is optional and may be missing. The IPropertySet
comment|// was prevalidated to contain the EGLNativeWindowType before being passed to
comment|// this host.
name|result
operator|=
name|GetOptionalSinglePropertyValue
argument_list|(
name|mPropertyMap
argument_list|,
name|EGLRenderResolutionScaleProperty
argument_list|,
operator|&
name|mSwapChainScale
argument_list|,
operator|&
name|mSwapChainScaleSpecified
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|mSwapChainScaleSpecified
condition|)
block|{
comment|// Default value for the scale is 1.0f
name|mSwapChainScale
operator|=
literal|1.0f
expr_stmt|;
block|}
comment|// A EGLRenderSurfaceSizeProperty and a EGLRenderResolutionScaleProperty can't both be specified
if|if
condition|(
name|mSwapChainScaleSpecified
operator|&&
name|mSwapChainSizeSpecified
condition|)
block|{
name|ERR
argument_list|(
literal|"It is invalid to specify both an EGLRenderSurfaceSizeProperty and a EGLRenderResolutionScaleProperty."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|win
operator|.
name|As
argument_list|(
operator|&
name|mSwapChainPanel
argument_list|)
expr_stmt|;
block|}
name|ComPtr
argument_list|<
name|IDependencyObject
argument_list|>
name|swapChainPanelDependencyObject
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|mSwapChainPanel
operator|.
name|As
argument_list|(
operator|&
name|swapChainPanelDependencyObject
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|swapChainPanelDependencyObject
operator|->
name|get_Dispatcher
argument_list|(
name|mSwapChainPanelDispatcher
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
comment|// If a swapchain size is specfied, then the automatic resize
comment|// behaviors implemented by the host should be disabled.  The swapchain
comment|// will be still be scaled when being rendered to fit the bounds
comment|// of the host.
comment|// Scaling of the swapchain output needs to be handled by the
comment|// host for swapchain panels even though the scaling mode setting
comment|// DXGI_SCALING_STRETCH is configured on the swapchain.
if|if
condition|(
name|mSwapChainSizeSpecified
condition|)
block|{
name|mClientRect
operator|=
block|{
literal|0
block|,
literal|0
block|,
name|swapChainSize
operator|.
name|cx
block|,
name|swapChainSize
operator|.
name|cy
block|}
expr_stmt|;
block|}
else|else
block|{
name|SIZE
name|swapChainPanelSize
decl_stmt|;
name|result
operator|=
name|GetSwapChainPanelSize
argument_list|(
name|mSwapChainPanel
argument_list|,
name|mSwapChainPanelDispatcher
argument_list|,
operator|&
name|swapChainPanelSize
argument_list|,
operator|&
name|mSwapChainScale
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSwapChainScale
operator|!=
literal|1.0f
condition|)
name|mSwapChainScaleSpecified
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
comment|// Update the client rect to account for any swapchain scale factor
name|mClientRect
operator|=
block|{
literal|0
block|,
literal|0
block|,
cast|static_cast
argument_list|<
name|long
argument_list|>
argument_list|(
name|ConvertDipsToPixels
argument_list|(
name|swapChainPanelSize
operator|.
name|cx
operator|*
name|mSwapChainScale
argument_list|)
argument_list|)
block|,
expr|static_cast
operator|<
name|long
operator|>
operator|(
name|ConvertDipsToPixels
argument_list|(
name|swapChainPanelSize
operator|.
name|cy
operator|*
name|mSwapChainScale
argument_list|)
operator|)
block|}
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|mNewClientRect
operator|=
name|mClientRect
expr_stmt|;
name|mClientRectChanged
operator|=
literal|false
expr_stmt|;
return|return
name|registerForSizeChangeEvents
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|registerForSizeChangeEvents
name|bool
name|SwapChainPanelNativeWindow
operator|::
name|registerForSizeChangeEvents
parameter_list|()
block|{
name|ComPtr
argument_list|<
name|ISizeChangedEventHandler
argument_list|>
name|sizeChangedHandler
decl_stmt|;
name|ComPtr
argument_list|<
name|IFrameworkElement
argument_list|>
name|frameworkElement
decl_stmt|;
name|HRESULT
name|result
init|=
name|Microsoft
operator|::
name|WRL
operator|::
name|MakeAndInitialize
argument_list|<
name|SwapChainPanelSizeChangedHandler
argument_list|>
argument_list|(
name|sizeChangedHandler
operator|.
name|ReleaseAndGetAddressOf
argument_list|()
argument_list|,
name|this
operator|->
name|shared_from_this
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|mSwapChainPanel
operator|.
name|As
argument_list|(
operator|&
name|frameworkElement
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|RunOnUIThread
argument_list|(
capture|[
name|this
capture|,
name|frameworkElement
capture|,
name|sizeChangedHandler
capture|]
block|{
return|return
name|frameworkElement
operator|->
name|add_SizeChanged
argument_list|(
name|sizeChangedHandler
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|mSizeChangedEventToken
argument_list|)
return|;
block|}
argument_list|,
name|mSwapChainPanelDispatcher
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|unregisterForSizeChangeEvents
name|void
name|SwapChainPanelNativeWindow
operator|::
name|unregisterForSizeChangeEvents
parameter_list|()
block|{
name|ComPtr
argument_list|<
name|IFrameworkElement
argument_list|>
name|frameworkElement
decl_stmt|;
if|if
condition|(
name|mSwapChainPanel
operator|&&
name|SUCCEEDED
argument_list|(
name|mSwapChainPanel
operator|.
name|As
argument_list|(
operator|&
name|frameworkElement
argument_list|)
argument_list|)
condition|)
block|{
name|RunOnUIThread
argument_list|(
capture|[
name|this
capture|,
name|frameworkElement
capture|]
block|{
return|return
name|frameworkElement
operator|->
name|remove_SizeChanged
argument_list|(
name|mSizeChangedEventToken
argument_list|)
return|;
block|}
argument_list|,
name|mSwapChainPanelDispatcher
argument_list|)
expr_stmt|;
block|}
name|mSizeChangedEventToken
operator|.
name|value
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|createSwapChain
name|HRESULT
name|SwapChainPanelNativeWindow
operator|::
name|createSwapChain
parameter_list|(
name|ID3D11Device
modifier|*
name|device
parameter_list|,
name|DXGIFactory
modifier|*
name|factory
parameter_list|,
name|DXGI_FORMAT
name|format
parameter_list|,
name|unsigned
name|int
name|width
parameter_list|,
name|unsigned
name|int
name|height
parameter_list|,
name|bool
name|containsAlpha
parameter_list|,
name|DXGISwapChain
modifier|*
modifier|*
name|swapChain
parameter_list|)
block|{
if|if
condition|(
name|device
operator|==
name|NULL
operator|||
name|factory
operator|==
name|NULL
operator|||
name|swapChain
operator|==
name|NULL
operator|||
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
condition|)
block|{
return|return
name|E_INVALIDARG
return|;
block|}
name|DXGI_SWAP_CHAIN_DESC1
name|swapChainDesc
init|=
block|{
literal|0
block|}
decl_stmt|;
name|swapChainDesc
operator|.
name|Width
operator|=
name|width
expr_stmt|;
name|swapChainDesc
operator|.
name|Height
operator|=
name|height
expr_stmt|;
name|swapChainDesc
operator|.
name|Format
operator|=
name|format
expr_stmt|;
name|swapChainDesc
operator|.
name|Stereo
operator|=
name|FALSE
expr_stmt|;
name|swapChainDesc
operator|.
name|SampleDesc
operator|.
name|Count
operator|=
literal|1
expr_stmt|;
name|swapChainDesc
operator|.
name|SampleDesc
operator|.
name|Quality
operator|=
literal|0
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferUsage
operator|=
name|DXGI_USAGE_SHADER_INPUT
operator||
name|DXGI_USAGE_RENDER_TARGET_OUTPUT
operator||
name|DXGI_USAGE_BACK_BUFFER
expr_stmt|;
name|swapChainDesc
operator|.
name|BufferCount
operator|=
literal|2
expr_stmt|;
name|swapChainDesc
operator|.
name|SwapEffect
operator|=
name|DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL
expr_stmt|;
name|swapChainDesc
operator|.
name|Scaling
operator|=
name|DXGI_SCALING_STRETCH
expr_stmt|;
name|swapChainDesc
operator|.
name|AlphaMode
operator|=
name|containsAlpha
condition|?
name|DXGI_ALPHA_MODE_PREMULTIPLIED
else|:
name|DXGI_ALPHA_MODE_IGNORE
expr_stmt|;
operator|*
name|swapChain
operator|=
literal|nullptr
expr_stmt|;
name|ComPtr
argument_list|<
name|IDXGISwapChain1
argument_list|>
name|newSwapChain
decl_stmt|;
name|ComPtr
argument_list|<
name|ISwapChainPanelNative
argument_list|>
name|swapChainPanelNative
decl_stmt|;
name|HRESULT
name|result
init|=
name|factory
operator|->
name|CreateSwapChainForComposition
argument_list|(
name|device
argument_list|,
operator|&
name|swapChainDesc
argument_list|,
literal|nullptr
argument_list|,
name|newSwapChain
operator|.
name|ReleaseAndGetAddressOf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|mSwapChainPanel
operator|.
name|As
argument_list|(
operator|&
name|swapChainPanelNative
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|RunOnUIThread
argument_list|(
capture|[
name|swapChainPanelNative
capture|,
name|newSwapChain
capture|]
block|{
return|return
name|swapChainPanelNative
operator|->
name|SetSwapChain
argument_list|(
name|newSwapChain
operator|.
name|Get
argument_list|()
argument_list|)
return|;
block|}
argument_list|,
name|mSwapChainPanelDispatcher
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
comment|// The swapchain panel host requires an instance of the swapchain set on the SwapChainPanel
comment|// to perform the runtime-scale behavior.  This swapchain is cached here because there are
comment|// no methods for retreiving the currently configured on from ISwapChainPanelNative.
name|mSwapChain
operator|=
name|newSwapChain
expr_stmt|;
name|result
operator|=
name|newSwapChain
operator|.
name|CopyTo
argument_list|(
name|swapChain
argument_list|)
expr_stmt|;
block|}
comment|// If the host is responsible for scaling the output of the swapchain, then
comment|// scale it now before returning an instance to the caller.  This is done by
comment|// first reading the current size of the swapchain panel, then scaling
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
if|if
condition|(
name|mSwapChainSizeSpecified
operator|||
name|mSwapChainScaleSpecified
condition|)
block|{
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
operator|::
name|IUIElement
argument_list|>
name|uiElement
decl_stmt|;
name|result
operator|=
name|mSwapChainPanel
operator|.
name|As
argument_list|(
operator|&
name|uiElement
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|Size
name|currentSize
decl_stmt|;
name|result
operator|=
name|uiElement
operator|->
name|get_RenderSize
argument_list|(
operator|&
name|currentSize
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|scaleSwapChain
argument_list|(
name|currentSize
argument_list|,
name|mClientRect
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|function|scaleSwapChain
name|HRESULT
name|SwapChainPanelNativeWindow
operator|::
name|scaleSwapChain
parameter_list|(
specifier|const
name|Size
modifier|&
name|windowSize
parameter_list|,
specifier|const
name|RECT
modifier|&
name|clientRect
parameter_list|)
block|{
name|Size
name|renderScale
init|=
block|{
name|windowSize
operator|.
name|Width
operator|/
name|clientRect
operator|.
name|right
block|,
name|windowSize
operator|.
name|Height
operator|/
name|clientRect
operator|.
name|bottom
block|}
decl_stmt|;
comment|// Setup a scale matrix for the swap chain
name|DXGI_MATRIX_3X2_F
name|scaleMatrix
init|=
block|{}
decl_stmt|;
name|scaleMatrix
operator|.
name|_11
operator|=
name|renderScale
operator|.
name|Width
expr_stmt|;
name|scaleMatrix
operator|.
name|_22
operator|=
name|renderScale
operator|.
name|Height
expr_stmt|;
name|ComPtr
argument_list|<
name|IDXGISwapChain2
argument_list|>
name|swapChain2
decl_stmt|;
name|HRESULT
name|result
init|=
name|mSwapChain
operator|.
name|As
argument_list|(
operator|&
name|swapChain2
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|swapChain2
operator|->
name|SetMatrixTransform
argument_list|(
operator|&
name|scaleMatrix
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|function|GetSwapChainPanelSize
name|HRESULT
name|GetSwapChainPanelSize
parameter_list|(
specifier|const
name|ComPtr
argument_list|<
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
operator|::
name|Controls
operator|::
name|ISwapChainPanel
argument_list|>
modifier|&
name|swapChainPanel
parameter_list|,
specifier|const
name|ComPtr
argument_list|<
name|ICoreDispatcher
argument_list|>
modifier|&
name|dispatcher
parameter_list|,
name|SIZE
modifier|*
name|windowSize
parameter_list|,
name|float
modifier|*
name|scaleFactor
parameter_list|)
block|{
name|ComPtr
argument_list|<
name|IUIElement
argument_list|>
name|uiElement
decl_stmt|;
name|Size
name|renderSize
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|HRESULT
name|result
init|=
name|swapChainPanel
operator|.
name|As
argument_list|(
operator|&
name|uiElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|RunOnUIThread
argument_list|(
capture|[
name|uiElement
capture|,
modifier|&
name|renderSize
capture|]
block|{
return|return
name|uiElement
operator|->
name|get_RenderSize
argument_list|(
operator|&
name|renderSize
argument_list|)
return|;
block|}
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|long
name|width
init|=
name|ConvertDipsToPixels
argument_list|(
name|renderSize
operator|.
name|Width
argument_list|)
decl_stmt|;
name|long
name|height
init|=
name|ConvertDipsToPixels
argument_list|(
name|renderSize
operator|.
name|Height
argument_list|)
decl_stmt|;
operator|*
name|windowSize
operator|=
block|{
name|width
block|,
name|height
block|}
expr_stmt|;
if|if
condition|(
name|scaleFactor
condition|)
block|{
operator|*
name|scaleFactor
operator|=
name|renderSize
operator|.
name|Width
operator|/
name|width
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_namespace
end_unit
