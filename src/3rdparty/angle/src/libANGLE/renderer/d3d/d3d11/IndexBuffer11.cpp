begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// IndexBuffer11.cpp: Defines the D3D11 IndexBuffer implementation.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/IndexBuffer11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|IndexBuffer11
name|IndexBuffer11
operator|::
name|IndexBuffer11
parameter_list|(
name|Renderer11
modifier|*
specifier|const
name|renderer
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
block|{
name|mBuffer
operator|=
name|NULL
expr_stmt|;
name|mBufferSize
operator|=
literal|0
expr_stmt|;
name|mDynamicUsage
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|~IndexBuffer11
name|IndexBuffer11
operator|::
name|~
name|IndexBuffer11
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mBuffer
argument_list|)
expr_stmt|;
block|}
DECL|function|initialize
name|gl
operator|::
name|Error
name|IndexBuffer11
operator|::
name|initialize
parameter_list|(
name|unsigned
name|int
name|bufferSize
parameter_list|,
name|GLenum
name|indexType
parameter_list|,
name|bool
name|dynamic
parameter_list|)
block|{
name|SafeRelease
argument_list|(
name|mBuffer
argument_list|)
expr_stmt|;
name|updateSerial
argument_list|()
expr_stmt|;
if|if
condition|(
name|bufferSize
operator|>
literal|0
condition|)
block|{
name|ID3D11Device
modifier|*
name|dxDevice
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|D3D11_BUFFER_DESC
name|bufferDesc
decl_stmt|;
name|bufferDesc
operator|.
name|ByteWidth
operator|=
name|bufferSize
expr_stmt|;
name|bufferDesc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_DYNAMIC
expr_stmt|;
name|bufferDesc
operator|.
name|BindFlags
operator|=
name|D3D11_BIND_INDEX_BUFFER
expr_stmt|;
name|bufferDesc
operator|.
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_WRITE
expr_stmt|;
name|bufferDesc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|bufferDesc
operator|.
name|StructureByteStride
operator|=
literal|0
expr_stmt|;
name|HRESULT
name|result
init|=
name|dxDevice
operator|->
name|CreateBuffer
argument_list|(
operator|&
name|bufferDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|mBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to allocate internal index buffer of size, %lu."
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
if|if
condition|(
name|dynamic
condition|)
block|{
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mBuffer
argument_list|,
literal|"IndexBuffer11 (dynamic)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mBuffer
argument_list|,
literal|"IndexBuffer11 (static)"
argument_list|)
expr_stmt|;
block|}
block|}
name|mBufferSize
operator|=
name|bufferSize
expr_stmt|;
name|mIndexType
operator|=
name|indexType
expr_stmt|;
name|mDynamicUsage
operator|=
name|dynamic
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|mapBuffer
name|gl
operator|::
name|Error
name|IndexBuffer11
operator|::
name|mapBuffer
parameter_list|(
name|unsigned
name|int
name|offset
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|,
name|void
modifier|*
modifier|*
name|outMappedMemory
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mBuffer
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Internal index buffer is not initialized."
argument_list|)
return|;
block|}
comment|// Check for integer overflows and out-out-bounds map requests
if|if
condition|(
name|offset
operator|+
name|size
argument_list|<
name|offset
operator|||
name|offset
operator|+
name|size
argument_list|>
name|mBufferSize
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Index buffer map range is not inside the buffer."
argument_list|)
return|;
block|}
name|ID3D11DeviceContext
modifier|*
name|dxContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|HRESULT
name|result
init|=
name|dxContext
operator|->
name|Map
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE_NO_OVERWRITE
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to map internal index buffer, HRESULT: 0x%08x."
argument_list|,
name|result
argument_list|)
return|;
block|}
operator|*
name|outMappedMemory
operator|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|mappedResource
operator|.
name|pData
argument_list|)
operator|+
name|offset
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|unmapBuffer
name|gl
operator|::
name|Error
name|IndexBuffer11
operator|::
name|unmapBuffer
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mBuffer
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Internal index buffer is not initialized."
argument_list|)
return|;
block|}
name|ID3D11DeviceContext
modifier|*
name|dxContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|dxContext
operator|->
name|Unmap
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getIndexType
name|GLenum
name|IndexBuffer11
operator|::
name|getIndexType
parameter_list|()
specifier|const
block|{
return|return
name|mIndexType
return|;
block|}
DECL|function|getBufferSize
name|unsigned
name|int
name|IndexBuffer11
operator|::
name|getBufferSize
parameter_list|()
specifier|const
block|{
return|return
name|mBufferSize
return|;
block|}
DECL|function|setSize
name|gl
operator|::
name|Error
name|IndexBuffer11
operator|::
name|setSize
parameter_list|(
name|unsigned
name|int
name|bufferSize
parameter_list|,
name|GLenum
name|indexType
parameter_list|)
block|{
if|if
condition|(
name|bufferSize
operator|>
name|mBufferSize
operator|||
name|indexType
operator|!=
name|mIndexType
condition|)
block|{
return|return
name|initialize
argument_list|(
name|bufferSize
argument_list|,
name|indexType
argument_list|,
name|mDynamicUsage
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
block|}
DECL|function|discard
name|gl
operator|::
name|Error
name|IndexBuffer11
operator|::
name|discard
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mBuffer
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Internal index buffer is not initialized."
argument_list|)
return|;
block|}
name|ID3D11DeviceContext
modifier|*
name|dxContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|HRESULT
name|result
init|=
name|dxContext
operator|->
name|Map
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE_DISCARD
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to map internal index buffer, HRESULT: 0x%08x."
argument_list|,
name|result
argument_list|)
return|;
block|}
name|dxContext
operator|->
name|Unmap
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getIndexFormat
name|DXGI_FORMAT
name|IndexBuffer11
operator|::
name|getIndexFormat
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|mIndexType
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
name|DXGI_FORMAT_R16_UINT
return|;
case|case
name|GL_UNSIGNED_SHORT
case|:
return|return
name|DXGI_FORMAT_R16_UINT
return|;
case|case
name|GL_UNSIGNED_INT
case|:
return|return
name|DXGI_FORMAT_R32_UINT
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|DXGI_FORMAT_UNKNOWN
return|;
block|}
block|}
DECL|function|getBuffer
name|ID3D11Buffer
modifier|*
name|IndexBuffer11
operator|::
name|getBuffer
parameter_list|()
specifier|const
block|{
return|return
name|mBuffer
return|;
block|}
block|}
end_namespace
end_unit
