begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Fence11.cpp: Defines the rx::FenceNV11 and rx::FenceSync11 classes which implement rx::FenceNVImpl and rx::FenceSyncImpl.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Fence11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
comment|//
comment|// Template helpers for set and test operations.
comment|//
template|template
parameter_list|<
name|class
name|FenceClass
parameter_list|>
DECL|function|FenceSetHelper
name|gl
operator|::
name|Error
name|FenceSetHelper
parameter_list|(
name|FenceClass
modifier|*
name|fence
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fence
operator|->
name|mQuery
condition|)
block|{
name|D3D11_QUERY_DESC
name|queryDesc
decl_stmt|;
name|queryDesc
operator|.
name|Query
operator|=
name|D3D11_QUERY_EVENT
expr_stmt|;
name|queryDesc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|HRESULT
name|result
init|=
name|fence
operator|->
name|mRenderer
operator|->
name|getDevice
argument_list|()
operator|->
name|CreateQuery
argument_list|(
operator|&
name|queryDesc
argument_list|,
operator|&
name|fence
operator|->
name|mQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to create event query, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
block|}
name|fence
operator|->
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
operator|->
name|End
argument_list|(
name|fence
operator|->
name|mQuery
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|class
name|FenceClass
parameter_list|>
DECL|function|FenceTestHelper
name|gl
operator|::
name|Error
name|FenceTestHelper
parameter_list|(
name|FenceClass
modifier|*
name|fence
parameter_list|,
name|bool
name|flushCommandBuffer
parameter_list|,
name|GLboolean
modifier|*
name|outFinished
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|fence
operator|->
name|mQuery
argument_list|)
expr_stmt|;
name|UINT
name|getDataFlags
init|=
operator|(
name|flushCommandBuffer
condition|?
literal|0
else|:
name|D3D11_ASYNC_GETDATA_DONOTFLUSH
operator|)
decl_stmt|;
name|HRESULT
name|result
init|=
name|fence
operator|->
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
operator|->
name|GetData
argument_list|(
name|fence
operator|->
name|mQuery
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|getDataFlags
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to get query data, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fence
operator|->
name|mRenderer
operator|->
name|isDeviceLost
argument_list|()
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Device was lost while querying result of an event query."
argument_list|)
return|;
block|}
name|ASSERT
argument_list|(
name|result
operator|==
name|S_OK
operator|||
name|result
operator|==
name|S_FALSE
argument_list|)
expr_stmt|;
operator|*
name|outFinished
operator|=
operator|(
operator|(
name|result
operator|==
name|S_OK
operator|)
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
operator|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
comment|//
comment|// FenceNV11
comment|//
DECL|function|FenceNV11
name|FenceNV11
operator|::
name|FenceNV11
parameter_list|(
name|Renderer11
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|FenceNVImpl
argument_list|()
member_init_list|,
name|mRenderer
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mQuery
argument_list|(
name|NULL
argument_list|)
block|{ }
DECL|function|~FenceNV11
name|FenceNV11
operator|::
name|~
name|FenceNV11
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mQuery
argument_list|)
expr_stmt|;
block|}
DECL|function|set
name|gl
operator|::
name|Error
name|FenceNV11
operator|::
name|set
parameter_list|(
name|GLenum
name|condition
parameter_list|)
block|{
return|return
name|FenceSetHelper
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|function|test
name|gl
operator|::
name|Error
name|FenceNV11
operator|::
name|test
parameter_list|(
name|GLboolean
modifier|*
name|outFinished
parameter_list|)
block|{
return|return
name|FenceTestHelper
argument_list|(
name|this
argument_list|,
literal|true
argument_list|,
name|outFinished
argument_list|)
return|;
block|}
DECL|function|finish
name|gl
operator|::
name|Error
name|FenceNV11
operator|::
name|finish
parameter_list|()
block|{
name|GLboolean
name|finished
init|=
name|GL_FALSE
decl_stmt|;
while|while
condition|(
name|finished
operator|!=
name|GL_TRUE
condition|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|FenceTestHelper
argument_list|(
name|this
argument_list|,
literal|true
argument_list|,
operator|&
name|finished
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|ScheduleYield
argument_list|()
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
comment|//
comment|// FenceSync11
comment|//
comment|// Important note on accurate timers in Windows:
comment|//
comment|// QueryPerformanceCounter has a few major issues, including being 10x as expensive to call
comment|// as timeGetTime on laptops and "jumping" during certain hardware events.
comment|//
comment|// See the comments at the top of the Chromium source file "chromium/src/base/time/time_win.cc"
comment|//   https://code.google.com/p/chromium/codesearch#chromium/src/base/time/time_win.cc
comment|//
comment|// We still opt to use QPC. In the present and moving forward, most newer systems will not suffer
comment|// from buggy implementations.
DECL|function|FenceSync11
name|FenceSync11
operator|::
name|FenceSync11
parameter_list|(
name|Renderer11
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|FenceSyncImpl
argument_list|()
member_init_list|,
name|mRenderer
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mQuery
argument_list|(
name|NULL
argument_list|)
block|{
name|LARGE_INTEGER
name|counterFreqency
init|=
block|{}
decl_stmt|;
name|BOOL
name|success
init|=
name|QueryPerformanceFrequency
argument_list|(
operator|&
name|counterFreqency
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|mCounterFrequency
operator|=
name|counterFreqency
operator|.
name|QuadPart
expr_stmt|;
block|}
DECL|function|~FenceSync11
name|FenceSync11
operator|::
name|~
name|FenceSync11
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mQuery
argument_list|)
expr_stmt|;
block|}
DECL|function|set
name|gl
operator|::
name|Error
name|FenceSync11
operator|::
name|set
parameter_list|(
name|GLenum
name|condition
parameter_list|,
name|GLbitfield
name|flags
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|condition
operator|==
name|GL_SYNC_GPU_COMMANDS_COMPLETE
operator|&&
name|flags
operator|==
literal|0
argument_list|)
expr_stmt|;
return|return
name|FenceSetHelper
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|function|clientWait
name|gl
operator|::
name|Error
name|FenceSync11
operator|::
name|clientWait
parameter_list|(
name|GLbitfield
name|flags
parameter_list|,
name|GLuint64
name|timeout
parameter_list|,
name|GLenum
modifier|*
name|outResult
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|outResult
argument_list|)
expr_stmt|;
name|bool
name|flushCommandBuffer
init|=
operator|(
operator|(
name|flags
operator|&
name|GL_SYNC_FLUSH_COMMANDS_BIT
operator|)
operator|!=
literal|0
operator|)
decl_stmt|;
name|GLboolean
name|result
init|=
name|GL_FALSE
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|FenceTestHelper
argument_list|(
name|this
argument_list|,
name|flushCommandBuffer
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
operator|*
name|outResult
operator|=
name|GL_WAIT_FAILED
expr_stmt|;
return|return
name|error
return|;
block|}
if|if
condition|(
name|result
operator|==
name|GL_TRUE
condition|)
block|{
operator|*
name|outResult
operator|=
name|GL_ALREADY_SIGNALED
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
if|if
condition|(
name|timeout
operator|==
literal|0
condition|)
block|{
operator|*
name|outResult
operator|=
name|GL_TIMEOUT_EXPIRED
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
name|LARGE_INTEGER
name|currentCounter
init|=
block|{}
decl_stmt|;
name|BOOL
name|success
init|=
name|QueryPerformanceCounter
argument_list|(
operator|&
name|currentCounter
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|LONGLONG
name|timeoutInSeconds
init|=
cast|static_cast
argument_list|<
name|LONGLONG
argument_list|>
argument_list|(
name|timeout
argument_list|)
operator|*
cast|static_cast
argument_list|<
name|LONGLONG
argument_list|>
argument_list|(
literal|1000000ll
argument_list|)
decl_stmt|;
name|LONGLONG
name|endCounter
init|=
name|currentCounter
operator|.
name|QuadPart
operator|+
name|mCounterFrequency
operator|*
name|timeoutInSeconds
decl_stmt|;
while|while
condition|(
name|currentCounter
operator|.
name|QuadPart
operator|<
name|endCounter
operator|&&
operator|!
name|result
condition|)
block|{
name|ScheduleYield
argument_list|()
expr_stmt|;
name|success
operator|=
name|QueryPerformanceCounter
argument_list|(
operator|&
name|currentCounter
argument_list|)
expr_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|error
operator|=
name|FenceTestHelper
argument_list|(
name|this
argument_list|,
name|flushCommandBuffer
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
operator|*
name|outResult
operator|=
name|GL_WAIT_FAILED
expr_stmt|;
return|return
name|error
return|;
block|}
block|}
if|if
condition|(
name|currentCounter
operator|.
name|QuadPart
operator|>=
name|endCounter
condition|)
block|{
operator|*
name|outResult
operator|=
name|GL_TIMEOUT_EXPIRED
expr_stmt|;
block|}
else|else
block|{
operator|*
name|outResult
operator|=
name|GL_CONDITION_SATISFIED
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|serverWait
name|gl
operator|::
name|Error
name|FenceSync11
operator|::
name|serverWait
parameter_list|(
name|GLbitfield
name|flags
parameter_list|,
name|GLuint64
name|timeout
parameter_list|)
block|{
comment|// Because our API is currently designed to be called from a single thread, we don't need to do
comment|// extra work for a server-side fence. GPU commands issued after the fence is created will always
comment|// be processed after the fence is signaled.
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getStatus
name|gl
operator|::
name|Error
name|FenceSync11
operator|::
name|getStatus
parameter_list|(
name|GLint
modifier|*
name|outResult
parameter_list|)
block|{
name|GLboolean
name|result
init|=
name|GL_FALSE
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|FenceTestHelper
argument_list|(
name|this
argument_list|,
literal|false
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
comment|// The spec does not specify any way to report errors during the status test (e.g. device lost)
comment|// so we report the fence is unblocked in case of error or signaled.
operator|*
name|outResult
operator|=
name|GL_SIGNALED
expr_stmt|;
return|return
name|error
return|;
block|}
operator|*
name|outResult
operator|=
operator|(
name|result
condition|?
name|GL_SIGNALED
else|:
name|GL_UNSIGNALED
operator|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace rx
end_comment
end_unit
