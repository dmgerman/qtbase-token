begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// RenderTarget11.h: Defines a DX11-specific wrapper for ID3D11View pointers
end_comment
begin_comment
comment|// retained by Renderbuffers.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D_D3D11_RENDERTARGET11_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D_D3D11_RENDERTARGET11_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D_D3D11_RENDERTARGET11_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/RenderTargetD3D.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|SwapChain11
decl_stmt|;
name|class
name|Renderer11
decl_stmt|;
name|class
name|RenderTarget11
range|:
name|public
name|RenderTargetD3D
block|{
name|public
operator|:
name|RenderTarget11
argument_list|()
block|{ }
name|virtual
operator|~
name|RenderTarget11
argument_list|()
block|{ }
name|virtual
name|ID3D11Resource
operator|*
name|getTexture
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|ID3D11RenderTargetView
operator|*
name|getRenderTargetView
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|ID3D11DepthStencilView
operator|*
name|getDepthStencilView
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|ID3D11ShaderResourceView
operator|*
name|getShaderResourceView
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|unsigned
name|int
name|getSubresourceIndex
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|DXGI_FORMAT
name|getDXGIFormat
argument_list|()
specifier|const
operator|=
literal|0
block|; }
decl_stmt|;
name|class
name|TextureRenderTarget11
range|:
name|public
name|RenderTarget11
block|{
name|public
operator|:
comment|// TextureRenderTarget11 takes ownership of any D3D11 resources it is given and will AddRef them
name|TextureRenderTarget11
argument_list|(
argument|ID3D11RenderTargetView *rtv
argument_list|,
argument|ID3D11Resource *resource
argument_list|,
argument|ID3D11ShaderResourceView *srv
argument_list|,
argument|GLenum internalFormat
argument_list|,
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|,
argument|GLsizei depth
argument_list|,
argument|GLsizei samples
argument_list|)
block|;
name|TextureRenderTarget11
argument_list|(
argument|ID3D11DepthStencilView *dsv
argument_list|,
argument|ID3D11Resource *resource
argument_list|,
argument|ID3D11ShaderResourceView *srv
argument_list|,
argument|GLenum internalFormat
argument_list|,
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|,
argument|GLsizei depth
argument_list|,
argument|GLsizei samples
argument_list|)
block|;
name|virtual
operator|~
name|TextureRenderTarget11
argument_list|()
block|;
name|GLsizei
name|getWidth
argument_list|()
specifier|const
name|override
block|;
name|GLsizei
name|getHeight
argument_list|()
specifier|const
name|override
block|;
name|GLsizei
name|getDepth
argument_list|()
specifier|const
name|override
block|;
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
name|override
block|;
name|GLsizei
name|getSamples
argument_list|()
specifier|const
name|override
block|;
name|ID3D11Resource
operator|*
name|getTexture
argument_list|()
specifier|const
name|override
block|;
name|ID3D11RenderTargetView
operator|*
name|getRenderTargetView
argument_list|()
specifier|const
name|override
block|;
name|ID3D11DepthStencilView
operator|*
name|getDepthStencilView
argument_list|()
specifier|const
name|override
block|;
name|ID3D11ShaderResourceView
operator|*
name|getShaderResourceView
argument_list|()
specifier|const
name|override
block|;
name|unsigned
name|int
name|getSubresourceIndex
argument_list|()
specifier|const
name|override
block|;
name|DXGI_FORMAT
name|getDXGIFormat
argument_list|()
specifier|const
name|override
block|;
name|private
operator|:
name|GLsizei
name|mWidth
block|;
name|GLsizei
name|mHeight
block|;
name|GLsizei
name|mDepth
block|;
name|GLenum
name|mInternalFormat
block|;
name|DXGI_FORMAT
name|mDXGIFormat
block|;
name|GLsizei
name|mSamples
block|;
name|unsigned
name|int
name|mSubresourceIndex
block|;
name|ID3D11Resource
operator|*
name|mTexture
block|;
name|ID3D11RenderTargetView
operator|*
name|mRenderTarget
block|;
name|ID3D11DepthStencilView
operator|*
name|mDepthStencil
block|;
name|ID3D11ShaderResourceView
operator|*
name|mShaderResource
block|; }
decl_stmt|;
name|class
name|SurfaceRenderTarget11
range|:
name|public
name|RenderTarget11
block|{
name|public
operator|:
name|SurfaceRenderTarget11
argument_list|(
argument|SwapChain11 *swapChain
argument_list|,
argument|Renderer11 *renderer
argument_list|,
argument|bool depth
argument_list|)
block|;
name|virtual
operator|~
name|SurfaceRenderTarget11
argument_list|()
block|;
name|GLsizei
name|getWidth
argument_list|()
specifier|const
name|override
block|;
name|GLsizei
name|getHeight
argument_list|()
specifier|const
name|override
block|;
name|GLsizei
name|getDepth
argument_list|()
specifier|const
name|override
block|;
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
name|override
block|;
name|GLsizei
name|getSamples
argument_list|()
specifier|const
name|override
block|;
name|ID3D11Resource
operator|*
name|getTexture
argument_list|()
specifier|const
name|override
block|;
name|ID3D11RenderTargetView
operator|*
name|getRenderTargetView
argument_list|()
specifier|const
name|override
block|;
name|ID3D11DepthStencilView
operator|*
name|getDepthStencilView
argument_list|()
specifier|const
name|override
block|;
name|ID3D11ShaderResourceView
operator|*
name|getShaderResourceView
argument_list|()
specifier|const
name|override
block|;
name|unsigned
name|int
name|getSubresourceIndex
argument_list|()
specifier|const
name|override
block|;
name|DXGI_FORMAT
name|getDXGIFormat
argument_list|()
specifier|const
name|override
block|;
name|private
operator|:
name|SwapChain11
operator|*
name|mSwapChain
block|;
name|Renderer11
operator|*
name|mRenderer
block|;
name|bool
name|mDepth
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D_D3D11_RENDERTARGET11_H_
end_comment
end_unit
