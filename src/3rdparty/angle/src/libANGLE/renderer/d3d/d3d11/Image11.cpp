begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Image11.h: Implements the rx::Image11 class, which acts as the interface to
end_comment
begin_comment
comment|// the actual underlying resources of a Texture
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Image11.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/formatutils11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/RenderTarget11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/texture_format_table.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/TextureStorage11.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|Image11
name|Image11
operator|::
name|Image11
parameter_list|(
name|Renderer11
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mDXGIFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|mStagingTexture
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mStagingSubresource
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mRecoverFromStorage
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mAssociatedStorage
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mAssociatedImageIndex
argument_list|(
name|gl
operator|::
name|ImageIndex
operator|::
name|MakeInvalid
argument_list|()
argument_list|)
member_init_list|,
name|mRecoveredFromStorageCount
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|~Image11
name|Image11
operator|::
name|~
name|Image11
parameter_list|()
block|{
name|disassociateStorage
argument_list|()
expr_stmt|;
name|releaseStagingTexture
argument_list|()
expr_stmt|;
block|}
DECL|function|generateMipmap
name|gl
operator|::
name|Error
name|Image11
operator|::
name|generateMipmap
parameter_list|(
name|Image11
modifier|*
name|dest
parameter_list|,
name|Image11
modifier|*
name|src
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|src
operator|->
name|getDXGIFormat
argument_list|()
operator|==
name|dest
operator|->
name|getDXGIFormat
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|src
operator|->
name|getWidth
argument_list|()
operator|==
literal|1
operator|||
name|src
operator|->
name|getWidth
argument_list|()
operator|/
literal|2
operator|==
name|dest
operator|->
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|src
operator|->
name|getHeight
argument_list|()
operator|==
literal|1
operator|||
name|src
operator|->
name|getHeight
argument_list|()
operator|/
literal|2
operator|==
name|dest
operator|->
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|d3d11
operator|::
name|DXGIFormat
modifier|&
name|dxgiFormatInfo
init|=
name|d3d11
operator|::
name|GetDXGIFormatInfo
argument_list|(
name|src
operator|->
name|getDXGIFormat
argument_list|()
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|dxgiFormatInfo
operator|.
name|mipGenerationFunction
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|destMapped
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|dest
operator|->
name|map
argument_list|(
name|D3D11_MAP_WRITE
argument_list|,
operator|&
name|destMapped
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|D3D11_MAPPED_SUBRESOURCE
name|srcMapped
decl_stmt|;
name|error
operator|=
name|src
operator|->
name|map
argument_list|(
name|D3D11_MAP_READ
argument_list|,
operator|&
name|srcMapped
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|dest
operator|->
name|unmap
argument_list|()
expr_stmt|;
return|return
name|error
return|;
block|}
specifier|const
name|uint8_t
modifier|*
name|sourceData
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|srcMapped
operator|.
name|pData
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|destData
init|=
cast|reinterpret_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|destMapped
operator|.
name|pData
argument_list|)
decl_stmt|;
name|dxgiFormatInfo
operator|.
name|mipGenerationFunction
argument_list|(
name|src
operator|->
name|getWidth
argument_list|()
argument_list|,
name|src
operator|->
name|getHeight
argument_list|()
argument_list|,
name|src
operator|->
name|getDepth
argument_list|()
argument_list|,
name|sourceData
argument_list|,
name|srcMapped
operator|.
name|RowPitch
argument_list|,
name|srcMapped
operator|.
name|DepthPitch
argument_list|,
name|destData
argument_list|,
name|destMapped
operator|.
name|RowPitch
argument_list|,
name|destMapped
operator|.
name|DepthPitch
argument_list|)
expr_stmt|;
name|dest
operator|->
name|unmap
argument_list|()
expr_stmt|;
name|src
operator|->
name|unmap
argument_list|()
expr_stmt|;
name|dest
operator|->
name|markDirty
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|isDirty
name|bool
name|Image11
operator|::
name|isDirty
parameter_list|()
specifier|const
block|{
comment|// If mDirty is true
comment|// AND mStagingTexture doesn't exist AND mStagingTexture doesn't need to be recovered from TextureStorage
comment|// AND the texture doesn't require init data (i.e. a blank new texture will suffice)
comment|// then isDirty should still return false.
if|if
condition|(
name|mDirty
operator|&&
operator|!
name|mStagingTexture
operator|&&
operator|!
name|mRecoverFromStorage
condition|)
block|{
specifier|const
name|Renderer11DeviceCaps
modifier|&
name|deviceCaps
init|=
name|mRenderer
operator|->
name|getRenderer11DeviceCaps
argument_list|()
decl_stmt|;
specifier|const
name|d3d11
operator|::
name|TextureFormat
name|formatInfo
init|=
name|d3d11
operator|::
name|GetTextureFormatInfo
argument_list|(
name|mInternalFormat
argument_list|,
name|deviceCaps
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatInfo
operator|.
name|dataInitializerFunction
operator|==
literal|nullptr
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|mDirty
return|;
block|}
DECL|function|copyToStorage
name|gl
operator|::
name|Error
name|Image11
operator|::
name|copyToStorage
parameter_list|(
name|TextureStorage
modifier|*
name|storage
parameter_list|,
specifier|const
name|gl
operator|::
name|ImageIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|region
parameter_list|)
block|{
name|TextureStorage11
modifier|*
name|storage11
init|=
name|GetAs
argument_list|<
name|TextureStorage11
argument_list|>
argument_list|(
name|storage
argument_list|)
decl_stmt|;
comment|// If an app's behavior results in an Image11 copying its data to/from to a TextureStorage multiple times,
comment|// then we should just keep the staging texture around to prevent the copying from impacting perf.
comment|// We allow the Image11 to copy its data to/from TextureStorage once.
comment|// This accounts for an app making a late call to glGenerateMipmap.
name|bool
name|attemptToReleaseStagingTexture
init|=
operator|(
name|mRecoveredFromStorageCount
operator|<
literal|2
operator|)
decl_stmt|;
if|if
condition|(
name|attemptToReleaseStagingTexture
condition|)
block|{
comment|// If another image is relying on this Storage for its data, then we must let it recover its data before we overwrite it.
name|gl
operator|::
name|Error
name|error
init|=
name|storage11
operator|->
name|releaseAssociatedImage
argument_list|(
name|index
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
name|ID3D11Resource
modifier|*
name|stagingTexture
init|=
name|NULL
decl_stmt|;
name|unsigned
name|int
name|stagingSubresourceIndex
init|=
literal|0
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|getStagingTexture
argument_list|(
operator|&
name|stagingTexture
argument_list|,
operator|&
name|stagingSubresourceIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|error
operator|=
name|storage11
operator|->
name|updateSubresourceLevel
argument_list|(
name|stagingTexture
argument_list|,
name|stagingSubresourceIndex
argument_list|,
name|index
argument_list|,
name|region
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
comment|// Once the image data has been copied into the Storage, we can release it locally.
if|if
condition|(
name|attemptToReleaseStagingTexture
condition|)
block|{
name|storage11
operator|->
name|associateImage
argument_list|(
name|this
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|releaseStagingTexture
argument_list|()
expr_stmt|;
name|mRecoverFromStorage
operator|=
literal|true
expr_stmt|;
name|mAssociatedStorage
operator|=
name|storage11
expr_stmt|;
name|mAssociatedImageIndex
operator|=
name|index
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|isAssociatedStorageValid
name|bool
name|Image11
operator|::
name|isAssociatedStorageValid
parameter_list|(
name|TextureStorage11
modifier|*
name|textureStorage
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|mAssociatedStorage
operator|==
name|textureStorage
operator|)
return|;
block|}
DECL|function|recoverFromAssociatedStorage
name|gl
operator|::
name|Error
name|Image11
operator|::
name|recoverFromAssociatedStorage
parameter_list|()
block|{
if|if
condition|(
name|mRecoverFromStorage
condition|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|createStagingTexture
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|bool
name|textureStorageCorrect
init|=
name|mAssociatedStorage
operator|->
name|isAssociatedImageValid
argument_list|(
name|mAssociatedImageIndex
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// This means that the cached TextureStorage has been modified after this Image11 released its copy of its data.
comment|// This should not have happened. The TextureStorage should have told this Image11 to recover its data before it was overwritten.
name|ASSERT
argument_list|(
name|textureStorageCorrect
argument_list|)
expr_stmt|;
if|if
condition|(
name|textureStorageCorrect
condition|)
block|{
comment|// CopySubResource from the Storage to the Staging texture
name|gl
operator|::
name|Box
name|region
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|mWidth
argument_list|,
name|mHeight
argument_list|,
name|mDepth
argument_list|)
decl_stmt|;
name|error
operator|=
name|mAssociatedStorage
operator|->
name|copySubresourceLevel
argument_list|(
name|mStagingTexture
argument_list|,
name|mStagingSubresource
argument_list|,
name|mAssociatedImageIndex
argument_list|,
name|region
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|mRecoveredFromStorageCount
operator|+=
literal|1
expr_stmt|;
block|}
comment|// Reset all the recovery parameters, even if the texture storage association is broken.
name|disassociateStorage
argument_list|()
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|disassociateStorage
name|void
name|Image11
operator|::
name|disassociateStorage
parameter_list|()
block|{
if|if
condition|(
name|mRecoverFromStorage
condition|)
block|{
comment|// Make the texturestorage release the Image11 too
name|mAssociatedStorage
operator|->
name|disassociateImage
argument_list|(
name|mAssociatedImageIndex
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|mRecoverFromStorage
operator|=
literal|false
expr_stmt|;
name|mAssociatedStorage
operator|=
name|NULL
expr_stmt|;
name|mAssociatedImageIndex
operator|=
name|gl
operator|::
name|ImageIndex
operator|::
name|MakeInvalid
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|redefine
name|bool
name|Image11
operator|::
name|redefine
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|size
parameter_list|,
name|bool
name|forceRelease
parameter_list|)
block|{
if|if
condition|(
name|mWidth
operator|!=
name|size
operator|.
name|width
operator|||
name|mHeight
operator|!=
name|size
operator|.
name|height
operator|||
name|mInternalFormat
operator|!=
name|internalformat
operator|||
name|forceRelease
condition|)
block|{
comment|// End the association with the TextureStorage, since that data will be out of date.
comment|// Also reset mRecoveredFromStorageCount since this Image is getting completely redefined.
name|disassociateStorage
argument_list|()
expr_stmt|;
name|mRecoveredFromStorageCount
operator|=
literal|0
expr_stmt|;
name|mWidth
operator|=
name|size
operator|.
name|width
expr_stmt|;
name|mHeight
operator|=
name|size
operator|.
name|height
expr_stmt|;
name|mDepth
operator|=
name|size
operator|.
name|depth
expr_stmt|;
name|mInternalFormat
operator|=
name|internalformat
expr_stmt|;
name|mTarget
operator|=
name|target
expr_stmt|;
comment|// compute the d3d format that will be used
specifier|const
name|d3d11
operator|::
name|TextureFormat
modifier|&
name|formatInfo
init|=
name|d3d11
operator|::
name|GetTextureFormatInfo
argument_list|(
name|internalformat
argument_list|,
name|mRenderer
operator|->
name|getRenderer11DeviceCaps
argument_list|()
argument_list|)
decl_stmt|;
name|mDXGIFormat
operator|=
name|formatInfo
operator|.
name|texFormat
expr_stmt|;
name|mRenderable
operator|=
operator|(
name|formatInfo
operator|.
name|rtvFormat
operator|!=
name|DXGI_FORMAT_UNKNOWN
operator|)
expr_stmt|;
name|releaseStagingTexture
argument_list|()
expr_stmt|;
name|mDirty
operator|=
operator|(
name|formatInfo
operator|.
name|dataInitializerFunction
operator|!=
name|NULL
operator|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|getDXGIFormat
name|DXGI_FORMAT
name|Image11
operator|::
name|getDXGIFormat
parameter_list|()
specifier|const
block|{
comment|// this should only happen if the image hasn't been redefined first
comment|// which would be a bug by the caller
name|ASSERT
argument_list|(
name|mDXGIFormat
operator|!=
name|DXGI_FORMAT_UNKNOWN
argument_list|)
expr_stmt|;
return|return
name|mDXGIFormat
return|;
block|}
comment|// Store the pixel rectangle designated by xoffset,yoffset,width,height with pixels stored as format/type at input
comment|// into the target pixel rectangle.
DECL|function|loadData
name|gl
operator|::
name|Error
name|Image11
operator|::
name|loadData
parameter_list|(
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|area
parameter_list|,
specifier|const
name|gl
operator|::
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|)
block|{
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|mInternalFormat
argument_list|)
decl_stmt|;
name|GLsizei
name|inputRowPitch
init|=
name|formatInfo
operator|.
name|computeRowPitch
argument_list|(
name|type
argument_list|,
name|area
operator|.
name|width
argument_list|,
name|unpack
operator|.
name|alignment
argument_list|,
name|unpack
operator|.
name|rowLength
argument_list|)
decl_stmt|;
name|GLsizei
name|inputDepthPitch
init|=
name|formatInfo
operator|.
name|computeDepthPitch
argument_list|(
name|type
argument_list|,
name|area
operator|.
name|width
argument_list|,
name|area
operator|.
name|height
argument_list|,
name|unpack
operator|.
name|alignment
argument_list|,
name|unpack
operator|.
name|rowLength
argument_list|,
name|unpack
operator|.
name|imageHeight
argument_list|)
decl_stmt|;
name|GLsizei
name|inputSkipBytes
init|=
name|formatInfo
operator|.
name|computeSkipPixels
argument_list|(
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|,
name|unpack
operator|.
name|skipImages
argument_list|,
name|unpack
operator|.
name|skipRows
argument_list|,
name|unpack
operator|.
name|skipPixels
argument_list|)
decl_stmt|;
specifier|const
name|d3d11
operator|::
name|DXGIFormat
modifier|&
name|dxgiFormatInfo
init|=
name|d3d11
operator|::
name|GetDXGIFormatInfo
argument_list|(
name|mDXGIFormat
argument_list|)
decl_stmt|;
name|GLuint
name|outputPixelSize
init|=
name|dxgiFormatInfo
operator|.
name|pixelBytes
decl_stmt|;
specifier|const
name|d3d11
operator|::
name|TextureFormat
modifier|&
name|d3dFormatInfo
init|=
name|d3d11
operator|::
name|GetTextureFormatInfo
argument_list|(
name|mInternalFormat
argument_list|,
name|mRenderer
operator|->
name|getRenderer11DeviceCaps
argument_list|()
argument_list|)
decl_stmt|;
name|LoadImageFunction
name|loadFunction
init|=
name|d3dFormatInfo
operator|.
name|loadFunctions
operator|.
name|at
argument_list|(
name|type
argument_list|)
operator|.
name|loadFunction
decl_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedImage
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|map
argument_list|(
name|D3D11_MAP_WRITE
argument_list|,
operator|&
name|mappedImage
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|uint8_t
modifier|*
name|offsetMappedData
init|=
operator|(
cast|reinterpret_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|mappedImage
operator|.
name|pData
argument_list|)
operator|+
operator|(
name|area
operator|.
name|y
operator|*
name|mappedImage
operator|.
name|RowPitch
operator|+
name|area
operator|.
name|x
operator|*
name|outputPixelSize
operator|+
name|area
operator|.
name|z
operator|*
name|mappedImage
operator|.
name|DepthPitch
operator|)
operator|)
decl_stmt|;
name|loadFunction
argument_list|(
name|area
operator|.
name|width
argument_list|,
name|area
operator|.
name|height
argument_list|,
name|area
operator|.
name|depth
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|inputSkipBytes
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|,
name|offsetMappedData
argument_list|,
name|mappedImage
operator|.
name|RowPitch
argument_list|,
name|mappedImage
operator|.
name|DepthPitch
argument_list|)
expr_stmt|;
name|unmap
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|loadCompressedData
name|gl
operator|::
name|Error
name|Image11
operator|::
name|loadCompressedData
parameter_list|(
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|area
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|)
block|{
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|mInternalFormat
argument_list|)
decl_stmt|;
name|GLsizei
name|inputRowPitch
init|=
name|formatInfo
operator|.
name|computeRowPitch
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|area
operator|.
name|width
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|GLsizei
name|inputDepthPitch
init|=
name|formatInfo
operator|.
name|computeDepthPitch
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|area
operator|.
name|width
argument_list|,
name|area
operator|.
name|height
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|d3d11
operator|::
name|DXGIFormat
modifier|&
name|dxgiFormatInfo
init|=
name|d3d11
operator|::
name|GetDXGIFormatInfo
argument_list|(
name|mDXGIFormat
argument_list|)
decl_stmt|;
name|GLuint
name|outputPixelSize
init|=
name|dxgiFormatInfo
operator|.
name|pixelBytes
decl_stmt|;
name|GLuint
name|outputBlockWidth
init|=
name|dxgiFormatInfo
operator|.
name|blockWidth
decl_stmt|;
name|GLuint
name|outputBlockHeight
init|=
name|dxgiFormatInfo
operator|.
name|blockHeight
decl_stmt|;
name|ASSERT
argument_list|(
name|area
operator|.
name|x
operator|%
name|outputBlockWidth
operator|==
literal|0
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|area
operator|.
name|y
operator|%
name|outputBlockHeight
operator|==
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|d3d11
operator|::
name|TextureFormat
modifier|&
name|d3dFormatInfo
init|=
name|d3d11
operator|::
name|GetTextureFormatInfo
argument_list|(
name|mInternalFormat
argument_list|,
name|mRenderer
operator|->
name|getRenderer11DeviceCaps
argument_list|()
argument_list|)
decl_stmt|;
name|LoadImageFunction
name|loadFunction
init|=
name|d3dFormatInfo
operator|.
name|loadFunctions
operator|.
name|at
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|)
operator|.
name|loadFunction
decl_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedImage
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|map
argument_list|(
name|D3D11_MAP_WRITE
argument_list|,
operator|&
name|mappedImage
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|uint8_t
modifier|*
name|offsetMappedData
init|=
cast|reinterpret_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|mappedImage
operator|.
name|pData
argument_list|)
operator|+
operator|(
operator|(
name|area
operator|.
name|y
operator|/
name|outputBlockHeight
operator|)
operator|*
name|mappedImage
operator|.
name|RowPitch
operator|+
operator|(
name|area
operator|.
name|x
operator|/
name|outputBlockWidth
operator|)
operator|*
name|outputPixelSize
operator|+
name|area
operator|.
name|z
operator|*
name|mappedImage
operator|.
name|DepthPitch
operator|)
decl_stmt|;
name|loadFunction
argument_list|(
name|area
operator|.
name|width
argument_list|,
name|area
operator|.
name|height
argument_list|,
name|area
operator|.
name|depth
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|,
name|offsetMappedData
argument_list|,
name|mappedImage
operator|.
name|RowPitch
argument_list|,
name|mappedImage
operator|.
name|DepthPitch
argument_list|)
expr_stmt|;
name|unmap
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|copyFromTexStorage
name|gl
operator|::
name|Error
name|Image11
operator|::
name|copyFromTexStorage
parameter_list|(
specifier|const
name|gl
operator|::
name|ImageIndex
modifier|&
name|imageIndex
parameter_list|,
name|TextureStorage
modifier|*
name|source
parameter_list|)
block|{
name|TextureStorage11
modifier|*
name|storage11
init|=
name|GetAs
argument_list|<
name|TextureStorage11
argument_list|>
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|ID3D11Resource
modifier|*
name|resource
init|=
literal|nullptr
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|storage11
operator|->
name|getResource
argument_list|(
operator|&
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|UINT
name|subresourceIndex
init|=
name|storage11
operator|->
name|getSubresourceIndex
argument_list|(
name|imageIndex
argument_list|)
decl_stmt|;
name|TextureHelper11
name|textureHelper
init|=
name|TextureHelper11
operator|::
name|MakeAndReference
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Box
name|sourceBox
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|mWidth
argument_list|,
name|mHeight
argument_list|,
name|mDepth
argument_list|)
decl_stmt|;
return|return
name|copyWithoutConversion
argument_list|(
name|gl
operator|::
name|Offset
argument_list|()
argument_list|,
name|sourceBox
argument_list|,
name|textureHelper
argument_list|,
name|subresourceIndex
argument_list|)
return|;
block|}
DECL|function|copyFromFramebuffer
name|gl
operator|::
name|Error
name|Image11
operator|::
name|copyFromFramebuffer
parameter_list|(
specifier|const
name|gl
operator|::
name|Offset
modifier|&
name|destOffset
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|&
name|sourceArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Framebuffer
modifier|*
name|sourceFBO
parameter_list|)
block|{
specifier|const
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|srcAttachment
init|=
name|sourceFBO
operator|->
name|getReadColorbuffer
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|srcAttachment
argument_list|)
expr_stmt|;
specifier|const
specifier|auto
modifier|&
name|d3d11Format
init|=
name|d3d11
operator|::
name|GetTextureFormatInfo
argument_list|(
name|srcAttachment
operator|->
name|getInternalFormat
argument_list|()
argument_list|,
name|mRenderer
operator|->
name|getRenderer11DeviceCaps
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d3d11Format
operator|.
name|texFormat
operator|==
name|mDXGIFormat
condition|)
block|{
name|RenderTargetD3D
modifier|*
name|renderTarget
init|=
literal|nullptr
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|srcAttachment
operator|->
name|getRenderTarget
argument_list|(
operator|&
name|renderTarget
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|RenderTarget11
modifier|*
name|rt11
init|=
name|GetAs
argument_list|<
name|RenderTarget11
argument_list|>
argument_list|(
name|renderTarget
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|rt11
operator|->
name|getTexture
argument_list|()
argument_list|)
expr_stmt|;
name|TextureHelper11
name|textureHelper
init|=
name|TextureHelper11
operator|::
name|MakeAndReference
argument_list|(
name|rt11
operator|->
name|getTexture
argument_list|()
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|sourceSubResource
init|=
name|rt11
operator|->
name|getSubresourceIndex
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Box
name|sourceBox
argument_list|(
name|sourceArea
operator|.
name|x
argument_list|,
name|sourceArea
operator|.
name|y
argument_list|,
literal|0
argument_list|,
name|sourceArea
operator|.
name|width
argument_list|,
name|sourceArea
operator|.
name|height
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|copyWithoutConversion
argument_list|(
name|destOffset
argument_list|,
name|sourceBox
argument_list|,
name|textureHelper
argument_list|,
name|sourceSubResource
argument_list|)
return|;
block|}
comment|// This format requires conversion, so we must copy the texture to staging and manually convert
comment|// via readPixels
name|D3D11_MAPPED_SUBRESOURCE
name|mappedImage
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|map
argument_list|(
name|D3D11_MAP_WRITE
argument_list|,
operator|&
name|mappedImage
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
comment|// determine the offset coordinate into the destination buffer
specifier|const
specifier|auto
modifier|&
name|dxgiFormatInfo
init|=
name|d3d11
operator|::
name|GetDXGIFormatInfo
argument_list|(
name|mDXGIFormat
argument_list|)
decl_stmt|;
name|GLsizei
name|rowOffset
init|=
name|dxgiFormatInfo
operator|.
name|pixelBytes
operator|*
name|destOffset
operator|.
name|x
decl_stmt|;
name|uint8_t
modifier|*
name|dataOffset
init|=
cast|static_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|mappedImage
operator|.
name|pData
argument_list|)
operator|+
name|mappedImage
operator|.
name|RowPitch
operator|*
name|destOffset
operator|.
name|y
operator|+
name|rowOffset
operator|+
name|destOffset
operator|.
name|z
operator|*
name|mappedImage
operator|.
name|DepthPitch
decl_stmt|;
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|mInternalFormat
argument_list|)
decl_stmt|;
name|error
operator|=
name|mRenderer
operator|->
name|readFromAttachment
argument_list|(
operator|*
name|srcAttachment
argument_list|,
name|sourceArea
argument_list|,
name|formatInfo
operator|.
name|format
argument_list|,
name|formatInfo
operator|.
name|type
argument_list|,
name|mappedImage
operator|.
name|RowPitch
argument_list|,
name|gl
operator|::
name|PixelPackState
argument_list|()
argument_list|,
name|dataOffset
argument_list|)
expr_stmt|;
name|unmap
argument_list|()
expr_stmt|;
name|mDirty
operator|=
literal|true
expr_stmt|;
return|return
name|error
return|;
block|}
DECL|function|copyWithoutConversion
name|gl
operator|::
name|Error
name|Image11
operator|::
name|copyWithoutConversion
parameter_list|(
specifier|const
name|gl
operator|::
name|Offset
modifier|&
name|destOffset
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|sourceArea
parameter_list|,
specifier|const
name|TextureHelper11
modifier|&
name|textureHelper
parameter_list|,
name|UINT
name|sourceSubResource
parameter_list|)
block|{
comment|// No conversion needed-- use copyback fastpath
name|ID3D11Resource
modifier|*
name|stagingTexture
init|=
literal|nullptr
decl_stmt|;
name|unsigned
name|int
name|stagingSubresourceIndex
init|=
literal|0
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|getStagingTexture
argument_list|(
operator|&
name|stagingTexture
argument_list|,
operator|&
name|stagingSubresourceIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|deviceContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|UINT
name|subresourceAfterResolve
init|=
name|sourceSubResource
decl_stmt|;
name|ID3D11Resource
modifier|*
name|srcTex
init|=
literal|nullptr
decl_stmt|;
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|extents
init|=
name|textureHelper
operator|.
name|getExtents
argument_list|()
decl_stmt|;
name|bool
name|needResolve
init|=
operator|(
name|textureHelper
operator|.
name|getTextureType
argument_list|()
operator|==
name|GL_TEXTURE_2D
operator|&&
name|textureHelper
operator|.
name|getSampleCount
argument_list|()
operator|>
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|needResolve
condition|)
block|{
name|D3D11_TEXTURE2D_DESC
name|resolveDesc
decl_stmt|;
name|resolveDesc
operator|.
name|Width
operator|=
name|extents
operator|.
name|width
expr_stmt|;
name|resolveDesc
operator|.
name|Height
operator|=
name|extents
operator|.
name|height
expr_stmt|;
name|resolveDesc
operator|.
name|MipLevels
operator|=
literal|1
expr_stmt|;
name|resolveDesc
operator|.
name|ArraySize
operator|=
literal|1
expr_stmt|;
name|resolveDesc
operator|.
name|Format
operator|=
name|textureHelper
operator|.
name|getFormat
argument_list|()
expr_stmt|;
name|resolveDesc
operator|.
name|SampleDesc
operator|.
name|Count
operator|=
literal|1
expr_stmt|;
name|resolveDesc
operator|.
name|SampleDesc
operator|.
name|Quality
operator|=
literal|0
expr_stmt|;
name|resolveDesc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_DEFAULT
expr_stmt|;
name|resolveDesc
operator|.
name|BindFlags
operator|=
literal|0
expr_stmt|;
name|resolveDesc
operator|.
name|CPUAccessFlags
operator|=
literal|0
expr_stmt|;
name|resolveDesc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|ID3D11Texture2D
modifier|*
name|srcTex2D
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateTexture2D
argument_list|(
operator|&
name|resolveDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|srcTex2D
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to create resolve texture for Image11::copy, HRESULT: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
name|srcTex
operator|=
name|srcTex2D
expr_stmt|;
name|deviceContext
operator|->
name|ResolveSubresource
argument_list|(
name|srcTex
argument_list|,
literal|0
argument_list|,
name|textureHelper
operator|.
name|getTexture2D
argument_list|()
argument_list|,
name|sourceSubResource
argument_list|,
name|textureHelper
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
name|subresourceAfterResolve
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|srcTex
operator|=
name|textureHelper
operator|.
name|getResource
argument_list|()
expr_stmt|;
block|}
name|D3D11_BOX
name|srcBox
decl_stmt|;
name|srcBox
operator|.
name|left
operator|=
name|sourceArea
operator|.
name|x
expr_stmt|;
name|srcBox
operator|.
name|right
operator|=
name|sourceArea
operator|.
name|x
operator|+
name|sourceArea
operator|.
name|width
expr_stmt|;
name|srcBox
operator|.
name|top
operator|=
name|sourceArea
operator|.
name|y
expr_stmt|;
name|srcBox
operator|.
name|bottom
operator|=
name|sourceArea
operator|.
name|y
operator|+
name|sourceArea
operator|.
name|height
expr_stmt|;
name|srcBox
operator|.
name|front
operator|=
name|sourceArea
operator|.
name|z
expr_stmt|;
name|srcBox
operator|.
name|back
operator|=
name|sourceArea
operator|.
name|z
operator|+
name|sourceArea
operator|.
name|depth
expr_stmt|;
name|deviceContext
operator|->
name|CopySubresourceRegion
argument_list|(
name|stagingTexture
argument_list|,
name|stagingSubresourceIndex
argument_list|,
name|destOffset
operator|.
name|x
argument_list|,
name|destOffset
operator|.
name|y
argument_list|,
name|destOffset
operator|.
name|z
argument_list|,
name|srcTex
argument_list|,
name|subresourceAfterResolve
argument_list|,
operator|&
name|srcBox
argument_list|)
expr_stmt|;
if|if
condition|(
name|needResolve
condition|)
block|{
name|SafeRelease
argument_list|(
name|srcTex
argument_list|)
expr_stmt|;
block|}
name|mDirty
operator|=
literal|true
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getStagingTexture
name|gl
operator|::
name|Error
name|Image11
operator|::
name|getStagingTexture
parameter_list|(
name|ID3D11Resource
modifier|*
modifier|*
name|outStagingTexture
parameter_list|,
name|unsigned
name|int
modifier|*
name|outSubresourceIndex
parameter_list|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|createStagingTexture
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
operator|*
name|outStagingTexture
operator|=
name|mStagingTexture
expr_stmt|;
operator|*
name|outSubresourceIndex
operator|=
name|mStagingSubresource
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|releaseStagingTexture
name|void
name|Image11
operator|::
name|releaseStagingTexture
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mStagingTexture
argument_list|)
expr_stmt|;
block|}
DECL|function|createStagingTexture
name|gl
operator|::
name|Error
name|Image11
operator|::
name|createStagingTexture
parameter_list|()
block|{
if|if
condition|(
name|mStagingTexture
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
name|ASSERT
argument_list|(
name|mWidth
operator|>
literal|0
operator|&&
name|mHeight
operator|>
literal|0
operator|&&
name|mDepth
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|DXGI_FORMAT
name|dxgiFormat
init|=
name|getDXGIFormat
argument_list|()
decl_stmt|;
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|HRESULT
name|result
decl_stmt|;
name|int
name|lodOffset
init|=
literal|1
decl_stmt|;
name|GLsizei
name|width
init|=
name|mWidth
decl_stmt|;
name|GLsizei
name|height
init|=
name|mHeight
decl_stmt|;
comment|// adjust size if needed for compressed textures
name|d3d11
operator|::
name|MakeValidSize
argument_list|(
literal|false
argument_list|,
name|dxgiFormat
argument_list|,
operator|&
name|width
argument_list|,
operator|&
name|height
argument_list|,
operator|&
name|lodOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|mTarget
operator|==
name|GL_TEXTURE_3D
condition|)
block|{
name|ID3D11Texture3D
modifier|*
name|newTexture
init|=
name|NULL
decl_stmt|;
name|D3D11_TEXTURE3D_DESC
name|desc
decl_stmt|;
name|desc
operator|.
name|Width
operator|=
name|width
expr_stmt|;
name|desc
operator|.
name|Height
operator|=
name|height
expr_stmt|;
name|desc
operator|.
name|Depth
operator|=
name|mDepth
expr_stmt|;
name|desc
operator|.
name|MipLevels
operator|=
name|lodOffset
operator|+
literal|1
expr_stmt|;
name|desc
operator|.
name|Format
operator|=
name|dxgiFormat
expr_stmt|;
name|desc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_STAGING
expr_stmt|;
name|desc
operator|.
name|BindFlags
operator|=
literal|0
expr_stmt|;
name|desc
operator|.
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_READ
operator||
name|D3D11_CPU_ACCESS_WRITE
expr_stmt|;
name|desc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|d3d11
operator|::
name|GetTextureFormatInfo
argument_list|(
name|mInternalFormat
argument_list|,
name|mRenderer
operator|->
name|getRenderer11DeviceCaps
argument_list|()
argument_list|)
operator|.
name|dataInitializerFunction
operator|!=
name|NULL
condition|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|D3D11_SUBRESOURCE_DATA
argument_list|>
name|initialData
decl_stmt|;
name|std
operator|::
name|vector
argument_list|<
name|std
operator|::
name|vector
argument_list|<
name|BYTE
argument_list|>
argument_list|>
name|textureData
decl_stmt|;
name|d3d11
operator|::
name|GenerateInitialTextureData
argument_list|(
name|mInternalFormat
argument_list|,
name|mRenderer
operator|->
name|getRenderer11DeviceCaps
argument_list|()
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|mDepth
argument_list|,
name|lodOffset
operator|+
literal|1
argument_list|,
operator|&
name|initialData
argument_list|,
operator|&
name|textureData
argument_list|)
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateTexture3D
argument_list|(
operator|&
name|desc
argument_list|,
name|initialData
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|newTexture
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|device
operator|->
name|CreateTexture3D
argument_list|(
operator|&
name|desc
argument_list|,
name|NULL
argument_list|,
operator|&
name|newTexture
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to create staging texture, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
name|mStagingTexture
operator|=
name|newTexture
expr_stmt|;
name|mStagingSubresource
operator|=
name|D3D11CalcSubresource
argument_list|(
name|lodOffset
argument_list|,
literal|0
argument_list|,
name|lodOffset
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mTarget
operator|==
name|GL_TEXTURE_2D
operator|||
name|mTarget
operator|==
name|GL_TEXTURE_2D_ARRAY
operator|||
name|mTarget
operator|==
name|GL_TEXTURE_CUBE_MAP
condition|)
block|{
name|ID3D11Texture2D
modifier|*
name|newTexture
init|=
name|NULL
decl_stmt|;
name|D3D11_TEXTURE2D_DESC
name|desc
decl_stmt|;
name|desc
operator|.
name|Width
operator|=
name|width
expr_stmt|;
name|desc
operator|.
name|Height
operator|=
name|height
expr_stmt|;
name|desc
operator|.
name|MipLevels
operator|=
name|lodOffset
operator|+
literal|1
expr_stmt|;
name|desc
operator|.
name|ArraySize
operator|=
literal|1
expr_stmt|;
name|desc
operator|.
name|Format
operator|=
name|dxgiFormat
expr_stmt|;
name|desc
operator|.
name|SampleDesc
operator|.
name|Count
operator|=
literal|1
expr_stmt|;
name|desc
operator|.
name|SampleDesc
operator|.
name|Quality
operator|=
literal|0
expr_stmt|;
name|desc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_STAGING
expr_stmt|;
name|desc
operator|.
name|BindFlags
operator|=
literal|0
expr_stmt|;
name|desc
operator|.
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_READ
operator||
name|D3D11_CPU_ACCESS_WRITE
expr_stmt|;
name|desc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|d3d11
operator|::
name|GetTextureFormatInfo
argument_list|(
name|mInternalFormat
argument_list|,
name|mRenderer
operator|->
name|getRenderer11DeviceCaps
argument_list|()
argument_list|)
operator|.
name|dataInitializerFunction
operator|!=
name|NULL
condition|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|D3D11_SUBRESOURCE_DATA
argument_list|>
name|initialData
decl_stmt|;
name|std
operator|::
name|vector
argument_list|<
name|std
operator|::
name|vector
argument_list|<
name|BYTE
argument_list|>
argument_list|>
name|textureData
decl_stmt|;
name|d3d11
operator|::
name|GenerateInitialTextureData
argument_list|(
name|mInternalFormat
argument_list|,
name|mRenderer
operator|->
name|getRenderer11DeviceCaps
argument_list|()
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|lodOffset
operator|+
literal|1
argument_list|,
operator|&
name|initialData
argument_list|,
operator|&
name|textureData
argument_list|)
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateTexture2D
argument_list|(
operator|&
name|desc
argument_list|,
name|initialData
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|newTexture
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|device
operator|->
name|CreateTexture2D
argument_list|(
operator|&
name|desc
argument_list|,
name|NULL
argument_list|,
operator|&
name|newTexture
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to create staging texture, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
name|mStagingTexture
operator|=
name|newTexture
expr_stmt|;
name|mStagingSubresource
operator|=
name|D3D11CalcSubresource
argument_list|(
name|lodOffset
argument_list|,
literal|0
argument_list|,
name|lodOffset
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
name|mDirty
operator|=
literal|false
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|map
name|gl
operator|::
name|Error
name|Image11
operator|::
name|map
parameter_list|(
name|D3D11_MAP
name|mapType
parameter_list|,
name|D3D11_MAPPED_SUBRESOURCE
modifier|*
name|map
parameter_list|)
block|{
comment|// We must recover from the TextureStorage if necessary, even for D3D11_MAP_WRITE.
name|gl
operator|::
name|Error
name|error
init|=
name|recoverFromAssociatedStorage
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|ID3D11Resource
modifier|*
name|stagingTexture
init|=
name|NULL
decl_stmt|;
name|unsigned
name|int
name|subresourceIndex
init|=
literal|0
decl_stmt|;
name|error
operator|=
name|getStagingTexture
argument_list|(
operator|&
name|stagingTexture
argument_list|,
operator|&
name|subresourceIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|ID3D11DeviceContext
modifier|*
name|deviceContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|mStagingTexture
argument_list|)
expr_stmt|;
name|HRESULT
name|result
init|=
name|deviceContext
operator|->
name|Map
argument_list|(
name|stagingTexture
argument_list|,
name|subresourceIndex
argument_list|,
name|mapType
argument_list|,
literal|0
argument_list|,
name|map
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
comment|// this can fail if the device is removed (from TDR)
if|if
condition|(
name|d3d11
operator|::
name|isDeviceLostError
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|mRenderer
operator|->
name|notifyDeviceLost
argument_list|()
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to map staging texture, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
name|mDirty
operator|=
literal|true
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|unmap
name|void
name|Image11
operator|::
name|unmap
parameter_list|()
block|{
if|if
condition|(
name|mStagingTexture
condition|)
block|{
name|ID3D11DeviceContext
modifier|*
name|deviceContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|deviceContext
operator|->
name|Unmap
argument_list|(
name|mStagingTexture
argument_list|,
name|mStagingSubresource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_namespace
begin_comment
comment|// namespace rx
end_comment
end_unit
