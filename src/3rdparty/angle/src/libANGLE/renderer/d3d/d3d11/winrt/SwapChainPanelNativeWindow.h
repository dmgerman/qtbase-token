begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// SwapChainPanelNativeWindow.h: NativeWindow for managing ISwapChainPanel native window types.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D_D3D11_WINRT_SWAPCHAINPANELNATIVEWINDOW_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D_D3D11_WINRT_SWAPCHAINPANELNATIVEWINDOW_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D_D3D11_WINRT_SWAPCHAINPANELNATIVEWINDOW_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|SwapChainPanelNativeWindow
range|:
name|public
name|InspectableNativeWindow
decl_stmt|,
name|public
name|std
decl|::
name|enable_shared_from_this
decl|<
name|SwapChainPanelNativeWindow
decl|>
block|{
name|public
label|:
operator|~
name|SwapChainPanelNativeWindow
argument_list|()
expr_stmt|;
name|bool
name|initialize
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|,
name|IPropertySet
modifier|*
name|propertySet
parameter_list|)
function_decl|;
name|bool
name|registerForSizeChangeEvents
parameter_list|()
function_decl|;
name|void
name|unregisterForSizeChangeEvents
parameter_list|()
function_decl|;
name|HRESULT
name|createSwapChain
parameter_list|(
name|ID3D11Device
modifier|*
name|device
parameter_list|,
name|DXGIFactory
modifier|*
name|factory
parameter_list|,
name|DXGI_FORMAT
name|format
parameter_list|,
name|unsigned
name|int
name|width
parameter_list|,
name|unsigned
name|int
name|height
parameter_list|,
name|DXGISwapChain
modifier|*
modifier|*
name|swapChain
parameter_list|)
function_decl|;
name|HRESULT
name|scaleSwapChain
argument_list|(
specifier|const
name|Size
operator|&
name|newSize
argument_list|)
name|override
decl_stmt|;
name|private
label|:
name|ComPtr
operator|<
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
operator|::
name|Controls
operator|::
name|ISwapChainPanel
operator|>
name|mSwapChainPanel
expr_stmt|;
name|ComPtr
operator|<
name|IMap
operator|<
name|HSTRING
operator|,
name|IInspectable
operator|*
operator|>>
name|mPropertyMap
expr_stmt|;
name|ComPtr
operator|<
name|DXGISwapChain
operator|>
name|mSwapChain
expr_stmt|;
block|}
empty_stmt|;
index|[
name|uuid
argument_list|(
literal|8ACBD974
operator|-
literal|8187
operator|-
literal|4508
operator|-
name|AD80
operator|-
name|AEC77F93CF36
argument_list|)
index|]
name|class
name|SwapChainPanelSizeChangedHandler
operator|:
name|public
name|Microsoft
operator|::
name|WRL
operator|::
name|RuntimeClass
operator|<
name|Microsoft
operator|::
name|WRL
operator|::
name|RuntimeClassFlags
operator|<
name|Microsoft
operator|::
name|WRL
operator|::
name|ClassicCom
operator|>
operator|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
operator|::
name|ISizeChangedEventHandler
operator|>
block|{
name|public
operator|:
name|SwapChainPanelSizeChangedHandler
argument_list|()
block|{ }
name|HRESULT
name|RuntimeClassInitialize
argument_list|(
argument|std::shared_ptr<InspectableNativeWindow> host
argument_list|)
block|{
if|if
condition|(
operator|!
name|host
condition|)
block|{
return|return
name|E_INVALIDARG
return|;
block|}
name|mHost
operator|=
name|host
expr_stmt|;
return|return
name|S_OK
return|;
block|}
comment|// ISizeChangedEventHandler
name|IFACEMETHOD
argument_list|(
argument|Invoke
argument_list|)
operator|(
name|IInspectable
operator|*
name|sender
operator|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
operator|::
name|ISizeChangedEventArgs
operator|*
name|sizeChangedEventArgs
operator|)
block|{
name|std
operator|::
name|shared_ptr
operator|<
name|InspectableNativeWindow
operator|>
name|host
operator|=
name|mHost
operator|.
name|lock
argument_list|()
block|;
if|if
condition|(
name|host
condition|)
block|{
comment|// The size of the ISwapChainPanel control is returned in DIPs.
comment|// We are keeping these in dips because the swapchain created for composition
comment|// also uses dip units. This keeps dimensions, viewports, etc in the same unit.
comment|// XAML Clients of the ISwapChainPanel are required to use dips to define their
comment|// layout sizes as well.
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Size
name|newSize
expr_stmt|;
name|HRESULT
name|result
init|=
name|sizeChangedEventArgs
operator|->
name|get_NewSize
argument_list|(
operator|&
name|newSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|host
operator|->
name|setNewClientSize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|S_OK
return|;
block|}
name|private
label|:
name|std
operator|::
name|weak_ptr
operator|<
name|InspectableNativeWindow
operator|>
name|mHost
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|HRESULT
name|GetSwapChainPanelSize
argument_list|(
specifier|const
name|ComPtr
operator|<
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Xaml
operator|::
name|Controls
operator|::
name|ISwapChainPanel
operator|>
operator|&
name|swapChainPanel
argument_list|,
name|RECT
operator|*
name|windowSize
argument_list|,
name|bool
operator|*
name|scalingActive
operator|=
name|nullptr
argument_list|)
decl_stmt|;
end_decl_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D_D3D11_WINRT_SWAPCHAINPANELNATIVEWINDOW_H_
end_comment
end_unit
