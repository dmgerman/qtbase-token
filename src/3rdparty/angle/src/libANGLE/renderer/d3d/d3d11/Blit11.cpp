begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Blit11.cpp: Texture copy utility class.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Blit11.h"
end_include
begin_include
include|#
directive|include
file|<float.h>
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/formatutils11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthrough2d11vs.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughdepth2d11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrgba2d11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrgba2dui11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrgba2di11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrgb2d11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrgb2dui11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrgb2di11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrg2d11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrg2dui11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrg2di11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughr2d11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughr2dui11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughr2di11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughlum2d11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughlumalpha2d11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthrough3d11vs.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthrough3d11gs.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrgba3d11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrgba3dui11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrgba3di11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrgb3d11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrgb3dui11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrgb3di11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrg3d11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrg3dui11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughrg3di11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughr3d11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughr3dui11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughr3di11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughlum3d11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/passthroughlumalpha3d11ps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/swizzlef2dps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/swizzlei2dps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/swizzleui2dps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/swizzlef3dps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/swizzlei3dps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/swizzleui3dps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/swizzlef2darrayps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/swizzlei2darrayps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/shaders/compiled/swizzleui2darrayps.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|GetTextureFormat
specifier|static
name|DXGI_FORMAT
name|GetTextureFormat
parameter_list|(
name|ID3D11Resource
modifier|*
name|resource
parameter_list|)
block|{
name|ID3D11Texture2D
modifier|*
name|texture
init|=
name|d3d11
operator|::
name|DynamicCastComObject
argument_list|<
name|ID3D11Texture2D
argument_list|>
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
condition|)
block|{
return|return
name|DXGI_FORMAT_UNKNOWN
return|;
block|}
name|D3D11_TEXTURE2D_DESC
name|desc
decl_stmt|;
name|texture
operator|->
name|GetDesc
argument_list|(
operator|&
name|desc
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|texture
argument_list|)
expr_stmt|;
return|return
name|desc
operator|.
name|Format
return|;
block|}
DECL|function|CreateStagingTexture
specifier|static
name|ID3D11Resource
modifier|*
name|CreateStagingTexture
parameter_list|(
name|ID3D11Device
modifier|*
name|device
parameter_list|,
name|ID3D11DeviceContext
modifier|*
name|context
parameter_list|,
name|ID3D11Resource
modifier|*
name|source
parameter_list|,
name|unsigned
name|int
name|subresource
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|size
parameter_list|,
name|unsigned
name|int
name|cpuAccessFlags
parameter_list|)
block|{
name|D3D11_TEXTURE2D_DESC
name|stagingDesc
decl_stmt|;
name|stagingDesc
operator|.
name|Width
operator|=
name|size
operator|.
name|width
expr_stmt|;
name|stagingDesc
operator|.
name|Height
operator|=
name|size
operator|.
name|height
expr_stmt|;
name|stagingDesc
operator|.
name|MipLevels
operator|=
literal|1
expr_stmt|;
name|stagingDesc
operator|.
name|ArraySize
operator|=
literal|1
expr_stmt|;
name|stagingDesc
operator|.
name|Format
operator|=
name|GetTextureFormat
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|stagingDesc
operator|.
name|SampleDesc
operator|.
name|Count
operator|=
literal|1
expr_stmt|;
name|stagingDesc
operator|.
name|SampleDesc
operator|.
name|Quality
operator|=
literal|0
expr_stmt|;
name|stagingDesc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_STAGING
expr_stmt|;
name|stagingDesc
operator|.
name|CPUAccessFlags
operator|=
name|cpuAccessFlags
expr_stmt|;
name|stagingDesc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|stagingDesc
operator|.
name|BindFlags
operator|=
literal|0
expr_stmt|;
name|ID3D11Texture2D
modifier|*
name|stagingTexture
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateTexture2D
argument_list|(
operator|&
name|stagingDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|stagingTexture
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to create staging texture for depth stencil blit. HRESULT: 0x%X."
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|context
operator|->
name|CopySubresourceRegion
argument_list|(
name|stagingTexture
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|source
argument_list|,
name|subresource
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
return|return
name|stagingTexture
return|;
block|}
DECL|function|GenerateVertexCoords
specifier|inline
specifier|static
name|void
name|GenerateVertexCoords
parameter_list|(
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|sourceArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|sourceSize
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|destArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|destSize
parameter_list|,
name|float
modifier|*
name|x1
parameter_list|,
name|float
modifier|*
name|y1
parameter_list|,
name|float
modifier|*
name|x2
parameter_list|,
name|float
modifier|*
name|y2
parameter_list|,
name|float
modifier|*
name|u1
parameter_list|,
name|float
modifier|*
name|v1
parameter_list|,
name|float
modifier|*
name|u2
parameter_list|,
name|float
modifier|*
name|v2
parameter_list|)
block|{
operator|*
name|x1
operator|=
operator|(
name|destArea
operator|.
name|x
operator|/
name|float
argument_list|(
name|destSize
operator|.
name|width
argument_list|)
operator|)
operator|*
literal|2.0f
operator|-
literal|1.0f
expr_stmt|;
operator|*
name|y1
operator|=
operator|(
operator|(
name|destSize
operator|.
name|height
operator|-
name|destArea
operator|.
name|y
operator|-
name|destArea
operator|.
name|height
operator|)
operator|/
name|float
argument_list|(
name|destSize
operator|.
name|height
argument_list|)
operator|)
operator|*
literal|2.0f
operator|-
literal|1.0f
expr_stmt|;
operator|*
name|x2
operator|=
operator|(
operator|(
name|destArea
operator|.
name|x
operator|+
name|destArea
operator|.
name|width
operator|)
operator|/
name|float
argument_list|(
name|destSize
operator|.
name|width
argument_list|)
operator|)
operator|*
literal|2.0f
operator|-
literal|1.0f
expr_stmt|;
operator|*
name|y2
operator|=
operator|(
operator|(
name|destSize
operator|.
name|height
operator|-
name|destArea
operator|.
name|y
operator|)
operator|/
name|float
argument_list|(
name|destSize
operator|.
name|height
argument_list|)
operator|)
operator|*
literal|2.0f
operator|-
literal|1.0f
expr_stmt|;
operator|*
name|u1
operator|=
name|sourceArea
operator|.
name|x
operator|/
name|float
argument_list|(
name|sourceSize
operator|.
name|width
argument_list|)
expr_stmt|;
operator|*
name|v1
operator|=
name|sourceArea
operator|.
name|y
operator|/
name|float
argument_list|(
name|sourceSize
operator|.
name|height
argument_list|)
expr_stmt|;
operator|*
name|u2
operator|=
operator|(
name|sourceArea
operator|.
name|x
operator|+
name|sourceArea
operator|.
name|width
operator|)
operator|/
name|float
argument_list|(
name|sourceSize
operator|.
name|width
argument_list|)
expr_stmt|;
operator|*
name|v2
operator|=
operator|(
name|sourceArea
operator|.
name|y
operator|+
name|sourceArea
operator|.
name|height
operator|)
operator|/
name|float
argument_list|(
name|sourceSize
operator|.
name|height
argument_list|)
expr_stmt|;
block|}
DECL|function|Write2DVertices
specifier|static
name|void
name|Write2DVertices
parameter_list|(
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|sourceArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|sourceSize
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|destArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|destSize
parameter_list|,
name|void
modifier|*
name|outVertices
parameter_list|,
name|unsigned
name|int
modifier|*
name|outStride
parameter_list|,
name|unsigned
name|int
modifier|*
name|outVertexCount
parameter_list|,
name|D3D11_PRIMITIVE_TOPOLOGY
modifier|*
name|outTopology
parameter_list|)
block|{
name|float
name|x1
decl_stmt|,
name|y1
decl_stmt|,
name|x2
decl_stmt|,
name|y2
decl_stmt|,
name|u1
decl_stmt|,
name|v1
decl_stmt|,
name|u2
decl_stmt|,
name|v2
decl_stmt|;
name|GenerateVertexCoords
argument_list|(
name|sourceArea
argument_list|,
name|sourceSize
argument_list|,
name|destArea
argument_list|,
name|destSize
argument_list|,
operator|&
name|x1
argument_list|,
operator|&
name|y1
argument_list|,
operator|&
name|x2
argument_list|,
operator|&
name|y2
argument_list|,
operator|&
name|u1
argument_list|,
operator|&
name|v1
argument_list|,
operator|&
name|u2
argument_list|,
operator|&
name|v2
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|PositionTexCoordVertex
modifier|*
name|vertices
init|=
cast|static_cast
argument_list|<
name|d3d11
operator|::
name|PositionTexCoordVertex
operator|*
argument_list|>
argument_list|(
name|outVertices
argument_list|)
decl_stmt|;
name|d3d11
operator|::
name|SetPositionTexCoordVertex
argument_list|(
operator|&
name|vertices
index|[
literal|0
index|]
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|u1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetPositionTexCoordVertex
argument_list|(
operator|&
name|vertices
index|[
literal|1
index|]
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|u1
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetPositionTexCoordVertex
argument_list|(
operator|&
name|vertices
index|[
literal|2
index|]
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|,
name|u2
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetPositionTexCoordVertex
argument_list|(
operator|&
name|vertices
index|[
literal|3
index|]
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|u2
argument_list|,
name|v1
argument_list|)
expr_stmt|;
operator|*
name|outStride
operator|=
sizeof|sizeof
argument_list|(
name|d3d11
operator|::
name|PositionTexCoordVertex
argument_list|)
expr_stmt|;
operator|*
name|outVertexCount
operator|=
literal|4
expr_stmt|;
operator|*
name|outTopology
operator|=
name|D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP
expr_stmt|;
block|}
DECL|function|Write3DVertices
specifier|static
name|void
name|Write3DVertices
parameter_list|(
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|sourceArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|sourceSize
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|destArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|destSize
parameter_list|,
name|void
modifier|*
name|outVertices
parameter_list|,
name|unsigned
name|int
modifier|*
name|outStride
parameter_list|,
name|unsigned
name|int
modifier|*
name|outVertexCount
parameter_list|,
name|D3D11_PRIMITIVE_TOPOLOGY
modifier|*
name|outTopology
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|sourceSize
operator|.
name|depth
operator|>
literal|0
operator|&&
name|destSize
operator|.
name|depth
operator|>
literal|0
argument_list|)
expr_stmt|;
name|float
name|x1
decl_stmt|,
name|y1
decl_stmt|,
name|x2
decl_stmt|,
name|y2
decl_stmt|,
name|u1
decl_stmt|,
name|v1
decl_stmt|,
name|u2
decl_stmt|,
name|v2
decl_stmt|;
name|GenerateVertexCoords
argument_list|(
name|sourceArea
argument_list|,
name|sourceSize
argument_list|,
name|destArea
argument_list|,
name|destSize
argument_list|,
operator|&
name|x1
argument_list|,
operator|&
name|y1
argument_list|,
operator|&
name|x2
argument_list|,
operator|&
name|y2
argument_list|,
operator|&
name|u1
argument_list|,
operator|&
name|v1
argument_list|,
operator|&
name|u2
argument_list|,
operator|&
name|v2
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|PositionLayerTexCoord3DVertex
modifier|*
name|vertices
init|=
cast|static_cast
argument_list|<
name|d3d11
operator|::
name|PositionLayerTexCoord3DVertex
operator|*
argument_list|>
argument_list|(
name|outVertices
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|destSize
operator|.
name|depth
condition|;
name|i
operator|++
control|)
block|{
name|float
name|readDepth
init|=
operator|(
name|float
operator|)
name|i
operator|/
name|std
operator|::
name|max
argument_list|(
name|destSize
operator|.
name|depth
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|d3d11
operator|::
name|SetPositionLayerTexCoord3DVertex
argument_list|(
operator|&
name|vertices
index|[
name|i
operator|*
literal|6
operator|+
literal|0
index|]
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|,
name|i
argument_list|,
name|u1
argument_list|,
name|v2
argument_list|,
name|readDepth
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetPositionLayerTexCoord3DVertex
argument_list|(
operator|&
name|vertices
index|[
name|i
operator|*
literal|6
operator|+
literal|1
index|]
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|i
argument_list|,
name|u1
argument_list|,
name|v1
argument_list|,
name|readDepth
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetPositionLayerTexCoord3DVertex
argument_list|(
operator|&
name|vertices
index|[
name|i
operator|*
literal|6
operator|+
literal|2
index|]
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|,
name|i
argument_list|,
name|u2
argument_list|,
name|v2
argument_list|,
name|readDepth
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetPositionLayerTexCoord3DVertex
argument_list|(
operator|&
name|vertices
index|[
name|i
operator|*
literal|6
operator|+
literal|3
index|]
argument_list|,
name|x1
argument_list|,
name|y2
argument_list|,
name|i
argument_list|,
name|u1
argument_list|,
name|v1
argument_list|,
name|readDepth
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetPositionLayerTexCoord3DVertex
argument_list|(
operator|&
name|vertices
index|[
name|i
operator|*
literal|6
operator|+
literal|4
index|]
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|i
argument_list|,
name|u2
argument_list|,
name|v1
argument_list|,
name|readDepth
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetPositionLayerTexCoord3DVertex
argument_list|(
operator|&
name|vertices
index|[
name|i
operator|*
literal|6
operator|+
literal|5
index|]
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|,
name|i
argument_list|,
name|u2
argument_list|,
name|v2
argument_list|,
name|readDepth
argument_list|)
expr_stmt|;
block|}
operator|*
name|outStride
operator|=
sizeof|sizeof
argument_list|(
name|d3d11
operator|::
name|PositionLayerTexCoord3DVertex
argument_list|)
expr_stmt|;
operator|*
name|outVertexCount
operator|=
name|destSize
operator|.
name|depth
operator|*
literal|6
expr_stmt|;
operator|*
name|outTopology
operator|=
name|D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST
expr_stmt|;
block|}
DECL|function|Blit11
name|Blit11
operator|::
name|Blit11
parameter_list|(
name|Renderer11
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mBlitShaderMap
argument_list|(
name|compareBlitParameters
argument_list|)
member_init_list|,
name|mSwizzleShaderMap
argument_list|(
name|compareSwizzleParameters
argument_list|)
member_init_list|,
name|mVertexBuffer
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mPointSampler
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mLinearSampler
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mScissorEnabledRasterizerState
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mScissorDisabledRasterizerState
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mDepthStencilState
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mQuad2DIL
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mQuad2DVS
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mDepthPS
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mQuad3DIL
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mQuad3DVS
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mQuad3DGS
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mSwizzleCB
argument_list|(
name|NULL
argument_list|)
block|{
name|HRESULT
name|result
decl_stmt|;
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|D3D11_BUFFER_DESC
name|vbDesc
decl_stmt|;
name|vbDesc
operator|.
name|ByteWidth
operator|=
name|std
operator|::
name|max
argument_list|(
sizeof|sizeof
argument_list|(
name|d3d11
operator|::
name|PositionLayerTexCoord3DVertex
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|d3d11
operator|::
name|PositionTexCoordVertex
argument_list|)
argument_list|)
operator|*
literal|6
operator|*
name|renderer
operator|->
name|getRendererCaps
argument_list|()
operator|.
name|max3DTextureSize
expr_stmt|;
name|vbDesc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_DYNAMIC
expr_stmt|;
name|vbDesc
operator|.
name|BindFlags
operator|=
name|D3D11_BIND_VERTEX_BUFFER
expr_stmt|;
name|vbDesc
operator|.
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_WRITE
expr_stmt|;
name|vbDesc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|vbDesc
operator|.
name|StructureByteStride
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateBuffer
argument_list|(
operator|&
name|vbDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|mVertexBuffer
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mVertexBuffer
argument_list|,
literal|"Blit11 vertex buffer"
argument_list|)
expr_stmt|;
name|D3D11_SAMPLER_DESC
name|pointSamplerDesc
decl_stmt|;
name|pointSamplerDesc
operator|.
name|Filter
operator|=
name|D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR
expr_stmt|;
name|pointSamplerDesc
operator|.
name|AddressU
operator|=
name|D3D11_TEXTURE_ADDRESS_CLAMP
expr_stmt|;
name|pointSamplerDesc
operator|.
name|AddressV
operator|=
name|D3D11_TEXTURE_ADDRESS_CLAMP
expr_stmt|;
name|pointSamplerDesc
operator|.
name|AddressW
operator|=
name|D3D11_TEXTURE_ADDRESS_CLAMP
expr_stmt|;
name|pointSamplerDesc
operator|.
name|MipLODBias
operator|=
literal|0.0f
expr_stmt|;
name|pointSamplerDesc
operator|.
name|MaxAnisotropy
operator|=
literal|0
expr_stmt|;
name|pointSamplerDesc
operator|.
name|ComparisonFunc
operator|=
name|D3D11_COMPARISON_NEVER
expr_stmt|;
name|pointSamplerDesc
operator|.
name|BorderColor
index|[
literal|0
index|]
operator|=
literal|0.0f
expr_stmt|;
name|pointSamplerDesc
operator|.
name|BorderColor
index|[
literal|1
index|]
operator|=
literal|0.0f
expr_stmt|;
name|pointSamplerDesc
operator|.
name|BorderColor
index|[
literal|2
index|]
operator|=
literal|0.0f
expr_stmt|;
name|pointSamplerDesc
operator|.
name|BorderColor
index|[
literal|3
index|]
operator|=
literal|0.0f
expr_stmt|;
name|pointSamplerDesc
operator|.
name|MinLOD
operator|=
literal|0.0f
expr_stmt|;
name|pointSamplerDesc
operator|.
name|MaxLOD
operator|=
name|FLT_MAX
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateSamplerState
argument_list|(
operator|&
name|pointSamplerDesc
argument_list|,
operator|&
name|mPointSampler
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mPointSampler
argument_list|,
literal|"Blit11 point sampler"
argument_list|)
expr_stmt|;
name|D3D11_SAMPLER_DESC
name|linearSamplerDesc
decl_stmt|;
name|linearSamplerDesc
operator|.
name|Filter
operator|=
name|D3D11_FILTER_MIN_MAG_MIP_LINEAR
expr_stmt|;
name|linearSamplerDesc
operator|.
name|AddressU
operator|=
name|D3D11_TEXTURE_ADDRESS_CLAMP
expr_stmt|;
name|linearSamplerDesc
operator|.
name|AddressV
operator|=
name|D3D11_TEXTURE_ADDRESS_CLAMP
expr_stmt|;
name|linearSamplerDesc
operator|.
name|AddressW
operator|=
name|D3D11_TEXTURE_ADDRESS_CLAMP
expr_stmt|;
name|linearSamplerDesc
operator|.
name|MipLODBias
operator|=
literal|0.0f
expr_stmt|;
name|linearSamplerDesc
operator|.
name|MaxAnisotropy
operator|=
literal|0
expr_stmt|;
name|linearSamplerDesc
operator|.
name|ComparisonFunc
operator|=
name|D3D11_COMPARISON_NEVER
expr_stmt|;
name|linearSamplerDesc
operator|.
name|BorderColor
index|[
literal|0
index|]
operator|=
literal|0.0f
expr_stmt|;
name|linearSamplerDesc
operator|.
name|BorderColor
index|[
literal|1
index|]
operator|=
literal|0.0f
expr_stmt|;
name|linearSamplerDesc
operator|.
name|BorderColor
index|[
literal|2
index|]
operator|=
literal|0.0f
expr_stmt|;
name|linearSamplerDesc
operator|.
name|BorderColor
index|[
literal|3
index|]
operator|=
literal|0.0f
expr_stmt|;
name|linearSamplerDesc
operator|.
name|MinLOD
operator|=
literal|0.0f
expr_stmt|;
name|linearSamplerDesc
operator|.
name|MaxLOD
operator|=
name|FLT_MAX
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateSamplerState
argument_list|(
operator|&
name|linearSamplerDesc
argument_list|,
operator|&
name|mLinearSampler
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mLinearSampler
argument_list|,
literal|"Blit11 linear sampler"
argument_list|)
expr_stmt|;
comment|// Use a rasterizer state that will not cull so that inverted quads will not be culled
name|D3D11_RASTERIZER_DESC
name|rasterDesc
decl_stmt|;
name|rasterDesc
operator|.
name|FillMode
operator|=
name|D3D11_FILL_SOLID
expr_stmt|;
name|rasterDesc
operator|.
name|CullMode
operator|=
name|D3D11_CULL_NONE
expr_stmt|;
name|rasterDesc
operator|.
name|FrontCounterClockwise
operator|=
name|FALSE
expr_stmt|;
name|rasterDesc
operator|.
name|DepthBias
operator|=
literal|0
expr_stmt|;
name|rasterDesc
operator|.
name|SlopeScaledDepthBias
operator|=
literal|0.0f
expr_stmt|;
name|rasterDesc
operator|.
name|DepthBiasClamp
operator|=
literal|0.0f
expr_stmt|;
name|rasterDesc
operator|.
name|DepthClipEnable
operator|=
name|TRUE
expr_stmt|;
name|rasterDesc
operator|.
name|MultisampleEnable
operator|=
name|FALSE
expr_stmt|;
name|rasterDesc
operator|.
name|AntialiasedLineEnable
operator|=
name|FALSE
expr_stmt|;
name|rasterDesc
operator|.
name|ScissorEnable
operator|=
name|TRUE
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateRasterizerState
argument_list|(
operator|&
name|rasterDesc
argument_list|,
operator|&
name|mScissorEnabledRasterizerState
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mScissorEnabledRasterizerState
argument_list|,
literal|"Blit11 scissoring rasterizer state"
argument_list|)
expr_stmt|;
name|rasterDesc
operator|.
name|ScissorEnable
operator|=
name|FALSE
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateRasterizerState
argument_list|(
operator|&
name|rasterDesc
argument_list|,
operator|&
name|mScissorDisabledRasterizerState
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mScissorDisabledRasterizerState
argument_list|,
literal|"Blit11 no scissoring rasterizer state"
argument_list|)
expr_stmt|;
name|D3D11_DEPTH_STENCIL_DESC
name|depthStencilDesc
decl_stmt|;
name|depthStencilDesc
operator|.
name|DepthEnable
operator|=
literal|true
expr_stmt|;
name|depthStencilDesc
operator|.
name|DepthWriteMask
operator|=
name|D3D11_DEPTH_WRITE_MASK_ALL
expr_stmt|;
name|depthStencilDesc
operator|.
name|DepthFunc
operator|=
name|D3D11_COMPARISON_ALWAYS
expr_stmt|;
name|depthStencilDesc
operator|.
name|StencilEnable
operator|=
name|FALSE
expr_stmt|;
name|depthStencilDesc
operator|.
name|StencilReadMask
operator|=
name|D3D11_DEFAULT_STENCIL_READ_MASK
expr_stmt|;
name|depthStencilDesc
operator|.
name|StencilWriteMask
operator|=
name|D3D11_DEFAULT_STENCIL_WRITE_MASK
expr_stmt|;
name|depthStencilDesc
operator|.
name|FrontFace
operator|.
name|StencilFailOp
operator|=
name|D3D11_STENCIL_OP_KEEP
expr_stmt|;
name|depthStencilDesc
operator|.
name|FrontFace
operator|.
name|StencilDepthFailOp
operator|=
name|D3D11_STENCIL_OP_KEEP
expr_stmt|;
name|depthStencilDesc
operator|.
name|FrontFace
operator|.
name|StencilPassOp
operator|=
name|D3D11_STENCIL_OP_KEEP
expr_stmt|;
name|depthStencilDesc
operator|.
name|FrontFace
operator|.
name|StencilFunc
operator|=
name|D3D11_COMPARISON_ALWAYS
expr_stmt|;
name|depthStencilDesc
operator|.
name|BackFace
operator|.
name|StencilFailOp
operator|=
name|D3D11_STENCIL_OP_KEEP
expr_stmt|;
name|depthStencilDesc
operator|.
name|BackFace
operator|.
name|StencilDepthFailOp
operator|=
name|D3D11_STENCIL_OP_KEEP
expr_stmt|;
name|depthStencilDesc
operator|.
name|BackFace
operator|.
name|StencilPassOp
operator|=
name|D3D11_STENCIL_OP_KEEP
expr_stmt|;
name|depthStencilDesc
operator|.
name|BackFace
operator|.
name|StencilFunc
operator|=
name|D3D11_COMPARISON_ALWAYS
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateDepthStencilState
argument_list|(
operator|&
name|depthStencilDesc
argument_list|,
operator|&
name|mDepthStencilState
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mDepthStencilState
argument_list|,
literal|"Blit11 depth stencil state"
argument_list|)
expr_stmt|;
name|D3D11_INPUT_ELEMENT_DESC
name|quad2DLayout
index|[]
init|=
block|{
block|{
literal|"POSITION"
block|,
literal|0
block|,
name|DXGI_FORMAT_R32G32_FLOAT
block|,
literal|0
block|,
literal|0
block|,
name|D3D11_INPUT_PER_VERTEX_DATA
block|,
literal|0
block|}
block|,
block|{
literal|"TEXCOORD"
block|,
literal|0
block|,
name|DXGI_FORMAT_R32G32_FLOAT
block|,
literal|0
block|,
literal|8
block|,
name|D3D11_INPUT_PER_VERTEX_DATA
block|,
literal|0
block|}
block|,     }
decl_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateInputLayout
argument_list|(
name|quad2DLayout
argument_list|,
name|ArraySize
argument_list|(
name|quad2DLayout
argument_list|)
argument_list|,
name|g_VS_Passthrough2D
argument_list|,
name|ArraySize
argument_list|(
name|g_VS_Passthrough2D
argument_list|)
argument_list|,
operator|&
name|mQuad2DIL
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mQuad2DIL
argument_list|,
literal|"Blit11 2D input layout"
argument_list|)
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateVertexShader
argument_list|(
name|g_VS_Passthrough2D
argument_list|,
name|ArraySize
argument_list|(
name|g_VS_Passthrough2D
argument_list|)
argument_list|,
name|NULL
argument_list|,
operator|&
name|mQuad2DVS
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mQuad2DVS
argument_list|,
literal|"Blit11 2D vertex shader"
argument_list|)
expr_stmt|;
if|if
condition|(
name|renderer
operator|->
name|isES3Capable
argument_list|()
condition|)
block|{
name|result
operator|=
name|device
operator|->
name|CreatePixelShader
argument_list|(
name|g_PS_PassthroughDepth2D
argument_list|,
name|ArraySize
argument_list|(
name|g_PS_PassthroughDepth2D
argument_list|)
argument_list|,
name|NULL
argument_list|,
operator|&
name|mDepthPS
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mDepthPS
argument_list|,
literal|"Blit11 2D depth pixel shader"
argument_list|)
expr_stmt|;
name|D3D11_INPUT_ELEMENT_DESC
name|quad3DLayout
index|[]
init|=
block|{
block|{
literal|"POSITION"
block|,
literal|0
block|,
name|DXGI_FORMAT_R32G32_FLOAT
block|,
literal|0
block|,
literal|0
block|,
name|D3D11_INPUT_PER_VERTEX_DATA
block|,
literal|0
block|}
block|,
block|{
literal|"LAYER"
block|,
literal|0
block|,
name|DXGI_FORMAT_R32_UINT
block|,
literal|0
block|,
literal|8
block|,
name|D3D11_INPUT_PER_VERTEX_DATA
block|,
literal|0
block|}
block|,
block|{
literal|"TEXCOORD"
block|,
literal|0
block|,
name|DXGI_FORMAT_R32G32B32_FLOAT
block|,
literal|0
block|,
literal|12
block|,
name|D3D11_INPUT_PER_VERTEX_DATA
block|,
literal|0
block|}
block|,         }
decl_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateInputLayout
argument_list|(
name|quad3DLayout
argument_list|,
name|ArraySize
argument_list|(
name|quad3DLayout
argument_list|)
argument_list|,
name|g_VS_Passthrough3D
argument_list|,
name|ArraySize
argument_list|(
name|g_VS_Passthrough3D
argument_list|)
argument_list|,
operator|&
name|mQuad3DIL
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mQuad3DIL
argument_list|,
literal|"Blit11 3D input layout"
argument_list|)
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateVertexShader
argument_list|(
name|g_VS_Passthrough3D
argument_list|,
name|ArraySize
argument_list|(
name|g_VS_Passthrough3D
argument_list|)
argument_list|,
name|NULL
argument_list|,
operator|&
name|mQuad3DVS
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mQuad3DVS
argument_list|,
literal|"Blit11 3D vertex shader"
argument_list|)
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateGeometryShader
argument_list|(
name|g_GS_Passthrough3D
argument_list|,
name|ArraySize
argument_list|(
name|g_GS_Passthrough3D
argument_list|)
argument_list|,
name|NULL
argument_list|,
operator|&
name|mQuad3DGS
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mQuad3DGS
argument_list|,
literal|"Renderer11 copy 3D texture geometry shader"
argument_list|)
expr_stmt|;
block|}
name|buildShaderMap
argument_list|()
expr_stmt|;
name|D3D11_BUFFER_DESC
name|swizzleBufferDesc
decl_stmt|;
name|swizzleBufferDesc
operator|.
name|ByteWidth
operator|=
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
operator|*
literal|4
expr_stmt|;
name|swizzleBufferDesc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_DYNAMIC
expr_stmt|;
name|swizzleBufferDesc
operator|.
name|BindFlags
operator|=
name|D3D11_BIND_CONSTANT_BUFFER
expr_stmt|;
name|swizzleBufferDesc
operator|.
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_WRITE
expr_stmt|;
name|swizzleBufferDesc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|swizzleBufferDesc
operator|.
name|StructureByteStride
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateBuffer
argument_list|(
operator|&
name|swizzleBufferDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|mSwizzleCB
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mSwizzleCB
argument_list|,
literal|"Blit11 swizzle constant buffer"
argument_list|)
expr_stmt|;
block|}
DECL|function|~Blit11
name|Blit11
operator|::
name|~
name|Blit11
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mVertexBuffer
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mPointSampler
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mLinearSampler
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mScissorEnabledRasterizerState
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mScissorDisabledRasterizerState
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mDepthStencilState
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mQuad2DIL
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mQuad2DVS
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mDepthPS
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mQuad3DIL
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mQuad3DVS
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mQuad3DGS
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mSwizzleCB
argument_list|)
expr_stmt|;
name|clearShaderMap
argument_list|()
expr_stmt|;
block|}
DECL|function|GetSwizzleIndex
specifier|static
specifier|inline
name|unsigned
name|int
name|GetSwizzleIndex
parameter_list|(
name|GLenum
name|swizzle
parameter_list|)
block|{
name|unsigned
name|int
name|colorIndex
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|swizzle
condition|)
block|{
case|case
name|GL_RED
case|:
name|colorIndex
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|GL_GREEN
case|:
name|colorIndex
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|GL_BLUE
case|:
name|colorIndex
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|GL_ALPHA
case|:
name|colorIndex
operator|=
literal|3
expr_stmt|;
break|break;
case|case
name|GL_ZERO
case|:
name|colorIndex
operator|=
literal|4
expr_stmt|;
break|break;
case|case
name|GL_ONE
case|:
name|colorIndex
operator|=
literal|5
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
name|colorIndex
return|;
block|}
DECL|function|swizzleTexture
name|gl
operator|::
name|Error
name|Blit11
operator|::
name|swizzleTexture
parameter_list|(
name|ID3D11ShaderResourceView
modifier|*
name|source
parameter_list|,
name|ID3D11RenderTargetView
modifier|*
name|dest
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|size
parameter_list|,
name|GLenum
name|swizzleRed
parameter_list|,
name|GLenum
name|swizzleGreen
parameter_list|,
name|GLenum
name|swizzleBlue
parameter_list|,
name|GLenum
name|swizzleAlpha
parameter_list|)
block|{
name|HRESULT
name|result
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|deviceContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|D3D11_SHADER_RESOURCE_VIEW_DESC
name|sourceSRVDesc
decl_stmt|;
name|source
operator|->
name|GetDesc
argument_list|(
operator|&
name|sourceSRVDesc
argument_list|)
expr_stmt|;
specifier|const
name|d3d11
operator|::
name|DXGIFormat
modifier|&
name|dxgiFormatInfo
init|=
name|d3d11
operator|::
name|GetDXGIFormatInfo
argument_list|(
name|sourceSRVDesc
operator|.
name|Format
argument_list|)
decl_stmt|;
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|sourceFormatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|dxgiFormatInfo
operator|.
name|internalFormat
argument_list|)
decl_stmt|;
name|GLenum
name|shaderType
init|=
name|GL_NONE
decl_stmt|;
switch|switch
condition|(
name|sourceFormatInfo
operator|.
name|componentType
condition|)
block|{
case|case
name|GL_UNSIGNED_NORMALIZED
case|:
case|case
name|GL_SIGNED_NORMALIZED
case|:
case|case
name|GL_FLOAT
case|:
name|shaderType
operator|=
name|GL_FLOAT
expr_stmt|;
break|break;
case|case
name|GL_INT
case|:
name|shaderType
operator|=
name|GL_INT
expr_stmt|;
break|break;
case|case
name|GL_UNSIGNED_INT
case|:
name|shaderType
operator|=
name|GL_UNSIGNED_INT
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
name|SwizzleParameters
name|parameters
init|=
block|{
literal|0
block|}
decl_stmt|;
name|parameters
operator|.
name|mDestinationType
operator|=
name|shaderType
expr_stmt|;
name|parameters
operator|.
name|mViewDimension
operator|=
name|sourceSRVDesc
operator|.
name|ViewDimension
expr_stmt|;
name|SwizzleShaderMap
operator|::
name|const_iterator
name|i
init|=
name|mSwizzleShaderMap
operator|.
name|find
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|mSwizzleShaderMap
operator|.
name|end
argument_list|()
condition|)
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Internal error, missing swizzle shader."
argument_list|)
return|;
block|}
specifier|const
name|Shader
modifier|&
name|shader
init|=
name|i
operator|->
name|second
decl_stmt|;
comment|// Set vertices
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|result
operator|=
name|deviceContext
operator|->
name|Map
argument_list|(
name|mVertexBuffer
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE_DISCARD
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to map internal vertex buffer for swizzle, HRESULT: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
name|UINT
name|stride
init|=
literal|0
decl_stmt|;
name|UINT
name|startIdx
init|=
literal|0
decl_stmt|;
name|UINT
name|drawCount
init|=
literal|0
decl_stmt|;
name|D3D11_PRIMITIVE_TOPOLOGY
name|topology
decl_stmt|;
name|gl
operator|::
name|Box
name|area
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|.
name|width
argument_list|,
name|size
operator|.
name|height
argument_list|,
name|size
operator|.
name|depth
argument_list|)
decl_stmt|;
name|shader
operator|.
name|mVertexWriteFunction
argument_list|(
name|area
argument_list|,
name|size
argument_list|,
name|area
argument_list|,
name|size
argument_list|,
name|mappedResource
operator|.
name|pData
argument_list|,
operator|&
name|stride
argument_list|,
operator|&
name|drawCount
argument_list|,
operator|&
name|topology
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|Unmap
argument_list|(
name|mVertexBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Set constant buffer
name|result
operator|=
name|deviceContext
operator|->
name|Map
argument_list|(
name|mSwizzleCB
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE_DISCARD
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to map internal constant buffer for swizzle, HRESULT: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
name|unsigned
name|int
modifier|*
name|swizzleIndices
init|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|int
operator|*
argument_list|>
argument_list|(
name|mappedResource
operator|.
name|pData
argument_list|)
decl_stmt|;
name|swizzleIndices
index|[
literal|0
index|]
operator|=
name|GetSwizzleIndex
argument_list|(
name|swizzleRed
argument_list|)
expr_stmt|;
name|swizzleIndices
index|[
literal|1
index|]
operator|=
name|GetSwizzleIndex
argument_list|(
name|swizzleGreen
argument_list|)
expr_stmt|;
name|swizzleIndices
index|[
literal|2
index|]
operator|=
name|GetSwizzleIndex
argument_list|(
name|swizzleBlue
argument_list|)
expr_stmt|;
name|swizzleIndices
index|[
literal|3
index|]
operator|=
name|GetSwizzleIndex
argument_list|(
name|swizzleAlpha
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|Unmap
argument_list|(
name|mSwizzleCB
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Apply vertex buffer
name|deviceContext
operator|->
name|IASetVertexBuffers
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|mVertexBuffer
argument_list|,
operator|&
name|stride
argument_list|,
operator|&
name|startIdx
argument_list|)
expr_stmt|;
comment|// Apply constant buffer
name|deviceContext
operator|->
name|PSSetConstantBuffers
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|mSwizzleCB
argument_list|)
expr_stmt|;
comment|// Apply state
name|deviceContext
operator|->
name|OMSetBlendState
argument_list|(
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|0xFFFFFFF
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|OMSetDepthStencilState
argument_list|(
name|NULL
argument_list|,
literal|0xFFFFFFFF
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|RSSetState
argument_list|(
name|mScissorDisabledRasterizerState
argument_list|)
expr_stmt|;
comment|// Apply shaders
name|deviceContext
operator|->
name|IASetInputLayout
argument_list|(
name|shader
operator|.
name|mInputLayout
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|IASetPrimitiveTopology
argument_list|(
name|topology
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|VSSetShader
argument_list|(
name|shader
operator|.
name|mVertexShader
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|PSSetShader
argument_list|(
name|shader
operator|.
name|mPixelShader
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|GSSetShader
argument_list|(
name|shader
operator|.
name|mGeometryShader
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Unset the currently bound shader resource to avoid conflicts
name|mRenderer
operator|->
name|setShaderResource
argument_list|(
name|gl
operator|::
name|SAMPLER_PIXEL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
comment|// Apply render target
name|mRenderer
operator|->
name|setOneTimeRenderTarget
argument_list|(
name|dest
argument_list|)
expr_stmt|;
comment|// Set the viewport
name|D3D11_VIEWPORT
name|viewport
decl_stmt|;
name|viewport
operator|.
name|TopLeftX
operator|=
literal|0
expr_stmt|;
name|viewport
operator|.
name|TopLeftY
operator|=
literal|0
expr_stmt|;
name|viewport
operator|.
name|Width
operator|=
name|size
operator|.
name|width
expr_stmt|;
name|viewport
operator|.
name|Height
operator|=
name|size
operator|.
name|height
expr_stmt|;
name|viewport
operator|.
name|MinDepth
operator|=
literal|0.0f
expr_stmt|;
name|viewport
operator|.
name|MaxDepth
operator|=
literal|1.0f
expr_stmt|;
name|deviceContext
operator|->
name|RSSetViewports
argument_list|(
literal|1
argument_list|,
operator|&
name|viewport
argument_list|)
expr_stmt|;
comment|// Apply textures
name|mRenderer
operator|->
name|setShaderResource
argument_list|(
name|gl
operator|::
name|SAMPLER_PIXEL
argument_list|,
literal|0
argument_list|,
name|source
argument_list|)
expr_stmt|;
comment|// Apply samplers
name|deviceContext
operator|->
name|PSSetSamplers
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|mPointSampler
argument_list|)
expr_stmt|;
comment|// Draw the quad
name|deviceContext
operator|->
name|Draw
argument_list|(
name|drawCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Unbind textures and render targets and vertex buffer
name|mRenderer
operator|->
name|setShaderResource
argument_list|(
name|gl
operator|::
name|SAMPLER_PIXEL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|mRenderer
operator|->
name|unapplyRenderTargets
argument_list|()
expr_stmt|;
name|UINT
name|zero
init|=
literal|0
decl_stmt|;
name|ID3D11Buffer
modifier|*
specifier|const
name|nullBuffer
init|=
name|NULL
decl_stmt|;
name|deviceContext
operator|->
name|IASetVertexBuffers
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|nullBuffer
argument_list|,
operator|&
name|zero
argument_list|,
operator|&
name|zero
argument_list|)
expr_stmt|;
name|mRenderer
operator|->
name|markAllStateDirty
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|copyTexture
name|gl
operator|::
name|Error
name|Blit11
operator|::
name|copyTexture
parameter_list|(
name|ID3D11ShaderResourceView
modifier|*
name|source
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|sourceArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|sourceSize
parameter_list|,
name|ID3D11RenderTargetView
modifier|*
name|dest
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|destArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|destSize
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|*
name|scissor
parameter_list|,
name|GLenum
name|destFormat
parameter_list|,
name|GLenum
name|filter
parameter_list|)
block|{
name|HRESULT
name|result
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|deviceContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
comment|// Determine if the source format is a signed integer format, the destFormat will already
comment|// be GL_XXXX_INTEGER but it does not tell us if it is signed or unsigned.
name|D3D11_SHADER_RESOURCE_VIEW_DESC
name|sourceSRVDesc
decl_stmt|;
name|source
operator|->
name|GetDesc
argument_list|(
operator|&
name|sourceSRVDesc
argument_list|)
expr_stmt|;
specifier|const
name|d3d11
operator|::
name|DXGIFormat
modifier|&
name|dxgiFormatInfo
init|=
name|d3d11
operator|::
name|GetDXGIFormatInfo
argument_list|(
name|sourceSRVDesc
operator|.
name|Format
argument_list|)
decl_stmt|;
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|internalFormatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|dxgiFormatInfo
operator|.
name|internalFormat
argument_list|)
decl_stmt|;
name|BlitParameters
name|parameters
init|=
block|{
literal|0
block|}
decl_stmt|;
name|parameters
operator|.
name|mDestinationFormat
operator|=
name|destFormat
expr_stmt|;
name|parameters
operator|.
name|mSignedInteger
operator|=
operator|(
name|internalFormatInfo
operator|.
name|componentType
operator|==
name|GL_INT
operator|)
expr_stmt|;
name|parameters
operator|.
name|m3DBlit
operator|=
name|sourceSRVDesc
operator|.
name|ViewDimension
operator|==
name|D3D11_SRV_DIMENSION_TEXTURE3D
expr_stmt|;
name|BlitShaderMap
operator|::
name|const_iterator
name|i
init|=
name|mBlitShaderMap
operator|.
name|find
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|mBlitShaderMap
operator|.
name|end
argument_list|()
condition|)
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Could not find appropriate shader for internal texture blit."
argument_list|)
return|;
block|}
specifier|const
name|Shader
modifier|&
name|shader
init|=
name|i
operator|->
name|second
decl_stmt|;
comment|// Set vertices
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|result
operator|=
name|deviceContext
operator|->
name|Map
argument_list|(
name|mVertexBuffer
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE_DISCARD
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to map internal vertex buffer for texture copy, HRESULT: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
name|UINT
name|stride
init|=
literal|0
decl_stmt|;
name|UINT
name|startIdx
init|=
literal|0
decl_stmt|;
name|UINT
name|drawCount
init|=
literal|0
decl_stmt|;
name|D3D11_PRIMITIVE_TOPOLOGY
name|topology
decl_stmt|;
name|shader
operator|.
name|mVertexWriteFunction
argument_list|(
name|sourceArea
argument_list|,
name|sourceSize
argument_list|,
name|destArea
argument_list|,
name|destSize
argument_list|,
name|mappedResource
operator|.
name|pData
argument_list|,
operator|&
name|stride
argument_list|,
operator|&
name|drawCount
argument_list|,
operator|&
name|topology
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|Unmap
argument_list|(
name|mVertexBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Apply vertex buffer
name|deviceContext
operator|->
name|IASetVertexBuffers
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|mVertexBuffer
argument_list|,
operator|&
name|stride
argument_list|,
operator|&
name|startIdx
argument_list|)
expr_stmt|;
comment|// Apply state
name|deviceContext
operator|->
name|OMSetBlendState
argument_list|(
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|0xFFFFFFF
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|OMSetDepthStencilState
argument_list|(
name|NULL
argument_list|,
literal|0xFFFFFFFF
argument_list|)
expr_stmt|;
if|if
condition|(
name|scissor
condition|)
block|{
name|D3D11_RECT
name|scissorRect
decl_stmt|;
name|scissorRect
operator|.
name|left
operator|=
name|scissor
operator|->
name|x
expr_stmt|;
name|scissorRect
operator|.
name|right
operator|=
name|scissor
operator|->
name|x
operator|+
name|scissor
operator|->
name|width
expr_stmt|;
name|scissorRect
operator|.
name|top
operator|=
name|scissor
operator|->
name|y
expr_stmt|;
name|scissorRect
operator|.
name|bottom
operator|=
name|scissor
operator|->
name|y
operator|+
name|scissor
operator|->
name|height
expr_stmt|;
name|deviceContext
operator|->
name|RSSetScissorRects
argument_list|(
literal|1
argument_list|,
operator|&
name|scissorRect
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|RSSetState
argument_list|(
name|mScissorEnabledRasterizerState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deviceContext
operator|->
name|RSSetState
argument_list|(
name|mScissorDisabledRasterizerState
argument_list|)
expr_stmt|;
block|}
comment|// Apply shaders
name|deviceContext
operator|->
name|IASetInputLayout
argument_list|(
name|shader
operator|.
name|mInputLayout
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|IASetPrimitiveTopology
argument_list|(
name|topology
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|VSSetShader
argument_list|(
name|shader
operator|.
name|mVertexShader
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|PSSetShader
argument_list|(
name|shader
operator|.
name|mPixelShader
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|GSSetShader
argument_list|(
name|shader
operator|.
name|mGeometryShader
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Unset the currently bound shader resource to avoid conflicts
name|mRenderer
operator|->
name|setShaderResource
argument_list|(
name|gl
operator|::
name|SAMPLER_PIXEL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
comment|// Apply render target
name|mRenderer
operator|->
name|setOneTimeRenderTarget
argument_list|(
name|dest
argument_list|)
expr_stmt|;
comment|// Set the viewport
name|D3D11_VIEWPORT
name|viewport
decl_stmt|;
name|viewport
operator|.
name|TopLeftX
operator|=
literal|0
expr_stmt|;
name|viewport
operator|.
name|TopLeftY
operator|=
literal|0
expr_stmt|;
name|viewport
operator|.
name|Width
operator|=
name|destSize
operator|.
name|width
expr_stmt|;
name|viewport
operator|.
name|Height
operator|=
name|destSize
operator|.
name|height
expr_stmt|;
name|viewport
operator|.
name|MinDepth
operator|=
literal|0.0f
expr_stmt|;
name|viewport
operator|.
name|MaxDepth
operator|=
literal|1.0f
expr_stmt|;
name|deviceContext
operator|->
name|RSSetViewports
argument_list|(
literal|1
argument_list|,
operator|&
name|viewport
argument_list|)
expr_stmt|;
comment|// Apply textures
name|mRenderer
operator|->
name|setShaderResource
argument_list|(
name|gl
operator|::
name|SAMPLER_PIXEL
argument_list|,
literal|0
argument_list|,
name|source
argument_list|)
expr_stmt|;
comment|// Apply samplers
name|ID3D11SamplerState
modifier|*
name|sampler
init|=
name|NULL
decl_stmt|;
switch|switch
condition|(
name|filter
condition|)
block|{
case|case
name|GL_NEAREST
case|:
name|sampler
operator|=
name|mPointSampler
expr_stmt|;
break|break;
case|case
name|GL_LINEAR
case|:
name|sampler
operator|=
name|mLinearSampler
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Internal error, unknown blit filter mode."
argument_list|)
return|;
block|}
name|deviceContext
operator|->
name|PSSetSamplers
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|sampler
argument_list|)
expr_stmt|;
comment|// Draw the quad
name|deviceContext
operator|->
name|Draw
argument_list|(
name|drawCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Unbind textures and render targets and vertex buffer
name|mRenderer
operator|->
name|setShaderResource
argument_list|(
name|gl
operator|::
name|SAMPLER_PIXEL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|mRenderer
operator|->
name|unapplyRenderTargets
argument_list|()
expr_stmt|;
name|UINT
name|zero
init|=
literal|0
decl_stmt|;
name|ID3D11Buffer
modifier|*
specifier|const
name|nullBuffer
init|=
name|NULL
decl_stmt|;
name|deviceContext
operator|->
name|IASetVertexBuffers
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|nullBuffer
argument_list|,
operator|&
name|zero
argument_list|,
operator|&
name|zero
argument_list|)
expr_stmt|;
name|mRenderer
operator|->
name|markAllStateDirty
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|copyStencil
name|gl
operator|::
name|Error
name|Blit11
operator|::
name|copyStencil
parameter_list|(
name|ID3D11Resource
modifier|*
name|source
parameter_list|,
name|unsigned
name|int
name|sourceSubresource
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|sourceArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|sourceSize
parameter_list|,
name|ID3D11Resource
modifier|*
name|dest
parameter_list|,
name|unsigned
name|int
name|destSubresource
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|destArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|destSize
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|*
name|scissor
parameter_list|)
block|{
return|return
name|copyDepthStencil
argument_list|(
name|source
argument_list|,
name|sourceSubresource
argument_list|,
name|sourceArea
argument_list|,
name|sourceSize
argument_list|,
name|dest
argument_list|,
name|destSubresource
argument_list|,
name|destArea
argument_list|,
name|destSize
argument_list|,
name|scissor
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|function|copyDepth
name|gl
operator|::
name|Error
name|Blit11
operator|::
name|copyDepth
parameter_list|(
name|ID3D11ShaderResourceView
modifier|*
name|source
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|sourceArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|sourceSize
parameter_list|,
name|ID3D11DepthStencilView
modifier|*
name|dest
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|destArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|destSize
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|*
name|scissor
parameter_list|)
block|{
name|HRESULT
name|result
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|deviceContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
comment|// Set vertices
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|result
operator|=
name|deviceContext
operator|->
name|Map
argument_list|(
name|mVertexBuffer
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE_DISCARD
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to map internal vertex buffer for texture copy, HRESULT: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
name|UINT
name|stride
init|=
literal|0
decl_stmt|;
name|UINT
name|startIdx
init|=
literal|0
decl_stmt|;
name|UINT
name|drawCount
init|=
literal|0
decl_stmt|;
name|D3D11_PRIMITIVE_TOPOLOGY
name|topology
decl_stmt|;
name|Write2DVertices
argument_list|(
name|sourceArea
argument_list|,
name|sourceSize
argument_list|,
name|destArea
argument_list|,
name|destSize
argument_list|,
name|mappedResource
operator|.
name|pData
argument_list|,
operator|&
name|stride
argument_list|,
operator|&
name|drawCount
argument_list|,
operator|&
name|topology
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|Unmap
argument_list|(
name|mVertexBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Apply vertex buffer
name|deviceContext
operator|->
name|IASetVertexBuffers
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|mVertexBuffer
argument_list|,
operator|&
name|stride
argument_list|,
operator|&
name|startIdx
argument_list|)
expr_stmt|;
comment|// Apply state
name|deviceContext
operator|->
name|OMSetBlendState
argument_list|(
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|0xFFFFFFF
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|OMSetDepthStencilState
argument_list|(
name|mDepthStencilState
argument_list|,
literal|0xFFFFFFFF
argument_list|)
expr_stmt|;
if|if
condition|(
name|scissor
condition|)
block|{
name|D3D11_RECT
name|scissorRect
decl_stmt|;
name|scissorRect
operator|.
name|left
operator|=
name|scissor
operator|->
name|x
expr_stmt|;
name|scissorRect
operator|.
name|right
operator|=
name|scissor
operator|->
name|x
operator|+
name|scissor
operator|->
name|width
expr_stmt|;
name|scissorRect
operator|.
name|top
operator|=
name|scissor
operator|->
name|y
expr_stmt|;
name|scissorRect
operator|.
name|bottom
operator|=
name|scissor
operator|->
name|y
operator|+
name|scissor
operator|->
name|height
expr_stmt|;
name|deviceContext
operator|->
name|RSSetScissorRects
argument_list|(
literal|1
argument_list|,
operator|&
name|scissorRect
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|RSSetState
argument_list|(
name|mScissorEnabledRasterizerState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deviceContext
operator|->
name|RSSetState
argument_list|(
name|mScissorDisabledRasterizerState
argument_list|)
expr_stmt|;
block|}
comment|// Apply shaders
name|deviceContext
operator|->
name|IASetInputLayout
argument_list|(
name|mQuad2DIL
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|IASetPrimitiveTopology
argument_list|(
name|topology
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|VSSetShader
argument_list|(
name|mQuad2DVS
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|PSSetShader
argument_list|(
name|mDepthPS
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|GSSetShader
argument_list|(
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Unset the currently bound shader resource to avoid conflicts
name|mRenderer
operator|->
name|setShaderResource
argument_list|(
name|gl
operator|::
name|SAMPLER_PIXEL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
comment|// Apply render target
name|deviceContext
operator|->
name|OMSetRenderTargets
argument_list|(
literal|0
argument_list|,
name|NULL
argument_list|,
name|dest
argument_list|)
expr_stmt|;
comment|// Set the viewport
name|D3D11_VIEWPORT
name|viewport
decl_stmt|;
name|viewport
operator|.
name|TopLeftX
operator|=
literal|0
expr_stmt|;
name|viewport
operator|.
name|TopLeftY
operator|=
literal|0
expr_stmt|;
name|viewport
operator|.
name|Width
operator|=
name|destSize
operator|.
name|width
expr_stmt|;
name|viewport
operator|.
name|Height
operator|=
name|destSize
operator|.
name|height
expr_stmt|;
name|viewport
operator|.
name|MinDepth
operator|=
literal|0.0f
expr_stmt|;
name|viewport
operator|.
name|MaxDepth
operator|=
literal|1.0f
expr_stmt|;
name|deviceContext
operator|->
name|RSSetViewports
argument_list|(
literal|1
argument_list|,
operator|&
name|viewport
argument_list|)
expr_stmt|;
comment|// Apply textures
name|mRenderer
operator|->
name|setShaderResource
argument_list|(
name|gl
operator|::
name|SAMPLER_PIXEL
argument_list|,
literal|0
argument_list|,
name|source
argument_list|)
expr_stmt|;
comment|// Apply samplers
name|deviceContext
operator|->
name|PSSetSamplers
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|mPointSampler
argument_list|)
expr_stmt|;
comment|// Draw the quad
name|deviceContext
operator|->
name|Draw
argument_list|(
name|drawCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Unbind textures and render targets and vertex buffer
name|mRenderer
operator|->
name|setShaderResource
argument_list|(
name|gl
operator|::
name|SAMPLER_PIXEL
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|mRenderer
operator|->
name|unapplyRenderTargets
argument_list|()
expr_stmt|;
name|UINT
name|zero
init|=
literal|0
decl_stmt|;
name|ID3D11Buffer
modifier|*
specifier|const
name|nullBuffer
init|=
name|NULL
decl_stmt|;
name|deviceContext
operator|->
name|IASetVertexBuffers
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|nullBuffer
argument_list|,
operator|&
name|zero
argument_list|,
operator|&
name|zero
argument_list|)
expr_stmt|;
name|mRenderer
operator|->
name|markAllStateDirty
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|copyDepthStencil
name|gl
operator|::
name|Error
name|Blit11
operator|::
name|copyDepthStencil
parameter_list|(
name|ID3D11Resource
modifier|*
name|source
parameter_list|,
name|unsigned
name|int
name|sourceSubresource
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|sourceArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|sourceSize
parameter_list|,
name|ID3D11Resource
modifier|*
name|dest
parameter_list|,
name|unsigned
name|int
name|destSubresource
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|destArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|destSize
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|*
name|scissor
parameter_list|)
block|{
return|return
name|copyDepthStencil
argument_list|(
name|source
argument_list|,
name|sourceSubresource
argument_list|,
name|sourceArea
argument_list|,
name|sourceSize
argument_list|,
name|dest
argument_list|,
name|destSubresource
argument_list|,
name|destArea
argument_list|,
name|destSize
argument_list|,
name|scissor
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|function|copyDepthStencil
name|gl
operator|::
name|Error
name|Blit11
operator|::
name|copyDepthStencil
parameter_list|(
name|ID3D11Resource
modifier|*
name|source
parameter_list|,
name|unsigned
name|int
name|sourceSubresource
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|sourceArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|sourceSize
parameter_list|,
name|ID3D11Resource
modifier|*
name|dest
parameter_list|,
name|unsigned
name|int
name|destSubresource
parameter_list|,
specifier|const
name|gl
operator|::
name|Box
modifier|&
name|destArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|destSize
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|*
name|scissor
parameter_list|,
name|bool
name|stencilOnly
parameter_list|)
block|{
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|deviceContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|ID3D11Resource
modifier|*
name|sourceStaging
init|=
name|CreateStagingTexture
argument_list|(
name|device
argument_list|,
name|deviceContext
argument_list|,
name|source
argument_list|,
name|sourceSubresource
argument_list|,
name|sourceSize
argument_list|,
name|D3D11_CPU_ACCESS_READ
argument_list|)
decl_stmt|;
comment|// HACK: Create the destination staging buffer as a read/write texture so ID3D11DevicContext::UpdateSubresource can be called
comment|//       using it's mapped data as a source
name|ID3D11Resource
modifier|*
name|destStaging
init|=
name|CreateStagingTexture
argument_list|(
name|device
argument_list|,
name|deviceContext
argument_list|,
name|dest
argument_list|,
name|destSubresource
argument_list|,
name|destSize
argument_list|,
name|D3D11_CPU_ACCESS_READ
operator||
name|D3D11_CPU_ACCESS_WRITE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sourceStaging
operator|||
operator|!
name|destStaging
condition|)
block|{
name|SafeRelease
argument_list|(
name|sourceStaging
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|destStaging
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to create internal staging textures for depth stencil blit."
argument_list|)
return|;
block|}
name|DXGI_FORMAT
name|format
init|=
name|GetTextureFormat
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|format
operator|==
name|GetTextureFormat
argument_list|(
name|dest
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|d3d11
operator|::
name|DXGIFormat
modifier|&
name|dxgiFormatInfo
init|=
name|d3d11
operator|::
name|GetDXGIFormatInfo
argument_list|(
name|format
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|pixelSize
init|=
name|dxgiFormatInfo
operator|.
name|pixelBytes
decl_stmt|;
name|unsigned
name|int
name|copyOffset
init|=
literal|0
decl_stmt|;
name|unsigned
name|int
name|copySize
init|=
name|pixelSize
decl_stmt|;
if|if
condition|(
name|stencilOnly
condition|)
block|{
name|copyOffset
operator|=
name|dxgiFormatInfo
operator|.
name|depthBits
operator|/
literal|8
expr_stmt|;
name|copySize
operator|=
name|dxgiFormatInfo
operator|.
name|stencilBits
operator|/
literal|8
expr_stmt|;
comment|// It would be expensive to have non-byte sized stencil sizes since it would
comment|// require reading from the destination, currently there aren't any though.
name|ASSERT
argument_list|(
name|dxgiFormatInfo
operator|.
name|stencilBits
operator|%
literal|8
operator|==
literal|0
operator|&&
name|dxgiFormatInfo
operator|.
name|depthBits
operator|%
literal|8
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|D3D11_MAPPED_SUBRESOURCE
name|sourceMapping
decl_stmt|;
name|HRESULT
name|result
init|=
name|deviceContext
operator|->
name|Map
argument_list|(
name|sourceStaging
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_READ
argument_list|,
literal|0
argument_list|,
operator|&
name|sourceMapping
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|SafeRelease
argument_list|(
name|sourceStaging
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|destStaging
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to map internal source staging texture for depth stencil blit, HRESULT: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
name|D3D11_MAPPED_SUBRESOURCE
name|destMapping
decl_stmt|;
name|result
operator|=
name|deviceContext
operator|->
name|Map
argument_list|(
name|destStaging
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE
argument_list|,
literal|0
argument_list|,
operator|&
name|destMapping
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|deviceContext
operator|->
name|Unmap
argument_list|(
name|sourceStaging
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|sourceStaging
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|destStaging
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to map internal destination staging texture for depth stencil blit, HRESULT: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
name|gl
operator|::
name|Rectangle
name|clippedDestArea
argument_list|(
name|destArea
operator|.
name|x
argument_list|,
name|destArea
operator|.
name|y
argument_list|,
name|destArea
operator|.
name|width
argument_list|,
name|destArea
operator|.
name|height
argument_list|)
decl_stmt|;
comment|// Clip dest area to the destination size
name|gl
operator|::
name|ClipRectangle
argument_list|(
name|clippedDestArea
argument_list|,
name|gl
operator|::
name|Rectangle
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|destSize
operator|.
name|width
argument_list|,
name|destSize
operator|.
name|height
argument_list|)
argument_list|,
operator|&
name|clippedDestArea
argument_list|)
expr_stmt|;
comment|// Clip dest area to the scissor
if|if
condition|(
name|scissor
condition|)
block|{
name|gl
operator|::
name|ClipRectangle
argument_list|(
name|clippedDestArea
argument_list|,
operator|*
name|scissor
argument_list|,
operator|&
name|clippedDestArea
argument_list|)
expr_stmt|;
block|}
comment|// Determine if entire rows can be copied at once instead of each individual pixel, requires that there is
comment|// no out of bounds lookups required, the entire pixel is copied and no stretching
name|bool
name|wholeRowCopy
init|=
name|sourceArea
operator|.
name|width
operator|==
name|clippedDestArea
operator|.
name|width
operator|&&
name|sourceArea
operator|.
name|x
operator|>=
literal|0
operator|&&
name|sourceArea
operator|.
name|x
operator|+
name|sourceArea
operator|.
name|width
operator|<=
name|sourceSize
operator|.
name|width
operator|&&
name|copySize
operator|==
name|pixelSize
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
name|clippedDestArea
operator|.
name|y
init|;
name|y
operator|<
name|clippedDestArea
operator|.
name|y
operator|+
name|clippedDestArea
operator|.
name|height
condition|;
name|y
operator|++
control|)
block|{
name|float
name|yPerc
init|=
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|y
operator|-
name|destArea
operator|.
name|y
argument_list|)
operator|/
operator|(
name|destArea
operator|.
name|height
operator|-
literal|1
operator|)
decl_stmt|;
comment|// Interpolate using the original source rectangle to determine which row to sample from while clamping to the edges
name|unsigned
name|int
name|readRow
init|=
name|gl
operator|::
name|clamp
argument_list|(
name|sourceArea
operator|.
name|y
operator|+
name|floor
argument_list|(
name|yPerc
operator|*
operator|(
name|sourceArea
operator|.
name|height
operator|-
literal|1
operator|)
operator|+
literal|0.5f
argument_list|)
argument_list|,
literal|0
argument_list|,
name|sourceSize
operator|.
name|height
operator|-
literal|1
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|writeRow
init|=
name|y
decl_stmt|;
if|if
condition|(
name|wholeRowCopy
condition|)
block|{
name|void
modifier|*
name|sourceRow
init|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|sourceMapping
operator|.
name|pData
argument_list|)
operator|+
name|readRow
operator|*
name|sourceMapping
operator|.
name|RowPitch
operator|+
name|sourceArea
operator|.
name|x
operator|*
name|pixelSize
decl_stmt|;
name|void
modifier|*
name|destRow
init|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|destMapping
operator|.
name|pData
argument_list|)
operator|+
name|writeRow
operator|*
name|destMapping
operator|.
name|RowPitch
operator|+
name|destArea
operator|.
name|x
operator|*
name|pixelSize
decl_stmt|;
name|memcpy
argument_list|(
name|destRow
argument_list|,
name|sourceRow
argument_list|,
name|pixelSize
operator|*
name|destArea
operator|.
name|width
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|x
init|=
name|clippedDestArea
operator|.
name|x
init|;
name|x
operator|<
name|clippedDestArea
operator|.
name|x
operator|+
name|clippedDestArea
operator|.
name|width
condition|;
name|x
operator|++
control|)
block|{
name|float
name|xPerc
init|=
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|x
operator|-
name|destArea
operator|.
name|x
argument_list|)
operator|/
operator|(
name|destArea
operator|.
name|width
operator|-
literal|1
operator|)
decl_stmt|;
comment|// Interpolate the original source rectangle to determine which column to sample from while clamping to the edges
name|unsigned
name|int
name|readColumn
init|=
name|gl
operator|::
name|clamp
argument_list|(
name|sourceArea
operator|.
name|x
operator|+
name|floor
argument_list|(
name|xPerc
operator|*
operator|(
name|sourceArea
operator|.
name|width
operator|-
literal|1
operator|)
operator|+
literal|0.5f
argument_list|)
argument_list|,
literal|0
argument_list|,
name|sourceSize
operator|.
name|width
operator|-
literal|1
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|writeColumn
init|=
name|x
decl_stmt|;
name|void
modifier|*
name|sourcePixel
init|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|sourceMapping
operator|.
name|pData
argument_list|)
operator|+
name|readRow
operator|*
name|sourceMapping
operator|.
name|RowPitch
operator|+
name|readColumn
operator|*
name|pixelSize
operator|+
name|copyOffset
decl_stmt|;
name|void
modifier|*
name|destPixel
init|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|destMapping
operator|.
name|pData
argument_list|)
operator|+
name|writeRow
operator|*
name|destMapping
operator|.
name|RowPitch
operator|+
name|writeColumn
operator|*
name|pixelSize
operator|+
name|copyOffset
decl_stmt|;
name|memcpy
argument_list|(
name|destPixel
argument_list|,
name|sourcePixel
argument_list|,
name|copySize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// HACK: Use ID3D11DevicContext::UpdateSubresource which causes an extra copy compared to ID3D11DevicContext::CopySubresourceRegion
comment|//       according to MSDN.
name|deviceContext
operator|->
name|UpdateSubresource
argument_list|(
name|dest
argument_list|,
name|destSubresource
argument_list|,
name|NULL
argument_list|,
name|destMapping
operator|.
name|pData
argument_list|,
name|destMapping
operator|.
name|RowPitch
argument_list|,
name|destMapping
operator|.
name|DepthPitch
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|Unmap
argument_list|(
name|sourceStaging
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|Unmap
argument_list|(
name|destStaging
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// TODO: Determine why this call to ID3D11DevicContext::CopySubresourceRegion causes a TDR timeout on some
comment|//       systems when called repeatedly.
comment|// deviceContext->CopySubresourceRegion(dest, destSubresource, 0, 0, 0, destStaging, 0, NULL);
name|SafeRelease
argument_list|(
name|sourceStaging
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|destStaging
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|compareBlitParameters
name|bool
name|Blit11
operator|::
name|compareBlitParameters
parameter_list|(
specifier|const
name|Blit11
operator|::
name|BlitParameters
modifier|&
name|a
parameter_list|,
specifier|const
name|Blit11
operator|::
name|BlitParameters
modifier|&
name|b
parameter_list|)
block|{
return|return
name|memcmp
argument_list|(
operator|&
name|a
argument_list|,
operator|&
name|b
argument_list|,
sizeof|sizeof
argument_list|(
name|Blit11
operator|::
name|BlitParameters
argument_list|)
argument_list|)
operator|<
literal|0
return|;
block|}
DECL|function|compareSwizzleParameters
name|bool
name|Blit11
operator|::
name|compareSwizzleParameters
parameter_list|(
specifier|const
name|SwizzleParameters
modifier|&
name|a
parameter_list|,
specifier|const
name|SwizzleParameters
modifier|&
name|b
parameter_list|)
block|{
return|return
name|memcmp
argument_list|(
operator|&
name|a
argument_list|,
operator|&
name|b
argument_list|,
sizeof|sizeof
argument_list|(
name|Blit11
operator|::
name|SwizzleParameters
argument_list|)
argument_list|)
operator|<
literal|0
return|;
block|}
DECL|function|add2DBlitShaderToMap
name|void
name|Blit11
operator|::
name|add2DBlitShaderToMap
parameter_list|(
name|GLenum
name|destFormat
parameter_list|,
name|bool
name|signedInteger
parameter_list|,
name|ID3D11PixelShader
modifier|*
name|ps
parameter_list|)
block|{
name|BlitParameters
name|params
init|=
block|{
literal|0
block|}
decl_stmt|;
name|params
operator|.
name|mDestinationFormat
operator|=
name|destFormat
expr_stmt|;
name|params
operator|.
name|mSignedInteger
operator|=
name|signedInteger
expr_stmt|;
name|params
operator|.
name|m3DBlit
operator|=
literal|false
expr_stmt|;
name|ASSERT
argument_list|(
name|mBlitShaderMap
operator|.
name|find
argument_list|(
name|params
argument_list|)
operator|==
name|mBlitShaderMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|Shader
name|shader
decl_stmt|;
name|shader
operator|.
name|mVertexWriteFunction
operator|=
name|Write2DVertices
expr_stmt|;
name|shader
operator|.
name|mInputLayout
operator|=
name|mQuad2DIL
expr_stmt|;
name|shader
operator|.
name|mVertexShader
operator|=
name|mQuad2DVS
expr_stmt|;
name|shader
operator|.
name|mGeometryShader
operator|=
name|NULL
expr_stmt|;
name|shader
operator|.
name|mPixelShader
operator|=
name|ps
expr_stmt|;
name|mBlitShaderMap
index|[
name|params
index|]
operator|=
name|shader
expr_stmt|;
block|}
DECL|function|add3DBlitShaderToMap
name|void
name|Blit11
operator|::
name|add3DBlitShaderToMap
parameter_list|(
name|GLenum
name|destFormat
parameter_list|,
name|bool
name|signedInteger
parameter_list|,
name|ID3D11PixelShader
modifier|*
name|ps
parameter_list|)
block|{
name|BlitParameters
name|params
init|=
block|{
literal|0
block|}
decl_stmt|;
name|params
operator|.
name|mDestinationFormat
operator|=
name|destFormat
expr_stmt|;
name|params
operator|.
name|mSignedInteger
operator|=
name|signedInteger
expr_stmt|;
name|params
operator|.
name|m3DBlit
operator|=
literal|true
expr_stmt|;
name|ASSERT
argument_list|(
name|mBlitShaderMap
operator|.
name|find
argument_list|(
name|params
argument_list|)
operator|==
name|mBlitShaderMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|Shader
name|shader
decl_stmt|;
name|shader
operator|.
name|mVertexWriteFunction
operator|=
name|Write3DVertices
expr_stmt|;
name|shader
operator|.
name|mInputLayout
operator|=
name|mQuad3DIL
expr_stmt|;
name|shader
operator|.
name|mVertexShader
operator|=
name|mQuad3DVS
expr_stmt|;
name|shader
operator|.
name|mGeometryShader
operator|=
name|mQuad3DGS
expr_stmt|;
name|shader
operator|.
name|mPixelShader
operator|=
name|ps
expr_stmt|;
name|mBlitShaderMap
index|[
name|params
index|]
operator|=
name|shader
expr_stmt|;
block|}
DECL|function|addSwizzleShaderToMap
name|void
name|Blit11
operator|::
name|addSwizzleShaderToMap
parameter_list|(
name|GLenum
name|destType
parameter_list|,
name|D3D11_SRV_DIMENSION
name|viewDimension
parameter_list|,
name|ID3D11PixelShader
modifier|*
name|ps
parameter_list|)
block|{
name|SwizzleParameters
name|params
init|=
block|{
literal|0
block|}
decl_stmt|;
name|params
operator|.
name|mDestinationType
operator|=
name|destType
expr_stmt|;
name|params
operator|.
name|mViewDimension
operator|=
name|viewDimension
expr_stmt|;
name|ASSERT
argument_list|(
name|mSwizzleShaderMap
operator|.
name|find
argument_list|(
name|params
argument_list|)
operator|==
name|mSwizzleShaderMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|Shader
name|shader
decl_stmt|;
switch|switch
condition|(
name|viewDimension
condition|)
block|{
case|case
name|D3D_SRV_DIMENSION_TEXTURE2D
case|:
name|shader
operator|.
name|mVertexWriteFunction
operator|=
name|Write2DVertices
expr_stmt|;
name|shader
operator|.
name|mInputLayout
operator|=
name|mQuad2DIL
expr_stmt|;
name|shader
operator|.
name|mVertexShader
operator|=
name|mQuad2DVS
expr_stmt|;
name|shader
operator|.
name|mGeometryShader
operator|=
name|NULL
expr_stmt|;
break|break;
case|case
name|D3D_SRV_DIMENSION_TEXTURE3D
case|:
case|case
name|D3D_SRV_DIMENSION_TEXTURE2DARRAY
case|:
case|case
name|D3D_SRV_DIMENSION_TEXTURECUBE
case|:
name|shader
operator|.
name|mVertexWriteFunction
operator|=
name|Write3DVertices
expr_stmt|;
name|shader
operator|.
name|mInputLayout
operator|=
name|mQuad3DIL
expr_stmt|;
name|shader
operator|.
name|mVertexShader
operator|=
name|mQuad3DVS
expr_stmt|;
name|shader
operator|.
name|mGeometryShader
operator|=
name|mQuad3DGS
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
name|shader
operator|.
name|mPixelShader
operator|=
name|ps
expr_stmt|;
name|mSwizzleShaderMap
index|[
name|params
index|]
operator|=
name|shader
expr_stmt|;
block|}
DECL|function|buildShaderMap
name|void
name|Blit11
operator|::
name|buildShaderMap
parameter_list|()
block|{
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
comment|// 2D shaders (OpenGL ES 2+)
name|add2DBlitShaderToMap
argument_list|(
name|GL_RGBA
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGBA2D
argument_list|,
literal|"Blit11 2D RGBA pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add2DBlitShaderToMap
argument_list|(
name|GL_BGRA_EXT
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGBA2D
argument_list|,
literal|"Blit11 2D BGRA pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add2DBlitShaderToMap
argument_list|(
name|GL_RGB
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGB2D
argument_list|,
literal|"Blit11 2D RGB pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add2DBlitShaderToMap
argument_list|(
name|GL_RG
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRG2D
argument_list|,
literal|"Blit11 2D RG pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add2DBlitShaderToMap
argument_list|(
name|GL_RED
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughR2D
argument_list|,
literal|"Blit11 2D R pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add2DBlitShaderToMap
argument_list|(
name|GL_ALPHA
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGBA2D
argument_list|,
literal|"Blit11 2D alpha pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add2DBlitShaderToMap
argument_list|(
name|GL_LUMINANCE
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughLum2D
argument_list|,
literal|"Blit11 2D lum pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add2DBlitShaderToMap
argument_list|(
name|GL_LUMINANCE_ALPHA
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughLumAlpha2D
argument_list|,
literal|"Blit11 2D luminance alpha pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2D shaders (OpenGL ES 3+)
if|if
condition|(
name|mRenderer
operator|->
name|isES3Capable
argument_list|()
condition|)
block|{
name|add2DBlitShaderToMap
argument_list|(
name|GL_RGBA_INTEGER
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGBA2DUI
argument_list|,
literal|"Blit11 2D RGBA UI pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add2DBlitShaderToMap
argument_list|(
name|GL_RGBA_INTEGER
argument_list|,
literal|true
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGBA2DI
argument_list|,
literal|"Blit11 2D RGBA I pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add2DBlitShaderToMap
argument_list|(
name|GL_RGB_INTEGER
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGB2DUI
argument_list|,
literal|"Blit11 2D RGB UI pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add2DBlitShaderToMap
argument_list|(
name|GL_RGB_INTEGER
argument_list|,
literal|true
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGB2DI
argument_list|,
literal|"Blit11 2D RGB I pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add2DBlitShaderToMap
argument_list|(
name|GL_RG_INTEGER
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRG2DUI
argument_list|,
literal|"Blit11 2D RG UI pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add2DBlitShaderToMap
argument_list|(
name|GL_RG_INTEGER
argument_list|,
literal|true
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRG2DI
argument_list|,
literal|"Blit11 2D RG I pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add2DBlitShaderToMap
argument_list|(
name|GL_RED_INTEGER
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughR2DUI
argument_list|,
literal|"Blit11 2D R UI pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add2DBlitShaderToMap
argument_list|(
name|GL_RED_INTEGER
argument_list|,
literal|true
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughR2DI
argument_list|,
literal|"Blit11 2D R I pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 3D shaders (OpenGL ES 3+)
if|if
condition|(
name|mRenderer
operator|->
name|isES3Capable
argument_list|()
condition|)
block|{
name|add3DBlitShaderToMap
argument_list|(
name|GL_RGBA
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGBA3D
argument_list|,
literal|"Blit11 3D RGBA pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_RGBA_INTEGER
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGBA3DUI
argument_list|,
literal|"Blit11 3D UI RGBA pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_RGBA_INTEGER
argument_list|,
literal|true
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGBA3DI
argument_list|,
literal|"Blit11 3D I RGBA pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_BGRA_EXT
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGBA3D
argument_list|,
literal|"Blit11 3D BGRA pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_RGB
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGB3D
argument_list|,
literal|"Blit11 3D RGB pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_RGB_INTEGER
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGB3DUI
argument_list|,
literal|"Blit11 3D RGB UI pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_RGB_INTEGER
argument_list|,
literal|true
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGB3DI
argument_list|,
literal|"Blit11 3D RGB I pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_RG
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRG3D
argument_list|,
literal|"Blit11 3D RG pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_RG_INTEGER
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRG3DUI
argument_list|,
literal|"Blit11 3D RG UI pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_RG_INTEGER
argument_list|,
literal|true
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRG3DI
argument_list|,
literal|"Blit11 3D RG I pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_RED
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughR3D
argument_list|,
literal|"Blit11 3D R pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_RED_INTEGER
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughR3DUI
argument_list|,
literal|"Blit11 3D R UI pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_RED_INTEGER
argument_list|,
literal|true
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughR3DI
argument_list|,
literal|"Blit11 3D R I pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_ALPHA
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughRGBA3D
argument_list|,
literal|"Blit11 3D alpha pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_LUMINANCE
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughLum3D
argument_list|,
literal|"Blit11 3D luminance pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|add3DBlitShaderToMap
argument_list|(
name|GL_LUMINANCE_ALPHA
argument_list|,
literal|false
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_PassthroughLumAlpha3D
argument_list|,
literal|"Blit11 3D luminance alpha pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Swizzling shaders (OpenGL ES 3+)
if|if
condition|(
name|mRenderer
operator|->
name|isES3Capable
argument_list|()
condition|)
block|{
name|addSwizzleShaderToMap
argument_list|(
name|GL_FLOAT
argument_list|,
name|D3D_SRV_DIMENSION_TEXTURE2D
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_SwizzleF2D
argument_list|,
literal|"Blit11 2D F swizzle pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|addSwizzleShaderToMap
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|D3D_SRV_DIMENSION_TEXTURE2D
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_SwizzleUI2D
argument_list|,
literal|"Blit11 2D UI swizzle pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|addSwizzleShaderToMap
argument_list|(
name|GL_INT
argument_list|,
name|D3D_SRV_DIMENSION_TEXTURE2D
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_SwizzleI2D
argument_list|,
literal|"Blit11 2D I swizzle pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|addSwizzleShaderToMap
argument_list|(
name|GL_FLOAT
argument_list|,
name|D3D_SRV_DIMENSION_TEXTURECUBE
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_SwizzleF2DArray
argument_list|,
literal|"Blit11 2D Cube F swizzle pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|addSwizzleShaderToMap
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|D3D_SRV_DIMENSION_TEXTURECUBE
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_SwizzleUI2DArray
argument_list|,
literal|"Blit11 2D Cube UI swizzle pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|addSwizzleShaderToMap
argument_list|(
name|GL_INT
argument_list|,
name|D3D_SRV_DIMENSION_TEXTURECUBE
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_SwizzleI2DArray
argument_list|,
literal|"Blit11 2D Cube I swizzle pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|addSwizzleShaderToMap
argument_list|(
name|GL_FLOAT
argument_list|,
name|D3D_SRV_DIMENSION_TEXTURE3D
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_SwizzleF3D
argument_list|,
literal|"Blit11 3D F swizzle pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|addSwizzleShaderToMap
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|D3D_SRV_DIMENSION_TEXTURE3D
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_SwizzleUI3D
argument_list|,
literal|"Blit11 3D UI swizzle pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|addSwizzleShaderToMap
argument_list|(
name|GL_INT
argument_list|,
name|D3D_SRV_DIMENSION_TEXTURE3D
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_SwizzleI3D
argument_list|,
literal|"Blit11 3D I swizzle pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|addSwizzleShaderToMap
argument_list|(
name|GL_FLOAT
argument_list|,
name|D3D_SRV_DIMENSION_TEXTURE2DARRAY
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_SwizzleF2DArray
argument_list|,
literal|"Blit11 2D Array F swizzle pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|addSwizzleShaderToMap
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|D3D_SRV_DIMENSION_TEXTURE2DARRAY
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_SwizzleUI2DArray
argument_list|,
literal|"Blit11 2D Array UI swizzle pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
name|addSwizzleShaderToMap
argument_list|(
name|GL_INT
argument_list|,
name|D3D_SRV_DIMENSION_TEXTURE2DARRAY
argument_list|,
name|d3d11
operator|::
name|CompilePS
argument_list|(
name|device
argument_list|,
name|g_PS_SwizzleI2DArray
argument_list|,
literal|"Blit11 2D Array I swizzle pixel shader"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|clearShaderMap
name|void
name|Blit11
operator|::
name|clearShaderMap
parameter_list|()
block|{
for|for
control|(
name|BlitShaderMap
operator|::
name|iterator
name|i
init|=
name|mBlitShaderMap
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|mBlitShaderMap
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Shader
modifier|&
name|shader
init|=
name|i
operator|->
name|second
decl_stmt|;
name|SafeRelease
argument_list|(
name|shader
operator|.
name|mPixelShader
argument_list|)
expr_stmt|;
block|}
name|mBlitShaderMap
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|SwizzleShaderMap
operator|::
name|iterator
name|i
init|=
name|mSwizzleShaderMap
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|mSwizzleShaderMap
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Shader
modifier|&
name|shader
init|=
name|i
operator|->
name|second
decl_stmt|;
name|SafeRelease
argument_list|(
name|shader
operator|.
name|mPixelShader
argument_list|)
expr_stmt|;
block|}
name|mSwizzleShaderMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_namespace
end_unit
