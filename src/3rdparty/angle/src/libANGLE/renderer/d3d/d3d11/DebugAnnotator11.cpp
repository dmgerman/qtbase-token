begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// DebugAnnotator11.cpp: D3D11 helpers for adding trace annotations.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/DebugAnnotator11.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|DebugAnnotator11
name|DebugAnnotator11
operator|::
name|DebugAnnotator11
parameter_list|()
member_init_list|:
name|mInitialized
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mD3d11Module
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mUserDefinedAnnotation
argument_list|(
literal|nullptr
argument_list|)
block|{
comment|// D3D11 devices can't be created during DllMain.
comment|// We defer device creation until the object is actually used.
block|}
DECL|function|~DebugAnnotator11
name|DebugAnnotator11
operator|::
name|~
name|DebugAnnotator11
parameter_list|()
block|{
if|if
condition|(
name|mInitialized
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11_1
argument_list|)
name|SafeRelease
argument_list|(
name|mUserDefinedAnnotation
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
name|FreeLibrary
argument_list|(
name|mD3d11Module
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// !ANGLE_ENABLE_WINDOWS_STORE
block|}
block|}
DECL|function|beginEvent
name|void
name|DebugAnnotator11
operator|::
name|beginEvent
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|eventName
parameter_list|)
block|{
name|initializeDevice
argument_list|()
expr_stmt|;
if|if
condition|(
name|mUserDefinedAnnotation
operator|!=
literal|nullptr
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11_1
argument_list|)
name|mUserDefinedAnnotation
operator|->
name|BeginEvent
argument_list|(
name|eventName
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
DECL|function|endEvent
name|void
name|DebugAnnotator11
operator|::
name|endEvent
parameter_list|()
block|{
name|initializeDevice
argument_list|()
expr_stmt|;
if|if
condition|(
name|mUserDefinedAnnotation
operator|!=
literal|nullptr
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11_1
argument_list|)
name|mUserDefinedAnnotation
operator|->
name|EndEvent
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
block|}
DECL|function|setMarker
name|void
name|DebugAnnotator11
operator|::
name|setMarker
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|markerName
parameter_list|)
block|{
name|initializeDevice
argument_list|()
expr_stmt|;
if|if
condition|(
name|mUserDefinedAnnotation
operator|!=
literal|nullptr
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11_1
argument_list|)
name|mUserDefinedAnnotation
operator|->
name|SetMarker
argument_list|(
name|markerName
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
DECL|function|getStatus
name|bool
name|DebugAnnotator11
operator|::
name|getStatus
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
if|#
directive|if
operator|(
name|NTDDI_VERSION
operator|==
name|NTDDI_WIN10
operator|)
name|initializeDevice
argument_list|()
expr_stmt|;
if|if
condition|(
name|mUserDefinedAnnotation
operator|!=
literal|nullptr
condition|)
block|{
return|return
operator|!
operator|!
operator|(
name|mUserDefinedAnnotation
operator|->
name|GetStatus
argument_list|()
operator|)
return|;
block|}
return|return
literal|true
return|;
comment|// Default if initializeDevice() failed
elif|#
directive|elif
name|defined
argument_list|(
name|_DEBUG
argument_list|)
operator|&&
operator|(
name|WINAPI_FAMILY
operator|!=
name|WINAPI_FAMILY_PHONE_APP
operator|)
specifier|static
name|bool
name|underCapture
init|=
literal|true
decl_stmt|;
comment|// ID3DUserDefinedAnnotation::GetStatus doesn't work with the Graphics Diagnostics tools in
comment|// Windows 8.1/Visual Studio 2013. We can use IDXGraphicsAnalysis, though.
comment|// The call to GetDebugInterface1 only succeeds if the app is under capture.
comment|// This should only be called in DEBUG mode.
comment|// If an app links against DXGIGetDebugInterface1 in release mode then it will fail Windows
comment|// Store ingestion checks.
comment|// Cache the result to reduce the number of calls to DXGIGetDebugInterface1
specifier|static
name|bool
name|triedIDXGraphicsAnalysis
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|triedIDXGraphicsAnalysis
condition|)
block|{
name|IDXGraphicsAnalysis
modifier|*
name|graphicsAnalysis
init|=
literal|nullptr
decl_stmt|;
name|HRESULT
name|result
init|=
name|DXGIGetDebugInterface1
argument_list|(
literal|0
argument_list|,
name|IID_PPV_ARGS
argument_list|(
operator|&
name|graphicsAnalysis
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|underCapture
operator|=
operator|(
name|graphicsAnalysis
operator|!=
literal|nullptr
operator|)
expr_stmt|;
block|}
name|SafeRelease
argument_list|(
name|graphicsAnalysis
argument_list|)
expr_stmt|;
name|triedIDXGraphicsAnalysis
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|underCapture
return|;
else|#
directive|else
comment|// We can't detect GetStatus() on release WinRT 8.1 builds, so always return true.
return|return
literal|true
return|;
endif|#
directive|endif
comment|// (NTDDI_VERSION == NTDDI_WIN10) or _DEBUG
else|#
directive|else
comment|// We can't detect GetStatus() on desktop ANGLE builds so always return true.
return|return
literal|true
return|;
endif|#
directive|endif
comment|// ANGLE_ENABLE_WINDOWS_STORE
block|}
DECL|function|initializeDevice
name|void
name|DebugAnnotator11
operator|::
name|initializeDevice
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mInitialized
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
name|mD3d11Module
operator|=
name|LoadLibrary
argument_list|(
name|TEXT
argument_list|(
literal|"d3d11.dll"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|mD3d11Module
argument_list|)
expr_stmt|;
name|PFN_D3D11_CREATE_DEVICE
name|D3D11CreateDevice
init|=
operator|(
name|PFN_D3D11_CREATE_DEVICE
operator|)
name|GetProcAddress
argument_list|(
name|mD3d11Module
argument_list|,
literal|"D3D11CreateDevice"
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|D3D11CreateDevice
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// !ANGLE_ENABLE_WINDOWS_STORE
name|ID3D11Device
modifier|*
name|device
init|=
literal|nullptr
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|context
init|=
literal|nullptr
decl_stmt|;
name|HRESULT
name|hr
init|=
name|E_FAIL
decl_stmt|;
comment|// Create a D3D_DRIVER_TYPE_NULL device, which is much cheaper than other types of device.
name|hr
operator|=
name|D3D11CreateDevice
argument_list|(
name|NULL
argument_list|,
name|D3D_DRIVER_TYPE_NULL
argument_list|,
literal|nullptr
argument_list|,
literal|0
argument_list|,
literal|nullptr
argument_list|,
literal|0
argument_list|,
name|D3D11_SDK_VERSION
argument_list|,
operator|&
name|device
argument_list|,
literal|nullptr
argument_list|,
operator|&
name|context
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11_1
argument_list|)
name|mUserDefinedAnnotation
operator|=
name|d3d11
operator|::
name|DynamicCastComObject
argument_list|<
name|ID3DUserDefinedAnnotation
argument_list|>
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|mUserDefinedAnnotation
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|mInitialized
operator|=
literal|true
expr_stmt|;
block|}
name|SafeRelease
argument_list|(
name|device
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_namespace
end_unit
