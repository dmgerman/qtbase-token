begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// formatutils11.cpp: Queries for GL image formats and their translations to D3D11
end_comment
begin_comment
comment|// formats.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/formatutils11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/copyimage.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/copyvertex.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/generatemip.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/loadimage.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/Renderer.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|namespace|d3d11
namespace|namespace
name|d3d11
block|{
DECL|typedef|DXGIToESFormatMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|DXGI_FORMAT
argument_list|,
name|GLenum
argument_list|>
name|DXGIToESFormatMap
typedef|;
DECL|function|AddDXGIToESEntry
specifier|inline
name|void
name|AddDXGIToESEntry
parameter_list|(
name|DXGIToESFormatMap
modifier|*
name|map
parameter_list|,
name|DXGI_FORMAT
name|key
parameter_list|,
name|GLenum
name|value
parameter_list|)
block|{
name|map
operator|->
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|BuildDXGIToESFormatMap
specifier|static
name|DXGIToESFormatMap
name|BuildDXGIToESFormatMap
parameter_list|()
block|{
name|DXGIToESFormatMap
name|map
decl_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|GL_NONE
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_A8_UNORM
argument_list|,
name|GL_ALPHA8_EXT
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8_UNORM
argument_list|,
name|GL_R8
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8_UNORM
argument_list|,
name|GL_RG8
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|GL_RGBA8
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
argument_list|,
name|GL_SRGB8_ALPHA8
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
name|GL_BGRA8_EXT
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8_SNORM
argument_list|,
name|GL_R8_SNORM
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8_SNORM
argument_list|,
name|GL_RG8_SNORM
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SNORM
argument_list|,
name|GL_RGBA8_SNORM
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8_UINT
argument_list|,
name|GL_R8UI
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_UINT
argument_list|,
name|GL_R16UI
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_UINT
argument_list|,
name|GL_R32UI
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8_UINT
argument_list|,
name|GL_RG8UI
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16_UINT
argument_list|,
name|GL_RG16UI
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32_UINT
argument_list|,
name|GL_RG32UI
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32_UINT
argument_list|,
name|GL_RGB32UI
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
name|GL_RGBA8UI
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
name|GL_RGBA16UI
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_UINT
argument_list|,
name|GL_RGBA32UI
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8_SINT
argument_list|,
name|GL_R8I
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_SINT
argument_list|,
name|GL_R16I
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_SINT
argument_list|,
name|GL_R32I
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8_SINT
argument_list|,
name|GL_RG8I
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16_SINT
argument_list|,
name|GL_RG16I
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32_SINT
argument_list|,
name|GL_RG32I
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32_SINT
argument_list|,
name|GL_RGB32I
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
name|GL_RGBA8I
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
name|GL_RGBA16I
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
name|GL_RGBA32I
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R10G10B10A2_UNORM
argument_list|,
name|GL_RGB10_A2
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R10G10B10A2_UINT
argument_list|,
name|GL_RGB10_A2UI
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_FLOAT
argument_list|,
name|GL_R16F
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16_FLOAT
argument_list|,
name|GL_RG16F
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|GL_RGBA16F
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_FLOAT
argument_list|,
name|GL_R32F
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
name|GL_RG32F
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32_FLOAT
argument_list|,
name|GL_RGB32F
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|GL_RGBA32F
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R9G9B9E5_SHAREDEXP
argument_list|,
name|GL_RGB9_E5
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R11G11B10_FLOAT
argument_list|,
name|GL_R11F_G11F_B10F
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_TYPELESS
argument_list|,
name|GL_DEPTH_COMPONENT16
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_UNORM
argument_list|,
name|GL_DEPTH_COMPONENT16
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_D16_UNORM
argument_list|,
name|GL_DEPTH_COMPONENT16
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R24G8_TYPELESS
argument_list|,
name|GL_DEPTH24_STENCIL8_OES
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R24_UNORM_X8_TYPELESS
argument_list|,
name|GL_DEPTH24_STENCIL8_OES
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_D24_UNORM_S8_UINT
argument_list|,
name|GL_DEPTH24_STENCIL8_OES
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G8X24_TYPELESS
argument_list|,
name|GL_DEPTH32F_STENCIL8
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS
argument_list|,
name|GL_DEPTH32F_STENCIL8
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_D32_FLOAT_S8X24_UINT
argument_list|,
name|GL_DEPTH32F_STENCIL8
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_TYPELESS
argument_list|,
name|GL_DEPTH_COMPONENT32F
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_D32_FLOAT
argument_list|,
name|GL_DEPTH_COMPONENT32F
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_BC1_UNORM
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_BC2_UNORM
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_BC3_UNORM
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_B5G6R5_UNORM
argument_list|,
name|GL_RGB565
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_B5G5R5A1_UNORM
argument_list|,
name|GL_RGB5_A1
argument_list|)
expr_stmt|;
name|AddDXGIToESEntry
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_B4G4R4A4_UNORM
argument_list|,
name|GL_RGBA4
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|struct|D3D11FastCopyFormat
struct|struct
name|D3D11FastCopyFormat
block|{
DECL|member|destFormat
name|GLenum
name|destFormat
decl_stmt|;
DECL|member|destType
name|GLenum
name|destType
decl_stmt|;
DECL|member|copyFunction
name|ColorCopyFunction
name|copyFunction
decl_stmt|;
DECL|function|D3D11FastCopyFormat
name|D3D11FastCopyFormat
parameter_list|(
name|GLenum
name|destFormat
parameter_list|,
name|GLenum
name|destType
parameter_list|,
name|ColorCopyFunction
name|copyFunction
parameter_list|)
member_init_list|:
name|destFormat
argument_list|(
name|destFormat
argument_list|)
member_init_list|,
name|destType
argument_list|(
name|destType
argument_list|)
member_init_list|,
name|copyFunction
argument_list|(
name|copyFunction
argument_list|)
block|{ }
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|D3D11FastCopyFormat
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|memcmp
argument_list|(
name|this
argument_list|,
operator|&
name|other
argument_list|,
sizeof|sizeof
argument_list|(
name|D3D11FastCopyFormat
argument_list|)
argument_list|)
operator|<
literal|0
return|;
block|}
block|}
struct|;
DECL|typedef|D3D11FastCopyMap
typedef|typedef
name|std
operator|::
name|multimap
argument_list|<
name|DXGI_FORMAT
argument_list|,
name|D3D11FastCopyFormat
argument_list|>
name|D3D11FastCopyMap
typedef|;
DECL|function|BuildFastCopyMap
specifier|static
name|D3D11FastCopyMap
name|BuildFastCopyMap
parameter_list|()
block|{
name|D3D11FastCopyMap
name|map
decl_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
name|D3D11FastCopyFormat
argument_list|(
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|CopyBGRA8ToRGBA8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|struct|DXGIColorFormatInfo
struct|struct
name|DXGIColorFormatInfo
block|{
DECL|member|redBits
name|size_t
name|redBits
decl_stmt|;
DECL|member|greenBits
name|size_t
name|greenBits
decl_stmt|;
DECL|member|blueBits
name|size_t
name|blueBits
decl_stmt|;
DECL|member|luminanceBits
name|size_t
name|luminanceBits
decl_stmt|;
DECL|member|alphaBits
name|size_t
name|alphaBits
decl_stmt|;
DECL|member|sharedBits
name|size_t
name|sharedBits
decl_stmt|;
block|}
struct|;
DECL|typedef|ColorFormatInfoMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|DXGI_FORMAT
argument_list|,
name|DXGIColorFormatInfo
argument_list|>
name|ColorFormatInfoMap
typedef|;
DECL|typedef|ColorFormatInfoPair
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|DXGI_FORMAT
argument_list|,
name|DXGIColorFormatInfo
argument_list|>
name|ColorFormatInfoPair
typedef|;
DECL|function|InsertDXGIColorFormatInfo
specifier|static
specifier|inline
name|void
name|InsertDXGIColorFormatInfo
parameter_list|(
name|ColorFormatInfoMap
modifier|*
name|map
parameter_list|,
name|DXGI_FORMAT
name|format
parameter_list|,
name|size_t
name|redBits
parameter_list|,
name|size_t
name|greenBits
parameter_list|,
name|size_t
name|blueBits
parameter_list|,
name|size_t
name|alphaBits
parameter_list|,
name|size_t
name|sharedBits
parameter_list|)
block|{
name|DXGIColorFormatInfo
name|info
decl_stmt|;
name|info
operator|.
name|redBits
operator|=
name|redBits
expr_stmt|;
name|info
operator|.
name|greenBits
operator|=
name|greenBits
expr_stmt|;
name|info
operator|.
name|blueBits
operator|=
name|blueBits
expr_stmt|;
name|info
operator|.
name|alphaBits
operator|=
name|alphaBits
expr_stmt|;
name|info
operator|.
name|sharedBits
operator|=
name|sharedBits
expr_stmt|;
name|map
operator|->
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|format
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|BuildColorFormatInfoMap
specifier|static
name|ColorFormatInfoMap
name|BuildColorFormatInfoMap
parameter_list|()
block|{
name|ColorFormatInfoMap
name|map
decl_stmt|;
comment|//                             | DXGI format                         | R | G | B | A | S |
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_A8_UNORM
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8_UNORM
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8_UNORM
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8_SNORM
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8_SNORM
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SNORM
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8_UINT
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_UINT
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_UINT
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8_UINT
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16_UINT
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32_UINT
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32_UINT
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_UINT
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8_SINT
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_SINT
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_SINT
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8_SINT
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16_SINT
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32_SINT
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32_SINT
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R10G10B10A2_UNORM
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R10G10B10A2_UINT
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_FLOAT
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16_FLOAT
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_FLOAT
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32_FLOAT
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R9G9B9E5_SHAREDEXP
argument_list|,
literal|9
argument_list|,
literal|9
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R11G11B10_FLOAT
argument_list|,
literal|11
argument_list|,
literal|11
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_B5G6R5_UNORM
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_B4G4R4A4_UNORM
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIColorFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_B5G5R5A1_UNORM
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|struct|DXGIDepthStencilInfo
struct|struct
name|DXGIDepthStencilInfo
block|{
DECL|member|depthBits
name|unsigned
name|int
name|depthBits
decl_stmt|;
DECL|member|depthOffset
name|unsigned
name|int
name|depthOffset
decl_stmt|;
DECL|member|stencilBits
name|unsigned
name|int
name|stencilBits
decl_stmt|;
DECL|member|stencilOffset
name|unsigned
name|int
name|stencilOffset
decl_stmt|;
block|}
struct|;
DECL|typedef|DepthStencilInfoMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|DXGI_FORMAT
argument_list|,
name|DXGIDepthStencilInfo
argument_list|>
name|DepthStencilInfoMap
typedef|;
DECL|typedef|DepthStencilInfoPair
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|DXGI_FORMAT
argument_list|,
name|DXGIDepthStencilInfo
argument_list|>
name|DepthStencilInfoPair
typedef|;
DECL|function|InsertDXGIDepthStencilInfo
specifier|static
specifier|inline
name|void
name|InsertDXGIDepthStencilInfo
parameter_list|(
name|DepthStencilInfoMap
modifier|*
name|map
parameter_list|,
name|DXGI_FORMAT
name|format
parameter_list|,
name|unsigned
name|int
name|depthBits
parameter_list|,
name|unsigned
name|int
name|depthOffset
parameter_list|,
name|unsigned
name|int
name|stencilBits
parameter_list|,
name|unsigned
name|int
name|stencilOffset
parameter_list|)
block|{
name|DXGIDepthStencilInfo
name|info
decl_stmt|;
name|info
operator|.
name|depthBits
operator|=
name|depthBits
expr_stmt|;
name|info
operator|.
name|depthOffset
operator|=
name|depthOffset
expr_stmt|;
name|info
operator|.
name|stencilBits
operator|=
name|stencilBits
expr_stmt|;
name|info
operator|.
name|stencilOffset
operator|=
name|stencilOffset
expr_stmt|;
name|map
operator|->
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|format
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|BuildDepthStencilInfoMap
specifier|static
name|DepthStencilInfoMap
name|BuildDepthStencilInfoMap
parameter_list|()
block|{
name|DepthStencilInfoMap
name|map
decl_stmt|;
name|InsertDXGIDepthStencilInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_TYPELESS
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIDepthStencilInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_UNORM
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIDepthStencilInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_D16_UNORM
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIDepthStencilInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R24G8_TYPELESS
argument_list|,
literal|24
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|InsertDXGIDepthStencilInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R24_UNORM_X8_TYPELESS
argument_list|,
literal|24
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|InsertDXGIDepthStencilInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_D24_UNORM_S8_UINT
argument_list|,
literal|24
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|InsertDXGIDepthStencilInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_TYPELESS
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIDepthStencilInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_FLOAT
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIDepthStencilInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_D32_FLOAT
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InsertDXGIDepthStencilInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G8X24_TYPELESS
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|InsertDXGIDepthStencilInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|InsertDXGIDepthStencilInfo
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_D32_FLOAT_S8X24_UINT
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|32
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|typedef|DXGIFormatInfoMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|DXGI_FORMAT
argument_list|,
name|DXGIFormat
argument_list|>
name|DXGIFormatInfoMap
typedef|;
DECL|function|DXGIFormat
name|DXGIFormat
operator|::
name|DXGIFormat
parameter_list|()
member_init_list|:
name|pixelBytes
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|blockWidth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|blockHeight
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|redBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|greenBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|blueBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|alphaBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sharedBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|depthBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|depthOffset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|stencilBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|stencilOffset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|internalFormat
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|componentType
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|mipGenerationFunction
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|colorReadFunction
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|fastCopyFunctions
argument_list|()
member_init_list|,
name|nativeMipmapSupport
argument_list|(
name|NULL
argument_list|)
block|{ }
DECL|function|NeverSupported
specifier|static
name|bool
name|NeverSupported
parameter_list|(
name|D3D_FEATURE_LEVEL
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
template|template
parameter_list|<
name|D3D_FEATURE_LEVEL
name|requiredFeatureLevel
parameter_list|>
DECL|function|RequiresFeatureLevel
specifier|static
name|bool
name|RequiresFeatureLevel
parameter_list|(
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
block|{
return|return
name|featureLevel
operator|>=
name|requiredFeatureLevel
return|;
block|}
DECL|function|getFastCopyFunction
name|ColorCopyFunction
name|DXGIFormat
operator|::
name|getFastCopyFunction
parameter_list|(
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|)
specifier|const
block|{
name|FastCopyFunctionMap
operator|::
name|const_iterator
name|iter
init|=
name|fastCopyFunctions
operator|.
name|find
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|format
argument_list|,
name|type
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|iter
operator|!=
name|fastCopyFunctions
operator|.
name|end
argument_list|()
operator|)
condition|?
name|iter
operator|->
name|second
else|:
name|NULL
return|;
block|}
DECL|function|AddDXGIFormat
name|void
name|AddDXGIFormat
parameter_list|(
name|DXGIFormatInfoMap
modifier|*
name|map
parameter_list|,
name|DXGI_FORMAT
name|dxgiFormat
parameter_list|,
name|GLuint
name|pixelBits
parameter_list|,
name|GLuint
name|blockWidth
parameter_list|,
name|GLuint
name|blockHeight
parameter_list|,
name|GLenum
name|componentType
parameter_list|,
name|MipGenerationFunction
name|mipFunc
parameter_list|,
name|ColorReadFunction
name|readFunc
parameter_list|,
name|NativeMipmapGenerationSupportFunction
name|nativeMipmapSupport
parameter_list|)
block|{
name|DXGIFormat
name|info
decl_stmt|;
name|info
operator|.
name|pixelBytes
operator|=
name|pixelBits
operator|/
literal|8
expr_stmt|;
name|info
operator|.
name|blockWidth
operator|=
name|blockWidth
expr_stmt|;
name|info
operator|.
name|blockHeight
operator|=
name|blockHeight
expr_stmt|;
specifier|static
specifier|const
name|ColorFormatInfoMap
name|colorInfoMap
init|=
name|BuildColorFormatInfoMap
argument_list|()
decl_stmt|;
name|ColorFormatInfoMap
operator|::
name|const_iterator
name|colorInfoIter
init|=
name|colorInfoMap
operator|.
name|find
argument_list|(
name|dxgiFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorInfoIter
operator|!=
name|colorInfoMap
operator|.
name|end
argument_list|()
condition|)
block|{
specifier|const
name|DXGIColorFormatInfo
modifier|&
name|colorInfo
init|=
name|colorInfoIter
operator|->
name|second
decl_stmt|;
name|info
operator|.
name|redBits
operator|=
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|colorInfo
operator|.
name|redBits
argument_list|)
expr_stmt|;
name|info
operator|.
name|greenBits
operator|=
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|colorInfo
operator|.
name|greenBits
argument_list|)
expr_stmt|;
name|info
operator|.
name|blueBits
operator|=
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|colorInfo
operator|.
name|blueBits
argument_list|)
expr_stmt|;
name|info
operator|.
name|alphaBits
operator|=
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|colorInfo
operator|.
name|alphaBits
argument_list|)
expr_stmt|;
name|info
operator|.
name|sharedBits
operator|=
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|colorInfo
operator|.
name|sharedBits
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|const
name|DepthStencilInfoMap
name|dsInfoMap
init|=
name|BuildDepthStencilInfoMap
argument_list|()
decl_stmt|;
name|DepthStencilInfoMap
operator|::
name|const_iterator
name|dsInfoIter
init|=
name|dsInfoMap
operator|.
name|find
argument_list|(
name|dxgiFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|dsInfoIter
operator|!=
name|dsInfoMap
operator|.
name|end
argument_list|()
condition|)
block|{
specifier|const
name|DXGIDepthStencilInfo
modifier|&
name|dsInfo
init|=
name|dsInfoIter
operator|->
name|second
decl_stmt|;
name|info
operator|.
name|depthBits
operator|=
name|dsInfo
operator|.
name|depthBits
expr_stmt|;
name|info
operator|.
name|depthOffset
operator|=
name|dsInfo
operator|.
name|depthOffset
expr_stmt|;
name|info
operator|.
name|stencilBits
operator|=
name|dsInfo
operator|.
name|stencilBits
expr_stmt|;
name|info
operator|.
name|stencilOffset
operator|=
name|dsInfo
operator|.
name|stencilOffset
expr_stmt|;
block|}
specifier|static
specifier|const
name|DXGIToESFormatMap
name|dxgiToESMap
init|=
name|BuildDXGIToESFormatMap
argument_list|()
decl_stmt|;
name|DXGIToESFormatMap
operator|::
name|const_iterator
name|dxgiToESIter
init|=
name|dxgiToESMap
operator|.
name|find
argument_list|(
name|dxgiFormat
argument_list|)
decl_stmt|;
name|info
operator|.
name|internalFormat
operator|=
operator|(
name|dxgiToESIter
operator|!=
name|dxgiToESMap
operator|.
name|end
argument_list|()
operator|)
condition|?
name|dxgiToESIter
operator|->
name|second
else|:
name|GL_NONE
expr_stmt|;
name|info
operator|.
name|componentType
operator|=
name|componentType
expr_stmt|;
name|info
operator|.
name|mipGenerationFunction
operator|=
name|mipFunc
expr_stmt|;
name|info
operator|.
name|colorReadFunction
operator|=
name|readFunc
expr_stmt|;
specifier|static
specifier|const
name|D3D11FastCopyMap
name|fastCopyMap
init|=
name|BuildFastCopyMap
argument_list|()
decl_stmt|;
name|std
operator|::
name|pair
argument_list|<
name|D3D11FastCopyMap
operator|::
name|const_iterator
argument_list|,
name|D3D11FastCopyMap
operator|::
name|const_iterator
argument_list|>
name|fastCopyIter
init|=
name|fastCopyMap
operator|.
name|equal_range
argument_list|(
name|dxgiFormat
argument_list|)
decl_stmt|;
for|for
control|(
name|D3D11FastCopyMap
operator|::
name|const_iterator
name|i
init|=
name|fastCopyIter
operator|.
name|first
init|;
name|i
operator|!=
name|fastCopyIter
operator|.
name|second
condition|;
name|i
operator|++
control|)
block|{
name|info
operator|.
name|fastCopyFunctions
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|i
operator|->
name|second
operator|.
name|destFormat
argument_list|,
name|i
operator|->
name|second
operator|.
name|destType
argument_list|)
argument_list|,
name|i
operator|->
name|second
operator|.
name|copyFunction
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|nativeMipmapSupport
operator|=
name|nativeMipmapSupport
expr_stmt|;
name|map
operator|->
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|dxgiFormat
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// A map to determine the pixel size and mipmap generation function of a given DXGI format
DECL|function|BuildDXGIFormatInfoMap
specifier|static
name|DXGIFormatInfoMap
name|BuildDXGIFormatInfoMap
parameter_list|()
block|{
name|DXGIFormatInfoMap
name|map
decl_stmt|;
comment|//                | DXGI format                          |S   |W |H |Component Type         | Mip generation function   | Color read function               | Native mipmap function
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_NONE
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_A8_UNORM
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|GenerateMip
argument_list|<
name|A8
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|A8
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_10_0
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8_UNORM
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|GenerateMip
argument_list|<
name|R8
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R8
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_10_0
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8_UNORM
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|GenerateMip
argument_list|<
name|R8G8
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R8G8
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_10_0
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|GenerateMip
argument_list|<
name|R8G8B8A8
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R8G8B8A8
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_9_1
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|GenerateMip
argument_list|<
name|R8G8B8A8
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R8G8B8A8
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_9_1
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|GenerateMip
argument_list|<
name|B8G8R8A8
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|B8G8R8A8
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_9_1
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8_SNORM
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_SIGNED_NORMALIZED
argument_list|,
name|GenerateMip
argument_list|<
name|R8S
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R8S
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_10_0
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8_SNORM
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_SIGNED_NORMALIZED
argument_list|,
name|GenerateMip
argument_list|<
name|R8G8S
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R8G8S
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_10_0
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SNORM
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_SIGNED_NORMALIZED
argument_list|,
name|GenerateMip
argument_list|<
name|R8G8B8A8S
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R8G8B8A8S
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_10_0
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8_UINT
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R8
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R8
argument_list|,
name|GLuint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_UINT
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R16
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R16
argument_list|,
name|GLuint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_UINT
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R32
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R32
argument_list|,
name|GLuint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8_UINT
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R8G8
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R8G8
argument_list|,
name|GLuint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16_UINT
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R16G16
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R16G16
argument_list|,
name|GLuint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32_UINT
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R32G32
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R32G32
argument_list|,
name|GLuint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32_UINT
argument_list|,
literal|96
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R32G32B32
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R32G32B32
argument_list|,
name|GLuint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R8G8B8A8
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R8G8B8A8
argument_list|,
name|GLuint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R16G16B16A16
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R16G16B16A16
argument_list|,
name|GLuint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_UINT
argument_list|,
literal|128
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R32G32B32A32
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R32G32B32A32
argument_list|,
name|GLuint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8_SINT
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R8S
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R8S
argument_list|,
name|GLint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_SINT
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R16S
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R16S
argument_list|,
name|GLint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_SINT
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R32S
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R32S
argument_list|,
name|GLint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8_SINT
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R8G8S
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R8G8S
argument_list|,
name|GLint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16_SINT
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R16G16S
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R16G16S
argument_list|,
name|GLint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32_SINT
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R32G32S
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R32G32S
argument_list|,
name|GLint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32_SINT
argument_list|,
literal|96
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R32G32B32S
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R32G32B32S
argument_list|,
name|GLint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R8G8B8A8S
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R8G8B8A8S
argument_list|,
name|GLint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R16G16B16A16S
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R16G16B16A16S
argument_list|,
name|GLint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
literal|128
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R32G32B32A32S
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R32G32B32A32S
argument_list|,
name|GLint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R10G10B10A2_UNORM
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|GenerateMip
argument_list|<
name|R10G10B10A2
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R10G10B10A2
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_10_0
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R10G10B10A2_UINT
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GenerateMip
argument_list|<
name|R10G10B10A2
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R10G10B10A2
argument_list|,
name|GLuint
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_FLOAT
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_FLOAT
argument_list|,
name|GenerateMip
argument_list|<
name|R16F
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_10_0
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16_FLOAT
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_FLOAT
argument_list|,
name|GenerateMip
argument_list|<
name|R16G16F
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R16G16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_9_2
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_FLOAT
argument_list|,
name|GenerateMip
argument_list|<
name|R16G16B16A16F
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R16G16B16A16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_9_2
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_FLOAT
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_FLOAT
argument_list|,
name|GenerateMip
argument_list|<
name|R32F
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R32F
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_9_2
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_FLOAT
argument_list|,
name|GenerateMip
argument_list|<
name|R32G32F
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R32G32F
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_10_0
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32_FLOAT
argument_list|,
literal|96
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_FLOAT
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
literal|128
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_FLOAT
argument_list|,
name|GenerateMip
argument_list|<
name|R32G32B32A32F
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R32G32B32A32F
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_9_3
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R9G9B9E5_SHAREDEXP
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_FLOAT
argument_list|,
name|GenerateMip
argument_list|<
name|R9G9B9E5
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R9G9B9E5
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R11G11B10_FLOAT
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_FLOAT
argument_list|,
name|GenerateMip
argument_list|<
name|R11G11B10F
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R11G11B10F
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_10_0
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_TYPELESS
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_NONE
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_UNORM
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_D16_UNORM
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R24G8_TYPELESS
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_NONE
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R24_UNORM_X8_TYPELESS
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_NONE
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_D24_UNORM_S8_UINT
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32G8X24_TYPELESS
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_NONE
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_NONE
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_D32_FLOAT_S8X24_UINT
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R32_TYPELESS
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_NONE
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_D32_FLOAT
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_FLOAT
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_BC1_UNORM
argument_list|,
literal|64
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_BC2_UNORM
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_BC3_UNORM
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
comment|// B5G6R5 in D3D11 is treated the same as R5G6B5 in D3D9, so reuse the R5G6B5 functions used by the D3D9 renderer.
comment|// The same applies to B4G4R4A4 and B5G5R5A1 with A4R4G4B4 and A1R5G5B5 respectively.
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_B5G6R5_UNORM
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|GenerateMip
argument_list|<
name|R5G6B5
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R5G6B5
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|RequiresFeatureLevel
argument_list|<
name|D3D_FEATURE_LEVEL_9_1
argument_list|>
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_B4G4R4A4_UNORM
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|GenerateMip
argument_list|<
name|A4R4G4B4
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|A4R4G4B4
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_B5G5R5A1_UNORM
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|GenerateMip
argument_list|<
name|A1R5G5B5
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|A1R5G5B5
argument_list|,
name|GLfloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
comment|// Useful formats for vertex buffers
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_UNORM
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16_SNORM
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_SIGNED_NORMALIZED
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16_UNORM
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16_SNORM
argument_list|,
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_SIGNED_NORMALIZED
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UNORM
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
name|AddDXGIFormat
argument_list|(
operator|&
name|map
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SNORM
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_SIGNED_NORMALIZED
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NeverSupported
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|function|GetDXGIFormatInfo
specifier|const
name|DXGIFormat
modifier|&
name|GetDXGIFormatInfo
parameter_list|(
name|DXGI_FORMAT
name|format
parameter_list|)
block|{
specifier|static
specifier|const
name|DXGIFormatInfoMap
name|infoMap
init|=
name|BuildDXGIFormatInfoMap
argument_list|()
decl_stmt|;
name|DXGIFormatInfoMap
operator|::
name|const_iterator
name|iter
init|=
name|infoMap
operator|.
name|find
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|infoMap
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|iter
operator|->
name|second
return|;
block|}
else|else
block|{
specifier|static
name|DXGIFormat
name|defaultInfo
decl_stmt|;
return|return
name|defaultInfo
return|;
block|}
block|}
DECL|typedef|D3D11VertexFormatInfoMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|gl
operator|::
name|VertexFormatType
argument_list|,
name|VertexFormat
argument_list|>
name|D3D11VertexFormatInfoMap
typedef|;
DECL|typedef|D3D11VertexFormatPair
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|gl
operator|::
name|VertexFormatType
argument_list|,
name|VertexFormat
argument_list|>
name|D3D11VertexFormatPair
typedef|;
DECL|function|VertexFormat
name|VertexFormat
operator|::
name|VertexFormat
parameter_list|()
member_init_list|:
name|conversionType
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|)
member_init_list|,
name|nativeFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|copyFunction
argument_list|(
name|NULL
argument_list|)
block|{ }
DECL|function|VertexFormat
name|VertexFormat
operator|::
name|VertexFormat
parameter_list|(
name|VertexConversionType
name|conversionTypeIn
parameter_list|,
name|DXGI_FORMAT
name|nativeFormatIn
parameter_list|,
name|VertexCopyFunction
name|copyFunctionIn
parameter_list|)
member_init_list|:
name|conversionType
argument_list|(
name|conversionTypeIn
argument_list|)
member_init_list|,
name|nativeFormat
argument_list|(
name|nativeFormatIn
argument_list|)
member_init_list|,
name|copyFunction
argument_list|(
name|copyFunctionIn
argument_list|)
block|{ }
DECL|function|AddVertexFormatInfo
specifier|static
name|void
name|AddVertexFormatInfo
parameter_list|(
name|D3D11VertexFormatInfoMap
modifier|*
name|map
parameter_list|,
name|GLenum
name|inputType
parameter_list|,
name|GLboolean
name|normalized
parameter_list|,
name|GLuint
name|componentCount
parameter_list|,
name|VertexConversionType
name|conversionType
parameter_list|,
name|DXGI_FORMAT
name|nativeFormat
parameter_list|,
name|VertexCopyFunction
name|copyFunction
parameter_list|)
block|{
name|gl
operator|::
name|VertexFormatType
name|formatType
init|=
name|gl
operator|::
name|GetVertexFormatType
argument_list|(
name|inputType
argument_list|,
name|normalized
argument_list|,
name|componentCount
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|VertexFormat
name|info
decl_stmt|;
name|info
operator|.
name|conversionType
operator|=
name|conversionType
expr_stmt|;
name|info
operator|.
name|nativeFormat
operator|=
name|nativeFormat
expr_stmt|;
name|info
operator|.
name|copyFunction
operator|=
name|copyFunction
expr_stmt|;
name|map
operator|->
name|insert
argument_list|(
name|D3D11VertexFormatPair
argument_list|(
name|formatType
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|BuildD3D11_FL9_3VertexFormatInfoOverrideMap
specifier|static
name|D3D11VertexFormatInfoMap
name|BuildD3D11_FL9_3VertexFormatInfoOverrideMap
parameter_list|()
block|{
comment|// D3D11 Feature Level 9_3 doesn't support as many formats for vertex buffer resource as Feature Level 10_0+.
comment|// http://msdn.microsoft.com/en-us/library/windows/desktop/ff471324(v=vs.85).aspx
name|D3D11VertexFormatInfoMap
name|map
decl_stmt|;
comment|// GL_BYTE -- unnormalized
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
name|VERTEX_CONVERT_BOTH
argument_list|,
name|DXGI_FORMAT_R16G16_SINT
argument_list|,
operator|&
name|Copy8SintTo16SintVertexData
argument_list|<
literal|1
argument_list|,
literal|2
argument_list|>
argument_list|)
expr_stmt|;
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
name|VERTEX_CONVERT_BOTH
argument_list|,
name|DXGI_FORMAT_R16G16_SINT
argument_list|,
operator|&
name|Copy8SintTo16SintVertexData
argument_list|<
literal|2
argument_list|,
literal|2
argument_list|>
argument_list|)
expr_stmt|;
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
name|VERTEX_CONVERT_BOTH
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
operator|&
name|Copy8SintTo16SintVertexData
argument_list|<
literal|3
argument_list|,
literal|4
argument_list|>
argument_list|)
expr_stmt|;
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
name|VERTEX_CONVERT_BOTH
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
operator|&
name|Copy8SintTo16SintVertexData
argument_list|<
literal|4
argument_list|,
literal|4
argument_list|>
argument_list|)
expr_stmt|;
comment|// GL_BYTE -- normalized
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_TRUE
argument_list|,
literal|1
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R16G16_SNORM
argument_list|,
operator|&
name|Copy8SnormTo16SnormVertexData
argument_list|<
literal|1
argument_list|,
literal|2
argument_list|>
argument_list|)
expr_stmt|;
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_TRUE
argument_list|,
literal|2
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R16G16_SNORM
argument_list|,
operator|&
name|Copy8SnormTo16SnormVertexData
argument_list|<
literal|2
argument_list|,
literal|2
argument_list|>
argument_list|)
expr_stmt|;
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_TRUE
argument_list|,
literal|3
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SNORM
argument_list|,
operator|&
name|Copy8SnormTo16SnormVertexData
argument_list|<
literal|3
argument_list|,
literal|4
argument_list|>
argument_list|)
expr_stmt|;
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_TRUE
argument_list|,
literal|4
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SNORM
argument_list|,
operator|&
name|Copy8SnormTo16SnormVertexData
argument_list|<
literal|4
argument_list|,
literal|4
argument_list|>
argument_list|)
expr_stmt|;
comment|// GL_UNSIGNED_BYTE -- unnormalized
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
name|VERTEX_CONVERT_BOTH
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|>
argument_list|)
expr_stmt|;
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
name|VERTEX_CONVERT_BOTH
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|>
argument_list|)
expr_stmt|;
comment|// NOTE: 3 and 4 component unnormalized GL_UNSIGNED_BYTE should use the default format table.
comment|// GL_UNSIGNED_BYTE -- normalized
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_TRUE
argument_list|,
literal|1
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
name|UINT8_MAX
argument_list|>
argument_list|)
expr_stmt|;
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_TRUE
argument_list|,
literal|2
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
name|UINT8_MAX
argument_list|>
argument_list|)
expr_stmt|;
comment|// NOTE: 3 and 4 component normalized GL_UNSIGNED_BYTE should use the default format table.
comment|// GL_SHORT -- unnormalized
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
name|VERTEX_CONVERT_BOTH
argument_list|,
name|DXGI_FORMAT_R16G16_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLshort
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
expr_stmt|;
comment|// NOTE: 2, 3 and 4 component unnormalized GL_SHORT should use the default format table.
comment|// GL_SHORT -- normalized
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_TRUE
argument_list|,
literal|1
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R16G16_SNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLshort
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
expr_stmt|;
comment|// NOTE: 2, 3 and 4 component normalized GL_SHORT should use the default format table.
comment|// GL_UNSIGNED_SHORT -- unnormalized
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLushort
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|>
argument_list|)
expr_stmt|;
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|2
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLushort
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|>
argument_list|)
expr_stmt|;
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|3
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32B32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLushort
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|>
argument_list|)
expr_stmt|;
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_FALSE
argument_list|,
literal|4
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLushort
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|>
argument_list|)
expr_stmt|;
comment|// GL_UNSIGNED_SHORT -- normalized
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_TRUE
argument_list|,
literal|1
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLushort
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|>
argument_list|)
expr_stmt|;
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_TRUE
argument_list|,
literal|2
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLushort
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|>
argument_list|)
expr_stmt|;
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_TRUE
argument_list|,
literal|3
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32B32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLushort
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|>
argument_list|)
expr_stmt|;
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_TRUE
argument_list|,
literal|4
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLushort
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|>
argument_list|)
expr_stmt|;
comment|// GL_FIXED
comment|// TODO: Add test to verify that this works correctly.
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_FIXED
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
operator|&
name|Copy32FixedTo32FVertexData
argument_list|<
literal|1
argument_list|,
literal|2
argument_list|>
argument_list|)
expr_stmt|;
comment|// NOTE: 2, 3 and 4 component GL_FIXED should use the default format table.
comment|// GL_FLOAT
comment|// TODO: Add test to verify that this works correctly.
name|AddVertexFormatInfo
argument_list|(
operator|&
name|map
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|1
argument_list|,
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLfloat
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
expr_stmt|;
comment|// NOTE: 2, 3 and 4 component GL_FLOAT should use the default format table.
return|return
name|map
return|;
block|}
DECL|function|GetVertexFormatInfo
specifier|const
name|VertexFormat
modifier|&
name|GetVertexFormatInfo
parameter_list|(
name|gl
operator|::
name|VertexFormatType
name|vertexFormatType
parameter_list|,
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
block|{
if|if
condition|(
name|featureLevel
operator|==
name|D3D_FEATURE_LEVEL_9_3
condition|)
block|{
specifier|static
specifier|const
name|D3D11VertexFormatInfoMap
name|vertexFormatMapFL9_3Override
init|=
name|BuildD3D11_FL9_3VertexFormatInfoOverrideMap
argument_list|()
decl_stmt|;
comment|// First see if the format has a special mapping for FL9_3
name|auto
name|iter
init|=
name|vertexFormatMapFL9_3Override
operator|.
name|find
argument_list|(
name|vertexFormatType
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|vertexFormatMapFL9_3Override
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|iter
operator|->
name|second
return|;
block|}
block|}
switch|switch
condition|(
name|vertexFormatType
condition|)
block|{
comment|//
comment|// Float formats
comment|//
comment|// GL_BYTE -- un-normalized
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SBYTE1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R8_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SBYTE2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R8G8_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SBYTE3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_BOTH
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SBYTE4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_BYTE -- normalized
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SBYTE1_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R8_SNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SBYTE2_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R8G8_SNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SBYTE3_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
name|INT8_MAX
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SBYTE4_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_UNSIGNED_BYTE -- un-normalized
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UBYTE1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R8_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UBYTE2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R8G8_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UBYTE3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_BOTH
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UBYTE4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_UNSIGNED_BYTE -- normalized
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UBYTE1_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R8_UNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UBYTE2_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R8G8_UNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UBYTE3_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
name|UINT8_MAX
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UBYTE4_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_SHORT -- un-normalized
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SSHORT1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R16_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLshort
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SSHORT2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R16G16_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLshort
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SSHORT3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_BOTH
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLshort
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SSHORT4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLshort
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_SHORT -- normalized
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SSHORT1_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16_SNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLshort
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SSHORT2_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16G16_SNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLshort
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SSHORT3_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLshort
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
name|INT16_MAX
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SSHORT4_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLshort
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_UNSIGNED_SHORT -- un-normalized
case|case
name|gl
operator|::
name|VERTEX_FORMAT_USHORT1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R16_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLushort
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_USHORT2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R16G16_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLushort
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_USHORT3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_BOTH
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLushort
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_USHORT4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLushort
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_UNSIGNED_SHORT -- normalized
case|case
name|gl
operator|::
name|VERTEX_FORMAT_USHORT1_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16_UNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLushort
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_USHORT2_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16G16_UNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLushort
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_USHORT3_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLushort
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
name|UINT16_MAX
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_USHORT4_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLushort
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_INT -- un-normalized
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R32_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLint
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R32G32_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLint
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R32G32B32_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLint
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLint
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_INT -- normalized
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT1_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLint
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT2_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLint
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT3_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32B32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLint
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT4_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLint
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_UNSIGNED_INT -- un-normalized
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R32_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLuint
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R32G32_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLuint
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R32G32B32_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLuint
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_GPU
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLuint
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_UNSIGNED_INT -- normalized
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT1_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLuint
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT2_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLuint
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT3_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32B32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLuint
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT4_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
operator|&
name|CopyTo32FVertexData
argument_list|<
name|GLuint
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_FIXED
case|case
name|gl
operator|::
name|VERTEX_FORMAT_FIXED1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32_FLOAT
argument_list|,
operator|&
name|Copy32FixedTo32FVertexData
argument_list|<
literal|1
argument_list|,
literal|1
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_FIXED2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
operator|&
name|Copy32FixedTo32FVertexData
argument_list|<
literal|2
argument_list|,
literal|2
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_FIXED3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32B32_FLOAT
argument_list|,
operator|&
name|Copy32FixedTo32FVertexData
argument_list|<
literal|3
argument_list|,
literal|3
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_FIXED4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
operator|&
name|Copy32FixedTo32FVertexData
argument_list|<
literal|4
argument_list|,
literal|4
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_HALF_FLOAT
case|case
name|gl
operator|::
name|VERTEX_FORMAT_HALF1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16_FLOAT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLhalf
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_HALF2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16G16_FLOAT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLhalf
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_HALF3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLhalf
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
name|gl
operator|::
name|Float16One
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_HALF4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLhalf
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_FLOAT
case|case
name|gl
operator|::
name|VERTEX_FORMAT_FLOAT1
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32_FLOAT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLfloat
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_FLOAT2
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLfloat
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_FLOAT3
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32G32B32_FLOAT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLfloat
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_FLOAT4
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLfloat
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_INT_2_10_10_10_REV
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT210
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
operator|&
name|CopyXYZ10W2ToXYZW32FVertexData
argument_list|<
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT210_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
operator|&
name|CopyXYZ10W2ToXYZW32FVertexData
argument_list|<
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_UNSIGNED_INT_2_10_10_10_REV
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT210
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
operator|&
name|CopyXYZ10W2ToXYZW32FVertexData
argument_list|<
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT210_NORM
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R10G10B10A2_UNORM
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLuint
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|//
comment|// Integer Formats
comment|//
comment|// GL_BYTE
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SBYTE1_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R8_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SBYTE2_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R8G8_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SBYTE3_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SBYTE4_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_UNSIGNED_BYTE
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UBYTE1_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R8_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UBYTE2_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R8G8_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UBYTE3_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UBYTE4_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_SHORT
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SSHORT1_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLshort
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SSHORT2_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16G16_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLshort
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SSHORT3_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLshort
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SSHORT4_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLshort
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_UNSIGNED_SHORT
case|case
name|gl
operator|::
name|VERTEX_FORMAT_USHORT1_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLushort
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_USHORT2_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16G16_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLushort
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_USHORT3_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLushort
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_USHORT4_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLushort
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_INT
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT1_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLint
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT2_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32G32_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLint
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT3_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32G32B32_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLint
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT4_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLint
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_UNSIGNED_INT
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT1_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLuint
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT2_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32G32_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLuint
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT3_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32G32B32_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLuint
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT4_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLuint
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_INT_2_10_10_10_REV
case|case
name|gl
operator|::
name|VERTEX_FORMAT_SINT210_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_CPU
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
operator|&
name|CopyXYZ10W2ToXYZW32FVertexData
argument_list|<
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|// GL_UNSIGNED_INT_2_10_10_10_REV
case|case
name|gl
operator|::
name|VERTEX_FORMAT_UINT210_INT
case|:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
argument_list|(
name|VERTEX_CONVERT_NONE
argument_list|,
name|DXGI_FORMAT_R10G10B10A2_UINT
argument_list|,
operator|&
name|CopyNativeVertexData
argument_list|<
name|GLuint
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|>
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
default|default:
block|{
specifier|static
specifier|const
name|VertexFormat
name|info
decl_stmt|;
return|return
name|info
return|;
block|}
block|}
block|}
block|}
block|}
end_namespace
end_unit
