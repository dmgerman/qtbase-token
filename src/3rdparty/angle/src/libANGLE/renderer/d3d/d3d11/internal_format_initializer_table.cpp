begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// internal_format_initializer_table:
end_comment
begin_comment
comment|//   Contains table to go from internal format and dxgi format to initializer function
end_comment
begin_comment
comment|//   for TextureFormat
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/internal_format_initializer_table.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/loadimage.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|namespace|d3d11
namespace|namespace
name|d3d11
block|{
comment|// TODO: This should be generated by a JSON file
DECL|function|GetInternalFormatInitializer
name|InitializeTextureDataFunction
name|GetInternalFormatInitializer
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
name|DXGI_FORMAT
name|dxgiFormat
parameter_list|)
block|{
switch|switch
condition|(
name|internalFormat
condition|)
block|{
case|case
name|GL_RGB8
case|:
block|{
switch|switch
condition|(
name|dxgiFormat
condition|)
block|{
case|case
name|DXGI_FORMAT_R8G8B8A8_UNORM
case|:
block|{
return|return
name|Initialize4ComponentData
argument_list|<
name|GLubyte
argument_list|,
literal|0x00
argument_list|,
literal|0x00
argument_list|,
literal|0x00
argument_list|,
literal|0xFF
argument_list|>
return|;
block|}
default|default:
break|break;
block|}
block|}
case|case
name|GL_RGB565
case|:
block|{
switch|switch
condition|(
name|dxgiFormat
condition|)
block|{
case|case
name|DXGI_FORMAT_R8G8B8A8_UNORM
case|:
block|{
return|return
name|Initialize4ComponentData
argument_list|<
name|GLubyte
argument_list|,
literal|0x00
argument_list|,
literal|0x00
argument_list|,
literal|0x00
argument_list|,
literal|0xFF
argument_list|>
return|;
block|}
default|default:
break|break;
block|}
block|}
case|case
name|GL_SRGB8
case|:
block|{
switch|switch
condition|(
name|dxgiFormat
condition|)
block|{
case|case
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
case|:
block|{
return|return
name|Initialize4ComponentData
argument_list|<
name|GLubyte
argument_list|,
literal|0x00
argument_list|,
literal|0x00
argument_list|,
literal|0x00
argument_list|,
literal|0xFF
argument_list|>
return|;
block|}
default|default:
break|break;
block|}
block|}
case|case
name|GL_RGB16F
case|:
block|{
switch|switch
condition|(
name|dxgiFormat
condition|)
block|{
case|case
name|DXGI_FORMAT_R16G16B16A16_FLOAT
case|:
block|{
return|return
name|Initialize4ComponentData
argument_list|<
name|GLhalf
argument_list|,
literal|0x0000
argument_list|,
literal|0x0000
argument_list|,
literal|0x0000
argument_list|,
name|gl
operator|::
name|Float16One
argument_list|>
return|;
block|}
default|default:
break|break;
block|}
block|}
case|case
name|GL_RGB32F
case|:
block|{
switch|switch
condition|(
name|dxgiFormat
condition|)
block|{
case|case
name|DXGI_FORMAT_R32G32B32A32_FLOAT
case|:
block|{
return|return
name|Initialize4ComponentData
argument_list|<
name|GLfloat
argument_list|,
literal|0x00000000
argument_list|,
literal|0x00000000
argument_list|,
literal|0x00000000
argument_list|,
name|gl
operator|::
name|Float32One
argument_list|>
return|;
block|}
default|default:
break|break;
block|}
block|}
case|case
name|GL_RGB8UI
case|:
block|{
switch|switch
condition|(
name|dxgiFormat
condition|)
block|{
case|case
name|DXGI_FORMAT_R8G8B8A8_UINT
case|:
block|{
return|return
name|Initialize4ComponentData
argument_list|<
name|GLubyte
argument_list|,
literal|0x00
argument_list|,
literal|0x00
argument_list|,
literal|0x00
argument_list|,
literal|0x01
argument_list|>
return|;
block|}
default|default:
break|break;
block|}
block|}
case|case
name|GL_RGB8I
case|:
block|{
switch|switch
condition|(
name|dxgiFormat
condition|)
block|{
case|case
name|DXGI_FORMAT_R8G8B8A8_SINT
case|:
block|{
return|return
name|Initialize4ComponentData
argument_list|<
name|GLbyte
argument_list|,
literal|0x00
argument_list|,
literal|0x00
argument_list|,
literal|0x00
argument_list|,
literal|0x01
argument_list|>
return|;
block|}
default|default:
break|break;
block|}
block|}
case|case
name|GL_RGB16UI
case|:
block|{
switch|switch
condition|(
name|dxgiFormat
condition|)
block|{
case|case
name|DXGI_FORMAT_R16G16B16A16_UINT
case|:
block|{
return|return
name|Initialize4ComponentData
argument_list|<
name|GLushort
argument_list|,
literal|0x0000
argument_list|,
literal|0x0000
argument_list|,
literal|0x0000
argument_list|,
literal|0x0001
argument_list|>
return|;
block|}
default|default:
break|break;
block|}
block|}
case|case
name|GL_RGB16I
case|:
block|{
switch|switch
condition|(
name|dxgiFormat
condition|)
block|{
case|case
name|DXGI_FORMAT_R16G16B16A16_SINT
case|:
block|{
return|return
name|Initialize4ComponentData
argument_list|<
name|GLshort
argument_list|,
literal|0x0000
argument_list|,
literal|0x0000
argument_list|,
literal|0x0000
argument_list|,
literal|0x0001
argument_list|>
return|;
block|}
default|default:
break|break;
block|}
block|}
case|case
name|GL_RGB32UI
case|:
block|{
switch|switch
condition|(
name|dxgiFormat
condition|)
block|{
case|case
name|DXGI_FORMAT_R32G32B32A32_UINT
case|:
block|{
return|return
name|Initialize4ComponentData
argument_list|<
name|GLuint
argument_list|,
literal|0x00000000
argument_list|,
literal|0x00000000
argument_list|,
literal|0x00000000
argument_list|,
literal|0x00000001
argument_list|>
return|;
block|}
default|default:
break|break;
block|}
block|}
case|case
name|GL_RGB32I
case|:
block|{
switch|switch
condition|(
name|dxgiFormat
condition|)
block|{
case|case
name|DXGI_FORMAT_R32G32B32A32_SINT
case|:
block|{
return|return
name|Initialize4ComponentData
argument_list|<
name|GLint
argument_list|,
literal|0x00000000
argument_list|,
literal|0x00000000
argument_list|,
literal|0x00000000
argument_list|,
literal|0x00000001
argument_list|>
return|;
block|}
default|default:
break|break;
block|}
block|}
default|default:
block|{
return|return
literal|nullptr
return|;
block|}
block|}
block|}
block|}
comment|// namespace d3d11
block|}
end_namespace
begin_comment
comment|// namespace rx
end_comment
end_unit
