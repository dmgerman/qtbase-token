begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// RenderTarget11.cpp: Implements a DX11-specific wrapper for ID3D11View pointers
end_comment
begin_comment
comment|// retained by Renderbuffers.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/RenderTarget11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/SwapChain11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/formatutils11.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|getTextureProperties
specifier|static
name|bool
name|getTextureProperties
parameter_list|(
name|ID3D11Resource
modifier|*
name|resource
parameter_list|,
name|unsigned
name|int
modifier|*
name|mipLevels
parameter_list|,
name|unsigned
name|int
modifier|*
name|samples
parameter_list|)
block|{
name|ID3D11Texture1D
modifier|*
name|texture1D
init|=
name|d3d11
operator|::
name|DynamicCastComObject
argument_list|<
name|ID3D11Texture1D
argument_list|>
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|texture1D
condition|)
block|{
name|D3D11_TEXTURE1D_DESC
name|texDesc
decl_stmt|;
name|texture1D
operator|->
name|GetDesc
argument_list|(
operator|&
name|texDesc
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|texture1D
argument_list|)
expr_stmt|;
operator|*
name|mipLevels
operator|=
name|texDesc
operator|.
name|MipLevels
expr_stmt|;
operator|*
name|samples
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
name|ID3D11Texture2D
modifier|*
name|texture2D
init|=
name|d3d11
operator|::
name|DynamicCastComObject
argument_list|<
name|ID3D11Texture2D
argument_list|>
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|texture2D
condition|)
block|{
name|D3D11_TEXTURE2D_DESC
name|texDesc
decl_stmt|;
name|texture2D
operator|->
name|GetDesc
argument_list|(
operator|&
name|texDesc
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|texture2D
argument_list|)
expr_stmt|;
operator|*
name|mipLevels
operator|=
name|texDesc
operator|.
name|MipLevels
expr_stmt|;
operator|*
name|samples
operator|=
name|texDesc
operator|.
name|SampleDesc
operator|.
name|Count
operator|>
literal|1
condition|?
name|texDesc
operator|.
name|SampleDesc
operator|.
name|Count
else|:
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
name|ID3D11Texture3D
modifier|*
name|texture3D
init|=
name|d3d11
operator|::
name|DynamicCastComObject
argument_list|<
name|ID3D11Texture3D
argument_list|>
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|texture3D
condition|)
block|{
name|D3D11_TEXTURE3D_DESC
name|texDesc
decl_stmt|;
name|texture3D
operator|->
name|GetDesc
argument_list|(
operator|&
name|texDesc
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|texture3D
argument_list|)
expr_stmt|;
operator|*
name|mipLevels
operator|=
name|texDesc
operator|.
name|MipLevels
expr_stmt|;
operator|*
name|samples
operator|=
literal|0
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|getRTVSubresourceIndex
specifier|static
name|unsigned
name|int
name|getRTVSubresourceIndex
parameter_list|(
name|ID3D11Resource
modifier|*
name|resource
parameter_list|,
name|ID3D11RenderTargetView
modifier|*
name|view
parameter_list|)
block|{
name|D3D11_RENDER_TARGET_VIEW_DESC
name|rtvDesc
decl_stmt|;
name|view
operator|->
name|GetDesc
argument_list|(
operator|&
name|rtvDesc
argument_list|)
expr_stmt|;
name|unsigned
name|int
name|mipSlice
init|=
literal|0
decl_stmt|;
name|unsigned
name|int
name|arraySlice
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|rtvDesc
operator|.
name|ViewDimension
condition|)
block|{
case|case
name|D3D11_RTV_DIMENSION_TEXTURE1D
case|:
name|mipSlice
operator|=
name|rtvDesc
operator|.
name|Texture1D
operator|.
name|MipSlice
expr_stmt|;
name|arraySlice
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|D3D11_RTV_DIMENSION_TEXTURE1DARRAY
case|:
name|mipSlice
operator|=
name|rtvDesc
operator|.
name|Texture1DArray
operator|.
name|MipSlice
expr_stmt|;
name|arraySlice
operator|=
name|rtvDesc
operator|.
name|Texture1DArray
operator|.
name|FirstArraySlice
expr_stmt|;
break|break;
case|case
name|D3D11_RTV_DIMENSION_TEXTURE2D
case|:
name|mipSlice
operator|=
name|rtvDesc
operator|.
name|Texture2D
operator|.
name|MipSlice
expr_stmt|;
name|arraySlice
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|D3D11_RTV_DIMENSION_TEXTURE2DARRAY
case|:
name|mipSlice
operator|=
name|rtvDesc
operator|.
name|Texture2DArray
operator|.
name|MipSlice
expr_stmt|;
name|arraySlice
operator|=
name|rtvDesc
operator|.
name|Texture2DArray
operator|.
name|FirstArraySlice
expr_stmt|;
break|break;
case|case
name|D3D11_RTV_DIMENSION_TEXTURE2DMS
case|:
name|mipSlice
operator|=
literal|0
expr_stmt|;
name|arraySlice
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY
case|:
name|mipSlice
operator|=
literal|0
expr_stmt|;
name|arraySlice
operator|=
name|rtvDesc
operator|.
name|Texture2DMSArray
operator|.
name|FirstArraySlice
expr_stmt|;
break|break;
case|case
name|D3D11_RTV_DIMENSION_TEXTURE3D
case|:
name|mipSlice
operator|=
name|rtvDesc
operator|.
name|Texture3D
operator|.
name|MipSlice
expr_stmt|;
name|arraySlice
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|D3D11_RTV_DIMENSION_UNKNOWN
case|:
case|case
name|D3D11_RTV_DIMENSION_BUFFER
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
name|unsigned
name|int
name|mipLevels
decl_stmt|,
name|samples
decl_stmt|;
name|getTextureProperties
argument_list|(
name|resource
argument_list|,
operator|&
name|mipLevels
argument_list|,
operator|&
name|samples
argument_list|)
expr_stmt|;
return|return
name|D3D11CalcSubresource
argument_list|(
name|mipSlice
argument_list|,
name|arraySlice
argument_list|,
name|mipLevels
argument_list|)
return|;
block|}
DECL|function|getDSVSubresourceIndex
specifier|static
name|unsigned
name|int
name|getDSVSubresourceIndex
parameter_list|(
name|ID3D11Resource
modifier|*
name|resource
parameter_list|,
name|ID3D11DepthStencilView
modifier|*
name|view
parameter_list|)
block|{
name|D3D11_DEPTH_STENCIL_VIEW_DESC
name|dsvDesc
decl_stmt|;
name|view
operator|->
name|GetDesc
argument_list|(
operator|&
name|dsvDesc
argument_list|)
expr_stmt|;
name|unsigned
name|int
name|mipSlice
init|=
literal|0
decl_stmt|;
name|unsigned
name|int
name|arraySlice
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|dsvDesc
operator|.
name|ViewDimension
condition|)
block|{
case|case
name|D3D11_DSV_DIMENSION_TEXTURE1D
case|:
name|mipSlice
operator|=
name|dsvDesc
operator|.
name|Texture1D
operator|.
name|MipSlice
expr_stmt|;
name|arraySlice
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|D3D11_DSV_DIMENSION_TEXTURE1DARRAY
case|:
name|mipSlice
operator|=
name|dsvDesc
operator|.
name|Texture1DArray
operator|.
name|MipSlice
expr_stmt|;
name|arraySlice
operator|=
name|dsvDesc
operator|.
name|Texture1DArray
operator|.
name|FirstArraySlice
expr_stmt|;
break|break;
case|case
name|D3D11_DSV_DIMENSION_TEXTURE2D
case|:
name|mipSlice
operator|=
name|dsvDesc
operator|.
name|Texture2D
operator|.
name|MipSlice
expr_stmt|;
name|arraySlice
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|D3D11_DSV_DIMENSION_TEXTURE2DARRAY
case|:
name|mipSlice
operator|=
name|dsvDesc
operator|.
name|Texture2DArray
operator|.
name|MipSlice
expr_stmt|;
name|arraySlice
operator|=
name|dsvDesc
operator|.
name|Texture2DArray
operator|.
name|FirstArraySlice
expr_stmt|;
break|break;
case|case
name|D3D11_DSV_DIMENSION_TEXTURE2DMS
case|:
name|mipSlice
operator|=
literal|0
expr_stmt|;
name|arraySlice
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY
case|:
name|mipSlice
operator|=
literal|0
expr_stmt|;
name|arraySlice
operator|=
name|dsvDesc
operator|.
name|Texture2DMSArray
operator|.
name|FirstArraySlice
expr_stmt|;
break|break;
case|case
name|D3D11_DSV_DIMENSION_UNKNOWN
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
name|unsigned
name|int
name|mipLevels
decl_stmt|,
name|samples
decl_stmt|;
name|getTextureProperties
argument_list|(
name|resource
argument_list|,
operator|&
name|mipLevels
argument_list|,
operator|&
name|samples
argument_list|)
expr_stmt|;
return|return
name|D3D11CalcSubresource
argument_list|(
name|mipSlice
argument_list|,
name|arraySlice
argument_list|,
name|mipLevels
argument_list|)
return|;
block|}
DECL|function|makeRenderTarget11
name|RenderTarget11
modifier|*
name|RenderTarget11
operator|::
name|makeRenderTarget11
parameter_list|(
name|RenderTargetD3D
modifier|*
name|target
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|RenderTarget11
operator|*
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|RenderTarget11
operator|*
argument_list|>
argument_list|(
name|target
argument_list|)
return|;
block|}
DECL|function|TextureRenderTarget11
name|TextureRenderTarget11
operator|::
name|TextureRenderTarget11
parameter_list|(
name|ID3D11RenderTargetView
modifier|*
name|rtv
parameter_list|,
name|ID3D11Resource
modifier|*
name|resource
parameter_list|,
name|ID3D11ShaderResourceView
modifier|*
name|srv
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
member_init_list|:
name|mWidth
argument_list|(
name|width
argument_list|)
member_init_list|,
name|mHeight
argument_list|(
name|height
argument_list|)
member_init_list|,
name|mDepth
argument_list|(
name|depth
argument_list|)
member_init_list|,
name|mInternalFormat
argument_list|(
name|internalFormat
argument_list|)
member_init_list|,
name|mDXGIFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|mSamples
argument_list|(
name|samples
argument_list|)
member_init_list|,
name|mSubresourceIndex
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mTexture
argument_list|(
name|resource
argument_list|)
member_init_list|,
name|mRenderTarget
argument_list|(
name|rtv
argument_list|)
member_init_list|,
name|mDepthStencil
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mShaderResource
argument_list|(
name|srv
argument_list|)
block|{
if|if
condition|(
name|mTexture
condition|)
block|{
name|mTexture
operator|->
name|AddRef
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mRenderTarget
condition|)
block|{
name|mRenderTarget
operator|->
name|AddRef
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mShaderResource
condition|)
block|{
name|mShaderResource
operator|->
name|AddRef
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mRenderTarget
operator|&&
name|mTexture
condition|)
block|{
name|mSubresourceIndex
operator|=
name|getRTVSubresourceIndex
argument_list|(
name|mTexture
argument_list|,
name|mRenderTarget
argument_list|)
expr_stmt|;
name|D3D11_RENDER_TARGET_VIEW_DESC
name|desc
decl_stmt|;
name|mRenderTarget
operator|->
name|GetDesc
argument_list|(
operator|&
name|desc
argument_list|)
expr_stmt|;
name|mDXGIFormat
operator|=
name|desc
operator|.
name|Format
expr_stmt|;
block|}
block|}
DECL|function|TextureRenderTarget11
name|TextureRenderTarget11
operator|::
name|TextureRenderTarget11
parameter_list|(
name|ID3D11DepthStencilView
modifier|*
name|dsv
parameter_list|,
name|ID3D11Resource
modifier|*
name|resource
parameter_list|,
name|ID3D11ShaderResourceView
modifier|*
name|srv
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
member_init_list|:
name|mWidth
argument_list|(
name|width
argument_list|)
member_init_list|,
name|mHeight
argument_list|(
name|height
argument_list|)
member_init_list|,
name|mDepth
argument_list|(
name|depth
argument_list|)
member_init_list|,
name|mInternalFormat
argument_list|(
name|internalFormat
argument_list|)
member_init_list|,
name|mDXGIFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|mSamples
argument_list|(
name|samples
argument_list|)
member_init_list|,
name|mSubresourceIndex
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mTexture
argument_list|(
name|resource
argument_list|)
member_init_list|,
name|mRenderTarget
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mDepthStencil
argument_list|(
name|dsv
argument_list|)
member_init_list|,
name|mShaderResource
argument_list|(
name|srv
argument_list|)
block|{
if|if
condition|(
name|mTexture
condition|)
block|{
name|mTexture
operator|->
name|AddRef
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mDepthStencil
condition|)
block|{
name|mDepthStencil
operator|->
name|AddRef
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mShaderResource
condition|)
block|{
name|mShaderResource
operator|->
name|AddRef
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mDepthStencil
operator|&&
name|mTexture
condition|)
block|{
name|mSubresourceIndex
operator|=
name|getDSVSubresourceIndex
argument_list|(
name|mTexture
argument_list|,
name|mDepthStencil
argument_list|)
expr_stmt|;
name|D3D11_DEPTH_STENCIL_VIEW_DESC
name|desc
decl_stmt|;
name|mDepthStencil
operator|->
name|GetDesc
argument_list|(
operator|&
name|desc
argument_list|)
expr_stmt|;
name|mDXGIFormat
operator|=
name|desc
operator|.
name|Format
expr_stmt|;
block|}
block|}
DECL|function|~TextureRenderTarget11
name|TextureRenderTarget11
operator|::
name|~
name|TextureRenderTarget11
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mTexture
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mRenderTarget
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mDepthStencil
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mShaderResource
argument_list|)
expr_stmt|;
block|}
DECL|function|getTexture
name|ID3D11Resource
modifier|*
name|TextureRenderTarget11
operator|::
name|getTexture
parameter_list|()
specifier|const
block|{
return|return
name|mTexture
return|;
block|}
DECL|function|getRenderTargetView
name|ID3D11RenderTargetView
modifier|*
name|TextureRenderTarget11
operator|::
name|getRenderTargetView
parameter_list|()
specifier|const
block|{
return|return
name|mRenderTarget
return|;
block|}
DECL|function|getDepthStencilView
name|ID3D11DepthStencilView
modifier|*
name|TextureRenderTarget11
operator|::
name|getDepthStencilView
parameter_list|()
specifier|const
block|{
return|return
name|mDepthStencil
return|;
block|}
DECL|function|getShaderResourceView
name|ID3D11ShaderResourceView
modifier|*
name|TextureRenderTarget11
operator|::
name|getShaderResourceView
parameter_list|()
specifier|const
block|{
return|return
name|mShaderResource
return|;
block|}
DECL|function|getWidth
name|GLsizei
name|TextureRenderTarget11
operator|::
name|getWidth
parameter_list|()
specifier|const
block|{
return|return
name|mWidth
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|TextureRenderTarget11
operator|::
name|getHeight
parameter_list|()
specifier|const
block|{
return|return
name|mHeight
return|;
block|}
DECL|function|getDepth
name|GLsizei
name|TextureRenderTarget11
operator|::
name|getDepth
parameter_list|()
specifier|const
block|{
return|return
name|mDepth
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|TextureRenderTarget11
operator|::
name|getInternalFormat
parameter_list|()
specifier|const
block|{
return|return
name|mInternalFormat
return|;
block|}
DECL|function|getSamples
name|GLsizei
name|TextureRenderTarget11
operator|::
name|getSamples
parameter_list|()
specifier|const
block|{
return|return
name|mSamples
return|;
block|}
DECL|function|getSubresourceIndex
name|unsigned
name|int
name|TextureRenderTarget11
operator|::
name|getSubresourceIndex
parameter_list|()
specifier|const
block|{
return|return
name|mSubresourceIndex
return|;
block|}
DECL|function|getDXGIFormat
name|DXGI_FORMAT
name|TextureRenderTarget11
operator|::
name|getDXGIFormat
parameter_list|()
specifier|const
block|{
return|return
name|mDXGIFormat
return|;
block|}
DECL|function|SurfaceRenderTarget11
name|SurfaceRenderTarget11
operator|::
name|SurfaceRenderTarget11
parameter_list|(
name|SwapChain11
modifier|*
name|swapChain
parameter_list|,
name|Renderer11
modifier|*
name|renderer
parameter_list|,
name|bool
name|depth
parameter_list|)
member_init_list|:
name|mSwapChain
argument_list|(
name|swapChain
argument_list|)
member_init_list|,
name|mRenderer
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mDepth
argument_list|(
name|depth
argument_list|)
block|{
name|ASSERT
argument_list|(
name|mSwapChain
argument_list|)
expr_stmt|;
block|}
DECL|function|~SurfaceRenderTarget11
name|SurfaceRenderTarget11
operator|::
name|~
name|SurfaceRenderTarget11
parameter_list|()
block|{ }
DECL|function|getWidth
name|GLsizei
name|SurfaceRenderTarget11
operator|::
name|getWidth
parameter_list|()
specifier|const
block|{
return|return
name|mSwapChain
operator|->
name|getWidth
argument_list|()
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|SurfaceRenderTarget11
operator|::
name|getHeight
parameter_list|()
specifier|const
block|{
return|return
name|mSwapChain
operator|->
name|getHeight
argument_list|()
return|;
block|}
DECL|function|getDepth
name|GLsizei
name|SurfaceRenderTarget11
operator|::
name|getDepth
parameter_list|()
specifier|const
block|{
return|return
literal|1
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|SurfaceRenderTarget11
operator|::
name|getInternalFormat
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mDepth
condition|?
name|mSwapChain
operator|->
name|GetDepthBufferInternalFormat
argument_list|()
else|:
name|mSwapChain
operator|->
name|GetBackBufferInternalFormat
argument_list|()
operator|)
return|;
block|}
DECL|function|getSamples
name|GLsizei
name|SurfaceRenderTarget11
operator|::
name|getSamples
parameter_list|()
specifier|const
block|{
comment|// Our EGL surfaces do not support multisampling.
return|return
literal|0
return|;
block|}
DECL|function|getTexture
name|ID3D11Resource
modifier|*
name|SurfaceRenderTarget11
operator|::
name|getTexture
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mDepth
condition|?
name|mSwapChain
operator|->
name|getDepthStencilTexture
argument_list|()
else|:
name|mSwapChain
operator|->
name|getOffscreenTexture
argument_list|()
operator|)
return|;
block|}
DECL|function|getRenderTargetView
name|ID3D11RenderTargetView
modifier|*
name|SurfaceRenderTarget11
operator|::
name|getRenderTargetView
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mDepth
condition|?
name|NULL
else|:
name|mSwapChain
operator|->
name|getRenderTarget
argument_list|()
operator|)
return|;
block|}
DECL|function|getDepthStencilView
name|ID3D11DepthStencilView
modifier|*
name|SurfaceRenderTarget11
operator|::
name|getDepthStencilView
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mDepth
condition|?
name|mSwapChain
operator|->
name|getDepthStencil
argument_list|()
else|:
name|NULL
operator|)
return|;
block|}
DECL|function|getShaderResourceView
name|ID3D11ShaderResourceView
modifier|*
name|SurfaceRenderTarget11
operator|::
name|getShaderResourceView
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mDepth
condition|?
name|mSwapChain
operator|->
name|getDepthStencilShaderResource
argument_list|()
else|:
name|mSwapChain
operator|->
name|getRenderTargetShaderResource
argument_list|()
operator|)
return|;
block|}
DECL|function|getSubresourceIndex
name|unsigned
name|int
name|SurfaceRenderTarget11
operator|::
name|getSubresourceIndex
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|getDXGIFormat
name|DXGI_FORMAT
name|SurfaceRenderTarget11
operator|::
name|getDXGIFormat
parameter_list|()
specifier|const
block|{
return|return
name|d3d11
operator|::
name|GetTextureFormatInfo
argument_list|(
name|getInternalFormat
argument_list|()
argument_list|,
name|mRenderer
operator|->
name|getFeatureLevel
argument_list|()
argument_list|)
operator|.
name|texFormat
return|;
block|}
block|}
end_namespace
end_unit
