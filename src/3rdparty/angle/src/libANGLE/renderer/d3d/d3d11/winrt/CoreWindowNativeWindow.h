begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// CoreWindowNativeWindow.h: NativeWindow for managing ICoreWindow native window types.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D_D3D11_WINRT_COREWINDOWNATIVEWINDOW_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D_D3D11_WINRT_COREWINDOWNATIVEWINDOW_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D_D3D11_WINRT_COREWINDOWNATIVEWINDOW_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/winrt/InspectableNativeWindow.h"
end_include
begin_include
include|#
directive|include
file|<memory>
end_include
begin_include
include|#
directive|include
file|<windows.graphics.display.h>
end_include
begin_typedef
DECL|typedef|IWindowSizeChangedEventHandler
typedef|typedef
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|__FITypedEventHandler_2_Windows__CUI__CCore__CCoreWindow_Windows__CUI__CCore__CWindowSizeChangedEventArgs_t
name|IWindowSizeChangedEventHandler
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|IDisplayOrientationEventHandler
typedef|typedef
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|__FITypedEventHandler_2_Windows__CGraphics__CDisplay__CDisplayInformation_IInspectable_t
name|IDisplayOrientationEventHandler
expr_stmt|;
end_typedef
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|CoreWindowNativeWindow
range|:
name|public
name|InspectableNativeWindow
decl_stmt|,
name|public
name|std
decl|::
name|enable_shared_from_this
decl|<
name|CoreWindowNativeWindow
decl|>
block|{
name|public
label|:
operator|~
name|CoreWindowNativeWindow
argument_list|()
expr_stmt|;
name|bool
name|initialize
argument_list|(
name|EGLNativeWindowType
name|window
argument_list|,
name|IPropertySet
operator|*
name|propertySet
argument_list|)
name|override
decl_stmt|;
name|HRESULT
name|createSwapChain
argument_list|(
name|ID3D11Device
operator|*
name|device
argument_list|,
name|DXGIFactory
operator|*
name|factory
argument_list|,
name|DXGI_FORMAT
name|format
argument_list|,
name|unsigned
name|int
name|width
argument_list|,
name|unsigned
name|int
name|height
argument_list|,
name|bool
name|containsAlpha
argument_list|,
name|DXGISwapChain
operator|*
operator|*
name|swapChain
argument_list|)
name|override
decl_stmt|;
name|protected
label|:
name|HRESULT
name|scaleSwapChain
argument_list|(
specifier|const
name|Size
operator|&
name|windowSize
argument_list|,
specifier|const
name|RECT
operator|&
name|clientRect
argument_list|)
name|override
decl_stmt|;
name|bool
name|registerForSizeChangeEvents
parameter_list|()
function_decl|;
name|void
name|unregisterForSizeChangeEvents
parameter_list|()
function_decl|;
name|private
label|:
name|ComPtr
operator|<
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|>
name|mCoreWindow
expr_stmt|;
name|ComPtr
operator|<
name|IMap
operator|<
name|HSTRING
operator|,
name|IInspectable
operator|*
operator|>>
name|mPropertyMap
expr_stmt|;
name|ComPtr
operator|<
name|ABI
operator|::
name|Windows
operator|::
name|Graphics
operator|::
name|Display
operator|::
name|IDisplayInformation
operator|>
name|mDisplayInformation
expr_stmt|;
name|EventRegistrationToken
name|mOrientationChangedEventToken
decl_stmt|;
block|}
empty_stmt|;
index|[
name|uuid
argument_list|(
literal|7F924F66
operator|-
name|EBAE
operator|-
literal|40E5
operator|-
name|A10B
operator|-
name|B8F35E245190
argument_list|)
index|]
name|class
name|CoreWindowSizeChangedHandler
operator|:
name|public
name|Microsoft
operator|::
name|WRL
operator|::
name|RuntimeClass
operator|<
name|Microsoft
operator|::
name|WRL
operator|::
name|RuntimeClassFlags
operator|<
name|Microsoft
operator|::
name|WRL
operator|::
name|ClassicCom
operator|>
operator|,
name|IWindowSizeChangedEventHandler
operator|,
name|IDisplayOrientationEventHandler
operator|>
block|{
name|public
operator|:
name|CoreWindowSizeChangedHandler
argument_list|()
block|{ }
name|HRESULT
name|RuntimeClassInitialize
argument_list|(
argument|std::shared_ptr<InspectableNativeWindow> host
argument_list|)
block|{
if|if
condition|(
operator|!
name|host
condition|)
block|{
return|return
name|E_INVALIDARG
return|;
block|}
name|mHost
operator|=
name|host
expr_stmt|;
return|return
name|S_OK
return|;
block|}
comment|// IWindowSizeChangedEventHandler
name|IFACEMETHOD
argument_list|(
argument|Invoke
argument_list|)
operator|(
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|*
name|sender
operator|,
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|IWindowSizeChangedEventArgs
operator|*
name|sizeChangedEventArgs
operator|)
block|{
name|std
operator|::
name|shared_ptr
operator|<
name|InspectableNativeWindow
operator|>
name|host
operator|=
name|mHost
operator|.
name|lock
argument_list|()
block|;
if|if
condition|(
name|host
condition|)
block|{
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
operator|::
name|Size
name|windowSize
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|sizeChangedEventArgs
operator|->
name|get_Size
argument_list|(
operator|&
name|windowSize
argument_list|)
argument_list|)
condition|)
block|{
name|host
operator|->
name|setNewClientSize
argument_list|(
name|windowSize
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|S_OK
return|;
block|}
name|IFACEMETHOD
argument_list|(
argument|Invoke
argument_list|)
operator|(
name|ABI
operator|::
name|Windows
operator|::
name|Graphics
operator|::
name|Display
operator|::
name|IDisplayInformation
operator|*
name|displayInformation
operator|,
name|IInspectable
operator|*
operator|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
operator|&&
operator|(
name|WINAPI_FAMILY
operator|==
name|WINAPI_FAMILY_PHONE_APP
operator|)
name|NativeWindow
operator|::
name|RotationFlags
name|flags
operator|=
name|NativeWindow
operator|::
name|RotateNone
block|;
name|ABI
operator|::
name|Windows
operator|::
name|Graphics
operator|::
name|Display
operator|::
name|DisplayOrientations
name|orientation
block|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|displayInformation
operator|->
name|get_CurrentOrientation
argument_list|(
operator|&
name|orientation
argument_list|)
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|orientation
condition|)
block|{
case|case
name|ABI
operator|::
name|Windows
operator|::
name|Graphics
operator|::
name|Display
operator|::
name|DisplayOrientations_Landscape
case|:
name|flags
operator|=
name|NativeWindow
operator|::
name|RotateLeft
expr_stmt|;
break|break;
case|case
name|ABI
operator|::
name|Windows
operator|::
name|Graphics
operator|::
name|Display
operator|::
name|DisplayOrientations_LandscapeFlipped
case|:
name|flags
operator|=
name|NativeWindow
operator|::
name|RotateRight
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|std
operator|::
name|shared_ptr
operator|<
name|InspectableNativeWindow
operator|>
name|host
operator|=
name|mHost
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|host
condition|)
block|{
name|host
operator|->
name|setRotationFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|S_OK
return|;
block|}
end_decl_stmt
begin_label
name|private
label|:
end_label
begin_expr_stmt
name|std
operator|::
name|weak_ptr
operator|<
name|InspectableNativeWindow
operator|>
name|mHost
expr_stmt|;
end_expr_stmt
begin_decl_stmt
unit|};
name|HRESULT
name|GetCoreWindowSizeInPixels
argument_list|(
specifier|const
name|ComPtr
operator|<
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
operator|::
name|ICoreWindow
operator|>
operator|&
name|coreWindow
argument_list|,
name|SIZE
operator|*
name|windowSize
argument_list|)
decl_stmt|;
end_decl_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D_D3D11_WINRT_COREWINDOWNATIVEWINDOW_H_
end_comment
end_unit
