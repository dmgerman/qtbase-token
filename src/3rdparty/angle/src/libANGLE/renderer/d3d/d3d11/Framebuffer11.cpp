begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Framebuffer11.cpp: Implements the Framebuffer11 class.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Framebuffer11.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Buffer11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Clear11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/TextureStorage11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/RenderTarget11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/formatutils11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/TextureD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Texture.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|Framebuffer11
name|Framebuffer11
operator|::
name|Framebuffer11
parameter_list|(
specifier|const
name|gl
operator|::
name|Framebuffer
operator|::
name|Data
modifier|&
name|data
parameter_list|,
name|Renderer11
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|FramebufferD3D
argument_list|(
name|data
argument_list|,
name|renderer
argument_list|)
member_init_list|,
name|mRenderer
argument_list|(
name|renderer
argument_list|)
block|{
name|ASSERT
argument_list|(
name|mRenderer
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
block|}
DECL|function|~Framebuffer11
name|Framebuffer11
operator|::
name|~
name|Framebuffer11
parameter_list|()
block|{ }
DECL|function|InvalidateAttachmentSwizzles
specifier|static
name|gl
operator|::
name|Error
name|InvalidateAttachmentSwizzles
parameter_list|(
specifier|const
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|attachment
parameter_list|)
block|{
if|if
condition|(
name|attachment
operator|&&
name|attachment
operator|->
name|type
argument_list|()
operator|==
name|GL_TEXTURE
condition|)
block|{
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|attachment
operator|->
name|getTexture
argument_list|()
decl_stmt|;
name|TextureD3D
modifier|*
name|textureD3D
init|=
name|GetImplAs
argument_list|<
name|TextureD3D
argument_list|>
argument_list|(
name|texture
argument_list|)
decl_stmt|;
name|TextureStorage
modifier|*
name|texStorage
init|=
literal|nullptr
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|textureD3D
operator|->
name|getNativeTexture
argument_list|(
operator|&
name|texStorage
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
if|if
condition|(
name|texStorage
condition|)
block|{
name|TextureStorage11
modifier|*
name|texStorage11
init|=
name|GetAs
argument_list|<
name|TextureStorage11
argument_list|>
argument_list|(
name|texStorage
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|texStorage11
argument_list|)
expr_stmt|;
name|texStorage11
operator|->
name|invalidateSwizzleCacheLevel
argument_list|(
name|attachment
operator|->
name|mipLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|invalidateSwizzles
name|gl
operator|::
name|Error
name|Framebuffer11
operator|::
name|invalidateSwizzles
parameter_list|()
specifier|const
block|{
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|colorAttachment
range|:
name|mData
operator|.
name|getColorAttachments
argument_list|()
control|)
block|{
if|if
condition|(
name|colorAttachment
operator|.
name|isAttached
argument_list|()
condition|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|InvalidateAttachmentSwizzles
argument_list|(
operator|&
name|colorAttachment
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|InvalidateAttachmentSwizzles
argument_list|(
name|mData
operator|.
name|getDepthAttachment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|error
operator|=
name|InvalidateAttachmentSwizzles
argument_list|(
name|mData
operator|.
name|getStencilAttachment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|clear
name|gl
operator|::
name|Error
name|Framebuffer11
operator|::
name|clear
parameter_list|(
specifier|const
name|gl
operator|::
name|Data
modifier|&
name|data
parameter_list|,
specifier|const
name|ClearParameters
modifier|&
name|clearParams
parameter_list|)
block|{
name|Clear11
modifier|*
name|clearer
init|=
name|mRenderer
operator|->
name|getClearer
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
argument_list|(
name|GL_NO_ERROR
argument_list|)
decl_stmt|;
specifier|const
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|colorAttachment
init|=
name|mData
operator|.
name|getFirstColorAttachment
argument_list|()
decl_stmt|;
if|if
condition|(
name|clearParams
operator|.
name|scissorEnabled
operator|==
literal|true
operator|&&
name|colorAttachment
operator|!=
literal|nullptr
operator|&&
name|UsePresentPathFast
argument_list|(
name|mRenderer
argument_list|,
name|colorAttachment
argument_list|)
condition|)
block|{
comment|// If the current framebuffer is using the default colorbuffer, and present path fast is
comment|// active, and the scissor rect is enabled, then we should invert the scissor rect
comment|// vertically
name|ClearParameters
name|presentPathFastClearParams
init|=
name|clearParams
decl_stmt|;
name|gl
operator|::
name|Extents
name|framebufferSize
init|=
name|colorAttachment
operator|->
name|getSize
argument_list|()
decl_stmt|;
name|presentPathFastClearParams
operator|.
name|scissor
operator|.
name|y
operator|=
name|framebufferSize
operator|.
name|height
operator|-
name|presentPathFastClearParams
operator|.
name|scissor
operator|.
name|y
operator|-
name|presentPathFastClearParams
operator|.
name|scissor
operator|.
name|height
expr_stmt|;
name|error
operator|=
name|clearer
operator|->
name|clearFramebuffer
argument_list|(
name|presentPathFastClearParams
argument_list|,
name|mData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|error
operator|=
name|clearer
operator|->
name|clearFramebuffer
argument_list|(
name|clearParams
argument_list|,
name|mData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|error
operator|=
name|invalidateSwizzles
argument_list|()
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|invalidate
name|gl
operator|::
name|Error
name|Framebuffer11
operator|::
name|invalidate
parameter_list|(
name|size_t
name|count
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|)
block|{
return|return
name|invalidateBase
argument_list|(
name|count
argument_list|,
name|attachments
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|function|discard
name|gl
operator|::
name|Error
name|Framebuffer11
operator|::
name|discard
parameter_list|(
name|size_t
name|count
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|)
block|{
return|return
name|invalidateBase
argument_list|(
name|count
argument_list|,
name|attachments
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|function|invalidateBase
name|gl
operator|::
name|Error
name|Framebuffer11
operator|::
name|invalidateBase
parameter_list|(
name|size_t
name|count
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|,
name|bool
name|useEXTBehavior
parameter_list|)
specifier|const
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11_1
argument_list|)
name|ID3D11DeviceContext1
modifier|*
name|deviceContext1
init|=
name|mRenderer
operator|->
name|getDeviceContext1IfSupported
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|deviceContext1
condition|)
block|{
comment|// DiscardView() is only supported on ID3D11DeviceContext1
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
name|bool
name|foundDepth
init|=
literal|false
decl_stmt|;
name|bool
name|foundStencil
init|=
literal|false
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|attachments
index|[
name|i
index|]
condition|)
block|{
comment|// Handle depth and stencil attachments. Defer discarding until later.
case|case
name|GL_DEPTH_STENCIL_ATTACHMENT
case|:
name|foundDepth
operator|=
literal|true
expr_stmt|;
name|foundStencil
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|GL_DEPTH_EXT
case|:
case|case
name|GL_DEPTH_ATTACHMENT
case|:
name|foundDepth
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|GL_STENCIL_EXT
case|:
case|case
name|GL_STENCIL_ATTACHMENT
case|:
name|foundStencil
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
block|{
comment|// Handle color attachments
name|ASSERT
argument_list|(
operator|(
name|attachments
index|[
name|i
index|]
operator|>=
name|GL_COLOR_ATTACHMENT0
operator|&&
name|attachments
index|[
name|i
index|]
operator|<=
name|GL_COLOR_ATTACHMENT15
operator|)
operator|||
operator|(
name|attachments
index|[
name|i
index|]
operator|==
name|GL_COLOR
operator|)
argument_list|)
expr_stmt|;
name|RenderTarget11
modifier|*
name|renderTarget
init|=
literal|nullptr
decl_stmt|;
name|ID3D11View
modifier|*
name|colorView
init|=
literal|nullptr
decl_stmt|;
name|gl
operator|::
name|Error
name|error
argument_list|(
name|GL_NO_ERROR
argument_list|)
decl_stmt|;
name|size_t
name|colorAttachmentID
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|attachments
index|[
name|i
index|]
operator|==
name|GL_COLOR
condition|)
block|{
name|colorAttachmentID
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|colorAttachmentID
operator|=
name|attachments
index|[
name|i
index|]
operator|-
name|GL_COLOR_ATTACHMENT0
expr_stmt|;
block|}
if|if
condition|(
name|mData
operator|.
name|getColorAttachment
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|colorAttachmentID
argument_list|)
argument_list|)
condition|)
block|{
name|error
operator|=
name|mData
operator|.
name|getColorAttachment
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|colorAttachmentID
argument_list|)
argument_list|)
operator|->
name|getRenderTarget
argument_list|(
operator|&
name|renderTarget
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|colorView
operator|=
name|renderTarget
operator|->
name|getRenderTargetView
argument_list|()
expr_stmt|;
if|if
condition|(
name|colorView
operator|!=
literal|nullptr
condition|)
block|{
name|deviceContext1
operator|->
name|DiscardView
argument_list|(
name|colorView
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
block|}
name|bool
name|discardDepth
init|=
literal|false
decl_stmt|;
name|bool
name|discardStencil
init|=
literal|false
decl_stmt|;
comment|// The D3D11 renderer uses the same view for depth and stencil buffers, so we must be careful.
if|if
condition|(
name|useEXTBehavior
condition|)
block|{
comment|// In the extension, if the app discards only one of the depth and stencil attachments, but
comment|// those are backed by the same packed_depth_stencil buffer, then both images become undefined.
name|discardDepth
operator|=
name|foundDepth
expr_stmt|;
comment|// Don't bother discarding the stencil buffer if the depth buffer will already do it
name|discardStencil
operator|=
name|foundStencil
operator|&&
operator|(
operator|!
name|discardDepth
operator|||
name|mData
operator|.
name|getDepthAttachment
argument_list|()
operator|==
literal|nullptr
operator|)
expr_stmt|;
block|}
else|else
block|{
comment|// In ES 3.0.4, if a specified attachment has base internal format DEPTH_STENCIL but the
comment|// attachments list does not include DEPTH_STENCIL_ATTACHMENT or both DEPTH_ATTACHMENT and
comment|// STENCIL_ATTACHMENT, then only the specified portion of every pixel in the subregion of pixels
comment|// of the DEPTH_STENCIL buffer may be invalidated, and the other portion must be preserved.
name|discardDepth
operator|=
operator|(
name|foundDepth
operator|&&
name|foundStencil
operator|)
operator|||
operator|(
name|foundDepth
operator|&&
operator|(
name|mData
operator|.
name|getStencilAttachment
argument_list|()
operator|==
literal|nullptr
operator|)
operator|)
expr_stmt|;
name|discardStencil
operator|=
operator|(
name|foundStencil
operator|&&
operator|(
name|mData
operator|.
name|getDepthAttachment
argument_list|()
operator|==
literal|nullptr
operator|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|discardDepth
operator|&&
name|mData
operator|.
name|getDepthAttachment
argument_list|()
condition|)
block|{
name|RenderTarget11
modifier|*
name|renderTarget
init|=
literal|nullptr
decl_stmt|;
name|ID3D11View
modifier|*
name|depthView
init|=
literal|nullptr
decl_stmt|;
name|gl
operator|::
name|Error
name|error
argument_list|(
name|GL_NO_ERROR
argument_list|)
decl_stmt|;
name|error
operator|=
name|mData
operator|.
name|getDepthAttachment
argument_list|()
operator|->
name|getRenderTarget
argument_list|(
operator|&
name|renderTarget
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|depthView
operator|=
name|renderTarget
operator|->
name|getDepthStencilView
argument_list|()
expr_stmt|;
if|if
condition|(
name|depthView
operator|!=
literal|nullptr
condition|)
block|{
name|deviceContext1
operator|->
name|DiscardView
argument_list|(
name|depthView
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|discardStencil
operator|&&
name|mData
operator|.
name|getStencilAttachment
argument_list|()
condition|)
block|{
name|RenderTarget11
modifier|*
name|renderTarget
init|=
literal|nullptr
decl_stmt|;
name|ID3D11View
modifier|*
name|stencilView
init|=
literal|nullptr
decl_stmt|;
name|gl
operator|::
name|Error
name|error
argument_list|(
name|GL_NO_ERROR
argument_list|)
decl_stmt|;
name|error
operator|=
name|mData
operator|.
name|getStencilAttachment
argument_list|()
operator|->
name|getRenderTarget
argument_list|(
operator|&
name|renderTarget
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|stencilView
operator|=
name|renderTarget
operator|->
name|getDepthStencilView
argument_list|()
expr_stmt|;
if|if
condition|(
name|stencilView
operator|!=
literal|nullptr
condition|)
block|{
name|deviceContext1
operator|->
name|DiscardView
argument_list|(
name|stencilView
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// ANGLE_ENABLE_D3D11_1
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|invalidateSub
name|gl
operator|::
name|Error
name|Framebuffer11
operator|::
name|invalidateSub
parameter_list|(
name|size_t
parameter_list|,
specifier|const
name|GLenum
modifier|*
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|&
parameter_list|)
block|{
comment|// A no-op implementation conforms to the spec, so don't call UNIMPLEMENTED()
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|readPixelsImpl
name|gl
operator|::
name|Error
name|Framebuffer11
operator|::
name|readPixelsImpl
parameter_list|(
specifier|const
name|gl
operator|::
name|Rectangle
modifier|&
name|area
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
specifier|const
name|gl
operator|::
name|PixelPackState
modifier|&
name|pack
parameter_list|,
name|uint8_t
modifier|*
name|pixels
parameter_list|)
specifier|const
block|{
specifier|const
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|readAttachment
init|=
name|mData
operator|.
name|getReadAttachment
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|readAttachment
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Buffer
modifier|*
name|packBuffer
init|=
name|pack
operator|.
name|pixelBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|packBuffer
operator|!=
literal|nullptr
condition|)
block|{
if|if
condition|(
name|pack
operator|.
name|rowLength
operator|!=
literal|0
operator|||
name|pack
operator|.
name|skipRows
operator|!=
literal|0
operator|||
name|pack
operator|.
name|skipPixels
operator|!=
literal|0
condition|)
block|{
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Unimplemented pixel store parameters in readPixelsImpl"
argument_list|)
return|;
block|}
name|Buffer11
modifier|*
name|packBufferStorage
init|=
name|GetImplAs
argument_list|<
name|Buffer11
argument_list|>
argument_list|(
name|packBuffer
argument_list|)
decl_stmt|;
name|PackPixelsParams
name|packParams
argument_list|(
name|area
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|outputPitch
argument_list|)
argument_list|,
name|pack
argument_list|,
cast|reinterpret_cast
argument_list|<
name|ptrdiff_t
argument_list|>
argument_list|(
name|pixels
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|packBufferStorage
operator|->
name|packPixels
argument_list|(
operator|*
name|readAttachment
argument_list|,
name|packParams
argument_list|)
return|;
block|}
return|return
name|mRenderer
operator|->
name|readFromAttachment
argument_list|(
operator|*
name|readAttachment
argument_list|,
name|area
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|outputPitch
argument_list|)
argument_list|,
name|pack
argument_list|,
name|pixels
argument_list|)
return|;
block|}
DECL|function|blit
name|gl
operator|::
name|Error
name|Framebuffer11
operator|::
name|blit
parameter_list|(
specifier|const
name|gl
operator|::
name|Rectangle
modifier|&
name|sourceArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|&
name|destArea
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|*
name|scissor
parameter_list|,
name|bool
name|blitRenderTarget
parameter_list|,
name|bool
name|blitDepth
parameter_list|,
name|bool
name|blitStencil
parameter_list|,
name|GLenum
name|filter
parameter_list|,
specifier|const
name|gl
operator|::
name|Framebuffer
modifier|*
name|sourceFramebuffer
parameter_list|)
block|{
if|if
condition|(
name|blitRenderTarget
condition|)
block|{
specifier|const
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|readBuffer
init|=
name|sourceFramebuffer
operator|->
name|getReadColorbuffer
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|readBuffer
argument_list|)
expr_stmt|;
name|RenderTargetD3D
modifier|*
name|readRenderTarget
init|=
literal|nullptr
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|readBuffer
operator|->
name|getRenderTarget
argument_list|(
operator|&
name|readRenderTarget
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|ASSERT
argument_list|(
name|readRenderTarget
argument_list|)
expr_stmt|;
specifier|const
specifier|auto
modifier|&
name|colorAttachments
init|=
name|mData
operator|.
name|getColorAttachments
argument_list|()
decl_stmt|;
specifier|const
specifier|auto
modifier|&
name|drawBufferStates
init|=
name|mData
operator|.
name|getDrawBufferStates
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|colorAttachments
operator|.
name|size
argument_list|()
condition|;
name|colorAttachment
operator|++
control|)
block|{
specifier|const
name|gl
operator|::
name|FramebufferAttachment
modifier|&
name|drawBuffer
init|=
name|colorAttachments
index|[
name|colorAttachment
index|]
decl_stmt|;
if|if
condition|(
name|drawBuffer
operator|.
name|isAttached
argument_list|()
operator|&&
name|drawBufferStates
index|[
name|colorAttachment
index|]
operator|!=
name|GL_NONE
condition|)
block|{
name|RenderTargetD3D
modifier|*
name|drawRenderTarget
init|=
literal|nullptr
decl_stmt|;
name|error
operator|=
name|drawBuffer
operator|.
name|getRenderTarget
argument_list|(
operator|&
name|drawRenderTarget
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|ASSERT
argument_list|(
name|drawRenderTarget
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|invertColorSource
init|=
name|UsePresentPathFast
argument_list|(
name|mRenderer
argument_list|,
name|readBuffer
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Rectangle
name|actualSourceArea
init|=
name|sourceArea
decl_stmt|;
if|if
condition|(
name|invertColorSource
condition|)
block|{
name|RenderTarget11
modifier|*
name|readRenderTarget11
init|=
name|GetAs
argument_list|<
name|RenderTarget11
argument_list|>
argument_list|(
name|readRenderTarget
argument_list|)
decl_stmt|;
name|actualSourceArea
operator|.
name|y
operator|=
name|readRenderTarget11
operator|->
name|getHeight
argument_list|()
operator|-
name|sourceArea
operator|.
name|y
expr_stmt|;
name|actualSourceArea
operator|.
name|height
operator|=
operator|-
name|sourceArea
operator|.
name|height
expr_stmt|;
block|}
specifier|const
name|bool
name|invertColorDest
init|=
name|UsePresentPathFast
argument_list|(
name|mRenderer
argument_list|,
operator|&
name|drawBuffer
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Rectangle
name|actualDestArea
init|=
name|destArea
decl_stmt|;
if|if
condition|(
name|invertColorDest
condition|)
block|{
name|RenderTarget11
modifier|*
name|drawRenderTarget11
init|=
name|GetAs
argument_list|<
name|RenderTarget11
argument_list|>
argument_list|(
name|drawRenderTarget
argument_list|)
decl_stmt|;
name|actualDestArea
operator|.
name|y
operator|=
name|drawRenderTarget11
operator|->
name|getHeight
argument_list|()
operator|-
name|destArea
operator|.
name|y
expr_stmt|;
name|actualDestArea
operator|.
name|height
operator|=
operator|-
name|destArea
operator|.
name|height
expr_stmt|;
block|}
name|error
operator|=
name|mRenderer
operator|->
name|blitRenderbufferRect
argument_list|(
name|actualSourceArea
argument_list|,
name|actualDestArea
argument_list|,
name|readRenderTarget
argument_list|,
name|drawRenderTarget
argument_list|,
name|filter
argument_list|,
name|scissor
argument_list|,
name|blitRenderTarget
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|blitDepth
operator|||
name|blitStencil
condition|)
block|{
specifier|const
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|readBuffer
init|=
name|sourceFramebuffer
operator|->
name|getDepthOrStencilbuffer
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|readBuffer
argument_list|)
expr_stmt|;
name|RenderTargetD3D
modifier|*
name|readRenderTarget
init|=
literal|nullptr
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|readBuffer
operator|->
name|getRenderTarget
argument_list|(
operator|&
name|readRenderTarget
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|ASSERT
argument_list|(
name|readRenderTarget
argument_list|)
expr_stmt|;
specifier|const
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|drawBuffer
init|=
name|mData
operator|.
name|getDepthOrStencilAttachment
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|drawBuffer
argument_list|)
expr_stmt|;
name|RenderTargetD3D
modifier|*
name|drawRenderTarget
init|=
literal|nullptr
decl_stmt|;
name|error
operator|=
name|drawBuffer
operator|->
name|getRenderTarget
argument_list|(
operator|&
name|drawRenderTarget
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|ASSERT
argument_list|(
name|drawRenderTarget
argument_list|)
expr_stmt|;
name|error
operator|=
name|mRenderer
operator|->
name|blitRenderbufferRect
argument_list|(
name|sourceArea
argument_list|,
name|destArea
argument_list|,
name|readRenderTarget
argument_list|,
name|drawRenderTarget
argument_list|,
name|filter
argument_list|,
name|scissor
argument_list|,
literal|false
argument_list|,
name|blitDepth
argument_list|,
name|blitStencil
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|invalidateSwizzles
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getRenderTargetImplementationFormat
name|GLenum
name|Framebuffer11
operator|::
name|getRenderTargetImplementationFormat
parameter_list|(
name|RenderTargetD3D
modifier|*
name|renderTarget
parameter_list|)
specifier|const
block|{
name|RenderTarget11
modifier|*
name|renderTarget11
init|=
name|GetAs
argument_list|<
name|RenderTarget11
argument_list|>
argument_list|(
name|renderTarget
argument_list|)
decl_stmt|;
specifier|const
name|d3d11
operator|::
name|DXGIFormat
modifier|&
name|dxgiFormatInfo
init|=
name|d3d11
operator|::
name|GetDXGIFormatInfo
argument_list|(
name|renderTarget11
operator|->
name|getDXGIFormat
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|dxgiFormatInfo
operator|.
name|internalFormat
return|;
block|}
block|}
end_namespace
end_unit
