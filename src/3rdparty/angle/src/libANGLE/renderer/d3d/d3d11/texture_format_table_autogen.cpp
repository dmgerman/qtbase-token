begin_unit
begin_comment
comment|// GENERATED FILE - DO NOT EDIT.
end_comment
begin_comment
comment|// Generated by gen_texture_format_table.py using data from texture_format_data.json
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// texture_format_table:
end_comment
begin_comment
comment|//   Queries for full textureFormat information based in internalFormat
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/texture_format_table.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/formatutils11.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/internal_format_initializer_table.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/load_functions_table.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/swizzle_format_info.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/loadimage.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|namespace|d3d11
namespace|namespace
name|d3d11
block|{
namespace|namespace
block|{
DECL|typedef|FormatSupportFunction
typedef|typedef
name|bool
function_decl|(
modifier|*
name|FormatSupportFunction
function_decl|)
parameter_list|(
specifier|const
name|Renderer11DeviceCaps
modifier|&
parameter_list|)
function_decl|;
DECL|function|AnyDevice
name|bool
name|AnyDevice
parameter_list|(
specifier|const
name|Renderer11DeviceCaps
modifier|&
name|deviceCaps
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
DECL|function|OnlyFL10Plus
name|bool
name|OnlyFL10Plus
parameter_list|(
specifier|const
name|Renderer11DeviceCaps
modifier|&
name|deviceCaps
parameter_list|)
block|{
return|return
operator|(
name|deviceCaps
operator|.
name|featureLevel
operator|>=
name|D3D_FEATURE_LEVEL_10_0
operator|)
return|;
block|}
DECL|function|OnlyFL9_3
name|bool
name|OnlyFL9_3
parameter_list|(
specifier|const
name|Renderer11DeviceCaps
modifier|&
name|deviceCaps
parameter_list|)
block|{
return|return
operator|(
name|deviceCaps
operator|.
name|featureLevel
operator|==
name|D3D_FEATURE_LEVEL_9_3
operator|)
return|;
block|}
template|template
parameter_list|<
name|DXGI_FORMAT
name|format
parameter_list|,
name|bool
name|requireSupport
parameter_list|>
DECL|function|SupportsFormat
name|bool
name|SupportsFormat
parameter_list|(
specifier|const
name|Renderer11DeviceCaps
modifier|&
name|deviceCaps
parameter_list|)
block|{
comment|// Must support texture, SRV and RTV support
name|UINT
name|mustSupport
init|=
name|D3D11_FORMAT_SUPPORT_TEXTURE2D
operator||
name|D3D11_FORMAT_SUPPORT_TEXTURECUBE
operator||
name|D3D11_FORMAT_SUPPORT_SHADER_SAMPLE
operator||
name|D3D11_FORMAT_SUPPORT_MIP
operator||
name|D3D11_FORMAT_SUPPORT_RENDER_TARGET
decl_stmt|;
if|if
condition|(
name|d3d11_gl
operator|::
name|GetMaximumClientVersion
argument_list|(
name|deviceCaps
operator|.
name|featureLevel
argument_list|)
operator|>
literal|2
condition|)
block|{
name|mustSupport
operator||=
name|D3D11_FORMAT_SUPPORT_TEXTURE3D
expr_stmt|;
block|}
name|bool
name|fullSupport
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|format
operator|==
name|DXGI_FORMAT_B5G6R5_UNORM
condition|)
block|{
comment|// All hardware that supports DXGI_FORMAT_B5G6R5_UNORM should support autogen mipmaps, but
comment|// check anyway.
name|mustSupport
operator||=
name|D3D11_FORMAT_SUPPORT_MIP_AUTOGEN
expr_stmt|;
name|fullSupport
operator|=
operator|(
operator|(
name|deviceCaps
operator|.
name|B5G6R5support
operator|&
name|mustSupport
operator|)
operator|==
name|mustSupport
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
name|DXGI_FORMAT_B4G4R4A4_UNORM
condition|)
block|{
name|fullSupport
operator|=
operator|(
operator|(
name|deviceCaps
operator|.
name|B4G4R4A4support
operator|&
name|mustSupport
operator|)
operator|==
name|mustSupport
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
name|DXGI_FORMAT_B5G5R5A1_UNORM
condition|)
block|{
name|fullSupport
operator|=
operator|(
operator|(
name|deviceCaps
operator|.
name|B5G5R5A1support
operator|&
name|mustSupport
operator|)
operator|==
name|mustSupport
operator|)
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// This 'SupportsFormat' function is used by individual entries in the D3D11 Format Map below,
comment|// which maps GL formats to DXGI formats.
if|if
condition|(
name|requireSupport
condition|)
block|{
comment|// This means that ANGLE would like to use the entry in the map if the inputted DXGI format
comment|// *IS* supported.
comment|// e.g. the entry might map GL_RGB5_A1 to DXGI_FORMAT_B5G5R5A1, which should only be used if
comment|// DXGI_FORMAT_B5G5R5A1 is supported.
comment|// In this case, we should only return 'true' if the format *IS* supported.
return|return
name|fullSupport
return|;
block|}
else|else
block|{
comment|// This means that ANGLE would like to use the entry in the map if the inputted DXGI format
comment|// *ISN'T* supported.
comment|// This might be a fallback entry. e.g. for ANGLE to use DXGI_FORMAT_R8G8B8A8_UNORM if
comment|// DXGI_FORMAT_B5G5R5A1 isn't supported.
comment|// In this case, we should only return 'true' if the format *ISN'T* supported.
return|return
operator|!
name|fullSupport
return|;
block|}
block|}
comment|// End Format Support Functions
comment|// For sized GL internal formats, there are several possible corresponding D3D11 formats depending
comment|// on device capabilities.
comment|// This function allows querying for the DXGI texture formats to use for textures, SRVs, RTVs and
comment|// DSVs given a GL internal format.
DECL|function|GetD3D11FormatInfo
specifier|const
name|TextureFormat
name|GetD3D11FormatInfo
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
name|DXGI_FORMAT
name|texFormat
parameter_list|,
name|DXGI_FORMAT
name|srvFormat
parameter_list|,
name|DXGI_FORMAT
name|rtvFormat
parameter_list|,
name|DXGI_FORMAT
name|dsvFormat
parameter_list|)
block|{
name|TextureFormat
name|info
decl_stmt|;
name|info
operator|.
name|texFormat
operator|=
name|texFormat
expr_stmt|;
name|info
operator|.
name|srvFormat
operator|=
name|srvFormat
expr_stmt|;
name|info
operator|.
name|rtvFormat
operator|=
name|rtvFormat
expr_stmt|;
name|info
operator|.
name|dsvFormat
operator|=
name|dsvFormat
expr_stmt|;
comment|// Given a GL internal format, the renderFormat is the DSV format if it is depth- or
comment|// stencil-renderable,
comment|// the RTV format if it is color-renderable, and the (nonrenderable) texture format otherwise.
if|if
condition|(
name|dsvFormat
operator|!=
name|DXGI_FORMAT_UNKNOWN
condition|)
block|{
name|info
operator|.
name|renderFormat
operator|=
name|dsvFormat
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rtvFormat
operator|!=
name|DXGI_FORMAT_UNKNOWN
condition|)
block|{
name|info
operator|.
name|renderFormat
operator|=
name|rtvFormat
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|texFormat
operator|!=
name|DXGI_FORMAT_UNKNOWN
condition|)
block|{
name|info
operator|.
name|renderFormat
operator|=
name|texFormat
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|renderFormat
operator|=
name|DXGI_FORMAT_UNKNOWN
expr_stmt|;
block|}
comment|// Compute the swizzle formats
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|internalFormat
operator|!=
name|GL_NONE
operator|&&
name|formatInfo
operator|.
name|pixelBytes
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|formatInfo
operator|.
name|componentCount
operator|!=
literal|4
operator|||
name|texFormat
operator|==
name|DXGI_FORMAT_UNKNOWN
operator|||
name|srvFormat
operator|==
name|DXGI_FORMAT_UNKNOWN
operator|||
name|rtvFormat
operator|==
name|DXGI_FORMAT_UNKNOWN
condition|)
block|{
comment|// Get the maximum sized component
name|unsigned
name|int
name|maxBits
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|formatInfo
operator|.
name|compressed
condition|)
block|{
name|unsigned
name|int
name|compressedBitsPerBlock
init|=
name|formatInfo
operator|.
name|pixelBytes
operator|*
literal|8
decl_stmt|;
name|unsigned
name|int
name|blockSize
init|=
name|formatInfo
operator|.
name|compressedBlockWidth
operator|*
name|formatInfo
operator|.
name|compressedBlockHeight
decl_stmt|;
name|maxBits
operator|=
name|std
operator|::
name|max
argument_list|(
name|compressedBitsPerBlock
operator|/
name|blockSize
argument_list|,
name|maxBits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maxBits
operator|=
name|std
operator|::
name|max
argument_list|(
name|maxBits
argument_list|,
name|formatInfo
operator|.
name|alphaBits
argument_list|)
expr_stmt|;
name|maxBits
operator|=
name|std
operator|::
name|max
argument_list|(
name|maxBits
argument_list|,
name|formatInfo
operator|.
name|redBits
argument_list|)
expr_stmt|;
name|maxBits
operator|=
name|std
operator|::
name|max
argument_list|(
name|maxBits
argument_list|,
name|formatInfo
operator|.
name|greenBits
argument_list|)
expr_stmt|;
name|maxBits
operator|=
name|std
operator|::
name|max
argument_list|(
name|maxBits
argument_list|,
name|formatInfo
operator|.
name|blueBits
argument_list|)
expr_stmt|;
name|maxBits
operator|=
name|std
operator|::
name|max
argument_list|(
name|maxBits
argument_list|,
name|formatInfo
operator|.
name|luminanceBits
argument_list|)
expr_stmt|;
name|maxBits
operator|=
name|std
operator|::
name|max
argument_list|(
name|maxBits
argument_list|,
name|formatInfo
operator|.
name|depthBits
argument_list|)
expr_stmt|;
block|}
name|maxBits
operator|=
name|roundUp
argument_list|(
name|maxBits
argument_list|,
literal|8U
argument_list|)
expr_stmt|;
specifier|const
name|SwizzleFormatInfo
modifier|&
name|swizzleInfo
init|=
name|GetSwizzleFormatInfo
argument_list|(
name|maxBits
argument_list|,
name|formatInfo
operator|.
name|componentType
argument_list|)
decl_stmt|;
name|info
operator|.
name|swizzleTexFormat
operator|=
name|swizzleInfo
operator|.
name|mTexFormat
expr_stmt|;
name|info
operator|.
name|swizzleSRVFormat
operator|=
name|swizzleInfo
operator|.
name|mSRVFormat
expr_stmt|;
name|info
operator|.
name|swizzleRTVFormat
operator|=
name|swizzleInfo
operator|.
name|mRTVFormat
expr_stmt|;
block|}
else|else
block|{
comment|// The original texture format is suitable for swizzle operations
name|info
operator|.
name|swizzleTexFormat
operator|=
name|texFormat
expr_stmt|;
name|info
operator|.
name|swizzleSRVFormat
operator|=
name|srvFormat
expr_stmt|;
name|info
operator|.
name|swizzleRTVFormat
operator|=
name|rtvFormat
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Not possible to swizzle with this texture format since it is either unsized or GL_NONE
name|info
operator|.
name|swizzleTexFormat
operator|=
name|DXGI_FORMAT_UNKNOWN
expr_stmt|;
name|info
operator|.
name|swizzleSRVFormat
operator|=
name|DXGI_FORMAT_UNKNOWN
expr_stmt|;
name|info
operator|.
name|swizzleRTVFormat
operator|=
name|DXGI_FORMAT_UNKNOWN
expr_stmt|;
block|}
comment|// Check if there is an initialization function for this texture format
name|info
operator|.
name|dataInitializerFunction
operator|=
name|GetInternalFormatInitializer
argument_list|(
name|internalFormat
argument_list|,
name|texFormat
argument_list|)
expr_stmt|;
comment|// Gather all the load functions for this internal format
name|info
operator|.
name|loadFunctions
operator|=
name|GetLoadFunctionsMap
argument_list|(
name|internalFormat
argument_list|,
name|texFormat
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|info
operator|.
name|loadFunctions
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|||
name|internalFormat
operator|==
name|GL_NONE
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
block|}
comment|// namespace
DECL|function|TextureFormat
name|TextureFormat
operator|::
name|TextureFormat
parameter_list|()
member_init_list|:
name|texFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|srvFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|rtvFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|dsvFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|renderFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|swizzleTexFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|swizzleSRVFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|swizzleRTVFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|dataInitializerFunction
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|loadFunctions
argument_list|()
block|{ }
DECL|function|GetTextureFormatInfo
specifier|const
name|TextureFormat
modifier|&
name|GetTextureFormatInfo
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
specifier|const
name|Renderer11DeviceCaps
modifier|&
name|renderer11DeviceCaps
parameter_list|)
block|{
comment|// clang-format off
switch|switch
condition|(
name|internalFormat
condition|)
block|{
case|case
name|GL_ALPHA
case|:
block|{
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_A8_UNORM
argument_list|,
name|DXGI_FORMAT_A8_UNORM
argument_list|,
name|DXGI_FORMAT_A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
elseif|else
if|if
condition|(
name|OnlyFL9_3
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_ALPHA16F_EXT
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_ALPHA32F_EXT
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_ALPHA8_EXT
case|:
block|{
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_A8_UNORM
argument_list|,
name|DXGI_FORMAT_A8_UNORM
argument_list|,
name|DXGI_FORMAT_A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
elseif|else
if|if
condition|(
name|OnlyFL9_3
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_BGR5_A1_ANGLEX
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_BGRA4_ANGLEX
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_BGRA8_EXT
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_BGRA_EXT
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
name|DXGI_FORMAT_B8G8R8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_COMPRESSED_R11_EAC
case|:
block|{
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8_UNORM
argument_list|,
name|DXGI_FORMAT_R8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_COMPRESSED_RG11_EAC
case|:
block|{
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_COMPRESSED_RGB8_ETC2
case|:
block|{
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
case|:
block|{
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_COMPRESSED_RGBA8_ETC2_EAC
case|:
block|{
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_BC1_UNORM
argument_list|,
name|DXGI_FORMAT_BC1_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_BC2_UNORM
argument_list|,
name|DXGI_FORMAT_BC2_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_BC3_UNORM
argument_list|,
name|DXGI_FORMAT_BC3_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_BC1_UNORM
argument_list|,
name|DXGI_FORMAT_BC1_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_COMPRESSED_SIGNED_R11_EAC
case|:
block|{
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8_SNORM
argument_list|,
name|DXGI_FORMAT_R8_SNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_COMPRESSED_SIGNED_RG11_EAC
case|:
block|{
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8_SNORM
argument_list|,
name|DXGI_FORMAT_R8G8_SNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
case|:
block|{
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_COMPRESSED_SRGB8_ETC2
case|:
block|{
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
case|:
block|{
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_DEPTH24_STENCIL8
case|:
block|{
if|if
condition|(
name|OnlyFL9_3
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_D24_UNORM_S8_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_D24_UNORM_S8_UINT
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
elseif|else
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R24G8_TYPELESS
argument_list|,
name|DXGI_FORMAT_R24_UNORM_X8_TYPELESS
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_D24_UNORM_S8_UINT
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_DEPTH32F_STENCIL8
case|:
block|{
if|if
condition|(
name|OnlyFL9_3
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
elseif|else
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32G8X24_TYPELESS
argument_list|,
name|DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_D32_FLOAT_S8X24_UINT
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_DEPTH_COMPONENT16
case|:
block|{
if|if
condition|(
name|OnlyFL9_3
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_D16_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_D16_UNORM
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
elseif|else
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16_TYPELESS
argument_list|,
name|DXGI_FORMAT_R16_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_D16_UNORM
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_DEPTH_COMPONENT24
case|:
block|{
if|if
condition|(
name|OnlyFL9_3
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_D24_UNORM_S8_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_D24_UNORM_S8_UINT
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
elseif|else
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R24G8_TYPELESS
argument_list|,
name|DXGI_FORMAT_R24_UNORM_X8_TYPELESS
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_D24_UNORM_S8_UINT
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_DEPTH_COMPONENT32F
case|:
block|{
if|if
condition|(
name|OnlyFL9_3
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
elseif|else
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32_TYPELESS
argument_list|,
name|DXGI_FORMAT_R32_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_D32_FLOAT
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_DEPTH_COMPONENT32_OES
case|:
block|{
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R24G8_TYPELESS
argument_list|,
name|DXGI_FORMAT_R24_UNORM_X8_TYPELESS
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_D24_UNORM_S8_UINT
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_ETC1_RGB8_LOSSY_DECODE_ANGLE
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_BC1_UNORM
argument_list|,
name|DXGI_FORMAT_BC1_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_ETC1_RGB8_OES
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_LUMINANCE
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_LUMINANCE16F_EXT
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_LUMINANCE32F_EXT
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_LUMINANCE8_ALPHA8_EXT
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_LUMINANCE8_EXT
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_LUMINANCE_ALPHA
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_LUMINANCE_ALPHA16F_EXT
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_LUMINANCE_ALPHA32F_EXT
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_NONE
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_R11F_G11F_B10F
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R11G11B10_FLOAT
argument_list|,
name|DXGI_FORMAT_R11G11B10_FLOAT
argument_list|,
name|DXGI_FORMAT_R11G11B10_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_R16F
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_R16I
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16_SINT
argument_list|,
name|DXGI_FORMAT_R16_SINT
argument_list|,
name|DXGI_FORMAT_R16_SINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_R16UI
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16_UINT
argument_list|,
name|DXGI_FORMAT_R16_UINT
argument_list|,
name|DXGI_FORMAT_R16_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_R32F
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_R32I
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32_SINT
argument_list|,
name|DXGI_FORMAT_R32_SINT
argument_list|,
name|DXGI_FORMAT_R32_SINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_R32UI
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32_UINT
argument_list|,
name|DXGI_FORMAT_R32_UINT
argument_list|,
name|DXGI_FORMAT_R32_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_R8
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8_UNORM
argument_list|,
name|DXGI_FORMAT_R8_UNORM
argument_list|,
name|DXGI_FORMAT_R8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_R8I
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8_SINT
argument_list|,
name|DXGI_FORMAT_R8_SINT
argument_list|,
name|DXGI_FORMAT_R8_SINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_R8UI
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8_UINT
argument_list|,
name|DXGI_FORMAT_R8_UINT
argument_list|,
name|DXGI_FORMAT_R8_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_R8_SNORM
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8_SNORM
argument_list|,
name|DXGI_FORMAT_R8_SNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RG16F
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16G16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16G16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16G16_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RG16I
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16G16_SINT
argument_list|,
name|DXGI_FORMAT_R16G16_SINT
argument_list|,
name|DXGI_FORMAT_R16G16_SINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RG16UI
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16G16_UINT
argument_list|,
name|DXGI_FORMAT_R16G16_UINT
argument_list|,
name|DXGI_FORMAT_R16G16_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RG32F
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RG32I
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32G32_SINT
argument_list|,
name|DXGI_FORMAT_R32G32_SINT
argument_list|,
name|DXGI_FORMAT_R32G32_SINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RG32UI
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32G32_UINT
argument_list|,
name|DXGI_FORMAT_R32G32_UINT
argument_list|,
name|DXGI_FORMAT_R32G32_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RG8
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RG8I
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8_SINT
argument_list|,
name|DXGI_FORMAT_R8G8_SINT
argument_list|,
name|DXGI_FORMAT_R8G8_SINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RG8UI
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8_UINT
argument_list|,
name|DXGI_FORMAT_R8G8_UINT
argument_list|,
name|DXGI_FORMAT_R8G8_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RG8_SNORM
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8_SNORM
argument_list|,
name|DXGI_FORMAT_R8G8_SNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB10_A2
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R10G10B10A2_UNORM
argument_list|,
name|DXGI_FORMAT_R10G10B10A2_UNORM
argument_list|,
name|DXGI_FORMAT_R10G10B10A2_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB10_A2UI
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R10G10B10A2_UINT
argument_list|,
name|DXGI_FORMAT_R10G10B10A2_UINT
argument_list|,
name|DXGI_FORMAT_R10G10B10A2_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB16F
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB16I
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB16UI
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB32F
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB32I
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB32UI
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_UINT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_UINT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB565
case|:
block|{
if|if
condition|(
name|SupportsFormat
argument_list|<
name|DXGI_FORMAT_B5G6R5_UNORM
argument_list|,
literal|false
argument_list|>
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
elseif|else
if|if
condition|(
name|SupportsFormat
argument_list|<
name|DXGI_FORMAT_B5G6R5_UNORM
argument_list|,
literal|true
argument_list|>
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_B5G6R5_UNORM
argument_list|,
name|DXGI_FORMAT_B5G6R5_UNORM
argument_list|,
name|DXGI_FORMAT_B5G6R5_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB5_A1
case|:
block|{
if|if
condition|(
name|SupportsFormat
argument_list|<
name|DXGI_FORMAT_B5G5R5A1_UNORM
argument_list|,
literal|false
argument_list|>
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
elseif|else
if|if
condition|(
name|SupportsFormat
argument_list|<
name|DXGI_FORMAT_B5G5R5A1_UNORM
argument_list|,
literal|true
argument_list|>
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_B5G5R5A1_UNORM
argument_list|,
name|DXGI_FORMAT_B5G5R5A1_UNORM
argument_list|,
name|DXGI_FORMAT_B5G5R5A1_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB8
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB8I
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB8UI
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB8_SNORM
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGB9_E5
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R9G9B9E5_SHAREDEXP
argument_list|,
name|DXGI_FORMAT_R9G9B9E5_SHAREDEXP
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGBA
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGBA16F
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGBA16I
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGBA16UI
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGBA32F
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGBA32I
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGBA32UI
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_UINT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_UINT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGBA4
case|:
block|{
if|if
condition|(
name|SupportsFormat
argument_list|<
name|DXGI_FORMAT_B4G4R4A4_UNORM
argument_list|,
literal|false
argument_list|>
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
elseif|else
if|if
condition|(
name|SupportsFormat
argument_list|<
name|DXGI_FORMAT_B4G4R4A4_UNORM
argument_list|,
literal|true
argument_list|>
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_B4G4R4A4_UNORM
argument_list|,
name|DXGI_FORMAT_B4G4R4A4_UNORM
argument_list|,
name|DXGI_FORMAT_B4G4R4A4_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGBA8
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGBA8I
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGBA8UI
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_RGBA8_SNORM
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SNORM
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_SRGB8
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_SRGB8_ALPHA8
case|:
block|{
if|if
condition|(
name|AnyDevice
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
case|case
name|GL_STENCIL_INDEX8
case|:
block|{
if|if
condition|(
name|OnlyFL9_3
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_D24_UNORM_S8_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_D24_UNORM_S8_UINT
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
elseif|else
if|if
condition|(
name|OnlyFL10Plus
argument_list|(
name|renderer11DeviceCaps
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|TextureFormat
name|textureFormat
init|=
name|GetD3D11FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|DXGI_FORMAT_R24G8_TYPELESS
argument_list|,
name|DXGI_FORMAT_X24_TYPELESS_G8_UINT
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_D24_UNORM_S8_UINT
argument_list|)
decl_stmt|;
return|return
name|textureFormat
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
default|default:
break|break;
block|}
comment|// clang-format on
specifier|static
specifier|const
name|TextureFormat
name|defaultInfo
decl_stmt|;
return|return
name|defaultInfo
return|;
block|}
comment|// GetTextureFormatInfo
block|}
comment|// namespace d3d11
block|}
end_namespace
begin_comment
comment|// namespace rx
end_comment
end_unit
