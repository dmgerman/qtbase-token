begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// StateManager11.h: Defines a class for caching D3D11 state
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D11_STATEMANAGER11_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D11_STATEMANAGER11_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D11_STATEMANAGER11_H_
end_define
begin_include
include|#
directive|include
file|<array>
end_include
begin_include
include|#
directive|include
file|"libANGLE/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Data.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/State.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/RenderStateCache.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/RendererD3D.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
struct_decl|struct
name|RenderTargetDesc
struct_decl|;
struct_decl|struct
name|Renderer11DeviceCaps
struct_decl|;
struct|struct
name|dx_VertexConstants11
block|{
name|float
name|depthRange
index|[
literal|4
index|]
decl_stmt|;
name|float
name|viewAdjust
index|[
literal|4
index|]
decl_stmt|;
name|float
name|viewCoords
index|[
literal|4
index|]
decl_stmt|;
name|float
name|viewScale
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|dx_PixelConstants11
block|{
name|float
name|depthRange
index|[
literal|4
index|]
decl_stmt|;
name|float
name|viewCoords
index|[
literal|4
index|]
decl_stmt|;
name|float
name|depthFront
index|[
literal|4
index|]
decl_stmt|;
name|float
name|viewScale
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
name|class
name|StateManager11
name|final
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|StateManager11
argument_list|(
name|Renderer11
operator|*
name|renderer
argument_list|)
block|;
operator|~
name|StateManager11
argument_list|()
block|;
name|void
name|initialize
argument_list|(
specifier|const
name|gl
operator|::
name|Caps
operator|&
name|caps
argument_list|)
block|;
name|void
name|syncState
argument_list|(
specifier|const
name|gl
operator|::
name|State
operator|&
name|state
argument_list|,
specifier|const
name|gl
operator|::
name|State
operator|::
name|DirtyBits
operator|&
name|dirtyBits
argument_list|)
block|;
name|gl
operator|::
name|Error
name|setBlendState
argument_list|(
argument|const gl::Framebuffer *framebuffer
argument_list|,
argument|const gl::BlendState&blendState
argument_list|,
argument|const gl::ColorF&blendColor
argument_list|,
argument|unsigned int sampleMask
argument_list|)
block|;
name|gl
operator|::
name|Error
name|setDepthStencilState
argument_list|(
specifier|const
name|gl
operator|::
name|State
operator|&
name|glState
argument_list|)
block|;
name|gl
operator|::
name|Error
name|setRasterizerState
argument_list|(
specifier|const
name|gl
operator|::
name|RasterizerState
operator|&
name|rasterState
argument_list|)
block|;
name|void
name|setScissorRectangle
argument_list|(
argument|const gl::Rectangle&scissor
argument_list|,
argument|bool enabled
argument_list|)
block|;
name|void
name|setViewport
argument_list|(
argument|const gl::Caps *caps
argument_list|,
argument|const gl::Rectangle&viewport
argument_list|,
argument|float zNear
argument_list|,
argument|float zFar
argument_list|)
block|;
name|void
name|updatePresentPath
argument_list|(
argument|bool presentPathFastActive
argument_list|,
argument|const gl::FramebufferAttachment *framebufferAttachment
argument_list|)
block|;
specifier|const
name|dx_VertexConstants11
operator|&
name|getVertexConstants
argument_list|()
specifier|const
block|{
return|return
name|mVertexConstants
return|;
block|}
specifier|const
name|dx_PixelConstants11
operator|&
name|getPixelConstants
argument_list|()
specifier|const
block|{
return|return
name|mPixelConstants
return|;
block|}
name|void
name|updateStencilSizeIfChanged
argument_list|(
argument|bool depthStencilInitialized
argument_list|,
argument|unsigned int stencilSize
argument_list|)
block|;
name|void
name|setShaderResource
argument_list|(
argument|gl::SamplerType shaderType
argument_list|,
argument|UINT resourceSlot
argument_list|,
argument|ID3D11ShaderResourceView *srv
argument_list|)
block|;
name|gl
operator|::
name|Error
name|clearTextures
argument_list|(
argument|gl::SamplerType samplerType
argument_list|,
argument|size_t rangeStart
argument_list|,
argument|size_t rangeEnd
argument_list|)
block|;
name|gl
operator|::
name|Error
name|syncFramebuffer
argument_list|(
specifier|const
name|gl
operator|::
name|Framebuffer
operator|*
name|framebuffer
argument_list|)
block|;
name|void
name|invalidateRenderTarget
argument_list|()
block|;
name|void
name|invalidateEverything
argument_list|()
block|;
name|bool
name|setRenderTargets
argument_list|(
specifier|const
name|RenderTargetArray
operator|&
name|renderTargets
argument_list|,
name|ID3D11DepthStencilView
operator|*
name|depthStencil
argument_list|)
block|;
name|void
name|setRenderTarget
argument_list|(
name|ID3D11RenderTargetView
operator|*
name|renderTarget
argument_list|,
name|ID3D11DepthStencilView
operator|*
name|depthStencil
argument_list|)
block|;
name|private
operator|:
name|void
name|unsetConflictingSRVs
argument_list|(
argument|gl::SamplerType shaderType
argument_list|,
argument|uintptr_t resource
argument_list|,
argument|const gl::ImageIndex&index
argument_list|)
block|;
name|void
name|setViewportBounds
argument_list|(
argument|const int width
argument_list|,
argument|const int height
argument_list|)
block|;
name|Renderer11
operator|*
name|mRenderer
block|;
comment|// Blend State
name|bool
name|mBlendStateIsDirty
block|;
comment|// TODO(dianx) temporary representation of a dirty bit. once we move enough states in,
comment|// try experimenting with dirty bit instead of a bool
name|gl
operator|::
name|BlendState
name|mCurBlendState
block|;
name|gl
operator|::
name|ColorF
name|mCurBlendColor
block|;
name|unsigned
name|int
name|mCurSampleMask
block|;
comment|// Currently applied depth stencil state
name|bool
name|mDepthStencilStateIsDirty
block|;
name|gl
operator|::
name|DepthStencilState
name|mCurDepthStencilState
block|;
name|int
name|mCurStencilRef
block|;
name|int
name|mCurStencilBackRef
block|;
name|unsigned
name|int
name|mCurStencilSize
block|;
name|Optional
operator|<
name|bool
operator|>
name|mCurDisableDepth
block|;
name|Optional
operator|<
name|bool
operator|>
name|mCurDisableStencil
block|;
comment|// Currently applied rasterizer state
name|bool
name|mRasterizerStateIsDirty
block|;
name|gl
operator|::
name|RasterizerState
name|mCurRasterState
block|;
comment|// Currently applied scissor rectangle state
name|bool
name|mScissorStateIsDirty
block|;
name|bool
name|mCurScissorEnabled
block|;
name|gl
operator|::
name|Rectangle
name|mCurScissorRect
block|;
comment|// Currently applied viewport state
name|bool
name|mViewportStateIsDirty
block|;
name|gl
operator|::
name|Rectangle
name|mCurViewport
block|;
name|float
name|mCurNear
block|;
name|float
name|mCurFar
block|;
comment|// Things needed in viewport state
name|dx_VertexConstants11
name|mVertexConstants
block|;
name|dx_PixelConstants11
name|mPixelConstants
block|;
comment|// Render target variables
name|gl
operator|::
name|Extents
name|mViewportBounds
block|;
comment|// EGL_ANGLE_experimental_present_path variables
name|bool
name|mCurPresentPathFastEnabled
block|;
name|int
name|mCurPresentPathFastColorBufferHeight
block|;
comment|// Current RenderTarget state
name|std
operator|::
name|array
operator|<
name|uintptr_t
block|,
name|gl
operator|::
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
operator|>
name|mAppliedRTVs
block|;
name|uintptr_t
name|mAppliedDSV
block|;
comment|// Currently applied textures
block|struct
name|SRVRecord
block|{
name|uintptr_t
name|srv
block|;
name|uintptr_t
name|resource
block|;
name|D3D11_SHADER_RESOURCE_VIEW_DESC
name|desc
block|;     }
block|;
comment|// A cache of current SRVs that also tracks the highest 'used' (non-NULL) SRV
comment|// We might want to investigate a more robust approach that is also fast when there's
comment|// a large gap between used SRVs (e.g. if SRV 0 and 7 are non-NULL, this approach will
comment|// waste time on SRVs 1-6.)
name|class
name|SRVCache
operator|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|SRVCache
argument_list|()
operator|:
name|mHighestUsedSRV
argument_list|(
literal|0
argument_list|)
block|{}
name|void
name|initialize
argument_list|(
argument|size_t size
argument_list|)
block|{
name|mCurrentSRVs
operator|.
name|resize
argument_list|(
name|size
argument_list|)
block|; }
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|mCurrentSRVs
operator|.
name|size
argument_list|()
return|;
block|}
name|size_t
name|highestUsed
argument_list|()
specifier|const
block|{
return|return
name|mHighestUsedSRV
return|;
block|}
specifier|const
name|SRVRecord
operator|&
name|operator
index|[]
operator|(
name|size_t
name|index
operator|)
specifier|const
block|{
return|return
name|mCurrentSRVs
index|[
name|index
index|]
return|;
block|}
name|void
name|clear
argument_list|()
block|;
name|void
name|update
argument_list|(
argument|size_t resourceIndex
argument_list|,
argument|ID3D11ShaderResourceView *srv
argument_list|)
block|;
name|private
operator|:
name|std
operator|::
name|vector
operator|<
name|SRVRecord
operator|>
name|mCurrentSRVs
block|;
name|size_t
name|mHighestUsedSRV
block|;     }
block|;
name|SRVCache
name|mCurVertexSRVs
block|;
name|SRVCache
name|mCurPixelSRVs
block|;
comment|// A block of NULL pointers, cached so we don't re-allocate every draw call
name|std
operator|::
name|vector
operator|<
name|ID3D11ShaderResourceView
operator|*
operator|>
name|mNullSRVs
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace rx
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D11_STATEMANAGER11_H_
end_comment
end_unit
