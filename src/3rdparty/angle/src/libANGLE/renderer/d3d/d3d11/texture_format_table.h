begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// texture_format_table:
end_comment
begin_comment
comment|//   Queries for full textureFormat information based on internalFormat
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D_D3D11_TEXTUREFORMATTABLE_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D_D3D11_TEXTUREFORMATTABLE_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D_D3D11_TEXTUREFORMATTABLE_H_
end_define
begin_include
include|#
directive|include
file|<map>
end_include
begin_include
include|#
directive|include
file|"common/platform.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/formatutilsD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|namespace
name|d3d11
block|{
struct|struct
name|LoadImageFunctionInfo
block|{
name|LoadImageFunctionInfo
argument_list|()
operator|:
name|loadFunction
argument_list|(
name|nullptr
argument_list|)
operator|,
name|requiresConversion
argument_list|(
argument|false
argument_list|)
block|{}
name|LoadImageFunctionInfo
argument_list|(
argument|LoadImageFunction loadFunction
argument_list|,
argument|bool requiresConversion
argument_list|)
operator|:
name|loadFunction
argument_list|(
name|loadFunction
argument_list|)
operator|,
name|requiresConversion
argument_list|(
argument|requiresConversion
argument_list|)
block|{     }
name|LoadImageFunction
name|loadFunction
expr_stmt|;
name|bool
name|requiresConversion
decl_stmt|;
block|}
struct|;
struct|struct
name|TextureFormat
block|{
name|TextureFormat
argument_list|()
expr_stmt|;
name|DXGI_FORMAT
name|texFormat
decl_stmt|;
name|DXGI_FORMAT
name|srvFormat
decl_stmt|;
name|DXGI_FORMAT
name|rtvFormat
decl_stmt|;
name|DXGI_FORMAT
name|dsvFormat
decl_stmt|;
name|DXGI_FORMAT
name|renderFormat
decl_stmt|;
name|DXGI_FORMAT
name|swizzleTexFormat
decl_stmt|;
name|DXGI_FORMAT
name|swizzleSRVFormat
decl_stmt|;
name|DXGI_FORMAT
name|swizzleRTVFormat
decl_stmt|;
name|InitializeTextureDataFunction
name|dataInitializerFunction
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|GLenum
operator|,
name|LoadImageFunctionInfo
operator|>
name|LoadFunctionMap
expr_stmt|;
name|LoadFunctionMap
name|loadFunctions
decl_stmt|;
block|}
struct|;
specifier|const
name|TextureFormat
modifier|&
name|GetTextureFormatInfo
parameter_list|(
name|GLenum
name|internalformat
parameter_list|,
specifier|const
name|Renderer11DeviceCaps
modifier|&
name|renderer11DeviceCaps
parameter_list|)
function_decl|;
block|}
comment|// namespace d3d11
block|}
end_decl_stmt
begin_comment
comment|// namespace rx
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D_D3D11_TEXTUREFORMATTABLE_H_
end_comment
end_unit
