begin_unit
begin_comment
comment|// GENERATED FILE - DO NOT EDIT
end_comment
begin_comment
comment|// Generated by gen_swizzle_format_table.py using data from swizzle_format_data.json
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// swizzle_format_info:
end_comment
begin_comment
comment|//   Provides information for swizzle format and a map from type->formatinfo
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/d3d11/swizzle_format_info.h"
end_include
begin_include
include|#
directive|include
file|<GLES3/gl3.h>
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|namespace|d3d11
namespace|namespace
name|d3d11
block|{
DECL|function|SwizzleSizeType
name|SwizzleSizeType
operator|::
name|SwizzleSizeType
parameter_list|()
member_init_list|:
name|maxComponentSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|componentType
argument_list|(
name|GL_NONE
argument_list|)
block|{ }
DECL|function|SwizzleSizeType
name|SwizzleSizeType
operator|::
name|SwizzleSizeType
parameter_list|(
name|size_t
name|maxComponentSize
parameter_list|,
name|GLenum
name|componentType
parameter_list|)
member_init_list|:
name|maxComponentSize
argument_list|(
name|maxComponentSize
argument_list|)
member_init_list|,
name|componentType
argument_list|(
name|componentType
argument_list|)
block|{ }
DECL|function|operator <
name|bool
name|SwizzleSizeType
operator|::
name|operator
name|<
parameter_list|(
specifier|const
name|SwizzleSizeType
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|maxComponentSize
operator|!=
name|other
operator|.
name|maxComponentSize
operator|)
condition|?
operator|(
name|maxComponentSize
operator|<
name|other
operator|.
name|maxComponentSize
operator|)
else|:
operator|(
name|componentType
operator|<
name|other
operator|.
name|componentType
operator|)
return|;
block|}
DECL|function|SwizzleFormatInfo
name|SwizzleFormatInfo
operator|::
name|SwizzleFormatInfo
parameter_list|()
member_init_list|:
name|mTexFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|mSRVFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|mRTVFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
block|{ }
DECL|function|SwizzleFormatInfo
name|SwizzleFormatInfo
operator|::
name|SwizzleFormatInfo
parameter_list|(
name|DXGI_FORMAT
name|texFormat
parameter_list|,
name|DXGI_FORMAT
name|srvFormat
parameter_list|,
name|DXGI_FORMAT
name|rtvFormat
parameter_list|)
member_init_list|:
name|mTexFormat
argument_list|(
name|texFormat
argument_list|)
member_init_list|,
name|mSRVFormat
argument_list|(
name|srvFormat
argument_list|)
member_init_list|,
name|mRTVFormat
argument_list|(
name|rtvFormat
argument_list|)
block|{ }
DECL|function|GetSwizzleFormatInfo
specifier|const
name|SwizzleFormatInfo
modifier|&
name|GetSwizzleFormatInfo
parameter_list|(
name|GLuint
name|maxBits
parameter_list|,
name|GLenum
name|componentType
parameter_list|)
block|{
comment|// clang-format off
switch|switch
condition|(
name|componentType
condition|)
block|{
case|case
name|GL_FLOAT
case|:
block|{
switch|switch
condition|(
name|maxBits
condition|)
block|{
case|case
literal|16
case|:
block|{
specifier|static
specifier|const
name|SwizzleFormatInfo
name|formatInfo
argument_list|(
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_FLOAT
argument_list|)
decl_stmt|;
return|return
name|formatInfo
return|;
block|}
case|case
literal|32
case|:
block|{
specifier|static
specifier|const
name|SwizzleFormatInfo
name|formatInfo
argument_list|(
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|)
decl_stmt|;
return|return
name|formatInfo
return|;
block|}
default|default:
break|break;
block|}
block|}
case|case
name|GL_INT
case|:
block|{
switch|switch
condition|(
name|maxBits
condition|)
block|{
case|case
literal|16
case|:
block|{
specifier|static
specifier|const
name|SwizzleFormatInfo
name|formatInfo
argument_list|(
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_SINT
argument_list|)
decl_stmt|;
return|return
name|formatInfo
return|;
block|}
case|case
literal|32
case|:
block|{
specifier|static
specifier|const
name|SwizzleFormatInfo
name|formatInfo
argument_list|(
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|)
decl_stmt|;
return|return
name|formatInfo
return|;
block|}
case|case
literal|8
case|:
block|{
specifier|static
specifier|const
name|SwizzleFormatInfo
name|formatInfo
argument_list|(
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SINT
argument_list|)
decl_stmt|;
return|return
name|formatInfo
return|;
block|}
default|default:
break|break;
block|}
block|}
case|case
name|GL_SIGNED_NORMALIZED
case|:
block|{
switch|switch
condition|(
name|maxBits
condition|)
block|{
case|case
literal|8
case|:
block|{
specifier|static
specifier|const
name|SwizzleFormatInfo
name|formatInfo
argument_list|(
name|DXGI_FORMAT_R8G8B8A8_SNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_SNORM
argument_list|)
decl_stmt|;
return|return
name|formatInfo
return|;
block|}
default|default:
break|break;
block|}
block|}
case|case
name|GL_UNSIGNED_INT
case|:
block|{
switch|switch
condition|(
name|maxBits
condition|)
block|{
case|case
literal|16
case|:
block|{
specifier|static
specifier|const
name|SwizzleFormatInfo
name|formatInfo
argument_list|(
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UINT
argument_list|)
decl_stmt|;
return|return
name|formatInfo
return|;
block|}
case|case
literal|32
case|:
block|{
specifier|static
specifier|const
name|SwizzleFormatInfo
name|formatInfo
argument_list|(
name|DXGI_FORMAT_R32G32B32A32_UINT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_UINT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_UINT
argument_list|)
decl_stmt|;
return|return
name|formatInfo
return|;
block|}
case|case
literal|8
case|:
block|{
specifier|static
specifier|const
name|SwizzleFormatInfo
name|formatInfo
argument_list|(
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UINT
argument_list|)
decl_stmt|;
return|return
name|formatInfo
return|;
block|}
default|default:
break|break;
block|}
block|}
case|case
name|GL_UNSIGNED_NORMALIZED
case|:
block|{
switch|switch
condition|(
name|maxBits
condition|)
block|{
case|case
literal|16
case|:
block|{
specifier|static
specifier|const
name|SwizzleFormatInfo
name|formatInfo
argument_list|(
name|DXGI_FORMAT_R16G16B16A16_UNORM
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UNORM
argument_list|,
name|DXGI_FORMAT_R16G16B16A16_UNORM
argument_list|)
decl_stmt|;
return|return
name|formatInfo
return|;
block|}
case|case
literal|24
case|:
block|{
specifier|static
specifier|const
name|SwizzleFormatInfo
name|formatInfo
argument_list|(
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|)
decl_stmt|;
return|return
name|formatInfo
return|;
block|}
case|case
literal|32
case|:
block|{
specifier|static
specifier|const
name|SwizzleFormatInfo
name|formatInfo
argument_list|(
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|)
decl_stmt|;
return|return
name|formatInfo
return|;
block|}
case|case
literal|8
case|:
block|{
specifier|static
specifier|const
name|SwizzleFormatInfo
name|formatInfo
argument_list|(
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
argument_list|)
decl_stmt|;
return|return
name|formatInfo
return|;
block|}
default|default:
break|break;
block|}
block|}
default|default:
block|{
specifier|static
specifier|const
name|SwizzleFormatInfo
name|defaultInfo
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|,
name|DXGI_FORMAT_UNKNOWN
argument_list|)
decl_stmt|;
return|return
name|defaultInfo
return|;
block|}
block|}
comment|// clang-format on
block|}
comment|// GetSwizzleFormatInfo
block|}
comment|// namespace d3d11
block|}
end_namespace
begin_comment
comment|// namespace rx
end_comment
end_unit
