begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// InputLayoutCache.h: Defines InputLayoutCache, a class that builds and caches
end_comment
begin_comment
comment|// D3D11 input layouts.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D_D3D11_INPUTLAYOUTCACHE_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D_D3D11_INPUTLAYOUTCACHE_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D_D3D11_INPUTLAYOUTCACHE_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/Constants.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|<GLES2/gl2.h>
end_include
begin_include
include|#
directive|include
file|<cstddef>
end_include
begin_include
include|#
directive|include
file|<unordered_map>
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Program
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|rx
block|{
struct_decl|struct
name|TranslatedAttribute
struct_decl|;
name|class
name|InputLayoutCache
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|InputLayoutCache
argument_list|()
block|;
name|virtual
operator|~
name|InputLayoutCache
argument_list|()
block|;
name|void
name|initialize
argument_list|(
name|ID3D11Device
operator|*
name|device
argument_list|,
name|ID3D11DeviceContext
operator|*
name|context
argument_list|)
block|;
name|void
name|clear
argument_list|()
block|;
name|void
name|markDirty
argument_list|()
block|;
name|gl
operator|::
name|Error
name|applyVertexBuffers
argument_list|(
argument|TranslatedAttribute attributes[gl::MAX_VERTEX_ATTRIBS]
argument_list|,
argument|GLenum mode
argument_list|,
argument|gl::Program *program
argument_list|)
block|;
name|private
operator|:
expr|struct
name|InputLayoutElement
block|{
name|D3D11_INPUT_ELEMENT_DESC
name|desc
block|;
name|GLenum
name|glslElementType
block|;     }
block|;      struct
name|InputLayoutKey
block|{
name|unsigned
name|int
name|elementCount
block|;
name|InputLayoutElement
name|elements
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
block|;
specifier|const
name|char
operator|*
name|begin
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
operator|&
name|elementCount
operator|)
return|;
block|}
specifier|const
name|char
operator|*
name|end
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
operator|&
name|elements
index|[
name|elementCount
index|]
operator|)
return|;
block|}
expr|}
block|;      struct
name|InputLayoutCounterPair
block|{
name|ID3D11InputLayout
operator|*
name|inputLayout
block|;
name|unsigned
name|long
name|long
name|lastUsedTime
block|;     }
block|;
name|ID3D11InputLayout
operator|*
name|mCurrentIL
block|;
name|ID3D11Buffer
operator|*
name|mCurrentBuffers
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
block|;
name|UINT
name|mCurrentVertexStrides
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
block|;
name|UINT
name|mCurrentVertexOffsets
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
block|;
name|ID3D11Buffer
operator|*
name|mPointSpriteVertexBuffer
block|;
name|ID3D11Buffer
operator|*
name|mPointSpriteIndexBuffer
block|;
specifier|static
name|std
operator|::
name|size_t
name|hashInputLayout
argument_list|(
specifier|const
name|InputLayoutKey
operator|&
name|inputLayout
argument_list|)
block|;
specifier|static
name|bool
name|compareInputLayouts
argument_list|(
specifier|const
name|InputLayoutKey
operator|&
name|a
argument_list|,
specifier|const
name|InputLayoutKey
operator|&
name|b
argument_list|)
block|;
typedef|typedef
name|std
operator|::
name|size_t
argument_list|(
operator|*
name|InputLayoutHashFunction
argument_list|)
argument_list|(
specifier|const
name|InputLayoutKey
operator|&
argument_list|)
expr_stmt|;
typedef|typedef
name|bool
function_decl|(
modifier|*
name|InputLayoutEqualityFunction
function_decl|)
parameter_list|(
specifier|const
name|InputLayoutKey
modifier|&
parameter_list|,
specifier|const
name|InputLayoutKey
modifier|&
parameter_list|)
function_decl|;
typedef|typedef
name|std
operator|::
name|unordered_map
operator|<
name|InputLayoutKey
operator|,
name|InputLayoutCounterPair
operator|,
name|InputLayoutHashFunction
operator|,
name|InputLayoutEqualityFunction
operator|>
name|InputLayoutMap
expr_stmt|;
name|InputLayoutMap
name|mInputLayoutMap
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|int
name|kMaxInputLayouts
decl_stmt|;
name|unsigned
name|long
name|long
name|mCounter
decl_stmt|;
name|ID3D11Device
modifier|*
name|mDevice
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|mDeviceContext
decl_stmt|;
name|D3D_FEATURE_LEVEL
name|mFeatureLevel
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D_D3D11_INPUTLAYOUTCACHE_H_
end_comment
end_unit
