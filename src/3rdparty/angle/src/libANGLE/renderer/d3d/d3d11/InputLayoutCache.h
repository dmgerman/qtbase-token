begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// InputLayoutCache.h: Defines InputLayoutCache, a class that builds and caches
end_comment
begin_comment
comment|// D3D11 input layouts.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D_D3D11_INPUTLAYOUTCACHE_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D_D3D11_INPUTLAYOUTCACHE_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D_D3D11_INPUTLAYOUTCACHE_H_
end_define
begin_include
include|#
directive|include
file|<GLES2/gl2.h>
end_include
begin_include
include|#
directive|include
file|<cstddef>
end_include
begin_include
include|#
directive|include
file|<array>
end_include
begin_include
include|#
directive|include
file|<map>
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Constants.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Program
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|rx
block|{
struct_decl|struct
name|TranslatedAttribute
struct_decl|;
struct_decl|struct
name|TranslatedIndexData
struct_decl|;
struct_decl|struct
name|SourceIndexData
struct_decl|;
name|class
name|ProgramD3D
decl_stmt|;
name|using
name|SortedAttribArray
init|=
name|std
operator|::
name|array
operator|<
specifier|const
name|TranslatedAttribute
operator|*
decl_stmt|,
name|gl
decl|::
name|MAX_VERTEX_ATTRIBS
decl|>
decl_stmt|;
name|using
name|SortedIndexArray
init|=
name|std
operator|::
name|array
operator|<
name|int
decl_stmt|,
name|gl
decl|::
name|MAX_VERTEX_ATTRIBS
decl|>
decl_stmt|;
name|class
name|InputLayoutCache
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|InputLayoutCache
argument_list|()
block|;
name|virtual
operator|~
name|InputLayoutCache
argument_list|()
block|;
name|void
name|initialize
argument_list|(
name|ID3D11Device
operator|*
name|device
argument_list|,
name|ID3D11DeviceContext
operator|*
name|context
argument_list|)
block|;
name|void
name|clear
argument_list|()
block|;
name|void
name|markDirty
argument_list|()
block|;
name|gl
operator|::
name|Error
name|applyVertexBuffers
argument_list|(
argument|const std::vector<TranslatedAttribute>&attributes
argument_list|,
argument|GLenum mode
argument_list|,
argument|gl::Program *program
argument_list|,
argument|TranslatedIndexData *indexInfo
argument_list|,
argument|GLsizei numIndicesPerInstance
argument_list|)
block|;
name|gl
operator|::
name|Error
name|updateVertexOffsetsForPointSpritesEmulation
argument_list|(
argument|GLsizei emulatedInstanceId
argument_list|)
block|;
comment|// Useful for testing
name|void
name|setCacheSize
argument_list|(
argument|unsigned int cacheSize
argument_list|)
block|{
name|mCacheSize
operator|=
name|cacheSize
block|; }
name|private
operator|:
expr|struct
name|PackedAttributeLayout
block|{
name|PackedAttributeLayout
argument_list|()
operator|:
name|numAttributes
argument_list|(
literal|0
argument_list|)
block|,
name|flags
argument_list|(
literal|0
argument_list|)
block|{         }
name|void
name|addAttributeData
argument_list|(
argument|GLenum glType
argument_list|,
argument|UINT semanticIndex
argument_list|,
argument|gl::VertexFormatType vertexFormatType
argument_list|,
argument|unsigned int divisor
argument_list|)
block|;
name|bool
name|operator
operator|<
operator|(
specifier|const
name|PackedAttributeLayout
operator|&
name|other
operator|)
specifier|const
block|;          enum
name|Flags
block|{
name|FLAG_USES_INSTANCED_SPRITES
operator|=
literal|0x1
block|,
name|FLAG_INSTANCED_SPRITES_ACTIVE
operator|=
literal|0x2
block|,
name|FLAG_INSTANCED_RENDERING_ACTIVE
operator|=
literal|0x4
block|,         }
block|;
name|size_t
name|numAttributes
block|;
name|unsigned
name|int
name|flags
block|;
name|uint32_t
name|attributeData
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
block|;     }
block|;
name|gl
operator|::
name|Error
name|updateInputLayout
argument_list|(
argument|gl::Program *program
argument_list|,
argument|GLenum mode
argument_list|,
argument|const SortedAttribArray&sortedAttributes
argument_list|,
argument|const SortedIndexArray&sortedSemanticIndices
argument_list|,
argument|size_t attribCount
argument_list|,
argument|GLsizei numIndicesPerInstance
argument_list|)
block|;
name|gl
operator|::
name|Error
name|createInputLayout
argument_list|(
argument|const SortedAttribArray&sortedAttributes
argument_list|,
argument|const SortedIndexArray&sortedSemanticIndices
argument_list|,
argument|size_t attribCount
argument_list|,
argument|GLenum mode
argument_list|,
argument|gl::Program *program
argument_list|,
argument|GLsizei numIndicesPerInstance
argument_list|,
argument|ID3D11InputLayout **inputLayoutOut
argument_list|)
block|;
name|std
operator|::
name|map
operator|<
name|PackedAttributeLayout
block|,
name|ID3D11InputLayout
operator|*
operator|>
name|mLayoutMap
block|;
name|ID3D11InputLayout
operator|*
name|mCurrentIL
block|;
name|ID3D11Buffer
operator|*
name|mCurrentBuffers
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
block|;
name|UINT
name|mCurrentVertexStrides
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
block|;
name|UINT
name|mCurrentVertexOffsets
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
block|;
name|SortedAttribArray
name|mSortedAttributes
block|;
name|size_t
name|mUnsortedAttributesCount
block|;
name|ID3D11Buffer
operator|*
name|mPointSpriteVertexBuffer
block|;
name|ID3D11Buffer
operator|*
name|mPointSpriteIndexBuffer
block|;
name|unsigned
name|int
name|mCacheSize
block|;
name|unsigned
name|long
name|long
name|mCounter
block|;
name|ID3D11Device
operator|*
name|mDevice
block|;
name|ID3D11DeviceContext
operator|*
name|mDeviceContext
block|;
name|D3D_FEATURE_LEVEL
name|mFeatureLevel
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace rx
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D_D3D11_INPUTLAYOUTCACHE_H_
end_comment
end_unit
