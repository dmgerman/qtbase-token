begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// RenderbufferD3d.cpp: Implements the RenderbufferD3D class, a specialization of RenderbufferImpl
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/RenderbufferD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Image.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/EGLImageD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/RendererD3D.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/RenderTargetD3D.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|RenderbufferD3D
name|RenderbufferD3D
operator|::
name|RenderbufferD3D
parameter_list|(
name|RendererD3D
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mRenderTarget
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mImage
argument_list|(
literal|nullptr
argument_list|)
block|{ }
DECL|function|~RenderbufferD3D
name|RenderbufferD3D
operator|::
name|~
name|RenderbufferD3D
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mRenderTarget
argument_list|)
expr_stmt|;
name|mImage
operator|=
literal|nullptr
expr_stmt|;
block|}
DECL|function|setStorage
name|gl
operator|::
name|Error
name|RenderbufferD3D
operator|::
name|setStorage
parameter_list|(
name|GLenum
name|internalformat
parameter_list|,
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|)
block|{
return|return
name|setStorageMultisample
argument_list|(
literal|0
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
DECL|function|setStorageMultisample
name|gl
operator|::
name|Error
name|RenderbufferD3D
operator|::
name|setStorageMultisample
parameter_list|(
name|size_t
name|samples
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|)
block|{
comment|// If the renderbuffer parameters are queried, the calling function
comment|// will expect one of the valid renderbuffer formats for use in
comment|// glRenderbufferStorage, but we should create depth and stencil buffers
comment|// as DEPTH24_STENCIL8
name|GLenum
name|creationFormat
init|=
name|internalformat
decl_stmt|;
if|if
condition|(
name|internalformat
operator|==
name|GL_DEPTH_COMPONENT16
operator|||
name|internalformat
operator|==
name|GL_STENCIL_INDEX8
condition|)
block|{
name|creationFormat
operator|=
name|GL_DEPTH24_STENCIL8_OES
expr_stmt|;
block|}
comment|// ANGLE_framebuffer_multisample states GL_OUT_OF_MEMORY is generated on a failure to create
comment|// the specified storage.
comment|// Because ES 3.0 already knows the exact number of supported samples, it would already have been
comment|// validated and generated GL_INVALID_VALUE.
specifier|const
name|gl
operator|::
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|mRenderer
operator|->
name|getRendererTextureCaps
argument_list|()
operator|.
name|get
argument_list|(
name|creationFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|samples
operator|>
name|formatCaps
operator|.
name|getMaxSamples
argument_list|()
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Renderbuffer format does not support %u samples, %u is the maximum."
argument_list|,
name|samples
argument_list|,
name|formatCaps
operator|.
name|getMaxSamples
argument_list|()
argument_list|)
return|;
block|}
name|RenderTargetD3D
modifier|*
name|newRT
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|mRenderer
operator|->
name|createRenderTarget
argument_list|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|width
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|height
argument_list|)
argument_list|,
name|creationFormat
argument_list|,
cast|static_cast
argument_list|<
name|GLsizei
argument_list|>
argument_list|(
name|samples
argument_list|)
argument_list|,
operator|&
name|newRT
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|SafeDelete
argument_list|(
name|mRenderTarget
argument_list|)
expr_stmt|;
name|mImage
operator|=
literal|nullptr
expr_stmt|;
name|mRenderTarget
operator|=
name|newRT
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|setStorageEGLImageTarget
name|gl
operator|::
name|Error
name|RenderbufferD3D
operator|::
name|setStorageEGLImageTarget
parameter_list|(
name|egl
operator|::
name|Image
modifier|*
name|image
parameter_list|)
block|{
name|mImage
operator|=
name|GetImplAs
argument_list|<
name|EGLImageD3D
argument_list|>
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mRenderTarget
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getRenderTarget
name|gl
operator|::
name|Error
name|RenderbufferD3D
operator|::
name|getRenderTarget
parameter_list|(
name|RenderTargetD3D
modifier|*
modifier|*
name|outRenderTarget
parameter_list|)
block|{
if|if
condition|(
name|mImage
condition|)
block|{
return|return
name|mImage
operator|->
name|getRenderTarget
argument_list|(
name|outRenderTarget
argument_list|)
return|;
block|}
else|else
block|{
operator|*
name|outRenderTarget
operator|=
name|mRenderTarget
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
block|}
DECL|function|getAttachmentRenderTarget
name|gl
operator|::
name|Error
name|RenderbufferD3D
operator|::
name|getAttachmentRenderTarget
parameter_list|(
specifier|const
name|gl
operator|::
name|FramebufferAttachment
operator|::
name|Target
modifier|&
name|target
parameter_list|,
name|FramebufferAttachmentRenderTarget
modifier|*
modifier|*
name|rtOut
parameter_list|)
block|{
return|return
name|getRenderTarget
argument_list|(
cast|reinterpret_cast
argument_list|<
name|RenderTargetD3D
operator|*
operator|*
argument_list|>
argument_list|(
name|rtOut
argument_list|)
argument_list|)
return|;
block|}
block|}
end_namespace
end_unit
