begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// IndexBuffer.h: Defines the abstract IndexBuffer class and IndexBufferInterface
end_comment
begin_comment
comment|// class with derivations, classes that perform graphics API agnostic index buffer operations.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D_INDEXBUFFER_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D_INDEXBUFFER_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D_INDEXBUFFER_H_
end_define
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/IndexRangeCache.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|BufferFactoryD3D
decl_stmt|;
name|class
name|IndexBuffer
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|IndexBuffer
argument_list|()
block|;
name|virtual
operator|~
name|IndexBuffer
argument_list|()
block|;
name|virtual
name|gl
operator|::
name|Error
name|initialize
argument_list|(
argument|unsigned int bufferSize
argument_list|,
argument|GLenum indexType
argument_list|,
argument|bool dynamic
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|gl
operator|::
name|Error
name|mapBuffer
argument_list|(
argument|unsigned int offset
argument_list|,
argument|unsigned int size
argument_list|,
argument|void** outMappedMemory
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|gl
operator|::
name|Error
name|unmapBuffer
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|gl
operator|::
name|Error
name|discard
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|GLenum
name|getIndexType
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|unsigned
name|int
name|getBufferSize
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|gl
operator|::
name|Error
name|setSize
argument_list|(
argument|unsigned int bufferSize
argument_list|,
argument|GLenum indexType
argument_list|)
operator|=
literal|0
block|;
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
block|;
name|protected
operator|:
name|void
name|updateSerial
argument_list|()
block|;
name|private
operator|:
name|unsigned
name|int
name|mSerial
block|;
specifier|static
name|unsigned
name|int
name|mNextSerial
block|; }
decl_stmt|;
name|class
name|IndexBufferInterface
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|IndexBufferInterface
argument_list|(
argument|BufferFactoryD3D *factory
argument_list|,
argument|bool dynamic
argument_list|)
block|;
name|virtual
operator|~
name|IndexBufferInterface
argument_list|()
block|;
name|virtual
name|gl
operator|::
name|Error
name|reserveBufferSpace
argument_list|(
argument|unsigned int size
argument_list|,
argument|GLenum indexType
argument_list|)
operator|=
literal|0
block|;
name|GLenum
name|getIndexType
argument_list|()
specifier|const
block|;
name|unsigned
name|int
name|getBufferSize
argument_list|()
specifier|const
block|;
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
block|;
name|gl
operator|::
name|Error
name|mapBuffer
argument_list|(
argument|unsigned int size
argument_list|,
argument|void** outMappedMemory
argument_list|,
argument|unsigned int *streamOffset
argument_list|)
block|;
name|gl
operator|::
name|Error
name|unmapBuffer
argument_list|()
block|;
name|IndexBuffer
operator|*
name|getIndexBuffer
argument_list|()
specifier|const
block|;
name|protected
operator|:
name|unsigned
name|int
name|getWritePosition
argument_list|()
specifier|const
block|;
name|void
name|setWritePosition
argument_list|(
argument|unsigned int writePosition
argument_list|)
block|;
name|gl
operator|::
name|Error
name|discard
argument_list|()
block|;
name|gl
operator|::
name|Error
name|setBufferSize
argument_list|(
argument|unsigned int bufferSize
argument_list|,
argument|GLenum indexType
argument_list|)
block|;
name|private
operator|:
name|IndexBuffer
operator|*
name|mIndexBuffer
block|;
name|unsigned
name|int
name|mWritePosition
block|;
name|bool
name|mDynamic
block|; }
decl_stmt|;
name|class
name|StreamingIndexBufferInterface
range|:
name|public
name|IndexBufferInterface
block|{
name|public
operator|:
name|explicit
name|StreamingIndexBufferInterface
argument_list|(
name|BufferFactoryD3D
operator|*
name|factory
argument_list|)
block|;
operator|~
name|StreamingIndexBufferInterface
argument_list|()
block|;
name|gl
operator|::
name|Error
name|reserveBufferSpace
argument_list|(
argument|unsigned int size
argument_list|,
argument|GLenum indexType
argument_list|)
name|override
block|; }
decl_stmt|;
name|class
name|StaticIndexBufferInterface
range|:
name|public
name|IndexBufferInterface
block|{
name|public
operator|:
name|explicit
name|StaticIndexBufferInterface
argument_list|(
name|BufferFactoryD3D
operator|*
name|factory
argument_list|)
block|;
operator|~
name|StaticIndexBufferInterface
argument_list|()
block|;
name|gl
operator|::
name|Error
name|reserveBufferSpace
argument_list|(
argument|unsigned int size
argument_list|,
argument|GLenum indexType
argument_list|)
name|override
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D_INDEXBUFFER_H_
end_comment
end_unit
