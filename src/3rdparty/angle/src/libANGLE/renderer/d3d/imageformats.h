begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013-2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// imageformats.h: Defines image format types with functions for mip generation
end_comment
begin_comment
comment|// and copying.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_D3D_IMAGEFORMATS_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_D3D_IMAGEFORMATS_H_
define|#
directive|define
name|LIBANGLE_RENDERER_D3D_IMAGEFORMATS_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
comment|// Several structures share functionality for reading, writing or mipmapping but the layout
comment|// must match the texture format which the structure represents. If collapsing or typedefing
comment|// structs in this header, make sure the functionality and memory layout is exactly the same.
struct|struct
name|L8
block|{
name|unsigned
name|char
name|L
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|L8
operator|*
name|src
argument_list|)
block|{
specifier|const
name|float
name|lum
init|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|L
argument_list|)
decl_stmt|;
name|dst
operator|->
name|red
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|L8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|L
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
operator|(
name|src
operator|->
name|red
operator|+
name|src
operator|->
name|green
operator|+
name|src
operator|->
name|blue
operator|)
operator|/
literal|3.0f
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|L8
modifier|*
name|dst
parameter_list|,
specifier|const
name|L8
modifier|*
name|src1
parameter_list|,
specifier|const
name|L8
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|L
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|L
argument_list|,
name|src2
operator|->
name|L
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R8
block|{
name|unsigned
name|char
name|R
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|R8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R8
modifier|*
name|dst
parameter_list|,
specifier|const
name|R8
modifier|*
name|src1
parameter_list|,
specifier|const
name|R8
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|A8
block|{
name|unsigned
name|char
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|A8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|A8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|A8
modifier|*
name|dst
parameter_list|,
specifier|const
name|A8
modifier|*
name|src1
parameter_list|,
specifier|const
name|A8
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|L8A8
block|{
name|unsigned
name|char
name|L
decl_stmt|;
name|unsigned
name|char
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|L8A8
operator|*
name|src
argument_list|)
block|{
specifier|const
name|float
name|lum
init|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|L
argument_list|)
decl_stmt|;
name|dst
operator|->
name|red
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|L8A8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|L
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
operator|(
name|src
operator|->
name|red
operator|+
name|src
operator|->
name|green
operator|+
name|src
operator|->
name|blue
operator|)
operator|/
literal|3.0f
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|L8A8
modifier|*
name|dst
parameter_list|,
specifier|const
name|L8A8
modifier|*
name|src1
parameter_list|,
specifier|const
name|L8A8
modifier|*
name|src2
parameter_list|)
block|{
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|dst
operator|=
operator|(
operator|(
operator|(
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|src1
operator|^
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|src2
operator|)
operator|&
literal|0xFEFE
operator|)
operator|>>
literal|1
operator|)
operator|+
operator|(
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|src1
operator|&
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|src2
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|A8L8
block|{
name|unsigned
name|char
name|A
decl_stmt|;
name|unsigned
name|char
name|L
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|A8L8
operator|*
name|src
argument_list|)
block|{
specifier|const
name|float
name|lum
init|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|L
argument_list|)
decl_stmt|;
name|dst
operator|->
name|red
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|A8L8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|L
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
operator|(
name|src
operator|->
name|red
operator|+
name|src
operator|->
name|green
operator|+
name|src
operator|->
name|blue
operator|)
operator|/
literal|3.0f
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|A8L8
modifier|*
name|dst
parameter_list|,
specifier|const
name|A8L8
modifier|*
name|src1
parameter_list|,
specifier|const
name|A8L8
modifier|*
name|src2
parameter_list|)
block|{
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|dst
operator|=
operator|(
operator|(
operator|(
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|src1
operator|^
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|src2
operator|)
operator|&
literal|0xFEFE
operator|)
operator|>>
literal|1
operator|)
operator|+
operator|(
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|src1
operator|&
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|src2
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R8G8
block|{
name|unsigned
name|char
name|R
decl_stmt|;
name|unsigned
name|char
name|G
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R8G8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|R8G8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8G8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8G8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R8G8
modifier|*
name|dst
parameter_list|,
specifier|const
name|R8G8
modifier|*
name|src1
parameter_list|,
specifier|const
name|R8G8
modifier|*
name|src2
parameter_list|)
block|{
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|dst
operator|=
operator|(
operator|(
operator|(
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|src1
operator|^
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|src2
operator|)
operator|&
literal|0xFEFE
operator|)
operator|>>
literal|1
operator|)
operator|+
operator|(
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|src1
operator|&
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
name|src2
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R8G8B8
block|{
name|unsigned
name|char
name|R
decl_stmt|;
name|unsigned
name|char
name|G
decl_stmt|;
name|unsigned
name|char
name|B
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R8G8B8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|R8G8B8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8G8B8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8G8B8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R8G8B8
modifier|*
name|dst
parameter_list|,
specifier|const
name|R8G8B8
modifier|*
name|src1
parameter_list|,
specifier|const
name|R8G8B8
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|B8G8R8
block|{
name|unsigned
name|char
name|B
decl_stmt|;
name|unsigned
name|char
name|G
decl_stmt|;
name|unsigned
name|char
name|R
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|B8G8R8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|B8G8R8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|B8G8R8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|B8G8R8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|B8G8R8
modifier|*
name|dst
parameter_list|,
specifier|const
name|B8G8R8
modifier|*
name|src1
parameter_list|,
specifier|const
name|B8G8R8
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R5G6B5
block|{
comment|// OpenGL ES 2.0.25 spec Section 3.6.2: "Components are packed with the first component in the most significant
comment|// bits of the bitfield, and successive component occupying progressively less significant locations"
name|unsigned
name|short
name|RGB
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R5G6B5
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|5
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
operator|,
literal|11
operator|>
operator|(
name|src
operator|->
name|RGB
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|6
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|6
operator|,
literal|5
operator|>
operator|(
name|src
operator|->
name|RGB
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|5
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
operator|,
literal|0
operator|>
operator|(
name|src
operator|->
name|RGB
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R5G6B5
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|RGB
operator|=
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|11
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|5
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|6
operator|,
literal|5
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|6
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|0
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|5
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R5G6B5
modifier|*
name|dst
parameter_list|,
specifier|const
name|R5G6B5
modifier|*
name|src1
parameter_list|,
specifier|const
name|R5G6B5
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|RGB
operator|=
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|11
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|11
operator|>
operator|(
name|src1
operator|->
name|RGB
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|11
operator|>
operator|(
name|src2
operator|->
name|RGB
operator|)
argument_list|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|6
operator|,
literal|5
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|6
argument_list|,
literal|5
operator|>
operator|(
name|src1
operator|->
name|RGB
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|6
argument_list|,
literal|5
operator|>
operator|(
name|src2
operator|->
name|RGB
operator|)
argument_list|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|0
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|0
operator|>
operator|(
name|src1
operator|->
name|RGB
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|0
operator|>
operator|(
name|src2
operator|->
name|RGB
operator|)
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|A8R8G8B8
block|{
name|unsigned
name|char
name|A
decl_stmt|;
name|unsigned
name|char
name|R
decl_stmt|;
name|unsigned
name|char
name|G
decl_stmt|;
name|unsigned
name|char
name|B
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|A8R8G8B8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|A8R8G8B8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|src
operator|->
name|A
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|A8R8G8B8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|A8R8G8B8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|A8R8G8B8
modifier|*
name|dst
parameter_list|,
specifier|const
name|A8R8G8B8
modifier|*
name|src1
parameter_list|,
specifier|const
name|A8R8G8B8
modifier|*
name|src2
parameter_list|)
block|{
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|dst
operator|=
operator|(
operator|(
operator|(
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src1
operator|^
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src2
operator|)
operator|&
literal|0xFEFEFEFE
operator|)
operator|>>
literal|1
operator|)
operator|+
operator|(
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src1
operator|&
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src2
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R8G8B8A8
block|{
name|unsigned
name|char
name|R
decl_stmt|;
name|unsigned
name|char
name|G
decl_stmt|;
name|unsigned
name|char
name|B
decl_stmt|;
name|unsigned
name|char
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R8G8B8A8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|R8G8B8A8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|src
operator|->
name|A
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8G8B8A8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8G8B8A8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R8G8B8A8
modifier|*
name|dst
parameter_list|,
specifier|const
name|R8G8B8A8
modifier|*
name|src1
parameter_list|,
specifier|const
name|R8G8B8A8
modifier|*
name|src2
parameter_list|)
block|{
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|dst
operator|=
operator|(
operator|(
operator|(
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src1
operator|^
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src2
operator|)
operator|&
literal|0xFEFEFEFE
operator|)
operator|>>
literal|1
operator|)
operator|+
operator|(
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src1
operator|&
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src2
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|B8G8R8A8
block|{
name|unsigned
name|char
name|B
decl_stmt|;
name|unsigned
name|char
name|G
decl_stmt|;
name|unsigned
name|char
name|R
decl_stmt|;
name|unsigned
name|char
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|B8G8R8A8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|B8G8R8A8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|src
operator|->
name|A
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|B8G8R8A8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|B8G8R8A8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|B8G8R8A8
modifier|*
name|dst
parameter_list|,
specifier|const
name|B8G8R8A8
modifier|*
name|src1
parameter_list|,
specifier|const
name|B8G8R8A8
modifier|*
name|src2
parameter_list|)
block|{
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|dst
operator|=
operator|(
operator|(
operator|(
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src1
operator|^
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src2
operator|)
operator|&
literal|0xFEFEFEFE
operator|)
operator|>>
literal|1
operator|)
operator|+
operator|(
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src1
operator|&
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src2
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|B8G8R8X8
block|{
name|unsigned
name|char
name|B
decl_stmt|;
name|unsigned
name|char
name|G
decl_stmt|;
name|unsigned
name|char
name|R
decl_stmt|;
name|unsigned
name|char
name|X
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|B8G8R8X8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|B8G8R8X8
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|B8G8R8X8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|X
operator|=
literal|255
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|B8G8R8X8
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|X
operator|=
literal|255
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|B8G8R8X8
modifier|*
name|dst
parameter_list|,
specifier|const
name|B8G8R8X8
modifier|*
name|src1
parameter_list|,
specifier|const
name|B8G8R8X8
modifier|*
name|src2
parameter_list|)
block|{
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|dst
operator|=
operator|(
operator|(
operator|(
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src1
operator|^
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src2
operator|)
operator|&
literal|0xFEFEFEFE
operator|)
operator|>>
literal|1
operator|)
operator|+
operator|(
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src1
operator|&
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
name|src2
operator|)
expr_stmt|;
name|dst
operator|->
name|X
operator|=
literal|255
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|A1R5G5B5
block|{
name|unsigned
name|short
name|ARGB
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|A1R5G5B5
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|1
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|1
operator|,
literal|15
operator|>
operator|(
name|src
operator|->
name|ARGB
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|5
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
operator|,
literal|10
operator|>
operator|(
name|src
operator|->
name|ARGB
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|5
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
operator|,
literal|5
operator|>
operator|(
name|src
operator|->
name|ARGB
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|5
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
operator|,
literal|0
operator|>
operator|(
name|src
operator|->
name|ARGB
operator|)
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|A1R5G5B5
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|ARGB
operator|=
name|gl
operator|::
name|shiftData
operator|<
literal|1
operator|,
literal|15
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|1
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|10
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|5
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|5
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|5
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|0
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|5
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|A1R5G5B5
modifier|*
name|dst
parameter_list|,
specifier|const
name|A1R5G5B5
modifier|*
name|src1
parameter_list|,
specifier|const
name|A1R5G5B5
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|ARGB
operator|=
name|gl
operator|::
name|shiftData
operator|<
literal|1
operator|,
literal|15
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|1
argument_list|,
literal|15
operator|>
operator|(
name|src1
operator|->
name|ARGB
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|1
argument_list|,
literal|15
operator|>
operator|(
name|src2
operator|->
name|ARGB
operator|)
argument_list|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|10
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|10
operator|>
operator|(
name|src1
operator|->
name|ARGB
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|10
operator|>
operator|(
name|src2
operator|->
name|ARGB
operator|)
argument_list|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|5
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|5
operator|>
operator|(
name|src1
operator|->
name|ARGB
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|5
operator|>
operator|(
name|src2
operator|->
name|ARGB
operator|)
argument_list|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|0
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|0
operator|>
operator|(
name|src1
operator|->
name|ARGB
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|0
operator|>
operator|(
name|src2
operator|->
name|ARGB
operator|)
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R5G5B5A1
block|{
comment|// OpenGL ES 2.0.25 spec Section 3.6.2: "Components are packed with the first component in the most significant
comment|// bits of the bitfield, and successive component occupying progressively less significant locations"
name|unsigned
name|short
name|RGBA
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R5G5B5A1
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|5
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
operator|,
literal|11
operator|>
operator|(
name|src
operator|->
name|RGBA
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|5
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
operator|,
literal|6
operator|>
operator|(
name|src
operator|->
name|RGBA
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|5
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
operator|,
literal|1
operator|>
operator|(
name|src
operator|->
name|RGBA
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|1
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|1
operator|,
literal|0
operator|>
operator|(
name|src
operator|->
name|RGBA
operator|)
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R5G5B5A1
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|RGBA
operator|=
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|11
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|5
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|6
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|5
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|1
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|5
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|1
operator|,
literal|0
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|1
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R5G5B5A1
modifier|*
name|dst
parameter_list|,
specifier|const
name|R5G5B5A1
modifier|*
name|src1
parameter_list|,
specifier|const
name|R5G5B5A1
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|RGBA
operator|=
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|11
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|11
operator|>
operator|(
name|src1
operator|->
name|RGBA
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|11
operator|>
operator|(
name|src2
operator|->
name|RGBA
operator|)
argument_list|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|6
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|6
operator|>
operator|(
name|src1
operator|->
name|RGBA
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|6
operator|>
operator|(
name|src2
operator|->
name|RGBA
operator|)
argument_list|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|5
operator|,
literal|1
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|1
operator|>
operator|(
name|src1
operator|->
name|RGBA
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|5
argument_list|,
literal|1
operator|>
operator|(
name|src2
operator|->
name|RGBA
operator|)
argument_list|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|1
operator|,
literal|0
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|1
argument_list|,
literal|0
operator|>
operator|(
name|src1
operator|->
name|RGBA
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|1
argument_list|,
literal|0
operator|>
operator|(
name|src2
operator|->
name|RGBA
operator|)
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R4G4B4A4
block|{
comment|// OpenGL ES 2.0.25 spec Section 3.6.2: "Components are packed with the first component in the most significant
comment|// bits of the bitfield, and successive component occupying progressively less significant locations"
name|unsigned
name|short
name|RGBA
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R4G4B4A4
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|4
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
operator|,
literal|12
operator|>
operator|(
name|src
operator|->
name|RGBA
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|4
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
operator|,
literal|8
operator|>
operator|(
name|src
operator|->
name|RGBA
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|4
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
operator|,
literal|4
operator|>
operator|(
name|src
operator|->
name|RGBA
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|4
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
operator|,
literal|0
operator|>
operator|(
name|src
operator|->
name|RGBA
operator|)
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R4G4B4A4
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|RGBA
operator|=
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|12
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|4
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|8
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|4
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|4
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|4
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|0
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|4
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R4G4B4A4
modifier|*
name|dst
parameter_list|,
specifier|const
name|R4G4B4A4
modifier|*
name|src1
parameter_list|,
specifier|const
name|R4G4B4A4
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|RGBA
operator|=
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|12
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|12
operator|>
operator|(
name|src1
operator|->
name|RGBA
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|12
operator|>
operator|(
name|src2
operator|->
name|RGBA
operator|)
argument_list|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|8
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|8
operator|>
operator|(
name|src1
operator|->
name|RGBA
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|8
operator|>
operator|(
name|src2
operator|->
name|RGBA
operator|)
argument_list|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|4
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|4
operator|>
operator|(
name|src1
operator|->
name|RGBA
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|4
operator|>
operator|(
name|src2
operator|->
name|RGBA
operator|)
argument_list|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|0
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|0
operator|>
operator|(
name|src1
operator|->
name|RGBA
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|0
operator|>
operator|(
name|src2
operator|->
name|RGBA
operator|)
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|A4R4G4B4
block|{
name|unsigned
name|short
name|ARGB
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|A4R4G4B4
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|4
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
operator|,
literal|12
operator|>
operator|(
name|src
operator|->
name|ARGB
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|4
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
operator|,
literal|8
operator|>
operator|(
name|src
operator|->
name|ARGB
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|4
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
operator|,
literal|4
operator|>
operator|(
name|src
operator|->
name|ARGB
operator|)
operator|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|4
operator|>
operator|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
operator|,
literal|0
operator|>
operator|(
name|src
operator|->
name|ARGB
operator|)
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|A4R4G4B4
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|ARGB
operator|=
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|12
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|4
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|8
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|4
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|4
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|4
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|0
operator|>
operator|(
name|gl
operator|::
name|floatToNormalized
operator|<
literal|4
operator|,
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|A4R4G4B4
modifier|*
name|dst
parameter_list|,
specifier|const
name|A4R4G4B4
modifier|*
name|src1
parameter_list|,
specifier|const
name|A4R4G4B4
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|ARGB
operator|=
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|12
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|12
operator|>
operator|(
name|src1
operator|->
name|ARGB
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|12
operator|>
operator|(
name|src2
operator|->
name|ARGB
operator|)
argument_list|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|8
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|8
operator|>
operator|(
name|src1
operator|->
name|ARGB
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|8
operator|>
operator|(
name|src2
operator|->
name|ARGB
operator|)
argument_list|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|4
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|4
operator|>
operator|(
name|src1
operator|->
name|ARGB
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|4
operator|>
operator|(
name|src2
operator|->
name|ARGB
operator|)
argument_list|)
operator|)
operator||
name|gl
operator|::
name|shiftData
operator|<
literal|4
operator|,
literal|0
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|0
operator|>
operator|(
name|src1
operator|->
name|ARGB
operator|)
argument_list|,
name|gl
operator|::
name|getShiftedData
operator|<
literal|4
argument_list|,
literal|0
operator|>
operator|(
name|src2
operator|->
name|ARGB
operator|)
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R16
block|{
name|unsigned
name|short
name|R
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R16
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|R16
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R16
modifier|*
name|dst
parameter_list|,
specifier|const
name|R16
modifier|*
name|src1
parameter_list|,
specifier|const
name|R16
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R16G16
block|{
name|unsigned
name|short
name|R
decl_stmt|;
name|unsigned
name|short
name|G
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R16G16
modifier|*
name|dst
parameter_list|,
specifier|const
name|R16G16
modifier|*
name|src1
parameter_list|,
specifier|const
name|R16G16
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R16G16B16
block|{
name|unsigned
name|short
name|R
decl_stmt|;
name|unsigned
name|short
name|G
decl_stmt|;
name|unsigned
name|short
name|B
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16B16
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16B16
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16B16
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16B16
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R16G16B16
modifier|*
name|dst
parameter_list|,
specifier|const
name|R16G16B16
modifier|*
name|src1
parameter_list|,
specifier|const
name|R16G16B16
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R16G16B16A16
block|{
name|unsigned
name|short
name|R
decl_stmt|;
name|unsigned
name|short
name|G
decl_stmt|;
name|unsigned
name|short
name|B
decl_stmt|;
name|unsigned
name|short
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16B16A16
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16B16A16
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|src
operator|->
name|A
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16B16A16
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16B16A16
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R16G16B16A16
modifier|*
name|dst
parameter_list|,
specifier|const
name|R16G16B16A16
modifier|*
name|src1
parameter_list|,
specifier|const
name|R16G16B16A16
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R32
block|{
name|unsigned
name|int
name|R
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R32
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|R32
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R32
modifier|*
name|dst
parameter_list|,
specifier|const
name|R32
modifier|*
name|src1
parameter_list|,
specifier|const
name|R32
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R32G32
block|{
name|unsigned
name|int
name|R
decl_stmt|;
name|unsigned
name|int
name|G
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R32G32
modifier|*
name|dst
parameter_list|,
specifier|const
name|R32G32
modifier|*
name|src1
parameter_list|,
specifier|const
name|R32G32
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R32G32B32
block|{
name|unsigned
name|int
name|R
decl_stmt|;
name|unsigned
name|int
name|G
decl_stmt|;
name|unsigned
name|int
name|B
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32B32
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32B32
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32B32
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32B32
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R32G32B32
modifier|*
name|dst
parameter_list|,
specifier|const
name|R32G32B32
modifier|*
name|src1
parameter_list|,
specifier|const
name|R32G32B32
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R32G32B32A32
block|{
name|unsigned
name|int
name|R
decl_stmt|;
name|unsigned
name|int
name|G
decl_stmt|;
name|unsigned
name|int
name|B
decl_stmt|;
name|unsigned
name|int
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32B32A32
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32B32A32
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|src
operator|->
name|A
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32B32A32
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32B32A32
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R32G32B32A32
modifier|*
name|dst
parameter_list|,
specifier|const
name|R32G32B32A32
modifier|*
name|src1
parameter_list|,
specifier|const
name|R32G32B32A32
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R8S
block|{
name|char
name|R
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R8S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorI
operator|*
name|dst
argument_list|,
specifier|const
name|R8S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R8S
modifier|*
name|dst
parameter_list|,
specifier|const
name|R8S
modifier|*
name|src1
parameter_list|,
specifier|const
name|R8S
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R8G8S
block|{
name|char
name|R
decl_stmt|;
name|char
name|G
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R8G8S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorI
operator|*
name|dst
argument_list|,
specifier|const
name|R8G8S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8G8S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8G8S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R8G8S
modifier|*
name|dst
parameter_list|,
specifier|const
name|R8G8S
modifier|*
name|src1
parameter_list|,
specifier|const
name|R8G8S
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R8G8B8S
block|{
name|char
name|R
decl_stmt|;
name|char
name|G
decl_stmt|;
name|char
name|B
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R8G8B8S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorI
operator|*
name|dst
argument_list|,
specifier|const
name|R8G8B8S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8G8B8S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8G8B8S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R8G8B8S
modifier|*
name|dst
parameter_list|,
specifier|const
name|R8G8B8S
modifier|*
name|src1
parameter_list|,
specifier|const
name|R8G8B8S
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R8G8B8A8S
block|{
name|char
name|R
decl_stmt|;
name|char
name|G
decl_stmt|;
name|char
name|B
decl_stmt|;
name|char
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R8G8B8A8S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorI
operator|*
name|dst
argument_list|,
specifier|const
name|R8G8B8A8S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|src
operator|->
name|A
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8G8B8A8S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R8G8B8A8S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R8G8B8A8S
modifier|*
name|dst
parameter_list|,
specifier|const
name|R8G8B8A8S
modifier|*
name|src1
parameter_list|,
specifier|const
name|R8G8B8A8S
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|static_cast
operator|<
name|char
operator|>
operator|(
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R16S
block|{
name|short
name|R
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R16S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorI
operator|*
name|dst
argument_list|,
specifier|const
name|R16S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R16S
modifier|*
name|dst
parameter_list|,
specifier|const
name|R16S
modifier|*
name|src1
parameter_list|,
specifier|const
name|R16S
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R16G16S
block|{
name|short
name|R
decl_stmt|;
name|short
name|G
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorI
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R16G16S
modifier|*
name|dst
parameter_list|,
specifier|const
name|R16G16S
modifier|*
name|src1
parameter_list|,
specifier|const
name|R16G16S
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R16G16B16S
block|{
name|short
name|R
decl_stmt|;
name|short
name|G
decl_stmt|;
name|short
name|B
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16B16S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorI
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16B16S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16B16S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16B16S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R16G16B16S
modifier|*
name|dst
parameter_list|,
specifier|const
name|R16G16B16S
modifier|*
name|src1
parameter_list|,
specifier|const
name|R16G16B16S
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R16G16B16A16S
block|{
name|short
name|R
decl_stmt|;
name|short
name|G
decl_stmt|;
name|short
name|B
decl_stmt|;
name|short
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16B16A16S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorI
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16B16A16S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|src
operator|->
name|A
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16B16A16S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16B16A16S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|static_cast
operator|<
name|short
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R16G16B16A16S
modifier|*
name|dst
parameter_list|,
specifier|const
name|R16G16B16A16S
modifier|*
name|src1
parameter_list|,
specifier|const
name|R16G16B16A16S
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R32S
block|{
name|int
name|R
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R32S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorI
operator|*
name|dst
argument_list|,
specifier|const
name|R32S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R32S
modifier|*
name|dst
parameter_list|,
specifier|const
name|R32S
modifier|*
name|src1
parameter_list|,
specifier|const
name|R32S
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R32G32S
block|{
name|int
name|R
decl_stmt|;
name|int
name|G
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorI
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R32G32S
modifier|*
name|dst
parameter_list|,
specifier|const
name|R32G32S
modifier|*
name|src1
parameter_list|,
specifier|const
name|R32G32S
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R32G32B32S
block|{
name|int
name|R
decl_stmt|;
name|int
name|G
decl_stmt|;
name|int
name|B
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32B32S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorI
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32B32S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32B32S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32B32S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R32G32B32S
modifier|*
name|dst
parameter_list|,
specifier|const
name|R32G32B32S
modifier|*
name|src1
parameter_list|,
specifier|const
name|R32G32B32S
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R32G32B32A32S
block|{
name|int
name|R
decl_stmt|;
name|int
name|G
decl_stmt|;
name|int
name|B
decl_stmt|;
name|int
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32B32A32S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorI
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32B32A32S
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|src
operator|->
name|A
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32B32A32S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32B32A32S
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|static_cast
operator|<
name|int
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R32G32B32A32S
modifier|*
name|dst
parameter_list|,
specifier|const
name|R32G32B32A32S
modifier|*
name|src1
parameter_list|,
specifier|const
name|R32G32B32A32S
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|A16B16G16R16F
block|{
name|unsigned
name|short
name|A
decl_stmt|;
name|unsigned
name|short
name|R
decl_stmt|;
name|unsigned
name|short
name|G
decl_stmt|;
name|unsigned
name|short
name|B
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|A16B16G16R16F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|A16B16G16R16F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|red
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|green
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|blue
argument_list|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|alpha
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|A16B16G16R16F
modifier|*
name|dst
parameter_list|,
specifier|const
name|A16B16G16R16F
modifier|*
name|src1
parameter_list|,
specifier|const
name|A16B16G16R16F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R16G16B16A16F
block|{
name|unsigned
name|short
name|R
decl_stmt|;
name|unsigned
name|short
name|G
decl_stmt|;
name|unsigned
name|short
name|B
decl_stmt|;
name|unsigned
name|short
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16B16A16F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16B16A16F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|red
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|green
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|blue
argument_list|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|alpha
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R16G16B16A16F
modifier|*
name|dst
parameter_list|,
specifier|const
name|R16G16B16A16F
modifier|*
name|src1
parameter_list|,
specifier|const
name|R16G16B16A16F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R16F
block|{
name|unsigned
name|short
name|R
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R16F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|red
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R16F
modifier|*
name|dst
parameter_list|,
specifier|const
name|R16F
modifier|*
name|src1
parameter_list|,
specifier|const
name|R16F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|A16F
block|{
name|unsigned
name|short
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|A16F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|A16F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|alpha
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|A16F
modifier|*
name|dst
parameter_list|,
specifier|const
name|A16F
modifier|*
name|src1
parameter_list|,
specifier|const
name|A16F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|L16F
block|{
name|unsigned
name|short
name|L
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|L16F
operator|*
name|src
argument_list|)
block|{
name|float
name|lum
init|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|L
argument_list|)
decl_stmt|;
name|dst
operator|->
name|red
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|L16F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|L
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
operator|(
name|src
operator|->
name|red
operator|+
name|src
operator|->
name|green
operator|+
name|src
operator|->
name|blue
operator|)
operator|/
literal|3.0f
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|L16F
modifier|*
name|dst
parameter_list|,
specifier|const
name|L16F
modifier|*
name|src1
parameter_list|,
specifier|const
name|L16F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|L
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|L
argument_list|,
name|src2
operator|->
name|L
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|L16A16F
block|{
name|unsigned
name|short
name|L
decl_stmt|;
name|unsigned
name|short
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|L16A16F
operator|*
name|src
argument_list|)
block|{
name|float
name|lum
init|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|L
argument_list|)
decl_stmt|;
name|dst
operator|->
name|red
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|lum
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|L16A16F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|L
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
operator|(
name|src
operator|->
name|red
operator|+
name|src
operator|->
name|green
operator|+
name|src
operator|->
name|blue
operator|)
operator|/
literal|3.0f
argument_list|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|alpha
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|L16A16F
modifier|*
name|dst
parameter_list|,
specifier|const
name|L16A16F
modifier|*
name|src1
parameter_list|,
specifier|const
name|L16A16F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|L
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|L
argument_list|,
name|src2
operator|->
name|L
argument_list|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R16G16F
block|{
name|unsigned
name|short
name|R
decl_stmt|;
name|unsigned
name|short
name|G
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|red
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|green
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R16G16F
modifier|*
name|dst
parameter_list|,
specifier|const
name|R16G16F
modifier|*
name|src1
parameter_list|,
specifier|const
name|R16G16F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R16G16B16F
block|{
name|unsigned
name|short
name|R
decl_stmt|;
name|unsigned
name|short
name|G
decl_stmt|;
name|unsigned
name|short
name|B
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R16G16B16F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R16G16B16F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|red
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|green
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|src
operator|->
name|blue
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R16G16B16F
modifier|*
name|dst
parameter_list|,
specifier|const
name|R16G16B16F
modifier|*
name|src1
parameter_list|,
specifier|const
name|R16G16B16F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|averageHalfFloat
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|A32B32G32R32F
block|{
name|float
name|A
decl_stmt|;
name|float
name|R
decl_stmt|;
name|float
name|G
decl_stmt|;
name|float
name|B
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|A32B32G32R32F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|src
operator|->
name|A
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|A32B32G32R32F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|src
operator|->
name|red
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|src
operator|->
name|green
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|src
operator|->
name|blue
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|src
operator|->
name|alpha
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|A32B32G32R32F
modifier|*
name|dst
parameter_list|,
specifier|const
name|A32B32G32R32F
modifier|*
name|src1
parameter_list|,
specifier|const
name|A32B32G32R32F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R32G32B32A32F
block|{
name|float
name|R
decl_stmt|;
name|float
name|G
decl_stmt|;
name|float
name|B
decl_stmt|;
name|float
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32B32A32F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|src
operator|->
name|A
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32B32A32F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|src
operator|->
name|red
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|src
operator|->
name|green
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|src
operator|->
name|blue
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|src
operator|->
name|alpha
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R32G32B32A32F
modifier|*
name|dst
parameter_list|,
specifier|const
name|R32G32B32A32F
modifier|*
name|src1
parameter_list|,
specifier|const
name|R32G32B32A32F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R32F
block|{
name|float
name|R
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R32F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|src
operator|->
name|red
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R32F
modifier|*
name|dst
parameter_list|,
specifier|const
name|R32F
modifier|*
name|src1
parameter_list|,
specifier|const
name|R32F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|A32F
block|{
name|float
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|A32F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|green
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|src
operator|->
name|A
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|A32F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|A
operator|=
name|src
operator|->
name|alpha
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|A32F
modifier|*
name|dst
parameter_list|,
specifier|const
name|A32F
modifier|*
name|src1
parameter_list|,
specifier|const
name|A32F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|L32F
block|{
name|float
name|L
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|L32F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|L
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|L
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|L
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|L32F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|L
operator|=
operator|(
name|src
operator|->
name|red
operator|+
name|src
operator|->
name|green
operator|+
name|src
operator|->
name|blue
operator|)
operator|/
literal|3.0f
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|L32F
modifier|*
name|dst
parameter_list|,
specifier|const
name|L32F
modifier|*
name|src1
parameter_list|,
specifier|const
name|L32F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|L
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|L
argument_list|,
name|src2
operator|->
name|L
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|L32A32F
block|{
name|float
name|L
decl_stmt|;
name|float
name|A
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|L32A32F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|L
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|L
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|L
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|src
operator|->
name|A
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|L32A32F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|L
operator|=
operator|(
name|src
operator|->
name|red
operator|+
name|src
operator|->
name|green
operator|+
name|src
operator|->
name|blue
operator|)
operator|/
literal|3.0f
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|src
operator|->
name|alpha
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|L32A32F
modifier|*
name|dst
parameter_list|,
specifier|const
name|L32A32F
modifier|*
name|src1
parameter_list|,
specifier|const
name|L32A32F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|L
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|L
argument_list|,
name|src2
operator|->
name|L
argument_list|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R32G32F
block|{
name|float
name|R
decl_stmt|;
name|float
name|G
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
literal|0.0f
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|src
operator|->
name|red
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|src
operator|->
name|green
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R32G32F
modifier|*
name|dst
parameter_list|,
specifier|const
name|R32G32F
modifier|*
name|src1
parameter_list|,
specifier|const
name|R32G32F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R32G32B32F
block|{
name|float
name|R
decl_stmt|;
name|float
name|G
decl_stmt|;
name|float
name|B
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R32G32B32F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R32G32B32F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|src
operator|->
name|red
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|src
operator|->
name|green
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|src
operator|->
name|blue
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R32G32B32F
modifier|*
name|dst
parameter_list|,
specifier|const
name|R32G32B32F
modifier|*
name|src1
parameter_list|,
specifier|const
name|R32G32B32F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R10G10B10A2
block|{
name|unsigned
name|int
name|R
range|:
literal|10
decl_stmt|;
name|unsigned
name|int
name|G
range|:
literal|10
decl_stmt|;
name|unsigned
name|int
name|B
range|:
literal|10
decl_stmt|;
name|unsigned
name|int
name|A
range|:
literal|2
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R10G10B10A2
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|10
operator|>
operator|(
name|src
operator|->
name|R
operator|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|10
operator|>
operator|(
name|src
operator|->
name|G
operator|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|10
operator|>
operator|(
name|src
operator|->
name|B
operator|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|gl
operator|::
name|normalizedToFloat
operator|<
literal|2
operator|>
operator|(
name|src
operator|->
name|A
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorUI
operator|*
name|dst
argument_list|,
specifier|const
name|R10G10B10A2
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|src
operator|->
name|R
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|src
operator|->
name|G
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|src
operator|->
name|B
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
name|src
operator|->
name|A
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R10G10B10A2
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
literal|10
operator|,
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
literal|10
operator|,
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
literal|10
operator|,
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|floatToNormalized
operator|<
literal|2
operator|,
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R10G10B10A2
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorUI
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|red
operator|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|green
operator|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|blue
operator|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|src
operator|->
name|alpha
operator|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R10G10B10A2
modifier|*
name|dst
parameter_list|,
specifier|const
name|R10G10B10A2
modifier|*
name|src1
parameter_list|,
specifier|const
name|R10G10B10A2
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|A
operator|=
name|gl
operator|::
name|average
argument_list|(
name|src1
operator|->
name|A
argument_list|,
name|src2
operator|->
name|A
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R9G9B9E5
block|{
name|unsigned
name|int
name|R
range|:
literal|9
decl_stmt|;
name|unsigned
name|int
name|G
range|:
literal|9
decl_stmt|;
name|unsigned
name|int
name|B
range|:
literal|9
decl_stmt|;
name|unsigned
name|int
name|E
range|:
literal|5
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R9G9B9E5
operator|*
name|src
argument_list|)
block|{
name|gl
operator|::
name|convert999E5toRGBFloats
argument_list|(
argument|gl::bitCast<unsigned int>(*src)
argument_list|,
argument|&dst->red
argument_list|,
argument|&dst->green
argument_list|,
argument|&dst->blue
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R9G9B9E5
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
operator|*
name|reinterpret_cast
operator|<
name|unsigned
name|int
operator|*
operator|>
operator|(
name|dst
operator|)
operator|=
name|gl
operator|::
name|convertRGBFloatsTo999E5
argument_list|(
name|src
operator|->
name|red
argument_list|,
name|src
operator|->
name|green
argument_list|,
name|src
operator|->
name|blue
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R9G9B9E5
modifier|*
name|dst
parameter_list|,
specifier|const
name|R9G9B9E5
modifier|*
name|src1
parameter_list|,
specifier|const
name|R9G9B9E5
modifier|*
name|src2
parameter_list|)
block|{
name|float
name|r1
decl_stmt|,
name|g1
decl_stmt|,
name|b1
decl_stmt|;
name|gl
operator|::
name|convert999E5toRGBFloats
argument_list|(
argument|*reinterpret_cast<const unsigned int*>(src1)
argument_list|,
argument|&r1
argument_list|,
argument|&g1
argument_list|,
argument|&b1
argument_list|)
expr_stmt|;
name|float
name|r2
decl_stmt|,
name|g2
decl_stmt|,
name|b2
decl_stmt|;
name|gl
operator|::
name|convert999E5toRGBFloats
argument_list|(
argument|*reinterpret_cast<const unsigned int*>(src2)
argument_list|,
argument|&r2
argument_list|,
argument|&g2
argument_list|,
argument|&b2
argument_list|)
expr_stmt|;
operator|*
name|reinterpret_cast
operator|<
name|unsigned
name|int
operator|*
operator|>
operator|(
name|dst
operator|)
operator|=
name|gl
operator|::
name|convertRGBFloatsTo999E5
argument_list|(
name|gl
operator|::
name|average
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|,
name|gl
operator|::
name|average
argument_list|(
name|g1
argument_list|,
name|g2
argument_list|)
argument_list|,
name|gl
operator|::
name|average
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
struct|struct
name|R11G11B10F
block|{
name|unsigned
name|int
name|R
range|:
literal|11
decl_stmt|;
name|unsigned
name|int
name|G
range|:
literal|11
decl_stmt|;
name|unsigned
name|int
name|B
range|:
literal|10
decl_stmt|;
specifier|static
name|void
name|readColor
argument_list|(
name|gl
operator|::
name|ColorF
operator|*
name|dst
argument_list|,
specifier|const
name|R11G11B10F
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|red
operator|=
name|gl
operator|::
name|float11ToFloat32
argument_list|(
name|src
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|green
operator|=
name|gl
operator|::
name|float11ToFloat32
argument_list|(
name|src
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|blue
operator|=
name|gl
operator|::
name|float10ToFloat32
argument_list|(
name|src
operator|->
name|B
argument_list|)
expr_stmt|;
name|dst
operator|->
name|alpha
operator|=
literal|1.0f
expr_stmt|;
block|}
specifier|static
name|void
name|writeColor
argument_list|(
name|R11G11B10F
operator|*
name|dst
argument_list|,
specifier|const
name|gl
operator|::
name|ColorF
operator|*
name|src
argument_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|float32ToFloat11
argument_list|(
name|src
operator|->
name|red
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|float32ToFloat11
argument_list|(
name|src
operator|->
name|green
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|float32ToFloat10
argument_list|(
name|src
operator|->
name|blue
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|average
parameter_list|(
name|R11G11B10F
modifier|*
name|dst
parameter_list|,
specifier|const
name|R11G11B10F
modifier|*
name|src1
parameter_list|,
specifier|const
name|R11G11B10F
modifier|*
name|src2
parameter_list|)
block|{
name|dst
operator|->
name|R
operator|=
name|gl
operator|::
name|averageFloat11
argument_list|(
name|src1
operator|->
name|R
argument_list|,
name|src2
operator|->
name|R
argument_list|)
expr_stmt|;
name|dst
operator|->
name|G
operator|=
name|gl
operator|::
name|averageFloat11
argument_list|(
name|src1
operator|->
name|G
argument_list|,
name|src2
operator|->
name|G
argument_list|)
expr_stmt|;
name|dst
operator|->
name|B
operator|=
name|gl
operator|::
name|averageFloat10
argument_list|(
name|src1
operator|->
name|B
argument_list|,
name|src2
operator|->
name|B
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_D3D_IMAGEFORMATS_H_
end_comment
end_unit
