begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013-2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// loadimage.cpp: Defines image loading functions.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/loadimage.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|LoadA8ToRGBA8
name|void
name|LoadA8ToRGBA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint8_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint32_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint32_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
name|x
index|]
operator|=
cast|static_cast
argument_list|<
name|uint32_t
argument_list|>
argument_list|(
name|source
index|[
name|x
index|]
argument_list|)
operator|<<
literal|24
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadA8ToBGRA8
name|void
name|LoadA8ToBGRA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
comment|// Same as loading to RGBA
name|LoadA8ToRGBA8
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|input
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|,
name|output
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
expr_stmt|;
block|}
DECL|function|LoadA32FToRGBA32F
name|void
name|LoadA32FToRGBA32F
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|float
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|float
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|float
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|float
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
literal|0.0f
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
literal|0.0f
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
literal|0.0f
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadA16FToRGBA16F
name|void
name|LoadA16FToRGBA16F
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint16_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadL8ToRGBA8
name|void
name|LoadL8ToRGBA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint8_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint8_t
name|sourceVal
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|sourceVal
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|sourceVal
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|sourceVal
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|0xFF
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadL8ToBGRA8
name|void
name|LoadL8ToBGRA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
comment|// Same as loading to RGBA
name|LoadL8ToRGBA8
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|input
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|,
name|output
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
expr_stmt|;
block|}
DECL|function|LoadL32FToRGBA32F
name|void
name|LoadL32FToRGBA32F
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|float
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|float
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|float
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|float
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|1.0f
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadL16FToRGBA16F
name|void
name|LoadL16FToRGBA16F
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint16_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
name|gl
operator|::
name|Float16One
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadLA8ToRGBA8
name|void
name|LoadLA8ToRGBA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint8_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadLA8ToBGRA8
name|void
name|LoadLA8ToBGRA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
comment|// Same as loading to RGBA
name|LoadLA8ToRGBA8
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|input
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|,
name|output
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
expr_stmt|;
block|}
DECL|function|LoadLA32FToRGBA32F
name|void
name|LoadLA32FToRGBA32F
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|float
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|float
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|float
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|float
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadLA16FToRGBA16F
name|void
name|LoadLA16FToRGBA16F
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint16_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRGB8ToBGRX8
name|void
name|LoadRGB8ToBGRX8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint8_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|2
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|1
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|0xFF
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRG8ToBGRX8
name|void
name|LoadRG8ToBGRX8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint8_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
literal|0x00
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|2
operator|+
literal|1
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|2
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|0xFF
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadR8ToBGRX8
name|void
name|LoadR8ToBGRX8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint8_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
literal|0x00
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
literal|0x00
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|0xFF
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadR5G6B5ToBGRA8
name|void
name|LoadR5G6B5ToBGRA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint16_t
name|rgb
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgb
operator|&
literal|0x001F
operator|)
operator|<<
literal|3
operator|)
operator||
operator|(
operator|(
name|rgb
operator|&
literal|0x001F
operator|)
operator|>>
literal|2
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgb
operator|&
literal|0x07E0
operator|)
operator|>>
literal|3
operator|)
operator||
operator|(
operator|(
name|rgb
operator|&
literal|0x07E0
operator|)
operator|>>
literal|9
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgb
operator|&
literal|0xF800
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|rgb
operator|&
literal|0xF800
operator|)
operator|>>
literal|13
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|0xFF
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadR5G6B5ToRGBA8
name|void
name|LoadR5G6B5ToRGBA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint16_t
name|rgb
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgb
operator|&
literal|0xF800
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|rgb
operator|&
literal|0xF800
operator|)
operator|>>
literal|13
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgb
operator|&
literal|0x07E0
operator|)
operator|>>
literal|3
operator|)
operator||
operator|(
operator|(
name|rgb
operator|&
literal|0x07E0
operator|)
operator|>>
literal|9
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgb
operator|&
literal|0x001F
operator|)
operator|<<
literal|3
operator|)
operator||
operator|(
operator|(
name|rgb
operator|&
literal|0x001F
operator|)
operator|>>
literal|2
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|0xFF
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRGBA8ToBGRA8
name|void
name|LoadRGBA8ToBGRA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint32_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint32_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint32_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint32_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint32_t
name|rgba
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
name|x
index|]
operator|=
operator|(
name|ANGLE_ROTL
argument_list|(
name|rgba
argument_list|,
literal|16
argument_list|)
operator|&
literal|0x00ff00ff
operator|)
operator||
operator|(
name|rgba
operator|&
literal|0xff00ff00
operator|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRGBA4ToARGB4
name|void
name|LoadRGBA4ToARGB4
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint16_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
name|x
index|]
operator|=
name|ANGLE_ROTR16
argument_list|(
name|source
index|[
name|x
index|]
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRGBA4ToBGRA8
name|void
name|LoadRGBA4ToBGRA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint16_t
name|rgba
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0x00F0
operator|)
operator|<<
literal|0
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x00F0
operator|)
operator|>>
literal|4
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0x0F00
operator|)
operator|>>
literal|4
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x0F00
operator|)
operator|>>
literal|8
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0xF000
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0xF000
operator|)
operator|>>
literal|12
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0x000F
operator|)
operator|<<
literal|4
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x000F
operator|)
operator|>>
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRGBA4ToRGBA8
name|void
name|LoadRGBA4ToRGBA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint16_t
name|rgba
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0xF000
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0xF000
operator|)
operator|>>
literal|12
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0x0F00
operator|)
operator|>>
literal|4
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x0F00
operator|)
operator|>>
literal|8
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0x00F0
operator|)
operator|<<
literal|0
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x00F0
operator|)
operator|>>
literal|4
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0x000F
operator|)
operator|<<
literal|4
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x000F
operator|)
operator|>>
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadBGRA4ToBGRA8
name|void
name|LoadBGRA4ToBGRA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint16_t
name|bgra
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|bgra
operator|&
literal|0xF000
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|bgra
operator|&
literal|0xF000
operator|)
operator|>>
literal|12
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|bgra
operator|&
literal|0x0F00
operator|)
operator|>>
literal|4
operator|)
operator||
operator|(
operator|(
name|bgra
operator|&
literal|0x0F00
operator|)
operator|>>
literal|8
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|bgra
operator|&
literal|0x00F0
operator|)
operator|<<
literal|0
operator|)
operator||
operator|(
operator|(
name|bgra
operator|&
literal|0x00F0
operator|)
operator|>>
literal|4
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|bgra
operator|&
literal|0x000F
operator|)
operator|<<
literal|4
operator|)
operator||
operator|(
operator|(
name|bgra
operator|&
literal|0x000F
operator|)
operator|>>
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRGB5A1ToA1RGB5
name|void
name|LoadRGB5A1ToA1RGB5
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint16_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
name|x
index|]
operator|=
name|ANGLE_ROTR16
argument_list|(
name|source
index|[
name|x
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRGB5A1ToBGRA8
name|void
name|LoadRGB5A1ToBGRA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint16_t
name|rgba
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0x003E
operator|)
operator|<<
literal|2
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x003E
operator|)
operator|>>
literal|3
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0x07C0
operator|)
operator|>>
literal|3
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x07C0
operator|)
operator|>>
literal|8
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0xF800
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0xF800
operator|)
operator|>>
literal|13
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
name|rgba
operator|&
literal|0x0001
operator|)
condition|?
literal|0xFF
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRGB5A1ToRGBA8
name|void
name|LoadRGB5A1ToRGBA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint16_t
name|rgba
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0xF800
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0xF800
operator|)
operator|>>
literal|13
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0x07C0
operator|)
operator|>>
literal|3
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x07C0
operator|)
operator|>>
literal|8
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0x003E
operator|)
operator|<<
literal|2
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x003E
operator|)
operator|>>
literal|3
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
name|rgba
operator|&
literal|0x0001
operator|)
condition|?
literal|0xFF
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadBGR5A1ToBGRA8
name|void
name|LoadBGR5A1ToBGRA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint16_t
name|bgra
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|bgra
operator|&
literal|0xF800
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|bgra
operator|&
literal|0xF800
operator|)
operator|>>
literal|13
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|bgra
operator|&
literal|0x07C0
operator|)
operator|>>
literal|3
operator|)
operator||
operator|(
operator|(
name|bgra
operator|&
literal|0x07C0
operator|)
operator|>>
literal|8
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|bgra
operator|&
literal|0x003E
operator|)
operator|<<
literal|2
operator|)
operator||
operator|(
operator|(
name|bgra
operator|&
literal|0x003E
operator|)
operator|>>
literal|3
operator|)
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
name|bgra
operator|&
literal|0x0001
operator|)
condition|?
literal|0xFF
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRGB10A2ToRGBA8
name|void
name|LoadRGB10A2ToRGBA8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint32_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint32_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint32_t
name|rgba
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
name|rgba
operator|&
literal|0x000003FF
operator|)
operator|>>
literal|2
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
name|rgba
operator|&
literal|0x000FFC00
operator|)
operator|>>
literal|12
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
name|rgba
operator|&
literal|0x3FF00000
operator|)
operator|>>
literal|22
argument_list|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
cast|static_cast
argument_list|<
name|uint8_t
argument_list|>
argument_list|(
operator|(
operator|(
name|rgba
operator|&
literal|0xC0000000
operator|)
operator|>>
literal|30
operator|)
operator|*
literal|0x55
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRGB16FToRGB9E5
name|void
name|LoadRGB16FToRGB9E5
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint32_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint32_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
name|x
index|]
operator|=
name|gl
operator|::
name|convertRGBFloatsTo999E5
argument_list|(
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|0
index|]
argument_list|)
argument_list|,
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|1
index|]
argument_list|)
argument_list|,
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRGB32FToRGB9E5
name|void
name|LoadRGB32FToRGB9E5
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|float
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|float
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint32_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint32_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
name|x
index|]
operator|=
name|gl
operator|::
name|convertRGBFloatsTo999E5
argument_list|(
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|0
index|]
argument_list|,
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|1
index|]
argument_list|,
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRGB16FToRG11B10F
name|void
name|LoadRGB16FToRG11B10F
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint16_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint32_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint32_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
name|x
index|]
operator|=
operator|(
name|gl
operator|::
name|float32ToFloat11
argument_list|(
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|0
index|]
argument_list|)
argument_list|)
operator|<<
literal|0
operator|)
operator||
operator|(
name|gl
operator|::
name|float32ToFloat11
argument_list|(
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|1
index|]
argument_list|)
argument_list|)
operator|<<
literal|11
operator|)
operator||
operator|(
name|gl
operator|::
name|float32ToFloat10
argument_list|(
name|gl
operator|::
name|float16ToFloat32
argument_list|(
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|2
index|]
argument_list|)
argument_list|)
operator|<<
literal|22
operator|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRGB32FToRG11B10F
name|void
name|LoadRGB32FToRG11B10F
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|float
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|float
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint32_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint32_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
name|x
index|]
operator|=
operator|(
name|gl
operator|::
name|float32ToFloat11
argument_list|(
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|0
index|]
argument_list|)
operator|<<
literal|0
operator|)
operator||
operator|(
name|gl
operator|::
name|float32ToFloat11
argument_list|(
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|1
index|]
argument_list|)
operator|<<
literal|11
operator|)
operator||
operator|(
name|gl
operator|::
name|float32ToFloat10
argument_list|(
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|2
index|]
argument_list|)
operator|<<
literal|22
operator|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadG8R24ToR24G8
name|void
name|LoadG8R24ToR24G8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint32_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint32_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint32_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint32_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|uint32_t
name|d
init|=
name|source
index|[
name|x
index|]
operator|>>
literal|8
decl_stmt|;
name|uint8_t
name|s
init|=
name|source
index|[
name|x
index|]
operator|&
literal|0xFF
decl_stmt|;
name|dest
index|[
name|x
index|]
operator|=
name|d
operator||
operator|(
name|s
operator|<<
literal|24
operator|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadRGB32FToRGBA16F
name|void
name|LoadRGB32FToRGBA16F
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|float
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|float
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint16_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
name|x
operator|*
literal|4
operator|+
literal|0
index|]
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|0
index|]
argument_list|)
expr_stmt|;
name|dest
index|[
name|x
operator|*
literal|4
operator|+
literal|1
index|]
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|dest
index|[
name|x
operator|*
literal|4
operator|+
literal|2
index|]
operator|=
name|gl
operator|::
name|float32ToFloat16
argument_list|(
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|dest
index|[
name|x
operator|*
literal|4
operator|+
literal|3
index|]
operator|=
name|gl
operator|::
name|Float16One
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadR32ToR16
name|void
name|LoadR32ToR16
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint32_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint32_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint16_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint16_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
name|x
index|]
operator|=
name|source
index|[
name|x
index|]
operator|>>
literal|16
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|LoadR32ToR24G8
name|void
name|LoadR32ToR24G8
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
for|for
control|(
name|size_t
name|z
init|=
literal|0
init|;
name|z
operator|<
name|depth
condition|;
name|z
operator|++
control|)
block|{
for|for
control|(
name|size_t
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
specifier|const
name|uint32_t
modifier|*
name|source
init|=
name|OffsetDataPointer
argument_list|<
name|uint32_t
argument_list|>
argument_list|(
name|input
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|)
decl_stmt|;
name|uint32_t
modifier|*
name|dest
init|=
name|OffsetDataPointer
argument_list|<
name|uint32_t
argument_list|>
argument_list|(
name|output
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
name|x
index|]
operator|=
name|source
index|[
name|x
index|]
operator|>>
literal|8
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_namespace
end_unit
