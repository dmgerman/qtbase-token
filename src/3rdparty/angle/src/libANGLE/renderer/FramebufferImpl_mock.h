begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// FramebufferImpl_mock.h:
end_comment
begin_comment
comment|//   Defines a mock of the FramebufferImpl class.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_FRAMEBUFFERIMPLMOCK_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_FRAMEBUFFERIMPLMOCK_H_
define|#
directive|define
name|LIBANGLE_RENDERER_FRAMEBUFFERIMPLMOCK_H_
end_define
begin_include
include|#
directive|include
file|"gmock/gmock.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/FramebufferImpl.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|MockFramebufferImpl
range|:
name|public
name|rx
operator|::
name|FramebufferImpl
block|{
name|public
operator|:
name|MockFramebufferImpl
argument_list|()
operator|:
name|rx
operator|::
name|FramebufferImpl
argument_list|(
argument|gl::Framebuffer::Data()
argument_list|)
block|{}
name|virtual
operator|~
name|MockFramebufferImpl
argument_list|()
block|{
name|destroy
argument_list|()
block|; }
name|MOCK_METHOD2
argument_list|(
name|discard
argument_list|,
name|gl
operator|::
name|Error
argument_list|(
name|size_t
argument_list|,
specifier|const
name|GLenum
operator|*
argument_list|)
argument_list|)
block|;
name|MOCK_METHOD2
argument_list|(
name|invalidate
argument_list|,
name|gl
operator|::
name|Error
argument_list|(
name|size_t
argument_list|,
specifier|const
name|GLenum
operator|*
argument_list|)
argument_list|)
block|;
name|MOCK_METHOD3
argument_list|(
name|invalidateSub
argument_list|,
name|gl
operator|::
name|Error
argument_list|(
name|size_t
argument_list|,
specifier|const
name|GLenum
operator|*
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
argument_list|)
argument_list|)
block|;
name|MOCK_METHOD2
argument_list|(
name|clear
argument_list|,
name|gl
operator|::
name|Error
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
argument_list|,
name|GLbitfield
argument_list|)
argument_list|)
block|;
name|MOCK_METHOD4
argument_list|(
name|clearBufferfv
argument_list|,
name|gl
operator|::
name|Error
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
argument_list|,
name|GLenum
argument_list|,
name|GLint
argument_list|,
specifier|const
name|GLfloat
operator|*
argument_list|)
argument_list|)
block|;
name|MOCK_METHOD4
argument_list|(
name|clearBufferuiv
argument_list|,
name|gl
operator|::
name|Error
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
argument_list|,
name|GLenum
argument_list|,
name|GLint
argument_list|,
specifier|const
name|GLuint
operator|*
argument_list|)
argument_list|)
block|;
name|MOCK_METHOD4
argument_list|(
name|clearBufferiv
argument_list|,
name|gl
operator|::
name|Error
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
argument_list|,
name|GLenum
argument_list|,
name|GLint
argument_list|,
specifier|const
name|GLint
operator|*
argument_list|)
argument_list|)
block|;
name|MOCK_METHOD5
argument_list|(
name|clearBufferfi
argument_list|,
name|gl
operator|::
name|Error
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
argument_list|,
name|GLenum
argument_list|,
name|GLint
argument_list|,
name|GLfloat
argument_list|,
name|GLint
argument_list|)
argument_list|)
block|;
name|MOCK_CONST_METHOD0
argument_list|(
name|getImplementationColorReadFormat
argument_list|,
name|GLenum
argument_list|()
argument_list|)
block|;
name|MOCK_CONST_METHOD0
argument_list|(
name|getImplementationColorReadType
argument_list|,
name|GLenum
argument_list|()
argument_list|)
block|;
name|MOCK_CONST_METHOD5
argument_list|(
name|readPixels
argument_list|,
name|gl
operator|::
name|Error
argument_list|(
specifier|const
name|gl
operator|::
name|State
operator|&
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
argument_list|,
name|GLenum
argument_list|,
name|GLenum
argument_list|,
name|GLvoid
operator|*
argument_list|)
argument_list|)
block|;
name|MOCK_METHOD6
argument_list|(
name|blit
argument_list|,
name|gl
operator|::
name|Error
argument_list|(
specifier|const
name|gl
operator|::
name|State
operator|&
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
argument_list|,
name|GLbitfield
argument_list|,
name|GLenum
argument_list|,
specifier|const
name|gl
operator|::
name|Framebuffer
operator|*
argument_list|)
argument_list|)
block|;
name|MOCK_CONST_METHOD0
argument_list|(
name|checkStatus
argument_list|,
name|bool
argument_list|()
argument_list|)
block|;
name|MOCK_METHOD1
argument_list|(
name|syncState
argument_list|,
name|void
argument_list|(
specifier|const
name|gl
operator|::
name|Framebuffer
operator|::
name|DirtyBits
operator|&
argument_list|)
argument_list|)
block|;
name|MOCK_METHOD0
argument_list|(
name|destroy
argument_list|,
name|void
argument_list|()
argument_list|)
block|; }
decl_stmt|;
specifier|inline
operator|::
name|testing
operator|::
name|NiceMock
operator|<
name|MockFramebufferImpl
operator|>
operator|*
name|MakeFramebufferMock
argument_list|()
block|{
operator|::
name|testing
operator|::
name|NiceMock
operator|<
name|MockFramebufferImpl
operator|>
operator|*
name|framebufferImpl
operator|=
name|new
operator|::
name|testing
operator|::
name|NiceMock
operator|<
name|MockFramebufferImpl
operator|>
operator|(
operator|)
block|;
comment|// TODO(jmadill): add ON_CALLS for other returning methods
name|ON_CALL
argument_list|(
operator|*
name|framebufferImpl
argument_list|,
name|checkStatus
argument_list|()
argument_list|)
operator|.
name|WillByDefault
argument_list|(
operator|::
name|testing
operator|::
name|Return
argument_list|(
name|true
argument_list|)
argument_list|)
block|;
comment|// We must mock the destructor since NiceMock doesn't work for destructors.
name|EXPECT_CALL
argument_list|(
operator|*
name|framebufferImpl
argument_list|,
name|destroy
argument_list|()
argument_list|)
operator|.
name|Times
argument_list|(
literal|1
argument_list|)
operator|.
name|RetiresOnSaturation
argument_list|()
block|;
return|return
name|framebufferImpl
return|;
block|}
block|}
end_decl_stmt
begin_comment
comment|// namespace rx
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_FRAMEBUFFERIMPLMOCK_H_
end_comment
end_unit
