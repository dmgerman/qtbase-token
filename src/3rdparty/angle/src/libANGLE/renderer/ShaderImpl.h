begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// ShaderImpl.h: Defines the abstract rx::ShaderImpl class.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_RENDERER_SHADERIMPL_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_RENDERER_SHADERIMPL_H_
define|#
directive|define
name|LIBANGLE_RENDERER_SHADERIMPL_H_
end_define
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Shader.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|ShaderImpl
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|ShaderImpl
argument_list|(
specifier|const
name|gl
operator|::
name|Shader
operator|::
name|Data
operator|&
name|data
argument_list|)
operator|:
name|mData
argument_list|(
argument|data
argument_list|)
block|{}
name|virtual
operator|~
name|ShaderImpl
argument_list|()
block|{ }
comment|// Returns additional ShCompile options.
name|virtual
name|int
name|prepareSourceAndReturnOptions
argument_list|(
name|std
operator|::
name|stringstream
operator|*
name|sourceStream
argument_list|,
name|std
operator|::
name|string
operator|*
name|sourcePath
argument_list|)
operator|=
literal|0
block|;
comment|// Returns success for compiling on the driver. Returns success.
name|virtual
name|bool
name|postTranslateCompile
argument_list|(
name|gl
operator|::
name|Compiler
operator|*
name|compiler
argument_list|,
name|std
operator|::
name|string
operator|*
name|infoLog
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|std
operator|::
name|string
name|getDebugInfo
argument_list|()
specifier|const
operator|=
literal|0
block|;
specifier|const
name|gl
operator|::
name|Shader
operator|::
name|Data
operator|&
name|getData
argument_list|()
specifier|const
block|{
return|return
name|mData
return|;
block|}
name|protected
operator|:
specifier|const
name|gl
operator|::
name|Shader
operator|::
name|Data
operator|&
name|mData
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_RENDERER_SHADERIMPL_H_
end_comment
end_unit
