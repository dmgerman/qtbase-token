begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2010-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_UNIFORM_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_UNIFORM_H_
define|#
directive|define
name|LIBANGLE_UNIFORM_H_
end_define
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"common/MemoryBuffer.h"
end_include
begin_include
include|#
directive|include
file|"compiler/translator/blocklayout.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/angletypes.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
comment|// Helper struct representing a single shader uniform
name|struct
name|LinkedUniform
range|:
name|public
name|sh
operator|::
name|Uniform
block|{
name|LinkedUniform
argument_list|()
block|;
name|LinkedUniform
argument_list|(
argument|GLenum type
argument_list|,
argument|GLenum precision
argument_list|,
argument|const std::string&name
argument_list|,
argument|unsigned int arraySize
argument_list|,
argument|const int blockIndex
argument_list|,
argument|const sh::BlockMemberInfo&blockInfo
argument_list|)
block|;
name|LinkedUniform
argument_list|(
specifier|const
name|sh
operator|::
name|Uniform
operator|&
name|uniform
argument_list|)
block|;
name|LinkedUniform
argument_list|(
specifier|const
name|LinkedUniform
operator|&
name|uniform
argument_list|)
block|;
name|LinkedUniform
operator|&
name|operator
operator|=
operator|(
specifier|const
name|LinkedUniform
operator|&
name|uniform
operator|)
block|;
operator|~
name|LinkedUniform
argument_list|()
block|;
name|size_t
name|dataSize
argument_list|()
specifier|const
block|;
name|uint8_t
operator|*
name|data
argument_list|()
block|;
specifier|const
name|uint8_t
operator|*
name|data
argument_list|()
specifier|const
block|;
name|bool
name|isSampler
argument_list|()
specifier|const
block|;
name|bool
name|isInDefaultBlock
argument_list|()
specifier|const
block|;
name|bool
name|isField
argument_list|()
specifier|const
block|;
name|size_t
name|getElementSize
argument_list|()
specifier|const
block|;
name|uint8_t
operator|*
name|getDataPtrToElement
argument_list|(
argument|size_t elementIndex
argument_list|)
block|;
specifier|const
name|uint8_t
operator|*
name|getDataPtrToElement
argument_list|(
argument|size_t elementIndex
argument_list|)
specifier|const
block|;
name|int
name|blockIndex
block|;
name|sh
operator|::
name|BlockMemberInfo
name|blockInfo
block|;
name|private
operator|:
name|mutable
name|rx
operator|::
name|MemoryBuffer
name|mLazyData
block|; }
decl_stmt|;
comment|// Helper struct representing a single shader uniform block
struct|struct
name|UniformBlock
block|{
name|UniformBlock
argument_list|()
expr_stmt|;
name|UniformBlock
argument_list|(
argument|const std::string&nameIn
argument_list|,
argument|bool isArrayIn
argument_list|,
argument|unsigned int arrayElementIn
argument_list|)
empty_stmt|;
name|UniformBlock
argument_list|(
specifier|const
name|UniformBlock
operator|&
name|other
argument_list|)
operator|=
expr|default
expr_stmt|;
name|UniformBlock
modifier|&
name|operator
init|=
operator|(
specifier|const
name|UniformBlock
operator|&
name|other
operator|)
operator|=
expr|default
decl_stmt|;
name|std
operator|::
name|string
name|nameWithArrayIndex
argument_list|()
specifier|const
expr_stmt|;
name|std
operator|::
name|string
name|name
expr_stmt|;
name|bool
name|isArray
decl_stmt|;
name|unsigned
name|int
name|arrayElement
decl_stmt|;
name|unsigned
name|int
name|dataSize
decl_stmt|;
name|bool
name|vertexStaticUse
decl_stmt|;
name|bool
name|fragmentStaticUse
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|unsigned
name|int
operator|>
name|memberUniformIndexes
expr_stmt|;
block|}
struct|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_UNIFORM_H_
end_comment
end_unit
