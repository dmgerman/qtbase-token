begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Debug.cpp: Defines debug state used for GL_KHR_debug
end_comment
begin_include
include|#
directive|include
file|"libANGLE/Debug.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|<tuple>
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|Debug
name|Debug
operator|::
name|Debug
parameter_list|()
member_init_list|:
name|mOutputEnabled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mCallbackFunction
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mCallbackUserParam
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mMessages
argument_list|()
member_init_list|,
name|mMaxLoggedMessages
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mOutputSynchronous
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mGroups
argument_list|()
block|{
name|pushDefaultGroup
argument_list|()
expr_stmt|;
block|}
DECL|function|setMaxLoggedMessages
name|void
name|Debug
operator|::
name|setMaxLoggedMessages
parameter_list|(
name|GLuint
name|maxLoggedMessages
parameter_list|)
block|{
name|mMaxLoggedMessages
operator|=
name|maxLoggedMessages
expr_stmt|;
block|}
DECL|function|setOutputEnabled
name|void
name|Debug
operator|::
name|setOutputEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|mOutputEnabled
operator|=
name|enabled
expr_stmt|;
block|}
DECL|function|isOutputEnabled
name|bool
name|Debug
operator|::
name|isOutputEnabled
parameter_list|()
specifier|const
block|{
return|return
name|mOutputEnabled
return|;
block|}
DECL|function|setOutputSynchronous
name|void
name|Debug
operator|::
name|setOutputSynchronous
parameter_list|(
name|bool
name|synchronous
parameter_list|)
block|{
name|mOutputSynchronous
operator|=
name|synchronous
expr_stmt|;
block|}
DECL|function|isOutputSynchronous
name|bool
name|Debug
operator|::
name|isOutputSynchronous
parameter_list|()
specifier|const
block|{
return|return
name|mOutputSynchronous
return|;
block|}
DECL|function|setCallback
name|void
name|Debug
operator|::
name|setCallback
parameter_list|(
name|GLDEBUGPROCKHR
name|callback
parameter_list|,
specifier|const
name|void
modifier|*
name|userParam
parameter_list|)
block|{
name|mCallbackFunction
operator|=
name|callback
expr_stmt|;
name|mCallbackUserParam
operator|=
name|userParam
expr_stmt|;
block|}
DECL|function|getCallback
name|GLDEBUGPROCKHR
name|Debug
operator|::
name|getCallback
parameter_list|()
specifier|const
block|{
return|return
name|mCallbackFunction
return|;
block|}
DECL|function|getUserParam
specifier|const
name|void
modifier|*
name|Debug
operator|::
name|getUserParam
parameter_list|()
specifier|const
block|{
return|return
name|mCallbackUserParam
return|;
block|}
DECL|function|insertMessage
name|void
name|Debug
operator|::
name|insertMessage
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|GLenum
name|severity
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|message
parameter_list|)
block|{
name|std
operator|::
name|string
name|messageCopy
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|insertMessage
argument_list|(
name|source
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|severity
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|messageCopy
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|insertMessage
name|void
name|Debug
operator|::
name|insertMessage
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|GLenum
name|severity
parameter_list|,
name|std
operator|::
name|string
modifier|&&
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isMessageEnabled
argument_list|(
name|source
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|severity
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|mCallbackFunction
operator|!=
literal|nullptr
condition|)
block|{
comment|// TODO(geofflang) Check the synchronous flag and potentially flush messages from another
comment|// thread.
name|mCallbackFunction
argument_list|(
name|source
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|severity
argument_list|,
cast|static_cast
argument_list|<
name|GLsizei
argument_list|>
argument_list|(
name|message
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|message
operator|.
name|c_str
argument_list|()
argument_list|,
name|mCallbackUserParam
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mMessages
operator|.
name|size
argument_list|()
operator|>=
name|mMaxLoggedMessages
condition|)
block|{
comment|// Drop messages over the limit
return|return;
block|}
name|Message
name|m
decl_stmt|;
name|m
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|m
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|m
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|m
operator|.
name|severity
operator|=
name|severity
expr_stmt|;
name|m
operator|.
name|message
operator|=
name|std
operator|::
name|move
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|mMessages
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getMessages
name|size_t
name|Debug
operator|::
name|getMessages
parameter_list|(
name|GLuint
name|count
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLenum
modifier|*
name|sources
parameter_list|,
name|GLenum
modifier|*
name|types
parameter_list|,
name|GLuint
modifier|*
name|ids
parameter_list|,
name|GLenum
modifier|*
name|severities
parameter_list|,
name|GLsizei
modifier|*
name|lengths
parameter_list|,
name|GLchar
modifier|*
name|messageLog
parameter_list|)
block|{
name|size_t
name|messageCount
init|=
literal|0
decl_stmt|;
name|size_t
name|messageStringIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|messageCount
operator|<=
name|count
operator|&&
operator|!
name|mMessages
operator|.
name|empty
argument_list|()
condition|)
block|{
specifier|const
name|Message
modifier|&
name|m
init|=
name|mMessages
operator|.
name|front
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageLog
operator|!=
literal|nullptr
condition|)
block|{
comment|// Check that this message can fit in the message buffer
if|if
condition|(
name|messageStringIndex
operator|+
name|m
operator|.
name|message
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|>
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|bufSize
argument_list|)
condition|)
block|{
break|break;
block|}
name|std
operator|::
name|copy
argument_list|(
name|m
operator|.
name|message
operator|.
name|begin
argument_list|()
argument_list|,
name|m
operator|.
name|message
operator|.
name|end
argument_list|()
argument_list|,
name|messageLog
operator|+
name|messageStringIndex
argument_list|)
expr_stmt|;
name|messageStringIndex
operator|+=
name|m
operator|.
name|message
operator|.
name|length
argument_list|()
expr_stmt|;
name|messageLog
index|[
name|messageStringIndex
index|]
operator|=
literal|'\0'
expr_stmt|;
name|messageStringIndex
operator|+=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|sources
operator|!=
literal|nullptr
condition|)
block|{
name|sources
index|[
name|messageCount
index|]
operator|=
name|m
operator|.
name|source
expr_stmt|;
block|}
if|if
condition|(
name|types
operator|!=
literal|nullptr
condition|)
block|{
name|types
index|[
name|messageCount
index|]
operator|=
name|m
operator|.
name|type
expr_stmt|;
block|}
if|if
condition|(
name|ids
operator|!=
literal|nullptr
condition|)
block|{
name|ids
index|[
name|messageCount
index|]
operator|=
name|m
operator|.
name|id
expr_stmt|;
block|}
if|if
condition|(
name|severities
operator|!=
literal|nullptr
condition|)
block|{
name|severities
index|[
name|messageCount
index|]
operator|=
name|m
operator|.
name|severity
expr_stmt|;
block|}
if|if
condition|(
name|lengths
operator|!=
literal|nullptr
condition|)
block|{
name|lengths
index|[
name|messageCount
index|]
operator|=
cast|static_cast
argument_list|<
name|GLsizei
argument_list|>
argument_list|(
name|m
operator|.
name|message
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mMessages
operator|.
name|pop_front
argument_list|()
expr_stmt|;
name|messageCount
operator|++
expr_stmt|;
block|}
return|return
name|messageCount
return|;
block|}
DECL|function|getNextMessageLength
name|size_t
name|Debug
operator|::
name|getNextMessageLength
parameter_list|()
specifier|const
block|{
return|return
name|mMessages
operator|.
name|empty
argument_list|()
condition|?
literal|0
else|:
name|mMessages
operator|.
name|front
argument_list|()
operator|.
name|message
operator|.
name|length
argument_list|()
return|;
block|}
DECL|function|getMessageCount
name|size_t
name|Debug
operator|::
name|getMessageCount
parameter_list|()
specifier|const
block|{
return|return
name|mMessages
operator|.
name|size
argument_list|()
return|;
block|}
DECL|function|setMessageControl
name|void
name|Debug
operator|::
name|setMessageControl
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLenum
name|severity
parameter_list|,
name|std
operator|::
name|vector
argument_list|<
name|GLuint
argument_list|>
modifier|&&
name|ids
parameter_list|,
name|bool
name|enabled
parameter_list|)
block|{
name|Control
name|c
decl_stmt|;
name|c
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|c
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|c
operator|.
name|severity
operator|=
name|severity
expr_stmt|;
name|c
operator|.
name|ids
operator|=
name|std
operator|::
name|move
argument_list|(
name|ids
argument_list|)
expr_stmt|;
name|c
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
name|auto
operator|&
name|controls
operator|=
name|mGroups
operator|.
name|back
argument_list|()
operator|.
name|controls
expr_stmt|;
name|controls
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|pushGroup
name|void
name|Debug
operator|::
name|pushGroup
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|std
operator|::
name|string
modifier|&&
name|message
parameter_list|)
block|{
name|insertMessage
argument_list|(
name|source
argument_list|,
name|GL_DEBUG_TYPE_PUSH_GROUP
argument_list|,
name|id
argument_list|,
name|GL_DEBUG_SEVERITY_NOTIFICATION
argument_list|,
name|std
operator|::
name|string
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|Group
name|g
decl_stmt|;
name|g
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|g
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|g
operator|.
name|message
operator|=
name|std
operator|::
name|move
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|mGroups
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|g
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|popGroup
name|void
name|Debug
operator|::
name|popGroup
parameter_list|()
block|{
comment|// Make sure the default group is not about to be popped
name|ASSERT
argument_list|(
name|mGroups
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|Group
name|g
init|=
name|mGroups
operator|.
name|back
argument_list|()
decl_stmt|;
name|mGroups
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|insertMessage
argument_list|(
name|g
operator|.
name|source
argument_list|,
name|GL_DEBUG_TYPE_POP_GROUP
argument_list|,
name|g
operator|.
name|id
argument_list|,
name|GL_DEBUG_SEVERITY_NOTIFICATION
argument_list|,
name|g
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
DECL|function|getGroupStackDepth
name|size_t
name|Debug
operator|::
name|getGroupStackDepth
parameter_list|()
specifier|const
block|{
return|return
name|mGroups
operator|.
name|size
argument_list|()
return|;
block|}
DECL|function|isMessageEnabled
name|bool
name|Debug
operator|::
name|isMessageEnabled
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|GLenum
name|severity
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|mOutputEnabled
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|auto
name|groupIter
init|=
name|mGroups
operator|.
name|rbegin
argument_list|()
init|;
name|groupIter
operator|!=
name|mGroups
operator|.
name|rend
argument_list|()
condition|;
name|groupIter
operator|++
control|)
block|{
specifier|const
specifier|auto
modifier|&
name|controls
init|=
name|groupIter
operator|->
name|controls
decl_stmt|;
for|for
control|(
name|auto
name|controlIter
init|=
name|controls
operator|.
name|rbegin
argument_list|()
init|;
name|controlIter
operator|!=
name|controls
operator|.
name|rend
argument_list|()
condition|;
name|controlIter
operator|++
control|)
block|{
specifier|const
specifier|auto
modifier|&
name|control
init|=
operator|*
name|controlIter
decl_stmt|;
if|if
condition|(
name|control
operator|.
name|source
operator|!=
name|GL_DONT_CARE
operator|&&
name|control
operator|.
name|source
operator|!=
name|source
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|control
operator|.
name|type
operator|!=
name|GL_DONT_CARE
operator|&&
name|control
operator|.
name|type
operator|!=
name|type
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|control
operator|.
name|severity
operator|!=
name|GL_DONT_CARE
operator|&&
name|control
operator|.
name|severity
operator|!=
name|severity
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|control
operator|.
name|ids
operator|.
name|empty
argument_list|()
operator|&&
name|std
operator|::
name|find
argument_list|(
name|control
operator|.
name|ids
operator|.
name|begin
argument_list|()
argument_list|,
name|control
operator|.
name|ids
operator|.
name|end
argument_list|()
argument_list|,
name|id
argument_list|)
operator|==
name|control
operator|.
name|ids
operator|.
name|end
argument_list|()
condition|)
block|{
continue|continue;
block|}
return|return
name|control
operator|.
name|enabled
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|pushDefaultGroup
name|void
name|Debug
operator|::
name|pushDefaultGroup
parameter_list|()
block|{
name|Group
name|g
decl_stmt|;
name|g
operator|.
name|source
operator|=
name|GL_NONE
expr_stmt|;
name|g
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|g
operator|.
name|message
operator|=
literal|""
expr_stmt|;
name|Control
name|c0
decl_stmt|;
name|c0
operator|.
name|source
operator|=
name|GL_DONT_CARE
expr_stmt|;
name|c0
operator|.
name|type
operator|=
name|GL_DONT_CARE
expr_stmt|;
name|c0
operator|.
name|severity
operator|=
name|GL_DONT_CARE
expr_stmt|;
name|c0
operator|.
name|enabled
operator|=
literal|true
expr_stmt|;
name|g
operator|.
name|controls
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|c0
argument_list|)
argument_list|)
expr_stmt|;
name|Control
name|c1
decl_stmt|;
name|c1
operator|.
name|source
operator|=
name|GL_DONT_CARE
expr_stmt|;
name|c1
operator|.
name|type
operator|=
name|GL_DONT_CARE
expr_stmt|;
name|c1
operator|.
name|severity
operator|=
name|GL_DEBUG_SEVERITY_LOW
expr_stmt|;
name|c1
operator|.
name|enabled
operator|=
literal|false
expr_stmt|;
name|g
operator|.
name|controls
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|c1
argument_list|)
argument_list|)
expr_stmt|;
name|mGroups
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|g
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace gl
end_comment
end_unit
