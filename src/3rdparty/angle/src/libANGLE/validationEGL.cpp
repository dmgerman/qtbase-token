begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// validationEGL.cpp: Validation functions for generic EGL entry point parameters
end_comment
begin_include
include|#
directive|include
file|"libANGLE/validationEGL.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Config.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Context.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Display.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Surface.h"
end_include
begin_include
include|#
directive|include
file|<EGL/eglext.h>
end_include
begin_namespace
DECL|namespace|egl
namespace|namespace
name|egl
block|{
DECL|function|ValidateDisplay
name|Error
name|ValidateDisplay
parameter_list|(
specifier|const
name|Display
modifier|*
name|display
parameter_list|)
block|{
if|if
condition|(
name|display
operator|==
name|EGL_NO_DISPLAY
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_DISPLAY
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|display
operator|->
name|isInitialized
argument_list|()
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_NOT_INITIALIZED
argument_list|)
return|;
block|}
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|ValidateSurface
name|Error
name|ValidateSurface
parameter_list|(
specifier|const
name|Display
modifier|*
name|display
parameter_list|,
name|Surface
modifier|*
name|surface
parameter_list|)
block|{
name|Error
name|error
init|=
name|ValidateDisplay
argument_list|(
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
if|if
condition|(
operator|!
name|display
operator|->
name|isValidSurface
argument_list|(
name|surface
argument_list|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|)
return|;
block|}
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|ValidateConfig
name|Error
name|ValidateConfig
parameter_list|(
specifier|const
name|Display
modifier|*
name|display
parameter_list|,
specifier|const
name|Config
modifier|*
name|config
parameter_list|)
block|{
name|Error
name|error
init|=
name|ValidateDisplay
argument_list|(
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
if|if
condition|(
operator|!
name|display
operator|->
name|isValidConfig
argument_list|(
name|config
argument_list|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_CONFIG
argument_list|)
return|;
block|}
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|ValidateContext
name|Error
name|ValidateContext
parameter_list|(
specifier|const
name|Display
modifier|*
name|display
parameter_list|,
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|)
block|{
name|Error
name|error
init|=
name|ValidateDisplay
argument_list|(
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
if|if
condition|(
operator|!
name|display
operator|->
name|isValidContext
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_CONTEXT
argument_list|)
return|;
block|}
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|ValidateCreateContext
name|Error
name|ValidateCreateContext
parameter_list|(
name|Display
modifier|*
name|display
parameter_list|,
name|Config
modifier|*
name|configuration
parameter_list|,
name|gl
operator|::
name|Context
modifier|*
name|shareContext
parameter_list|,
specifier|const
name|AttributeMap
modifier|&
name|attributes
parameter_list|)
block|{
name|Error
name|error
init|=
name|ValidateConfig
argument_list|(
name|display
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
comment|// Get the requested client version (default is 1) and check it is 2 or 3.
name|EGLint
name|clientMajorVersion
init|=
literal|1
decl_stmt|;
name|EGLint
name|clientMinorVersion
init|=
literal|0
decl_stmt|;
name|EGLint
name|contextFlags
init|=
literal|0
decl_stmt|;
name|bool
name|resetNotification
init|=
literal|false
decl_stmt|;
name|bool
name|robustAccess
init|=
literal|false
decl_stmt|;
for|for
control|(
name|AttributeMap
operator|::
name|const_iterator
name|attributeIter
init|=
name|attributes
operator|.
name|begin
argument_list|()
init|;
name|attributeIter
operator|!=
name|attributes
operator|.
name|end
argument_list|()
condition|;
name|attributeIter
operator|++
control|)
block|{
name|EGLint
name|attribute
init|=
name|attributeIter
operator|->
name|first
decl_stmt|;
name|EGLint
name|value
init|=
name|attributeIter
operator|->
name|second
decl_stmt|;
switch|switch
condition|(
name|attribute
condition|)
block|{
case|case
name|EGL_CONTEXT_CLIENT_VERSION
case|:
name|clientMajorVersion
operator|=
name|value
expr_stmt|;
break|break;
case|case
name|EGL_CONTEXT_MINOR_VERSION
case|:
name|clientMinorVersion
operator|=
name|value
expr_stmt|;
break|break;
case|case
name|EGL_CONTEXT_FLAGS_KHR
case|:
name|contextFlags
operator|=
name|value
expr_stmt|;
break|break;
case|case
name|EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR
case|:
comment|// Only valid for OpenGL (non-ES) contexts
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
case|case
name|EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT
case|:
if|if
condition|(
operator|!
name|display
operator|->
name|getExtensions
argument_list|()
operator|.
name|createContextRobustness
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
if|if
condition|(
name|value
operator|!=
name|EGL_TRUE
operator|&&
name|value
operator|!=
name|EGL_FALSE
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
name|robustAccess
operator|=
operator|(
name|value
operator|==
name|EGL_TRUE
operator|)
expr_stmt|;
break|break;
case|case
name|EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR
case|:
assert|static_assert
argument_list|(
name|EGL_LOSE_CONTEXT_ON_RESET_EXT
operator|==
name|EGL_LOSE_CONTEXT_ON_RESET_KHR
argument_list|,
literal|"EGL extension enums not equal."
argument_list|)
assert|;
assert|static_assert
argument_list|(
name|EGL_NO_RESET_NOTIFICATION_EXT
operator|==
name|EGL_NO_RESET_NOTIFICATION_KHR
argument_list|,
literal|"EGL extension enums not equal."
argument_list|)
assert|;
comment|// same as EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT, fall through
case|case
name|EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT
case|:
if|if
condition|(
operator|!
name|display
operator|->
name|getExtensions
argument_list|()
operator|.
name|createContextRobustness
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
if|if
condition|(
name|value
operator|==
name|EGL_LOSE_CONTEXT_ON_RESET_EXT
condition|)
block|{
name|resetNotification
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
name|EGL_NO_RESET_NOTIFICATION_EXT
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
break|break;
default|default:
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
block|}
if|if
condition|(
operator|(
name|clientMajorVersion
operator|!=
literal|2
operator|&&
name|clientMajorVersion
operator|!=
literal|3
operator|)
operator|||
name|clientMinorVersion
operator|!=
literal|0
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_CONFIG
argument_list|)
return|;
block|}
if|if
condition|(
name|clientMajorVersion
operator|==
literal|3
operator|&&
operator|!
operator|(
name|configuration
operator|->
name|conformant
operator|&
name|EGL_OPENGL_ES3_BIT_KHR
operator|)
operator|&&
operator|!
operator|(
name|configuration
operator|->
name|configCaveat
operator|&
name|EGL_NON_CONFORMANT_CONFIG
operator|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_CONFIG
argument_list|)
return|;
block|}
comment|// Note: EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR does not apply to ES
specifier|const
name|EGLint
name|validContextFlags
init|=
operator|(
name|EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR
operator||
name|EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|contextFlags
operator|&
operator|~
name|validContextFlags
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
if|if
condition|(
operator|(
name|contextFlags
operator|&
name|EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR
operator|)
operator|>
literal|0
condition|)
block|{
name|robustAccess
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|robustAccess
condition|)
block|{
comment|// Unimplemented
return|return
name|Error
argument_list|(
name|EGL_BAD_CONFIG
argument_list|)
return|;
block|}
if|if
condition|(
name|shareContext
condition|)
block|{
comment|// Shared context is invalid or is owned by another display
if|if
condition|(
operator|!
name|display
operator|->
name|isValidContext
argument_list|(
name|shareContext
argument_list|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
return|;
block|}
if|if
condition|(
name|shareContext
operator|->
name|isResetNotificationEnabled
argument_list|()
operator|!=
name|resetNotification
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
return|;
block|}
if|if
condition|(
name|shareContext
operator|->
name|getClientVersion
argument_list|()
operator|!=
name|clientMajorVersion
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_CONTEXT
argument_list|)
return|;
block|}
block|}
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|ValidateCreateWindowSurface
name|Error
name|ValidateCreateWindowSurface
parameter_list|(
name|Display
modifier|*
name|display
parameter_list|,
name|Config
modifier|*
name|config
parameter_list|,
name|EGLNativeWindowType
name|window
parameter_list|,
specifier|const
name|AttributeMap
modifier|&
name|attributes
parameter_list|)
block|{
name|Error
name|error
init|=
name|ValidateConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
if|if
condition|(
operator|!
name|display
operator|->
name|isValidNativeWindow
argument_list|(
name|window
argument_list|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_NATIVE_WINDOW
argument_list|)
return|;
block|}
specifier|const
name|DisplayExtensions
modifier|&
name|displayExtensions
init|=
name|display
operator|->
name|getExtensions
argument_list|()
decl_stmt|;
for|for
control|(
name|AttributeMap
operator|::
name|const_iterator
name|attributeIter
init|=
name|attributes
operator|.
name|begin
argument_list|()
init|;
name|attributeIter
operator|!=
name|attributes
operator|.
name|end
argument_list|()
condition|;
name|attributeIter
operator|++
control|)
block|{
name|EGLint
name|attribute
init|=
name|attributeIter
operator|->
name|first
decl_stmt|;
name|EGLint
name|value
init|=
name|attributeIter
operator|->
name|second
decl_stmt|;
switch|switch
condition|(
name|attribute
condition|)
block|{
case|case
name|EGL_RENDER_BUFFER
case|:
switch|switch
condition|(
name|value
condition|)
block|{
case|case
name|EGL_BACK_BUFFER
case|:
break|break;
case|case
name|EGL_SINGLE_BUFFER
case|:
return|return
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
return|;
comment|// Rendering directly to front buffer not supported
default|default:
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
break|break;
case|case
name|EGL_POST_SUB_BUFFER_SUPPORTED_NV
case|:
if|if
condition|(
operator|!
name|displayExtensions
operator|.
name|postSubBuffer
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
break|break;
case|case
name|EGL_WIDTH
case|:
case|case
name|EGL_HEIGHT
case|:
if|if
condition|(
operator|!
name|displayExtensions
operator|.
name|windowFixedSize
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
return|;
block|}
break|break;
case|case
name|EGL_FIXED_SIZE_ANGLE
case|:
if|if
condition|(
operator|!
name|displayExtensions
operator|.
name|windowFixedSize
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
break|break;
case|case
name|EGL_VG_COLORSPACE
case|:
return|return
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
return|;
case|case
name|EGL_VG_ALPHA_FORMAT
case|:
return|return
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
return|;
default|default:
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|Display
operator|::
name|hasExistingWindowSurface
argument_list|(
name|window
argument_list|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|)
return|;
block|}
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|ValidateCreatePbufferSurface
name|Error
name|ValidateCreatePbufferSurface
parameter_list|(
name|Display
modifier|*
name|display
parameter_list|,
name|Config
modifier|*
name|config
parameter_list|,
specifier|const
name|AttributeMap
modifier|&
name|attributes
parameter_list|)
block|{
name|Error
name|error
init|=
name|ValidateConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
for|for
control|(
name|AttributeMap
operator|::
name|const_iterator
name|attributeIter
init|=
name|attributes
operator|.
name|begin
argument_list|()
init|;
name|attributeIter
operator|!=
name|attributes
operator|.
name|end
argument_list|()
condition|;
name|attributeIter
operator|++
control|)
block|{
name|EGLint
name|attribute
init|=
name|attributeIter
operator|->
name|first
decl_stmt|;
name|EGLint
name|value
init|=
name|attributeIter
operator|->
name|second
decl_stmt|;
switch|switch
condition|(
name|attribute
condition|)
block|{
case|case
name|EGL_WIDTH
case|:
case|case
name|EGL_HEIGHT
case|:
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
return|;
block|}
break|break;
case|case
name|EGL_LARGEST_PBUFFER
case|:
break|break;
case|case
name|EGL_TEXTURE_FORMAT
case|:
switch|switch
condition|(
name|value
condition|)
block|{
case|case
name|EGL_NO_TEXTURE
case|:
case|case
name|EGL_TEXTURE_RGB
case|:
case|case
name|EGL_TEXTURE_RGBA
case|:
break|break;
default|default:
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
break|break;
case|case
name|EGL_TEXTURE_TARGET
case|:
switch|switch
condition|(
name|value
condition|)
block|{
case|case
name|EGL_NO_TEXTURE
case|:
case|case
name|EGL_TEXTURE_2D
case|:
break|break;
default|default:
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
break|break;
case|case
name|EGL_MIPMAP_TEXTURE
case|:
break|break;
case|case
name|EGL_VG_COLORSPACE
case|:
break|break;
case|case
name|EGL_VG_ALPHA_FORMAT
case|:
break|break;
default|default:
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|config
operator|->
name|surfaceType
operator|&
name|EGL_PBUFFER_BIT
operator|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
return|;
block|}
specifier|const
name|Caps
modifier|&
name|caps
init|=
name|display
operator|->
name|getCaps
argument_list|()
decl_stmt|;
name|EGLenum
name|textureFormat
init|=
name|attributes
operator|.
name|get
argument_list|(
name|EGL_TEXTURE_FORMAT
argument_list|,
name|EGL_NO_TEXTURE
argument_list|)
decl_stmt|;
name|EGLenum
name|textureTarget
init|=
name|attributes
operator|.
name|get
argument_list|(
name|EGL_TEXTURE_TARGET
argument_list|,
name|EGL_NO_TEXTURE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|textureFormat
operator|!=
name|EGL_NO_TEXTURE
operator|&&
name|textureTarget
operator|==
name|EGL_NO_TEXTURE
operator|)
operator|||
operator|(
name|textureFormat
operator|==
name|EGL_NO_TEXTURE
operator|&&
name|textureTarget
operator|!=
name|EGL_NO_TEXTURE
operator|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
return|;
block|}
if|if
condition|(
operator|(
name|textureFormat
operator|==
name|EGL_TEXTURE_RGB
operator|&&
name|config
operator|->
name|bindToTextureRGB
operator|!=
name|EGL_TRUE
operator|)
operator|||
operator|(
name|textureFormat
operator|==
name|EGL_TEXTURE_RGBA
operator|&&
name|config
operator|->
name|bindToTextureRGBA
operator|!=
name|EGL_TRUE
operator|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
name|EGLint
name|width
init|=
name|attributes
operator|.
name|get
argument_list|(
name|EGL_WIDTH
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|EGLint
name|height
init|=
name|attributes
operator|.
name|get
argument_list|(
name|EGL_HEIGHT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|textureFormat
operator|!=
name|EGL_NO_TEXTURE
operator|&&
operator|!
name|caps
operator|.
name|textureNPOT
operator|&&
operator|(
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|width
argument_list|)
operator|||
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|height
argument_list|)
operator|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
return|;
block|}
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|ValidateCreatePbufferFromClientBuffer
name|Error
name|ValidateCreatePbufferFromClientBuffer
parameter_list|(
name|Display
modifier|*
name|display
parameter_list|,
name|EGLenum
name|buftype
parameter_list|,
name|EGLClientBuffer
name|buffer
parameter_list|,
name|Config
modifier|*
name|config
parameter_list|,
specifier|const
name|AttributeMap
modifier|&
name|attributes
parameter_list|)
block|{
name|Error
name|error
init|=
name|ValidateConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
specifier|const
name|DisplayExtensions
modifier|&
name|displayExtensions
init|=
name|display
operator|->
name|getExtensions
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|buftype
condition|)
block|{
case|case
name|EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE
case|:
if|if
condition|(
operator|!
name|displayExtensions
operator|.
name|d3dShareHandleClientBuffer
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
return|;
block|}
if|if
condition|(
name|buffer
operator|==
literal|nullptr
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
return|;
block|}
break|break;
default|default:
return|return
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
return|;
block|}
for|for
control|(
name|AttributeMap
operator|::
name|const_iterator
name|attributeIter
init|=
name|attributes
operator|.
name|begin
argument_list|()
init|;
name|attributeIter
operator|!=
name|attributes
operator|.
name|end
argument_list|()
condition|;
name|attributeIter
operator|++
control|)
block|{
name|EGLint
name|attribute
init|=
name|attributeIter
operator|->
name|first
decl_stmt|;
name|EGLint
name|value
init|=
name|attributeIter
operator|->
name|second
decl_stmt|;
switch|switch
condition|(
name|attribute
condition|)
block|{
case|case
name|EGL_WIDTH
case|:
case|case
name|EGL_HEIGHT
case|:
if|if
condition|(
operator|!
name|displayExtensions
operator|.
name|d3dShareHandleClientBuffer
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
return|;
block|}
if|if
condition|(
name|value
operator|<
literal|0
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
return|;
block|}
break|break;
case|case
name|EGL_TEXTURE_FORMAT
case|:
switch|switch
condition|(
name|value
condition|)
block|{
case|case
name|EGL_NO_TEXTURE
case|:
case|case
name|EGL_TEXTURE_RGB
case|:
case|case
name|EGL_TEXTURE_RGBA
case|:
break|break;
default|default:
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
break|break;
case|case
name|EGL_TEXTURE_TARGET
case|:
switch|switch
condition|(
name|value
condition|)
block|{
case|case
name|EGL_NO_TEXTURE
case|:
case|case
name|EGL_TEXTURE_2D
case|:
break|break;
default|default:
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
break|break;
case|case
name|EGL_MIPMAP_TEXTURE
case|:
break|break;
default|default:
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|config
operator|->
name|surfaceType
operator|&
name|EGL_PBUFFER_BIT
operator|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
return|;
block|}
name|EGLenum
name|textureFormat
init|=
name|attributes
operator|.
name|get
argument_list|(
name|EGL_TEXTURE_FORMAT
argument_list|,
name|EGL_NO_TEXTURE
argument_list|)
decl_stmt|;
name|EGLenum
name|textureTarget
init|=
name|attributes
operator|.
name|get
argument_list|(
name|EGL_TEXTURE_TARGET
argument_list|,
name|EGL_NO_TEXTURE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|textureFormat
operator|!=
name|EGL_NO_TEXTURE
operator|&&
name|textureTarget
operator|==
name|EGL_NO_TEXTURE
operator|)
operator|||
operator|(
name|textureFormat
operator|==
name|EGL_NO_TEXTURE
operator|&&
name|textureTarget
operator|!=
name|EGL_NO_TEXTURE
operator|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
return|;
block|}
if|if
condition|(
operator|(
name|textureFormat
operator|==
name|EGL_TEXTURE_RGB
operator|&&
name|config
operator|->
name|bindToTextureRGB
operator|!=
name|EGL_TRUE
operator|)
operator|||
operator|(
name|textureFormat
operator|==
name|EGL_TEXTURE_RGBA
operator|&&
name|config
operator|->
name|bindToTextureRGBA
operator|!=
name|EGL_TRUE
operator|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
if|if
condition|(
name|buftype
operator|==
name|EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE
condition|)
block|{
name|EGLint
name|width
init|=
name|attributes
operator|.
name|get
argument_list|(
name|EGL_WIDTH
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|EGLint
name|height
init|=
name|attributes
operator|.
name|get
argument_list|(
name|EGL_HEIGHT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
return|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
comment|// On Windows Store, we know the originating texture came from D3D11, so bypass this check
specifier|const
name|Caps
modifier|&
name|caps
init|=
name|display
operator|->
name|getCaps
argument_list|()
decl_stmt|;
if|if
condition|(
name|textureFormat
operator|!=
name|EGL_NO_TEXTURE
operator|&&
operator|!
name|caps
operator|.
name|textureNPOT
operator|&&
operator|(
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|width
argument_list|)
operator|||
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|height
argument_list|)
operator|)
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
return|;
block|}
endif|#
directive|endif
block|}
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
block|}
end_namespace
end_unit
