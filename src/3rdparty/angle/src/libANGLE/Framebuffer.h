begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Framebuffer.h: Defines the gl::Framebuffer class. Implements GL framebuffer
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4 page 105.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_FRAMEBUFFER_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_FRAMEBUFFER_H_
define|#
directive|define
name|LIBANGLE_FRAMEBUFFER_H_
end_define
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Constants.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Debug.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/RefCountObject.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|ImplFactory
decl_stmt|;
name|class
name|FramebufferImpl
decl_stmt|;
name|class
name|RenderbufferImpl
decl_stmt|;
name|class
name|SurfaceImpl
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|egl
block|{
name|class
name|Surface
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Context
decl_stmt|;
name|class
name|Renderbuffer
decl_stmt|;
name|class
name|State
decl_stmt|;
name|class
name|Texture
decl_stmt|;
name|class
name|TextureCapsMap
decl_stmt|;
struct_decl|struct
name|Caps
struct_decl|;
struct_decl|struct
name|Data
struct_decl|;
struct_decl|struct
name|Extensions
struct_decl|;
struct_decl|struct
name|ImageIndex
struct_decl|;
struct_decl|struct
name|Rectangle
struct_decl|;
name|class
name|Framebuffer
name|final
range|:
name|public
name|LabeledObject
block|{
name|public
operator|:
name|class
name|Data
name|final
operator|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|explicit
name|Data
argument_list|()
block|;
name|explicit
name|Data
argument_list|(
specifier|const
name|Caps
operator|&
name|caps
argument_list|)
block|;
operator|~
name|Data
argument_list|()
block|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getLabel
argument_list|()
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getReadAttachment
argument_list|()
specifier|const
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getFirstColorAttachment
argument_list|()
specifier|const
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getDepthOrStencilAttachment
argument_list|()
specifier|const
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getColorAttachment
argument_list|(
argument|size_t colorAttachment
argument_list|)
specifier|const
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getDepthAttachment
argument_list|()
specifier|const
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getStencilAttachment
argument_list|()
specifier|const
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getDepthStencilAttachment
argument_list|()
specifier|const
block|;
specifier|const
name|std
operator|::
name|vector
operator|<
name|GLenum
operator|>
operator|&
name|getDrawBufferStates
argument_list|()
specifier|const
block|{
return|return
name|mDrawBufferStates
return|;
block|}
name|GLenum
name|getReadBufferState
argument_list|()
specifier|const
block|{
return|return
name|mReadBufferState
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|FramebufferAttachment
operator|>
operator|&
name|getColorAttachments
argument_list|()
specifier|const
block|{
return|return
name|mColorAttachments
return|;
block|}
name|bool
name|attachmentsHaveSameDimensions
argument_list|()
specifier|const
block|;
name|private
operator|:
name|friend
name|class
name|Framebuffer
block|;
name|std
operator|::
name|string
name|mLabel
block|;
name|std
operator|::
name|vector
operator|<
name|FramebufferAttachment
operator|>
name|mColorAttachments
block|;
name|FramebufferAttachment
name|mDepthAttachment
block|;
name|FramebufferAttachment
name|mStencilAttachment
block|;
name|std
operator|::
name|vector
operator|<
name|GLenum
operator|>
name|mDrawBufferStates
block|;
name|GLenum
name|mReadBufferState
block|;     }
block|;
name|Framebuffer
argument_list|(
argument|const Caps&caps
argument_list|,
argument|rx::ImplFactory *factory
argument_list|,
argument|GLuint id
argument_list|)
block|;
name|Framebuffer
argument_list|(
name|rx
operator|::
name|SurfaceImpl
operator|*
name|surface
argument_list|)
block|;
name|virtual
operator|~
name|Framebuffer
argument_list|()
block|;
name|void
name|setLabel
argument_list|(
argument|const std::string&label
argument_list|)
name|override
block|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getLabel
argument_list|()
specifier|const
name|override
block|;
specifier|const
name|rx
operator|::
name|FramebufferImpl
operator|*
name|getImplementation
argument_list|()
specifier|const
block|{
return|return
name|mImpl
return|;
block|}
name|rx
operator|::
name|FramebufferImpl
operator|*
name|getImplementation
argument_list|()
block|{
return|return
name|mImpl
return|;
block|}
name|GLuint
name|id
argument_list|()
specifier|const
block|{
return|return
name|mId
return|;
block|}
name|void
name|setAttachment
argument_list|(
argument|GLenum type
argument_list|,
argument|GLenum binding
argument_list|,
argument|const ImageIndex&textureIndex
argument_list|,
argument|FramebufferAttachmentObject *resource
argument_list|)
block|;
name|void
name|resetAttachment
argument_list|(
argument|GLenum binding
argument_list|)
block|;
name|void
name|detachTexture
argument_list|(
argument|GLuint texture
argument_list|)
block|;
name|void
name|detachRenderbuffer
argument_list|(
argument|GLuint renderbuffer
argument_list|)
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getColorbuffer
argument_list|(
argument|size_t colorAttachment
argument_list|)
specifier|const
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getDepthbuffer
argument_list|()
specifier|const
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getStencilbuffer
argument_list|()
specifier|const
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getDepthStencilBuffer
argument_list|()
specifier|const
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getDepthOrStencilbuffer
argument_list|()
specifier|const
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getReadColorbuffer
argument_list|()
specifier|const
block|;
name|GLenum
name|getReadColorbufferType
argument_list|()
specifier|const
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getFirstColorbuffer
argument_list|()
specifier|const
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getAttachment
argument_list|(
argument|GLenum attachment
argument_list|)
specifier|const
block|;
name|size_t
name|getDrawbufferStateCount
argument_list|()
specifier|const
block|;
name|GLenum
name|getDrawBufferState
argument_list|(
argument|size_t drawBuffer
argument_list|)
specifier|const
block|;
name|void
name|setDrawBuffers
argument_list|(
argument|size_t count
argument_list|,
argument|const GLenum *buffers
argument_list|)
block|;
specifier|const
name|FramebufferAttachment
operator|*
name|getDrawBuffer
argument_list|(
argument|size_t drawBuffer
argument_list|)
specifier|const
block|;
name|bool
name|hasEnabledDrawBuffer
argument_list|()
specifier|const
block|;
name|GLenum
name|getReadBufferState
argument_list|()
specifier|const
block|;
name|void
name|setReadBuffer
argument_list|(
argument|GLenum buffer
argument_list|)
block|;
name|size_t
name|getNumColorBuffers
argument_list|()
specifier|const
block|;
name|bool
name|hasDepth
argument_list|()
specifier|const
block|;
name|bool
name|hasStencil
argument_list|()
specifier|const
block|;
name|int
name|getSamples
argument_list|(
argument|const gl::Data&data
argument_list|)
specifier|const
block|;
name|bool
name|usingExtendedDrawBuffers
argument_list|()
specifier|const
block|;
name|GLenum
name|checkStatus
argument_list|(
argument|const gl::Data&data
argument_list|)
specifier|const
block|;
name|bool
name|hasValidDepthStencil
argument_list|()
specifier|const
block|;
name|Error
name|discard
argument_list|(
argument|size_t count
argument_list|,
argument|const GLenum *attachments
argument_list|)
block|;
name|Error
name|invalidate
argument_list|(
argument|size_t count
argument_list|,
argument|const GLenum *attachments
argument_list|)
block|;
name|Error
name|invalidateSub
argument_list|(
argument|size_t count
argument_list|,
argument|const GLenum *attachments
argument_list|,
argument|const gl::Rectangle&area
argument_list|)
block|;
name|Error
name|clear
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLbitfield mask
argument_list|)
block|;
name|Error
name|clearBufferfv
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLenum buffer
argument_list|,
argument|GLint drawbuffer
argument_list|,
argument|const GLfloat *values
argument_list|)
block|;
name|Error
name|clearBufferuiv
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLenum buffer
argument_list|,
argument|GLint drawbuffer
argument_list|,
argument|const GLuint *values
argument_list|)
block|;
name|Error
name|clearBufferiv
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLenum buffer
argument_list|,
argument|GLint drawbuffer
argument_list|,
argument|const GLint *values
argument_list|)
block|;
name|Error
name|clearBufferfi
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLenum buffer
argument_list|,
argument|GLint drawbuffer
argument_list|,
argument|GLfloat depth
argument_list|,
argument|GLint stencil
argument_list|)
block|;
name|GLenum
name|getImplementationColorReadFormat
argument_list|()
specifier|const
block|;
name|GLenum
name|getImplementationColorReadType
argument_list|()
specifier|const
block|;
name|Error
name|readPixels
argument_list|(
argument|const gl::State&state
argument_list|,
argument|const gl::Rectangle&area
argument_list|,
argument|GLenum format
argument_list|,
argument|GLenum type
argument_list|,
argument|GLvoid *pixels
argument_list|)
specifier|const
block|;
name|Error
name|blit
argument_list|(
argument|const State&state
argument_list|,
argument|const Rectangle&sourceArea
argument_list|,
argument|const Rectangle&destArea
argument_list|,
argument|GLbitfield mask
argument_list|,
argument|GLenum filter
argument_list|,
argument|const Framebuffer *sourceFramebuffer
argument_list|)
block|;      enum
name|DirtyBitType
block|{
name|DIRTY_BIT_COLOR_ATTACHMENT_0
block|,
name|DIRTY_BIT_COLOR_ATTACHMENT_MAX
operator|=
name|DIRTY_BIT_COLOR_ATTACHMENT_0
operator|+
name|gl
operator|::
name|IMPLEMENTATION_MAX_FRAMEBUFFER_ATTACHMENTS
block|,
name|DIRTY_BIT_DEPTH_ATTACHMENT
operator|=
name|DIRTY_BIT_COLOR_ATTACHMENT_MAX
block|,
name|DIRTY_BIT_STENCIL_ATTACHMENT
block|,
name|DIRTY_BIT_DRAW_BUFFERS
block|,
name|DIRTY_BIT_READ_BUFFER
block|,
name|DIRTY_BIT_UNKNOWN
block|,
name|DIRTY_BIT_MAX
operator|=
name|DIRTY_BIT_UNKNOWN
block|,     }
block|;
typedef|typedef
name|std
operator|::
name|bitset
operator|<
name|DIRTY_BIT_MAX
operator|>
name|DirtyBits
expr_stmt|;
name|bool
name|hasAnyDirtyBit
argument_list|()
specifier|const
block|{
return|return
name|mDirtyBits
operator|.
name|any
argument_list|()
return|;
block|}
name|void
name|syncState
argument_list|()
specifier|const
decl_stmt|;
name|protected
label|:
name|void
name|detachResourceById
parameter_list|(
name|GLenum
name|resourceType
parameter_list|,
name|GLuint
name|resourceId
parameter_list|)
function_decl|;
name|Data
name|mData
decl_stmt|;
name|rx
operator|::
name|FramebufferImpl
operator|*
name|mImpl
expr_stmt|;
name|GLuint
name|mId
decl_stmt|;
comment|// TODO(jmadill): See if we can make this non-mutable.
name|mutable
name|DirtyBits
name|mDirtyBits
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_FRAMEBUFFER_H_
end_comment
end_unit
