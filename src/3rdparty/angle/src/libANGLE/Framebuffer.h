begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Framebuffer.h: Defines the gl::Framebuffer class. Implements GL framebuffer
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4 page 105.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_FRAMEBUFFER_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_FRAMEBUFFER_H_
define|#
directive|define
name|LIBANGLE_FRAMEBUFFER_H_
end_define
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Constants.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/RefCountObject.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|ImplFactory
decl_stmt|;
name|class
name|FramebufferImpl
decl_stmt|;
name|class
name|RenderbufferImpl
decl_stmt|;
struct_decl|struct
name|Workarounds
struct_decl|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|egl
block|{
name|class
name|Surface
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|FramebufferAttachment
decl_stmt|;
name|class
name|Renderbuffer
decl_stmt|;
name|class
name|State
decl_stmt|;
name|class
name|Texture
decl_stmt|;
name|class
name|TextureCapsMap
decl_stmt|;
struct_decl|struct
name|Caps
struct_decl|;
struct_decl|struct
name|Data
struct_decl|;
struct_decl|struct
name|Extensions
struct_decl|;
struct_decl|struct
name|ImageIndex
struct_decl|;
struct_decl|struct
name|Rectangle
struct_decl|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|FramebufferAttachment
operator|*
operator|>
name|AttachmentList
expr_stmt|;
name|class
name|Framebuffer
block|{
name|public
label|:
name|class
name|Data
name|final
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|explicit
name|Data
argument_list|(
specifier|const
name|Caps
operator|&
name|caps
argument_list|)
block|;
operator|~
name|Data
argument_list|()
block|;
name|FramebufferAttachment
operator|*
name|getReadAttachment
argument_list|()
specifier|const
block|;
name|FramebufferAttachment
operator|*
name|getFirstColorAttachment
argument_list|()
specifier|const
block|;
name|FramebufferAttachment
operator|*
name|getDepthOrStencilAttachment
argument_list|()
specifier|const
block|;
name|AttachmentList
name|mColorAttachments
block|;
name|FramebufferAttachment
operator|*
name|mDepthAttachment
block|;
name|FramebufferAttachment
operator|*
name|mStencilAttachment
block|;
name|std
operator|::
name|vector
operator|<
name|GLenum
operator|>
name|mDrawBufferStates
block|;
name|GLenum
name|mReadBufferState
block|;     }
decl_stmt|;
name|Framebuffer
argument_list|(
argument|const Caps&caps
argument_list|,
argument|rx::ImplFactory *factory
argument_list|,
argument|GLuint id
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|Framebuffer
argument_list|()
expr_stmt|;
specifier|const
name|rx
operator|::
name|FramebufferImpl
operator|*
name|getImplementation
argument_list|()
specifier|const
block|{
return|return
name|mImpl
return|;
block|}
name|rx
operator|::
name|FramebufferImpl
operator|*
name|getImplementation
argument_list|()
block|{
return|return
name|mImpl
return|;
block|}
name|GLuint
name|id
argument_list|()
specifier|const
block|{
return|return
name|mId
return|;
block|}
name|void
name|setTextureAttachment
parameter_list|(
name|GLenum
name|attachment
parameter_list|,
name|Texture
modifier|*
name|texture
parameter_list|,
specifier|const
name|ImageIndex
modifier|&
name|imageIndex
parameter_list|)
function_decl|;
name|void
name|setRenderbufferAttachment
parameter_list|(
name|GLenum
name|attachment
parameter_list|,
name|Renderbuffer
modifier|*
name|renderbuffer
parameter_list|)
function_decl|;
name|void
name|setNULLAttachment
parameter_list|(
name|GLenum
name|attachment
parameter_list|)
function_decl|;
name|void
name|detachTexture
parameter_list|(
name|GLuint
name|texture
parameter_list|)
function_decl|;
name|void
name|detachRenderbuffer
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
function_decl|;
name|FramebufferAttachment
modifier|*
name|getColorbuffer
argument_list|(
name|unsigned
name|int
name|colorAttachment
argument_list|)
decl|const
decl_stmt|;
name|FramebufferAttachment
operator|*
name|getDepthbuffer
argument_list|()
specifier|const
expr_stmt|;
name|FramebufferAttachment
operator|*
name|getStencilbuffer
argument_list|()
specifier|const
expr_stmt|;
name|FramebufferAttachment
operator|*
name|getDepthStencilBuffer
argument_list|()
specifier|const
expr_stmt|;
name|FramebufferAttachment
operator|*
name|getDepthOrStencilbuffer
argument_list|()
specifier|const
expr_stmt|;
name|FramebufferAttachment
operator|*
name|getReadColorbuffer
argument_list|()
specifier|const
expr_stmt|;
name|GLenum
name|getReadColorbufferType
argument_list|()
specifier|const
expr_stmt|;
name|FramebufferAttachment
operator|*
name|getFirstColorbuffer
argument_list|()
specifier|const
expr_stmt|;
name|FramebufferAttachment
modifier|*
name|getAttachment
argument_list|(
name|GLenum
name|attachment
argument_list|)
decl|const
decl_stmt|;
name|GLenum
name|getDrawBufferState
argument_list|(
name|unsigned
name|int
name|colorAttachment
argument_list|)
decl|const
decl_stmt|;
name|void
name|setDrawBuffers
parameter_list|(
name|size_t
name|count
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|buffers
parameter_list|)
function_decl|;
name|GLenum
name|getReadBufferState
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setReadBuffer
parameter_list|(
name|GLenum
name|buffer
parameter_list|)
function_decl|;
name|bool
name|isEnabledColorAttachment
argument_list|(
name|unsigned
name|int
name|colorAttachment
argument_list|)
decl|const
decl_stmt|;
name|bool
name|hasEnabledColorAttachment
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|hasStencil
argument_list|()
specifier|const
expr_stmt|;
name|int
name|getSamples
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
name|data
argument_list|)
decl|const
decl_stmt|;
name|bool
name|usingExtendedDrawBuffers
argument_list|()
specifier|const
expr_stmt|;
name|GLenum
name|checkStatus
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
name|data
argument_list|)
decl|const
decl_stmt|;
name|bool
name|hasValidDepthStencil
argument_list|()
specifier|const
expr_stmt|;
name|Error
name|invalidate
parameter_list|(
name|size_t
name|count
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|)
function_decl|;
name|Error
name|invalidateSub
argument_list|(
name|size_t
name|count
argument_list|,
specifier|const
name|GLenum
operator|*
name|attachments
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
name|area
argument_list|)
decl_stmt|;
name|Error
name|clear
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
name|data
argument_list|,
name|GLbitfield
name|mask
argument_list|)
decl_stmt|;
name|Error
name|clearBufferfv
parameter_list|(
specifier|const
name|State
modifier|&
name|state
parameter_list|,
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
function_decl|;
name|Error
name|clearBufferuiv
parameter_list|(
specifier|const
name|State
modifier|&
name|state
parameter_list|,
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|values
parameter_list|)
function_decl|;
name|Error
name|clearBufferiv
parameter_list|(
specifier|const
name|State
modifier|&
name|state
parameter_list|,
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLint
modifier|*
name|values
parameter_list|)
function_decl|;
name|Error
name|clearBufferfi
parameter_list|(
specifier|const
name|State
modifier|&
name|state
parameter_list|,
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
name|GLfloat
name|depth
parameter_list|,
name|GLint
name|stencil
parameter_list|)
function_decl|;
name|GLenum
name|getImplementationColorReadFormat
argument_list|()
specifier|const
expr_stmt|;
name|GLenum
name|getImplementationColorReadType
argument_list|()
specifier|const
expr_stmt|;
name|Error
name|readPixels
argument_list|(
specifier|const
name|gl
operator|::
name|State
operator|&
name|state
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
name|area
argument_list|,
name|GLenum
name|format
argument_list|,
name|GLenum
name|type
argument_list|,
name|GLvoid
operator|*
name|pixels
argument_list|)
decl|const
decl_stmt|;
name|Error
name|blit
argument_list|(
specifier|const
name|gl
operator|::
name|State
operator|&
name|state
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
name|sourceArea
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
name|destArea
argument_list|,
name|GLbitfield
name|mask
argument_list|,
name|GLenum
name|filter
argument_list|,
specifier|const
name|gl
operator|::
name|Framebuffer
operator|*
name|sourceFramebuffer
argument_list|)
decl_stmt|;
name|protected
label|:
name|void
name|setAttachment
parameter_list|(
name|GLenum
name|attachment
parameter_list|,
name|FramebufferAttachment
modifier|*
name|attachmentObj
parameter_list|)
function_decl|;
name|void
name|detachResourceById
parameter_list|(
name|GLenum
name|resourceType
parameter_list|,
name|GLuint
name|resourceId
parameter_list|)
function_decl|;
name|Data
name|mData
decl_stmt|;
name|rx
operator|::
name|FramebufferImpl
operator|*
name|mImpl
expr_stmt|;
name|GLuint
name|mId
decl_stmt|;
block|}
empty_stmt|;
name|class
name|DefaultFramebuffer
range|:
name|public
name|Framebuffer
block|{
name|public
operator|:
name|DefaultFramebuffer
argument_list|(
specifier|const
name|gl
operator|::
name|Caps
operator|&
name|caps
argument_list|,
name|rx
operator|::
name|ImplFactory
operator|*
name|factory
argument_list|,
name|egl
operator|::
name|Surface
operator|*
name|surface
argument_list|)
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_FRAMEBUFFER_H_
end_comment
end_unit
