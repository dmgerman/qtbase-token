begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// IndexRangeCache.h: Defines the gl::IndexRangeCache class which stores information about
end_comment
begin_comment
comment|// ranges of indices.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_INDEXRANGECACHE_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_INDEXRANGECACHE_H_
define|#
directive|define
name|LIBANGLE_INDEXRANGECACHE_H_
end_define
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|<map>
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|IndexRangeCache
block|{
name|public
label|:
name|void
name|addRange
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|size_t
name|offset
parameter_list|,
name|size_t
name|count
parameter_list|,
name|bool
name|primitiveRestartEnabled
parameter_list|,
specifier|const
name|IndexRange
modifier|&
name|range
parameter_list|)
function_decl|;
name|bool
name|findRange
argument_list|(
name|GLenum
name|type
argument_list|,
name|size_t
name|offset
argument_list|,
name|size_t
name|count
argument_list|,
name|bool
name|primitiveRestartEnabled
argument_list|,
name|IndexRange
operator|*
name|outRange
argument_list|)
decl|const
decl_stmt|;
name|void
name|invalidateRange
parameter_list|(
name|size_t
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|private
label|:
struct|struct
name|IndexRangeKey
block|{
name|IndexRangeKey
argument_list|()
expr_stmt|;
name|IndexRangeKey
argument_list|(
argument|GLenum type
argument_list|,
argument|size_t offset
argument_list|,
argument|size_t count
argument_list|,
argument|bool primitiveRestart
argument_list|)
empty_stmt|;
name|bool
name|operator
operator|<
operator|(
specifier|const
name|IndexRangeKey
operator|&
name|rhs
operator|)
specifier|const
expr_stmt|;
name|GLenum
name|type
decl_stmt|;
name|size_t
name|offset
decl_stmt|;
name|size_t
name|count
decl_stmt|;
name|bool
name|primitiveRestartEnabled
decl_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|IndexRangeKey
operator|,
name|IndexRange
operator|>
name|IndexRangeMap
expr_stmt|;
name|IndexRangeMap
name|mIndexRangeCache
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_INDEXRANGECACHE_H_
end_comment
end_unit
