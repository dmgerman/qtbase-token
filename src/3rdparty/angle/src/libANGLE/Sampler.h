begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Sampler.h : Defines the Sampler class, which represents a GLES 3
end_comment
begin_comment
comment|// sampler object. Sampler objects store some state needed to sample textures.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_SAMPLER_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_SAMPLER_H_
define|#
directive|define
name|LIBANGLE_SAMPLER_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Debug.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/RefCountObject.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|ImplFactory
decl_stmt|;
name|class
name|SamplerImpl
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Sampler
name|final
range|:
name|public
name|RefCountObject
decl_stmt|,
name|public
name|LabeledObject
block|{
name|public
label|:
name|Sampler
argument_list|(
argument|rx::ImplFactory *factory
argument_list|,
argument|GLuint id
argument_list|)
empty_stmt|;
operator|~
name|Sampler
argument_list|()
name|override
expr_stmt|;
name|void
name|setLabel
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|label
argument_list|)
name|override
decl_stmt|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getLabel
argument_list|()
specifier|const
name|override
expr_stmt|;
name|void
name|setMinFilter
parameter_list|(
name|GLenum
name|minFilter
parameter_list|)
function_decl|;
name|GLenum
name|getMinFilter
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setMagFilter
parameter_list|(
name|GLenum
name|magFilter
parameter_list|)
function_decl|;
name|GLenum
name|getMagFilter
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWrapS
parameter_list|(
name|GLenum
name|wrapS
parameter_list|)
function_decl|;
name|GLenum
name|getWrapS
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWrapT
parameter_list|(
name|GLenum
name|wrapT
parameter_list|)
function_decl|;
name|GLenum
name|getWrapT
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWrapR
parameter_list|(
name|GLenum
name|wrapR
parameter_list|)
function_decl|;
name|GLenum
name|getWrapR
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setMaxAnisotropy
parameter_list|(
name|float
name|maxAnisotropy
parameter_list|)
function_decl|;
name|float
name|getMaxAnisotropy
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setMinLod
parameter_list|(
name|GLfloat
name|minLod
parameter_list|)
function_decl|;
name|GLfloat
name|getMinLod
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setMaxLod
parameter_list|(
name|GLfloat
name|maxLod
parameter_list|)
function_decl|;
name|GLfloat
name|getMaxLod
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setCompareMode
parameter_list|(
name|GLenum
name|compareMode
parameter_list|)
function_decl|;
name|GLenum
name|getCompareMode
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setCompareFunc
parameter_list|(
name|GLenum
name|compareFunc
parameter_list|)
function_decl|;
name|GLenum
name|getCompareFunc
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|SamplerState
operator|&
name|getSamplerState
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|rx
operator|::
name|SamplerImpl
operator|*
name|getImplementation
argument_list|()
specifier|const
expr_stmt|;
name|rx
operator|::
name|SamplerImpl
operator|*
name|getImplementation
argument_list|()
expr_stmt|;
name|private
label|:
name|rx
operator|::
name|SamplerImpl
operator|*
name|mImpl
expr_stmt|;
name|std
operator|::
name|string
name|mLabel
expr_stmt|;
name|SamplerState
name|mSamplerState
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_SAMPLER_H_
end_comment
end_unit
