begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2010-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"libANGLE/Uniform.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|<cstring>
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|LinkedUniform
name|LinkedUniform
operator|::
name|LinkedUniform
parameter_list|()
member_init_list|:
name|blockIndex
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|blockInfo
argument_list|(
name|sh
operator|::
name|BlockMemberInfo
operator|::
name|getDefaultBlockInfo
argument_list|()
argument_list|)
block|{ }
DECL|function|LinkedUniform
name|LinkedUniform
operator|::
name|LinkedUniform
parameter_list|(
name|GLenum
name|typeIn
parameter_list|,
name|GLenum
name|precisionIn
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|nameIn
parameter_list|,
name|unsigned
name|int
name|arraySizeIn
parameter_list|,
specifier|const
name|int
name|blockIndexIn
parameter_list|,
specifier|const
name|sh
operator|::
name|BlockMemberInfo
modifier|&
name|blockInfoIn
parameter_list|)
member_init_list|:
name|blockIndex
argument_list|(
name|blockIndexIn
argument_list|)
member_init_list|,
name|blockInfo
argument_list|(
name|blockInfoIn
argument_list|)
block|{
name|type
operator|=
name|typeIn
expr_stmt|;
name|precision
operator|=
name|precisionIn
expr_stmt|;
name|name
operator|=
name|nameIn
expr_stmt|;
name|arraySize
operator|=
name|arraySizeIn
expr_stmt|;
block|}
DECL|function|LinkedUniform
name|LinkedUniform
operator|::
name|LinkedUniform
parameter_list|(
specifier|const
name|sh
operator|::
name|Uniform
modifier|&
name|uniform
parameter_list|)
member_init_list|:
name|sh
operator|::
name|Uniform
argument_list|(
name|uniform
argument_list|)
member_init_list|,
name|blockIndex
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|blockInfo
argument_list|(
name|sh
operator|::
name|BlockMemberInfo
operator|::
name|getDefaultBlockInfo
argument_list|()
argument_list|)
block|{ }
DECL|function|LinkedUniform
name|LinkedUniform
operator|::
name|LinkedUniform
parameter_list|(
specifier|const
name|LinkedUniform
modifier|&
name|uniform
parameter_list|)
member_init_list|:
name|sh
operator|::
name|Uniform
argument_list|(
name|uniform
argument_list|)
member_init_list|,
name|blockIndex
argument_list|(
name|uniform
operator|.
name|blockIndex
argument_list|)
member_init_list|,
name|blockInfo
argument_list|(
name|uniform
operator|.
name|blockInfo
argument_list|)
block|{
comment|// This function is not intended to be called during runtime.
name|ASSERT
argument_list|(
name|uniform
operator|.
name|mLazyData
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|operator =
name|LinkedUniform
modifier|&
name|LinkedUniform
operator|::
name|operator
name|=
parameter_list|(
specifier|const
name|LinkedUniform
modifier|&
name|uniform
parameter_list|)
block|{
comment|// This function is not intended to be called during runtime.
name|ASSERT
argument_list|(
name|uniform
operator|.
name|mLazyData
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|sh
operator|::
name|Uniform
operator|::
name|operator
name|=
parameter_list|(
name|uniform
parameter_list|)
function_decl|;
name|blockIndex
operator|=
name|uniform
operator|.
name|blockIndex
expr_stmt|;
name|blockInfo
operator|=
name|uniform
operator|.
name|blockInfo
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|~LinkedUniform
name|LinkedUniform
operator|::
name|~
name|LinkedUniform
parameter_list|()
block|{ }
DECL|function|isInDefaultBlock
name|bool
name|LinkedUniform
operator|::
name|isInDefaultBlock
parameter_list|()
specifier|const
block|{
return|return
name|blockIndex
operator|==
operator|-
literal|1
return|;
block|}
DECL|function|dataSize
name|size_t
name|LinkedUniform
operator|::
name|dataSize
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|type
operator|!=
name|GL_STRUCT_ANGLEX
argument_list|)
expr_stmt|;
if|if
condition|(
name|mLazyData
operator|.
name|empty
argument_list|()
condition|)
block|{
name|mLazyData
operator|.
name|resize
argument_list|(
name|VariableExternalSize
argument_list|(
name|type
argument_list|)
operator|*
name|elementCount
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
operator|!
name|mLazyData
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mLazyData
operator|.
name|size
argument_list|()
return|;
block|}
DECL|function|data
name|uint8_t
modifier|*
name|LinkedUniform
operator|::
name|data
parameter_list|()
block|{
if|if
condition|(
name|mLazyData
operator|.
name|empty
argument_list|()
condition|)
block|{
comment|// dataSize() will init the data store.
name|size_t
name|size
init|=
name|dataSize
argument_list|()
decl_stmt|;
name|memset
argument_list|(
name|mLazyData
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
return|return
name|mLazyData
operator|.
name|data
argument_list|()
return|;
block|}
DECL|function|data
specifier|const
name|uint8_t
modifier|*
name|LinkedUniform
operator|::
name|data
parameter_list|()
specifier|const
block|{
return|return
cast|const_cast
argument_list|<
name|LinkedUniform
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|data
argument_list|()
return|;
block|}
DECL|function|isSampler
name|bool
name|LinkedUniform
operator|::
name|isSampler
parameter_list|()
specifier|const
block|{
return|return
name|IsSamplerType
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|function|isField
name|bool
name|LinkedUniform
operator|::
name|isField
parameter_list|()
specifier|const
block|{
return|return
name|name
operator|.
name|find
argument_list|(
literal|'.'
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
return|;
block|}
DECL|function|getElementSize
name|size_t
name|LinkedUniform
operator|::
name|getElementSize
parameter_list|()
specifier|const
block|{
return|return
name|VariableExternalSize
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|function|getDataPtrToElement
name|uint8_t
modifier|*
name|LinkedUniform
operator|::
name|getDataPtrToElement
parameter_list|(
name|size_t
name|elementIndex
parameter_list|)
block|{
name|ASSERT
argument_list|(
operator|(
operator|!
name|isArray
argument_list|()
operator|&&
name|elementIndex
operator|==
literal|0
operator|)
operator|||
operator|(
name|isArray
argument_list|()
operator|&&
name|elementIndex
operator|<
name|arraySize
operator|)
argument_list|)
expr_stmt|;
return|return
name|data
argument_list|()
operator|+
name|getElementSize
argument_list|()
operator|*
name|elementIndex
return|;
block|}
DECL|function|getDataPtrToElement
specifier|const
name|uint8_t
modifier|*
name|LinkedUniform
operator|::
name|getDataPtrToElement
parameter_list|(
name|size_t
name|elementIndex
parameter_list|)
specifier|const
block|{
return|return
cast|const_cast
argument_list|<
name|LinkedUniform
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
operator|->
name|getDataPtrToElement
argument_list|(
name|elementIndex
argument_list|)
return|;
block|}
DECL|function|UniformBlock
name|UniformBlock
operator|::
name|UniformBlock
parameter_list|()
member_init_list|:
name|isArray
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|arrayElement
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|dataSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|vertexStaticUse
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|fragmentStaticUse
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|UniformBlock
name|UniformBlock
operator|::
name|UniformBlock
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|nameIn
parameter_list|,
name|bool
name|isArrayIn
parameter_list|,
name|unsigned
name|int
name|arrayElementIn
parameter_list|)
member_init_list|:
name|name
argument_list|(
name|nameIn
argument_list|)
member_init_list|,
name|isArray
argument_list|(
name|isArrayIn
argument_list|)
member_init_list|,
name|arrayElement
argument_list|(
name|arrayElementIn
argument_list|)
member_init_list|,
name|dataSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|vertexStaticUse
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|fragmentStaticUse
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|nameWithArrayIndex
name|std
operator|::
name|string
name|UniformBlock
operator|::
name|nameWithArrayIndex
parameter_list|()
specifier|const
block|{
name|std
operator|::
name|stringstream
name|fullNameStr
decl_stmt|;
name|fullNameStr
operator|<<
name|name
expr_stmt|;
if|if
condition|(
name|isArray
condition|)
block|{
name|fullNameStr
operator|<<
literal|"["
operator|<<
name|arrayElement
operator|<<
literal|"]"
expr_stmt|;
block|}
return|return
name|fullNameStr
operator|.
name|str
argument_list|()
return|;
block|}
block|}
end_namespace
end_unit
