begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Query.h: Defines the gl::Query class
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_QUERY_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_QUERY_H_
define|#
directive|define
name|LIBANGLE_QUERY_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/Debug.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/RefCountObject.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|QueryImpl
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Query
name|final
range|:
name|public
name|RefCountObject
decl_stmt|,
name|public
name|LabeledObject
block|{
name|public
label|:
name|Query
argument_list|(
argument|rx::QueryImpl *impl
argument_list|,
argument|GLuint id
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|Query
argument_list|()
expr_stmt|;
name|void
name|setLabel
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|label
argument_list|)
name|override
decl_stmt|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getLabel
argument_list|()
specifier|const
name|override
expr_stmt|;
name|Error
name|begin
parameter_list|()
function_decl|;
name|Error
name|end
parameter_list|()
function_decl|;
name|Error
name|queryCounter
parameter_list|()
function_decl|;
name|Error
name|getResult
parameter_list|(
name|GLint
modifier|*
name|params
parameter_list|)
function_decl|;
name|Error
name|getResult
parameter_list|(
name|GLuint
modifier|*
name|params
parameter_list|)
function_decl|;
name|Error
name|getResult
parameter_list|(
name|GLint64
modifier|*
name|params
parameter_list|)
function_decl|;
name|Error
name|getResult
parameter_list|(
name|GLuint64
modifier|*
name|params
parameter_list|)
function_decl|;
name|Error
name|isResultAvailable
parameter_list|(
name|bool
modifier|*
name|available
parameter_list|)
function_decl|;
name|GLenum
name|getType
argument_list|()
specifier|const
expr_stmt|;
name|rx
operator|::
name|QueryImpl
operator|*
name|getImplementation
argument_list|()
expr_stmt|;
specifier|const
name|rx
operator|::
name|QueryImpl
operator|*
name|getImplementation
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|rx
operator|::
name|QueryImpl
operator|*
name|mQuery
expr_stmt|;
name|std
operator|::
name|string
name|mLabel
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_QUERY_H_
end_comment
end_unit
