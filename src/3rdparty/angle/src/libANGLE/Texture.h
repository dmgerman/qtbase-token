begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Texture.h: Defines the gl::Texture class [OpenGL ES 2.0.24] section 3.7 page 63.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_TEXTURE_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_TEXTURE_H_
define|#
directive|define
name|LIBANGLE_TEXTURE_H_
end_define
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|<map>
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Caps.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Debug.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Constants.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Image.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/TextureImpl.h"
end_include
begin_decl_stmt
name|namespace
name|egl
block|{
name|class
name|Surface
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Context
decl_stmt|;
name|class
name|Framebuffer
decl_stmt|;
struct_decl|struct
name|Data
struct_decl|;
name|bool
name|IsMipmapFiltered
parameter_list|(
specifier|const
name|SamplerState
modifier|&
name|samplerState
parameter_list|)
function_decl|;
name|class
name|Texture
name|final
range|:
name|public
name|egl
operator|::
name|ImageSibling
decl_stmt|,
name|public
name|FramebufferAttachmentObject
decl_stmt|,
name|public
name|LabeledObject
block|{
name|public
label|:
name|Texture
argument_list|(
argument|rx::TextureImpl *impl
argument_list|,
argument|GLuint id
argument_list|,
argument|GLenum target
argument_list|)
empty_stmt|;
operator|~
name|Texture
argument_list|()
name|override
expr_stmt|;
name|void
name|setLabel
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|label
argument_list|)
name|override
decl_stmt|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getLabel
argument_list|()
specifier|const
name|override
expr_stmt|;
name|GLenum
name|getTarget
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setSwizzleRed
parameter_list|(
name|GLenum
name|swizzleRed
parameter_list|)
function_decl|;
name|GLenum
name|getSwizzleRed
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setSwizzleGreen
parameter_list|(
name|GLenum
name|swizzleGreen
parameter_list|)
function_decl|;
name|GLenum
name|getSwizzleGreen
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setSwizzleBlue
parameter_list|(
name|GLenum
name|swizzleBlue
parameter_list|)
function_decl|;
name|GLenum
name|getSwizzleBlue
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setSwizzleAlpha
parameter_list|(
name|GLenum
name|swizzleAlpha
parameter_list|)
function_decl|;
name|GLenum
name|getSwizzleAlpha
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setMinFilter
parameter_list|(
name|GLenum
name|minFilter
parameter_list|)
function_decl|;
name|GLenum
name|getMinFilter
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setMagFilter
parameter_list|(
name|GLenum
name|magFilter
parameter_list|)
function_decl|;
name|GLenum
name|getMagFilter
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWrapS
parameter_list|(
name|GLenum
name|wrapS
parameter_list|)
function_decl|;
name|GLenum
name|getWrapS
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWrapT
parameter_list|(
name|GLenum
name|wrapT
parameter_list|)
function_decl|;
name|GLenum
name|getWrapT
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWrapR
parameter_list|(
name|GLenum
name|wrapR
parameter_list|)
function_decl|;
name|GLenum
name|getWrapR
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setMaxAnisotropy
parameter_list|(
name|float
name|maxAnisotropy
parameter_list|)
function_decl|;
name|float
name|getMaxAnisotropy
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setMinLod
parameter_list|(
name|GLfloat
name|minLod
parameter_list|)
function_decl|;
name|GLfloat
name|getMinLod
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setMaxLod
parameter_list|(
name|GLfloat
name|maxLod
parameter_list|)
function_decl|;
name|GLfloat
name|getMaxLod
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setCompareMode
parameter_list|(
name|GLenum
name|compareMode
parameter_list|)
function_decl|;
name|GLenum
name|getCompareMode
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setCompareFunc
parameter_list|(
name|GLenum
name|compareFunc
parameter_list|)
function_decl|;
name|GLenum
name|getCompareFunc
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|SamplerState
operator|&
name|getSamplerState
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setBaseLevel
parameter_list|(
name|GLuint
name|baseLevel
parameter_list|)
function_decl|;
name|GLuint
name|getBaseLevel
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setMaxLevel
parameter_list|(
name|GLuint
name|maxLevel
parameter_list|)
function_decl|;
name|GLuint
name|getMaxLevel
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|getImmutableFormat
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getImmutableLevels
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setUsage
parameter_list|(
name|GLenum
name|usage
parameter_list|)
function_decl|;
name|GLenum
name|getUsage
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|TextureState
operator|&
name|getTextureState
argument_list|()
specifier|const
expr_stmt|;
name|size_t
name|getWidth
argument_list|(
name|GLenum
name|target
argument_list|,
name|size_t
name|level
argument_list|)
decl|const
decl_stmt|;
name|size_t
name|getHeight
argument_list|(
name|GLenum
name|target
argument_list|,
name|size_t
name|level
argument_list|)
decl|const
decl_stmt|;
name|size_t
name|getDepth
argument_list|(
name|GLenum
name|target
argument_list|,
name|size_t
name|level
argument_list|)
decl|const
decl_stmt|;
name|GLenum
name|getInternalFormat
argument_list|(
name|GLenum
name|target
argument_list|,
name|size_t
name|level
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isSamplerComplete
argument_list|(
specifier|const
name|SamplerState
operator|&
name|samplerState
argument_list|,
specifier|const
name|Data
operator|&
name|data
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isMipmapComplete
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isCubeComplete
argument_list|()
specifier|const
expr_stmt|;
name|size_t
name|getMipCompleteLevels
argument_list|()
specifier|const
expr_stmt|;
name|Error
name|setImage
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|size_t
name|level
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
specifier|const
name|Extents
modifier|&
name|size
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|pixels
parameter_list|)
function_decl|;
name|Error
name|setSubImage
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|size_t
name|level
parameter_list|,
specifier|const
name|Box
modifier|&
name|area
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|pixels
parameter_list|)
function_decl|;
name|Error
name|setCompressedImage
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|size_t
name|level
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
specifier|const
name|Extents
modifier|&
name|size
parameter_list|,
name|size_t
name|imageSize
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|pixels
parameter_list|)
function_decl|;
name|Error
name|setCompressedSubImage
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|size_t
name|level
parameter_list|,
specifier|const
name|Box
modifier|&
name|area
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|size_t
name|imageSize
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|pixels
parameter_list|)
function_decl|;
name|Error
name|copyImage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|size_t
name|level
parameter_list|,
specifier|const
name|Rectangle
modifier|&
name|sourceArea
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
specifier|const
name|Framebuffer
modifier|*
name|source
parameter_list|)
function_decl|;
name|Error
name|copySubImage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|size_t
name|level
parameter_list|,
specifier|const
name|Offset
modifier|&
name|destOffset
parameter_list|,
specifier|const
name|Rectangle
modifier|&
name|sourceArea
parameter_list|,
specifier|const
name|Framebuffer
modifier|*
name|source
parameter_list|)
function_decl|;
name|Error
name|setStorage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|size_t
name|levels
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
specifier|const
name|Extents
modifier|&
name|size
parameter_list|)
function_decl|;
name|Error
name|setEGLImageTarget
argument_list|(
name|GLenum
name|target
argument_list|,
name|egl
operator|::
name|Image
operator|*
name|imageTarget
argument_list|)
decl_stmt|;
name|Error
name|generateMipmaps
parameter_list|()
function_decl|;
name|egl
operator|::
name|Surface
operator|*
name|getBoundSurface
argument_list|()
specifier|const
expr_stmt|;
name|rx
operator|::
name|TextureImpl
operator|*
name|getImplementation
argument_list|()
block|{
return|return
name|mTexture
return|;
block|}
specifier|const
name|rx
operator|::
name|TextureImpl
operator|*
name|getImplementation
argument_list|()
specifier|const
block|{
return|return
name|mTexture
return|;
block|}
comment|// FramebufferAttachmentObject implementation
name|Extents
name|getAttachmentSize
argument_list|(
specifier|const
name|FramebufferAttachment
operator|::
name|Target
operator|&
name|target
argument_list|)
decl|const
name|override
decl_stmt|;
name|GLenum
name|getAttachmentInternalFormat
argument_list|(
specifier|const
name|FramebufferAttachment
operator|::
name|Target
operator|&
name|target
argument_list|)
decl|const
name|override
decl_stmt|;
name|GLsizei
name|getAttachmentSamples
argument_list|(
specifier|const
name|FramebufferAttachment
operator|::
name|Target
operator|&
name|target
argument_list|)
decl|const
name|override
decl_stmt|;
name|void
name|onAttach
argument_list|()
name|override
expr_stmt|;
name|void
name|onDetach
argument_list|()
name|override
expr_stmt|;
name|GLuint
name|getId
argument_list|()
specifier|const
name|override
expr_stmt|;
name|private
label|:
name|rx
operator|::
name|FramebufferAttachmentObjectImpl
operator|*
name|getAttachmentImpl
argument_list|()
specifier|const
name|override
block|{
return|return
name|mTexture
return|;
block|}
comment|// ANGLE-only method, used internally
name|friend
name|class
name|egl
operator|::
name|Surface
expr_stmt|;
name|void
name|bindTexImageFromSurface
argument_list|(
name|egl
operator|::
name|Surface
operator|*
name|surface
argument_list|)
decl_stmt|;
name|void
name|releaseTexImageFromSurface
parameter_list|()
function_decl|;
name|rx
operator|::
name|TextureImpl
operator|*
name|mTexture
expr_stmt|;
name|std
operator|::
name|string
name|mLabel
expr_stmt|;
name|TextureState
name|mTextureState
decl_stmt|;
name|GLenum
name|mTarget
decl_stmt|;
struct|struct
name|ImageDesc
block|{
name|Extents
name|size
decl_stmt|;
name|GLenum
name|internalFormat
decl_stmt|;
name|ImageDesc
argument_list|()
expr_stmt|;
name|ImageDesc
argument_list|(
argument|const Extents&size
argument_list|,
argument|GLenum internalFormat
argument_list|)
empty_stmt|;
block|}
struct|;
name|GLenum
name|getBaseImageTarget
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|computeSamplerCompleteness
argument_list|(
specifier|const
name|SamplerState
operator|&
name|samplerState
argument_list|,
specifier|const
name|Data
operator|&
name|data
argument_list|)
decl|const
decl_stmt|;
name|bool
name|computeMipmapCompleteness
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|computeLevelCompleteness
argument_list|(
name|GLenum
name|target
argument_list|,
name|size_t
name|level
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|ImageDesc
modifier|&
name|getImageDesc
argument_list|(
name|GLenum
name|target
argument_list|,
name|size_t
name|level
argument_list|)
decl|const
decl_stmt|;
name|void
name|setImageDesc
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|size_t
name|level
parameter_list|,
specifier|const
name|ImageDesc
modifier|&
name|desc
parameter_list|)
function_decl|;
name|void
name|setImageDescChain
parameter_list|(
name|size_t
name|levels
parameter_list|,
name|Extents
name|baseSize
parameter_list|,
name|GLenum
name|sizedInternalFormat
parameter_list|)
function_decl|;
name|void
name|clearImageDesc
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|size_t
name|level
parameter_list|)
function_decl|;
name|void
name|clearImageDescs
parameter_list|()
function_decl|;
name|void
name|releaseTexImageInternal
parameter_list|()
function_decl|;
name|std
operator|::
name|vector
operator|<
name|ImageDesc
operator|>
name|mImageDescs
expr_stmt|;
struct|struct
name|SamplerCompletenessCache
block|{
name|SamplerCompletenessCache
argument_list|()
expr_stmt|;
name|bool
name|cacheValid
decl_stmt|;
comment|// All values that affect sampler completeness that are not stored within
comment|// the texture itself
name|SamplerState
name|samplerState
decl_stmt|;
name|bool
name|filterable
decl_stmt|;
name|GLint
name|clientVersion
decl_stmt|;
name|bool
name|supportsNPOT
decl_stmt|;
comment|// Result of the sampler completeness with the above parameters
name|bool
name|samplerComplete
decl_stmt|;
block|}
struct|;
name|mutable
name|SamplerCompletenessCache
name|mCompletenessCache
decl_stmt|;
name|egl
operator|::
name|Surface
operator|*
name|mBoundSurface
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_TEXTURE_H_
end_comment
end_unit
