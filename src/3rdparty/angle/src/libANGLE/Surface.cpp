begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Surface.cpp: Implements the egl::Surface class, representing a drawing surface
end_comment
begin_comment
comment|// such as the client area of a window, including any back buffers.
end_comment
begin_comment
comment|// Implements EGLSurface and related functionality. [EGL 1.4] section 2.2 page 3.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/Surface.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Config.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/SurfaceImpl.h"
end_include
begin_include
include|#
directive|include
file|<EGL/eglext.h>
end_include
begin_namespace
DECL|namespace|egl
namespace|namespace
name|egl
block|{
DECL|function|Surface
name|Surface
operator|::
name|Surface
parameter_list|(
name|rx
operator|::
name|SurfaceImpl
modifier|*
name|impl
parameter_list|,
name|EGLint
name|surfaceType
parameter_list|,
specifier|const
name|egl
operator|::
name|Config
modifier|*
name|config
parameter_list|,
specifier|const
name|AttributeMap
modifier|&
name|attributes
parameter_list|)
member_init_list|:
name|RefCountObject
argument_list|(
literal|0
argument_list|)
member_init_list|,
comment|// id unused
name|mImplementation
argument_list|(
name|impl
argument_list|)
member_init_list|,
name|mType
argument_list|(
name|surfaceType
argument_list|)
member_init_list|,
name|mConfig
argument_list|(
name|config
argument_list|)
member_init_list|,
name|mPostSubBufferRequested
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mFixedSize
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mFixedWidth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mFixedHeight
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mTextureFormat
argument_list|(
name|EGL_NO_TEXTURE
argument_list|)
member_init_list|,
name|mTextureTarget
argument_list|(
name|EGL_NO_TEXTURE
argument_list|)
member_init_list|,
comment|// FIXME: Determine actual pixel aspect ratio
name|mPixelAspectRatio
argument_list|(
cast|static_cast
argument_list|<
name|EGLint
argument_list|>
argument_list|(
literal|1.0
operator|*
name|EGL_DISPLAY_SCALING
argument_list|)
argument_list|)
member_init_list|,
name|mRenderBuffer
argument_list|(
name|EGL_BACK_BUFFER
argument_list|)
member_init_list|,
name|mSwapBehavior
argument_list|(
name|EGL_BUFFER_PRESERVED
argument_list|)
member_init_list|,
name|mTexture
argument_list|(
name|NULL
argument_list|)
block|{
name|addRef
argument_list|()
expr_stmt|;
name|mPostSubBufferRequested
operator|=
operator|(
name|attributes
operator|.
name|get
argument_list|(
name|EGL_POST_SUB_BUFFER_SUPPORTED_NV
argument_list|,
name|EGL_FALSE
argument_list|)
operator|==
name|EGL_TRUE
operator|)
expr_stmt|;
name|mFixedSize
operator|=
operator|(
name|attributes
operator|.
name|get
argument_list|(
name|EGL_FIXED_SIZE_ANGLE
argument_list|,
name|EGL_FALSE
argument_list|)
operator|==
name|EGL_TRUE
operator|)
expr_stmt|;
if|if
condition|(
name|mFixedSize
condition|)
block|{
name|mFixedWidth
operator|=
name|attributes
operator|.
name|get
argument_list|(
name|EGL_WIDTH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mFixedHeight
operator|=
name|attributes
operator|.
name|get
argument_list|(
name|EGL_HEIGHT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mType
operator|!=
name|EGL_WINDOW_BIT
condition|)
block|{
name|mTextureFormat
operator|=
name|attributes
operator|.
name|get
argument_list|(
name|EGL_TEXTURE_FORMAT
argument_list|,
name|EGL_NO_TEXTURE
argument_list|)
expr_stmt|;
name|mTextureTarget
operator|=
name|attributes
operator|.
name|get
argument_list|(
name|EGL_TEXTURE_TARGET
argument_list|,
name|EGL_NO_TEXTURE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|~Surface
name|Surface
operator|::
name|~
name|Surface
parameter_list|()
block|{
if|if
condition|(
name|mTexture
condition|)
block|{
if|if
condition|(
name|mImplementation
condition|)
block|{
name|mImplementation
operator|->
name|releaseTexImage
argument_list|(
name|mTexture
operator|->
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mTexture
operator|->
name|releaseTexImage
argument_list|()
expr_stmt|;
name|mTexture
operator|=
name|NULL
expr_stmt|;
block|}
name|SafeDelete
argument_list|(
name|mImplementation
argument_list|)
expr_stmt|;
block|}
DECL|function|getType
name|EGLint
name|Surface
operator|::
name|getType
parameter_list|()
specifier|const
block|{
return|return
name|mType
return|;
block|}
DECL|function|swap
name|Error
name|Surface
operator|::
name|swap
parameter_list|()
block|{
return|return
name|mImplementation
operator|->
name|swap
argument_list|()
return|;
block|}
DECL|function|postSubBuffer
name|Error
name|Surface
operator|::
name|postSubBuffer
parameter_list|(
name|EGLint
name|x
parameter_list|,
name|EGLint
name|y
parameter_list|,
name|EGLint
name|width
parameter_list|,
name|EGLint
name|height
parameter_list|)
block|{
return|return
name|mImplementation
operator|->
name|postSubBuffer
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
DECL|function|querySurfacePointerANGLE
name|Error
name|Surface
operator|::
name|querySurfacePointerANGLE
parameter_list|(
name|EGLint
name|attribute
parameter_list|,
name|void
modifier|*
modifier|*
name|value
parameter_list|)
block|{
return|return
name|mImplementation
operator|->
name|querySurfacePointerANGLE
argument_list|(
name|attribute
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|function|isPostSubBufferSupported
name|EGLint
name|Surface
operator|::
name|isPostSubBufferSupported
parameter_list|()
specifier|const
block|{
return|return
name|mPostSubBufferRequested
operator|&&
name|mImplementation
operator|->
name|isPostSubBufferSupported
argument_list|()
return|;
block|}
DECL|function|setSwapInterval
name|void
name|Surface
operator|::
name|setSwapInterval
parameter_list|(
name|EGLint
name|interval
parameter_list|)
block|{
name|mImplementation
operator|->
name|setSwapInterval
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
DECL|function|getConfig
specifier|const
name|Config
modifier|*
name|Surface
operator|::
name|getConfig
parameter_list|()
specifier|const
block|{
return|return
name|mConfig
return|;
block|}
DECL|function|getPixelAspectRatio
name|EGLint
name|Surface
operator|::
name|getPixelAspectRatio
parameter_list|()
specifier|const
block|{
return|return
name|mPixelAspectRatio
return|;
block|}
DECL|function|getRenderBuffer
name|EGLenum
name|Surface
operator|::
name|getRenderBuffer
parameter_list|()
specifier|const
block|{
return|return
name|mRenderBuffer
return|;
block|}
DECL|function|getSwapBehavior
name|EGLenum
name|Surface
operator|::
name|getSwapBehavior
parameter_list|()
specifier|const
block|{
return|return
name|mSwapBehavior
return|;
block|}
DECL|function|getTextureFormat
name|EGLenum
name|Surface
operator|::
name|getTextureFormat
parameter_list|()
specifier|const
block|{
return|return
name|mTextureFormat
return|;
block|}
DECL|function|getTextureTarget
name|EGLenum
name|Surface
operator|::
name|getTextureTarget
parameter_list|()
specifier|const
block|{
return|return
name|mTextureTarget
return|;
block|}
DECL|function|isFixedSize
name|EGLint
name|Surface
operator|::
name|isFixedSize
parameter_list|()
specifier|const
block|{
return|return
name|mFixedSize
return|;
block|}
DECL|function|getWidth
name|EGLint
name|Surface
operator|::
name|getWidth
parameter_list|()
specifier|const
block|{
return|return
name|mFixedSize
condition|?
name|mFixedWidth
else|:
name|mImplementation
operator|->
name|getWidth
argument_list|()
return|;
block|}
DECL|function|getHeight
name|EGLint
name|Surface
operator|::
name|getHeight
parameter_list|()
specifier|const
block|{
return|return
name|mFixedSize
condition|?
name|mFixedHeight
else|:
name|mImplementation
operator|->
name|getHeight
argument_list|()
return|;
block|}
DECL|function|bindTexImage
name|Error
name|Surface
operator|::
name|bindTexImage
parameter_list|(
name|gl
operator|::
name|Texture
modifier|*
name|texture
parameter_list|,
name|EGLint
name|buffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
operator|!
name|mTexture
argument_list|)
expr_stmt|;
name|texture
operator|->
name|bindTexImage
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mTexture
operator|=
name|texture
expr_stmt|;
return|return
name|mImplementation
operator|->
name|bindTexImage
argument_list|(
name|buffer
argument_list|)
return|;
block|}
DECL|function|releaseTexImage
name|Error
name|Surface
operator|::
name|releaseTexImage
parameter_list|(
name|EGLint
name|buffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|mTexture
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Texture
modifier|*
name|boundTexture
init|=
name|mTexture
decl_stmt|;
name|mTexture
operator|=
name|NULL
expr_stmt|;
name|boundTexture
operator|->
name|releaseTexImage
argument_list|()
expr_stmt|;
return|return
name|mImplementation
operator|->
name|releaseTexImage
argument_list|(
name|buffer
argument_list|)
return|;
block|}
block|}
end_namespace
end_unit
