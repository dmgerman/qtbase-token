begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2011 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// HandleAllocator.cpp: Implements the gl::HandleAllocator class, which is used
end_comment
begin_comment
comment|// to allocate GL handles.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/HandleAllocator.h"
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|struct|HandleRangeComparator
struct|struct
name|HandleAllocator
operator|::
name|HandleRangeComparator
block|{
DECL|function|operator ()
name|bool
name|operator
name|()
parameter_list|(
specifier|const
name|HandleRange
modifier|&
name|range
parameter_list|,
name|GLuint
name|handle
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|handle
operator|<
name|range
operator|.
name|begin
operator|)
return|;
block|}
block|}
struct|;
DECL|function|HandleAllocator
name|HandleAllocator
operator|::
name|HandleAllocator
parameter_list|()
member_init_list|:
name|mBaseValue
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|mNextValue
argument_list|(
literal|1
argument_list|)
block|{
name|mUnallocatedList
operator|.
name|push_back
argument_list|(
name|HandleRange
argument_list|(
literal|1
argument_list|,
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLuint
argument_list|>
operator|::
name|max
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|HandleAllocator
name|HandleAllocator
operator|::
name|HandleAllocator
parameter_list|(
name|GLuint
name|maximumHandleValue
parameter_list|)
member_init_list|:
name|mBaseValue
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|mNextValue
argument_list|(
literal|1
argument_list|)
block|{
name|mUnallocatedList
operator|.
name|push_back
argument_list|(
name|HandleRange
argument_list|(
literal|1
argument_list|,
name|maximumHandleValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|~HandleAllocator
name|HandleAllocator
operator|::
name|~
name|HandleAllocator
parameter_list|()
block|{ }
DECL|function|setBaseHandle
name|void
name|HandleAllocator
operator|::
name|setBaseHandle
parameter_list|(
name|GLuint
name|value
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|mBaseValue
operator|==
name|mNextValue
argument_list|)
expr_stmt|;
name|mBaseValue
operator|=
name|value
expr_stmt|;
name|mNextValue
operator|=
name|value
expr_stmt|;
block|}
DECL|function|allocate
name|GLuint
name|HandleAllocator
operator|::
name|allocate
parameter_list|()
block|{
name|ASSERT
argument_list|(
operator|!
name|mUnallocatedList
operator|.
name|empty
argument_list|()
operator|||
operator|!
name|mReleasedList
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allocate from released list, constant time.
if|if
condition|(
operator|!
name|mReleasedList
operator|.
name|empty
argument_list|()
condition|)
block|{
name|GLuint
name|reusedHandle
init|=
name|mReleasedList
operator|.
name|back
argument_list|()
decl_stmt|;
name|mReleasedList
operator|.
name|pop_back
argument_list|()
expr_stmt|;
return|return
name|reusedHandle
return|;
block|}
comment|// Allocate from unallocated list, constant time.
name|auto
name|listIt
init|=
name|mUnallocatedList
operator|.
name|begin
argument_list|()
decl_stmt|;
name|GLuint
name|freeListHandle
init|=
name|listIt
operator|->
name|begin
decl_stmt|;
name|ASSERT
argument_list|(
name|freeListHandle
operator|>
literal|0
argument_list|)
expr_stmt|;
name|listIt
operator|->
name|begin
operator|++
expr_stmt|;
if|if
condition|(
name|listIt
operator|->
name|begin
operator|==
name|listIt
operator|->
name|end
condition|)
block|{
name|mUnallocatedList
operator|.
name|erase
argument_list|(
name|listIt
argument_list|)
expr_stmt|;
block|}
return|return
name|freeListHandle
return|;
block|}
DECL|function|release
name|void
name|HandleAllocator
operator|::
name|release
parameter_list|(
name|GLuint
name|handle
parameter_list|)
block|{
comment|// Add to released list, constant time.
name|mReleasedList
operator|.
name|push_back
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
DECL|function|reserve
name|void
name|HandleAllocator
operator|::
name|reserve
parameter_list|(
name|GLuint
name|handle
parameter_list|)
block|{
comment|// Clear from released list -- might be a slow operation.
if|if
condition|(
operator|!
name|mReleasedList
operator|.
name|empty
argument_list|()
condition|)
block|{
name|auto
name|releasedIt
init|=
name|std
operator|::
name|find
argument_list|(
name|mReleasedList
operator|.
name|begin
argument_list|()
argument_list|,
name|mReleasedList
operator|.
name|end
argument_list|()
argument_list|,
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|releasedIt
operator|!=
name|mReleasedList
operator|.
name|end
argument_list|()
condition|)
block|{
name|mReleasedList
operator|.
name|erase
argument_list|(
name|releasedIt
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// Not in released list, reserve in the unallocated list.
name|auto
name|boundIt
init|=
name|std
operator|::
name|lower_bound
argument_list|(
name|mUnallocatedList
operator|.
name|begin
argument_list|()
argument_list|,
name|mUnallocatedList
operator|.
name|end
argument_list|()
argument_list|,
name|handle
argument_list|,
name|HandleRangeComparator
argument_list|()
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|boundIt
operator|!=
name|mUnallocatedList
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|GLuint
name|begin
init|=
name|boundIt
operator|->
name|begin
decl_stmt|;
name|GLuint
name|end
init|=
name|boundIt
operator|->
name|end
decl_stmt|;
if|if
condition|(
name|handle
operator|==
name|begin
operator|||
name|handle
operator|==
name|end
condition|)
block|{
if|if
condition|(
name|begin
operator|+
literal|1
operator|==
name|end
condition|)
block|{
name|mUnallocatedList
operator|.
name|erase
argument_list|(
name|boundIt
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|handle
operator|==
name|begin
condition|)
block|{
name|boundIt
operator|->
name|begin
operator|++
expr_stmt|;
block|}
else|else
block|{
name|ASSERT
argument_list|(
name|handle
operator|==
name|end
argument_list|)
expr_stmt|;
name|boundIt
operator|->
name|end
operator|--
expr_stmt|;
block|}
return|return;
block|}
comment|// need to split the range
name|auto
name|placementIt
init|=
name|mUnallocatedList
operator|.
name|erase
argument_list|(
name|boundIt
argument_list|)
decl_stmt|;
if|if
condition|(
name|begin
operator|!=
name|handle
condition|)
block|{
name|placementIt
operator|=
name|mUnallocatedList
operator|.
name|insert
argument_list|(
name|placementIt
argument_list|,
name|HandleRange
argument_list|(
name|begin
argument_list|,
name|handle
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handle
operator|+
literal|1
operator|!=
name|end
condition|)
block|{
name|mUnallocatedList
operator|.
name|insert
argument_list|(
name|placementIt
argument_list|,
name|HandleRange
argument_list|(
name|handle
operator|+
literal|1
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_namespace
end_unit
