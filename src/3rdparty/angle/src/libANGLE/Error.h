begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|// Error.h: Defines the egl::Error and gl::Error classes which encapsulate API errors
end_comment
begin_comment
comment|// and optional error messages.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_ERROR_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_ERROR_H_
define|#
directive|define
name|LIBANGLE_ERROR_H_
end_define
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|<EGL/egl.h>
end_include
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|<memory>
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Error
name|final
block|{
name|public
label|:
name|explicit
specifier|inline
name|Error
parameter_list|(
name|GLenum
name|errorCode
parameter_list|)
function_decl|;
name|Error
argument_list|(
argument|GLenum errorCode
argument_list|,
argument|const char *msg
argument_list|,
argument|...
argument_list|)
empty_stmt|;
name|Error
argument_list|(
argument|GLenum errorCode
argument_list|,
argument|GLuint id
argument_list|,
argument|const char *msg
argument_list|,
argument|...
argument_list|)
empty_stmt|;
specifier|inline
name|Error
argument_list|(
specifier|const
name|Error
operator|&
name|other
argument_list|)
expr_stmt|;
specifier|inline
name|Error
argument_list|(
name|Error
operator|&&
name|other
argument_list|)
expr_stmt|;
specifier|inline
name|Error
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Error
operator|&
name|other
operator|)
decl_stmt|;
specifier|inline
name|Error
modifier|&
name|operator
init|=
operator|(
name|Error
operator|&&
name|other
operator|)
decl_stmt|;
specifier|inline
name|GLenum
name|getCode
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|GLuint
name|getID
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|isError
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getMessage
argument_list|()
specifier|const
expr_stmt|;
comment|// Useful for mocking and testing
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Error
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Error
operator|&
name|other
operator|)
specifier|const
expr_stmt|;
name|private
label|:
name|void
name|createMessageString
argument_list|()
specifier|const
expr_stmt|;
name|GLenum
name|mCode
decl_stmt|;
name|GLuint
name|mID
decl_stmt|;
name|mutable
name|std
operator|::
name|unique_ptr
operator|<
name|std
operator|::
name|string
operator|>
name|mMessage
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|ErrorOrResult
block|{
name|public
operator|:
name|ErrorOrResult
argument_list|(
specifier|const
name|gl
operator|::
name|Error
operator|&
name|error
argument_list|)
operator|:
name|mError
argument_list|(
argument|error
argument_list|)
block|{}
name|ErrorOrResult
argument_list|(
name|T
operator|&&
name|result
argument_list|)
operator|:
name|mError
argument_list|(
name|GL_NO_ERROR
argument_list|)
block|,
name|mResult
argument_list|(
argument|std::move(result)
argument_list|)
block|{}
name|bool
name|isError
argument_list|()
specifier|const
block|{
return|return
name|mError
operator|.
name|isError
argument_list|()
return|;
block|}
specifier|const
name|gl
operator|::
name|Error
operator|&
name|getError
argument_list|()
specifier|const
block|{
return|return
name|mError
return|;
block|}
name|T
operator|&&
name|getResult
argument_list|()
block|{
return|return
name|std
operator|::
name|move
argument_list|(
name|mResult
argument_list|)
return|;
block|}
name|private
operator|:
name|Error
name|mError
block|;
name|T
name|mResult
block|; }
expr_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace gl
end_comment
begin_decl_stmt
name|namespace
name|egl
block|{
name|class
name|Error
name|final
block|{
name|public
label|:
name|explicit
specifier|inline
name|Error
parameter_list|(
name|EGLint
name|errorCode
parameter_list|)
function_decl|;
name|Error
argument_list|(
argument|EGLint errorCode
argument_list|,
argument|const char *msg
argument_list|,
argument|...
argument_list|)
empty_stmt|;
name|Error
argument_list|(
argument|EGLint errorCode
argument_list|,
argument|EGLint id
argument_list|,
argument|const char *msg
argument_list|,
argument|...
argument_list|)
empty_stmt|;
specifier|inline
name|Error
argument_list|(
specifier|const
name|Error
operator|&
name|other
argument_list|)
expr_stmt|;
specifier|inline
name|Error
argument_list|(
name|Error
operator|&&
name|other
argument_list|)
expr_stmt|;
specifier|inline
name|Error
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Error
operator|&
name|other
operator|)
decl_stmt|;
specifier|inline
name|Error
modifier|&
name|operator
init|=
operator|(
name|Error
operator|&&
name|other
operator|)
decl_stmt|;
specifier|inline
name|EGLint
name|getCode
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|EGLint
name|getID
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|isError
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getMessage
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|void
name|createMessageString
argument_list|()
specifier|const
expr_stmt|;
name|EGLint
name|mCode
decl_stmt|;
name|EGLint
name|mID
decl_stmt|;
name|mutable
name|std
operator|::
name|unique_ptr
operator|<
name|std
operator|::
name|string
operator|>
name|mMessage
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_comment
comment|// namespace egl
end_comment
begin_include
include|#
directive|include
file|"Error.inl"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_ERROR_H_
end_comment
end_unit
