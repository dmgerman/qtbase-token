begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2015 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Image.h: Defines the egl::Image class representing the EGLimage object.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_IMAGE_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_IMAGE_H_
define|#
directive|define
name|LIBANGLE_IMAGE_H_
end_define
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/AttributeMap.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/RefCountObject.h"
end_include
begin_include
include|#
directive|include
file|<set>
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|ImageImpl
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|egl
block|{
name|class
name|Image
decl_stmt|;
name|class
name|ImageSibling
range|:
name|public
name|RefCountObject
block|{
name|public
operator|:
name|ImageSibling
argument_list|(
argument|GLuint id
argument_list|)
block|;
name|virtual
operator|~
name|ImageSibling
argument_list|()
block|;
name|protected
operator|:
comment|// Set the image target of this sibling
name|void
name|setTargetImage
argument_list|(
name|egl
operator|::
name|Image
operator|*
name|imageTarget
argument_list|)
block|;
comment|// Orphan all EGL image sources and targets
name|gl
operator|::
name|Error
name|orphanImages
argument_list|()
block|;
name|private
operator|:
name|friend
name|class
name|Image
block|;
comment|// Called from Image only to add a new source image
name|void
name|addImageSource
argument_list|(
name|egl
operator|::
name|Image
operator|*
name|imageSource
argument_list|)
block|;
comment|// Called from Image only to remove a source image when the Image is being deleted
name|void
name|removeImageSource
argument_list|(
name|egl
operator|::
name|Image
operator|*
name|imageSource
argument_list|)
block|;
name|std
operator|::
name|set
operator|<
name|Image
operator|*
operator|>
name|mSourcesOf
block|;
name|BindingPointer
operator|<
name|Image
operator|>
name|mTargetOf
block|; }
decl_stmt|;
name|class
name|Image
name|final
range|:
name|public
name|RefCountObject
block|{
name|public
operator|:
name|Image
argument_list|(
argument|rx::ImageImpl *impl
argument_list|,
argument|EGLenum target
argument_list|,
argument|ImageSibling *buffer
argument_list|,
argument|const AttributeMap&attribs
argument_list|)
block|;
operator|~
name|Image
argument_list|()
block|;
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
block|;
name|size_t
name|getWidth
argument_list|()
specifier|const
block|;
name|size_t
name|getHeight
argument_list|()
specifier|const
block|;
name|size_t
name|getSamples
argument_list|()
specifier|const
block|;
name|rx
operator|::
name|ImageImpl
operator|*
name|getImplementation
argument_list|()
block|;
specifier|const
name|rx
operator|::
name|ImageImpl
operator|*
name|getImplementation
argument_list|()
specifier|const
block|;
name|private
operator|:
name|friend
name|class
name|ImageSibling
block|;
comment|// Called from ImageSibling only notify the image that a new target sibling exists for state
comment|// tracking.
name|void
name|addTargetSibling
argument_list|(
name|ImageSibling
operator|*
name|sibling
argument_list|)
block|;
comment|// Called from ImageSibling only to notify the image that a sibling (source or target) has
comment|// been respecified and state tracking should be updated.
name|gl
operator|::
name|Error
name|orphanSibling
argument_list|(
name|ImageSibling
operator|*
name|sibling
argument_list|)
block|;
name|rx
operator|::
name|ImageImpl
operator|*
name|mImplementation
block|;
name|GLenum
name|mInternalFormat
block|;
name|size_t
name|mWidth
block|;
name|size_t
name|mHeight
block|;
name|size_t
name|mSamples
block|;
name|BindingPointer
operator|<
name|ImageSibling
operator|>
name|mSource
block|;
name|std
operator|::
name|set
operator|<
name|ImageSibling
operator|*
operator|>
name|mTargets
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_IMAGE_H_
end_comment
end_unit
