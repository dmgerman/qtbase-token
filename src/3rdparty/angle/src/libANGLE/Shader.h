begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Shader.h: Defines the abstract gl::Shader class and its concrete derived
end_comment
begin_comment
comment|// classes VertexShader and FragmentShader. Implements GL shader objects and
end_comment
begin_comment
comment|// related functionality. [OpenGL ES 2.0.24] section 2.10 page 24 and section
end_comment
begin_comment
comment|// 3.8 page 84.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_SHADER_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_SHADER_H_
define|#
directive|define
name|LIBANGLE_SHADER_H_
end_define
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|<list>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|<GLSLANG/ShaderLang.h>
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Debug.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|ImplFactory
decl_stmt|;
name|class
name|ShaderImpl
decl_stmt|;
name|class
name|ShaderSh
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Compiler
decl_stmt|;
struct_decl|struct
name|Limitations
struct_decl|;
name|class
name|ResourceManager
decl_stmt|;
struct_decl|struct
name|Data
struct_decl|;
name|class
name|Shader
name|final
range|:
name|angle
operator|::
name|NonCopyable
decl_stmt|,
name|public
name|LabeledObject
block|{
name|public
label|:
name|class
name|Data
name|final
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|Data
argument_list|(
argument|GLenum shaderType
argument_list|)
block|;
operator|~
name|Data
argument_list|()
block|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getLabel
argument_list|()
specifier|const
block|{
return|return
name|mLabel
return|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getSource
argument_list|()
specifier|const
block|{
return|return
name|mSource
return|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getTranslatedSource
argument_list|()
specifier|const
block|{
return|return
name|mTranslatedSource
return|;
block|}
name|GLenum
name|getShaderType
argument_list|()
specifier|const
block|{
return|return
name|mShaderType
return|;
block|}
name|int
name|getShaderVersion
argument_list|()
specifier|const
block|{
return|return
name|mShaderVersion
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Varying
operator|>
operator|&
name|getVaryings
argument_list|()
specifier|const
block|{
return|return
name|mVaryings
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Uniform
operator|>
operator|&
name|getUniforms
argument_list|()
specifier|const
block|{
return|return
name|mUniforms
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|InterfaceBlock
operator|>
operator|&
name|getInterfaceBlocks
argument_list|()
specifier|const
block|{
return|return
name|mInterfaceBlocks
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Attribute
operator|>
operator|&
name|getActiveAttributes
argument_list|()
specifier|const
block|{
return|return
name|mActiveAttributes
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|OutputVariable
operator|>
operator|&
name|getActiveOutputVariables
argument_list|()
specifier|const
block|{
return|return
name|mActiveOutputVariables
return|;
block|}
name|private
operator|:
name|friend
name|class
name|Shader
block|;
name|std
operator|::
name|string
name|mLabel
block|;
name|GLenum
name|mShaderType
block|;
name|int
name|mShaderVersion
block|;
name|std
operator|::
name|string
name|mTranslatedSource
block|;
name|std
operator|::
name|string
name|mSource
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Varying
operator|>
name|mVaryings
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Uniform
operator|>
name|mUniforms
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|InterfaceBlock
operator|>
name|mInterfaceBlocks
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Attribute
operator|>
name|mActiveAttributes
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|OutputVariable
operator|>
name|mActiveOutputVariables
block|;     }
decl_stmt|;
name|Shader
argument_list|(
argument|ResourceManager *manager
argument_list|,
argument|rx::ImplFactory *implFactory
argument_list|,
argument|const gl::Limitations&rendererLimitations
argument_list|,
argument|GLenum type
argument_list|,
argument|GLuint handle
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|Shader
argument_list|()
expr_stmt|;
name|void
name|setLabel
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|label
argument_list|)
name|override
decl_stmt|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getLabel
argument_list|()
specifier|const
name|override
expr_stmt|;
name|GLenum
name|getType
argument_list|()
specifier|const
block|{
return|return
name|mType
return|;
block|}
name|GLuint
name|getHandle
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|rx
operator|::
name|ShaderImpl
operator|*
name|getImplementation
argument_list|()
specifier|const
block|{
return|return
name|mImplementation
return|;
block|}
name|void
name|deleteSource
parameter_list|()
function_decl|;
name|void
name|setSource
parameter_list|(
name|GLsizei
name|count
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|string
parameter_list|,
specifier|const
name|GLint
modifier|*
name|length
parameter_list|)
function_decl|;
name|int
name|getInfoLogLength
argument_list|()
specifier|const
expr_stmt|;
name|void
name|getInfoLog
argument_list|(
name|GLsizei
name|bufSize
argument_list|,
name|GLsizei
operator|*
name|length
argument_list|,
name|char
operator|*
name|infoLog
argument_list|)
decl|const
decl_stmt|;
name|int
name|getSourceLength
argument_list|()
specifier|const
expr_stmt|;
name|void
name|getSource
argument_list|(
name|GLsizei
name|bufSize
argument_list|,
name|GLsizei
operator|*
name|length
argument_list|,
name|char
operator|*
name|buffer
argument_list|)
decl|const
decl_stmt|;
name|int
name|getTranslatedSourceLength
argument_list|()
specifier|const
expr_stmt|;
name|int
name|getTranslatedSourceWithDebugInfoLength
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getTranslatedSource
argument_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getTranslatedSource
argument_list|()
return|;
block|}
name|void
name|getTranslatedSource
argument_list|(
name|GLsizei
name|bufSize
argument_list|,
name|GLsizei
operator|*
name|length
argument_list|,
name|char
operator|*
name|buffer
argument_list|)
decl|const
decl_stmt|;
name|void
name|getTranslatedSourceWithDebugInfo
argument_list|(
name|GLsizei
name|bufSize
argument_list|,
name|GLsizei
operator|*
name|length
argument_list|,
name|char
operator|*
name|buffer
argument_list|)
decl|const
decl_stmt|;
name|void
name|compile
parameter_list|(
name|Compiler
modifier|*
name|compiler
parameter_list|)
function_decl|;
name|bool
name|isCompiled
argument_list|()
specifier|const
block|{
return|return
name|mCompiled
return|;
block|}
name|void
name|addRef
parameter_list|()
function_decl|;
name|void
name|release
parameter_list|()
function_decl|;
name|unsigned
name|int
name|getRefCount
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isFlaggedForDeletion
argument_list|()
specifier|const
expr_stmt|;
name|void
name|flagForDeletion
parameter_list|()
function_decl|;
name|int
name|getShaderVersion
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Varying
operator|>
operator|&
name|getVaryings
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Uniform
operator|>
operator|&
name|getUniforms
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|InterfaceBlock
operator|>
operator|&
name|getInterfaceBlocks
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Attribute
operator|>
operator|&
name|getActiveAttributes
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|OutputVariable
operator|>
operator|&
name|getActiveOutputVariables
argument_list|()
specifier|const
expr_stmt|;
name|int
name|getSemanticIndex
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|attributeName
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
specifier|static
name|void
name|getSourceImpl
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|source
argument_list|,
name|GLsizei
name|bufSize
argument_list|,
name|GLsizei
operator|*
name|length
argument_list|,
name|char
operator|*
name|buffer
argument_list|)
decl_stmt|;
name|Data
name|mData
decl_stmt|;
name|rx
operator|::
name|ShaderImpl
operator|*
name|mImplementation
expr_stmt|;
specifier|const
name|gl
operator|::
name|Limitations
operator|&
name|mRendererLimitations
expr_stmt|;
specifier|const
name|GLuint
name|mHandle
decl_stmt|;
specifier|const
name|GLenum
name|mType
decl_stmt|;
name|unsigned
name|int
name|mRefCount
decl_stmt|;
comment|// Number of program objects this shader is attached to
name|bool
name|mDeleteStatus
decl_stmt|;
comment|// Flag to indicate that the shader can be deleted when no longer in use
name|bool
name|mCompiled
decl_stmt|;
comment|// Indicates if this shader has been successfully compiled
name|std
operator|::
name|string
name|mInfoLog
expr_stmt|;
name|ResourceManager
modifier|*
name|mResourceManager
decl_stmt|;
block|}
empty_stmt|;
name|bool
name|CompareShaderVar
argument_list|(
specifier|const
name|sh
operator|::
name|ShaderVariable
operator|&
name|x
argument_list|,
specifier|const
name|sh
operator|::
name|ShaderVariable
operator|&
name|y
argument_list|)
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_SHADER_H_
end_comment
end_unit
