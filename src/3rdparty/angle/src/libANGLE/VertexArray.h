begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This class contains prototypes for representing GLES 3 Vertex Array Objects:
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//   The buffer objects that are to be used by the vertex stage of the GL are collected
end_comment
begin_comment
comment|//   together to form a vertex array object. All state related to the definition of data used
end_comment
begin_comment
comment|//   by the vertex processor is encapsulated in a vertex array object.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_VERTEXARRAY_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_VERTEXARRAY_H_
define|#
directive|define
name|LIBANGLE_VERTEXARRAY_H_
end_define
begin_include
include|#
directive|include
file|"libANGLE/RefCountObject.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Constants.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Debug.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/State.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/VertexAttribute.h"
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|ImplFactory
decl_stmt|;
name|class
name|VertexArrayImpl
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Buffer
decl_stmt|;
name|class
name|VertexArray
name|final
range|:
name|public
name|LabeledObject
block|{
name|public
operator|:
name|VertexArray
argument_list|(
argument|rx::ImplFactory *factory
argument_list|,
argument|GLuint id
argument_list|,
argument|size_t maxAttribs
argument_list|)
block|;
operator|~
name|VertexArray
argument_list|()
block|;
name|GLuint
name|id
argument_list|()
specifier|const
block|;
name|void
name|setLabel
argument_list|(
argument|const std::string&label
argument_list|)
name|override
block|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getLabel
argument_list|()
specifier|const
name|override
block|;
specifier|const
name|VertexAttribute
operator|&
name|getVertexAttribute
argument_list|(
argument|size_t attributeIndex
argument_list|)
specifier|const
block|;
name|void
name|detachBuffer
argument_list|(
argument|GLuint bufferName
argument_list|)
block|;
name|void
name|setVertexAttribDivisor
argument_list|(
argument|size_t index
argument_list|,
argument|GLuint divisor
argument_list|)
block|;
name|void
name|enableAttribute
argument_list|(
argument|size_t attributeIndex
argument_list|,
argument|bool enabledState
argument_list|)
block|;
name|void
name|setAttributeState
argument_list|(
argument|size_t attributeIndex
argument_list|,
argument|gl::Buffer *boundBuffer
argument_list|,
argument|GLint size
argument_list|,
argument|GLenum type
argument_list|,
argument|bool normalized
argument_list|,
argument|bool pureInteger
argument_list|,
argument|GLsizei stride
argument_list|,
argument|const void *pointer
argument_list|)
block|;
name|void
name|setElementArrayBuffer
argument_list|(
name|Buffer
operator|*
name|buffer
argument_list|)
block|;
specifier|const
name|BindingPointer
operator|<
name|Buffer
operator|>
operator|&
name|getElementArrayBuffer
argument_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getElementArrayBuffer
argument_list|()
return|;
block|}
name|size_t
name|getMaxAttribs
argument_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getVertexAttributes
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|VertexAttribute
operator|>
operator|&
name|getVertexAttributes
argument_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getVertexAttributes
argument_list|()
return|;
block|}
name|rx
operator|::
name|VertexArrayImpl
operator|*
name|getImplementation
argument_list|()
block|{
return|return
name|mVertexArray
return|;
block|}
specifier|const
name|rx
operator|::
name|VertexArrayImpl
operator|*
name|getImplementation
argument_list|()
specifier|const
block|{
return|return
name|mVertexArray
return|;
block|}
name|size_t
name|getMaxEnabledAttribute
argument_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|getMaxEnabledAttribute
argument_list|()
return|;
block|}
name|class
name|Data
name|final
operator|:
name|public
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|explicit
name|Data
argument_list|(
argument|size_t maxAttribs
argument_list|)
block|;
operator|~
name|Data
argument_list|()
block|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getLabel
argument_list|()
specifier|const
block|{
return|return
name|mLabel
return|;
block|}
specifier|const
name|BindingPointer
operator|<
name|Buffer
operator|>
operator|&
name|getElementArrayBuffer
argument_list|()
specifier|const
block|{
return|return
name|mElementArrayBuffer
return|;
block|}
name|size_t
name|getMaxAttribs
argument_list|()
specifier|const
block|{
return|return
name|mVertexAttributes
operator|.
name|size
argument_list|()
return|;
block|}
name|size_t
name|getMaxEnabledAttribute
argument_list|()
specifier|const
block|{
return|return
name|mMaxEnabledAttribute
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|VertexAttribute
operator|>
operator|&
name|getVertexAttributes
argument_list|()
specifier|const
block|{
return|return
name|mVertexAttributes
return|;
block|}
specifier|const
name|VertexAttribute
operator|&
name|getVertexAttribute
argument_list|(
argument|size_t index
argument_list|)
specifier|const
block|{
return|return
name|mVertexAttributes
index|[
name|index
index|]
return|;
block|}
name|private
operator|:
name|friend
name|class
name|VertexArray
block|;
name|std
operator|::
name|string
name|mLabel
block|;
name|std
operator|::
name|vector
operator|<
name|VertexAttribute
operator|>
name|mVertexAttributes
block|;
name|BindingPointer
operator|<
name|Buffer
operator|>
name|mElementArrayBuffer
block|;
name|size_t
name|mMaxEnabledAttribute
block|;     }
block|;      enum
name|DirtyBitType
block|{
name|DIRTY_BIT_ELEMENT_ARRAY_BUFFER
block|,
comment|// Reserve bits for enabled flags
name|DIRTY_BIT_ATTRIB_0_ENABLED
block|,
name|DIRTY_BIT_ATTRIB_MAX_ENABLED
operator|=
name|DIRTY_BIT_ATTRIB_0_ENABLED
operator|+
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
block|,
comment|// Reserve bits for attrib pointers
name|DIRTY_BIT_ATTRIB_0_POINTER
operator|=
name|DIRTY_BIT_ATTRIB_MAX_ENABLED
block|,
name|DIRTY_BIT_ATTRIB_MAX_POINTER
operator|=
name|DIRTY_BIT_ATTRIB_0_POINTER
operator|+
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
block|,
comment|// Reserve bits for divisors
name|DIRTY_BIT_ATTRIB_0_DIVISOR
operator|=
name|DIRTY_BIT_ATTRIB_MAX_POINTER
block|,
name|DIRTY_BIT_ATTRIB_MAX_DIVISOR
operator|=
name|DIRTY_BIT_ATTRIB_0_DIVISOR
operator|+
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
block|,
name|DIRTY_BIT_UNKNOWN
operator|=
name|DIRTY_BIT_ATTRIB_MAX_DIVISOR
block|,
name|DIRTY_BIT_MAX
operator|=
name|DIRTY_BIT_UNKNOWN
block|,     }
block|;
typedef|typedef
name|std
operator|::
name|bitset
operator|<
name|DIRTY_BIT_MAX
operator|>
name|DirtyBits
expr_stmt|;
name|void
name|syncImplState
argument_list|()
decl_stmt|;
name|bool
name|hasAnyDirtyBit
argument_list|()
specifier|const
block|{
return|return
name|mDirtyBits
operator|.
name|any
argument_list|()
return|;
block|}
name|private
label|:
name|GLuint
name|mId
decl_stmt|;
name|rx
operator|::
name|VertexArrayImpl
operator|*
name|mVertexArray
expr_stmt|;
name|Data
name|mData
decl_stmt|;
name|DirtyBits
name|mDirtyBits
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_VERTEXARRAY_H_
end_comment
end_unit
