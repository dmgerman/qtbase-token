begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// BinaryStream.h: Provides binary serialization of simple types.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_BINARYSTREAM_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_BINARYSTREAM_H_
define|#
directive|define
name|LIBANGLE_BINARYSTREAM_H_
end_define
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|<cstddef>
end_include
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|<stdint.h>
end_include
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|StaticAssertIsFundamental
name|void
name|StaticAssertIsFundamental
argument_list|()
block|{
comment|// c++11 STL is not available on OSX or Android
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_PLATFORM_APPLE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|ANGLE_PLATFORM_ANDROID
argument_list|)
name|static_assert
argument_list|(
name|std
operator|::
name|is_fundamental
operator|<
name|T
operator|>
operator|::
name|value
argument_list|,
literal|"T must be a fundamental type."
argument_list|)
block|;
else|#
directive|else
expr|union
block|{
name|T
name|dummy
block|; }
name|dummy
block|;
name|static_cast
operator|<
name|void
operator|>
operator|(
name|dummy
operator|)
block|;
endif|#
directive|endif
block|}
name|namespace
name|gl
block|{
name|class
name|BinaryInputStream
operator|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|BinaryInputStream
argument_list|(
argument|const void *data
argument_list|,
argument|size_t length
argument_list|)
block|{
name|mError
operator|=
name|false
block|;
name|mOffset
operator|=
literal|0
block|;
name|mData
operator|=
name|static_cast
operator|<
specifier|const
name|uint8_t
operator|*
operator|>
operator|(
name|data
operator|)
block|;
name|mLength
operator|=
name|length
block|;     }
comment|// readInt will generate an error for bool types
name|template
operator|<
name|class
name|IntT
operator|>
name|IntT
name|readInt
argument_list|()
block|{
name|int
name|value
operator|=
literal|0
block|;
name|read
argument_list|(
operator|&
name|value
argument_list|)
block|;
return|return
name|static_cast
operator|<
name|IntT
operator|>
operator|(
name|value
operator|)
return|;
block|}
name|template
operator|<
name|class
name|IntT
operator|>
name|void
name|readInt
argument_list|(
argument|IntT *outValue
argument_list|)
block|{
operator|*
name|outValue
operator|=
name|readInt
operator|<
name|IntT
operator|>
operator|(
operator|)
block|;     }
name|bool
name|readBool
argument_list|()
block|{
name|int
name|value
operator|=
literal|0
block|;
name|read
argument_list|(
operator|&
name|value
argument_list|)
block|;
return|return
operator|(
name|value
operator|>
literal|0
operator|)
return|;
block|}
name|void
name|readBool
argument_list|(
argument|bool *outValue
argument_list|)
block|{
operator|*
name|outValue
operator|=
name|readBool
argument_list|()
block|;     }
name|void
name|readBytes
argument_list|(
argument|unsigned char outArray[]
argument_list|,
argument|size_t count
argument_list|)
block|{
name|read
operator|<
name|unsigned
name|char
operator|>
operator|(
name|outArray
operator|,
name|count
operator|)
block|;     }
name|std
operator|::
name|string
name|readString
argument_list|()
block|{
name|std
operator|::
name|string
name|outString
block|;
name|readString
argument_list|(
operator|&
name|outString
argument_list|)
block|;
return|return
name|outString
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|void
name|readString
argument_list|(
name|std
operator|::
name|string
operator|*
name|v
argument_list|)
block|{
name|size_t
name|length
decl_stmt|;
name|readInt
argument_list|(
operator|&
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|mError
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|rx
operator|::
name|IsUnsignedAdditionSafe
argument_list|(
name|mOffset
argument_list|,
name|length
argument_list|)
operator|||
name|mOffset
operator|+
name|length
operator|>
name|mLength
condition|)
block|{
name|mError
operator|=
name|true
expr_stmt|;
return|return;
block|}
name|v
operator|->
name|assign
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|mData
operator|)
operator|+
name|mOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|mOffset
operator|+=
name|length
expr_stmt|;
block|}
end_decl_stmt
begin_function
name|void
name|skip
parameter_list|(
name|size_t
name|length
parameter_list|)
block|{
if|if
condition|(
operator|!
name|rx
operator|::
name|IsUnsignedAdditionSafe
argument_list|(
name|mOffset
argument_list|,
name|length
argument_list|)
operator|||
name|mOffset
operator|+
name|length
operator|>
name|mLength
condition|)
block|{
name|mError
operator|=
name|true
expr_stmt|;
return|return;
block|}
name|mOffset
operator|+=
name|length
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|size_t
name|offset
argument_list|()
specifier|const
block|{
return|return
name|mOffset
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|bool
name|error
argument_list|()
specifier|const
block|{
return|return
name|mError
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|bool
name|endOfStream
argument_list|()
specifier|const
block|{
return|return
name|mOffset
operator|==
name|mLength
return|;
block|}
end_expr_stmt
begin_function
specifier|const
name|uint8_t
modifier|*
name|data
parameter_list|()
block|{
return|return
name|mData
return|;
block|}
end_function
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|bool
name|mError
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|size_t
name|mOffset
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|uint8_t
modifier|*
name|mData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|size_t
name|mLength
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|read
argument_list|(
argument|T *v
argument_list|,
argument|size_t num
argument_list|)
block|{
name|StaticAssertIsFundamental
operator|<
name|T
operator|>
operator|(
operator|)
block|;
if|if
condition|(
operator|!
name|rx
operator|::
name|IsUnsignedMultiplicationSafe
argument_list|(
name|num
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
condition|)
block|{
name|mError
operator|=
name|true
expr_stmt|;
return|return;
block|}
name|size_t
name|length
operator|=
name|num
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
end_expr_stmt
begin_if
if|if
condition|(
operator|!
name|rx
operator|::
name|IsUnsignedAdditionSafe
argument_list|(
name|mOffset
argument_list|,
name|length
argument_list|)
operator|||
name|mOffset
operator|+
name|length
operator|>
name|mLength
condition|)
block|{
name|mError
operator|=
name|true
expr_stmt|;
return|return;
block|}
end_if
begin_expr_stmt
name|memcpy
argument_list|(
name|v
argument_list|,
name|mData
operator|+
name|mOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|mOffset
operator|+=
name|length
expr_stmt|;
end_expr_stmt
begin_expr_stmt
unit|}      template
operator|<
name|typename
name|T
operator|>
name|void
name|read
argument_list|(
argument|T *v
argument_list|)
block|{
name|read
argument_list|(
name|v
argument_list|,
literal|1
argument_list|)
block|;     }
end_expr_stmt
begin_decl_stmt
unit|};
name|class
name|BinaryOutputStream
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|BinaryOutputStream
argument_list|()
block|{     }
comment|// writeInt also handles bool types
name|template
operator|<
name|class
name|IntT
operator|>
name|void
name|writeInt
argument_list|(
argument|IntT param
argument_list|)
block|{
name|ASSERT
argument_list|(
name|rx
operator|::
name|IsIntegerCastSafe
operator|<
name|int
operator|>
operator|(
name|param
operator|)
argument_list|)
block|;
name|int
name|intValue
operator|=
name|static_cast
operator|<
name|int
operator|>
operator|(
name|param
operator|)
block|;
name|write
argument_list|(
operator|&
name|intValue
argument_list|,
literal|1
argument_list|)
block|;     }
name|void
name|writeString
argument_list|(
argument|const std::string&v
argument_list|)
block|{
name|writeInt
argument_list|(
name|v
operator|.
name|length
argument_list|()
argument_list|)
block|;
name|write
argument_list|(
name|v
operator|.
name|c_str
argument_list|()
argument_list|,
name|v
operator|.
name|length
argument_list|()
argument_list|)
block|;     }
name|void
name|writeBytes
argument_list|(
argument|const unsigned char *bytes
argument_list|,
argument|size_t count
argument_list|)
block|{
name|write
argument_list|(
name|bytes
argument_list|,
name|count
argument_list|)
block|;     }
name|size_t
name|length
argument_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|void
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|size
argument_list|()
operator|?
operator|&
name|mData
index|[
literal|0
index|]
operator|:
name|NULL
return|;
block|}
name|private
operator|:
name|std
operator|::
name|vector
operator|<
name|char
operator|>
name|mData
block|;
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|write
argument_list|(
argument|const T *v
argument_list|,
argument|size_t num
argument_list|)
block|{
name|StaticAssertIsFundamental
operator|<
name|T
operator|>
operator|(
operator|)
block|;
specifier|const
name|char
operator|*
name|asBytes
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|v
operator|)
block|;
name|mData
operator|.
name|insert
argument_list|(
name|mData
operator|.
name|end
argument_list|()
argument_list|,
name|asBytes
argument_list|,
name|asBytes
operator|+
name|num
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
block|;     }
block|}
decl_stmt|;
end_decl_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_BINARYSTREAM_H_
end_comment
end_unit
