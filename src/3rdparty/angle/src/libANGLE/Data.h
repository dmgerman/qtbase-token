begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Data.h: Container class for all GL relevant state, caps and objects
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBANGLE_DATA_H_
end_ifndef
begin_define
DECL|macro|LIBANGLE_DATA_H_
define|#
directive|define
name|LIBANGLE_DATA_H_
end_define
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/State.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|struct
name|Data
name|final
range|:
name|public
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|Data
argument_list|(
argument|uintptr_t context
argument_list|,
argument|GLint clientVersion
argument_list|,
argument|const State&state
argument_list|,
argument|const Caps&caps
argument_list|,
argument|const TextureCapsMap&textureCaps
argument_list|,
argument|const Extensions&extensions
argument_list|,
argument|const ResourceManager *resourceManager
argument_list|,
argument|const Limitations&limitations
argument_list|)
block|;
operator|~
name|Data
argument_list|()
block|;
name|uintptr_t
name|context
block|;
name|GLint
name|clientVersion
block|;
specifier|const
name|State
operator|*
name|state
block|;
specifier|const
name|Caps
operator|*
name|caps
block|;
specifier|const
name|TextureCapsMap
operator|*
name|textureCaps
block|;
specifier|const
name|Extensions
operator|*
name|extensions
block|;
specifier|const
name|ResourceManager
operator|*
name|resourceManager
block|;
specifier|const
name|Limitations
operator|*
name|limitations
block|; }
decl_stmt|;
name|class
name|ValidationContext
range|:
name|angle
operator|::
name|NonCopyable
block|{
name|public
operator|:
name|ValidationContext
argument_list|(
argument|GLint clientVersion
argument_list|,
argument|const State&state
argument_list|,
argument|const Caps&caps
argument_list|,
argument|const TextureCapsMap&textureCaps
argument_list|,
argument|const Extensions&extensions
argument_list|,
argument|const ResourceManager *resourceManager
argument_list|,
argument|const Limitations&limitations
argument_list|,
argument|bool skipValidation
argument_list|)
block|;
name|virtual
operator|~
name|ValidationContext
argument_list|()
block|{}
name|virtual
name|void
name|recordError
argument_list|(
specifier|const
name|Error
operator|&
name|error
argument_list|)
operator|=
literal|0
block|;
specifier|const
name|Data
operator|&
name|getData
argument_list|()
specifier|const
block|{
return|return
name|mData
return|;
block|}
name|int
name|getClientVersion
argument_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|clientVersion
return|;
block|}
specifier|const
name|State
operator|&
name|getState
argument_list|()
specifier|const
block|{
return|return
operator|*
name|mData
operator|.
name|state
return|;
block|}
specifier|const
name|Caps
operator|&
name|getCaps
argument_list|()
specifier|const
block|{
return|return
operator|*
name|mData
operator|.
name|caps
return|;
block|}
specifier|const
name|TextureCapsMap
operator|&
name|getTextureCaps
argument_list|()
specifier|const
block|{
return|return
operator|*
name|mData
operator|.
name|textureCaps
return|;
block|}
specifier|const
name|Extensions
operator|&
name|getExtensions
argument_list|()
specifier|const
block|{
return|return
operator|*
name|mData
operator|.
name|extensions
return|;
block|}
specifier|const
name|Limitations
operator|&
name|getLimitations
argument_list|()
specifier|const
block|{
return|return
operator|*
name|mData
operator|.
name|limitations
return|;
block|}
name|bool
name|skipValidation
argument_list|()
specifier|const
block|{
return|return
name|mSkipValidation
return|;
block|}
name|protected
operator|:
name|Data
name|mData
block|;
name|bool
name|mSkipValidation
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBANGLE_DATA_H_
end_comment
end_unit
