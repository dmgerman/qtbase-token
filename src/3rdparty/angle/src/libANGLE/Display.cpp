begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Display.cpp: Implements the egl::Display class, representing the abstract
end_comment
begin_comment
comment|// display on which graphics are drawn. Implements EGLDisplay.
end_comment
begin_comment
comment|// [EGL 1.4] section 2.1.2 page 3.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/Display.h"
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|<iterator>
end_include
begin_include
include|#
directive|include
file|<map>
end_include
begin_include
include|#
directive|include
file|<sstream>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|<platform/Platform.h>
end_include
begin_include
include|#
directive|include
file|<EGL/eglext.h>
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"common/platform.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Context.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Device.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/histogram_macros.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Image.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Surface.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/DisplayImpl.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/ImageImpl.h"
end_include
begin_include
include|#
directive|include
file|"third_party/trace_event/trace_event.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
operator|||
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
end_if
begin_include
include|#
directive|include
file|"libANGLE/renderer/d3d/DisplayD3D.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_OPENGL
argument_list|)
end_if
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINDOWS
argument_list|)
end_if
begin_include
include|#
directive|include
file|"libANGLE/renderer/gl/wgl/DisplayWGL.h"
end_include
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_USE_X11
argument_list|)
end_elif
begin_include
include|#
directive|include
file|"libANGLE/renderer/gl/glx/DisplayGLX.h"
end_include
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_PLATFORM_APPLE
argument_list|)
end_elif
begin_include
include|#
directive|include
file|"libANGLE/renderer/gl/cgl/DisplayCGL.h"
end_include
begin_else
else|#
directive|else
end_else
begin_error
error|#
directive|error
error|Unsupported OpenGL platform.
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_namespace
DECL|namespace|egl
namespace|namespace
name|egl
block|{
namespace|namespace
block|{
DECL|class|DefaultPlatform
class|class
name|DefaultPlatform
super|:
specifier|public
name|angle
operator|::
name|Platform
block|{
public|public:
DECL|function|DefaultPlatform
name|DefaultPlatform
parameter_list|()
block|{}
name|~
name|DefaultPlatform
parameter_list|()
specifier|override
block|{}
block|}
class|;
DECL|member|defaultPlatform
name|DefaultPlatform
modifier|*
name|defaultPlatform
init|=
literal|nullptr
decl_stmt|;
DECL|function|InitDefaultPlatformImpl
name|void
name|InitDefaultPlatformImpl
parameter_list|()
block|{
if|if
condition|(
name|ANGLEPlatformCurrent
argument_list|()
operator|==
literal|nullptr
condition|)
block|{
if|if
condition|(
name|defaultPlatform
operator|==
literal|nullptr
condition|)
block|{
name|defaultPlatform
operator|=
operator|new
name|DefaultPlatform
argument_list|()
expr_stmt|;
block|}
name|ANGLEPlatformInitialize
argument_list|(
name|defaultPlatform
argument_list|)
expr_stmt|;
block|}
block|}
DECL|typedef|WindowSurfaceMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|EGLNativeWindowType
argument_list|,
name|Surface
modifier|*
argument_list|>
name|WindowSurfaceMap
typedef|;
comment|// Get a map of all EGL window surfaces to validate that no window has more than one EGL surface
comment|// associated with it.
DECL|function|GetWindowSurfaces
specifier|static
name|WindowSurfaceMap
modifier|*
name|GetWindowSurfaces
parameter_list|()
block|{
specifier|static
name|WindowSurfaceMap
name|windowSurfaces
decl_stmt|;
return|return
operator|&
name|windowSurfaces
return|;
block|}
DECL|typedef|ANGLEPlatformDisplayMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|EGLNativeDisplayType
argument_list|,
name|Display
modifier|*
argument_list|>
name|ANGLEPlatformDisplayMap
typedef|;
DECL|function|GetANGLEPlatformDisplayMap
specifier|static
name|ANGLEPlatformDisplayMap
modifier|*
name|GetANGLEPlatformDisplayMap
parameter_list|()
block|{
specifier|static
name|ANGLEPlatformDisplayMap
name|displays
decl_stmt|;
return|return
operator|&
name|displays
return|;
block|}
DECL|typedef|DevicePlatformDisplayMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|Device
modifier|*
argument_list|,
name|Display
modifier|*
argument_list|>
name|DevicePlatformDisplayMap
typedef|;
DECL|function|GetDevicePlatformDisplayMap
specifier|static
name|DevicePlatformDisplayMap
modifier|*
name|GetDevicePlatformDisplayMap
parameter_list|()
block|{
specifier|static
name|DevicePlatformDisplayMap
name|displays
decl_stmt|;
return|return
operator|&
name|displays
return|;
block|}
DECL|function|CreateDisplayFromDevice
name|rx
operator|::
name|DisplayImpl
modifier|*
name|CreateDisplayFromDevice
parameter_list|(
name|Device
modifier|*
name|eglDevice
parameter_list|)
block|{
name|rx
operator|::
name|DisplayImpl
modifier|*
name|impl
init|=
literal|nullptr
decl_stmt|;
switch|switch
condition|(
name|eglDevice
operator|->
name|getType
argument_list|()
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
case|case
name|EGL_D3D11_DEVICE_ANGLE
case|:
name|impl
operator|=
operator|new
name|rx
operator|::
name|DisplayD3D
argument_list|()
expr_stmt|;
break|break;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
case|case
name|EGL_D3D9_DEVICE_ANGLE
case|:
comment|// Currently the only way to get EGLDeviceEXT representing a D3D9 device
comment|// is to retrieve one from an already-existing EGLDisplay.
comment|// When eglGetPlatformDisplayEXT is called with a D3D9 EGLDeviceEXT,
comment|// the already-existing display should be returned.
comment|// Therefore this codepath to create a new display from the device
comment|// should never be hit.
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
name|ASSERT
argument_list|(
name|impl
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
return|return
name|impl
return|;
block|}
DECL|function|CreateDisplayFromAttribs
name|rx
operator|::
name|DisplayImpl
modifier|*
name|CreateDisplayFromAttribs
parameter_list|(
specifier|const
name|AttributeMap
modifier|&
name|attribMap
parameter_list|)
block|{
name|rx
operator|::
name|DisplayImpl
modifier|*
name|impl
init|=
literal|nullptr
decl_stmt|;
name|EGLint
name|displayType
init|=
name|attribMap
operator|.
name|get
argument_list|(
name|EGL_PLATFORM_ANGLE_TYPE_ANGLE
argument_list|,
name|EGL_PLATFORM_ANGLE_TYPE_DEFAULT_ANGLE
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|displayType
condition|)
block|{
case|case
name|EGL_PLATFORM_ANGLE_TYPE_DEFAULT_ANGLE
case|:
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
operator|||
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
comment|// Default to D3D displays
name|impl
operator|=
operator|new
name|rx
operator|::
name|DisplayD3D
argument_list|()
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_USE_X11
argument_list|)
name|impl
operator|=
operator|new
name|rx
operator|::
name|DisplayGLX
argument_list|()
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_PLATFORM_APPLE
argument_list|)
name|impl
operator|=
operator|new
name|rx
operator|::
name|DisplayCGL
argument_list|()
expr_stmt|;
else|#
directive|else
comment|// No display available
name|UNREACHABLE
argument_list|()
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|EGL_PLATFORM_ANGLE_TYPE_D3D9_ANGLE
case|:
case|case
name|EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE
case|:
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
operator|||
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
name|impl
operator|=
operator|new
name|rx
operator|::
name|DisplayD3D
argument_list|()
expr_stmt|;
else|#
directive|else
comment|// A D3D display was requested on a platform that doesn't support it
name|UNREACHABLE
argument_list|()
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|EGL_PLATFORM_ANGLE_TYPE_OPENGL_ANGLE
case|:
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_OPENGL
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINDOWS
argument_list|)
name|impl
operator|=
operator|new
name|rx
operator|::
name|DisplayWGL
argument_list|()
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_USE_X11
argument_list|)
name|impl
operator|=
operator|new
name|rx
operator|::
name|DisplayGLX
argument_list|()
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_PLATFORM_APPLE
argument_list|)
name|impl
operator|=
operator|new
name|rx
operator|::
name|DisplayCGL
argument_list|()
expr_stmt|;
else|#
directive|else
error|#
directive|error
error|Unsupported OpenGL platform.
endif|#
directive|endif
else|#
directive|else
name|UNREACHABLE
argument_list|()
expr_stmt|;
endif|#
directive|endif
break|break;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_OPENGL
argument_list|)
case|case
name|EGL_PLATFORM_ANGLE_TYPE_OPENGLES_ANGLE
case|:
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINDOWS
argument_list|)
name|impl
operator|=
operator|new
name|rx
operator|::
name|DisplayWGL
argument_list|()
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|ANGLE_USE_X11
argument_list|)
name|impl
operator|=
operator|new
name|rx
operator|::
name|DisplayGLX
argument_list|()
expr_stmt|;
else|#
directive|else
comment|// No GLES support on this platform, fail display creation.
name|impl
operator|=
literal|nullptr
expr_stmt|;
endif|#
directive|endif
break|break;
endif|#
directive|endif
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
name|impl
return|;
block|}
block|}
DECL|function|GetDisplayFromAttribs
name|Display
modifier|*
name|Display
operator|::
name|GetDisplayFromAttribs
parameter_list|(
name|void
modifier|*
name|native_display
parameter_list|,
specifier|const
name|AttributeMap
modifier|&
name|attribMap
parameter_list|)
block|{
comment|// Initialize the global platform if not already
name|InitDefaultPlatformImpl
argument_list|()
expr_stmt|;
name|Display
modifier|*
name|display
init|=
literal|nullptr
decl_stmt|;
name|EGLNativeDisplayType
name|displayId
init|=
cast|reinterpret_cast
argument_list|<
name|EGLNativeDisplayType
argument_list|>
argument_list|(
name|native_display
argument_list|)
decl_stmt|;
name|ANGLEPlatformDisplayMap
modifier|*
name|displays
init|=
name|GetANGLEPlatformDisplayMap
argument_list|()
decl_stmt|;
name|ANGLEPlatformDisplayMap
operator|::
name|const_iterator
name|iter
init|=
name|displays
operator|->
name|find
argument_list|(
name|displayId
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|displays
operator|->
name|end
argument_list|()
condition|)
block|{
name|display
operator|=
name|iter
operator|->
name|second
expr_stmt|;
block|}
if|if
condition|(
name|display
operator|==
literal|nullptr
condition|)
block|{
comment|// Validate the native display
if|if
condition|(
operator|!
name|Display
operator|::
name|isValidNativeDisplay
argument_list|(
name|displayId
argument_list|)
condition|)
block|{
return|return
name|NULL
return|;
block|}
name|display
operator|=
operator|new
name|Display
argument_list|(
name|EGL_PLATFORM_ANGLE_ANGLE
argument_list|,
name|displayId
argument_list|,
literal|nullptr
argument_list|)
expr_stmt|;
name|displays
operator|->
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|displayId
argument_list|,
name|display
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Apply new attributes if the display is not initialized yet.
if|if
condition|(
operator|!
name|display
operator|->
name|isInitialized
argument_list|()
condition|)
block|{
name|rx
operator|::
name|DisplayImpl
modifier|*
name|impl
init|=
name|CreateDisplayFromAttribs
argument_list|(
name|attribMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|impl
operator|==
literal|nullptr
condition|)
block|{
comment|// No valid display implementation for these attributes
return|return
literal|nullptr
return|;
block|}
name|display
operator|->
name|setAttributes
argument_list|(
name|impl
argument_list|,
name|attribMap
argument_list|)
expr_stmt|;
block|}
return|return
name|display
return|;
block|}
DECL|function|GetDisplayFromDevice
name|Display
modifier|*
name|Display
operator|::
name|GetDisplayFromDevice
parameter_list|(
name|void
modifier|*
name|native_display
parameter_list|)
block|{
comment|// Initialize the global platform if not already
name|InitDefaultPlatformImpl
argument_list|()
expr_stmt|;
name|Display
modifier|*
name|display
init|=
literal|nullptr
decl_stmt|;
name|Device
modifier|*
name|eglDevice
init|=
cast|reinterpret_cast
argument_list|<
name|Device
operator|*
argument_list|>
argument_list|(
name|native_display
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|Device
operator|::
name|IsValidDevice
argument_list|(
name|eglDevice
argument_list|)
argument_list|)
expr_stmt|;
name|ANGLEPlatformDisplayMap
modifier|*
name|anglePlatformDisplays
init|=
name|GetANGLEPlatformDisplayMap
argument_list|()
decl_stmt|;
name|DevicePlatformDisplayMap
modifier|*
name|devicePlatformDisplays
init|=
name|GetDevicePlatformDisplayMap
argument_list|()
decl_stmt|;
comment|// First see if this eglDevice is in use by a Display created using ANGLE platform
for|for
control|(
name|auto
operator|&
name|displayMapEntry
operator|:
operator|*
name|anglePlatformDisplays
control|)
block|{
name|egl
operator|::
name|Display
modifier|*
name|iterDisplay
init|=
name|displayMapEntry
operator|.
name|second
decl_stmt|;
if|if
condition|(
name|iterDisplay
operator|->
name|getDevice
argument_list|()
operator|==
name|eglDevice
condition|)
block|{
name|display
operator|=
name|iterDisplay
expr_stmt|;
block|}
block|}
if|if
condition|(
name|display
operator|==
literal|nullptr
condition|)
block|{
comment|// See if the eglDevice is in use by a Display created using the DEVICE platform
name|DevicePlatformDisplayMap
operator|::
name|const_iterator
name|iter
init|=
name|devicePlatformDisplays
operator|->
name|find
argument_list|(
name|eglDevice
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|devicePlatformDisplays
operator|->
name|end
argument_list|()
condition|)
block|{
name|display
operator|=
name|iter
operator|->
name|second
expr_stmt|;
block|}
block|}
if|if
condition|(
name|display
operator|==
literal|nullptr
condition|)
block|{
comment|// Otherwise create a new Display
name|display
operator|=
operator|new
name|Display
argument_list|(
name|EGL_PLATFORM_DEVICE_EXT
argument_list|,
literal|0
argument_list|,
name|eglDevice
argument_list|)
expr_stmt|;
name|devicePlatformDisplays
operator|->
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|eglDevice
argument_list|,
name|display
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Apply new attributes if the display is not initialized yet.
if|if
condition|(
operator|!
name|display
operator|->
name|isInitialized
argument_list|()
condition|)
block|{
name|rx
operator|::
name|DisplayImpl
modifier|*
name|impl
init|=
name|CreateDisplayFromDevice
argument_list|(
name|eglDevice
argument_list|)
decl_stmt|;
name|display
operator|->
name|setAttributes
argument_list|(
name|impl
argument_list|,
name|egl
operator|::
name|AttributeMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|display
return|;
block|}
DECL|function|Display
name|Display
operator|::
name|Display
parameter_list|(
name|EGLenum
name|platform
parameter_list|,
name|EGLNativeDisplayType
name|displayId
parameter_list|,
name|Device
modifier|*
name|eglDevice
parameter_list|)
member_init_list|:
name|mImplementation
argument_list|(
literal|nullptr
argument_list|)
member_init_list|,
name|mDisplayId
argument_list|(
name|displayId
argument_list|)
member_init_list|,
name|mAttributeMap
argument_list|()
member_init_list|,
name|mConfigSet
argument_list|()
member_init_list|,
name|mContextSet
argument_list|()
member_init_list|,
name|mInitialized
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mCaps
argument_list|()
member_init_list|,
name|mDisplayExtensions
argument_list|()
member_init_list|,
name|mDisplayExtensionString
argument_list|()
member_init_list|,
name|mVendorString
argument_list|()
member_init_list|,
name|mDevice
argument_list|(
name|eglDevice
argument_list|)
member_init_list|,
name|mPlatform
argument_list|(
name|platform
argument_list|)
block|{ }
DECL|function|~Display
name|Display
operator|::
name|~
name|Display
parameter_list|()
block|{
name|terminate
argument_list|()
expr_stmt|;
if|if
condition|(
name|mPlatform
operator|==
name|EGL_PLATFORM_ANGLE_ANGLE
condition|)
block|{
name|ANGLEPlatformDisplayMap
modifier|*
name|displays
init|=
name|GetANGLEPlatformDisplayMap
argument_list|()
decl_stmt|;
name|ANGLEPlatformDisplayMap
operator|::
name|iterator
name|iter
init|=
name|displays
operator|->
name|find
argument_list|(
name|mDisplayId
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|displays
operator|->
name|end
argument_list|()
condition|)
block|{
name|displays
operator|->
name|erase
argument_list|(
name|iter
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|mPlatform
operator|==
name|EGL_PLATFORM_DEVICE_EXT
condition|)
block|{
name|DevicePlatformDisplayMap
modifier|*
name|displays
init|=
name|GetDevicePlatformDisplayMap
argument_list|()
decl_stmt|;
name|DevicePlatformDisplayMap
operator|::
name|iterator
name|iter
init|=
name|displays
operator|->
name|find
argument_list|(
name|mDevice
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|displays
operator|->
name|end
argument_list|()
condition|)
block|{
name|displays
operator|->
name|erase
argument_list|(
name|iter
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
name|SafeDelete
argument_list|(
name|mDevice
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mImplementation
argument_list|)
expr_stmt|;
block|}
DECL|function|setAttributes
name|void
name|Display
operator|::
name|setAttributes
parameter_list|(
name|rx
operator|::
name|DisplayImpl
modifier|*
name|impl
parameter_list|,
specifier|const
name|AttributeMap
modifier|&
name|attribMap
parameter_list|)
block|{
name|ASSERT
argument_list|(
operator|!
name|mInitialized
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|impl
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mImplementation
argument_list|)
expr_stmt|;
name|mImplementation
operator|=
name|impl
expr_stmt|;
name|mAttributeMap
operator|=
name|attribMap
expr_stmt|;
block|}
DECL|function|initialize
name|Error
name|Display
operator|::
name|initialize
parameter_list|()
block|{
comment|// Re-initialize default platform if it's needed
name|InitDefaultPlatformImpl
argument_list|()
expr_stmt|;
name|SCOPED_ANGLE_HISTOGRAM_TIMER
argument_list|(
literal|"GPU.ANGLE.DisplayInitializeMS"
argument_list|)
expr_stmt|;
name|TRACE_EVENT0
argument_list|(
literal|"gpu.angle"
argument_list|,
literal|"egl::Display::initialize"
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|mImplementation
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|isInitialized
argument_list|()
condition|)
block|{
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
name|Error
name|error
init|=
name|mImplementation
operator|->
name|initialize
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
comment|// Log extended error message here
name|std
operator|::
name|stringstream
name|errorStream
decl_stmt|;
name|errorStream
operator|<<
literal|"ANGLE Display::initialize error "
operator|<<
name|error
operator|.
name|getID
argument_list|()
operator|<<
literal|": "
operator|<<
name|error
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|ANGLEPlatformCurrent
argument_list|()
operator|->
name|logError
argument_list|(
name|errorStream
operator|.
name|str
argument_list|()
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|mCaps
operator|=
name|mImplementation
operator|->
name|getCaps
argument_list|()
expr_stmt|;
name|mConfigSet
operator|=
name|mImplementation
operator|->
name|generateConfigs
argument_list|()
expr_stmt|;
if|if
condition|(
name|mConfigSet
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|mImplementation
operator|->
name|terminate
argument_list|()
expr_stmt|;
return|return
name|Error
argument_list|(
name|EGL_NOT_INITIALIZED
argument_list|)
return|;
block|}
name|initDisplayExtensions
argument_list|()
expr_stmt|;
name|initVendorString
argument_list|()
expr_stmt|;
comment|// Populate the Display's EGLDeviceEXT if the Display wasn't created using one
if|if
condition|(
name|mPlatform
operator|!=
name|EGL_PLATFORM_DEVICE_EXT
condition|)
block|{
if|if
condition|(
name|mDisplayExtensions
operator|.
name|deviceQuery
condition|)
block|{
name|rx
operator|::
name|DeviceImpl
modifier|*
name|impl
init|=
literal|nullptr
decl_stmt|;
name|error
operator|=
name|mImplementation
operator|->
name|getDevice
argument_list|(
operator|&
name|impl
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|error
operator|=
name|Device
operator|::
name|CreateDevice
argument_list|(
name|this
argument_list|,
name|impl
argument_list|,
operator|&
name|mDevice
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
else|else
block|{
name|mDevice
operator|=
literal|nullptr
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// For EGL_PLATFORM_DEVICE_EXT, mDevice should always be populated using
comment|// an external device
name|ASSERT
argument_list|(
name|mDevice
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
block|}
name|mInitialized
operator|=
literal|true
expr_stmt|;
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|terminate
name|void
name|Display
operator|::
name|terminate
parameter_list|()
block|{
name|makeCurrent
argument_list|(
literal|nullptr
argument_list|,
literal|nullptr
argument_list|,
literal|nullptr
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|mContextSet
operator|.
name|empty
argument_list|()
condition|)
block|{
name|destroyContext
argument_list|(
operator|*
name|mContextSet
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|mImageSet
operator|.
name|empty
argument_list|()
condition|)
block|{
name|destroyImage
argument_list|(
operator|*
name|mImageSet
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|mImplementation
operator|->
name|getSurfaceSet
argument_list|()
operator|.
name|empty
argument_list|()
condition|)
block|{
name|destroySurface
argument_list|(
operator|*
name|mImplementation
operator|->
name|getSurfaceSet
argument_list|()
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mConfigSet
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|mDevice
operator|!=
literal|nullptr
operator|&&
name|mDevice
operator|->
name|getOwningDisplay
argument_list|()
operator|!=
literal|nullptr
condition|)
block|{
comment|// Don't delete the device if it was created externally using eglCreateDeviceANGLE
comment|// We also shouldn't set it to null in case eglInitialize() is called again later
name|SafeDelete
argument_list|(
name|mDevice
argument_list|)
expr_stmt|;
block|}
name|mImplementation
operator|->
name|terminate
argument_list|()
expr_stmt|;
name|mInitialized
operator|=
literal|false
expr_stmt|;
comment|// Never de-init default platform.. terminate is not that final.
block|}
DECL|function|getConfigs
name|std
operator|::
name|vector
argument_list|<
specifier|const
name|Config
modifier|*
argument_list|>
name|Display
operator|::
name|getConfigs
parameter_list|(
specifier|const
name|egl
operator|::
name|AttributeMap
modifier|&
name|attribs
parameter_list|)
specifier|const
block|{
return|return
name|mConfigSet
operator|.
name|filter
argument_list|(
name|attribs
argument_list|)
return|;
block|}
DECL|function|getConfigAttrib
name|bool
name|Display
operator|::
name|getConfigAttrib
parameter_list|(
specifier|const
name|Config
modifier|*
name|configuration
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|attribute
condition|)
block|{
case|case
name|EGL_BUFFER_SIZE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|bufferSize
expr_stmt|;
break|break;
case|case
name|EGL_ALPHA_SIZE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|alphaSize
expr_stmt|;
break|break;
case|case
name|EGL_BLUE_SIZE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|blueSize
expr_stmt|;
break|break;
case|case
name|EGL_GREEN_SIZE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|greenSize
expr_stmt|;
break|break;
case|case
name|EGL_RED_SIZE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|redSize
expr_stmt|;
break|break;
case|case
name|EGL_DEPTH_SIZE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|depthSize
expr_stmt|;
break|break;
case|case
name|EGL_STENCIL_SIZE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|stencilSize
expr_stmt|;
break|break;
case|case
name|EGL_CONFIG_CAVEAT
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|configCaveat
expr_stmt|;
break|break;
case|case
name|EGL_CONFIG_ID
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|configID
expr_stmt|;
break|break;
case|case
name|EGL_LEVEL
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|level
expr_stmt|;
break|break;
case|case
name|EGL_NATIVE_RENDERABLE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|nativeRenderable
expr_stmt|;
break|break;
case|case
name|EGL_NATIVE_VISUAL_ID
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|nativeVisualID
expr_stmt|;
break|break;
case|case
name|EGL_NATIVE_VISUAL_TYPE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|nativeVisualType
expr_stmt|;
break|break;
case|case
name|EGL_SAMPLES
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|samples
expr_stmt|;
break|break;
case|case
name|EGL_SAMPLE_BUFFERS
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|sampleBuffers
expr_stmt|;
break|break;
case|case
name|EGL_SURFACE_TYPE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|surfaceType
expr_stmt|;
break|break;
case|case
name|EGL_TRANSPARENT_TYPE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|transparentType
expr_stmt|;
break|break;
case|case
name|EGL_TRANSPARENT_BLUE_VALUE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|transparentBlueValue
expr_stmt|;
break|break;
case|case
name|EGL_TRANSPARENT_GREEN_VALUE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|transparentGreenValue
expr_stmt|;
break|break;
case|case
name|EGL_TRANSPARENT_RED_VALUE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|transparentRedValue
expr_stmt|;
break|break;
case|case
name|EGL_BIND_TO_TEXTURE_RGB
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|bindToTextureRGB
expr_stmt|;
break|break;
case|case
name|EGL_BIND_TO_TEXTURE_RGBA
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|bindToTextureRGBA
expr_stmt|;
break|break;
case|case
name|EGL_MIN_SWAP_INTERVAL
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|minSwapInterval
expr_stmt|;
break|break;
case|case
name|EGL_MAX_SWAP_INTERVAL
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|maxSwapInterval
expr_stmt|;
break|break;
case|case
name|EGL_LUMINANCE_SIZE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|luminanceSize
expr_stmt|;
break|break;
case|case
name|EGL_ALPHA_MASK_SIZE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|alphaMaskSize
expr_stmt|;
break|break;
case|case
name|EGL_COLOR_BUFFER_TYPE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|colorBufferType
expr_stmt|;
break|break;
case|case
name|EGL_RENDERABLE_TYPE
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|renderableType
expr_stmt|;
break|break;
case|case
name|EGL_MATCH_NATIVE_PIXMAP
case|:
operator|*
name|value
operator|=
literal|false
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_CONFORMANT
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|conformant
expr_stmt|;
break|break;
case|case
name|EGL_MAX_PBUFFER_WIDTH
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|maxPBufferWidth
expr_stmt|;
break|break;
case|case
name|EGL_MAX_PBUFFER_HEIGHT
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|maxPBufferHeight
expr_stmt|;
break|break;
case|case
name|EGL_MAX_PBUFFER_PIXELS
case|:
operator|*
name|value
operator|=
name|configuration
operator|->
name|maxPBufferPixels
expr_stmt|;
break|break;
case|case
name|EGL_OPTIMAL_SURFACE_ORIENTATION_ANGLE
case|:
if|if
condition|(
operator|!
name|getExtensions
argument_list|()
operator|.
name|surfaceOrientation
condition|)
block|{
return|return
literal|false
return|;
block|}
operator|*
name|value
operator|=
name|configuration
operator|->
name|optimalOrientation
expr_stmt|;
break|break;
default|default:
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|createWindowSurface
name|Error
name|Display
operator|::
name|createWindowSurface
parameter_list|(
specifier|const
name|Config
modifier|*
name|configuration
parameter_list|,
name|EGLNativeWindowType
name|window
parameter_list|,
specifier|const
name|AttributeMap
modifier|&
name|attribs
parameter_list|,
name|Surface
modifier|*
modifier|*
name|outSurface
parameter_list|)
block|{
if|if
condition|(
name|mImplementation
operator|->
name|testDeviceLost
argument_list|()
condition|)
block|{
name|Error
name|error
init|=
name|restoreLostDevice
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
name|rx
operator|::
name|SurfaceImpl
modifier|*
name|surfaceImpl
init|=
name|mImplementation
operator|->
name|createWindowSurface
argument_list|(
name|configuration
argument_list|,
name|window
argument_list|,
name|attribs
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|surfaceImpl
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|Error
name|error
init|=
name|surfaceImpl
operator|->
name|initialize
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SafeDelete
argument_list|(
name|surfaceImpl
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|Surface
modifier|*
name|surface
init|=
operator|new
name|Surface
argument_list|(
name|surfaceImpl
argument_list|,
name|EGL_WINDOW_BIT
argument_list|,
name|configuration
argument_list|,
name|attribs
argument_list|)
decl_stmt|;
name|mImplementation
operator|->
name|getSurfaceSet
argument_list|()
operator|.
name|insert
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|WindowSurfaceMap
modifier|*
name|windowSurfaces
init|=
name|GetWindowSurfaces
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|windowSurfaces
operator|&&
name|windowSurfaces
operator|->
name|find
argument_list|(
name|window
argument_list|)
operator|==
name|windowSurfaces
operator|->
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|windowSurfaces
operator|->
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|window
argument_list|,
name|surface
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|outSurface
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
operator|*
name|outSurface
operator|=
name|surface
expr_stmt|;
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|createPbufferSurface
name|Error
name|Display
operator|::
name|createPbufferSurface
parameter_list|(
specifier|const
name|Config
modifier|*
name|configuration
parameter_list|,
specifier|const
name|AttributeMap
modifier|&
name|attribs
parameter_list|,
name|Surface
modifier|*
modifier|*
name|outSurface
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mImplementation
operator|->
name|testDeviceLost
argument_list|()
condition|)
block|{
name|Error
name|error
init|=
name|restoreLostDevice
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
name|rx
operator|::
name|SurfaceImpl
modifier|*
name|surfaceImpl
init|=
name|mImplementation
operator|->
name|createPbufferSurface
argument_list|(
name|configuration
argument_list|,
name|attribs
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|surfaceImpl
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|Error
name|error
init|=
name|surfaceImpl
operator|->
name|initialize
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SafeDelete
argument_list|(
name|surfaceImpl
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|Surface
modifier|*
name|surface
init|=
operator|new
name|Surface
argument_list|(
name|surfaceImpl
argument_list|,
name|EGL_PBUFFER_BIT
argument_list|,
name|configuration
argument_list|,
name|attribs
argument_list|)
decl_stmt|;
name|mImplementation
operator|->
name|getSurfaceSet
argument_list|()
operator|.
name|insert
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|outSurface
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
operator|*
name|outSurface
operator|=
name|surface
expr_stmt|;
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|createPbufferFromClientBuffer
name|Error
name|Display
operator|::
name|createPbufferFromClientBuffer
parameter_list|(
specifier|const
name|Config
modifier|*
name|configuration
parameter_list|,
name|EGLClientBuffer
name|shareHandle
parameter_list|,
specifier|const
name|AttributeMap
modifier|&
name|attribs
parameter_list|,
name|Surface
modifier|*
modifier|*
name|outSurface
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mImplementation
operator|->
name|testDeviceLost
argument_list|()
condition|)
block|{
name|Error
name|error
init|=
name|restoreLostDevice
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
name|rx
operator|::
name|SurfaceImpl
modifier|*
name|surfaceImpl
init|=
name|mImplementation
operator|->
name|createPbufferFromClientBuffer
argument_list|(
name|configuration
argument_list|,
name|shareHandle
argument_list|,
name|attribs
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|surfaceImpl
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|Error
name|error
init|=
name|surfaceImpl
operator|->
name|initialize
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SafeDelete
argument_list|(
name|surfaceImpl
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|Surface
modifier|*
name|surface
init|=
operator|new
name|Surface
argument_list|(
name|surfaceImpl
argument_list|,
name|EGL_PBUFFER_BIT
argument_list|,
name|configuration
argument_list|,
name|attribs
argument_list|)
decl_stmt|;
name|mImplementation
operator|->
name|getSurfaceSet
argument_list|()
operator|.
name|insert
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|outSurface
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
operator|*
name|outSurface
operator|=
name|surface
expr_stmt|;
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|createPixmapSurface
name|Error
name|Display
operator|::
name|createPixmapSurface
parameter_list|(
specifier|const
name|Config
modifier|*
name|configuration
parameter_list|,
name|NativePixmapType
name|nativePixmap
parameter_list|,
specifier|const
name|AttributeMap
modifier|&
name|attribs
parameter_list|,
name|Surface
modifier|*
modifier|*
name|outSurface
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mImplementation
operator|->
name|testDeviceLost
argument_list|()
condition|)
block|{
name|Error
name|error
init|=
name|restoreLostDevice
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
name|rx
operator|::
name|SurfaceImpl
modifier|*
name|surfaceImpl
init|=
name|mImplementation
operator|->
name|createPixmapSurface
argument_list|(
name|configuration
argument_list|,
name|nativePixmap
argument_list|,
name|attribs
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|surfaceImpl
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|Error
name|error
init|=
name|surfaceImpl
operator|->
name|initialize
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SafeDelete
argument_list|(
name|surfaceImpl
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|Surface
modifier|*
name|surface
init|=
operator|new
name|Surface
argument_list|(
name|surfaceImpl
argument_list|,
name|EGL_PIXMAP_BIT
argument_list|,
name|configuration
argument_list|,
name|attribs
argument_list|)
decl_stmt|;
name|mImplementation
operator|->
name|getSurfaceSet
argument_list|()
operator|.
name|insert
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|outSurface
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
operator|*
name|outSurface
operator|=
name|surface
expr_stmt|;
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|createImage
name|Error
name|Display
operator|::
name|createImage
parameter_list|(
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|,
name|EGLenum
name|target
parameter_list|,
name|EGLClientBuffer
name|buffer
parameter_list|,
specifier|const
name|AttributeMap
modifier|&
name|attribs
parameter_list|,
name|Image
modifier|*
modifier|*
name|outImage
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mImplementation
operator|->
name|testDeviceLost
argument_list|()
condition|)
block|{
name|Error
name|error
init|=
name|restoreLostDevice
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
name|egl
operator|::
name|ImageSibling
modifier|*
name|sibling
init|=
literal|nullptr
decl_stmt|;
if|if
condition|(
name|IsTextureTarget
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|sibling
operator|=
name|context
operator|->
name|getTexture
argument_list|(
name|egl_gl
operator|::
name|EGLClientBufferToGLObjectHandle
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|IsRenderbufferTarget
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|sibling
operator|=
name|context
operator|->
name|getRenderbuffer
argument_list|(
name|egl_gl
operator|::
name|EGLClientBufferToGLObjectHandle
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
name|ASSERT
argument_list|(
name|sibling
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|rx
operator|::
name|ImageImpl
modifier|*
name|imageImpl
init|=
name|mImplementation
operator|->
name|createImage
argument_list|(
name|target
argument_list|,
name|sibling
argument_list|,
name|attribs
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|imageImpl
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|Error
name|error
init|=
name|imageImpl
operator|->
name|initialize
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|Image
modifier|*
name|image
init|=
operator|new
name|Image
argument_list|(
name|imageImpl
argument_list|,
name|target
argument_list|,
name|sibling
argument_list|,
name|attribs
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|outImage
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
operator|*
name|outImage
operator|=
name|image
expr_stmt|;
comment|// Add this image to the list of all images and hold a ref to it.
name|image
operator|->
name|addRef
argument_list|()
expr_stmt|;
name|mImageSet
operator|.
name|insert
argument_list|(
name|image
argument_list|)
expr_stmt|;
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|createContext
name|Error
name|Display
operator|::
name|createContext
parameter_list|(
specifier|const
name|Config
modifier|*
name|configuration
parameter_list|,
name|gl
operator|::
name|Context
modifier|*
name|shareContext
parameter_list|,
specifier|const
name|AttributeMap
modifier|&
name|attribs
parameter_list|,
name|gl
operator|::
name|Context
modifier|*
modifier|*
name|outContext
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mImplementation
operator|->
name|testDeviceLost
argument_list|()
condition|)
block|{
name|Error
name|error
init|=
name|restoreLostDevice
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
block|}
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
operator|*
name|outContext
operator|=
name|mImplementation
operator|->
name|createContext
argument_list|(
name|configuration
argument_list|,
name|shareContext
argument_list|,
name|attribs
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|context
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|mContextSet
operator|.
name|insert
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|outContext
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
operator|*
name|outContext
operator|=
name|context
expr_stmt|;
return|return
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|makeCurrent
name|Error
name|Display
operator|::
name|makeCurrent
parameter_list|(
name|egl
operator|::
name|Surface
modifier|*
name|drawSurface
parameter_list|,
name|egl
operator|::
name|Surface
modifier|*
name|readSurface
parameter_list|,
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|)
block|{
name|Error
name|error
init|=
name|mImplementation
operator|->
name|makeCurrent
argument_list|(
name|drawSurface
argument_list|,
name|readSurface
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
if|if
condition|(
name|context
operator|!=
literal|nullptr
operator|&&
name|drawSurface
operator|!=
literal|nullptr
condition|)
block|{
name|ASSERT
argument_list|(
name|readSurface
operator|==
name|drawSurface
argument_list|)
expr_stmt|;
name|context
operator|->
name|makeCurrent
argument_list|(
name|drawSurface
argument_list|)
expr_stmt|;
block|}
return|return
name|egl
operator|::
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
return|;
block|}
DECL|function|restoreLostDevice
name|Error
name|Display
operator|::
name|restoreLostDevice
parameter_list|()
block|{
for|for
control|(
name|ContextSet
operator|::
name|iterator
name|ctx
init|=
name|mContextSet
operator|.
name|begin
argument_list|()
init|;
name|ctx
operator|!=
name|mContextSet
operator|.
name|end
argument_list|()
condition|;
name|ctx
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|ctx
operator|)
operator|->
name|isResetNotificationEnabled
argument_list|()
condition|)
block|{
comment|// If reset notifications have been requested, application must delete all contexts first
return|return
name|Error
argument_list|(
name|EGL_CONTEXT_LOST
argument_list|)
return|;
block|}
block|}
return|return
name|mImplementation
operator|->
name|restoreLostDevice
argument_list|()
return|;
block|}
DECL|function|destroySurface
name|void
name|Display
operator|::
name|destroySurface
parameter_list|(
name|Surface
modifier|*
name|surface
parameter_list|)
block|{
if|if
condition|(
name|surface
operator|->
name|getType
argument_list|()
operator|==
name|EGL_WINDOW_BIT
condition|)
block|{
name|WindowSurfaceMap
modifier|*
name|windowSurfaces
init|=
name|GetWindowSurfaces
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|windowSurfaces
argument_list|)
expr_stmt|;
name|bool
name|surfaceRemoved
init|=
literal|false
decl_stmt|;
for|for
control|(
name|WindowSurfaceMap
operator|::
name|iterator
name|iter
init|=
name|windowSurfaces
operator|->
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|windowSurfaces
operator|->
name|end
argument_list|()
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|iter
operator|->
name|second
operator|==
name|surface
condition|)
block|{
name|windowSurfaces
operator|->
name|erase
argument_list|(
name|iter
argument_list|)
expr_stmt|;
name|surfaceRemoved
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|ASSERT
argument_list|(
name|surfaceRemoved
argument_list|)
expr_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|surfaceRemoved
argument_list|)
expr_stmt|;
block|}
name|mImplementation
operator|->
name|destroySurface
argument_list|(
name|surface
argument_list|)
expr_stmt|;
block|}
DECL|function|destroyImage
name|void
name|Display
operator|::
name|destroyImage
parameter_list|(
name|egl
operator|::
name|Image
modifier|*
name|image
parameter_list|)
block|{
name|auto
name|iter
init|=
name|mImageSet
operator|.
name|find
argument_list|(
name|image
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|iter
operator|!=
name|mImageSet
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|*
name|iter
operator|)
operator|->
name|release
argument_list|()
expr_stmt|;
name|mImageSet
operator|.
name|erase
argument_list|(
name|iter
argument_list|)
expr_stmt|;
block|}
DECL|function|destroyContext
name|void
name|Display
operator|::
name|destroyContext
parameter_list|(
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|)
block|{
name|mContextSet
operator|.
name|erase
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|function|isDeviceLost
name|bool
name|Display
operator|::
name|isDeviceLost
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mImplementation
operator|->
name|isDeviceLost
argument_list|()
return|;
block|}
DECL|function|testDeviceLost
name|bool
name|Display
operator|::
name|testDeviceLost
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mImplementation
operator|->
name|testDeviceLost
argument_list|()
return|;
block|}
DECL|function|notifyDeviceLost
name|void
name|Display
operator|::
name|notifyDeviceLost
parameter_list|()
block|{
for|for
control|(
name|ContextSet
operator|::
name|iterator
name|context
init|=
name|mContextSet
operator|.
name|begin
argument_list|()
init|;
name|context
operator|!=
name|mContextSet
operator|.
name|end
argument_list|()
condition|;
name|context
operator|++
control|)
block|{
operator|(
operator|*
name|context
operator|)
operator|->
name|markContextLost
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|waitClient
name|Error
name|Display
operator|::
name|waitClient
parameter_list|()
specifier|const
block|{
return|return
name|mImplementation
operator|->
name|waitClient
argument_list|()
return|;
block|}
DECL|function|waitNative
name|Error
name|Display
operator|::
name|waitNative
parameter_list|(
name|EGLint
name|engine
parameter_list|,
name|egl
operator|::
name|Surface
modifier|*
name|drawSurface
parameter_list|,
name|egl
operator|::
name|Surface
modifier|*
name|readSurface
parameter_list|)
specifier|const
block|{
return|return
name|mImplementation
operator|->
name|waitNative
argument_list|(
name|engine
argument_list|,
name|drawSurface
argument_list|,
name|readSurface
argument_list|)
return|;
block|}
DECL|function|getCaps
specifier|const
name|Caps
modifier|&
name|Display
operator|::
name|getCaps
parameter_list|()
specifier|const
block|{
return|return
name|mCaps
return|;
block|}
DECL|function|isInitialized
name|bool
name|Display
operator|::
name|isInitialized
parameter_list|()
specifier|const
block|{
return|return
name|mInitialized
return|;
block|}
DECL|function|isValidConfig
name|bool
name|Display
operator|::
name|isValidConfig
parameter_list|(
specifier|const
name|Config
modifier|*
name|config
parameter_list|)
specifier|const
block|{
return|return
name|mConfigSet
operator|.
name|contains
argument_list|(
name|config
argument_list|)
return|;
block|}
DECL|function|isValidContext
name|bool
name|Display
operator|::
name|isValidContext
parameter_list|(
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|)
specifier|const
block|{
return|return
name|mContextSet
operator|.
name|find
argument_list|(
name|context
argument_list|)
operator|!=
name|mContextSet
operator|.
name|end
argument_list|()
return|;
block|}
DECL|function|isValidSurface
name|bool
name|Display
operator|::
name|isValidSurface
parameter_list|(
name|Surface
modifier|*
name|surface
parameter_list|)
specifier|const
block|{
return|return
name|mImplementation
operator|->
name|getSurfaceSet
argument_list|()
operator|.
name|find
argument_list|(
name|surface
argument_list|)
operator|!=
name|mImplementation
operator|->
name|getSurfaceSet
argument_list|()
operator|.
name|end
argument_list|()
return|;
block|}
DECL|function|isValidImage
name|bool
name|Display
operator|::
name|isValidImage
parameter_list|(
specifier|const
name|Image
modifier|*
name|image
parameter_list|)
specifier|const
block|{
return|return
name|mImageSet
operator|.
name|find
argument_list|(
cast|const_cast
argument_list|<
name|Image
operator|*
argument_list|>
argument_list|(
name|image
argument_list|)
argument_list|)
operator|!=
name|mImageSet
operator|.
name|end
argument_list|()
return|;
block|}
DECL|function|hasExistingWindowSurface
name|bool
name|Display
operator|::
name|hasExistingWindowSurface
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
block|{
name|WindowSurfaceMap
modifier|*
name|windowSurfaces
init|=
name|GetWindowSurfaces
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|windowSurfaces
argument_list|)
expr_stmt|;
return|return
name|windowSurfaces
operator|->
name|find
argument_list|(
name|window
argument_list|)
operator|!=
name|windowSurfaces
operator|->
name|end
argument_list|()
return|;
block|}
DECL|function|GenerateClientExtensions
specifier|static
name|ClientExtensions
name|GenerateClientExtensions
parameter_list|()
block|{
name|ClientExtensions
name|extensions
decl_stmt|;
name|extensions
operator|.
name|clientExtensions
operator|=
literal|true
expr_stmt|;
name|extensions
operator|.
name|platformBase
operator|=
literal|true
expr_stmt|;
name|extensions
operator|.
name|platformANGLE
operator|=
literal|true
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
operator|||
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
name|extensions
operator|.
name|platformANGLED3D
operator|=
literal|true
expr_stmt|;
name|extensions
operator|.
name|platformDevice
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_OPENGL
argument_list|)
name|extensions
operator|.
name|platformANGLEOpenGL
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
name|extensions
operator|.
name|deviceCreation
operator|=
literal|true
expr_stmt|;
name|extensions
operator|.
name|deviceCreationD3D11
operator|=
literal|true
expr_stmt|;
name|extensions
operator|.
name|experimentalPresentPath
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_USE_X11
argument_list|)
name|extensions
operator|.
name|x11Visual
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
name|extensions
operator|.
name|clientGetAllProcAddresses
operator|=
literal|true
expr_stmt|;
return|return
name|extensions
return|;
block|}
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|GenerateExtensionsString
specifier|static
name|std
operator|::
name|string
name|GenerateExtensionsString
parameter_list|(
specifier|const
name|T
modifier|&
name|extensions
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|std
operator|::
name|string
argument_list|>
name|extensionsVector
init|=
name|extensions
operator|.
name|getStrings
argument_list|()
decl_stmt|;
name|std
operator|::
name|ostringstream
name|stream
decl_stmt|;
name|std
operator|::
name|copy
argument_list|(
name|extensionsVector
operator|.
name|begin
argument_list|()
argument_list|,
name|extensionsVector
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|ostream_iterator
argument_list|<
name|std
operator|::
name|string
argument_list|>
argument_list|(
name|stream
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|stream
operator|.
name|str
argument_list|()
return|;
block|}
DECL|function|getClientExtensions
specifier|const
name|ClientExtensions
modifier|&
name|Display
operator|::
name|getClientExtensions
parameter_list|()
block|{
specifier|static
specifier|const
name|ClientExtensions
name|clientExtensions
init|=
name|GenerateClientExtensions
argument_list|()
decl_stmt|;
return|return
name|clientExtensions
return|;
block|}
DECL|function|getClientExtensionString
specifier|const
name|std
operator|::
name|string
modifier|&
name|Display
operator|::
name|getClientExtensionString
parameter_list|()
block|{
specifier|static
specifier|const
name|std
operator|::
name|string
name|clientExtensionsString
init|=
name|GenerateExtensionsString
argument_list|(
name|getClientExtensions
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|clientExtensionsString
return|;
block|}
DECL|function|initDisplayExtensions
name|void
name|Display
operator|::
name|initDisplayExtensions
parameter_list|()
block|{
name|mDisplayExtensions
operator|=
name|mImplementation
operator|->
name|getExtensions
argument_list|()
expr_stmt|;
comment|// Force EGL_KHR_get_all_proc_addresses on.
name|mDisplayExtensions
operator|.
name|getAllProcAddresses
operator|=
literal|true
expr_stmt|;
name|mDisplayExtensionString
operator|=
name|GenerateExtensionsString
argument_list|(
name|mDisplayExtensions
argument_list|)
expr_stmt|;
block|}
DECL|function|isValidNativeWindow
name|bool
name|Display
operator|::
name|isValidNativeWindow
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|)
specifier|const
block|{
return|return
name|mImplementation
operator|->
name|isValidNativeWindow
argument_list|(
name|window
argument_list|)
return|;
block|}
DECL|function|isValidDisplay
name|bool
name|Display
operator|::
name|isValidDisplay
parameter_list|(
specifier|const
name|egl
operator|::
name|Display
modifier|*
name|display
parameter_list|)
block|{
specifier|const
name|ANGLEPlatformDisplayMap
modifier|*
name|anglePlatformDisplayMap
init|=
name|GetANGLEPlatformDisplayMap
argument_list|()
decl_stmt|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|displayPair
range|:
operator|*
name|anglePlatformDisplayMap
control|)
block|{
if|if
condition|(
name|displayPair
operator|.
name|second
operator|==
name|display
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|const
name|DevicePlatformDisplayMap
modifier|*
name|devicePlatformDisplayMap
init|=
name|GetDevicePlatformDisplayMap
argument_list|()
decl_stmt|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|displayPair
range|:
operator|*
name|devicePlatformDisplayMap
control|)
block|{
if|if
condition|(
name|displayPair
operator|.
name|second
operator|==
name|display
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|isValidNativeDisplay
name|bool
name|Display
operator|::
name|isValidNativeDisplay
parameter_list|(
name|EGLNativeDisplayType
name|display
parameter_list|)
block|{
comment|// TODO(jmadill): handle this properly
if|if
condition|(
name|display
operator|==
name|EGL_DEFAULT_DISPLAY
condition|)
block|{
return|return
literal|true
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINDOWS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
if|if
condition|(
name|display
operator|==
name|EGL_SOFTWARE_DISPLAY_ANGLE
operator|||
name|display
operator|==
name|EGL_D3D11_ELSE_D3D9_DISPLAY_ANGLE
operator|||
name|display
operator|==
name|EGL_D3D11_ONLY_DISPLAY_ANGLE
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
operator|(
name|WindowFromDC
argument_list|(
name|display
argument_list|)
operator|!=
name|NULL
operator|)
return|;
else|#
directive|else
return|return
literal|true
return|;
endif|#
directive|endif
block|}
DECL|function|initVendorString
name|void
name|Display
operator|::
name|initVendorString
parameter_list|()
block|{
name|mVendorString
operator|=
name|mImplementation
operator|->
name|getVendorString
argument_list|()
expr_stmt|;
block|}
DECL|function|getExtensions
specifier|const
name|DisplayExtensions
modifier|&
name|Display
operator|::
name|getExtensions
parameter_list|()
specifier|const
block|{
return|return
name|mDisplayExtensions
return|;
block|}
DECL|function|getExtensionString
specifier|const
name|std
operator|::
name|string
modifier|&
name|Display
operator|::
name|getExtensionString
parameter_list|()
specifier|const
block|{
return|return
name|mDisplayExtensionString
return|;
block|}
DECL|function|getVendorString
specifier|const
name|std
operator|::
name|string
modifier|&
name|Display
operator|::
name|getVendorString
parameter_list|()
specifier|const
block|{
return|return
name|mVendorString
return|;
block|}
DECL|function|getDevice
name|Device
modifier|*
name|Display
operator|::
name|getDevice
parameter_list|()
specifier|const
block|{
return|return
name|mDevice
return|;
block|}
block|}
end_namespace
end_unit
