begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Sampler.cpp : Implements the Sampler class, which represents a GLES 3
end_comment
begin_comment
comment|// sampler object. Sampler objects store some state needed to sample textures.
end_comment
begin_include
include|#
directive|include
file|"libANGLE/Sampler.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/ImplFactory.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/renderer/SamplerImpl.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|Sampler
name|Sampler
operator|::
name|Sampler
parameter_list|(
name|rx
operator|::
name|ImplFactory
modifier|*
name|factory
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|RefCountObject
argument_list|(
name|id
argument_list|)
member_init_list|,
name|mImpl
argument_list|(
name|factory
operator|->
name|createSampler
argument_list|()
argument_list|)
member_init_list|,
name|mLabel
argument_list|()
member_init_list|,
name|mSamplerState
argument_list|()
block|{ }
DECL|function|~Sampler
name|Sampler
operator|::
name|~
name|Sampler
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mImpl
argument_list|)
expr_stmt|;
block|}
DECL|function|setLabel
name|void
name|Sampler
operator|::
name|setLabel
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|label
parameter_list|)
block|{
name|mLabel
operator|=
name|label
expr_stmt|;
block|}
DECL|function|getLabel
specifier|const
name|std
operator|::
name|string
modifier|&
name|Sampler
operator|::
name|getLabel
parameter_list|()
specifier|const
block|{
return|return
name|mLabel
return|;
block|}
DECL|function|setMinFilter
name|void
name|Sampler
operator|::
name|setMinFilter
parameter_list|(
name|GLenum
name|minFilter
parameter_list|)
block|{
name|mSamplerState
operator|.
name|minFilter
operator|=
name|minFilter
expr_stmt|;
block|}
DECL|function|getMinFilter
name|GLenum
name|Sampler
operator|::
name|getMinFilter
parameter_list|()
specifier|const
block|{
return|return
name|mSamplerState
operator|.
name|minFilter
return|;
block|}
DECL|function|setMagFilter
name|void
name|Sampler
operator|::
name|setMagFilter
parameter_list|(
name|GLenum
name|magFilter
parameter_list|)
block|{
name|mSamplerState
operator|.
name|magFilter
operator|=
name|magFilter
expr_stmt|;
block|}
DECL|function|getMagFilter
name|GLenum
name|Sampler
operator|::
name|getMagFilter
parameter_list|()
specifier|const
block|{
return|return
name|mSamplerState
operator|.
name|magFilter
return|;
block|}
DECL|function|setWrapS
name|void
name|Sampler
operator|::
name|setWrapS
parameter_list|(
name|GLenum
name|wrapS
parameter_list|)
block|{
name|mSamplerState
operator|.
name|wrapS
operator|=
name|wrapS
expr_stmt|;
block|}
DECL|function|getWrapS
name|GLenum
name|Sampler
operator|::
name|getWrapS
parameter_list|()
specifier|const
block|{
return|return
name|mSamplerState
operator|.
name|wrapS
return|;
block|}
DECL|function|setWrapT
name|void
name|Sampler
operator|::
name|setWrapT
parameter_list|(
name|GLenum
name|wrapT
parameter_list|)
block|{
name|mSamplerState
operator|.
name|wrapT
operator|=
name|wrapT
expr_stmt|;
block|}
DECL|function|getWrapT
name|GLenum
name|Sampler
operator|::
name|getWrapT
parameter_list|()
specifier|const
block|{
return|return
name|mSamplerState
operator|.
name|wrapT
return|;
block|}
DECL|function|setWrapR
name|void
name|Sampler
operator|::
name|setWrapR
parameter_list|(
name|GLenum
name|wrapR
parameter_list|)
block|{
name|mSamplerState
operator|.
name|wrapR
operator|=
name|wrapR
expr_stmt|;
block|}
DECL|function|getWrapR
name|GLenum
name|Sampler
operator|::
name|getWrapR
parameter_list|()
specifier|const
block|{
return|return
name|mSamplerState
operator|.
name|wrapR
return|;
block|}
DECL|function|setMaxAnisotropy
name|void
name|Sampler
operator|::
name|setMaxAnisotropy
parameter_list|(
name|float
name|maxAnisotropy
parameter_list|)
block|{
name|mSamplerState
operator|.
name|maxAnisotropy
operator|=
name|maxAnisotropy
expr_stmt|;
block|}
DECL|function|getMaxAnisotropy
name|float
name|Sampler
operator|::
name|getMaxAnisotropy
parameter_list|()
specifier|const
block|{
return|return
name|mSamplerState
operator|.
name|maxAnisotropy
return|;
block|}
DECL|function|setMinLod
name|void
name|Sampler
operator|::
name|setMinLod
parameter_list|(
name|GLfloat
name|minLod
parameter_list|)
block|{
name|mSamplerState
operator|.
name|minLod
operator|=
name|minLod
expr_stmt|;
block|}
DECL|function|getMinLod
name|GLfloat
name|Sampler
operator|::
name|getMinLod
parameter_list|()
specifier|const
block|{
return|return
name|mSamplerState
operator|.
name|minLod
return|;
block|}
DECL|function|setMaxLod
name|void
name|Sampler
operator|::
name|setMaxLod
parameter_list|(
name|GLfloat
name|maxLod
parameter_list|)
block|{
name|mSamplerState
operator|.
name|maxLod
operator|=
name|maxLod
expr_stmt|;
block|}
DECL|function|getMaxLod
name|GLfloat
name|Sampler
operator|::
name|getMaxLod
parameter_list|()
specifier|const
block|{
return|return
name|mSamplerState
operator|.
name|maxLod
return|;
block|}
DECL|function|setCompareMode
name|void
name|Sampler
operator|::
name|setCompareMode
parameter_list|(
name|GLenum
name|compareMode
parameter_list|)
block|{
name|mSamplerState
operator|.
name|compareMode
operator|=
name|compareMode
expr_stmt|;
block|}
DECL|function|getCompareMode
name|GLenum
name|Sampler
operator|::
name|getCompareMode
parameter_list|()
specifier|const
block|{
return|return
name|mSamplerState
operator|.
name|compareMode
return|;
block|}
DECL|function|setCompareFunc
name|void
name|Sampler
operator|::
name|setCompareFunc
parameter_list|(
name|GLenum
name|compareFunc
parameter_list|)
block|{
name|mSamplerState
operator|.
name|compareFunc
operator|=
name|compareFunc
expr_stmt|;
block|}
DECL|function|getCompareFunc
name|GLenum
name|Sampler
operator|::
name|getCompareFunc
parameter_list|()
specifier|const
block|{
return|return
name|mSamplerState
operator|.
name|compareFunc
return|;
block|}
DECL|function|getSamplerState
specifier|const
name|SamplerState
modifier|&
name|Sampler
operator|::
name|getSamplerState
parameter_list|()
specifier|const
block|{
return|return
name|mSamplerState
return|;
block|}
DECL|function|getImplementation
specifier|const
name|rx
operator|::
name|SamplerImpl
modifier|*
name|Sampler
operator|::
name|getImplementation
parameter_list|()
specifier|const
block|{
return|return
name|mImpl
return|;
block|}
DECL|function|getImplementation
name|rx
operator|::
name|SamplerImpl
modifier|*
name|Sampler
operator|::
name|getImplementation
parameter_list|()
block|{
return|return
name|mImpl
return|;
block|}
block|}
end_namespace
end_unit
