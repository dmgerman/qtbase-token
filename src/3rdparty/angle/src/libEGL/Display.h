begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Display.h: Defines the egl::Display class, representing the abstract
end_comment
begin_comment
comment|// display on which graphics are drawn. Implements EGLDisplay.
end_comment
begin_comment
comment|// [EGL 1.4] section 2.1.2 page 3.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBEGL_DISPLAY_H_
end_ifndef
begin_define
DECL|macro|LIBEGL_DISPLAY_H_
define|#
directive|define
name|LIBEGL_DISPLAY_H_
end_define
begin_ifndef
ifndef|#
directive|ifndef
name|WIN32_LEAN_AND_MEAN
end_ifndef
begin_define
DECL|macro|WIN32_LEAN_AND_MEAN
define|#
directive|define
name|WIN32_LEAN_AND_MEAN
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_include
include|#
directive|include
file|<d3d9.h>
end_include
begin_include
include|#
directive|include
file|<set>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_include
include|#
directive|include
file|"libEGL/Config.h"
end_include
begin_include
include|#
directive|include
file|"libEGL/ShaderCache.h"
end_include
begin_include
include|#
directive|include
file|"libEGL/Surface.h"
end_include
begin_decl_stmt
DECL|variable|versionWindowsVista
specifier|const
name|int
name|versionWindowsVista
init|=
name|MAKEWORD
argument_list|(
literal|0x00
argument_list|,
literal|0x06
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|versionWindows7
specifier|const
name|int
name|versionWindows7
init|=
name|MAKEWORD
argument_list|(
literal|0x01
argument_list|,
literal|0x06
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Return the version of the operating system in a format suitable for ordering
end_comment
begin_comment
comment|// comparison.
end_comment
begin_function
DECL|function|getComparableOSVersion
specifier|inline
name|int
name|getComparableOSVersion
parameter_list|()
block|{
name|DWORD
name|version
init|=
name|GetVersion
argument_list|()
decl_stmt|;
name|int
name|majorVersion
init|=
name|LOBYTE
argument_list|(
name|LOWORD
argument_list|(
name|version
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|minorVersion
init|=
name|HIBYTE
argument_list|(
name|LOWORD
argument_list|(
name|version
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|MAKEWORD
argument_list|(
name|minorVersion
argument_list|,
name|majorVersion
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
name|namespace
name|egl
block|{
name|class
name|Display
block|{
name|public
label|:
operator|~
name|Display
argument_list|()
expr_stmt|;
name|bool
name|initialize
parameter_list|()
function_decl|;
name|void
name|terminate
parameter_list|()
function_decl|;
name|virtual
name|void
name|startScene
parameter_list|()
function_decl|;
name|virtual
name|void
name|endScene
parameter_list|()
function_decl|;
specifier|static
name|egl
operator|::
name|Display
operator|*
name|getDisplay
argument_list|(
argument|EGLNativeDisplayType displayId
argument_list|)
expr_stmt|;
name|bool
name|getConfigs
parameter_list|(
name|EGLConfig
modifier|*
name|configs
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attribList
parameter_list|,
name|EGLint
name|configSize
parameter_list|,
name|EGLint
modifier|*
name|numConfig
parameter_list|)
function_decl|;
name|bool
name|getConfigAttrib
parameter_list|(
name|EGLConfig
name|config
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
function_decl|;
name|EGLSurface
name|createWindowSurface
parameter_list|(
name|HWND
name|window
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attribList
parameter_list|)
function_decl|;
name|EGLSurface
name|createOffscreenSurface
parameter_list|(
name|EGLConfig
name|config
parameter_list|,
name|HANDLE
name|shareHandle
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attribList
parameter_list|)
function_decl|;
name|EGLContext
name|createContext
argument_list|(
name|EGLConfig
name|configHandle
argument_list|,
specifier|const
name|gl
operator|::
name|Context
operator|*
name|shareContext
argument_list|,
name|bool
name|notifyResets
argument_list|,
name|bool
name|robustAccess
argument_list|)
decl_stmt|;
name|void
name|destroySurface
argument_list|(
name|egl
operator|::
name|Surface
operator|*
name|surface
argument_list|)
decl_stmt|;
name|void
name|destroyContext
argument_list|(
name|gl
operator|::
name|Context
operator|*
name|context
argument_list|)
decl_stmt|;
name|bool
name|isInitialized
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isValidConfig
parameter_list|(
name|EGLConfig
name|config
parameter_list|)
function_decl|;
name|bool
name|isValidContext
argument_list|(
name|gl
operator|::
name|Context
operator|*
name|context
argument_list|)
decl_stmt|;
name|bool
name|isValidSurface
argument_list|(
name|egl
operator|::
name|Surface
operator|*
name|surface
argument_list|)
decl_stmt|;
name|bool
name|hasExistingWindowSurface
parameter_list|(
name|HWND
name|window
parameter_list|)
function_decl|;
name|EGLint
name|getMinSwapInterval
parameter_list|()
function_decl|;
name|EGLint
name|getMaxSwapInterval
parameter_list|()
function_decl|;
name|virtual
name|IDirect3DDevice9
modifier|*
name|getDevice
parameter_list|()
function_decl|;
name|virtual
name|D3DCAPS9
name|getDeviceCaps
parameter_list|()
function_decl|;
name|virtual
name|D3DADAPTER_IDENTIFIER9
modifier|*
name|getAdapterIdentifier
parameter_list|()
function_decl|;
name|virtual
name|bool
name|testDeviceLost
parameter_list|()
function_decl|;
name|virtual
name|bool
name|testDeviceResettable
parameter_list|()
function_decl|;
name|virtual
name|void
name|sync
parameter_list|(
name|bool
name|block
parameter_list|)
function_decl|;
name|virtual
name|IDirect3DQuery9
modifier|*
name|allocateEventQuery
parameter_list|()
function_decl|;
name|virtual
name|void
name|freeEventQuery
parameter_list|(
name|IDirect3DQuery9
modifier|*
name|query
parameter_list|)
function_decl|;
name|virtual
name|void
name|getMultiSampleSupport
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|,
name|bool
modifier|*
name|multiSampleArray
parameter_list|)
function_decl|;
name|virtual
name|bool
name|getDXT1TextureSupport
parameter_list|()
function_decl|;
name|virtual
name|bool
name|getDXT3TextureSupport
parameter_list|()
function_decl|;
name|virtual
name|bool
name|getDXT5TextureSupport
parameter_list|()
function_decl|;
name|virtual
name|bool
name|getEventQuerySupport
parameter_list|()
function_decl|;
name|virtual
name|bool
name|getFloat32TextureSupport
parameter_list|(
name|bool
modifier|*
name|filtering
parameter_list|,
name|bool
modifier|*
name|renderable
parameter_list|)
function_decl|;
name|virtual
name|bool
name|getFloat16TextureSupport
parameter_list|(
name|bool
modifier|*
name|filtering
parameter_list|,
name|bool
modifier|*
name|renderable
parameter_list|)
function_decl|;
name|virtual
name|bool
name|getLuminanceTextureSupport
parameter_list|()
function_decl|;
name|virtual
name|bool
name|getLuminanceAlphaTextureSupport
parameter_list|()
function_decl|;
name|virtual
name|bool
name|getVertexTextureSupport
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|getNonPower2TextureSupport
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|getDepthTextureSupport
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|getOcclusionQuerySupport
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|getInstancingSupport
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|float
name|getTextureFilterAnisotropySupport
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|D3DPOOL
name|getBufferPool
argument_list|(
name|DWORD
name|usage
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|D3DPOOL
name|getTexturePool
argument_list|(
name|DWORD
name|usage
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|notifyDeviceLost
parameter_list|()
function_decl|;
name|bool
name|isDeviceLost
parameter_list|()
function_decl|;
name|bool
name|isD3d9ExDevice
argument_list|()
specifier|const
block|{
return|return
name|mD3d9Ex
operator|!=
name|NULL
return|;
block|}
specifier|const
name|char
operator|*
name|getExtensionString
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|shareHandleSupported
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|IDirect3DVertexShader9
modifier|*
name|createVertexShader
parameter_list|(
specifier|const
name|DWORD
modifier|*
name|function
parameter_list|,
name|size_t
name|length
parameter_list|)
function_decl|;
name|virtual
name|IDirect3DPixelShader9
modifier|*
name|createPixelShader
parameter_list|(
specifier|const
name|DWORD
modifier|*
name|function
parameter_list|,
name|size_t
name|length
parameter_list|)
function_decl|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Display
argument_list|)
expr_stmt|;
name|Display
argument_list|(
argument|EGLNativeDisplayType displayId
argument_list|,
argument|HDC deviceContext
argument_list|,
argument|bool software
argument_list|)
empty_stmt|;
name|D3DPRESENT_PARAMETERS
name|getDefaultPresentParameters
parameter_list|()
function_decl|;
name|bool
name|restoreLostDevice
parameter_list|()
function_decl|;
name|EGLNativeDisplayType
name|mDisplayId
decl_stmt|;
specifier|const
name|HDC
name|mDc
decl_stmt|;
name|HMODULE
name|mD3d9Module
decl_stmt|;
name|UINT
name|mAdapter
decl_stmt|;
name|D3DDEVTYPE
name|mDeviceType
decl_stmt|;
name|IDirect3D9
modifier|*
name|mD3d9
decl_stmt|;
comment|// Always valid after successful initialization.
name|IDirect3D9Ex
modifier|*
name|mD3d9Ex
decl_stmt|;
comment|// Might be null if D3D9Ex is not supported.
name|IDirect3DDevice9
modifier|*
name|mDevice
decl_stmt|;
name|IDirect3DDevice9Ex
modifier|*
name|mDeviceEx
decl_stmt|;
comment|// Might be null if D3D9Ex is not supported.
comment|// A pool of event queries that are currently unused.
name|std
operator|::
name|vector
operator|<
name|IDirect3DQuery9
operator|*
operator|>
name|mEventQueryPool
expr_stmt|;
name|VertexShaderCache
name|mVertexShaderCache
decl_stmt|;
name|PixelShaderCache
name|mPixelShaderCache
decl_stmt|;
name|D3DCAPS9
name|mDeviceCaps
decl_stmt|;
name|D3DADAPTER_IDENTIFIER9
name|mAdapterIdentifier
decl_stmt|;
name|HWND
name|mDeviceWindow
decl_stmt|;
name|bool
name|mSceneStarted
decl_stmt|;
name|EGLint
name|mMaxSwapInterval
decl_stmt|;
name|EGLint
name|mMinSwapInterval
decl_stmt|;
name|bool
name|mSoftwareDevice
decl_stmt|;
name|bool
name|mSupportsNonPower2Textures
decl_stmt|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|Surface
operator|*
operator|>
name|SurfaceSet
expr_stmt|;
name|SurfaceSet
name|mSurfaceSet
decl_stmt|;
name|ConfigSet
name|mConfigSet
decl_stmt|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|gl
operator|::
name|Context
operator|*
operator|>
name|ContextSet
expr_stmt|;
name|ContextSet
name|mContextSet
decl_stmt|;
name|bool
name|mDeviceLost
decl_stmt|;
name|bool
name|createDevice
parameter_list|()
function_decl|;
name|void
name|initializeDevice
parameter_list|()
function_decl|;
name|bool
name|resetDevice
parameter_list|()
function_decl|;
name|void
name|initExtensionString
parameter_list|()
function_decl|;
name|std
operator|::
name|string
name|mExtensionString
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBEGL_DISPLAY_H_
end_comment
end_unit
