begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"libEGL/AttributeMap.h"
end_include
begin_namespace
DECL|namespace|egl
namespace|namespace
name|egl
block|{
DECL|function|AttributeMap
name|AttributeMap
operator|::
name|AttributeMap
parameter_list|()
block|{ }
DECL|function|AttributeMap
name|AttributeMap
operator|::
name|AttributeMap
parameter_list|(
specifier|const
name|EGLint
modifier|*
name|attributes
parameter_list|)
block|{
for|for
control|(
specifier|const
name|EGLint
modifier|*
name|curAttrib
init|=
name|attributes
init|;
name|curAttrib
index|[
literal|0
index|]
operator|!=
name|EGL_NONE
condition|;
name|curAttrib
operator|+=
literal|2
control|)
block|{
name|insert
argument_list|(
name|curAttrib
index|[
literal|0
index|]
argument_list|,
name|curAttrib
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|insert
name|void
name|AttributeMap
operator|::
name|insert
parameter_list|(
name|EGLint
name|key
parameter_list|,
name|EGLint
name|value
parameter_list|)
block|{
name|mAttributes
index|[
name|key
index|]
operator|=
name|value
expr_stmt|;
block|}
DECL|function|contains
name|bool
name|AttributeMap
operator|::
name|contains
parameter_list|(
name|EGLint
name|key
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|mAttributes
operator|.
name|find
argument_list|(
name|key
argument_list|)
operator|!=
name|mAttributes
operator|.
name|end
argument_list|()
operator|)
return|;
block|}
DECL|function|get
name|EGLint
name|AttributeMap
operator|::
name|get
parameter_list|(
name|EGLint
name|key
parameter_list|,
name|EGLint
name|defaultValue
parameter_list|)
specifier|const
block|{
name|std
operator|::
name|map
argument_list|<
name|EGLint
argument_list|,
name|EGLint
argument_list|>
operator|::
name|const_iterator
name|iter
init|=
name|mAttributes
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|mAttributes
operator|.
name|find
argument_list|(
name|key
argument_list|)
operator|!=
name|mAttributes
operator|.
name|end
argument_list|()
operator|)
condition|?
name|iter
operator|->
name|second
else|:
name|defaultValue
return|;
block|}
block|}
end_namespace
end_unit
