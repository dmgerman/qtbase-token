begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Surface.cpp: Implements the egl::Surface class, representing a drawing surface
end_comment
begin_comment
comment|// such as the client area of a window, including any back buffers.
end_comment
begin_comment
comment|// Implements EGLSurface and related functionality. [EGL 1.4] section 2.2 page 3.
end_comment
begin_include
include|#
directive|include
file|<tchar.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|"libEGL/Surface.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/SwapChain.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libEGL/main.h"
end_include
begin_include
include|#
directive|include
file|"libEGL/Display.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
end_if
begin_include
include|#
directive|include
file|"wrl.h"
end_include
begin_include
include|#
directive|include
file|"windows.graphics.display.h"
end_include
begin_include
include|#
directive|include
file|"windows.ui.core.h"
end_include
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Graphics
operator|::
name|Display
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|Foundation
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|ABI
operator|::
name|Windows
operator|::
name|UI
operator|::
name|Core
namespace|;
end_using
begin_using
using|using
namespace|namespace
name|Microsoft
operator|::
name|WRL
namespace|;
end_using
begin_endif
endif|#
directive|endif
end_endif
begin_namespace
DECL|namespace|egl
namespace|namespace
name|egl
block|{
DECL|function|Surface
name|Surface
operator|::
name|Surface
parameter_list|(
name|Display
modifier|*
name|display
parameter_list|,
specifier|const
name|Config
modifier|*
name|config
parameter_list|,
name|EGLNativeWindowType
name|window
parameter_list|,
name|EGLint
name|fixedSize
parameter_list|,
name|EGLint
name|width
parameter_list|,
name|EGLint
name|height
parameter_list|,
name|EGLint
name|postSubBufferSupported
parameter_list|)
member_init_list|:
name|mDisplay
argument_list|(
name|display
argument_list|)
member_init_list|,
name|mConfig
argument_list|(
name|config
argument_list|)
member_init_list|,
name|mWindow
argument_list|(
name|window
argument_list|)
member_init_list|,
name|mPostSubBufferSupported
argument_list|(
name|postSubBufferSupported
argument_list|)
block|{
name|mRenderer
operator|=
name|mDisplay
operator|->
name|getRenderer
argument_list|()
expr_stmt|;
name|mSwapChain
operator|=
name|NULL
expr_stmt|;
name|mShareHandle
operator|=
name|NULL
expr_stmt|;
name|mTexture
operator|=
name|NULL
expr_stmt|;
name|mTextureFormat
operator|=
name|EGL_NO_TEXTURE
expr_stmt|;
name|mTextureTarget
operator|=
name|EGL_NO_TEXTURE
expr_stmt|;
name|mPixelAspectRatio
operator|=
call|(
name|EGLint
call|)
argument_list|(
literal|1.0
operator|*
name|EGL_DISPLAY_SCALING
argument_list|)
expr_stmt|;
comment|// FIXME: Determine actual pixel aspect ratio
name|mRenderBuffer
operator|=
name|EGL_BACK_BUFFER
expr_stmt|;
name|mSwapBehavior
operator|=
name|EGL_BUFFER_PRESERVED
expr_stmt|;
name|mSwapInterval
operator|=
operator|-
literal|1
expr_stmt|;
name|mWidth
operator|=
name|width
expr_stmt|;
name|mHeight
operator|=
name|height
expr_stmt|;
name|setSwapInterval
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mFixedSize
operator|=
name|fixedSize
expr_stmt|;
name|mSwapFlags
operator|=
name|rx
operator|::
name|SWAP_NORMAL
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
if|if
condition|(
name|mWindow
condition|)
name|mWindow
operator|->
name|AddRef
argument_list|()
expr_stmt|;
name|mScaleFactor
operator|=
literal|1.0
expr_stmt|;
name|mSizeToken
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|mDpiToken
operator|.
name|value
operator|=
literal|0
expr_stmt|;
if|#
directive|if
name|WINAPI_FAMILY
operator|==
name|WINAPI_FAMILY_PHONE_APP
name|mOrientationToken
operator|.
name|value
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|subclassWindow
argument_list|()
expr_stmt|;
block|}
DECL|function|Surface
name|Surface
operator|::
name|Surface
parameter_list|(
name|Display
modifier|*
name|display
parameter_list|,
specifier|const
name|Config
modifier|*
name|config
parameter_list|,
name|HANDLE
name|shareHandle
parameter_list|,
name|EGLint
name|width
parameter_list|,
name|EGLint
name|height
parameter_list|,
name|EGLenum
name|textureFormat
parameter_list|,
name|EGLenum
name|textureType
parameter_list|)
member_init_list|:
name|mDisplay
argument_list|(
name|display
argument_list|)
member_init_list|,
name|mWindow
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mConfig
argument_list|(
name|config
argument_list|)
member_init_list|,
name|mShareHandle
argument_list|(
name|shareHandle
argument_list|)
member_init_list|,
name|mWidth
argument_list|(
name|width
argument_list|)
member_init_list|,
name|mHeight
argument_list|(
name|height
argument_list|)
member_init_list|,
name|mPostSubBufferSupported
argument_list|(
name|EGL_FALSE
argument_list|)
block|{
name|mRenderer
operator|=
name|mDisplay
operator|->
name|getRenderer
argument_list|()
expr_stmt|;
name|mSwapChain
operator|=
name|NULL
expr_stmt|;
name|mWindowSubclassed
operator|=
literal|false
expr_stmt|;
name|mTexture
operator|=
name|NULL
expr_stmt|;
name|mTextureFormat
operator|=
name|textureFormat
expr_stmt|;
name|mTextureTarget
operator|=
name|textureType
expr_stmt|;
name|mPixelAspectRatio
operator|=
call|(
name|EGLint
call|)
argument_list|(
literal|1.0
operator|*
name|EGL_DISPLAY_SCALING
argument_list|)
expr_stmt|;
comment|// FIXME: Determine actual pixel aspect ratio
name|mRenderBuffer
operator|=
name|EGL_BACK_BUFFER
expr_stmt|;
name|mSwapBehavior
operator|=
name|EGL_BUFFER_PRESERVED
expr_stmt|;
name|mSwapInterval
operator|=
operator|-
literal|1
expr_stmt|;
name|setSwapInterval
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// This constructor is for offscreen surfaces, which are always fixed-size.
name|mFixedSize
operator|=
name|EGL_TRUE
expr_stmt|;
name|mSwapFlags
operator|=
name|rx
operator|::
name|SWAP_NORMAL
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
name|mScaleFactor
operator|=
literal|1.0
expr_stmt|;
name|mSizeToken
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|mDpiToken
operator|.
name|value
operator|=
literal|0
expr_stmt|;
if|#
directive|if
name|WINAPI_FAMILY
operator|==
name|WINAPI_FAMILY_PHONE_APP
name|mOrientationToken
operator|.
name|value
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|}
DECL|function|~Surface
name|Surface
operator|::
name|~
name|Surface
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
if|if
condition|(
name|mSizeToken
operator|.
name|value
condition|)
block|{
name|ComPtr
argument_list|<
name|ICoreWindow
argument_list|>
name|coreWindow
decl_stmt|;
name|HRESULT
name|hr
init|=
name|mWindow
operator|->
name|QueryInterface
argument_list|(
name|coreWindow
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|coreWindow
operator|->
name|remove_SizeChanged
argument_list|(
name|mSizeToken
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mDpiToken
operator|.
name|value
condition|)
block|{
name|ComPtr
argument_list|<
name|IDisplayInformation
argument_list|>
name|displayInformation
decl_stmt|;
name|HRESULT
name|hr
init|=
name|mDisplay
operator|->
name|getDisplayId
argument_list|()
operator|->
name|QueryInterface
argument_list|(
name|displayInformation
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|displayInformation
operator|->
name|remove_DpiChanged
argument_list|(
name|mDpiToken
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|WINAPI_FAMILY
operator|==
name|WINAPI_FAMILY_PHONE_APP
if|if
condition|(
name|mOrientationToken
operator|.
name|value
condition|)
block|{
name|ComPtr
argument_list|<
name|IDisplayInformation
argument_list|>
name|displayInformation
decl_stmt|;
name|HRESULT
name|hr
init|=
name|mDisplay
operator|->
name|getDisplayId
argument_list|()
operator|->
name|QueryInterface
argument_list|(
name|displayInformation
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|displayInformation
operator|->
name|remove_OrientationChanged
argument_list|(
name|mOrientationToken
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
endif|#
directive|endif
name|unsubclassWindow
argument_list|()
expr_stmt|;
name|release
argument_list|()
expr_stmt|;
block|}
DECL|function|initialize
name|bool
name|Surface
operator|::
name|initialize
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
if|if
condition|(
operator|!
name|mFixedSize
condition|)
block|{
name|HRESULT
name|hr
decl_stmt|;
name|ComPtr
argument_list|<
name|IDisplayInformation
argument_list|>
name|displayInformation
decl_stmt|;
name|hr
operator|=
name|mDisplay
operator|->
name|getDisplayId
argument_list|()
operator|->
name|QueryInterface
argument_list|(
name|displayInformation
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|onDpiChanged
argument_list|(
name|displayInformation
operator|.
name|Get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hr
operator|=
name|displayInformation
operator|->
name|add_DpiChanged
argument_list|(
name|Callback
argument_list|<
name|ITypedEventHandler
argument_list|<
name|DisplayInformation
operator|*
argument_list|,
name|IInspectable
operator|*
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|Surface
operator|::
name|onDpiChanged
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|mDpiToken
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|WINAPI_FAMILY
operator|==
name|WINAPI_FAMILY_PHONE_APP
name|onOrientationChanged
argument_list|(
name|displayInformation
operator|.
name|Get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hr
operator|=
name|displayInformation
operator|->
name|add_OrientationChanged
argument_list|(
name|Callback
argument_list|<
name|ITypedEventHandler
argument_list|<
name|DisplayInformation
operator|*
argument_list|,
name|IInspectable
operator|*
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|Surface
operator|::
name|onOrientationChanged
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|mOrientationToken
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ComPtr
argument_list|<
name|ICoreWindow
argument_list|>
name|coreWindow
decl_stmt|;
name|hr
operator|=
name|mWindow
operator|->
name|QueryInterface
argument_list|(
name|coreWindow
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|Rect
name|rect
decl_stmt|;
name|hr
operator|=
name|coreWindow
operator|->
name|get_Bounds
argument_list|(
operator|&
name|rect
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|mWidth
operator|=
name|rect
operator|.
name|Width
operator|*
name|mScaleFactor
expr_stmt|;
name|mHeight
operator|=
name|rect
operator|.
name|Height
operator|*
name|mScaleFactor
expr_stmt|;
name|hr
operator|=
name|coreWindow
operator|->
name|add_SizeChanged
argument_list|(
name|Callback
argument_list|<
name|ITypedEventHandler
argument_list|<
name|CoreWindow
operator|*
argument_list|,
name|WindowSizeChangedEventArgs
operator|*
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|,
operator|&
name|Surface
operator|::
name|onSizeChanged
argument_list|)
operator|.
name|Get
argument_list|()
argument_list|,
operator|&
name|mSizeToken
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
operator|!
name|resetSwapChain
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
DECL|function|release
name|void
name|Surface
operator|::
name|release
parameter_list|()
block|{
operator|delete
name|mSwapChain
expr_stmt|;
name|mSwapChain
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
name|mTexture
condition|)
block|{
name|mTexture
operator|->
name|releaseTexImage
argument_list|()
expr_stmt|;
name|mTexture
operator|=
name|NULL
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
if|if
condition|(
name|mWindow
condition|)
name|mWindow
operator|->
name|Release
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|resetSwapChain
name|bool
name|Surface
operator|::
name|resetSwapChain
parameter_list|()
block|{
name|ASSERT
argument_list|(
operator|!
name|mSwapChain
argument_list|)
expr_stmt|;
name|int
name|width
decl_stmt|;
name|int
name|height
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
if|if
condition|(
operator|!
name|mFixedSize
condition|)
block|{
name|RECT
name|windowRect
decl_stmt|;
if|if
condition|(
operator|!
name|GetClientRect
argument_list|(
name|getWindowHandle
argument_list|()
argument_list|,
operator|&
name|windowRect
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ERR
argument_list|(
literal|"Could not retrieve the window dimensions"
argument_list|)
expr_stmt|;
return|return
name|error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|width
operator|=
name|windowRect
operator|.
name|right
operator|-
name|windowRect
operator|.
name|left
expr_stmt|;
name|height
operator|=
name|windowRect
operator|.
name|bottom
operator|-
name|windowRect
operator|.
name|top
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
comment|// non-window surface - size is determined at creation
name|width
operator|=
name|mWidth
expr_stmt|;
name|height
operator|=
name|mHeight
expr_stmt|;
block|}
name|mSwapChain
operator|=
name|mRenderer
operator|->
name|createSwapChain
argument_list|(
name|mWindow
argument_list|,
name|mShareHandle
argument_list|,
name|mConfig
operator|->
name|mRenderTargetFormat
argument_list|,
name|mConfig
operator|->
name|mDepthStencilFormat
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mSwapChain
condition|)
block|{
return|return
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|resetSwapChain
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
operator|delete
name|mSwapChain
expr_stmt|;
name|mSwapChain
operator|=
name|NULL
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|resizeSwapChain
name|bool
name|Surface
operator|::
name|resizeSwapChain
parameter_list|(
name|int
name|backbufferWidth
parameter_list|,
name|int
name|backbufferHeight
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|backbufferWidth
operator|>=
literal|0
operator|&&
name|backbufferHeight
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|mSwapChain
argument_list|)
expr_stmt|;
name|EGLint
name|status
init|=
name|mSwapChain
operator|->
name|resize
argument_list|(
name|std
operator|::
name|max
argument_list|(
literal|1
argument_list|,
name|backbufferWidth
argument_list|)
argument_list|,
name|std
operator|::
name|max
argument_list|(
literal|1
argument_list|,
name|backbufferHeight
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|EGL_CONTEXT_LOST
condition|)
block|{
name|mDisplay
operator|->
name|notifyDeviceLost
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|status
operator|!=
name|EGL_SUCCESS
condition|)
block|{
return|return
name|error
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|mWidth
operator|=
name|backbufferWidth
expr_stmt|;
name|mHeight
operator|=
name|backbufferHeight
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|resetSwapChain
name|bool
name|Surface
operator|::
name|resetSwapChain
parameter_list|(
name|int
name|backbufferWidth
parameter_list|,
name|int
name|backbufferHeight
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|backbufferWidth
operator|>=
literal|0
operator|&&
name|backbufferHeight
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|mSwapChain
argument_list|)
expr_stmt|;
name|EGLint
name|status
init|=
name|mSwapChain
operator|->
name|reset
argument_list|(
name|std
operator|::
name|max
argument_list|(
literal|1
argument_list|,
name|backbufferWidth
argument_list|)
argument_list|,
name|std
operator|::
name|max
argument_list|(
literal|1
argument_list|,
name|backbufferHeight
argument_list|)
argument_list|,
name|mSwapInterval
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|EGL_CONTEXT_LOST
condition|)
block|{
name|mRenderer
operator|->
name|notifyDeviceLost
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|status
operator|!=
name|EGL_SUCCESS
condition|)
block|{
return|return
name|error
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|mWidth
operator|=
name|backbufferWidth
expr_stmt|;
name|mHeight
operator|=
name|backbufferHeight
expr_stmt|;
name|mSwapIntervalDirty
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|swapRect
name|bool
name|Surface
operator|::
name|swapRect
parameter_list|(
name|EGLint
name|x
parameter_list|,
name|EGLint
name|y
parameter_list|,
name|EGLint
name|width
parameter_list|,
name|EGLint
name|height
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mSwapChain
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|x
operator|+
name|width
operator|>
name|mWidth
condition|)
block|{
name|width
operator|=
name|mWidth
operator|-
name|x
expr_stmt|;
block|}
if|if
condition|(
name|y
operator|+
name|height
operator|>
name|mHeight
condition|)
block|{
name|height
operator|=
name|mHeight
operator|-
name|y
expr_stmt|;
block|}
if|if
condition|(
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|EGLint
name|status
init|=
name|mSwapChain
operator|->
name|swapRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|mSwapFlags
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|EGL_CONTEXT_LOST
condition|)
block|{
name|mRenderer
operator|->
name|notifyDeviceLost
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|status
operator|!=
name|EGL_SUCCESS
condition|)
block|{
return|return
name|error
argument_list|(
name|status
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|checkForOutOfDateSwapChain
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|getWindowHandle
name|EGLNativeWindowType
name|Surface
operator|::
name|getWindowHandle
parameter_list|()
block|{
return|return
name|mWindow
return|;
block|}
DECL|macro|kSurfaceProperty
define|#
directive|define
name|kSurfaceProperty
value|_TEXT("Egl::SurfaceOwner")
DECL|macro|kParentWndProc
define|#
directive|define
name|kParentWndProc
value|_TEXT("Egl::SurfaceParentWndProc")
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
DECL|function|SurfaceWindowProc
specifier|static
name|LRESULT
name|CALLBACK
name|SurfaceWindowProc
parameter_list|(
name|HWND
name|hwnd
parameter_list|,
name|UINT
name|message
parameter_list|,
name|WPARAM
name|wparam
parameter_list|,
name|LPARAM
name|lparam
parameter_list|)
block|{
if|if
condition|(
name|message
operator|==
name|WM_SIZE
condition|)
block|{
name|Surface
modifier|*
name|surf
init|=
cast|reinterpret_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|GetProp
argument_list|(
name|hwnd
argument_list|,
name|kSurfaceProperty
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|surf
condition|)
block|{
name|surf
operator|->
name|checkForOutOfDateSwapChain
argument_list|()
expr_stmt|;
block|}
block|}
name|WNDPROC
name|prevWndFunc
init|=
cast|reinterpret_cast
argument_list|<
name|WNDPROC
argument_list|>
argument_list|(
name|GetProp
argument_list|(
name|hwnd
argument_list|,
name|kParentWndProc
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|CallWindowProc
argument_list|(
name|prevWndFunc
argument_list|,
name|hwnd
argument_list|,
name|message
argument_list|,
name|wparam
argument_list|,
name|lparam
argument_list|)
return|;
block|}
endif|#
directive|endif
DECL|function|subclassWindow
name|void
name|Surface
operator|::
name|subclassWindow
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
if|if
condition|(
operator|!
name|mWindow
condition|)
block|{
return|return;
block|}
name|DWORD
name|processId
decl_stmt|;
name|DWORD
name|threadId
init|=
name|GetWindowThreadProcessId
argument_list|(
name|mWindow
argument_list|,
operator|&
name|processId
argument_list|)
decl_stmt|;
if|if
condition|(
name|processId
operator|!=
name|GetCurrentProcessId
argument_list|()
operator|||
name|threadId
operator|!=
name|GetCurrentThreadId
argument_list|()
condition|)
block|{
return|return;
block|}
name|SetLastError
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|LONG_PTR
name|oldWndProc
init|=
name|SetWindowLongPtr
argument_list|(
name|mWindow
argument_list|,
name|GWLP_WNDPROC
argument_list|,
cast|reinterpret_cast
argument_list|<
name|LONG_PTR
argument_list|>
argument_list|(
name|SurfaceWindowProc
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldWndProc
operator|==
literal|0
operator|&&
name|GetLastError
argument_list|()
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
name|mWindowSubclassed
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|SetProp
argument_list|(
name|mWindow
argument_list|,
name|kSurfaceProperty
argument_list|,
cast|reinterpret_cast
argument_list|<
name|HANDLE
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|SetProp
argument_list|(
name|mWindow
argument_list|,
name|kParentWndProc
argument_list|,
cast|reinterpret_cast
argument_list|<
name|HANDLE
argument_list|>
argument_list|(
name|oldWndProc
argument_list|)
argument_list|)
expr_stmt|;
name|mWindowSubclassed
operator|=
literal|true
expr_stmt|;
else|#
directive|else
name|mWindowSubclassed
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|unsubclassWindow
name|void
name|Surface
operator|::
name|unsubclassWindow
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
if|if
condition|(
operator|!
name|mWindowSubclassed
condition|)
block|{
return|return;
block|}
comment|// un-subclass
name|LONG_PTR
name|parentWndFunc
init|=
cast|reinterpret_cast
argument_list|<
name|LONG_PTR
argument_list|>
argument_list|(
name|GetProp
argument_list|(
name|mWindow
argument_list|,
name|kParentWndProc
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check the windowproc is still SurfaceWindowProc.
comment|// If this assert fails, then it is likely the application has subclassed the
comment|// hwnd as well and did not unsubclass before destroying its EGL context. The
comment|// application should be modified to either subclass before initializing the
comment|// EGL context, or to unsubclass before destroying the EGL context.
if|if
condition|(
name|parentWndFunc
condition|)
block|{
name|LONG_PTR
name|prevWndFunc
init|=
name|SetWindowLongPtr
argument_list|(
name|mWindow
argument_list|,
name|GWLP_WNDPROC
argument_list|,
name|parentWndFunc
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|prevWndFunc
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|prevWndFunc
operator|==
cast|reinterpret_cast
argument_list|<
name|LONG_PTR
argument_list|>
argument_list|(
name|SurfaceWindowProc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RemoveProp
argument_list|(
name|mWindow
argument_list|,
name|kSurfaceProperty
argument_list|)
expr_stmt|;
name|RemoveProp
argument_list|(
name|mWindow
argument_list|,
name|kParentWndProc
argument_list|)
expr_stmt|;
name|mWindowSubclassed
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|checkForOutOfDateSwapChain
name|bool
name|Surface
operator|::
name|checkForOutOfDateSwapChain
parameter_list|()
block|{
name|int
name|clientWidth
init|=
name|getWidth
argument_list|()
decl_stmt|;
name|int
name|clientHeight
init|=
name|getHeight
argument_list|()
decl_stmt|;
name|bool
name|sizeDirty
init|=
literal|false
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
if|if
condition|(
operator|!
name|mFixedSize
operator|&&
operator|!
name|IsIconic
argument_list|(
name|getWindowHandle
argument_list|()
argument_list|)
condition|)
block|{
name|RECT
name|client
decl_stmt|;
comment|// The window is automatically resized to 150x22 when it's minimized, but the swapchain shouldn't be resized
comment|// because that's not a useful size to render to.
if|if
condition|(
operator|!
name|GetClientRect
argument_list|(
name|getWindowHandle
argument_list|()
argument_list|,
operator|&
name|client
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Grow the buffer now, if the window has grown. We need to grow now to avoid losing information.
name|clientWidth
operator|=
name|client
operator|.
name|right
operator|-
name|client
operator|.
name|left
expr_stmt|;
name|clientHeight
operator|=
name|client
operator|.
name|bottom
operator|-
name|client
operator|.
name|top
expr_stmt|;
name|sizeDirty
operator|=
name|clientWidth
operator|!=
name|getWidth
argument_list|()
operator|||
name|clientHeight
operator|!=
name|getHeight
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|bool
name|wasDirty
init|=
operator|(
name|mSwapIntervalDirty
operator|||
name|sizeDirty
operator|)
decl_stmt|;
if|if
condition|(
name|mSwapIntervalDirty
condition|)
block|{
name|resetSwapChain
argument_list|(
name|clientWidth
argument_list|,
name|clientHeight
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sizeDirty
condition|)
block|{
name|resizeSwapChain
argument_list|(
name|clientWidth
argument_list|,
name|clientHeight
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wasDirty
condition|)
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|egl
operator|::
name|Surface
operator|*
argument_list|>
argument_list|(
name|getCurrentDrawSurface
argument_list|()
argument_list|)
operator|==
name|this
condition|)
block|{
name|glMakeCurrent
argument_list|(
name|glGetCurrentContext
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|getCurrentDisplay
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|swap
name|bool
name|Surface
operator|::
name|swap
parameter_list|()
block|{
return|return
name|swapRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|mWidth
argument_list|,
name|mHeight
argument_list|)
return|;
block|}
DECL|function|postSubBuffer
name|bool
name|Surface
operator|::
name|postSubBuffer
parameter_list|(
name|EGLint
name|x
parameter_list|,
name|EGLint
name|y
parameter_list|,
name|EGLint
name|width
parameter_list|,
name|EGLint
name|height
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mPostSubBufferSupported
condition|)
block|{
comment|// Spec is not clear about how this should be handled.
return|return
literal|true
return|;
block|}
return|return
name|swapRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
DECL|function|isPostSubBufferSupported
name|EGLint
name|Surface
operator|::
name|isPostSubBufferSupported
parameter_list|()
specifier|const
block|{
return|return
name|mPostSubBufferSupported
return|;
block|}
DECL|function|getSwapChain
name|rx
operator|::
name|SwapChain
modifier|*
name|Surface
operator|::
name|getSwapChain
parameter_list|()
specifier|const
block|{
return|return
name|mSwapChain
return|;
block|}
DECL|function|setSwapInterval
name|void
name|Surface
operator|::
name|setSwapInterval
parameter_list|(
name|EGLint
name|interval
parameter_list|)
block|{
if|if
condition|(
name|mSwapInterval
operator|==
name|interval
condition|)
block|{
return|return;
block|}
name|mSwapInterval
operator|=
name|interval
expr_stmt|;
name|mSwapInterval
operator|=
name|std
operator|::
name|max
argument_list|(
name|mSwapInterval
argument_list|,
name|mRenderer
operator|->
name|getMinSwapInterval
argument_list|()
argument_list|)
expr_stmt|;
name|mSwapInterval
operator|=
name|std
operator|::
name|min
argument_list|(
name|mSwapInterval
argument_list|,
name|mRenderer
operator|->
name|getMaxSwapInterval
argument_list|()
argument_list|)
expr_stmt|;
name|mSwapIntervalDirty
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|getConfigID
name|EGLint
name|Surface
operator|::
name|getConfigID
parameter_list|()
specifier|const
block|{
return|return
name|mConfig
operator|->
name|mConfigID
return|;
block|}
DECL|function|getWidth
name|EGLint
name|Surface
operator|::
name|getWidth
parameter_list|()
specifier|const
block|{
return|return
name|mWidth
return|;
block|}
DECL|function|getHeight
name|EGLint
name|Surface
operator|::
name|getHeight
parameter_list|()
specifier|const
block|{
return|return
name|mHeight
return|;
block|}
DECL|function|getPixelAspectRatio
name|EGLint
name|Surface
operator|::
name|getPixelAspectRatio
parameter_list|()
specifier|const
block|{
return|return
name|mPixelAspectRatio
return|;
block|}
DECL|function|getRenderBuffer
name|EGLenum
name|Surface
operator|::
name|getRenderBuffer
parameter_list|()
specifier|const
block|{
return|return
name|mRenderBuffer
return|;
block|}
DECL|function|getSwapBehavior
name|EGLenum
name|Surface
operator|::
name|getSwapBehavior
parameter_list|()
specifier|const
block|{
return|return
name|mSwapBehavior
return|;
block|}
DECL|function|getTextureFormat
name|EGLenum
name|Surface
operator|::
name|getTextureFormat
parameter_list|()
specifier|const
block|{
return|return
name|mTextureFormat
return|;
block|}
DECL|function|getTextureTarget
name|EGLenum
name|Surface
operator|::
name|getTextureTarget
parameter_list|()
specifier|const
block|{
return|return
name|mTextureTarget
return|;
block|}
DECL|function|setBoundTexture
name|void
name|Surface
operator|::
name|setBoundTexture
parameter_list|(
name|gl
operator|::
name|Texture2D
modifier|*
name|texture
parameter_list|)
block|{
name|mTexture
operator|=
name|texture
expr_stmt|;
block|}
DECL|function|getBoundTexture
name|gl
operator|::
name|Texture2D
modifier|*
name|Surface
operator|::
name|getBoundTexture
parameter_list|()
specifier|const
block|{
return|return
name|mTexture
return|;
block|}
DECL|function|isFixedSize
name|EGLint
name|Surface
operator|::
name|isFixedSize
parameter_list|()
specifier|const
block|{
return|return
name|mFixedSize
return|;
block|}
DECL|function|getFormat
name|EGLenum
name|Surface
operator|::
name|getFormat
parameter_list|()
specifier|const
block|{
return|return
name|mConfig
operator|->
name|mRenderTargetFormat
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
DECL|function|onSizeChanged
name|HRESULT
name|Surface
operator|::
name|onSizeChanged
parameter_list|(
name|ICoreWindow
modifier|*
parameter_list|,
name|IWindowSizeChangedEventArgs
modifier|*
name|args
parameter_list|)
block|{
name|HRESULT
name|hr
decl_stmt|;
name|Size
name|size
decl_stmt|;
name|hr
operator|=
name|args
operator|->
name|get_Size
argument_list|(
operator|&
name|size
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|resizeSwapChain
argument_list|(
name|std
operator|::
name|floor
argument_list|(
name|size
operator|.
name|Width
operator|*
name|mScaleFactor
operator|+
literal|0.5
argument_list|)
argument_list|,
name|std
operator|::
name|floor
argument_list|(
name|size
operator|.
name|Height
operator|*
name|mScaleFactor
operator|+
literal|0.5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
cast|static_cast
argument_list|<
name|egl
operator|::
name|Surface
operator|*
argument_list|>
argument_list|(
name|getCurrentDrawSurface
argument_list|()
argument_list|)
operator|==
name|this
condition|)
block|{
name|glMakeCurrent
argument_list|(
name|glGetCurrentContext
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|getCurrentDisplay
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|S_OK
return|;
block|}
DECL|function|onDpiChanged
name|HRESULT
name|Surface
operator|::
name|onDpiChanged
parameter_list|(
name|IDisplayInformation
modifier|*
name|displayInformation
parameter_list|,
name|IInspectable
modifier|*
parameter_list|)
block|{
name|HRESULT
name|hr
decl_stmt|;
if|#
directive|if
name|WINAPI_FAMILY
operator|==
name|WINAPI_FAMILY_PHONE_APP
name|ComPtr
argument_list|<
name|IDisplayInformation2
argument_list|>
name|displayInformation2
decl_stmt|;
name|hr
operator|=
name|displayInformation
operator|->
name|QueryInterface
argument_list|(
name|displayInformation2
operator|.
name|GetAddressOf
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|hr
operator|=
name|displayInformation2
operator|->
name|get_RawPixelsPerViewPixel
argument_list|(
operator|&
name|mScaleFactor
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|ResolutionScale
name|resolutionScale
decl_stmt|;
name|hr
operator|=
name|displayInformation
operator|->
name|get_ResolutionScale
argument_list|(
operator|&
name|resolutionScale
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|mScaleFactor
operator|=
name|double
argument_list|(
name|resolutionScale
argument_list|)
operator|/
literal|100.0
expr_stmt|;
endif|#
directive|endif
return|return
name|S_OK
return|;
block|}
if|#
directive|if
name|WINAPI_FAMILY
operator|==
name|WINAPI_FAMILY_PHONE_APP
DECL|function|onOrientationChanged
name|HRESULT
name|Surface
operator|::
name|onOrientationChanged
parameter_list|(
name|IDisplayInformation
modifier|*
name|displayInformation
parameter_list|,
name|IInspectable
modifier|*
parameter_list|)
block|{
name|HRESULT
name|hr
decl_stmt|;
name|DisplayOrientations
name|orientation
decl_stmt|;
name|hr
operator|=
name|displayInformation
operator|->
name|get_CurrentOrientation
argument_list|(
operator|&
name|orientation
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|orientation
condition|)
block|{
default|default:
case|case
name|DisplayOrientations_Portrait
case|:
name|mSwapFlags
operator|=
name|rx
operator|::
name|SWAP_NORMAL
expr_stmt|;
break|break;
case|case
name|DisplayOrientations_Landscape
case|:
name|mSwapFlags
operator|=
name|rx
operator|::
name|SWAP_ROTATE_90
expr_stmt|;
break|break;
case|case
name|DisplayOrientations_LandscapeFlipped
case|:
name|mSwapFlags
operator|=
name|rx
operator|::
name|SWAP_ROTATE_270
expr_stmt|;
break|break;
case|case
name|DisplayOrientations_PortraitFlipped
case|:
name|mSwapFlags
operator|=
name|rx
operator|::
name|SWAP_ROTATE_180
expr_stmt|;
break|break;
block|}
return|return
name|S_OK
return|;
block|}
endif|#
directive|endif
endif|#
directive|endif
block|}
end_namespace
end_unit
