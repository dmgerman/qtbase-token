begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// libEGL.cpp: Implements the exported EGL functions.
end_comment
begin_include
include|#
directive|include
file|<exception>
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"common/version.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/SwapChain.h"
end_include
begin_include
include|#
directive|include
file|"libEGL/main.h"
end_include
begin_include
include|#
directive|include
file|"libEGL/Display.h"
end_include
begin_include
include|#
directive|include
file|"libEGL/Surface.h"
end_include
begin_function
DECL|function|validateDisplay
name|bool
name|validateDisplay
parameter_list|(
name|egl
operator|::
name|Display
modifier|*
name|display
parameter_list|)
block|{
if|if
condition|(
name|display
operator|==
name|EGL_NO_DISPLAY
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_DISPLAY
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|display
operator|->
name|isInitialized
argument_list|()
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_NOT_INITIALIZED
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|validateConfig
name|bool
name|validateConfig
parameter_list|(
name|egl
operator|::
name|Display
modifier|*
name|display
parameter_list|,
name|EGLConfig
name|config
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validateDisplay
argument_list|(
name|display
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|display
operator|->
name|isValidConfig
argument_list|(
name|config
argument_list|)
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_CONFIG
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|validateContext
name|bool
name|validateContext
parameter_list|(
name|egl
operator|::
name|Display
modifier|*
name|display
parameter_list|,
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validateDisplay
argument_list|(
name|display
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|display
operator|->
name|isValidContext
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_CONTEXT
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|validateSurface
name|bool
name|validateSurface
parameter_list|(
name|egl
operator|::
name|Display
modifier|*
name|display
parameter_list|,
name|egl
operator|::
name|Surface
modifier|*
name|surface
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validateDisplay
argument_list|(
name|display
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|display
operator|->
name|isValidSurface
argument_list|(
name|surface
argument_list|)
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_extern
extern|extern
literal|"C"
block|{
DECL|function|eglGetError
name|EGLint
name|__stdcall
name|eglGetError
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|EGLint
name|error
init|=
name|egl
operator|::
name|getCurrentError
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|!=
name|EGL_SUCCESS
condition|)
block|{
name|egl
operator|::
name|setCurrentError
argument_list|(
name|EGL_SUCCESS
argument_list|)
expr_stmt|;
block|}
return|return
name|error
return|;
block|}
DECL|function|eglGetDisplay
name|EGLDisplay
name|__stdcall
name|eglGetDisplay
parameter_list|(
name|EGLNativeDisplayType
name|display_id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLNativeDisplayType display_id = 0x%0.8p)"
argument_list|,
name|display_id
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|egl
operator|::
name|Display
operator|::
name|getDisplay
argument_list|(
name|display_id
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_NO_DISPLAY
argument_list|)
return|;
block|}
block|}
DECL|function|eglInitialize
name|EGLBoolean
name|__stdcall
name|eglInitialize
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLint
modifier|*
name|major
parameter_list|,
name|EGLint
modifier|*
name|minor
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLint *major = 0x%0.8p, EGLint *minor = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|major
argument_list|,
name|minor
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|dpy
operator|==
name|EGL_NO_DISPLAY
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_DISPLAY
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|display
operator|->
name|initialize
argument_list|()
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_NOT_INITIALIZED
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
if|if
condition|(
name|major
condition|)
operator|*
name|major
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|minor
condition|)
operator|*
name|minor
operator|=
literal|4
expr_stmt|;
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglTerminate
name|EGLBoolean
name|__stdcall
name|eglTerminate
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|dpy
operator|==
name|EGL_NO_DISPLAY
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_DISPLAY
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|display
operator|->
name|terminate
argument_list|()
expr_stmt|;
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglQueryString
specifier|const
name|char
modifier|*
name|__stdcall
name|eglQueryString
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLint
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLint name = %d)"
argument_list|,
name|dpy
argument_list|,
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateDisplay
argument_list|(
name|display
argument_list|)
condition|)
block|{
return|return
name|NULL
return|;
block|}
switch|switch
condition|(
name|name
condition|)
block|{
case|case
name|EGL_CLIENT_APIS
case|:
return|return
name|egl
operator|::
name|success
argument_list|(
literal|"OpenGL_ES"
argument_list|)
return|;
case|case
name|EGL_EXTENSIONS
case|:
return|return
name|egl
operator|::
name|success
argument_list|(
name|display
operator|->
name|getExtensionString
argument_list|()
argument_list|)
return|;
case|case
name|EGL_VENDOR
case|:
return|return
name|egl
operator|::
name|success
argument_list|(
name|display
operator|->
name|getVendorString
argument_list|()
argument_list|)
return|;
case|case
name|EGL_VERSION
case|:
return|return
name|egl
operator|::
name|success
argument_list|(
literal|"1.4 (ANGLE "
name|ANGLE_VERSION_STRING
literal|")"
argument_list|)
return|;
block|}
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|NULL
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|NULL
argument_list|)
return|;
block|}
block|}
DECL|function|eglGetConfigs
name|EGLBoolean
name|__stdcall
name|eglGetConfigs
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
modifier|*
name|configs
parameter_list|,
name|EGLint
name|config_size
parameter_list|,
name|EGLint
modifier|*
name|num_config
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig *configs = 0x%0.8p, "
literal|"EGLint config_size = %d, EGLint *num_config = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|configs
argument_list|,
name|config_size
argument_list|,
name|num_config
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateDisplay
argument_list|(
name|display
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
operator|!
name|num_config
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
specifier|const
name|EGLint
name|attribList
index|[]
init|=
block|{
name|EGL_NONE
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|display
operator|->
name|getConfigs
argument_list|(
name|configs
argument_list|,
name|attribList
argument_list|,
name|config_size
argument_list|,
name|num_config
argument_list|)
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglChooseConfig
name|EGLBoolean
name|__stdcall
name|eglChooseConfig
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|,
name|EGLConfig
modifier|*
name|configs
parameter_list|,
name|EGLint
name|config_size
parameter_list|,
name|EGLint
modifier|*
name|num_config
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, const EGLint *attrib_list = 0x%0.8p, "
literal|"EGLConfig *configs = 0x%0.8p, EGLint config_size = %d, EGLint *num_config = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|attrib_list
argument_list|,
name|configs
argument_list|,
name|config_size
argument_list|,
name|num_config
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateDisplay
argument_list|(
name|display
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
operator|!
name|num_config
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
specifier|const
name|EGLint
name|attribList
index|[]
init|=
block|{
name|EGL_NONE
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|attrib_list
condition|)
block|{
name|attrib_list
operator|=
name|attribList
expr_stmt|;
block|}
name|display
operator|->
name|getConfigs
argument_list|(
name|configs
argument_list|,
name|attrib_list
argument_list|,
name|config_size
argument_list|,
name|num_config
argument_list|)
expr_stmt|;
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglGetConfigAttrib
name|EGLBoolean
name|__stdcall
name|eglGetConfigAttrib
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLint attribute = %d, EGLint *value = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
operator|!
name|display
operator|->
name|getConfigAttrib
argument_list|(
name|config
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglCreateWindowSurface
name|EGLSurface
name|__stdcall
name|eglCreateWindowSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLNativeWindowType
name|win
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLNativeWindowType win = 0x%0.8p, "
literal|"const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|win
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|)
condition|)
block|{
return|return
name|EGL_NO_SURFACE
return|;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_OS_WINRT
argument_list|)
name|HWND
name|window
init|=
operator|(
name|HWND
operator|)
name|win
decl_stmt|;
if|if
condition|(
operator|!
name|IsWindow
argument_list|(
name|window
argument_list|)
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_NATIVE_WINDOW
argument_list|,
name|EGL_NO_SURFACE
argument_list|)
return|;
block|}
endif|#
directive|endif
return|return
name|display
operator|->
name|createWindowSurface
argument_list|(
name|win
argument_list|,
name|config
argument_list|,
name|attrib_list
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_NO_SURFACE
argument_list|)
return|;
block|}
block|}
DECL|function|eglCreatePbufferSurface
name|EGLSurface
name|__stdcall
name|eglCreatePbufferSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|)
condition|)
block|{
return|return
name|EGL_NO_SURFACE
return|;
block|}
return|return
name|display
operator|->
name|createOffscreenSurface
argument_list|(
name|config
argument_list|,
name|NULL
argument_list|,
name|attrib_list
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_NO_SURFACE
argument_list|)
return|;
block|}
block|}
DECL|function|eglCreatePixmapSurface
name|EGLSurface
name|__stdcall
name|eglCreatePixmapSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLNativePixmapType
name|pixmap
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLNativePixmapType pixmap = 0x%0.8p, "
literal|"const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|pixmap
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|)
condition|)
block|{
return|return
name|EGL_NO_SURFACE
return|;
block|}
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_NO_SURFACE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_NO_SURFACE
argument_list|)
return|;
block|}
block|}
DECL|function|eglDestroySurface
name|EGLBoolean
name|__stdcall
name|eglDestroySurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|egl
operator|::
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
name|display
operator|->
name|destroySurface
argument_list|(
operator|(
name|egl
operator|::
name|Surface
operator|*
operator|)
name|surface
argument_list|)
expr_stmt|;
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglQuerySurface
name|EGLBoolean
name|__stdcall
name|eglQuerySurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint attribute = %d, EGLint *value = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|egl
operator|::
name|Surface
modifier|*
name|eglSurface
init|=
operator|(
name|egl
operator|::
name|Surface
operator|*
operator|)
name|surface
decl_stmt|;
if|if
condition|(
operator|!
name|validateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
switch|switch
condition|(
name|attribute
condition|)
block|{
case|case
name|EGL_VG_ALPHA_FORMAT
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_VG_COLORSPACE
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_CONFIG_ID
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_HEIGHT
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getHeight
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_HORIZONTAL_RESOLUTION
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_LARGEST_PBUFFER
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_MIPMAP_TEXTURE
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_MIPMAP_LEVEL
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_MULTISAMPLE_RESOLVE
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_PIXEL_ASPECT_RATIO
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_RENDER_BUFFER
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_SWAP_BEHAVIOR
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_TEXTURE_FORMAT
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_TEXTURE_TARGET
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_VERTICAL_RESOLUTION
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_WIDTH
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getWidth
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_POST_SUB_BUFFER_SUPPORTED_NV
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|isPostSubBufferSupported
argument_list|()
expr_stmt|;
break|break;
default|default:
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglQuerySurfacePointerANGLE
name|EGLBoolean
name|__stdcall
name|eglQuerySurfacePointerANGLE
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|void
modifier|*
modifier|*
name|value
parameter_list|)
block|{
name|TRACE
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint attribute = %d, void **value = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|egl
operator|::
name|Surface
modifier|*
name|eglSurface
init|=
operator|(
name|egl
operator|::
name|Surface
operator|*
operator|)
name|surface
decl_stmt|;
if|if
condition|(
operator|!
name|validateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
switch|switch
condition|(
name|attribute
condition|)
block|{
case|case
name|EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE
case|:
block|{
name|rx
operator|::
name|SwapChain
modifier|*
name|swapchain
init|=
name|eglSurface
operator|->
name|getSwapChain
argument_list|()
decl_stmt|;
operator|*
name|value
operator|=
operator|(
name|void
operator|*
operator|)
operator|(
name|swapchain
condition|?
name|swapchain
operator|->
name|getShareHandle
argument_list|()
else|:
name|NULL
operator|)
expr_stmt|;
block|}
break|break;
default|default:
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglBindAPI
name|EGLBoolean
name|__stdcall
name|eglBindAPI
parameter_list|(
name|EGLenum
name|api
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLenum api = 0x%X)"
argument_list|,
name|api
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
name|api
condition|)
block|{
case|case
name|EGL_OPENGL_API
case|:
case|case
name|EGL_OPENVG_API
case|:
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
comment|// Not supported by this implementation
case|case
name|EGL_OPENGL_ES_API
case|:
break|break;
default|default:
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
name|egl
operator|::
name|setCurrentAPI
argument_list|(
name|api
argument_list|)
expr_stmt|;
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglQueryAPI
name|EGLenum
name|__stdcall
name|eglQueryAPI
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
try|try
block|{
name|EGLenum
name|API
init|=
name|egl
operator|::
name|getCurrentAPI
argument_list|()
decl_stmt|;
return|return
name|egl
operator|::
name|success
argument_list|(
name|API
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglWaitClient
name|EGLBoolean
name|__stdcall
name|eglWaitClient
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
try|try
block|{
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
return|return
name|egl
operator|::
name|success
argument_list|(
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglReleaseThread
name|EGLBoolean
name|__stdcall
name|eglReleaseThread
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
try|try
block|{
name|eglMakeCurrent
argument_list|(
name|EGL_NO_DISPLAY
argument_list|,
name|EGL_NO_CONTEXT
argument_list|,
name|EGL_NO_SURFACE
argument_list|,
name|EGL_NO_SURFACE
argument_list|)
expr_stmt|;
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglCreatePbufferFromClientBuffer
name|EGLSurface
name|__stdcall
name|eglCreatePbufferFromClientBuffer
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLenum
name|buftype
parameter_list|,
name|EGLClientBuffer
name|buffer
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLenum buftype = 0x%X, EGLClientBuffer buffer = 0x%0.8p, "
literal|"EGLConfig config = 0x%0.8p, const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|buftype
argument_list|,
name|buffer
argument_list|,
name|config
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|)
condition|)
block|{
return|return
name|EGL_NO_SURFACE
return|;
block|}
if|if
condition|(
name|buftype
operator|!=
name|EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE
operator|||
operator|!
name|buffer
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|,
name|EGL_NO_SURFACE
argument_list|)
return|;
block|}
return|return
name|display
operator|->
name|createOffscreenSurface
argument_list|(
name|config
argument_list|,
operator|(
name|HANDLE
operator|)
name|buffer
argument_list|,
name|attrib_list
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_NO_SURFACE
argument_list|)
return|;
block|}
block|}
DECL|function|eglSurfaceAttrib
name|EGLBoolean
name|__stdcall
name|eglSurfaceAttrib
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint attribute = %d, EGLint value = %d)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|egl
operator|::
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglBindTexImage
name|EGLBoolean
name|__stdcall
name|eglBindTexImage
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|buffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint buffer = %d)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|egl
operator|::
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|buffer
operator|!=
name|EGL_BACK_BUFFER
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
operator|||
name|eglSurface
operator|->
name|getWindowHandle
argument_list|()
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
if|if
condition|(
name|eglSurface
operator|->
name|getBoundTexture
argument_list|()
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ACCESS
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
if|if
condition|(
name|eglSurface
operator|->
name|getTextureFormat
argument_list|()
operator|==
name|EGL_NO_TEXTURE
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_MATCH
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|glBindTexImage
argument_list|(
name|eglSurface
argument_list|)
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_MATCH
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglReleaseTexImage
name|EGLBoolean
name|__stdcall
name|eglReleaseTexImage
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|buffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint buffer = %d)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|egl
operator|::
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|buffer
operator|!=
name|EGL_BACK_BUFFER
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
operator|||
name|eglSurface
operator|->
name|getWindowHandle
argument_list|()
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
if|if
condition|(
name|eglSurface
operator|->
name|getTextureFormat
argument_list|()
operator|==
name|EGL_NO_TEXTURE
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_MATCH
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
name|gl
operator|::
name|Texture2D
modifier|*
name|texture
init|=
name|eglSurface
operator|->
name|getBoundTexture
argument_list|()
decl_stmt|;
if|if
condition|(
name|texture
condition|)
block|{
name|texture
operator|->
name|releaseTexImage
argument_list|()
expr_stmt|;
block|}
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglSwapInterval
name|EGLBoolean
name|__stdcall
name|eglSwapInterval
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLint
name|interval
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLint interval = %d)"
argument_list|,
name|dpy
argument_list|,
name|interval
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateDisplay
argument_list|(
name|display
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
name|egl
operator|::
name|Surface
modifier|*
name|draw_surface
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Surface
operator|*
argument_list|>
argument_list|(
name|egl
operator|::
name|getCurrentDrawSurface
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|draw_surface
operator|==
name|NULL
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
name|draw_surface
operator|->
name|setSwapInterval
argument_list|(
name|interval
argument_list|)
expr_stmt|;
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglCreateContext
name|EGLContext
name|__stdcall
name|eglCreateContext
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLContext
name|share_context
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLContext share_context = 0x%0.8p, "
literal|"const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|share_context
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Get the requested client version (default is 1) and check it is two.
name|EGLint
name|client_version
init|=
literal|1
decl_stmt|;
name|bool
name|reset_notification
init|=
literal|false
decl_stmt|;
name|bool
name|robust_access
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|attrib_list
condition|)
block|{
for|for
control|(
specifier|const
name|EGLint
modifier|*
name|attribute
init|=
name|attrib_list
init|;
name|attribute
index|[
literal|0
index|]
operator|!=
name|EGL_NONE
condition|;
name|attribute
operator|+=
literal|2
control|)
block|{
switch|switch
condition|(
name|attribute
index|[
literal|0
index|]
condition|)
block|{
case|case
name|EGL_CONTEXT_CLIENT_VERSION
case|:
name|client_version
operator|=
name|attribute
index|[
literal|1
index|]
expr_stmt|;
break|break;
case|case
name|EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT
case|:
if|if
condition|(
name|attribute
index|[
literal|1
index|]
operator|==
name|EGL_TRUE
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_CONFIG
argument_list|,
name|EGL_NO_CONTEXT
argument_list|)
return|;
comment|// Unimplemented
comment|// robust_access = true;
block|}
elseif|else
if|if
condition|(
name|attribute
index|[
literal|1
index|]
operator|!=
name|EGL_FALSE
condition|)
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|,
name|EGL_NO_CONTEXT
argument_list|)
return|;
break|break;
case|case
name|EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT
case|:
if|if
condition|(
name|attribute
index|[
literal|1
index|]
operator|==
name|EGL_LOSE_CONTEXT_ON_RESET_EXT
condition|)
name|reset_notification
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|attribute
index|[
literal|1
index|]
operator|!=
name|EGL_NO_RESET_NOTIFICATION_EXT
condition|)
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|,
name|EGL_NO_CONTEXT
argument_list|)
return|;
break|break;
default|default:
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|,
name|EGL_NO_CONTEXT
argument_list|)
return|;
block|}
block|}
block|}
if|if
condition|(
name|client_version
operator|!=
literal|2
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_CONFIG
argument_list|,
name|EGL_NO_CONTEXT
argument_list|)
return|;
block|}
name|gl
operator|::
name|Context
modifier|*
name|sharedContextPtr
init|=
operator|(
name|share_context
operator|!=
name|EGL_NO_CONTEXT
condition|?
cast|static_cast
argument_list|<
name|gl
operator|::
name|Context
operator|*
argument_list|>
argument_list|(
name|share_context
argument_list|)
else|:
name|NULL
operator|)
decl_stmt|;
if|if
condition|(
name|sharedContextPtr
operator|!=
name|NULL
operator|&&
name|sharedContextPtr
operator|->
name|isResetNotificationEnabled
argument_list|()
operator|!=
name|reset_notification
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_MATCH
argument_list|,
name|EGL_NO_CONTEXT
argument_list|)
return|;
block|}
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
comment|// Can not share contexts between displays
if|if
condition|(
name|sharedContextPtr
operator|!=
name|NULL
operator|&&
name|sharedContextPtr
operator|->
name|getRenderer
argument_list|()
operator|!=
name|display
operator|->
name|getRenderer
argument_list|()
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_MATCH
argument_list|,
name|EGL_NO_CONTEXT
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|validateConfig
argument_list|(
name|display
argument_list|,
name|config
argument_list|)
condition|)
block|{
return|return
name|EGL_NO_CONTEXT
return|;
block|}
name|EGLContext
name|context
init|=
name|display
operator|->
name|createContext
argument_list|(
name|config
argument_list|,
cast|static_cast
argument_list|<
name|gl
operator|::
name|Context
operator|*
argument_list|>
argument_list|(
name|share_context
argument_list|)
argument_list|,
name|reset_notification
argument_list|,
name|robust_access
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
condition|)
return|return
name|egl
operator|::
name|success
argument_list|(
name|context
argument_list|)
return|;
else|else
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_CONTEXT_LOST
argument_list|,
name|EGL_NO_CONTEXT
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_NO_CONTEXT
argument_list|)
return|;
block|}
block|}
DECL|function|eglDestroyContext
name|EGLBoolean
name|__stdcall
name|eglDestroyContext
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLContext
name|ctx
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
cast|static_cast
argument_list|<
name|gl
operator|::
name|Context
operator|*
argument_list|>
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateContext
argument_list|(
name|display
argument_list|,
name|context
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|ctx
operator|==
name|EGL_NO_CONTEXT
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_CONTEXT
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
name|display
operator|->
name|destroyContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglMakeCurrent
name|EGLBoolean
name|__stdcall
name|eglMakeCurrent
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|draw
parameter_list|,
name|EGLSurface
name|read
parameter_list|,
name|EGLContext
name|ctx
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface draw = 0x%0.8p, EGLSurface read = 0x%0.8p, EGLContext ctx = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|draw
argument_list|,
name|read
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
cast|static_cast
argument_list|<
name|gl
operator|::
name|Context
operator|*
argument_list|>
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctx
operator|!=
name|EGL_NO_CONTEXT
operator|&&
operator|!
name|validateContext
argument_list|(
name|display
argument_list|,
name|context
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|dpy
operator|!=
name|EGL_NO_DISPLAY
condition|)
block|{
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
init|=
name|display
operator|->
name|getRenderer
argument_list|()
decl_stmt|;
if|if
condition|(
name|renderer
operator|->
name|testDeviceLost
argument_list|(
literal|true
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|renderer
operator|->
name|isDeviceLost
argument_list|()
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_CONTEXT_LOST
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
if|if
condition|(
operator|(
name|draw
operator|!=
name|EGL_NO_SURFACE
operator|&&
operator|!
name|validateSurface
argument_list|(
name|display
argument_list|,
cast|static_cast
argument_list|<
name|egl
operator|::
name|Surface
operator|*
argument_list|>
argument_list|(
name|draw
argument_list|)
argument_list|)
operator|)
operator|||
operator|(
name|read
operator|!=
name|EGL_NO_SURFACE
operator|&&
operator|!
name|validateSurface
argument_list|(
name|display
argument_list|,
cast|static_cast
argument_list|<
name|egl
operator|::
name|Surface
operator|*
argument_list|>
argument_list|(
name|read
argument_list|)
argument_list|)
operator|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|draw
operator|!=
name|read
condition|)
block|{
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
block|}
name|egl
operator|::
name|setCurrentDisplay
argument_list|(
name|dpy
argument_list|)
expr_stmt|;
name|egl
operator|::
name|setCurrentDrawSurface
argument_list|(
name|draw
argument_list|)
expr_stmt|;
name|egl
operator|::
name|setCurrentReadSurface
argument_list|(
name|read
argument_list|)
expr_stmt|;
name|glMakeCurrent
argument_list|(
name|context
argument_list|,
name|display
argument_list|,
cast|static_cast
argument_list|<
name|egl
operator|::
name|Surface
operator|*
argument_list|>
argument_list|(
name|draw
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglGetCurrentContext
name|EGLContext
name|__stdcall
name|eglGetCurrentContext
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
try|try
block|{
name|EGLContext
name|context
init|=
name|glGetCurrentContext
argument_list|()
decl_stmt|;
return|return
name|egl
operator|::
name|success
argument_list|(
name|context
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_NO_CONTEXT
argument_list|)
return|;
block|}
block|}
DECL|function|eglGetCurrentSurface
name|EGLSurface
name|__stdcall
name|eglGetCurrentSurface
parameter_list|(
name|EGLint
name|readdraw
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLint readdraw = %d)"
argument_list|,
name|readdraw
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|readdraw
operator|==
name|EGL_READ
condition|)
block|{
name|EGLSurface
name|read
init|=
name|egl
operator|::
name|getCurrentReadSurface
argument_list|()
decl_stmt|;
return|return
name|egl
operator|::
name|success
argument_list|(
name|read
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|readdraw
operator|==
name|EGL_DRAW
condition|)
block|{
name|EGLSurface
name|draw
init|=
name|egl
operator|::
name|getCurrentDrawSurface
argument_list|()
decl_stmt|;
return|return
name|egl
operator|::
name|success
argument_list|(
name|draw
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|,
name|EGL_NO_SURFACE
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_NO_SURFACE
argument_list|)
return|;
block|}
block|}
DECL|function|eglGetCurrentDisplay
name|EGLDisplay
name|__stdcall
name|eglGetCurrentDisplay
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
try|try
block|{
name|EGLDisplay
name|dpy
init|=
name|egl
operator|::
name|getCurrentDisplay
argument_list|()
decl_stmt|;
return|return
name|egl
operator|::
name|success
argument_list|(
name|dpy
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_NO_DISPLAY
argument_list|)
return|;
block|}
block|}
DECL|function|eglQueryContext
name|EGLBoolean
name|__stdcall
name|eglQueryContext
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLContext
name|ctx
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p, EGLint attribute = %d, EGLint *value = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|ctx
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
cast|static_cast
argument_list|<
name|gl
operator|::
name|Context
operator|*
argument_list|>
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateContext
argument_list|(
name|display
argument_list|,
name|context
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
return|return
name|egl
operator|::
name|success
argument_list|(
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglWaitGL
name|EGLBoolean
name|__stdcall
name|eglWaitGL
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
try|try
block|{
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
return|return
name|egl
operator|::
name|success
argument_list|(
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglWaitNative
name|EGLBoolean
name|__stdcall
name|eglWaitNative
parameter_list|(
name|EGLint
name|engine
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLint engine = %d)"
argument_list|,
name|engine
argument_list|)
expr_stmt|;
try|try
block|{
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
return|return
name|egl
operator|::
name|success
argument_list|(
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglSwapBuffers
name|EGLBoolean
name|__stdcall
name|eglSwapBuffers
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|egl
operator|::
name|Surface
modifier|*
name|eglSurface
init|=
operator|(
name|egl
operator|::
name|Surface
operator|*
operator|)
name|surface
decl_stmt|;
if|if
condition|(
operator|!
name|validateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|display
operator|->
name|getRenderer
argument_list|()
operator|->
name|isDeviceLost
argument_list|()
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_CONTEXT_LOST
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
if|if
condition|(
name|eglSurface
operator|->
name|swap
argument_list|()
condition|)
block|{
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
return|return
name|EGL_FALSE
return|;
block|}
DECL|function|eglCopyBuffers
name|EGLBoolean
name|__stdcall
name|eglCopyBuffers
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLNativePixmapType
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLNativePixmapType target = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|target
argument_list|)
expr_stmt|;
try|try
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|egl
operator|::
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|display
operator|->
name|getRenderer
argument_list|()
operator|->
name|isDeviceLost
argument_list|()
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_CONTEXT_LOST
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
return|return
name|egl
operator|::
name|success
argument_list|(
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
block|}
DECL|function|eglPostSubBufferNV
name|EGLBoolean
name|__stdcall
name|eglPostSubBufferNV
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|x
parameter_list|,
name|EGLint
name|y
parameter_list|,
name|EGLint
name|width
parameter_list|,
name|EGLint
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint x = %d, EGLint y = %d, EGLint width = %d, EGLint height = %d)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|x
operator|<
literal|0
operator|||
name|y
operator|<
literal|0
operator|||
name|width
operator|<
literal|0
operator|||
name|height
operator|<
literal|0
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|egl
operator|::
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|egl
operator|::
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
condition|)
block|{
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|display
operator|->
name|getRenderer
argument_list|()
operator|->
name|isDeviceLost
argument_list|()
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_CONTEXT_LOST
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
if|if
condition|(
name|eglSurface
operator|->
name|postSubBuffer
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
return|return
name|egl
operator|::
name|success
argument_list|(
name|EGL_TRUE
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
name|EGL_FALSE
argument_list|)
return|;
block|}
return|return
name|EGL_FALSE
return|;
block|}
DECL|function|eglGetProcAddress
name|__eglMustCastToProperFunctionPointerType
name|__stdcall
name|eglGetProcAddress
parameter_list|(
specifier|const
name|char
modifier|*
name|procname
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(const char *procname = \"%s\")"
argument_list|,
name|procname
argument_list|)
expr_stmt|;
try|try
block|{
struct|struct
name|Extension
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|__eglMustCastToProperFunctionPointerType
name|address
decl_stmt|;
block|}
struct|;
specifier|static
specifier|const
name|Extension
name|eglExtensions
index|[]
init|=
block|{
block|{
literal|"eglQuerySurfacePointerANGLE"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|eglQuerySurfacePointerANGLE
block|}
block|,
block|{
literal|"eglPostSubBufferNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|eglPostSubBufferNV
block|}
block|,
block|{
literal|""
block|,
name|NULL
block|}
block|,         }
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|ext
init|=
literal|0
init|;
name|ext
operator|<
name|ArraySize
argument_list|(
name|eglExtensions
argument_list|)
condition|;
name|ext
operator|++
control|)
block|{
if|if
condition|(
name|strcmp
argument_list|(
name|procname
argument_list|,
name|eglExtensions
index|[
name|ext
index|]
operator|.
name|name
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|eglExtensions
index|[
name|ext
index|]
operator|.
name|address
return|;
block|}
block|}
return|return
name|glGetProcAddress
argument_list|(
name|procname
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
return|return
name|egl
operator|::
name|error
argument_list|(
name|EGL_BAD_ALLOC
argument_list|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|NULL
argument_list|)
return|;
block|}
block|}
block|}
end_extern
end_unit
