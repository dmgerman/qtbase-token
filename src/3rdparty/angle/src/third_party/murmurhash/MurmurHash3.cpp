begin_unit
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_comment
comment|// MurmurHash3 was written by Austin Appleby, and is placed in the public
end_comment
begin_comment
comment|// domain. The author hereby disclaims copyright to this source code.
end_comment
begin_comment
comment|// Note - The x86 and x64 versions do _not_ produce the same results, as the
end_comment
begin_comment
comment|// algorithms are optimized for their respective platforms. You can still
end_comment
begin_comment
comment|// compile and run any of them on any platform, but your performance with the
end_comment
begin_comment
comment|// non-native version will be less than optimal.
end_comment
begin_include
include|#
directive|include
file|"MurmurHash3.h"
end_include
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_comment
comment|// Platform-specific functions and macros
end_comment
begin_comment
comment|// Microsoft Visual Studio
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
end_if
begin_define
DECL|macro|FORCE_INLINE
define|#
directive|define
name|FORCE_INLINE
value|__forceinline
end_define
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_define
DECL|macro|ROTL32
define|#
directive|define
name|ROTL32
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|_rotl(x,y)
end_define
begin_define
DECL|macro|ROTL64
define|#
directive|define
name|ROTL64
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|_rotl64(x,y)
end_define
begin_define
DECL|macro|BIG_CONSTANT
define|#
directive|define
name|BIG_CONSTANT
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define
begin_comment
comment|// Other compilers
end_comment
begin_else
else|#
directive|else
end_else
begin_comment
comment|// defined(_MSC_VER)
end_comment
begin_define
DECL|macro|FORCE_INLINE
define|#
directive|define
name|FORCE_INLINE
value|inline __attribute__((always_inline))
end_define
begin_function
DECL|function|rotl32
specifier|inline
name|uint32_t
name|rotl32
parameter_list|(
name|uint32_t
name|x
parameter_list|,
name|int8_t
name|r
parameter_list|)
block|{
return|return
operator|(
name|x
operator|<<
name|r
operator|)
operator||
operator|(
name|x
operator|>>
operator|(
literal|32
operator|-
name|r
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|rotl64
specifier|inline
name|uint64_t
name|rotl64
parameter_list|(
name|uint64_t
name|x
parameter_list|,
name|int8_t
name|r
parameter_list|)
block|{
return|return
operator|(
name|x
operator|<<
name|r
operator|)
operator||
operator|(
name|x
operator|>>
operator|(
literal|64
operator|-
name|r
operator|)
operator|)
return|;
block|}
end_function
begin_define
DECL|macro|ROTL32
define|#
directive|define
name|ROTL32
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|rotl32(x,y)
end_define
begin_define
DECL|macro|ROTL64
define|#
directive|define
name|ROTL64
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|rotl64(x,y)
end_define
begin_define
DECL|macro|BIG_CONSTANT
define|#
directive|define
name|BIG_CONSTANT
parameter_list|(
name|x
parameter_list|)
value|(x##LLU)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !defined(_MSC_VER)
end_comment
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_comment
comment|// Block read - if your platform needs to do endian-swapping or can only
end_comment
begin_comment
comment|// handle aligned reads, do the conversion here
end_comment
begin_function
DECL|function|getblock32
name|FORCE_INLINE
name|uint32_t
name|getblock32
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|p
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
name|p
index|[
name|i
index|]
return|;
block|}
end_function
begin_function
DECL|function|getblock64
name|FORCE_INLINE
name|uint64_t
name|getblock64
parameter_list|(
specifier|const
name|uint64_t
modifier|*
name|p
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
name|p
index|[
name|i
index|]
return|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_comment
comment|// Finalization mix - force all bits of a hash block to avalanche
end_comment
begin_function
DECL|function|fmix32
name|FORCE_INLINE
name|uint32_t
name|fmix32
parameter_list|(
name|uint32_t
name|h
parameter_list|)
block|{
name|h
operator|^=
name|h
operator|>>
literal|16
expr_stmt|;
name|h
operator|*=
literal|0x85ebca6b
expr_stmt|;
name|h
operator|^=
name|h
operator|>>
literal|13
expr_stmt|;
name|h
operator|*=
literal|0xc2b2ae35
expr_stmt|;
name|h
operator|^=
name|h
operator|>>
literal|16
expr_stmt|;
return|return
name|h
return|;
block|}
end_function
begin_comment
comment|//----------
end_comment
begin_function
DECL|function|fmix64
name|FORCE_INLINE
name|uint64_t
name|fmix64
parameter_list|(
name|uint64_t
name|k
parameter_list|)
block|{
name|k
operator|^=
name|k
operator|>>
literal|33
expr_stmt|;
name|k
operator|*=
name|BIG_CONSTANT
argument_list|(
literal|0xff51afd7ed558ccd
argument_list|)
expr_stmt|;
name|k
operator|^=
name|k
operator|>>
literal|33
expr_stmt|;
name|k
operator|*=
name|BIG_CONSTANT
argument_list|(
literal|0xc4ceb9fe1a85ec53
argument_list|)
expr_stmt|;
name|k
operator|^=
name|k
operator|>>
literal|33
expr_stmt|;
return|return
name|k
return|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|MurmurHash3_x86_32
name|void
name|MurmurHash3_x86_32
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|int
name|len
parameter_list|,
name|uint32_t
name|seed
parameter_list|,
name|void
modifier|*
name|out
parameter_list|)
block|{
specifier|const
name|uint8_t
modifier|*
name|data
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|key
decl_stmt|;
specifier|const
name|int
name|nblocks
init|=
name|len
operator|/
literal|4
decl_stmt|;
name|uint32_t
name|h1
init|=
name|seed
decl_stmt|;
specifier|const
name|uint32_t
name|c1
init|=
literal|0xcc9e2d51
decl_stmt|;
specifier|const
name|uint32_t
name|c2
init|=
literal|0x1b873593
decl_stmt|;
comment|//----------
comment|// body
specifier|const
name|uint32_t
modifier|*
name|blocks
init|=
operator|(
specifier|const
name|uint32_t
operator|*
operator|)
operator|(
name|data
operator|+
name|nblocks
operator|*
literal|4
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|-
name|nblocks
init|;
name|i
condition|;
name|i
operator|++
control|)
block|{
name|uint32_t
name|k1
init|=
name|getblock32
argument_list|(
name|blocks
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|ROTL32
argument_list|(
name|k1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
name|h1
operator|=
name|ROTL32
argument_list|(
name|h1
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|h1
operator|=
name|h1
operator|*
literal|5
operator|+
literal|0xe6546b64
expr_stmt|;
block|}
comment|//----------
comment|// tail
specifier|const
name|uint8_t
modifier|*
name|tail
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
operator|(
name|data
operator|+
name|nblocks
operator|*
literal|4
operator|)
decl_stmt|;
name|uint32_t
name|k1
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|len
operator|&
literal|3
condition|)
block|{
case|case
literal|3
case|:
name|k1
operator|^=
name|tail
index|[
literal|2
index|]
operator|<<
literal|16
expr_stmt|;
case|case
literal|2
case|:
name|k1
operator|^=
name|tail
index|[
literal|1
index|]
operator|<<
literal|8
expr_stmt|;
case|case
literal|1
case|:
name|k1
operator|^=
name|tail
index|[
literal|0
index|]
expr_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|ROTL32
argument_list|(
name|k1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
block|}
empty_stmt|;
comment|//----------
comment|// finalization
name|h1
operator|^=
name|len
expr_stmt|;
name|h1
operator|=
name|fmix32
argument_list|(
name|h1
argument_list|)
expr_stmt|;
operator|*
operator|(
name|uint32_t
operator|*
operator|)
name|out
operator|=
name|h1
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|MurmurHash3_x86_128
name|void
name|MurmurHash3_x86_128
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
specifier|const
name|int
name|len
parameter_list|,
name|uint32_t
name|seed
parameter_list|,
name|void
modifier|*
name|out
parameter_list|)
block|{
specifier|const
name|uint8_t
modifier|*
name|data
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|key
decl_stmt|;
specifier|const
name|int
name|nblocks
init|=
name|len
operator|/
literal|16
decl_stmt|;
name|uint32_t
name|h1
init|=
name|seed
decl_stmt|;
name|uint32_t
name|h2
init|=
name|seed
decl_stmt|;
name|uint32_t
name|h3
init|=
name|seed
decl_stmt|;
name|uint32_t
name|h4
init|=
name|seed
decl_stmt|;
specifier|const
name|uint32_t
name|c1
init|=
literal|0x239b961b
decl_stmt|;
specifier|const
name|uint32_t
name|c2
init|=
literal|0xab0e9789
decl_stmt|;
specifier|const
name|uint32_t
name|c3
init|=
literal|0x38b34ae5
decl_stmt|;
specifier|const
name|uint32_t
name|c4
init|=
literal|0xa1e38b93
decl_stmt|;
comment|//----------
comment|// body
specifier|const
name|uint32_t
modifier|*
name|blocks
init|=
operator|(
specifier|const
name|uint32_t
operator|*
operator|)
operator|(
name|data
operator|+
name|nblocks
operator|*
literal|16
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|-
name|nblocks
init|;
name|i
condition|;
name|i
operator|++
control|)
block|{
name|uint32_t
name|k1
init|=
name|getblock32
argument_list|(
name|blocks
argument_list|,
name|i
operator|*
literal|4
operator|+
literal|0
argument_list|)
decl_stmt|;
name|uint32_t
name|k2
init|=
name|getblock32
argument_list|(
name|blocks
argument_list|,
name|i
operator|*
literal|4
operator|+
literal|1
argument_list|)
decl_stmt|;
name|uint32_t
name|k3
init|=
name|getblock32
argument_list|(
name|blocks
argument_list|,
name|i
operator|*
literal|4
operator|+
literal|2
argument_list|)
decl_stmt|;
name|uint32_t
name|k4
init|=
name|getblock32
argument_list|(
name|blocks
argument_list|,
name|i
operator|*
literal|4
operator|+
literal|3
argument_list|)
decl_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|ROTL32
argument_list|(
name|k1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
name|h1
operator|=
name|ROTL32
argument_list|(
name|h1
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h1
operator|=
name|h1
operator|*
literal|5
operator|+
literal|0x561ccd1b
expr_stmt|;
name|k2
operator|*=
name|c2
expr_stmt|;
name|k2
operator|=
name|ROTL32
argument_list|(
name|k2
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|k2
operator|*=
name|c3
expr_stmt|;
name|h2
operator|^=
name|k2
expr_stmt|;
name|h2
operator|=
name|ROTL32
argument_list|(
name|h2
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|h2
operator|+=
name|h3
expr_stmt|;
name|h2
operator|=
name|h2
operator|*
literal|5
operator|+
literal|0x0bcaa747
expr_stmt|;
name|k3
operator|*=
name|c3
expr_stmt|;
name|k3
operator|=
name|ROTL32
argument_list|(
name|k3
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|k3
operator|*=
name|c4
expr_stmt|;
name|h3
operator|^=
name|k3
expr_stmt|;
name|h3
operator|=
name|ROTL32
argument_list|(
name|h3
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|h3
operator|+=
name|h4
expr_stmt|;
name|h3
operator|=
name|h3
operator|*
literal|5
operator|+
literal|0x96cd1c35
expr_stmt|;
name|k4
operator|*=
name|c4
expr_stmt|;
name|k4
operator|=
name|ROTL32
argument_list|(
name|k4
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|k4
operator|*=
name|c1
expr_stmt|;
name|h4
operator|^=
name|k4
expr_stmt|;
name|h4
operator|=
name|ROTL32
argument_list|(
name|h4
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|h4
operator|+=
name|h1
expr_stmt|;
name|h4
operator|=
name|h4
operator|*
literal|5
operator|+
literal|0x32ac3b17
expr_stmt|;
block|}
comment|//----------
comment|// tail
specifier|const
name|uint8_t
modifier|*
name|tail
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
operator|(
name|data
operator|+
name|nblocks
operator|*
literal|16
operator|)
decl_stmt|;
name|uint32_t
name|k1
init|=
literal|0
decl_stmt|;
name|uint32_t
name|k2
init|=
literal|0
decl_stmt|;
name|uint32_t
name|k3
init|=
literal|0
decl_stmt|;
name|uint32_t
name|k4
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|len
operator|&
literal|15
condition|)
block|{
case|case
literal|15
case|:
name|k4
operator|^=
name|tail
index|[
literal|14
index|]
operator|<<
literal|16
expr_stmt|;
case|case
literal|14
case|:
name|k4
operator|^=
name|tail
index|[
literal|13
index|]
operator|<<
literal|8
expr_stmt|;
case|case
literal|13
case|:
name|k4
operator|^=
name|tail
index|[
literal|12
index|]
operator|<<
literal|0
expr_stmt|;
name|k4
operator|*=
name|c4
expr_stmt|;
name|k4
operator|=
name|ROTL32
argument_list|(
name|k4
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|k4
operator|*=
name|c1
expr_stmt|;
name|h4
operator|^=
name|k4
expr_stmt|;
case|case
literal|12
case|:
name|k3
operator|^=
name|tail
index|[
literal|11
index|]
operator|<<
literal|24
expr_stmt|;
case|case
literal|11
case|:
name|k3
operator|^=
name|tail
index|[
literal|10
index|]
operator|<<
literal|16
expr_stmt|;
case|case
literal|10
case|:
name|k3
operator|^=
name|tail
index|[
literal|9
index|]
operator|<<
literal|8
expr_stmt|;
case|case
literal|9
case|:
name|k3
operator|^=
name|tail
index|[
literal|8
index|]
operator|<<
literal|0
expr_stmt|;
name|k3
operator|*=
name|c3
expr_stmt|;
name|k3
operator|=
name|ROTL32
argument_list|(
name|k3
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|k3
operator|*=
name|c4
expr_stmt|;
name|h3
operator|^=
name|k3
expr_stmt|;
case|case
literal|8
case|:
name|k2
operator|^=
name|tail
index|[
literal|7
index|]
operator|<<
literal|24
expr_stmt|;
case|case
literal|7
case|:
name|k2
operator|^=
name|tail
index|[
literal|6
index|]
operator|<<
literal|16
expr_stmt|;
case|case
literal|6
case|:
name|k2
operator|^=
name|tail
index|[
literal|5
index|]
operator|<<
literal|8
expr_stmt|;
case|case
literal|5
case|:
name|k2
operator|^=
name|tail
index|[
literal|4
index|]
operator|<<
literal|0
expr_stmt|;
name|k2
operator|*=
name|c2
expr_stmt|;
name|k2
operator|=
name|ROTL32
argument_list|(
name|k2
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|k2
operator|*=
name|c3
expr_stmt|;
name|h2
operator|^=
name|k2
expr_stmt|;
case|case
literal|4
case|:
name|k1
operator|^=
name|tail
index|[
literal|3
index|]
operator|<<
literal|24
expr_stmt|;
case|case
literal|3
case|:
name|k1
operator|^=
name|tail
index|[
literal|2
index|]
operator|<<
literal|16
expr_stmt|;
case|case
literal|2
case|:
name|k1
operator|^=
name|tail
index|[
literal|1
index|]
operator|<<
literal|8
expr_stmt|;
case|case
literal|1
case|:
name|k1
operator|^=
name|tail
index|[
literal|0
index|]
operator|<<
literal|0
expr_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|ROTL32
argument_list|(
name|k1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
block|}
empty_stmt|;
comment|//----------
comment|// finalization
name|h1
operator|^=
name|len
expr_stmt|;
name|h2
operator|^=
name|len
expr_stmt|;
name|h3
operator|^=
name|len
expr_stmt|;
name|h4
operator|^=
name|len
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h1
operator|+=
name|h3
expr_stmt|;
name|h1
operator|+=
name|h4
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
name|h3
operator|+=
name|h1
expr_stmt|;
name|h4
operator|+=
name|h1
expr_stmt|;
name|h1
operator|=
name|fmix32
argument_list|(
name|h1
argument_list|)
expr_stmt|;
name|h2
operator|=
name|fmix32
argument_list|(
name|h2
argument_list|)
expr_stmt|;
name|h3
operator|=
name|fmix32
argument_list|(
name|h3
argument_list|)
expr_stmt|;
name|h4
operator|=
name|fmix32
argument_list|(
name|h4
argument_list|)
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h1
operator|+=
name|h3
expr_stmt|;
name|h1
operator|+=
name|h4
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
name|h3
operator|+=
name|h1
expr_stmt|;
name|h4
operator|+=
name|h1
expr_stmt|;
operator|(
operator|(
name|uint32_t
operator|*
operator|)
name|out
operator|)
index|[
literal|0
index|]
operator|=
name|h1
expr_stmt|;
operator|(
operator|(
name|uint32_t
operator|*
operator|)
name|out
operator|)
index|[
literal|1
index|]
operator|=
name|h2
expr_stmt|;
operator|(
operator|(
name|uint32_t
operator|*
operator|)
name|out
operator|)
index|[
literal|2
index|]
operator|=
name|h3
expr_stmt|;
operator|(
operator|(
name|uint32_t
operator|*
operator|)
name|out
operator|)
index|[
literal|3
index|]
operator|=
name|h4
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|MurmurHash3_x64_128
name|void
name|MurmurHash3_x64_128
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
specifier|const
name|int
name|len
parameter_list|,
specifier|const
name|uint32_t
name|seed
parameter_list|,
name|void
modifier|*
name|out
parameter_list|)
block|{
specifier|const
name|uint8_t
modifier|*
name|data
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|key
decl_stmt|;
specifier|const
name|int
name|nblocks
init|=
name|len
operator|/
literal|16
decl_stmt|;
name|uint64_t
name|h1
init|=
name|seed
decl_stmt|;
name|uint64_t
name|h2
init|=
name|seed
decl_stmt|;
specifier|const
name|uint64_t
name|c1
init|=
name|BIG_CONSTANT
argument_list|(
literal|0x87c37b91114253d5
argument_list|)
decl_stmt|;
specifier|const
name|uint64_t
name|c2
init|=
name|BIG_CONSTANT
argument_list|(
literal|0x4cf5ad432745937f
argument_list|)
decl_stmt|;
comment|//----------
comment|// body
specifier|const
name|uint64_t
modifier|*
name|blocks
init|=
operator|(
specifier|const
name|uint64_t
operator|*
operator|)
operator|(
name|data
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nblocks
condition|;
name|i
operator|++
control|)
block|{
name|uint64_t
name|k1
init|=
name|getblock64
argument_list|(
name|blocks
argument_list|,
name|i
operator|*
literal|2
operator|+
literal|0
argument_list|)
decl_stmt|;
name|uint64_t
name|k2
init|=
name|getblock64
argument_list|(
name|blocks
argument_list|,
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
decl_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|ROTL64
argument_list|(
name|k1
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
name|h1
operator|=
name|ROTL64
argument_list|(
name|h1
argument_list|,
literal|27
argument_list|)
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h1
operator|=
name|h1
operator|*
literal|5
operator|+
literal|0x52dce729
expr_stmt|;
name|k2
operator|*=
name|c2
expr_stmt|;
name|k2
operator|=
name|ROTL64
argument_list|(
name|k2
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|k2
operator|*=
name|c1
expr_stmt|;
name|h2
operator|^=
name|k2
expr_stmt|;
name|h2
operator|=
name|ROTL64
argument_list|(
name|h2
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
name|h2
operator|=
name|h2
operator|*
literal|5
operator|+
literal|0x38495ab5
expr_stmt|;
block|}
comment|//----------
comment|// tail
specifier|const
name|uint8_t
modifier|*
name|tail
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
operator|(
name|data
operator|+
name|nblocks
operator|*
literal|16
operator|)
decl_stmt|;
name|uint64_t
name|k1
init|=
literal|0
decl_stmt|;
name|uint64_t
name|k2
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|len
operator|&
literal|15
condition|)
block|{
case|case
literal|15
case|:
name|k2
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|14
index|]
operator|)
operator|<<
literal|48
expr_stmt|;
case|case
literal|14
case|:
name|k2
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|13
index|]
operator|)
operator|<<
literal|40
expr_stmt|;
case|case
literal|13
case|:
name|k2
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|12
index|]
operator|)
operator|<<
literal|32
expr_stmt|;
case|case
literal|12
case|:
name|k2
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|11
index|]
operator|)
operator|<<
literal|24
expr_stmt|;
case|case
literal|11
case|:
name|k2
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|10
index|]
operator|)
operator|<<
literal|16
expr_stmt|;
case|case
literal|10
case|:
name|k2
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|9
index|]
operator|)
operator|<<
literal|8
expr_stmt|;
case|case
literal|9
case|:
name|k2
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|8
index|]
operator|)
operator|<<
literal|0
expr_stmt|;
name|k2
operator|*=
name|c2
expr_stmt|;
name|k2
operator|=
name|ROTL64
argument_list|(
name|k2
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|k2
operator|*=
name|c1
expr_stmt|;
name|h2
operator|^=
name|k2
expr_stmt|;
case|case
literal|8
case|:
name|k1
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|7
index|]
operator|)
operator|<<
literal|56
expr_stmt|;
case|case
literal|7
case|:
name|k1
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|6
index|]
operator|)
operator|<<
literal|48
expr_stmt|;
case|case
literal|6
case|:
name|k1
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|5
index|]
operator|)
operator|<<
literal|40
expr_stmt|;
case|case
literal|5
case|:
name|k1
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|4
index|]
operator|)
operator|<<
literal|32
expr_stmt|;
case|case
literal|4
case|:
name|k1
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|3
index|]
operator|)
operator|<<
literal|24
expr_stmt|;
case|case
literal|3
case|:
name|k1
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|2
index|]
operator|)
operator|<<
literal|16
expr_stmt|;
case|case
literal|2
case|:
name|k1
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|1
index|]
operator|)
operator|<<
literal|8
expr_stmt|;
case|case
literal|1
case|:
name|k1
operator|^=
operator|(
operator|(
name|uint64_t
operator|)
name|tail
index|[
literal|0
index|]
operator|)
operator|<<
literal|0
expr_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|ROTL64
argument_list|(
name|k1
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
block|}
empty_stmt|;
comment|//----------
comment|// finalization
name|h1
operator|^=
name|len
expr_stmt|;
name|h2
operator|^=
name|len
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
name|h1
operator|=
name|fmix64
argument_list|(
name|h1
argument_list|)
expr_stmt|;
name|h2
operator|=
name|fmix64
argument_list|(
name|h2
argument_list|)
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
operator|(
operator|(
name|uint64_t
operator|*
operator|)
name|out
operator|)
index|[
literal|0
index|]
operator|=
name|h1
expr_stmt|;
operator|(
operator|(
name|uint64_t
operator|*
operator|)
name|out
operator|)
index|[
literal|1
index|]
operator|=
name|h2
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
end_unit
