begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Buffer.h: Defines the gl::Buffer class, representing storage of vertex and/or
end_comment
begin_comment
comment|// index data. Implements GL buffer objects and related functionality.
end_comment
begin_comment
comment|// [OpenGL ES 2.0.24] section 2.9 page 21.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_BUFFER_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_BUFFER_H_
define|#
directive|define
name|LIBGLESV2_BUFFER_H_
end_define
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"common/RefCountObject.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/IndexRangeCache.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|Renderer
decl_stmt|;
name|class
name|BufferStorage
decl_stmt|;
name|class
name|StaticIndexBufferInterface
decl_stmt|;
name|class
name|StaticVertexBufferInterface
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Buffer
range|:
name|public
name|RefCountObject
block|{
name|public
operator|:
name|Buffer
argument_list|(
argument|rx::Renderer *renderer
argument_list|,
argument|GLuint id
argument_list|)
block|;
name|virtual
operator|~
name|Buffer
argument_list|()
block|;
name|void
name|bufferData
argument_list|(
argument|const void *data
argument_list|,
argument|GLsizeiptr size
argument_list|,
argument|GLenum usage
argument_list|)
block|;
name|void
name|bufferSubData
argument_list|(
argument|const void *data
argument_list|,
argument|GLsizeiptr size
argument_list|,
argument|GLintptr offset
argument_list|)
block|;
name|GLenum
name|usage
argument_list|()
specifier|const
block|;
name|rx
operator|::
name|BufferStorage
operator|*
name|getStorage
argument_list|()
specifier|const
block|;
name|unsigned
name|int
name|size
argument_list|()
specifier|const
block|;
name|rx
operator|::
name|StaticVertexBufferInterface
operator|*
name|getStaticVertexBuffer
argument_list|()
block|;
name|rx
operator|::
name|StaticIndexBufferInterface
operator|*
name|getStaticIndexBuffer
argument_list|()
block|;
name|void
name|invalidateStaticData
argument_list|()
block|;
name|void
name|promoteStaticUsage
argument_list|(
argument|int dataSize
argument_list|)
block|;
name|rx
operator|::
name|IndexRangeCache
operator|*
name|getIndexRangeCache
argument_list|()
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Buffer
argument_list|)
block|;
name|rx
operator|::
name|Renderer
operator|*
name|mRenderer
block|;
name|GLenum
name|mUsage
block|;
name|rx
operator|::
name|BufferStorage
operator|*
name|mBufferStorage
block|;
name|rx
operator|::
name|IndexRangeCache
name|mIndexRangeCache
block|;
name|rx
operator|::
name|StaticVertexBufferInterface
operator|*
name|mStaticVertexBuffer
block|;
name|rx
operator|::
name|StaticIndexBufferInterface
operator|*
name|mStaticIndexBuffer
block|;
name|unsigned
name|int
name|mUnmodifiedDataUse
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_BUFFER_H_
end_comment
end_unit
