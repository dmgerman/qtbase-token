begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Buffer.h: Defines the gl::Buffer class, representing storage of vertex and/or
end_comment
begin_comment
comment|// index data. Implements GL buffer objects and related functionality.
end_comment
begin_comment
comment|// [OpenGL ES 2.0.24] section 2.9 page 21.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_BUFFER_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_BUFFER_H_
define|#
directive|define
name|LIBGLESV2_BUFFER_H_
end_define
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"common/RefCountObject.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|Renderer
decl_stmt|;
name|class
name|BufferImpl
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Buffer
range|:
name|public
name|RefCountObject
block|{
name|public
operator|:
name|Buffer
argument_list|(
argument|rx::BufferImpl *impl
argument_list|,
argument|GLuint id
argument_list|)
block|;
name|virtual
operator|~
name|Buffer
argument_list|()
block|;
name|void
name|bufferData
argument_list|(
argument|const void *data
argument_list|,
argument|GLsizeiptr size
argument_list|,
argument|GLenum usage
argument_list|)
block|;
name|void
name|bufferSubData
argument_list|(
argument|const void *data
argument_list|,
argument|GLsizeiptr size
argument_list|,
argument|GLintptr offset
argument_list|)
block|;
name|void
name|copyBufferSubData
argument_list|(
argument|Buffer* source
argument_list|,
argument|GLintptr sourceOffset
argument_list|,
argument|GLintptr destOffset
argument_list|,
argument|GLsizeiptr size
argument_list|)
block|;
name|GLvoid
operator|*
name|mapRange
argument_list|(
argument|GLintptr offset
argument_list|,
argument|GLsizeiptr length
argument_list|,
argument|GLbitfield access
argument_list|)
block|;
name|void
name|unmap
argument_list|()
block|;
name|GLenum
name|getUsage
argument_list|()
specifier|const
block|{
return|return
name|mUsage
return|;
block|}
name|GLint
name|getAccessFlags
argument_list|()
specifier|const
block|{
return|return
name|mAccessFlags
return|;
block|}
name|GLboolean
name|isMapped
argument_list|()
specifier|const
block|{
return|return
name|mMapped
return|;
block|}
name|GLvoid
operator|*
name|getMapPointer
argument_list|()
specifier|const
block|{
return|return
name|mMapPointer
return|;
block|}
name|GLint64
name|getMapOffset
argument_list|()
specifier|const
block|{
return|return
name|mMapOffset
return|;
block|}
name|GLint64
name|getMapLength
argument_list|()
specifier|const
block|{
return|return
name|mMapLength
return|;
block|}
name|GLint64
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|mSize
return|;
block|}
name|rx
operator|::
name|BufferImpl
operator|*
name|getImplementation
argument_list|()
specifier|const
block|{
return|return
name|mBuffer
return|;
block|}
name|void
name|markTransformFeedbackUsage
argument_list|()
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Buffer
argument_list|)
block|;
name|rx
operator|::
name|BufferImpl
operator|*
name|mBuffer
block|;
name|GLenum
name|mUsage
block|;
name|GLsizeiptr
name|mSize
block|;
name|GLint
name|mAccessFlags
block|;
name|GLboolean
name|mMapped
block|;
name|GLvoid
operator|*
name|mMapPointer
block|;
name|GLint64
name|mMapOffset
block|;
name|GLint64
name|mMapLength
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_BUFFER_H_
end_comment
end_unit
