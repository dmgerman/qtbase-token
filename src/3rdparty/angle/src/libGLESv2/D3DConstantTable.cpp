begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// D3DConstantTable.cpp: Implements the D3DConstantTable class which parses
end_comment
begin_comment
comment|// information about constants from the CTAB comment in a D3D shader blob.
end_comment
begin_comment
comment|// Restructures the constant table as a hierarchy of constants in the same
end_comment
begin_comment
comment|// way as D3DX.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/D3DConstantTable.h"
end_include
begin_include
include|#
directive|include
file|<d3d9.h>
end_include
begin_include
include|#
directive|include
file|<d3d9types.h>
end_include
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_include
include|#
directive|include
file|<mmsystem.h>
end_include
begin_include
include|#
directive|include
file|"libGLESv2/BinaryStream.h"
end_include
begin_decl_stmt
DECL|variable|SHADER_VERSION_MASK
specifier|const
specifier|static
name|int
name|SHADER_VERSION_MASK
init|=
name|D3DVS_VERSION
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|FOURCC_CTAB
specifier|const
specifier|static
name|int
name|FOURCC_CTAB
init|=
name|MAKEFOURCC
argument_list|(
literal|'C'
argument_list|,
literal|'T'
argument_list|,
literal|'A'
argument_list|,
literal|'B'
argument_list|)
decl_stmt|;
end_decl_stmt
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
comment|// These structs and constants correspond to the format of the constant table in a shader binary.
comment|// They match the corresponding structures in d3dx9shader.h.
DECL|namespace|ctab
namespace|namespace
name|ctab
block|{
DECL|struct|ConstantTable
struct|struct
name|ConstantTable
block|{
DECL|member|size
name|DWORD
name|size
decl_stmt|;
DECL|member|creator
name|DWORD
name|creator
decl_stmt|;
DECL|member|version
name|DWORD
name|version
decl_stmt|;
DECL|member|constants
name|DWORD
name|constants
decl_stmt|;
DECL|member|constantInfos
name|DWORD
name|constantInfos
decl_stmt|;
DECL|member|flags
name|DWORD
name|flags
decl_stmt|;
DECL|member|target
name|DWORD
name|target
decl_stmt|;
block|}
struct|;
DECL|struct|ConstantInfo
struct|struct
name|ConstantInfo
block|{
DECL|member|name
name|DWORD
name|name
decl_stmt|;
DECL|member|registerSet
name|WORD
name|registerSet
decl_stmt|;
DECL|member|registerIndex
name|WORD
name|registerIndex
decl_stmt|;
DECL|member|registerCount
name|WORD
name|registerCount
decl_stmt|;
DECL|member|reserved
name|WORD
name|reserved
decl_stmt|;
DECL|member|typeInfo
name|DWORD
name|typeInfo
decl_stmt|;
DECL|member|defaultValue
name|DWORD
name|defaultValue
decl_stmt|;
block|}
struct|;
DECL|struct|TypeInfo
struct|struct
name|TypeInfo
block|{
DECL|member|typeClass
name|WORD
name|typeClass
decl_stmt|;
DECL|member|type
name|WORD
name|type
decl_stmt|;
DECL|member|rows
name|WORD
name|rows
decl_stmt|;
DECL|member|columns
name|WORD
name|columns
decl_stmt|;
DECL|member|elements
name|WORD
name|elements
decl_stmt|;
DECL|member|structMembers
name|WORD
name|structMembers
decl_stmt|;
DECL|member|structMemberInfos
name|DWORD
name|structMemberInfos
decl_stmt|;
block|}
struct|;
DECL|struct|StructMemberInfo
struct|struct
name|StructMemberInfo
block|{
DECL|member|name
name|DWORD
name|name
decl_stmt|;
DECL|member|typeInfo
name|DWORD
name|typeInfo
decl_stmt|;
block|}
struct|;
block|}
DECL|function|D3DConstant
name|D3DConstant
operator|::
name|D3DConstant
parameter_list|(
specifier|const
name|char
modifier|*
name|base
parameter_list|,
specifier|const
name|ctab
operator|::
name|ConstantInfo
modifier|*
name|constantInfo
parameter_list|)
block|{
specifier|const
name|ctab
operator|::
name|TypeInfo
modifier|*
name|typeInfo
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ctab
operator|::
name|TypeInfo
operator|*
argument_list|>
argument_list|(
name|base
operator|+
name|constantInfo
operator|->
name|typeInfo
argument_list|)
decl_stmt|;
name|name
operator|=
name|base
operator|+
name|constantInfo
operator|->
name|name
expr_stmt|;
name|registerSet
operator|=
cast|static_cast
argument_list|<
name|RegisterSet
argument_list|>
argument_list|(
name|constantInfo
operator|->
name|registerSet
argument_list|)
expr_stmt|;
name|registerIndex
operator|=
name|constantInfo
operator|->
name|registerIndex
expr_stmt|;
name|registerCount
operator|=
name|constantInfo
operator|->
name|registerCount
expr_stmt|;
name|typeClass
operator|=
cast|static_cast
argument_list|<
name|Class
argument_list|>
argument_list|(
name|typeInfo
operator|->
name|typeClass
argument_list|)
expr_stmt|;
name|type
operator|=
cast|static_cast
argument_list|<
name|Type
argument_list|>
argument_list|(
name|typeInfo
operator|->
name|type
argument_list|)
expr_stmt|;
name|rows
operator|=
name|typeInfo
operator|->
name|rows
expr_stmt|;
name|columns
operator|=
name|typeInfo
operator|->
name|columns
expr_stmt|;
name|elements
operator|=
name|typeInfo
operator|->
name|elements
expr_stmt|;
if|if
condition|(
name|typeClass
operator|==
name|CLASS_STRUCT
condition|)
block|{
name|addStructMembers
argument_list|(
name|base
argument_list|,
name|registerSet
argument_list|,
name|registerIndex
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|D3DConstant
name|D3DConstant
operator|::
name|D3DConstant
parameter_list|(
specifier|const
name|char
modifier|*
name|base
parameter_list|,
name|RegisterSet
name|registerSet
parameter_list|,
name|unsigned
name|registerIndex
parameter_list|,
specifier|const
name|ctab
operator|::
name|StructMemberInfo
modifier|*
name|memberInfo
parameter_list|)
member_init_list|:
name|registerSet
argument_list|(
name|registerSet
argument_list|)
member_init_list|,
name|registerIndex
argument_list|(
name|registerIndex
argument_list|)
block|{
specifier|const
name|ctab
operator|::
name|TypeInfo
modifier|*
name|typeInfo
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ctab
operator|::
name|TypeInfo
operator|*
argument_list|>
argument_list|(
name|base
operator|+
name|memberInfo
operator|->
name|typeInfo
argument_list|)
decl_stmt|;
name|name
operator|=
name|base
operator|+
name|memberInfo
operator|->
name|name
expr_stmt|;
name|registerCount
operator|=
name|typeInfo
operator|->
name|rows
operator|*
name|typeInfo
operator|->
name|elements
expr_stmt|;
name|typeClass
operator|=
cast|static_cast
argument_list|<
name|Class
argument_list|>
argument_list|(
name|typeInfo
operator|->
name|typeClass
argument_list|)
expr_stmt|;
name|type
operator|=
cast|static_cast
argument_list|<
name|Type
argument_list|>
argument_list|(
name|typeInfo
operator|->
name|type
argument_list|)
expr_stmt|;
name|rows
operator|=
name|typeInfo
operator|->
name|rows
expr_stmt|;
name|columns
operator|=
name|typeInfo
operator|->
name|columns
expr_stmt|;
name|elements
operator|=
name|typeInfo
operator|->
name|elements
expr_stmt|;
if|if
condition|(
name|typeClass
operator|==
name|CLASS_STRUCT
condition|)
block|{
name|registerCount
operator|=
name|addStructMembers
argument_list|(
name|base
argument_list|,
name|registerSet
argument_list|,
name|registerIndex
argument_list|,
name|typeInfo
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|~D3DConstant
name|D3DConstant
operator|::
name|~
name|D3DConstant
parameter_list|()
block|{
for|for
control|(
name|size_t
name|j
init|=
literal|0
init|;
name|j
operator|<
name|structMembers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|structMembers
index|[
name|j
index|]
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
operator|delete
name|structMembers
index|[
name|j
index|]
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
DECL|function|addStructMembers
name|unsigned
name|D3DConstant
operator|::
name|addStructMembers
parameter_list|(
specifier|const
name|char
modifier|*
name|base
parameter_list|,
name|RegisterSet
name|registerSet
parameter_list|,
name|unsigned
name|registerIndex
parameter_list|,
specifier|const
name|ctab
operator|::
name|TypeInfo
modifier|*
name|typeInfo
parameter_list|)
block|{
specifier|const
name|ctab
operator|::
name|StructMemberInfo
modifier|*
name|memberInfos
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ctab
operator|::
name|StructMemberInfo
operator|*
argument_list|>
argument_list|(
name|base
operator|+
name|typeInfo
operator|->
name|structMemberInfos
argument_list|)
decl_stmt|;
name|unsigned
name|memberIndex
init|=
name|registerIndex
decl_stmt|;
name|structMembers
operator|.
name|resize
argument_list|(
name|elements
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|j
init|=
literal|0
init|;
name|j
operator|<
name|elements
condition|;
operator|++
name|j
control|)
block|{
name|structMembers
index|[
name|j
index|]
operator|.
name|resize
argument_list|(
name|typeInfo
operator|->
name|structMembers
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeInfo
operator|->
name|structMembers
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|ctab
operator|::
name|TypeInfo
modifier|*
name|memberTypeInfo
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ctab
operator|::
name|TypeInfo
operator|*
argument_list|>
argument_list|(
name|base
operator|+
name|memberInfos
index|[
name|i
index|]
operator|.
name|typeInfo
argument_list|)
decl_stmt|;
name|D3DConstant
modifier|*
name|member
init|=
operator|new
name|D3DConstant
argument_list|(
name|base
argument_list|,
name|registerSet
argument_list|,
name|memberIndex
argument_list|,
name|memberInfos
operator|+
name|i
argument_list|)
decl_stmt|;
name|memberIndex
operator|+=
name|member
operator|->
name|registerCount
expr_stmt|;
name|structMembers
index|[
name|j
index|]
index|[
name|i
index|]
operator|=
name|member
expr_stmt|;
block|}
block|}
return|return
name|memberIndex
operator|-
name|registerIndex
return|;
block|}
DECL|function|D3DConstantTable
name|D3DConstantTable
operator|::
name|D3DConstantTable
parameter_list|(
name|void
modifier|*
name|blob
parameter_list|,
name|size_t
name|size
parameter_list|)
member_init_list|:
name|mError
argument_list|(
literal|false
argument_list|)
block|{
name|BinaryInputStream
name|stream
argument_list|(
name|blob
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|int
name|version
decl_stmt|;
name|stream
operator|.
name|read
argument_list|(
operator|&
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|version
operator|&
name|SHADER_VERSION_MASK
operator|)
operator|!=
name|SHADER_VERSION_MASK
condition|)
block|{
name|mError
operator|=
literal|true
expr_stmt|;
return|return;
block|}
specifier|const
name|ctab
operator|::
name|ConstantTable
modifier|*
name|constantTable
init|=
name|NULL
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|error
argument_list|()
condition|)
block|{
name|int
name|token
decl_stmt|;
name|stream
operator|.
name|read
argument_list|(
operator|&
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|token
operator|&
name|D3DSI_OPCODE_MASK
operator|)
operator|==
name|D3DSIO_COMMENT
condition|)
block|{
name|size_t
name|length
init|=
operator|(
operator|(
name|token
operator|&
name|D3DSI_COMMENTSIZE_MASK
operator|)
operator|>>
name|D3DSI_COMMENTSIZE_SHIFT
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|DWORD
argument_list|)
decl_stmt|;
name|int
name|fourcc
decl_stmt|;
name|stream
operator|.
name|read
argument_list|(
operator|&
name|fourcc
argument_list|)
expr_stmt|;
if|if
condition|(
name|fourcc
operator|==
name|FOURCC_CTAB
condition|)
block|{
name|constantTable
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ctab
operator|::
name|ConstantTable
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|blob
argument_list|)
operator|+
name|stream
operator|.
name|offset
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|stream
operator|.
name|skip
argument_list|(
name|length
operator|-
sizeof|sizeof
argument_list|(
name|fourcc
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|D3DSIO_END
condition|)
block|{
break|break;
block|}
block|}
name|mError
operator|=
operator|!
name|constantTable
operator|||
name|stream
operator|.
name|error
argument_list|()
expr_stmt|;
if|if
condition|(
name|mError
condition|)
block|{
return|return;
block|}
specifier|const
name|char
modifier|*
name|base
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|constantTable
argument_list|)
decl_stmt|;
name|mConstants
operator|.
name|resize
argument_list|(
name|constantTable
operator|->
name|constants
argument_list|)
expr_stmt|;
specifier|const
name|ctab
operator|::
name|ConstantInfo
modifier|*
name|constantInfos
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|ctab
operator|::
name|ConstantInfo
operator|*
argument_list|>
argument_list|(
name|base
operator|+
name|constantTable
operator|->
name|constantInfos
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|constantTable
operator|->
name|constants
condition|;
operator|++
name|i
control|)
block|{
name|mConstants
index|[
name|i
index|]
operator|=
operator|new
name|D3DConstant
argument_list|(
name|base
argument_list|,
name|constantInfos
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|~D3DConstantTable
name|D3DConstantTable
operator|::
name|~
name|D3DConstantTable
parameter_list|()
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mConstants
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
operator|delete
name|mConstants
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
DECL|function|getConstant
specifier|const
name|D3DConstant
modifier|*
name|D3DConstantTable
operator|::
name|getConstant
parameter_list|(
name|unsigned
name|index
parameter_list|)
specifier|const
block|{
return|return
name|mConstants
index|[
name|index
index|]
return|;
block|}
DECL|function|getConstantByName
specifier|const
name|D3DConstant
modifier|*
name|D3DConstantTable
operator|::
name|getConstantByName
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
specifier|const
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mConstants
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|D3DConstant
modifier|*
name|constant
init|=
name|getConstant
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|constant
operator|->
name|name
operator|==
name|name
condition|)
block|{
return|return
name|constant
return|;
block|}
block|}
return|return
name|NULL
return|;
block|}
block|}
end_namespace
end_unit
