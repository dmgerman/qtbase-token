begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// FramebufferAttachment.h: Defines the wrapper class gl::FramebufferAttachment, as well as the
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4.3 page 108.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_FRAMEBUFFERATTACHMENT_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_FRAMEBUFFERATTACHMENT_H_
define|#
directive|define
name|LIBGLESV2_FRAMEBUFFERATTACHMENT_H_
end_define
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"common/RefCountObject.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|Renderer
decl_stmt|;
name|class
name|RenderTarget
decl_stmt|;
name|class
name|TextureStorage
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Texture2D
decl_stmt|;
name|class
name|TextureCubeMap
decl_stmt|;
name|class
name|Texture3D
decl_stmt|;
name|class
name|Texture2DArray
decl_stmt|;
name|class
name|Renderbuffer
decl_stmt|;
comment|// FramebufferAttachment implements a GL framebuffer attachment.
comment|// Attachments are "light" containers, which store pointers to ref-counted GL objects.
comment|// We support GL texture (2D/3D/Cube/2D array) and renderbuffer object attachments.
comment|// Note: Our old naming scheme used the term "Renderbuffer" for both GL renderbuffers and for
comment|// framebuffer attachments, which confused their usage.
name|class
name|FramebufferAttachment
block|{
name|public
label|:
name|FramebufferAttachment
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|FramebufferAttachment
argument_list|()
expr_stmt|;
comment|// Helper methods
name|GLuint
name|getRedSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getGreenSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getBlueSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getAlphaSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getDepthSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getStencilSize
argument_list|()
specifier|const
expr_stmt|;
name|GLenum
name|getComponentType
argument_list|()
specifier|const
expr_stmt|;
name|GLenum
name|getColorEncoding
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isTexture
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isTextureWithId
argument_list|(
name|GLuint
name|textureId
argument_list|)
decl|const
block|{
return|return
name|isTexture
argument_list|()
operator|&&
name|id
argument_list|()
operator|==
name|textureId
return|;
block|}
name|bool
name|isRenderbufferWithId
argument_list|(
name|GLuint
name|renderbufferId
argument_list|)
decl|const
block|{
return|return
operator|!
name|isTexture
argument_list|()
operator|&&
name|id
argument_list|()
operator|==
name|renderbufferId
return|;
block|}
comment|// Child class interface
name|virtual
name|rx
operator|::
name|RenderTarget
operator|*
name|getRenderTarget
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|rx
operator|::
name|RenderTarget
operator|*
name|getDepthStencil
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|rx
operator|::
name|TextureStorage
operator|*
name|getTextureStorage
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLenum
name|getActualFormat
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLuint
name|id
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLenum
name|type
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLint
name|mipLevel
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLint
name|layer
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|unsigned
name|int
name|getTextureSerial
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|FramebufferAttachment
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|class
name|Texture2DAttachment
range|:
name|public
name|FramebufferAttachment
block|{
name|public
operator|:
name|Texture2DAttachment
argument_list|(
argument|Texture2D *texture
argument_list|,
argument|GLint level
argument_list|)
block|;
name|virtual
operator|~
name|Texture2DAttachment
argument_list|()
block|;
name|rx
operator|::
name|RenderTarget
operator|*
name|getRenderTarget
argument_list|()
block|;
name|rx
operator|::
name|RenderTarget
operator|*
name|getDepthStencil
argument_list|()
block|;
name|rx
operator|::
name|TextureStorage
operator|*
name|getTextureStorage
argument_list|()
block|;
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getActualFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
block|;
name|virtual
name|GLuint
name|id
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|type
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|mipLevel
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|layer
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|int
name|getTextureSerial
argument_list|()
specifier|const
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Texture2DAttachment
argument_list|)
block|;
name|BindingPointer
operator|<
name|Texture2D
operator|>
name|mTexture2D
block|;
specifier|const
name|GLint
name|mLevel
block|; }
decl_stmt|;
name|class
name|TextureCubeMapAttachment
range|:
name|public
name|FramebufferAttachment
block|{
name|public
operator|:
name|TextureCubeMapAttachment
argument_list|(
argument|TextureCubeMap *texture
argument_list|,
argument|GLenum faceTarget
argument_list|,
argument|GLint level
argument_list|)
block|;
name|virtual
operator|~
name|TextureCubeMapAttachment
argument_list|()
block|;
name|rx
operator|::
name|RenderTarget
operator|*
name|getRenderTarget
argument_list|()
block|;
name|rx
operator|::
name|RenderTarget
operator|*
name|getDepthStencil
argument_list|()
block|;
name|rx
operator|::
name|TextureStorage
operator|*
name|getTextureStorage
argument_list|()
block|;
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getActualFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
block|;
name|virtual
name|GLuint
name|id
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|type
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|mipLevel
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|layer
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|int
name|getTextureSerial
argument_list|()
specifier|const
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|TextureCubeMapAttachment
argument_list|)
block|;
name|BindingPointer
operator|<
name|TextureCubeMap
operator|>
name|mTextureCubeMap
block|;
specifier|const
name|GLint
name|mLevel
block|;
specifier|const
name|GLenum
name|mFaceTarget
block|; }
decl_stmt|;
name|class
name|Texture3DAttachment
range|:
name|public
name|FramebufferAttachment
block|{
name|public
operator|:
name|Texture3DAttachment
argument_list|(
argument|Texture3D *texture
argument_list|,
argument|GLint level
argument_list|,
argument|GLint layer
argument_list|)
block|;
name|virtual
operator|~
name|Texture3DAttachment
argument_list|()
block|;
name|rx
operator|::
name|RenderTarget
operator|*
name|getRenderTarget
argument_list|()
block|;
name|rx
operator|::
name|RenderTarget
operator|*
name|getDepthStencil
argument_list|()
block|;
name|rx
operator|::
name|TextureStorage
operator|*
name|getTextureStorage
argument_list|()
block|;
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getActualFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
block|;
name|virtual
name|GLuint
name|id
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|type
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|mipLevel
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|layer
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|int
name|getTextureSerial
argument_list|()
specifier|const
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Texture3DAttachment
argument_list|)
block|;
name|BindingPointer
operator|<
name|Texture3D
operator|>
name|mTexture3D
block|;
specifier|const
name|GLint
name|mLevel
block|;
specifier|const
name|GLint
name|mLayer
block|; }
decl_stmt|;
name|class
name|Texture2DArrayAttachment
range|:
name|public
name|FramebufferAttachment
block|{
name|public
operator|:
name|Texture2DArrayAttachment
argument_list|(
argument|Texture2DArray *texture
argument_list|,
argument|GLint level
argument_list|,
argument|GLint layer
argument_list|)
block|;
name|virtual
operator|~
name|Texture2DArrayAttachment
argument_list|()
block|;
name|rx
operator|::
name|RenderTarget
operator|*
name|getRenderTarget
argument_list|()
block|;
name|rx
operator|::
name|RenderTarget
operator|*
name|getDepthStencil
argument_list|()
block|;
name|rx
operator|::
name|TextureStorage
operator|*
name|getTextureStorage
argument_list|()
block|;
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getActualFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
block|;
name|virtual
name|GLuint
name|id
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|type
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|mipLevel
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|layer
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|int
name|getTextureSerial
argument_list|()
specifier|const
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Texture2DArrayAttachment
argument_list|)
block|;
name|BindingPointer
operator|<
name|Texture2DArray
operator|>
name|mTexture2DArray
block|;
specifier|const
name|GLint
name|mLevel
block|;
specifier|const
name|GLint
name|mLayer
block|; }
decl_stmt|;
name|class
name|RenderbufferAttachment
range|:
name|public
name|FramebufferAttachment
block|{
name|public
operator|:
name|RenderbufferAttachment
argument_list|(
name|Renderbuffer
operator|*
name|renderbuffer
argument_list|)
block|;
name|virtual
operator|~
name|RenderbufferAttachment
argument_list|()
block|;
name|rx
operator|::
name|RenderTarget
operator|*
name|getRenderTarget
argument_list|()
block|;
name|rx
operator|::
name|RenderTarget
operator|*
name|getDepthStencil
argument_list|()
block|;
name|rx
operator|::
name|TextureStorage
operator|*
name|getTextureStorage
argument_list|()
block|;
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getActualFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
block|;
name|virtual
name|GLuint
name|id
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|type
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|mipLevel
argument_list|()
specifier|const
block|;
name|virtual
name|GLint
name|layer
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|int
name|getTextureSerial
argument_list|()
specifier|const
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|RenderbufferAttachment
argument_list|)
block|;
name|BindingPointer
operator|<
name|Renderbuffer
operator|>
name|mRenderbuffer
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_FRAMEBUFFERATTACHMENT_H_
end_comment
end_unit
