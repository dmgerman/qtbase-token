begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// utilities.cpp: Conversion functions and other utility routines.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/mathutil.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|UniformComponentCount
name|int
name|UniformComponentCount
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_BOOL
case|:
case|case
name|GL_FLOAT
case|:
case|case
name|GL_INT
case|:
case|case
name|GL_SAMPLER_2D
case|:
case|case
name|GL_SAMPLER_CUBE
case|:
return|return
literal|1
return|;
case|case
name|GL_BOOL_VEC2
case|:
case|case
name|GL_FLOAT_VEC2
case|:
case|case
name|GL_INT_VEC2
case|:
return|return
literal|2
return|;
case|case
name|GL_INT_VEC3
case|:
case|case
name|GL_FLOAT_VEC3
case|:
case|case
name|GL_BOOL_VEC3
case|:
return|return
literal|3
return|;
case|case
name|GL_BOOL_VEC4
case|:
case|case
name|GL_FLOAT_VEC4
case|:
case|case
name|GL_INT_VEC4
case|:
case|case
name|GL_FLOAT_MAT2
case|:
return|return
literal|4
return|;
case|case
name|GL_FLOAT_MAT3
case|:
return|return
literal|9
return|;
case|case
name|GL_FLOAT_MAT4
case|:
return|return
literal|16
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|UniformComponentType
name|GLenum
name|UniformComponentType
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_BOOL
case|:
case|case
name|GL_BOOL_VEC2
case|:
case|case
name|GL_BOOL_VEC3
case|:
case|case
name|GL_BOOL_VEC4
case|:
return|return
name|GL_BOOL
return|;
case|case
name|GL_FLOAT
case|:
case|case
name|GL_FLOAT_VEC2
case|:
case|case
name|GL_FLOAT_VEC3
case|:
case|case
name|GL_FLOAT_VEC4
case|:
case|case
name|GL_FLOAT_MAT2
case|:
case|case
name|GL_FLOAT_MAT3
case|:
case|case
name|GL_FLOAT_MAT4
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|GL_INT
case|:
case|case
name|GL_SAMPLER_2D
case|:
case|case
name|GL_SAMPLER_CUBE
case|:
case|case
name|GL_INT_VEC2
case|:
case|case
name|GL_INT_VEC3
case|:
case|case
name|GL_INT_VEC4
case|:
return|return
name|GL_INT
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|GL_NONE
return|;
block|}
DECL|function|UniformComponentSize
name|size_t
name|UniformComponentSize
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_BOOL
case|:
return|return
sizeof|sizeof
argument_list|(
name|GLint
argument_list|)
return|;
case|case
name|GL_FLOAT
case|:
return|return
sizeof|sizeof
argument_list|(
name|GLfloat
argument_list|)
return|;
case|case
name|GL_INT
case|:
return|return
sizeof|sizeof
argument_list|(
name|GLint
argument_list|)
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|UniformInternalSize
name|size_t
name|UniformInternalSize
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
comment|// Expanded to 4-element vectors
return|return
name|UniformComponentSize
argument_list|(
name|UniformComponentType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|*
name|VariableRowCount
argument_list|(
name|type
argument_list|)
operator|*
literal|4
return|;
block|}
DECL|function|UniformExternalSize
name|size_t
name|UniformExternalSize
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
return|return
name|UniformComponentSize
argument_list|(
name|UniformComponentType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|*
name|UniformComponentCount
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|function|VariableRowCount
name|int
name|VariableRowCount
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_NONE
case|:
return|return
literal|0
return|;
case|case
name|GL_BOOL
case|:
case|case
name|GL_FLOAT
case|:
case|case
name|GL_INT
case|:
case|case
name|GL_BOOL_VEC2
case|:
case|case
name|GL_FLOAT_VEC2
case|:
case|case
name|GL_INT_VEC2
case|:
case|case
name|GL_INT_VEC3
case|:
case|case
name|GL_FLOAT_VEC3
case|:
case|case
name|GL_BOOL_VEC3
case|:
case|case
name|GL_BOOL_VEC4
case|:
case|case
name|GL_FLOAT_VEC4
case|:
case|case
name|GL_INT_VEC4
case|:
case|case
name|GL_SAMPLER_2D
case|:
case|case
name|GL_SAMPLER_CUBE
case|:
return|return
literal|1
return|;
case|case
name|GL_FLOAT_MAT2
case|:
return|return
literal|2
return|;
case|case
name|GL_FLOAT_MAT3
case|:
return|return
literal|3
return|;
case|case
name|GL_FLOAT_MAT4
case|:
return|return
literal|4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|VariableColumnCount
name|int
name|VariableColumnCount
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_NONE
case|:
return|return
literal|0
return|;
case|case
name|GL_BOOL
case|:
case|case
name|GL_FLOAT
case|:
case|case
name|GL_INT
case|:
case|case
name|GL_SAMPLER_2D
case|:
case|case
name|GL_SAMPLER_CUBE
case|:
return|return
literal|1
return|;
case|case
name|GL_BOOL_VEC2
case|:
case|case
name|GL_FLOAT_VEC2
case|:
case|case
name|GL_INT_VEC2
case|:
case|case
name|GL_FLOAT_MAT2
case|:
return|return
literal|2
return|;
case|case
name|GL_INT_VEC3
case|:
case|case
name|GL_FLOAT_VEC3
case|:
case|case
name|GL_BOOL_VEC3
case|:
case|case
name|GL_FLOAT_MAT3
case|:
return|return
literal|3
return|;
case|case
name|GL_BOOL_VEC4
case|:
case|case
name|GL_FLOAT_VEC4
case|:
case|case
name|GL_INT_VEC4
case|:
case|case
name|GL_FLOAT_MAT4
case|:
return|return
literal|4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|AllocateFirstFreeBits
name|int
name|AllocateFirstFreeBits
parameter_list|(
name|unsigned
name|int
modifier|*
name|bits
parameter_list|,
name|unsigned
name|int
name|allocationSize
parameter_list|,
name|unsigned
name|int
name|bitsSize
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|allocationSize
operator|<=
name|bitsSize
argument_list|)
expr_stmt|;
name|unsigned
name|int
name|mask
init|=
name|std
operator|::
name|numeric_limits
argument_list|<
name|unsigned
name|int
argument_list|>
operator|::
name|max
argument_list|()
operator|>>
operator|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|unsigned
name|int
argument_list|>
operator|::
name|digits
operator|-
name|allocationSize
operator|)
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bitsSize
operator|-
name|allocationSize
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|bits
operator|&
name|mask
operator|)
operator|==
literal|0
condition|)
block|{
operator|*
name|bits
operator||=
name|mask
expr_stmt|;
return|return
name|i
return|;
block|}
name|mask
operator|<<=
literal|1
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|function|ComputePitch
name|GLsizei
name|ComputePitch
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLint
name|internalformat
parameter_list|,
name|GLint
name|alignment
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|alignment
operator|>
literal|0
operator|&&
name|isPow2
argument_list|(
name|alignment
argument_list|)
argument_list|)
expr_stmt|;
name|GLsizei
name|rawPitch
init|=
name|ComputePixelSize
argument_list|(
name|internalformat
argument_list|)
operator|*
name|width
decl_stmt|;
return|return
operator|(
name|rawPitch
operator|+
name|alignment
operator|-
literal|1
operator|)
operator|&
operator|~
operator|(
name|alignment
operator|-
literal|1
operator|)
return|;
block|}
DECL|function|ComputeCompressedPitch
name|GLsizei
name|ComputeCompressedPitch
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLenum
name|internalformat
parameter_list|)
block|{
return|return
name|ComputeCompressedSize
argument_list|(
name|width
argument_list|,
literal|1
argument_list|,
name|internalformat
argument_list|)
return|;
block|}
DECL|function|ComputeCompressedSize
name|GLsizei
name|ComputeCompressedSize
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
return|return
literal|8
operator|*
operator|(
operator|(
name|width
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
operator|*
operator|(
operator|(
name|height
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
return|;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
return|return
literal|16
operator|*
operator|(
operator|(
name|width
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
operator|*
operator|(
operator|(
name|height
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|function|ComputeTypeSize
name|GLsizei
name|ComputeTypeSize
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_BYTE
case|:
return|return
literal|1
return|;
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
literal|1
return|;
case|case
name|GL_SHORT
case|:
return|return
literal|2
return|;
case|case
name|GL_UNSIGNED_SHORT
case|:
return|return
literal|2
return|;
case|case
name|GL_INT
case|:
return|return
literal|4
return|;
case|case
name|GL_UNSIGNED_INT
case|:
return|return
literal|4
return|;
case|case
name|GL_FLOAT
case|:
return|return
literal|4
return|;
case|case
name|GL_HALF_FLOAT_OES
case|:
return|return
literal|2
return|;
case|case
name|GL_UNSIGNED_SHORT_5_6_5
case|:
return|return
literal|2
return|;
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4
case|:
return|return
literal|2
return|;
case|case
name|GL_UNSIGNED_SHORT_5_5_5_1
case|:
return|return
literal|2
return|;
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
case|:
return|return
literal|2
return|;
case|case
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
case|:
return|return
literal|2
return|;
case|case
name|GL_UNSIGNED_INT_2_10_10_10_REV_EXT
case|:
return|return
literal|4
return|;
case|case
name|GL_UNSIGNED_INT_24_8_OES
case|:
return|return
literal|4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|IsCompressed
name|bool
name|IsCompressed
parameter_list|(
name|GLenum
name|format
parameter_list|)
block|{
if|if
condition|(
name|format
operator|==
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
operator|||
name|format
operator|==
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
operator|||
name|format
operator|==
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
operator|||
name|format
operator|==
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|function|IsDepthTexture
name|bool
name|IsDepthTexture
parameter_list|(
name|GLenum
name|format
parameter_list|)
block|{
if|if
condition|(
name|format
operator|==
name|GL_DEPTH_COMPONENT
operator|||
name|format
operator|==
name|GL_DEPTH_STENCIL_OES
operator|||
name|format
operator|==
name|GL_DEPTH_COMPONENT16
operator|||
name|format
operator|==
name|GL_DEPTH_COMPONENT32_OES
operator|||
name|format
operator|==
name|GL_DEPTH24_STENCIL8_OES
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|IsStencilTexture
name|bool
name|IsStencilTexture
parameter_list|(
name|GLenum
name|format
parameter_list|)
block|{
if|if
condition|(
name|format
operator|==
name|GL_DEPTH_STENCIL_OES
operator|||
name|format
operator|==
name|GL_DEPTH24_STENCIL8_OES
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|MakeValidSize
name|void
name|MakeValidSize
parameter_list|(
name|bool
name|isImage
parameter_list|,
name|bool
name|isCompressed
parameter_list|,
name|GLsizei
modifier|*
name|requestWidth
parameter_list|,
name|GLsizei
modifier|*
name|requestHeight
parameter_list|,
name|int
modifier|*
name|levelOffset
parameter_list|)
block|{
name|int
name|upsampleCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isCompressed
condition|)
block|{
comment|// Don't expand the size of full textures that are at least 4x4
comment|// already.
if|if
condition|(
name|isImage
operator|||
operator|*
name|requestWidth
operator|<
literal|4
operator|||
operator|*
name|requestHeight
operator|<
literal|4
condition|)
block|{
while|while
condition|(
operator|*
name|requestWidth
operator|%
literal|4
operator|!=
literal|0
operator|||
operator|*
name|requestHeight
operator|%
literal|4
operator|!=
literal|0
condition|)
block|{
operator|*
name|requestWidth
operator|<<=
literal|1
expr_stmt|;
operator|*
name|requestHeight
operator|<<=
literal|1
expr_stmt|;
name|upsampleCount
operator|++
expr_stmt|;
block|}
block|}
block|}
operator|*
name|levelOffset
operator|=
name|upsampleCount
expr_stmt|;
block|}
comment|// Returns the size, in bytes, of a single texel in an Image
DECL|function|ComputePixelSize
name|int
name|ComputePixelSize
parameter_list|(
name|GLint
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_ALPHA8_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|char
operator|)
return|;
case|case
name|GL_LUMINANCE8_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|char
operator|)
return|;
case|case
name|GL_ALPHA32F_EXT
case|:
return|return
sizeof|sizeof
argument_list|(
name|float
argument_list|)
return|;
case|case
name|GL_LUMINANCE32F_EXT
case|:
return|return
sizeof|sizeof
argument_list|(
name|float
argument_list|)
return|;
case|case
name|GL_ALPHA16F_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
case|case
name|GL_LUMINANCE16F_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
case|case
name|GL_LUMINANCE8_ALPHA8_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|char
operator|)
operator|*
literal|2
return|;
case|case
name|GL_LUMINANCE_ALPHA32F_EXT
case|:
return|return
sizeof|sizeof
argument_list|(
name|float
argument_list|)
operator|*
literal|2
return|;
case|case
name|GL_LUMINANCE_ALPHA16F_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
operator|*
literal|2
return|;
case|case
name|GL_RGB8_OES
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|char
operator|)
operator|*
literal|3
return|;
case|case
name|GL_RGB565
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
case|case
name|GL_RGB32F_EXT
case|:
return|return
sizeof|sizeof
argument_list|(
name|float
argument_list|)
operator|*
literal|3
return|;
case|case
name|GL_RGB16F_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
operator|*
literal|3
return|;
case|case
name|GL_RGBA8_OES
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|char
operator|)
operator|*
literal|4
return|;
case|case
name|GL_RGBA4
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
case|case
name|GL_RGB5_A1
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
case|case
name|GL_RGBA32F_EXT
case|:
return|return
sizeof|sizeof
argument_list|(
name|float
argument_list|)
operator|*
literal|4
return|;
case|case
name|GL_RGBA16F_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
operator|*
literal|4
return|;
case|case
name|GL_BGRA8_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|char
operator|)
operator|*
literal|4
return|;
case|case
name|GL_BGRA4_ANGLEX
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
case|case
name|GL_BGR5_A1_ANGLEX
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|IsCubemapTextureTarget
name|bool
name|IsCubemapTextureTarget
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
return|return
operator|(
name|target
operator|>=
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|&&
name|target
operator|<=
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
operator|)
return|;
block|}
DECL|function|IsInternalTextureTarget
name|bool
name|IsInternalTextureTarget
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
return|return
name|target
operator|==
name|GL_TEXTURE_2D
operator|||
name|IsCubemapTextureTarget
argument_list|(
name|target
argument_list|)
return|;
block|}
DECL|function|ConvertSizedInternalFormat
name|GLint
name|ConvertSizedInternalFormat
parameter_list|(
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|GL_ALPHA
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
name|GL_ALPHA8_EXT
return|;
case|case
name|GL_FLOAT
case|:
return|return
name|GL_ALPHA32F_EXT
return|;
case|case
name|GL_HALF_FLOAT_OES
case|:
return|return
name|GL_ALPHA16F_EXT
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_LUMINANCE
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
name|GL_LUMINANCE8_EXT
return|;
case|case
name|GL_FLOAT
case|:
return|return
name|GL_LUMINANCE32F_EXT
return|;
case|case
name|GL_HALF_FLOAT_OES
case|:
return|return
name|GL_LUMINANCE16F_EXT
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_LUMINANCE_ALPHA
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
name|GL_LUMINANCE8_ALPHA8_EXT
return|;
case|case
name|GL_FLOAT
case|:
return|return
name|GL_LUMINANCE_ALPHA32F_EXT
return|;
case|case
name|GL_HALF_FLOAT_OES
case|:
return|return
name|GL_LUMINANCE_ALPHA16F_EXT
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_RGB
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
name|GL_RGB8_OES
return|;
case|case
name|GL_UNSIGNED_SHORT_5_6_5
case|:
return|return
name|GL_RGB565
return|;
case|case
name|GL_FLOAT
case|:
return|return
name|GL_RGB32F_EXT
return|;
case|case
name|GL_HALF_FLOAT_OES
case|:
return|return
name|GL_RGB16F_EXT
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_RGBA
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
name|GL_RGBA8_OES
return|;
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4
case|:
return|return
name|GL_RGBA4
return|;
case|case
name|GL_UNSIGNED_SHORT_5_5_5_1
case|:
return|return
name|GL_RGB5_A1
return|;
case|case
name|GL_FLOAT
case|:
return|return
name|GL_RGBA32F_EXT
return|;
case|case
name|GL_HALF_FLOAT_OES
case|:
return|return
name|GL_RGBA16F_EXT
return|;
break|break;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_BGRA_EXT
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
name|GL_BGRA8_EXT
return|;
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
case|:
return|return
name|GL_BGRA4_ANGLEX
return|;
case|case
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
case|:
return|return
name|GL_BGR5_A1_ANGLEX
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
return|return
name|format
return|;
case|case
name|GL_DEPTH_COMPONENT
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_SHORT
case|:
return|return
name|GL_DEPTH_COMPONENT16
return|;
case|case
name|GL_UNSIGNED_INT
case|:
return|return
name|GL_DEPTH_COMPONENT32_OES
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_DEPTH_STENCIL_OES
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_INT_24_8_OES
case|:
return|return
name|GL_DEPTH24_STENCIL8_OES
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
return|return
name|GL_NONE
return|;
block|}
DECL|function|ExtractFormat
name|GLenum
name|ExtractFormat
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_RGB565
case|:
return|return
name|GL_RGB
return|;
case|case
name|GL_RGBA4
case|:
return|return
name|GL_RGBA
return|;
case|case
name|GL_RGB5_A1
case|:
return|return
name|GL_RGBA
return|;
case|case
name|GL_RGB8_OES
case|:
return|return
name|GL_RGB
return|;
case|case
name|GL_RGBA8_OES
case|:
return|return
name|GL_RGBA
return|;
case|case
name|GL_LUMINANCE8_ALPHA8_EXT
case|:
return|return
name|GL_LUMINANCE_ALPHA
return|;
case|case
name|GL_LUMINANCE8_EXT
case|:
return|return
name|GL_LUMINANCE
return|;
case|case
name|GL_ALPHA8_EXT
case|:
return|return
name|GL_ALPHA
return|;
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
return|return
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
return|;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
return|return
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
return|;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
return|return
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
return|;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
return|return
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
return|;
case|case
name|GL_RGBA32F_EXT
case|:
return|return
name|GL_RGBA
return|;
case|case
name|GL_RGB32F_EXT
case|:
return|return
name|GL_RGB
return|;
case|case
name|GL_ALPHA32F_EXT
case|:
return|return
name|GL_ALPHA
return|;
case|case
name|GL_LUMINANCE32F_EXT
case|:
return|return
name|GL_LUMINANCE
return|;
case|case
name|GL_LUMINANCE_ALPHA32F_EXT
case|:
return|return
name|GL_LUMINANCE_ALPHA
return|;
case|case
name|GL_RGBA16F_EXT
case|:
return|return
name|GL_RGBA
return|;
case|case
name|GL_RGB16F_EXT
case|:
return|return
name|GL_RGB
return|;
case|case
name|GL_ALPHA16F_EXT
case|:
return|return
name|GL_ALPHA
return|;
case|case
name|GL_LUMINANCE16F_EXT
case|:
return|return
name|GL_LUMINANCE
return|;
case|case
name|GL_LUMINANCE_ALPHA16F_EXT
case|:
return|return
name|GL_LUMINANCE_ALPHA
return|;
case|case
name|GL_BGRA8_EXT
case|:
return|return
name|GL_BGRA_EXT
return|;
case|case
name|GL_DEPTH_COMPONENT16
case|:
return|return
name|GL_DEPTH_COMPONENT
return|;
case|case
name|GL_DEPTH_COMPONENT32_OES
case|:
return|return
name|GL_DEPTH_COMPONENT
return|;
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
return|return
name|GL_DEPTH_STENCIL_OES
return|;
default|default:
return|return
name|GL_NONE
return|;
comment|// Unsupported
block|}
block|}
DECL|function|ExtractType
name|GLenum
name|ExtractType
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_RGB565
case|:
return|return
name|GL_UNSIGNED_SHORT_5_6_5
return|;
case|case
name|GL_RGBA4
case|:
return|return
name|GL_UNSIGNED_SHORT_4_4_4_4
return|;
case|case
name|GL_RGB5_A1
case|:
return|return
name|GL_UNSIGNED_SHORT_5_5_5_1
return|;
case|case
name|GL_RGB8_OES
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_RGBA8_OES
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_LUMINANCE8_ALPHA8_EXT
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_LUMINANCE8_EXT
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_ALPHA8_EXT
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_RGBA32F_EXT
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|GL_RGB32F_EXT
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|GL_ALPHA32F_EXT
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|GL_LUMINANCE32F_EXT
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|GL_LUMINANCE_ALPHA32F_EXT
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|GL_RGBA16F_EXT
case|:
return|return
name|GL_HALF_FLOAT_OES
return|;
case|case
name|GL_RGB16F_EXT
case|:
return|return
name|GL_HALF_FLOAT_OES
return|;
case|case
name|GL_ALPHA16F_EXT
case|:
return|return
name|GL_HALF_FLOAT_OES
return|;
case|case
name|GL_LUMINANCE16F_EXT
case|:
return|return
name|GL_HALF_FLOAT_OES
return|;
case|case
name|GL_LUMINANCE_ALPHA16F_EXT
case|:
return|return
name|GL_HALF_FLOAT_OES
return|;
case|case
name|GL_BGRA8_EXT
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_DEPTH_COMPONENT16
case|:
return|return
name|GL_UNSIGNED_SHORT
return|;
case|case
name|GL_DEPTH_COMPONENT32_OES
case|:
return|return
name|GL_UNSIGNED_INT
return|;
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
return|return
name|GL_UNSIGNED_INT_24_8_OES
return|;
default|default:
return|return
name|GL_NONE
return|;
comment|// Unsupported
block|}
block|}
DECL|function|IsColorRenderable
name|bool
name|IsColorRenderable
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_RGBA4
case|:
case|case
name|GL_RGB5_A1
case|:
case|case
name|GL_RGB565
case|:
case|case
name|GL_RGB8_OES
case|:
case|case
name|GL_RGBA8_OES
case|:
return|return
literal|true
return|;
case|case
name|GL_DEPTH_COMPONENT16
case|:
case|case
name|GL_STENCIL_INDEX8
case|:
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
return|return
literal|false
return|;
case|case
name|GL_BGRA8_EXT
case|:
return|return
literal|true
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|IsDepthRenderable
name|bool
name|IsDepthRenderable
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_DEPTH_COMPONENT16
case|:
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
return|return
literal|true
return|;
case|case
name|GL_STENCIL_INDEX8
case|:
case|case
name|GL_RGBA4
case|:
case|case
name|GL_RGB5_A1
case|:
case|case
name|GL_RGB565
case|:
case|case
name|GL_RGB8_OES
case|:
case|case
name|GL_RGBA8_OES
case|:
return|return
literal|false
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|IsStencilRenderable
name|bool
name|IsStencilRenderable
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_STENCIL_INDEX8
case|:
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
return|return
literal|true
return|;
case|case
name|GL_RGBA4
case|:
case|case
name|GL_RGB5_A1
case|:
case|case
name|GL_RGB565
case|:
case|case
name|GL_RGB8_OES
case|:
case|case
name|GL_RGBA8_OES
case|:
case|case
name|GL_DEPTH_COMPONENT16
case|:
return|return
literal|false
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|IsFloat32Format
name|bool
name|IsFloat32Format
parameter_list|(
name|GLint
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_RGBA32F_EXT
case|:
case|case
name|GL_RGB32F_EXT
case|:
case|case
name|GL_ALPHA32F_EXT
case|:
case|case
name|GL_LUMINANCE32F_EXT
case|:
case|case
name|GL_LUMINANCE_ALPHA32F_EXT
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
DECL|function|IsFloat16Format
name|bool
name|IsFloat16Format
parameter_list|(
name|GLint
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_RGBA16F_EXT
case|:
case|case
name|GL_RGB16F_EXT
case|:
case|case
name|GL_ALPHA16F_EXT
case|:
case|case
name|GL_LUMINANCE16F_EXT
case|:
case|case
name|GL_LUMINANCE_ALPHA16F_EXT
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
DECL|function|GetAlphaSize
name|unsigned
name|int
name|GetAlphaSize
parameter_list|(
name|GLenum
name|colorFormat
parameter_list|)
block|{
switch|switch
condition|(
name|colorFormat
condition|)
block|{
case|case
name|GL_RGBA16F_EXT
case|:
return|return
literal|16
return|;
case|case
name|GL_RGBA32F_EXT
case|:
return|return
literal|32
return|;
case|case
name|GL_RGBA4
case|:
return|return
literal|4
return|;
case|case
name|GL_RGBA8_OES
case|:
case|case
name|GL_BGRA8_EXT
case|:
return|return
literal|8
return|;
case|case
name|GL_RGB5_A1
case|:
return|return
literal|1
return|;
case|case
name|GL_RGB8_OES
case|:
case|case
name|GL_RGB565
case|:
case|case
name|GL_RGB32F_EXT
case|:
case|case
name|GL_RGB16F_EXT
case|:
return|return
literal|0
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetRedSize
name|unsigned
name|int
name|GetRedSize
parameter_list|(
name|GLenum
name|colorFormat
parameter_list|)
block|{
switch|switch
condition|(
name|colorFormat
condition|)
block|{
case|case
name|GL_RGBA16F_EXT
case|:
case|case
name|GL_RGB16F_EXT
case|:
return|return
literal|16
return|;
case|case
name|GL_RGBA32F_EXT
case|:
case|case
name|GL_RGB32F_EXT
case|:
return|return
literal|32
return|;
case|case
name|GL_RGBA4
case|:
return|return
literal|4
return|;
case|case
name|GL_RGBA8_OES
case|:
case|case
name|GL_BGRA8_EXT
case|:
case|case
name|GL_RGB8_OES
case|:
return|return
literal|8
return|;
case|case
name|GL_RGB5_A1
case|:
case|case
name|GL_RGB565
case|:
return|return
literal|5
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetGreenSize
name|unsigned
name|int
name|GetGreenSize
parameter_list|(
name|GLenum
name|colorFormat
parameter_list|)
block|{
switch|switch
condition|(
name|colorFormat
condition|)
block|{
case|case
name|GL_RGBA16F_EXT
case|:
case|case
name|GL_RGB16F_EXT
case|:
return|return
literal|16
return|;
case|case
name|GL_RGBA32F_EXT
case|:
case|case
name|GL_RGB32F_EXT
case|:
return|return
literal|32
return|;
case|case
name|GL_RGBA4
case|:
return|return
literal|4
return|;
case|case
name|GL_RGBA8_OES
case|:
case|case
name|GL_BGRA8_EXT
case|:
case|case
name|GL_RGB8_OES
case|:
return|return
literal|8
return|;
case|case
name|GL_RGB5_A1
case|:
return|return
literal|5
return|;
case|case
name|GL_RGB565
case|:
return|return
literal|6
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetBlueSize
name|unsigned
name|int
name|GetBlueSize
parameter_list|(
name|GLenum
name|colorFormat
parameter_list|)
block|{
switch|switch
condition|(
name|colorFormat
condition|)
block|{
case|case
name|GL_RGBA16F_EXT
case|:
case|case
name|GL_RGB16F_EXT
case|:
return|return
literal|16
return|;
case|case
name|GL_RGBA32F_EXT
case|:
case|case
name|GL_RGB32F_EXT
case|:
return|return
literal|32
return|;
case|case
name|GL_RGBA4
case|:
return|return
literal|4
return|;
case|case
name|GL_RGBA8_OES
case|:
case|case
name|GL_BGRA8_EXT
case|:
case|case
name|GL_RGB8_OES
case|:
return|return
literal|8
return|;
case|case
name|GL_RGB5_A1
case|:
case|case
name|GL_RGB565
case|:
return|return
literal|5
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetDepthSize
name|unsigned
name|int
name|GetDepthSize
parameter_list|(
name|GLenum
name|depthFormat
parameter_list|)
block|{
switch|switch
condition|(
name|depthFormat
condition|)
block|{
case|case
name|GL_DEPTH_COMPONENT16
case|:
return|return
literal|16
return|;
case|case
name|GL_DEPTH_COMPONENT32_OES
case|:
return|return
literal|32
return|;
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
return|return
literal|24
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetStencilSize
name|unsigned
name|int
name|GetStencilSize
parameter_list|(
name|GLenum
name|stencilFormat
parameter_list|)
block|{
switch|switch
condition|(
name|stencilFormat
condition|)
block|{
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
return|return
literal|8
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|function|IsTriangleMode
name|bool
name|IsTriangleMode
parameter_list|(
name|GLenum
name|drawMode
parameter_list|)
block|{
switch|switch
condition|(
name|drawMode
condition|)
block|{
case|case
name|GL_TRIANGLES
case|:
case|case
name|GL_TRIANGLE_FAN
case|:
case|case
name|GL_TRIANGLE_STRIP
case|:
return|return
literal|true
return|;
case|case
name|GL_POINTS
case|:
case|case
name|GL_LINES
case|:
case|case
name|GL_LINE_LOOP
case|:
case|case
name|GL_LINE_STRIP
case|:
return|return
literal|false
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_namespace
begin_function
DECL|function|getTempPath
name|std
operator|::
name|string
name|getTempPath
parameter_list|()
block|{
name|char
name|path
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|DWORD
name|pathLen
init|=
name|GetTempPathA
argument_list|(
sizeof|sizeof
argument_list|(
name|path
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|path
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathLen
operator|==
literal|0
condition|)
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|std
operator|::
name|string
argument_list|()
return|;
block|}
name|UINT
name|unique
init|=
name|GetTempFileNameA
argument_list|(
name|path
argument_list|,
literal|"sh"
argument_list|,
literal|0
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|unique
operator|==
literal|0
condition|)
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|std
operator|::
name|string
argument_list|()
return|;
block|}
return|return
name|path
return|;
block|}
end_function
begin_function
DECL|function|writeFile
name|void
name|writeFile
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|void
modifier|*
name|content
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|FILE
modifier|*
name|file
init|=
name|fopen
argument_list|(
name|path
argument_list|,
literal|"w"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
condition|)
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return;
block|}
name|fwrite
argument_list|(
name|content
argument_list|,
sizeof|sizeof
argument_list|(
name|char
argument_list|)
argument_list|,
name|size
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|fclose
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
