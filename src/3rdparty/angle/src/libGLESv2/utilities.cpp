begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// utilities.cpp: Conversion functions and other utility routines.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/utilities.h"
end_include
begin_include
include|#
directive|include
file|<limits>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
comment|// This is how much data the application expects for a uniform
DECL|function|UniformExternalComponentCount
name|int
name|UniformExternalComponentCount
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_BOOL
case|:
case|case
name|GL_FLOAT
case|:
case|case
name|GL_INT
case|:
case|case
name|GL_SAMPLER_2D
case|:
case|case
name|GL_SAMPLER_CUBE
case|:
return|return
literal|1
return|;
case|case
name|GL_BOOL_VEC2
case|:
case|case
name|GL_FLOAT_VEC2
case|:
case|case
name|GL_INT_VEC2
case|:
return|return
literal|2
return|;
case|case
name|GL_INT_VEC3
case|:
case|case
name|GL_FLOAT_VEC3
case|:
case|case
name|GL_BOOL_VEC3
case|:
return|return
literal|3
return|;
case|case
name|GL_BOOL_VEC4
case|:
case|case
name|GL_FLOAT_VEC4
case|:
case|case
name|GL_INT_VEC4
case|:
case|case
name|GL_FLOAT_MAT2
case|:
return|return
literal|4
return|;
case|case
name|GL_FLOAT_MAT3
case|:
return|return
literal|9
return|;
case|case
name|GL_FLOAT_MAT4
case|:
return|return
literal|16
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|// This is how much data we actually store for a uniform
DECL|function|UniformInternalComponentCount
name|int
name|UniformInternalComponentCount
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_BOOL
case|:
case|case
name|GL_INT
case|:
case|case
name|GL_SAMPLER_2D
case|:
case|case
name|GL_SAMPLER_CUBE
case|:
return|return
literal|1
return|;
case|case
name|GL_BOOL_VEC2
case|:
case|case
name|GL_INT_VEC2
case|:
return|return
literal|2
return|;
case|case
name|GL_INT_VEC3
case|:
case|case
name|GL_BOOL_VEC3
case|:
return|return
literal|3
return|;
case|case
name|GL_FLOAT
case|:
case|case
name|GL_FLOAT_VEC2
case|:
case|case
name|GL_FLOAT_VEC3
case|:
case|case
name|GL_BOOL_VEC4
case|:
case|case
name|GL_FLOAT_VEC4
case|:
case|case
name|GL_INT_VEC4
case|:
return|return
literal|4
return|;
case|case
name|GL_FLOAT_MAT2
case|:
return|return
literal|8
return|;
case|case
name|GL_FLOAT_MAT3
case|:
return|return
literal|12
return|;
case|case
name|GL_FLOAT_MAT4
case|:
return|return
literal|16
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|UniformComponentType
name|GLenum
name|UniformComponentType
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_BOOL
case|:
case|case
name|GL_BOOL_VEC2
case|:
case|case
name|GL_BOOL_VEC3
case|:
case|case
name|GL_BOOL_VEC4
case|:
return|return
name|GL_BOOL
return|;
case|case
name|GL_FLOAT
case|:
case|case
name|GL_FLOAT_VEC2
case|:
case|case
name|GL_FLOAT_VEC3
case|:
case|case
name|GL_FLOAT_VEC4
case|:
case|case
name|GL_FLOAT_MAT2
case|:
case|case
name|GL_FLOAT_MAT3
case|:
case|case
name|GL_FLOAT_MAT4
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|GL_INT
case|:
case|case
name|GL_SAMPLER_2D
case|:
case|case
name|GL_SAMPLER_CUBE
case|:
case|case
name|GL_INT_VEC2
case|:
case|case
name|GL_INT_VEC3
case|:
case|case
name|GL_INT_VEC4
case|:
return|return
name|GL_INT
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|GL_NONE
return|;
block|}
DECL|function|UniformComponentSize
name|size_t
name|UniformComponentSize
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_BOOL
case|:
return|return
sizeof|sizeof
argument_list|(
name|GLint
argument_list|)
return|;
case|case
name|GL_FLOAT
case|:
return|return
sizeof|sizeof
argument_list|(
name|GLfloat
argument_list|)
return|;
case|case
name|GL_INT
case|:
return|return
sizeof|sizeof
argument_list|(
name|GLint
argument_list|)
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|UniformInternalSize
name|size_t
name|UniformInternalSize
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
return|return
name|UniformComponentSize
argument_list|(
name|UniformComponentType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|*
name|UniformInternalComponentCount
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|function|UniformExternalSize
name|size_t
name|UniformExternalSize
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
return|return
name|UniformComponentSize
argument_list|(
name|UniformComponentType
argument_list|(
name|type
argument_list|)
argument_list|)
operator|*
name|UniformExternalComponentCount
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|function|VariableRowCount
name|int
name|VariableRowCount
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_NONE
case|:
return|return
literal|0
return|;
case|case
name|GL_BOOL
case|:
case|case
name|GL_FLOAT
case|:
case|case
name|GL_INT
case|:
case|case
name|GL_BOOL_VEC2
case|:
case|case
name|GL_FLOAT_VEC2
case|:
case|case
name|GL_INT_VEC2
case|:
case|case
name|GL_INT_VEC3
case|:
case|case
name|GL_FLOAT_VEC3
case|:
case|case
name|GL_BOOL_VEC3
case|:
case|case
name|GL_BOOL_VEC4
case|:
case|case
name|GL_FLOAT_VEC4
case|:
case|case
name|GL_INT_VEC4
case|:
return|return
literal|1
return|;
case|case
name|GL_FLOAT_MAT2
case|:
return|return
literal|2
return|;
case|case
name|GL_FLOAT_MAT3
case|:
return|return
literal|3
return|;
case|case
name|GL_FLOAT_MAT4
case|:
return|return
literal|4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|VariableColumnCount
name|int
name|VariableColumnCount
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_NONE
case|:
return|return
literal|0
return|;
case|case
name|GL_BOOL
case|:
case|case
name|GL_FLOAT
case|:
case|case
name|GL_INT
case|:
return|return
literal|1
return|;
case|case
name|GL_BOOL_VEC2
case|:
case|case
name|GL_FLOAT_VEC2
case|:
case|case
name|GL_INT_VEC2
case|:
case|case
name|GL_FLOAT_MAT2
case|:
return|return
literal|2
return|;
case|case
name|GL_INT_VEC3
case|:
case|case
name|GL_FLOAT_VEC3
case|:
case|case
name|GL_BOOL_VEC3
case|:
case|case
name|GL_FLOAT_MAT3
case|:
return|return
literal|3
return|;
case|case
name|GL_BOOL_VEC4
case|:
case|case
name|GL_FLOAT_VEC4
case|:
case|case
name|GL_INT_VEC4
case|:
case|case
name|GL_FLOAT_MAT4
case|:
return|return
literal|4
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|AllocateFirstFreeBits
name|int
name|AllocateFirstFreeBits
parameter_list|(
name|unsigned
name|int
modifier|*
name|bits
parameter_list|,
name|unsigned
name|int
name|allocationSize
parameter_list|,
name|unsigned
name|int
name|bitsSize
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|allocationSize
operator|<=
name|bitsSize
argument_list|)
expr_stmt|;
name|unsigned
name|int
name|mask
init|=
name|std
operator|::
name|numeric_limits
argument_list|<
name|unsigned
name|int
argument_list|>
operator|::
name|max
argument_list|()
operator|>>
operator|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|unsigned
name|int
argument_list|>
operator|::
name|digits
operator|-
name|allocationSize
operator|)
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bitsSize
operator|-
name|allocationSize
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|bits
operator|&
name|mask
operator|)
operator|==
literal|0
condition|)
block|{
operator|*
name|bits
operator||=
name|mask
expr_stmt|;
return|return
name|i
return|;
block|}
name|mask
operator|<<=
literal|1
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|function|ComputePitch
name|GLsizei
name|ComputePitch
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLint
name|internalformat
parameter_list|,
name|GLint
name|alignment
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|alignment
operator|>
literal|0
operator|&&
name|isPow2
argument_list|(
name|alignment
argument_list|)
argument_list|)
expr_stmt|;
name|GLsizei
name|rawPitch
init|=
name|ComputePixelSize
argument_list|(
name|internalformat
argument_list|)
operator|*
name|width
decl_stmt|;
return|return
operator|(
name|rawPitch
operator|+
name|alignment
operator|-
literal|1
operator|)
operator|&
operator|~
operator|(
name|alignment
operator|-
literal|1
operator|)
return|;
block|}
DECL|function|ComputeCompressedPitch
name|GLsizei
name|ComputeCompressedPitch
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLenum
name|internalformat
parameter_list|)
block|{
return|return
name|ComputeCompressedSize
argument_list|(
name|width
argument_list|,
literal|1
argument_list|,
name|internalformat
argument_list|)
return|;
block|}
DECL|function|ComputeCompressedSize
name|GLsizei
name|ComputeCompressedSize
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
return|return
literal|8
operator|*
operator|(
operator|(
name|width
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
operator|*
operator|(
operator|(
name|height
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
return|;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
return|return
literal|16
operator|*
operator|(
operator|(
name|width
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
operator|*
operator|(
operator|(
name|height
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|function|IsCompressed
name|bool
name|IsCompressed
parameter_list|(
name|GLenum
name|format
parameter_list|)
block|{
if|if
condition|(
name|format
operator|==
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
operator|||
name|format
operator|==
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
operator|||
name|format
operator|==
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
operator|||
name|format
operator|==
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|function|IsDepthTexture
name|bool
name|IsDepthTexture
parameter_list|(
name|GLenum
name|format
parameter_list|)
block|{
if|if
condition|(
name|format
operator|==
name|GL_DEPTH_COMPONENT
operator|||
name|format
operator|==
name|GL_DEPTH_STENCIL_OES
operator|||
name|format
operator|==
name|GL_DEPTH_COMPONENT16
operator|||
name|format
operator|==
name|GL_DEPTH_COMPONENT32_OES
operator|||
name|format
operator|==
name|GL_DEPTH24_STENCIL8_OES
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|IsStencilTexture
name|bool
name|IsStencilTexture
parameter_list|(
name|GLenum
name|format
parameter_list|)
block|{
if|if
condition|(
name|format
operator|==
name|GL_DEPTH_STENCIL_OES
operator|||
name|format
operator|==
name|GL_DEPTH24_STENCIL8_OES
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|// Returns the size, in bytes, of a single texel in an Image
DECL|function|ComputePixelSize
name|int
name|ComputePixelSize
parameter_list|(
name|GLint
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_ALPHA8_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|char
operator|)
return|;
case|case
name|GL_LUMINANCE8_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|char
operator|)
return|;
case|case
name|GL_ALPHA32F_EXT
case|:
return|return
sizeof|sizeof
argument_list|(
name|float
argument_list|)
return|;
case|case
name|GL_LUMINANCE32F_EXT
case|:
return|return
sizeof|sizeof
argument_list|(
name|float
argument_list|)
return|;
case|case
name|GL_ALPHA16F_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
case|case
name|GL_LUMINANCE16F_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
case|case
name|GL_LUMINANCE8_ALPHA8_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|char
operator|)
operator|*
literal|2
return|;
case|case
name|GL_LUMINANCE_ALPHA32F_EXT
case|:
return|return
sizeof|sizeof
argument_list|(
name|float
argument_list|)
operator|*
literal|2
return|;
case|case
name|GL_LUMINANCE_ALPHA16F_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
operator|*
literal|2
return|;
case|case
name|GL_RGB8_OES
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|char
operator|)
operator|*
literal|3
return|;
case|case
name|GL_RGB565
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
case|case
name|GL_RGB32F_EXT
case|:
return|return
sizeof|sizeof
argument_list|(
name|float
argument_list|)
operator|*
literal|3
return|;
case|case
name|GL_RGB16F_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
operator|*
literal|3
return|;
case|case
name|GL_RGBA8_OES
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|char
operator|)
operator|*
literal|4
return|;
case|case
name|GL_RGBA4
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
case|case
name|GL_RGB5_A1
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
case|case
name|GL_RGBA32F_EXT
case|:
return|return
sizeof|sizeof
argument_list|(
name|float
argument_list|)
operator|*
literal|4
return|;
case|case
name|GL_RGBA16F_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
operator|*
literal|4
return|;
case|case
name|GL_BGRA8_EXT
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|char
operator|)
operator|*
literal|4
return|;
case|case
name|GL_BGRA4_ANGLEX
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
case|case
name|GL_BGR5_A1_ANGLEX
case|:
return|return
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|IsCubemapTextureTarget
name|bool
name|IsCubemapTextureTarget
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
return|return
operator|(
name|target
operator|>=
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|&&
name|target
operator|<=
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
operator|)
return|;
block|}
DECL|function|IsInternalTextureTarget
name|bool
name|IsInternalTextureTarget
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
return|return
name|target
operator|==
name|GL_TEXTURE_2D
operator|||
name|IsCubemapTextureTarget
argument_list|(
name|target
argument_list|)
return|;
block|}
DECL|function|ConvertSizedInternalFormat
name|GLint
name|ConvertSizedInternalFormat
parameter_list|(
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|GL_ALPHA
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
name|GL_ALPHA8_EXT
return|;
case|case
name|GL_FLOAT
case|:
return|return
name|GL_ALPHA32F_EXT
return|;
case|case
name|GL_HALF_FLOAT_OES
case|:
return|return
name|GL_ALPHA16F_EXT
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_LUMINANCE
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
name|GL_LUMINANCE8_EXT
return|;
case|case
name|GL_FLOAT
case|:
return|return
name|GL_LUMINANCE32F_EXT
return|;
case|case
name|GL_HALF_FLOAT_OES
case|:
return|return
name|GL_LUMINANCE16F_EXT
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_LUMINANCE_ALPHA
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
name|GL_LUMINANCE8_ALPHA8_EXT
return|;
case|case
name|GL_FLOAT
case|:
return|return
name|GL_LUMINANCE_ALPHA32F_EXT
return|;
case|case
name|GL_HALF_FLOAT_OES
case|:
return|return
name|GL_LUMINANCE_ALPHA16F_EXT
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_RGB
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
name|GL_RGB8_OES
return|;
case|case
name|GL_UNSIGNED_SHORT_5_6_5
case|:
return|return
name|GL_RGB565
return|;
case|case
name|GL_FLOAT
case|:
return|return
name|GL_RGB32F_EXT
return|;
case|case
name|GL_HALF_FLOAT_OES
case|:
return|return
name|GL_RGB16F_EXT
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_RGBA
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
name|GL_RGBA8_OES
return|;
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4
case|:
return|return
name|GL_RGBA4
return|;
case|case
name|GL_UNSIGNED_SHORT_5_5_5_1
case|:
return|return
name|GL_RGB5_A1
return|;
case|case
name|GL_FLOAT
case|:
return|return
name|GL_RGBA32F_EXT
return|;
case|case
name|GL_HALF_FLOAT_OES
case|:
return|return
name|GL_RGBA16F_EXT
return|;
break|break;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_BGRA_EXT
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
name|GL_BGRA8_EXT
return|;
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
case|:
return|return
name|GL_BGRA4_ANGLEX
return|;
case|case
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
case|:
return|return
name|GL_BGR5_A1_ANGLEX
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
return|return
name|format
return|;
case|case
name|GL_DEPTH_COMPONENT
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_SHORT
case|:
return|return
name|GL_DEPTH_COMPONENT16
return|;
case|case
name|GL_UNSIGNED_INT
case|:
return|return
name|GL_DEPTH_COMPONENT32_OES
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_DEPTH_STENCIL_OES
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_INT_24_8_OES
case|:
return|return
name|GL_DEPTH24_STENCIL8_OES
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
return|return
name|GL_NONE
return|;
block|}
DECL|function|ExtractFormat
name|GLenum
name|ExtractFormat
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_RGB565
case|:
return|return
name|GL_RGB
return|;
case|case
name|GL_RGBA4
case|:
return|return
name|GL_RGBA
return|;
case|case
name|GL_RGB5_A1
case|:
return|return
name|GL_RGBA
return|;
case|case
name|GL_RGB8_OES
case|:
return|return
name|GL_RGB
return|;
case|case
name|GL_RGBA8_OES
case|:
return|return
name|GL_RGBA
return|;
case|case
name|GL_LUMINANCE8_ALPHA8_EXT
case|:
return|return
name|GL_LUMINANCE_ALPHA
return|;
case|case
name|GL_LUMINANCE8_EXT
case|:
return|return
name|GL_LUMINANCE
return|;
case|case
name|GL_ALPHA8_EXT
case|:
return|return
name|GL_ALPHA
return|;
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
return|return
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
return|;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
return|return
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
return|;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
return|return
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
return|;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
return|return
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
return|;
case|case
name|GL_RGBA32F_EXT
case|:
return|return
name|GL_RGBA
return|;
case|case
name|GL_RGB32F_EXT
case|:
return|return
name|GL_RGB
return|;
case|case
name|GL_ALPHA32F_EXT
case|:
return|return
name|GL_ALPHA
return|;
case|case
name|GL_LUMINANCE32F_EXT
case|:
return|return
name|GL_LUMINANCE
return|;
case|case
name|GL_LUMINANCE_ALPHA32F_EXT
case|:
return|return
name|GL_LUMINANCE_ALPHA
return|;
case|case
name|GL_RGBA16F_EXT
case|:
return|return
name|GL_RGBA
return|;
case|case
name|GL_RGB16F_EXT
case|:
return|return
name|GL_RGB
return|;
case|case
name|GL_ALPHA16F_EXT
case|:
return|return
name|GL_ALPHA
return|;
case|case
name|GL_LUMINANCE16F_EXT
case|:
return|return
name|GL_LUMINANCE
return|;
case|case
name|GL_LUMINANCE_ALPHA16F_EXT
case|:
return|return
name|GL_LUMINANCE_ALPHA
return|;
case|case
name|GL_BGRA8_EXT
case|:
return|return
name|GL_BGRA_EXT
return|;
case|case
name|GL_DEPTH_COMPONENT16
case|:
return|return
name|GL_DEPTH_COMPONENT
return|;
case|case
name|GL_DEPTH_COMPONENT32_OES
case|:
return|return
name|GL_DEPTH_COMPONENT
return|;
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
return|return
name|GL_DEPTH_STENCIL_OES
return|;
default|default:
return|return
name|GL_NONE
return|;
comment|// Unsupported
block|}
block|}
DECL|function|ExtractType
name|GLenum
name|ExtractType
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_RGB565
case|:
return|return
name|GL_UNSIGNED_SHORT_5_6_5
return|;
case|case
name|GL_RGBA4
case|:
return|return
name|GL_UNSIGNED_SHORT_4_4_4_4
return|;
case|case
name|GL_RGB5_A1
case|:
return|return
name|GL_UNSIGNED_SHORT_5_5_5_1
return|;
case|case
name|GL_RGB8_OES
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_RGBA8_OES
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_LUMINANCE8_ALPHA8_EXT
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_LUMINANCE8_EXT
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_ALPHA8_EXT
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_RGBA32F_EXT
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|GL_RGB32F_EXT
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|GL_ALPHA32F_EXT
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|GL_LUMINANCE32F_EXT
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|GL_LUMINANCE_ALPHA32F_EXT
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|GL_RGBA16F_EXT
case|:
return|return
name|GL_HALF_FLOAT_OES
return|;
case|case
name|GL_RGB16F_EXT
case|:
return|return
name|GL_HALF_FLOAT_OES
return|;
case|case
name|GL_ALPHA16F_EXT
case|:
return|return
name|GL_HALF_FLOAT_OES
return|;
case|case
name|GL_LUMINANCE16F_EXT
case|:
return|return
name|GL_HALF_FLOAT_OES
return|;
case|case
name|GL_LUMINANCE_ALPHA16F_EXT
case|:
return|return
name|GL_HALF_FLOAT_OES
return|;
case|case
name|GL_BGRA8_EXT
case|:
return|return
name|GL_UNSIGNED_BYTE
return|;
case|case
name|GL_DEPTH_COMPONENT16
case|:
return|return
name|GL_UNSIGNED_SHORT
return|;
case|case
name|GL_DEPTH_COMPONENT32_OES
case|:
return|return
name|GL_UNSIGNED_INT
return|;
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
return|return
name|GL_UNSIGNED_INT_24_8_OES
return|;
default|default:
return|return
name|GL_NONE
return|;
comment|// Unsupported
block|}
block|}
DECL|function|IsColorRenderable
name|bool
name|IsColorRenderable
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_RGBA4
case|:
case|case
name|GL_RGB5_A1
case|:
case|case
name|GL_RGB565
case|:
case|case
name|GL_RGB8_OES
case|:
case|case
name|GL_RGBA8_OES
case|:
return|return
literal|true
return|;
case|case
name|GL_DEPTH_COMPONENT16
case|:
case|case
name|GL_STENCIL_INDEX8
case|:
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
return|return
literal|false
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|IsDepthRenderable
name|bool
name|IsDepthRenderable
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_DEPTH_COMPONENT16
case|:
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
return|return
literal|true
return|;
case|case
name|GL_STENCIL_INDEX8
case|:
case|case
name|GL_RGBA4
case|:
case|case
name|GL_RGB5_A1
case|:
case|case
name|GL_RGB565
case|:
case|case
name|GL_RGB8_OES
case|:
case|case
name|GL_RGBA8_OES
case|:
return|return
literal|false
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|IsStencilRenderable
name|bool
name|IsStencilRenderable
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_STENCIL_INDEX8
case|:
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
return|return
literal|true
return|;
case|case
name|GL_RGBA4
case|:
case|case
name|GL_RGB5_A1
case|:
case|case
name|GL_RGB565
case|:
case|case
name|GL_RGB8_OES
case|:
case|case
name|GL_RGBA8_OES
case|:
case|case
name|GL_DEPTH_COMPONENT16
case|:
return|return
literal|false
return|;
default|default:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|IsFloat32Format
name|bool
name|IsFloat32Format
parameter_list|(
name|GLint
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_RGBA32F_EXT
case|:
case|case
name|GL_RGB32F_EXT
case|:
case|case
name|GL_ALPHA32F_EXT
case|:
case|case
name|GL_LUMINANCE32F_EXT
case|:
case|case
name|GL_LUMINANCE_ALPHA32F_EXT
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
DECL|function|IsFloat16Format
name|bool
name|IsFloat16Format
parameter_list|(
name|GLint
name|internalformat
parameter_list|)
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_RGBA16F_EXT
case|:
case|case
name|GL_RGB16F_EXT
case|:
case|case
name|GL_ALPHA16F_EXT
case|:
case|case
name|GL_LUMINANCE16F_EXT
case|:
case|case
name|GL_LUMINANCE_ALPHA16F_EXT
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
block|}
end_namespace
begin_namespace
DECL|namespace|es2dx
namespace|namespace
name|es2dx
block|{
DECL|function|ConvertComparison
name|D3DCMPFUNC
name|ConvertComparison
parameter_list|(
name|GLenum
name|comparison
parameter_list|)
block|{
name|D3DCMPFUNC
name|d3dComp
init|=
name|D3DCMP_ALWAYS
decl_stmt|;
switch|switch
condition|(
name|comparison
condition|)
block|{
case|case
name|GL_NEVER
case|:
name|d3dComp
operator|=
name|D3DCMP_NEVER
expr_stmt|;
break|break;
case|case
name|GL_ALWAYS
case|:
name|d3dComp
operator|=
name|D3DCMP_ALWAYS
expr_stmt|;
break|break;
case|case
name|GL_LESS
case|:
name|d3dComp
operator|=
name|D3DCMP_LESS
expr_stmt|;
break|break;
case|case
name|GL_LEQUAL
case|:
name|d3dComp
operator|=
name|D3DCMP_LESSEQUAL
expr_stmt|;
break|break;
case|case
name|GL_EQUAL
case|:
name|d3dComp
operator|=
name|D3DCMP_EQUAL
expr_stmt|;
break|break;
case|case
name|GL_GREATER
case|:
name|d3dComp
operator|=
name|D3DCMP_GREATER
expr_stmt|;
break|break;
case|case
name|GL_GEQUAL
case|:
name|d3dComp
operator|=
name|D3DCMP_GREATEREQUAL
expr_stmt|;
break|break;
case|case
name|GL_NOTEQUAL
case|:
name|d3dComp
operator|=
name|D3DCMP_NOTEQUAL
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dComp
return|;
block|}
DECL|function|ConvertColor
name|D3DCOLOR
name|ConvertColor
parameter_list|(
name|gl
operator|::
name|Color
name|color
parameter_list|)
block|{
return|return
name|D3DCOLOR_RGBA
argument_list|(
name|gl
operator|::
name|unorm
argument_list|<
literal|8
argument_list|>
argument_list|(
name|color
operator|.
name|red
argument_list|)
argument_list|,
name|gl
operator|::
name|unorm
argument_list|<
literal|8
argument_list|>
argument_list|(
name|color
operator|.
name|green
argument_list|)
argument_list|,
name|gl
operator|::
name|unorm
argument_list|<
literal|8
argument_list|>
argument_list|(
name|color
operator|.
name|blue
argument_list|)
argument_list|,
name|gl
operator|::
name|unorm
argument_list|<
literal|8
argument_list|>
argument_list|(
name|color
operator|.
name|alpha
argument_list|)
argument_list|)
return|;
block|}
DECL|function|ConvertBlendFunc
name|D3DBLEND
name|ConvertBlendFunc
parameter_list|(
name|GLenum
name|blend
parameter_list|)
block|{
name|D3DBLEND
name|d3dBlend
init|=
name|D3DBLEND_ZERO
decl_stmt|;
switch|switch
condition|(
name|blend
condition|)
block|{
case|case
name|GL_ZERO
case|:
name|d3dBlend
operator|=
name|D3DBLEND_ZERO
expr_stmt|;
break|break;
case|case
name|GL_ONE
case|:
name|d3dBlend
operator|=
name|D3DBLEND_ONE
expr_stmt|;
break|break;
case|case
name|GL_SRC_COLOR
case|:
name|d3dBlend
operator|=
name|D3DBLEND_SRCCOLOR
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_SRC_COLOR
case|:
name|d3dBlend
operator|=
name|D3DBLEND_INVSRCCOLOR
expr_stmt|;
break|break;
case|case
name|GL_DST_COLOR
case|:
name|d3dBlend
operator|=
name|D3DBLEND_DESTCOLOR
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_DST_COLOR
case|:
name|d3dBlend
operator|=
name|D3DBLEND_INVDESTCOLOR
expr_stmt|;
break|break;
case|case
name|GL_SRC_ALPHA
case|:
name|d3dBlend
operator|=
name|D3DBLEND_SRCALPHA
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_SRC_ALPHA
case|:
name|d3dBlend
operator|=
name|D3DBLEND_INVSRCALPHA
expr_stmt|;
break|break;
case|case
name|GL_DST_ALPHA
case|:
name|d3dBlend
operator|=
name|D3DBLEND_DESTALPHA
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_DST_ALPHA
case|:
name|d3dBlend
operator|=
name|D3DBLEND_INVDESTALPHA
expr_stmt|;
break|break;
case|case
name|GL_CONSTANT_COLOR
case|:
name|d3dBlend
operator|=
name|D3DBLEND_BLENDFACTOR
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_CONSTANT_COLOR
case|:
name|d3dBlend
operator|=
name|D3DBLEND_INVBLENDFACTOR
expr_stmt|;
break|break;
case|case
name|GL_CONSTANT_ALPHA
case|:
name|d3dBlend
operator|=
name|D3DBLEND_BLENDFACTOR
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_CONSTANT_ALPHA
case|:
name|d3dBlend
operator|=
name|D3DBLEND_INVBLENDFACTOR
expr_stmt|;
break|break;
case|case
name|GL_SRC_ALPHA_SATURATE
case|:
name|d3dBlend
operator|=
name|D3DBLEND_SRCALPHASAT
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dBlend
return|;
block|}
DECL|function|ConvertBlendOp
name|D3DBLENDOP
name|ConvertBlendOp
parameter_list|(
name|GLenum
name|blendOp
parameter_list|)
block|{
name|D3DBLENDOP
name|d3dBlendOp
init|=
name|D3DBLENDOP_ADD
decl_stmt|;
switch|switch
condition|(
name|blendOp
condition|)
block|{
case|case
name|GL_FUNC_ADD
case|:
name|d3dBlendOp
operator|=
name|D3DBLENDOP_ADD
expr_stmt|;
break|break;
case|case
name|GL_FUNC_SUBTRACT
case|:
name|d3dBlendOp
operator|=
name|D3DBLENDOP_SUBTRACT
expr_stmt|;
break|break;
case|case
name|GL_FUNC_REVERSE_SUBTRACT
case|:
name|d3dBlendOp
operator|=
name|D3DBLENDOP_REVSUBTRACT
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dBlendOp
return|;
block|}
DECL|function|ConvertStencilOp
name|D3DSTENCILOP
name|ConvertStencilOp
parameter_list|(
name|GLenum
name|stencilOp
parameter_list|)
block|{
name|D3DSTENCILOP
name|d3dStencilOp
init|=
name|D3DSTENCILOP_KEEP
decl_stmt|;
switch|switch
condition|(
name|stencilOp
condition|)
block|{
case|case
name|GL_ZERO
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_ZERO
expr_stmt|;
break|break;
case|case
name|GL_KEEP
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_KEEP
expr_stmt|;
break|break;
case|case
name|GL_REPLACE
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_REPLACE
expr_stmt|;
break|break;
case|case
name|GL_INCR
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_INCRSAT
expr_stmt|;
break|break;
case|case
name|GL_DECR
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_DECRSAT
expr_stmt|;
break|break;
case|case
name|GL_INVERT
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_INVERT
expr_stmt|;
break|break;
case|case
name|GL_INCR_WRAP
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_INCR
expr_stmt|;
break|break;
case|case
name|GL_DECR_WRAP
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_DECR
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dStencilOp
return|;
block|}
DECL|function|ConvertTextureWrap
name|D3DTEXTUREADDRESS
name|ConvertTextureWrap
parameter_list|(
name|GLenum
name|wrap
parameter_list|)
block|{
name|D3DTEXTUREADDRESS
name|d3dWrap
init|=
name|D3DTADDRESS_WRAP
decl_stmt|;
switch|switch
condition|(
name|wrap
condition|)
block|{
case|case
name|GL_REPEAT
case|:
name|d3dWrap
operator|=
name|D3DTADDRESS_WRAP
expr_stmt|;
break|break;
case|case
name|GL_CLAMP_TO_EDGE
case|:
name|d3dWrap
operator|=
name|D3DTADDRESS_CLAMP
expr_stmt|;
break|break;
case|case
name|GL_MIRRORED_REPEAT
case|:
name|d3dWrap
operator|=
name|D3DTADDRESS_MIRROR
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dWrap
return|;
block|}
DECL|function|ConvertCullMode
name|D3DCULL
name|ConvertCullMode
parameter_list|(
name|GLenum
name|cullFace
parameter_list|,
name|GLenum
name|frontFace
parameter_list|)
block|{
name|D3DCULL
name|cull
init|=
name|D3DCULL_CCW
decl_stmt|;
switch|switch
condition|(
name|cullFace
condition|)
block|{
case|case
name|GL_FRONT
case|:
name|cull
operator|=
operator|(
name|frontFace
operator|==
name|GL_CCW
condition|?
name|D3DCULL_CW
else|:
name|D3DCULL_CCW
operator|)
expr_stmt|;
break|break;
case|case
name|GL_BACK
case|:
name|cull
operator|=
operator|(
name|frontFace
operator|==
name|GL_CCW
condition|?
name|D3DCULL_CCW
else|:
name|D3DCULL_CW
operator|)
expr_stmt|;
break|break;
case|case
name|GL_FRONT_AND_BACK
case|:
name|cull
operator|=
name|D3DCULL_NONE
expr_stmt|;
comment|// culling will be handled during draw
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|cull
return|;
block|}
DECL|function|ConvertCubeFace
name|D3DCUBEMAP_FACES
name|ConvertCubeFace
parameter_list|(
name|GLenum
name|cubeFace
parameter_list|)
block|{
name|D3DCUBEMAP_FACES
name|face
init|=
name|D3DCUBEMAP_FACE_POSITIVE_X
decl_stmt|;
switch|switch
condition|(
name|cubeFace
condition|)
block|{
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
case|:
name|face
operator|=
name|D3DCUBEMAP_FACE_POSITIVE_X
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
case|:
name|face
operator|=
name|D3DCUBEMAP_FACE_NEGATIVE_X
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
case|:
name|face
operator|=
name|D3DCUBEMAP_FACE_POSITIVE_Y
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
case|:
name|face
operator|=
name|D3DCUBEMAP_FACE_NEGATIVE_Y
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
case|:
name|face
operator|=
name|D3DCUBEMAP_FACE_POSITIVE_Z
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
case|:
name|face
operator|=
name|D3DCUBEMAP_FACE_NEGATIVE_Z
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|face
return|;
block|}
DECL|function|ConvertColorMask
name|DWORD
name|ConvertColorMask
parameter_list|(
name|bool
name|red
parameter_list|,
name|bool
name|green
parameter_list|,
name|bool
name|blue
parameter_list|,
name|bool
name|alpha
parameter_list|)
block|{
return|return
operator|(
name|red
condition|?
name|D3DCOLORWRITEENABLE_RED
else|:
literal|0
operator|)
operator||
operator|(
name|green
condition|?
name|D3DCOLORWRITEENABLE_GREEN
else|:
literal|0
operator|)
operator||
operator|(
name|blue
condition|?
name|D3DCOLORWRITEENABLE_BLUE
else|:
literal|0
operator|)
operator||
operator|(
name|alpha
condition|?
name|D3DCOLORWRITEENABLE_ALPHA
else|:
literal|0
operator|)
return|;
block|}
DECL|function|ConvertMagFilter
name|D3DTEXTUREFILTERTYPE
name|ConvertMagFilter
parameter_list|(
name|GLenum
name|magFilter
parameter_list|,
name|float
name|maxAnisotropy
parameter_list|)
block|{
if|if
condition|(
name|maxAnisotropy
operator|>
literal|1.0f
condition|)
block|{
return|return
name|D3DTEXF_ANISOTROPIC
return|;
block|}
name|D3DTEXTUREFILTERTYPE
name|d3dMagFilter
init|=
name|D3DTEXF_POINT
decl_stmt|;
switch|switch
condition|(
name|magFilter
condition|)
block|{
case|case
name|GL_NEAREST
case|:
name|d3dMagFilter
operator|=
name|D3DTEXF_POINT
expr_stmt|;
break|break;
case|case
name|GL_LINEAR
case|:
name|d3dMagFilter
operator|=
name|D3DTEXF_LINEAR
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dMagFilter
return|;
block|}
DECL|function|ConvertMinFilter
name|void
name|ConvertMinFilter
parameter_list|(
name|GLenum
name|minFilter
parameter_list|,
name|D3DTEXTUREFILTERTYPE
modifier|*
name|d3dMinFilter
parameter_list|,
name|D3DTEXTUREFILTERTYPE
modifier|*
name|d3dMipFilter
parameter_list|,
name|float
name|maxAnisotropy
parameter_list|)
block|{
switch|switch
condition|(
name|minFilter
condition|)
block|{
case|case
name|GL_NEAREST
case|:
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_POINT
expr_stmt|;
operator|*
name|d3dMipFilter
operator|=
name|D3DTEXF_NONE
expr_stmt|;
break|break;
case|case
name|GL_LINEAR
case|:
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_LINEAR
expr_stmt|;
operator|*
name|d3dMipFilter
operator|=
name|D3DTEXF_NONE
expr_stmt|;
break|break;
case|case
name|GL_NEAREST_MIPMAP_NEAREST
case|:
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_POINT
expr_stmt|;
operator|*
name|d3dMipFilter
operator|=
name|D3DTEXF_POINT
expr_stmt|;
break|break;
case|case
name|GL_LINEAR_MIPMAP_NEAREST
case|:
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_LINEAR
expr_stmt|;
operator|*
name|d3dMipFilter
operator|=
name|D3DTEXF_POINT
expr_stmt|;
break|break;
case|case
name|GL_NEAREST_MIPMAP_LINEAR
case|:
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_POINT
expr_stmt|;
operator|*
name|d3dMipFilter
operator|=
name|D3DTEXF_LINEAR
expr_stmt|;
break|break;
case|case
name|GL_LINEAR_MIPMAP_LINEAR
case|:
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_LINEAR
expr_stmt|;
operator|*
name|d3dMipFilter
operator|=
name|D3DTEXF_LINEAR
expr_stmt|;
break|break;
default|default:
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_POINT
expr_stmt|;
operator|*
name|d3dMipFilter
operator|=
name|D3DTEXF_NONE
expr_stmt|;
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|maxAnisotropy
operator|>
literal|1.0f
condition|)
block|{
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_ANISOTROPIC
expr_stmt|;
block|}
block|}
DECL|function|ConvertPrimitiveType
name|bool
name|ConvertPrimitiveType
parameter_list|(
name|GLenum
name|primitiveType
parameter_list|,
name|GLsizei
name|elementCount
parameter_list|,
name|D3DPRIMITIVETYPE
modifier|*
name|d3dPrimitiveType
parameter_list|,
name|int
modifier|*
name|d3dPrimitiveCount
parameter_list|)
block|{
switch|switch
condition|(
name|primitiveType
condition|)
block|{
case|case
name|GL_POINTS
case|:
operator|*
name|d3dPrimitiveType
operator|=
name|D3DPT_POINTLIST
expr_stmt|;
operator|*
name|d3dPrimitiveCount
operator|=
name|elementCount
expr_stmt|;
break|break;
case|case
name|GL_LINES
case|:
operator|*
name|d3dPrimitiveType
operator|=
name|D3DPT_LINELIST
expr_stmt|;
operator|*
name|d3dPrimitiveCount
operator|=
name|elementCount
operator|/
literal|2
expr_stmt|;
break|break;
case|case
name|GL_LINE_LOOP
case|:
operator|*
name|d3dPrimitiveType
operator|=
name|D3DPT_LINESTRIP
expr_stmt|;
operator|*
name|d3dPrimitiveCount
operator|=
name|elementCount
operator|-
literal|1
expr_stmt|;
comment|// D3D doesn't support line loops, so we draw the last line separately
break|break;
case|case
name|GL_LINE_STRIP
case|:
operator|*
name|d3dPrimitiveType
operator|=
name|D3DPT_LINESTRIP
expr_stmt|;
operator|*
name|d3dPrimitiveCount
operator|=
name|elementCount
operator|-
literal|1
expr_stmt|;
break|break;
case|case
name|GL_TRIANGLES
case|:
operator|*
name|d3dPrimitiveType
operator|=
name|D3DPT_TRIANGLELIST
expr_stmt|;
operator|*
name|d3dPrimitiveCount
operator|=
name|elementCount
operator|/
literal|3
expr_stmt|;
break|break;
case|case
name|GL_TRIANGLE_STRIP
case|:
operator|*
name|d3dPrimitiveType
operator|=
name|D3DPT_TRIANGLESTRIP
expr_stmt|;
operator|*
name|d3dPrimitiveCount
operator|=
name|elementCount
operator|-
literal|2
expr_stmt|;
break|break;
case|case
name|GL_TRIANGLE_FAN
case|:
operator|*
name|d3dPrimitiveType
operator|=
name|D3DPT_TRIANGLEFAN
expr_stmt|;
operator|*
name|d3dPrimitiveCount
operator|=
name|elementCount
operator|-
literal|2
expr_stmt|;
break|break;
default|default:
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ConvertRenderbufferFormat
name|D3DFORMAT
name|ConvertRenderbufferFormat
parameter_list|(
name|GLenum
name|format
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|GL_NONE
case|:
return|return
name|D3DFMT_NULL
return|;
case|case
name|GL_RGBA4
case|:
case|case
name|GL_RGB5_A1
case|:
case|case
name|GL_RGBA8_OES
case|:
return|return
name|D3DFMT_A8R8G8B8
return|;
case|case
name|GL_RGB565
case|:
return|return
name|D3DFMT_R5G6B5
return|;
case|case
name|GL_RGB8_OES
case|:
return|return
name|D3DFMT_X8R8G8B8
return|;
case|case
name|GL_DEPTH_COMPONENT16
case|:
case|case
name|GL_STENCIL_INDEX8
case|:
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
return|return
name|D3DFMT_D24S8
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|D3DFMT_A8R8G8B8
return|;
block|}
block|}
DECL|function|GetMultisampleTypeFromSamples
name|D3DMULTISAMPLE_TYPE
name|GetMultisampleTypeFromSamples
parameter_list|(
name|GLsizei
name|samples
parameter_list|)
block|{
if|if
condition|(
name|samples
operator|<=
literal|1
condition|)
return|return
name|D3DMULTISAMPLE_NONE
return|;
else|else
return|return
operator|(
name|D3DMULTISAMPLE_TYPE
operator|)
name|samples
return|;
block|}
block|}
end_namespace
begin_namespace
DECL|namespace|dx2es
namespace|namespace
name|dx2es
block|{
DECL|function|GetStencilSize
name|unsigned
name|int
name|GetStencilSize
parameter_list|(
name|D3DFORMAT
name|stencilFormat
parameter_list|)
block|{
if|if
condition|(
name|stencilFormat
operator|==
name|D3DFMT_INTZ
condition|)
block|{
return|return
literal|8
return|;
block|}
switch|switch
condition|(
name|stencilFormat
condition|)
block|{
case|case
name|D3DFMT_D24FS8
case|:
case|case
name|D3DFMT_D24S8
case|:
return|return
literal|8
return|;
case|case
name|D3DFMT_D24X4S4
case|:
return|return
literal|4
return|;
case|case
name|D3DFMT_D15S1
case|:
return|return
literal|1
return|;
case|case
name|D3DFMT_D16_LOCKABLE
case|:
case|case
name|D3DFMT_D32
case|:
case|case
name|D3DFMT_D24X8
case|:
case|case
name|D3DFMT_D32F_LOCKABLE
case|:
case|case
name|D3DFMT_D16
case|:
return|return
literal|0
return|;
comment|//case D3DFMT_D32_LOCKABLE:  return 0;   // DirectX 9Ex only
comment|//case D3DFMT_S8_LOCKABLE:   return 8;   // DirectX 9Ex only
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetAlphaSize
name|unsigned
name|int
name|GetAlphaSize
parameter_list|(
name|D3DFORMAT
name|colorFormat
parameter_list|)
block|{
switch|switch
condition|(
name|colorFormat
condition|)
block|{
case|case
name|D3DFMT_A16B16G16R16F
case|:
return|return
literal|16
return|;
case|case
name|D3DFMT_A32B32G32R32F
case|:
return|return
literal|32
return|;
case|case
name|D3DFMT_A2R10G10B10
case|:
return|return
literal|2
return|;
case|case
name|D3DFMT_A8R8G8B8
case|:
return|return
literal|8
return|;
case|case
name|D3DFMT_A1R5G5B5
case|:
return|return
literal|1
return|;
case|case
name|D3DFMT_X8R8G8B8
case|:
case|case
name|D3DFMT_R5G6B5
case|:
return|return
literal|0
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetRedSize
name|unsigned
name|int
name|GetRedSize
parameter_list|(
name|D3DFORMAT
name|colorFormat
parameter_list|)
block|{
switch|switch
condition|(
name|colorFormat
condition|)
block|{
case|case
name|D3DFMT_A16B16G16R16F
case|:
return|return
literal|16
return|;
case|case
name|D3DFMT_A32B32G32R32F
case|:
return|return
literal|32
return|;
case|case
name|D3DFMT_A2R10G10B10
case|:
return|return
literal|10
return|;
case|case
name|D3DFMT_A8R8G8B8
case|:
case|case
name|D3DFMT_X8R8G8B8
case|:
return|return
literal|8
return|;
case|case
name|D3DFMT_A1R5G5B5
case|:
case|case
name|D3DFMT_R5G6B5
case|:
return|return
literal|5
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetGreenSize
name|unsigned
name|int
name|GetGreenSize
parameter_list|(
name|D3DFORMAT
name|colorFormat
parameter_list|)
block|{
switch|switch
condition|(
name|colorFormat
condition|)
block|{
case|case
name|D3DFMT_A16B16G16R16F
case|:
return|return
literal|16
return|;
case|case
name|D3DFMT_A32B32G32R32F
case|:
return|return
literal|32
return|;
case|case
name|D3DFMT_A2R10G10B10
case|:
return|return
literal|10
return|;
case|case
name|D3DFMT_A8R8G8B8
case|:
case|case
name|D3DFMT_X8R8G8B8
case|:
return|return
literal|8
return|;
case|case
name|D3DFMT_A1R5G5B5
case|:
return|return
literal|5
return|;
case|case
name|D3DFMT_R5G6B5
case|:
return|return
literal|6
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetBlueSize
name|unsigned
name|int
name|GetBlueSize
parameter_list|(
name|D3DFORMAT
name|colorFormat
parameter_list|)
block|{
switch|switch
condition|(
name|colorFormat
condition|)
block|{
case|case
name|D3DFMT_A16B16G16R16F
case|:
return|return
literal|16
return|;
case|case
name|D3DFMT_A32B32G32R32F
case|:
return|return
literal|32
return|;
case|case
name|D3DFMT_A2R10G10B10
case|:
return|return
literal|10
return|;
case|case
name|D3DFMT_A8R8G8B8
case|:
case|case
name|D3DFMT_X8R8G8B8
case|:
return|return
literal|8
return|;
case|case
name|D3DFMT_A1R5G5B5
case|:
case|case
name|D3DFMT_R5G6B5
case|:
return|return
literal|5
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetDepthSize
name|unsigned
name|int
name|GetDepthSize
parameter_list|(
name|D3DFORMAT
name|depthFormat
parameter_list|)
block|{
if|if
condition|(
name|depthFormat
operator|==
name|D3DFMT_INTZ
condition|)
block|{
return|return
literal|24
return|;
block|}
switch|switch
condition|(
name|depthFormat
condition|)
block|{
case|case
name|D3DFMT_D16_LOCKABLE
case|:
return|return
literal|16
return|;
case|case
name|D3DFMT_D32
case|:
return|return
literal|32
return|;
case|case
name|D3DFMT_D15S1
case|:
return|return
literal|15
return|;
case|case
name|D3DFMT_D24S8
case|:
return|return
literal|24
return|;
case|case
name|D3DFMT_D24X8
case|:
return|return
literal|24
return|;
case|case
name|D3DFMT_D24X4S4
case|:
return|return
literal|24
return|;
case|case
name|D3DFMT_D16
case|:
return|return
literal|16
return|;
case|case
name|D3DFMT_D32F_LOCKABLE
case|:
return|return
literal|32
return|;
case|case
name|D3DFMT_D24FS8
case|:
return|return
literal|24
return|;
comment|//case D3DFMT_D32_LOCKABLE:  return 32;   // D3D9Ex only
comment|//case D3DFMT_S8_LOCKABLE:   return 0;    // D3D9Ex only
default|default:
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetSamplesFromMultisampleType
name|GLsizei
name|GetSamplesFromMultisampleType
parameter_list|(
name|D3DMULTISAMPLE_TYPE
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|D3DMULTISAMPLE_NONMASKABLE
condition|)
return|return
literal|0
return|;
else|else
return|return
name|type
return|;
block|}
DECL|function|IsFormatChannelEquivalent
name|bool
name|IsFormatChannelEquivalent
parameter_list|(
name|D3DFORMAT
name|d3dformat
parameter_list|,
name|GLenum
name|format
parameter_list|)
block|{
switch|switch
condition|(
name|d3dformat
condition|)
block|{
case|case
name|D3DFMT_L8
case|:
return|return
operator|(
name|format
operator|==
name|GL_LUMINANCE
operator|)
return|;
case|case
name|D3DFMT_A8L8
case|:
return|return
operator|(
name|format
operator|==
name|GL_LUMINANCE_ALPHA
operator|)
return|;
case|case
name|D3DFMT_DXT1
case|:
return|return
operator|(
name|format
operator|==
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
operator|||
name|format
operator|==
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
operator|)
return|;
case|case
name|D3DFMT_DXT3
case|:
return|return
operator|(
name|format
operator|==
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
operator|)
return|;
case|case
name|D3DFMT_DXT5
case|:
return|return
operator|(
name|format
operator|==
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
operator|)
return|;
case|case
name|D3DFMT_A8R8G8B8
case|:
case|case
name|D3DFMT_A16B16G16R16F
case|:
case|case
name|D3DFMT_A32B32G32R32F
case|:
return|return
operator|(
name|format
operator|==
name|GL_RGBA
operator|||
name|format
operator|==
name|GL_BGRA_EXT
operator|)
return|;
case|case
name|D3DFMT_X8R8G8B8
case|:
return|return
operator|(
name|format
operator|==
name|GL_RGB
operator|)
return|;
default|default:
if|if
condition|(
name|d3dformat
operator|==
name|D3DFMT_INTZ
operator|&&
name|gl
operator|::
name|IsDepthTexture
argument_list|(
name|format
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|ConvertReadBufferFormat
name|bool
name|ConvertReadBufferFormat
parameter_list|(
name|D3DFORMAT
name|d3dformat
parameter_list|,
name|GLenum
modifier|*
name|format
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|d3dformat
condition|)
block|{
case|case
name|D3DFMT_A8R8G8B8
case|:
operator|*
name|type
operator|=
name|GL_UNSIGNED_BYTE
expr_stmt|;
operator|*
name|format
operator|=
name|GL_BGRA_EXT
expr_stmt|;
break|break;
case|case
name|D3DFMT_X8R8G8B8
case|:
operator|*
name|type
operator|=
name|GL_UNSIGNED_BYTE
expr_stmt|;
operator|*
name|format
operator|=
name|GL_RGB
expr_stmt|;
break|break;
case|case
name|D3DFMT_R5G6B5
case|:
operator|*
name|type
operator|=
name|GL_UNSIGNED_SHORT_5_6_5
expr_stmt|;
operator|*
name|format
operator|=
name|GL_RGB
expr_stmt|;
break|break;
case|case
name|D3DFMT_A16B16G16R16F
case|:
operator|*
name|type
operator|=
name|GL_HALF_FLOAT_OES
expr_stmt|;
operator|*
name|format
operator|=
name|GL_RGBA
expr_stmt|;
break|break;
case|case
name|D3DFMT_A32B32G32R32F
case|:
operator|*
name|type
operator|=
name|GL_FLOAT
expr_stmt|;
operator|*
name|format
operator|=
name|GL_RGBA
expr_stmt|;
break|break;
case|case
name|D3DFMT_A4R4G4B4
case|:
operator|*
name|type
operator|=
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
expr_stmt|;
operator|*
name|format
operator|=
name|GL_BGRA_EXT
expr_stmt|;
break|break;
case|case
name|D3DFMT_A1R5G5B5
case|:
operator|*
name|type
operator|=
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
expr_stmt|;
operator|*
name|format
operator|=
name|GL_BGRA_EXT
expr_stmt|;
break|break;
default|default:
operator|*
name|type
operator|=
name|GL_NONE
expr_stmt|;
operator|*
name|format
operator|=
name|GL_NONE
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ConvertBackBufferFormat
name|GLenum
name|ConvertBackBufferFormat
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|D3DFMT_A4R4G4B4
case|:
return|return
name|GL_RGBA4
return|;
case|case
name|D3DFMT_A8R8G8B8
case|:
return|return
name|GL_RGBA8_OES
return|;
case|case
name|D3DFMT_A1R5G5B5
case|:
return|return
name|GL_RGB5_A1
return|;
case|case
name|D3DFMT_R5G6B5
case|:
return|return
name|GL_RGB565
return|;
case|case
name|D3DFMT_X8R8G8B8
case|:
return|return
name|GL_RGB8_OES
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|GL_RGBA4
return|;
block|}
DECL|function|ConvertDepthStencilFormat
name|GLenum
name|ConvertDepthStencilFormat
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
block|{
if|if
condition|(
name|format
operator|==
name|D3DFMT_INTZ
condition|)
block|{
return|return
name|GL_DEPTH24_STENCIL8_OES
return|;
block|}
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|D3DFMT_D16
case|:
case|case
name|D3DFMT_D24X8
case|:
return|return
name|GL_DEPTH_COMPONENT16
return|;
case|case
name|D3DFMT_D24S8
case|:
return|return
name|GL_DEPTH24_STENCIL8_OES
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|GL_DEPTH24_STENCIL8_OES
return|;
block|}
block|}
end_namespace
begin_namespace
DECL|namespace|dx
namespace|namespace
name|dx
block|{
DECL|function|IsCompressedFormat
name|bool
name|IsCompressedFormat
parameter_list|(
name|D3DFORMAT
name|surfaceFormat
parameter_list|)
block|{
switch|switch
condition|(
name|surfaceFormat
condition|)
block|{
case|case
name|D3DFMT_DXT1
case|:
case|case
name|D3DFMT_DXT2
case|:
case|case
name|D3DFMT_DXT3
case|:
case|case
name|D3DFMT_DXT4
case|:
case|case
name|D3DFMT_DXT5
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
DECL|function|ComputeRowSize
name|size_t
name|ComputeRowSize
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|,
name|unsigned
name|int
name|width
parameter_list|)
block|{
if|if
condition|(
name|format
operator|==
name|D3DFMT_INTZ
condition|)
block|{
return|return
literal|4
operator|*
name|width
return|;
block|}
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|D3DFMT_L8
case|:
return|return
literal|1
operator|*
name|width
return|;
case|case
name|D3DFMT_A8L8
case|:
return|return
literal|2
operator|*
name|width
return|;
case|case
name|D3DFMT_X8R8G8B8
case|:
case|case
name|D3DFMT_A8R8G8B8
case|:
return|return
literal|4
operator|*
name|width
return|;
case|case
name|D3DFMT_A16B16G16R16F
case|:
return|return
literal|8
operator|*
name|width
return|;
case|case
name|D3DFMT_A32B32G32R32F
case|:
return|return
literal|16
operator|*
name|width
return|;
case|case
name|D3DFMT_DXT1
case|:
return|return
literal|8
operator|*
operator|(
operator|(
name|width
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
return|;
case|case
name|D3DFMT_DXT3
case|:
case|case
name|D3DFMT_DXT5
case|:
return|return
literal|16
operator|*
operator|(
operator|(
name|width
operator|+
literal|3
operator|)
operator|/
literal|4
operator|)
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
block|}
end_namespace
begin_function
DECL|function|getTempPath
name|std
operator|::
name|string
name|getTempPath
parameter_list|()
block|{
name|char
name|path
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|DWORD
name|pathLen
init|=
name|GetTempPathA
argument_list|(
sizeof|sizeof
argument_list|(
name|path
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|path
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathLen
operator|==
literal|0
condition|)
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|std
operator|::
name|string
argument_list|()
return|;
block|}
name|UINT
name|unique
init|=
name|GetTempFileNameA
argument_list|(
name|path
argument_list|,
literal|"sh"
argument_list|,
literal|0
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|unique
operator|==
literal|0
condition|)
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|std
operator|::
name|string
argument_list|()
return|;
block|}
return|return
name|path
return|;
block|}
end_function
begin_function
DECL|function|writeFile
name|void
name|writeFile
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|void
modifier|*
name|content
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|FILE
modifier|*
name|file
init|=
name|fopen
argument_list|(
name|path
argument_list|,
literal|"w"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
condition|)
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return;
block|}
name|fwrite
argument_list|(
name|content
argument_list|,
sizeof|sizeof
argument_list|(
name|char
argument_list|)
argument_list|,
name|size
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|fclose
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
