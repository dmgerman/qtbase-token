begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Renderbuffer.h: Defines the wrapper class gl::Renderbuffer, as well as the
end_comment
begin_comment
comment|// class hierarchy used to store its contents: RenderbufferStorage, Colorbuffer,
end_comment
begin_comment
comment|// DepthStencilbuffer, Depthbuffer and Stencilbuffer. Implements GL renderbuffer
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4.3 page 108.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RENDERBUFFER_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RENDERBUFFER_H_
define|#
directive|define
name|LIBGLESV2_RENDERBUFFER_H_
end_define
begin_define
DECL|macro|GL_APICALL
define|#
directive|define
name|GL_APICALL
end_define
begin_include
include|#
directive|include
file|<GLES2/gl2.h>
end_include
begin_include
include|#
directive|include
file|<d3d9.h>
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"common/RefCountObject.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Texture2D
decl_stmt|;
name|class
name|TextureCubeMap
decl_stmt|;
name|class
name|Renderbuffer
decl_stmt|;
name|class
name|Colorbuffer
decl_stmt|;
name|class
name|DepthStencilbuffer
decl_stmt|;
name|class
name|RenderbufferInterface
block|{
name|public
label|:
name|RenderbufferInterface
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|RenderbufferInterface
argument_list|()
block|{}
expr_stmt|;
name|virtual
name|void
name|addProxyRef
parameter_list|(
specifier|const
name|Renderbuffer
modifier|*
name|proxy
parameter_list|)
function_decl|;
name|virtual
name|void
name|releaseProxy
parameter_list|(
specifier|const
name|Renderbuffer
modifier|*
name|proxy
parameter_list|)
function_decl|;
name|virtual
name|IDirect3DSurface9
modifier|*
name|getRenderTarget
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|IDirect3DSurface9
modifier|*
name|getDepthStencil
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|D3DFORMAT
name|getD3DFormat
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|GLuint
name|getRedSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getGreenSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getBlueSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getAlphaSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getDepthSize
argument_list|()
specifier|const
expr_stmt|;
name|GLuint
name|getStencilSize
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|RenderbufferInterface
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|class
name|RenderbufferTexture2D
range|:
name|public
name|RenderbufferInterface
block|{
name|public
operator|:
name|RenderbufferTexture2D
argument_list|(
argument|Texture2D *texture
argument_list|,
argument|GLenum target
argument_list|)
block|;
name|virtual
operator|~
name|RenderbufferTexture2D
argument_list|()
block|;
name|void
name|addProxyRef
argument_list|(
specifier|const
name|Renderbuffer
operator|*
name|proxy
argument_list|)
block|;
name|void
name|releaseProxy
argument_list|(
specifier|const
name|Renderbuffer
operator|*
name|proxy
argument_list|)
block|;
name|IDirect3DSurface9
operator|*
name|getRenderTarget
argument_list|()
block|;
name|IDirect3DSurface9
operator|*
name|getDepthStencil
argument_list|()
block|;
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
block|;
name|virtual
name|D3DFORMAT
name|getD3DFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|RenderbufferTexture2D
argument_list|)
block|;
name|BindingPointer
operator|<
name|Texture2D
operator|>
name|mTexture2D
block|;
name|GLenum
name|mTarget
block|; }
decl_stmt|;
name|class
name|RenderbufferTextureCubeMap
range|:
name|public
name|RenderbufferInterface
block|{
name|public
operator|:
name|RenderbufferTextureCubeMap
argument_list|(
argument|TextureCubeMap *texture
argument_list|,
argument|GLenum target
argument_list|)
block|;
name|virtual
operator|~
name|RenderbufferTextureCubeMap
argument_list|()
block|;
name|void
name|addProxyRef
argument_list|(
specifier|const
name|Renderbuffer
operator|*
name|proxy
argument_list|)
block|;
name|void
name|releaseProxy
argument_list|(
specifier|const
name|Renderbuffer
operator|*
name|proxy
argument_list|)
block|;
name|IDirect3DSurface9
operator|*
name|getRenderTarget
argument_list|()
block|;
name|IDirect3DSurface9
operator|*
name|getDepthStencil
argument_list|()
block|;
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
block|;
name|virtual
name|D3DFORMAT
name|getD3DFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|RenderbufferTextureCubeMap
argument_list|)
block|;
name|BindingPointer
operator|<
name|TextureCubeMap
operator|>
name|mTextureCubeMap
block|;
name|GLenum
name|mTarget
block|; }
decl_stmt|;
comment|// A class derived from RenderbufferStorage is created whenever glRenderbufferStorage
comment|// is called. The specific concrete type depends on whether the internal format is
comment|// colour depth, stencil or packed depth/stencil.
name|class
name|RenderbufferStorage
range|:
name|public
name|RenderbufferInterface
block|{
name|public
operator|:
name|RenderbufferStorage
argument_list|()
block|;
name|virtual
operator|~
name|RenderbufferStorage
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|IDirect3DSurface9
operator|*
name|getRenderTarget
argument_list|()
block|;
name|virtual
name|IDirect3DSurface9
operator|*
name|getDepthStencil
argument_list|()
block|;
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
block|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
block|;
name|virtual
name|D3DFORMAT
name|getD3DFormat
argument_list|()
specifier|const
block|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
block|;
specifier|static
name|unsigned
name|int
name|issueSerial
argument_list|()
block|;
specifier|static
name|unsigned
name|int
name|issueCubeSerials
argument_list|()
block|;
name|protected
operator|:
name|GLsizei
name|mWidth
block|;
name|GLsizei
name|mHeight
block|;
name|GLenum
name|mInternalFormat
block|;
name|D3DFORMAT
name|mD3DFormat
block|;
name|GLsizei
name|mSamples
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|RenderbufferStorage
argument_list|)
block|;
specifier|const
name|unsigned
name|int
name|mSerial
block|;
specifier|static
name|unsigned
name|int
name|mCurrentSerial
block|; }
decl_stmt|;
comment|// Renderbuffer implements the GL renderbuffer object.
comment|// It's only a proxy for a RenderbufferInterface instance; the internal object
comment|// can change whenever glRenderbufferStorage is called.
name|class
name|Renderbuffer
range|:
name|public
name|RefCountObject
block|{
name|public
operator|:
name|Renderbuffer
argument_list|(
argument|GLuint id
argument_list|,
argument|RenderbufferInterface *storage
argument_list|)
block|;
name|virtual
operator|~
name|Renderbuffer
argument_list|()
block|;
comment|// These functions from RefCountObject are overloaded here because
comment|// Textures need to maintain their own count of references to them via
comment|// Renderbuffers/RenderbufferTextures. These functions invoke those
comment|// reference counting functions on the RenderbufferInterface.
name|void
name|addRef
argument_list|()
specifier|const
block|;
name|void
name|release
argument_list|()
specifier|const
block|;
name|IDirect3DSurface9
operator|*
name|getRenderTarget
argument_list|()
block|;
name|IDirect3DSurface9
operator|*
name|getDepthStencil
argument_list|()
block|;
name|GLsizei
name|getWidth
argument_list|()
specifier|const
block|;
name|GLsizei
name|getHeight
argument_list|()
specifier|const
block|;
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
block|;
name|D3DFORMAT
name|getD3DFormat
argument_list|()
specifier|const
block|;
name|GLuint
name|getRedSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getGreenSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getBlueSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getAlphaSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getDepthSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getStencilSize
argument_list|()
specifier|const
block|;
name|GLsizei
name|getSamples
argument_list|()
specifier|const
block|;
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
block|;
name|void
name|setStorage
argument_list|(
name|RenderbufferStorage
operator|*
name|newStorage
argument_list|)
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Renderbuffer
argument_list|)
block|;
name|RenderbufferInterface
operator|*
name|mInstance
block|; }
decl_stmt|;
name|class
name|Colorbuffer
range|:
name|public
name|RenderbufferStorage
block|{
name|public
operator|:
name|explicit
name|Colorbuffer
argument_list|(
name|IDirect3DSurface9
operator|*
name|renderTarget
argument_list|)
block|;
name|Colorbuffer
argument_list|(
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|,
argument|GLenum format
argument_list|,
argument|GLsizei samples
argument_list|)
block|;
name|virtual
operator|~
name|Colorbuffer
argument_list|()
block|;
name|virtual
name|IDirect3DSurface9
operator|*
name|getRenderTarget
argument_list|()
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Colorbuffer
argument_list|)
block|;
name|IDirect3DSurface9
operator|*
name|mRenderTarget
block|; }
decl_stmt|;
name|class
name|DepthStencilbuffer
range|:
name|public
name|RenderbufferStorage
block|{
name|public
operator|:
name|explicit
name|DepthStencilbuffer
argument_list|(
name|IDirect3DSurface9
operator|*
name|depthStencil
argument_list|)
block|;
name|DepthStencilbuffer
argument_list|(
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|,
argument|GLsizei samples
argument_list|)
block|;
operator|~
name|DepthStencilbuffer
argument_list|()
block|;
name|virtual
name|IDirect3DSurface9
operator|*
name|getDepthStencil
argument_list|()
block|;
name|protected
operator|:
name|IDirect3DSurface9
operator|*
name|mDepthStencil
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|DepthStencilbuffer
argument_list|)
block|; }
decl_stmt|;
name|class
name|Depthbuffer
range|:
name|public
name|DepthStencilbuffer
block|{
name|public
operator|:
name|explicit
name|Depthbuffer
argument_list|(
name|IDirect3DSurface9
operator|*
name|depthStencil
argument_list|)
block|;
name|Depthbuffer
argument_list|(
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|,
argument|GLsizei samples
argument_list|)
block|;
name|virtual
operator|~
name|Depthbuffer
argument_list|()
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Depthbuffer
argument_list|)
block|; }
decl_stmt|;
name|class
name|Stencilbuffer
range|:
name|public
name|DepthStencilbuffer
block|{
name|public
operator|:
name|explicit
name|Stencilbuffer
argument_list|(
name|IDirect3DSurface9
operator|*
name|depthStencil
argument_list|)
block|;
name|Stencilbuffer
argument_list|(
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|,
argument|GLsizei samples
argument_list|)
block|;
name|virtual
operator|~
name|Stencilbuffer
argument_list|()
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Stencilbuffer
argument_list|)
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RENDERBUFFER_H_
end_comment
end_unit
