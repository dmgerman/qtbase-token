begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Renderbuffer.h: Defines the wrapper class gl::Renderbuffer, as well as the
end_comment
begin_comment
comment|// class hierarchy used to store its contents: RenderbufferStorage, Colorbuffer,
end_comment
begin_comment
comment|// DepthStencilbuffer, Depthbuffer and Stencilbuffer. Implements GL renderbuffer
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4.3 page 108.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RENDERBUFFER_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RENDERBUFFER_H_
define|#
directive|define
name|LIBGLESV2_RENDERBUFFER_H_
end_define
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"common/RefCountObject.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|Renderer
decl_stmt|;
name|class
name|SwapChain
decl_stmt|;
name|class
name|RenderTarget
decl_stmt|;
name|class
name|TextureStorage
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|RenderbufferStorage
decl_stmt|;
name|class
name|FramebufferAttachment
decl_stmt|;
comment|// A GL renderbuffer object is usually used as a depth or stencil buffer attachment
comment|// for a framebuffer object. The renderbuffer itself is a distinct GL object, see
comment|// FramebufferAttachment and Framebuffer for how they are applied to an FBO via an
comment|// attachment point.
name|class
name|Renderbuffer
range|:
name|public
name|RefCountObject
block|{
name|public
operator|:
name|Renderbuffer
argument_list|(
argument|GLuint id
argument_list|,
argument|RenderbufferStorage *newStorage
argument_list|)
block|;
name|void
name|setStorage
argument_list|(
name|RenderbufferStorage
operator|*
name|newStorage
argument_list|)
block|;
name|RenderbufferStorage
operator|*
name|getStorage
argument_list|()
block|;
name|GLsizei
name|getWidth
argument_list|()
specifier|const
block|;
name|GLsizei
name|getHeight
argument_list|()
specifier|const
block|;
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
block|;
name|GLenum
name|getActualFormat
argument_list|()
specifier|const
block|;
name|GLsizei
name|getSamples
argument_list|()
specifier|const
block|;
name|GLuint
name|getRedSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getGreenSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getBlueSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getAlphaSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getDepthSize
argument_list|()
specifier|const
block|;
name|GLuint
name|getStencilSize
argument_list|()
specifier|const
block|;
name|private
operator|:
name|RenderbufferStorage
operator|*
name|mStorage
block|; }
decl_stmt|;
comment|// A class derived from RenderbufferStorage is created whenever glRenderbufferStorage
comment|// is called. The specific concrete type depends on whether the internal format is
comment|// colour depth, stencil or packed depth/stencil.
name|class
name|RenderbufferStorage
block|{
name|public
label|:
name|RenderbufferStorage
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|RenderbufferStorage
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|rx
operator|::
name|RenderTarget
operator|*
name|getRenderTarget
argument_list|()
expr_stmt|;
name|virtual
name|rx
operator|::
name|RenderTarget
operator|*
name|getDepthStencil
argument_list|()
expr_stmt|;
name|virtual
name|GLsizei
name|getWidth
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|GLsizei
name|getHeight
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|GLenum
name|getInternalFormat
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|GLenum
name|getActualFormat
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|GLsizei
name|getSamples
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|isTexture
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|unsigned
name|int
name|getTextureSerial
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|unsigned
name|int
name|issueSerials
parameter_list|(
name|GLuint
name|count
parameter_list|)
function_decl|;
name|protected
label|:
name|GLsizei
name|mWidth
decl_stmt|;
name|GLsizei
name|mHeight
decl_stmt|;
name|GLenum
name|mInternalFormat
decl_stmt|;
name|GLenum
name|mActualFormat
decl_stmt|;
name|GLsizei
name|mSamples
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|RenderbufferStorage
argument_list|)
expr_stmt|;
specifier|const
name|unsigned
name|int
name|mSerial
decl_stmt|;
specifier|static
name|unsigned
name|int
name|mCurrentSerial
decl_stmt|;
block|}
empty_stmt|;
name|class
name|Colorbuffer
range|:
name|public
name|RenderbufferStorage
block|{
name|public
operator|:
name|Colorbuffer
argument_list|(
name|rx
operator|::
name|Renderer
operator|*
name|renderer
argument_list|,
name|rx
operator|::
name|SwapChain
operator|*
name|swapChain
argument_list|)
block|;
name|Colorbuffer
argument_list|(
argument|rx::Renderer *renderer
argument_list|,
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|,
argument|GLenum format
argument_list|,
argument|GLsizei samples
argument_list|)
block|;
name|virtual
operator|~
name|Colorbuffer
argument_list|()
block|;
name|virtual
name|rx
operator|::
name|RenderTarget
operator|*
name|getRenderTarget
argument_list|()
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Colorbuffer
argument_list|)
block|;
name|rx
operator|::
name|RenderTarget
operator|*
name|mRenderTarget
block|; }
decl_stmt|;
name|class
name|DepthStencilbuffer
range|:
name|public
name|RenderbufferStorage
block|{
name|public
operator|:
name|DepthStencilbuffer
argument_list|(
name|rx
operator|::
name|Renderer
operator|*
name|renderer
argument_list|,
name|rx
operator|::
name|SwapChain
operator|*
name|swapChain
argument_list|)
block|;
name|DepthStencilbuffer
argument_list|(
argument|rx::Renderer *renderer
argument_list|,
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|,
argument|GLsizei samples
argument_list|)
block|;
operator|~
name|DepthStencilbuffer
argument_list|()
block|;
name|virtual
name|rx
operator|::
name|RenderTarget
operator|*
name|getDepthStencil
argument_list|()
block|;
name|protected
operator|:
name|rx
operator|::
name|RenderTarget
operator|*
name|mDepthStencil
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|DepthStencilbuffer
argument_list|)
block|; }
decl_stmt|;
name|class
name|Depthbuffer
range|:
name|public
name|DepthStencilbuffer
block|{
name|public
operator|:
name|Depthbuffer
argument_list|(
argument|rx::Renderer *renderer
argument_list|,
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|,
argument|GLsizei samples
argument_list|)
block|;
name|virtual
operator|~
name|Depthbuffer
argument_list|()
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Depthbuffer
argument_list|)
block|; }
decl_stmt|;
name|class
name|Stencilbuffer
range|:
name|public
name|DepthStencilbuffer
block|{
name|public
operator|:
name|Stencilbuffer
argument_list|(
argument|rx::Renderer *renderer
argument_list|,
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|,
argument|GLsizei samples
argument_list|)
block|;
name|virtual
operator|~
name|Stencilbuffer
argument_list|()
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Stencilbuffer
argument_list|)
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RENDERBUFFER_H_
end_comment
end_unit
