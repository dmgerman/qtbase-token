begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// utilities.h: Conversion functions and other utility routines.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_UTILITIES_H
end_ifndef
begin_define
DECL|macro|LIBGLESV2_UTILITIES_H
define|#
directive|define
name|LIBGLESV2_UTILITIES_H
end_define
begin_define
DECL|macro|GL_APICALL
define|#
directive|define
name|GL_APICALL
end_define
begin_include
include|#
directive|include
file|<GLES2/gl2.h>
end_include
begin_include
include|#
directive|include
file|<GLES2/gl2ext.h>
end_include
begin_include
include|#
directive|include
file|<d3d9.h>
end_include
begin_include
include|#
directive|include
file|<string>
end_include
begin_decl_stmt
DECL|variable|D3DFMT_INTZ
specifier|const
name|D3DFORMAT
name|D3DFMT_INTZ
init|=
operator|(
call|(
name|D3DFORMAT
call|)
argument_list|(
name|MAKEFOURCC
argument_list|(
literal|'I'
argument_list|,
literal|'N'
argument_list|,
literal|'T'
argument_list|,
literal|'Z'
argument_list|)
argument_list|)
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|D3DFMT_NULL
specifier|const
name|D3DFORMAT
name|D3DFMT_NULL
init|=
operator|(
call|(
name|D3DFORMAT
call|)
argument_list|(
name|MAKEFOURCC
argument_list|(
literal|'N'
argument_list|,
literal|'U'
argument_list|,
literal|'L'
argument_list|,
literal|'L'
argument_list|)
argument_list|)
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
struct_decl|struct
name|Color
struct_decl|;
name|int
name|UniformExternalComponentCount
parameter_list|(
name|GLenum
name|type
parameter_list|)
function_decl|;
name|int
name|UniformInternalComponentCount
parameter_list|(
name|GLenum
name|type
parameter_list|)
function_decl|;
name|GLenum
name|UniformComponentType
parameter_list|(
name|GLenum
name|type
parameter_list|)
function_decl|;
name|size_t
name|UniformInternalSize
parameter_list|(
name|GLenum
name|type
parameter_list|)
function_decl|;
name|size_t
name|UniformExternalSize
parameter_list|(
name|GLenum
name|type
parameter_list|)
function_decl|;
name|int
name|VariableRowCount
parameter_list|(
name|GLenum
name|type
parameter_list|)
function_decl|;
name|int
name|VariableColumnCount
parameter_list|(
name|GLenum
name|type
parameter_list|)
function_decl|;
name|int
name|AllocateFirstFreeBits
parameter_list|(
name|unsigned
name|int
modifier|*
name|bits
parameter_list|,
name|unsigned
name|int
name|allocationSize
parameter_list|,
name|unsigned
name|int
name|bitsSize
parameter_list|)
function_decl|;
name|int
name|ComputePixelSize
parameter_list|(
name|GLint
name|internalformat
parameter_list|)
function_decl|;
name|GLsizei
name|ComputePitch
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLint
name|internalformat
parameter_list|,
name|GLint
name|alignment
parameter_list|)
function_decl|;
name|GLsizei
name|ComputeCompressedPitch
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLenum
name|format
parameter_list|)
function_decl|;
name|GLsizei
name|ComputeCompressedSize
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|)
function_decl|;
name|bool
name|IsCompressed
parameter_list|(
name|GLenum
name|format
parameter_list|)
function_decl|;
name|bool
name|IsDepthTexture
parameter_list|(
name|GLenum
name|format
parameter_list|)
function_decl|;
name|bool
name|IsStencilTexture
parameter_list|(
name|GLenum
name|format
parameter_list|)
function_decl|;
name|bool
name|IsCubemapTextureTarget
parameter_list|(
name|GLenum
name|target
parameter_list|)
function_decl|;
name|bool
name|IsInternalTextureTarget
parameter_list|(
name|GLenum
name|target
parameter_list|)
function_decl|;
name|GLint
name|ConvertSizedInternalFormat
parameter_list|(
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|)
function_decl|;
name|GLenum
name|ExtractFormat
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
function_decl|;
name|GLenum
name|ExtractType
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
function_decl|;
name|bool
name|IsColorRenderable
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
function_decl|;
name|bool
name|IsDepthRenderable
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
function_decl|;
name|bool
name|IsStencilRenderable
parameter_list|(
name|GLenum
name|internalformat
parameter_list|)
function_decl|;
name|bool
name|IsFloat32Format
parameter_list|(
name|GLint
name|internalformat
parameter_list|)
function_decl|;
name|bool
name|IsFloat16Format
parameter_list|(
name|GLint
name|internalformat
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|es2dx
block|{
name|D3DCMPFUNC
name|ConvertComparison
parameter_list|(
name|GLenum
name|comparison
parameter_list|)
function_decl|;
name|D3DCOLOR
name|ConvertColor
argument_list|(
name|gl
operator|::
name|Color
name|color
argument_list|)
decl_stmt|;
name|D3DBLEND
name|ConvertBlendFunc
parameter_list|(
name|GLenum
name|blend
parameter_list|)
function_decl|;
name|D3DBLENDOP
name|ConvertBlendOp
parameter_list|(
name|GLenum
name|blendOp
parameter_list|)
function_decl|;
name|D3DSTENCILOP
name|ConvertStencilOp
parameter_list|(
name|GLenum
name|stencilOp
parameter_list|)
function_decl|;
name|D3DTEXTUREADDRESS
name|ConvertTextureWrap
parameter_list|(
name|GLenum
name|wrap
parameter_list|)
function_decl|;
name|D3DCULL
name|ConvertCullMode
parameter_list|(
name|GLenum
name|cullFace
parameter_list|,
name|GLenum
name|frontFace
parameter_list|)
function_decl|;
name|D3DCUBEMAP_FACES
name|ConvertCubeFace
parameter_list|(
name|GLenum
name|cubeFace
parameter_list|)
function_decl|;
name|DWORD
name|ConvertColorMask
parameter_list|(
name|bool
name|red
parameter_list|,
name|bool
name|green
parameter_list|,
name|bool
name|blue
parameter_list|,
name|bool
name|alpha
parameter_list|)
function_decl|;
name|D3DTEXTUREFILTERTYPE
name|ConvertMagFilter
parameter_list|(
name|GLenum
name|magFilter
parameter_list|,
name|float
name|maxAnisotropy
parameter_list|)
function_decl|;
name|void
name|ConvertMinFilter
parameter_list|(
name|GLenum
name|minFilter
parameter_list|,
name|D3DTEXTUREFILTERTYPE
modifier|*
name|d3dMinFilter
parameter_list|,
name|D3DTEXTUREFILTERTYPE
modifier|*
name|d3dMipFilter
parameter_list|,
name|float
name|maxAnisotropy
parameter_list|)
function_decl|;
name|bool
name|ConvertPrimitiveType
parameter_list|(
name|GLenum
name|primitiveType
parameter_list|,
name|GLsizei
name|elementCount
parameter_list|,
name|D3DPRIMITIVETYPE
modifier|*
name|d3dPrimitiveType
parameter_list|,
name|int
modifier|*
name|d3dPrimitiveCount
parameter_list|)
function_decl|;
name|D3DFORMAT
name|ConvertRenderbufferFormat
parameter_list|(
name|GLenum
name|format
parameter_list|)
function_decl|;
name|D3DMULTISAMPLE_TYPE
name|GetMultisampleTypeFromSamples
parameter_list|(
name|GLsizei
name|samples
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|dx2es
block|{
name|GLuint
name|GetAlphaSize
parameter_list|(
name|D3DFORMAT
name|colorFormat
parameter_list|)
function_decl|;
name|GLuint
name|GetRedSize
parameter_list|(
name|D3DFORMAT
name|colorFormat
parameter_list|)
function_decl|;
name|GLuint
name|GetGreenSize
parameter_list|(
name|D3DFORMAT
name|colorFormat
parameter_list|)
function_decl|;
name|GLuint
name|GetBlueSize
parameter_list|(
name|D3DFORMAT
name|colorFormat
parameter_list|)
function_decl|;
name|GLuint
name|GetDepthSize
parameter_list|(
name|D3DFORMAT
name|depthFormat
parameter_list|)
function_decl|;
name|GLuint
name|GetStencilSize
parameter_list|(
name|D3DFORMAT
name|stencilFormat
parameter_list|)
function_decl|;
name|GLsizei
name|GetSamplesFromMultisampleType
parameter_list|(
name|D3DMULTISAMPLE_TYPE
name|type
parameter_list|)
function_decl|;
name|bool
name|IsFormatChannelEquivalent
parameter_list|(
name|D3DFORMAT
name|d3dformat
parameter_list|,
name|GLenum
name|format
parameter_list|)
function_decl|;
name|bool
name|ConvertReadBufferFormat
parameter_list|(
name|D3DFORMAT
name|d3dformat
parameter_list|,
name|GLenum
modifier|*
name|format
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|)
function_decl|;
name|GLenum
name|ConvertBackBufferFormat
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
function_decl|;
name|GLenum
name|ConvertDepthStencilFormat
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|dx
block|{
name|bool
name|IsCompressedFormat
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
function_decl|;
name|size_t
name|ComputeRowSize
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|,
name|unsigned
name|int
name|width
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_expr_stmt
name|std
operator|::
name|string
name|getTempPath
argument_list|()
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|writeFile
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|isDeviceLostError
specifier|inline
name|bool
name|isDeviceLostError
parameter_list|(
name|HRESULT
name|errorCode
parameter_list|)
block|{
switch|switch
condition|(
name|errorCode
condition|)
block|{
case|case
name|D3DERR_DRIVERINTERNALERROR
case|:
case|case
name|D3DERR_DEVICELOST
case|:
case|case
name|D3DERR_DEVICEHUNG
case|:
case|case
name|D3DERR_DEVICEREMOVED
case|:
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_UTILITIES_H
end_comment
end_unit
