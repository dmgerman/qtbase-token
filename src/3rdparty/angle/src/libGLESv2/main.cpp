begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// main.cpp: DLL entry point and management of thread-local data.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_OPENGL_ES_2_ANGLE_STATIC
end_ifndef
begin_decl_stmt
DECL|variable|currentTLS
specifier|static
name|DWORD
name|currentTLS
init|=
name|TLS_OUT_OF_INDEXES
decl_stmt|;
end_decl_stmt
begin_extern
DECL|function|DllMain
extern|extern
literal|"C"
name|BOOL
name|WINAPI
name|DllMain
parameter_list|(
name|HINSTANCE
name|instance
parameter_list|,
name|DWORD
name|reason
parameter_list|,
name|LPVOID
name|reserved
parameter_list|)
block|{
switch|switch
condition|(
name|reason
condition|)
block|{
case|case
name|DLL_PROCESS_ATTACH
case|:
block|{
name|currentTLS
operator|=
name|TlsAlloc
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentTLS
operator|==
name|TLS_OUT_OF_INDEXES
condition|)
block|{
return|return
name|FALSE
return|;
block|}
block|}
comment|// Fall throught to initialize index
case|case
name|DLL_THREAD_ATTACH
case|:
block|{
name|gl
operator|::
name|Current
modifier|*
name|current
init|=
operator|(
name|gl
operator|::
name|Current
operator|*
operator|)
name|LocalAlloc
argument_list|(
name|LPTR
argument_list|,
sizeof|sizeof
argument_list|(
name|gl
operator|::
name|Current
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
condition|)
block|{
name|TlsSetValue
argument_list|(
name|currentTLS
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|current
operator|->
name|context
operator|=
name|NULL
expr_stmt|;
name|current
operator|->
name|display
operator|=
name|NULL
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DLL_THREAD_DETACH
case|:
block|{
name|void
modifier|*
name|current
init|=
name|TlsGetValue
argument_list|(
name|currentTLS
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
condition|)
block|{
name|LocalFree
argument_list|(
operator|(
name|HLOCAL
operator|)
name|current
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DLL_PROCESS_DETACH
case|:
block|{
name|void
modifier|*
name|current
init|=
name|TlsGetValue
argument_list|(
name|currentTLS
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
condition|)
block|{
name|LocalFree
argument_list|(
operator|(
name|HLOCAL
operator|)
name|current
argument_list|)
expr_stmt|;
block|}
name|TlsFree
argument_list|(
name|currentTLS
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|TRUE
return|;
block|}
end_extern
begin_function
DECL|function|current
specifier|static
name|gl
operator|::
name|Current
modifier|*
name|current
parameter_list|()
block|{
return|return
operator|(
name|gl
operator|::
name|Current
operator|*
operator|)
name|TlsGetValue
argument_list|(
name|currentTLS
argument_list|)
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// !QT_OPENGL_ES_2_ANGLE_STATIC
end_comment
begin_function
DECL|function|current
specifier|static
specifier|inline
name|gl
operator|::
name|Current
modifier|*
name|current
parameter_list|()
block|{
comment|// No precautions for thread safety taken as ANGLE is used single-threaded in Qt.
specifier|static
name|gl
operator|::
name|Current
name|curr
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
return|return
operator|&
name|curr
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_OPENGL_ES_2_ANGLE_STATIC
end_comment
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|makeCurrent
name|void
name|makeCurrent
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|egl
operator|::
name|Display
modifier|*
name|display
parameter_list|,
name|egl
operator|::
name|Surface
modifier|*
name|surface
parameter_list|)
block|{
name|Current
modifier|*
name|curr
init|=
name|current
argument_list|()
decl_stmt|;
name|curr
operator|->
name|context
operator|=
name|context
expr_stmt|;
name|curr
operator|->
name|display
operator|=
name|display
expr_stmt|;
if|if
condition|(
name|context
operator|&&
name|display
operator|&&
name|surface
condition|)
block|{
name|context
operator|->
name|makeCurrent
argument_list|(
name|surface
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getContext
name|Context
modifier|*
name|getContext
parameter_list|()
block|{
return|return
name|current
argument_list|()
operator|->
name|context
return|;
block|}
DECL|function|getNonLostContext
name|Context
modifier|*
name|getNonLostContext
parameter_list|()
block|{
name|Context
modifier|*
name|context
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|isContextLost
argument_list|()
condition|)
block|{
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
else|else
block|{
return|return
name|context
return|;
block|}
block|}
return|return
name|NULL
return|;
block|}
DECL|function|getDisplay
name|egl
operator|::
name|Display
modifier|*
name|getDisplay
parameter_list|()
block|{
return|return
name|current
argument_list|()
operator|->
name|display
return|;
block|}
comment|// Records an error code
DECL|function|error
name|void
name|error
parameter_list|(
name|GLenum
name|errorCode
parameter_list|)
block|{
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|glGetCurrentContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|errorCode
condition|)
block|{
case|case
name|GL_INVALID_ENUM
case|:
name|context
operator|->
name|recordInvalidEnum
argument_list|()
expr_stmt|;
name|TRACE
argument_list|(
literal|"\t! Error generated: invalid enum\n"
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_INVALID_VALUE
case|:
name|context
operator|->
name|recordInvalidValue
argument_list|()
expr_stmt|;
name|TRACE
argument_list|(
literal|"\t! Error generated: invalid value\n"
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_INVALID_OPERATION
case|:
name|context
operator|->
name|recordInvalidOperation
argument_list|()
expr_stmt|;
name|TRACE
argument_list|(
literal|"\t! Error generated: invalid operation\n"
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_OUT_OF_MEMORY
case|:
name|context
operator|->
name|recordOutOfMemory
argument_list|()
expr_stmt|;
name|TRACE
argument_list|(
literal|"\t! Error generated: out of memory\n"
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_INVALID_FRAMEBUFFER_OPERATION
case|:
name|context
operator|->
name|recordInvalidFramebufferOperation
argument_list|()
expr_stmt|;
name|TRACE
argument_list|(
literal|"\t! Error generated: invalid framebuffer operation\n"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_namespace
end_unit
