begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// main.cpp: DLL entry point and management of thread-local data.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_include
include|#
directive|include
file|"common/tls.h"
end_include
begin_decl_stmt
DECL|variable|currentTLS
specifier|static
name|TLSIndex
name|currentTLS
init|=
name|TLS_INVALID_INDEX
decl_stmt|;
end_decl_stmt
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
comment|// TODO(kbr): figure out how these are going to be managed on
comment|// non-Windows platforms. These routines would need to be exported
comment|// from ANGLE and called cooperatively when users create and destroy
comment|// threads -- or the initialization of the TLS index, and allocation
comment|// of thread-local data, will have to be done lazily. Will have to use
comment|// destructor function with pthread_create_key on POSIX platforms to
comment|// clean up thread-local data.
comment|// Call this exactly once at process startup.
DECL|function|CreateThreadLocalIndex
name|bool
name|CreateThreadLocalIndex
parameter_list|()
block|{
name|currentTLS
operator|=
name|CreateTLSIndex
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentTLS
operator|==
name|TLS_INVALID_INDEX
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|// Call this exactly once at process shutdown.
DECL|function|DestroyThreadLocalIndex
name|void
name|DestroyThreadLocalIndex
parameter_list|()
block|{
name|DestroyTLSIndex
argument_list|(
name|currentTLS
argument_list|)
expr_stmt|;
name|currentTLS
operator|=
name|TLS_INVALID_INDEX
expr_stmt|;
block|}
comment|// Call this upon thread startup.
DECL|function|AllocateCurrent
name|Current
modifier|*
name|AllocateCurrent
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|currentTLS
operator|!=
name|TLS_INVALID_INDEX
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentTLS
operator|==
name|TLS_INVALID_INDEX
condition|)
block|{
return|return
name|NULL
return|;
block|}
name|Current
modifier|*
name|current
init|=
operator|new
name|Current
argument_list|()
decl_stmt|;
name|current
operator|->
name|context
operator|=
name|NULL
expr_stmt|;
name|current
operator|->
name|display
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
operator|!
name|SetTLSValue
argument_list|(
name|currentTLS
argument_list|,
name|current
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Could not set thread local storage."
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|current
return|;
block|}
comment|// Call this upon thread shutdown.
DECL|function|DeallocateCurrent
name|void
name|DeallocateCurrent
parameter_list|()
block|{
name|Current
modifier|*
name|current
init|=
cast|reinterpret_cast
argument_list|<
name|Current
operator|*
argument_list|>
argument_list|(
name|GetTLSValue
argument_list|(
name|currentTLS
argument_list|)
argument_list|)
decl_stmt|;
name|SafeDelete
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|SetTLSValue
argument_list|(
name|currentTLS
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINDOWS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2_ANGLE_STATIC
argument_list|)
end_if
begin_extern
DECL|function|DllMain
extern|extern
literal|"C"
name|BOOL
name|WINAPI
name|DllMain
parameter_list|(
name|HINSTANCE
name|instance
parameter_list|,
name|DWORD
name|reason
parameter_list|,
name|LPVOID
name|reserved
parameter_list|)
block|{
switch|switch
condition|(
name|reason
condition|)
block|{
case|case
name|DLL_PROCESS_ATTACH
case|:
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|CreateThreadLocalIndex
argument_list|()
condition|)
block|{
return|return
name|FALSE
return|;
block|}
ifdef|#
directive|ifdef
name|ANGLE_ENABLE_DEBUG_ANNOTATIONS
name|gl
operator|::
name|InitializeDebugAnnotations
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
comment|// Fall through to initialize index
case|case
name|DLL_THREAD_ATTACH
case|:
block|{
name|gl
operator|::
name|AllocateCurrent
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|DLL_THREAD_DETACH
case|:
block|{
name|gl
operator|::
name|DeallocateCurrent
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|DLL_PROCESS_DETACH
case|:
block|{
name|gl
operator|::
name|DeallocateCurrent
argument_list|()
expr_stmt|;
name|gl
operator|::
name|DestroyThreadLocalIndex
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|ANGLE_ENABLE_DEBUG_ANNOTATIONS
name|gl
operator|::
name|UninitializeDebugAnnotations
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
break|break;
default|default:
break|break;
block|}
return|return
name|TRUE
return|;
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ANGLE_PLATFORM_WINDOWS&& !QT_OPENGL_ES_2_ANGLE_STATIC
end_comment
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|GetCurrentData
name|Current
modifier|*
name|GetCurrentData
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_OPENGL_ES_2_ANGLE_STATIC
name|Current
modifier|*
name|current
init|=
cast|reinterpret_cast
argument_list|<
name|Current
operator|*
argument_list|>
argument_list|(
name|GetTLSValue
argument_list|(
name|currentTLS
argument_list|)
argument_list|)
decl_stmt|;
comment|// ANGLE issue 488: when the dll is loaded after thread initialization,
comment|// thread local storage (current) might not exist yet.
return|return
operator|(
name|current
condition|?
name|current
else|:
name|AllocateCurrent
argument_list|()
operator|)
return|;
else|#
directive|else
comment|// No precautions for thread safety taken as ANGLE is used single-threaded in Qt.
specifier|static
name|Current
name|current
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
return|return
operator|&
name|current
return|;
endif|#
directive|endif
block|}
DECL|function|makeCurrent
name|void
name|makeCurrent
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|egl
operator|::
name|Display
modifier|*
name|display
parameter_list|,
name|egl
operator|::
name|Surface
modifier|*
name|surface
parameter_list|)
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
name|current
operator|->
name|context
operator|=
name|context
expr_stmt|;
name|current
operator|->
name|display
operator|=
name|display
expr_stmt|;
if|if
condition|(
name|context
operator|&&
name|display
operator|&&
name|surface
condition|)
block|{
name|context
operator|->
name|makeCurrent
argument_list|(
name|surface
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getContext
name|Context
modifier|*
name|getContext
parameter_list|()
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
return|return
name|current
operator|->
name|context
return|;
block|}
DECL|function|getNonLostContext
name|Context
modifier|*
name|getNonLostContext
parameter_list|()
block|{
name|Context
modifier|*
name|context
init|=
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|isContextLost
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Context has been lost."
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
else|else
block|{
return|return
name|context
return|;
block|}
block|}
return|return
name|NULL
return|;
block|}
DECL|function|getDisplay
name|egl
operator|::
name|Display
modifier|*
name|getDisplay
parameter_list|()
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
return|return
name|current
operator|->
name|display
return|;
block|}
block|}
end_namespace
end_unit
