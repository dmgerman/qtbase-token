begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// ResourceManager.cpp: Implements the gl::ResourceManager class, which tracks and
end_comment
begin_comment
comment|// retrieves objects which may be shared by multiple Contexts.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/ResourceManager.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Buffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Program.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Shader.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|ResourceManager
name|ResourceManager
operator|::
name|ResourceManager
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|)
block|{
name|mRefCount
operator|=
literal|1
expr_stmt|;
name|mRenderer
operator|=
name|renderer
expr_stmt|;
block|}
DECL|function|~ResourceManager
name|ResourceManager
operator|::
name|~
name|ResourceManager
parameter_list|()
block|{
while|while
condition|(
operator|!
name|mBufferMap
operator|.
name|empty
argument_list|()
condition|)
block|{
name|deleteBuffer
argument_list|(
name|mBufferMap
operator|.
name|begin
argument_list|()
operator|->
name|first
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|mProgramMap
operator|.
name|empty
argument_list|()
condition|)
block|{
name|deleteProgram
argument_list|(
name|mProgramMap
operator|.
name|begin
argument_list|()
operator|->
name|first
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|mShaderMap
operator|.
name|empty
argument_list|()
condition|)
block|{
name|deleteShader
argument_list|(
name|mShaderMap
operator|.
name|begin
argument_list|()
operator|->
name|first
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|mRenderbufferMap
operator|.
name|empty
argument_list|()
condition|)
block|{
name|deleteRenderbuffer
argument_list|(
name|mRenderbufferMap
operator|.
name|begin
argument_list|()
operator|->
name|first
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|mTextureMap
operator|.
name|empty
argument_list|()
condition|)
block|{
name|deleteTexture
argument_list|(
name|mTextureMap
operator|.
name|begin
argument_list|()
operator|->
name|first
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|addRef
name|void
name|ResourceManager
operator|::
name|addRef
parameter_list|()
block|{
name|mRefCount
operator|++
expr_stmt|;
block|}
DECL|function|release
name|void
name|ResourceManager
operator|::
name|release
parameter_list|()
block|{
if|if
condition|(
operator|--
name|mRefCount
operator|==
literal|0
condition|)
block|{
operator|delete
name|this
expr_stmt|;
block|}
block|}
comment|// Returns an unused buffer name
DECL|function|createBuffer
name|GLuint
name|ResourceManager
operator|::
name|createBuffer
parameter_list|()
block|{
name|GLuint
name|handle
init|=
name|mBufferHandleAllocator
operator|.
name|allocate
argument_list|()
decl_stmt|;
name|mBufferMap
index|[
name|handle
index|]
operator|=
name|NULL
expr_stmt|;
return|return
name|handle
return|;
block|}
comment|// Returns an unused shader/program name
DECL|function|createShader
name|GLuint
name|ResourceManager
operator|::
name|createShader
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
name|GLuint
name|handle
init|=
name|mProgramShaderHandleAllocator
operator|.
name|allocate
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|GL_VERTEX_SHADER
condition|)
block|{
name|mShaderMap
index|[
name|handle
index|]
operator|=
operator|new
name|VertexShader
argument_list|(
name|this
argument_list|,
name|mRenderer
argument_list|,
name|handle
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|GL_FRAGMENT_SHADER
condition|)
block|{
name|mShaderMap
index|[
name|handle
index|]
operator|=
operator|new
name|FragmentShader
argument_list|(
name|this
argument_list|,
name|mRenderer
argument_list|,
name|handle
argument_list|)
expr_stmt|;
block|}
else|else
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|handle
return|;
block|}
comment|// Returns an unused program/shader name
DECL|function|createProgram
name|GLuint
name|ResourceManager
operator|::
name|createProgram
parameter_list|()
block|{
name|GLuint
name|handle
init|=
name|mProgramShaderHandleAllocator
operator|.
name|allocate
argument_list|()
decl_stmt|;
name|mProgramMap
index|[
name|handle
index|]
operator|=
operator|new
name|Program
argument_list|(
name|mRenderer
argument_list|,
name|this
argument_list|,
name|handle
argument_list|)
expr_stmt|;
return|return
name|handle
return|;
block|}
comment|// Returns an unused texture name
DECL|function|createTexture
name|GLuint
name|ResourceManager
operator|::
name|createTexture
parameter_list|()
block|{
name|GLuint
name|handle
init|=
name|mTextureHandleAllocator
operator|.
name|allocate
argument_list|()
decl_stmt|;
name|mTextureMap
index|[
name|handle
index|]
operator|=
name|NULL
expr_stmt|;
return|return
name|handle
return|;
block|}
comment|// Returns an unused renderbuffer name
DECL|function|createRenderbuffer
name|GLuint
name|ResourceManager
operator|::
name|createRenderbuffer
parameter_list|()
block|{
name|GLuint
name|handle
init|=
name|mRenderbufferHandleAllocator
operator|.
name|allocate
argument_list|()
decl_stmt|;
name|mRenderbufferMap
index|[
name|handle
index|]
operator|=
name|NULL
expr_stmt|;
return|return
name|handle
return|;
block|}
DECL|function|deleteBuffer
name|void
name|ResourceManager
operator|::
name|deleteBuffer
parameter_list|(
name|GLuint
name|buffer
parameter_list|)
block|{
name|BufferMap
operator|::
name|iterator
name|bufferObject
init|=
name|mBufferMap
operator|.
name|find
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|bufferObject
operator|!=
name|mBufferMap
operator|.
name|end
argument_list|()
condition|)
block|{
name|mBufferHandleAllocator
operator|.
name|release
argument_list|(
name|bufferObject
operator|->
name|first
argument_list|)
expr_stmt|;
if|if
condition|(
name|bufferObject
operator|->
name|second
condition|)
name|bufferObject
operator|->
name|second
operator|->
name|release
argument_list|()
expr_stmt|;
name|mBufferMap
operator|.
name|erase
argument_list|(
name|bufferObject
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|deleteShader
name|void
name|ResourceManager
operator|::
name|deleteShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
name|ShaderMap
operator|::
name|iterator
name|shaderObject
init|=
name|mShaderMap
operator|.
name|find
argument_list|(
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
name|shaderObject
operator|!=
name|mShaderMap
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|shaderObject
operator|->
name|second
operator|->
name|getRefCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|mProgramShaderHandleAllocator
operator|.
name|release
argument_list|(
name|shaderObject
operator|->
name|first
argument_list|)
expr_stmt|;
operator|delete
name|shaderObject
operator|->
name|second
expr_stmt|;
name|mShaderMap
operator|.
name|erase
argument_list|(
name|shaderObject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shaderObject
operator|->
name|second
operator|->
name|flagForDeletion
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|deleteProgram
name|void
name|ResourceManager
operator|::
name|deleteProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|ProgramMap
operator|::
name|iterator
name|programObject
init|=
name|mProgramMap
operator|.
name|find
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
name|programObject
operator|!=
name|mProgramMap
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|programObject
operator|->
name|second
operator|->
name|getRefCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|mProgramShaderHandleAllocator
operator|.
name|release
argument_list|(
name|programObject
operator|->
name|first
argument_list|)
expr_stmt|;
operator|delete
name|programObject
operator|->
name|second
expr_stmt|;
name|mProgramMap
operator|.
name|erase
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|programObject
operator|->
name|second
operator|->
name|flagForDeletion
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|deleteTexture
name|void
name|ResourceManager
operator|::
name|deleteTexture
parameter_list|(
name|GLuint
name|texture
parameter_list|)
block|{
name|TextureMap
operator|::
name|iterator
name|textureObject
init|=
name|mTextureMap
operator|.
name|find
argument_list|(
name|texture
argument_list|)
decl_stmt|;
if|if
condition|(
name|textureObject
operator|!=
name|mTextureMap
operator|.
name|end
argument_list|()
condition|)
block|{
name|mTextureHandleAllocator
operator|.
name|release
argument_list|(
name|textureObject
operator|->
name|first
argument_list|)
expr_stmt|;
if|if
condition|(
name|textureObject
operator|->
name|second
condition|)
name|textureObject
operator|->
name|second
operator|->
name|release
argument_list|()
expr_stmt|;
name|mTextureMap
operator|.
name|erase
argument_list|(
name|textureObject
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|deleteRenderbuffer
name|void
name|ResourceManager
operator|::
name|deleteRenderbuffer
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
block|{
name|RenderbufferMap
operator|::
name|iterator
name|renderbufferObject
init|=
name|mRenderbufferMap
operator|.
name|find
argument_list|(
name|renderbuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|renderbufferObject
operator|!=
name|mRenderbufferMap
operator|.
name|end
argument_list|()
condition|)
block|{
name|mRenderbufferHandleAllocator
operator|.
name|release
argument_list|(
name|renderbufferObject
operator|->
name|first
argument_list|)
expr_stmt|;
if|if
condition|(
name|renderbufferObject
operator|->
name|second
condition|)
name|renderbufferObject
operator|->
name|second
operator|->
name|release
argument_list|()
expr_stmt|;
name|mRenderbufferMap
operator|.
name|erase
argument_list|(
name|renderbufferObject
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getBuffer
name|Buffer
modifier|*
name|ResourceManager
operator|::
name|getBuffer
parameter_list|(
name|unsigned
name|int
name|handle
parameter_list|)
block|{
name|BufferMap
operator|::
name|iterator
name|buffer
init|=
name|mBufferMap
operator|.
name|find
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
name|mBufferMap
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|NULL
return|;
block|}
else|else
block|{
return|return
name|buffer
operator|->
name|second
return|;
block|}
block|}
DECL|function|getShader
name|Shader
modifier|*
name|ResourceManager
operator|::
name|getShader
parameter_list|(
name|unsigned
name|int
name|handle
parameter_list|)
block|{
name|ShaderMap
operator|::
name|iterator
name|shader
init|=
name|mShaderMap
operator|.
name|find
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|shader
operator|==
name|mShaderMap
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|NULL
return|;
block|}
else|else
block|{
return|return
name|shader
operator|->
name|second
return|;
block|}
block|}
DECL|function|getTexture
name|Texture
modifier|*
name|ResourceManager
operator|::
name|getTexture
parameter_list|(
name|unsigned
name|int
name|handle
parameter_list|)
block|{
if|if
condition|(
name|handle
operator|==
literal|0
condition|)
return|return
name|NULL
return|;
name|TextureMap
operator|::
name|iterator
name|texture
init|=
name|mTextureMap
operator|.
name|find
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|texture
operator|==
name|mTextureMap
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|NULL
return|;
block|}
else|else
block|{
return|return
name|texture
operator|->
name|second
return|;
block|}
block|}
DECL|function|getProgram
name|Program
modifier|*
name|ResourceManager
operator|::
name|getProgram
parameter_list|(
name|unsigned
name|int
name|handle
parameter_list|)
block|{
name|ProgramMap
operator|::
name|iterator
name|program
init|=
name|mProgramMap
operator|.
name|find
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|program
operator|==
name|mProgramMap
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|NULL
return|;
block|}
else|else
block|{
return|return
name|program
operator|->
name|second
return|;
block|}
block|}
DECL|function|getRenderbuffer
name|Renderbuffer
modifier|*
name|ResourceManager
operator|::
name|getRenderbuffer
parameter_list|(
name|unsigned
name|int
name|handle
parameter_list|)
block|{
name|RenderbufferMap
operator|::
name|iterator
name|renderbuffer
init|=
name|mRenderbufferMap
operator|.
name|find
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|renderbuffer
operator|==
name|mRenderbufferMap
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|NULL
return|;
block|}
else|else
block|{
return|return
name|renderbuffer
operator|->
name|second
return|;
block|}
block|}
DECL|function|setRenderbuffer
name|void
name|ResourceManager
operator|::
name|setRenderbuffer
parameter_list|(
name|GLuint
name|handle
parameter_list|,
name|Renderbuffer
modifier|*
name|buffer
parameter_list|)
block|{
name|mRenderbufferMap
index|[
name|handle
index|]
operator|=
name|buffer
expr_stmt|;
block|}
DECL|function|checkBufferAllocation
name|void
name|ResourceManager
operator|::
name|checkBufferAllocation
parameter_list|(
name|unsigned
name|int
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|!=
literal|0
operator|&&
operator|!
name|getBuffer
argument_list|(
name|buffer
argument_list|)
condition|)
block|{
name|Buffer
modifier|*
name|bufferObject
init|=
operator|new
name|Buffer
argument_list|(
name|mRenderer
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|mBufferMap
index|[
name|buffer
index|]
operator|=
name|bufferObject
expr_stmt|;
name|bufferObject
operator|->
name|addRef
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|checkTextureAllocation
name|void
name|ResourceManager
operator|::
name|checkTextureAllocation
parameter_list|(
name|GLuint
name|texture
parameter_list|,
name|TextureType
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getTexture
argument_list|(
name|texture
argument_list|)
operator|&&
name|texture
operator|!=
literal|0
condition|)
block|{
name|Texture
modifier|*
name|textureObject
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|TEXTURE_2D
condition|)
block|{
name|textureObject
operator|=
operator|new
name|Texture2D
argument_list|(
name|mRenderer
argument_list|,
name|texture
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|TEXTURE_CUBE
condition|)
block|{
name|textureObject
operator|=
operator|new
name|TextureCubeMap
argument_list|(
name|mRenderer
argument_list|,
name|texture
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return;
block|}
name|mTextureMap
index|[
name|texture
index|]
operator|=
name|textureObject
expr_stmt|;
name|textureObject
operator|->
name|addRef
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|checkRenderbufferAllocation
name|void
name|ResourceManager
operator|::
name|checkRenderbufferAllocation
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
block|{
if|if
condition|(
name|renderbuffer
operator|!=
literal|0
operator|&&
operator|!
name|getRenderbuffer
argument_list|(
name|renderbuffer
argument_list|)
condition|)
block|{
name|Renderbuffer
modifier|*
name|renderbufferObject
init|=
operator|new
name|Renderbuffer
argument_list|(
name|mRenderer
argument_list|,
name|renderbuffer
argument_list|,
operator|new
name|Colorbuffer
argument_list|(
name|mRenderer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGBA4
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|mRenderbufferMap
index|[
name|renderbuffer
index|]
operator|=
name|renderbufferObject
expr_stmt|;
name|renderbufferObject
operator|->
name|addRef
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_namespace
end_unit
