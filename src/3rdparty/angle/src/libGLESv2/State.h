begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// State.h: Defines the State class, encapsulating raw GL state
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_STATE_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_STATE_H_
define|#
directive|define
name|LIBGLESV2_STATE_H_
end_define
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"common/RefCountObject.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/VertexAttribute.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/TransformFeedback.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Program.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Sampler.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Query
decl_stmt|;
name|class
name|VertexArray
decl_stmt|;
name|class
name|Context
decl_stmt|;
struct_decl|struct
name|Caps
struct_decl|;
struct_decl|struct
name|Data
struct_decl|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|GLenum
operator|,
name|BindingPointer
operator|<
name|Texture
operator|>
expr|>
name|TextureMap
expr_stmt|;
name|class
name|State
block|{
name|public
label|:
name|State
argument_list|()
expr_stmt|;
operator|~
name|State
argument_list|()
expr_stmt|;
name|void
name|initialize
parameter_list|(
specifier|const
name|Caps
modifier|&
name|caps
parameter_list|,
name|GLuint
name|clientVersion
parameter_list|)
function_decl|;
name|void
name|reset
parameter_list|()
function_decl|;
comment|// State chunk getters
specifier|const
name|RasterizerState
operator|&
name|getRasterizerState
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|BlendState
operator|&
name|getBlendState
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|DepthStencilState
operator|&
name|getDepthStencilState
argument_list|()
specifier|const
expr_stmt|;
comment|// Clear behavior setters& state parameter block generation function
name|void
name|setClearColor
parameter_list|(
name|float
name|red
parameter_list|,
name|float
name|green
parameter_list|,
name|float
name|blue
parameter_list|,
name|float
name|alpha
parameter_list|)
function_decl|;
name|void
name|setClearDepth
parameter_list|(
name|float
name|depth
parameter_list|)
function_decl|;
name|void
name|setClearStencil
parameter_list|(
name|int
name|stencil
parameter_list|)
function_decl|;
name|ClearParameters
name|getClearParameters
argument_list|(
name|GLbitfield
name|mask
argument_list|)
decl|const
decl_stmt|;
comment|// Write mask manipulation
name|void
name|setColorMask
parameter_list|(
name|bool
name|red
parameter_list|,
name|bool
name|green
parameter_list|,
name|bool
name|blue
parameter_list|,
name|bool
name|alpha
parameter_list|)
function_decl|;
name|void
name|setDepthMask
parameter_list|(
name|bool
name|mask
parameter_list|)
function_decl|;
comment|// Discard toggle& query
name|bool
name|isRasterizerDiscardEnabled
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setRasterizerDiscard
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
comment|// Face culling state manipulation
name|bool
name|isCullFaceEnabled
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setCullFace
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
name|void
name|setCullMode
parameter_list|(
name|GLenum
name|mode
parameter_list|)
function_decl|;
name|void
name|setFrontFace
parameter_list|(
name|GLenum
name|front
parameter_list|)
function_decl|;
comment|// Depth test state manipulation
name|bool
name|isDepthTestEnabled
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setDepthTest
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
name|void
name|setDepthFunc
parameter_list|(
name|GLenum
name|depthFunc
parameter_list|)
function_decl|;
name|void
name|setDepthRange
parameter_list|(
name|float
name|zNear
parameter_list|,
name|float
name|zFar
parameter_list|)
function_decl|;
name|void
name|getDepthRange
argument_list|(
name|float
operator|*
name|zNear
argument_list|,
name|float
operator|*
name|zFar
argument_list|)
decl|const
decl_stmt|;
comment|// Blend state manipulation
name|bool
name|isBlendEnabled
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setBlend
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
name|void
name|setBlendFactors
parameter_list|(
name|GLenum
name|sourceRGB
parameter_list|,
name|GLenum
name|destRGB
parameter_list|,
name|GLenum
name|sourceAlpha
parameter_list|,
name|GLenum
name|destAlpha
parameter_list|)
function_decl|;
name|void
name|setBlendColor
parameter_list|(
name|float
name|red
parameter_list|,
name|float
name|green
parameter_list|,
name|float
name|blue
parameter_list|,
name|float
name|alpha
parameter_list|)
function_decl|;
name|void
name|setBlendEquation
parameter_list|(
name|GLenum
name|rgbEquation
parameter_list|,
name|GLenum
name|alphaEquation
parameter_list|)
function_decl|;
specifier|const
name|ColorF
operator|&
name|getBlendColor
argument_list|()
specifier|const
expr_stmt|;
comment|// Stencil state maniupulation
name|bool
name|isStencilTestEnabled
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setStencilTest
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
name|void
name|setStencilParams
parameter_list|(
name|GLenum
name|stencilFunc
parameter_list|,
name|GLint
name|stencilRef
parameter_list|,
name|GLuint
name|stencilMask
parameter_list|)
function_decl|;
name|void
name|setStencilBackParams
parameter_list|(
name|GLenum
name|stencilBackFunc
parameter_list|,
name|GLint
name|stencilBackRef
parameter_list|,
name|GLuint
name|stencilBackMask
parameter_list|)
function_decl|;
name|void
name|setStencilWritemask
parameter_list|(
name|GLuint
name|stencilWritemask
parameter_list|)
function_decl|;
name|void
name|setStencilBackWritemask
parameter_list|(
name|GLuint
name|stencilBackWritemask
parameter_list|)
function_decl|;
name|void
name|setStencilOperations
parameter_list|(
name|GLenum
name|stencilFail
parameter_list|,
name|GLenum
name|stencilPassDepthFail
parameter_list|,
name|GLenum
name|stencilPassDepthPass
parameter_list|)
function_decl|;
name|void
name|setStencilBackOperations
parameter_list|(
name|GLenum
name|stencilBackFail
parameter_list|,
name|GLenum
name|stencilBackPassDepthFail
parameter_list|,
name|GLenum
name|stencilBackPassDepthPass
parameter_list|)
function_decl|;
name|GLint
name|getStencilRef
argument_list|()
specifier|const
expr_stmt|;
name|GLint
name|getStencilBackRef
argument_list|()
specifier|const
expr_stmt|;
comment|// Depth bias/polygon offset state manipulation
name|bool
name|isPolygonOffsetFillEnabled
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setPolygonOffsetFill
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
name|void
name|setPolygonOffsetParams
parameter_list|(
name|GLfloat
name|factor
parameter_list|,
name|GLfloat
name|units
parameter_list|)
function_decl|;
comment|// Multisample coverage state manipulation
name|bool
name|isSampleAlphaToCoverageEnabled
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setSampleAlphaToCoverage
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
name|bool
name|isSampleCoverageEnabled
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setSampleCoverage
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
name|void
name|setSampleCoverageParams
parameter_list|(
name|GLclampf
name|value
parameter_list|,
name|bool
name|invert
parameter_list|)
function_decl|;
name|void
name|getSampleCoverageParams
argument_list|(
name|GLclampf
operator|*
name|value
argument_list|,
name|bool
operator|*
name|invert
argument_list|)
decl|const
decl_stmt|;
comment|// Scissor test state toggle& query
name|bool
name|isScissorTestEnabled
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setScissorTest
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
name|void
name|setScissorParams
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
function_decl|;
specifier|const
name|Rectangle
operator|&
name|getScissor
argument_list|()
specifier|const
expr_stmt|;
comment|// Dither state toggle& query
name|bool
name|isDitherEnabled
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setDither
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
comment|// Generic state toggle& query
name|void
name|setEnableFeature
parameter_list|(
name|GLenum
name|feature
parameter_list|,
name|bool
name|enabled
parameter_list|)
function_decl|;
name|bool
name|getEnableFeature
parameter_list|(
name|GLenum
name|feature
parameter_list|)
function_decl|;
comment|// Line width state setter
name|void
name|setLineWidth
parameter_list|(
name|GLfloat
name|width
parameter_list|)
function_decl|;
comment|// Hint setters
name|void
name|setGenerateMipmapHint
parameter_list|(
name|GLenum
name|hint
parameter_list|)
function_decl|;
name|void
name|setFragmentShaderDerivativeHint
parameter_list|(
name|GLenum
name|hint
parameter_list|)
function_decl|;
comment|// Viewport state setter/getter
name|void
name|setViewportParams
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
function_decl|;
specifier|const
name|Rectangle
operator|&
name|getViewport
argument_list|()
specifier|const
expr_stmt|;
comment|// Texture binding& active texture unit manipulation
name|void
name|setActiveSampler
parameter_list|(
name|unsigned
name|int
name|active
parameter_list|)
function_decl|;
name|unsigned
name|int
name|getActiveSampler
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setSamplerTexture
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|Texture
modifier|*
name|texture
parameter_list|)
function_decl|;
name|Texture
modifier|*
name|getSamplerTexture
argument_list|(
name|unsigned
name|int
name|sampler
argument_list|,
name|GLenum
name|type
argument_list|)
decl|const
decl_stmt|;
name|GLuint
name|getSamplerTextureId
argument_list|(
name|unsigned
name|int
name|sampler
argument_list|,
name|GLenum
name|type
argument_list|)
decl|const
decl_stmt|;
name|void
name|detachTexture
parameter_list|(
specifier|const
name|TextureMap
modifier|&
name|zeroTextures
parameter_list|,
name|GLuint
name|texture
parameter_list|)
function_decl|;
name|void
name|initializeZeroTextures
parameter_list|(
specifier|const
name|TextureMap
modifier|&
name|zeroTextures
parameter_list|)
function_decl|;
comment|// Sampler object binding manipulation
name|void
name|setSamplerBinding
parameter_list|(
name|GLuint
name|textureUnit
parameter_list|,
name|Sampler
modifier|*
name|sampler
parameter_list|)
function_decl|;
name|GLuint
name|getSamplerId
argument_list|(
name|GLuint
name|textureUnit
argument_list|)
decl|const
decl_stmt|;
name|Sampler
modifier|*
name|getSampler
argument_list|(
name|GLuint
name|textureUnit
argument_list|)
decl|const
decl_stmt|;
name|void
name|detachSampler
parameter_list|(
name|GLuint
name|sampler
parameter_list|)
function_decl|;
comment|// Renderbuffer binding manipulation
name|void
name|setRenderbufferBinding
parameter_list|(
name|Renderbuffer
modifier|*
name|renderbuffer
parameter_list|)
function_decl|;
name|GLuint
name|getRenderbufferId
argument_list|()
specifier|const
expr_stmt|;
name|Renderbuffer
modifier|*
name|getCurrentRenderbuffer
parameter_list|()
function_decl|;
name|void
name|detachRenderbuffer
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
function_decl|;
comment|// Framebuffer binding manipulation
name|void
name|setReadFramebufferBinding
parameter_list|(
name|Framebuffer
modifier|*
name|framebuffer
parameter_list|)
function_decl|;
name|void
name|setDrawFramebufferBinding
parameter_list|(
name|Framebuffer
modifier|*
name|framebuffer
parameter_list|)
function_decl|;
name|Framebuffer
modifier|*
name|getTargetFramebuffer
argument_list|(
name|GLenum
name|target
argument_list|)
decl|const
decl_stmt|;
name|Framebuffer
modifier|*
name|getReadFramebuffer
parameter_list|()
function_decl|;
name|Framebuffer
modifier|*
name|getDrawFramebuffer
parameter_list|()
function_decl|;
specifier|const
name|Framebuffer
operator|*
name|getReadFramebuffer
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|Framebuffer
operator|*
name|getDrawFramebuffer
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|removeReadFramebufferBinding
parameter_list|(
name|GLuint
name|framebuffer
parameter_list|)
function_decl|;
name|bool
name|removeDrawFramebufferBinding
parameter_list|(
name|GLuint
name|framebuffer
parameter_list|)
function_decl|;
comment|// Vertex array object binding manipulation
name|void
name|setVertexArrayBinding
parameter_list|(
name|VertexArray
modifier|*
name|vertexArray
parameter_list|)
function_decl|;
name|GLuint
name|getVertexArrayId
argument_list|()
specifier|const
expr_stmt|;
name|VertexArray
operator|*
name|getVertexArray
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|removeVertexArrayBinding
parameter_list|(
name|GLuint
name|vertexArray
parameter_list|)
function_decl|;
comment|// Program binding manipulation
name|void
name|setCurrentProgram
parameter_list|(
name|GLuint
name|programId
parameter_list|,
name|Program
modifier|*
name|newProgram
parameter_list|)
function_decl|;
name|void
name|setCurrentProgramBinary
parameter_list|(
name|ProgramBinary
modifier|*
name|binary
parameter_list|)
function_decl|;
name|GLuint
name|getCurrentProgramId
argument_list|()
specifier|const
expr_stmt|;
name|ProgramBinary
operator|*
name|getCurrentProgramBinary
argument_list|()
specifier|const
expr_stmt|;
comment|// Transform feedback object (not buffer) binding manipulation
name|void
name|setTransformFeedbackBinding
parameter_list|(
name|TransformFeedback
modifier|*
name|transformFeedback
parameter_list|)
function_decl|;
name|TransformFeedback
operator|*
name|getCurrentTransformFeedback
argument_list|()
specifier|const
expr_stmt|;
name|void
name|detachTransformFeedback
parameter_list|(
name|GLuint
name|transformFeedback
parameter_list|)
function_decl|;
comment|// Query binding manipulation
name|bool
name|isQueryActive
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setActiveQuery
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|Query
modifier|*
name|query
parameter_list|)
function_decl|;
name|GLuint
name|getActiveQueryId
argument_list|(
name|GLenum
name|target
argument_list|)
decl|const
decl_stmt|;
name|Query
modifier|*
name|getActiveQuery
argument_list|(
name|GLenum
name|target
argument_list|)
decl|const
decl_stmt|;
comment|//// Typed buffer binding point manipulation ////
comment|// GL_ARRAY_BUFFER
name|void
name|setArrayBufferBinding
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|)
function_decl|;
name|GLuint
name|getArrayBufferId
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|removeArrayBufferBinding
parameter_list|(
name|GLuint
name|buffer
parameter_list|)
function_decl|;
comment|// GL_UNIFORM_BUFFER - Both indexed and generic targets
name|void
name|setGenericUniformBufferBinding
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|)
function_decl|;
name|void
name|setIndexedUniformBufferBinding
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|Buffer
modifier|*
name|buffer
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|)
function_decl|;
name|GLuint
name|getIndexedUniformBufferId
argument_list|(
name|GLuint
name|index
argument_list|)
decl|const
decl_stmt|;
name|Buffer
modifier|*
name|getIndexedUniformBuffer
argument_list|(
name|GLuint
name|index
argument_list|)
decl|const
decl_stmt|;
comment|// GL_TRANSFORM_FEEDBACK_BUFFER - Both indexed and generic targets
name|void
name|setGenericTransformFeedbackBufferBinding
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|)
function_decl|;
name|void
name|setIndexedTransformFeedbackBufferBinding
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|Buffer
modifier|*
name|buffer
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|)
function_decl|;
name|GLuint
name|getIndexedTransformFeedbackBufferId
argument_list|(
name|GLuint
name|index
argument_list|)
decl|const
decl_stmt|;
name|Buffer
modifier|*
name|getIndexedTransformFeedbackBuffer
argument_list|(
name|GLuint
name|index
argument_list|)
decl|const
decl_stmt|;
name|GLuint
name|getIndexedTransformFeedbackBufferOffset
argument_list|(
name|GLuint
name|index
argument_list|)
decl|const
decl_stmt|;
name|size_t
name|getTransformFeedbackBufferIndexRange
argument_list|()
specifier|const
expr_stmt|;
comment|// GL_COPY_[READ/WRITE]_BUFFER
name|void
name|setCopyReadBufferBinding
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|)
function_decl|;
name|void
name|setCopyWriteBufferBinding
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|)
function_decl|;
comment|// GL_PIXEL[PACK/UNPACK]_BUFFER
name|void
name|setPixelPackBufferBinding
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|)
function_decl|;
name|void
name|setPixelUnpackBufferBinding
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|)
function_decl|;
comment|// Retrieve typed buffer by target (non-indexed)
name|Buffer
modifier|*
name|getTargetBuffer
argument_list|(
name|GLenum
name|target
argument_list|)
decl|const
decl_stmt|;
comment|// Vertex attrib manipulation
name|void
name|setEnableVertexAttribArray
parameter_list|(
name|unsigned
name|int
name|attribNum
parameter_list|,
name|bool
name|enabled
parameter_list|)
function_decl|;
name|void
name|setVertexAttribf
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLfloat
name|values
index|[
literal|4
index|]
parameter_list|)
function_decl|;
name|void
name|setVertexAttribu
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLuint
name|values
index|[
literal|4
index|]
parameter_list|)
function_decl|;
name|void
name|setVertexAttribi
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLint
name|values
index|[
literal|4
index|]
parameter_list|)
function_decl|;
name|void
name|setVertexAttribState
parameter_list|(
name|unsigned
name|int
name|attribNum
parameter_list|,
name|Buffer
modifier|*
name|boundBuffer
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|bool
name|normalized
parameter_list|,
name|bool
name|pureInteger
parameter_list|,
name|GLsizei
name|stride
parameter_list|,
specifier|const
name|void
modifier|*
name|pointer
parameter_list|)
function_decl|;
specifier|const
name|VertexAttribute
modifier|&
name|getVertexAttribState
argument_list|(
name|unsigned
name|int
name|attribNum
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|VertexAttribCurrentValueData
modifier|&
name|getVertexAttribCurrentValue
argument_list|(
name|unsigned
name|int
name|attribNum
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|void
modifier|*
name|getVertexAttribPointer
argument_list|(
name|unsigned
name|int
name|attribNum
argument_list|)
decl|const
decl_stmt|;
comment|// Pixel pack state manipulation
name|void
name|setPackAlignment
parameter_list|(
name|GLint
name|alignment
parameter_list|)
function_decl|;
name|GLint
name|getPackAlignment
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setPackReverseRowOrder
parameter_list|(
name|bool
name|reverseRowOrder
parameter_list|)
function_decl|;
name|bool
name|getPackReverseRowOrder
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|PixelPackState
operator|&
name|getPackState
argument_list|()
specifier|const
expr_stmt|;
comment|// Pixel unpack state manipulation
name|void
name|setUnpackAlignment
parameter_list|(
name|GLint
name|alignment
parameter_list|)
function_decl|;
name|GLint
name|getUnpackAlignment
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|PixelUnpackState
operator|&
name|getUnpackState
argument_list|()
specifier|const
expr_stmt|;
comment|// State query functions
name|void
name|getBooleanv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLboolean
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
name|getFloatv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
function_decl|;
name|void
name|getIntegerv
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
name|data
argument_list|,
name|GLenum
name|pname
argument_list|,
name|GLint
operator|*
name|params
argument_list|)
decl_stmt|;
name|bool
name|getIndexedIntegerv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLint
modifier|*
name|data
parameter_list|)
function_decl|;
name|bool
name|getIndexedInteger64v
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLint64
modifier|*
name|data
parameter_list|)
function_decl|;
name|bool
name|hasMappedBuffer
argument_list|(
name|GLenum
name|target
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|State
argument_list|)
expr_stmt|;
comment|// Cached values from Context's caps
name|GLuint
name|mMaxDrawBuffers
decl_stmt|;
name|GLuint
name|mMaxCombinedTextureImageUnits
decl_stmt|;
name|ColorF
name|mColorClearValue
decl_stmt|;
name|GLclampf
name|mDepthClearValue
decl_stmt|;
name|int
name|mStencilClearValue
decl_stmt|;
name|RasterizerState
name|mRasterizer
decl_stmt|;
name|bool
name|mScissorTest
decl_stmt|;
name|Rectangle
name|mScissor
decl_stmt|;
name|BlendState
name|mBlend
decl_stmt|;
name|ColorF
name|mBlendColor
decl_stmt|;
name|bool
name|mSampleCoverage
decl_stmt|;
name|GLclampf
name|mSampleCoverageValue
decl_stmt|;
name|bool
name|mSampleCoverageInvert
decl_stmt|;
name|DepthStencilState
name|mDepthStencil
decl_stmt|;
name|GLint
name|mStencilRef
decl_stmt|;
name|GLint
name|mStencilBackRef
decl_stmt|;
name|GLfloat
name|mLineWidth
decl_stmt|;
name|GLenum
name|mGenerateMipmapHint
decl_stmt|;
name|GLenum
name|mFragmentShaderDerivativeHint
decl_stmt|;
name|Rectangle
name|mViewport
decl_stmt|;
name|float
name|mNearZ
decl_stmt|;
name|float
name|mFarZ
decl_stmt|;
name|BindingPointer
operator|<
name|Buffer
operator|>
name|mArrayBuffer
expr_stmt|;
name|Framebuffer
modifier|*
name|mReadFramebuffer
decl_stmt|;
name|Framebuffer
modifier|*
name|mDrawFramebuffer
decl_stmt|;
name|BindingPointer
operator|<
name|Renderbuffer
operator|>
name|mRenderbuffer
expr_stmt|;
name|GLuint
name|mCurrentProgramId
decl_stmt|;
name|BindingPointer
operator|<
name|ProgramBinary
operator|>
name|mCurrentProgramBinary
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|VertexAttribCurrentValueData
operator|>
name|VertexAttribVector
expr_stmt|;
name|VertexAttribVector
name|mVertexAttribCurrentValues
decl_stmt|;
comment|// From glVertexAttrib
name|VertexArray
modifier|*
name|mVertexArray
decl_stmt|;
comment|// Texture and sampler bindings
name|size_t
name|mActiveSampler
decl_stmt|;
comment|// Active texture unit selector - GL_TEXTURE0
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|BindingPointer
operator|<
name|Texture
operator|>
expr|>
name|TextureBindingVector
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|GLenum
operator|,
name|TextureBindingVector
operator|>
name|TextureBindingMap
expr_stmt|;
name|TextureBindingMap
name|mSamplerTextures
decl_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|BindingPointer
operator|<
name|Sampler
operator|>
expr|>
name|SamplerBindingVector
expr_stmt|;
name|SamplerBindingVector
name|mSamplers
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|GLenum
operator|,
name|BindingPointer
operator|<
name|Query
operator|>
expr|>
name|ActiveQueryMap
expr_stmt|;
name|ActiveQueryMap
name|mActiveQueries
decl_stmt|;
name|BindingPointer
operator|<
name|Buffer
operator|>
name|mGenericUniformBuffer
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|OffsetBindingPointer
operator|<
name|Buffer
operator|>
expr|>
name|BufferVector
expr_stmt|;
name|BufferVector
name|mUniformBuffers
decl_stmt|;
name|BindingPointer
operator|<
name|TransformFeedback
operator|>
name|mTransformFeedback
expr_stmt|;
name|BindingPointer
operator|<
name|Buffer
operator|>
name|mGenericTransformFeedbackBuffer
expr_stmt|;
name|BufferVector
name|mTransformFeedbackBuffers
decl_stmt|;
name|BindingPointer
operator|<
name|Buffer
operator|>
name|mCopyReadBuffer
expr_stmt|;
name|BindingPointer
operator|<
name|Buffer
operator|>
name|mCopyWriteBuffer
expr_stmt|;
name|PixelUnpackState
name|mUnpack
decl_stmt|;
name|PixelPackState
name|mPack
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_STATE_H_
end_comment
end_unit
