begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// D3DConstantTable.h: Implements the D3DConstantTable class which parses
end_comment
begin_comment
comment|// information about constants from the CTAB comment in a D3D shader blob.
end_comment
begin_comment
comment|// Restructures the constant table as a hierarchy of constants in the same
end_comment
begin_comment
comment|// way as D3DX.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_D3DCONSTANTTABLE_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_D3DCONSTANTTABLE_H_
define|#
directive|define
name|LIBGLESV2_D3DCONSTANTTABLE_H_
end_define
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|namespace
name|ctab
block|{
struct_decl|struct
name|ConstantTable
struct_decl|;
struct_decl|struct
name|ConstantInfo
struct_decl|;
struct_decl|struct
name|TypeInfo
struct_decl|;
struct_decl|struct
name|StructMemberInfo
struct_decl|;
block|}
struct|struct
name|D3DConstant
block|{
comment|// These enums match those in d3dx9shader.h.
enum|enum
name|Class
block|{
name|CLASS_SCALAR
block|,
name|CLASS_VECTOR
block|,
name|CLASS_MATRIX_ROWS
block|,
name|CLASS_MATRIX_COLUMNS
block|,
name|CLASS_OBJECT
block|,
name|CLASS_STRUCT
block|,     }
enum|;
enum|enum
name|RegisterSet
block|{
name|RS_BOOL
block|,
name|RS_INT4
block|,
name|RS_FLOAT4
block|,
name|RS_SAMPLER
block|,     }
enum|;
enum|enum
name|Type
block|{
name|PT_VOID
block|,
name|PT_BOOL
block|,
name|PT_INT
block|,
name|PT_FLOAT
block|,
name|PT_STRING
block|,
name|PT_TEXTURE
block|,
name|PT_TEXTURE1D
block|,
name|PT_TEXTURE2D
block|,
name|PT_TEXTURE3D
block|,
name|PT_TEXTURECUBE
block|,
name|PT_SAMPLER
block|,
name|PT_SAMPLER1D
block|,
name|PT_SAMPLER2D
block|,
name|PT_SAMPLER3D
block|,
name|PT_SAMPLERCUBE
block|,
name|PT_PIXELSHADER
block|,
name|PT_VERTEXSHADER
block|,
name|PT_PIXELFRAGMENT
block|,
name|PT_VERTEXFRAGMENT
block|,
name|PT_UNSUPPORTED
block|,     }
enum|;
name|D3DConstant
argument_list|(
specifier|const
name|char
operator|*
name|base
argument_list|,
specifier|const
name|ctab
operator|::
name|ConstantInfo
operator|*
name|constantInfo
argument_list|)
expr_stmt|;
operator|~
name|D3DConstant
argument_list|()
expr_stmt|;
name|std
operator|::
name|string
name|name
expr_stmt|;
name|RegisterSet
name|registerSet
decl_stmt|;
name|unsigned
name|registerIndex
decl_stmt|;
name|unsigned
name|registerCount
decl_stmt|;
name|Class
name|typeClass
decl_stmt|;
name|Type
name|type
decl_stmt|;
name|unsigned
name|rows
decl_stmt|;
name|unsigned
name|columns
decl_stmt|;
name|unsigned
name|elements
decl_stmt|;
comment|// Array of structure members.
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|vector
operator|<
specifier|const
name|D3DConstant
operator|*
operator|>
expr|>
name|structMembers
expr_stmt|;
name|private
label|:
name|D3DConstant
argument_list|(
argument|const char *base
argument_list|,
argument|RegisterSet registerSet
argument_list|,
argument|unsigned registerIndex
argument_list|,
argument|const ctab::StructMemberInfo *memberInfo
argument_list|)
empty_stmt|;
name|unsigned
name|addStructMembers
argument_list|(
specifier|const
name|char
operator|*
name|base
argument_list|,
name|RegisterSet
name|registerSet
argument_list|,
name|unsigned
name|registerIndex
argument_list|,
specifier|const
name|ctab
operator|::
name|TypeInfo
operator|*
name|typeInfo
argument_list|)
decl_stmt|;
block|}
struct|;
name|class
name|D3DConstantTable
block|{
name|public
label|:
name|D3DConstantTable
argument_list|(
argument|void *blob
argument_list|,
argument|size_t size
argument_list|)
empty_stmt|;
operator|~
name|D3DConstantTable
argument_list|()
expr_stmt|;
name|bool
name|error
argument_list|()
specifier|const
block|{
return|return
name|mError
return|;
block|}
name|unsigned
name|constants
argument_list|()
specifier|const
block|{
return|return
name|mConstants
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|D3DConstant
modifier|*
name|getConstant
argument_list|(
name|unsigned
name|index
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|D3DConstant
modifier|*
name|getConstantByName
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|D3DConstantTable
argument_list|)
expr_stmt|;
name|std
operator|::
name|vector
operator|<
specifier|const
name|D3DConstant
operator|*
operator|>
name|mConstants
expr_stmt|;
name|bool
name|mError
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_D3DCONSTANTTABLE_H_
end_comment
end_unit
