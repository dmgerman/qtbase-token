begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Program.cpp: Implements the gl::Program class. Implements GL program objects
end_comment
begin_comment
comment|// and related functionality. [OpenGL ES 2.0.24] section 2.10.3 page 28.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Program.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/ProgramBinary.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/ResourceManager.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|member|g_fakepath
specifier|const
name|char
modifier|*
specifier|const
name|g_fakepath
init|=
literal|"C:\\fakepath"
decl_stmt|;
DECL|function|AttributeBindings
name|AttributeBindings
operator|::
name|AttributeBindings
parameter_list|()
block|{ }
DECL|function|~AttributeBindings
name|AttributeBindings
operator|::
name|~
name|AttributeBindings
parameter_list|()
block|{ }
DECL|function|InfoLog
name|InfoLog
operator|::
name|InfoLog
parameter_list|()
member_init_list|:
name|mInfoLog
argument_list|(
name|NULL
argument_list|)
block|{ }
DECL|function|~InfoLog
name|InfoLog
operator|::
name|~
name|InfoLog
parameter_list|()
block|{
operator|delete
index|[]
name|mInfoLog
expr_stmt|;
block|}
DECL|function|getLength
name|int
name|InfoLog
operator|::
name|getLength
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|mInfoLog
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|strlen
argument_list|(
name|mInfoLog
argument_list|)
operator|+
literal|1
return|;
block|}
block|}
DECL|function|getLog
name|void
name|InfoLog
operator|::
name|getLog
parameter_list|(
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infoLog
parameter_list|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bufSize
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|mInfoLog
condition|)
block|{
name|index
operator|=
name|std
operator|::
name|min
argument_list|(
name|bufSize
operator|-
literal|1
argument_list|,
operator|(
name|int
operator|)
name|strlen
argument_list|(
name|mInfoLog
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|infoLog
argument_list|,
name|mInfoLog
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
name|infoLog
index|[
name|index
index|]
operator|=
literal|'\0'
expr_stmt|;
block|}
if|if
condition|(
name|length
condition|)
block|{
operator|*
name|length
operator|=
name|index
expr_stmt|;
block|}
block|}
comment|// append a santized message to the program info log.
comment|// The D3D compiler includes a fake file path in some of the warning or error
comment|// messages, so lets remove all occurrences of this fake file path from the log.
DECL|function|appendSanitized
name|void
name|InfoLog
operator|::
name|appendSanitized
parameter_list|(
specifier|const
name|char
modifier|*
name|message
parameter_list|)
block|{
name|std
operator|::
name|string
name|msg
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|size_t
name|found
decl_stmt|;
do|do
block|{
name|found
operator|=
name|msg
operator|.
name|find
argument_list|(
name|g_fakepath
argument_list|)
expr_stmt|;
if|if
condition|(
name|found
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
condition|)
block|{
name|msg
operator|.
name|erase
argument_list|(
name|found
argument_list|,
name|strlen
argument_list|(
name|g_fakepath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|found
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
condition|)
do|;
name|append
argument_list|(
literal|"%s"
argument_list|,
name|msg
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|append
name|void
name|InfoLog
operator|::
name|append
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
block|{
if|if
condition|(
operator|!
name|format
condition|)
block|{
return|return;
block|}
name|va_list
name|vararg
decl_stmt|;
name|va_start
argument_list|(
name|vararg
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|size_t
name|infoLength
init|=
name|vsnprintf
argument_list|(
name|NULL
argument_list|,
literal|0
argument_list|,
name|format
argument_list|,
name|vararg
argument_list|)
decl_stmt|;
name|va_end
argument_list|(
name|vararg
argument_list|)
expr_stmt|;
name|char
modifier|*
name|logPointer
init|=
name|NULL
decl_stmt|;
if|if
condition|(
operator|!
name|mInfoLog
condition|)
block|{
name|mInfoLog
operator|=
operator|new
name|char
index|[
name|infoLength
operator|+
literal|2
index|]
expr_stmt|;
name|logPointer
operator|=
name|mInfoLog
expr_stmt|;
block|}
else|else
block|{
name|size_t
name|currentlogLength
init|=
name|strlen
argument_list|(
name|mInfoLog
argument_list|)
decl_stmt|;
name|char
modifier|*
name|newLog
init|=
operator|new
name|char
index|[
name|currentlogLength
operator|+
name|infoLength
operator|+
literal|2
index|]
decl_stmt|;
name|strcpy
argument_list|(
name|newLog
argument_list|,
name|mInfoLog
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|mInfoLog
expr_stmt|;
name|mInfoLog
operator|=
name|newLog
expr_stmt|;
name|logPointer
operator|=
name|mInfoLog
operator|+
name|currentlogLength
expr_stmt|;
block|}
name|va_start
argument_list|(
name|vararg
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|vsnprintf
argument_list|(
name|logPointer
argument_list|,
name|infoLength
argument_list|,
name|format
argument_list|,
name|vararg
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|vararg
argument_list|)
expr_stmt|;
name|logPointer
index|[
name|infoLength
index|]
operator|=
literal|0
expr_stmt|;
name|strcpy
argument_list|(
name|logPointer
operator|+
name|infoLength
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
DECL|function|reset
name|void
name|InfoLog
operator|::
name|reset
parameter_list|()
block|{
if|if
condition|(
name|mInfoLog
condition|)
block|{
operator|delete
index|[]
name|mInfoLog
expr_stmt|;
name|mInfoLog
operator|=
name|NULL
expr_stmt|;
block|}
block|}
DECL|function|Program
name|Program
operator|::
name|Program
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|ResourceManager
modifier|*
name|manager
parameter_list|,
name|GLuint
name|handle
parameter_list|)
member_init_list|:
name|mResourceManager
argument_list|(
name|manager
argument_list|)
member_init_list|,
name|mHandle
argument_list|(
name|handle
argument_list|)
block|{
name|mFragmentShader
operator|=
name|NULL
expr_stmt|;
name|mVertexShader
operator|=
name|NULL
expr_stmt|;
name|mProgramBinary
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|mDeleteStatus
operator|=
literal|false
expr_stmt|;
name|mLinked
operator|=
literal|false
expr_stmt|;
name|mRefCount
operator|=
literal|0
expr_stmt|;
name|mRenderer
operator|=
name|renderer
expr_stmt|;
name|resetUniformBlockBindings
argument_list|()
expr_stmt|;
block|}
DECL|function|~Program
name|Program
operator|::
name|~
name|Program
parameter_list|()
block|{
name|unlink
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|mVertexShader
operator|!=
name|NULL
condition|)
block|{
name|mVertexShader
operator|->
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mFragmentShader
operator|!=
name|NULL
condition|)
block|{
name|mFragmentShader
operator|->
name|release
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|attachShader
name|bool
name|Program
operator|::
name|attachShader
parameter_list|(
name|Shader
modifier|*
name|shader
parameter_list|)
block|{
if|if
condition|(
name|shader
operator|->
name|getType
argument_list|()
operator|==
name|GL_VERTEX_SHADER
condition|)
block|{
if|if
condition|(
name|mVertexShader
condition|)
block|{
return|return
literal|false
return|;
block|}
name|mVertexShader
operator|=
name|shader
expr_stmt|;
name|mVertexShader
operator|->
name|addRef
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shader
operator|->
name|getType
argument_list|()
operator|==
name|GL_FRAGMENT_SHADER
condition|)
block|{
if|if
condition|(
name|mFragmentShader
condition|)
block|{
return|return
literal|false
return|;
block|}
name|mFragmentShader
operator|=
name|shader
expr_stmt|;
name|mFragmentShader
operator|->
name|addRef
argument_list|()
expr_stmt|;
block|}
else|else
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|detachShader
name|bool
name|Program
operator|::
name|detachShader
parameter_list|(
name|Shader
modifier|*
name|shader
parameter_list|)
block|{
if|if
condition|(
name|shader
operator|->
name|getType
argument_list|()
operator|==
name|GL_VERTEX_SHADER
condition|)
block|{
if|if
condition|(
name|mVertexShader
operator|!=
name|shader
condition|)
block|{
return|return
literal|false
return|;
block|}
name|mVertexShader
operator|->
name|release
argument_list|()
expr_stmt|;
name|mVertexShader
operator|=
name|NULL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|shader
operator|->
name|getType
argument_list|()
operator|==
name|GL_FRAGMENT_SHADER
condition|)
block|{
if|if
condition|(
name|mFragmentShader
operator|!=
name|shader
condition|)
block|{
return|return
literal|false
return|;
block|}
name|mFragmentShader
operator|->
name|release
argument_list|()
expr_stmt|;
name|mFragmentShader
operator|=
name|NULL
expr_stmt|;
block|}
else|else
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|getAttachedShadersCount
name|int
name|Program
operator|::
name|getAttachedShadersCount
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mVertexShader
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|mFragmentShader
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
DECL|function|bindAttributeLocation
name|void
name|AttributeBindings
operator|::
name|bindAttributeLocation
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_VERTEX_ATTRIBS
condition|;
name|i
operator|++
control|)
block|{
name|mAttributeBinding
index|[
name|i
index|]
operator|.
name|erase
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|mAttributeBinding
index|[
name|index
index|]
operator|.
name|insert
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|bindAttributeLocation
name|void
name|Program
operator|::
name|bindAttributeLocation
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|mAttributeBindings
operator|.
name|bindAttributeLocation
argument_list|(
name|index
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|// Links the HLSL code of the vertex and pixel shader by matching up their varyings,
comment|// compiling them into binaries, determining the attribute mappings, and collecting
comment|// a list of uniforms
DECL|function|link
name|bool
name|Program
operator|::
name|link
parameter_list|(
specifier|const
name|Caps
modifier|&
name|caps
parameter_list|)
block|{
name|unlink
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mInfoLog
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resetUniformBlockBindings
argument_list|()
expr_stmt|;
name|mProgramBinary
operator|.
name|set
argument_list|(
operator|new
name|ProgramBinary
argument_list|(
name|mRenderer
operator|->
name|createProgram
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mLinked
operator|=
name|mProgramBinary
operator|->
name|link
argument_list|(
name|mInfoLog
argument_list|,
name|mAttributeBindings
argument_list|,
name|mFragmentShader
argument_list|,
name|mVertexShader
argument_list|,
name|mTransformFeedbackVaryings
argument_list|,
name|mTransformFeedbackBufferMode
argument_list|,
name|caps
argument_list|)
expr_stmt|;
return|return
name|mLinked
return|;
block|}
DECL|function|getAttributeBinding
name|int
name|AttributeBindings
operator|::
name|getAttributeBinding
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|name
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|location
init|=
literal|0
init|;
name|location
operator|<
name|MAX_VERTEX_ATTRIBS
condition|;
name|location
operator|++
control|)
block|{
if|if
condition|(
name|mAttributeBinding
index|[
name|location
index|]
operator|.
name|find
argument_list|(
name|name
argument_list|)
operator|!=
name|mAttributeBinding
index|[
name|location
index|]
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|location
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|// Returns the program object to an unlinked state, before re-linking, or at destruction
DECL|function|unlink
name|void
name|Program
operator|::
name|unlink
parameter_list|(
name|bool
name|destroy
parameter_list|)
block|{
if|if
condition|(
name|destroy
condition|)
comment|// Object being destructed
block|{
if|if
condition|(
name|mFragmentShader
condition|)
block|{
name|mFragmentShader
operator|->
name|release
argument_list|()
expr_stmt|;
name|mFragmentShader
operator|=
name|NULL
expr_stmt|;
block|}
if|if
condition|(
name|mVertexShader
condition|)
block|{
name|mVertexShader
operator|->
name|release
argument_list|()
expr_stmt|;
name|mVertexShader
operator|=
name|NULL
expr_stmt|;
block|}
block|}
name|mProgramBinary
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|mLinked
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|isLinked
name|bool
name|Program
operator|::
name|isLinked
parameter_list|()
block|{
return|return
name|mLinked
return|;
block|}
DECL|function|getProgramBinary
name|ProgramBinary
modifier|*
name|Program
operator|::
name|getProgramBinary
parameter_list|()
specifier|const
block|{
return|return
name|mProgramBinary
operator|.
name|get
argument_list|()
return|;
block|}
DECL|function|setProgramBinary
name|bool
name|Program
operator|::
name|setProgramBinary
parameter_list|(
name|GLenum
name|binaryFormat
parameter_list|,
specifier|const
name|void
modifier|*
name|binary
parameter_list|,
name|GLsizei
name|length
parameter_list|)
block|{
name|unlink
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mInfoLog
operator|.
name|reset
argument_list|()
expr_stmt|;
name|mProgramBinary
operator|.
name|set
argument_list|(
operator|new
name|ProgramBinary
argument_list|(
name|mRenderer
operator|->
name|createProgram
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mLinked
operator|=
name|mProgramBinary
operator|->
name|load
argument_list|(
name|mInfoLog
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mLinked
condition|)
block|{
name|mProgramBinary
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
return|return
name|mLinked
return|;
block|}
DECL|function|release
name|void
name|Program
operator|::
name|release
parameter_list|()
block|{
name|mRefCount
operator|--
expr_stmt|;
if|if
condition|(
name|mRefCount
operator|==
literal|0
operator|&&
name|mDeleteStatus
condition|)
block|{
name|mResourceManager
operator|->
name|deleteProgram
argument_list|(
name|mHandle
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|addRef
name|void
name|Program
operator|::
name|addRef
parameter_list|()
block|{
name|mRefCount
operator|++
expr_stmt|;
block|}
DECL|function|getRefCount
name|unsigned
name|int
name|Program
operator|::
name|getRefCount
parameter_list|()
specifier|const
block|{
return|return
name|mRefCount
return|;
block|}
DECL|function|getProgramBinaryLength
name|GLint
name|Program
operator|::
name|getProgramBinaryLength
parameter_list|()
specifier|const
block|{
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|mProgramBinary
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|programBinary
condition|)
block|{
return|return
name|programBinary
operator|->
name|getLength
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|function|getInfoLogLength
name|int
name|Program
operator|::
name|getInfoLogLength
parameter_list|()
specifier|const
block|{
return|return
name|mInfoLog
operator|.
name|getLength
argument_list|()
return|;
block|}
DECL|function|getInfoLog
name|void
name|Program
operator|::
name|getInfoLog
parameter_list|(
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infoLog
parameter_list|)
block|{
return|return
name|mInfoLog
operator|.
name|getLog
argument_list|(
name|bufSize
argument_list|,
name|length
argument_list|,
name|infoLog
argument_list|)
return|;
block|}
DECL|function|getAttachedShaders
name|void
name|Program
operator|::
name|getAttachedShaders
parameter_list|(
name|GLsizei
name|maxCount
parameter_list|,
name|GLsizei
modifier|*
name|count
parameter_list|,
name|GLuint
modifier|*
name|shaders
parameter_list|)
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|mVertexShader
condition|)
block|{
if|if
condition|(
name|total
operator|<
name|maxCount
condition|)
block|{
name|shaders
index|[
name|total
index|]
operator|=
name|mVertexShader
operator|->
name|getHandle
argument_list|()
expr_stmt|;
block|}
name|total
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|mFragmentShader
condition|)
block|{
if|if
condition|(
name|total
operator|<
name|maxCount
condition|)
block|{
name|shaders
index|[
name|total
index|]
operator|=
name|mFragmentShader
operator|->
name|getHandle
argument_list|()
expr_stmt|;
block|}
name|total
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
condition|)
block|{
operator|*
name|count
operator|=
name|total
expr_stmt|;
block|}
block|}
DECL|function|getActiveAttribute
name|void
name|Program
operator|::
name|getActiveAttribute
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
name|programBinary
condition|)
block|{
name|programBinary
operator|->
name|getActiveAttribute
argument_list|(
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bufsize
operator|>
literal|0
condition|)
block|{
name|name
index|[
literal|0
index|]
operator|=
literal|'\0'
expr_stmt|;
block|}
if|if
condition|(
name|length
condition|)
block|{
operator|*
name|length
operator|=
literal|0
expr_stmt|;
block|}
operator|*
name|type
operator|=
name|GL_NONE
expr_stmt|;
operator|*
name|size
operator|=
literal|1
expr_stmt|;
block|}
block|}
DECL|function|getActiveAttributeCount
name|GLint
name|Program
operator|::
name|getActiveAttributeCount
parameter_list|()
block|{
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
name|programBinary
condition|)
block|{
return|return
name|programBinary
operator|->
name|getActiveAttributeCount
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|function|getActiveAttributeMaxLength
name|GLint
name|Program
operator|::
name|getActiveAttributeMaxLength
parameter_list|()
block|{
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
name|programBinary
condition|)
block|{
return|return
name|programBinary
operator|->
name|getActiveAttributeMaxLength
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|function|getActiveUniform
name|void
name|Program
operator|::
name|getActiveUniform
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
name|programBinary
condition|)
block|{
return|return
name|programBinary
operator|->
name|getActiveUniform
argument_list|(
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|bufsize
operator|>
literal|0
condition|)
block|{
name|name
index|[
literal|0
index|]
operator|=
literal|'\0'
expr_stmt|;
block|}
if|if
condition|(
name|length
condition|)
block|{
operator|*
name|length
operator|=
literal|0
expr_stmt|;
block|}
operator|*
name|size
operator|=
literal|0
expr_stmt|;
operator|*
name|type
operator|=
name|GL_NONE
expr_stmt|;
block|}
block|}
DECL|function|getActiveUniformCount
name|GLint
name|Program
operator|::
name|getActiveUniformCount
parameter_list|()
block|{
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
name|programBinary
condition|)
block|{
return|return
name|programBinary
operator|->
name|getActiveUniformCount
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|function|getActiveUniformMaxLength
name|GLint
name|Program
operator|::
name|getActiveUniformMaxLength
parameter_list|()
block|{
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
name|programBinary
condition|)
block|{
return|return
name|programBinary
operator|->
name|getActiveUniformMaxLength
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|function|flagForDeletion
name|void
name|Program
operator|::
name|flagForDeletion
parameter_list|()
block|{
name|mDeleteStatus
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|isFlaggedForDeletion
name|bool
name|Program
operator|::
name|isFlaggedForDeletion
parameter_list|()
specifier|const
block|{
return|return
name|mDeleteStatus
return|;
block|}
DECL|function|validate
name|void
name|Program
operator|::
name|validate
parameter_list|(
specifier|const
name|Caps
modifier|&
name|caps
parameter_list|)
block|{
name|mInfoLog
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLinked
argument_list|()
operator|&&
name|programBinary
condition|)
block|{
name|programBinary
operator|->
name|validate
argument_list|(
name|mInfoLog
argument_list|,
name|caps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mInfoLog
operator|.
name|append
argument_list|(
literal|"Program has not been successfully linked."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|isValidated
name|bool
name|Program
operator|::
name|isValidated
parameter_list|()
specifier|const
block|{
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|mProgramBinary
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|programBinary
condition|)
block|{
return|return
name|programBinary
operator|->
name|isValidated
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|function|getActiveUniformBlockCount
name|GLint
name|Program
operator|::
name|getActiveUniformBlockCount
parameter_list|()
block|{
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
name|programBinary
condition|)
block|{
return|return
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|programBinary
operator|->
name|getActiveUniformBlockCount
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|function|getActiveUniformBlockMaxLength
name|GLint
name|Program
operator|::
name|getActiveUniformBlockMaxLength
parameter_list|()
block|{
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
name|programBinary
condition|)
block|{
return|return
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|programBinary
operator|->
name|getActiveUniformBlockMaxLength
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|function|bindUniformBlock
name|void
name|Program
operator|::
name|bindUniformBlock
parameter_list|(
name|GLuint
name|uniformBlockIndex
parameter_list|,
name|GLuint
name|uniformBlockBinding
parameter_list|)
block|{
name|mUniformBlockBindings
index|[
name|uniformBlockIndex
index|]
operator|=
name|uniformBlockBinding
expr_stmt|;
block|}
DECL|function|getUniformBlockBinding
name|GLuint
name|Program
operator|::
name|getUniformBlockBinding
parameter_list|(
name|GLuint
name|uniformBlockIndex
parameter_list|)
specifier|const
block|{
return|return
name|mUniformBlockBindings
index|[
name|uniformBlockIndex
index|]
return|;
block|}
DECL|function|resetUniformBlockBindings
name|void
name|Program
operator|::
name|resetUniformBlockBindings
parameter_list|()
block|{
for|for
control|(
name|unsigned
name|int
name|blockId
init|=
literal|0
init|;
name|blockId
operator|<
name|IMPLEMENTATION_MAX_COMBINED_SHADER_UNIFORM_BUFFERS
condition|;
name|blockId
operator|++
control|)
block|{
name|mUniformBlockBindings
index|[
name|blockId
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|function|setTransformFeedbackVaryings
name|void
name|Program
operator|::
name|setTransformFeedbackVaryings
parameter_list|(
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLchar
modifier|*
specifier|const
modifier|*
name|varyings
parameter_list|,
name|GLenum
name|bufferMode
parameter_list|)
block|{
name|mTransformFeedbackVaryings
operator|.
name|resize
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|mTransformFeedbackVaryings
index|[
name|i
index|]
operator|=
name|varyings
index|[
name|i
index|]
expr_stmt|;
block|}
name|mTransformFeedbackBufferMode
operator|=
name|bufferMode
expr_stmt|;
block|}
DECL|function|getTransformFeedbackVarying
name|void
name|Program
operator|::
name|getTransformFeedbackVarying
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLsizei
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|GLchar
modifier|*
name|name
parameter_list|)
specifier|const
block|{
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
name|programBinary
operator|&&
name|index
operator|<
name|programBinary
operator|->
name|getTransformFeedbackVaryingCount
argument_list|()
condition|)
block|{
specifier|const
name|LinkedVarying
modifier|&
name|varying
init|=
name|programBinary
operator|->
name|getTransformFeedbackVarying
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|GLsizei
name|lastNameIdx
init|=
name|std
operator|::
name|min
argument_list|(
name|bufSize
operator|-
literal|1
argument_list|,
cast|static_cast
argument_list|<
name|GLsizei
argument_list|>
argument_list|(
name|varying
operator|.
name|name
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
condition|)
block|{
operator|*
name|length
operator|=
name|lastNameIdx
expr_stmt|;
block|}
if|if
condition|(
name|size
condition|)
block|{
operator|*
name|size
operator|=
name|varying
operator|.
name|size
expr_stmt|;
block|}
if|if
condition|(
name|type
condition|)
block|{
operator|*
name|type
operator|=
name|varying
operator|.
name|type
expr_stmt|;
block|}
if|if
condition|(
name|name
condition|)
block|{
name|memcpy
argument_list|(
name|name
argument_list|,
name|varying
operator|.
name|name
operator|.
name|c_str
argument_list|()
argument_list|,
name|lastNameIdx
argument_list|)
expr_stmt|;
name|name
index|[
name|lastNameIdx
index|]
operator|=
literal|'\0'
expr_stmt|;
block|}
block|}
block|}
DECL|function|getTransformFeedbackVaryingCount
name|GLsizei
name|Program
operator|::
name|getTransformFeedbackVaryingCount
parameter_list|()
specifier|const
block|{
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
name|programBinary
condition|)
block|{
return|return
cast|static_cast
argument_list|<
name|GLsizei
argument_list|>
argument_list|(
name|programBinary
operator|->
name|getTransformFeedbackVaryingCount
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|function|getTransformFeedbackVaryingMaxLength
name|GLsizei
name|Program
operator|::
name|getTransformFeedbackVaryingMaxLength
parameter_list|()
specifier|const
block|{
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
name|programBinary
condition|)
block|{
name|GLsizei
name|maxSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|programBinary
operator|->
name|getTransformFeedbackVaryingCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|LinkedVarying
modifier|&
name|varying
init|=
name|programBinary
operator|->
name|getTransformFeedbackVarying
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|maxSize
operator|=
name|std
operator|::
name|max
argument_list|(
name|maxSize
argument_list|,
cast|static_cast
argument_list|<
name|GLsizei
argument_list|>
argument_list|(
name|varying
operator|.
name|name
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|maxSize
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|function|getTransformFeedbackBufferMode
name|GLenum
name|Program
operator|::
name|getTransformFeedbackBufferMode
parameter_list|()
specifier|const
block|{
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
name|programBinary
condition|)
block|{
return|return
name|programBinary
operator|->
name|getTransformFeedbackBufferMode
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|mTransformFeedbackBufferMode
return|;
block|}
block|}
block|}
end_namespace
end_unit
