begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Fence.cpp: Implements the gl::Fence class, which supports the GL_NV_fence extension.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Fence.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|Fence
name|Fence
operator|::
name|Fence
parameter_list|(
name|egl
operator|::
name|Display
modifier|*
name|display
parameter_list|)
block|{
name|mDisplay
operator|=
name|display
expr_stmt|;
name|mQuery
operator|=
name|NULL
expr_stmt|;
name|mCondition
operator|=
name|GL_NONE
expr_stmt|;
name|mStatus
operator|=
name|GL_FALSE
expr_stmt|;
block|}
DECL|function|~Fence
name|Fence
operator|::
name|~
name|Fence
parameter_list|()
block|{
if|if
condition|(
name|mQuery
operator|!=
name|NULL
condition|)
block|{
name|mDisplay
operator|->
name|freeEventQuery
argument_list|(
name|mQuery
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|isFence
name|GLboolean
name|Fence
operator|::
name|isFence
parameter_list|()
block|{
comment|// GL_NV_fence spec:
comment|// A name returned by GenFencesNV, but not yet set via SetFenceNV, is not the name of an existing fence.
return|return
name|mQuery
operator|!=
name|NULL
return|;
block|}
DECL|function|setFence
name|void
name|Fence
operator|::
name|setFence
parameter_list|(
name|GLenum
name|condition
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mQuery
condition|)
block|{
name|mQuery
operator|=
name|mDisplay
operator|->
name|allocateEventQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|mQuery
condition|)
block|{
return|return
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
block|}
name|HRESULT
name|result
init|=
name|mQuery
operator|->
name|Issue
argument_list|(
name|D3DISSUE_END
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|mCondition
operator|=
name|condition
expr_stmt|;
name|mStatus
operator|=
name|GL_FALSE
expr_stmt|;
block|}
DECL|function|testFence
name|GLboolean
name|Fence
operator|::
name|testFence
parameter_list|()
block|{
if|if
condition|(
name|mQuery
operator|==
name|NULL
condition|)
block|{
return|return
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
name|GL_TRUE
argument_list|)
return|;
block|}
name|HRESULT
name|result
init|=
name|mQuery
operator|->
name|GetData
argument_list|(
name|NULL
argument_list|,
literal|0
argument_list|,
name|D3DGETDATA_FLUSH
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkDeviceLost
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
name|GL_TRUE
argument_list|)
return|;
block|}
name|ASSERT
argument_list|(
name|result
operator|==
name|S_OK
operator|||
name|result
operator|==
name|S_FALSE
argument_list|)
expr_stmt|;
name|mStatus
operator|=
name|result
operator|==
name|S_OK
expr_stmt|;
return|return
name|mStatus
return|;
block|}
DECL|function|finishFence
name|void
name|Fence
operator|::
name|finishFence
parameter_list|()
block|{
if|if
condition|(
name|mQuery
operator|==
name|NULL
condition|)
block|{
return|return
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
return|;
block|}
while|while
condition|(
operator|!
name|testFence
argument_list|()
condition|)
block|{
name|Sleep
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getFenceiv
name|void
name|Fence
operator|::
name|getFenceiv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|mQuery
operator|==
name|NULL
condition|)
block|{
return|return
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
return|;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_FENCE_STATUS_NV
case|:
block|{
comment|// GL_NV_fence spec:
comment|// Once the status of a fence has been finished (via FinishFenceNV) or tested and the returned status is TRUE (via either TestFenceNV
comment|// or GetFenceivNV querying the FENCE_STATUS_NV), the status remains TRUE until the next SetFenceNV of the fence.
if|if
condition|(
name|mStatus
condition|)
block|{
name|params
index|[
literal|0
index|]
operator|=
name|GL_TRUE
expr_stmt|;
return|return;
block|}
name|HRESULT
name|result
init|=
name|mQuery
operator|->
name|GetData
argument_list|(
name|NULL
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkDeviceLost
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|params
index|[
literal|0
index|]
operator|=
name|GL_TRUE
expr_stmt|;
return|return
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
name|ASSERT
argument_list|(
name|result
operator|==
name|S_OK
operator|||
name|result
operator|==
name|S_FALSE
argument_list|)
expr_stmt|;
name|mStatus
operator|=
name|result
operator|==
name|S_OK
expr_stmt|;
name|params
index|[
literal|0
index|]
operator|=
name|mStatus
expr_stmt|;
break|break;
block|}
case|case
name|GL_FENCE_CONDITION_NV
case|:
name|params
index|[
literal|0
index|]
operator|=
name|mCondition
expr_stmt|;
break|break;
default|default:
return|return
name|error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
return|;
break|break;
block|}
block|}
block|}
end_namespace
end_unit
