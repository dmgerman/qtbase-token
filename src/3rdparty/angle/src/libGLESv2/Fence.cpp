begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Fence.cpp: Implements the gl::Fence class, which supports the GL_NV_fence extension.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Fence.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/FenceImpl.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|Fence
name|Fence
operator|::
name|Fence
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|)
block|{
name|mFence
operator|=
name|renderer
operator|->
name|createFence
argument_list|()
expr_stmt|;
block|}
DECL|function|~Fence
name|Fence
operator|::
name|~
name|Fence
parameter_list|()
block|{
operator|delete
name|mFence
expr_stmt|;
block|}
DECL|function|isFence
name|GLboolean
name|Fence
operator|::
name|isFence
parameter_list|()
block|{
return|return
name|mFence
operator|->
name|isFence
argument_list|()
return|;
block|}
DECL|function|setFence
name|void
name|Fence
operator|::
name|setFence
parameter_list|(
name|GLenum
name|condition
parameter_list|)
block|{
name|mFence
operator|->
name|setFence
argument_list|(
name|condition
argument_list|)
expr_stmt|;
block|}
DECL|function|testFence
name|GLboolean
name|Fence
operator|::
name|testFence
parameter_list|()
block|{
return|return
name|mFence
operator|->
name|testFence
argument_list|()
return|;
block|}
DECL|function|finishFence
name|void
name|Fence
operator|::
name|finishFence
parameter_list|()
block|{
name|mFence
operator|->
name|finishFence
argument_list|()
expr_stmt|;
block|}
DECL|function|getFenceiv
name|void
name|Fence
operator|::
name|getFenceiv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|mFence
operator|->
name|getFenceiv
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
end_unit
