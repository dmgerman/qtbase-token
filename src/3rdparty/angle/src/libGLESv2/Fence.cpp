begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Fence.cpp: Implements the gl::Fence class, which supports the GL_NV_fence extension.
end_comment
begin_comment
comment|// Important note on accurate timers in Windows:
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// QueryPerformanceCounter has a few major issues, including being 10x as expensive to call
end_comment
begin_comment
comment|// as timeGetTime on laptops and "jumping" during certain hardware events.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// See the comments at the top of the Chromium source file "chromium/src/base/time/time_win.cc"
end_comment
begin_comment
comment|//   https://code.google.com/p/chromium/codesearch#chromium/src/base/time/time_win.cc
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We still opt to use QPC. In the present and moving forward, most newer systems will not suffer
end_comment
begin_comment
comment|// from buggy implementations.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Fence.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/FenceImpl.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|FenceNV
name|FenceNV
operator|::
name|FenceNV
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|)
block|{
name|mFence
operator|=
name|renderer
operator|->
name|createFence
argument_list|()
expr_stmt|;
block|}
DECL|function|~FenceNV
name|FenceNV
operator|::
name|~
name|FenceNV
parameter_list|()
block|{
operator|delete
name|mFence
expr_stmt|;
block|}
DECL|function|isFence
name|GLboolean
name|FenceNV
operator|::
name|isFence
parameter_list|()
specifier|const
block|{
comment|// GL_NV_fence spec:
comment|// A name returned by GenFencesNV, but not yet set via SetFenceNV, is not the name of an existing fence.
return|return
operator|(
name|mFence
operator|->
name|isSet
argument_list|()
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
operator|)
return|;
block|}
DECL|function|setFence
name|void
name|FenceNV
operator|::
name|setFence
parameter_list|(
name|GLenum
name|condition
parameter_list|)
block|{
name|mFence
operator|->
name|set
argument_list|()
expr_stmt|;
name|mCondition
operator|=
name|condition
expr_stmt|;
name|mStatus
operator|=
name|GL_FALSE
expr_stmt|;
block|}
DECL|function|testFence
name|GLboolean
name|FenceNV
operator|::
name|testFence
parameter_list|()
block|{
comment|// Flush the command buffer by default
name|bool
name|result
init|=
name|mFence
operator|->
name|test
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|mStatus
operator|=
operator|(
name|result
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
operator|)
expr_stmt|;
return|return
name|mStatus
return|;
block|}
DECL|function|finishFence
name|void
name|FenceNV
operator|::
name|finishFence
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|mFence
operator|->
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|mFence
operator|->
name|test
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|Sleep
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getFencei
name|GLint
name|FenceNV
operator|::
name|getFencei
parameter_list|(
name|GLenum
name|pname
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|mFence
operator|->
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_FENCE_STATUS_NV
case|:
block|{
comment|// GL_NV_fence spec:
comment|// Once the status of a fence has been finished (via FinishFenceNV) or tested and the returned status is TRUE (via either TestFenceNV
comment|// or GetFenceivNV querying the FENCE_STATUS_NV), the status remains TRUE until the next SetFenceNV of the fence.
if|if
condition|(
name|mStatus
operator|==
name|GL_TRUE
condition|)
block|{
return|return
name|GL_TRUE
return|;
block|}
name|mStatus
operator|=
operator|(
name|mFence
operator|->
name|test
argument_list|(
literal|false
argument_list|)
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
operator|)
expr_stmt|;
return|return
name|mStatus
return|;
block|}
case|case
name|GL_FENCE_CONDITION_NV
case|:
return|return
name|mCondition
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|FenceSync
name|FenceSync
operator|::
name|FenceSync
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|RefCountObject
argument_list|(
name|id
argument_list|)
block|{
name|mFence
operator|=
name|renderer
operator|->
name|createFence
argument_list|()
expr_stmt|;
name|LARGE_INTEGER
name|counterFreqency
init|=
block|{
literal|0
block|}
decl_stmt|;
name|BOOL
name|success
init|=
name|QueryPerformanceFrequency
argument_list|(
operator|&
name|counterFreqency
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|mCounterFrequency
operator|=
name|counterFreqency
operator|.
name|QuadPart
expr_stmt|;
block|}
DECL|function|~FenceSync
name|FenceSync
operator|::
name|~
name|FenceSync
parameter_list|()
block|{
operator|delete
name|mFence
expr_stmt|;
block|}
DECL|function|set
name|void
name|FenceSync
operator|::
name|set
parameter_list|(
name|GLenum
name|condition
parameter_list|)
block|{
name|mCondition
operator|=
name|condition
expr_stmt|;
name|mFence
operator|->
name|set
argument_list|()
expr_stmt|;
block|}
DECL|function|clientWait
name|GLenum
name|FenceSync
operator|::
name|clientWait
parameter_list|(
name|GLbitfield
name|flags
parameter_list|,
name|GLuint64
name|timeout
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|mFence
operator|->
name|isSet
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|flushCommandBuffer
init|=
operator|(
operator|(
name|flags
operator|&
name|GL_SYNC_FLUSH_COMMANDS_BIT
operator|)
operator|!=
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|mFence
operator|->
name|test
argument_list|(
name|flushCommandBuffer
argument_list|)
condition|)
block|{
return|return
name|GL_ALREADY_SIGNALED
return|;
block|}
if|if
condition|(
name|mFence
operator|->
name|hasError
argument_list|()
condition|)
block|{
return|return
name|GL_WAIT_FAILED
return|;
block|}
if|if
condition|(
name|timeout
operator|==
literal|0
condition|)
block|{
return|return
name|GL_TIMEOUT_EXPIRED
return|;
block|}
name|LARGE_INTEGER
name|currentCounter
init|=
block|{
literal|0
block|}
decl_stmt|;
name|BOOL
name|success
init|=
name|QueryPerformanceCounter
argument_list|(
operator|&
name|currentCounter
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|LONGLONG
name|timeoutInSeconds
init|=
cast|static_cast
argument_list|<
name|LONGLONG
argument_list|>
argument_list|(
name|timeout
argument_list|)
operator|*
cast|static_cast
argument_list|<
name|LONGLONG
argument_list|>
argument_list|(
literal|1000000ll
argument_list|)
decl_stmt|;
name|LONGLONG
name|endCounter
init|=
name|currentCounter
operator|.
name|QuadPart
operator|+
name|mCounterFrequency
operator|*
name|timeoutInSeconds
decl_stmt|;
while|while
condition|(
name|currentCounter
operator|.
name|QuadPart
operator|<
name|endCounter
operator|&&
operator|!
name|mFence
operator|->
name|test
argument_list|(
name|flushCommandBuffer
argument_list|)
condition|)
block|{
name|Sleep
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|BOOL
name|success
init|=
name|QueryPerformanceCounter
argument_list|(
operator|&
name|currentCounter
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|success
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mFence
operator|->
name|hasError
argument_list|()
condition|)
block|{
return|return
name|GL_WAIT_FAILED
return|;
block|}
if|if
condition|(
name|currentCounter
operator|.
name|QuadPart
operator|>=
name|endCounter
condition|)
block|{
return|return
name|GL_TIMEOUT_EXPIRED
return|;
block|}
return|return
name|GL_CONDITION_SATISFIED
return|;
block|}
DECL|function|serverWait
name|void
name|FenceSync
operator|::
name|serverWait
parameter_list|()
block|{
comment|// Because our API is currently designed to be called from a single thread, we don't need to do
comment|// extra work for a server-side fence. GPU commands issued after the fence is created will always
comment|// be processed after the fence is signaled.
block|}
DECL|function|getStatus
name|GLenum
name|FenceSync
operator|::
name|getStatus
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|mFence
operator|->
name|test
argument_list|(
literal|false
argument_list|)
condition|)
block|{
comment|// The spec does not specify any way to report errors during the status test (e.g. device lost)
comment|// so we report the fence is unblocked in case of error or signaled.
return|return
name|GL_SIGNALED
return|;
block|}
return|return
name|GL_UNSIGNALED
return|;
block|}
block|}
end_namespace
end_unit
