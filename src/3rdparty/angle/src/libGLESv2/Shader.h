begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Shader.h: Defines the abstract gl::Shader class and its concrete derived
end_comment
begin_comment
comment|// classes VertexShader and FragmentShader. Implements GL shader objects and
end_comment
begin_comment
comment|// related functionality. [OpenGL ES 2.0.24] section 2.10 page 24 and section
end_comment
begin_comment
comment|// 3.8 page 84.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_SHADER_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_SHADER_H_
define|#
directive|define
name|LIBGLESV2_SHADER_H_
end_define
begin_define
DECL|macro|GL_APICALL
define|#
directive|define
name|GL_APICALL
end_define
begin_include
include|#
directive|include
file|<GLES2/gl2.h>
end_include
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|<list>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|"libGLESv2/ResourceManager.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
struct|struct
name|Varying
block|{
name|Varying
argument_list|(
argument|GLenum type
argument_list|,
argument|const std::string&name
argument_list|,
argument|int size
argument_list|,
argument|bool array
argument_list|)
block|:
name|type
argument_list|(
name|type
argument_list|)
operator|,
name|name
argument_list|(
name|name
argument_list|)
operator|,
name|size
argument_list|(
name|size
argument_list|)
operator|,
name|array
argument_list|(
name|array
argument_list|)
operator|,
name|reg
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|col
argument_list|(
argument|-
literal|1
argument_list|)
block|{     }
name|GLenum
name|type
expr_stmt|;
name|std
operator|::
name|string
name|name
expr_stmt|;
name|int
name|size
decl_stmt|;
comment|// Number of 'type' elements
name|bool
name|array
decl_stmt|;
name|int
name|reg
decl_stmt|;
comment|// First varying register, assigned during link
name|int
name|col
decl_stmt|;
comment|// First register element, assigned during link
block|}
struct|;
typedef|typedef
name|std
operator|::
name|list
operator|<
name|Varying
operator|>
name|VaryingList
expr_stmt|;
name|class
name|Shader
block|{
name|friend
name|class
name|ProgramBinary
decl_stmt|;
name|public
label|:
name|Shader
argument_list|(
argument|ResourceManager *manager
argument_list|,
argument|GLuint handle
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|Shader
argument_list|()
expr_stmt|;
name|virtual
name|GLenum
name|getType
parameter_list|()
init|=
literal|0
function_decl|;
name|GLuint
name|getHandle
argument_list|()
specifier|const
expr_stmt|;
name|void
name|deleteSource
parameter_list|()
function_decl|;
name|void
name|setSource
parameter_list|(
name|GLsizei
name|count
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|string
parameter_list|,
specifier|const
name|GLint
modifier|*
name|length
parameter_list|)
function_decl|;
name|int
name|getInfoLogLength
argument_list|()
specifier|const
expr_stmt|;
name|void
name|getInfoLog
parameter_list|(
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infoLog
parameter_list|)
function_decl|;
name|int
name|getSourceLength
argument_list|()
specifier|const
expr_stmt|;
name|void
name|getSource
parameter_list|(
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|)
function_decl|;
name|int
name|getTranslatedSourceLength
argument_list|()
specifier|const
expr_stmt|;
name|void
name|getTranslatedSource
parameter_list|(
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|)
function_decl|;
name|virtual
name|void
name|compile
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|uncompile
parameter_list|()
function_decl|;
name|bool
name|isCompiled
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|getHLSL
parameter_list|()
function_decl|;
name|void
name|addRef
parameter_list|()
function_decl|;
name|void
name|release
parameter_list|()
function_decl|;
name|unsigned
name|int
name|getRefCount
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isFlaggedForDeletion
argument_list|()
specifier|const
expr_stmt|;
name|void
name|flagForDeletion
parameter_list|()
function_decl|;
specifier|static
name|void
name|releaseCompiler
parameter_list|()
function_decl|;
name|protected
label|:
name|void
name|parseVaryings
parameter_list|()
function_decl|;
name|void
name|compileToHLSL
parameter_list|(
name|void
modifier|*
name|compiler
parameter_list|)
function_decl|;
name|void
name|getSourceImpl
parameter_list|(
name|char
modifier|*
name|source
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|)
function_decl|;
specifier|static
name|GLenum
name|parseType
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|type
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|compareVarying
parameter_list|(
specifier|const
name|Varying
modifier|&
name|x
parameter_list|,
specifier|const
name|Varying
modifier|&
name|y
parameter_list|)
function_decl|;
name|VaryingList
name|mVaryings
decl_stmt|;
name|bool
name|mUsesFragCoord
decl_stmt|;
name|bool
name|mUsesFrontFacing
decl_stmt|;
name|bool
name|mUsesPointSize
decl_stmt|;
name|bool
name|mUsesPointCoord
decl_stmt|;
specifier|static
name|void
modifier|*
name|mFragmentCompiler
decl_stmt|;
specifier|static
name|void
modifier|*
name|mVertexCompiler
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Shader
argument_list|)
expr_stmt|;
name|void
name|initializeCompiler
parameter_list|()
function_decl|;
specifier|const
name|GLuint
name|mHandle
decl_stmt|;
name|unsigned
name|int
name|mRefCount
decl_stmt|;
comment|// Number of program objects this shader is attached to
name|bool
name|mDeleteStatus
decl_stmt|;
comment|// Flag to indicate that the shader can be deleted when no longer in use
name|char
modifier|*
name|mSource
decl_stmt|;
name|char
modifier|*
name|mHlsl
decl_stmt|;
name|char
modifier|*
name|mInfoLog
decl_stmt|;
name|ResourceManager
modifier|*
name|mResourceManager
decl_stmt|;
block|}
empty_stmt|;
struct|struct
name|Attribute
block|{
name|Attribute
argument_list|()
operator|:
name|type
argument_list|(
name|GL_NONE
argument_list|)
operator|,
name|name
argument_list|(
literal|""
argument_list|)
block|{     }
name|Attribute
argument_list|(
argument|GLenum type
argument_list|,
argument|const std::string&name
argument_list|)
operator|:
name|type
argument_list|(
name|type
argument_list|)
operator|,
name|name
argument_list|(
argument|name
argument_list|)
block|{     }
name|GLenum
name|type
expr_stmt|;
name|std
operator|::
name|string
name|name
expr_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Attribute
operator|>
name|AttributeArray
expr_stmt|;
name|class
name|VertexShader
range|:
name|public
name|Shader
block|{
name|friend
name|class
name|ProgramBinary
block|;
name|public
operator|:
name|VertexShader
argument_list|(
argument|ResourceManager *manager
argument_list|,
argument|GLuint handle
argument_list|)
block|;
operator|~
name|VertexShader
argument_list|()
block|;
name|virtual
name|GLenum
name|getType
argument_list|()
block|;
name|virtual
name|void
name|compile
argument_list|()
block|;
name|virtual
name|void
name|uncompile
argument_list|()
block|;
name|int
name|getSemanticIndex
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|attributeName
argument_list|)
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|VertexShader
argument_list|)
block|;
name|void
name|parseAttributes
argument_list|()
block|;
name|AttributeArray
name|mAttributes
block|; }
decl_stmt|;
name|class
name|FragmentShader
range|:
name|public
name|Shader
block|{
name|public
operator|:
name|FragmentShader
argument_list|(
argument|ResourceManager *manager
argument_list|,
argument|GLuint handle
argument_list|)
block|;
operator|~
name|FragmentShader
argument_list|()
block|;
name|virtual
name|GLenum
name|getType
argument_list|()
block|;
name|virtual
name|void
name|compile
argument_list|()
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|FragmentShader
argument_list|)
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_SHADER_H_
end_comment
end_unit
