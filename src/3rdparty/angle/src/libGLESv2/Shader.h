begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Shader.h: Defines the abstract gl::Shader class and its concrete derived
end_comment
begin_comment
comment|// classes VertexShader and FragmentShader. Implements GL shader objects and
end_comment
begin_comment
comment|// related functionality. [OpenGL ES 2.0.24] section 2.10 page 24 and section
end_comment
begin_comment
comment|// 3.8 page 84.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_SHADER_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_SHADER_H_
define|#
directive|define
name|LIBGLESV2_SHADER_H_
end_define
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|<list>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|"common/shadervars.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"GLSLANG/ShaderLang.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|Renderer
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|ResourceManager
decl_stmt|;
name|struct
name|PackedVarying
range|:
name|public
name|sh
operator|::
name|Varying
block|{
name|unsigned
name|int
name|registerIndex
block|;
comment|// Assigned during link
name|PackedVarying
argument_list|(
specifier|const
name|sh
operator|::
name|Varying
operator|&
name|varying
argument_list|)
operator|:
name|sh
operator|::
name|Varying
argument_list|(
name|varying
argument_list|)
block|,
name|registerIndex
argument_list|(
argument|GL_INVALID_INDEX
argument_list|)
block|{}
name|bool
name|registerAssigned
argument_list|()
specifier|const
block|{
return|return
name|registerIndex
operator|!=
name|GL_INVALID_INDEX
return|;
block|}
name|void
name|resetRegisterAssignment
argument_list|()
block|{
name|registerIndex
operator|=
name|GL_INVALID_INDEX
block|;     }
expr|}
block|;
name|class
name|Shader
block|{
name|friend
name|class
name|DynamicHLSL
block|;
name|public
operator|:
name|Shader
argument_list|(
argument|ResourceManager *manager
argument_list|,
argument|const rx::Renderer *renderer
argument_list|,
argument|GLuint handle
argument_list|)
block|;
name|virtual
operator|~
name|Shader
argument_list|()
block|;
name|virtual
name|GLenum
name|getType
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|GLuint
name|getHandle
argument_list|()
specifier|const
block|;
name|void
name|deleteSource
argument_list|()
block|;
name|void
name|setSource
argument_list|(
argument|GLsizei count
argument_list|,
argument|const char *const *string
argument_list|,
argument|const GLint *length
argument_list|)
block|;
name|int
name|getInfoLogLength
argument_list|()
specifier|const
block|;
name|void
name|getInfoLog
argument_list|(
argument|GLsizei bufSize
argument_list|,
argument|GLsizei *length
argument_list|,
argument|char *infoLog
argument_list|)
specifier|const
block|;
name|int
name|getSourceLength
argument_list|()
specifier|const
block|;
name|void
name|getSource
argument_list|(
argument|GLsizei bufSize
argument_list|,
argument|GLsizei *length
argument_list|,
argument|char *buffer
argument_list|)
specifier|const
block|;
name|int
name|getTranslatedSourceLength
argument_list|()
specifier|const
block|;
name|void
name|getTranslatedSource
argument_list|(
argument|GLsizei bufSize
argument_list|,
argument|GLsizei *length
argument_list|,
argument|char *buffer
argument_list|)
specifier|const
block|;
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Uniform
operator|>
operator|&
name|getUniforms
argument_list|()
specifier|const
block|;
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|InterfaceBlock
operator|>
operator|&
name|getInterfaceBlocks
argument_list|()
specifier|const
block|;
name|std
operator|::
name|vector
operator|<
name|PackedVarying
operator|>
operator|&
name|getVaryings
argument_list|()
block|;
name|virtual
name|void
name|compile
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|uncompile
argument_list|()
block|;
name|bool
name|isCompiled
argument_list|()
specifier|const
block|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getHLSL
argument_list|()
specifier|const
block|;
name|void
name|addRef
argument_list|()
block|;
name|void
name|release
argument_list|()
block|;
name|unsigned
name|int
name|getRefCount
argument_list|()
specifier|const
block|;
name|bool
name|isFlaggedForDeletion
argument_list|()
specifier|const
block|;
name|void
name|flagForDeletion
argument_list|()
block|;
name|int
name|getShaderVersion
argument_list|()
specifier|const
block|;
name|void
name|resetVaryingsRegisterAssignment
argument_list|()
block|;
specifier|static
name|void
name|releaseCompiler
argument_list|()
block|;
specifier|static
name|ShShaderOutput
name|getCompilerOutputType
argument_list|(
argument|GLenum shader
argument_list|)
block|;
name|unsigned
name|int
name|getUniformRegister
argument_list|(
argument|const std::string&uniformName
argument_list|)
specifier|const
block|;
name|unsigned
name|int
name|getInterfaceBlockRegister
argument_list|(
argument|const std::string&blockName
argument_list|)
specifier|const
block|;
name|bool
name|usesDepthRange
argument_list|()
specifier|const
block|{
return|return
name|mUsesDepthRange
return|;
block|}
name|bool
name|usesPointSize
argument_list|()
specifier|const
block|{
return|return
name|mUsesPointSize
return|;
block|}
name|rx
operator|::
name|D3DWorkaroundType
name|getD3DWorkarounds
argument_list|()
specifier|const
block|;
name|protected
operator|:
name|void
name|parseVaryings
argument_list|(
name|void
operator|*
name|compiler
argument_list|)
block|;
name|void
name|compileToHLSL
argument_list|(
name|void
operator|*
name|compiler
argument_list|)
block|;
name|void
name|getSourceImpl
argument_list|(
argument|const std::string&source
argument_list|,
argument|GLsizei bufSize
argument_list|,
argument|GLsizei *length
argument_list|,
argument|char *buffer
argument_list|)
specifier|const
block|;
specifier|static
name|bool
name|compareVarying
argument_list|(
specifier|const
name|PackedVarying
operator|&
name|x
argument_list|,
specifier|const
name|PackedVarying
operator|&
name|y
argument_list|)
block|;
specifier|const
name|rx
operator|::
name|Renderer
operator|*
specifier|const
name|mRenderer
block|;
name|std
operator|::
name|vector
operator|<
name|PackedVarying
operator|>
name|mVaryings
block|;
name|bool
name|mUsesMultipleRenderTargets
block|;
name|bool
name|mUsesFragColor
block|;
name|bool
name|mUsesFragData
block|;
name|bool
name|mUsesFragCoord
block|;
name|bool
name|mUsesFrontFacing
block|;
name|bool
name|mUsesPointSize
block|;
name|bool
name|mUsesPointCoord
block|;
name|bool
name|mUsesDepthRange
block|;
name|bool
name|mUsesFragDepth
block|;
name|int
name|mShaderVersion
block|;
name|bool
name|mUsesDiscardRewriting
block|;
name|bool
name|mUsesNestedBreak
block|;
specifier|static
name|void
operator|*
name|mFragmentCompiler
block|;
specifier|static
name|void
operator|*
name|mVertexCompiler
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Shader
argument_list|)
block|;
name|void
name|initializeCompiler
argument_list|()
block|;
specifier|const
name|GLuint
name|mHandle
block|;
name|unsigned
name|int
name|mRefCount
block|;
comment|// Number of program objects this shader is attached to
name|bool
name|mDeleteStatus
block|;
comment|// Flag to indicate that the shader can be deleted when no longer in use
name|std
operator|::
name|string
name|mSource
block|;
name|std
operator|::
name|string
name|mHlsl
block|;
name|std
operator|::
name|string
name|mInfoLog
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Uniform
operator|>
name|mActiveUniforms
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|InterfaceBlock
operator|>
name|mActiveInterfaceBlocks
block|;
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
block|,
name|unsigned
name|int
operator|>
name|mUniformRegisterMap
block|;
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
block|,
name|unsigned
name|int
operator|>
name|mInterfaceBlockRegisterMap
block|;
name|ResourceManager
operator|*
name|mResourceManager
block|; }
block|;
name|class
name|VertexShader
operator|:
name|public
name|Shader
block|{
name|friend
name|class
name|DynamicHLSL
block|;
name|public
operator|:
name|VertexShader
argument_list|(
argument|ResourceManager *manager
argument_list|,
argument|const rx::Renderer *renderer
argument_list|,
argument|GLuint handle
argument_list|)
block|;
operator|~
name|VertexShader
argument_list|()
block|;
name|virtual
name|GLenum
name|getType
argument_list|()
specifier|const
block|;
name|virtual
name|void
name|compile
argument_list|()
block|;
name|virtual
name|void
name|uncompile
argument_list|()
block|;
name|int
name|getSemanticIndex
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|attributeName
argument_list|)
block|;
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Attribute
operator|>
operator|&
name|activeAttributes
argument_list|()
specifier|const
block|{
return|return
name|mActiveAttributes
return|;
block|}
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|VertexShader
argument_list|)
block|;
name|void
name|parseAttributes
argument_list|()
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Attribute
operator|>
name|mActiveAttributes
block|; }
block|;
name|class
name|FragmentShader
operator|:
name|public
name|Shader
block|{
name|public
operator|:
name|FragmentShader
argument_list|(
argument|ResourceManager *manager
argument_list|,
argument|const rx::Renderer *renderer
argument_list|,
argument|GLuint handle
argument_list|)
block|;
operator|~
name|FragmentShader
argument_list|()
block|;
name|virtual
name|GLenum
name|getType
argument_list|()
specifier|const
block|;
name|virtual
name|void
name|compile
argument_list|()
block|;
name|virtual
name|void
name|uncompile
argument_list|()
block|;
specifier|const
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Attribute
operator|>
operator|&
name|getOutputVariables
argument_list|()
specifier|const
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|FragmentShader
argument_list|)
block|;
name|std
operator|::
name|vector
operator|<
name|sh
operator|::
name|Attribute
operator|>
name|mActiveOutputVariables
block|; }
block|; }
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_SHADER_H_
end_comment
end_unit
