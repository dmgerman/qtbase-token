begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Caps.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"angle_gl.h"
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|<sstream>
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|TextureCaps
name|TextureCaps
operator|::
name|TextureCaps
parameter_list|()
member_init_list|:
name|texturable
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|filterable
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|renderable
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|sampleCounts
argument_list|()
block|{ }
DECL|function|insert
name|void
name|TextureCapsMap
operator|::
name|insert
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
specifier|const
name|TextureCaps
modifier|&
name|caps
parameter_list|)
block|{
name|mCapsMap
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|internalFormat
argument_list|,
name|caps
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|remove
name|void
name|TextureCapsMap
operator|::
name|remove
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatToCapsMap
operator|::
name|iterator
name|i
init|=
name|mCapsMap
operator|.
name|find
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
name|mCapsMap
operator|.
name|end
argument_list|()
condition|)
block|{
name|mCapsMap
operator|.
name|erase
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|get
specifier|const
name|TextureCaps
modifier|&
name|TextureCapsMap
operator|::
name|get
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
specifier|const
block|{
specifier|static
name|TextureCaps
name|defaultUnsupportedTexture
decl_stmt|;
name|InternalFormatToCapsMap
operator|::
name|const_iterator
name|iter
init|=
name|mCapsMap
operator|.
name|find
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
return|return
operator|(
name|iter
operator|!=
name|mCapsMap
operator|.
name|end
argument_list|()
operator|)
condition|?
name|iter
operator|->
name|second
else|:
name|defaultUnsupportedTexture
return|;
block|}
DECL|function|begin
name|TextureCapsMap
operator|::
name|const_iterator
name|TextureCapsMap
operator|::
name|begin
parameter_list|()
specifier|const
block|{
return|return
name|mCapsMap
operator|.
name|begin
argument_list|()
return|;
block|}
DECL|function|end
name|TextureCapsMap
operator|::
name|const_iterator
name|TextureCapsMap
operator|::
name|end
parameter_list|()
specifier|const
block|{
return|return
name|mCapsMap
operator|.
name|end
argument_list|()
return|;
block|}
DECL|function|size
name|size_t
name|TextureCapsMap
operator|::
name|size
parameter_list|()
specifier|const
block|{
return|return
name|mCapsMap
operator|.
name|size
argument_list|()
return|;
block|}
DECL|function|Extensions
name|Extensions
operator|::
name|Extensions
parameter_list|()
member_init_list|:
name|elementIndexUint
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|packedDepthStencil
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|getProgramBinary
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|rgb8rgba8
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|textureFormatBGRA8888
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|readFormatBGRA
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|pixelBufferObject
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mapBuffer
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mapBufferRange
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|textureHalfFloat
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|textureHalfFloatLinear
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|textureFloat
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|textureFloatLinear
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|textureRG
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|textureCompressionDXT1
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|textureCompressionDXT3
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|textureCompressionDXT5
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|depthTextures
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|textureNPOT
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|drawBuffers
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|textureStorage
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|textureFilterAnisotropic
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|maxTextureAnisotropy
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|occlusionQueryBoolean
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|fence
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|timerQuery
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|robustness
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|blendMinMax
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|framebufferBlit
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|framebufferMultisample
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|instancedArrays
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|packReverseRowOrder
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|standardDerivatives
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|shaderTextureLOD
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|fragDepth
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|textureUsage
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|translatedShaderSource
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|colorBufferFloat
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|InsertExtensionString
specifier|static
name|void
name|InsertExtensionString
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|extension
parameter_list|,
name|bool
name|supported
parameter_list|,
name|std
operator|::
name|vector
argument_list|<
name|std
operator|::
name|string
argument_list|>
modifier|*
name|extensionVector
parameter_list|)
block|{
if|if
condition|(
name|supported
condition|)
block|{
name|extensionVector
operator|->
name|push_back
argument_list|(
name|extension
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getStrings
name|std
operator|::
name|vector
argument_list|<
name|std
operator|::
name|string
argument_list|>
name|Extensions
operator|::
name|getStrings
parameter_list|()
specifier|const
block|{
name|std
operator|::
name|vector
argument_list|<
name|std
operator|::
name|string
argument_list|>
name|extensionStrings
decl_stmt|;
comment|//                   | Extension name                     | Supported flag          | Output vector   |
name|InsertExtensionString
argument_list|(
literal|"GL_OES_element_index_uint"
argument_list|,
name|elementIndexUint
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_OES_packed_depth_stencil"
argument_list|,
name|packedDepthStencil
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_OES_get_program_binary"
argument_list|,
name|getProgramBinary
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_OES_rgb8_rgba8"
argument_list|,
name|rgb8rgba8
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_texture_format_BGRA8888"
argument_list|,
name|textureFormatBGRA8888
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_read_format_bgra"
argument_list|,
name|readFormatBGRA
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_NV_pixel_buffer_object"
argument_list|,
name|pixelBufferObject
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_OES_mapbuffer"
argument_list|,
name|mapBuffer
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_map_buffer_range"
argument_list|,
name|mapBufferRange
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_OES_texture_half_float"
argument_list|,
name|textureHalfFloat
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_OES_texture_half_float_linear"
argument_list|,
name|textureHalfFloatLinear
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_OES_texture_float"
argument_list|,
name|textureFloat
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_OES_texture_float_linear"
argument_list|,
name|textureFloatLinear
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_texture_rg"
argument_list|,
name|textureRG
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_texture_compression_dxt1"
argument_list|,
name|textureCompressionDXT1
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_ANGLE_texture_compression_dxt3"
argument_list|,
name|textureCompressionDXT3
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_ANGLE_texture_compression_dxt5"
argument_list|,
name|textureCompressionDXT5
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_sRGB"
argument_list|,
name|sRGB
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_ANGLE_depth_texture"
argument_list|,
name|depthTextures
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_texture_storage"
argument_list|,
name|textureStorage
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_OES_texture_npot"
argument_list|,
name|textureNPOT
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_draw_buffers"
argument_list|,
name|drawBuffers
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_texture_filter_anisotropic"
argument_list|,
name|textureFilterAnisotropic
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_occlusion_query_boolean"
argument_list|,
name|occlusionQueryBoolean
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_NV_fence"
argument_list|,
name|fence
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_ANGLE_timer_query"
argument_list|,
name|timerQuery
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_robustness"
argument_list|,
name|robustness
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_blend_minmax"
argument_list|,
name|blendMinMax
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_ANGLE_framebuffer_blit"
argument_list|,
name|framebufferBlit
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_ANGLE_framebuffer_multisample"
argument_list|,
name|framebufferMultisample
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_ANGLE_instanced_arrays"
argument_list|,
name|instancedArrays
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_ANGLE_pack_reverse_row_order"
argument_list|,
name|packReverseRowOrder
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_OES_standard_derivatives"
argument_list|,
name|standardDerivatives
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_shader_texture_lod"
argument_list|,
name|shaderTextureLOD
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_frag_depth"
argument_list|,
name|fragDepth
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_ANGLE_texture_usage"
argument_list|,
name|textureUsage
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_ANGLE_translated_shader_source"
argument_list|,
name|translatedShaderSource
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
name|InsertExtensionString
argument_list|(
literal|"GL_EXT_color_buffer_float"
argument_list|,
name|colorBufferFloat
argument_list|,
operator|&
name|extensionStrings
argument_list|)
expr_stmt|;
return|return
name|extensionStrings
return|;
block|}
DECL|function|GetFormatSupport
specifier|static
name|bool
name|GetFormatSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|,
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
modifier|&
name|requiredFormats
parameter_list|,
name|bool
name|requiresFiltering
parameter_list|,
name|bool
name|requiresRendering
parameter_list|)
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requiredFormats
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|TextureCaps
modifier|&
name|cap
init|=
name|textureCaps
operator|.
name|get
argument_list|(
name|requiredFormats
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiresFiltering
operator|&&
operator|!
name|cap
operator|.
name|filterable
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|requiresRendering
operator|&&
operator|!
name|cap
operator|.
name|renderable
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// Checks for GL_OES_rgb8_rgba8 support
DECL|function|DetermineRGB8AndRGBA8TextureSupport
specifier|static
name|bool
name|DetermineRGB8AndRGBA8TextureSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
name|requiredFormats
decl_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RGB8
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RGBA8
argument_list|)
expr_stmt|;
return|return
name|GetFormatSupport
argument_list|(
name|textureCaps
argument_list|,
name|requiredFormats
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|// Checks for GL_EXT_texture_format_BGRA8888 support
DECL|function|DetermineBGRA8TextureSupport
specifier|static
name|bool
name|DetermineBGRA8TextureSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
name|requiredFormats
decl_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_BGRA8_EXT
argument_list|)
expr_stmt|;
return|return
name|GetFormatSupport
argument_list|(
name|textureCaps
argument_list|,
name|requiredFormats
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|// Checks for GL_OES_texture_half_float support
DECL|function|DetermineHalfFloatTextureSupport
specifier|static
name|bool
name|DetermineHalfFloatTextureSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
name|requiredFormats
decl_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RGB16F
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RGBA16F
argument_list|)
expr_stmt|;
return|return
name|GetFormatSupport
argument_list|(
name|textureCaps
argument_list|,
name|requiredFormats
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|// Checks for GL_OES_texture_half_float_linear support
DECL|function|DetermineHalfFloatTextureFilteringSupport
specifier|static
name|bool
name|DetermineHalfFloatTextureFilteringSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
name|requiredFormats
decl_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RGB16F
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RGBA16F
argument_list|)
expr_stmt|;
return|return
name|GetFormatSupport
argument_list|(
name|textureCaps
argument_list|,
name|requiredFormats
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// Checks for GL_OES_texture_float support
DECL|function|DetermineFloatTextureSupport
specifier|static
name|bool
name|DetermineFloatTextureSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
name|requiredFormats
decl_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RGB32F
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RGBA32F
argument_list|)
expr_stmt|;
return|return
name|GetFormatSupport
argument_list|(
name|textureCaps
argument_list|,
name|requiredFormats
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|// Checks for GL_OES_texture_float_linear support
DECL|function|DetermineFloatTextureFilteringSupport
specifier|static
name|bool
name|DetermineFloatTextureFilteringSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
name|requiredFormats
decl_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RGB32F
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RGBA32F
argument_list|)
expr_stmt|;
return|return
name|GetFormatSupport
argument_list|(
name|textureCaps
argument_list|,
name|requiredFormats
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// Checks for GL_EXT_texture_rg support
DECL|function|DetermineRGTextureSupport
specifier|static
name|bool
name|DetermineRGTextureSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|,
name|bool
name|checkHalfFloatFormats
parameter_list|,
name|bool
name|checkFloatFormats
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
name|requiredFormats
decl_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_R8
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RG8
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkHalfFloatFormats
condition|)
block|{
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_R16F
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RG16F
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkFloatFormats
condition|)
block|{
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_R32F
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RG32F
argument_list|)
expr_stmt|;
block|}
return|return
name|GetFormatSupport
argument_list|(
name|textureCaps
argument_list|,
name|requiredFormats
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// Check for GL_EXT_texture_compression_dxt1
DECL|function|DetermineDXT1TextureSupport
specifier|static
name|bool
name|DetermineDXT1TextureSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
name|requiredFormats
decl_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|)
expr_stmt|;
return|return
name|GetFormatSupport
argument_list|(
name|textureCaps
argument_list|,
name|requiredFormats
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// Check for GL_ANGLE_texture_compression_dxt3
DECL|function|DetermineDXT3TextureSupport
specifier|static
name|bool
name|DetermineDXT3TextureSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
name|requiredFormats
decl_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|)
expr_stmt|;
return|return
name|GetFormatSupport
argument_list|(
name|textureCaps
argument_list|,
name|requiredFormats
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// Check for GL_ANGLE_texture_compression_dxt5
DECL|function|DetermineDXT5TextureSupport
specifier|static
name|bool
name|DetermineDXT5TextureSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
name|requiredFormats
decl_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|)
expr_stmt|;
return|return
name|GetFormatSupport
argument_list|(
name|textureCaps
argument_list|,
name|requiredFormats
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// Check for GL_ANGLE_texture_compression_dxt5
DECL|function|DetermineSRGBTextureSupport
specifier|static
name|bool
name|DetermineSRGBTextureSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
name|requiredFilterFormats
decl_stmt|;
name|requiredFilterFormats
operator|.
name|push_back
argument_list|(
name|GL_SRGB8
argument_list|)
expr_stmt|;
name|requiredFilterFormats
operator|.
name|push_back
argument_list|(
name|GL_SRGB8_ALPHA8
argument_list|)
expr_stmt|;
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
name|requiredRenderFormats
decl_stmt|;
name|requiredRenderFormats
operator|.
name|push_back
argument_list|(
name|GL_SRGB8_ALPHA8
argument_list|)
expr_stmt|;
return|return
name|GetFormatSupport
argument_list|(
name|textureCaps
argument_list|,
name|requiredFilterFormats
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|&&
name|GetFormatSupport
argument_list|(
name|textureCaps
argument_list|,
name|requiredRenderFormats
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|// Check for GL_ANGLE_depth_texture
DECL|function|DetermineDepthTextureSupport
specifier|static
name|bool
name|DetermineDepthTextureSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
name|requiredFormats
decl_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_DEPTH_COMPONENT16
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_DEPTH_COMPONENT32_OES
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_DEPTH24_STENCIL8_OES
argument_list|)
expr_stmt|;
return|return
name|GetFormatSupport
argument_list|(
name|textureCaps
argument_list|,
name|requiredFormats
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|// Check for GL_EXT_color_buffer_float
DECL|function|DetermineColorBufferFloatSupport
specifier|static
name|bool
name|DetermineColorBufferFloatSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
name|requiredFormats
decl_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_R16F
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RG16F
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RGBA16F
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_R32F
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RG32F
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_RGBA32F
argument_list|)
expr_stmt|;
name|requiredFormats
operator|.
name|push_back
argument_list|(
name|GL_R11F_G11F_B10F
argument_list|)
expr_stmt|;
return|return
name|GetFormatSupport
argument_list|(
name|textureCaps
argument_list|,
name|requiredFormats
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|function|setTextureExtensionSupport
name|void
name|Extensions
operator|::
name|setTextureExtensionSupport
parameter_list|(
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|)
block|{
name|rgb8rgba8
operator|=
name|DetermineRGB8AndRGBA8TextureSupport
argument_list|(
name|textureCaps
argument_list|)
expr_stmt|;
name|textureFormatBGRA8888
operator|=
name|DetermineBGRA8TextureSupport
argument_list|(
name|textureCaps
argument_list|)
expr_stmt|;
name|textureHalfFloat
operator|=
name|DetermineHalfFloatTextureSupport
argument_list|(
name|textureCaps
argument_list|)
expr_stmt|;
name|textureHalfFloatLinear
operator|=
name|DetermineHalfFloatTextureFilteringSupport
argument_list|(
name|textureCaps
argument_list|)
expr_stmt|;
name|textureFloat
operator|=
name|DetermineFloatTextureSupport
argument_list|(
name|textureCaps
argument_list|)
expr_stmt|;
name|textureFloatLinear
operator|=
name|DetermineFloatTextureFilteringSupport
argument_list|(
name|textureCaps
argument_list|)
expr_stmt|;
name|textureRG
operator|=
name|DetermineRGTextureSupport
argument_list|(
name|textureCaps
argument_list|,
name|textureHalfFloat
argument_list|,
name|textureFloat
argument_list|)
expr_stmt|;
name|textureCompressionDXT1
operator|=
name|DetermineDXT1TextureSupport
argument_list|(
name|textureCaps
argument_list|)
expr_stmt|;
name|textureCompressionDXT3
operator|=
name|DetermineDXT3TextureSupport
argument_list|(
name|textureCaps
argument_list|)
expr_stmt|;
name|textureCompressionDXT5
operator|=
name|DetermineDXT5TextureSupport
argument_list|(
name|textureCaps
argument_list|)
expr_stmt|;
name|sRGB
operator|=
name|DetermineSRGBTextureSupport
argument_list|(
name|textureCaps
argument_list|)
expr_stmt|;
name|depthTextures
operator|=
name|DetermineDepthTextureSupport
argument_list|(
name|textureCaps
argument_list|)
expr_stmt|;
name|colorBufferFloat
operator|=
name|DetermineColorBufferFloatSupport
argument_list|(
name|textureCaps
argument_list|)
expr_stmt|;
block|}
DECL|function|Caps
name|Caps
operator|::
name|Caps
parameter_list|()
member_init_list|:
name|maxElementIndex
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|max3DTextureSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|max2DTextureSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maxArrayTextureLayers
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maxLODBias
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maxCubeMapTextureSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maxRenderbufferSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maxDrawBuffers
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maxColorAttachments
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maxViewportWidth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maxViewportHeight
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|minAliasedPointSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maxAliasedPointSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|minAliasedLineWidth
argument_list|(
literal|0
argument_list|)
block|{ }
block|}
end_namespace
end_unit
