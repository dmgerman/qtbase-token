begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Shader.cpp: Implements the gl::Shader class and its  derived classes
end_comment
begin_comment
comment|// VertexShader and FragmentShader. Implements GL shader objects and related
end_comment
begin_comment
comment|// functionality. [OpenGL ES 2.0.24] section 2.10 page 24 and section 3.8 page 84.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Shader.h"
end_include
begin_include
include|#
directive|include
file|"GLSLANG/ShaderLang.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Constants.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/ResourceManager.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|member|mFragmentCompiler
name|void
modifier|*
name|Shader
operator|::
name|mFragmentCompiler
init|=
name|NULL
decl_stmt|;
DECL|member|mVertexCompiler
name|void
modifier|*
name|Shader
operator|::
name|mVertexCompiler
init|=
name|NULL
decl_stmt|;
DECL|function|Shader
name|Shader
operator|::
name|Shader
parameter_list|(
name|ResourceManager
modifier|*
name|manager
parameter_list|,
specifier|const
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|GLuint
name|handle
parameter_list|)
member_init_list|:
name|mHandle
argument_list|(
name|handle
argument_list|)
member_init_list|,
name|mRenderer
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mResourceManager
argument_list|(
name|manager
argument_list|)
block|{
name|uncompile
argument_list|()
expr_stmt|;
name|initializeCompiler
argument_list|()
expr_stmt|;
name|mRefCount
operator|=
literal|0
expr_stmt|;
name|mDeleteStatus
operator|=
literal|false
expr_stmt|;
name|mShaderVersion
operator|=
literal|100
expr_stmt|;
block|}
DECL|function|~Shader
name|Shader
operator|::
name|~
name|Shader
parameter_list|()
block|{ }
DECL|function|getHandle
name|GLuint
name|Shader
operator|::
name|getHandle
parameter_list|()
specifier|const
block|{
return|return
name|mHandle
return|;
block|}
DECL|function|setSource
name|void
name|Shader
operator|::
name|setSource
parameter_list|(
name|GLsizei
name|count
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|string
parameter_list|,
specifier|const
name|GLint
modifier|*
name|length
parameter_list|)
block|{
name|std
operator|::
name|ostringstream
name|stream
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|<<
name|string
index|[
name|i
index|]
expr_stmt|;
block|}
name|mSource
operator|=
name|stream
operator|.
name|str
argument_list|()
expr_stmt|;
block|}
DECL|function|getInfoLogLength
name|int
name|Shader
operator|::
name|getInfoLogLength
parameter_list|()
specifier|const
block|{
return|return
name|mInfoLog
operator|.
name|empty
argument_list|()
condition|?
literal|0
else|:
operator|(
name|mInfoLog
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|)
return|;
block|}
DECL|function|getInfoLog
name|void
name|Shader
operator|::
name|getInfoLog
parameter_list|(
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|infoLog
parameter_list|)
specifier|const
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bufSize
operator|>
literal|0
condition|)
block|{
name|index
operator|=
name|std
operator|::
name|min
argument_list|(
name|bufSize
operator|-
literal|1
argument_list|,
cast|static_cast
argument_list|<
name|GLsizei
argument_list|>
argument_list|(
name|mInfoLog
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|infoLog
argument_list|,
name|mInfoLog
operator|.
name|c_str
argument_list|()
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|infoLog
index|[
name|index
index|]
operator|=
literal|'\0'
expr_stmt|;
block|}
if|if
condition|(
name|length
condition|)
block|{
operator|*
name|length
operator|=
name|index
expr_stmt|;
block|}
block|}
DECL|function|getSourceLength
name|int
name|Shader
operator|::
name|getSourceLength
parameter_list|()
specifier|const
block|{
return|return
name|mSource
operator|.
name|empty
argument_list|()
condition|?
literal|0
else|:
operator|(
name|mSource
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|)
return|;
block|}
DECL|function|getTranslatedSourceLength
name|int
name|Shader
operator|::
name|getTranslatedSourceLength
parameter_list|()
specifier|const
block|{
return|return
name|mHlsl
operator|.
name|empty
argument_list|()
condition|?
literal|0
else|:
operator|(
name|mHlsl
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|)
return|;
block|}
DECL|function|getSourceImpl
name|void
name|Shader
operator|::
name|getSourceImpl
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|source
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|)
specifier|const
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bufSize
operator|>
literal|0
condition|)
block|{
name|index
operator|=
name|std
operator|::
name|min
argument_list|(
name|bufSize
operator|-
literal|1
argument_list|,
cast|static_cast
argument_list|<
name|GLsizei
argument_list|>
argument_list|(
name|source
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|buffer
argument_list|,
name|source
operator|.
name|c_str
argument_list|()
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|buffer
index|[
name|index
index|]
operator|=
literal|'\0'
expr_stmt|;
block|}
if|if
condition|(
name|length
condition|)
block|{
operator|*
name|length
operator|=
name|index
expr_stmt|;
block|}
block|}
DECL|function|getSource
name|void
name|Shader
operator|::
name|getSource
parameter_list|(
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|)
specifier|const
block|{
name|getSourceImpl
argument_list|(
name|mSource
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
DECL|function|getTranslatedSource
name|void
name|Shader
operator|::
name|getTranslatedSource
parameter_list|(
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|)
specifier|const
block|{
name|getSourceImpl
argument_list|(
name|mHlsl
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
DECL|function|getUniformRegister
name|unsigned
name|int
name|Shader
operator|::
name|getUniformRegister
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|uniformName
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|mUniformRegisterMap
operator|.
name|count
argument_list|(
name|uniformName
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
name|mUniformRegisterMap
operator|.
name|find
argument_list|(
name|uniformName
argument_list|)
operator|->
name|second
return|;
block|}
DECL|function|getInterfaceBlockRegister
name|unsigned
name|int
name|Shader
operator|::
name|getInterfaceBlockRegister
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|blockName
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|mInterfaceBlockRegisterMap
operator|.
name|count
argument_list|(
name|blockName
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
name|mInterfaceBlockRegisterMap
operator|.
name|find
argument_list|(
name|blockName
argument_list|)
operator|->
name|second
return|;
block|}
DECL|function|getUniforms
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|Uniform
argument_list|>
modifier|&
name|Shader
operator|::
name|getUniforms
parameter_list|()
specifier|const
block|{
return|return
name|mActiveUniforms
return|;
block|}
DECL|function|getInterfaceBlocks
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|InterfaceBlock
argument_list|>
modifier|&
name|Shader
operator|::
name|getInterfaceBlocks
parameter_list|()
specifier|const
block|{
return|return
name|mActiveInterfaceBlocks
return|;
block|}
DECL|function|getVaryings
name|std
operator|::
name|vector
argument_list|<
name|PackedVarying
argument_list|>
modifier|&
name|Shader
operator|::
name|getVaryings
parameter_list|()
block|{
return|return
name|mVaryings
return|;
block|}
DECL|function|isCompiled
name|bool
name|Shader
operator|::
name|isCompiled
parameter_list|()
specifier|const
block|{
return|return
operator|!
name|mHlsl
operator|.
name|empty
argument_list|()
return|;
block|}
DECL|function|getHLSL
specifier|const
name|std
operator|::
name|string
modifier|&
name|Shader
operator|::
name|getHLSL
parameter_list|()
specifier|const
block|{
return|return
name|mHlsl
return|;
block|}
DECL|function|addRef
name|void
name|Shader
operator|::
name|addRef
parameter_list|()
block|{
name|mRefCount
operator|++
expr_stmt|;
block|}
DECL|function|release
name|void
name|Shader
operator|::
name|release
parameter_list|()
block|{
name|mRefCount
operator|--
expr_stmt|;
if|if
condition|(
name|mRefCount
operator|==
literal|0
operator|&&
name|mDeleteStatus
condition|)
block|{
name|mResourceManager
operator|->
name|deleteShader
argument_list|(
name|mHandle
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getRefCount
name|unsigned
name|int
name|Shader
operator|::
name|getRefCount
parameter_list|()
specifier|const
block|{
return|return
name|mRefCount
return|;
block|}
DECL|function|isFlaggedForDeletion
name|bool
name|Shader
operator|::
name|isFlaggedForDeletion
parameter_list|()
specifier|const
block|{
return|return
name|mDeleteStatus
return|;
block|}
DECL|function|flagForDeletion
name|void
name|Shader
operator|::
name|flagForDeletion
parameter_list|()
block|{
name|mDeleteStatus
operator|=
literal|true
expr_stmt|;
block|}
comment|// Perform a one-time initialization of the shader compiler (or after being destructed by releaseCompiler)
DECL|function|initializeCompiler
name|void
name|Shader
operator|::
name|initializeCompiler
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mFragmentCompiler
condition|)
block|{
name|int
name|result
init|=
name|ShInitialize
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|ShShaderOutput
name|hlslVersion
init|=
operator|(
name|mRenderer
operator|->
name|getMajorShaderModel
argument_list|()
operator|>=
literal|4
operator|)
condition|?
name|SH_HLSL11_OUTPUT
else|:
name|SH_HLSL9_OUTPUT
decl_stmt|;
name|ShBuiltInResources
name|resources
decl_stmt|;
name|ShInitBuiltInResources
argument_list|(
operator|&
name|resources
argument_list|)
expr_stmt|;
comment|// TODO(geofflang): use context's caps
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|mRenderer
operator|->
name|getRendererCaps
argument_list|()
decl_stmt|;
specifier|const
name|gl
operator|::
name|Extensions
modifier|&
name|extensions
init|=
name|mRenderer
operator|->
name|getRendererExtensions
argument_list|()
decl_stmt|;
name|resources
operator|.
name|MaxVertexAttribs
operator|=
name|MAX_VERTEX_ATTRIBS
expr_stmt|;
name|resources
operator|.
name|MaxVertexUniformVectors
operator|=
name|mRenderer
operator|->
name|getMaxVertexUniformVectors
argument_list|()
expr_stmt|;
name|resources
operator|.
name|MaxVaryingVectors
operator|=
name|mRenderer
operator|->
name|getMaxVaryingVectors
argument_list|()
expr_stmt|;
name|resources
operator|.
name|MaxVertexTextureImageUnits
operator|=
name|mRenderer
operator|->
name|getMaxVertexTextureImageUnits
argument_list|()
expr_stmt|;
name|resources
operator|.
name|MaxCombinedTextureImageUnits
operator|=
name|mRenderer
operator|->
name|getMaxCombinedTextureImageUnits
argument_list|()
expr_stmt|;
name|resources
operator|.
name|MaxTextureImageUnits
operator|=
name|MAX_TEXTURE_IMAGE_UNITS
expr_stmt|;
name|resources
operator|.
name|MaxFragmentUniformVectors
operator|=
name|mRenderer
operator|->
name|getMaxFragmentUniformVectors
argument_list|()
expr_stmt|;
name|resources
operator|.
name|MaxDrawBuffers
operator|=
name|caps
operator|.
name|maxDrawBuffers
expr_stmt|;
name|resources
operator|.
name|OES_standard_derivatives
operator|=
name|extensions
operator|.
name|standardDerivatives
expr_stmt|;
name|resources
operator|.
name|EXT_draw_buffers
operator|=
name|extensions
operator|.
name|drawBuffers
expr_stmt|;
name|resources
operator|.
name|EXT_shader_texture_lod
operator|=
literal|1
expr_stmt|;
comment|// resources.OES_EGL_image_external = mRenderer->getShareHandleSupport() ? 1 : 0; // TODO: commented out until the extension is actually supported.
name|resources
operator|.
name|FragmentPrecisionHigh
operator|=
literal|1
expr_stmt|;
comment|// Shader Model 2+ always supports FP24 (s16e7) which corresponds to highp
name|resources
operator|.
name|EXT_frag_depth
operator|=
literal|1
expr_stmt|;
comment|// Shader Model 2+ always supports explicit depth output
comment|// GLSL ES 3.0 constants
name|resources
operator|.
name|MaxVertexOutputVectors
operator|=
name|mRenderer
operator|->
name|getMaxVaryingVectors
argument_list|()
expr_stmt|;
name|resources
operator|.
name|MaxFragmentInputVectors
operator|=
name|mRenderer
operator|->
name|getMaxVaryingVectors
argument_list|()
expr_stmt|;
name|resources
operator|.
name|MinProgramTexelOffset
operator|=
operator|-
literal|8
expr_stmt|;
comment|// D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE
name|resources
operator|.
name|MaxProgramTexelOffset
operator|=
literal|7
expr_stmt|;
comment|// D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE
name|mFragmentCompiler
operator|=
name|ShConstructCompiler
argument_list|(
name|GL_FRAGMENT_SHADER
argument_list|,
name|SH_GLES2_SPEC
argument_list|,
name|hlslVersion
argument_list|,
operator|&
name|resources
argument_list|)
expr_stmt|;
name|mVertexCompiler
operator|=
name|ShConstructCompiler
argument_list|(
name|GL_VERTEX_SHADER
argument_list|,
name|SH_GLES2_SPEC
argument_list|,
name|hlslVersion
argument_list|,
operator|&
name|resources
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|releaseCompiler
name|void
name|Shader
operator|::
name|releaseCompiler
parameter_list|()
block|{
name|ShDestruct
argument_list|(
name|mFragmentCompiler
argument_list|)
expr_stmt|;
name|ShDestruct
argument_list|(
name|mVertexCompiler
argument_list|)
expr_stmt|;
name|mFragmentCompiler
operator|=
name|NULL
expr_stmt|;
name|mVertexCompiler
operator|=
name|NULL
expr_stmt|;
name|ShFinalize
argument_list|()
expr_stmt|;
block|}
DECL|function|parseVaryings
name|void
name|Shader
operator|::
name|parseVaryings
parameter_list|(
name|void
modifier|*
name|compiler
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mHlsl
operator|.
name|empty
argument_list|()
condition|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|Varying
argument_list|>
modifier|*
name|activeVaryings
decl_stmt|;
name|ShGetInfoPointer
argument_list|(
name|compiler
argument_list|,
name|SH_ACTIVE_VARYINGS_ARRAY
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|activeVaryings
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|varyingIndex
init|=
literal|0
init|;
name|varyingIndex
operator|<
name|activeVaryings
operator|->
name|size
argument_list|()
condition|;
name|varyingIndex
operator|++
control|)
block|{
name|mVaryings
operator|.
name|push_back
argument_list|(
name|PackedVarying
argument_list|(
operator|(
operator|*
name|activeVaryings
operator|)
index|[
name|varyingIndex
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mUsesMultipleRenderTargets
operator|=
name|mHlsl
operator|.
name|find
argument_list|(
literal|"GL_USES_MRT"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFragColor
operator|=
name|mHlsl
operator|.
name|find
argument_list|(
literal|"GL_USES_FRAG_COLOR"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFragData
operator|=
name|mHlsl
operator|.
name|find
argument_list|(
literal|"GL_USES_FRAG_DATA"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFragCoord
operator|=
name|mHlsl
operator|.
name|find
argument_list|(
literal|"GL_USES_FRAG_COORD"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFrontFacing
operator|=
name|mHlsl
operator|.
name|find
argument_list|(
literal|"GL_USES_FRONT_FACING"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesPointSize
operator|=
name|mHlsl
operator|.
name|find
argument_list|(
literal|"GL_USES_POINT_SIZE"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesPointCoord
operator|=
name|mHlsl
operator|.
name|find
argument_list|(
literal|"GL_USES_POINT_COORD"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesDepthRange
operator|=
name|mHlsl
operator|.
name|find
argument_list|(
literal|"GL_USES_DEPTH_RANGE"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesFragDepth
operator|=
name|mHlsl
operator|.
name|find
argument_list|(
literal|"GL_USES_FRAG_DEPTH"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesDiscardRewriting
operator|=
name|mHlsl
operator|.
name|find
argument_list|(
literal|"ANGLE_USES_DISCARD_REWRITING"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
name|mUsesNestedBreak
operator|=
name|mHlsl
operator|.
name|find
argument_list|(
literal|"ANGLE_USES_NESTED_BREAK"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
expr_stmt|;
block|}
block|}
DECL|function|resetVaryingsRegisterAssignment
name|void
name|Shader
operator|::
name|resetVaryingsRegisterAssignment
parameter_list|()
block|{
for|for
control|(
name|unsigned
name|int
name|varyingIndex
init|=
literal|0
init|;
name|varyingIndex
operator|<
name|mVaryings
operator|.
name|size
argument_list|()
condition|;
name|varyingIndex
operator|++
control|)
block|{
name|mVaryings
index|[
name|varyingIndex
index|]
operator|.
name|resetRegisterAssignment
argument_list|()
expr_stmt|;
block|}
block|}
comment|// initialize/clean up previous state
DECL|function|uncompile
name|void
name|Shader
operator|::
name|uncompile
parameter_list|()
block|{
comment|// set by compileToHLSL
name|mHlsl
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mInfoLog
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// set by parseVaryings
name|mVaryings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mUsesMultipleRenderTargets
operator|=
literal|false
expr_stmt|;
name|mUsesFragColor
operator|=
literal|false
expr_stmt|;
name|mUsesFragData
operator|=
literal|false
expr_stmt|;
name|mUsesFragCoord
operator|=
literal|false
expr_stmt|;
name|mUsesFrontFacing
operator|=
literal|false
expr_stmt|;
name|mUsesPointSize
operator|=
literal|false
expr_stmt|;
name|mUsesPointCoord
operator|=
literal|false
expr_stmt|;
name|mUsesDepthRange
operator|=
literal|false
expr_stmt|;
name|mUsesFragDepth
operator|=
literal|false
expr_stmt|;
name|mShaderVersion
operator|=
literal|100
expr_stmt|;
name|mUsesDiscardRewriting
operator|=
literal|false
expr_stmt|;
name|mUsesNestedBreak
operator|=
literal|false
expr_stmt|;
name|mActiveUniforms
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mActiveInterfaceBlocks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|compileToHLSL
name|void
name|Shader
operator|::
name|compileToHLSL
parameter_list|(
name|void
modifier|*
name|compiler
parameter_list|)
block|{
comment|// ensure the compiler is loaded
name|initializeCompiler
argument_list|()
expr_stmt|;
name|int
name|compileOptions
init|=
name|SH_OBJECT_CODE
decl_stmt|;
name|std
operator|::
name|string
name|sourcePath
decl_stmt|;
if|if
condition|(
name|perfActive
argument_list|()
condition|)
block|{
name|sourcePath
operator|=
name|getTempPath
argument_list|()
expr_stmt|;
name|writeFile
argument_list|(
name|sourcePath
operator|.
name|c_str
argument_list|()
argument_list|,
name|mSource
operator|.
name|c_str
argument_list|()
argument_list|,
name|mSource
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|compileOptions
operator||=
name|SH_LINE_DIRECTIVES
expr_stmt|;
block|}
name|int
name|result
decl_stmt|;
if|if
condition|(
name|sourcePath
operator|.
name|empty
argument_list|()
condition|)
block|{
specifier|const
name|char
modifier|*
name|sourceStrings
index|[]
init|=
block|{
name|mSource
operator|.
name|c_str
argument_list|()
block|,         }
decl_stmt|;
name|result
operator|=
name|ShCompile
argument_list|(
name|compiler
argument_list|,
name|sourceStrings
argument_list|,
name|ArraySize
argument_list|(
name|sourceStrings
argument_list|)
argument_list|,
name|compileOptions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|char
modifier|*
name|sourceStrings
index|[]
init|=
block|{
name|sourcePath
operator|.
name|c_str
argument_list|()
block|,
name|mSource
operator|.
name|c_str
argument_list|()
block|,         }
decl_stmt|;
name|result
operator|=
name|ShCompile
argument_list|(
name|compiler
argument_list|,
name|sourceStrings
argument_list|,
name|ArraySize
argument_list|(
name|sourceStrings
argument_list|)
argument_list|,
name|compileOptions
operator||
name|SH_SOURCE_PATH
argument_list|)
expr_stmt|;
block|}
name|size_t
name|shaderVersion
init|=
literal|100
decl_stmt|;
name|ShGetInfo
argument_list|(
name|compiler
argument_list|,
name|SH_SHADER_VERSION
argument_list|,
operator|&
name|shaderVersion
argument_list|)
expr_stmt|;
name|mShaderVersion
operator|=
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|shaderVersion
argument_list|)
expr_stmt|;
if|if
condition|(
name|shaderVersion
operator|==
literal|300
operator|&&
name|mRenderer
operator|->
name|getCurrentClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|mInfoLog
operator|=
literal|"GLSL ES 3.00 is not supported by OpenGL ES 2.0 contexts"
expr_stmt|;
name|TRACE
argument_list|(
literal|"\n%s"
argument_list|,
name|mInfoLog
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
condition|)
block|{
name|size_t
name|objCodeLen
init|=
literal|0
decl_stmt|;
name|ShGetInfo
argument_list|(
name|compiler
argument_list|,
name|SH_OBJECT_CODE_LENGTH
argument_list|,
operator|&
name|objCodeLen
argument_list|)
expr_stmt|;
name|char
modifier|*
name|outputHLSL
init|=
operator|new
name|char
index|[
name|objCodeLen
index|]
decl_stmt|;
name|ShGetObjectCode
argument_list|(
name|compiler
argument_list|,
name|outputHLSL
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|_DEBUG
name|std
operator|::
name|ostringstream
name|hlslStream
decl_stmt|;
name|hlslStream
operator|<<
literal|"// GLSL\n"
expr_stmt|;
name|hlslStream
operator|<<
literal|"//\n"
expr_stmt|;
name|size_t
name|curPos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|curPos
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
condition|)
block|{
name|size_t
name|nextLine
init|=
name|mSource
operator|.
name|find
argument_list|(
literal|"\n"
argument_list|,
name|curPos
argument_list|)
decl_stmt|;
name|size_t
name|len
init|=
operator|(
name|nextLine
operator|==
name|std
operator|::
name|string
operator|::
name|npos
operator|)
condition|?
name|std
operator|::
name|string
operator|::
name|npos
else|:
operator|(
name|nextLine
operator|-
name|curPos
operator|+
literal|1
operator|)
decl_stmt|;
name|hlslStream
operator|<<
literal|"// "
operator|<<
name|mSource
operator|.
name|substr
argument_list|(
name|curPos
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|curPos
operator|=
operator|(
name|nextLine
operator|==
name|std
operator|::
name|string
operator|::
name|npos
operator|)
condition|?
name|std
operator|::
name|string
operator|::
name|npos
else|:
operator|(
name|nextLine
operator|+
literal|1
operator|)
expr_stmt|;
block|}
name|hlslStream
operator|<<
literal|"\n\n"
expr_stmt|;
name|hlslStream
operator|<<
name|outputHLSL
expr_stmt|;
name|mHlsl
operator|=
name|hlslStream
operator|.
name|str
argument_list|()
expr_stmt|;
else|#
directive|else
name|mHlsl
operator|=
name|outputHLSL
expr_stmt|;
endif|#
directive|endif
operator|delete
index|[]
name|outputHLSL
expr_stmt|;
name|void
modifier|*
name|activeUniforms
decl_stmt|;
name|ShGetInfoPointer
argument_list|(
name|compiler
argument_list|,
name|SH_ACTIVE_UNIFORMS_ARRAY
argument_list|,
operator|&
name|activeUniforms
argument_list|)
expr_stmt|;
name|mActiveUniforms
operator|=
operator|*
operator|(
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|Uniform
argument_list|>
operator|*
operator|)
name|activeUniforms
expr_stmt|;
for|for
control|(
name|size_t
name|uniformIndex
init|=
literal|0
init|;
name|uniformIndex
operator|<
name|mActiveUniforms
operator|.
name|size
argument_list|()
condition|;
name|uniformIndex
operator|++
control|)
block|{
specifier|const
name|sh
operator|::
name|Uniform
modifier|&
name|uniform
init|=
name|mActiveUniforms
index|[
name|uniformIndex
index|]
decl_stmt|;
name|unsigned
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
name|bool
name|result
init|=
name|ShGetUniformRegister
argument_list|(
name|compiler
argument_list|,
name|uniform
operator|.
name|name
operator|.
name|c_str
argument_list|()
argument_list|,
operator|&
name|index
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|mUniformRegisterMap
index|[
name|uniform
operator|.
name|name
index|]
operator|=
name|index
expr_stmt|;
block|}
name|void
modifier|*
name|activeInterfaceBlocks
decl_stmt|;
name|ShGetInfoPointer
argument_list|(
name|compiler
argument_list|,
name|SH_ACTIVE_INTERFACE_BLOCKS_ARRAY
argument_list|,
operator|&
name|activeInterfaceBlocks
argument_list|)
expr_stmt|;
name|mActiveInterfaceBlocks
operator|=
operator|*
operator|(
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|InterfaceBlock
argument_list|>
operator|*
operator|)
name|activeInterfaceBlocks
expr_stmt|;
for|for
control|(
name|size_t
name|blockIndex
init|=
literal|0
init|;
name|blockIndex
operator|<
name|mActiveInterfaceBlocks
operator|.
name|size
argument_list|()
condition|;
name|blockIndex
operator|++
control|)
block|{
specifier|const
name|sh
operator|::
name|InterfaceBlock
modifier|&
name|interfaceBlock
init|=
name|mActiveInterfaceBlocks
index|[
name|blockIndex
index|]
decl_stmt|;
name|unsigned
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
name|bool
name|result
init|=
name|ShGetInterfaceBlockRegister
argument_list|(
name|compiler
argument_list|,
name|interfaceBlock
operator|.
name|name
operator|.
name|c_str
argument_list|()
argument_list|,
operator|&
name|index
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|mInterfaceBlockRegisterMap
index|[
name|interfaceBlock
operator|.
name|name
index|]
operator|=
name|index
expr_stmt|;
block|}
block|}
else|else
block|{
name|size_t
name|infoLogLen
init|=
literal|0
decl_stmt|;
name|ShGetInfo
argument_list|(
name|compiler
argument_list|,
name|SH_INFO_LOG_LENGTH
argument_list|,
operator|&
name|infoLogLen
argument_list|)
expr_stmt|;
name|char
modifier|*
name|infoLog
init|=
operator|new
name|char
index|[
name|infoLogLen
index|]
decl_stmt|;
name|ShGetInfoLog
argument_list|(
name|compiler
argument_list|,
name|infoLog
argument_list|)
expr_stmt|;
name|mInfoLog
operator|=
name|infoLog
expr_stmt|;
name|TRACE
argument_list|(
literal|"\n%s"
argument_list|,
name|mInfoLog
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getD3DWorkarounds
name|rx
operator|::
name|D3DWorkaroundType
name|Shader
operator|::
name|getD3DWorkarounds
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|mUsesDiscardRewriting
condition|)
block|{
comment|// ANGLE issue 486:
comment|// Work-around a D3D9 compiler bug that presents itself when using conditional discard, by disabling optimization
return|return
name|rx
operator|::
name|ANGLE_D3D_WORKAROUND_SKIP_OPTIMIZATION
return|;
block|}
if|if
condition|(
name|mUsesNestedBreak
condition|)
block|{
comment|// ANGLE issue 603:
comment|// Work-around a D3D9 compiler bug that presents itself when using break in a nested loop, by maximizing optimization
comment|// We want to keep the use of ANGLE_D3D_WORKAROUND_MAX_OPTIMIZATION minimal to prevent hangs, so usesDiscard takes precedence
return|return
name|rx
operator|::
name|ANGLE_D3D_WORKAROUND_MAX_OPTIMIZATION
return|;
block|}
return|return
name|rx
operator|::
name|ANGLE_D3D_WORKAROUND_NONE
return|;
block|}
comment|// true if varying x has a higher priority in packing than y
DECL|function|compareVarying
name|bool
name|Shader
operator|::
name|compareVarying
parameter_list|(
specifier|const
name|PackedVarying
modifier|&
name|x
parameter_list|,
specifier|const
name|PackedVarying
modifier|&
name|y
parameter_list|)
block|{
if|if
condition|(
name|x
operator|.
name|type
operator|==
name|y
operator|.
name|type
condition|)
block|{
return|return
name|x
operator|.
name|arraySize
operator|>
name|y
operator|.
name|arraySize
return|;
block|}
comment|// Special case for handling structs: we sort these to the end of the list
if|if
condition|(
name|x
operator|.
name|type
operator|==
name|GL_STRUCT_ANGLEX
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|y
operator|.
name|type
operator|==
name|GL_STRUCT_ANGLEX
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|gl
operator|::
name|VariableSortOrder
argument_list|(
name|x
operator|.
name|type
argument_list|)
operator|<=
name|gl
operator|::
name|VariableSortOrder
argument_list|(
name|y
operator|.
name|type
argument_list|)
return|;
block|}
DECL|function|getShaderVersion
name|int
name|Shader
operator|::
name|getShaderVersion
parameter_list|()
specifier|const
block|{
return|return
name|mShaderVersion
return|;
block|}
DECL|function|VertexShader
name|VertexShader
operator|::
name|VertexShader
parameter_list|(
name|ResourceManager
modifier|*
name|manager
parameter_list|,
specifier|const
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|GLuint
name|handle
parameter_list|)
member_init_list|:
name|Shader
argument_list|(
name|manager
argument_list|,
name|renderer
argument_list|,
name|handle
argument_list|)
block|{ }
DECL|function|~VertexShader
name|VertexShader
operator|::
name|~
name|VertexShader
parameter_list|()
block|{ }
DECL|function|getType
name|GLenum
name|VertexShader
operator|::
name|getType
parameter_list|()
specifier|const
block|{
return|return
name|GL_VERTEX_SHADER
return|;
block|}
DECL|function|uncompile
name|void
name|VertexShader
operator|::
name|uncompile
parameter_list|()
block|{
name|Shader
operator|::
name|uncompile
argument_list|()
expr_stmt|;
comment|// set by ParseAttributes
name|mActiveAttributes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|compile
name|void
name|VertexShader
operator|::
name|compile
parameter_list|()
block|{
name|uncompile
argument_list|()
expr_stmt|;
name|compileToHLSL
argument_list|(
name|mVertexCompiler
argument_list|)
expr_stmt|;
name|parseAttributes
argument_list|()
expr_stmt|;
name|parseVaryings
argument_list|(
name|mVertexCompiler
argument_list|)
expr_stmt|;
block|}
DECL|function|getSemanticIndex
name|int
name|VertexShader
operator|::
name|getSemanticIndex
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|attributeName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|attributeName
operator|.
name|empty
argument_list|()
condition|)
block|{
name|int
name|semanticIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|attributeIndex
init|=
literal|0
init|;
name|attributeIndex
operator|<
name|mActiveAttributes
operator|.
name|size
argument_list|()
condition|;
name|attributeIndex
operator|++
control|)
block|{
specifier|const
name|sh
operator|::
name|ShaderVariable
modifier|&
name|attribute
init|=
name|mActiveAttributes
index|[
name|attributeIndex
index|]
decl_stmt|;
if|if
condition|(
name|attribute
operator|.
name|name
operator|==
name|attributeName
condition|)
block|{
return|return
name|semanticIndex
return|;
block|}
name|semanticIndex
operator|+=
name|VariableRegisterCount
argument_list|(
name|attribute
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|function|parseAttributes
name|void
name|VertexShader
operator|::
name|parseAttributes
parameter_list|()
block|{
specifier|const
name|std
operator|::
name|string
modifier|&
name|hlsl
init|=
name|getHLSL
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hlsl
operator|.
name|empty
argument_list|()
condition|)
block|{
name|void
modifier|*
name|activeAttributes
decl_stmt|;
name|ShGetInfoPointer
argument_list|(
name|mVertexCompiler
argument_list|,
name|SH_ACTIVE_ATTRIBUTES_ARRAY
argument_list|,
operator|&
name|activeAttributes
argument_list|)
expr_stmt|;
name|mActiveAttributes
operator|=
operator|*
operator|(
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|Attribute
argument_list|>
operator|*
operator|)
name|activeAttributes
expr_stmt|;
block|}
block|}
DECL|function|FragmentShader
name|FragmentShader
operator|::
name|FragmentShader
parameter_list|(
name|ResourceManager
modifier|*
name|manager
parameter_list|,
specifier|const
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|GLuint
name|handle
parameter_list|)
member_init_list|:
name|Shader
argument_list|(
name|manager
argument_list|,
name|renderer
argument_list|,
name|handle
argument_list|)
block|{ }
DECL|function|~FragmentShader
name|FragmentShader
operator|::
name|~
name|FragmentShader
parameter_list|()
block|{ }
DECL|function|getType
name|GLenum
name|FragmentShader
operator|::
name|getType
parameter_list|()
specifier|const
block|{
return|return
name|GL_FRAGMENT_SHADER
return|;
block|}
DECL|function|compile
name|void
name|FragmentShader
operator|::
name|compile
parameter_list|()
block|{
name|uncompile
argument_list|()
expr_stmt|;
name|compileToHLSL
argument_list|(
name|mFragmentCompiler
argument_list|)
expr_stmt|;
name|parseVaryings
argument_list|(
name|mFragmentCompiler
argument_list|)
expr_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|mVaryings
operator|.
name|begin
argument_list|()
argument_list|,
name|mVaryings
operator|.
name|end
argument_list|()
argument_list|,
name|compareVarying
argument_list|)
expr_stmt|;
specifier|const
name|std
operator|::
name|string
modifier|&
name|hlsl
init|=
name|getHLSL
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hlsl
operator|.
name|empty
argument_list|()
condition|)
block|{
name|void
modifier|*
name|activeOutputVariables
decl_stmt|;
name|ShGetInfoPointer
argument_list|(
name|mFragmentCompiler
argument_list|,
name|SH_ACTIVE_OUTPUT_VARIABLES_ARRAY
argument_list|,
operator|&
name|activeOutputVariables
argument_list|)
expr_stmt|;
name|mActiveOutputVariables
operator|=
operator|*
operator|(
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|Attribute
argument_list|>
operator|*
operator|)
name|activeOutputVariables
expr_stmt|;
block|}
block|}
DECL|function|uncompile
name|void
name|FragmentShader
operator|::
name|uncompile
parameter_list|()
block|{
name|Shader
operator|::
name|uncompile
argument_list|()
expr_stmt|;
name|mActiveOutputVariables
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|getOutputVariables
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|sh
operator|::
name|Attribute
argument_list|>
modifier|&
name|FragmentShader
operator|::
name|getOutputVariables
parameter_list|()
specifier|const
block|{
return|return
name|mActiveOutputVariables
return|;
block|}
DECL|function|getCompilerOutputType
name|ShShaderOutput
name|Shader
operator|::
name|getCompilerOutputType
parameter_list|(
name|GLenum
name|shader
parameter_list|)
block|{
name|void
modifier|*
name|compiler
init|=
name|NULL
decl_stmt|;
switch|switch
condition|(
name|shader
condition|)
block|{
case|case
name|GL_VERTEX_SHADER
case|:
name|compiler
operator|=
name|mVertexCompiler
expr_stmt|;
break|break;
case|case
name|GL_FRAGMENT_SHADER
case|:
name|compiler
operator|=
name|mFragmentCompiler
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|SH_HLSL9_OUTPUT
return|;
block|}
name|size_t
name|outputType
init|=
literal|0
decl_stmt|;
name|ShGetInfo
argument_list|(
name|compiler
argument_list|,
name|SH_OUTPUT_TYPE
argument_list|,
operator|&
name|outputType
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|ShShaderOutput
argument_list|>
argument_list|(
name|outputType
argument_list|)
return|;
block|}
block|}
end_namespace
end_unit
