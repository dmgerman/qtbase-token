begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Buffer.cpp: Implements the gl::Buffer class, representing storage of vertex and/or
end_comment
begin_comment
comment|// index data. Implements GL buffer objects and related functionality.
end_comment
begin_comment
comment|// [OpenGL ES 2.0.24] section 2.9 page 21.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Buffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/VertexDataManager.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/IndexDataManager.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|Buffer
name|Buffer
operator|::
name|Buffer
parameter_list|(
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|RefCountObject
argument_list|(
name|id
argument_list|)
block|{
name|mContents
operator|=
name|NULL
expr_stmt|;
name|mSize
operator|=
literal|0
expr_stmt|;
name|mUsage
operator|=
name|GL_DYNAMIC_DRAW
expr_stmt|;
name|mStaticVertexBuffer
operator|=
name|NULL
expr_stmt|;
name|mStaticIndexBuffer
operator|=
name|NULL
expr_stmt|;
name|mUnmodifiedDataUse
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|~Buffer
name|Buffer
operator|::
name|~
name|Buffer
parameter_list|()
block|{
operator|delete
index|[]
name|mContents
expr_stmt|;
operator|delete
name|mStaticVertexBuffer
expr_stmt|;
operator|delete
name|mStaticIndexBuffer
expr_stmt|;
block|}
DECL|function|bufferData
name|void
name|Buffer
operator|::
name|bufferData
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|,
name|GLenum
name|usage
parameter_list|)
block|{
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
operator|delete
index|[]
name|mContents
expr_stmt|;
name|mContents
operator|=
name|NULL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|!=
name|mSize
condition|)
block|{
operator|delete
index|[]
name|mContents
expr_stmt|;
name|mContents
operator|=
operator|new
name|GLubyte
index|[
name|size
index|]
expr_stmt|;
name|memset
argument_list|(
name|mContents
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|!=
name|NULL
operator|&&
name|size
operator|>
literal|0
condition|)
block|{
name|memcpy
argument_list|(
name|mContents
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|mSize
operator|=
name|size
expr_stmt|;
name|mUsage
operator|=
name|usage
expr_stmt|;
name|invalidateStaticData
argument_list|()
expr_stmt|;
if|if
condition|(
name|usage
operator|==
name|GL_STATIC_DRAW
condition|)
block|{
name|mStaticVertexBuffer
operator|=
operator|new
name|StaticVertexBuffer
argument_list|(
name|getDevice
argument_list|()
argument_list|)
expr_stmt|;
name|mStaticIndexBuffer
operator|=
operator|new
name|StaticIndexBuffer
argument_list|(
name|getDevice
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|bufferSubData
name|void
name|Buffer
operator|::
name|bufferSubData
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|,
name|GLintptr
name|offset
parameter_list|)
block|{
name|memcpy
argument_list|(
name|mContents
operator|+
name|offset
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|mStaticVertexBuffer
operator|&&
name|mStaticVertexBuffer
operator|->
name|size
argument_list|()
operator|!=
literal|0
operator|)
operator|||
operator|(
name|mStaticIndexBuffer
operator|&&
name|mStaticIndexBuffer
operator|->
name|size
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
name|invalidateStaticData
argument_list|()
expr_stmt|;
block|}
name|mUnmodifiedDataUse
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|getStaticVertexBuffer
name|StaticVertexBuffer
modifier|*
name|Buffer
operator|::
name|getStaticVertexBuffer
parameter_list|()
block|{
return|return
name|mStaticVertexBuffer
return|;
block|}
DECL|function|getStaticIndexBuffer
name|StaticIndexBuffer
modifier|*
name|Buffer
operator|::
name|getStaticIndexBuffer
parameter_list|()
block|{
return|return
name|mStaticIndexBuffer
return|;
block|}
DECL|function|invalidateStaticData
name|void
name|Buffer
operator|::
name|invalidateStaticData
parameter_list|()
block|{
operator|delete
name|mStaticVertexBuffer
expr_stmt|;
name|mStaticVertexBuffer
operator|=
name|NULL
expr_stmt|;
operator|delete
name|mStaticIndexBuffer
expr_stmt|;
name|mStaticIndexBuffer
operator|=
name|NULL
expr_stmt|;
name|mUnmodifiedDataUse
operator|=
literal|0
expr_stmt|;
block|}
comment|// Creates static buffers if sufficient used data has been left unmodified
DECL|function|promoteStaticUsage
name|void
name|Buffer
operator|::
name|promoteStaticUsage
parameter_list|(
name|int
name|dataSize
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mStaticVertexBuffer
operator|&&
operator|!
name|mStaticIndexBuffer
condition|)
block|{
name|mUnmodifiedDataUse
operator|+=
name|dataSize
expr_stmt|;
if|if
condition|(
name|mUnmodifiedDataUse
operator|>
literal|3
operator|*
name|mSize
condition|)
block|{
name|mStaticVertexBuffer
operator|=
operator|new
name|StaticVertexBuffer
argument_list|(
name|getDevice
argument_list|()
argument_list|)
expr_stmt|;
name|mStaticIndexBuffer
operator|=
operator|new
name|StaticIndexBuffer
argument_list|(
name|getDevice
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_namespace
end_unit
