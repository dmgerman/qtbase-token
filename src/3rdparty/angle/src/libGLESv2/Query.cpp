begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Query.cpp: Implements the gl::Query class
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Query.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/QueryImpl.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|Query
name|Query
operator|::
name|Query
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|RefCountObject
argument_list|(
name|id
argument_list|)
block|{
name|mQuery
operator|=
name|renderer
operator|->
name|createQuery
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
DECL|function|~Query
name|Query
operator|::
name|~
name|Query
parameter_list|()
block|{
operator|delete
name|mQuery
expr_stmt|;
block|}
DECL|function|begin
name|void
name|Query
operator|::
name|begin
parameter_list|()
block|{
name|mQuery
operator|->
name|begin
argument_list|()
expr_stmt|;
block|}
DECL|function|end
name|void
name|Query
operator|::
name|end
parameter_list|()
block|{
name|mQuery
operator|->
name|end
argument_list|()
expr_stmt|;
block|}
DECL|function|getResult
name|GLuint
name|Query
operator|::
name|getResult
parameter_list|()
block|{
return|return
name|mQuery
operator|->
name|getResult
argument_list|()
return|;
block|}
DECL|function|isResultAvailable
name|GLboolean
name|Query
operator|::
name|isResultAvailable
parameter_list|()
block|{
return|return
name|mQuery
operator|->
name|isResultAvailable
argument_list|()
return|;
block|}
DECL|function|getType
name|GLenum
name|Query
operator|::
name|getType
parameter_list|()
specifier|const
block|{
return|return
name|mQuery
operator|->
name|getType
argument_list|()
return|;
block|}
block|}
end_namespace
end_unit
