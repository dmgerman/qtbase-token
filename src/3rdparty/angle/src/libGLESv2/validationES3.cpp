begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// validationES3.cpp: Validation functions for OpenGL ES 3.0 entry point parameters
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/validationES3.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/validationES.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|ValidateES3TexImageParameters
name|bool
name|ValidateES3TexImageParameters
parameter_list|(
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|isCompressed
parameter_list|,
name|bool
name|isSubImage
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ValidTexture2DDestinationTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// Validate image size
if|if
condition|(
operator|!
name|ValidImageSize
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// Verify zero border
if|if
condition|(
name|border
operator|!=
literal|0
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|xoffset
operator|<
literal|0
operator|||
name|yoffset
operator|<
literal|0
operator|||
name|zoffset
operator|<
literal|0
operator|||
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|xoffset
operator|<
name|width
operator|||
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|yoffset
operator|<
name|height
operator|||
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|zoffset
operator|<
name|depth
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|NULL
decl_stmt|;
name|bool
name|textureCompressed
init|=
literal|false
decl_stmt|;
name|GLenum
name|textureInternalFormat
init|=
name|GL_NONE
decl_stmt|;
name|GLint
name|textureLevelWidth
init|=
literal|0
decl_stmt|;
name|GLint
name|textureLevelHeight
init|=
literal|0
decl_stmt|;
name|GLint
name|textureLevelDepth
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max2DTextureSize
operator|>>
name|level
operator|)
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max2DTextureSize
operator|>>
name|level
operator|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|gl
operator|::
name|Texture2D
modifier|*
name|texture2d
init|=
name|context
operator|->
name|getTexture2D
argument_list|()
decl_stmt|;
if|if
condition|(
name|texture2d
condition|)
block|{
name|textureCompressed
operator|=
name|texture2d
operator|->
name|isCompressed
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureInternalFormat
operator|=
name|texture2d
operator|->
name|getInternalFormat
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureLevelWidth
operator|=
name|texture2d
operator|->
name|getWidth
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureLevelHeight
operator|=
name|texture2d
operator|->
name|getHeight
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureLevelDepth
operator|=
literal|1
expr_stmt|;
name|texture
operator|=
name|texture2d
expr_stmt|;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
case|:
block|{
if|if
condition|(
operator|!
name|isSubImage
operator|&&
name|width
operator|!=
name|height
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|maxCubeMapTextureSize
operator|>>
name|level
operator|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|gl
operator|::
name|TextureCubeMap
modifier|*
name|textureCube
init|=
name|context
operator|->
name|getTextureCubeMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|textureCube
condition|)
block|{
name|textureCompressed
operator|=
name|textureCube
operator|->
name|isCompressed
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|textureInternalFormat
operator|=
name|textureCube
operator|->
name|getInternalFormat
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|textureLevelWidth
operator|=
name|textureCube
operator|->
name|getWidth
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|textureLevelHeight
operator|=
name|textureCube
operator|->
name|getHeight
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|textureLevelDepth
operator|=
literal|1
expr_stmt|;
name|texture
operator|=
name|textureCube
expr_stmt|;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_3D
case|:
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max3DTextureSize
operator|>>
name|level
operator|)
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max3DTextureSize
operator|>>
name|level
operator|)
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|depth
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max3DTextureSize
operator|>>
name|level
operator|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|gl
operator|::
name|Texture3D
modifier|*
name|texture3d
init|=
name|context
operator|->
name|getTexture3D
argument_list|()
decl_stmt|;
if|if
condition|(
name|texture3d
condition|)
block|{
name|textureCompressed
operator|=
name|texture3d
operator|->
name|isCompressed
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureInternalFormat
operator|=
name|texture3d
operator|->
name|getInternalFormat
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureLevelWidth
operator|=
name|texture3d
operator|->
name|getWidth
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureLevelHeight
operator|=
name|texture3d
operator|->
name|getHeight
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureLevelDepth
operator|=
name|texture3d
operator|->
name|getDepth
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|texture
operator|=
name|texture3d
expr_stmt|;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max2DTextureSize
operator|>>
name|level
operator|)
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max2DTextureSize
operator|>>
name|level
operator|)
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|depth
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|maxArrayTextureLayers
operator|>>
name|level
operator|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|gl
operator|::
name|Texture2DArray
modifier|*
name|texture2darray
init|=
name|context
operator|->
name|getTexture2DArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|texture2darray
condition|)
block|{
name|textureCompressed
operator|=
name|texture2darray
operator|->
name|isCompressed
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureInternalFormat
operator|=
name|texture2darray
operator|->
name|getInternalFormat
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureLevelWidth
operator|=
name|texture2darray
operator|->
name|getWidth
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureLevelHeight
operator|=
name|texture2darray
operator|->
name|getHeight
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureLevelDepth
operator|=
name|texture2darray
operator|->
name|getLayers
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|texture
operator|=
name|texture2darray
expr_stmt|;
block|}
block|}
break|break;
default|default:
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|texture
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|texture
operator|->
name|isImmutable
argument_list|()
operator|&&
operator|!
name|isSubImage
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// Validate texture formats
name|GLenum
name|actualInternalFormat
init|=
name|isSubImage
condition|?
name|textureInternalFormat
else|:
name|internalformat
decl_stmt|;
if|if
condition|(
name|isCompressed
condition|)
block|{
if|if
condition|(
operator|!
name|ValidCompressedImageSize
argument_list|(
name|context
argument_list|,
name|actualInternalFormat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|IsFormatCompressed
argument_list|(
name|actualInternalFormat
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|target
operator|==
name|GL_TEXTURE_3D
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// Note: dEQP 2013.4 expects an INVALID_VALUE error for TexImage3D with an invalid
comment|// internal format. (dEQP-GLES3.functional.negative_api.texture.teximage3d)
if|if
condition|(
operator|!
name|gl
operator|::
name|IsValidInternalFormat
argument_list|(
name|actualInternalFormat
argument_list|,
name|context
operator|->
name|getExtensions
argument_list|()
argument_list|,
name|context
operator|->
name|getClientVersion
argument_list|()
argument_list|)
operator|||
operator|!
name|gl
operator|::
name|IsValidFormat
argument_list|(
name|format
argument_list|,
name|context
operator|->
name|getExtensions
argument_list|()
argument_list|,
name|context
operator|->
name|getClientVersion
argument_list|()
argument_list|)
operator|||
operator|!
name|gl
operator|::
name|IsValidType
argument_list|(
name|type
argument_list|,
name|context
operator|->
name|getExtensions
argument_list|()
argument_list|,
name|context
operator|->
name|getClientVersion
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|IsValidFormatCombination
argument_list|(
name|actualInternalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|context
operator|->
name|getExtensions
argument_list|()
argument_list|,
name|context
operator|->
name|getClientVersion
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|target
operator|==
name|GL_TEXTURE_3D
operator|&&
operator|(
name|format
operator|==
name|GL_DEPTH_COMPONENT
operator|||
name|format
operator|==
name|GL_DEPTH_STENCIL
operator|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
comment|// Validate sub image parameters
if|if
condition|(
name|isSubImage
condition|)
block|{
if|if
condition|(
name|isCompressed
operator|!=
name|textureCompressed
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|isCompressed
condition|)
block|{
if|if
condition|(
operator|(
name|width
operator|%
literal|4
operator|!=
literal|0
operator|&&
name|width
operator|!=
name|textureLevelWidth
operator|)
operator|||
operator|(
name|height
operator|%
literal|4
operator|!=
literal|0
operator|&&
name|height
operator|!=
name|textureLevelHeight
operator|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
operator|||
name|depth
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|xoffset
operator|<
literal|0
operator|||
name|yoffset
operator|<
literal|0
operator|||
name|zoffset
operator|<
literal|0
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|xoffset
operator|<
name|width
operator|||
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|yoffset
operator|<
name|height
operator|||
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|zoffset
operator|<
name|depth
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|xoffset
operator|+
name|width
operator|>
name|textureLevelWidth
operator|||
name|yoffset
operator|+
name|height
operator|>
name|textureLevelHeight
operator|||
name|zoffset
operator|+
name|depth
operator|>
name|textureLevelDepth
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
comment|// Check for pixel unpack buffer related API errors
name|gl
operator|::
name|Buffer
modifier|*
name|pixelUnpackBuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|GL_PIXEL_UNPACK_BUFFER
argument_list|)
decl_stmt|;
if|if
condition|(
name|pixelUnpackBuffer
operator|!=
name|NULL
condition|)
block|{
comment|// ...the data would be unpacked from the buffer object such that the memory reads required
comment|// would exceed the data store size.
name|size_t
name|widthSize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|width
argument_list|)
decl_stmt|;
name|size_t
name|heightSize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|height
argument_list|)
decl_stmt|;
name|size_t
name|depthSize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|depth
argument_list|)
decl_stmt|;
name|GLenum
name|sizedFormat
init|=
name|gl
operator|::
name|IsSizedInternalFormat
argument_list|(
name|actualInternalFormat
argument_list|)
condition|?
name|actualInternalFormat
else|:
name|gl
operator|::
name|GetSizedInternalFormat
argument_list|(
name|actualInternalFormat
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|size_t
name|pixelBytes
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|gl
operator|::
name|GetPixelBytes
argument_list|(
name|sizedFormat
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rx
operator|::
name|IsUnsignedMultiplicationSafe
argument_list|(
name|widthSize
argument_list|,
name|heightSize
argument_list|)
operator|||
operator|!
name|rx
operator|::
name|IsUnsignedMultiplicationSafe
argument_list|(
name|widthSize
operator|*
name|heightSize
argument_list|,
name|depthSize
argument_list|)
operator|||
operator|!
name|rx
operator|::
name|IsUnsignedMultiplicationSafe
argument_list|(
name|widthSize
operator|*
name|heightSize
operator|*
name|depthSize
argument_list|,
name|pixelBytes
argument_list|)
condition|)
block|{
comment|// Overflow past the end of the buffer
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|size_t
name|copyBytes
init|=
name|widthSize
operator|*
name|heightSize
operator|*
name|depthSize
operator|*
name|pixelBytes
decl_stmt|;
name|size_t
name|offset
init|=
cast|reinterpret_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|pixels
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rx
operator|::
name|IsUnsignedAdditionSafe
argument_list|(
name|offset
argument_list|,
name|copyBytes
argument_list|)
operator|||
operator|(
operator|(
name|offset
operator|+
name|copyBytes
operator|)
operator|>
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|pixelUnpackBuffer
operator|->
name|getSize
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// Overflow past the end of the buffer
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// ...data is not evenly divisible into the number of bytes needed to store in memory a datum
comment|// indicated by type.
name|size_t
name|dataBytesPerPixel
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|gl
operator|::
name|GetTypeBytes
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|offset
operator|%
name|dataBytesPerPixel
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// ...the buffer object's data store is currently mapped.
if|if
condition|(
name|pixelUnpackBuffer
operator|->
name|isMapped
argument_list|()
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateES3CopyTexImageParameters
name|bool
name|ValidateES3CopyTexImageParameters
parameter_list|(
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|isSubImage
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|)
block|{
name|GLenum
name|textureInternalFormat
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateCopyTexImageParametersBase
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|isSubImage
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
operator|&
name|textureInternalFormat
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|framebuffer
operator|->
name|completeness
argument_list|()
operator|!=
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_FRAMEBUFFER_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
operator|->
name|id
argument_list|()
operator|!=
literal|0
operator|&&
name|framebuffer
operator|->
name|getSamples
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|source
init|=
name|framebuffer
operator|->
name|getReadColorbuffer
argument_list|()
decl_stmt|;
name|GLenum
name|colorbufferInternalFormat
init|=
name|source
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSubImage
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|IsValidCopyTexImageCombination
argument_list|(
name|textureInternalFormat
argument_list|,
name|colorbufferInternalFormat
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
operator|->
name|id
argument_list|()
argument_list|,
name|context
operator|->
name|getClientVersion
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|IsValidCopyTexImageCombination
argument_list|(
name|internalformat
argument_list|,
name|colorbufferInternalFormat
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
operator|->
name|id
argument_list|()
argument_list|,
name|context
operator|->
name|getClientVersion
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
comment|// If width or height is zero, it is a no-op.  Return false without setting an error.
return|return
operator|(
name|width
operator|>
literal|0
operator|&&
name|height
operator|>
literal|0
operator|)
return|;
block|}
DECL|function|ValidateES3TexStorageParameters
name|bool
name|ValidateES3TexStorageParameters
parameter_list|(
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
block|{
if|if
condition|(
name|width
operator|<
literal|1
operator|||
name|height
operator|<
literal|1
operator|||
name|depth
operator|<
literal|1
operator|||
name|levels
operator|<
literal|1
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|levels
operator|>
name|gl
operator|::
name|log2
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|,
name|depth
argument_list|)
argument_list|)
operator|+
literal|1
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|NULL
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
block|{
name|texture
operator|=
name|context
operator|->
name|getTexture2D
argument_list|()
expr_stmt|;
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
name|caps
operator|.
name|max2DTextureSize
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
name|caps
operator|.
name|max2DTextureSize
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP
case|:
block|{
name|texture
operator|=
name|context
operator|->
name|getTextureCubeMap
argument_list|()
expr_stmt|;
if|if
condition|(
name|width
operator|!=
name|height
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
name|caps
operator|.
name|maxCubeMapTextureSize
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_3D
case|:
block|{
name|texture
operator|=
name|context
operator|->
name|getTexture3D
argument_list|()
expr_stmt|;
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
name|caps
operator|.
name|max3DTextureSize
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
name|caps
operator|.
name|max3DTextureSize
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|depth
argument_list|)
operator|>
name|caps
operator|.
name|max3DTextureSize
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
block|{
name|texture
operator|=
name|context
operator|->
name|getTexture2DArray
argument_list|()
expr_stmt|;
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
name|caps
operator|.
name|max2DTextureSize
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
name|caps
operator|.
name|max2DTextureSize
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|depth
argument_list|)
operator|>
name|caps
operator|.
name|maxArrayTextureLayers
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
break|break;
default|default:
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|texture
operator|||
name|texture
operator|->
name|id
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|texture
operator|->
name|isImmutable
argument_list|()
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|IsValidInternalFormat
argument_list|(
name|internalformat
argument_list|,
name|context
operator|->
name|getExtensions
argument_list|()
argument_list|,
name|context
operator|->
name|getClientVersion
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|IsSizedInternalFormat
argument_list|(
name|internalformat
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateFramebufferTextureLayer
name|bool
name|ValidateFramebufferTextureLayer
parameter_list|(
specifier|const
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLuint
name|texture
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|layer
operator|<
literal|0
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|ValidateFramebufferTextureBase
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|texture
argument_list|,
name|level
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
if|if
condition|(
name|texture
operator|!=
literal|0
condition|)
block|{
name|gl
operator|::
name|Texture
modifier|*
name|tex
init|=
name|context
operator|->
name|getTexture
argument_list|(
name|texture
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|tex
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|tex
operator|->
name|getTarget
argument_list|()
condition|)
block|{
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
block|{
if|if
condition|(
name|level
operator|>
name|gl
operator|::
name|log2
argument_list|(
name|caps
operator|.
name|max2DTextureSize
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|layer
argument_list|)
operator|>=
name|caps
operator|.
name|maxArrayTextureLayers
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|gl
operator|::
name|Texture2DArray
modifier|*
name|texArray
init|=
cast|static_cast
argument_list|<
name|gl
operator|::
name|Texture2DArray
operator|*
argument_list|>
argument_list|(
name|tex
argument_list|)
decl_stmt|;
if|if
condition|(
name|texArray
operator|->
name|isCompressed
argument_list|(
name|level
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_3D
case|:
block|{
if|if
condition|(
name|level
operator|>
name|gl
operator|::
name|log2
argument_list|(
name|caps
operator|.
name|max3DTextureSize
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|layer
argument_list|)
operator|>=
name|caps
operator|.
name|max3DTextureSize
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|gl
operator|::
name|Texture3D
modifier|*
name|tex3d
init|=
cast|static_cast
argument_list|<
name|gl
operator|::
name|Texture3D
operator|*
argument_list|>
argument_list|(
name|tex
argument_list|)
decl_stmt|;
if|if
condition|(
name|tex3d
operator|->
name|isCompressed
argument_list|(
name|level
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
break|break;
default|default:
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidES3ReadFormatType
name|bool
name|ValidES3ReadFormatType
parameter_list|(
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|GL_RGBA
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
break|break;
case|case
name|GL_UNSIGNED_INT_2_10_10_10_REV
case|:
if|if
condition|(
name|internalFormat
operator|!=
name|GL_RGB10_A2
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_FLOAT
case|:
if|if
condition|(
name|gl
operator|::
name|GetComponentType
argument_list|(
name|internalFormat
argument_list|)
operator|!=
name|GL_FLOAT
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
default|default:
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RGBA_INTEGER
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_INT
case|:
if|if
condition|(
name|gl
operator|::
name|GetComponentType
argument_list|(
name|internalFormat
argument_list|)
operator|!=
name|GL_INT
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_UNSIGNED_INT
case|:
if|if
condition|(
name|gl
operator|::
name|GetComponentType
argument_list|(
name|internalFormat
argument_list|)
operator|!=
name|GL_UNSIGNED_INT
condition|)
block|{
return|return
literal|false
return|;
block|}
break|break;
default|default:
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_BGRA_EXT
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
case|:
case|case
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
case|:
break|break;
default|default:
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RG_EXT
case|:
case|case
name|GL_RED_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureRG
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
break|break;
default|default:
return|return
literal|false
return|;
block|}
break|break;
default|default:
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateInvalidateFramebufferParameters
name|bool
name|ValidateInvalidateFramebufferParameters
parameter_list|(
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|numAttachments
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|)
block|{
name|bool
name|defaultFramebuffer
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_DRAW_FRAMEBUFFER
case|:
case|case
name|GL_FRAMEBUFFER
case|:
name|defaultFramebuffer
operator|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
operator|->
name|id
argument_list|()
operator|==
literal|0
expr_stmt|;
break|break;
case|case
name|GL_READ_FRAMEBUFFER
case|:
name|defaultFramebuffer
operator|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
operator|->
name|id
argument_list|()
operator|==
literal|0
expr_stmt|;
break|break;
default|default:
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|false
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numAttachments
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|attachments
index|[
name|i
index|]
operator|>=
name|GL_COLOR_ATTACHMENT0
operator|&&
name|attachments
index|[
name|i
index|]
operator|<=
name|GL_COLOR_ATTACHMENT15
condition|)
block|{
if|if
condition|(
name|defaultFramebuffer
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|attachments
index|[
name|i
index|]
operator|>=
name|GL_COLOR_ATTACHMENT0
operator|+
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxColorAttachments
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|attachments
index|[
name|i
index|]
condition|)
block|{
case|case
name|GL_DEPTH_ATTACHMENT
case|:
case|case
name|GL_STENCIL_ATTACHMENT
case|:
case|case
name|GL_DEPTH_STENCIL_ATTACHMENT
case|:
if|if
condition|(
name|defaultFramebuffer
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|false
argument_list|)
return|;
block|}
break|break;
case|case
name|GL_COLOR
case|:
case|case
name|GL_DEPTH
case|:
case|case
name|GL_STENCIL
case|:
if|if
condition|(
operator|!
name|defaultFramebuffer
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|false
argument_list|)
return|;
block|}
break|break;
default|default:
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateClearBuffer
name|bool
name|ValidateClearBuffer
parameter_list|(
specifier|const
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|const
name|gl
operator|::
name|Framebuffer
modifier|*
name|fbo
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fbo
operator|||
name|fbo
operator|->
name|completeness
argument_list|()
operator|!=
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_INVALID_FRAMEBUFFER_OPERATION
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_namespace
end_unit
