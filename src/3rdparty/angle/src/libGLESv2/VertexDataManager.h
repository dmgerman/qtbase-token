begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// VertexDataManager.h: Defines the VertexDataManager, a class that
end_comment
begin_comment
comment|// runs the Buffer translation process.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_VERTEXDATAMANAGER_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_VERTEXDATAMANAGER_H_
define|#
directive|define
name|LIBGLESV2_VERTEXDATAMANAGER_H_
end_define
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|<cstddef>
end_include
begin_define
DECL|macro|GL_APICALL
define|#
directive|define
name|GL_APICALL
end_define
begin_include
include|#
directive|include
file|<GLES2/gl2.h>
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
struct|struct
name|TranslatedAttribute
block|{
name|bool
name|active
decl_stmt|;
name|D3DDECLTYPE
name|type
decl_stmt|;
name|UINT
name|offset
decl_stmt|;
name|UINT
name|stride
decl_stmt|;
comment|// 0 means not to advance the read pointer at all
name|IDirect3DVertexBuffer9
modifier|*
name|vertexBuffer
decl_stmt|;
name|unsigned
name|int
name|serial
decl_stmt|;
name|unsigned
name|int
name|divisor
decl_stmt|;
block|}
struct|;
name|class
name|VertexBuffer
block|{
name|public
label|:
name|VertexBuffer
argument_list|(
argument|IDirect3DDevice9 *device
argument_list|,
argument|std::size_t size
argument_list|,
argument|DWORD usageFlags
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|VertexBuffer
argument_list|()
expr_stmt|;
name|void
name|unmap
parameter_list|()
function_decl|;
name|IDirect3DVertexBuffer9
operator|*
name|getBuffer
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
expr_stmt|;
name|protected
label|:
name|IDirect3DDevice9
modifier|*
specifier|const
name|mDevice
decl_stmt|;
name|IDirect3DVertexBuffer9
modifier|*
name|mVertexBuffer
decl_stmt|;
name|unsigned
name|int
name|mSerial
decl_stmt|;
specifier|static
name|unsigned
name|int
name|issueSerial
parameter_list|()
function_decl|;
specifier|static
name|unsigned
name|int
name|mCurrentSerial
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|VertexBuffer
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|class
name|ArrayVertexBuffer
range|:
name|public
name|VertexBuffer
block|{
name|public
operator|:
name|ArrayVertexBuffer
argument_list|(
argument|IDirect3DDevice9 *device
argument_list|,
argument|std::size_t size
argument_list|,
argument|DWORD usageFlags
argument_list|)
block|;
operator|~
name|ArrayVertexBuffer
argument_list|()
block|;
name|std
operator|::
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|mBufferSize
return|;
block|}
name|virtual
name|void
operator|*
name|map
argument_list|(
argument|const VertexAttribute&attribute
argument_list|,
argument|std::size_t requiredSpace
argument_list|,
argument|std::size_t *streamOffset
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|reserveRequiredSpace
argument_list|()
operator|=
literal|0
block|;
name|void
name|addRequiredSpace
argument_list|(
argument|UINT requiredSpace
argument_list|)
block|;
name|protected
operator|:
name|std
operator|::
name|size_t
name|mBufferSize
block|;
name|std
operator|::
name|size_t
name|mWritePosition
block|;
name|std
operator|::
name|size_t
name|mRequiredSpace
block|; }
decl_stmt|;
name|class
name|StreamingVertexBuffer
range|:
name|public
name|ArrayVertexBuffer
block|{
name|public
operator|:
name|StreamingVertexBuffer
argument_list|(
argument|IDirect3DDevice9 *device
argument_list|,
argument|std::size_t initialSize
argument_list|)
block|;
operator|~
name|StreamingVertexBuffer
argument_list|()
block|;
name|void
operator|*
name|map
argument_list|(
argument|const VertexAttribute&attribute
argument_list|,
argument|std::size_t requiredSpace
argument_list|,
argument|std::size_t *streamOffset
argument_list|)
block|;
name|void
name|reserveRequiredSpace
argument_list|()
block|; }
decl_stmt|;
name|class
name|StaticVertexBuffer
range|:
name|public
name|ArrayVertexBuffer
block|{
name|public
operator|:
name|explicit
name|StaticVertexBuffer
argument_list|(
name|IDirect3DDevice9
operator|*
name|device
argument_list|)
block|;
operator|~
name|StaticVertexBuffer
argument_list|()
block|;
name|void
operator|*
name|map
argument_list|(
argument|const VertexAttribute&attribute
argument_list|,
argument|std::size_t requiredSpace
argument_list|,
argument|std::size_t *streamOffset
argument_list|)
block|;
name|void
name|reserveRequiredSpace
argument_list|()
block|;
name|std
operator|::
name|size_t
name|lookupAttribute
argument_list|(
specifier|const
name|VertexAttribute
operator|&
name|attribute
argument_list|)
block|;
comment|// Returns the offset into the vertex buffer, or -1 if not found
name|private
operator|:
expr|struct
name|VertexElement
block|{
name|GLenum
name|type
block|;
name|GLint
name|size
block|;
name|GLsizei
name|stride
block|;
name|bool
name|normalized
block|;
name|int
name|attributeOffset
block|;
name|std
operator|::
name|size_t
name|streamOffset
block|;     }
block|;
name|std
operator|::
name|vector
operator|<
name|VertexElement
operator|>
name|mCache
block|; }
decl_stmt|;
name|class
name|VertexDataManager
block|{
name|public
label|:
name|VertexDataManager
argument_list|(
name|Context
operator|*
name|context
argument_list|,
name|IDirect3DDevice9
operator|*
name|backend
argument_list|)
expr_stmt|;
name|virtual
operator|~
name|VertexDataManager
argument_list|()
expr_stmt|;
name|void
name|dirtyCurrentValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|mDirtyCurrentValue
index|[
name|index
index|]
operator|=
name|true
expr_stmt|;
block|}
name|GLenum
name|prepareVertexData
parameter_list|(
name|GLint
name|start
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|TranslatedAttribute
modifier|*
name|outAttribs
parameter_list|,
name|GLsizei
name|instances
parameter_list|)
function_decl|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|VertexDataManager
argument_list|)
expr_stmt|;
name|std
operator|::
name|size_t
name|spaceRequired
argument_list|(
argument|const VertexAttribute&attrib
argument_list|,
argument|std::size_t count
argument_list|,
argument|GLsizei instances
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|size_t
name|writeAttributeData
argument_list|(
argument|ArrayVertexBuffer *vertexBuffer
argument_list|,
argument|GLint start
argument_list|,
argument|GLsizei count
argument_list|,
argument|const VertexAttribute&attribute
argument_list|,
argument|GLsizei instances
argument_list|)
expr_stmt|;
name|Context
modifier|*
specifier|const
name|mContext
decl_stmt|;
name|IDirect3DDevice9
modifier|*
specifier|const
name|mDevice
decl_stmt|;
name|StreamingVertexBuffer
modifier|*
name|mStreamingBuffer
decl_stmt|;
name|bool
name|mDirtyCurrentValue
index|[
name|MAX_VERTEX_ATTRIBS
index|]
decl_stmt|;
name|StreamingVertexBuffer
modifier|*
name|mCurrentValueBuffer
index|[
name|MAX_VERTEX_ATTRIBS
index|]
decl_stmt|;
name|std
operator|::
name|size_t
name|mCurrentValueOffsets
index|[
name|MAX_VERTEX_ATTRIBS
index|]
expr_stmt|;
comment|// Attribute format conversion
struct|struct
name|FormatConverter
block|{
name|bool
name|identity
decl_stmt|;
name|std
operator|::
name|size_t
name|outputElementSize
expr_stmt|;
name|void
argument_list|(
argument|*convertArray
argument_list|)
operator|(
specifier|const
name|void
operator|*
name|in
operator|,
name|std
operator|::
name|size_t
name|stride
operator|,
name|std
operator|::
name|size_t
name|n
operator|,
name|void
operator|*
name|out
operator|)
expr_stmt|;
name|D3DDECLTYPE
name|d3dDeclType
decl_stmt|;
block|}
struct|;
enum|enum
block|{
name|NUM_GL_VERTEX_ATTRIB_TYPES
init|=
literal|6
block|}
enum|;
name|FormatConverter
name|mAttributeTypes
index|[
name|NUM_GL_VERTEX_ATTRIB_TYPES
index|]
index|[
literal|2
index|]
index|[
literal|4
index|]
decl_stmt|;
comment|// [GL types as enumerated by typeIndex()][normalized][size - 1]
struct|struct
name|TranslationDescription
block|{
name|DWORD
name|capsFlag
decl_stmt|;
name|FormatConverter
name|preferredConversion
decl_stmt|;
name|FormatConverter
name|fallbackConversion
decl_stmt|;
block|}
struct|;
comment|// This table is used to generate mAttributeTypes.
specifier|static
specifier|const
name|TranslationDescription
name|mPossibleTranslations
index|[
name|NUM_GL_VERTEX_ATTRIB_TYPES
index|]
index|[
literal|2
index|]
index|[
literal|4
index|]
decl_stmt|;
comment|// [GL types as enumerated by typeIndex()][normalized][size - 1]
name|void
name|checkVertexCaps
parameter_list|(
name|DWORD
name|declTypes
parameter_list|)
function_decl|;
name|unsigned
name|int
name|typeIndex
argument_list|(
name|GLenum
name|type
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|FormatConverter
modifier|&
name|formatConverter
argument_list|(
specifier|const
name|VertexAttribute
operator|&
name|attribute
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_VERTEXDATAMANAGER_H_
end_comment
end_unit
