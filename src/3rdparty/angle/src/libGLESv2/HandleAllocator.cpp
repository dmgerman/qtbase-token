begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2011 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// HandleAllocator.cpp: Implements the gl::HandleAllocator class, which is used
end_comment
begin_comment
comment|// to allocate GL handles.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/HandleAllocator.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|HandleAllocator
name|HandleAllocator
operator|::
name|HandleAllocator
parameter_list|()
member_init_list|:
name|mBaseValue
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|mNextValue
argument_list|(
literal|1
argument_list|)
block|{ }
DECL|function|~HandleAllocator
name|HandleAllocator
operator|::
name|~
name|HandleAllocator
parameter_list|()
block|{ }
DECL|function|setBaseHandle
name|void
name|HandleAllocator
operator|::
name|setBaseHandle
parameter_list|(
name|GLuint
name|value
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|mBaseValue
operator|==
name|mNextValue
argument_list|)
expr_stmt|;
name|mBaseValue
operator|=
name|value
expr_stmt|;
name|mNextValue
operator|=
name|value
expr_stmt|;
block|}
DECL|function|allocate
name|GLuint
name|HandleAllocator
operator|::
name|allocate
parameter_list|()
block|{
if|if
condition|(
name|mFreeValues
operator|.
name|size
argument_list|()
condition|)
block|{
name|GLuint
name|handle
init|=
name|mFreeValues
operator|.
name|back
argument_list|()
decl_stmt|;
name|mFreeValues
operator|.
name|pop_back
argument_list|()
expr_stmt|;
return|return
name|handle
return|;
block|}
return|return
name|mNextValue
operator|++
return|;
block|}
DECL|function|release
name|void
name|HandleAllocator
operator|::
name|release
parameter_list|(
name|GLuint
name|handle
parameter_list|)
block|{
if|if
condition|(
name|handle
operator|==
name|mNextValue
operator|-
literal|1
condition|)
block|{
comment|// Don't drop below base value
if|if
condition|(
name|mNextValue
operator|>
name|mBaseValue
condition|)
block|{
name|mNextValue
operator|--
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Only free handles that we own - don't drop below the base value
if|if
condition|(
name|handle
operator|>=
name|mBaseValue
condition|)
block|{
name|mFreeValues
operator|.
name|push_back
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_namespace
end_unit
