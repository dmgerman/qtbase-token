begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright(c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// global_state.cpp : Implements functions for querying the thread-local GL and EGL state.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/global_state.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Context.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"common/platform.h"
end_include
begin_include
include|#
directive|include
file|"common/tls.h"
end_include
begin_namespace
namespace|namespace
block|{
DECL|member|currentTLS
specifier|static
name|TLSIndex
name|currentTLS
init|=
name|TLS_INVALID_INDEX
decl_stmt|;
DECL|struct|Current
struct|struct
name|Current
block|{
DECL|member|error
name|EGLint
name|error
decl_stmt|;
DECL|member|API
name|EGLenum
name|API
decl_stmt|;
DECL|member|display
name|egl
operator|::
name|Display
modifier|*
name|display
decl_stmt|;
DECL|member|drawSurface
name|egl
operator|::
name|Surface
modifier|*
name|drawSurface
decl_stmt|;
DECL|member|readSurface
name|egl
operator|::
name|Surface
modifier|*
name|readSurface
decl_stmt|;
DECL|member|context
name|gl
operator|::
name|Context
modifier|*
name|context
decl_stmt|;
block|}
struct|;
DECL|function|AllocateCurrent
name|Current
modifier|*
name|AllocateCurrent
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|currentTLS
operator|!=
name|TLS_INVALID_INDEX
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentTLS
operator|==
name|TLS_INVALID_INDEX
condition|)
block|{
return|return
name|NULL
return|;
block|}
name|Current
modifier|*
name|current
init|=
operator|new
name|Current
argument_list|()
decl_stmt|;
name|current
operator|->
name|error
operator|=
name|EGL_SUCCESS
expr_stmt|;
name|current
operator|->
name|API
operator|=
name|EGL_OPENGL_ES_API
expr_stmt|;
name|current
operator|->
name|display
operator|=
cast|reinterpret_cast
argument_list|<
name|egl
operator|::
name|Display
operator|*
argument_list|>
argument_list|(
name|EGL_NO_DISPLAY
argument_list|)
expr_stmt|;
name|current
operator|->
name|drawSurface
operator|=
cast|reinterpret_cast
argument_list|<
name|egl
operator|::
name|Surface
operator|*
argument_list|>
argument_list|(
name|EGL_NO_SURFACE
argument_list|)
expr_stmt|;
name|current
operator|->
name|readSurface
operator|=
cast|reinterpret_cast
argument_list|<
name|egl
operator|::
name|Surface
operator|*
argument_list|>
argument_list|(
name|EGL_NO_SURFACE
argument_list|)
expr_stmt|;
name|current
operator|->
name|context
operator|=
cast|reinterpret_cast
argument_list|<
name|gl
operator|::
name|Context
operator|*
argument_list|>
argument_list|(
name|EGL_NO_CONTEXT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|SetTLSValue
argument_list|(
name|currentTLS
argument_list|,
name|current
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Could not set thread local storage."
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|current
return|;
block|}
DECL|function|DeallocateCurrent
name|void
name|DeallocateCurrent
parameter_list|()
block|{
name|Current
modifier|*
name|current
init|=
cast|reinterpret_cast
argument_list|<
name|Current
operator|*
argument_list|>
argument_list|(
name|GetTLSValue
argument_list|(
name|currentTLS
argument_list|)
argument_list|)
decl_stmt|;
name|SafeDelete
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|SetTLSValue
argument_list|(
name|currentTLS
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
DECL|function|GetCurrentData
name|Current
modifier|*
name|GetCurrentData
parameter_list|()
block|{
comment|// Create a TLS index if one has not been created for this DLL
if|if
condition|(
name|currentTLS
operator|==
name|TLS_INVALID_INDEX
condition|)
block|{
name|currentTLS
operator|=
name|CreateTLSIndex
argument_list|()
expr_stmt|;
block|}
name|Current
modifier|*
name|current
init|=
cast|reinterpret_cast
argument_list|<
name|Current
operator|*
argument_list|>
argument_list|(
name|GetTLSValue
argument_list|(
name|currentTLS
argument_list|)
argument_list|)
decl_stmt|;
comment|// ANGLE issue 488: when the dll is loaded after thread initialization,
comment|// thread local storage (current) might not exist yet.
return|return
operator|(
name|current
condition|?
name|current
else|:
name|AllocateCurrent
argument_list|()
operator|)
return|;
block|}
ifdef|#
directive|ifdef
name|ANGLE_PLATFORM_WINDOWS
DECL|function|DllMain
extern|extern
literal|"C"
name|BOOL
name|WINAPI
name|DllMain
parameter_list|(
name|HINSTANCE
parameter_list|,
name|DWORD
name|reason
parameter_list|,
name|LPVOID
parameter_list|)
block|{
switch|switch
condition|(
name|reason
condition|)
block|{
case|case
name|DLL_PROCESS_ATTACH
case|:
name|currentTLS
operator|=
name|CreateTLSIndex
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentTLS
operator|==
name|TLS_INVALID_INDEX
condition|)
block|{
return|return
name|FALSE
return|;
block|}
name|AllocateCurrent
argument_list|()
expr_stmt|;
break|break;
case|case
name|DLL_THREAD_ATTACH
case|:
name|AllocateCurrent
argument_list|()
expr_stmt|;
break|break;
case|case
name|DLL_THREAD_DETACH
case|:
name|DeallocateCurrent
argument_list|()
expr_stmt|;
break|break;
case|case
name|DLL_PROCESS_DETACH
case|:
name|DeallocateCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentTLS
operator|!=
name|TLS_INVALID_INDEX
condition|)
block|{
name|DestroyTLSIndex
argument_list|(
name|currentTLS
argument_list|)
expr_stmt|;
name|currentTLS
operator|=
name|TLS_INVALID_INDEX
expr_stmt|;
block|}
break|break;
block|}
return|return
name|TRUE
return|;
block|}
endif|#
directive|endif
block|}
end_namespace
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|GetGlobalContext
name|Context
modifier|*
name|GetGlobalContext
parameter_list|()
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
return|return
name|current
operator|->
name|context
return|;
block|}
DECL|function|GetValidGlobalContext
name|Context
modifier|*
name|GetValidGlobalContext
parameter_list|()
block|{
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|GetGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|isContextLost
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Context has been lost."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|nullptr
return|;
block|}
else|else
block|{
return|return
name|context
return|;
block|}
block|}
return|return
literal|nullptr
return|;
block|}
block|}
end_namespace
begin_namespace
DECL|namespace|egl
namespace|namespace
name|egl
block|{
DECL|function|SetGlobalError
name|void
name|SetGlobalError
parameter_list|(
specifier|const
name|Error
modifier|&
name|error
parameter_list|)
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
name|current
operator|->
name|error
operator|=
name|error
operator|.
name|getCode
argument_list|()
expr_stmt|;
block|}
DECL|function|GetGlobalError
name|EGLint
name|GetGlobalError
parameter_list|()
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
return|return
name|current
operator|->
name|error
return|;
block|}
DECL|function|GetGlobalAPI
name|EGLenum
name|GetGlobalAPI
parameter_list|()
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
return|return
name|current
operator|->
name|API
return|;
block|}
DECL|function|SetGlobalAPI
name|void
name|SetGlobalAPI
parameter_list|(
name|EGLenum
name|API
parameter_list|)
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
name|current
operator|->
name|API
operator|=
name|API
expr_stmt|;
block|}
DECL|function|SetGlobalDisplay
name|void
name|SetGlobalDisplay
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|)
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
name|current
operator|->
name|display
operator|=
name|dpy
expr_stmt|;
block|}
DECL|function|GetGlobalDisplay
name|Display
modifier|*
name|GetGlobalDisplay
parameter_list|()
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
return|return
name|current
operator|->
name|display
return|;
block|}
DECL|function|SetGlobalDrawSurface
name|void
name|SetGlobalDrawSurface
parameter_list|(
name|Surface
modifier|*
name|surface
parameter_list|)
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
name|current
operator|->
name|drawSurface
operator|=
name|surface
expr_stmt|;
block|}
DECL|function|GetGlobalDrawSurface
name|Surface
modifier|*
name|GetGlobalDrawSurface
parameter_list|()
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
return|return
name|current
operator|->
name|drawSurface
return|;
block|}
DECL|function|SetGlobalReadSurface
name|void
name|SetGlobalReadSurface
parameter_list|(
name|Surface
modifier|*
name|surface
parameter_list|)
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
name|current
operator|->
name|readSurface
operator|=
name|surface
expr_stmt|;
block|}
DECL|function|GetGlobalReadSurface
name|Surface
modifier|*
name|GetGlobalReadSurface
parameter_list|()
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
return|return
name|current
operator|->
name|readSurface
return|;
block|}
DECL|function|SetGlobalContext
name|void
name|SetGlobalContext
parameter_list|(
name|gl
operator|::
name|Context
modifier|*
name|context
parameter_list|)
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
name|current
operator|->
name|context
operator|=
name|context
expr_stmt|;
block|}
DECL|function|GetGlobalContext
name|gl
operator|::
name|Context
modifier|*
name|GetGlobalContext
parameter_list|()
block|{
name|Current
modifier|*
name|current
init|=
name|GetCurrentData
argument_list|()
decl_stmt|;
return|return
name|current
operator|->
name|context
return|;
block|}
block|}
end_namespace
end_unit
