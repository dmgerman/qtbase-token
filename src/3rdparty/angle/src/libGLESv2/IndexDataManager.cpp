begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// IndexDataManager.cpp: Defines the IndexDataManager, a class that
end_comment
begin_comment
comment|// runs the Buffer translation process for index buffers.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/IndexDataManager.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Buffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|member|mCurrentSerial
name|unsigned
name|int
name|IndexBuffer
operator|::
name|mCurrentSerial
init|=
literal|1
decl_stmt|;
DECL|function|IndexDataManager
name|IndexDataManager
operator|::
name|IndexDataManager
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|IDirect3DDevice9
modifier|*
name|device
parameter_list|)
member_init_list|:
name|mDevice
argument_list|(
name|device
argument_list|)
block|{
name|mStreamingBufferShort
operator|=
operator|new
name|StreamingIndexBuffer
argument_list|(
name|mDevice
argument_list|,
name|INITIAL_INDEX_BUFFER_SIZE
argument_list|,
name|D3DFMT_INDEX16
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|->
name|supports32bitIndices
argument_list|()
condition|)
block|{
name|mStreamingBufferInt
operator|=
operator|new
name|StreamingIndexBuffer
argument_list|(
name|mDevice
argument_list|,
name|INITIAL_INDEX_BUFFER_SIZE
argument_list|,
name|D3DFMT_INDEX32
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mStreamingBufferInt
condition|)
block|{
comment|// Don't leave it in a half-initialized state
operator|delete
name|mStreamingBufferShort
expr_stmt|;
name|mStreamingBufferShort
operator|=
name|NULL
expr_stmt|;
block|}
block|}
else|else
block|{
name|mStreamingBufferInt
operator|=
name|NULL
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mStreamingBufferShort
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to allocate the streaming index buffer(s)."
argument_list|)
expr_stmt|;
block|}
name|mCountingBuffer
operator|=
name|NULL
expr_stmt|;
block|}
DECL|function|~IndexDataManager
name|IndexDataManager
operator|::
name|~
name|IndexDataManager
parameter_list|()
block|{
operator|delete
name|mStreamingBufferShort
expr_stmt|;
operator|delete
name|mStreamingBufferInt
expr_stmt|;
operator|delete
name|mCountingBuffer
expr_stmt|;
block|}
DECL|function|convertIndices
name|void
name|convertIndices
parameter_list|(
name|GLenum
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_BYTE
condition|)
block|{
specifier|const
name|GLubyte
modifier|*
name|in
init|=
cast|static_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|GLushort
modifier|*
name|out
init|=
cast|static_cast
argument_list|<
name|GLushort
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
decl_stmt|;
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
name|i
index|]
operator|=
name|in
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_INT
condition|)
block|{
name|memcpy
argument_list|(
name|output
argument_list|,
name|input
argument_list|,
name|count
operator|*
sizeof|sizeof
argument_list|(
name|GLuint
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_SHORT
condition|)
block|{
name|memcpy
argument_list|(
name|output
argument_list|,
name|input
argument_list|,
name|count
operator|*
sizeof|sizeof
argument_list|(
name|GLushort
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
template|template
parameter_list|<
name|class
name|IndexType
parameter_list|>
DECL|function|computeRange
name|void
name|computeRange
parameter_list|(
specifier|const
name|IndexType
modifier|*
name|indices
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLuint
modifier|*
name|minIndex
parameter_list|,
name|GLuint
modifier|*
name|maxIndex
parameter_list|)
block|{
operator|*
name|minIndex
operator|=
name|indices
index|[
literal|0
index|]
expr_stmt|;
operator|*
name|maxIndex
operator|=
name|indices
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|*
name|minIndex
operator|>
name|indices
index|[
name|i
index|]
condition|)
operator|*
name|minIndex
operator|=
name|indices
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
operator|*
name|maxIndex
operator|<
name|indices
index|[
name|i
index|]
condition|)
operator|*
name|maxIndex
operator|=
name|indices
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
DECL|function|computeRange
name|void
name|computeRange
parameter_list|(
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLuint
modifier|*
name|minIndex
parameter_list|,
name|GLuint
modifier|*
name|maxIndex
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_BYTE
condition|)
block|{
name|computeRange
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
name|indices
argument_list|)
argument_list|,
name|count
argument_list|,
name|minIndex
argument_list|,
name|maxIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_INT
condition|)
block|{
name|computeRange
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|GLuint
operator|*
argument_list|>
argument_list|(
name|indices
argument_list|)
argument_list|,
name|count
argument_list|,
name|minIndex
argument_list|,
name|maxIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_SHORT
condition|)
block|{
name|computeRange
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|GLushort
operator|*
argument_list|>
argument_list|(
name|indices
argument_list|)
argument_list|,
name|count
argument_list|,
name|minIndex
argument_list|,
name|maxIndex
argument_list|)
expr_stmt|;
block|}
else|else
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
DECL|function|prepareIndexData
name|GLenum
name|IndexDataManager
operator|::
name|prepareIndexData
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|Buffer
modifier|*
name|buffer
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|,
name|TranslatedIndexData
modifier|*
name|translated
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mStreamingBufferShort
condition|)
block|{
return|return
name|GL_OUT_OF_MEMORY
return|;
block|}
name|D3DFORMAT
name|format
init|=
operator|(
name|type
operator|==
name|GL_UNSIGNED_INT
operator|)
condition|?
name|D3DFMT_INDEX32
else|:
name|D3DFMT_INDEX16
decl_stmt|;
name|intptr_t
name|offset
init|=
cast|reinterpret_cast
argument_list|<
name|intptr_t
argument_list|>
argument_list|(
name|indices
argument_list|)
decl_stmt|;
name|bool
name|alignedOffset
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
name|NULL
condition|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
name|alignedOffset
operator|=
operator|(
name|offset
operator|%
sizeof|sizeof
argument_list|(
name|GLubyte
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|GL_UNSIGNED_SHORT
case|:
name|alignedOffset
operator|=
operator|(
name|offset
operator|%
sizeof|sizeof
argument_list|(
name|GLushort
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|GL_UNSIGNED_INT
case|:
name|alignedOffset
operator|=
operator|(
name|offset
operator|%
sizeof|sizeof
argument_list|(
name|GLuint
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
name|alignedOffset
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|typeSize
argument_list|(
name|type
argument_list|)
operator|*
name|count
operator|+
name|offset
operator|>
cast|static_cast
argument_list|<
name|std
operator|::
name|size_t
argument_list|>
argument_list|(
name|buffer
operator|->
name|size
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|GL_INVALID_OPERATION
return|;
block|}
name|indices
operator|=
cast|static_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
name|buffer
operator|->
name|data
argument_list|()
argument_list|)
operator|+
name|offset
expr_stmt|;
block|}
name|StreamingIndexBuffer
modifier|*
name|streamingBuffer
init|=
operator|(
name|type
operator|==
name|GL_UNSIGNED_INT
operator|)
condition|?
name|mStreamingBufferInt
else|:
name|mStreamingBufferShort
decl_stmt|;
name|StaticIndexBuffer
modifier|*
name|staticBuffer
init|=
name|buffer
condition|?
name|buffer
operator|->
name|getStaticIndexBuffer
argument_list|()
else|:
name|NULL
decl_stmt|;
name|IndexBuffer
modifier|*
name|indexBuffer
init|=
name|streamingBuffer
decl_stmt|;
name|UINT
name|streamOffset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|staticBuffer
operator|&&
name|staticBuffer
operator|->
name|lookupType
argument_list|(
name|type
argument_list|)
operator|&&
name|alignedOffset
condition|)
block|{
name|indexBuffer
operator|=
name|staticBuffer
expr_stmt|;
name|streamOffset
operator|=
name|staticBuffer
operator|->
name|lookupRange
argument_list|(
name|offset
argument_list|,
name|count
argument_list|,
operator|&
name|translated
operator|->
name|minIndex
argument_list|,
operator|&
name|translated
operator|->
name|maxIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|streamOffset
operator|==
operator|-
literal|1
condition|)
block|{
name|streamOffset
operator|=
operator|(
name|offset
operator|/
name|typeSize
argument_list|(
name|type
argument_list|)
operator|)
operator|*
name|indexSize
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|computeRange
argument_list|(
name|type
argument_list|,
name|indices
argument_list|,
name|count
argument_list|,
operator|&
name|translated
operator|->
name|minIndex
argument_list|,
operator|&
name|translated
operator|->
name|maxIndex
argument_list|)
expr_stmt|;
name|staticBuffer
operator|->
name|addRange
argument_list|(
name|offset
argument_list|,
name|count
argument_list|,
name|translated
operator|->
name|minIndex
argument_list|,
name|translated
operator|->
name|maxIndex
argument_list|,
name|streamOffset
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|convertCount
init|=
name|count
decl_stmt|;
if|if
condition|(
name|staticBuffer
condition|)
block|{
if|if
condition|(
name|staticBuffer
operator|->
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|alignedOffset
condition|)
block|{
name|indexBuffer
operator|=
name|staticBuffer
expr_stmt|;
name|convertCount
operator|=
name|buffer
operator|->
name|size
argument_list|()
operator|/
name|typeSize
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|->
name|invalidateStaticData
argument_list|()
expr_stmt|;
name|staticBuffer
operator|=
name|NULL
expr_stmt|;
block|}
block|}
name|void
modifier|*
name|output
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|indexBuffer
condition|)
block|{
name|indexBuffer
operator|->
name|reserveSpace
argument_list|(
name|convertCount
operator|*
name|indexSize
argument_list|(
name|format
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|output
operator|=
name|indexBuffer
operator|->
name|map
argument_list|(
name|indexSize
argument_list|(
name|format
argument_list|)
operator|*
name|convertCount
argument_list|,
operator|&
name|streamOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|output
operator|==
name|NULL
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to map index buffer."
argument_list|)
expr_stmt|;
return|return
name|GL_OUT_OF_MEMORY
return|;
block|}
name|convertIndices
argument_list|(
name|type
argument_list|,
name|staticBuffer
condition|?
name|buffer
operator|->
name|data
argument_list|()
else|:
name|indices
argument_list|,
name|convertCount
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|indexBuffer
operator|->
name|unmap
argument_list|()
expr_stmt|;
name|computeRange
argument_list|(
name|type
argument_list|,
name|indices
argument_list|,
name|count
argument_list|,
operator|&
name|translated
operator|->
name|minIndex
argument_list|,
operator|&
name|translated
operator|->
name|maxIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|staticBuffer
condition|)
block|{
name|streamOffset
operator|=
operator|(
name|offset
operator|/
name|typeSize
argument_list|(
name|type
argument_list|)
operator|)
operator|*
name|indexSize
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|staticBuffer
operator|->
name|addRange
argument_list|(
name|offset
argument_list|,
name|count
argument_list|,
name|translated
operator|->
name|minIndex
argument_list|,
name|translated
operator|->
name|maxIndex
argument_list|,
name|streamOffset
argument_list|)
expr_stmt|;
block|}
block|}
name|translated
operator|->
name|indexBuffer
operator|=
name|indexBuffer
operator|->
name|getBuffer
argument_list|()
expr_stmt|;
name|translated
operator|->
name|serial
operator|=
name|indexBuffer
operator|->
name|getSerial
argument_list|()
expr_stmt|;
name|translated
operator|->
name|startIndex
operator|=
name|streamOffset
operator|/
name|indexSize
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
condition|)
block|{
name|buffer
operator|->
name|promoteStaticUsage
argument_list|(
name|count
operator|*
name|typeSize
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|GL_NO_ERROR
return|;
block|}
DECL|function|indexSize
name|std
operator|::
name|size_t
name|IndexDataManager
operator|::
name|indexSize
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|format
operator|==
name|D3DFMT_INDEX32
operator|)
condition|?
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
else|:
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
return|;
block|}
DECL|function|typeSize
name|std
operator|::
name|size_t
name|IndexDataManager
operator|::
name|typeSize
parameter_list|(
name|GLenum
name|type
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_INT
case|:
return|return
sizeof|sizeof
argument_list|(
name|GLuint
argument_list|)
return|;
case|case
name|GL_UNSIGNED_SHORT
case|:
return|return
sizeof|sizeof
argument_list|(
name|GLushort
argument_list|)
return|;
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
sizeof|sizeof
argument_list|(
name|GLubyte
argument_list|)
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
sizeof|sizeof
argument_list|(
name|GLushort
argument_list|)
return|;
block|}
block|}
DECL|function|getCountingIndices
name|StaticIndexBuffer
modifier|*
name|IndexDataManager
operator|::
name|getCountingIndices
parameter_list|(
name|GLsizei
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<=
literal|65536
condition|)
comment|// 16-bit indices
block|{
specifier|const
name|unsigned
name|int
name|spaceNeeded
init|=
name|count
operator|*
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|mCountingBuffer
operator|||
name|mCountingBuffer
operator|->
name|size
argument_list|()
operator|<
name|spaceNeeded
condition|)
block|{
operator|delete
name|mCountingBuffer
expr_stmt|;
name|mCountingBuffer
operator|=
operator|new
name|StaticIndexBuffer
argument_list|(
name|mDevice
argument_list|)
expr_stmt|;
name|mCountingBuffer
operator|->
name|reserveSpace
argument_list|(
name|spaceNeeded
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
expr_stmt|;
name|UINT
name|offset
decl_stmt|;
name|unsigned
name|short
modifier|*
name|data
init|=
cast|static_cast
argument_list|<
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
name|mCountingBuffer
operator|->
name|map
argument_list|(
name|spaceNeeded
argument_list|,
operator|&
name|offset
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
name|mCountingBuffer
operator|->
name|unmap
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|mStreamingBufferInt
condition|)
comment|// 32-bit indices supported
block|{
specifier|const
name|unsigned
name|int
name|spaceNeeded
init|=
name|count
operator|*
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|mCountingBuffer
operator|||
name|mCountingBuffer
operator|->
name|size
argument_list|()
operator|<
name|spaceNeeded
condition|)
block|{
operator|delete
name|mCountingBuffer
expr_stmt|;
name|mCountingBuffer
operator|=
operator|new
name|StaticIndexBuffer
argument_list|(
name|mDevice
argument_list|)
expr_stmt|;
name|mCountingBuffer
operator|->
name|reserveSpace
argument_list|(
name|spaceNeeded
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
expr_stmt|;
name|UINT
name|offset
decl_stmt|;
name|unsigned
name|int
modifier|*
name|data
init|=
cast|static_cast
argument_list|<
name|unsigned
name|int
operator|*
argument_list|>
argument_list|(
name|mCountingBuffer
operator|->
name|map
argument_list|(
name|spaceNeeded
argument_list|,
operator|&
name|offset
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
name|mCountingBuffer
operator|->
name|unmap
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
return|return
name|NULL
return|;
return|return
name|mCountingBuffer
return|;
block|}
DECL|function|IndexBuffer
name|IndexBuffer
operator|::
name|IndexBuffer
parameter_list|(
name|IDirect3DDevice9
modifier|*
name|device
parameter_list|,
name|UINT
name|size
parameter_list|,
name|D3DFORMAT
name|format
parameter_list|)
member_init_list|:
name|mDevice
argument_list|(
name|device
argument_list|)
member_init_list|,
name|mBufferSize
argument_list|(
name|size
argument_list|)
member_init_list|,
name|mIndexBuffer
argument_list|(
name|NULL
argument_list|)
block|{
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|D3DPOOL
name|pool
init|=
name|getDisplay
argument_list|()
operator|->
name|getBufferPool
argument_list|(
name|D3DUSAGE_DYNAMIC
operator||
name|D3DUSAGE_WRITEONLY
argument_list|)
decl_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateIndexBuffer
argument_list|(
name|size
argument_list|,
name|D3DUSAGE_DYNAMIC
operator||
name|D3DUSAGE_WRITEONLY
argument_list|,
name|format
argument_list|,
name|pool
argument_list|,
operator|&
name|mIndexBuffer
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|mSerial
operator|=
name|issueSerial
argument_list|()
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Out of memory allocating an index buffer of size %lu."
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|~IndexBuffer
name|IndexBuffer
operator|::
name|~
name|IndexBuffer
parameter_list|()
block|{
if|if
condition|(
name|mIndexBuffer
condition|)
block|{
name|mIndexBuffer
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|getBuffer
name|IDirect3DIndexBuffer9
modifier|*
name|IndexBuffer
operator|::
name|getBuffer
parameter_list|()
specifier|const
block|{
return|return
name|mIndexBuffer
return|;
block|}
DECL|function|getSerial
name|unsigned
name|int
name|IndexBuffer
operator|::
name|getSerial
parameter_list|()
specifier|const
block|{
return|return
name|mSerial
return|;
block|}
DECL|function|issueSerial
name|unsigned
name|int
name|IndexBuffer
operator|::
name|issueSerial
parameter_list|()
block|{
return|return
name|mCurrentSerial
operator|++
return|;
block|}
DECL|function|unmap
name|void
name|IndexBuffer
operator|::
name|unmap
parameter_list|()
block|{
if|if
condition|(
name|mIndexBuffer
condition|)
block|{
name|mIndexBuffer
operator|->
name|Unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|StreamingIndexBuffer
name|StreamingIndexBuffer
operator|::
name|StreamingIndexBuffer
parameter_list|(
name|IDirect3DDevice9
modifier|*
name|device
parameter_list|,
name|UINT
name|initialSize
parameter_list|,
name|D3DFORMAT
name|format
parameter_list|)
member_init_list|:
name|IndexBuffer
argument_list|(
name|device
argument_list|,
name|initialSize
argument_list|,
name|format
argument_list|)
block|{
name|mWritePosition
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|~StreamingIndexBuffer
name|StreamingIndexBuffer
operator|::
name|~
name|StreamingIndexBuffer
parameter_list|()
block|{ }
DECL|function|map
name|void
modifier|*
name|StreamingIndexBuffer
operator|::
name|map
parameter_list|(
name|UINT
name|requiredSpace
parameter_list|,
name|UINT
modifier|*
name|offset
parameter_list|)
block|{
name|void
modifier|*
name|mapPtr
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|mIndexBuffer
condition|)
block|{
name|HRESULT
name|result
init|=
name|mIndexBuffer
operator|->
name|Lock
argument_list|(
name|mWritePosition
argument_list|,
name|requiredSpace
argument_list|,
operator|&
name|mapPtr
argument_list|,
name|D3DLOCK_NOOVERWRITE
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|" Lock failed with error 0x%08x"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
operator|*
name|offset
operator|=
name|mWritePosition
expr_stmt|;
name|mWritePosition
operator|+=
name|requiredSpace
expr_stmt|;
block|}
return|return
name|mapPtr
return|;
block|}
DECL|function|reserveSpace
name|void
name|StreamingIndexBuffer
operator|::
name|reserveSpace
parameter_list|(
name|UINT
name|requiredSpace
parameter_list|,
name|GLenum
name|type
parameter_list|)
block|{
if|if
condition|(
name|requiredSpace
operator|>
name|mBufferSize
condition|)
block|{
if|if
condition|(
name|mIndexBuffer
condition|)
block|{
name|mIndexBuffer
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mIndexBuffer
operator|=
name|NULL
expr_stmt|;
block|}
name|mBufferSize
operator|=
name|std
operator|::
name|max
argument_list|(
name|requiredSpace
argument_list|,
literal|2
operator|*
name|mBufferSize
argument_list|)
expr_stmt|;
name|D3DPOOL
name|pool
init|=
name|getDisplay
argument_list|()
operator|->
name|getBufferPool
argument_list|(
name|D3DUSAGE_DYNAMIC
operator||
name|D3DUSAGE_WRITEONLY
argument_list|)
decl_stmt|;
name|HRESULT
name|result
init|=
name|mDevice
operator|->
name|CreateIndexBuffer
argument_list|(
name|mBufferSize
argument_list|,
name|D3DUSAGE_DYNAMIC
operator||
name|D3DUSAGE_WRITEONLY
argument_list|,
name|type
operator|==
name|GL_UNSIGNED_INT
condition|?
name|D3DFMT_INDEX32
else|:
name|D3DFMT_INDEX16
argument_list|,
name|pool
argument_list|,
operator|&
name|mIndexBuffer
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|mSerial
operator|=
name|issueSerial
argument_list|()
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Out of memory allocating a vertex buffer of size %lu."
argument_list|,
name|mBufferSize
argument_list|)
expr_stmt|;
block|}
name|mWritePosition
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mWritePosition
operator|+
name|requiredSpace
operator|>
name|mBufferSize
condition|)
comment|// Recycle
block|{
name|void
modifier|*
name|dummy
decl_stmt|;
name|mIndexBuffer
operator|->
name|Lock
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|dummy
argument_list|,
name|D3DLOCK_DISCARD
argument_list|)
expr_stmt|;
name|mIndexBuffer
operator|->
name|Unlock
argument_list|()
expr_stmt|;
name|mWritePosition
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|function|StaticIndexBuffer
name|StaticIndexBuffer
operator|::
name|StaticIndexBuffer
parameter_list|(
name|IDirect3DDevice9
modifier|*
name|device
parameter_list|)
member_init_list|:
name|IndexBuffer
argument_list|(
name|device
argument_list|,
literal|0
argument_list|,
name|D3DFMT_UNKNOWN
argument_list|)
block|{
name|mCacheType
operator|=
name|GL_NONE
expr_stmt|;
block|}
DECL|function|~StaticIndexBuffer
name|StaticIndexBuffer
operator|::
name|~
name|StaticIndexBuffer
parameter_list|()
block|{ }
DECL|function|map
name|void
modifier|*
name|StaticIndexBuffer
operator|::
name|map
parameter_list|(
name|UINT
name|requiredSpace
parameter_list|,
name|UINT
modifier|*
name|offset
parameter_list|)
block|{
name|void
modifier|*
name|mapPtr
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|mIndexBuffer
condition|)
block|{
name|HRESULT
name|result
init|=
name|mIndexBuffer
operator|->
name|Lock
argument_list|(
literal|0
argument_list|,
name|requiredSpace
argument_list|,
operator|&
name|mapPtr
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|" Lock failed with error 0x%08x"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
operator|*
name|offset
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|mapPtr
return|;
block|}
DECL|function|reserveSpace
name|void
name|StaticIndexBuffer
operator|::
name|reserveSpace
parameter_list|(
name|UINT
name|requiredSpace
parameter_list|,
name|GLenum
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mIndexBuffer
operator|&&
name|mBufferSize
operator|==
literal|0
condition|)
block|{
name|D3DPOOL
name|pool
init|=
name|getDisplay
argument_list|()
operator|->
name|getBufferPool
argument_list|(
name|D3DUSAGE_WRITEONLY
argument_list|)
decl_stmt|;
name|HRESULT
name|result
init|=
name|mDevice
operator|->
name|CreateIndexBuffer
argument_list|(
name|requiredSpace
argument_list|,
name|D3DUSAGE_WRITEONLY
argument_list|,
name|type
operator|==
name|GL_UNSIGNED_INT
condition|?
name|D3DFMT_INDEX32
else|:
name|D3DFMT_INDEX16
argument_list|,
name|pool
argument_list|,
operator|&
name|mIndexBuffer
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|mSerial
operator|=
name|issueSerial
argument_list|()
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Out of memory allocating a vertex buffer of size %lu."
argument_list|,
name|mBufferSize
argument_list|)
expr_stmt|;
block|}
name|mBufferSize
operator|=
name|requiredSpace
expr_stmt|;
name|mCacheType
operator|=
name|type
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mIndexBuffer
operator|&&
name|mBufferSize
operator|>=
name|requiredSpace
operator|&&
name|mCacheType
operator|==
name|type
condition|)
block|{
comment|// Already allocated
block|}
else|else
name|UNREACHABLE
argument_list|()
expr_stmt|;
comment|// Static index buffers can't be resized
block|}
DECL|function|lookupType
name|bool
name|StaticIndexBuffer
operator|::
name|lookupType
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
return|return
name|mCacheType
operator|==
name|type
return|;
block|}
DECL|function|lookupRange
name|UINT
name|StaticIndexBuffer
operator|::
name|lookupRange
parameter_list|(
name|intptr_t
name|offset
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|UINT
modifier|*
name|minIndex
parameter_list|,
name|UINT
modifier|*
name|maxIndex
parameter_list|)
block|{
name|IndexRange
name|range
init|=
block|{
name|offset
block|,
name|count
block|}
decl_stmt|;
name|std
operator|::
name|map
argument_list|<
name|IndexRange
argument_list|,
name|IndexResult
argument_list|>
operator|::
name|iterator
name|res
init|=
name|mCache
operator|.
name|find
argument_list|(
name|range
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
name|mCache
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
operator|*
name|minIndex
operator|=
name|res
operator|->
name|second
operator|.
name|minIndex
expr_stmt|;
operator|*
name|maxIndex
operator|=
name|res
operator|->
name|second
operator|.
name|maxIndex
expr_stmt|;
return|return
name|res
operator|->
name|second
operator|.
name|streamOffset
return|;
block|}
DECL|function|addRange
name|void
name|StaticIndexBuffer
operator|::
name|addRange
parameter_list|(
name|intptr_t
name|offset
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|UINT
name|minIndex
parameter_list|,
name|UINT
name|maxIndex
parameter_list|,
name|UINT
name|streamOffset
parameter_list|)
block|{
name|IndexRange
name|indexRange
init|=
block|{
name|offset
block|,
name|count
block|}
decl_stmt|;
name|IndexResult
name|indexResult
init|=
block|{
name|minIndex
block|,
name|maxIndex
block|,
name|streamOffset
block|}
decl_stmt|;
name|mCache
index|[
name|indexRange
index|]
operator|=
name|indexResult
expr_stmt|;
block|}
block|}
end_namespace
end_unit
