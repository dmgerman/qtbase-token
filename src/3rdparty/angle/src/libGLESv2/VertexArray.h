begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This class contains prototypes for representing GLES 3 Vertex Array Objects:
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//   The buffer objects that are to be used by the vertex stage of the GL are collected
end_comment
begin_comment
comment|//   together to form a vertex array object. All state related to the definition of data used
end_comment
begin_comment
comment|//   by the vertex processor is encapsulated in a vertex array object.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_VERTEXARRAY_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_VERTEXARRAY_H_
define|#
directive|define
name|LIBGLESV2_VERTEXARRAY_H_
end_define
begin_include
include|#
directive|include
file|"common/RefCountObject.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Constants.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/VertexAttribute.h"
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|VertexArrayImpl
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Buffer
decl_stmt|;
name|class
name|VertexArray
block|{
name|public
label|:
name|VertexArray
argument_list|(
argument|rx::VertexArrayImpl *impl
argument_list|,
argument|GLuint id
argument_list|,
argument|size_t maxAttribs
argument_list|)
empty_stmt|;
operator|~
name|VertexArray
argument_list|()
expr_stmt|;
name|GLuint
name|id
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|VertexAttribute
modifier|&
name|getVertexAttribute
argument_list|(
name|size_t
name|attributeIndex
argument_list|)
decl|const
decl_stmt|;
name|void
name|detachBuffer
parameter_list|(
name|GLuint
name|bufferName
parameter_list|)
function_decl|;
name|void
name|setVertexAttribDivisor
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLuint
name|divisor
parameter_list|)
function_decl|;
name|void
name|enableAttribute
parameter_list|(
name|unsigned
name|int
name|attributeIndex
parameter_list|,
name|bool
name|enabledState
parameter_list|)
function_decl|;
name|void
name|setAttributeState
argument_list|(
name|unsigned
name|int
name|attributeIndex
argument_list|,
name|gl
operator|::
name|Buffer
operator|*
name|boundBuffer
argument_list|,
name|GLint
name|size
argument_list|,
name|GLenum
name|type
argument_list|,
name|bool
name|normalized
argument_list|,
name|bool
name|pureInteger
argument_list|,
name|GLsizei
name|stride
argument_list|,
specifier|const
name|void
operator|*
name|pointer
argument_list|)
decl_stmt|;
specifier|const
name|VertexAttribute
operator|*
name|getVertexAttributes
argument_list|()
specifier|const
block|{
return|return
operator|&
name|mVertexAttributes
index|[
literal|0
index|]
return|;
block|}
name|Buffer
operator|*
name|getElementArrayBuffer
argument_list|()
specifier|const
block|{
return|return
name|mElementArrayBuffer
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|setElementArrayBuffer
parameter_list|(
name|Buffer
modifier|*
name|buffer
parameter_list|)
function_decl|;
name|GLuint
name|getElementArrayBufferId
argument_list|()
specifier|const
block|{
return|return
name|mElementArrayBuffer
operator|.
name|id
argument_list|()
return|;
block|}
name|size_t
name|getMaxAttribs
argument_list|()
specifier|const
block|{
return|return
name|mVertexAttributes
operator|.
name|size
argument_list|()
return|;
block|}
name|private
label|:
name|GLuint
name|mId
decl_stmt|;
name|rx
operator|::
name|VertexArrayImpl
operator|*
name|mVertexArray
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|VertexAttribute
operator|>
name|mVertexAttributes
expr_stmt|;
name|BindingPointer
operator|<
name|Buffer
operator|>
name|mElementArrayBuffer
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_VERTEXARRAY_H_
end_comment
end_unit
