begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// BinaryStream.h: Provides binary serialization of simple types.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_BINARYSTREAM_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_BINARYSTREAM_H_
define|#
directive|define
name|LIBGLESV2_BINARYSTREAM_H_
end_define
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|BinaryInputStream
block|{
name|public
label|:
name|BinaryInputStream
argument_list|(
argument|const void *data
argument_list|,
argument|size_t length
argument_list|)
block|{
name|mError
operator|=
name|false
expr_stmt|;
name|mOffset
operator|=
literal|0
expr_stmt|;
name|mData
operator|=
name|static_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|data
operator|)
expr_stmt|;
name|mLength
operator|=
name|length
expr_stmt|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|read
argument_list|(
argument|T *v
argument_list|,
argument|size_t num
argument_list|)
block|{
expr|union
block|{
name|T
name|dummy
block|;
comment|// Compilation error for non-trivial types
block|}
name|dummy
block|;
operator|(
name|void
operator|)
name|dummy
block|;
if|if
condition|(
name|mError
condition|)
block|{
return|return;
block|}
name|size_t
name|length
init|=
name|num
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
decl_stmt|;
if|if
condition|(
name|mOffset
operator|+
name|length
operator|>
name|mLength
condition|)
block|{
name|mError
operator|=
name|true
expr_stmt|;
return|return;
block|}
name|memcpy
argument_list|(
name|v
argument_list|,
name|mData
operator|+
name|mOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|mOffset
operator|+=
name|length
expr_stmt|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|read
argument_list|(
argument|T * v
argument_list|)
block|{
name|read
argument_list|(
name|v
argument_list|,
literal|1
argument_list|)
block|;     }
name|void
name|read
argument_list|(
argument|std::string *v
argument_list|)
block|{
name|size_t
name|length
block|;
name|read
argument_list|(
operator|&
name|length
argument_list|)
block|;
if|if
condition|(
name|mError
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|mOffset
operator|+
name|length
operator|>
name|mLength
condition|)
block|{
name|mError
operator|=
name|true
expr_stmt|;
return|return;
block|}
name|v
operator|->
name|assign
argument_list|(
name|mData
operator|+
name|mOffset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|mOffset
operator|+=
name|length
expr_stmt|;
block|}
end_decl_stmt
begin_function
name|void
name|skip
parameter_list|(
name|size_t
name|length
parameter_list|)
block|{
if|if
condition|(
name|mOffset
operator|+
name|length
operator|>
name|mLength
condition|)
block|{
name|mError
operator|=
name|true
expr_stmt|;
return|return;
block|}
name|mOffset
operator|+=
name|length
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|size_t
name|offset
argument_list|()
specifier|const
block|{
return|return
name|mOffset
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|bool
name|error
argument_list|()
specifier|const
block|{
return|return
name|mError
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|bool
name|endOfStream
argument_list|()
specifier|const
block|{
return|return
name|mOffset
operator|==
name|mLength
return|;
block|}
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_expr_stmt
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|BinaryInputStream
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|bool
name|mError
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|size_t
name|mOffset
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|const
name|char
modifier|*
name|mData
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|size_t
name|mLength
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|BinaryOutputStream
block|{
name|public
label|:
name|BinaryOutputStream
argument_list|()
block|{     }
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|write
argument_list|(
argument|const T *v
argument_list|,
argument|size_t num
argument_list|)
block|{
expr|union
block|{
name|T
name|dummy
block|;
comment|// Compilation error for non-trivial types
block|}
name|dummy
block|;
operator|(
name|void
operator|)
name|dummy
block|;
specifier|const
name|char
operator|*
name|asBytes
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|v
operator|)
block|;
name|mData
operator|.
name|insert
argument_list|(
name|mData
operator|.
name|end
argument_list|()
argument_list|,
name|asBytes
argument_list|,
name|asBytes
operator|+
name|num
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
block|;     }
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|write
argument_list|(
argument|const T&v
argument_list|)
block|{
name|write
argument_list|(
operator|&
name|v
argument_list|,
literal|1
argument_list|)
block|;     }
name|void
name|write
argument_list|(
argument|const std::string&v
argument_list|)
block|{
name|size_t
name|length
operator|=
name|v
operator|.
name|length
argument_list|()
block|;
name|write
argument_list|(
name|length
argument_list|)
block|;
name|write
argument_list|(
name|v
operator|.
name|c_str
argument_list|()
argument_list|,
name|length
argument_list|)
block|;     }
name|size_t
name|length
argument_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|void
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|mData
operator|.
name|size
argument_list|()
operator|?
operator|&
name|mData
index|[
literal|0
index|]
operator|:
name|NULL
return|;
block|}
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|BinaryOutputStream
argument_list|)
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|char
operator|>
name|mData
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_BINARYSTREAM_H_
end_comment
end_unit
