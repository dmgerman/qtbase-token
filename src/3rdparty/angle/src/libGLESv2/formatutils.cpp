begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// formatutils.cpp: Queries for GL image formats.
end_comment
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/imageformats.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/copyimage.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
comment|// ES2 requires that format is equal to internal format at all glTex*Image2D entry points and the implementation
comment|// can decide the true, sized, internal format. The ES2FormatMap determines the internal format for all valid
comment|// format and type combinations.
DECL|struct|FormatTypeInfo
struct|struct
name|FormatTypeInfo
block|{
DECL|member|mInternalFormat
name|GLenum
name|mInternalFormat
decl_stmt|;
DECL|member|mColorWriteFunction
name|ColorWriteFunction
name|mColorWriteFunction
decl_stmt|;
DECL|function|FormatTypeInfo
name|FormatTypeInfo
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
name|ColorWriteFunction
name|writeFunc
parameter_list|)
member_init_list|:
name|mInternalFormat
argument_list|(
name|internalFormat
argument_list|)
member_init_list|,
name|mColorWriteFunction
argument_list|(
name|writeFunc
argument_list|)
block|{ }
block|}
struct|;
DECL|typedef|FormatTypePair
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|GLenum
argument_list|,
name|GLenum
argument_list|>
name|FormatTypePair
typedef|;
DECL|typedef|FormatPair
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|FormatTypePair
argument_list|,
name|FormatTypeInfo
argument_list|>
name|FormatPair
typedef|;
DECL|typedef|FormatMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|FormatTypePair
argument_list|,
name|FormatTypeInfo
argument_list|>
name|FormatMap
typedef|;
comment|// A helper function to insert data into the format map with fewer characters.
DECL|function|InsertFormatMapping
specifier|static
specifier|inline
name|void
name|InsertFormatMapping
parameter_list|(
name|FormatMap
modifier|*
name|map
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|ColorWriteFunction
name|writeFunc
parameter_list|)
block|{
name|map
operator|->
name|insert
argument_list|(
name|FormatPair
argument_list|(
name|FormatTypePair
argument_list|(
name|format
argument_list|,
name|type
argument_list|)
argument_list|,
name|FormatTypeInfo
argument_list|(
name|internalFormat
argument_list|,
name|writeFunc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|BuildFormatMap
name|FormatMap
name|BuildFormatMap
parameter_list|()
block|{
name|FormatMap
name|map
decl_stmt|;
using|using
namespace|namespace
name|rx
namespace|;
comment|//                       | Format               | Type                             | Internal format          | Color write function             |
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_RGBA8
argument_list|,
name|WriteColor
argument_list|<
name|R8G8B8A8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_RGBA8_SNORM
argument_list|,
name|WriteColor
argument_list|<
name|R8G8B8A8S
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_4_4_4_4
argument_list|,
name|GL_RGBA4
argument_list|,
name|WriteColor
argument_list|<
name|R4G4B4A4
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_5_5_5_1
argument_list|,
name|GL_RGB5_A1
argument_list|,
name|WriteColor
argument_list|<
name|R5G5B5A1
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|,
name|GL_RGB10_A2
argument_list|,
name|WriteColor
argument_list|<
name|R10G10B10A2
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_RGBA32F
argument_list|,
name|WriteColor
argument_list|<
name|R32G32B32A32F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_RGBA16F
argument_list|,
name|WriteColor
argument_list|<
name|R16G16B16A16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|,
name|GL_RGBA16F
argument_list|,
name|WriteColor
argument_list|<
name|R16G16B16A16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_RGBA8UI
argument_list|,
name|WriteColor
argument_list|<
name|R8G8B8A8
argument_list|,
name|GLuint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_RGBA8I
argument_list|,
name|WriteColor
argument_list|<
name|R8G8B8A8S
argument_list|,
name|GLint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_RGBA16UI
argument_list|,
name|WriteColor
argument_list|<
name|R16G16B16A16
argument_list|,
name|GLuint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_RGBA16I
argument_list|,
name|WriteColor
argument_list|<
name|R16G16B16A16S
argument_list|,
name|GLint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_RGBA32UI
argument_list|,
name|WriteColor
argument_list|<
name|R32G32B32A32
argument_list|,
name|GLuint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_RGBA32I
argument_list|,
name|WriteColor
argument_list|<
name|R32G32B32A32S
argument_list|,
name|GLint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|,
name|GL_RGB10_A2UI
argument_list|,
name|WriteColor
argument_list|<
name|R10G10B10A2
argument_list|,
name|GLuint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_RGB8
argument_list|,
name|WriteColor
argument_list|<
name|R8G8B8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_RGB8_SNORM
argument_list|,
name|WriteColor
argument_list|<
name|R8G8B8S
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_SHORT_5_6_5
argument_list|,
name|GL_RGB565
argument_list|,
name|WriteColor
argument_list|<
name|R5G6B5
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_INT_10F_11F_11F_REV
argument_list|,
name|GL_R11F_G11F_B10F
argument_list|,
name|WriteColor
argument_list|<
name|R11G11B10F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_INT_5_9_9_9_REV
argument_list|,
name|GL_RGB9_E5
argument_list|,
name|WriteColor
argument_list|<
name|R9G9B9E5
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_RGB32F
argument_list|,
name|WriteColor
argument_list|<
name|R32G32B32F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_RGB16F
argument_list|,
name|WriteColor
argument_list|<
name|R16G16B16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|,
name|GL_RGB16F
argument_list|,
name|WriteColor
argument_list|<
name|R16G16B16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_RGB8UI
argument_list|,
name|WriteColor
argument_list|<
name|R8G8B8
argument_list|,
name|GLuint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_RGB8I
argument_list|,
name|WriteColor
argument_list|<
name|R8G8B8S
argument_list|,
name|GLint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_RGB16UI
argument_list|,
name|WriteColor
argument_list|<
name|R16G16B16
argument_list|,
name|GLuint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_RGB16I
argument_list|,
name|WriteColor
argument_list|<
name|R16G16B16S
argument_list|,
name|GLint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_RGB32UI
argument_list|,
name|WriteColor
argument_list|<
name|R32G32B32
argument_list|,
name|GLuint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_RGB32I
argument_list|,
name|WriteColor
argument_list|<
name|R32G32B32S
argument_list|,
name|GLint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_RG8
argument_list|,
name|WriteColor
argument_list|<
name|R8G8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_RG8_SNORM
argument_list|,
name|WriteColor
argument_list|<
name|R8G8S
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_RG32F
argument_list|,
name|WriteColor
argument_list|<
name|R32G32F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_RG16F
argument_list|,
name|WriteColor
argument_list|<
name|R16G16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|,
name|GL_RG16F
argument_list|,
name|WriteColor
argument_list|<
name|R16G16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_RG8UI
argument_list|,
name|WriteColor
argument_list|<
name|R8G8
argument_list|,
name|GLuint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_RG8I
argument_list|,
name|WriteColor
argument_list|<
name|R8G8S
argument_list|,
name|GLint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_RG16UI
argument_list|,
name|WriteColor
argument_list|<
name|R16G16
argument_list|,
name|GLuint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_RG16I
argument_list|,
name|WriteColor
argument_list|<
name|R16G16S
argument_list|,
name|GLint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_RG32UI
argument_list|,
name|WriteColor
argument_list|<
name|R32G32
argument_list|,
name|GLuint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_RG32I
argument_list|,
name|WriteColor
argument_list|<
name|R32G32S
argument_list|,
name|GLint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_R8
argument_list|,
name|WriteColor
argument_list|<
name|R8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_R8_SNORM
argument_list|,
name|WriteColor
argument_list|<
name|R8S
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_R32F
argument_list|,
name|WriteColor
argument_list|<
name|R32F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_R16F
argument_list|,
name|WriteColor
argument_list|<
name|R16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|,
name|GL_R16F
argument_list|,
name|WriteColor
argument_list|<
name|R16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_R8UI
argument_list|,
name|WriteColor
argument_list|<
name|R8
argument_list|,
name|GLuint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_R8I
argument_list|,
name|WriteColor
argument_list|<
name|R8S
argument_list|,
name|GLint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_R16UI
argument_list|,
name|WriteColor
argument_list|<
name|R16
argument_list|,
name|GLuint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_R16I
argument_list|,
name|WriteColor
argument_list|<
name|R16S
argument_list|,
name|GLint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_R32UI
argument_list|,
name|WriteColor
argument_list|<
name|R32
argument_list|,
name|GLuint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_R32I
argument_list|,
name|WriteColor
argument_list|<
name|R32S
argument_list|,
name|GLint
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_LUMINANCE8_ALPHA8_EXT
argument_list|,
name|WriteColor
argument_list|<
name|L8A8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_LUMINANCE8_EXT
argument_list|,
name|WriteColor
argument_list|<
name|L8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_ALPHA8_EXT
argument_list|,
name|WriteColor
argument_list|<
name|A8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_LUMINANCE_ALPHA32F_EXT
argument_list|,
name|WriteColor
argument_list|<
name|L32A32F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_LUMINANCE32F_EXT
argument_list|,
name|WriteColor
argument_list|<
name|L32F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_ALPHA32F_EXT
argument_list|,
name|WriteColor
argument_list|<
name|A32F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_LUMINANCE_ALPHA16F_EXT
argument_list|,
name|WriteColor
argument_list|<
name|L16A16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|,
name|GL_LUMINANCE_ALPHA16F_EXT
argument_list|,
name|WriteColor
argument_list|<
name|L16A16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_LUMINANCE16F_EXT
argument_list|,
name|WriteColor
argument_list|<
name|L16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|,
name|GL_LUMINANCE16F_EXT
argument_list|,
name|WriteColor
argument_list|<
name|L16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_ALPHA16F_EXT
argument_list|,
name|WriteColor
argument_list|<
name|A16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|,
name|GL_ALPHA16F_EXT
argument_list|,
name|WriteColor
argument_list|<
name|A16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_BGRA8_EXT
argument_list|,
name|WriteColor
argument_list|<
name|B8G8R8A8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
argument_list|,
name|GL_BGRA4_ANGLEX
argument_list|,
name|WriteColor
argument_list|<
name|B4G4R4A4
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
argument_list|,
name|GL_BGR5_A1_ANGLEX
argument_list|,
name|WriteColor
argument_list|<
name|B5G5R5A1
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_SRGB_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_SRGB8
argument_list|,
name|WriteColor
argument_list|<
name|R8G8B8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_SRGB_ALPHA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_SRGB8_ALPHA8
argument_list|,
name|WriteColor
argument_list|<
name|R8G8B8A8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_DEPTH_COMPONENT16
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_DEPTH_COMPONENT32_OES
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_DEPTH_COMPONENT32F
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_STENCIL
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_STENCIL_INDEX8
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_DEPTH_STENCIL
argument_list|,
name|GL_UNSIGNED_INT_24_8
argument_list|,
name|GL_DEPTH24_STENCIL8
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|InsertFormatMapping
argument_list|(
operator|&
name|map
argument_list|,
name|GL_DEPTH_STENCIL
argument_list|,
name|GL_FLOAT_32_UNSIGNED_INT_24_8_REV
argument_list|,
name|GL_DEPTH32F_STENCIL8
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|function|GetFormatMap
specifier|static
specifier|const
name|FormatMap
modifier|&
name|GetFormatMap
parameter_list|()
block|{
specifier|static
specifier|const
name|FormatMap
name|formatMap
init|=
name|BuildFormatMap
argument_list|()
decl_stmt|;
return|return
name|formatMap
return|;
block|}
DECL|struct|FormatInfo
struct|struct
name|FormatInfo
block|{
DECL|member|mInternalformat
name|GLenum
name|mInternalformat
decl_stmt|;
DECL|member|mFormat
name|GLenum
name|mFormat
decl_stmt|;
DECL|member|mType
name|GLenum
name|mType
decl_stmt|;
DECL|function|FormatInfo
name|FormatInfo
parameter_list|(
name|GLenum
name|internalformat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|)
member_init_list|:
name|mInternalformat
argument_list|(
name|internalformat
argument_list|)
member_init_list|,
name|mFormat
argument_list|(
name|format
argument_list|)
member_init_list|,
name|mType
argument_list|(
name|type
argument_list|)
block|{ }
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|FormatInfo
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|memcmp
argument_list|(
name|this
argument_list|,
operator|&
name|other
argument_list|,
sizeof|sizeof
argument_list|(
name|FormatInfo
argument_list|)
argument_list|)
operator|<
literal|0
return|;
block|}
block|}
struct|;
comment|// ES3 has a specific set of permutations of internal formats, formats and types which are acceptable.
DECL|typedef|ES3FormatSet
typedef|typedef
name|std
operator|::
name|set
argument_list|<
name|FormatInfo
argument_list|>
name|ES3FormatSet
typedef|;
DECL|function|BuildES3FormatSet
name|ES3FormatSet
name|BuildES3FormatSet
parameter_list|()
block|{
name|ES3FormatSet
name|set
decl_stmt|;
comment|// Format combinations from ES 3.0.1 spec, table 3.2
comment|//                   | Internal format      | Format            | Type                            |
comment|//                   |                      |                   |                                 |
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA8
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB5_A1
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA4
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_SRGB8_ALPHA8
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA8_SNORM
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA4
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_4_4_4_4
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB10_A2
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB5_A1
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB5_A1
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_5_5_5_1
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA16F
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA16F
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA32F
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA16F
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA8UI
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA8I
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA16UI
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA16I
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_SHORT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA32UI
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA32I
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_INT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB10_A2UI
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB8
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB565
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_SRGB8
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB8_SNORM
argument_list|,
name|GL_RGB
argument_list|,
name|GL_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB565
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_SHORT_5_6_5
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R11F_G11F_B10F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_INT_10F_11F_11F_REV
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB9_E5
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_INT_5_9_9_9_REV
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB16F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB16F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R11F_G11F_B10F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R11F_G11F_B10F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB9_E5
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB9_E5
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB32F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB16F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R11F_G11F_B10F
argument_list|,
name|GL_RGB
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB9_E5
argument_list|,
name|GL_RGB
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB8UI
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB8I
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB16UI
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB16I
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_SHORT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB32UI
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB32I
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_INT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RG8
argument_list|,
name|GL_RG
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RG8_SNORM
argument_list|,
name|GL_RG
argument_list|,
name|GL_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RG16F
argument_list|,
name|GL_RG
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RG16F
argument_list|,
name|GL_RG
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RG32F
argument_list|,
name|GL_RG
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RG16F
argument_list|,
name|GL_RG
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RG8UI
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RG8I
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RG16UI
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RG16I
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_SHORT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RG32UI
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RG32I
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_INT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R8
argument_list|,
name|GL_RED
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R8_SNORM
argument_list|,
name|GL_RED
argument_list|,
name|GL_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R16F
argument_list|,
name|GL_RED
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R16F
argument_list|,
name|GL_RED
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R32F
argument_list|,
name|GL_RED
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R16F
argument_list|,
name|GL_RED
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R8UI
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R8I
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R16UI
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R16I
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_SHORT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R32UI
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_R32I
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_INT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unsized formats
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_4_4_4_4
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGBA
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_5_5_5_1
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_RGB
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_SHORT_5_6_5
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_ALPHA
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_SRGB_ALPHA_EXT
argument_list|,
name|GL_SRGB_ALPHA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_SRGB_EXT
argument_list|,
name|GL_SRGB_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Depth stencil formats
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_DEPTH_COMPONENT16
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_DEPTH_COMPONENT24
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_DEPTH_COMPONENT16
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_DEPTH_COMPONENT32F
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_DEPTH24_STENCIL8
argument_list|,
name|GL_DEPTH_STENCIL
argument_list|,
name|GL_UNSIGNED_INT_24_8
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_DEPTH32F_STENCIL8
argument_list|,
name|GL_DEPTH_STENCIL
argument_list|,
name|GL_FLOAT_32_UNSIGNED_INT_24_8_REV
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_EXT_sRGB
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_SRGB8_ALPHA8_EXT
argument_list|,
name|GL_SRGB_ALPHA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_SRGB8
argument_list|,
name|GL_SRGB_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_OES_texture_float
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_ALPHA
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_OES_texture_half_float
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_ALPHA
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_ALPHA
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_EXT_texture_format_BGRA8888
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_BGRA_EXT
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_EXT_texture_storage
comment|//                   | Internal format          | Format            | Type                            |
comment|//                   |                          |                   |                                 |
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_ALPHA8_EXT
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE8_EXT
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE8_ALPHA8_EXT
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_ALPHA32F_EXT
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE32F_EXT
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE_ALPHA32F_EXT
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_ALPHA16F_EXT
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_ALPHA16F_EXT
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE16F_EXT
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE16F_EXT
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE_ALPHA16F_EXT
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_LUMINANCE_ALPHA16F_EXT
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_HALF_FLOAT_OES
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_EXT_texture_storage and GL_EXT_texture_format_BGRA8888
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_BGRA8_EXT
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_BGRA4_ANGLEX
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_BGRA4_ANGLEX
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_BGR5_A1_ANGLEX
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_BGR5_A1_ANGLEX
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_ANGLE_depth_texture
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_DEPTH_COMPONENT32_OES
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_INT_24_8_OES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Compressed formats
comment|// From ES 3.0.1 spec, table 3.16
comment|//                   | Internal format                             | Format                                      | Type           |
comment|//                   |                                             |                                             |                |
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_R11_EAC
argument_list|,
name|GL_COMPRESSED_R11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_R11_EAC
argument_list|,
name|GL_COMPRESSED_R11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_SIGNED_R11_EAC
argument_list|,
name|GL_COMPRESSED_SIGNED_R11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_RG11_EAC
argument_list|,
name|GL_COMPRESSED_RG11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_SIGNED_RG11_EAC
argument_list|,
name|GL_COMPRESSED_SIGNED_RG11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_RGB8_ETC2
argument_list|,
name|GL_COMPRESSED_RGB8_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_SRGB8_ETC2
argument_list|,
name|GL_COMPRESSED_SRGB8_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_RGBA8_ETC2_EAC
argument_list|,
name|GL_COMPRESSED_RGBA8_ETC2_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_EXT_texture_compression_dxt1
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
argument_list|,
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_ANGLE_texture_compression_dxt3
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_ANGLE_texture_compression_dxt5
name|set
operator|.
name|insert
argument_list|(
name|FormatInfo
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
DECL|function|GetES3FormatSet
specifier|static
specifier|const
name|ES3FormatSet
modifier|&
name|GetES3FormatSet
parameter_list|()
block|{
specifier|static
specifier|const
name|ES3FormatSet
name|es3FormatSet
init|=
name|BuildES3FormatSet
argument_list|()
decl_stmt|;
return|return
name|es3FormatSet
return|;
block|}
comment|// Map of sizes of input types
DECL|struct|TypeInfo
struct|struct
name|TypeInfo
block|{
DECL|member|mTypeBytes
name|GLuint
name|mTypeBytes
decl_stmt|;
DECL|member|mSpecialInterpretation
name|bool
name|mSpecialInterpretation
decl_stmt|;
DECL|function|TypeInfo
name|TypeInfo
parameter_list|()
member_init_list|:
name|mTypeBytes
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mSpecialInterpretation
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|TypeInfo
name|TypeInfo
parameter_list|(
name|GLuint
name|typeBytes
parameter_list|,
name|bool
name|specialInterpretation
parameter_list|)
member_init_list|:
name|mTypeBytes
argument_list|(
name|typeBytes
argument_list|)
member_init_list|,
name|mSpecialInterpretation
argument_list|(
name|specialInterpretation
argument_list|)
block|{ }
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|TypeInfo
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|memcmp
argument_list|(
name|this
argument_list|,
operator|&
name|other
argument_list|,
sizeof|sizeof
argument_list|(
name|TypeInfo
argument_list|)
argument_list|)
operator|<
literal|0
return|;
block|}
block|}
struct|;
DECL|typedef|TypeInfoPair
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|GLenum
argument_list|,
name|TypeInfo
argument_list|>
name|TypeInfoPair
typedef|;
DECL|typedef|TypeInfoMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|GLenum
argument_list|,
name|TypeInfo
argument_list|>
name|TypeInfoMap
typedef|;
DECL|function|BuildTypeInfoMap
specifier|static
name|TypeInfoMap
name|BuildTypeInfoMap
parameter_list|()
block|{
name|TypeInfoMap
name|map
decl_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|TypeInfo
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_BYTE
argument_list|,
name|TypeInfo
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_UNSIGNED_SHORT
argument_list|,
name|TypeInfo
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_SHORT
argument_list|,
name|TypeInfo
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_UNSIGNED_INT
argument_list|,
name|TypeInfo
argument_list|(
literal|4
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_INT
argument_list|,
name|TypeInfo
argument_list|(
literal|4
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_HALF_FLOAT
argument_list|,
name|TypeInfo
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_HALF_FLOAT_OES
argument_list|,
name|TypeInfo
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_FLOAT
argument_list|,
name|TypeInfo
argument_list|(
literal|4
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_UNSIGNED_SHORT_5_6_5
argument_list|,
name|TypeInfo
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_UNSIGNED_SHORT_4_4_4_4
argument_list|,
name|TypeInfo
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_UNSIGNED_SHORT_5_5_5_1
argument_list|,
name|TypeInfo
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
argument_list|,
name|TypeInfo
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
argument_list|,
name|TypeInfo
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|,
name|TypeInfo
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_UNSIGNED_INT_24_8
argument_list|,
name|TypeInfo
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_UNSIGNED_INT_10F_11F_11F_REV
argument_list|,
name|TypeInfo
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_UNSIGNED_INT_5_9_9_9_REV
argument_list|,
name|TypeInfo
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_UNSIGNED_INT_24_8_OES
argument_list|,
name|TypeInfo
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|TypeInfoPair
argument_list|(
name|GL_FLOAT_32_UNSIGNED_INT_24_8_REV
argument_list|,
name|TypeInfo
argument_list|(
literal|8
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|function|GetTypeInfo
specifier|static
name|bool
name|GetTypeInfo
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|TypeInfo
modifier|*
name|outTypeInfo
parameter_list|)
block|{
specifier|static
specifier|const
name|TypeInfoMap
name|infoMap
init|=
name|BuildTypeInfoMap
argument_list|()
decl_stmt|;
name|TypeInfoMap
operator|::
name|const_iterator
name|iter
init|=
name|infoMap
operator|.
name|find
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|infoMap
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|outTypeInfo
condition|)
block|{
operator|*
name|outTypeInfo
operator|=
name|iter
operator|->
name|second
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Information about internal formats
DECL|typedef|SupportCheckFunction
typedef|typedef
name|bool
function_decl|(
modifier|*
name|SupportCheckFunction
function_decl|)
parameter_list|(
name|GLuint
parameter_list|,
specifier|const
name|Extensions
modifier|&
parameter_list|)
function_decl|;
DECL|function|AlwaysSupported
specifier|static
name|bool
name|AlwaysSupported
parameter_list|(
name|GLuint
parameter_list|,
specifier|const
name|Extensions
modifier|&
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
DECL|function|UnimplementedSupport
specifier|static
name|bool
name|UnimplementedSupport
parameter_list|(
name|GLuint
parameter_list|,
specifier|const
name|Extensions
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|NeverSupported
specifier|static
name|bool
name|NeverSupported
parameter_list|(
name|GLuint
parameter_list|,
specifier|const
name|Extensions
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
template|template
parameter_list|<
name|GLuint
name|minCoreGLVersion
parameter_list|>
DECL|function|RequireESVersion
specifier|static
name|bool
name|RequireESVersion
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
parameter_list|)
block|{
return|return
name|clientVersion
operator|>=
name|minCoreGLVersion
return|;
block|}
comment|// Pointer to a boolean memeber of the Extensions struct
DECL|typedef|bool
typedef|typedef
name|bool
argument_list|(
name|Extensions
operator|::
modifier|*
name|ExtensionBool
argument_list|)
expr_stmt|;
comment|// Check support for a single extension
template|template
parameter_list|<
name|ExtensionBool
name|bool1
parameter_list|>
DECL|function|RequireExtension
specifier|static
name|bool
name|RequireExtension
parameter_list|(
name|GLuint
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|extensions
operator|.*
name|bool1
return|;
block|}
comment|// Check for a minimum client version or a single extension
template|template
parameter_list|<
name|GLuint
name|minCoreGLVersion
parameter_list|,
name|ExtensionBool
name|bool1
parameter_list|>
DECL|function|RequireESVersionOrExtension
specifier|static
name|bool
name|RequireESVersionOrExtension
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|clientVersion
operator|>=
name|minCoreGLVersion
operator|||
name|extensions
operator|.*
name|bool1
return|;
block|}
comment|// Check for a minimum client version or two extensions
template|template
parameter_list|<
name|GLuint
name|minCoreGLVersion
parameter_list|,
name|ExtensionBool
name|bool1
parameter_list|,
name|ExtensionBool
name|bool2
parameter_list|>
DECL|function|RequireESVersionOrExtensions
specifier|static
name|bool
name|RequireESVersionOrExtensions
parameter_list|(
name|GLuint
name|clientVersion
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|clientVersion
operator|>=
name|minCoreGLVersion
operator|||
operator|(
name|extensions
operator|.*
name|bool1
operator|||
name|extensions
operator|.*
name|bool2
operator|)
return|;
block|}
comment|// Check support for two extensions
template|template
parameter_list|<
name|ExtensionBool
name|bool1
parameter_list|,
name|ExtensionBool
name|bool2
parameter_list|>
DECL|function|RequireExtensions
specifier|static
name|bool
name|RequireExtensions
parameter_list|(
name|GLuint
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|)
block|{
return|return
name|extensions
operator|.*
name|bool1
operator|||
name|extensions
operator|.*
name|bool2
return|;
block|}
DECL|struct|InternalFormatInfo
struct|struct
name|InternalFormatInfo
block|{
DECL|member|mRedBits
name|GLuint
name|mRedBits
decl_stmt|;
DECL|member|mGreenBits
name|GLuint
name|mGreenBits
decl_stmt|;
DECL|member|mBlueBits
name|GLuint
name|mBlueBits
decl_stmt|;
DECL|member|mLuminanceBits
name|GLuint
name|mLuminanceBits
decl_stmt|;
DECL|member|mAlphaBits
name|GLuint
name|mAlphaBits
decl_stmt|;
DECL|member|mSharedBits
name|GLuint
name|mSharedBits
decl_stmt|;
DECL|member|mDepthBits
name|GLuint
name|mDepthBits
decl_stmt|;
DECL|member|mStencilBits
name|GLuint
name|mStencilBits
decl_stmt|;
DECL|member|mPixelBits
name|GLuint
name|mPixelBits
decl_stmt|;
DECL|member|mComponentCount
name|GLuint
name|mComponentCount
decl_stmt|;
DECL|member|mCompressedBlockWidth
name|GLuint
name|mCompressedBlockWidth
decl_stmt|;
DECL|member|mCompressedBlockHeight
name|GLuint
name|mCompressedBlockHeight
decl_stmt|;
DECL|member|mFormat
name|GLenum
name|mFormat
decl_stmt|;
DECL|member|mType
name|GLenum
name|mType
decl_stmt|;
DECL|member|mComponentType
name|GLenum
name|mComponentType
decl_stmt|;
DECL|member|mColorEncoding
name|GLenum
name|mColorEncoding
decl_stmt|;
DECL|member|mIsCompressed
name|bool
name|mIsCompressed
decl_stmt|;
DECL|member|mTextureSupportFunction
name|SupportCheckFunction
name|mTextureSupportFunction
decl_stmt|;
DECL|member|mRenderSupportFunction
name|SupportCheckFunction
name|mRenderSupportFunction
decl_stmt|;
DECL|member|mFilterSupportFunction
name|SupportCheckFunction
name|mFilterSupportFunction
decl_stmt|;
DECL|function|InternalFormatInfo
name|InternalFormatInfo
parameter_list|()
member_init_list|:
name|mRedBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mGreenBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mBlueBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mLuminanceBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mAlphaBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mSharedBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mDepthBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mStencilBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mPixelBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mComponentCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mCompressedBlockWidth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mCompressedBlockHeight
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mFormat
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|mType
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|mComponentType
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|mColorEncoding
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|mIsCompressed
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mTextureSupportFunction
argument_list|(
name|NeverSupported
argument_list|)
member_init_list|,
name|mRenderSupportFunction
argument_list|(
name|NeverSupported
argument_list|)
member_init_list|,
name|mFilterSupportFunction
argument_list|(
name|NeverSupported
argument_list|)
block|{     }
DECL|function|UnsizedFormat
specifier|static
name|InternalFormatInfo
name|UnsizedFormat
parameter_list|(
name|GLenum
name|format
parameter_list|,
name|SupportCheckFunction
name|textureSupport
parameter_list|,
name|SupportCheckFunction
name|renderSupport
parameter_list|,
name|SupportCheckFunction
name|filterSupport
parameter_list|)
block|{
name|InternalFormatInfo
name|formatInfo
decl_stmt|;
name|formatInfo
operator|.
name|mFormat
operator|=
name|format
expr_stmt|;
name|formatInfo
operator|.
name|mTextureSupportFunction
operator|=
name|textureSupport
expr_stmt|;
name|formatInfo
operator|.
name|mRenderSupportFunction
operator|=
name|renderSupport
expr_stmt|;
name|formatInfo
operator|.
name|mFilterSupportFunction
operator|=
name|filterSupport
expr_stmt|;
return|return
name|formatInfo
return|;
block|}
DECL|function|RGBAFormat
specifier|static
name|InternalFormatInfo
name|RGBAFormat
parameter_list|(
name|GLuint
name|red
parameter_list|,
name|GLuint
name|green
parameter_list|,
name|GLuint
name|blue
parameter_list|,
name|GLuint
name|alpha
parameter_list|,
name|GLuint
name|shared
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLenum
name|componentType
parameter_list|,
name|bool
name|srgb
parameter_list|,
name|SupportCheckFunction
name|textureSupport
parameter_list|,
name|SupportCheckFunction
name|renderSupport
parameter_list|,
name|SupportCheckFunction
name|filterSupport
parameter_list|)
block|{
name|InternalFormatInfo
name|formatInfo
decl_stmt|;
name|formatInfo
operator|.
name|mRedBits
operator|=
name|red
expr_stmt|;
name|formatInfo
operator|.
name|mGreenBits
operator|=
name|green
expr_stmt|;
name|formatInfo
operator|.
name|mBlueBits
operator|=
name|blue
expr_stmt|;
name|formatInfo
operator|.
name|mAlphaBits
operator|=
name|alpha
expr_stmt|;
name|formatInfo
operator|.
name|mSharedBits
operator|=
name|shared
expr_stmt|;
name|formatInfo
operator|.
name|mPixelBits
operator|=
name|red
operator|+
name|green
operator|+
name|blue
operator|+
name|alpha
operator|+
name|shared
expr_stmt|;
name|formatInfo
operator|.
name|mComponentCount
operator|=
operator|(
operator|(
name|red
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
operator|(
name|green
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
operator|(
name|blue
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
operator|(
name|alpha
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|formatInfo
operator|.
name|mFormat
operator|=
name|format
expr_stmt|;
name|formatInfo
operator|.
name|mType
operator|=
name|type
expr_stmt|;
name|formatInfo
operator|.
name|mComponentType
operator|=
name|componentType
expr_stmt|;
name|formatInfo
operator|.
name|mColorEncoding
operator|=
operator|(
name|srgb
condition|?
name|GL_SRGB
else|:
name|GL_LINEAR
operator|)
expr_stmt|;
name|formatInfo
operator|.
name|mTextureSupportFunction
operator|=
name|textureSupport
expr_stmt|;
name|formatInfo
operator|.
name|mRenderSupportFunction
operator|=
name|renderSupport
expr_stmt|;
name|formatInfo
operator|.
name|mFilterSupportFunction
operator|=
name|filterSupport
expr_stmt|;
return|return
name|formatInfo
return|;
block|}
DECL|function|LUMAFormat
specifier|static
name|InternalFormatInfo
name|LUMAFormat
parameter_list|(
name|GLuint
name|luminance
parameter_list|,
name|GLuint
name|alpha
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLenum
name|componentType
parameter_list|,
name|SupportCheckFunction
name|textureSupport
parameter_list|,
name|SupportCheckFunction
name|renderSupport
parameter_list|,
name|SupportCheckFunction
name|filterSupport
parameter_list|)
block|{
name|InternalFormatInfo
name|formatInfo
decl_stmt|;
name|formatInfo
operator|.
name|mLuminanceBits
operator|=
name|luminance
expr_stmt|;
name|formatInfo
operator|.
name|mAlphaBits
operator|=
name|alpha
expr_stmt|;
name|formatInfo
operator|.
name|mPixelBits
operator|=
name|luminance
operator|+
name|alpha
expr_stmt|;
name|formatInfo
operator|.
name|mComponentCount
operator|=
operator|(
operator|(
name|luminance
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
operator|(
name|alpha
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|formatInfo
operator|.
name|mFormat
operator|=
name|format
expr_stmt|;
name|formatInfo
operator|.
name|mType
operator|=
name|type
expr_stmt|;
name|formatInfo
operator|.
name|mComponentType
operator|=
name|componentType
expr_stmt|;
name|formatInfo
operator|.
name|mColorEncoding
operator|=
name|GL_LINEAR
expr_stmt|;
name|formatInfo
operator|.
name|mTextureSupportFunction
operator|=
name|textureSupport
expr_stmt|;
name|formatInfo
operator|.
name|mRenderSupportFunction
operator|=
name|renderSupport
expr_stmt|;
name|formatInfo
operator|.
name|mFilterSupportFunction
operator|=
name|filterSupport
expr_stmt|;
return|return
name|formatInfo
return|;
block|}
DECL|function|DepthStencilFormat
specifier|static
name|InternalFormatInfo
name|DepthStencilFormat
parameter_list|(
name|GLuint
name|depthBits
parameter_list|,
name|GLuint
name|stencilBits
parameter_list|,
name|GLuint
name|unusedBits
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLenum
name|componentType
parameter_list|,
name|SupportCheckFunction
name|textureSupport
parameter_list|,
name|SupportCheckFunction
name|renderSupport
parameter_list|,
name|SupportCheckFunction
name|filterSupport
parameter_list|)
block|{
name|InternalFormatInfo
name|formatInfo
decl_stmt|;
name|formatInfo
operator|.
name|mDepthBits
operator|=
name|depthBits
expr_stmt|;
name|formatInfo
operator|.
name|mStencilBits
operator|=
name|stencilBits
expr_stmt|;
name|formatInfo
operator|.
name|mPixelBits
operator|=
name|depthBits
operator|+
name|stencilBits
operator|+
name|unusedBits
expr_stmt|;
name|formatInfo
operator|.
name|mComponentCount
operator|=
operator|(
operator|(
name|depthBits
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
operator|(
name|stencilBits
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|formatInfo
operator|.
name|mFormat
operator|=
name|format
expr_stmt|;
name|formatInfo
operator|.
name|mType
operator|=
name|type
expr_stmt|;
name|formatInfo
operator|.
name|mComponentType
operator|=
name|componentType
expr_stmt|;
name|formatInfo
operator|.
name|mColorEncoding
operator|=
name|GL_LINEAR
expr_stmt|;
name|formatInfo
operator|.
name|mTextureSupportFunction
operator|=
name|textureSupport
expr_stmt|;
name|formatInfo
operator|.
name|mRenderSupportFunction
operator|=
name|renderSupport
expr_stmt|;
name|formatInfo
operator|.
name|mFilterSupportFunction
operator|=
name|filterSupport
expr_stmt|;
return|return
name|formatInfo
return|;
block|}
DECL|function|CompressedFormat
specifier|static
name|InternalFormatInfo
name|CompressedFormat
parameter_list|(
name|GLuint
name|compressedBlockWidth
parameter_list|,
name|GLuint
name|compressedBlockHeight
parameter_list|,
name|GLuint
name|compressedBlockSize
parameter_list|,
name|GLuint
name|componentCount
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|bool
name|srgb
parameter_list|,
name|SupportCheckFunction
name|textureSupport
parameter_list|,
name|SupportCheckFunction
name|renderSupport
parameter_list|,
name|SupportCheckFunction
name|filterSupport
parameter_list|)
block|{
name|InternalFormatInfo
name|formatInfo
decl_stmt|;
name|formatInfo
operator|.
name|mCompressedBlockWidth
operator|=
name|compressedBlockWidth
expr_stmt|;
name|formatInfo
operator|.
name|mCompressedBlockHeight
operator|=
name|compressedBlockHeight
expr_stmt|;
name|formatInfo
operator|.
name|mPixelBits
operator|=
name|compressedBlockSize
expr_stmt|;
name|formatInfo
operator|.
name|mComponentCount
operator|=
name|componentCount
expr_stmt|;
name|formatInfo
operator|.
name|mFormat
operator|=
name|format
expr_stmt|;
name|formatInfo
operator|.
name|mType
operator|=
name|type
expr_stmt|;
name|formatInfo
operator|.
name|mComponentType
operator|=
name|GL_UNSIGNED_NORMALIZED
expr_stmt|;
name|formatInfo
operator|.
name|mColorEncoding
operator|=
operator|(
name|srgb
condition|?
name|GL_SRGB
else|:
name|GL_LINEAR
operator|)
expr_stmt|;
name|formatInfo
operator|.
name|mIsCompressed
operator|=
literal|true
expr_stmt|;
name|formatInfo
operator|.
name|mTextureSupportFunction
operator|=
name|textureSupport
expr_stmt|;
name|formatInfo
operator|.
name|mRenderSupportFunction
operator|=
name|renderSupport
expr_stmt|;
name|formatInfo
operator|.
name|mFilterSupportFunction
operator|=
name|filterSupport
expr_stmt|;
return|return
name|formatInfo
return|;
block|}
block|}
struct|;
DECL|typedef|InternalFormatInfoPair
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|GLenum
argument_list|,
name|InternalFormatInfo
argument_list|>
name|InternalFormatInfoPair
typedef|;
DECL|typedef|InternalFormatInfoMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|GLenum
argument_list|,
name|InternalFormatInfo
argument_list|>
name|InternalFormatInfoMap
typedef|;
DECL|function|BuildInternalFormatInfoMap
specifier|static
name|InternalFormatInfoMap
name|BuildInternalFormatInfoMap
parameter_list|()
block|{
name|InternalFormatInfoMap
name|map
decl_stmt|;
comment|// From ES 3.0.1 spec, table 3.12
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_NONE
argument_list|,
name|InternalFormatInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//                               | Internal format     |                              | R | G | B | A |S | Format         | Type                           | Component type        | SRGB | Texture supported                                    | Renderable      | Filterable    |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R8
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureRG
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R8_SNORM
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_SIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG8
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureRG
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG8_SNORM
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_SIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB8
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|rgb8rgba8
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB8_SNORM
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_SIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB565
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_SHORT_5_6_5
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|2
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA4
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_4_4_4_4
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|2
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB5_A1
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_SHORT_5_5_5_1
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|2
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA8
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|rgb8rgba8
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA8_SNORM
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_SIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB10_A2
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB10_A2UI
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_INT_2_10_10_10_REV
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_SRGB8
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|true
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|sRGB
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_SRGB8_ALPHA8
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|true
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|sRGB
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R11F_G11F_B10F
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|11
argument_list|,
literal|11
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_INT_10F_11F_11F_REV
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|colorBufferFloat
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB9_E5
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|9
argument_list|,
literal|9
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
name|GL_RGB
argument_list|,
name|GL_UNSIGNED_INT_5_9_9_9_REV
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R8I
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R8UI
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R16I
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R16UI
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R32I
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R32UI
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG8I
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG8UI
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG16I
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG16UI
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG32I
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG32UI
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB8I
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB8UI
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB16I
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB16UI
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB32I
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB32UI
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA8I
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_BYTE
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA8UI
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA16I
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_SHORT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA16UI
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA32I
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_INT
argument_list|,
name|GL_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA32UI
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
name|GL_RGBA_INTEGER
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
literal|false
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_BGRA8_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFormatBGRA8888
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_BGRA4_ANGLEX
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFormatBGRA8888
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_BGR5_A1_ANGLEX
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|GL_BGRA_EXT
argument_list|,
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
literal|false
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFormatBGRA8888
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Floating point renderability and filtering is provided by OES_texture_float and OES_texture_half_float
comment|//                               | Internal format        |                                   | D |S | Format             | Type                           | Comp   | SRGB |  Texture supported                                                                     | Renderable     | Filterable                                          |
comment|//                               |                        |                                   |   |  |                    |                                | type   |      |                                                                                        |                |                                                     |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R16F
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|RequireESVersionOrExtensions
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureHalfFloat
argument_list|,
operator|&
name|Extensions
operator|::
name|textureRG
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureHalfFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG16F
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|RequireESVersionOrExtensions
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureHalfFloat
argument_list|,
operator|&
name|Extensions
operator|::
name|textureRG
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureHalfFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB16F
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureHalfFloat
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureHalfFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA16F
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureHalfFloat
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureHalfFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_R32F
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RED
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|RequireESVersionOrExtensions
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureFloat
argument_list|,
operator|&
name|Extensions
operator|::
name|textureRG
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG32F
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RG
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|RequireESVersionOrExtensions
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureFloat
argument_list|,
operator|&
name|Extensions
operator|::
name|textureRG
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB32F
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_RGB
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureFloat
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA32F
argument_list|,
name|InternalFormatInfo
operator|::
name|RGBAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|,
literal|0
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
literal|false
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureFloat
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFloatLinear
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Depth stencil formats
comment|//                               | Internal format         |                                      | D |S | X | Format            | Type                             | Component type        | Supported     |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH_COMPONENT16
argument_list|,
name|InternalFormatInfo
operator|::
name|DepthStencilFormat
argument_list|(
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireESVersion
argument_list|<
literal|2
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|depthTextures
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH_COMPONENT24
argument_list|,
name|InternalFormatInfo
operator|::
name|DepthStencilFormat
argument_list|(
literal|24
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|depthTextures
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH_COMPONENT32F
argument_list|,
name|InternalFormatInfo
operator|::
name|DepthStencilFormat
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|depthTextures
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH_COMPONENT32_OES
argument_list|,
name|InternalFormatInfo
operator|::
name|DepthStencilFormat
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|depthTextures
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH24_STENCIL8
argument_list|,
name|InternalFormatInfo
operator|::
name|DepthStencilFormat
argument_list|(
literal|24
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_DEPTH_STENCIL
argument_list|,
name|GL_UNSIGNED_INT_24_8
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|2
argument_list|,
operator|&
name|Extensions
operator|::
name|depthTextures
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH32F_STENCIL8
argument_list|,
name|InternalFormatInfo
operator|::
name|DepthStencilFormat
argument_list|(
literal|32
argument_list|,
literal|8
argument_list|,
literal|24
argument_list|,
name|GL_DEPTH_STENCIL
argument_list|,
name|GL_FLOAT_32_UNSIGNED_INT_24_8_REV
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_STENCIL_INDEX8
argument_list|,
name|InternalFormatInfo
operator|::
name|DepthStencilFormat
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_DEPTH_STENCIL
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|RequireESVersion
argument_list|<
literal|2
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Luminance alpha formats
comment|//                               | Internal format          |                              | L | A | Format            | Type            | Component type        | Supported                                                                    | Renderable    | Filterable    |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_ALPHA8_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|LUMAFormat
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE8_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|LUMAFormat
argument_list|(
literal|8
argument_list|,
literal|0
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_ALPHA32F_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|LUMAFormat
argument_list|(
literal|0
argument_list|,
literal|32
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireExtensions
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|,
operator|&
name|Extensions
operator|::
name|textureFloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE32F_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|LUMAFormat
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireExtensions
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|,
operator|&
name|Extensions
operator|::
name|textureFloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_ALPHA16F_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|LUMAFormat
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|,
name|GL_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireExtensions
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|,
operator|&
name|Extensions
operator|::
name|textureHalfFloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE16F_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|LUMAFormat
argument_list|(
literal|16
argument_list|,
literal|0
argument_list|,
name|GL_LUMINANCE
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireExtensions
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|,
operator|&
name|Extensions
operator|::
name|textureHalfFloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE8_ALPHA8_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|LUMAFormat
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|GL_UNSIGNED_NORMALIZED
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE_ALPHA32F_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|LUMAFormat
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireExtensions
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|,
operator|&
name|Extensions
operator|::
name|textureFloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE_ALPHA16F_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|LUMAFormat
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_HALF_FLOAT
argument_list|,
name|GL_FLOAT
argument_list|,
name|RequireExtensions
argument_list|<
operator|&
name|Extensions
operator|::
name|textureStorage
argument_list|,
operator|&
name|Extensions
operator|::
name|textureHalfFloat
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unsized formats
comment|//                               | Internal format   |                                 | Format            | Supported                                                      | Renderable     | Filterable     |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_ALPHA
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_ALPHA
argument_list|,
name|RequireESVersion
argument_list|<
literal|2
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|RequireESVersion
argument_list|<
literal|2
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_LUMINANCE_ALPHA
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_LUMINANCE_ALPHA
argument_list|,
name|RequireESVersion
argument_list|<
literal|2
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RED
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_RED
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureRG
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_RG
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|textureRG
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_RGB
argument_list|,
name|RequireESVersion
argument_list|<
literal|2
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_RGBA
argument_list|,
name|RequireESVersion
argument_list|<
literal|2
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RED_INTEGER
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_RED_INTEGER
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RG_INTEGER
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_RG_INTEGER
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGB_INTEGER
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_RGB_INTEGER
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_RGBA_INTEGER
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_RGBA_INTEGER
argument_list|,
name|RequireESVersion
argument_list|<
literal|3
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|NeverSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_BGRA_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_BGRA_EXT
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureFormatBGRA8888
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH_COMPONENT
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_DEPTH_COMPONENT
argument_list|,
name|RequireESVersion
argument_list|<
literal|2
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_DEPTH_STENCIL
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_DEPTH_STENCIL
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|packedDepthStencil
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_SRGB_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_RGB
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|sRGB
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_SRGB_ALPHA_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|UnsizedFormat
argument_list|(
name|GL_RGBA
argument_list|,
name|RequireESVersionOrExtension
argument_list|<
literal|3
argument_list|,
operator|&
name|Extensions
operator|::
name|sRGB
argument_list|>
argument_list|,
name|AlwaysSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Compressed formats, From ES 3.0.1 spec, table 3.16
comment|//                               | Internal format                             |                                    |W |H | BS |CC| Format                                      | Type            | SRGB | Supported          | Renderable           | Filterable         |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_R11_EAC
argument_list|,
name|InternalFormatInfo
operator|::
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
name|GL_COMPRESSED_R11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SIGNED_R11_EAC
argument_list|,
name|InternalFormatInfo
operator|::
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|1
argument_list|,
name|GL_COMPRESSED_SIGNED_R11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RG11_EAC
argument_list|,
name|InternalFormatInfo
operator|::
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|2
argument_list|,
name|GL_COMPRESSED_RG11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SIGNED_RG11_EAC
argument_list|,
name|InternalFormatInfo
operator|::
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|2
argument_list|,
name|GL_COMPRESSED_SIGNED_RG11_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGB8_ETC2
argument_list|,
name|InternalFormatInfo
operator|::
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|3
argument_list|,
name|GL_COMPRESSED_RGB8_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ETC2
argument_list|,
name|InternalFormatInfo
operator|::
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|3
argument_list|,
name|GL_COMPRESSED_SRGB8_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|InternalFormatInfo
operator|::
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|3
argument_list|,
name|GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|InternalFormatInfo
operator|::
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|3
argument_list|,
name|GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA8_ETC2_EAC
argument_list|,
name|InternalFormatInfo
operator|::
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA8_ETC2_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
argument_list|,
name|InternalFormatInfo
operator|::
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|,
name|UnimplementedSupport
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_EXT_texture_compression_dxt1
comment|//                               | Internal format                   |                                    |W |H | BS |CC| Format                            | Type            | SRGB | Supported                                           | Renderable           | Filterable         |
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|3
argument_list|,
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionDXT1
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|,
name|InternalFormatInfo
operator|::
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|64
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionDXT1
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_ANGLE_texture_compression_dxt3
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|,
name|InternalFormatInfo
operator|::
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionDXT5
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// From GL_ANGLE_texture_compression_dxt5
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInfoPair
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|,
name|InternalFormatInfo
operator|::
name|CompressedFormat
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|128
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|,
name|RequireExtension
argument_list|<
operator|&
name|Extensions
operator|::
name|textureCompressionDXT5
argument_list|>
argument_list|,
name|NeverSupported
argument_list|,
name|AlwaysSupported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|function|GetInternalFormatMap
specifier|static
specifier|const
name|InternalFormatInfoMap
modifier|&
name|GetInternalFormatMap
parameter_list|()
block|{
specifier|static
specifier|const
name|InternalFormatInfoMap
name|formatMap
init|=
name|BuildInternalFormatInfoMap
argument_list|()
decl_stmt|;
return|return
name|formatMap
return|;
block|}
DECL|function|GetInternalFormatInfo
specifier|static
name|bool
name|GetInternalFormatInfo
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
name|InternalFormatInfo
modifier|*
name|outFormatInfo
parameter_list|)
block|{
specifier|const
name|InternalFormatInfoMap
modifier|&
name|map
init|=
name|GetInternalFormatMap
argument_list|()
decl_stmt|;
name|InternalFormatInfoMap
operator|::
name|const_iterator
name|iter
init|=
name|map
operator|.
name|find
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|map
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|outFormatInfo
condition|)
block|{
operator|*
name|outFormatInfo
operator|=
name|iter
operator|->
name|second
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|function|BuildAllSizedInternalFormatSet
specifier|static
name|FormatSet
name|BuildAllSizedInternalFormatSet
parameter_list|()
block|{
name|FormatSet
name|result
decl_stmt|;
specifier|const
name|InternalFormatInfoMap
modifier|&
name|formats
init|=
name|GetInternalFormatMap
argument_list|()
decl_stmt|;
for|for
control|(
name|InternalFormatInfoMap
operator|::
name|const_iterator
name|i
init|=
name|formats
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|formats
operator|.
name|end
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|->
name|second
operator|.
name|mPixelBits
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|insert
argument_list|(
name|i
operator|->
name|first
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|typedef|TypeSet
typedef|typedef
name|std
operator|::
name|set
argument_list|<
name|GLenum
argument_list|>
name|TypeSet
typedef|;
DECL|struct|EffectiveInternalFormatInfo
struct|struct
name|EffectiveInternalFormatInfo
block|{
DECL|member|mEffectiveFormat
name|GLenum
name|mEffectiveFormat
decl_stmt|;
DECL|member|mDestFormat
name|GLenum
name|mDestFormat
decl_stmt|;
DECL|member|mMinRedBits
name|GLuint
name|mMinRedBits
decl_stmt|;
DECL|member|mMaxRedBits
name|GLuint
name|mMaxRedBits
decl_stmt|;
DECL|member|mMinGreenBits
name|GLuint
name|mMinGreenBits
decl_stmt|;
DECL|member|mMaxGreenBits
name|GLuint
name|mMaxGreenBits
decl_stmt|;
DECL|member|mMinBlueBits
name|GLuint
name|mMinBlueBits
decl_stmt|;
DECL|member|mMaxBlueBits
name|GLuint
name|mMaxBlueBits
decl_stmt|;
DECL|member|mMinAlphaBits
name|GLuint
name|mMinAlphaBits
decl_stmt|;
DECL|member|mMaxAlphaBits
name|GLuint
name|mMaxAlphaBits
decl_stmt|;
DECL|function|EffectiveInternalFormatInfo
name|EffectiveInternalFormatInfo
parameter_list|(
name|GLenum
name|effectiveFormat
parameter_list|,
name|GLenum
name|destFormat
parameter_list|,
name|GLuint
name|minRedBits
parameter_list|,
name|GLuint
name|maxRedBits
parameter_list|,
name|GLuint
name|minGreenBits
parameter_list|,
name|GLuint
name|maxGreenBits
parameter_list|,
name|GLuint
name|minBlueBits
parameter_list|,
name|GLuint
name|maxBlueBits
parameter_list|,
name|GLuint
name|minAlphaBits
parameter_list|,
name|GLuint
name|maxAlphaBits
parameter_list|)
member_init_list|:
name|mEffectiveFormat
argument_list|(
name|effectiveFormat
argument_list|)
member_init_list|,
name|mDestFormat
argument_list|(
name|destFormat
argument_list|)
member_init_list|,
name|mMinRedBits
argument_list|(
name|minRedBits
argument_list|)
member_init_list|,
name|mMaxRedBits
argument_list|(
name|maxRedBits
argument_list|)
member_init_list|,
name|mMinGreenBits
argument_list|(
name|minGreenBits
argument_list|)
member_init_list|,
name|mMaxGreenBits
argument_list|(
name|maxGreenBits
argument_list|)
member_init_list|,
name|mMinBlueBits
argument_list|(
name|minBlueBits
argument_list|)
member_init_list|,
name|mMaxBlueBits
argument_list|(
name|maxBlueBits
argument_list|)
member_init_list|,
name|mMinAlphaBits
argument_list|(
name|minAlphaBits
argument_list|)
member_init_list|,
name|mMaxAlphaBits
argument_list|(
name|maxAlphaBits
argument_list|)
block|{}
empty_stmt|;
block|}
struct|;
DECL|typedef|EffectiveInternalFormatList
typedef|typedef
name|std
operator|::
name|vector
argument_list|<
name|EffectiveInternalFormatInfo
argument_list|>
name|EffectiveInternalFormatList
typedef|;
DECL|function|BuildSizedEffectiveInternalFormatList
specifier|static
name|EffectiveInternalFormatList
name|BuildSizedEffectiveInternalFormatList
parameter_list|()
block|{
name|EffectiveInternalFormatList
name|list
decl_stmt|;
comment|// OpenGL ES 3.0.3 Specification, Table 3.17, pg 141: Effective internal format coresponding to destination internal format and
comment|//                                                    linear source buffer component sizes.
comment|//                                                                            | Source channel min/max sizes |
comment|//                                         Effective Internal Format |  N/A   |  R   |  G   |  B   |  A      |
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_ALPHA8_EXT
argument_list|,
name|GL_NONE
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_R8
argument_list|,
name|GL_NONE
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RG8
argument_list|,
name|GL_NONE
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGB565
argument_list|,
name|GL_NONE
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGB8
argument_list|,
name|GL_NONE
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGBA4
argument_list|,
name|GL_NONE
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGB5_A1
argument_list|,
name|GL_NONE
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGBA8
argument_list|,
name|GL_NONE
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGB10_A2
argument_list|,
name|GL_NONE
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
DECL|function|BuildUnsizedEffectiveInternalFormatList
specifier|static
name|EffectiveInternalFormatList
name|BuildUnsizedEffectiveInternalFormatList
parameter_list|()
block|{
name|EffectiveInternalFormatList
name|list
decl_stmt|;
comment|// OpenGL ES 3.0.3 Specification, Table 3.17, pg 141: Effective internal format coresponding to destination internal format and
comment|//                                                    linear source buffer component sizes.
comment|//                                                                                        |          Source channel min/max sizes            |
comment|//                                         Effective Internal Format |    Dest Format     |     R     |      G     |      B     |      A     |
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_ALPHA8_EXT
argument_list|,
name|GL_ALPHA
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_LUMINANCE8_EXT
argument_list|,
name|GL_LUMINANCE
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_LUMINANCE8_ALPHA8_EXT
argument_list|,
name|GL_LUMINANCE_ALPHA
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGB565
argument_list|,
name|GL_RGB
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGB8
argument_list|,
name|GL_RGB
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
name|UINT_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGBA4
argument_list|,
name|GL_RGBA
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGB5_A1
argument_list|,
name|GL_RGBA
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|push_back
argument_list|(
name|EffectiveInternalFormatInfo
argument_list|(
name|GL_RGBA8
argument_list|,
name|GL_RGBA
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
DECL|function|GetEffectiveInternalFormat
specifier|static
name|bool
name|GetEffectiveInternalFormat
parameter_list|(
specifier|const
name|InternalFormatInfo
modifier|&
name|srcFormat
parameter_list|,
specifier|const
name|InternalFormatInfo
modifier|&
name|destFormat
parameter_list|,
name|GLenum
modifier|*
name|outEffectiveFormat
parameter_list|)
block|{
specifier|const
name|EffectiveInternalFormatList
modifier|*
name|list
init|=
name|NULL
decl_stmt|;
name|GLenum
name|targetFormat
init|=
name|GL_NONE
decl_stmt|;
if|if
condition|(
name|gl
operator|::
name|IsSizedInternalFormat
argument_list|(
name|destFormat
operator|.
name|mFormat
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|EffectiveInternalFormatList
name|sizedList
init|=
name|BuildSizedEffectiveInternalFormatList
argument_list|()
decl_stmt|;
name|list
operator|=
operator|&
name|sizedList
expr_stmt|;
block|}
else|else
block|{
specifier|static
specifier|const
name|EffectiveInternalFormatList
name|unsizedList
init|=
name|BuildUnsizedEffectiveInternalFormatList
argument_list|()
decl_stmt|;
name|list
operator|=
operator|&
name|unsizedList
expr_stmt|;
name|targetFormat
operator|=
name|destFormat
operator|.
name|mFormat
expr_stmt|;
block|}
for|for
control|(
name|size_t
name|curFormat
init|=
literal|0
init|;
name|curFormat
operator|<
name|list
operator|->
name|size
argument_list|()
condition|;
operator|++
name|curFormat
control|)
block|{
specifier|const
name|EffectiveInternalFormatInfo
modifier|&
name|formatInfo
init|=
name|list
operator|->
name|at
argument_list|(
name|curFormat
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|formatInfo
operator|.
name|mDestFormat
operator|==
name|targetFormat
operator|)
operator|&&
operator|(
name|formatInfo
operator|.
name|mMinRedBits
operator|<=
name|srcFormat
operator|.
name|mRedBits
operator|&&
name|formatInfo
operator|.
name|mMaxRedBits
operator|>=
name|srcFormat
operator|.
name|mRedBits
operator|)
operator|&&
operator|(
name|formatInfo
operator|.
name|mMinGreenBits
operator|<=
name|srcFormat
operator|.
name|mGreenBits
operator|&&
name|formatInfo
operator|.
name|mMaxGreenBits
operator|>=
name|srcFormat
operator|.
name|mGreenBits
operator|)
operator|&&
operator|(
name|formatInfo
operator|.
name|mMinBlueBits
operator|<=
name|srcFormat
operator|.
name|mBlueBits
operator|&&
name|formatInfo
operator|.
name|mMaxBlueBits
operator|>=
name|srcFormat
operator|.
name|mBlueBits
operator|)
operator|&&
operator|(
name|formatInfo
operator|.
name|mMinAlphaBits
operator|<=
name|srcFormat
operator|.
name|mAlphaBits
operator|&&
name|formatInfo
operator|.
name|mMaxAlphaBits
operator|>=
name|srcFormat
operator|.
name|mAlphaBits
operator|)
condition|)
block|{
operator|*
name|outEffectiveFormat
operator|=
name|formatInfo
operator|.
name|mEffectiveFormat
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|struct|CopyConversion
struct|struct
name|CopyConversion
block|{
DECL|member|mTextureFormat
name|GLenum
name|mTextureFormat
decl_stmt|;
DECL|member|mFramebufferFormat
name|GLenum
name|mFramebufferFormat
decl_stmt|;
DECL|function|CopyConversion
name|CopyConversion
parameter_list|(
name|GLenum
name|textureFormat
parameter_list|,
name|GLenum
name|framebufferFormat
parameter_list|)
member_init_list|:
name|mTextureFormat
argument_list|(
name|textureFormat
argument_list|)
member_init_list|,
name|mFramebufferFormat
argument_list|(
name|framebufferFormat
argument_list|)
block|{ }
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|CopyConversion
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|memcmp
argument_list|(
name|this
argument_list|,
operator|&
name|other
argument_list|,
sizeof|sizeof
argument_list|(
name|CopyConversion
argument_list|)
argument_list|)
operator|<
literal|0
return|;
block|}
block|}
struct|;
DECL|typedef|CopyConversionSet
typedef|typedef
name|std
operator|::
name|set
argument_list|<
name|CopyConversion
argument_list|>
name|CopyConversionSet
typedef|;
DECL|function|BuildValidES3CopyTexImageCombinations
specifier|static
name|CopyConversionSet
name|BuildValidES3CopyTexImageCombinations
parameter_list|()
block|{
name|CopyConversionSet
name|set
decl_stmt|;
comment|// From ES 3.0.1 spec, table 3.15
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_ALPHA
argument_list|,
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|GL_RED
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|GL_RG
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|GL_RGB
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED
argument_list|,
name|GL_RED
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED
argument_list|,
name|GL_RG
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED
argument_list|,
name|GL_RGB
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED
argument_list|,
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RG
argument_list|,
name|GL_RG
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RG
argument_list|,
name|GL_RGB
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RG
argument_list|,
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGB
argument_list|,
name|GL_RGB
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGB
argument_list|,
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGBA
argument_list|,
name|GL_RGBA
argument_list|)
argument_list|)
expr_stmt|;
comment|// Necessary for ANGLE back-buffers
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_ALPHA
argument_list|,
name|GL_BGRA_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_LUMINANCE
argument_list|,
name|GL_BGRA_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_LUMINANCE_ALPHA
argument_list|,
name|GL_BGRA_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED
argument_list|,
name|GL_BGRA_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RG
argument_list|,
name|GL_BGRA_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGB
argument_list|,
name|GL_BGRA_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGBA
argument_list|,
name|GL_BGRA_EXT
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED_INTEGER
argument_list|,
name|GL_RED_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED_INTEGER
argument_list|,
name|GL_RG_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED_INTEGER
argument_list|,
name|GL_RGB_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RED_INTEGER
argument_list|,
name|GL_RGBA_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RG_INTEGER
argument_list|,
name|GL_RG_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RG_INTEGER
argument_list|,
name|GL_RGB_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RG_INTEGER
argument_list|,
name|GL_RGBA_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGB_INTEGER
argument_list|,
name|GL_RGB_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGB_INTEGER
argument_list|,
name|GL_RGBA_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
name|CopyConversion
argument_list|(
name|GL_RGBA_INTEGER
argument_list|,
name|GL_RGBA_INTEGER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
DECL|function|IsValidInternalFormat
name|bool
name|IsValidInternalFormat
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|,
name|GLuint
name|clientVersion
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|internalFormatInfo
operator|.
name|mTextureSupportFunction
operator|!=
name|NULL
argument_list|)
expr_stmt|;
return|return
name|internalFormatInfo
operator|.
name|mTextureSupportFunction
argument_list|(
name|clientVersion
argument_list|,
name|extensions
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|function|IsValidFormat
name|bool
name|IsValidFormat
parameter_list|(
name|GLenum
name|format
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|,
name|GLuint
name|clientVersion
parameter_list|)
block|{
specifier|const
name|InternalFormatInfoMap
modifier|&
name|internalFormats
init|=
name|GetInternalFormatMap
argument_list|()
decl_stmt|;
for|for
control|(
name|InternalFormatInfoMap
operator|::
name|const_iterator
name|i
init|=
name|internalFormats
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|internalFormats
operator|.
name|end
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|->
name|second
operator|.
name|mFormat
operator|==
name|format
operator|&&
name|i
operator|->
name|second
operator|.
name|mTextureSupportFunction
argument_list|(
name|clientVersion
argument_list|,
name|extensions
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|IsValidType
name|bool
name|IsValidType
parameter_list|(
name|GLenum
name|type
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|,
name|GLuint
name|clientVersion
parameter_list|)
block|{
specifier|const
name|InternalFormatInfoMap
modifier|&
name|internalFormats
init|=
name|GetInternalFormatMap
argument_list|()
decl_stmt|;
for|for
control|(
name|InternalFormatInfoMap
operator|::
name|const_iterator
name|i
init|=
name|internalFormats
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|internalFormats
operator|.
name|end
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|->
name|second
operator|.
name|mType
operator|==
name|type
operator|&&
name|i
operator|->
name|second
operator|.
name|mTextureSupportFunction
argument_list|(
name|clientVersion
argument_list|,
name|extensions
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|IsValidFormatCombination
name|bool
name|IsValidFormatCombination
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|,
name|GLuint
name|clientVersion
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|internalFormatInfo
operator|.
name|mTextureSupportFunction
argument_list|(
name|clientVersion
argument_list|,
name|extensions
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|clientVersion
operator|==
literal|2
condition|)
block|{
specifier|static
specifier|const
name|FormatMap
modifier|&
name|formats
init|=
name|GetFormatMap
argument_list|()
decl_stmt|;
name|FormatMap
operator|::
name|const_iterator
name|iter
init|=
name|formats
operator|.
name|find
argument_list|(
name|FormatTypePair
argument_list|(
name|format
argument_list|,
name|type
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|iter
operator|!=
name|formats
operator|.
name|end
argument_list|()
operator|)
operator|&&
operator|(
operator|(
name|internalFormat
operator|==
operator|(
name|GLint
operator|)
name|type
operator|)
operator|||
operator|(
name|internalFormat
operator|==
name|iter
operator|->
name|second
operator|.
name|mInternalFormat
operator|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|clientVersion
operator|==
literal|3
condition|)
block|{
specifier|static
specifier|const
name|ES3FormatSet
modifier|&
name|formats
init|=
name|GetES3FormatSet
argument_list|()
decl_stmt|;
return|return
name|formats
operator|.
name|find
argument_list|(
name|FormatInfo
argument_list|(
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|)
argument_list|)
operator|!=
name|formats
operator|.
name|end
argument_list|()
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|IsValidCopyTexImageCombination
name|bool
name|IsValidCopyTexImageCombination
parameter_list|(
name|GLenum
name|textureInternalFormat
parameter_list|,
name|GLenum
name|frameBufferInternalFormat
parameter_list|,
name|GLuint
name|readBufferHandle
parameter_list|,
name|GLuint
name|clientVersion
parameter_list|)
block|{
name|InternalFormatInfo
name|textureInternalFormatInfo
decl_stmt|;
name|InternalFormatInfo
name|framebufferInternalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|textureInternalFormat
argument_list|,
operator|&
name|textureInternalFormatInfo
argument_list|)
operator|&&
name|GetInternalFormatInfo
argument_list|(
name|frameBufferInternalFormat
argument_list|,
operator|&
name|framebufferInternalFormatInfo
argument_list|)
condition|)
block|{
if|if
condition|(
name|clientVersion
operator|==
literal|2
condition|)
block|{
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|clientVersion
operator|==
literal|3
condition|)
block|{
specifier|static
specifier|const
name|CopyConversionSet
name|conversionSet
init|=
name|BuildValidES3CopyTexImageCombinations
argument_list|()
decl_stmt|;
specifier|const
name|CopyConversion
name|conversion
init|=
name|CopyConversion
argument_list|(
name|textureInternalFormatInfo
operator|.
name|mFormat
argument_list|,
name|framebufferInternalFormatInfo
operator|.
name|mFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|conversionSet
operator|.
name|find
argument_list|(
name|conversion
argument_list|)
operator|!=
name|conversionSet
operator|.
name|end
argument_list|()
condition|)
block|{
comment|// Section 3.8.5 of the GLES 3.0.3 spec states that source and destination formats
comment|// must both be signed, unsigned, or fixed point and both source and destinations
comment|// must be either both SRGB or both not SRGB. EXT_color_buffer_float adds allowed
comment|// conversion between fixed and floating point.
if|if
condition|(
operator|(
name|textureInternalFormatInfo
operator|.
name|mColorEncoding
operator|==
name|GL_SRGB
operator|)
operator|!=
operator|(
name|framebufferInternalFormatInfo
operator|.
name|mColorEncoding
operator|==
name|GL_SRGB
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
operator|(
name|textureInternalFormatInfo
operator|.
name|mComponentType
operator|==
name|GL_INT
operator|)
operator|!=
operator|(
name|framebufferInternalFormatInfo
operator|.
name|mComponentType
operator|==
name|GL_INT
operator|)
operator|)
operator|||
operator|(
operator|(
name|textureInternalFormatInfo
operator|.
name|mComponentType
operator|==
name|GL_UNSIGNED_INT
operator|)
operator|!=
operator|(
name|framebufferInternalFormatInfo
operator|.
name|mComponentType
operator|==
name|GL_UNSIGNED_INT
operator|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|gl
operator|::
name|IsFloatOrFixedComponentType
argument_list|(
name|textureInternalFormatInfo
operator|.
name|mComponentType
argument_list|)
operator|&&
operator|!
name|gl
operator|::
name|IsFloatOrFixedComponentType
argument_list|(
name|framebufferInternalFormatInfo
operator|.
name|mComponentType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// GLES specification 3.0.3, sec 3.8.5, pg 139-140:
comment|// The effective internal format of the source buffer is determined with the following rules applied in order:
comment|//    * If the source buffer is a texture or renderbuffer that was created with a sized internal format then the
comment|//      effective internal format is the source buffer's sized internal format.
comment|//    * If the source buffer is a texture that was created with an unsized base internal format, then the
comment|//      effective internal format is the source image array's effective internal format, as specified by table
comment|//      3.12, which is determined from the<format> and<type> that were used when the source image array was
comment|//      specified by TexImage*.
comment|//    * Otherwise the effective internal format is determined by the row in table 3.17 or 3.18 where
comment|//      Destination Internal Format matches internalformat and where the [source channel sizes] are consistent
comment|//      with the values of the source buffer's [channel sizes]. Table 3.17 is used if the
comment|//      FRAMEBUFFER_ATTACHMENT_ENCODING is LINEAR and table 3.18 is used if the FRAMEBUFFER_ATTACHMENT_ENCODING
comment|//      is SRGB.
name|InternalFormatInfo
name|sourceEffectiveFormat
decl_stmt|;
if|if
condition|(
name|readBufferHandle
operator|!=
literal|0
condition|)
block|{
comment|// Not the default framebuffer, therefore the read buffer must be a user-created texture or renderbuffer
if|if
condition|(
name|gl
operator|::
name|IsSizedInternalFormat
argument_list|(
name|framebufferInternalFormatInfo
operator|.
name|mFormat
argument_list|)
condition|)
block|{
name|sourceEffectiveFormat
operator|=
name|framebufferInternalFormatInfo
expr_stmt|;
block|}
else|else
block|{
comment|// Renderbuffers cannot be created with an unsized internal format, so this must be an unsized-format
comment|// texture. We can use the same table we use when creating textures to get its effective sized format.
name|GLenum
name|effectiveFormat
init|=
name|gl
operator|::
name|GetSizedInternalFormat
argument_list|(
name|framebufferInternalFormatInfo
operator|.
name|mFormat
argument_list|,
name|framebufferInternalFormatInfo
operator|.
name|mType
argument_list|)
decl_stmt|;
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|effectiveFormat
argument_list|,
operator|&
name|sourceEffectiveFormat
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// The effective internal format must be derived from the source framebuffer's channel sizes.
comment|// This is done in GetEffectiveInternalFormat for linear buffers (table 3.17)
if|if
condition|(
name|framebufferInternalFormatInfo
operator|.
name|mColorEncoding
operator|==
name|GL_LINEAR
condition|)
block|{
name|GLenum
name|effectiveFormat
decl_stmt|;
if|if
condition|(
name|GetEffectiveInternalFormat
argument_list|(
name|framebufferInternalFormatInfo
argument_list|,
name|textureInternalFormatInfo
argument_list|,
operator|&
name|effectiveFormat
argument_list|)
condition|)
block|{
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|effectiveFormat
argument_list|,
operator|&
name|sourceEffectiveFormat
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|framebufferInternalFormatInfo
operator|.
name|mColorEncoding
operator|==
name|GL_SRGB
condition|)
block|{
comment|// SRGB buffers can only be copied to sized format destinations according to table 3.18
if|if
condition|(
name|gl
operator|::
name|IsSizedInternalFormat
argument_list|(
name|textureInternalFormat
argument_list|)
operator|&&
operator|(
name|framebufferInternalFormatInfo
operator|.
name|mRedBits
operator|>=
literal|1
operator|&&
name|framebufferInternalFormatInfo
operator|.
name|mRedBits
operator|<=
literal|8
operator|)
operator|&&
operator|(
name|framebufferInternalFormatInfo
operator|.
name|mGreenBits
operator|>=
literal|1
operator|&&
name|framebufferInternalFormatInfo
operator|.
name|mGreenBits
operator|<=
literal|8
operator|)
operator|&&
operator|(
name|framebufferInternalFormatInfo
operator|.
name|mBlueBits
operator|>=
literal|1
operator|&&
name|framebufferInternalFormatInfo
operator|.
name|mBlueBits
operator|<=
literal|8
operator|)
operator|&&
operator|(
name|framebufferInternalFormatInfo
operator|.
name|mAlphaBits
operator|>=
literal|1
operator|&&
name|framebufferInternalFormatInfo
operator|.
name|mAlphaBits
operator|<=
literal|8
operator|)
condition|)
block|{
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|GL_SRGB8_ALPHA8
argument_list|,
operator|&
name|sourceEffectiveFormat
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|gl
operator|::
name|IsSizedInternalFormat
argument_list|(
name|textureInternalFormatInfo
operator|.
name|mFormat
argument_list|)
condition|)
block|{
comment|// Section 3.8.5 of the GLES 3.0.3 spec, pg 139, requires that, if the destination format is sized,
comment|// component sizes of the source and destination formats must exactly match
if|if
condition|(
name|textureInternalFormatInfo
operator|.
name|mRedBits
operator|!=
name|sourceEffectiveFormat
operator|.
name|mRedBits
operator|||
name|textureInternalFormatInfo
operator|.
name|mGreenBits
operator|!=
name|sourceEffectiveFormat
operator|.
name|mGreenBits
operator|||
name|textureInternalFormatInfo
operator|.
name|mBlueBits
operator|!=
name|sourceEffectiveFormat
operator|.
name|mBlueBits
operator|||
name|textureInternalFormatInfo
operator|.
name|mAlphaBits
operator|!=
name|sourceEffectiveFormat
operator|.
name|mAlphaBits
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
comment|// A conversion function exists, and no rule in the specification has precluded conversion
comment|// between these formats.
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|IsRenderingSupported
name|bool
name|IsRenderingSupported
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|,
name|GLuint
name|clientVersion
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|internalFormatInfo
operator|.
name|mTextureSupportFunction
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|internalFormatInfo
operator|.
name|mRenderSupportFunction
operator|!=
name|NULL
argument_list|)
expr_stmt|;
return|return
name|internalFormatInfo
operator|.
name|mTextureSupportFunction
argument_list|(
name|clientVersion
argument_list|,
name|extensions
argument_list|)
operator|&&
name|internalFormatInfo
operator|.
name|mRenderSupportFunction
argument_list|(
name|clientVersion
argument_list|,
name|extensions
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|function|IsFilteringSupported
name|bool
name|IsFilteringSupported
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|,
name|GLuint
name|clientVersion
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|internalFormatInfo
operator|.
name|mTextureSupportFunction
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|internalFormatInfo
operator|.
name|mFilterSupportFunction
operator|!=
name|NULL
argument_list|)
expr_stmt|;
return|return
name|internalFormatInfo
operator|.
name|mTextureSupportFunction
argument_list|(
name|clientVersion
argument_list|,
name|extensions
argument_list|)
operator|&&
name|internalFormatInfo
operator|.
name|mFilterSupportFunction
argument_list|(
name|clientVersion
argument_list|,
name|extensions
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|function|IsSizedInternalFormat
name|bool
name|IsSizedInternalFormat
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mPixelBits
operator|>
literal|0
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|GetSizedInternalFormat
name|GLenum
name|GetSizedInternalFormat
parameter_list|(
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|)
block|{
specifier|const
name|FormatMap
modifier|&
name|formats
init|=
name|GetFormatMap
argument_list|()
decl_stmt|;
name|FormatMap
operator|::
name|const_iterator
name|iter
init|=
name|formats
operator|.
name|find
argument_list|(
name|FormatTypePair
argument_list|(
name|format
argument_list|,
name|type
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|iter
operator|!=
name|formats
operator|.
name|end
argument_list|()
operator|)
condition|?
name|iter
operator|->
name|second
operator|.
name|mInternalFormat
else|:
name|GL_NONE
return|;
block|}
DECL|function|GetPixelBytes
name|GLuint
name|GetPixelBytes
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mPixelBits
operator|/
literal|8
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetAlphaBits
name|GLuint
name|GetAlphaBits
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mAlphaBits
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetRedBits
name|GLuint
name|GetRedBits
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mRedBits
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetGreenBits
name|GLuint
name|GetGreenBits
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mGreenBits
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetBlueBits
name|GLuint
name|GetBlueBits
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mBlueBits
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetLuminanceBits
name|GLuint
name|GetLuminanceBits
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mLuminanceBits
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetDepthBits
name|GLuint
name|GetDepthBits
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mDepthBits
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetStencilBits
name|GLuint
name|GetStencilBits
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mStencilBits
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetTypeBytes
name|GLuint
name|GetTypeBytes
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
name|TypeInfo
name|typeInfo
decl_stmt|;
if|if
condition|(
name|GetTypeInfo
argument_list|(
name|type
argument_list|,
operator|&
name|typeInfo
argument_list|)
condition|)
block|{
return|return
name|typeInfo
operator|.
name|mTypeBytes
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|IsSpecialInterpretationType
name|bool
name|IsSpecialInterpretationType
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
name|TypeInfo
name|typeInfo
decl_stmt|;
if|if
condition|(
name|GetTypeInfo
argument_list|(
name|type
argument_list|,
operator|&
name|typeInfo
argument_list|)
condition|)
block|{
return|return
name|typeInfo
operator|.
name|mSpecialInterpretation
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|IsFloatOrFixedComponentType
name|bool
name|IsFloatOrFixedComponentType
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_NORMALIZED
operator|||
name|type
operator|==
name|GL_SIGNED_NORMALIZED
operator|||
name|type
operator|==
name|GL_FLOAT
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|function|GetFormat
name|GLenum
name|GetFormat
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mFormat
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|GL_NONE
return|;
block|}
block|}
DECL|function|GetType
name|GLenum
name|GetType
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mType
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|GL_NONE
return|;
block|}
block|}
DECL|function|GetComponentType
name|GLenum
name|GetComponentType
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mComponentType
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|GL_NONE
return|;
block|}
block|}
DECL|function|GetComponentCount
name|GLuint
name|GetComponentCount
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mComponentCount
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|GetColorEncoding
name|GLenum
name|GetColorEncoding
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mColorEncoding
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|GetRowPitch
name|GLuint
name|GetRowPitch
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLint
name|alignment
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|alignment
operator|>
literal|0
operator|&&
name|isPow2
argument_list|(
name|alignment
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rx
operator|::
name|roundUp
argument_list|(
name|GetBlockSize
argument_list|(
name|internalFormat
argument_list|,
name|type
argument_list|,
name|width
argument_list|,
literal|1
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|alignment
argument_list|)
argument_list|)
return|;
block|}
DECL|function|GetDepthPitch
name|GLuint
name|GetDepthPitch
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|alignment
parameter_list|)
block|{
return|return
name|GetRowPitch
argument_list|(
name|internalFormat
argument_list|,
name|type
argument_list|,
name|width
argument_list|,
name|alignment
argument_list|)
operator|*
name|height
return|;
block|}
DECL|function|GetBlockSize
name|GLuint
name|GetBlockSize
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
if|if
condition|(
name|internalFormatInfo
operator|.
name|mIsCompressed
condition|)
block|{
name|GLsizei
name|numBlocksWide
init|=
operator|(
name|width
operator|+
name|internalFormatInfo
operator|.
name|mCompressedBlockWidth
operator|-
literal|1
operator|)
operator|/
name|internalFormatInfo
operator|.
name|mCompressedBlockWidth
decl_stmt|;
name|GLsizei
name|numBlocksHight
init|=
operator|(
name|height
operator|+
name|internalFormatInfo
operator|.
name|mCompressedBlockHeight
operator|-
literal|1
operator|)
operator|/
name|internalFormatInfo
operator|.
name|mCompressedBlockHeight
decl_stmt|;
return|return
operator|(
name|internalFormatInfo
operator|.
name|mPixelBits
operator|*
name|numBlocksWide
operator|*
name|numBlocksHight
operator|)
operator|/
literal|8
return|;
block|}
else|else
block|{
name|TypeInfo
name|typeInfo
decl_stmt|;
if|if
condition|(
name|GetTypeInfo
argument_list|(
name|type
argument_list|,
operator|&
name|typeInfo
argument_list|)
condition|)
block|{
if|if
condition|(
name|typeInfo
operator|.
name|mSpecialInterpretation
condition|)
block|{
return|return
name|typeInfo
operator|.
name|mTypeBytes
operator|*
name|width
operator|*
name|height
return|;
block|}
else|else
block|{
return|return
name|internalFormatInfo
operator|.
name|mComponentCount
operator|*
name|typeInfo
operator|.
name|mTypeBytes
operator|*
name|width
operator|*
name|height
return|;
block|}
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|IsFormatCompressed
name|bool
name|IsFormatCompressed
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mIsCompressed
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|GetCompressedBlockWidth
name|GLuint
name|GetCompressedBlockWidth
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mCompressedBlockWidth
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetCompressedBlockHeight
name|GLuint
name|GetCompressedBlockHeight
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|InternalFormatInfo
name|internalFormatInfo
decl_stmt|;
if|if
condition|(
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|internalFormatInfo
argument_list|)
condition|)
block|{
return|return
name|internalFormatInfo
operator|.
name|mCompressedBlockHeight
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetAllSizedInternalFormats
specifier|const
name|FormatSet
modifier|&
name|GetAllSizedInternalFormats
parameter_list|()
block|{
specifier|static
name|FormatSet
name|formatSet
init|=
name|BuildAllSizedInternalFormatSet
argument_list|()
decl_stmt|;
return|return
name|formatSet
return|;
block|}
DECL|function|GetColorWriteFunction
name|ColorWriteFunction
name|GetColorWriteFunction
parameter_list|(
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|)
block|{
specifier|static
specifier|const
name|FormatMap
modifier|&
name|formats
init|=
name|GetFormatMap
argument_list|()
decl_stmt|;
name|FormatMap
operator|::
name|const_iterator
name|iter
init|=
name|formats
operator|.
name|find
argument_list|(
name|FormatTypePair
argument_list|(
name|format
argument_list|,
name|type
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|iter
operator|!=
name|formats
operator|.
name|end
argument_list|()
operator|)
condition|?
name|iter
operator|->
name|second
operator|.
name|mColorWriteFunction
else|:
name|NULL
return|;
block|}
block|}
end_namespace
end_unit
