begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright(c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// entry_points_gles_2_0_ext.cpp : Implements the GLES 2.0 extension entry points.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/entry_points_gles_2_0_ext.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/global_state.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Buffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Context.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Fence.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Shader.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Query.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/validationES.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/validationES2.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/validationES3.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|GenQueriesEXT
name|void
name|GL_APIENTRY
name|GenQueriesEXT
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* ids = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGenQueriesEXT
argument_list|(
name|context
argument_list|,
name|n
argument_list|,
name|ids
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ids
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createQuery
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|DeleteQueriesEXT
name|void
name|GL_APIENTRY
name|DeleteQueriesEXT
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint *ids = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateDeleteQueriesEXT
argument_list|(
name|context
argument_list|,
name|n
argument_list|,
name|ids
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|->
name|deleteQuery
argument_list|(
name|ids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|IsQueryEXT
name|GLboolean
name|GL_APIENTRY
name|IsQueryEXT
parameter_list|(
name|GLuint
name|id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint id = %d)"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
return|return
operator|(
name|context
operator|->
name|getQuery
argument_list|(
name|id
argument_list|,
literal|false
argument_list|,
name|GL_NONE
argument_list|)
operator|!=
name|NULL
operator|)
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|BeginQueryEXT
name|void
name|GL_APIENTRY
name|BeginQueryEXT
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint %d)"
argument_list|,
name|target
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateBeginQueryEXT
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|id
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|beginQuery
argument_list|(
name|target
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|EndQueryEXT
name|void
name|GL_APIENTRY
name|EndQueryEXT
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"GLenum target = 0x%X)"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateEndQueryEXT
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|endQuery
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|QueryCounterEXT
name|void
name|GL_APIENTRY
name|QueryCounterEXT
parameter_list|(
name|GLuint
name|id
parameter_list|,
name|GLenum
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"GLuint id = %d, GLenum target = 0x%X)"
argument_list|,
name|id
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateQueryCounterEXT
argument_list|(
name|context
argument_list|,
name|id
argument_list|,
name|target
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|queryCounter
argument_list|(
name|id
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetQueryivEXT
name|void
name|GL_APIENTRY
name|GetQueryivEXT
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"GLenum target = 0x%X, GLenum pname = 0x%X, GLint *params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetQueryivEXT
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|getQueryiv
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetQueryObjectivEXT
name|void
name|GL_APIENTRY
name|GetQueryObjectivEXT
parameter_list|(
name|GLuint
name|id
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint id = %d, GLenum pname = 0x%X, GLuint *params = 0x%0.8p)"
argument_list|,
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetQueryObjectivEXT
argument_list|(
name|context
argument_list|,
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|getQueryObjectiv
argument_list|(
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetQueryObjectuivEXT
name|void
name|GL_APIENTRY
name|GetQueryObjectuivEXT
parameter_list|(
name|GLuint
name|id
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLuint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint id = %d, GLenum pname = 0x%X, GLuint *params = 0x%0.8p)"
argument_list|,
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetQueryObjectuivEXT
argument_list|(
name|context
argument_list|,
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|getQueryObjectuiv
argument_list|(
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetQueryObjecti64vEXT
name|void
name|GL_APIENTRY
name|GetQueryObjecti64vEXT
parameter_list|(
name|GLuint
name|id
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint64
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint id = %d, GLenum pname = 0x%X, GLuint *params = 0x%0.16p)"
argument_list|,
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetQueryObjecti64vEXT
argument_list|(
name|context
argument_list|,
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|getQueryObjecti64v
argument_list|(
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetQueryObjectui64vEXT
name|void
name|GL_APIENTRY
name|GetQueryObjectui64vEXT
parameter_list|(
name|GLuint
name|id
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLuint64
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint id = %d, GLenum pname = 0x%X, GLuint *params = 0x%0.16p)"
argument_list|,
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetQueryObjectui64vEXT
argument_list|(
name|context
argument_list|,
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|getQueryObjectui64v
argument_list|(
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|DeleteFencesNV
name|void
name|GL_APIENTRY
name|DeleteFencesNV
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|fences
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* fences = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|fences
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|->
name|deleteFenceNV
argument_list|(
name|fences
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|DrawArraysInstancedANGLE
name|void
name|GL_APIENTRY
name|DrawArraysInstancedANGLE
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLint
name|first
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|primcount
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X, GLint first = %d, GLsizei count = %d, GLsizei primcount = %d)"
argument_list|,
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
name|primcount
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateDrawArraysInstancedANGLE
argument_list|(
name|context
argument_list|,
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
name|primcount
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|drawArraysInstanced
argument_list|(
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
name|primcount
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|DrawElementsInstancedANGLE
name|void
name|GL_APIENTRY
name|DrawElementsInstancedANGLE
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|,
name|GLsizei
name|primcount
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X, GLsizei count = %d, GLenum type = 0x%X, const GLvoid* indices = "
literal|"0x%0.8p, GLsizei primcount = %d)"
argument_list|,
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
name|primcount
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|IndexRange
name|indexRange
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateDrawElementsInstancedANGLE
argument_list|(
name|context
argument_list|,
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
name|primcount
argument_list|,
operator|&
name|indexRange
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|drawElementsInstanced
argument_list|(
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
name|primcount
argument_list|,
name|indexRange
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|FinishFenceNV
name|void
name|GL_APIENTRY
name|FinishFenceNV
parameter_list|(
name|GLuint
name|fence
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint fence = %d)"
argument_list|,
name|fence
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|FenceNV
modifier|*
name|fenceObject
init|=
name|context
operator|->
name|getFenceNV
argument_list|(
name|fence
argument_list|)
decl_stmt|;
if|if
condition|(
name|fenceObject
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|fenceObject
operator|->
name|isSet
argument_list|()
operator|!=
name|GL_TRUE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|fenceObject
operator|->
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|GenFencesNV
name|void
name|GL_APIENTRY
name|GenFencesNV
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|fences
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* fences = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|fences
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|fences
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createFenceNV
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|GetFenceivNV
name|void
name|GL_APIENTRY
name|GetFenceivNV
parameter_list|(
name|GLuint
name|fence
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint fence = %d, GLenum pname = 0x%X, GLint *params = 0x%0.8p)"
argument_list|,
name|fence
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|FenceNV
modifier|*
name|fenceObject
init|=
name|context
operator|->
name|getFenceNV
argument_list|(
name|fence
argument_list|)
decl_stmt|;
if|if
condition|(
name|fenceObject
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|fenceObject
operator|->
name|isSet
argument_list|()
operator|!=
name|GL_TRUE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_FENCE_STATUS_NV
case|:
block|{
comment|// GL_NV_fence spec:
comment|// Once the status of a fence has been finished (via FinishFenceNV) or tested and the returned status is TRUE (via either TestFenceNV
comment|// or GetFenceivNV querying the FENCE_STATUS_NV), the status remains TRUE until the next SetFenceNV of the fence.
name|GLboolean
name|status
init|=
name|GL_TRUE
decl_stmt|;
if|if
condition|(
name|fenceObject
operator|->
name|getStatus
argument_list|()
operator|!=
name|GL_TRUE
condition|)
block|{
name|Error
name|error
init|=
name|fenceObject
operator|->
name|test
argument_list|(
operator|&
name|status
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
operator|*
name|params
operator|=
name|status
expr_stmt|;
break|break;
block|}
case|case
name|GL_FENCE_CONDITION_NV
case|:
block|{
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|fenceObject
operator|->
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
DECL|function|GetGraphicsResetStatusEXT
name|GLenum
name|GL_APIENTRY
name|GetGraphicsResetStatusEXT
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
return|return
name|context
operator|->
name|getResetStatus
argument_list|()
return|;
block|}
return|return
name|GL_NO_ERROR
return|;
block|}
DECL|function|GetTranslatedShaderSourceANGLE
name|void
name|GL_APIENTRY
name|GetTranslatedShaderSourceANGLE
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|source
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* source = 0x%0.8p)"
argument_list|,
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|bufsize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Shader
modifier|*
name|shaderObject
init|=
name|context
operator|->
name|getShader
argument_list|(
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|shaderObject
operator|->
name|getTranslatedSourceWithDebugInfo
argument_list|(
name|bufsize
argument_list|,
name|length
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetnUniformfvEXT
name|void
name|GL_APIENTRY
name|GetnUniformfvEXT
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLint location = %d, GLsizei bufSize = %d, GLfloat* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|bufSize
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetnUniformfvEXT
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|bufSize
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
name|programObject
operator|->
name|getUniformfv
argument_list|(
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetnUniformivEXT
name|void
name|GL_APIENTRY
name|GetnUniformivEXT
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLint location = %d, GLsizei bufSize = %d, GLint* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|bufSize
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetnUniformivEXT
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|bufSize
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
name|programObject
operator|->
name|getUniformiv
argument_list|(
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|IsFenceNV
name|GLboolean
name|GL_APIENTRY
name|IsFenceNV
parameter_list|(
name|GLuint
name|fence
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint fence = %d)"
argument_list|,
name|fence
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|FenceNV
modifier|*
name|fenceObject
init|=
name|context
operator|->
name|getFenceNV
argument_list|(
name|fence
argument_list|)
decl_stmt|;
if|if
condition|(
name|fenceObject
operator|==
name|NULL
condition|)
block|{
return|return
name|GL_FALSE
return|;
block|}
comment|// GL_NV_fence spec:
comment|// A name returned by GenFencesNV, but not yet set via SetFenceNV, is not the name of an existing fence.
return|return
name|fenceObject
operator|->
name|isSet
argument_list|()
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|ReadnPixelsEXT
name|void
name|GL_APIENTRY
name|ReadnPixelsEXT
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLvoid
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d, "
literal|"GLenum format = 0x%X, GLenum type = 0x%X, GLsizei bufSize = 0x%d, GLvoid *data = 0x%0.8p)"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|bufSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|skipValidation
argument_list|()
operator|&&
operator|!
name|ValidateReadnPixelsEXT
argument_list|(
name|context
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|bufSize
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|readPixels
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|RenderbufferStorageMultisampleANGLE
name|void
name|GL_APIENTRY
name|RenderbufferStorageMultisampleANGLE
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|samples
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei samples = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateRenderbufferStorageParametersANGLE
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
return|return;
block|}
name|Renderbuffer
modifier|*
name|renderbuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentRenderbuffer
argument_list|()
decl_stmt|;
name|Error
name|error
init|=
name|renderbuffer
operator|->
name|setStorageMultisample
argument_list|(
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|SetFenceNV
name|void
name|GL_APIENTRY
name|SetFenceNV
parameter_list|(
name|GLuint
name|fence
parameter_list|,
name|GLenum
name|condition
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint fence = %d, GLenum condition = 0x%X)"
argument_list|,
name|fence
argument_list|,
name|condition
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|condition
operator|!=
name|GL_ALL_COMPLETED_NV
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|FenceNV
modifier|*
name|fenceObject
init|=
name|context
operator|->
name|getFenceNV
argument_list|(
name|fence
argument_list|)
decl_stmt|;
if|if
condition|(
name|fenceObject
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Error
name|error
init|=
name|fenceObject
operator|->
name|set
argument_list|(
name|condition
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|TestFenceNV
name|GLboolean
name|GL_APIENTRY
name|TestFenceNV
parameter_list|(
name|GLuint
name|fence
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint fence = %d)"
argument_list|,
name|fence
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|FenceNV
modifier|*
name|fenceObject
init|=
name|context
operator|->
name|getFenceNV
argument_list|(
name|fence
argument_list|)
decl_stmt|;
if|if
condition|(
name|fenceObject
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_TRUE
return|;
block|}
if|if
condition|(
name|fenceObject
operator|->
name|isSet
argument_list|()
operator|!=
name|GL_TRUE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_TRUE
return|;
block|}
name|GLboolean
name|result
decl_stmt|;
name|Error
name|error
init|=
name|fenceObject
operator|->
name|test
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|GL_TRUE
return|;
block|}
return|return
name|result
return|;
block|}
return|return
name|GL_TRUE
return|;
block|}
DECL|function|TexStorage2DEXT
name|void
name|GL_APIENTRY
name|TexStorage2DEXT
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei levels = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureStorage
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
operator|&&
operator|!
name|ValidateES2TexStorageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|&&
operator|!
name|ValidateES3TexStorage2DParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
condition|)
block|{
return|return;
block|}
name|Extents
name|size
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|texture
operator|->
name|setStorage
argument_list|(
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|VertexAttribDivisorANGLE
name|void
name|GL_APIENTRY
name|VertexAttribDivisorANGLE
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLuint
name|divisor
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLuint divisor = %d)"
argument_list|,
name|index
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getLimitations
argument_list|()
operator|.
name|attributeZeroRequiresZeroDivisorInEXT
condition|)
block|{
if|if
condition|(
name|index
operator|==
literal|0
operator|&&
name|divisor
operator|!=
literal|0
condition|)
block|{
specifier|const
name|char
modifier|*
name|errorMessage
init|=
literal|"The current context doesn't support setting a non-zero divisor on the attribute with index zero. "
literal|"Please reorder the attributes in your vertex shader so that attribute zero can have a zero divisor."
decl_stmt|;
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
comment|// We also output an error message to the debugger window if tracing is active, so that developers can see the error message.
name|ERR
argument_list|(
literal|"%s"
argument_list|,
name|errorMessage
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|context
operator|->
name|setVertexAttribDivisor
argument_list|(
name|index
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|BlitFramebufferANGLE
name|void
name|GL_APIENTRY
name|BlitFramebufferANGLE
parameter_list|(
name|GLint
name|srcX0
parameter_list|,
name|GLint
name|srcY0
parameter_list|,
name|GLint
name|srcX1
parameter_list|,
name|GLint
name|srcY1
parameter_list|,
name|GLint
name|dstX0
parameter_list|,
name|GLint
name|dstY0
parameter_list|,
name|GLint
name|dstX1
parameter_list|,
name|GLint
name|dstY1
parameter_list|,
name|GLbitfield
name|mask
parameter_list|,
name|GLenum
name|filter
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint srcX0 = %d, GLint srcY0 = %d, GLint srcX1 = %d, GLint srcY1 = %d, "
literal|"GLint dstX0 = %d, GLint dstY0 = %d, GLint dstX1 = %d, GLint dstY1 = %d, "
literal|"GLbitfield mask = 0x%X, GLenum filter = 0x%X)"
argument_list|,
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcX1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|skipValidation
argument_list|()
operator|&&
operator|!
name|ValidateBlitFramebufferANGLE
argument_list|(
name|context
argument_list|,
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|blitFramebuffer
argument_list|(
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DiscardFramebufferEXT
name|void
name|GL_APIENTRY
name|DiscardFramebufferEXT
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|numAttachments
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei numAttachments = %d, attachments = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|skipValidation
argument_list|()
operator|&&
operator|!
name|ValidateDiscardFramebufferEXT
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|discardFramebuffer
argument_list|(
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|TexImage3DOES
name|void
name|GL_APIENTRY
name|TexImage3DOES
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, "
literal|"GLsizei width = %d, GLsizei height = %d, GLsizei depth = %d, GLint border = %d, "
literal|"GLenum format = 0x%X, GLenum type = 0x%x, const GLvoid* pixels = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
block|}
DECL|function|GetProgramBinaryOES
name|void
name|GL_APIENTRY
name|GetProgramBinaryOES
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLenum
modifier|*
name|binaryFormat
parameter_list|,
name|void
modifier|*
name|binary
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum program = 0x%X, bufSize = %d, length = 0x%0.8p, binaryFormat = 0x%0.8p, binary = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetProgramBinaryOES
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|Error
name|error
init|=
name|programObject
operator|->
name|saveBinary
argument_list|(
name|binaryFormat
argument_list|,
name|binary
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|ProgramBinaryOES
name|void
name|GL_APIENTRY
name|ProgramBinaryOES
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|binaryFormat
parameter_list|,
specifier|const
name|void
modifier|*
name|binary
parameter_list|,
name|GLint
name|length
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum program = 0x%X, binaryFormat = 0x%x, binary = 0x%0.8p, length = %d)"
argument_list|,
name|program
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateProgramBinaryOES
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|Error
name|error
init|=
name|programObject
operator|->
name|loadBinary
argument_list|(
name|binaryFormat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|DrawBuffersEXT
name|void
name|GL_APIENTRY
name|DrawBuffersEXT
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|bufs
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum n = %d, bufs = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|bufs
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|skipValidation
argument_list|()
operator|&&
operator|!
name|ValidateDrawBuffersEXT
argument_list|(
name|context
argument_list|,
name|n
argument_list|,
name|bufs
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|drawBuffers
argument_list|(
name|n
argument_list|,
name|bufs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetBufferPointervOES
name|void
name|GL_APIENTRY
name|GetBufferPointervOES
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|void
modifier|*
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLvoid** params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|pname
operator|!=
name|GL_BUFFER_MAP_POINTER
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buffer
operator|||
operator|!
name|buffer
operator|->
name|isMapped
argument_list|()
condition|)
block|{
operator|*
name|params
operator|=
name|NULL
expr_stmt|;
block|}
else|else
block|{
operator|*
name|params
operator|=
name|buffer
operator|->
name|getMapPointer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|MapBufferOES
name|void
modifier|*
name|GL_APIENTRY
name|MapBufferOES
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|access
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLbitfield access = 0x%X)"
argument_list|,
name|target
argument_list|,
name|access
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|access
operator|!=
name|GL_WRITE_ONLY_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|buffer
operator|->
name|isMapped
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|Error
name|error
init|=
name|buffer
operator|->
name|map
argument_list|(
name|access
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|buffer
operator|->
name|getMapPointer
argument_list|()
return|;
block|}
return|return
name|NULL
return|;
block|}
DECL|function|UnmapBufferOES
name|GLboolean
name|GL_APIENTRY
name|UnmapBufferOES
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X)"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
name|NULL
operator|||
operator|!
name|buffer
operator|->
name|isMapped
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
name|GLboolean
name|result
decl_stmt|;
name|Error
name|error
init|=
name|buffer
operator|->
name|unmap
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
return|return
name|result
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|MapBufferRangeEXT
name|void
modifier|*
name|GL_APIENTRY
name|MapBufferRangeEXT
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|length
parameter_list|,
name|GLbitfield
name|access
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d, GLbitfield access = 0x%X)"
argument_list|,
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|access
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|length
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
comment|// Check for buffer overflow
name|size_t
name|offsetSize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|size_t
name|lengthSize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rx
operator|::
name|IsUnsignedAdditionSafe
argument_list|(
name|offsetSize
argument_list|,
name|lengthSize
argument_list|)
operator|||
name|offsetSize
operator|+
name|lengthSize
operator|>
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|buffer
operator|->
name|getSize
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
comment|// Check for invalid bits in the mask
name|GLbitfield
name|allAccessBits
init|=
name|GL_MAP_READ_BIT
operator||
name|GL_MAP_WRITE_BIT
operator||
name|GL_MAP_INVALIDATE_RANGE_BIT
operator||
name|GL_MAP_INVALIDATE_BUFFER_BIT
operator||
name|GL_MAP_FLUSH_EXPLICIT_BIT
operator||
name|GL_MAP_UNSYNCHRONIZED_BIT
decl_stmt|;
if|if
condition|(
name|access
operator|&
operator|~
operator|(
name|allAccessBits
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|length
operator|==
literal|0
operator|||
name|buffer
operator|->
name|isMapped
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
comment|// Check for invalid bit combinations
if|if
condition|(
operator|(
name|access
operator|&
operator|(
name|GL_MAP_READ_BIT
operator||
name|GL_MAP_WRITE_BIT
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|GLbitfield
name|writeOnlyBits
init|=
name|GL_MAP_INVALIDATE_RANGE_BIT
operator||
name|GL_MAP_INVALIDATE_BUFFER_BIT
operator||
name|GL_MAP_UNSYNCHRONIZED_BIT
decl_stmt|;
if|if
condition|(
operator|(
name|access
operator|&
name|GL_MAP_READ_BIT
operator|)
operator|!=
literal|0
operator|&&
operator|(
name|access
operator|&
name|writeOnlyBits
operator|)
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
operator|(
name|access
operator|&
name|GL_MAP_WRITE_BIT
operator|)
operator|==
literal|0
operator|&&
operator|(
name|access
operator|&
name|GL_MAP_FLUSH_EXPLICIT_BIT
operator|)
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|Error
name|error
init|=
name|buffer
operator|->
name|mapRange
argument_list|(
name|offset
argument_list|,
name|length
argument_list|,
name|access
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|buffer
operator|->
name|getMapPointer
argument_list|()
return|;
block|}
return|return
name|NULL
return|;
block|}
DECL|function|FlushMappedBufferRangeEXT
name|void
name|GL_APIENTRY
name|FlushMappedBufferRangeEXT
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|length
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d)"
argument_list|,
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|length
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|buffer
operator|->
name|isMapped
argument_list|()
operator|||
operator|(
name|buffer
operator|->
name|getAccessFlags
argument_list|()
operator|&
name|GL_MAP_FLUSH_EXPLICIT_BIT
operator|)
operator|==
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Check for buffer overflow
name|size_t
name|offsetSize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|size_t
name|lengthSize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rx
operator|::
name|IsUnsignedAdditionSafe
argument_list|(
name|offsetSize
argument_list|,
name|lengthSize
argument_list|)
operator|||
name|offsetSize
operator|+
name|lengthSize
operator|>
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|buffer
operator|->
name|getMapLength
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// We do not currently support a non-trivial implementation of FlushMappedBufferRange
block|}
block|}
DECL|function|InsertEventMarkerEXT
name|void
name|GL_APIENTRY
name|InsertEventMarkerEXT
parameter_list|(
name|GLsizei
name|length
parameter_list|,
specifier|const
name|char
modifier|*
name|marker
parameter_list|)
block|{
comment|// Don't run an EVENT() macro on the EXT_debug_marker entry points.
comment|// It can interfere with the debug events being set by the caller.
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|debugMarker
condition|)
block|{
comment|// The debug marker calls should not set error state
comment|// However, it seems reasonable to set an error state if the extension is not enabled
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateInsertEventMarkerEXT
argument_list|(
name|context
argument_list|,
name|length
argument_list|,
name|marker
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|insertEventMarker
argument_list|(
name|length
argument_list|,
name|marker
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|PushGroupMarkerEXT
name|void
name|GL_APIENTRY
name|PushGroupMarkerEXT
parameter_list|(
name|GLsizei
name|length
parameter_list|,
specifier|const
name|char
modifier|*
name|marker
parameter_list|)
block|{
comment|// Don't run an EVENT() macro on the EXT_debug_marker entry points.
comment|// It can interfere with the debug events being set by the caller.
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|debugMarker
condition|)
block|{
comment|// The debug marker calls should not set error state
comment|// However, it seems reasonable to set an error state if the extension is not enabled
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidatePushGroupMarkerEXT
argument_list|(
name|context
argument_list|,
name|length
argument_list|,
name|marker
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|marker
operator|==
literal|nullptr
condition|)
block|{
comment|// From the EXT_debug_marker spec,
comment|// "If<marker> is null then an empty string is pushed on the stack."
name|context
operator|->
name|pushGroupMarker
argument_list|(
name|length
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|->
name|pushGroupMarker
argument_list|(
name|length
argument_list|,
name|marker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|PopGroupMarkerEXT
name|void
name|GL_APIENTRY
name|PopGroupMarkerEXT
parameter_list|()
block|{
comment|// Don't run an EVENT() macro on the EXT_debug_marker entry points.
comment|// It can interfere with the debug events being set by the caller.
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|debugMarker
condition|)
block|{
comment|// The debug marker calls should not set error state
comment|// However, it seems reasonable to set an error state if the extension is not enabled
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Extension not enabled"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|popGroupMarker
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|EGLImageTargetTexture2DOES
name|ANGLE_EXPORT
name|void
name|GL_APIENTRY
name|EGLImageTargetTexture2DOES
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLeglImageOES
name|image
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLeglImageOES image = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
name|egl
operator|::
name|GetGlobalDisplay
argument_list|()
decl_stmt|;
name|egl
operator|::
name|Image
modifier|*
name|imageObject
init|=
cast|reinterpret_cast
argument_list|<
name|egl
operator|::
name|Image
operator|*
argument_list|>
argument_list|(
name|image
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateEGLImageTargetTexture2DOES
argument_list|(
name|context
argument_list|,
name|display
argument_list|,
name|target
argument_list|,
name|imageObject
argument_list|)
condition|)
block|{
return|return;
block|}
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|texture
operator|->
name|setEGLImageTarget
argument_list|(
name|target
argument_list|,
name|imageObject
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|EGLImageTargetRenderbufferStorageOES
name|ANGLE_EXPORT
name|void
name|GL_APIENTRY
name|EGLImageTargetRenderbufferStorageOES
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLeglImageOES
name|image
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLeglImageOES image = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|egl
operator|::
name|Display
modifier|*
name|display
init|=
name|egl
operator|::
name|GetGlobalDisplay
argument_list|()
decl_stmt|;
name|egl
operator|::
name|Image
modifier|*
name|imageObject
init|=
cast|reinterpret_cast
argument_list|<
name|egl
operator|::
name|Image
operator|*
argument_list|>
argument_list|(
name|image
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateEGLImageTargetRenderbufferStorageOES
argument_list|(
name|context
argument_list|,
name|display
argument_list|,
name|target
argument_list|,
name|imageObject
argument_list|)
condition|)
block|{
return|return;
block|}
name|Renderbuffer
modifier|*
name|renderbuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentRenderbuffer
argument_list|()
decl_stmt|;
name|Error
name|error
init|=
name|renderbuffer
operator|->
name|setStorageEGLImageTarget
argument_list|(
name|imageObject
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|BindVertexArrayOES
name|void
name|GL_APIENTRY
name|BindVertexArrayOES
parameter_list|(
name|GLuint
name|array
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint array = %u)"
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateBindVertexArrayOES
argument_list|(
name|context
argument_list|,
name|array
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|bindVertexArray
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DeleteVertexArraysOES
name|void
name|GL_APIENTRY
name|DeleteVertexArraysOES
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|arrays
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* arrays = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|arrays
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateDeleteVertexArraysOES
argument_list|(
name|context
argument_list|,
name|n
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|arrayIndex
init|=
literal|0
init|;
name|arrayIndex
operator|<
name|n
condition|;
name|arrayIndex
operator|++
control|)
block|{
if|if
condition|(
name|arrays
index|[
name|arrayIndex
index|]
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|deleteVertexArray
argument_list|(
name|arrays
index|[
name|arrayIndex
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|GenVertexArraysOES
name|void
name|GL_APIENTRY
name|GenVertexArraysOES
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|arrays
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* arrays = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|arrays
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGenVertexArraysOES
argument_list|(
name|context
argument_list|,
name|n
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|arrayIndex
init|=
literal|0
init|;
name|arrayIndex
operator|<
name|n
condition|;
name|arrayIndex
operator|++
control|)
block|{
name|arrays
index|[
name|arrayIndex
index|]
operator|=
name|context
operator|->
name|createVertexArray
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|IsVertexArrayOES
name|GLboolean
name|GL_APIENTRY
name|IsVertexArrayOES
parameter_list|(
name|GLuint
name|array
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint array = %u)"
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateIsVertexArrayOES
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return
name|GL_FALSE
return|;
block|}
if|if
condition|(
name|array
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FALSE
return|;
block|}
name|VertexArray
modifier|*
name|vao
init|=
name|context
operator|->
name|getVertexArray
argument_list|(
name|array
argument_list|)
decl_stmt|;
return|return
operator|(
name|vao
operator|!=
literal|nullptr
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
operator|)
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|DebugMessageControlKHR
name|void
name|GL_APIENTRY
name|DebugMessageControlKHR
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLenum
name|severity
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|ids
parameter_list|,
name|GLboolean
name|enabled
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum source = 0x%X, GLenum type = 0x%X, GLenum severity = 0x%X, GLsizei count = %d, "
literal|"GLint *ids = 0x%0.8p, GLboolean enabled = %d)"
argument_list|,
name|source
argument_list|,
name|type
argument_list|,
name|severity
argument_list|,
name|count
argument_list|,
name|ids
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateDebugMessageControlKHR
argument_list|(
name|context
argument_list|,
name|source
argument_list|,
name|type
argument_list|,
name|severity
argument_list|,
name|count
argument_list|,
name|ids
argument_list|,
name|enabled
argument_list|)
condition|)
block|{
return|return;
block|}
name|std
operator|::
name|vector
argument_list|<
name|GLuint
argument_list|>
name|idVector
argument_list|(
name|ids
argument_list|,
name|ids
operator|+
name|count
argument_list|)
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDebug
argument_list|()
operator|.
name|setMessageControl
argument_list|(
name|source
argument_list|,
name|type
argument_list|,
name|severity
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|idVector
argument_list|)
argument_list|,
operator|(
name|enabled
operator|!=
name|GL_FALSE
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DebugMessageInsertKHR
name|void
name|GL_APIENTRY
name|DebugMessageInsertKHR
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|GLenum
name|severity
parameter_list|,
name|GLsizei
name|length
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|buf
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum source = 0x%X, GLenum type = 0x%X, GLint id = %d, GLenum severity = 0x%X, GLsizei "
literal|"length = %d, const GLchar *buf = 0x%0.8p)"
argument_list|,
name|source
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|severity
argument_list|,
name|length
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateDebugMessageInsertKHR
argument_list|(
name|context
argument_list|,
name|source
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|severity
argument_list|,
name|length
argument_list|,
name|buf
argument_list|)
condition|)
block|{
return|return;
block|}
name|std
operator|::
name|string
name|msg
argument_list|(
name|buf
argument_list|,
operator|(
name|length
operator|>
literal|0
operator|)
condition|?
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|length
argument_list|)
else|:
name|strlen
argument_list|(
name|buf
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDebug
argument_list|()
operator|.
name|insertMessage
argument_list|(
name|source
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
name|severity
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DebugMessageCallbackKHR
name|void
name|GL_APIENTRY
name|DebugMessageCallbackKHR
parameter_list|(
name|GLDEBUGPROCKHR
name|callback
parameter_list|,
specifier|const
name|void
modifier|*
name|userParam
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLDEBUGPROCKHR callback = 0x%0.8p, const void *userParam = 0x%0.8p)"
argument_list|,
name|callback
argument_list|,
name|userParam
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateDebugMessageCallbackKHR
argument_list|(
name|context
argument_list|,
name|callback
argument_list|,
name|userParam
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDebug
argument_list|()
operator|.
name|setCallback
argument_list|(
name|callback
argument_list|,
name|userParam
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetDebugMessageLogKHR
name|GLuint
name|GL_APIENTRY
name|GetDebugMessageLogKHR
parameter_list|(
name|GLuint
name|count
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLenum
modifier|*
name|sources
parameter_list|,
name|GLenum
modifier|*
name|types
parameter_list|,
name|GLuint
modifier|*
name|ids
parameter_list|,
name|GLenum
modifier|*
name|severities
parameter_list|,
name|GLsizei
modifier|*
name|lengths
parameter_list|,
name|GLchar
modifier|*
name|messageLog
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei count = %d, GLsizei bufSize = %d, GLenum *sources, GLenum *types = 0x%0.8p, "
literal|"GLuint *ids = 0x%0.8p, GLenum *severities = 0x%0.8p, GLsizei *lengths = 0x%0.8p, GLchar "
literal|"*messageLog = 0x%0.8p)"
argument_list|,
name|count
argument_list|,
name|bufSize
argument_list|,
name|sources
argument_list|,
name|types
argument_list|,
name|ids
argument_list|,
name|severities
argument_list|,
name|lengths
argument_list|,
name|messageLog
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetDebugMessageLogKHR
argument_list|(
name|context
argument_list|,
name|count
argument_list|,
name|bufSize
argument_list|,
name|sources
argument_list|,
name|types
argument_list|,
name|ids
argument_list|,
name|severities
argument_list|,
name|lengths
argument_list|,
name|messageLog
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDebug
argument_list|()
operator|.
name|getMessages
argument_list|(
name|count
argument_list|,
name|bufSize
argument_list|,
name|sources
argument_list|,
name|types
argument_list|,
name|ids
argument_list|,
name|severities
argument_list|,
name|lengths
argument_list|,
name|messageLog
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|PushDebugGroupKHR
name|void
name|GL_APIENTRY
name|PushDebugGroupKHR
parameter_list|(
name|GLenum
name|source
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|GLsizei
name|length
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|message
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum source = 0x%X, GLuint id = 0x%X, GLsizei length = %d, const GLchar *message = "
literal|"0x%0.8p)"
argument_list|,
name|source
argument_list|,
name|id
argument_list|,
name|length
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidatePushDebugGroupKHR
argument_list|(
name|context
argument_list|,
name|source
argument_list|,
name|id
argument_list|,
name|length
argument_list|,
name|message
argument_list|)
condition|)
block|{
return|return;
block|}
name|std
operator|::
name|string
name|msg
argument_list|(
name|message
argument_list|,
operator|(
name|length
operator|>
literal|0
operator|)
condition|?
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|length
argument_list|)
else|:
name|strlen
argument_list|(
name|message
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDebug
argument_list|()
operator|.
name|pushGroup
argument_list|(
name|source
argument_list|,
name|id
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|PopDebugGroupKHR
name|void
name|GL_APIENTRY
name|PopDebugGroupKHR
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidatePopDebugGroupKHR
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDebug
argument_list|()
operator|.
name|popGroup
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|ObjectLabelKHR
name|void
name|GL_APIENTRY
name|ObjectLabelKHR
parameter_list|(
name|GLenum
name|identifier
parameter_list|,
name|GLuint
name|name
parameter_list|,
name|GLsizei
name|length
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|label
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum identifier = 0x%X, GLuint name = %u, GLsizei length = %d, const GLchar *label = "
literal|"0x%0.8p)"
argument_list|,
name|identifier
argument_list|,
name|name
argument_list|,
name|length
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateObjectLabelKHR
argument_list|(
name|context
argument_list|,
name|identifier
argument_list|,
name|name
argument_list|,
name|length
argument_list|,
name|label
argument_list|)
condition|)
block|{
return|return;
block|}
name|LabeledObject
modifier|*
name|object
init|=
name|context
operator|->
name|getLabeledObject
argument_list|(
name|identifier
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|object
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|lbl
argument_list|(
name|label
argument_list|,
operator|(
name|length
operator|>
literal|0
operator|)
condition|?
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|length
argument_list|)
else|:
name|strlen
argument_list|(
name|label
argument_list|)
argument_list|)
decl_stmt|;
name|object
operator|->
name|setLabel
argument_list|(
name|lbl
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|GL_APIENTRY
DECL|function|GetObjectLabelKHR
name|GetObjectLabelKHR
parameter_list|(
name|GLenum
name|identifier
parameter_list|,
name|GLuint
name|name
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|label
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum identifier = 0x%X, GLuint name = %u, GLsizei bufSize = %d, GLsizei *length = "
literal|"0x%0.8p, GLchar *label = 0x%0.8p)"
argument_list|,
name|identifier
argument_list|,
name|name
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetObjectLabelKHR
argument_list|(
name|context
argument_list|,
name|identifier
argument_list|,
name|name
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|label
argument_list|)
condition|)
block|{
return|return;
block|}
name|LabeledObject
modifier|*
name|object
init|=
name|context
operator|->
name|getLabeledObject
argument_list|(
name|identifier
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|object
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
specifier|const
name|std
operator|::
name|string
modifier|&
name|objectLabel
init|=
name|object
operator|->
name|getLabel
argument_list|()
decl_stmt|;
name|size_t
name|writeLength
init|=
name|std
operator|::
name|min
argument_list|(
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|bufSize
argument_list|)
operator|-
literal|1
argument_list|,
name|objectLabel
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|std
operator|::
name|copy
argument_list|(
name|objectLabel
operator|.
name|begin
argument_list|()
argument_list|,
name|objectLabel
operator|.
name|begin
argument_list|()
operator|+
name|writeLength
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|label
index|[
name|writeLength
index|]
operator|=
literal|'\0'
expr_stmt|;
operator|*
name|length
operator|=
cast|static_cast
argument_list|<
name|GLsizei
argument_list|>
argument_list|(
name|writeLength
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|ObjectPtrLabelKHR
name|void
name|GL_APIENTRY
name|ObjectPtrLabelKHR
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|GLsizei
name|length
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|label
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(const void *ptr = 0x%0.8p, GLsizei length = %d, const GLchar *label = 0x%0.8p)"
argument_list|,
name|ptr
argument_list|,
name|length
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateObjectPtrLabelKHR
argument_list|(
name|context
argument_list|,
name|ptr
argument_list|,
name|length
argument_list|,
name|label
argument_list|)
condition|)
block|{
return|return;
block|}
name|LabeledObject
modifier|*
name|object
init|=
name|context
operator|->
name|getLabeledObjectFromPtr
argument_list|(
name|ptr
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|object
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|lbl
argument_list|(
name|label
argument_list|,
operator|(
name|length
operator|>
literal|0
operator|)
condition|?
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|length
argument_list|)
else|:
name|strlen
argument_list|(
name|label
argument_list|)
argument_list|)
decl_stmt|;
name|object
operator|->
name|setLabel
argument_list|(
name|lbl
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetObjectPtrLabelKHR
name|void
name|GL_APIENTRY
name|GetObjectPtrLabelKHR
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|label
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(const void *ptr = 0x%0.8p, GLsizei bufSize = %d, GLsizei *length = 0x%0.8p, GLchar "
literal|"*label = 0x%0.8p)"
argument_list|,
name|ptr
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetObjectPtrLabelKHR
argument_list|(
name|context
argument_list|,
name|ptr
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|label
argument_list|)
condition|)
block|{
return|return;
block|}
name|LabeledObject
modifier|*
name|object
init|=
name|context
operator|->
name|getLabeledObjectFromPtr
argument_list|(
name|ptr
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|object
operator|!=
literal|nullptr
argument_list|)
expr_stmt|;
specifier|const
name|std
operator|::
name|string
modifier|&
name|objectLabel
init|=
name|object
operator|->
name|getLabel
argument_list|()
decl_stmt|;
name|size_t
name|writeLength
init|=
name|std
operator|::
name|min
argument_list|(
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|bufSize
argument_list|)
operator|-
literal|1
argument_list|,
name|objectLabel
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|std
operator|::
name|copy
argument_list|(
name|objectLabel
operator|.
name|begin
argument_list|()
argument_list|,
name|objectLabel
operator|.
name|begin
argument_list|()
operator|+
name|writeLength
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|label
index|[
name|writeLength
index|]
operator|=
literal|'\0'
expr_stmt|;
operator|*
name|length
operator|=
cast|static_cast
argument_list|<
name|GLsizei
argument_list|>
argument_list|(
name|writeLength
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetPointervKHR
name|void
name|GL_APIENTRY
name|GetPointervKHR
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|void
modifier|*
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum pname = 0x%X, void **params = 0x%0.8p)"
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetPointervKHR
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|getPointerv
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_namespace
end_unit
