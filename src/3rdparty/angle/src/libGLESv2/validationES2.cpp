begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// validationES2.cpp: Validation functions for OpenGL ES 2.0 entry point parameters
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/validationES2.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/validationES.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|ValidateSubImageParams2D
specifier|static
name|bool
name|ValidateSubImageParams2D
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|bool
name|compressed
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|gl
operator|::
name|Texture2D
modifier|*
name|texture
parameter_list|)
block|{
if|if
condition|(
operator|!
name|texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|compressed
operator|!=
name|texture
operator|->
name|isCompressed
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|format
operator|!=
name|GL_NONE
condition|)
block|{
if|if
condition|(
name|gl
operator|::
name|GetFormatTypeInfo
argument_list|(
name|format
argument_list|,
name|type
argument_list|)
operator|.
name|internalFormat
operator|!=
name|texture
operator|->
name|getInternalFormat
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|compressed
condition|)
block|{
if|if
condition|(
operator|(
name|width
operator|%
literal|4
operator|!=
literal|0
operator|&&
name|width
operator|!=
name|texture
operator|->
name|getWidth
argument_list|(
name|level
argument_list|)
operator|)
operator|||
operator|(
name|height
operator|%
literal|4
operator|!=
literal|0
operator|&&
name|height
operator|!=
name|texture
operator|->
name|getHeight
argument_list|(
name|level
argument_list|)
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|xoffset
operator|+
name|width
operator|>
name|texture
operator|->
name|getWidth
argument_list|(
name|level
argument_list|)
operator|||
name|yoffset
operator|+
name|height
operator|>
name|texture
operator|->
name|getHeight
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateSubImageParamsCube
specifier|static
name|bool
name|ValidateSubImageParamsCube
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|bool
name|compressed
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|gl
operator|::
name|TextureCubeMap
modifier|*
name|texture
parameter_list|)
block|{
if|if
condition|(
operator|!
name|texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|compressed
operator|!=
name|texture
operator|->
name|isCompressed
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|format
operator|!=
name|GL_NONE
condition|)
block|{
if|if
condition|(
name|gl
operator|::
name|GetFormatTypeInfo
argument_list|(
name|format
argument_list|,
name|type
argument_list|)
operator|.
name|internalFormat
operator|!=
name|texture
operator|->
name|getInternalFormat
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|compressed
condition|)
block|{
if|if
condition|(
operator|(
name|width
operator|%
literal|4
operator|!=
literal|0
operator|&&
name|width
operator|!=
name|texture
operator|->
name|getWidth
argument_list|(
name|target
argument_list|,
literal|0
argument_list|)
operator|)
operator|||
operator|(
name|height
operator|%
literal|4
operator|!=
literal|0
operator|&&
name|height
operator|!=
name|texture
operator|->
name|getHeight
argument_list|(
name|target
argument_list|,
literal|0
argument_list|)
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|xoffset
operator|+
name|width
operator|>
name|texture
operator|->
name|getWidth
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
operator|||
name|yoffset
operator|+
name|height
operator|>
name|texture
operator|->
name|getHeight
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateES2TexImageParameters
name|bool
name|ValidateES2TexImageParameters
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|isCompressed
parameter_list|,
name|bool
name|isSubImage
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ValidTexture2DDestinationTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|ValidImageSize
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|level
operator|<
literal|0
operator|||
name|xoffset
operator|<
literal|0
operator|||
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|xoffset
operator|<
name|width
operator|||
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLsizei
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|yoffset
operator|<
name|height
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|isSubImage
operator|&&
operator|!
name|isCompressed
operator|&&
name|internalformat
operator|!=
name|format
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|NULL
decl_stmt|;
name|bool
name|textureCompressed
init|=
literal|false
decl_stmt|;
name|GLenum
name|textureInternalFormat
init|=
name|GL_NONE
decl_stmt|;
name|GLint
name|textureLevelWidth
init|=
literal|0
decl_stmt|;
name|GLint
name|textureLevelHeight
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max2DTextureSize
operator|>>
name|level
operator|)
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|max2DTextureSize
operator|>>
name|level
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|gl
operator|::
name|Texture2D
modifier|*
name|tex2d
init|=
name|context
operator|->
name|getTexture2D
argument_list|()
decl_stmt|;
if|if
condition|(
name|tex2d
condition|)
block|{
name|textureCompressed
operator|=
name|tex2d
operator|->
name|isCompressed
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureInternalFormat
operator|=
name|tex2d
operator|->
name|getInternalFormat
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureLevelWidth
operator|=
name|tex2d
operator|->
name|getWidth
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|textureLevelHeight
operator|=
name|tex2d
operator|->
name|getHeight
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|texture
operator|=
name|tex2d
expr_stmt|;
block|}
if|if
condition|(
name|isSubImage
operator|&&
operator|!
name|ValidateSubImageParams2D
argument_list|(
name|context
argument_list|,
name|isCompressed
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|level
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|tex2d
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|texture
operator|=
name|tex2d
expr_stmt|;
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
case|:
block|{
if|if
condition|(
operator|!
name|isSubImage
operator|&&
name|width
operator|!=
name|height
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|maxCubeMapTextureSize
operator|>>
name|level
operator|)
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
operator|(
name|caps
operator|.
name|maxCubeMapTextureSize
operator|>>
name|level
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|gl
operator|::
name|TextureCubeMap
modifier|*
name|texCube
init|=
name|context
operator|->
name|getTextureCubeMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|texCube
condition|)
block|{
name|textureCompressed
operator|=
name|texCube
operator|->
name|isCompressed
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|textureInternalFormat
operator|=
name|texCube
operator|->
name|getInternalFormat
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|textureLevelWidth
operator|=
name|texCube
operator|->
name|getWidth
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|textureLevelHeight
operator|=
name|texCube
operator|->
name|getHeight
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|texture
operator|=
name|texCube
expr_stmt|;
block|}
if|if
condition|(
name|isSubImage
operator|&&
operator|!
name|ValidateSubImageParamsCube
argument_list|(
name|context
argument_list|,
name|isCompressed
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|texCube
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|isSubImage
operator|&&
name|texture
operator|->
name|isImmutable
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Verify zero border
if|if
condition|(
name|border
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|GLenum
name|actualInternalFormat
init|=
name|isSubImage
condition|?
name|textureInternalFormat
else|:
name|internalformat
decl_stmt|;
if|if
condition|(
name|isCompressed
condition|)
block|{
if|if
condition|(
operator|!
name|ValidCompressedImageSize
argument_list|(
name|context
argument_list|,
name|actualInternalFormat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|actualInternalFormat
condition|)
block|{
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT5
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// validate<type> by itself (used as secondary key below)
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_UNSIGNED_SHORT_5_6_5
case|:
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4
case|:
case|case
name|GL_UNSIGNED_SHORT_5_5_5_1
case|:
case|case
name|GL_UNSIGNED_SHORT
case|:
case|case
name|GL_UNSIGNED_INT
case|:
case|case
name|GL_UNSIGNED_INT_24_8_OES
case|:
case|case
name|GL_HALF_FLOAT_OES
case|:
case|case
name|GL_FLOAT
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// validate<format> +<type> combinations
comment|// - invalid<format> -> sets INVALID_ENUM
comment|// - invalid<format>+<type> combination -> sets INVALID_OPERATION
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|GL_ALPHA
case|:
case|case
name|GL_LUMINANCE
case|:
case|case
name|GL_LUMINANCE_ALPHA
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_FLOAT
case|:
case|case
name|GL_HALF_FLOAT_OES
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RED
case|:
case|case
name|GL_RG
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureRG
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_FLOAT
case|:
case|case
name|GL_HALF_FLOAT_OES
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RGB
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_UNSIGNED_SHORT_5_6_5
case|:
case|case
name|GL_FLOAT
case|:
case|case
name|GL_HALF_FLOAT_OES
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RGBA
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4
case|:
case|case
name|GL_UNSIGNED_SHORT_5_5_5_1
case|:
case|case
name|GL_FLOAT
case|:
case|case
name|GL_HALF_FLOAT_OES
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_BGRA_EXT
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_SRGB_EXT
case|:
case|case
name|GL_SRGB_ALPHA_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|sRGB
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
comment|// error cases for compressed textures are handled below
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
break|break;
case|case
name|GL_DEPTH_COMPONENT
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_SHORT
case|:
case|case
name|GL_UNSIGNED_INT
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_DEPTH_STENCIL_OES
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_INT_24_8_OES
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT5
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_DEPTH_COMPONENT
case|:
case|case
name|GL_DEPTH_STENCIL_OES
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|depthTextures
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|target
operator|!=
name|GL_TEXTURE_2D
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// OES_depth_texture supports loading depth data and multiple levels,
comment|// but ANGLE_depth_texture does not
if|if
condition|(
name|pixels
operator|!=
name|NULL
operator|||
name|level
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|type
operator|==
name|GL_FLOAT
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureFloat
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|GL_HALF_FLOAT_OES
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureHalfFloat
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|ValidateES2CopyTexImageParameters
name|bool
name|ValidateES2CopyTexImageParameters
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|isSubImage
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|)
block|{
name|GLenum
name|textureInternalFormat
init|=
name|GL_NONE
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateCopyTexImageParametersBase
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|isSubImage
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
operator|&
name|textureInternalFormat
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
decl_stmt|;
name|GLenum
name|colorbufferFormat
init|=
name|framebuffer
operator|->
name|getReadColorbuffer
argument_list|()
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
name|GLenum
name|textureFormat
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|textureInternalFormat
argument_list|)
operator|.
name|format
decl_stmt|;
comment|// [OpenGL ES 2.0.24] table 3.9
if|if
condition|(
name|isSubImage
condition|)
block|{
switch|switch
condition|(
name|textureFormat
condition|)
block|{
case|case
name|GL_ALPHA
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_ALPHA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_LUMINANCE
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_R8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RG8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RED_EXT
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_R8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RG8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RG_EXT
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_RG8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RGB
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_LUMINANCE_ALPHA
case|:
case|case
name|GL_RGBA
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
case|case
name|GL_DEPTH_COMPONENT
case|:
case|case
name|GL_DEPTH_STENCIL_OES
case|:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_ALPHA
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_ALPHA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGRA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_LUMINANCE
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_R8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RG8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGRA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RED_EXT
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_R8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RG8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGRA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RG_EXT
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_RG8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGRA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RGB
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_RGB565
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB8_OES
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGRA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_LUMINANCE_ALPHA
case|:
case|case
name|GL_RGBA
case|:
if|if
condition|(
name|colorbufferFormat
operator|!=
name|GL_RGBA4
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGB5_A1
operator|&&
name|colorbufferFormat
operator|!=
name|GL_BGRA8_EXT
operator|&&
name|colorbufferFormat
operator|!=
name|GL_RGBA8_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT5
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_DEPTH_COMPONENT
case|:
case|case
name|GL_DEPTH_COMPONENT16
case|:
case|case
name|GL_DEPTH_COMPONENT32_OES
case|:
case|case
name|GL_DEPTH_STENCIL_OES
case|:
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
if|if
condition|(
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|depthTextures
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// If width or height is zero, it is a no-op.  Return false without setting an error.
return|return
operator|(
name|width
operator|>
literal|0
operator|&&
name|height
operator|>
literal|0
operator|)
return|;
block|}
DECL|function|ValidateES2TexStorageParameters
name|bool
name|ValidateES2TexStorageParameters
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
if|if
condition|(
name|target
operator|!=
name|GL_TEXTURE_2D
operator|&&
name|target
operator|!=
name|GL_TEXTURE_CUBE_MAP
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|width
operator|<
literal|1
operator|||
name|height
operator|<
literal|1
operator|||
name|levels
operator|<
literal|1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|target
operator|==
name|GL_TEXTURE_CUBE_MAP
operator|&&
name|width
operator|!=
name|height
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|levels
operator|!=
literal|1
operator|&&
name|levels
operator|!=
name|gl
operator|::
name|log2
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
operator|+
literal|1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatInfo
operator|.
name|format
operator|==
name|GL_NONE
operator|||
name|formatInfo
operator|.
name|type
operator|==
name|GL_NONE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
name|caps
operator|.
name|max2DTextureSize
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
name|caps
operator|.
name|max2DTextureSize
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP
case|:
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|width
argument_list|)
operator|>
name|caps
operator|.
name|maxCubeMapTextureSize
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|height
argument_list|)
operator|>
name|caps
operator|.
name|maxCubeMapTextureSize
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|levels
operator|!=
literal|1
operator|&&
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureNPOT
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|width
argument_list|)
operator|||
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|height
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
switch|switch
condition|(
name|internalformat
condition|)
block|{
case|case
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
case|:
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureCompressionDXT5
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RGBA32F_EXT
case|:
case|case
name|GL_RGB32F_EXT
case|:
case|case
name|GL_ALPHA32F_EXT
case|:
case|case
name|GL_LUMINANCE32F_EXT
case|:
case|case
name|GL_LUMINANCE_ALPHA32F_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureFloat
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RGBA16F_EXT
case|:
case|case
name|GL_RGB16F_EXT
case|:
case|case
name|GL_ALPHA16F_EXT
case|:
case|case
name|GL_LUMINANCE16F_EXT
case|:
case|case
name|GL_LUMINANCE_ALPHA16F_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureHalfFloat
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_R8_EXT
case|:
case|case
name|GL_RG8_EXT
case|:
case|case
name|GL_R16F_EXT
case|:
case|case
name|GL_RG16F_EXT
case|:
case|case
name|GL_R32F_EXT
case|:
case|case
name|GL_RG32F_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureRG
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_DEPTH_COMPONENT16
case|:
case|case
name|GL_DEPTH_COMPONENT32_OES
case|:
case|case
name|GL_DEPTH24_STENCIL8_OES
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|depthTextures
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|target
operator|!=
name|GL_TEXTURE_2D
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// ANGLE_depth_texture only supports 1-level textures
if|if
condition|(
name|levels
operator|!=
literal|1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
break|break;
default|default:
break|break;
block|}
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|NULL
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
name|texture
operator|=
name|context
operator|->
name|getTexture2D
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP
case|:
name|texture
operator|=
name|context
operator|->
name|getTextureCubeMap
argument_list|()
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|texture
operator|||
name|texture
operator|->
name|id
argument_list|()
operator|==
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|texture
operator|->
name|isImmutable
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|// check for combinations of format and type that are valid for ReadPixels
DECL|function|ValidES2ReadFormatType
name|bool
name|ValidES2ReadFormatType
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|GL_RGBA
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
break|break;
default|default:
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_BGRA_EXT
case|:
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
case|:
case|case
name|GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
case|:
break|break;
default|default:
return|return
literal|false
return|;
block|}
break|break;
case|case
name|GL_RG_EXT
case|:
case|case
name|GL_RED_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureRG
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
break|break;
default|default:
return|return
literal|false
return|;
block|}
break|break;
default|default:
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_namespace
end_unit
