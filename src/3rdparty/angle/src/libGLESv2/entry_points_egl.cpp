begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright(c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// entry_points_egl.cpp : Implements the EGL entry points.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/entry_points_egl.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/entry_points_egl_ext.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/entry_points_gles_2_0.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/entry_points_gles_2_0_ext.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/entry_points_gles_3_0.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/global_state.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Context.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Display.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Surface.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/validationEGL.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"common/version.h"
end_include
begin_include
include|#
directive|include
file|<EGL/eglext.h>
end_include
begin_namespace
DECL|namespace|egl
namespace|namespace
name|egl
block|{
comment|// EGL 1.0
DECL|function|GetError
name|EGLint
name|EGLAPIENTRY
name|GetError
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|EGLint
name|error
init|=
name|GetGlobalError
argument_list|()
decl_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
DECL|function|GetDisplay
name|EGLDisplay
name|EGLAPIENTRY
name|GetDisplay
parameter_list|(
name|EGLNativeDisplayType
name|display_id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLNativeDisplayType display_id = 0x%0.8p)"
argument_list|,
name|display_id
argument_list|)
expr_stmt|;
return|return
name|Display
operator|::
name|GetDisplayFromAttribs
argument_list|(
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|display_id
argument_list|)
argument_list|,
name|AttributeMap
argument_list|()
argument_list|)
return|;
block|}
DECL|function|Initialize
name|EGLBoolean
name|EGLAPIENTRY
name|Initialize
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLint
modifier|*
name|major
parameter_list|,
name|EGLint
modifier|*
name|minor
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLint *major = 0x%0.8p, EGLint *minor = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|major
argument_list|,
name|minor
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
if|if
condition|(
name|dpy
operator|==
name|EGL_NO_DISPLAY
operator|||
operator|!
name|Display
operator|::
name|isValidDisplay
argument_list|(
name|display
argument_list|)
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_DISPLAY
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|Error
name|error
init|=
name|display
operator|->
name|initialize
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|major
condition|)
operator|*
name|major
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|minor
condition|)
operator|*
name|minor
operator|=
literal|4
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|Terminate
name|EGLBoolean
name|EGLAPIENTRY
name|Terminate
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
if|if
condition|(
name|dpy
operator|==
name|EGL_NO_DISPLAY
operator|||
operator|!
name|Display
operator|::
name|isValidDisplay
argument_list|(
name|display
argument_list|)
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_DISPLAY
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|GetGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|display
operator|->
name|isValidContext
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|SetGlobalContext
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|SetGlobalDisplay
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
name|display
operator|->
name|terminate
argument_list|()
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|QueryString
specifier|const
name|char
modifier|*
name|EGLAPIENTRY
name|QueryString
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLint
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLint name = %d)"
argument_list|,
name|dpy
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|display
operator|==
name|EGL_NO_DISPLAY
operator|&&
name|name
operator|==
name|EGL_EXTENSIONS
operator|)
condition|)
block|{
name|Error
name|error
init|=
name|ValidateDisplay
argument_list|(
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
block|}
specifier|const
name|char
modifier|*
name|result
decl_stmt|;
switch|switch
condition|(
name|name
condition|)
block|{
case|case
name|EGL_CLIENT_APIS
case|:
name|result
operator|=
literal|"OpenGL_ES"
expr_stmt|;
break|break;
case|case
name|EGL_EXTENSIONS
case|:
if|if
condition|(
name|display
operator|==
name|EGL_NO_DISPLAY
condition|)
block|{
name|result
operator|=
name|Display
operator|::
name|getClientExtensionString
argument_list|()
operator|.
name|c_str
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|display
operator|->
name|getExtensionString
argument_list|()
operator|.
name|c_str
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|EGL_VENDOR
case|:
name|result
operator|=
name|display
operator|->
name|getVendorString
argument_list|()
operator|.
name|c_str
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_VERSION
case|:
name|result
operator|=
literal|"1.4 (ANGLE "
name|ANGLE_VERSION_STRING
literal|")"
expr_stmt|;
break|break;
default|default:
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|function|GetConfigs
name|EGLBoolean
name|EGLAPIENTRY
name|GetConfigs
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
modifier|*
name|configs
parameter_list|,
name|EGLint
name|config_size
parameter_list|,
name|EGLint
modifier|*
name|num_config
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig *configs = 0x%0.8p, "
literal|"EGLint config_size = %d, EGLint *num_config = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|configs
argument_list|,
name|config_size
argument_list|,
name|num_config
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateDisplay
argument_list|(
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
operator|!
name|num_config
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|std
operator|::
name|vector
argument_list|<
specifier|const
name|Config
modifier|*
argument_list|>
name|filteredConfigs
init|=
name|display
operator|->
name|getConfigs
argument_list|(
name|AttributeMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|configs
condition|)
block|{
name|filteredConfigs
operator|.
name|resize
argument_list|(
name|std
operator|::
name|min
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|filteredConfigs
operator|.
name|size
argument_list|()
argument_list|,
name|config_size
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filteredConfigs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|configs
index|[
name|i
index|]
operator|=
cast|const_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|filteredConfigs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
operator|*
name|num_config
operator|=
cast|static_cast
argument_list|<
name|EGLint
argument_list|>
argument_list|(
name|filteredConfigs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|ChooseConfig
name|EGLBoolean
name|EGLAPIENTRY
name|ChooseConfig
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|,
name|EGLConfig
modifier|*
name|configs
parameter_list|,
name|EGLint
name|config_size
parameter_list|,
name|EGLint
modifier|*
name|num_config
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, const EGLint *attrib_list = 0x%0.8p, "
literal|"EGLConfig *configs = 0x%0.8p, EGLint config_size = %d, EGLint *num_config = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|attrib_list
argument_list|,
name|configs
argument_list|,
name|config_size
argument_list|,
name|num_config
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateDisplay
argument_list|(
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
operator|!
name|num_config
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|std
operator|::
name|vector
argument_list|<
specifier|const
name|Config
modifier|*
argument_list|>
name|filteredConfigs
init|=
name|display
operator|->
name|getConfigs
argument_list|(
name|AttributeMap
argument_list|(
name|attrib_list
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|configs
condition|)
block|{
name|filteredConfigs
operator|.
name|resize
argument_list|(
name|std
operator|::
name|min
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|filteredConfigs
operator|.
name|size
argument_list|()
argument_list|,
name|config_size
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filteredConfigs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|configs
index|[
name|i
index|]
operator|=
cast|const_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|filteredConfigs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
operator|*
name|num_config
operator|=
cast|static_cast
argument_list|<
name|EGLint
argument_list|>
argument_list|(
name|filteredConfigs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|GetConfigAttrib
name|EGLBoolean
name|EGLAPIENTRY
name|GetConfigAttrib
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLint attribute = %d, EGLint *value = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Config
modifier|*
name|configuration
init|=
cast|static_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateConfig
argument_list|(
name|display
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
operator|!
name|display
operator|->
name|getConfigAttrib
argument_list|(
name|configuration
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|CreateWindowSurface
name|EGLSurface
name|EGLAPIENTRY
name|CreateWindowSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLNativeWindowType
name|win
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLNativeWindowType win = 0x%0.8p, "
literal|"const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|win
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Config
modifier|*
name|configuration
init|=
cast|static_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|AttributeMap
name|attributes
argument_list|(
name|attrib_list
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateCreateWindowSurface
argument_list|(
name|display
argument_list|,
name|configuration
argument_list|,
name|win
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
name|egl
operator|::
name|Surface
modifier|*
name|surface
init|=
literal|nullptr
decl_stmt|;
name|error
operator|=
name|display
operator|->
name|createWindowSurface
argument_list|(
name|configuration
argument_list|,
name|win
argument_list|,
name|attributes
argument_list|,
operator|&
name|surface
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
return|return
cast|static_cast
argument_list|<
name|EGLSurface
argument_list|>
argument_list|(
name|surface
argument_list|)
return|;
block|}
DECL|function|CreatePbufferSurface
name|EGLSurface
name|EGLAPIENTRY
name|CreatePbufferSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Config
modifier|*
name|configuration
init|=
cast|static_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|AttributeMap
name|attributes
argument_list|(
name|attrib_list
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateCreatePbufferSurface
argument_list|(
name|display
argument_list|,
name|configuration
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
name|egl
operator|::
name|Surface
modifier|*
name|surface
init|=
literal|nullptr
decl_stmt|;
name|error
operator|=
name|display
operator|->
name|createPbufferSurface
argument_list|(
name|configuration
argument_list|,
name|attributes
argument_list|,
operator|&
name|surface
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
return|return
cast|static_cast
argument_list|<
name|EGLSurface
argument_list|>
argument_list|(
name|surface
argument_list|)
return|;
block|}
DECL|function|CreatePixmapSurface
name|EGLSurface
name|EGLAPIENTRY
name|CreatePixmapSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLNativePixmapType
name|pixmap
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLNativePixmapType pixmap = 0x%0.8p, "
literal|"const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|pixmap
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Config
modifier|*
name|configuration
init|=
cast|static_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateConfig
argument_list|(
name|display
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
DECL|function|DestroySurface
name|EGLBoolean
name|EGLAPIENTRY
name|DestroySurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|display
operator|->
name|destroySurface
argument_list|(
operator|(
name|Surface
operator|*
operator|)
name|surface
argument_list|)
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|QuerySurface
name|EGLBoolean
name|EGLAPIENTRY
name|QuerySurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint attribute = %d, EGLint *value = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Surface
modifier|*
name|eglSurface
init|=
operator|(
name|Surface
operator|*
operator|)
name|surface
decl_stmt|;
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
switch|switch
condition|(
name|attribute
condition|)
block|{
case|case
name|EGL_VG_ALPHA_FORMAT
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_VG_COLORSPACE
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_CONFIG_ID
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getConfig
argument_list|()
operator|->
name|configID
expr_stmt|;
break|break;
case|case
name|EGL_HEIGHT
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getHeight
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_HORIZONTAL_RESOLUTION
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_LARGEST_PBUFFER
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_MIPMAP_TEXTURE
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_MIPMAP_LEVEL
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_MULTISAMPLE_RESOLVE
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_PIXEL_ASPECT_RATIO
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getPixelAspectRatio
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_RENDER_BUFFER
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getRenderBuffer
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_SWAP_BEHAVIOR
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getSwapBehavior
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_TEXTURE_FORMAT
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getTextureFormat
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_TEXTURE_TARGET
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getTextureTarget
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_VERTICAL_RESOLUTION
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_WIDTH
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getWidth
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_POST_SUB_BUFFER_SUPPORTED_NV
case|:
if|if
condition|(
operator|!
name|display
operator|->
name|getExtensions
argument_list|()
operator|.
name|postSubBuffer
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|isPostSubBufferSupported
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_FIXED_SIZE_ANGLE
case|:
if|if
condition|(
operator|!
name|display
operator|->
name|getExtensions
argument_list|()
operator|.
name|windowFixedSize
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|isFixedSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_FLEXIBLE_SURFACE_COMPATIBILITY_SUPPORTED_ANGLE
case|:
if|if
condition|(
operator|!
name|display
operator|->
name|getExtensions
argument_list|()
operator|.
name|flexibleSurfaceCompatibility
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|,
literal|"EGL_FLEXIBLE_SURFACE_COMPATIBILITY_SUPPORTED_ANGLE cannot be used without "
literal|"EGL_ANGLE_flexible_surface_compatibility support."
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|flexibleSurfaceCompatibilityRequested
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_SURFACE_ORIENTATION_ANGLE
case|:
if|if
condition|(
operator|!
name|display
operator|->
name|getExtensions
argument_list|()
operator|.
name|surfaceOrientation
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|,
literal|"EGL_SURFACE_ORIENTATION_ANGLE cannot be queried without "
literal|"EGL_ANGLE_surface_orientation support."
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getOrientation
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_DIRECT_COMPOSITION_ANGLE
case|:
if|if
condition|(
operator|!
name|display
operator|->
name|getExtensions
argument_list|()
operator|.
name|directComposition
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|,
literal|"EGL_DIRECT_COMPOSITION_ANGLE cannot be used without "
literal|"EGL_ANGLE_direct_composition support."
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|directComposition
argument_list|()
expr_stmt|;
break|break;
default|default:
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|CreateContext
name|EGLContext
name|EGLAPIENTRY
name|CreateContext
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLContext
name|share_context
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLContext share_context = 0x%0.8p, "
literal|"const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|share_context
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Config
modifier|*
name|configuration
init|=
cast|static_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|sharedGLContext
init|=
cast|static_cast
argument_list|<
name|gl
operator|::
name|Context
operator|*
argument_list|>
argument_list|(
name|share_context
argument_list|)
decl_stmt|;
name|AttributeMap
name|attributes
argument_list|(
name|attrib_list
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateCreateContext
argument_list|(
name|display
argument_list|,
name|configuration
argument_list|,
name|sharedGLContext
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_CONTEXT
return|;
block|}
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
literal|nullptr
decl_stmt|;
name|error
operator|=
name|display
operator|->
name|createContext
argument_list|(
name|configuration
argument_list|,
name|sharedGLContext
argument_list|,
name|attributes
argument_list|,
operator|&
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_CONTEXT
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|EGLContext
argument_list|>
argument_list|(
name|context
argument_list|)
return|;
block|}
DECL|function|DestroyContext
name|EGLBoolean
name|EGLAPIENTRY
name|DestroyContext
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLContext
name|ctx
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
cast|static_cast
argument_list|<
name|gl
operator|::
name|Context
operator|*
argument_list|>
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateContext
argument_list|(
name|display
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|ctx
operator|==
name|EGL_NO_CONTEXT
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|context
operator|==
name|GetGlobalContext
argument_list|()
condition|)
block|{
name|SetGlobalDisplay
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|SetGlobalContext
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
name|display
operator|->
name|destroyContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|MakeCurrent
name|EGLBoolean
name|EGLAPIENTRY
name|MakeCurrent
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|draw
parameter_list|,
name|EGLSurface
name|read
parameter_list|,
name|EGLContext
name|ctx
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface draw = 0x%0.8p, EGLSurface read = 0x%0.8p, EGLContext ctx = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|draw
argument_list|,
name|read
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
cast|static_cast
argument_list|<
name|gl
operator|::
name|Context
operator|*
argument_list|>
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
comment|// If ctx is EGL_NO_CONTEXT and either draw or read are not EGL_NO_SURFACE, an EGL_BAD_MATCH
comment|// error is generated.
if|if
condition|(
name|ctx
operator|==
name|EGL_NO_CONTEXT
operator|&&
operator|(
name|draw
operator|!=
name|EGL_NO_SURFACE
operator|||
name|read
operator|!=
name|EGL_NO_SURFACE
operator|)
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|ctx
operator|!=
name|EGL_NO_CONTEXT
operator|&&
name|draw
operator|==
name|EGL_NO_SURFACE
operator|&&
name|read
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
comment|// If either of draw or read is a valid surface and the other is EGL_NO_SURFACE, an
comment|// EGL_BAD_MATCH error is generated.
if|if
condition|(
operator|(
name|read
operator|==
name|EGL_NO_SURFACE
operator|)
operator|!=
operator|(
name|draw
operator|==
name|EGL_NO_SURFACE
operator|)
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|,
literal|"read and draw must both be valid surfaces, or both be EGL_NO_SURFACE"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|dpy
operator|==
name|EGL_NO_DISPLAY
operator|||
operator|!
name|Display
operator|::
name|isValidDisplay
argument_list|(
name|display
argument_list|)
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_DISPLAY
argument_list|,
literal|"'dpy' not a valid EGLDisplay handle"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
comment|// EGL 1.5 spec: dpy can be uninitialized if all other parameters are null
if|if
condition|(
operator|!
name|display
operator|->
name|isInitialized
argument_list|()
operator|&&
operator|(
name|ctx
operator|!=
name|EGL_NO_CONTEXT
operator|||
name|draw
operator|!=
name|EGL_NO_SURFACE
operator|||
name|read
operator|!=
name|EGL_NO_SURFACE
operator|)
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_NOT_INITIALIZED
argument_list|,
literal|"'dpy' not initialized"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|ctx
operator|!=
name|EGL_NO_CONTEXT
condition|)
block|{
name|Error
name|error
init|=
name|ValidateContext
argument_list|(
name|display
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
block|}
if|if
condition|(
name|display
operator|->
name|isInitialized
argument_list|()
condition|)
block|{
if|if
condition|(
name|display
operator|->
name|testDeviceLost
argument_list|()
condition|)
block|{
name|display
operator|->
name|notifyDeviceLost
argument_list|()
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|display
operator|->
name|isDeviceLost
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_CONTEXT_LOST
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
block|}
name|Surface
modifier|*
name|drawSurface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|draw
argument_list|)
decl_stmt|;
if|if
condition|(
name|draw
operator|!=
name|EGL_NO_SURFACE
condition|)
block|{
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|drawSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
block|}
name|Surface
modifier|*
name|readSurface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|read
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|!=
name|EGL_NO_SURFACE
condition|)
block|{
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|readSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
block|}
if|if
condition|(
name|readSurface
condition|)
block|{
name|Error
name|readCompatError
init|=
name|ValidateCompatibleConfigs
argument_list|(
name|display
argument_list|,
name|readSurface
operator|->
name|getConfig
argument_list|()
argument_list|,
name|readSurface
argument_list|,
name|context
operator|->
name|getConfig
argument_list|()
argument_list|,
name|readSurface
operator|->
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|readCompatError
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|readCompatError
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
block|}
if|if
condition|(
name|draw
operator|!=
name|read
condition|)
block|{
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
if|if
condition|(
name|drawSurface
condition|)
block|{
name|Error
name|drawCompatError
init|=
name|ValidateCompatibleConfigs
argument_list|(
name|display
argument_list|,
name|drawSurface
operator|->
name|getConfig
argument_list|()
argument_list|,
name|drawSurface
argument_list|,
name|context
operator|->
name|getConfig
argument_list|()
argument_list|,
name|drawSurface
operator|->
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|drawCompatError
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|drawCompatError
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
block|}
block|}
name|Error
name|makeCurrentError
init|=
name|display
operator|->
name|makeCurrent
argument_list|(
name|drawSurface
argument_list|,
name|readSurface
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|makeCurrentError
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|makeCurrentError
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|gl
operator|::
name|Context
modifier|*
name|previousContext
init|=
name|GetGlobalContext
argument_list|()
decl_stmt|;
name|SetGlobalDisplay
argument_list|(
name|display
argument_list|)
expr_stmt|;
name|SetGlobalDrawSurface
argument_list|(
name|drawSurface
argument_list|)
expr_stmt|;
name|SetGlobalReadSurface
argument_list|(
name|readSurface
argument_list|)
expr_stmt|;
name|SetGlobalContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// Release the surface from the previously-current context, to allow
comment|// destroyed surfaces to delete themselves.
if|if
condition|(
name|previousContext
operator|!=
literal|nullptr
operator|&&
name|context
operator|!=
name|previousContext
condition|)
block|{
name|previousContext
operator|->
name|releaseSurface
argument_list|()
expr_stmt|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|GetCurrentSurface
name|EGLSurface
name|EGLAPIENTRY
name|GetCurrentSurface
parameter_list|(
name|EGLint
name|readdraw
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLint readdraw = %d)"
argument_list|,
name|readdraw
argument_list|)
expr_stmt|;
if|if
condition|(
name|readdraw
operator|==
name|EGL_READ
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GetGlobalReadSurface
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|readdraw
operator|==
name|EGL_DRAW
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GetGlobalDrawSurface
argument_list|()
return|;
block|}
else|else
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
block|}
DECL|function|GetCurrentDisplay
name|EGLDisplay
name|EGLAPIENTRY
name|GetCurrentDisplay
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|EGLDisplay
name|dpy
init|=
name|GetGlobalDisplay
argument_list|()
decl_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dpy
return|;
block|}
DECL|function|QueryContext
name|EGLBoolean
name|EGLAPIENTRY
name|QueryContext
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLContext
name|ctx
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p, EGLint attribute = %d, EGLint *value = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|ctx
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
cast|static_cast
argument_list|<
name|gl
operator|::
name|Context
operator|*
argument_list|>
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateContext
argument_list|(
name|display
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
switch|switch
condition|(
name|attribute
condition|)
block|{
case|case
name|EGL_CONFIG_ID
case|:
operator|*
name|value
operator|=
name|context
operator|->
name|getConfig
argument_list|()
operator|->
name|configID
expr_stmt|;
break|break;
case|case
name|EGL_CONTEXT_CLIENT_TYPE
case|:
operator|*
name|value
operator|=
name|context
operator|->
name|getClientType
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_CONTEXT_CLIENT_VERSION
case|:
operator|*
name|value
operator|=
name|context
operator|->
name|getClientVersion
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_RENDER_BUFFER
case|:
operator|*
name|value
operator|=
name|context
operator|->
name|getRenderBuffer
argument_list|()
expr_stmt|;
break|break;
default|default:
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|WaitGL
name|EGLBoolean
name|EGLAPIENTRY
name|WaitGL
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
name|GetGlobalDisplay
argument_list|()
decl_stmt|;
name|Error
name|error
init|=
name|ValidateDisplay
argument_list|(
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
comment|// eglWaitGL like calling eglWaitClient with the OpenGL ES API bound. Since we only implement
comment|// OpenGL ES we can do the call directly.
name|error
operator|=
name|display
operator|->
name|waitClient
argument_list|()
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|WaitNative
name|EGLBoolean
name|EGLAPIENTRY
name|WaitNative
parameter_list|(
name|EGLint
name|engine
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLint engine = %d)"
argument_list|,
name|engine
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
name|GetGlobalDisplay
argument_list|()
decl_stmt|;
name|Error
name|error
init|=
name|ValidateDisplay
argument_list|(
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|engine
operator|!=
name|EGL_CORE_NATIVE_ENGINE
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|,
literal|"the 'engine' parameter has an unrecognized value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|error
operator|=
name|display
operator|->
name|waitNative
argument_list|(
name|engine
argument_list|,
name|GetGlobalDrawSurface
argument_list|()
argument_list|,
name|GetGlobalReadSurface
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|SwapBuffers
name|EGLBoolean
name|EGLAPIENTRY
name|SwapBuffers
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Surface
modifier|*
name|eglSurface
init|=
operator|(
name|Surface
operator|*
operator|)
name|surface
decl_stmt|;
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|display
operator|->
name|isDeviceLost
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_CONTEXT_LOST
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|error
operator|=
name|eglSurface
operator|->
name|swap
argument_list|()
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|CopyBuffers
name|EGLBoolean
name|EGLAPIENTRY
name|CopyBuffers
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLNativePixmapType
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLNativePixmapType target = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|display
operator|->
name|isDeviceLost
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_CONTEXT_LOST
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// EGL 1.1
DECL|function|BindTexImage
name|EGLBoolean
name|EGLAPIENTRY
name|BindTexImage
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|buffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint buffer = %d)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|buffer
operator|!=
name|EGL_BACK_BUFFER
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
operator|||
name|eglSurface
operator|->
name|getType
argument_list|()
operator|==
name|EGL_WINDOW_BIT
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|eglSurface
operator|->
name|getBoundTexture
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ACCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|eglSurface
operator|->
name|getTextureFormat
argument_list|()
operator|==
name|EGL_NO_TEXTURE
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|GetGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Texture
modifier|*
name|textureObject
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|textureObject
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|textureObject
operator|->
name|getImmutableFormat
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|error
operator|=
name|eglSurface
operator|->
name|bindTexImage
argument_list|(
name|textureObject
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|SurfaceAttrib
name|EGLBoolean
name|EGLAPIENTRY
name|SurfaceAttrib
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint attribute = %d, EGLint value = %d)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|ReleaseTexImage
name|EGLBoolean
name|EGLAPIENTRY
name|ReleaseTexImage
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|buffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint buffer = %d)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|buffer
operator|!=
name|EGL_BACK_BUFFER
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
operator|||
name|eglSurface
operator|->
name|getType
argument_list|()
operator|==
name|EGL_WINDOW_BIT
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|eglSurface
operator|->
name|getTextureFormat
argument_list|()
operator|==
name|EGL_NO_TEXTURE
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|eglSurface
operator|->
name|getBoundTexture
argument_list|()
decl_stmt|;
if|if
condition|(
name|texture
condition|)
block|{
name|error
operator|=
name|eglSurface
operator|->
name|releaseTexImage
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|SwapInterval
name|EGLBoolean
name|EGLAPIENTRY
name|SwapInterval
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLint
name|interval
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLint interval = %d)"
argument_list|,
name|dpy
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateDisplay
argument_list|(
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|Surface
modifier|*
name|draw_surface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|GetGlobalDrawSurface
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|draw_surface
operator|==
name|NULL
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
specifier|const
name|egl
operator|::
name|Config
modifier|*
name|surfaceConfig
init|=
name|draw_surface
operator|->
name|getConfig
argument_list|()
decl_stmt|;
name|EGLint
name|clampedInterval
init|=
name|std
operator|::
name|min
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|interval
argument_list|,
name|surfaceConfig
operator|->
name|minSwapInterval
argument_list|)
argument_list|,
name|surfaceConfig
operator|->
name|maxSwapInterval
argument_list|)
decl_stmt|;
name|draw_surface
operator|->
name|setSwapInterval
argument_list|(
name|clampedInterval
argument_list|)
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
comment|// EGL 1.2
DECL|function|BindAPI
name|EGLBoolean
name|EGLAPIENTRY
name|BindAPI
parameter_list|(
name|EGLenum
name|api
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLenum api = 0x%X)"
argument_list|,
name|api
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|api
condition|)
block|{
case|case
name|EGL_OPENGL_API
case|:
case|case
name|EGL_OPENVG_API
case|:
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
comment|// Not supported by this implementation
case|case
name|EGL_OPENGL_ES_API
case|:
break|break;
default|default:
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|SetGlobalAPI
argument_list|(
name|api
argument_list|)
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|QueryAPI
name|EGLenum
name|EGLAPIENTRY
name|QueryAPI
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|EGLenum
name|API
init|=
name|GetGlobalAPI
argument_list|()
decl_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|API
return|;
block|}
DECL|function|CreatePbufferFromClientBuffer
name|EGLSurface
name|EGLAPIENTRY
name|CreatePbufferFromClientBuffer
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLenum
name|buftype
parameter_list|,
name|EGLClientBuffer
name|buffer
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLenum buftype = 0x%X, EGLClientBuffer buffer = 0x%0.8p, "
literal|"EGLConfig config = 0x%0.8p, const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|buftype
argument_list|,
name|buffer
argument_list|,
name|config
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Config
modifier|*
name|configuration
init|=
cast|static_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|AttributeMap
name|attributes
argument_list|(
name|attrib_list
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateCreatePbufferFromClientBuffer
argument_list|(
name|display
argument_list|,
name|buftype
argument_list|,
name|buffer
argument_list|,
name|configuration
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
name|egl
operator|::
name|Surface
modifier|*
name|surface
init|=
literal|nullptr
decl_stmt|;
name|error
operator|=
name|display
operator|->
name|createPbufferFromClientBuffer
argument_list|(
name|configuration
argument_list|,
name|buffer
argument_list|,
name|attributes
argument_list|,
operator|&
name|surface
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
return|return
cast|static_cast
argument_list|<
name|EGLSurface
argument_list|>
argument_list|(
name|surface
argument_list|)
return|;
block|}
DECL|function|ReleaseThread
name|EGLBoolean
name|EGLAPIENTRY
name|ReleaseThread
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|MakeCurrent
argument_list|(
name|EGL_NO_DISPLAY
argument_list|,
name|EGL_NO_CONTEXT
argument_list|,
name|EGL_NO_SURFACE
argument_list|,
name|EGL_NO_SURFACE
argument_list|)
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|WaitClient
name|EGLBoolean
name|EGLAPIENTRY
name|WaitClient
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
name|GetGlobalDisplay
argument_list|()
decl_stmt|;
name|Error
name|error
init|=
name|ValidateDisplay
argument_list|(
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|error
operator|=
name|display
operator|->
name|waitClient
argument_list|()
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
comment|// EGL 1.4
DECL|function|GetCurrentContext
name|EGLContext
name|EGLAPIENTRY
name|GetCurrentContext
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|GetGlobalContext
argument_list|()
decl_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|EGLContext
argument_list|>
argument_list|(
name|context
argument_list|)
return|;
block|}
comment|// EGL 1.5
DECL|function|CreateSync
name|EGLSync
name|EGLAPIENTRY
name|CreateSync
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLenum
name|type
parameter_list|,
specifier|const
name|EGLAttrib
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLenum type = 0x%X, const EGLint* attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|type
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_NO_SYNC
return|;
block|}
DECL|function|DestroySync
name|EGLBoolean
name|EGLAPIENTRY
name|DestroySync
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSync
name|sync
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
DECL|function|ClientWaitSync
name|EGLint
name|EGLAPIENTRY
name|ClientWaitSync
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSync
name|sync
parameter_list|,
name|EGLint
name|flags
parameter_list|,
name|EGLTime
name|timeout
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p, EGLint flags = 0x%X, EGLTime timeout = %d)"
argument_list|,
name|dpy
argument_list|,
name|sync
argument_list|,
name|flags
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|GetSyncAttrib
name|EGLBoolean
name|EGLAPIENTRY
name|GetSyncAttrib
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSync
name|sync
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLAttrib
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p, EGLint attribute = 0x%X, EGLAttrib *value = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|sync
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
DECL|function|CreateImage
name|EGLImage
name|EGLAPIENTRY
name|CreateImage
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLContext
name|ctx
parameter_list|,
name|EGLenum
name|target
parameter_list|,
name|EGLClientBuffer
name|buffer
parameter_list|,
specifier|const
name|EGLAttrib
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p, EGLenum target = 0x%X, "
literal|"EGLClientBuffer buffer = 0x%0.8p, const EGLAttrib *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|ctx
argument_list|,
name|target
argument_list|,
name|buffer
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_NO_IMAGE
return|;
block|}
DECL|function|DestroyImage
name|EGLBoolean
name|EGLAPIENTRY
name|DestroyImage
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLImage
name|image
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLImage image = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
DECL|function|GetPlatformDisplay
name|EGLDisplay
name|EGLAPIENTRY
name|GetPlatformDisplay
parameter_list|(
name|EGLenum
name|platform
parameter_list|,
name|void
modifier|*
name|native_display
parameter_list|,
specifier|const
name|EGLAttrib
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLenum platform = %d, void* native_display = 0x%0.8p, const EGLint* attrib_list = 0x%0.8p)"
argument_list|,
name|platform
argument_list|,
name|native_display
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_NO_DISPLAY
return|;
block|}
DECL|function|CreatePlatformWindowSurface
name|EGLSurface
name|EGLAPIENTRY
name|CreatePlatformWindowSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|void
modifier|*
name|native_window
parameter_list|,
specifier|const
name|EGLAttrib
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, void* native_window = 0x%0.8p, const EGLint* attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|native_window
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
DECL|function|CreatePlatformPixmapSurface
name|EGLSurface
name|EGLAPIENTRY
name|CreatePlatformPixmapSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|void
modifier|*
name|native_pixmap
parameter_list|,
specifier|const
name|EGLAttrib
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, void* native_pixmap = 0x%0.8p, const EGLint* attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|native_pixmap
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
DECL|function|WaitSync
name|EGLBoolean
name|EGLAPIENTRY
name|WaitSync
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSync
name|sync
parameter_list|,
name|EGLint
name|flags
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p, EGLint flags = 0x%X)"
argument_list|,
name|dpy
argument_list|,
name|sync
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
DECL|function|GetProcAddress
name|__eglMustCastToProperFunctionPointerType
name|EGLAPIENTRY
name|GetProcAddress
parameter_list|(
specifier|const
name|char
modifier|*
name|procname
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(const char *procname = \"%s\")"
argument_list|,
name|procname
argument_list|)
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|std
operator|::
name|string
argument_list|,
name|__eglMustCastToProperFunctionPointerType
argument_list|>
name|ProcAddressMap
typedef|;
name|auto
name|generateProcAddressMap
init|=
capture|[]
parameter_list|()
block|{
name|ProcAddressMap
name|map
decl_stmt|;
DECL|macro|INSERT_PROC_ADDRESS
define|#
directive|define
name|INSERT_PROC_ADDRESS
parameter_list|(
name|ns
parameter_list|,
name|proc
parameter_list|)
define|\
value|map[#ns #proc] = reinterpret_cast<__eglMustCastToProperFunctionPointerType>(ns::proc)
comment|// GLES2 core
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ActiveTexture
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|AttachShader
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BindAttribLocation
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BindBuffer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BindFramebuffer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BindRenderbuffer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BindTexture
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BlendColor
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BlendEquation
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BlendEquationSeparate
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BlendFunc
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BlendFuncSeparate
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BufferData
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BufferSubData
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|CheckFramebufferStatus
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Clear
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ClearColor
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ClearDepthf
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ClearStencil
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ColorMask
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|CompileShader
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|CompressedTexImage2D
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|CompressedTexSubImage2D
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|CopyTexImage2D
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|CopyTexSubImage2D
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|CreateProgram
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|CreateShader
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|CullFace
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DeleteBuffers
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DeleteFramebuffers
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DeleteProgram
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DeleteRenderbuffers
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DeleteShader
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DeleteTextures
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DepthFunc
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DepthMask
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DepthRangef
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DetachShader
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Disable
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DisableVertexAttribArray
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DrawArrays
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DrawElements
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Enable
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|EnableVertexAttribArray
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Finish
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Flush
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|FramebufferRenderbuffer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|FramebufferTexture2D
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|FrontFace
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GenBuffers
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GenerateMipmap
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GenFramebuffers
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GenRenderbuffers
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GenTextures
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetActiveAttrib
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetActiveUniform
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetAttachedShaders
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetAttribLocation
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetBooleanv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetBufferParameteriv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetError
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetFloatv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetFramebufferAttachmentParameteriv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetIntegerv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetProgramiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetProgramInfoLog
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetRenderbufferParameteriv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetShaderiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetShaderInfoLog
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetShaderPrecisionFormat
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetShaderSource
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetString
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetTexParameterfv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetTexParameteriv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetUniformfv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetUniformiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetUniformLocation
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetVertexAttribfv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetVertexAttribiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetVertexAttribPointerv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Hint
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsBuffer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsEnabled
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsFramebuffer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsProgram
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsRenderbuffer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsShader
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsTexture
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|LineWidth
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|LinkProgram
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|PixelStorei
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|PolygonOffset
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ReadPixels
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ReleaseShaderCompiler
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|RenderbufferStorage
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|SampleCoverage
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Scissor
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ShaderBinary
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ShaderSource
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|StencilFunc
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|StencilFuncSeparate
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|StencilMask
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|StencilMaskSeparate
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|StencilOp
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|StencilOpSeparate
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|TexImage2D
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|TexParameterf
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|TexParameterfv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|TexParameteri
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|TexParameteriv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|TexSubImage2D
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform1f
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform1fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform1i
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform1iv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform2f
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform2fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform2i
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform2iv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform3f
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform3fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform3i
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform3iv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform4f
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform4fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform4i
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform4iv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|UniformMatrix2fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|UniformMatrix3fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|UniformMatrix4fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|UseProgram
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ValidateProgram
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttrib1f
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttrib1fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttrib2f
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttrib2fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttrib3f
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttrib3fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttrib4f
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttrib4fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttribPointer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Viewport
argument_list|)
expr_stmt|;
comment|// GL_ANGLE_framebuffer_blit
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BlitFramebufferANGLE
argument_list|)
expr_stmt|;
comment|// GL_ANGLE_framebuffer_multisample
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|RenderbufferStorageMultisampleANGLE
argument_list|)
expr_stmt|;
comment|// GL_EXT_discard_framebuffer
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DiscardFramebufferEXT
argument_list|)
expr_stmt|;
comment|// GL_NV_fence
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DeleteFencesNV
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GenFencesNV
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsFenceNV
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|TestFenceNV
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetFenceivNV
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|FinishFenceNV
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|SetFenceNV
argument_list|)
expr_stmt|;
comment|// GL_ANGLE_translated_shader_source
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetTranslatedShaderSourceANGLE
argument_list|)
expr_stmt|;
comment|// GL_EXT_texture_storage
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|TexStorage2DEXT
argument_list|)
expr_stmt|;
comment|// GL_EXT_robustness
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetGraphicsResetStatusEXT
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ReadnPixelsEXT
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetnUniformfvEXT
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetnUniformivEXT
argument_list|)
expr_stmt|;
comment|// GL_EXT_occlusion_query_boolean
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GenQueriesEXT
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DeleteQueriesEXT
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsQueryEXT
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BeginQueryEXT
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|EndQueryEXT
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetQueryivEXT
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetQueryObjectuivEXT
argument_list|)
expr_stmt|;
comment|// GL_EXT_draw_buffers
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DrawBuffersEXT
argument_list|)
expr_stmt|;
comment|// GL_ANGLE_instanced_arrays
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DrawArraysInstancedANGLE
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DrawElementsInstancedANGLE
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttribDivisorANGLE
argument_list|)
expr_stmt|;
comment|// GL_OES_get_program_binary
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetProgramBinaryOES
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ProgramBinaryOES
argument_list|)
expr_stmt|;
comment|// GL_OES_mapbuffer
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|MapBufferOES
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|UnmapBufferOES
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetBufferPointervOES
argument_list|)
expr_stmt|;
comment|// GL_EXT_map_buffer_range
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|MapBufferRangeEXT
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|FlushMappedBufferRangeEXT
argument_list|)
expr_stmt|;
comment|// GL_EXT_debug_marker
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|InsertEventMarkerEXT
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|PushGroupMarkerEXT
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|PopGroupMarkerEXT
argument_list|)
expr_stmt|;
comment|// GL_OES_EGL_image
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|EGLImageTargetTexture2DOES
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|EGLImageTargetRenderbufferStorageOES
argument_list|)
expr_stmt|;
comment|// GL_OES_vertex_array_object
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BindVertexArrayOES
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DeleteVertexArraysOES
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GenVertexArraysOES
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsVertexArrayOES
argument_list|)
expr_stmt|;
comment|// GL_KHR_debug
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DebugMessageControlKHR
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DebugMessageInsertKHR
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DebugMessageCallbackKHR
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetDebugMessageLogKHR
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|PushDebugGroupKHR
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|PopDebugGroupKHR
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ObjectLabelKHR
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetObjectLabelKHR
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ObjectPtrLabelKHR
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetObjectPtrLabelKHR
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetPointervKHR
argument_list|)
expr_stmt|;
comment|// GLES3 core
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ReadBuffer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DrawRangeElements
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|TexImage3D
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|TexSubImage3D
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|CopyTexSubImage3D
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|CompressedTexImage3D
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|CompressedTexSubImage3D
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GenQueries
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DeleteQueries
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsQuery
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BeginQuery
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|EndQuery
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetQueryiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetQueryObjectuiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|UnmapBuffer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetBufferPointerv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DrawBuffers
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|UniformMatrix2x3fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|UniformMatrix3x2fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|UniformMatrix2x4fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|UniformMatrix4x2fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|UniformMatrix3x4fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|UniformMatrix4x3fv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BlitFramebuffer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|RenderbufferStorageMultisample
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|FramebufferTextureLayer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|MapBufferRange
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|FlushMappedBufferRange
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BindVertexArray
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DeleteVertexArrays
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GenVertexArrays
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsVertexArray
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetIntegeri_v
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BeginTransformFeedback
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|EndTransformFeedback
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BindBufferRange
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BindBufferBase
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|TransformFeedbackVaryings
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetTransformFeedbackVarying
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttribIPointer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetVertexAttribIiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetVertexAttribIuiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttribI4i
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttribI4ui
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttribI4iv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttribI4uiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetUniformuiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetFragDataLocation
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform1ui
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform2ui
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform3ui
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform4ui
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform1uiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform2uiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform3uiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|Uniform4uiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ClearBufferiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ClearBufferuiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ClearBufferfv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ClearBufferfi
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetStringi
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|CopyBufferSubData
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetUniformIndices
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetActiveUniformsiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetUniformBlockIndex
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetActiveUniformBlockiv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetActiveUniformBlockName
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|UniformBlockBinding
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DrawArraysInstanced
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DrawElementsInstanced
argument_list|)
expr_stmt|;
name|map
index|[
literal|"glFenceSync"
index|]
operator|=
cast|reinterpret_cast
argument_list|<
name|__eglMustCastToProperFunctionPointerType
argument_list|>
argument_list|(
name|gl
operator|::
name|FenceSync_
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsSync
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DeleteSync
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ClientWaitSync
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|WaitSync
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetInteger64v
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetSynciv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetInteger64i_v
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetBufferParameteri64v
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GenSamplers
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DeleteSamplers
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsSampler
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BindSampler
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|SamplerParameteri
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|SamplerParameteriv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|SamplerParameterf
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|SamplerParameterfv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetSamplerParameteriv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetSamplerParameterfv
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|VertexAttribDivisor
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|BindTransformFeedback
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|DeleteTransformFeedbacks
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GenTransformFeedbacks
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|IsTransformFeedback
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|PauseTransformFeedback
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ResumeTransformFeedback
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetProgramBinary
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ProgramBinary
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|ProgramParameteri
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|InvalidateFramebuffer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|InvalidateSubFramebuffer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|TexStorage2D
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|TexStorage3D
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|gl
argument_list|,
name|GetInternalformativ
argument_list|)
expr_stmt|;
comment|// EGL 1.0
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|ChooseConfig
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|CopyBuffers
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|CreateContext
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|CreatePbufferSurface
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|CreatePixmapSurface
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|CreateWindowSurface
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|DestroyContext
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|DestroySurface
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|GetConfigAttrib
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|GetConfigs
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|GetCurrentDisplay
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|GetCurrentSurface
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|GetDisplay
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|GetError
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|GetProcAddress
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|Initialize
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|MakeCurrent
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|QueryContext
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|QueryString
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|QuerySurface
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|SwapBuffers
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|Terminate
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|WaitGL
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|WaitNative
argument_list|)
expr_stmt|;
comment|// EGL 1.1
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|BindTexImage
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|ReleaseTexImage
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|SurfaceAttrib
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|SwapInterval
argument_list|)
expr_stmt|;
comment|// EGL 1.2
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|BindAPI
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|QueryAPI
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|CreatePbufferFromClientBuffer
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|ReleaseThread
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|WaitClient
argument_list|)
expr_stmt|;
comment|// EGL 1.4
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|GetCurrentContext
argument_list|)
expr_stmt|;
comment|// EGL 1.5
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|CreateSync
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|DestroySync
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|ClientWaitSync
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|GetSyncAttrib
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|CreateImage
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|DestroyImage
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|GetPlatformDisplay
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|CreatePlatformWindowSurface
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|CreatePlatformPixmapSurface
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|WaitSync
argument_list|)
expr_stmt|;
comment|// EGL_ANGLE_query_surface_pointer
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|QuerySurfacePointerANGLE
argument_list|)
expr_stmt|;
comment|// EGL_NV_post_sub_buffer
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|PostSubBufferNV
argument_list|)
expr_stmt|;
comment|// EGL_EXT_platform_base
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|GetPlatformDisplayEXT
argument_list|)
expr_stmt|;
comment|// EGL_EXT_device_query
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|QueryDisplayAttribEXT
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|QueryDeviceAttribEXT
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|QueryDeviceStringEXT
argument_list|)
expr_stmt|;
comment|// EGL_KHR_image_base/EGL_KHR_image
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|CreateImageKHR
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|DestroyImageKHR
argument_list|)
expr_stmt|;
comment|// EGL_EXT_device_creation
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|CreateDeviceANGLE
argument_list|)
expr_stmt|;
name|INSERT_PROC_ADDRESS
argument_list|(
name|egl
argument_list|,
name|ReleaseDeviceANGLE
argument_list|)
expr_stmt|;
DECL|macro|INSERT_PROC_ADDRESS
undef|#
directive|undef
name|INSERT_PROC_ADDRESS
return|return
name|map
return|;
block|}
decl_stmt|;
specifier|static
specifier|const
name|ProcAddressMap
name|procAddressMap
init|=
name|generateProcAddressMap
argument_list|()
decl_stmt|;
name|auto
name|iter
init|=
name|procAddressMap
operator|.
name|find
argument_list|(
name|procname
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|procAddressMap
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|iter
operator|->
name|second
return|;
block|}
else|else
block|{
return|return
literal|nullptr
return|;
block|}
block|}
block|}
end_namespace
end_unit
