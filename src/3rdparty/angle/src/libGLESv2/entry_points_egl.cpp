begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright(c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// entry_points_egl.cpp : Implements the EGL entry points.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/entry_points_egl.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/entry_points_egl_ext.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/entry_points_gles_2_0_ext.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/entry_points_gles_3_0_ext.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/global_state.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Context.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Display.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Surface.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/validationEGL.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"common/version.h"
end_include
begin_include
include|#
directive|include
file|<EGL/eglext.h>
end_include
begin_namespace
DECL|namespace|egl
namespace|namespace
name|egl
block|{
comment|// EGL 1.0
DECL|function|GetError
name|EGLint
name|EGLAPIENTRY
name|GetError
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|EGLint
name|error
init|=
name|GetGlobalError
argument_list|()
decl_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
DECL|function|GetDisplay
name|EGLDisplay
name|EGLAPIENTRY
name|GetDisplay
parameter_list|(
name|EGLNativeDisplayType
name|display_id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLNativeDisplayType display_id = 0x%0.8p)"
argument_list|,
name|display_id
argument_list|)
expr_stmt|;
return|return
name|Display
operator|::
name|getDisplay
argument_list|(
name|display_id
argument_list|,
name|AttributeMap
argument_list|()
argument_list|)
return|;
block|}
DECL|function|Initialize
name|EGLBoolean
name|EGLAPIENTRY
name|Initialize
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLint
modifier|*
name|major
parameter_list|,
name|EGLint
modifier|*
name|minor
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLint *major = 0x%0.8p, EGLint *minor = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|major
argument_list|,
name|minor
argument_list|)
expr_stmt|;
if|if
condition|(
name|dpy
operator|==
name|EGL_NO_DISPLAY
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_DISPLAY
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|display
operator|->
name|initialize
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|major
condition|)
operator|*
name|major
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|minor
condition|)
operator|*
name|minor
operator|=
literal|4
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|Terminate
name|EGLBoolean
name|EGLAPIENTRY
name|Terminate
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|)
expr_stmt|;
if|if
condition|(
name|dpy
operator|==
name|EGL_NO_DISPLAY
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_DISPLAY
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|GetGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|display
operator|->
name|isValidContext
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|SetGlobalContext
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|SetGlobalDisplay
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
name|display
operator|->
name|terminate
argument_list|()
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|QueryString
specifier|const
name|char
modifier|*
name|EGLAPIENTRY
name|QueryString
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLint
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLint name = %d)"
argument_list|,
name|dpy
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|display
operator|==
name|EGL_NO_DISPLAY
operator|&&
name|name
operator|==
name|EGL_EXTENSIONS
operator|)
condition|)
block|{
name|Error
name|error
init|=
name|ValidateDisplay
argument_list|(
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
block|}
specifier|const
name|char
modifier|*
name|result
decl_stmt|;
switch|switch
condition|(
name|name
condition|)
block|{
case|case
name|EGL_CLIENT_APIS
case|:
name|result
operator|=
literal|"OpenGL_ES"
expr_stmt|;
break|break;
case|case
name|EGL_EXTENSIONS
case|:
if|if
condition|(
name|display
operator|==
name|EGL_NO_DISPLAY
condition|)
block|{
name|result
operator|=
name|Display
operator|::
name|getClientExtensionString
argument_list|()
operator|.
name|c_str
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|display
operator|->
name|getExtensionString
argument_list|()
operator|.
name|c_str
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|EGL_VENDOR
case|:
name|result
operator|=
name|display
operator|->
name|getVendorString
argument_list|()
operator|.
name|c_str
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_VERSION
case|:
name|result
operator|=
literal|"1.4 (ANGLE "
name|ANGLE_VERSION_STRING
literal|")"
expr_stmt|;
break|break;
default|default:
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|function|GetConfigs
name|EGLBoolean
name|EGLAPIENTRY
name|GetConfigs
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
modifier|*
name|configs
parameter_list|,
name|EGLint
name|config_size
parameter_list|,
name|EGLint
modifier|*
name|num_config
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig *configs = 0x%0.8p, "
literal|"EGLint config_size = %d, EGLint *num_config = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|configs
argument_list|,
name|config_size
argument_list|,
name|num_config
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateDisplay
argument_list|(
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
operator|!
name|num_config
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|std
operator|::
name|vector
argument_list|<
specifier|const
name|Config
modifier|*
argument_list|>
name|filteredConfigs
init|=
name|display
operator|->
name|getConfigs
argument_list|(
name|AttributeMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|configs
condition|)
block|{
name|filteredConfigs
operator|.
name|resize
argument_list|(
name|std
operator|::
name|min
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|filteredConfigs
operator|.
name|size
argument_list|()
argument_list|,
name|config_size
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filteredConfigs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|configs
index|[
name|i
index|]
operator|=
cast|const_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|filteredConfigs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
operator|*
name|num_config
operator|=
name|filteredConfigs
operator|.
name|size
argument_list|()
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|ChooseConfig
name|EGLBoolean
name|EGLAPIENTRY
name|ChooseConfig
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|,
name|EGLConfig
modifier|*
name|configs
parameter_list|,
name|EGLint
name|config_size
parameter_list|,
name|EGLint
modifier|*
name|num_config
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, const EGLint *attrib_list = 0x%0.8p, "
literal|"EGLConfig *configs = 0x%0.8p, EGLint config_size = %d, EGLint *num_config = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|attrib_list
argument_list|,
name|configs
argument_list|,
name|config_size
argument_list|,
name|num_config
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateDisplay
argument_list|(
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
operator|!
name|num_config
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|std
operator|::
name|vector
argument_list|<
specifier|const
name|Config
modifier|*
argument_list|>
name|filteredConfigs
init|=
name|display
operator|->
name|getConfigs
argument_list|(
name|AttributeMap
argument_list|(
name|attrib_list
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|configs
condition|)
block|{
name|filteredConfigs
operator|.
name|resize
argument_list|(
name|std
operator|::
name|min
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|filteredConfigs
operator|.
name|size
argument_list|()
argument_list|,
name|config_size
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filteredConfigs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|configs
index|[
name|i
index|]
operator|=
cast|const_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|filteredConfigs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
operator|*
name|num_config
operator|=
name|filteredConfigs
operator|.
name|size
argument_list|()
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|GetConfigAttrib
name|EGLBoolean
name|EGLAPIENTRY
name|GetConfigAttrib
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLint attribute = %d, EGLint *value = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Config
modifier|*
name|configuration
init|=
cast|static_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateConfig
argument_list|(
name|display
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
operator|!
name|display
operator|->
name|getConfigAttrib
argument_list|(
name|configuration
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|CreateWindowSurface
name|EGLSurface
name|EGLAPIENTRY
name|CreateWindowSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLNativeWindowType
name|win
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLNativeWindowType win = 0x%0.8p, "
literal|"const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|win
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Config
modifier|*
name|configuration
init|=
cast|static_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|AttributeMap
name|attributes
argument_list|(
name|attrib_list
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateCreateWindowSurface
argument_list|(
name|display
argument_list|,
name|configuration
argument_list|,
name|win
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
name|egl
operator|::
name|Surface
modifier|*
name|surface
init|=
literal|nullptr
decl_stmt|;
name|error
operator|=
name|display
operator|->
name|createWindowSurface
argument_list|(
name|configuration
argument_list|,
name|win
argument_list|,
name|attributes
argument_list|,
operator|&
name|surface
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
return|return
cast|static_cast
argument_list|<
name|EGLSurface
argument_list|>
argument_list|(
name|surface
argument_list|)
return|;
block|}
DECL|function|CreatePbufferSurface
name|EGLSurface
name|EGLAPIENTRY
name|CreatePbufferSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Config
modifier|*
name|configuration
init|=
cast|static_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|AttributeMap
name|attributes
argument_list|(
name|attrib_list
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateCreatePbufferSurface
argument_list|(
name|display
argument_list|,
name|configuration
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
name|egl
operator|::
name|Surface
modifier|*
name|surface
init|=
literal|nullptr
decl_stmt|;
name|error
operator|=
name|display
operator|->
name|createPbufferSurface
argument_list|(
name|configuration
argument_list|,
name|attributes
argument_list|,
operator|&
name|surface
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
return|return
cast|static_cast
argument_list|<
name|EGLSurface
argument_list|>
argument_list|(
name|surface
argument_list|)
return|;
block|}
DECL|function|CreatePixmapSurface
name|EGLSurface
name|EGLAPIENTRY
name|CreatePixmapSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLNativePixmapType
name|pixmap
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLNativePixmapType pixmap = 0x%0.8p, "
literal|"const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|pixmap
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Config
modifier|*
name|configuration
init|=
cast|static_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateConfig
argument_list|(
name|display
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
DECL|function|DestroySurface
name|EGLBoolean
name|EGLAPIENTRY
name|DestroySurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|display
operator|->
name|destroySurface
argument_list|(
operator|(
name|Surface
operator|*
operator|)
name|surface
argument_list|)
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|QuerySurface
name|EGLBoolean
name|EGLAPIENTRY
name|QuerySurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint attribute = %d, EGLint *value = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Surface
modifier|*
name|eglSurface
init|=
operator|(
name|Surface
operator|*
operator|)
name|surface
decl_stmt|;
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
switch|switch
condition|(
name|attribute
condition|)
block|{
case|case
name|EGL_VG_ALPHA_FORMAT
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_VG_COLORSPACE
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_CONFIG_ID
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getConfig
argument_list|()
operator|->
name|configID
expr_stmt|;
break|break;
case|case
name|EGL_HEIGHT
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getHeight
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_HORIZONTAL_RESOLUTION
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_LARGEST_PBUFFER
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_MIPMAP_TEXTURE
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_MIPMAP_LEVEL
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_MULTISAMPLE_RESOLVE
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_PIXEL_ASPECT_RATIO
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getPixelAspectRatio
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_RENDER_BUFFER
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getRenderBuffer
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_SWAP_BEHAVIOR
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getSwapBehavior
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_TEXTURE_FORMAT
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getTextureFormat
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_TEXTURE_TARGET
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getTextureTarget
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_VERTICAL_RESOLUTION
case|:
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
break|break;
case|case
name|EGL_WIDTH
case|:
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|getWidth
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_POST_SUB_BUFFER_SUPPORTED_NV
case|:
if|if
condition|(
operator|!
name|display
operator|->
name|getExtensions
argument_list|()
operator|.
name|postSubBuffer
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|isPostSubBufferSupported
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_FIXED_SIZE_ANGLE
case|:
if|if
condition|(
operator|!
name|display
operator|->
name|getExtensions
argument_list|()
operator|.
name|windowFixedSize
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
operator|*
name|value
operator|=
name|eglSurface
operator|->
name|isFixedSize
argument_list|()
expr_stmt|;
break|break;
default|default:
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|CreateContext
name|EGLContext
name|EGLAPIENTRY
name|CreateContext
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|EGLContext
name|share_context
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, EGLContext share_context = 0x%0.8p, "
literal|"const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|share_context
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Config
modifier|*
name|configuration
init|=
cast|static_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|sharedGLContext
init|=
cast|static_cast
argument_list|<
name|gl
operator|::
name|Context
operator|*
argument_list|>
argument_list|(
name|share_context
argument_list|)
decl_stmt|;
name|AttributeMap
name|attributes
argument_list|(
name|attrib_list
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateCreateContext
argument_list|(
name|display
argument_list|,
name|configuration
argument_list|,
name|sharedGLContext
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_CONTEXT
return|;
block|}
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
literal|nullptr
decl_stmt|;
name|error
operator|=
name|display
operator|->
name|createContext
argument_list|(
name|configuration
argument_list|,
name|sharedGLContext
argument_list|,
name|attributes
argument_list|,
operator|&
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_CONTEXT
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|EGLContext
argument_list|>
argument_list|(
name|context
argument_list|)
return|;
block|}
DECL|function|DestroyContext
name|EGLBoolean
name|EGLAPIENTRY
name|DestroyContext
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLContext
name|ctx
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
cast|static_cast
argument_list|<
name|gl
operator|::
name|Context
operator|*
argument_list|>
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateContext
argument_list|(
name|display
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|ctx
operator|==
name|EGL_NO_CONTEXT
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|context
operator|==
name|GetGlobalContext
argument_list|()
condition|)
block|{
name|SetGlobalDisplay
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|SetGlobalContext
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
name|display
operator|->
name|destroyContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|MakeCurrent
name|EGLBoolean
name|EGLAPIENTRY
name|MakeCurrent
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|draw
parameter_list|,
name|EGLSurface
name|read
parameter_list|,
name|EGLContext
name|ctx
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface draw = 0x%0.8p, EGLSurface read = 0x%0.8p, EGLContext ctx = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|draw
argument_list|,
name|read
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
cast|static_cast
argument_list|<
name|gl
operator|::
name|Context
operator|*
argument_list|>
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|bool
name|noContext
init|=
operator|(
name|ctx
operator|==
name|EGL_NO_CONTEXT
operator|)
decl_stmt|;
name|bool
name|noSurface
init|=
operator|(
name|draw
operator|==
name|EGL_NO_SURFACE
operator|||
name|read
operator|==
name|EGL_NO_SURFACE
operator|)
decl_stmt|;
if|if
condition|(
name|noContext
operator|!=
name|noSurface
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|ctx
operator|!=
name|EGL_NO_CONTEXT
condition|)
block|{
name|Error
name|error
init|=
name|ValidateContext
argument_list|(
name|display
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
block|}
if|if
condition|(
name|dpy
operator|!=
name|EGL_NO_DISPLAY
operator|&&
name|display
operator|->
name|isInitialized
argument_list|()
condition|)
block|{
if|if
condition|(
name|display
operator|->
name|testDeviceLost
argument_list|()
condition|)
block|{
name|display
operator|->
name|notifyDeviceLost
argument_list|()
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|display
operator|->
name|isDeviceLost
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_CONTEXT_LOST
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
block|}
name|Surface
modifier|*
name|drawSurface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|draw
argument_list|)
decl_stmt|;
if|if
condition|(
name|draw
operator|!=
name|EGL_NO_SURFACE
condition|)
block|{
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|drawSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
block|}
name|Surface
modifier|*
name|readSurface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|read
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|!=
name|EGL_NO_SURFACE
condition|)
block|{
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|readSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
block|}
if|if
condition|(
name|draw
operator|!=
name|read
condition|)
block|{
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
block|}
name|SetGlobalDisplay
argument_list|(
name|display
argument_list|)
expr_stmt|;
name|SetGlobalDrawSurface
argument_list|(
name|drawSurface
argument_list|)
expr_stmt|;
name|SetGlobalReadSurface
argument_list|(
name|readSurface
argument_list|)
expr_stmt|;
name|SetGlobalContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|!=
literal|nullptr
operator|&&
name|display
operator|!=
literal|nullptr
operator|&&
name|drawSurface
operator|!=
literal|nullptr
condition|)
block|{
name|display
operator|->
name|makeCurrent
argument_list|(
name|drawSurface
argument_list|,
name|readSurface
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|GetCurrentSurface
name|EGLSurface
name|EGLAPIENTRY
name|GetCurrentSurface
parameter_list|(
name|EGLint
name|readdraw
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLint readdraw = %d)"
argument_list|,
name|readdraw
argument_list|)
expr_stmt|;
if|if
condition|(
name|readdraw
operator|==
name|EGL_READ
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GetGlobalReadSurface
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|readdraw
operator|==
name|EGL_DRAW
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GetGlobalDrawSurface
argument_list|()
return|;
block|}
else|else
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
block|}
DECL|function|GetCurrentDisplay
name|EGLDisplay
name|EGLAPIENTRY
name|GetCurrentDisplay
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|EGLDisplay
name|dpy
init|=
name|GetGlobalDisplay
argument_list|()
decl_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dpy
return|;
block|}
DECL|function|QueryContext
name|EGLBoolean
name|EGLAPIENTRY
name|QueryContext
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLContext
name|ctx
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p, EGLint attribute = %d, EGLint *value = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|ctx
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
cast|static_cast
argument_list|<
name|gl
operator|::
name|Context
operator|*
argument_list|>
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateContext
argument_list|(
name|display
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
switch|switch
condition|(
name|attribute
condition|)
block|{
case|case
name|EGL_CONFIG_ID
case|:
operator|*
name|value
operator|=
name|context
operator|->
name|getConfigID
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_CONTEXT_CLIENT_TYPE
case|:
operator|*
name|value
operator|=
name|context
operator|->
name|getClientType
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_CONTEXT_CLIENT_VERSION
case|:
operator|*
name|value
operator|=
name|context
operator|->
name|getClientVersion
argument_list|()
expr_stmt|;
break|break;
case|case
name|EGL_RENDER_BUFFER
case|:
operator|*
name|value
operator|=
name|context
operator|->
name|getRenderBuffer
argument_list|()
expr_stmt|;
break|break;
default|default:
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|WaitGL
name|EGLBoolean
name|EGLAPIENTRY
name|WaitGL
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|WaitNative
name|EGLBoolean
name|EGLAPIENTRY
name|WaitNative
parameter_list|(
name|EGLint
name|engine
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLint engine = %d)"
argument_list|,
name|engine
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|SwapBuffers
name|EGLBoolean
name|EGLAPIENTRY
name|SwapBuffers
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Surface
modifier|*
name|eglSurface
init|=
operator|(
name|Surface
operator|*
operator|)
name|surface
decl_stmt|;
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|display
operator|->
name|isDeviceLost
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_CONTEXT_LOST
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|error
operator|=
name|eglSurface
operator|->
name|swap
argument_list|()
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|CopyBuffers
name|EGLBoolean
name|EGLAPIENTRY
name|CopyBuffers
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLNativePixmapType
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLNativePixmapType target = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|display
operator|->
name|isDeviceLost
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_CONTEXT_LOST
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// EGL 1.1
DECL|function|BindTexImage
name|EGLBoolean
name|EGLAPIENTRY
name|BindTexImage
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|buffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint buffer = %d)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|buffer
operator|!=
name|EGL_BACK_BUFFER
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
operator|||
name|eglSurface
operator|->
name|getType
argument_list|()
operator|==
name|EGL_WINDOW_BIT
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|eglSurface
operator|->
name|getBoundTexture
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_ACCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|eglSurface
operator|->
name|getTextureFormat
argument_list|()
operator|==
name|EGL_NO_TEXTURE
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|GetGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Texture
modifier|*
name|textureObject
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|textureObject
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|textureObject
operator|->
name|isImmutable
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|eglSurface
operator|->
name|bindTexImage
argument_list|(
name|textureObject
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|SurfaceAttrib
name|EGLBoolean
name|EGLAPIENTRY
name|SurfaceAttrib
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLint
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint attribute = %d, EGLint value = %d)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|ReleaseTexImage
name|EGLBoolean
name|EGLAPIENTRY
name|ReleaseTexImage
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSurface
name|surface
parameter_list|,
name|EGLint
name|buffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSurface surface = 0x%0.8p, EGLint buffer = %d)"
argument_list|,
name|dpy
argument_list|,
name|surface
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Surface
modifier|*
name|eglSurface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|surface
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateSurface
argument_list|(
name|display
argument_list|,
name|eglSurface
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|buffer
operator|!=
name|EGL_BACK_BUFFER
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|surface
operator|==
name|EGL_NO_SURFACE
operator|||
name|eglSurface
operator|->
name|getType
argument_list|()
operator|==
name|EGL_WINDOW_BIT
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
if|if
condition|(
name|eglSurface
operator|->
name|getTextureFormat
argument_list|()
operator|==
name|EGL_NO_TEXTURE
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_MATCH
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|eglSurface
operator|->
name|getBoundTexture
argument_list|()
decl_stmt|;
if|if
condition|(
name|texture
condition|)
block|{
name|eglSurface
operator|->
name|releaseTexImage
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|SwapInterval
name|EGLBoolean
name|EGLAPIENTRY
name|SwapInterval
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLint
name|interval
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLint interval = %d)"
argument_list|,
name|dpy
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateDisplay
argument_list|(
name|display
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|Surface
modifier|*
name|draw_surface
init|=
cast|static_cast
argument_list|<
name|Surface
operator|*
argument_list|>
argument_list|(
name|GetGlobalDrawSurface
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|draw_surface
operator|==
name|NULL
condition|)
block|{
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_SURFACE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
specifier|const
name|egl
operator|::
name|Config
modifier|*
name|surfaceConfig
init|=
name|draw_surface
operator|->
name|getConfig
argument_list|()
decl_stmt|;
name|EGLint
name|clampedInterval
init|=
name|std
operator|::
name|min
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|interval
argument_list|,
name|surfaceConfig
operator|->
name|minSwapInterval
argument_list|)
argument_list|,
name|surfaceConfig
operator|->
name|maxSwapInterval
argument_list|)
decl_stmt|;
name|draw_surface
operator|->
name|setSwapInterval
argument_list|(
name|clampedInterval
argument_list|)
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
comment|// EGL 1.2
DECL|function|BindAPI
name|EGLBoolean
name|EGLAPIENTRY
name|BindAPI
parameter_list|(
name|EGLenum
name|api
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLenum api = 0x%X)"
argument_list|,
name|api
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|api
condition|)
block|{
case|case
name|EGL_OPENGL_API
case|:
case|case
name|EGL_OPENVG_API
case|:
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
comment|// Not supported by this implementation
case|case
name|EGL_OPENGL_ES_API
case|:
break|break;
default|default:
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_BAD_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
name|SetGlobalAPI
argument_list|(
name|api
argument_list|)
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|QueryAPI
name|EGLenum
name|EGLAPIENTRY
name|QueryAPI
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|EGLenum
name|API
init|=
name|GetGlobalAPI
argument_list|()
decl_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|API
return|;
block|}
DECL|function|CreatePbufferFromClientBuffer
name|EGLSurface
name|EGLAPIENTRY
name|CreatePbufferFromClientBuffer
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLenum
name|buftype
parameter_list|,
name|EGLClientBuffer
name|buffer
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
specifier|const
name|EGLint
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLenum buftype = 0x%X, EGLClientBuffer buffer = 0x%0.8p, "
literal|"EGLConfig config = 0x%0.8p, const EGLint *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|buftype
argument_list|,
name|buffer
argument_list|,
name|config
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|Display
modifier|*
name|display
init|=
cast|static_cast
argument_list|<
name|Display
operator|*
argument_list|>
argument_list|(
name|dpy
argument_list|)
decl_stmt|;
name|Config
modifier|*
name|configuration
init|=
cast|static_cast
argument_list|<
name|Config
operator|*
argument_list|>
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|AttributeMap
name|attributes
argument_list|(
name|attrib_list
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|ValidateCreatePbufferFromClientBuffer
argument_list|(
name|display
argument_list|,
name|buftype
argument_list|,
name|buffer
argument_list|,
name|configuration
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
name|egl
operator|::
name|Surface
modifier|*
name|surface
init|=
literal|nullptr
decl_stmt|;
name|error
operator|=
name|display
operator|->
name|createPbufferFromClientBuffer
argument_list|(
name|configuration
argument_list|,
name|buffer
argument_list|,
name|attributes
argument_list|,
operator|&
name|surface
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|SetGlobalError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
return|return
cast|static_cast
argument_list|<
name|EGLSurface
argument_list|>
argument_list|(
name|surface
argument_list|)
return|;
block|}
DECL|function|ReleaseThread
name|EGLBoolean
name|EGLAPIENTRY
name|ReleaseThread
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|MakeCurrent
argument_list|(
name|EGL_NO_DISPLAY
argument_list|,
name|EGL_NO_CONTEXT
argument_list|,
name|EGL_NO_SURFACE
argument_list|,
name|EGL_NO_SURFACE
argument_list|)
expr_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EGL_TRUE
return|;
block|}
DECL|function|WaitClient
name|EGLBoolean
name|EGLAPIENTRY
name|WaitClient
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// EGL 1.4
DECL|function|GetCurrentContext
name|EGLContext
name|EGLAPIENTRY
name|GetCurrentContext
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|GetGlobalContext
argument_list|()
decl_stmt|;
name|SetGlobalError
argument_list|(
name|Error
argument_list|(
name|EGL_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|EGLContext
argument_list|>
argument_list|(
name|context
argument_list|)
return|;
block|}
comment|// EGL 1.5
DECL|function|CreateSync
name|EGLSync
name|EGLAPIENTRY
name|CreateSync
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLenum
name|type
parameter_list|,
specifier|const
name|EGLAttrib
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLenum type = 0x%X, const EGLint* attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|type
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_NO_SYNC
return|;
block|}
DECL|function|DestroySync
name|EGLBoolean
name|EGLAPIENTRY
name|DestroySync
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSync
name|sync
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
DECL|function|ClientWaitSync
name|EGLint
name|EGLAPIENTRY
name|ClientWaitSync
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSync
name|sync
parameter_list|,
name|EGLint
name|flags
parameter_list|,
name|EGLTime
name|timeout
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p, EGLint flags = 0x%X, EGLTime timeout = %d)"
argument_list|,
name|dpy
argument_list|,
name|sync
argument_list|,
name|flags
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|GetSyncAttrib
name|EGLBoolean
name|EGLAPIENTRY
name|GetSyncAttrib
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSync
name|sync
parameter_list|,
name|EGLint
name|attribute
parameter_list|,
name|EGLAttrib
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p, EGLint attribute = 0x%X, EGLAttrib *value = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|sync
argument_list|,
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
DECL|function|CreateImage
name|EGLImage
name|EGLAPIENTRY
name|CreateImage
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLContext
name|ctx
parameter_list|,
name|EGLenum
name|target
parameter_list|,
name|EGLClientBuffer
name|buffer
parameter_list|,
specifier|const
name|EGLAttrib
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLContext ctx = 0x%0.8p, EGLenum target = 0x%X, "
literal|"EGLClientBuffer buffer = 0x%0.8p, const EGLAttrib *attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|ctx
argument_list|,
name|target
argument_list|,
name|buffer
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_NO_IMAGE
return|;
block|}
DECL|function|DestroyImage
name|EGLBoolean
name|EGLAPIENTRY
name|DestroyImage
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLImage
name|image
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLImage image = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|image
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
DECL|function|GetPlatformDisplay
name|EGLDisplay
name|EGLAPIENTRY
name|GetPlatformDisplay
parameter_list|(
name|EGLenum
name|platform
parameter_list|,
name|void
modifier|*
name|native_display
parameter_list|,
specifier|const
name|EGLAttrib
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLenum platform = %d, void* native_display = 0x%0.8p, const EGLint* attrib_list = 0x%0.8p)"
argument_list|,
name|platform
argument_list|,
name|native_display
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_NO_DISPLAY
return|;
block|}
DECL|function|CreatePlatformWindowSurface
name|EGLSurface
name|EGLAPIENTRY
name|CreatePlatformWindowSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|void
modifier|*
name|native_window
parameter_list|,
specifier|const
name|EGLAttrib
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, void* native_window = 0x%0.8p, const EGLint* attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|native_window
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
DECL|function|CreatePlatformPixmapSurface
name|EGLSurface
name|EGLAPIENTRY
name|CreatePlatformPixmapSurface
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLConfig
name|config
parameter_list|,
name|void
modifier|*
name|native_pixmap
parameter_list|,
specifier|const
name|EGLAttrib
modifier|*
name|attrib_list
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLConfig config = 0x%0.8p, void* native_pixmap = 0x%0.8p, const EGLint* attrib_list = 0x%0.8p)"
argument_list|,
name|dpy
argument_list|,
name|config
argument_list|,
name|native_pixmap
argument_list|,
name|attrib_list
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_NO_SURFACE
return|;
block|}
DECL|function|WaitSync
name|EGLBoolean
name|EGLAPIENTRY
name|WaitSync
parameter_list|(
name|EGLDisplay
name|dpy
parameter_list|,
name|EGLSync
name|sync
parameter_list|,
name|EGLint
name|flags
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(EGLDisplay dpy = 0x%0.8p, EGLSync sync = 0x%0.8p, EGLint flags = 0x%X)"
argument_list|,
name|dpy
argument_list|,
name|sync
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
name|EGL_FALSE
return|;
block|}
DECL|function|GetProcAddress
name|__eglMustCastToProperFunctionPointerType
name|EGLAPIENTRY
name|GetProcAddress
parameter_list|(
specifier|const
name|char
modifier|*
name|procname
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(const char *procname = \"%s\")"
argument_list|,
name|procname
argument_list|)
expr_stmt|;
struct|struct
name|Extension
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|__eglMustCastToProperFunctionPointerType
name|address
decl_stmt|;
block|}
struct|;
specifier|static
specifier|const
name|Extension
name|extensions
index|[]
init|=
block|{
block|{
literal|"eglQuerySurfacePointerANGLE"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|QuerySurfacePointerANGLE
block|}
block|,
block|{
literal|"eglPostSubBufferNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|PostSubBufferNV
block|}
block|,
block|{
literal|"eglGetPlatformDisplayEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|GetPlatformDisplayEXT
block|}
block|,
block|{
literal|"glBlitFramebufferANGLE"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|BlitFramebufferANGLE
block|}
block|,
block|{
literal|"glRenderbufferStorageMultisampleANGLE"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|RenderbufferStorageMultisampleANGLE
block|}
block|,
block|{
literal|"glDeleteFencesNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|DeleteFencesNV
block|}
block|,
block|{
literal|"glGenFencesNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|GenFencesNV
block|}
block|,
block|{
literal|"glIsFenceNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|IsFenceNV
block|}
block|,
block|{
literal|"glTestFenceNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|TestFenceNV
block|}
block|,
block|{
literal|"glGetFenceivNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|GetFenceivNV
block|}
block|,
block|{
literal|"glFinishFenceNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|FinishFenceNV
block|}
block|,
block|{
literal|"glSetFenceNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|SetFenceNV
block|}
block|,
block|{
literal|"glGetTranslatedShaderSourceANGLE"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|GetTranslatedShaderSourceANGLE
block|}
block|,
block|{
literal|"glTexStorage2DEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|TexStorage2DEXT
block|}
block|,
block|{
literal|"glGetGraphicsResetStatusEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|GetGraphicsResetStatusEXT
block|}
block|,
block|{
literal|"glReadnPixelsEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|ReadnPixelsEXT
block|}
block|,
block|{
literal|"glGetnUniformfvEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|GetnUniformfvEXT
block|}
block|,
block|{
literal|"glGetnUniformivEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|GetnUniformivEXT
block|}
block|,
block|{
literal|"glGenQueriesEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|GenQueriesEXT
block|}
block|,
block|{
literal|"glDeleteQueriesEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|DeleteQueriesEXT
block|}
block|,
block|{
literal|"glIsQueryEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|IsQueryEXT
block|}
block|,
block|{
literal|"glBeginQueryEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|BeginQueryEXT
block|}
block|,
block|{
literal|"glEndQueryEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|EndQueryEXT
block|}
block|,
block|{
literal|"glGetQueryivEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|GetQueryivEXT
block|}
block|,
block|{
literal|"glGetQueryObjectuivEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|GetQueryObjectuivEXT
block|}
block|,
block|{
literal|"glDrawBuffersEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|DrawBuffersEXT
block|}
block|,
block|{
literal|"glVertexAttribDivisorANGLE"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|VertexAttribDivisorANGLE
block|}
block|,
block|{
literal|"glDrawArraysInstancedANGLE"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|DrawArraysInstancedANGLE
block|}
block|,
block|{
literal|"glDrawElementsInstancedANGLE"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|DrawElementsInstancedANGLE
block|}
block|,
block|{
literal|"glGetProgramBinaryOES"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|GetProgramBinaryOES
block|}
block|,
block|{
literal|"glProgramBinaryOES"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|ProgramBinaryOES
block|}
block|,
block|{
literal|"glGetBufferPointervOES"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|GetBufferPointervOES
block|}
block|,
block|{
literal|"glMapBufferOES"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|MapBufferOES
block|}
block|,
block|{
literal|"glUnmapBufferOES"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|UnmapBufferOES
block|}
block|,
block|{
literal|"glMapBufferRangeEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|MapBufferRangeEXT
block|}
block|,
block|{
literal|"glFlushMappedBufferRangeEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|gl
operator|::
name|FlushMappedBufferRangeEXT
block|}
block|,
block|{
literal|""
block|,
name|NULL
block|}
block|,     }
decl_stmt|;
for|for
control|(
specifier|const
name|Extension
modifier|*
name|extension
init|=
operator|&
name|extensions
index|[
literal|0
index|]
init|;
name|extension
operator|->
name|address
operator|!=
literal|nullptr
condition|;
name|extension
operator|++
control|)
block|{
if|if
condition|(
name|strcmp
argument_list|(
name|procname
argument_list|,
name|extension
operator|->
name|name
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
cast|reinterpret_cast
argument_list|<
name|__eglMustCastToProperFunctionPointerType
argument_list|>
argument_list|(
name|extension
operator|->
name|address
argument_list|)
return|;
block|}
block|}
return|return
name|NULL
return|;
block|}
block|}
end_namespace
end_unit
