begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright(c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// entry_points_gles_2_0.cpp : Implements the GLES 2.0 entry points.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/entry_points_gles_2_0.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/global_state.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Buffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Compiler.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Context.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Shader.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Program.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/VertexArray.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/VertexAttribute.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/validationES.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/validationES2.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/validationES3.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/queryconversions.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"common/version.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|ActiveTexture
name|void
name|GL_APIENTRY
name|ActiveTexture
parameter_list|(
name|GLenum
name|texture
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum texture = 0x%X)"
argument_list|,
name|texture
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|texture
argument_list|<
name|GL_TEXTURE0
operator|||
name|texture
argument_list|>
name|GL_TEXTURE0
operator|+
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxCombinedTextureImageUnits
operator|-
literal|1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setActiveSampler
argument_list|(
name|texture
operator|-
name|GL_TEXTURE0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|AttachShader
name|void
name|GL_APIENTRY
name|AttachShader
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLuint shader = %d)"
argument_list|,
name|program
argument_list|,
name|shader
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|Program
modifier|*
name|programObject
init|=
name|GetValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
return|return;
block|}
name|Shader
modifier|*
name|shaderObject
init|=
name|GetValidShader
argument_list|(
name|context
argument_list|,
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|programObject
operator|->
name|attachShader
argument_list|(
name|shaderObject
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|BindAttribLocation
name|void
name|GL_APIENTRY
name|BindAttribLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLuint index = %d, const GLchar* name = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|index
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|GetValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|strncmp
argument_list|(
name|name
argument_list|,
literal|"gl_"
argument_list|,
literal|3
argument_list|)
operator|==
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|programObject
operator|->
name|bindAttributeLocation
argument_list|(
name|index
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|BindBuffer
name|void
name|GL_APIENTRY
name|BindBuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|buffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint buffer = %d)"
argument_list|,
name|target
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_ARRAY_BUFFER
case|:
name|context
operator|->
name|bindArrayBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_ELEMENT_ARRAY_BUFFER
case|:
name|context
operator|->
name|bindElementArrayBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_COPY_READ_BUFFER
case|:
name|context
operator|->
name|bindCopyReadBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_COPY_WRITE_BUFFER
case|:
name|context
operator|->
name|bindCopyWriteBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_PIXEL_PACK_BUFFER
case|:
name|context
operator|->
name|bindPixelPackBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_PIXEL_UNPACK_BUFFER
case|:
name|context
operator|->
name|bindPixelUnpackBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_UNIFORM_BUFFER
case|:
name|context
operator|->
name|bindGenericUniformBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER
case|:
name|context
operator|->
name|bindGenericTransformFeedbackBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|BindFramebuffer
name|void
name|GL_APIENTRY
name|BindFramebuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|framebuffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint framebuffer = %d)"
argument_list|,
name|target
argument_list|,
name|framebuffer
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidFramebufferTarget
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|target
operator|==
name|GL_READ_FRAMEBUFFER_ANGLE
operator|||
name|target
operator|==
name|GL_FRAMEBUFFER
condition|)
block|{
name|context
operator|->
name|bindReadFramebuffer
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|target
operator|==
name|GL_DRAW_FRAMEBUFFER_ANGLE
operator|||
name|target
operator|==
name|GL_FRAMEBUFFER
condition|)
block|{
name|context
operator|->
name|bindDrawFramebuffer
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|BindRenderbuffer
name|void
name|GL_APIENTRY
name|BindRenderbuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint renderbuffer = %d)"
argument_list|,
name|target
argument_list|,
name|renderbuffer
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|target
operator|!=
name|GL_RENDERBUFFER
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindRenderbuffer
argument_list|(
name|renderbuffer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|BindTexture
name|void
name|GL_APIENTRY
name|BindTexture
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|texture
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint texture = %d)"
argument_list|,
name|target
argument_list|,
name|texture
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|Texture
modifier|*
name|textureObject
init|=
name|context
operator|->
name|getTexture
argument_list|(
name|texture
argument_list|)
decl_stmt|;
if|if
condition|(
name|textureObject
operator|&&
name|textureObject
operator|->
name|getTarget
argument_list|()
operator|!=
name|target
operator|&&
name|texture
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
case|case
name|GL_TEXTURE_CUBE_MAP
case|:
break|break;
case|case
name|GL_TEXTURE_3D
case|:
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindTexture
argument_list|(
name|target
argument_list|,
name|texture
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|BlendColor
name|void
name|GL_APIENTRY
name|BlendColor
parameter_list|(
name|GLclampf
name|red
parameter_list|,
name|GLclampf
name|green
parameter_list|,
name|GLclampf
name|blue
parameter_list|,
name|GLclampf
name|alpha
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLclampf red = %f, GLclampf green = %f, GLclampf blue = %f, GLclampf alpha = %f)"
argument_list|,
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setBlendColor
argument_list|(
name|clamp01
argument_list|(
name|red
argument_list|)
argument_list|,
name|clamp01
argument_list|(
name|green
argument_list|)
argument_list|,
name|clamp01
argument_list|(
name|blue
argument_list|)
argument_list|,
name|clamp01
argument_list|(
name|alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|BlendEquation
name|void
name|GL_APIENTRY
name|BlendEquation
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
name|BlendEquationSeparate
argument_list|(
name|mode
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
DECL|function|BlendEquationSeparate
name|void
name|GL_APIENTRY
name|BlendEquationSeparate
parameter_list|(
name|GLenum
name|modeRGB
parameter_list|,
name|GLenum
name|modeAlpha
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum modeRGB = 0x%X, GLenum modeAlpha = 0x%X)"
argument_list|,
name|modeRGB
argument_list|,
name|modeAlpha
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|modeRGB
condition|)
block|{
case|case
name|GL_FUNC_ADD
case|:
case|case
name|GL_FUNC_SUBTRACT
case|:
case|case
name|GL_FUNC_REVERSE_SUBTRACT
case|:
case|case
name|GL_MIN
case|:
case|case
name|GL_MAX
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|modeAlpha
condition|)
block|{
case|case
name|GL_FUNC_ADD
case|:
case|case
name|GL_FUNC_SUBTRACT
case|:
case|case
name|GL_FUNC_REVERSE_SUBTRACT
case|:
case|case
name|GL_MIN
case|:
case|case
name|GL_MAX
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setBlendEquation
argument_list|(
name|modeRGB
argument_list|,
name|modeAlpha
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|BlendFunc
name|void
name|GL_APIENTRY
name|BlendFunc
parameter_list|(
name|GLenum
name|sfactor
parameter_list|,
name|GLenum
name|dfactor
parameter_list|)
block|{
name|BlendFuncSeparate
argument_list|(
name|sfactor
argument_list|,
name|dfactor
argument_list|,
name|sfactor
argument_list|,
name|dfactor
argument_list|)
expr_stmt|;
block|}
DECL|function|BlendFuncSeparate
name|void
name|GL_APIENTRY
name|BlendFuncSeparate
parameter_list|(
name|GLenum
name|srcRGB
parameter_list|,
name|GLenum
name|dstRGB
parameter_list|,
name|GLenum
name|srcAlpha
parameter_list|,
name|GLenum
name|dstAlpha
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum srcRGB = 0x%X, GLenum dstRGB = 0x%X, GLenum srcAlpha = 0x%X, GLenum dstAlpha = 0x%X)"
argument_list|,
name|srcRGB
argument_list|,
name|dstRGB
argument_list|,
name|srcAlpha
argument_list|,
name|dstAlpha
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|srcRGB
condition|)
block|{
case|case
name|GL_ZERO
case|:
case|case
name|GL_ONE
case|:
case|case
name|GL_SRC_COLOR
case|:
case|case
name|GL_ONE_MINUS_SRC_COLOR
case|:
case|case
name|GL_DST_COLOR
case|:
case|case
name|GL_ONE_MINUS_DST_COLOR
case|:
case|case
name|GL_SRC_ALPHA
case|:
case|case
name|GL_ONE_MINUS_SRC_ALPHA
case|:
case|case
name|GL_DST_ALPHA
case|:
case|case
name|GL_ONE_MINUS_DST_ALPHA
case|:
case|case
name|GL_CONSTANT_COLOR
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_COLOR
case|:
case|case
name|GL_CONSTANT_ALPHA
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_ALPHA
case|:
case|case
name|GL_SRC_ALPHA_SATURATE
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|dstRGB
condition|)
block|{
case|case
name|GL_ZERO
case|:
case|case
name|GL_ONE
case|:
case|case
name|GL_SRC_COLOR
case|:
case|case
name|GL_ONE_MINUS_SRC_COLOR
case|:
case|case
name|GL_DST_COLOR
case|:
case|case
name|GL_ONE_MINUS_DST_COLOR
case|:
case|case
name|GL_SRC_ALPHA
case|:
case|case
name|GL_ONE_MINUS_SRC_ALPHA
case|:
case|case
name|GL_DST_ALPHA
case|:
case|case
name|GL_ONE_MINUS_DST_ALPHA
case|:
case|case
name|GL_CONSTANT_COLOR
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_COLOR
case|:
case|case
name|GL_CONSTANT_ALPHA
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_ALPHA
case|:
break|break;
case|case
name|GL_SRC_ALPHA_SATURATE
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|srcAlpha
condition|)
block|{
case|case
name|GL_ZERO
case|:
case|case
name|GL_ONE
case|:
case|case
name|GL_SRC_COLOR
case|:
case|case
name|GL_ONE_MINUS_SRC_COLOR
case|:
case|case
name|GL_DST_COLOR
case|:
case|case
name|GL_ONE_MINUS_DST_COLOR
case|:
case|case
name|GL_SRC_ALPHA
case|:
case|case
name|GL_ONE_MINUS_SRC_ALPHA
case|:
case|case
name|GL_DST_ALPHA
case|:
case|case
name|GL_ONE_MINUS_DST_ALPHA
case|:
case|case
name|GL_CONSTANT_COLOR
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_COLOR
case|:
case|case
name|GL_CONSTANT_ALPHA
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_ALPHA
case|:
case|case
name|GL_SRC_ALPHA_SATURATE
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|dstAlpha
condition|)
block|{
case|case
name|GL_ZERO
case|:
case|case
name|GL_ONE
case|:
case|case
name|GL_SRC_COLOR
case|:
case|case
name|GL_ONE_MINUS_SRC_COLOR
case|:
case|case
name|GL_DST_COLOR
case|:
case|case
name|GL_ONE_MINUS_DST_COLOR
case|:
case|case
name|GL_SRC_ALPHA
case|:
case|case
name|GL_ONE_MINUS_SRC_ALPHA
case|:
case|case
name|GL_DST_ALPHA
case|:
case|case
name|GL_ONE_MINUS_DST_ALPHA
case|:
case|case
name|GL_CONSTANT_COLOR
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_COLOR
case|:
case|case
name|GL_CONSTANT_ALPHA
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_ALPHA
case|:
break|break;
case|case
name|GL_SRC_ALPHA_SATURATE
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getLimitations
argument_list|()
operator|.
name|noSimultaneousConstantColorAndAlphaBlendFunc
condition|)
block|{
name|bool
name|constantColorUsed
init|=
operator|(
name|srcRGB
operator|==
name|GL_CONSTANT_COLOR
operator|||
name|srcRGB
operator|==
name|GL_ONE_MINUS_CONSTANT_COLOR
operator|||
name|dstRGB
operator|==
name|GL_CONSTANT_COLOR
operator|||
name|dstRGB
operator|==
name|GL_ONE_MINUS_CONSTANT_COLOR
operator|)
decl_stmt|;
name|bool
name|constantAlphaUsed
init|=
operator|(
name|srcRGB
operator|==
name|GL_CONSTANT_ALPHA
operator|||
name|srcRGB
operator|==
name|GL_ONE_MINUS_CONSTANT_ALPHA
operator|||
name|dstRGB
operator|==
name|GL_CONSTANT_ALPHA
operator|||
name|dstRGB
operator|==
name|GL_ONE_MINUS_CONSTANT_ALPHA
operator|)
decl_stmt|;
if|if
condition|(
name|constantColorUsed
operator|&&
name|constantAlphaUsed
condition|)
block|{
name|ERR
argument_list|(
literal|"Simultaneous use of GL_CONSTANT_ALPHA/GL_ONE_MINUS_CONSTANT_ALPHA and "
literal|"GL_CONSTANT_COLOR/GL_ONE_MINUS_CONSTANT_COLOR not supported by this "
literal|"implementation."
argument_list|)
expr_stmt|;
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setBlendFactors
argument_list|(
name|srcRGB
argument_list|,
name|dstRGB
argument_list|,
name|srcAlpha
argument_list|,
name|dstAlpha
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|BufferData
name|void
name|GL_APIENTRY
name|BufferData
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|data
parameter_list|,
name|GLenum
name|usage
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizeiptr size = %d, const GLvoid* data = 0x%0.8p, GLenum usage = %d)"
argument_list|,
name|target
argument_list|,
name|size
argument_list|,
name|data
argument_list|,
name|usage
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|usage
condition|)
block|{
case|case
name|GL_STREAM_DRAW
case|:
case|case
name|GL_STATIC_DRAW
case|:
case|case
name|GL_DYNAMIC_DRAW
case|:
break|break;
case|case
name|GL_STREAM_READ
case|:
case|case
name|GL_STREAM_COPY
case|:
case|case
name|GL_STATIC_READ
case|:
case|case
name|GL_STATIC_COPY
case|:
case|case
name|GL_DYNAMIC_READ
case|:
case|case
name|GL_DYNAMIC_COPY
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buffer
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Error
name|error
init|=
name|buffer
operator|->
name|bufferData
argument_list|(
name|data
argument_list|,
name|size
argument_list|,
name|usage
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|BufferSubData
name|void
name|GL_APIENTRY
name|BufferSubData
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr size = %d, const GLvoid* data = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|offset
argument_list|,
name|size
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|size
operator|<
literal|0
operator|||
name|offset
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buffer
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|buffer
operator|->
name|isMapped
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Check for possible overflow of size + offset
if|if
condition|(
operator|!
name|rx
operator|::
name|IsUnsignedAdditionSafe
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|size
argument_list|,
name|offset
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|size
operator|+
name|offset
operator|>
name|buffer
operator|->
name|getSize
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|data
operator|==
name|NULL
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|buffer
operator|->
name|bufferSubData
argument_list|(
name|data
argument_list|,
name|size
argument_list|,
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|CheckFramebufferStatus
name|GLenum
name|GL_APIENTRY
name|CheckFramebufferStatus
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X)"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidFramebufferTarget
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetFramebuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
return|return
name|framebuffer
operator|->
name|checkStatus
argument_list|(
name|context
operator|->
name|getData
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|Clear
name|void
name|GL_APIENTRY
name|Clear
parameter_list|(
name|GLbitfield
name|mask
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLbitfield mask = 0x%X)"
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|skipValidation
argument_list|()
operator|&&
operator|!
name|ValidateClear
argument_list|(
name|context
argument_list|,
name|mask
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|clear
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|ClearColor
name|void
name|GL_APIENTRY
name|ClearColor
parameter_list|(
name|GLclampf
name|red
parameter_list|,
name|GLclampf
name|green
parameter_list|,
name|GLclampf
name|blue
parameter_list|,
name|GLclampf
name|alpha
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLclampf red = %f, GLclampf green = %f, GLclampf blue = %f, GLclampf alpha = %f)"
argument_list|,
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setColorClearValue
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|ClearDepthf
name|void
name|GL_APIENTRY
name|ClearDepthf
parameter_list|(
name|GLclampf
name|depth
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLclampf depth = %f)"
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setDepthClearValue
argument_list|(
name|depth
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|ClearStencil
name|void
name|GL_APIENTRY
name|ClearStencil
parameter_list|(
name|GLint
name|s
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint s = %d)"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setStencilClearValue
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|ColorMask
name|void
name|GL_APIENTRY
name|ColorMask
parameter_list|(
name|GLboolean
name|red
parameter_list|,
name|GLboolean
name|green
parameter_list|,
name|GLboolean
name|blue
parameter_list|,
name|GLboolean
name|alpha
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLboolean red = %d, GLboolean green = %u, GLboolean blue = %u, GLboolean alpha = %u)"
argument_list|,
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setColorMask
argument_list|(
name|red
operator|==
name|GL_TRUE
argument_list|,
name|green
operator|==
name|GL_TRUE
argument_list|,
name|blue
operator|==
name|GL_TRUE
argument_list|,
name|alpha
operator|==
name|GL_TRUE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|CompileShader
name|void
name|GL_APIENTRY
name|CompileShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d)"
argument_list|,
name|shader
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|Shader
modifier|*
name|shaderObject
init|=
name|GetValidShader
argument_list|(
name|context
argument_list|,
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
return|return;
block|}
name|shaderObject
operator|->
name|compile
argument_list|(
name|context
operator|->
name|getCompiler
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|CompressedTexImage2D
name|void
name|GL_APIENTRY
name|CompressedTexImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, GLsizei width = %d, "
literal|"GLsizei height = %d, GLint border = %d, GLsizei imageSize = %d, const GLvoid* data = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
operator|&&
operator|!
name|ValidateES2TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|GL_NONE
argument_list|,
name|GL_NONE
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|&&
operator|!
name|ValidateES3TexImage2DParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|border
argument_list|,
name|GL_NONE
argument_list|,
name|GL_NONE
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|const
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageSize
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|imageSize
argument_list|)
operator|!=
name|formatInfo
operator|.
name|computeBlockSize
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Extents
name|size
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|IsCubeMapTextureTarget
argument_list|(
name|target
argument_list|)
condition|?
name|GL_TEXTURE_CUBE_MAP
else|:
name|target
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|texture
operator|->
name|setCompressedImage
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|size
argument_list|,
name|imageSize
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|CompressedTexSubImage2D
name|void
name|GL_APIENTRY
name|CompressedTexSubImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
literal|"GLsizei width = %d, GLsizei height = %d, GLenum format = 0x%X, "
literal|"GLsizei imageSize = %d, const GLvoid* data = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
operator|&&
operator|!
name|ValidateES2TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|,
name|GL_NONE
argument_list|,
name|GL_NONE
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|&&
operator|!
name|ValidateES3TexImage2DParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|GL_NONE
argument_list|,
name|GL_NONE
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|const
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageSize
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|imageSize
argument_list|)
operator|!=
name|formatInfo
operator|.
name|computeBlockSize
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Box
name|area
argument_list|(
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|IsCubeMapTextureTarget
argument_list|(
name|target
argument_list|)
condition|?
name|GL_TEXTURE_CUBE_MAP
else|:
name|target
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|texture
operator|->
name|setCompressedSubImage
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|area
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|CopyTexImage2D
name|void
name|GL_APIENTRY
name|CopyTexImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, "
literal|"GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d, GLint border = %d)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|skipValidation
argument_list|()
operator|&&
operator|!
name|ValidateCopyTexImage2D
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|copyTexImage2D
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|CopyTexSubImage2D
name|void
name|GL_APIENTRY
name|CopyTexSubImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
literal|"GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|skipValidation
argument_list|()
operator|&&
operator|!
name|ValidateCopyTexSubImage2D
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|copyTexSubImage2D
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|CreateProgram
name|GLuint
name|GL_APIENTRY
name|CreateProgram
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
return|return
name|context
operator|->
name|createProgram
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|CreateShader
name|GLuint
name|GL_APIENTRY
name|CreateShader
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum type = 0x%X)"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_FRAGMENT_SHADER
case|:
case|case
name|GL_VERTEX_SHADER
case|:
return|return
name|context
operator|->
name|createShader
argument_list|(
name|type
argument_list|)
return|;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|function|CullFace
name|void
name|GL_APIENTRY
name|CullFace
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X)"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|GL_FRONT
case|:
case|case
name|GL_BACK
case|:
case|case
name|GL_FRONT_AND_BACK
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setCullMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DeleteBuffers
name|void
name|GL_APIENTRY
name|DeleteBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|buffers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* buffers = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|->
name|deleteBuffer
argument_list|(
name|buffers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|DeleteFramebuffers
name|void
name|GL_APIENTRY
name|DeleteFramebuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* framebuffers = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|framebuffers
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|framebuffers
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|deleteFramebuffer
argument_list|(
name|framebuffers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|DeleteProgram
name|void
name|GL_APIENTRY
name|DeleteProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d)"
argument_list|,
name|program
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|program
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|context
operator|->
name|deleteProgram
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DeleteRenderbuffers
name|void
name|GL_APIENTRY
name|DeleteRenderbuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* renderbuffers = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|renderbuffers
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|->
name|deleteRenderbuffer
argument_list|(
name|renderbuffers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|DeleteShader
name|void
name|GL_APIENTRY
name|DeleteShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d)"
argument_list|,
name|shader
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|shader
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|getShader
argument_list|(
name|shader
argument_list|)
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getProgram
argument_list|(
name|shader
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|context
operator|->
name|deleteShader
argument_list|(
name|shader
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DeleteTextures
name|void
name|GL_APIENTRY
name|DeleteTextures
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|textures
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* textures = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|textures
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|textures
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|deleteTexture
argument_list|(
name|textures
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|DepthFunc
name|void
name|GL_APIENTRY
name|DepthFunc
parameter_list|(
name|GLenum
name|func
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum func = 0x%X)"
argument_list|,
name|func
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|func
condition|)
block|{
case|case
name|GL_NEVER
case|:
case|case
name|GL_ALWAYS
case|:
case|case
name|GL_LESS
case|:
case|case
name|GL_LEQUAL
case|:
case|case
name|GL_EQUAL
case|:
case|case
name|GL_GREATER
case|:
case|case
name|GL_GEQUAL
case|:
case|case
name|GL_NOTEQUAL
case|:
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setDepthFunc
argument_list|(
name|func
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|DepthMask
name|void
name|GL_APIENTRY
name|DepthMask
parameter_list|(
name|GLboolean
name|flag
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLboolean flag = %u)"
argument_list|,
name|flag
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setDepthMask
argument_list|(
name|flag
operator|!=
name|GL_FALSE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DepthRangef
name|void
name|GL_APIENTRY
name|DepthRangef
parameter_list|(
name|GLclampf
name|zNear
parameter_list|,
name|GLclampf
name|zFar
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLclampf zNear = %f, GLclampf zFar = %f)"
argument_list|,
name|zNear
argument_list|,
name|zFar
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setDepthRange
argument_list|(
name|zNear
argument_list|,
name|zFar
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DetachShader
name|void
name|GL_APIENTRY
name|DetachShader
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLuint shader = %d)"
argument_list|,
name|program
argument_list|,
name|shader
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|Program
modifier|*
name|programObject
init|=
name|GetValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
return|return;
block|}
name|Shader
modifier|*
name|shaderObject
init|=
name|GetValidShader
argument_list|(
name|context
argument_list|,
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|programObject
operator|->
name|detachShader
argument_list|(
name|shaderObject
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|Disable
name|void
name|GL_APIENTRY
name|Disable
parameter_list|(
name|GLenum
name|cap
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum cap = 0x%X)"
argument_list|,
name|cap
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidCap
argument_list|(
name|context
argument_list|,
name|cap
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setEnableFeature
argument_list|(
name|cap
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DisableVertexAttribArray
name|void
name|GL_APIENTRY
name|DisableVertexAttribArray
parameter_list|(
name|GLuint
name|index
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d)"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setEnableVertexAttribArray
argument_list|(
name|index
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DrawArrays
name|void
name|GL_APIENTRY
name|DrawArrays
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLint
name|first
parameter_list|,
name|GLsizei
name|count
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X, GLint first = %d, GLsizei count = %d)"
argument_list|,
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateDrawArrays
argument_list|(
name|context
argument_list|,
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
literal|0
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|drawArrays
argument_list|(
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|DrawElements
name|void
name|GL_APIENTRY
name|DrawElements
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X, GLsizei count = %d, GLenum type = 0x%X, const GLvoid* indices = 0x%0.8p)"
argument_list|,
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|IndexRange
name|indexRange
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateDrawElements
argument_list|(
name|context
argument_list|,
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
literal|0
argument_list|,
operator|&
name|indexRange
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|drawElements
argument_list|(
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
name|indexRange
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|Enable
name|void
name|GL_APIENTRY
name|Enable
parameter_list|(
name|GLenum
name|cap
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum cap = 0x%X)"
argument_list|,
name|cap
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidCap
argument_list|(
name|context
argument_list|,
name|cap
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getLimitations
argument_list|()
operator|.
name|noSampleAlphaToCoverageSupport
condition|)
block|{
if|if
condition|(
name|cap
operator|==
name|GL_SAMPLE_ALPHA_TO_COVERAGE
condition|)
block|{
specifier|const
name|char
modifier|*
name|errorMessage
init|=
literal|"Current renderer doesn't support alpha-to-coverage"
decl_stmt|;
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
comment|// We also output an error message to the debugger window if tracing is active, so that developers can see the error message.
name|ERR
argument_list|(
literal|"%s"
argument_list|,
name|errorMessage
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setEnableFeature
argument_list|(
name|cap
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|EnableVertexAttribArray
name|void
name|GL_APIENTRY
name|EnableVertexAttribArray
parameter_list|(
name|GLuint
name|index
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d)"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setEnableVertexAttribArray
argument_list|(
name|index
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|Finish
name|void
name|GL_APIENTRY
name|Finish
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|Error
name|error
init|=
name|context
operator|->
name|finish
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|Flush
name|void
name|GL_APIENTRY
name|Flush
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|Error
name|error
init|=
name|context
operator|->
name|flush
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|FramebufferRenderbuffer
name|void
name|GL_APIENTRY
name|FramebufferRenderbuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|renderbuffertarget
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum attachment = 0x%X, GLenum renderbuffertarget = 0x%X, "
literal|"GLuint renderbuffer = %d)"
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|renderbuffertarget
argument_list|,
name|renderbuffer
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|skipValidation
argument_list|()
operator|&&
operator|!
name|ValidateFramebufferRenderbuffer
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|renderbuffertarget
argument_list|,
name|renderbuffer
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|framebufferRenderbuffer
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|renderbuffertarget
argument_list|,
name|renderbuffer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|FramebufferTexture2D
name|void
name|GL_APIENTRY
name|FramebufferTexture2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|textarget
parameter_list|,
name|GLuint
name|texture
parameter_list|,
name|GLint
name|level
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum attachment = 0x%X, GLenum textarget = 0x%X, "
literal|"GLuint texture = %d, GLint level = %d)"
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|textarget
argument_list|,
name|texture
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|skipValidation
argument_list|()
operator|&&
operator|!
name|ValidateFramebufferTexture2D
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|textarget
argument_list|,
name|texture
argument_list|,
name|level
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|framebufferTexture2D
argument_list|(
name|target
argument_list|,
name|attachment
argument_list|,
name|textarget
argument_list|,
name|texture
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|FrontFace
name|void
name|GL_APIENTRY
name|FrontFace
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X)"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|GL_CW
case|:
case|case
name|GL_CCW
case|:
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setFrontFace
argument_list|(
name|mode
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GenBuffers
name|void
name|GL_APIENTRY
name|GenBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|buffers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* buffers = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|buffers
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createBuffer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|GenerateMipmap
name|void
name|GL_APIENTRY
name|GenerateMipmap
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X)"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidTextureTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|texture
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLenum
name|baseTarget
init|=
operator|(
name|target
operator|==
name|GL_TEXTURE_CUBE_MAP
operator|)
condition|?
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
else|:
name|target
decl_stmt|;
name|GLenum
name|internalFormat
init|=
name|texture
operator|->
name|getInternalFormat
argument_list|(
name|baseTarget
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|context
operator|->
name|getTextureCaps
argument_list|()
operator|.
name|get
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
specifier|const
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
comment|// GenerateMipmap should not generate an INVALID_OPERATION for textures created with
comment|// unsized formats or that are color renderable and filterable.  Since we do not track if
comment|// the texture was created with sized or unsized format (only sized formats are stored),
comment|// it is not possible to make sure the the LUMA formats can generate mipmaps (they should
comment|// be able to) because they aren't color renderable.  Simply do a special case for LUMA
comment|// textures since they're the only texture format that can be created with unsized formats
comment|// that is not color renderable.  New unsized formats are unlikely to be added, since ES2
comment|// was the last version to use add them.
name|bool
name|isLUMA
init|=
name|internalFormat
operator|==
name|GL_LUMINANCE8_EXT
operator|||
name|internalFormat
operator|==
name|GL_LUMINANCE8_ALPHA8_EXT
operator|||
name|internalFormat
operator|==
name|GL_ALPHA8_EXT
decl_stmt|;
if|if
condition|(
name|formatInfo
operator|.
name|depthBits
operator|>
literal|0
operator|||
name|formatInfo
operator|.
name|stencilBits
operator|>
literal|0
operator|||
operator|!
name|formatCaps
operator|.
name|filterable
operator|||
operator|(
operator|!
name|formatCaps
operator|.
name|renderable
operator|&&
operator|!
name|isLUMA
operator|)
operator|||
name|formatInfo
operator|.
name|compressed
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// GL_EXT_sRGB does not support mipmap generation on sRGB textures
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|==
literal|2
operator|&&
name|formatInfo
operator|.
name|colorEncoding
operator|==
name|GL_SRGB
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Non-power of 2 ES2 check
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureNPOT
operator|&&
operator|(
operator|!
name|isPow2
argument_list|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|texture
operator|->
name|getWidth
argument_list|(
name|baseTarget
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|||
operator|!
name|isPow2
argument_list|(
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|texture
operator|->
name|getHeight
argument_list|(
name|baseTarget
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|ASSERT
argument_list|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<=
literal|2
operator|&&
operator|(
name|target
operator|==
name|GL_TEXTURE_2D
operator|||
name|target
operator|==
name|GL_TEXTURE_CUBE_MAP
operator|)
argument_list|)
expr_stmt|;
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Cube completeness check
if|if
condition|(
name|target
operator|==
name|GL_TEXTURE_CUBE_MAP
operator|&&
operator|!
name|texture
operator|->
name|isCubeComplete
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Error
name|error
init|=
name|texture
operator|->
name|generateMipmaps
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GenFramebuffers
name|void
name|GL_APIENTRY
name|GenFramebuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* framebuffers = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|framebuffers
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|framebuffers
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createFramebuffer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|GenRenderbuffers
name|void
name|GL_APIENTRY
name|GenRenderbuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* renderbuffers = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|renderbuffers
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|renderbuffers
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createRenderbuffer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|GenTextures
name|void
name|GL_APIENTRY
name|GenTextures
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|textures
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* textures = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|textures
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|textures
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createTexture
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|GetActiveAttrib
name|void
name|GL_APIENTRY
name|GetActiveAttrib
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLuint index = %d, GLsizei bufsize = %d, GLsizei *length = 0x%0.8p, "
literal|"GLint *size = 0x%0.8p, GLenum *type = %0.8p, GLchar *name = %0.8p)"
argument_list|,
name|program
argument_list|,
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|bufsize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|GetValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|index
operator|>=
operator|(
name|GLuint
operator|)
name|programObject
operator|->
name|getActiveAttributeCount
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|programObject
operator|->
name|getActiveAttribute
argument_list|(
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetActiveUniform
name|void
name|GL_APIENTRY
name|GetActiveUniform
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLuint index = %d, GLsizei bufsize = %d, "
literal|"GLsizei* length = 0x%0.8p, GLint* size = 0x%0.8p, GLenum* type = 0x%0.8p, GLchar* name = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|bufsize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|GetValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|index
operator|>=
operator|(
name|GLuint
operator|)
name|programObject
operator|->
name|getActiveUniformCount
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|programObject
operator|->
name|getActiveUniform
argument_list|(
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetAttachedShaders
name|void
name|GL_APIENTRY
name|GetAttachedShaders
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|maxcount
parameter_list|,
name|GLsizei
modifier|*
name|count
parameter_list|,
name|GLuint
modifier|*
name|shaders
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLsizei maxcount = %d, GLsizei* count = 0x%0.8p, GLuint* shaders = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|maxcount
argument_list|,
name|count
argument_list|,
name|shaders
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|maxcount
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|GetValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
return|return;
block|}
return|return
name|programObject
operator|->
name|getAttachedShaders
argument_list|(
name|maxcount
argument_list|,
name|count
argument_list|,
name|shaders
argument_list|)
return|;
block|}
block|}
DECL|function|GetAttribLocation
name|GLint
name|GL_APIENTRY
name|GetAttribLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, const GLchar* name = %s)"
argument_list|,
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|Program
modifier|*
name|programObject
init|=
name|GetValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|programObject
operator|->
name|isLinked
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|programObject
operator|->
name|getAttributeLocation
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|function|GetBooleanv
name|void
name|GL_APIENTRY
name|GetBooleanv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLboolean
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum pname = 0x%X, GLboolean* params = 0x%0.8p)"
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|GLenum
name|nativeType
decl_stmt|;
name|unsigned
name|int
name|numParams
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateStateQuery
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
operator|&
name|nativeType
argument_list|,
operator|&
name|numParams
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nativeType
operator|==
name|GL_BOOL
condition|)
block|{
name|context
operator|->
name|getBooleanv
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CastStateValues
argument_list|(
name|context
argument_list|,
name|nativeType
argument_list|,
name|pname
argument_list|,
name|numParams
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|GetBufferParameteriv
name|void
name|GL_APIENTRY
name|GetBufferParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidBufferParameter
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buffer
condition|)
block|{
comment|// A null buffer means that "0" is bound to the requested buffer target
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_BUFFER_USAGE
case|:
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|buffer
operator|->
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_SIZE
case|:
operator|*
name|params
operator|=
name|clampCast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|buffer
operator|->
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_ACCESS_FLAGS
case|:
operator|*
name|params
operator|=
name|buffer
operator|->
name|getAccessFlags
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_ACCESS_OES
case|:
operator|*
name|params
operator|=
name|buffer
operator|->
name|getAccess
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_MAPPED
case|:
assert|static_assert
argument_list|(
name|GL_BUFFER_MAPPED
operator|==
name|GL_BUFFER_MAPPED_OES
argument_list|,
literal|"GL enums should be equal."
argument_list|)
assert|;
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|buffer
operator|->
name|isMapped
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_MAP_OFFSET
case|:
operator|*
name|params
operator|=
name|clampCast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|buffer
operator|->
name|getMapOffset
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_MAP_LENGTH
case|:
operator|*
name|params
operator|=
name|clampCast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|buffer
operator|->
name|getMapLength
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|function|GetError
name|GLenum
name|GL_APIENTRY
name|GetError
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
return|return
name|context
operator|->
name|getError
argument_list|()
return|;
block|}
return|return
name|GL_NO_ERROR
return|;
block|}
DECL|function|GetFloatv
name|void
name|GL_APIENTRY
name|GetFloatv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)"
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|GLenum
name|nativeType
decl_stmt|;
name|unsigned
name|int
name|numParams
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateStateQuery
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
operator|&
name|nativeType
argument_list|,
operator|&
name|numParams
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nativeType
operator|==
name|GL_FLOAT
condition|)
block|{
name|context
operator|->
name|getFloatv
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CastStateValues
argument_list|(
name|context
argument_list|,
name|nativeType
argument_list|,
name|pname
argument_list|,
name|numParams
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|GetFramebufferAttachmentParameteriv
name|void
name|GL_APIENTRY
name|GetFramebufferAttachmentParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum attachment = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidFramebufferTarget
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|clientVersion
init|=
name|context
operator|->
name|getClientVersion
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
case|:
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
case|:
if|if
condition|(
name|clientVersion
operator|<
literal|3
operator|&&
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|sRGB
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
case|:
if|if
condition|(
name|clientVersion
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Determine if the attachment is a valid enum
switch|switch
condition|(
name|attachment
condition|)
block|{
case|case
name|GL_BACK
case|:
case|case
name|GL_FRONT
case|:
case|case
name|GL_DEPTH
case|:
case|case
name|GL_STENCIL
case|:
case|case
name|GL_DEPTH_STENCIL_ATTACHMENT
case|:
if|if
condition|(
name|clientVersion
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_DEPTH_ATTACHMENT
case|:
case|case
name|GL_STENCIL_ATTACHMENT
case|:
break|break;
default|default:
if|if
condition|(
name|attachment
operator|<
name|GL_COLOR_ATTACHMENT0_EXT
operator|||
operator|(
name|attachment
operator|-
name|GL_COLOR_ATTACHMENT0_EXT
operator|)
operator|>=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxColorAttachments
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
block|}
specifier|const
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetFramebuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|framebuffer
operator|->
name|id
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|clientVersion
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|attachment
condition|)
block|{
case|case
name|GL_BACK
case|:
case|case
name|GL_DEPTH
case|:
case|case
name|GL_STENCIL
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
if|if
condition|(
name|attachment
operator|>=
name|GL_COLOR_ATTACHMENT0_EXT
operator|&&
name|attachment
operator|<=
name|GL_COLOR_ATTACHMENT15_EXT
condition|)
block|{
comment|// Valid attachment query
block|}
else|else
block|{
switch|switch
condition|(
name|attachment
condition|)
block|{
case|case
name|GL_DEPTH_ATTACHMENT
case|:
case|case
name|GL_STENCIL_ATTACHMENT
case|:
break|break;
case|case
name|GL_DEPTH_STENCIL_ATTACHMENT
case|:
if|if
condition|(
name|framebuffer
operator|->
name|hasValidDepthStencil
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|const
name|FramebufferAttachment
modifier|*
name|attachmentObject
init|=
name|framebuffer
operator|->
name|getAttachment
argument_list|(
name|attachment
argument_list|)
decl_stmt|;
if|if
condition|(
name|attachmentObject
condition|)
block|{
name|ASSERT
argument_list|(
name|attachmentObject
operator|->
name|type
argument_list|()
operator|==
name|GL_RENDERBUFFER
operator|||
name|attachmentObject
operator|->
name|type
argument_list|()
operator|==
name|GL_TEXTURE
operator|||
name|attachmentObject
operator|->
name|type
argument_list|()
operator|==
name|GL_FRAMEBUFFER_DEFAULT
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|type
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
case|:
if|if
condition|(
name|attachmentObject
operator|->
name|type
argument_list|()
operator|!=
name|GL_RENDERBUFFER
operator|&&
name|attachmentObject
operator|->
name|type
argument_list|()
operator|!=
name|GL_TEXTURE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|id
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
case|:
if|if
condition|(
name|attachmentObject
operator|->
name|type
argument_list|()
operator|!=
name|GL_TEXTURE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|mipLevel
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
case|:
if|if
condition|(
name|attachmentObject
operator|->
name|type
argument_list|()
operator|!=
name|GL_TEXTURE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|cubeMapFace
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getRedSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getGreenSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getBlueSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getAlphaSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getDepthSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getStencilSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
case|:
if|if
condition|(
name|attachment
operator|==
name|GL_DEPTH_STENCIL_ATTACHMENT
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getComponentType
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getColorEncoding
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
case|:
if|if
condition|(
name|attachmentObject
operator|->
name|type
argument_list|()
operator|!=
name|GL_TEXTURE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|layer
argument_list|()
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
comment|// ES 2.0.25 spec pg 127 states that if the value of FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
comment|// is NONE, then querying any other pname will generate INVALID_ENUM.
comment|// ES 3.0.2 spec pg 235 states that if the attachment type is none,
comment|// GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME will return zero and be an
comment|// INVALID_OPERATION for all other pnames
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
case|:
operator|*
name|params
operator|=
name|GL_NONE
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
case|:
if|if
condition|(
name|clientVersion
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|clientVersion
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
DECL|function|GetIntegerv
name|void
name|GL_APIENTRY
name|GetIntegerv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|GLenum
name|nativeType
decl_stmt|;
name|unsigned
name|int
name|numParams
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateStateQuery
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
operator|&
name|nativeType
argument_list|,
operator|&
name|numParams
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nativeType
operator|==
name|GL_INT
condition|)
block|{
name|context
operator|->
name|getIntegerv
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CastStateValues
argument_list|(
name|context
argument_list|,
name|nativeType
argument_list|,
name|pname
argument_list|,
name|numParams
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|GetProgramiv
name|void
name|GL_APIENTRY
name|GetProgramiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLenum pname = %d, GLint* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|Program
modifier|*
name|programObject
init|=
name|GetValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_ACTIVE_UNIFORM_BLOCKS
case|:
case|case
name|GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
case|:
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_MODE
case|:
case|case
name|GL_TRANSFORM_FEEDBACK_VARYINGS
case|:
case|case
name|GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
case|:
case|case
name|GL_PROGRAM_BINARY_RETRIEVABLE_HINT
case|:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_DELETE_STATUS
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|isFlaggedForDeletion
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_LINK_STATUS
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|isLinked
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_VALIDATE_STATUS
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|isValidated
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_INFO_LOG_LENGTH
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getInfoLogLength
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_ATTACHED_SHADERS
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getAttachedShadersCount
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_ACTIVE_ATTRIBUTES
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getActiveAttributeCount
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getActiveAttributeMaxLength
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_ACTIVE_UNIFORMS
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getActiveUniformCount
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_ACTIVE_UNIFORM_MAX_LENGTH
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getActiveUniformMaxLength
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_PROGRAM_BINARY_LENGTH_OES
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getBinaryLength
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_ACTIVE_UNIFORM_BLOCKS
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getActiveUniformBlockCount
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getActiveUniformBlockMaxLength
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_MODE
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getTransformFeedbackBufferMode
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TRANSFORM_FEEDBACK_VARYINGS
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getTransformFeedbackVaryingCount
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getTransformFeedbackVaryingMaxLength
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_PROGRAM_BINARY_RETRIEVABLE_HINT
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getBinaryRetrievableHint
argument_list|()
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetProgramInfoLog
name|void
name|GL_APIENTRY
name|GetProgramInfoLog
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|infolog
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* infolog = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|bufsize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|GetValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
return|return;
block|}
name|programObject
operator|->
name|getInfoLog
argument_list|(
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetRenderbufferParameteriv
name|void
name|GL_APIENTRY
name|GetRenderbufferParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|target
operator|!=
name|GL_RENDERBUFFER
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getRenderbufferId
argument_list|()
operator|==
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Renderbuffer
modifier|*
name|renderbuffer
init|=
name|context
operator|->
name|getRenderbuffer
argument_list|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getRenderbufferId
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_RENDERBUFFER_WIDTH
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getWidth
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_HEIGHT
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getHeight
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_INTERNAL_FORMAT
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getInternalFormat
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_RED_SIZE
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getRedSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_GREEN_SIZE
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getGreenSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_BLUE_SIZE
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getBlueSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_ALPHA_SIZE
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getAlphaSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_DEPTH_SIZE
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getDepthSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_STENCIL_SIZE
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getStencilSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_SAMPLES_ANGLE
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|framebufferMultisample
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getSamples
argument_list|()
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetShaderiv
name|void
name|GL_APIENTRY
name|GetShaderiv
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d, GLenum pname = %d, GLint* params = 0x%0.8p)"
argument_list|,
name|shader
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|Shader
modifier|*
name|shaderObject
init|=
name|GetValidShader
argument_list|(
name|context
argument_list|,
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_SHADER_TYPE
case|:
operator|*
name|params
operator|=
name|shaderObject
operator|->
name|getType
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_DELETE_STATUS
case|:
operator|*
name|params
operator|=
name|shaderObject
operator|->
name|isFlaggedForDeletion
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_COMPILE_STATUS
case|:
operator|*
name|params
operator|=
name|shaderObject
operator|->
name|isCompiled
argument_list|()
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
expr_stmt|;
return|return;
case|case
name|GL_INFO_LOG_LENGTH
case|:
operator|*
name|params
operator|=
name|shaderObject
operator|->
name|getInfoLogLength
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_SHADER_SOURCE_LENGTH
case|:
operator|*
name|params
operator|=
name|shaderObject
operator|->
name|getSourceLength
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE
case|:
operator|*
name|params
operator|=
name|shaderObject
operator|->
name|getTranslatedSourceWithDebugInfoLength
argument_list|()
expr_stmt|;
return|return;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetShaderInfoLog
name|void
name|GL_APIENTRY
name|GetShaderInfoLog
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|infolog
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* infolog = 0x%0.8p)"
argument_list|,
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|bufsize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Shader
modifier|*
name|shaderObject
init|=
name|GetValidShader
argument_list|(
name|context
argument_list|,
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
return|return;
block|}
name|shaderObject
operator|->
name|getInfoLog
argument_list|(
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetShaderPrecisionFormat
name|void
name|GL_APIENTRY
name|GetShaderPrecisionFormat
parameter_list|(
name|GLenum
name|shadertype
parameter_list|,
name|GLenum
name|precisiontype
parameter_list|,
name|GLint
modifier|*
name|range
parameter_list|,
name|GLint
modifier|*
name|precision
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum shadertype = 0x%X, GLenum precisiontype = 0x%X, GLint* range = 0x%0.8p, GLint* precision = 0x%0.8p)"
argument_list|,
name|shadertype
argument_list|,
name|precisiontype
argument_list|,
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|shadertype
condition|)
block|{
case|case
name|GL_VERTEX_SHADER
case|:
switch|switch
condition|(
name|precisiontype
condition|)
block|{
case|case
name|GL_LOW_FLOAT
case|:
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|vertexLowpFloat
operator|.
name|get
argument_list|(
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_MEDIUM_FLOAT
case|:
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|vertexMediumpFloat
operator|.
name|get
argument_list|(
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_HIGH_FLOAT
case|:
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|vertexHighpFloat
operator|.
name|get
argument_list|(
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_LOW_INT
case|:
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|vertexLowpInt
operator|.
name|get
argument_list|(
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_MEDIUM_INT
case|:
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|vertexMediumpInt
operator|.
name|get
argument_list|(
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_HIGH_INT
case|:
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|vertexHighpInt
operator|.
name|get
argument_list|(
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_FRAGMENT_SHADER
case|:
switch|switch
condition|(
name|precisiontype
condition|)
block|{
case|case
name|GL_LOW_FLOAT
case|:
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|fragmentLowpFloat
operator|.
name|get
argument_list|(
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_MEDIUM_FLOAT
case|:
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|fragmentMediumpFloat
operator|.
name|get
argument_list|(
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_HIGH_FLOAT
case|:
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|fragmentHighpFloat
operator|.
name|get
argument_list|(
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_LOW_INT
case|:
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|fragmentLowpInt
operator|.
name|get
argument_list|(
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_MEDIUM_INT
case|:
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|fragmentMediumpInt
operator|.
name|get
argument_list|(
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_HIGH_INT
case|:
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|fragmentHighpInt
operator|.
name|get
argument_list|(
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetShaderSource
name|void
name|GL_APIENTRY
name|GetShaderSource
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|source
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* source = 0x%0.8p)"
argument_list|,
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|bufsize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Shader
modifier|*
name|shaderObject
init|=
name|GetValidShader
argument_list|(
name|context
argument_list|,
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
return|return;
block|}
name|shaderObject
operator|->
name|getSource
argument_list|(
name|bufsize
argument_list|,
name|length
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetString
specifier|const
name|GLubyte
modifier|*
name|GL_APIENTRY
name|GetString
parameter_list|(
name|GLenum
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum name = 0x%X)"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|name
condition|)
block|{
case|case
name|GL_VENDOR
case|:
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
literal|"Google Inc."
argument_list|)
return|;
case|case
name|GL_RENDERER
case|:
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
name|context
operator|->
name|getRendererString
argument_list|()
operator|.
name|c_str
argument_list|()
argument_list|)
return|;
case|case
name|GL_VERSION
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|==
literal|2
condition|)
block|{
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
literal|"OpenGL ES 2.0 (ANGLE "
name|ANGLE_VERSION_STRING
literal|")"
argument_list|)
return|;
block|}
else|else
block|{
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
literal|"OpenGL ES 3.0 (ANGLE "
name|ANGLE_VERSION_STRING
literal|")"
argument_list|)
return|;
block|}
case|case
name|GL_SHADING_LANGUAGE_VERSION
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|==
literal|2
condition|)
block|{
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
literal|"OpenGL ES GLSL ES 1.00 (ANGLE "
name|ANGLE_VERSION_STRING
literal|")"
argument_list|)
return|;
block|}
else|else
block|{
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
literal|"OpenGL ES GLSL ES 3.00 (ANGLE "
name|ANGLE_VERSION_STRING
literal|")"
argument_list|)
return|;
block|}
case|case
name|GL_EXTENSIONS
case|:
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
name|context
operator|->
name|getExtensionString
argument_list|()
operator|.
name|c_str
argument_list|()
argument_list|)
return|;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|nullptr
return|;
block|}
block|}
return|return
literal|nullptr
return|;
block|}
DECL|function|GetTexParameterfv
name|void
name|GL_APIENTRY
name|GetTexParameterfv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidTextureTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid texture target"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_TEXTURE_MAG_FILTER
case|:
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getMagFilter
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_FILTER
case|:
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getMinFilter
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_S
case|:
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getWrapS
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_T
case|:
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getWrapT
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_R
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getWrapR
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_IMMUTABLE_FORMAT
case|:
comment|// Exposed to ES2.0 through EXT_texture_storage, no client version validation.
operator|*
name|params
operator|=
call|(
name|GLfloat
call|)
argument_list|(
name|texture
operator|->
name|getImmutableFormat
argument_list|()
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_IMMUTABLE_LEVELS
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getImmutableLevels
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_USAGE_ANGLE
case|:
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getUsage
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_ANISOTROPY_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureFilterAnisotropic
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getMaxAnisotropy
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_R
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSwizzleRed
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_G
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSwizzleGreen
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_B
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSwizzleBlue
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_A
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSwizzleAlpha
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_BASE_LEVEL
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getBaseLevel
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LEVEL
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getMaxLevel
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_LOD
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|minLod
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LOD
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|maxLod
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetTexParameteriv
name|void
name|GL_APIENTRY
name|GetTexParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidTextureTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid texture target"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_TEXTURE_MAG_FILTER
case|:
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|magFilter
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_FILTER
case|:
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|minFilter
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_S
case|:
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapS
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_T
case|:
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapT
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_R
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapR
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_IMMUTABLE_FORMAT
case|:
comment|// Exposed to ES2.0 through EXT_texture_storage, no client version validation.
operator|*
name|params
operator|=
name|texture
operator|->
name|getImmutableFormat
argument_list|()
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_IMMUTABLE_LEVELS
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|texture
operator|->
name|getImmutableLevels
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_USAGE_ANGLE
case|:
operator|*
name|params
operator|=
name|texture
operator|->
name|getUsage
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_ANISOTROPY_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureFilterAnisotropic
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLint
operator|)
name|texture
operator|->
name|getMaxAnisotropy
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_R
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSwizzleRed
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_G
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSwizzleGreen
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_B
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSwizzleBlue
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_A
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSwizzleAlpha
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_BASE_LEVEL
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getBaseLevel
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LEVEL
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getMaxLevel
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_LOD
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLint
operator|)
name|texture
operator|->
name|getMinLod
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LOD
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLint
operator|)
name|texture
operator|->
name|getMaxLod
argument_list|()
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetUniformfv
name|void
name|GL_APIENTRY
name|GetUniformfv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLint location = %d, GLfloat* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetUniformfv
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
name|programObject
operator|->
name|getUniformfv
argument_list|(
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetUniformiv
name|void
name|GL_APIENTRY
name|GetUniformiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLint location = %d, GLint* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetUniformiv
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
name|programObject
operator|->
name|getUniformiv
argument_list|(
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetUniformLocation
name|GLint
name|GL_APIENTRY
name|GetUniformLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, const GLchar* name = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|strstr
argument_list|(
name|name
argument_list|,
literal|"gl_"
argument_list|)
operator|==
name|name
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|Program
modifier|*
name|programObject
init|=
name|GetValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|programObject
operator|->
name|isLinked
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|programObject
operator|->
name|getUniformLocation
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|function|GetVertexAttribfv
name|void
name|GL_APIENTRY
name|GetVertexAttribfv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateGetVertexAttribParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pname
operator|==
name|GL_CURRENT_VERTEX_ATTRIB
condition|)
block|{
specifier|const
name|VertexAttribCurrentValueData
modifier|&
name|currentValueData
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexAttribCurrentValue
argument_list|(
name|index
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|currentValueData
operator|.
name|FloatValues
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|VertexAttribute
modifier|&
name|attribState
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexArray
argument_list|()
operator|->
name|getVertexAttribute
argument_list|(
name|index
argument_list|)
decl_stmt|;
operator|*
name|params
operator|=
name|QuerySingleVertexAttributeParameter
argument_list|<
name|GLfloat
argument_list|>
argument_list|(
name|attribState
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|GetVertexAttribiv
name|void
name|GL_APIENTRY
name|GetVertexAttribiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateGetVertexAttribParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pname
operator|==
name|GL_CURRENT_VERTEX_ATTRIB
condition|)
block|{
specifier|const
name|VertexAttribCurrentValueData
modifier|&
name|currentValueData
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexAttribCurrentValue
argument_list|(
name|index
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|float
name|currentValue
init|=
name|currentValueData
operator|.
name|FloatValues
index|[
name|i
index|]
decl_stmt|;
name|params
index|[
name|i
index|]
operator|=
name|iround
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|currentValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|VertexAttribute
modifier|&
name|attribState
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexArray
argument_list|()
operator|->
name|getVertexAttribute
argument_list|(
name|index
argument_list|)
decl_stmt|;
operator|*
name|params
operator|=
name|QuerySingleVertexAttributeParameter
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|attribState
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|GetVertexAttribPointerv
name|void
name|GL_APIENTRY
name|GetVertexAttribPointerv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLvoid
modifier|*
modifier|*
name|pointer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLenum pname = 0x%X, GLvoid** pointer = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|pname
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|pname
operator|!=
name|GL_VERTEX_ATTRIB_ARRAY_POINTER
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|pointer
operator|=
cast|const_cast
argument_list|<
name|GLvoid
operator|*
argument_list|>
argument_list|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexAttribPointer
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|Hint
name|void
name|GL_APIENTRY
name|Hint
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|mode
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum mode = 0x%X)"
argument_list|,
name|target
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|GL_FASTEST
case|:
case|case
name|GL_NICEST
case|:
case|case
name|GL_DONT_CARE
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_GENERATE_MIPMAP_HINT
case|:
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setGenerateMipmapHint
argument_list|(
name|mode
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES
case|:
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setFragmentShaderDerivativeHint
argument_list|(
name|mode
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|IsBuffer
name|GLboolean
name|GL_APIENTRY
name|IsBuffer
parameter_list|(
name|GLuint
name|buffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint buffer = %d)"
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|&&
name|buffer
condition|)
block|{
name|Buffer
modifier|*
name|bufferObject
init|=
name|context
operator|->
name|getBuffer
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|bufferObject
condition|)
block|{
return|return
name|GL_TRUE
return|;
block|}
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|IsEnabled
name|GLboolean
name|GL_APIENTRY
name|IsEnabled
parameter_list|(
name|GLenum
name|cap
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum cap = 0x%X)"
argument_list|,
name|cap
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidCap
argument_list|(
name|context
argument_list|,
name|cap
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
return|return
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getEnableFeature
argument_list|(
name|cap
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|IsFramebuffer
name|GLboolean
name|GL_APIENTRY
name|IsFramebuffer
parameter_list|(
name|GLuint
name|framebuffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint framebuffer = %d)"
argument_list|,
name|framebuffer
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|&&
name|framebuffer
condition|)
block|{
name|Framebuffer
modifier|*
name|framebufferObject
init|=
name|context
operator|->
name|getFramebuffer
argument_list|(
name|framebuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|framebufferObject
condition|)
block|{
return|return
name|GL_TRUE
return|;
block|}
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|IsProgram
name|GLboolean
name|GL_APIENTRY
name|IsProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d)"
argument_list|,
name|program
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|&&
name|program
condition|)
block|{
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
name|programObject
condition|)
block|{
return|return
name|GL_TRUE
return|;
block|}
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|IsRenderbuffer
name|GLboolean
name|GL_APIENTRY
name|IsRenderbuffer
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint renderbuffer = %d)"
argument_list|,
name|renderbuffer
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|&&
name|renderbuffer
condition|)
block|{
name|Renderbuffer
modifier|*
name|renderbufferObject
init|=
name|context
operator|->
name|getRenderbuffer
argument_list|(
name|renderbuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|renderbufferObject
condition|)
block|{
return|return
name|GL_TRUE
return|;
block|}
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|IsShader
name|GLboolean
name|GL_APIENTRY
name|IsShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d)"
argument_list|,
name|shader
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|&&
name|shader
condition|)
block|{
name|Shader
modifier|*
name|shaderObject
init|=
name|context
operator|->
name|getShader
argument_list|(
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
name|shaderObject
condition|)
block|{
return|return
name|GL_TRUE
return|;
block|}
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|IsTexture
name|GLboolean
name|GL_APIENTRY
name|IsTexture
parameter_list|(
name|GLuint
name|texture
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint texture = %d)"
argument_list|,
name|texture
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|&&
name|texture
condition|)
block|{
name|Texture
modifier|*
name|textureObject
init|=
name|context
operator|->
name|getTexture
argument_list|(
name|texture
argument_list|)
decl_stmt|;
if|if
condition|(
name|textureObject
condition|)
block|{
return|return
name|GL_TRUE
return|;
block|}
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|LineWidth
name|void
name|GL_APIENTRY
name|LineWidth
parameter_list|(
name|GLfloat
name|width
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLfloat width = %f)"
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|width
operator|<=
literal|0.0f
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setLineWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|LinkProgram
name|void
name|GL_APIENTRY
name|LinkProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d)"
argument_list|,
name|program
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|Program
modifier|*
name|programObject
init|=
name|GetValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|programObject
operator|->
name|link
argument_list|(
name|context
operator|->
name|getData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|PixelStorei
name|void
name|GL_APIENTRY
name|PixelStorei
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLint
name|param
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum pname = 0x%X, GLint param = %d)"
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_UNPACK_IMAGE_HEIGHT
case|:
case|case
name|GL_UNPACK_SKIP_IMAGES
case|:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_UNPACK_ROW_LENGTH
case|:
case|case
name|GL_UNPACK_SKIP_ROWS
case|:
case|case
name|GL_UNPACK_SKIP_PIXELS
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|unpackSubimage
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_PACK_ROW_LENGTH
case|:
case|case
name|GL_PACK_SKIP_ROWS
case|:
case|case
name|GL_PACK_SKIP_PIXELS
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|packSubimage
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|param
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|,
literal|"Cannot use negative values in PixelStorei"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|State
modifier|&
name|state
init|=
name|context
operator|->
name|getState
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_UNPACK_ALIGNMENT
case|:
if|if
condition|(
name|param
operator|!=
literal|1
operator|&&
name|param
operator|!=
literal|2
operator|&&
name|param
operator|!=
literal|4
operator|&&
name|param
operator|!=
literal|8
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|state
operator|.
name|setUnpackAlignment
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_PACK_ALIGNMENT
case|:
if|if
condition|(
name|param
operator|!=
literal|1
operator|&&
name|param
operator|!=
literal|2
operator|&&
name|param
operator|!=
literal|4
operator|&&
name|param
operator|!=
literal|8
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|state
operator|.
name|setPackAlignment
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_PACK_REVERSE_ROW_ORDER_ANGLE
case|:
name|state
operator|.
name|setPackReverseRowOrder
argument_list|(
name|param
operator|!=
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_UNPACK_ROW_LENGTH
case|:
name|ASSERT
argument_list|(
operator|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|)
operator|||
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|unpackSubimage
argument_list|)
expr_stmt|;
name|state
operator|.
name|setUnpackRowLength
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_UNPACK_IMAGE_HEIGHT
case|:
name|ASSERT
argument_list|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
name|state
operator|.
name|setUnpackImageHeight
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_UNPACK_SKIP_IMAGES
case|:
name|ASSERT
argument_list|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
name|state
operator|.
name|setUnpackSkipImages
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_UNPACK_SKIP_ROWS
case|:
name|ASSERT
argument_list|(
operator|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|)
operator|||
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|unpackSubimage
argument_list|)
expr_stmt|;
name|state
operator|.
name|setUnpackSkipRows
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_UNPACK_SKIP_PIXELS
case|:
name|ASSERT
argument_list|(
operator|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|)
operator|||
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|unpackSubimage
argument_list|)
expr_stmt|;
name|state
operator|.
name|setUnpackSkipPixels
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_PACK_ROW_LENGTH
case|:
name|ASSERT
argument_list|(
operator|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|)
operator|||
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|packSubimage
argument_list|)
expr_stmt|;
name|state
operator|.
name|setPackRowLength
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_PACK_SKIP_ROWS
case|:
name|ASSERT
argument_list|(
operator|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|)
operator|||
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|packSubimage
argument_list|)
expr_stmt|;
name|state
operator|.
name|setPackSkipRows
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_PACK_SKIP_PIXELS
case|:
name|ASSERT
argument_list|(
operator|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|)
operator|||
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|packSubimage
argument_list|)
expr_stmt|;
name|state
operator|.
name|setPackSkipPixels
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|PolygonOffset
name|void
name|GL_APIENTRY
name|PolygonOffset
parameter_list|(
name|GLfloat
name|factor
parameter_list|,
name|GLfloat
name|units
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLfloat factor = %f, GLfloat units = %f)"
argument_list|,
name|factor
argument_list|,
name|units
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setPolygonOffsetParams
argument_list|(
name|factor
argument_list|,
name|units
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|ReadPixels
name|void
name|GL_APIENTRY
name|ReadPixels
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d, "
literal|"GLenum format = 0x%X, GLenum type = 0x%X, GLvoid* pixels = 0x%0.8p)"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|skipValidation
argument_list|()
operator|&&
operator|!
name|ValidateReadPixels
argument_list|(
name|context
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
condition|)
block|{
return|return;
block|}
name|context
operator|->
name|readPixels
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|ReleaseShaderCompiler
name|void
name|GL_APIENTRY
name|ReleaseShaderCompiler
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|Compiler
modifier|*
name|compiler
init|=
name|context
operator|->
name|getCompiler
argument_list|()
decl_stmt|;
name|Error
name|error
init|=
name|compiler
operator|->
name|release
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|RenderbufferStorage
name|void
name|GL_APIENTRY
name|RenderbufferStorage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateRenderbufferStorageParametersANGLE
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
literal|0
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
return|return;
block|}
name|Renderbuffer
modifier|*
name|renderbuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentRenderbuffer
argument_list|()
decl_stmt|;
name|Error
name|error
init|=
name|renderbuffer
operator|->
name|setStorage
argument_list|(
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|SampleCoverage
name|void
name|GL_APIENTRY
name|SampleCoverage
parameter_list|(
name|GLclampf
name|value
parameter_list|,
name|GLboolean
name|invert
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLclampf value = %f, GLboolean invert = %u)"
argument_list|,
name|value
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setSampleCoverageParams
argument_list|(
name|clamp01
argument_list|(
name|value
argument_list|)
argument_list|,
name|invert
operator|==
name|GL_TRUE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|Scissor
name|void
name|GL_APIENTRY
name|Scissor
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|width
operator|<
literal|0
operator|||
name|height
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setScissorParams
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|ShaderBinary
name|void
name|GL_APIENTRY
name|ShaderBinary
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|shaders
parameter_list|,
name|GLenum
name|binaryformat
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|binary
parameter_list|,
name|GLsizei
name|length
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* shaders = 0x%0.8p, GLenum binaryformat = 0x%X, "
literal|"const GLvoid* binary = 0x%0.8p, GLsizei length = %d)"
argument_list|,
name|n
argument_list|,
name|shaders
argument_list|,
name|binaryformat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
modifier|&
name|shaderBinaryFormats
init|=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|shaderBinaryFormats
decl_stmt|;
if|if
condition|(
name|std
operator|::
name|find
argument_list|(
name|shaderBinaryFormats
operator|.
name|begin
argument_list|()
argument_list|,
name|shaderBinaryFormats
operator|.
name|end
argument_list|()
argument_list|,
name|binaryformat
argument_list|)
operator|==
name|shaderBinaryFormats
operator|.
name|end
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// No binary shader formats are supported.
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|ShaderSource
name|void
name|GL_APIENTRY
name|ShaderSource
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLchar
modifier|*
specifier|const
modifier|*
name|string
parameter_list|,
specifier|const
name|GLint
modifier|*
name|length
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d, GLsizei count = %d, const GLchar** string = 0x%0.8p, const GLint* length = 0x%0.8p)"
argument_list|,
name|shader
argument_list|,
name|count
argument_list|,
name|string
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Shader
modifier|*
name|shaderObject
init|=
name|GetValidShader
argument_list|(
name|context
argument_list|,
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
return|return;
block|}
name|shaderObject
operator|->
name|setSource
argument_list|(
name|count
argument_list|,
name|string
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|StencilFunc
name|void
name|GL_APIENTRY
name|StencilFunc
parameter_list|(
name|GLenum
name|func
parameter_list|,
name|GLint
name|ref
parameter_list|,
name|GLuint
name|mask
parameter_list|)
block|{
name|StencilFuncSeparate
argument_list|(
name|GL_FRONT_AND_BACK
argument_list|,
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
DECL|function|StencilFuncSeparate
name|void
name|GL_APIENTRY
name|StencilFuncSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|func
parameter_list|,
name|GLint
name|ref
parameter_list|,
name|GLuint
name|mask
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum face = 0x%X, GLenum func = 0x%X, GLint ref = %d, GLuint mask = %d)"
argument_list|,
name|face
argument_list|,
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|face
condition|)
block|{
case|case
name|GL_FRONT
case|:
case|case
name|GL_BACK
case|:
case|case
name|GL_FRONT_AND_BACK
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|func
condition|)
block|{
case|case
name|GL_NEVER
case|:
case|case
name|GL_ALWAYS
case|:
case|case
name|GL_LESS
case|:
case|case
name|GL_LEQUAL
case|:
case|case
name|GL_EQUAL
case|:
case|case
name|GL_GEQUAL
case|:
case|case
name|GL_GREATER
case|:
case|case
name|GL_NOTEQUAL
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|face
operator|==
name|GL_FRONT
operator|||
name|face
operator|==
name|GL_FRONT_AND_BACK
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setStencilParams
argument_list|(
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|face
operator|==
name|GL_BACK
operator|||
name|face
operator|==
name|GL_FRONT_AND_BACK
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setStencilBackParams
argument_list|(
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|StencilMask
name|void
name|GL_APIENTRY
name|StencilMask
parameter_list|(
name|GLuint
name|mask
parameter_list|)
block|{
name|StencilMaskSeparate
argument_list|(
name|GL_FRONT_AND_BACK
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
DECL|function|StencilMaskSeparate
name|void
name|GL_APIENTRY
name|StencilMaskSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLuint
name|mask
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum face = 0x%X, GLuint mask = %d)"
argument_list|,
name|face
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|face
condition|)
block|{
case|case
name|GL_FRONT
case|:
case|case
name|GL_BACK
case|:
case|case
name|GL_FRONT_AND_BACK
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|face
operator|==
name|GL_FRONT
operator|||
name|face
operator|==
name|GL_FRONT_AND_BACK
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setStencilWritemask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|face
operator|==
name|GL_BACK
operator|||
name|face
operator|==
name|GL_FRONT_AND_BACK
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setStencilBackWritemask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|StencilOp
name|void
name|GL_APIENTRY
name|StencilOp
parameter_list|(
name|GLenum
name|fail
parameter_list|,
name|GLenum
name|zfail
parameter_list|,
name|GLenum
name|zpass
parameter_list|)
block|{
name|StencilOpSeparate
argument_list|(
name|GL_FRONT_AND_BACK
argument_list|,
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
expr_stmt|;
block|}
DECL|function|StencilOpSeparate
name|void
name|GL_APIENTRY
name|StencilOpSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|fail
parameter_list|,
name|GLenum
name|zfail
parameter_list|,
name|GLenum
name|zpass
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum face = 0x%X, GLenum fail = 0x%X, GLenum zfail = 0x%X, GLenum zpas = 0x%Xs)"
argument_list|,
name|face
argument_list|,
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|face
condition|)
block|{
case|case
name|GL_FRONT
case|:
case|case
name|GL_BACK
case|:
case|case
name|GL_FRONT_AND_BACK
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|fail
condition|)
block|{
case|case
name|GL_ZERO
case|:
case|case
name|GL_KEEP
case|:
case|case
name|GL_REPLACE
case|:
case|case
name|GL_INCR
case|:
case|case
name|GL_DECR
case|:
case|case
name|GL_INVERT
case|:
case|case
name|GL_INCR_WRAP
case|:
case|case
name|GL_DECR_WRAP
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|zfail
condition|)
block|{
case|case
name|GL_ZERO
case|:
case|case
name|GL_KEEP
case|:
case|case
name|GL_REPLACE
case|:
case|case
name|GL_INCR
case|:
case|case
name|GL_DECR
case|:
case|case
name|GL_INVERT
case|:
case|case
name|GL_INCR_WRAP
case|:
case|case
name|GL_DECR_WRAP
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|zpass
condition|)
block|{
case|case
name|GL_ZERO
case|:
case|case
name|GL_KEEP
case|:
case|case
name|GL_REPLACE
case|:
case|case
name|GL_INCR
case|:
case|case
name|GL_DECR
case|:
case|case
name|GL_INVERT
case|:
case|case
name|GL_INCR_WRAP
case|:
case|case
name|GL_DECR_WRAP
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|face
operator|==
name|GL_FRONT
operator|||
name|face
operator|==
name|GL_FRONT_AND_BACK
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setStencilOperations
argument_list|(
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|face
operator|==
name|GL_BACK
operator|||
name|face
operator|==
name|GL_FRONT_AND_BACK
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setStencilBackOperations
argument_list|(
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|TexImage2D
name|void
name|GL_APIENTRY
name|TexImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint internalformat = %d, GLsizei width = %d, GLsizei height = %d, "
literal|"GLint border = %d, GLenum format = 0x%X, GLenum type = 0x%X, const GLvoid* pixels = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
operator|&&
operator|!
name|ValidateES2TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|&&
operator|!
name|ValidateES3TexImage2DParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
condition|)
block|{
return|return;
block|}
name|Extents
name|size
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|IsCubeMapTextureTarget
argument_list|(
name|target
argument_list|)
condition|?
name|GL_TEXTURE_CUBE_MAP
else|:
name|target
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|texture
operator|->
name|setImage
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|size
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|pixels
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|TexParameterf
name|void
name|GL_APIENTRY
name|TexParameterf
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
name|param
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLint param = %f)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidTextureTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid texture target"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateTexParamParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// clang-format off
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_TEXTURE_WRAP_S
case|:
name|texture
operator|->
name|setWrapS
argument_list|(
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_T
case|:
name|texture
operator|->
name|setWrapT
argument_list|(
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_R
case|:
name|texture
operator|->
name|setWrapR
argument_list|(
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_FILTER
case|:
name|texture
operator|->
name|setMinFilter
argument_list|(
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAG_FILTER
case|:
name|texture
operator|->
name|setMagFilter
argument_list|(
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_USAGE_ANGLE
case|:
name|texture
operator|->
name|setUsage
argument_list|(
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_ANISOTROPY_EXT
case|:
name|texture
operator|->
name|setMaxAnisotropy
argument_list|(
name|std
operator|::
name|min
argument_list|(
name|param
argument_list|,
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|maxTextureAnisotropy
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_COMPARE_MODE
case|:
name|texture
operator|->
name|setCompareMode
argument_list|(
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_COMPARE_FUNC
case|:
name|texture
operator|->
name|setCompareFunc
argument_list|(
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_R
case|:
name|texture
operator|->
name|setSwizzleRed
argument_list|(
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_G
case|:
name|texture
operator|->
name|setSwizzleGreen
argument_list|(
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_B
case|:
name|texture
operator|->
name|setSwizzleBlue
argument_list|(
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_A
case|:
name|texture
operator|->
name|setSwizzleAlpha
argument_list|(
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_BASE_LEVEL
case|:
name|texture
operator|->
name|setBaseLevel
argument_list|(
name|uiround
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LEVEL
case|:
name|texture
operator|->
name|setMaxLevel
argument_list|(
name|uiround
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_LOD
case|:
name|texture
operator|->
name|setMinLod
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LOD
case|:
name|texture
operator|->
name|setMaxLod
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// clang-format on
block|}
block|}
DECL|function|TexParameterfv
name|void
name|GL_APIENTRY
name|TexParameterfv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|TexParameterf
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
operator|(
name|GLfloat
operator|)
operator|*
name|params
argument_list|)
expr_stmt|;
block|}
DECL|function|TexParameteri
name|void
name|GL_APIENTRY
name|TexParameteri
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
name|param
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLint param = %d)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidTextureTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|,
literal|"Invalid Texture target"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateTexParamParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
condition|)
block|{
return|return;
block|}
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// clang-format off
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_TEXTURE_WRAP_S
case|:
name|texture
operator|->
name|setWrapS
argument_list|(
cast|static_cast
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_T
case|:
name|texture
operator|->
name|setWrapT
argument_list|(
cast|static_cast
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_R
case|:
name|texture
operator|->
name|setWrapR
argument_list|(
cast|static_cast
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_FILTER
case|:
name|texture
operator|->
name|setMinFilter
argument_list|(
cast|static_cast
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAG_FILTER
case|:
name|texture
operator|->
name|setMagFilter
argument_list|(
cast|static_cast
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_USAGE_ANGLE
case|:
name|texture
operator|->
name|setUsage
argument_list|(
cast|static_cast
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_ANISOTROPY_EXT
case|:
name|texture
operator|->
name|setMaxAnisotropy
argument_list|(
name|std
operator|::
name|min
argument_list|(
cast|static_cast
argument_list|<
name|GLfloat
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|,
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|maxTextureAnisotropy
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_COMPARE_MODE
case|:
name|texture
operator|->
name|setCompareMode
argument_list|(
cast|static_cast
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_COMPARE_FUNC
case|:
name|texture
operator|->
name|setCompareFunc
argument_list|(
cast|static_cast
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_R
case|:
name|texture
operator|->
name|setSwizzleRed
argument_list|(
cast|static_cast
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_G
case|:
name|texture
operator|->
name|setSwizzleGreen
argument_list|(
cast|static_cast
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_B
case|:
name|texture
operator|->
name|setSwizzleBlue
argument_list|(
cast|static_cast
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_A
case|:
name|texture
operator|->
name|setSwizzleAlpha
argument_list|(
cast|static_cast
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_BASE_LEVEL
case|:
name|texture
operator|->
name|setBaseLevel
argument_list|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LEVEL
case|:
name|texture
operator|->
name|setMaxLevel
argument_list|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_LOD
case|:
name|texture
operator|->
name|setMinLod
argument_list|(
cast|static_cast
argument_list|<
name|GLfloat
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LOD
case|:
name|texture
operator|->
name|setMaxLod
argument_list|(
cast|static_cast
argument_list|<
name|GLfloat
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// clang-format on
block|}
block|}
DECL|function|TexParameteriv
name|void
name|GL_APIENTRY
name|TexParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
specifier|const
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|TexParameteri
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
operator|*
name|params
argument_list|)
expr_stmt|;
block|}
DECL|function|TexSubImage2D
name|void
name|GL_APIENTRY
name|TexSubImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
literal|"GLsizei width = %d, GLsizei height = %d, GLenum format = 0x%X, GLenum type = 0x%X, "
literal|"const GLvoid* pixels = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
operator|&&
operator|!
name|ValidateES2TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|&&
operator|!
name|ValidateES3TexImage2DParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Zero sized uploads are valid but no-ops
if|if
condition|(
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Box
name|area
argument_list|(
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|IsCubeMapTextureTarget
argument_list|(
name|target
argument_list|)
condition|?
name|GL_TEXTURE_CUBE_MAP
else|:
name|target
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|texture
operator|->
name|setSubImage
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|area
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|pixels
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|Uniform1f
name|void
name|GL_APIENTRY
name|Uniform1f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|)
block|{
name|Uniform1fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
operator|&
name|x
argument_list|)
expr_stmt|;
block|}
DECL|function|Uniform1fv
name|void
name|GL_APIENTRY
name|Uniform1fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_FLOAT
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniform1fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|Uniform1i
name|void
name|GL_APIENTRY
name|Uniform1i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|)
block|{
name|Uniform1iv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
operator|&
name|x
argument_list|)
expr_stmt|;
block|}
DECL|function|Uniform1iv
name|void
name|GL_APIENTRY
name|Uniform1iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_INT
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniform1iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|Uniform2f
name|void
name|GL_APIENTRY
name|Uniform2f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
block|{
name|GLfloat
name|xy
index|[
literal|2
index|]
init|=
block|{
name|x
block|,
name|y
block|}
decl_stmt|;
name|Uniform2fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xy
argument_list|)
expr_stmt|;
block|}
DECL|function|Uniform2fv
name|void
name|GL_APIENTRY
name|Uniform2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_VEC2
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniform2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|Uniform2i
name|void
name|GL_APIENTRY
name|Uniform2i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|)
block|{
name|GLint
name|xy
index|[
literal|2
index|]
init|=
block|{
name|x
block|,
name|y
block|}
decl_stmt|;
name|Uniform2iv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xy
argument_list|)
expr_stmt|;
block|}
DECL|function|Uniform2iv
name|void
name|GL_APIENTRY
name|Uniform2iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_INT_VEC2
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniform2iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|Uniform3f
name|void
name|GL_APIENTRY
name|Uniform3f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
block|{
name|GLfloat
name|xyz
index|[
literal|3
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|}
decl_stmt|;
name|Uniform3fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xyz
argument_list|)
expr_stmt|;
block|}
DECL|function|Uniform3fv
name|void
name|GL_APIENTRY
name|Uniform3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_VEC3
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniform3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|Uniform3i
name|void
name|GL_APIENTRY
name|Uniform3i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|)
block|{
name|GLint
name|xyz
index|[
literal|3
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|}
decl_stmt|;
name|Uniform3iv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xyz
argument_list|)
expr_stmt|;
block|}
DECL|function|Uniform3iv
name|void
name|GL_APIENTRY
name|Uniform3iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_INT_VEC3
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniform3iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|Uniform4f
name|void
name|GL_APIENTRY
name|Uniform4f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
block|{
name|GLfloat
name|xyzw
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
name|w
block|}
decl_stmt|;
name|Uniform4fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xyzw
argument_list|)
expr_stmt|;
block|}
DECL|function|Uniform4fv
name|void
name|GL_APIENTRY
name|Uniform4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_VEC4
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniform4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|Uniform4i
name|void
name|GL_APIENTRY
name|Uniform4i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|,
name|GLint
name|w
parameter_list|)
block|{
name|GLint
name|xyzw
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
name|w
block|}
decl_stmt|;
name|Uniform4iv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xyzw
argument_list|)
expr_stmt|;
block|}
DECL|function|Uniform4iv
name|void
name|GL_APIENTRY
name|Uniform4iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_INT_VEC4
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniform4iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|UniformMatrix2fv
name|void
name|GL_APIENTRY
name|UniformMatrix2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT2
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniformMatrix2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|UniformMatrix3fv
name|void
name|GL_APIENTRY
name|UniformMatrix3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT3
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniformMatrix3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|UniformMatrix4fv
name|void
name|GL_APIENTRY
name|UniformMatrix4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT4
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniformMatrix4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|UseProgram
name|void
name|GL_APIENTRY
name|UseProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d)"
argument_list|,
name|program
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
operator|&&
name|program
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|program
operator|!=
literal|0
operator|&&
operator|!
name|programObject
operator|->
name|isLinked
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|useProgram
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|ValidateProgram
name|void
name|GL_APIENTRY
name|ValidateProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d)"
argument_list|,
name|program
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|Program
modifier|*
name|programObject
init|=
name|GetValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
return|return;
block|}
name|programObject
operator|->
name|validate
argument_list|(
name|context
operator|->
name|getCaps
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|VertexAttrib1f
name|void
name|GL_APIENTRY
name|VertexAttrib1f
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLfloat
name|x
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLfloat x = %f)"
argument_list|,
name|index
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLfloat
name|vals
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|VertexAttrib1fv
name|void
name|GL_APIENTRY
name|VertexAttrib1fv
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, const GLfloat* values = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLfloat
name|vals
index|[
literal|4
index|]
init|=
block|{
name|values
index|[
literal|0
index|]
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|VertexAttrib2f
name|void
name|GL_APIENTRY
name|VertexAttrib2f
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLfloat x = %f, GLfloat y = %f)"
argument_list|,
name|index
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLfloat
name|vals
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|VertexAttrib2fv
name|void
name|GL_APIENTRY
name|VertexAttrib2fv
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, const GLfloat* values = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLfloat
name|vals
index|[
literal|4
index|]
init|=
block|{
name|values
index|[
literal|0
index|]
block|,
name|values
index|[
literal|1
index|]
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|VertexAttrib3f
name|void
name|GL_APIENTRY
name|VertexAttrib3f
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLfloat x = %f, GLfloat y = %f, GLfloat z = %f)"
argument_list|,
name|index
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLfloat
name|vals
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
literal|1
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|VertexAttrib3fv
name|void
name|GL_APIENTRY
name|VertexAttrib3fv
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, const GLfloat* values = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLfloat
name|vals
index|[
literal|4
index|]
init|=
block|{
name|values
index|[
literal|0
index|]
block|,
name|values
index|[
literal|1
index|]
block|,
name|values
index|[
literal|2
index|]
block|,
literal|1
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|VertexAttrib4f
name|void
name|GL_APIENTRY
name|VertexAttrib4f
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLfloat x = %f, GLfloat y = %f, GLfloat z = %f, GLfloat w = %f)"
argument_list|,
name|index
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLfloat
name|vals
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
name|w
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|VertexAttrib4fv
name|void
name|GL_APIENTRY
name|VertexAttrib4fv
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, const GLfloat* values = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|VertexAttribPointer
name|void
name|GL_APIENTRY
name|VertexAttribPointer
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLboolean
name|normalized
parameter_list|,
name|GLsizei
name|stride
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|ptr
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLint size = %d, GLenum type = 0x%X, "
literal|"GLboolean normalized = %u, GLsizei stride = %d, const GLvoid* ptr = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|normalized
argument_list|,
name|stride
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|size
argument_list|<
literal|1
operator|||
name|size
argument_list|>
literal|4
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_BYTE
case|:
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_SHORT
case|:
case|case
name|GL_UNSIGNED_SHORT
case|:
case|case
name|GL_FIXED
case|:
case|case
name|GL_FLOAT
case|:
break|break;
case|case
name|GL_HALF_FLOAT
case|:
case|case
name|GL_INT
case|:
case|case
name|GL_UNSIGNED_INT
case|:
case|case
name|GL_INT_2_10_10_10_REV
case|:
case|case
name|GL_UNSIGNED_INT_2_10_10_10_REV
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|stride
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|(
name|type
operator|==
name|GL_INT_2_10_10_10_REV
operator|||
name|type
operator|==
name|GL_UNSIGNED_INT_2_10_10_10_REV
operator|)
operator|&&
name|size
operator|!=
literal|4
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// [OpenGL ES 3.0.2] Section 2.8 page 24:
comment|// An INVALID_OPERATION error is generated when a non-zero vertex array object
comment|// is bound, zero is bound to the ARRAY_BUFFER buffer object binding point,
comment|// and the pointer argument is not NULL.
if|if
condition|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexArray
argument_list|()
operator|->
name|id
argument_list|()
operator|!=
literal|0
operator|&&
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getArrayBufferId
argument_list|()
operator|==
literal|0
operator|&&
name|ptr
operator|!=
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribState
argument_list|(
name|index
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|GL_ARRAY_BUFFER
argument_list|)
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|normalized
operator|==
name|GL_TRUE
argument_list|,
literal|false
argument_list|,
name|stride
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|Viewport
name|void
name|GL_APIENTRY
name|Viewport
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|width
operator|<
literal|0
operator|||
name|height
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setViewportParams
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_namespace
end_unit
