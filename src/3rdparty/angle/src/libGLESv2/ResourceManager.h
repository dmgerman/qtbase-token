begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// ResourceManager.h : Defines the ResourceManager class, which tracks objects
end_comment
begin_comment
comment|// shared by multiple GL contexts.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RESOURCEMANAGER_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RESOURCEMANAGER_H_
define|#
directive|define
name|LIBGLESV2_RESOURCEMANAGER_H_
end_define
begin_define
DECL|macro|GL_APICALL
define|#
directive|define
name|GL_APICALL
end_define
begin_include
include|#
directive|include
file|<GLES2/gl2.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|_MSC_VER
end_ifdef
begin_include
include|#
directive|include
file|<hash_map>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<unordered_map>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/HandleAllocator.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Buffer
decl_stmt|;
name|class
name|Shader
decl_stmt|;
name|class
name|Program
decl_stmt|;
name|class
name|Texture
decl_stmt|;
name|class
name|Renderbuffer
decl_stmt|;
enum|enum
name|TextureType
block|{
name|TEXTURE_2D
block|,
name|TEXTURE_CUBE
block|,
name|TEXTURE_TYPE_COUNT
block|,
name|TEXTURE_UNKNOWN
block|}
enum|;
enum|enum
name|SamplerType
block|{
name|SAMPLER_PIXEL
block|,
name|SAMPLER_VERTEX
block|}
enum|;
name|class
name|ResourceManager
block|{
name|public
label|:
name|ResourceManager
argument_list|()
expr_stmt|;
operator|~
name|ResourceManager
argument_list|()
expr_stmt|;
name|void
name|addRef
parameter_list|()
function_decl|;
name|void
name|release
parameter_list|()
function_decl|;
name|GLuint
name|createBuffer
parameter_list|()
function_decl|;
name|GLuint
name|createShader
parameter_list|(
name|GLenum
name|type
parameter_list|)
function_decl|;
name|GLuint
name|createProgram
parameter_list|()
function_decl|;
name|GLuint
name|createTexture
parameter_list|()
function_decl|;
name|GLuint
name|createRenderbuffer
parameter_list|()
function_decl|;
name|void
name|deleteBuffer
parameter_list|(
name|GLuint
name|buffer
parameter_list|)
function_decl|;
name|void
name|deleteShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
function_decl|;
name|void
name|deleteProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
function_decl|;
name|void
name|deleteTexture
parameter_list|(
name|GLuint
name|texture
parameter_list|)
function_decl|;
name|void
name|deleteRenderbuffer
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
function_decl|;
name|Buffer
modifier|*
name|getBuffer
parameter_list|(
name|GLuint
name|handle
parameter_list|)
function_decl|;
name|Shader
modifier|*
name|getShader
parameter_list|(
name|GLuint
name|handle
parameter_list|)
function_decl|;
name|Program
modifier|*
name|getProgram
parameter_list|(
name|GLuint
name|handle
parameter_list|)
function_decl|;
name|Texture
modifier|*
name|getTexture
parameter_list|(
name|GLuint
name|handle
parameter_list|)
function_decl|;
name|Renderbuffer
modifier|*
name|getRenderbuffer
parameter_list|(
name|GLuint
name|handle
parameter_list|)
function_decl|;
name|void
name|setRenderbuffer
parameter_list|(
name|GLuint
name|handle
parameter_list|,
name|Renderbuffer
modifier|*
name|renderbuffer
parameter_list|)
function_decl|;
name|void
name|checkBufferAllocation
parameter_list|(
name|unsigned
name|int
name|buffer
parameter_list|)
function_decl|;
name|void
name|checkTextureAllocation
parameter_list|(
name|GLuint
name|texture
parameter_list|,
name|TextureType
name|type
parameter_list|)
function_decl|;
name|void
name|checkRenderbufferAllocation
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
function_decl|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|ResourceManager
argument_list|)
expr_stmt|;
name|std
operator|::
name|size_t
name|mRefCount
expr_stmt|;
ifndef|#
directive|ifndef
name|HASH_MAP
ifdef|#
directive|ifdef
name|_MSC_VER
DECL|macro|HASH_MAP
define|#
directive|define
name|HASH_MAP
value|stdext::hash_map
else|#
directive|else
define|#
directive|define
name|HASH_MAP
value|std::unordered_map
endif|#
directive|endif
endif|#
directive|endif
typedef|typedef
name|HASH_MAP
operator|<
name|GLuint
operator|,
name|Buffer
operator|*
operator|>
name|BufferMap
expr_stmt|;
name|BufferMap
name|mBufferMap
decl_stmt|;
name|HandleAllocator
name|mBufferHandleAllocator
decl_stmt|;
typedef|typedef
name|HASH_MAP
operator|<
name|GLuint
operator|,
name|Shader
operator|*
operator|>
name|ShaderMap
expr_stmt|;
name|ShaderMap
name|mShaderMap
decl_stmt|;
typedef|typedef
name|HASH_MAP
operator|<
name|GLuint
operator|,
name|Program
operator|*
operator|>
name|ProgramMap
expr_stmt|;
name|ProgramMap
name|mProgramMap
decl_stmt|;
name|HandleAllocator
name|mProgramShaderHandleAllocator
decl_stmt|;
typedef|typedef
name|HASH_MAP
operator|<
name|GLuint
operator|,
name|Texture
operator|*
operator|>
name|TextureMap
expr_stmt|;
name|TextureMap
name|mTextureMap
decl_stmt|;
name|HandleAllocator
name|mTextureHandleAllocator
decl_stmt|;
typedef|typedef
name|HASH_MAP
operator|<
name|GLuint
operator|,
name|Renderbuffer
operator|*
operator|>
name|RenderbufferMap
expr_stmt|;
name|RenderbufferMap
name|mRenderbufferMap
decl_stmt|;
name|HandleAllocator
name|mRenderbufferHandleAllocator
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RESOURCEMANAGER_H_
end_comment
end_unit
