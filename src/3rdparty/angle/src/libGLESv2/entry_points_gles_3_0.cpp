begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright(c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// entry_points_gles_3_0.cpp : Implements the GLES 3.0 entry points.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/entry_points_gles_3_0.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/entry_points_gles_2_0_ext.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/global_state.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Buffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Context.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Error.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Fence.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/Query.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/VertexArray.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/validationES.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/validationES3.h"
end_include
begin_include
include|#
directive|include
file|"libANGLE/queryconversions.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|ReadBuffer
name|void
name|GL_APIENTRY
name|ReadBuffer
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X)"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateReadBuffer
argument_list|(
name|context
argument_list|,
name|mode
argument_list|)
condition|)
block|{
return|return;
block|}
name|Framebuffer
modifier|*
name|readFBO
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
decl_stmt|;
name|readFBO
operator|->
name|setReadBuffer
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DrawRangeElements
name|void
name|GL_APIENTRY
name|DrawRangeElements
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLuint
name|start
parameter_list|,
name|GLuint
name|end
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X, GLuint start = %u, GLuint end = %u, GLsizei count = %d, GLenum type = 0x%X, "
literal|"const GLvoid* indices = 0x%0.8p)"
argument_list|,
name|mode
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|rx
operator|::
name|RangeUI
name|indexRange
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateDrawElements
argument_list|(
name|context
argument_list|,
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
literal|0
argument_list|,
operator|&
name|indexRange
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|indexRange
operator|.
name|end
operator|>
name|end
operator|||
name|indexRange
operator|.
name|start
operator|<
name|start
condition|)
block|{
comment|// GL spec says that behavior in this case is undefined - generating an error is fine.
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// As long as index validation is done, it doesn't matter whether the context receives a drawElements or
comment|// a drawRangeElements call - the GL back-end is free to choose to call drawRangeElements based on the
comment|// validated index range. If index validation is removed, adding drawRangeElements to the context interface
comment|// should be reconsidered.
name|Error
name|error
init|=
name|context
operator|->
name|drawElements
argument_list|(
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
literal|0
argument_list|,
name|indexRange
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|TexImage3D
name|void
name|GL_APIENTRY
name|TexImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint internalformat = %d, GLsizei width = %d, "
literal|"GLsizei height = %d, GLsizei depth = %d, GLint border = %d, GLenum format = 0x%X, "
literal|"GLenum type = 0x%X, const GLvoid* pixels = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// validateES3TexImageFormat sets the error code if there is an error
if|if
condition|(
operator|!
name|ValidateES3TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
condition|)
block|{
return|return;
block|}
name|Extents
name|size
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
decl_stmt|;
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|texture
operator|->
name|setImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|size
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|pixels
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|TexSubImage3D
name|void
name|GL_APIENTRY
name|TexSubImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
literal|"GLint zoffset = %d, GLsizei width = %d, GLsizei height = %d, GLsizei depth = %d, "
literal|"GLenum format = 0x%X, GLenum type = 0x%X, const GLvoid* pixels = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// validateES3TexImageFormat sets the error code if there is an error
if|if
condition|(
operator|!
name|ValidateES3TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
literal|0
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Zero sized uploads are valid but no-ops
if|if
condition|(
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
operator|||
name|depth
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Box
name|area
argument_list|(
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
decl_stmt|;
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|texture
operator|->
name|setSubImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|area
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|pixels
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|CopyTexSubImage3D
name|void
name|GL_APIENTRY
name|CopyTexSubImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
literal|"GLint zoffset = %d, GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateES3CopyTexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|true
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|)
condition|)
block|{
return|return;
block|}
name|Offset
name|destOffset
argument_list|(
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|)
decl_stmt|;
name|Rectangle
name|sourceArea
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
specifier|const
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
decl_stmt|;
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|texture
operator|->
name|copySubImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|destOffset
argument_list|,
name|sourceArea
argument_list|,
name|framebuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|CompressedTexImage3D
name|void
name|GL_APIENTRY
name|CompressedTexImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, GLsizei width = %d, "
literal|"GLsizei height = %d, GLsizei depth = %d, GLint border = %d, GLsizei imageSize = %d, "
literal|"const GLvoid* data = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|border
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageSize
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|imageSize
argument_list|)
operator|!=
name|formatInfo
operator|.
name|computeBlockSize
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// validateES3TexImageFormat sets the error code if there is an error
if|if
condition|(
operator|!
name|ValidateES3TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|border
argument_list|,
name|GL_NONE
argument_list|,
name|GL_NONE
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
name|Extents
name|size
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
decl_stmt|;
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|texture
operator|->
name|setCompressedImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|size
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|CompressedTexSubImage3D
name|void
name|GL_APIENTRY
name|CompressedTexSubImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
literal|"GLint zoffset = %d, GLsizei width = %d, GLsizei height = %d, GLsizei depth = %d, "
literal|"GLenum format = 0x%X, GLsizei imageSize = %d, const GLvoid* data = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|GetInternalFormatInfo
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageSize
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|imageSize
argument_list|)
operator|!=
name|formatInfo
operator|.
name|computeBlockSize
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|data
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// validateES3TexImageFormat sets the error code if there is an error
if|if
condition|(
operator|!
name|ValidateES3TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
literal|0
argument_list|,
name|GL_NONE
argument_list|,
name|GL_NONE
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Zero sized uploads are valid but no-ops
if|if
condition|(
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Box
name|area
argument_list|(
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
decl_stmt|;
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|texture
operator|->
name|setCompressedSubImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|area
argument_list|,
name|format
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GenQueries
name|void
name|GL_APIENTRY
name|GenQueries
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* ids = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ids
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createQuery
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|DeleteQueries
name|void
name|GL_APIENTRY
name|DeleteQueries
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* ids = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|->
name|deleteQuery
argument_list|(
name|ids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|IsQuery
name|GLboolean
name|GL_APIENTRY
name|IsQuery
parameter_list|(
name|GLuint
name|id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint id = %u)"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
return|return
operator|(
name|context
operator|->
name|getQuery
argument_list|(
name|id
argument_list|,
literal|false
argument_list|,
name|GL_NONE
argument_list|)
operator|!=
name|NULL
operator|)
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|BeginQuery
name|void
name|GL_APIENTRY
name|BeginQuery
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint id = %u)"
argument_list|,
name|target
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateBeginQuery
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|id
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|beginQuery
argument_list|(
name|target
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|EndQuery
name|void
name|GL_APIENTRY
name|EndQuery
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X)"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateEndQuery
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|endQuery
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetQueryiv
name|void
name|GL_APIENTRY
name|GetQueryiv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidQueryType
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_CURRENT_QUERY
case|:
name|params
index|[
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getActiveQueryId
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetQueryObjectuiv
name|void
name|GL_APIENTRY
name|GetQueryObjectuiv
parameter_list|(
name|GLuint
name|id
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLuint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint id = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Query
modifier|*
name|queryObject
init|=
name|context
operator|->
name|getQuery
argument_list|(
name|id
argument_list|,
literal|false
argument_list|,
name|GL_NONE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|queryObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getActiveQueryId
argument_list|(
name|queryObject
operator|->
name|getType
argument_list|()
argument_list|)
operator|==
name|id
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_QUERY_RESULT_EXT
case|:
block|{
name|Error
name|error
init|=
name|queryObject
operator|->
name|getResult
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_QUERY_RESULT_AVAILABLE_EXT
case|:
block|{
name|Error
name|error
init|=
name|queryObject
operator|->
name|isResultAvailable
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|UnmapBuffer
name|GLboolean
name|GL_APIENTRY
name|UnmapBuffer
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X)"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
return|return
name|UnmapBufferOES
argument_list|(
name|target
argument_list|)
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|GetBufferPointerv
name|void
name|GL_APIENTRY
name|GetBufferPointerv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLvoid
modifier|*
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLvoid** params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GetBufferPointervOES
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DrawBuffers
name|void
name|GL_APIENTRY
name|DrawBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|bufs
parameter_list|)
block|{
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|DrawBuffersEXT
argument_list|(
name|n
argument_list|,
name|bufs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|UniformMatrix2x3fv
name|void
name|GL_APIENTRY
name|UniformMatrix2x3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT2x3
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniformMatrix2x3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|UniformMatrix3x2fv
name|void
name|GL_APIENTRY
name|UniformMatrix3x2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT3x2
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniformMatrix3x2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|UniformMatrix2x4fv
name|void
name|GL_APIENTRY
name|UniformMatrix2x4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT2x4
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniformMatrix2x4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|UniformMatrix4x2fv
name|void
name|GL_APIENTRY
name|UniformMatrix4x2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT4x2
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniformMatrix4x2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|UniformMatrix3x4fv
name|void
name|GL_APIENTRY
name|UniformMatrix3x4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT3x4
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniformMatrix3x4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|UniformMatrix4x3fv
name|void
name|GL_APIENTRY
name|UniformMatrix4x3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT4x3
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniformMatrix4x3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|BlitFramebuffer
name|void
name|GL_APIENTRY
name|BlitFramebuffer
parameter_list|(
name|GLint
name|srcX0
parameter_list|,
name|GLint
name|srcY0
parameter_list|,
name|GLint
name|srcX1
parameter_list|,
name|GLint
name|srcY1
parameter_list|,
name|GLint
name|dstX0
parameter_list|,
name|GLint
name|dstY0
parameter_list|,
name|GLint
name|dstX1
parameter_list|,
name|GLint
name|dstY1
parameter_list|,
name|GLbitfield
name|mask
parameter_list|,
name|GLenum
name|filter
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint srcX0 = %d, GLint srcY0 = %d, GLint srcX1 = %d, GLint srcY1 = %d, GLint dstX0 = %d, "
literal|"GLint dstY0 = %d, GLint dstX1 = %d, GLint dstY1 = %d, GLbitfield mask = 0x%X, GLenum filter = 0x%X)"
argument_list|,
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateBlitFramebufferParameters
argument_list|(
name|context
argument_list|,
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|Framebuffer
modifier|*
name|readFramebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|readFramebuffer
argument_list|)
expr_stmt|;
name|Framebuffer
modifier|*
name|drawFramebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|drawFramebuffer
argument_list|)
expr_stmt|;
name|Rectangle
name|srcArea
argument_list|(
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
operator|-
name|srcX0
argument_list|,
name|srcY1
operator|-
name|srcY0
argument_list|)
decl_stmt|;
name|Rectangle
name|dstArea
argument_list|(
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
operator|-
name|dstX0
argument_list|,
name|dstY1
operator|-
name|dstY0
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|drawFramebuffer
operator|->
name|blit
argument_list|(
name|context
operator|->
name|getState
argument_list|()
argument_list|,
name|srcArea
argument_list|,
name|dstArea
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|,
name|readFramebuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|RenderbufferStorageMultisample
name|void
name|GL_APIENTRY
name|RenderbufferStorageMultisample
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|samples
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei samples = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateES3RenderbufferStorageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
return|return;
block|}
name|Renderbuffer
modifier|*
name|renderbuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentRenderbuffer
argument_list|()
decl_stmt|;
name|renderbuffer
operator|->
name|setStorageMultisample
argument_list|(
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|FramebufferTextureLayer
name|void
name|GL_APIENTRY
name|FramebufferTextureLayer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLuint
name|texture
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum attachment = 0x%X, GLuint texture = %u, GLint level = %d, GLint layer = %d)"
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|texture
argument_list|,
name|level
argument_list|,
name|layer
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateFramebufferTextureLayer
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|texture
argument_list|,
name|level
argument_list|,
name|layer
argument_list|)
condition|)
block|{
return|return;
block|}
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetFramebuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|texture
operator|!=
literal|0
condition|)
block|{
name|Texture
modifier|*
name|textureObject
init|=
name|context
operator|->
name|getTexture
argument_list|(
name|texture
argument_list|)
decl_stmt|;
name|ImageIndex
name|index
init|=
name|ImageIndex
operator|::
name|MakeInvalid
argument_list|()
decl_stmt|;
if|if
condition|(
name|textureObject
operator|->
name|getTarget
argument_list|()
operator|==
name|GL_TEXTURE_3D
condition|)
block|{
name|index
operator|=
name|ImageIndex
operator|::
name|Make3D
argument_list|(
name|level
argument_list|,
name|layer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ASSERT
argument_list|(
name|textureObject
operator|->
name|getTarget
argument_list|()
operator|==
name|GL_TEXTURE_2D_ARRAY
argument_list|)
expr_stmt|;
name|index
operator|=
name|ImageIndex
operator|::
name|Make2DArray
argument_list|(
name|level
argument_list|,
name|layer
argument_list|)
expr_stmt|;
block|}
name|framebuffer
operator|->
name|setTextureAttachment
argument_list|(
name|attachment
argument_list|,
name|textureObject
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|framebuffer
operator|->
name|setNULLAttachment
argument_list|(
name|attachment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|MapBufferRange
name|GLvoid
modifier|*
name|GL_APIENTRY
name|MapBufferRange
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|length
parameter_list|,
name|GLbitfield
name|access
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d, GLbitfield access = 0x%X)"
argument_list|,
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|access
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|MapBufferRangeEXT
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|access
argument_list|)
return|;
block|}
return|return
name|NULL
return|;
block|}
DECL|function|FlushMappedBufferRange
name|void
name|GL_APIENTRY
name|FlushMappedBufferRange
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|length
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d)"
argument_list|,
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|FlushMappedBufferRangeEXT
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|BindVertexArray
name|void
name|GL_APIENTRY
name|BindVertexArray
parameter_list|(
name|GLuint
name|array
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint array = %u)"
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|VertexArray
modifier|*
name|vao
init|=
name|context
operator|->
name|getVertexArray
argument_list|(
name|array
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vao
condition|)
block|{
comment|// The default VAO should always exist
name|ASSERT
argument_list|(
name|array
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindVertexArray
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DeleteVertexArrays
name|void
name|GL_APIENTRY
name|DeleteVertexArrays
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|arrays
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* arrays = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|arrays
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|arrayIndex
init|=
literal|0
init|;
name|arrayIndex
operator|<
name|n
condition|;
name|arrayIndex
operator|++
control|)
block|{
if|if
condition|(
name|arrays
index|[
name|arrayIndex
index|]
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|deleteVertexArray
argument_list|(
name|arrays
index|[
name|arrayIndex
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|GenVertexArrays
name|void
name|GL_APIENTRY
name|GenVertexArrays
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|arrays
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* arrays = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|arrays
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|arrayIndex
init|=
literal|0
init|;
name|arrayIndex
operator|<
name|n
condition|;
name|arrayIndex
operator|++
control|)
block|{
name|arrays
index|[
name|arrayIndex
index|]
operator|=
name|context
operator|->
name|createVertexArray
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|IsVertexArray
name|GLboolean
name|GL_APIENTRY
name|IsVertexArray
parameter_list|(
name|GLuint
name|array
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint array = %u)"
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
if|if
condition|(
name|array
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FALSE
return|;
block|}
name|VertexArray
modifier|*
name|vao
init|=
name|context
operator|->
name|getVertexArray
argument_list|(
name|array
argument_list|)
decl_stmt|;
return|return
operator|(
name|vao
operator|!=
name|NULL
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
operator|)
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|GetIntegeri_v
name|void
name|GL_APIENTRY
name|GetIntegeri_v
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLint
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint index = %u, GLint* data = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|index
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_START
case|:
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
case|:
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxTransformFeedbackSeparateAttributes
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_UNIFORM_BUFFER_START
case|:
case|case
name|GL_UNIFORM_BUFFER_SIZE
case|:
case|case
name|GL_UNIFORM_BUFFER_BINDING
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxCombinedUniformBlocks
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|context
operator|->
name|getIndexedIntegerv
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|data
argument_list|)
operator|)
condition|)
block|{
name|GLenum
name|nativeType
decl_stmt|;
name|unsigned
name|int
name|numParams
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|->
name|getIndexedQueryParameterInfo
argument_list|(
name|target
argument_list|,
operator|&
name|nativeType
argument_list|,
operator|&
name|numParams
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|numParams
operator|==
literal|0
condition|)
block|{
return|return;
comment|// it is known that pname is valid, but there are no parameters to return
block|}
if|if
condition|(
name|nativeType
operator|==
name|GL_INT_64_ANGLEX
condition|)
block|{
name|GLint64
name|minIntValue
init|=
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
decl_stmt|;
name|GLint64
name|maxIntValue
init|=
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|max
argument_list|()
argument_list|)
decl_stmt|;
name|GLint64
modifier|*
name|int64Params
init|=
operator|new
name|GLint64
index|[
name|numParams
index|]
decl_stmt|;
name|context
operator|->
name|getIndexedInteger64v
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|int64Params
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParams
condition|;
operator|++
name|i
control|)
block|{
name|GLint64
name|clampedValue
init|=
name|std
operator|::
name|max
argument_list|(
name|std
operator|::
name|min
argument_list|(
name|int64Params
index|[
name|i
index|]
argument_list|,
name|maxIntValue
argument_list|)
argument_list|,
name|minIntValue
argument_list|)
decl_stmt|;
name|data
index|[
name|i
index|]
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|clampedValue
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|int64Params
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|BeginTransformFeedback
name|void
name|GL_APIENTRY
name|BeginTransformFeedback
parameter_list|(
name|GLenum
name|primitiveMode
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum primitiveMode = 0x%X)"
argument_list|,
name|primitiveMode
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|primitiveMode
condition|)
block|{
case|case
name|GL_TRIANGLES
case|:
case|case
name|GL_LINES
case|:
case|case
name|GL_POINTS
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|TransformFeedback
modifier|*
name|transformFeedback
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentTransformFeedback
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|transformFeedback
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|transformFeedback
operator|->
name|isStarted
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|transformFeedback
operator|->
name|isPaused
argument_list|()
condition|)
block|{
name|transformFeedback
operator|->
name|resume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|transformFeedback
operator|->
name|start
argument_list|(
name|primitiveMode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|EndTransformFeedback
name|void
name|GL_APIENTRY
name|EndTransformFeedback
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(void)"
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|TransformFeedback
modifier|*
name|transformFeedback
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentTransformFeedback
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|transformFeedback
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|transformFeedback
operator|->
name|isStarted
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|transformFeedback
operator|->
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|BindBufferRange
name|void
name|GL_APIENTRY
name|BindBufferRange
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLuint
name|buffer
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint index = %u, GLuint buffer = %u, GLintptr offset = %d, GLsizeiptr size = %d)"
argument_list|,
name|target
argument_list|,
name|index
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxTransformFeedbackSeparateAttributes
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_UNIFORM_BUFFER
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxUniformBufferBindings
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|buffer
operator|!=
literal|0
operator|&&
name|size
operator|<=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER
case|:
block|{
comment|// size and offset must be a multiple of 4
if|if
condition|(
name|buffer
operator|!=
literal|0
operator|&&
operator|(
operator|(
name|offset
operator|%
literal|4
operator|)
operator|!=
literal|0
operator|||
operator|(
name|size
operator|%
literal|4
operator|)
operator|!=
literal|0
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Cannot bind a transform feedback buffer if the current transform feedback is active (3.0.4 pg 91 section 2.15.2)
name|TransformFeedback
modifier|*
name|curTransformFeedback
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentTransformFeedback
argument_list|()
decl_stmt|;
if|if
condition|(
name|curTransformFeedback
operator|&&
name|curTransformFeedback
operator|->
name|isStarted
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindIndexedTransformFeedbackBuffer
argument_list|(
name|buffer
argument_list|,
name|index
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|context
operator|->
name|bindGenericTransformFeedbackBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|GL_UNIFORM_BUFFER
case|:
comment|// it is an error to bind an offset not a multiple of the alignment
if|if
condition|(
name|buffer
operator|!=
literal|0
operator|&&
operator|(
name|offset
operator|%
name|caps
operator|.
name|uniformBufferOffsetAlignment
operator|)
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindIndexedUniformBuffer
argument_list|(
name|buffer
argument_list|,
name|index
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|context
operator|->
name|bindGenericUniformBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|BindBufferBase
name|void
name|GL_APIENTRY
name|BindBufferBase
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLuint
name|buffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint index = %u, GLuint buffer = %u)"
argument_list|,
name|target
argument_list|,
name|index
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxTransformFeedbackSeparateAttributes
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_UNIFORM_BUFFER
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxUniformBufferBindings
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER
case|:
block|{
comment|// Cannot bind a transform feedback buffer if the current transform feedback is active (3.0.4 pg 91 section 2.15.2)
name|TransformFeedback
modifier|*
name|curTransformFeedback
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentTransformFeedback
argument_list|()
decl_stmt|;
if|if
condition|(
name|curTransformFeedback
operator|&&
name|curTransformFeedback
operator|->
name|isStarted
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindIndexedTransformFeedbackBuffer
argument_list|(
name|buffer
argument_list|,
name|index
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|context
operator|->
name|bindGenericTransformFeedbackBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|GL_UNIFORM_BUFFER
case|:
name|context
operator|->
name|bindIndexedUniformBuffer
argument_list|(
name|buffer
argument_list|,
name|index
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|context
operator|->
name|bindGenericUniformBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|TransformFeedbackVaryings
name|void
name|GL_APIENTRY
name|TransformFeedbackVaryings
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLchar
modifier|*
specifier|const
modifier|*
name|varyings
parameter_list|,
name|GLenum
name|bufferMode
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLsizei count = %d, const GLchar* const* varyings = 0x%0.8p, GLenum bufferMode = 0x%X)"
argument_list|,
name|program
argument_list|,
name|count
argument_list|,
name|varyings
argument_list|,
name|bufferMode
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|bufferMode
condition|)
block|{
case|case
name|GL_INTERLEAVED_ATTRIBS
case|:
break|break;
case|case
name|GL_SEPARATE_ATTRIBS
case|:
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|count
argument_list|)
operator|>
name|caps
operator|.
name|maxTransformFeedbackSeparateAttributes
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
name|programObject
operator|->
name|setTransformFeedbackVaryings
argument_list|(
name|count
argument_list|,
name|varyings
argument_list|,
name|bufferMode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetTransformFeedbackVarying
name|void
name|GL_APIENTRY
name|GetTransformFeedbackVarying
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLsizei
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLuint index = %u, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, "
literal|"GLsizei* size = 0x%0.8p, GLenum* type = 0x%0.8p, GLchar* name = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|index
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|bufSize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|programObject
operator|->
name|getTransformFeedbackVaryingCount
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|programObject
operator|->
name|getTransformFeedbackVarying
argument_list|(
name|index
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|VertexAttribIPointer
name|void
name|GL_APIENTRY
name|VertexAttribIPointer
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLsizei
name|stride
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pointer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, GLint size = %d, GLenum type = 0x%X, GLsizei stride = %d, const GLvoid* pointer = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|stride
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|size
argument_list|<
literal|1
operator|||
name|size
argument_list|>
literal|4
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_BYTE
case|:
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_SHORT
case|:
case|case
name|GL_UNSIGNED_SHORT
case|:
case|case
name|GL_INT
case|:
case|case
name|GL_UNSIGNED_INT
case|:
case|case
name|GL_INT_2_10_10_10_REV
case|:
case|case
name|GL_UNSIGNED_INT_2_10_10_10_REV
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|stride
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|(
name|type
operator|==
name|GL_INT_2_10_10_10_REV
operator|||
name|type
operator|==
name|GL_UNSIGNED_INT_2_10_10_10_REV
operator|)
operator|&&
name|size
operator|!=
literal|4
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// [OpenGL ES 3.0.2] Section 2.8 page 24:
comment|// An INVALID_OPERATION error is generated when a non-zero vertex array object
comment|// is bound, zero is bound to the ARRAY_BUFFER buffer object binding point,
comment|// and the pointer argument is not NULL.
if|if
condition|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexArray
argument_list|()
operator|->
name|id
argument_list|()
operator|!=
literal|0
operator|&&
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getArrayBufferId
argument_list|()
operator|==
literal|0
operator|&&
name|pointer
operator|!=
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribState
argument_list|(
name|index
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|GL_ARRAY_BUFFER
argument_list|)
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|stride
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetVertexAttribIiv
name|void
name|GL_APIENTRY
name|GetVertexAttribIiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateGetVertexAttribParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pname
operator|==
name|GL_CURRENT_VERTEX_ATTRIB
condition|)
block|{
specifier|const
name|VertexAttribCurrentValueData
modifier|&
name|currentValueData
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexAttribCurrentValue
argument_list|(
name|index
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|currentValueData
operator|.
name|IntValues
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|VertexAttribute
modifier|&
name|attribState
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexArray
argument_list|()
operator|->
name|getVertexAttribute
argument_list|(
name|index
argument_list|)
decl_stmt|;
operator|*
name|params
operator|=
name|QuerySingleVertexAttributeParameter
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|attribState
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|GetVertexAttribIuiv
name|void
name|GL_APIENTRY
name|GetVertexAttribIuiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLuint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, GLenum pname = 0x%X, GLuint* params = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateGetVertexAttribParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pname
operator|==
name|GL_CURRENT_VERTEX_ATTRIB
condition|)
block|{
specifier|const
name|VertexAttribCurrentValueData
modifier|&
name|currentValueData
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexAttribCurrentValue
argument_list|(
name|index
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|currentValueData
operator|.
name|UnsignedIntValues
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|VertexAttribute
modifier|&
name|attribState
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexArray
argument_list|()
operator|->
name|getVertexAttribute
argument_list|(
name|index
argument_list|)
decl_stmt|;
operator|*
name|params
operator|=
name|QuerySingleVertexAttributeParameter
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|attribState
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|VertexAttribI4i
name|void
name|GL_APIENTRY
name|VertexAttribI4i
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|,
name|GLint
name|w
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, GLint x = %d, GLint y = %d, GLint z = %d, GLint w = %d)"
argument_list|,
name|index
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLint
name|vals
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
name|w
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribi
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|VertexAttribI4ui
name|void
name|GL_APIENTRY
name|VertexAttribI4ui
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLuint
name|x
parameter_list|,
name|GLuint
name|y
parameter_list|,
name|GLuint
name|z
parameter_list|,
name|GLuint
name|w
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, GLuint x = %u, GLuint y = %u, GLuint z = %u, GLuint w = %u)"
argument_list|,
name|index
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLuint
name|vals
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
name|w
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribu
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|VertexAttribI4iv
name|void
name|GL_APIENTRY
name|VertexAttribI4iv
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, const GLint* v = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribi
argument_list|(
name|index
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|VertexAttribI4uiv
name|void
name|GL_APIENTRY
name|VertexAttribI4uiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, const GLuint* v = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribu
argument_list|(
name|index
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetUniformuiv
name|void
name|GL_APIENTRY
name|GetUniformuiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLuint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLint location = %d, GLuint* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetUniformuiv
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
name|programObject
operator|->
name|getUniformuiv
argument_list|(
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetFragDataLocation
name|GLint
name|GL_APIENTRY
name|GetFragDataLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, const GLchar *name = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|program
operator|==
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
operator|||
operator|!
name|programObject
operator|->
name|isLinked
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|programObject
operator|->
name|getFragDataLocation
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|Uniform1ui
name|void
name|GL_APIENTRY
name|Uniform1ui
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|)
block|{
name|Uniform1uiv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
operator|&
name|v0
argument_list|)
expr_stmt|;
block|}
DECL|function|Uniform2ui
name|void
name|GL_APIENTRY
name|Uniform2ui
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|,
name|GLuint
name|v1
parameter_list|)
block|{
specifier|const
name|GLuint
name|xy
index|[]
init|=
block|{
name|v0
block|,
name|v1
block|}
decl_stmt|;
name|Uniform2uiv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xy
argument_list|)
expr_stmt|;
block|}
DECL|function|Uniform3ui
name|void
name|GL_APIENTRY
name|Uniform3ui
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|,
name|GLuint
name|v1
parameter_list|,
name|GLuint
name|v2
parameter_list|)
block|{
specifier|const
name|GLuint
name|xyz
index|[]
init|=
block|{
name|v0
block|,
name|v1
block|,
name|v2
block|}
decl_stmt|;
name|Uniform3uiv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xyz
argument_list|)
expr_stmt|;
block|}
DECL|function|Uniform4ui
name|void
name|GL_APIENTRY
name|Uniform4ui
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|,
name|GLuint
name|v1
parameter_list|,
name|GLuint
name|v2
parameter_list|,
name|GLuint
name|v3
parameter_list|)
block|{
specifier|const
name|GLuint
name|xyzw
index|[]
init|=
block|{
name|v0
block|,
name|v1
block|,
name|v2
block|,
name|v3
block|}
decl_stmt|;
name|Uniform4uiv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xyzw
argument_list|)
expr_stmt|;
block|}
DECL|function|Uniform1uiv
name|void
name|GL_APIENTRY
name|Uniform1uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLuint* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniform1uiv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|Uniform2uiv
name|void
name|GL_APIENTRY
name|Uniform2uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLuint* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_UNSIGNED_INT_VEC2
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniform2uiv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|Uniform3uiv
name|void
name|GL_APIENTRY
name|Uniform3uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLuint* value)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_UNSIGNED_INT_VEC3
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniform3uiv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|Uniform4uiv
name|void
name|GL_APIENTRY
name|Uniform4uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLuint* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_UNSIGNED_INT_VEC4
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|Program
modifier|*
name|program
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getProgram
argument_list|()
decl_stmt|;
name|program
operator|->
name|setUniform4uiv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|ClearBufferiv
name|void
name|GL_APIENTRY
name|ClearBufferiv
parameter_list|(
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum buffer = 0x%X, GLint drawbuffer = %d, const GLint* value = 0x%0.8p)"
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateClearBuffer
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|buffer
condition|)
block|{
case|case
name|GL_COLOR
case|:
if|if
condition|(
name|drawbuffer
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|drawbuffer
argument_list|)
operator|>=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxDrawBuffers
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_STENCIL
case|:
if|if
condition|(
name|drawbuffer
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Framebuffer
modifier|*
name|framebufferObject
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|framebufferObject
argument_list|)
expr_stmt|;
name|Error
name|error
init|=
name|framebufferObject
operator|->
name|clearBufferiv
argument_list|(
name|context
operator|->
name|getState
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|ClearBufferuiv
name|void
name|GL_APIENTRY
name|ClearBufferuiv
parameter_list|(
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum buffer = 0x%X, GLint drawbuffer = %d, const GLuint* value = 0x%0.8p)"
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateClearBuffer
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|buffer
condition|)
block|{
case|case
name|GL_COLOR
case|:
if|if
condition|(
name|drawbuffer
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|drawbuffer
argument_list|)
operator|>=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxDrawBuffers
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Framebuffer
modifier|*
name|framebufferObject
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|framebufferObject
argument_list|)
expr_stmt|;
name|Error
name|error
init|=
name|framebufferObject
operator|->
name|clearBufferuiv
argument_list|(
name|context
operator|->
name|getState
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|ClearBufferfv
name|void
name|GL_APIENTRY
name|ClearBufferfv
parameter_list|(
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum buffer = 0x%X, GLint drawbuffer = %d, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateClearBuffer
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|buffer
condition|)
block|{
case|case
name|GL_COLOR
case|:
if|if
condition|(
name|drawbuffer
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|drawbuffer
argument_list|)
operator|>=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxDrawBuffers
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_DEPTH
case|:
if|if
condition|(
name|drawbuffer
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Framebuffer
modifier|*
name|framebufferObject
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|framebufferObject
argument_list|)
expr_stmt|;
name|Error
name|error
init|=
name|framebufferObject
operator|->
name|clearBufferfv
argument_list|(
name|context
operator|->
name|getState
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|ClearBufferfi
name|void
name|GL_APIENTRY
name|ClearBufferfi
parameter_list|(
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
name|GLfloat
name|depth
parameter_list|,
name|GLint
name|stencil
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum buffer = 0x%X, GLint drawbuffer = %d, GLfloat depth, GLint stencil = %d)"
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|depth
argument_list|,
name|stencil
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateClearBuffer
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|buffer
condition|)
block|{
case|case
name|GL_DEPTH_STENCIL
case|:
if|if
condition|(
name|drawbuffer
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Framebuffer
modifier|*
name|framebufferObject
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|framebufferObject
argument_list|)
expr_stmt|;
name|Error
name|error
init|=
name|framebufferObject
operator|->
name|clearBufferfi
argument_list|(
name|context
operator|->
name|getState
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|depth
argument_list|,
name|stencil
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetStringi
specifier|const
name|GLubyte
modifier|*
name|GL_APIENTRY
name|GetStringi
parameter_list|(
name|GLenum
name|name
parameter_list|,
name|GLuint
name|index
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum name = 0x%X, GLuint index = %u)"
argument_list|,
name|name
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|name
operator|!=
name|GL_EXTENSIONS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|index
operator|>=
name|context
operator|->
name|getExtensionStringCount
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
name|context
operator|->
name|getExtensionString
argument_list|(
name|index
argument_list|)
operator|.
name|c_str
argument_list|()
argument_list|)
return|;
block|}
return|return
name|NULL
return|;
block|}
DECL|function|CopyBufferSubData
name|void
name|GL_APIENTRY
name|CopyBufferSubData
parameter_list|(
name|GLenum
name|readTarget
parameter_list|,
name|GLenum
name|writeTarget
parameter_list|,
name|GLintptr
name|readOffset
parameter_list|,
name|GLintptr
name|writeOffset
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum readTarget = 0x%X, GLenum writeTarget = 0x%X, GLintptr readOffset = %d, GLintptr writeOffset = %d, GLsizeiptr size = %d)"
argument_list|,
name|readTarget
argument_list|,
name|writeTarget
argument_list|,
name|readOffset
argument_list|,
name|writeOffset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|readTarget
argument_list|)
operator|||
operator|!
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|writeTarget
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Buffer
modifier|*
name|readBuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|readTarget
argument_list|)
decl_stmt|;
name|Buffer
modifier|*
name|writeBuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|writeTarget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|readBuffer
operator|||
operator|!
name|writeBuffer
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Verify that readBuffer and writeBuffer are not currently mapped
if|if
condition|(
name|readBuffer
operator|->
name|isMapped
argument_list|()
operator|||
name|writeBuffer
operator|->
name|isMapped
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|readOffset
operator|<
literal|0
operator|||
name|writeOffset
operator|<
literal|0
operator|||
name|size
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|readOffset
operator|+
name|size
argument_list|)
operator|>
name|readBuffer
operator|->
name|getSize
argument_list|()
operator|||
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|writeOffset
operator|+
name|size
argument_list|)
operator|>
name|writeBuffer
operator|->
name|getSize
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|readBuffer
operator|==
name|writeBuffer
operator|&&
name|std
operator|::
name|abs
argument_list|(
name|readOffset
operator|-
name|writeOffset
argument_list|)
operator|<
name|size
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// if size is zero, the copy is a successful no-op
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|Error
name|error
init|=
name|writeBuffer
operator|->
name|copyBufferSubData
argument_list|(
name|readBuffer
argument_list|,
name|readOffset
argument_list|,
name|writeOffset
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
DECL|function|GetUniformIndices
name|void
name|GL_APIENTRY
name|GetUniformIndices
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|uniformCount
parameter_list|,
specifier|const
name|GLchar
modifier|*
specifier|const
modifier|*
name|uniformNames
parameter_list|,
name|GLuint
modifier|*
name|uniformIndices
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLsizei uniformCount = %d, const GLchar* const* uniformNames = 0x%0.8p, GLuint* uniformIndices = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|uniformCount
argument_list|,
name|uniformNames
argument_list|,
name|uniformIndices
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|uniformCount
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|programObject
operator|->
name|isLinked
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|uniformId
init|=
literal|0
init|;
name|uniformId
operator|<
name|uniformCount
condition|;
name|uniformId
operator|++
control|)
block|{
name|uniformIndices
index|[
name|uniformId
index|]
operator|=
name|GL_INVALID_INDEX
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|uniformId
init|=
literal|0
init|;
name|uniformId
operator|<
name|uniformCount
condition|;
name|uniformId
operator|++
control|)
block|{
name|uniformIndices
index|[
name|uniformId
index|]
operator|=
name|programObject
operator|->
name|getUniformIndex
argument_list|(
name|uniformNames
index|[
name|uniformId
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|GetActiveUniformsiv
name|void
name|GL_APIENTRY
name|GetActiveUniformsiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|uniformCount
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|uniformIndices
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLsizei uniformCount = %d, const GLuint* uniformIndices = 0x%0.8p, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|uniformCount
argument_list|,
name|uniformIndices
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|uniformCount
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_UNIFORM_TYPE
case|:
case|case
name|GL_UNIFORM_SIZE
case|:
case|case
name|GL_UNIFORM_NAME_LENGTH
case|:
case|case
name|GL_UNIFORM_BLOCK_INDEX
case|:
case|case
name|GL_UNIFORM_OFFSET
case|:
case|case
name|GL_UNIFORM_ARRAY_STRIDE
case|:
case|case
name|GL_UNIFORM_MATRIX_STRIDE
case|:
case|case
name|GL_UNIFORM_IS_ROW_MAJOR
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|uniformCount
operator|>
name|programObject
operator|->
name|getActiveUniformCount
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|uniformId
init|=
literal|0
init|;
name|uniformId
operator|<
name|uniformCount
condition|;
name|uniformId
operator|++
control|)
block|{
specifier|const
name|GLuint
name|index
init|=
name|uniformIndices
index|[
name|uniformId
index|]
decl_stmt|;
if|if
condition|(
name|index
operator|>=
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|programObject
operator|->
name|getActiveUniformCount
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
for|for
control|(
name|int
name|uniformId
init|=
literal|0
init|;
name|uniformId
operator|<
name|uniformCount
condition|;
name|uniformId
operator|++
control|)
block|{
specifier|const
name|GLuint
name|index
init|=
name|uniformIndices
index|[
name|uniformId
index|]
decl_stmt|;
name|params
index|[
name|uniformId
index|]
operator|=
name|programObject
operator|->
name|getActiveUniformi
argument_list|(
name|index
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|GetUniformBlockIndex
name|GLuint
name|GL_APIENTRY
name|GetUniformBlockIndex
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|uniformBlockName
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, const GLchar* uniformBlockName = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|uniformBlockName
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_INVALID_INDEX
return|;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_INVALID_INDEX
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_INVALID_INDEX
return|;
block|}
block|}
return|return
name|programObject
operator|->
name|getUniformBlockIndex
argument_list|(
name|uniformBlockName
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|GetActiveUniformBlockiv
name|void
name|GL_APIENTRY
name|GetActiveUniformBlockiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|uniformBlockIndex
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLuint uniformBlockIndex = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|uniformBlockIndex
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|uniformBlockIndex
operator|>=
name|programObject
operator|->
name|getActiveUniformBlockCount
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_UNIFORM_BLOCK_BINDING
case|:
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|programObject
operator|->
name|getUniformBlockBinding
argument_list|(
name|uniformBlockIndex
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_UNIFORM_BLOCK_DATA_SIZE
case|:
case|case
name|GL_UNIFORM_BLOCK_NAME_LENGTH
case|:
case|case
name|GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
case|:
case|case
name|GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
case|:
case|case
name|GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
case|:
case|case
name|GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
case|:
name|programObject
operator|->
name|getActiveUniformBlockiv
argument_list|(
name|uniformBlockIndex
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetActiveUniformBlockName
name|void
name|GL_APIENTRY
name|GetActiveUniformBlockName
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|uniformBlockIndex
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|uniformBlockName
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLuint uniformBlockIndex = %u, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, GLchar* uniformBlockName = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|uniformBlockIndex
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|uniformBlockName
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|uniformBlockIndex
operator|>=
name|programObject
operator|->
name|getActiveUniformBlockCount
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|programObject
operator|->
name|getActiveUniformBlockName
argument_list|(
name|uniformBlockIndex
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|uniformBlockName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|UniformBlockBinding
name|void
name|GL_APIENTRY
name|UniformBlockBinding
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|uniformBlockIndex
parameter_list|,
name|GLuint
name|uniformBlockBinding
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLuint uniformBlockIndex = %u, GLuint uniformBlockBinding = %u)"
argument_list|,
name|program
argument_list|,
name|uniformBlockIndex
argument_list|,
name|uniformBlockBinding
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|uniformBlockBinding
operator|>=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxUniformBufferBindings
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// if never linked, there won't be any uniform blocks
if|if
condition|(
name|uniformBlockIndex
operator|>=
name|programObject
operator|->
name|getActiveUniformBlockCount
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|programObject
operator|->
name|bindUniformBlock
argument_list|(
name|uniformBlockIndex
argument_list|,
name|uniformBlockBinding
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|DrawArraysInstanced
name|void
name|GL_APIENTRY
name|DrawArraysInstanced
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLint
name|first
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instanceCount
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X, GLint first = %d, GLsizei count = %d, GLsizei instanceCount = %d)"
argument_list|,
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
name|instanceCount
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateDrawArraysInstanced
argument_list|(
name|context
argument_list|,
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
name|instanceCount
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|drawArrays
argument_list|(
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
name|instanceCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|DrawElementsInstanced
name|void
name|GL_APIENTRY
name|DrawElementsInstanced
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|,
name|GLsizei
name|instanceCount
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X, GLsizei count = %d, GLenum type = 0x%X, const GLvoid* indices = 0x%0.8p, GLsizei instanceCount = %d)"
argument_list|,
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
name|instanceCount
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|rx
operator|::
name|RangeUI
name|indexRange
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateDrawElementsInstanced
argument_list|(
name|context
argument_list|,
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
name|instanceCount
argument_list|,
operator|&
name|indexRange
argument_list|)
condition|)
block|{
return|return;
block|}
name|Error
name|error
init|=
name|context
operator|->
name|drawElements
argument_list|(
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
name|instanceCount
argument_list|,
name|indexRange
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|FenceSync_
name|GLsync
name|GL_APIENTRY
name|FenceSync_
parameter_list|(
name|GLenum
name|condition
parameter_list|,
name|GLbitfield
name|flags
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum condition = 0x%X, GLbitfield flags = 0x%X)"
argument_list|,
name|condition
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|condition
operator|!=
name|GL_SYNC_GPU_COMMANDS_COMPLETE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|flags
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|GLsync
name|fenceSync
init|=
name|context
operator|->
name|createFenceSync
argument_list|()
decl_stmt|;
name|FenceSync
modifier|*
name|fenceSyncObject
init|=
name|context
operator|->
name|getFenceSync
argument_list|(
name|fenceSync
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|fenceSyncObject
operator|->
name|set
argument_list|(
name|condition
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|deleteFenceSync
argument_list|(
name|fenceSync
argument_list|)
expr_stmt|;
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|fenceSync
return|;
block|}
return|return
name|NULL
return|;
block|}
DECL|function|IsSync
name|GLboolean
name|GL_APIENTRY
name|IsSync
parameter_list|(
name|GLsync
name|sync
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsync sync = 0x%0.8p)"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
return|return
operator|(
name|context
operator|->
name|getFenceSync
argument_list|(
name|sync
argument_list|)
operator|!=
name|NULL
operator|)
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|DeleteSync
name|void
name|GL_APIENTRY
name|DeleteSync
parameter_list|(
name|GLsync
name|sync
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsync sync = 0x%0.8p)"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|sync
operator|!=
cast|static_cast
argument_list|<
name|GLsync
argument_list|>
argument_list|(
literal|0
argument_list|)
operator|&&
operator|!
name|context
operator|->
name|getFenceSync
argument_list|(
name|sync
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|deleteFenceSync
argument_list|(
name|sync
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|ClientWaitSync
name|GLenum
name|GL_APIENTRY
name|ClientWaitSync
parameter_list|(
name|GLsync
name|sync
parameter_list|,
name|GLbitfield
name|flags
parameter_list|,
name|GLuint64
name|timeout
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsync sync = 0x%0.8p, GLbitfield flags = 0x%X, GLuint64 timeout = %llu)"
argument_list|,
name|sync
argument_list|,
name|flags
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_WAIT_FAILED
return|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
operator|~
operator|(
name|GL_SYNC_FLUSH_COMMANDS_BIT
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_WAIT_FAILED
return|;
block|}
name|FenceSync
modifier|*
name|fenceSync
init|=
name|context
operator|->
name|getFenceSync
argument_list|(
name|sync
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fenceSync
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_WAIT_FAILED
return|;
block|}
name|GLenum
name|result
init|=
name|GL_WAIT_FAILED
decl_stmt|;
name|Error
name|error
init|=
name|fenceSync
operator|->
name|clientWait
argument_list|(
name|flags
argument_list|,
name|timeout
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|GL_WAIT_FAILED
return|;
block|}
return|return
name|result
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|WaitSync
name|void
name|GL_APIENTRY
name|WaitSync
parameter_list|(
name|GLsync
name|sync
parameter_list|,
name|GLbitfield
name|flags
parameter_list|,
name|GLuint64
name|timeout
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsync sync = 0x%0.8p, GLbitfield flags = 0x%X, GLuint64 timeout = %llu)"
argument_list|,
name|sync
argument_list|,
name|flags
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|flags
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|timeout
operator|!=
name|GL_TIMEOUT_IGNORED
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|FenceSync
modifier|*
name|fenceSync
init|=
name|context
operator|->
name|getFenceSync
argument_list|(
name|sync
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fenceSync
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Error
name|error
init|=
name|fenceSync
operator|->
name|serverWait
argument_list|(
name|flags
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|GetInteger64v
name|void
name|GL_APIENTRY
name|GetInteger64v
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLint64
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum pname = 0x%X, GLint64* params = 0x%0.8p)"
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLenum
name|nativeType
decl_stmt|;
name|unsigned
name|int
name|numParams
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateStateQuery
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
operator|&
name|nativeType
argument_list|,
operator|&
name|numParams
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nativeType
operator|==
name|GL_INT_64_ANGLEX
condition|)
block|{
name|context
operator|->
name|getInteger64v
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CastStateValues
argument_list|(
name|context
argument_list|,
name|nativeType
argument_list|,
name|pname
argument_list|,
name|numParams
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|GetSynciv
name|void
name|GL_APIENTRY
name|GetSynciv
parameter_list|(
name|GLsync
name|sync
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|values
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsync sync = 0x%0.8p, GLenum pname = 0x%X, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, GLint* values = 0x%0.8p)"
argument_list|,
name|sync
argument_list|,
name|pname
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|bufSize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|FenceSync
modifier|*
name|fenceSync
init|=
name|context
operator|->
name|getFenceSync
argument_list|(
name|sync
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fenceSync
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_OBJECT_TYPE
case|:
name|values
index|[
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|GL_SYNC_FENCE
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_SYNC_CONDITION
case|:
name|values
index|[
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|fenceSync
operator|->
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_SYNC_FLAGS
case|:
name|values
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|GL_SYNC_STATUS
case|:
block|{
name|Error
name|error
init|=
name|fenceSync
operator|->
name|getStatus
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
block|}
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetInteger64i_v
name|void
name|GL_APIENTRY
name|GetInteger64i_v
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLint64
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint index = %u, GLint64* data = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|index
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_START
case|:
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
case|:
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxTransformFeedbackSeparateAttributes
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_UNIFORM_BUFFER_START
case|:
case|case
name|GL_UNIFORM_BUFFER_SIZE
case|:
case|case
name|GL_UNIFORM_BUFFER_BINDING
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxUniformBufferBindings
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|context
operator|->
name|getIndexedInteger64v
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|data
argument_list|)
operator|)
condition|)
block|{
name|GLenum
name|nativeType
decl_stmt|;
name|unsigned
name|int
name|numParams
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|->
name|getIndexedQueryParameterInfo
argument_list|(
name|target
argument_list|,
operator|&
name|nativeType
argument_list|,
operator|&
name|numParams
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|numParams
operator|==
literal|0
condition|)
return|return;
comment|// it is known that pname is valid, but there are no parameters to return
if|if
condition|(
name|nativeType
operator|==
name|GL_INT
condition|)
block|{
name|GLint
modifier|*
name|intParams
init|=
operator|new
name|GLint
index|[
name|numParams
index|]
decl_stmt|;
name|context
operator|->
name|getIndexedIntegerv
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|intParams
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParams
condition|;
operator|++
name|i
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|intParams
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|intParams
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|GetBufferParameteri64v
name|void
name|GL_APIENTRY
name|GetBufferParameteri64v
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint64
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLint64* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidBufferParameter
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buffer
condition|)
block|{
comment|// A null buffer means that "0" is bound to the requested buffer target
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_BUFFER_USAGE
case|:
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|buffer
operator|->
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_SIZE
case|:
operator|*
name|params
operator|=
name|buffer
operator|->
name|getSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_ACCESS_FLAGS
case|:
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|buffer
operator|->
name|getAccessFlags
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_MAPPED
case|:
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|buffer
operator|->
name|isMapped
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_MAP_OFFSET
case|:
operator|*
name|params
operator|=
name|buffer
operator|->
name|getMapOffset
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_MAP_LENGTH
case|:
operator|*
name|params
operator|=
name|buffer
operator|->
name|getMapLength
argument_list|()
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|function|GenSamplers
name|void
name|GL_APIENTRY
name|GenSamplers
parameter_list|(
name|GLsizei
name|count
parameter_list|,
name|GLuint
modifier|*
name|samplers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei count = %d, GLuint* samplers = 0x%0.8p)"
argument_list|,
name|count
argument_list|,
name|samplers
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|samplers
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createSampler
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|DeleteSamplers
name|void
name|GL_APIENTRY
name|DeleteSamplers
parameter_list|(
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|samplers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei count = %d, const GLuint* samplers = 0x%0.8p)"
argument_list|,
name|count
argument_list|,
name|samplers
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|->
name|deleteSampler
argument_list|(
name|samplers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|IsSampler
name|GLboolean
name|GL_APIENTRY
name|IsSampler
parameter_list|(
name|GLuint
name|sampler
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint sampler = %u)"
argument_list|,
name|sampler
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
return|return
name|context
operator|->
name|isSampler
argument_list|(
name|sampler
argument_list|)
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|BindSampler
name|void
name|GL_APIENTRY
name|BindSampler
parameter_list|(
name|GLuint
name|unit
parameter_list|,
name|GLuint
name|sampler
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint unit = %u, GLuint sampler = %u)"
argument_list|,
name|unit
argument_list|,
name|sampler
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|sampler
operator|!=
literal|0
operator|&&
operator|!
name|context
operator|->
name|isSampler
argument_list|(
name|sampler
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|unit
operator|>=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxCombinedTextureImageUnits
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindSampler
argument_list|(
name|unit
argument_list|,
name|sampler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|SamplerParameteri
name|void
name|GL_APIENTRY
name|SamplerParameteri
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
name|param
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint sampler = %u, GLenum pname = 0x%X, GLint param = %d)"
argument_list|,
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateSamplerObjectParameter
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateTexParamParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|isSampler
argument_list|(
name|sampler
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|samplerParameteri
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|SamplerParameteriv
name|void
name|GL_APIENTRY
name|SamplerParameteriv
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
specifier|const
name|GLint
modifier|*
name|param
parameter_list|)
block|{
name|SamplerParameteri
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
operator|*
name|param
argument_list|)
expr_stmt|;
block|}
DECL|function|SamplerParameterf
name|void
name|GL_APIENTRY
name|SamplerParameterf
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
name|param
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint sampler = %u, GLenum pname = 0x%X, GLfloat param = %g)"
argument_list|,
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateSamplerObjectParameter
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateTexParamParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|isSampler
argument_list|(
name|sampler
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|samplerParameterf
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|SamplerParameterfv
name|void
name|GL_APIENTRY
name|SamplerParameterfv
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|param
parameter_list|)
block|{
name|SamplerParameterf
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
operator|*
name|param
argument_list|)
expr_stmt|;
block|}
DECL|function|GetSamplerParameteriv
name|void
name|GL_APIENTRY
name|GetSamplerParameteriv
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint sampler = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|sampler
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateSamplerObjectParameter
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|isSampler
argument_list|(
name|sampler
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|context
operator|->
name|getSamplerParameteri
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|GetSamplerParameterfv
name|void
name|GL_APIENTRY
name|GetSamplerParameterfv
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint sample = %ur, GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)"
argument_list|,
name|sampler
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateSamplerObjectParameter
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|isSampler
argument_list|(
name|sampler
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|context
operator|->
name|getSamplerParameterf
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|VertexAttribDivisor
name|void
name|GL_APIENTRY
name|VertexAttribDivisor
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLuint
name|divisor
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, GLuint divisor = %u)"
argument_list|,
name|index
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|setVertexAttribDivisor
argument_list|(
name|index
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|BindTransformFeedback
name|void
name|GL_APIENTRY
name|BindTransformFeedback
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint id = %u)"
argument_list|,
name|target
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TRANSFORM_FEEDBACK
case|:
block|{
comment|// Cannot bind a transform feedback object if the current one is started and not paused (3.0.2 pg 85 section 2.14.1)
name|TransformFeedback
modifier|*
name|curTransformFeedback
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentTransformFeedback
argument_list|()
decl_stmt|;
if|if
condition|(
name|curTransformFeedback
operator|&&
name|curTransformFeedback
operator|->
name|isStarted
argument_list|()
operator|&&
operator|!
name|curTransformFeedback
operator|->
name|isPaused
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Cannot bind a transform feedback object that does not exist (3.0.2 pg 85 section 2.14.1)
if|if
condition|(
name|context
operator|->
name|getTransformFeedback
argument_list|(
name|id
argument_list|)
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindTransformFeedback
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|DeleteTransformFeedbacks
name|void
name|GL_APIENTRY
name|DeleteTransformFeedbacks
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* ids = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|->
name|deleteTransformFeedback
argument_list|(
name|ids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|GenTransformFeedbacks
name|void
name|GL_APIENTRY
name|GenTransformFeedbacks
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* ids = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ids
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createTransformFeedback
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|IsTransformFeedback
name|GLboolean
name|GL_APIENTRY
name|IsTransformFeedback
parameter_list|(
name|GLuint
name|id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint id = %u)"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
return|return
operator|(
operator|(
name|context
operator|->
name|getTransformFeedback
argument_list|(
name|id
argument_list|)
operator|!=
name|NULL
operator|)
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
operator|)
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|PauseTransformFeedback
name|void
name|GL_APIENTRY
name|PauseTransformFeedback
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(void)"
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|TransformFeedback
modifier|*
name|transformFeedback
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentTransformFeedback
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|transformFeedback
operator|!=
name|NULL
argument_list|)
expr_stmt|;
comment|// Current transform feedback must be started and not paused in order to pause (3.0.2 pg 86)
if|if
condition|(
operator|!
name|transformFeedback
operator|->
name|isStarted
argument_list|()
operator|||
name|transformFeedback
operator|->
name|isPaused
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|transformFeedback
operator|->
name|pause
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|ResumeTransformFeedback
name|void
name|GL_APIENTRY
name|ResumeTransformFeedback
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(void)"
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|TransformFeedback
modifier|*
name|transformFeedback
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentTransformFeedback
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|transformFeedback
operator|!=
name|NULL
argument_list|)
expr_stmt|;
comment|// Current transform feedback must be started and paused in order to resume (3.0.2 pg 86)
if|if
condition|(
operator|!
name|transformFeedback
operator|->
name|isStarted
argument_list|()
operator|||
operator|!
name|transformFeedback
operator|->
name|isPaused
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|transformFeedback
operator|->
name|resume
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|GetProgramBinary
name|void
name|GL_APIENTRY
name|GetProgramBinary
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLenum
modifier|*
name|binaryFormat
parameter_list|,
name|GLvoid
modifier|*
name|binary
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, GLenum* binaryFormat = 0x%0.8p, GLvoid* binary = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// TODO: Pipe through to the OES extension for now, needs proper validation
return|return
name|GetProgramBinaryOES
argument_list|(
name|program
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|)
return|;
block|}
block|}
DECL|function|ProgramBinary
name|void
name|GL_APIENTRY
name|ProgramBinary
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|binaryFormat
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|binary
parameter_list|,
name|GLsizei
name|length
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLenum binaryFormat = 0x%X, const GLvoid* binary = 0x%0.8p, GLsizei length = %d)"
argument_list|,
name|program
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// TODO: Pipe through to the OES extension for now, needs proper validation
return|return
name|ProgramBinaryOES
argument_list|(
name|program
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
DECL|function|ProgramParameteri
name|void
name|GL_APIENTRY
name|ProgramParameteri
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLenum pname = 0x%X, GLint value = %d)"
argument_list|,
name|program
argument_list|,
name|pname
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// glProgramParameteri
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|InvalidateFramebuffer
name|void
name|GL_APIENTRY
name|InvalidateFramebuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|numAttachments
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei numAttachments = %d, const GLenum* attachments = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateInvalidateFramebufferParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|)
condition|)
block|{
return|return;
block|}
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetFramebuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|framebuffer
operator|->
name|checkStatus
argument_list|(
name|context
operator|->
name|getData
argument_list|()
argument_list|)
operator|==
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
name|Error
name|error
init|=
name|framebuffer
operator|->
name|invalidate
argument_list|(
name|numAttachments
argument_list|,
name|attachments
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
DECL|function|InvalidateSubFramebuffer
name|void
name|GL_APIENTRY
name|InvalidateSubFramebuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|numAttachments
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei numAttachments = %d, const GLenum* attachments = 0x%0.8p, GLint x = %d, "
literal|"GLint y = %d, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateInvalidateFramebufferParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|)
condition|)
block|{
return|return;
block|}
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetFramebuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|framebuffer
operator|->
name|checkStatus
argument_list|(
name|context
operator|->
name|getData
argument_list|()
argument_list|)
operator|==
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
name|Rectangle
name|area
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|framebuffer
operator|->
name|invalidateSub
argument_list|(
name|numAttachments
argument_list|,
name|attachments
argument_list|,
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
DECL|function|TexStorage2D
name|void
name|GL_APIENTRY
name|TexStorage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei levels = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateES3TexStorageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
condition|)
block|{
return|return;
block|}
name|Extents
name|size
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|texture
operator|->
name|setStorage
argument_list|(
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|TexStorage3D
name|void
name|GL_APIENTRY
name|TexStorage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei levels = %d, GLenum internalformat = 0x%X, GLsizei width = %d, "
literal|"GLsizei height = %d, GLsizei depth = %d)"
argument_list|,
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateES3TexStorageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
condition|)
block|{
return|return;
block|}
name|Extents
name|size
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
decl_stmt|;
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|Error
name|error
init|=
name|texture
operator|->
name|setStorage
argument_list|(
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|GetInternalformativ
name|void
name|GL_APIENTRY
name|GetInternalformativ
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum internalformat = 0x%X, GLenum pname = 0x%X, GLsizei bufSize = %d, "
literal|"GLint* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|internalformat
argument_list|,
name|pname
argument_list|,
name|bufSize
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Context
modifier|*
name|context
init|=
name|GetValidGlobalContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|context
operator|->
name|getTextureCaps
argument_list|()
operator|.
name|get
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|target
operator|!=
name|GL_RENDERBUFFER
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|bufSize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_NUM_SAMPLE_COUNTS
case|:
if|if
condition|(
name|bufSize
operator|!=
literal|0
condition|)
block|{
operator|*
name|params
operator|=
name|formatCaps
operator|.
name|sampleCounts
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_SAMPLES
case|:
block|{
name|size_t
name|returnCount
init|=
name|std
operator|::
name|min
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|bufSize
argument_list|,
name|formatCaps
operator|.
name|sampleCounts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|auto
name|sampleReverseIt
init|=
name|formatCaps
operator|.
name|sampleCounts
operator|.
name|rbegin
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|sampleIndex
init|=
literal|0
init|;
name|sampleIndex
operator|<
name|returnCount
condition|;
operator|++
name|sampleIndex
control|)
block|{
name|params
index|[
name|sampleIndex
index|]
operator|=
operator|*
name|sampleReverseIt
operator|++
expr_stmt|;
empty_stmt|;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
end_namespace
end_unit
