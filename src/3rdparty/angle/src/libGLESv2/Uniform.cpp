begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2010-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Uniform.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/utilities.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|Uniform
name|Uniform
operator|::
name|Uniform
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLenum
name|precision
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|name
parameter_list|,
name|unsigned
name|int
name|arraySize
parameter_list|)
member_init_list|:
name|type
argument_list|(
name|type
argument_list|)
member_init_list|,
name|precision
argument_list|(
name|precision
argument_list|)
member_init_list|,
name|name
argument_list|(
name|name
argument_list|)
member_init_list|,
name|arraySize
argument_list|(
name|arraySize
argument_list|)
block|{
name|int
name|bytes
init|=
name|gl
operator|::
name|UniformInternalSize
argument_list|(
name|type
argument_list|)
operator|*
name|elementCount
argument_list|()
decl_stmt|;
name|data
operator|=
operator|new
name|unsigned
name|char
index|[
name|bytes
index|]
expr_stmt|;
name|memset
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|dirty
operator|=
literal|true
expr_stmt|;
name|psRegisterIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|vsRegisterIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|registerCount
operator|=
name|VariableRowCount
argument_list|(
name|type
argument_list|)
operator|*
name|elementCount
argument_list|()
expr_stmt|;
block|}
DECL|function|~Uniform
name|Uniform
operator|::
name|~
name|Uniform
parameter_list|()
block|{
operator|delete
index|[]
name|data
expr_stmt|;
block|}
DECL|function|isArray
name|bool
name|Uniform
operator|::
name|isArray
parameter_list|()
specifier|const
block|{
return|return
name|arraySize
operator|>
literal|0
return|;
block|}
DECL|function|elementCount
name|unsigned
name|int
name|Uniform
operator|::
name|elementCount
parameter_list|()
specifier|const
block|{
return|return
name|arraySize
operator|>
literal|0
condition|?
name|arraySize
else|:
literal|1
return|;
block|}
block|}
end_namespace
end_unit
