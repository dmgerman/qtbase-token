begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2010-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Uniform.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|LinkedUniform
name|LinkedUniform
operator|::
name|LinkedUniform
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLenum
name|precision
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|name
parameter_list|,
name|unsigned
name|int
name|arraySize
parameter_list|,
specifier|const
name|int
name|blockIndex
parameter_list|,
specifier|const
name|sh
operator|::
name|BlockMemberInfo
modifier|&
name|blockInfo
parameter_list|)
member_init_list|:
name|type
argument_list|(
name|type
argument_list|)
member_init_list|,
name|precision
argument_list|(
name|precision
argument_list|)
member_init_list|,
name|name
argument_list|(
name|name
argument_list|)
member_init_list|,
name|arraySize
argument_list|(
name|arraySize
argument_list|)
member_init_list|,
name|blockIndex
argument_list|(
name|blockIndex
argument_list|)
member_init_list|,
name|blockInfo
argument_list|(
name|blockInfo
argument_list|)
member_init_list|,
name|data
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|dirty
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|psRegisterIndex
argument_list|(
name|GL_INVALID_INDEX
argument_list|)
member_init_list|,
name|vsRegisterIndex
argument_list|(
name|GL_INVALID_INDEX
argument_list|)
member_init_list|,
name|registerCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|registerElement
argument_list|(
literal|0
argument_list|)
block|{
comment|// We use data storage for default block uniforms to cache values that are sent to D3D during rendering
comment|// Uniform blocks/buffers are treated separately by the Renderer (ES3 path only)
if|if
condition|(
name|isInDefaultBlock
argument_list|()
condition|)
block|{
name|size_t
name|bytes
init|=
name|dataSize
argument_list|()
decl_stmt|;
name|data
operator|=
operator|new
name|unsigned
name|char
index|[
name|bytes
index|]
expr_stmt|;
name|memset
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|registerCount
operator|=
name|VariableRowCount
argument_list|(
name|type
argument_list|)
operator|*
name|elementCount
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|~LinkedUniform
name|LinkedUniform
operator|::
name|~
name|LinkedUniform
parameter_list|()
block|{
operator|delete
index|[]
name|data
expr_stmt|;
block|}
DECL|function|isArray
name|bool
name|LinkedUniform
operator|::
name|isArray
parameter_list|()
specifier|const
block|{
return|return
name|arraySize
operator|>
literal|0
return|;
block|}
DECL|function|elementCount
name|unsigned
name|int
name|LinkedUniform
operator|::
name|elementCount
parameter_list|()
specifier|const
block|{
return|return
name|arraySize
operator|>
literal|0
condition|?
name|arraySize
else|:
literal|1
return|;
block|}
DECL|function|isReferencedByVertexShader
name|bool
name|LinkedUniform
operator|::
name|isReferencedByVertexShader
parameter_list|()
specifier|const
block|{
return|return
name|vsRegisterIndex
operator|!=
name|GL_INVALID_INDEX
return|;
block|}
DECL|function|isReferencedByFragmentShader
name|bool
name|LinkedUniform
operator|::
name|isReferencedByFragmentShader
parameter_list|()
specifier|const
block|{
return|return
name|psRegisterIndex
operator|!=
name|GL_INVALID_INDEX
return|;
block|}
DECL|function|isInDefaultBlock
name|bool
name|LinkedUniform
operator|::
name|isInDefaultBlock
parameter_list|()
specifier|const
block|{
return|return
name|blockIndex
operator|==
operator|-
literal|1
return|;
block|}
DECL|function|dataSize
name|size_t
name|LinkedUniform
operator|::
name|dataSize
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|type
operator|!=
name|GL_STRUCT_ANGLEX
argument_list|)
expr_stmt|;
return|return
name|VariableInternalSize
argument_list|(
name|type
argument_list|)
operator|*
name|elementCount
argument_list|()
return|;
block|}
DECL|function|isSampler
name|bool
name|LinkedUniform
operator|::
name|isSampler
parameter_list|()
specifier|const
block|{
return|return
name|IsSampler
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|function|UniformBlock
name|UniformBlock
operator|::
name|UniformBlock
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|name
parameter_list|,
name|unsigned
name|int
name|elementIndex
parameter_list|,
name|unsigned
name|int
name|dataSize
parameter_list|)
member_init_list|:
name|name
argument_list|(
name|name
argument_list|)
member_init_list|,
name|elementIndex
argument_list|(
name|elementIndex
argument_list|)
member_init_list|,
name|dataSize
argument_list|(
name|dataSize
argument_list|)
member_init_list|,
name|psRegisterIndex
argument_list|(
name|GL_INVALID_INDEX
argument_list|)
member_init_list|,
name|vsRegisterIndex
argument_list|(
name|GL_INVALID_INDEX
argument_list|)
block|{ }
DECL|function|isArrayElement
name|bool
name|UniformBlock
operator|::
name|isArrayElement
parameter_list|()
specifier|const
block|{
return|return
name|elementIndex
operator|!=
name|GL_INVALID_INDEX
return|;
block|}
DECL|function|isReferencedByVertexShader
name|bool
name|UniformBlock
operator|::
name|isReferencedByVertexShader
parameter_list|()
specifier|const
block|{
return|return
name|vsRegisterIndex
operator|!=
name|GL_INVALID_INDEX
return|;
block|}
DECL|function|isReferencedByFragmentShader
name|bool
name|UniformBlock
operator|::
name|isReferencedByFragmentShader
parameter_list|()
specifier|const
block|{
return|return
name|psRegisterIndex
operator|!=
name|GL_INVALID_INDEX
return|;
block|}
block|}
end_namespace
end_unit
