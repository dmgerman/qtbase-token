begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Framebuffer.cpp: Implements the gl::Framebuffer class. Implements GL framebuffer
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4 page 105.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/utilities.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|Framebuffer
name|Framebuffer
operator|::
name|Framebuffer
parameter_list|()
block|{
name|mColorbufferType
operator|=
name|GL_NONE
expr_stmt|;
name|mDepthbufferType
operator|=
name|GL_NONE
expr_stmt|;
name|mStencilbufferType
operator|=
name|GL_NONE
expr_stmt|;
block|}
DECL|function|~Framebuffer
name|Framebuffer
operator|::
name|~
name|Framebuffer
parameter_list|()
block|{
name|mColorbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|mDepthbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|mStencilbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|mNullColorbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
DECL|function|lookupRenderbuffer
name|Renderbuffer
modifier|*
name|Framebuffer
operator|::
name|lookupRenderbuffer
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLuint
name|handle
parameter_list|)
specifier|const
block|{
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getContext
argument_list|()
decl_stmt|;
name|Renderbuffer
modifier|*
name|buffer
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|GL_NONE
condition|)
block|{
name|buffer
operator|=
name|NULL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
name|buffer
operator|=
name|context
operator|->
name|getRenderbuffer
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|IsInternalTextureTarget
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|buffer
operator|=
name|context
operator|->
name|getTexture
argument_list|(
name|handle
argument_list|)
operator|->
name|getRenderbuffer
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
DECL|function|setColorbuffer
name|void
name|Framebuffer
operator|::
name|setColorbuffer
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLuint
name|colorbuffer
parameter_list|)
block|{
name|mColorbufferType
operator|=
operator|(
name|colorbuffer
operator|!=
literal|0
operator|)
condition|?
name|type
else|:
name|GL_NONE
expr_stmt|;
name|mColorbufferPointer
operator|.
name|set
argument_list|(
name|lookupRenderbuffer
argument_list|(
name|type
argument_list|,
name|colorbuffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setDepthbuffer
name|void
name|Framebuffer
operator|::
name|setDepthbuffer
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLuint
name|depthbuffer
parameter_list|)
block|{
name|mDepthbufferType
operator|=
operator|(
name|depthbuffer
operator|!=
literal|0
operator|)
condition|?
name|type
else|:
name|GL_NONE
expr_stmt|;
name|mDepthbufferPointer
operator|.
name|set
argument_list|(
name|lookupRenderbuffer
argument_list|(
name|type
argument_list|,
name|depthbuffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setStencilbuffer
name|void
name|Framebuffer
operator|::
name|setStencilbuffer
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLuint
name|stencilbuffer
parameter_list|)
block|{
name|mStencilbufferType
operator|=
operator|(
name|stencilbuffer
operator|!=
literal|0
operator|)
condition|?
name|type
else|:
name|GL_NONE
expr_stmt|;
name|mStencilbufferPointer
operator|.
name|set
argument_list|(
name|lookupRenderbuffer
argument_list|(
name|type
argument_list|,
name|stencilbuffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|detachTexture
name|void
name|Framebuffer
operator|::
name|detachTexture
parameter_list|(
name|GLuint
name|texture
parameter_list|)
block|{
if|if
condition|(
name|mColorbufferPointer
operator|.
name|id
argument_list|()
operator|==
name|texture
operator|&&
name|IsInternalTextureTarget
argument_list|(
name|mColorbufferType
argument_list|)
condition|)
block|{
name|mColorbufferType
operator|=
name|GL_NONE
expr_stmt|;
name|mColorbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mDepthbufferPointer
operator|.
name|id
argument_list|()
operator|==
name|texture
operator|&&
name|IsInternalTextureTarget
argument_list|(
name|mDepthbufferType
argument_list|)
condition|)
block|{
name|mDepthbufferType
operator|=
name|GL_NONE
expr_stmt|;
name|mDepthbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mStencilbufferPointer
operator|.
name|id
argument_list|()
operator|==
name|texture
operator|&&
name|IsInternalTextureTarget
argument_list|(
name|mStencilbufferType
argument_list|)
condition|)
block|{
name|mStencilbufferType
operator|=
name|GL_NONE
expr_stmt|;
name|mStencilbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|detachRenderbuffer
name|void
name|Framebuffer
operator|::
name|detachRenderbuffer
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
block|{
if|if
condition|(
name|mColorbufferPointer
operator|.
name|id
argument_list|()
operator|==
name|renderbuffer
operator|&&
name|mColorbufferType
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
name|mColorbufferType
operator|=
name|GL_NONE
expr_stmt|;
name|mColorbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mDepthbufferPointer
operator|.
name|id
argument_list|()
operator|==
name|renderbuffer
operator|&&
name|mDepthbufferType
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
name|mDepthbufferType
operator|=
name|GL_NONE
expr_stmt|;
name|mDepthbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mStencilbufferPointer
operator|.
name|id
argument_list|()
operator|==
name|renderbuffer
operator|&&
name|mStencilbufferType
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
name|mStencilbufferType
operator|=
name|GL_NONE
expr_stmt|;
name|mStencilbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getRenderTargetSerial
name|unsigned
name|int
name|Framebuffer
operator|::
name|getRenderTargetSerial
parameter_list|()
block|{
name|Renderbuffer
modifier|*
name|colorbuffer
init|=
name|mColorbufferPointer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|colorbuffer
condition|)
block|{
return|return
name|colorbuffer
operator|->
name|getSerial
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
comment|// Increments refcount on surface.
comment|// caller must Release() the returned surface
DECL|function|getRenderTarget
name|IDirect3DSurface9
modifier|*
name|Framebuffer
operator|::
name|getRenderTarget
parameter_list|()
block|{
name|Renderbuffer
modifier|*
name|colorbuffer
init|=
name|mColorbufferPointer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|colorbuffer
condition|)
block|{
return|return
name|colorbuffer
operator|->
name|getRenderTarget
argument_list|()
return|;
block|}
return|return
name|NULL
return|;
block|}
comment|// Increments refcount on surface.
comment|// caller must Release() the returned surface
DECL|function|getDepthStencil
name|IDirect3DSurface9
modifier|*
name|Framebuffer
operator|::
name|getDepthStencil
parameter_list|()
block|{
name|Renderbuffer
modifier|*
name|depthstencilbuffer
init|=
name|mDepthbufferPointer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|depthstencilbuffer
condition|)
block|{
name|depthstencilbuffer
operator|=
name|mStencilbufferPointer
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|depthstencilbuffer
condition|)
block|{
return|return
name|depthstencilbuffer
operator|->
name|getDepthStencil
argument_list|()
return|;
block|}
return|return
name|NULL
return|;
block|}
DECL|function|getDepthbufferSerial
name|unsigned
name|int
name|Framebuffer
operator|::
name|getDepthbufferSerial
parameter_list|()
block|{
name|Renderbuffer
modifier|*
name|depthbuffer
init|=
name|mDepthbufferPointer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|depthbuffer
condition|)
block|{
return|return
name|depthbuffer
operator|->
name|getSerial
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|getStencilbufferSerial
name|unsigned
name|int
name|Framebuffer
operator|::
name|getStencilbufferSerial
parameter_list|()
block|{
name|Renderbuffer
modifier|*
name|stencilbuffer
init|=
name|mStencilbufferPointer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|stencilbuffer
condition|)
block|{
return|return
name|stencilbuffer
operator|->
name|getSerial
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|getColorbuffer
name|Renderbuffer
modifier|*
name|Framebuffer
operator|::
name|getColorbuffer
parameter_list|()
block|{
return|return
name|mColorbufferPointer
operator|.
name|get
argument_list|()
return|;
block|}
DECL|function|getDepthbuffer
name|Renderbuffer
modifier|*
name|Framebuffer
operator|::
name|getDepthbuffer
parameter_list|()
block|{
return|return
name|mDepthbufferPointer
operator|.
name|get
argument_list|()
return|;
block|}
DECL|function|getStencilbuffer
name|Renderbuffer
modifier|*
name|Framebuffer
operator|::
name|getStencilbuffer
parameter_list|()
block|{
return|return
name|mStencilbufferPointer
operator|.
name|get
argument_list|()
return|;
block|}
DECL|function|getNullColorbuffer
name|Renderbuffer
modifier|*
name|Framebuffer
operator|::
name|getNullColorbuffer
parameter_list|()
block|{
name|Renderbuffer
modifier|*
name|nullbuffer
init|=
name|mNullColorbufferPointer
operator|.
name|get
argument_list|()
decl_stmt|;
name|Renderbuffer
modifier|*
name|depthbuffer
init|=
name|getDepthbuffer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|depthbuffer
condition|)
block|{
name|ERR
argument_list|(
literal|"Unexpected null depthbuffer for depth-only FBO."
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|GLsizei
name|width
init|=
name|depthbuffer
operator|->
name|getWidth
argument_list|()
decl_stmt|;
name|GLsizei
name|height
init|=
name|depthbuffer
operator|->
name|getHeight
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|nullbuffer
operator|||
name|width
operator|!=
name|nullbuffer
operator|->
name|getWidth
argument_list|()
operator|||
name|height
operator|!=
name|nullbuffer
operator|->
name|getHeight
argument_list|()
condition|)
block|{
name|nullbuffer
operator|=
operator|new
name|Renderbuffer
argument_list|(
literal|0
argument_list|,
operator|new
name|Colorbuffer
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|GL_NONE
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mNullColorbufferPointer
operator|.
name|set
argument_list|(
name|nullbuffer
argument_list|)
expr_stmt|;
block|}
return|return
name|nullbuffer
return|;
block|}
DECL|function|getColorbufferType
name|GLenum
name|Framebuffer
operator|::
name|getColorbufferType
parameter_list|()
block|{
return|return
name|mColorbufferType
return|;
block|}
DECL|function|getDepthbufferType
name|GLenum
name|Framebuffer
operator|::
name|getDepthbufferType
parameter_list|()
block|{
return|return
name|mDepthbufferType
return|;
block|}
DECL|function|getStencilbufferType
name|GLenum
name|Framebuffer
operator|::
name|getStencilbufferType
parameter_list|()
block|{
return|return
name|mStencilbufferType
return|;
block|}
DECL|function|getColorbufferHandle
name|GLuint
name|Framebuffer
operator|::
name|getColorbufferHandle
parameter_list|()
block|{
return|return
name|mColorbufferPointer
operator|.
name|id
argument_list|()
return|;
block|}
DECL|function|getDepthbufferHandle
name|GLuint
name|Framebuffer
operator|::
name|getDepthbufferHandle
parameter_list|()
block|{
return|return
name|mDepthbufferPointer
operator|.
name|id
argument_list|()
return|;
block|}
DECL|function|getStencilbufferHandle
name|GLuint
name|Framebuffer
operator|::
name|getStencilbufferHandle
parameter_list|()
block|{
return|return
name|mStencilbufferPointer
operator|.
name|id
argument_list|()
return|;
block|}
DECL|function|hasStencil
name|bool
name|Framebuffer
operator|::
name|hasStencil
parameter_list|()
block|{
if|if
condition|(
name|mStencilbufferType
operator|!=
name|GL_NONE
condition|)
block|{
name|Renderbuffer
modifier|*
name|stencilbufferObject
init|=
name|getStencilbuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|stencilbufferObject
condition|)
block|{
return|return
name|stencilbufferObject
operator|->
name|getStencilSize
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|completeness
name|GLenum
name|Framebuffer
operator|::
name|completeness
parameter_list|()
block|{
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getContext
argument_list|()
decl_stmt|;
name|int
name|width
init|=
literal|0
decl_stmt|;
name|int
name|height
init|=
literal|0
decl_stmt|;
name|int
name|samples
init|=
operator|-
literal|1
decl_stmt|;
name|bool
name|missingAttachment
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|mColorbufferType
operator|!=
name|GL_NONE
condition|)
block|{
name|Renderbuffer
modifier|*
name|colorbuffer
init|=
name|getColorbuffer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|colorbuffer
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|colorbuffer
operator|->
name|getWidth
argument_list|()
operator|==
literal|0
operator|||
name|colorbuffer
operator|->
name|getHeight
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|mColorbufferType
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|IsColorRenderable
argument_list|(
name|colorbuffer
operator|->
name|getInternalFormat
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|IsInternalTextureTarget
argument_list|(
name|mColorbufferType
argument_list|)
condition|)
block|{
name|GLint
name|internalformat
init|=
name|colorbuffer
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
name|GLenum
name|format
init|=
name|gl
operator|::
name|ExtractFormat
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|IsCompressed
argument_list|(
name|format
argument_list|)
operator|||
name|format
operator|==
name|GL_ALPHA
operator|||
name|format
operator|==
name|GL_LUMINANCE
operator|||
name|format
operator|==
name|GL_LUMINANCE_ALPHA
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
if|if
condition|(
operator|(
name|gl
operator|::
name|IsFloat32Format
argument_list|(
name|internalformat
argument_list|)
operator|&&
operator|!
name|context
operator|->
name|supportsFloat32RenderableTextures
argument_list|()
operator|)
operator|||
operator|(
name|gl
operator|::
name|IsFloat16Format
argument_list|(
name|internalformat
argument_list|)
operator|&&
operator|!
name|context
operator|->
name|supportsFloat16RenderableTextures
argument_list|()
operator|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
if|if
condition|(
name|gl
operator|::
name|IsDepthTexture
argument_list|(
name|internalformat
argument_list|)
operator|||
name|gl
operator|::
name|IsStencilTexture
argument_list|(
name|internalformat
argument_list|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
name|width
operator|=
name|colorbuffer
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|height
operator|=
name|colorbuffer
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|samples
operator|=
name|colorbuffer
operator|->
name|getSamples
argument_list|()
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
name|Renderbuffer
modifier|*
name|depthbuffer
init|=
name|NULL
decl_stmt|;
name|Renderbuffer
modifier|*
name|stencilbuffer
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|mDepthbufferType
operator|!=
name|GL_NONE
condition|)
block|{
name|depthbuffer
operator|=
name|getDepthbuffer
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|depthbuffer
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|depthbuffer
operator|->
name|getWidth
argument_list|()
operator|==
literal|0
operator|||
name|depthbuffer
operator|->
name|getHeight
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|mDepthbufferType
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|IsDepthRenderable
argument_list|(
name|depthbuffer
operator|->
name|getInternalFormat
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|IsInternalTextureTarget
argument_list|(
name|mDepthbufferType
argument_list|)
condition|)
block|{
name|GLint
name|internalformat
init|=
name|depthbuffer
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
comment|// depth texture attachments require OES/ANGLE_depth_texture
if|if
condition|(
operator|!
name|context
operator|->
name|supportsDepthTextures
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|IsDepthTexture
argument_list|(
name|internalformat
argument_list|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|missingAttachment
condition|)
block|{
name|width
operator|=
name|depthbuffer
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|height
operator|=
name|depthbuffer
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|samples
operator|=
name|depthbuffer
operator|->
name|getSamples
argument_list|()
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|width
operator|!=
name|depthbuffer
operator|->
name|getWidth
argument_list|()
operator|||
name|height
operator|!=
name|depthbuffer
operator|->
name|getHeight
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
return|;
block|}
elseif|else
if|if
condition|(
name|samples
operator|!=
name|depthbuffer
operator|->
name|getSamples
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
return|;
block|}
block|}
if|if
condition|(
name|mStencilbufferType
operator|!=
name|GL_NONE
condition|)
block|{
name|stencilbuffer
operator|=
name|getStencilbuffer
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|stencilbuffer
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|stencilbuffer
operator|->
name|getWidth
argument_list|()
operator|==
literal|0
operator|||
name|stencilbuffer
operator|->
name|getHeight
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|mStencilbufferType
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|IsStencilRenderable
argument_list|(
name|stencilbuffer
operator|->
name|getInternalFormat
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|IsInternalTextureTarget
argument_list|(
name|mStencilbufferType
argument_list|)
condition|)
block|{
name|GLint
name|internalformat
init|=
name|stencilbuffer
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
comment|// texture stencil attachments come along as part
comment|// of OES_packed_depth_stencil + OES/ANGLE_depth_texture
if|if
condition|(
operator|!
name|context
operator|->
name|supportsDepthTextures
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|IsStencilTexture
argument_list|(
name|internalformat
argument_list|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|missingAttachment
condition|)
block|{
name|width
operator|=
name|stencilbuffer
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|height
operator|=
name|stencilbuffer
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|samples
operator|=
name|stencilbuffer
operator|->
name|getSamples
argument_list|()
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|width
operator|!=
name|stencilbuffer
operator|->
name|getWidth
argument_list|()
operator|||
name|height
operator|!=
name|stencilbuffer
operator|->
name|getHeight
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
return|;
block|}
elseif|else
if|if
condition|(
name|samples
operator|!=
name|stencilbuffer
operator|->
name|getSamples
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
return|;
block|}
block|}
comment|// if we have both a depth and stencil buffer, they must refer to the same object
comment|// since we only support packed_depth_stencil and not separate depth and stencil
if|if
condition|(
name|depthbuffer
operator|&&
name|stencilbuffer
operator|&&
operator|(
name|depthbuffer
operator|!=
name|stencilbuffer
operator|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
comment|// we need to have at least one attachment to be complete
if|if
condition|(
name|missingAttachment
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
return|;
block|}
return|return
name|GL_FRAMEBUFFER_COMPLETE
return|;
block|}
DECL|function|DefaultFramebuffer
name|DefaultFramebuffer
operator|::
name|DefaultFramebuffer
parameter_list|(
name|Colorbuffer
modifier|*
name|colorbuffer
parameter_list|,
name|DepthStencilbuffer
modifier|*
name|depthStencil
parameter_list|)
block|{
name|mColorbufferPointer
operator|.
name|set
argument_list|(
operator|new
name|Renderbuffer
argument_list|(
literal|0
argument_list|,
name|colorbuffer
argument_list|)
argument_list|)
expr_stmt|;
name|Renderbuffer
modifier|*
name|depthStencilRenderbuffer
init|=
operator|new
name|Renderbuffer
argument_list|(
literal|0
argument_list|,
name|depthStencil
argument_list|)
decl_stmt|;
name|mDepthbufferPointer
operator|.
name|set
argument_list|(
name|depthStencilRenderbuffer
argument_list|)
expr_stmt|;
name|mStencilbufferPointer
operator|.
name|set
argument_list|(
name|depthStencilRenderbuffer
argument_list|)
expr_stmt|;
name|mColorbufferType
operator|=
name|GL_RENDERBUFFER
expr_stmt|;
name|mDepthbufferType
operator|=
operator|(
name|depthStencilRenderbuffer
operator|->
name|getDepthSize
argument_list|()
operator|!=
literal|0
operator|)
condition|?
name|GL_RENDERBUFFER
else|:
name|GL_NONE
expr_stmt|;
name|mStencilbufferType
operator|=
operator|(
name|depthStencilRenderbuffer
operator|->
name|getStencilSize
argument_list|()
operator|!=
literal|0
operator|)
condition|?
name|GL_RENDERBUFFER
else|:
name|GL_NONE
expr_stmt|;
block|}
DECL|function|getSamples
name|int
name|Framebuffer
operator|::
name|getSamples
parameter_list|()
block|{
if|if
condition|(
name|completeness
argument_list|()
operator|==
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
return|return
name|getColorbuffer
argument_list|()
operator|->
name|getSamples
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|function|completeness
name|GLenum
name|DefaultFramebuffer
operator|::
name|completeness
parameter_list|()
block|{
comment|// The default framebuffer should always be complete
name|ASSERT
argument_list|(
name|Framebuffer
operator|::
name|completeness
argument_list|()
operator|==
name|GL_FRAMEBUFFER_COMPLETE
argument_list|)
expr_stmt|;
return|return
name|GL_FRAMEBUFFER_COMPLETE
return|;
block|}
block|}
end_namespace
end_unit
