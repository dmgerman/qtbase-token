begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Framebuffer.cpp: Implements the gl::Framebuffer class. Implements GL framebuffer
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4 page 105.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Renderbuffer.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|Framebuffer
name|Framebuffer
operator|::
name|Framebuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
block|{
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
name|mColorbufferTypes
index|[
name|colorAttachment
index|]
operator|=
name|GL_NONE
expr_stmt|;
name|mDrawBufferStates
index|[
name|colorAttachment
index|]
operator|=
name|GL_NONE
expr_stmt|;
block|}
name|mDrawBufferStates
index|[
literal|0
index|]
operator|=
name|GL_COLOR_ATTACHMENT0_EXT
expr_stmt|;
name|mReadBufferState
operator|=
name|GL_COLOR_ATTACHMENT0_EXT
expr_stmt|;
name|mDepthbufferType
operator|=
name|GL_NONE
expr_stmt|;
name|mStencilbufferType
operator|=
name|GL_NONE
expr_stmt|;
block|}
DECL|function|~Framebuffer
name|Framebuffer
operator|::
name|~
name|Framebuffer
parameter_list|()
block|{
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
name|mColorbufferPointers
index|[
name|colorAttachment
index|]
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
name|mDepthbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|mStencilbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
DECL|function|lookupRenderbuffer
name|Renderbuffer
modifier|*
name|Framebuffer
operator|::
name|lookupRenderbuffer
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLuint
name|handle
parameter_list|)
specifier|const
block|{
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getContext
argument_list|()
decl_stmt|;
name|Renderbuffer
modifier|*
name|buffer
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|GL_NONE
condition|)
block|{
name|buffer
operator|=
name|NULL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
name|buffer
operator|=
name|context
operator|->
name|getRenderbuffer
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|IsInternalTextureTarget
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|buffer
operator|=
name|context
operator|->
name|getTexture
argument_list|(
name|handle
argument_list|)
operator|->
name|getRenderbuffer
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
DECL|function|setColorbuffer
name|void
name|Framebuffer
operator|::
name|setColorbuffer
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLuint
name|colorbuffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
argument_list|)
expr_stmt|;
name|mColorbufferTypes
index|[
name|colorAttachment
index|]
operator|=
operator|(
name|colorbuffer
operator|!=
literal|0
operator|)
condition|?
name|type
else|:
name|GL_NONE
expr_stmt|;
name|mColorbufferPointers
index|[
name|colorAttachment
index|]
operator|.
name|set
argument_list|(
name|lookupRenderbuffer
argument_list|(
name|type
argument_list|,
name|colorbuffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setDepthbuffer
name|void
name|Framebuffer
operator|::
name|setDepthbuffer
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLuint
name|depthbuffer
parameter_list|)
block|{
name|mDepthbufferType
operator|=
operator|(
name|depthbuffer
operator|!=
literal|0
operator|)
condition|?
name|type
else|:
name|GL_NONE
expr_stmt|;
name|mDepthbufferPointer
operator|.
name|set
argument_list|(
name|lookupRenderbuffer
argument_list|(
name|type
argument_list|,
name|depthbuffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setStencilbuffer
name|void
name|Framebuffer
operator|::
name|setStencilbuffer
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLuint
name|stencilbuffer
parameter_list|)
block|{
name|mStencilbufferType
operator|=
operator|(
name|stencilbuffer
operator|!=
literal|0
operator|)
condition|?
name|type
else|:
name|GL_NONE
expr_stmt|;
name|mStencilbufferPointer
operator|.
name|set
argument_list|(
name|lookupRenderbuffer
argument_list|(
name|type
argument_list|,
name|stencilbuffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|detachTexture
name|void
name|Framebuffer
operator|::
name|detachTexture
parameter_list|(
name|GLuint
name|texture
parameter_list|)
block|{
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
if|if
condition|(
name|mColorbufferPointers
index|[
name|colorAttachment
index|]
operator|.
name|id
argument_list|()
operator|==
name|texture
operator|&&
name|IsInternalTextureTarget
argument_list|(
name|mColorbufferTypes
index|[
name|colorAttachment
index|]
argument_list|)
condition|)
block|{
name|mColorbufferTypes
index|[
name|colorAttachment
index|]
operator|=
name|GL_NONE
expr_stmt|;
name|mColorbufferPointers
index|[
name|colorAttachment
index|]
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mDepthbufferPointer
operator|.
name|id
argument_list|()
operator|==
name|texture
operator|&&
name|IsInternalTextureTarget
argument_list|(
name|mDepthbufferType
argument_list|)
condition|)
block|{
name|mDepthbufferType
operator|=
name|GL_NONE
expr_stmt|;
name|mDepthbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mStencilbufferPointer
operator|.
name|id
argument_list|()
operator|==
name|texture
operator|&&
name|IsInternalTextureTarget
argument_list|(
name|mStencilbufferType
argument_list|)
condition|)
block|{
name|mStencilbufferType
operator|=
name|GL_NONE
expr_stmt|;
name|mStencilbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|detachRenderbuffer
name|void
name|Framebuffer
operator|::
name|detachRenderbuffer
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
block|{
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
if|if
condition|(
name|mColorbufferPointers
index|[
name|colorAttachment
index|]
operator|.
name|id
argument_list|()
operator|==
name|renderbuffer
operator|&&
name|mColorbufferTypes
index|[
name|colorAttachment
index|]
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
name|mColorbufferTypes
index|[
name|colorAttachment
index|]
operator|=
name|GL_NONE
expr_stmt|;
name|mColorbufferPointers
index|[
name|colorAttachment
index|]
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mDepthbufferPointer
operator|.
name|id
argument_list|()
operator|==
name|renderbuffer
operator|&&
name|mDepthbufferType
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
name|mDepthbufferType
operator|=
name|GL_NONE
expr_stmt|;
name|mDepthbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mStencilbufferPointer
operator|.
name|id
argument_list|()
operator|==
name|renderbuffer
operator|&&
name|mStencilbufferType
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
name|mStencilbufferType
operator|=
name|GL_NONE
expr_stmt|;
name|mStencilbufferPointer
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getRenderTargetSerial
name|unsigned
name|int
name|Framebuffer
operator|::
name|getRenderTargetSerial
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
argument_list|)
expr_stmt|;
name|Renderbuffer
modifier|*
name|colorbuffer
init|=
name|mColorbufferPointers
index|[
name|colorAttachment
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|colorbuffer
condition|)
block|{
return|return
name|colorbuffer
operator|->
name|getSerial
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|getDepthbufferSerial
name|unsigned
name|int
name|Framebuffer
operator|::
name|getDepthbufferSerial
parameter_list|()
specifier|const
block|{
name|Renderbuffer
modifier|*
name|depthbuffer
init|=
name|mDepthbufferPointer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|depthbuffer
condition|)
block|{
return|return
name|depthbuffer
operator|->
name|getSerial
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|getStencilbufferSerial
name|unsigned
name|int
name|Framebuffer
operator|::
name|getStencilbufferSerial
parameter_list|()
specifier|const
block|{
name|Renderbuffer
modifier|*
name|stencilbuffer
init|=
name|mStencilbufferPointer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|stencilbuffer
condition|)
block|{
return|return
name|stencilbuffer
operator|->
name|getSerial
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|getColorbuffer
name|Renderbuffer
modifier|*
name|Framebuffer
operator|::
name|getColorbuffer
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
argument_list|)
expr_stmt|;
return|return
name|mColorbufferPointers
index|[
name|colorAttachment
index|]
operator|.
name|get
argument_list|()
return|;
block|}
DECL|function|getDepthbuffer
name|Renderbuffer
modifier|*
name|Framebuffer
operator|::
name|getDepthbuffer
parameter_list|()
specifier|const
block|{
return|return
name|mDepthbufferPointer
operator|.
name|get
argument_list|()
return|;
block|}
DECL|function|getStencilbuffer
name|Renderbuffer
modifier|*
name|Framebuffer
operator|::
name|getStencilbuffer
parameter_list|()
specifier|const
block|{
return|return
name|mStencilbufferPointer
operator|.
name|get
argument_list|()
return|;
block|}
DECL|function|getDepthOrStencilbuffer
name|Renderbuffer
modifier|*
name|Framebuffer
operator|::
name|getDepthOrStencilbuffer
parameter_list|()
specifier|const
block|{
name|Renderbuffer
modifier|*
name|depthstencilbuffer
init|=
name|mDepthbufferPointer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|depthstencilbuffer
condition|)
block|{
name|depthstencilbuffer
operator|=
name|mStencilbufferPointer
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|depthstencilbuffer
return|;
block|}
DECL|function|getReadColorbuffer
name|Renderbuffer
modifier|*
name|Framebuffer
operator|::
name|getReadColorbuffer
parameter_list|()
specifier|const
block|{
comment|// Will require more logic if glReadBuffers is supported
return|return
name|mColorbufferPointers
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
return|;
block|}
DECL|function|getReadColorbufferType
name|GLenum
name|Framebuffer
operator|::
name|getReadColorbufferType
parameter_list|()
specifier|const
block|{
comment|// Will require more logic if glReadBuffers is supported
return|return
name|mColorbufferTypes
index|[
literal|0
index|]
return|;
block|}
DECL|function|getFirstColorbuffer
name|Renderbuffer
modifier|*
name|Framebuffer
operator|::
name|getFirstColorbuffer
parameter_list|()
specifier|const
block|{
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
if|if
condition|(
name|mColorbufferTypes
index|[
name|colorAttachment
index|]
operator|!=
name|GL_NONE
condition|)
block|{
return|return
name|mColorbufferPointers
index|[
name|colorAttachment
index|]
operator|.
name|get
argument_list|()
return|;
block|}
block|}
return|return
name|NULL
return|;
block|}
DECL|function|getColorbufferType
name|GLenum
name|Framebuffer
operator|::
name|getColorbufferType
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
argument_list|)
expr_stmt|;
return|return
name|mColorbufferTypes
index|[
name|colorAttachment
index|]
return|;
block|}
DECL|function|getDepthbufferType
name|GLenum
name|Framebuffer
operator|::
name|getDepthbufferType
parameter_list|()
specifier|const
block|{
return|return
name|mDepthbufferType
return|;
block|}
DECL|function|getStencilbufferType
name|GLenum
name|Framebuffer
operator|::
name|getStencilbufferType
parameter_list|()
specifier|const
block|{
return|return
name|mStencilbufferType
return|;
block|}
DECL|function|getColorbufferHandle
name|GLuint
name|Framebuffer
operator|::
name|getColorbufferHandle
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
argument_list|)
expr_stmt|;
return|return
name|mColorbufferPointers
index|[
name|colorAttachment
index|]
operator|.
name|id
argument_list|()
return|;
block|}
DECL|function|getDepthbufferHandle
name|GLuint
name|Framebuffer
operator|::
name|getDepthbufferHandle
parameter_list|()
specifier|const
block|{
return|return
name|mDepthbufferPointer
operator|.
name|id
argument_list|()
return|;
block|}
DECL|function|getStencilbufferHandle
name|GLuint
name|Framebuffer
operator|::
name|getStencilbufferHandle
parameter_list|()
specifier|const
block|{
return|return
name|mStencilbufferPointer
operator|.
name|id
argument_list|()
return|;
block|}
DECL|function|getDrawBufferState
name|GLenum
name|Framebuffer
operator|::
name|getDrawBufferState
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|)
specifier|const
block|{
return|return
name|mDrawBufferStates
index|[
name|colorAttachment
index|]
return|;
block|}
DECL|function|setDrawBufferState
name|void
name|Framebuffer
operator|::
name|setDrawBufferState
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|,
name|GLenum
name|drawBuffer
parameter_list|)
block|{
name|mDrawBufferStates
index|[
name|colorAttachment
index|]
operator|=
name|drawBuffer
expr_stmt|;
block|}
DECL|function|isEnabledColorAttachment
name|bool
name|Framebuffer
operator|::
name|isEnabledColorAttachment
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|mColorbufferTypes
index|[
name|colorAttachment
index|]
operator|!=
name|GL_NONE
operator|&&
name|mDrawBufferStates
index|[
name|colorAttachment
index|]
operator|!=
name|GL_NONE
operator|)
return|;
block|}
DECL|function|hasEnabledColorAttachment
name|bool
name|Framebuffer
operator|::
name|hasEnabledColorAttachment
parameter_list|()
specifier|const
block|{
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|gl
operator|::
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
if|if
condition|(
name|isEnabledColorAttachment
argument_list|(
name|colorAttachment
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|hasStencil
name|bool
name|Framebuffer
operator|::
name|hasStencil
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|mStencilbufferType
operator|!=
name|GL_NONE
condition|)
block|{
specifier|const
name|Renderbuffer
modifier|*
name|stencilbufferObject
init|=
name|getStencilbuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|stencilbufferObject
condition|)
block|{
return|return
name|stencilbufferObject
operator|->
name|getStencilSize
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|usingExtendedDrawBuffers
name|bool
name|Framebuffer
operator|::
name|usingExtendedDrawBuffers
parameter_list|()
specifier|const
block|{
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|1
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
if|if
condition|(
name|isEnabledColorAttachment
argument_list|(
name|colorAttachment
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|completeness
name|GLenum
name|Framebuffer
operator|::
name|completeness
parameter_list|()
specifier|const
block|{
name|int
name|width
init|=
literal|0
decl_stmt|;
name|int
name|height
init|=
literal|0
decl_stmt|;
name|int
name|colorbufferSize
init|=
literal|0
decl_stmt|;
name|int
name|samples
init|=
operator|-
literal|1
decl_stmt|;
name|bool
name|missingAttachment
init|=
literal|true
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
if|if
condition|(
name|mColorbufferTypes
index|[
name|colorAttachment
index|]
operator|!=
name|GL_NONE
condition|)
block|{
specifier|const
name|Renderbuffer
modifier|*
name|colorbuffer
init|=
name|getColorbuffer
argument_list|(
name|colorAttachment
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|colorbuffer
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|colorbuffer
operator|->
name|getWidth
argument_list|()
operator|==
literal|0
operator|||
name|colorbuffer
operator|->
name|getHeight
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|mColorbufferTypes
index|[
name|colorAttachment
index|]
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|IsColorRenderable
argument_list|(
name|colorbuffer
operator|->
name|getInternalFormat
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|IsInternalTextureTarget
argument_list|(
name|mColorbufferTypes
index|[
name|colorAttachment
index|]
argument_list|)
condition|)
block|{
name|GLint
name|internalformat
init|=
name|colorbuffer
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
name|GLenum
name|format
init|=
name|gl
operator|::
name|ExtractFormat
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|IsCompressed
argument_list|(
name|format
argument_list|)
operator|||
name|format
operator|==
name|GL_ALPHA
operator|||
name|format
operator|==
name|GL_LUMINANCE
operator|||
name|format
operator|==
name|GL_LUMINANCE_ALPHA
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
name|bool
name|filtering
decl_stmt|,
name|renderable
decl_stmt|;
if|if
condition|(
operator|(
name|gl
operator|::
name|IsFloat32Format
argument_list|(
name|internalformat
argument_list|)
operator|&&
operator|!
name|mRenderer
operator|->
name|getFloat32TextureSupport
argument_list|(
operator|&
name|filtering
argument_list|,
operator|&
name|renderable
argument_list|)
operator|)
operator|||
operator|(
name|gl
operator|::
name|IsFloat16Format
argument_list|(
name|internalformat
argument_list|)
operator|&&
operator|!
name|mRenderer
operator|->
name|getFloat16TextureSupport
argument_list|(
operator|&
name|filtering
argument_list|,
operator|&
name|renderable
argument_list|)
operator|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
if|if
condition|(
name|gl
operator|::
name|IsDepthTexture
argument_list|(
name|internalformat
argument_list|)
operator|||
name|gl
operator|::
name|IsStencilTexture
argument_list|(
name|internalformat
argument_list|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
operator|!
name|missingAttachment
condition|)
block|{
comment|// all color attachments must have the same width and height
if|if
condition|(
name|colorbuffer
operator|->
name|getWidth
argument_list|()
operator|!=
name|width
operator|||
name|colorbuffer
operator|->
name|getHeight
argument_list|()
operator|!=
name|height
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
return|;
block|}
comment|// APPLE_framebuffer_multisample, which EXT_draw_buffers refers to, requires that
comment|// all color attachments have the same number of samples for the FBO to be complete.
if|if
condition|(
name|colorbuffer
operator|->
name|getSamples
argument_list|()
operator|!=
name|samples
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
return|;
block|}
comment|// all color attachments attachments must have the same number of bitplanes
if|if
condition|(
name|gl
operator|::
name|ComputePixelSize
argument_list|(
name|colorbuffer
operator|->
name|getInternalFormat
argument_list|()
argument_list|)
operator|!=
name|colorbufferSize
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
comment|// D3D11 does not allow for overlapping RenderTargetViews, so ensure uniqueness
for|for
control|(
name|unsigned
name|int
name|previousColorAttachment
init|=
literal|0
init|;
name|previousColorAttachment
operator|<
name|colorAttachment
condition|;
name|previousColorAttachment
operator|++
control|)
block|{
if|if
condition|(
name|mColorbufferPointers
index|[
name|colorAttachment
index|]
operator|.
name|get
argument_list|()
operator|==
name|mColorbufferPointers
index|[
name|previousColorAttachment
index|]
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
block|}
block|}
else|else
block|{
name|width
operator|=
name|colorbuffer
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|height
operator|=
name|colorbuffer
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|samples
operator|=
name|colorbuffer
operator|->
name|getSamples
argument_list|()
expr_stmt|;
name|colorbufferSize
operator|=
name|gl
operator|::
name|ComputePixelSize
argument_list|(
name|colorbuffer
operator|->
name|getInternalFormat
argument_list|()
argument_list|)
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|const
name|Renderbuffer
modifier|*
name|depthbuffer
init|=
name|NULL
decl_stmt|;
specifier|const
name|Renderbuffer
modifier|*
name|stencilbuffer
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|mDepthbufferType
operator|!=
name|GL_NONE
condition|)
block|{
name|depthbuffer
operator|=
name|getDepthbuffer
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|depthbuffer
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|depthbuffer
operator|->
name|getWidth
argument_list|()
operator|==
literal|0
operator|||
name|depthbuffer
operator|->
name|getHeight
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|mDepthbufferType
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|IsDepthRenderable
argument_list|(
name|depthbuffer
operator|->
name|getInternalFormat
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|IsInternalTextureTarget
argument_list|(
name|mDepthbufferType
argument_list|)
condition|)
block|{
name|GLint
name|internalformat
init|=
name|depthbuffer
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
comment|// depth texture attachments require OES/ANGLE_depth_texture
if|if
condition|(
operator|!
name|mRenderer
operator|->
name|getDepthTextureSupport
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|IsDepthTexture
argument_list|(
name|internalformat
argument_list|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|missingAttachment
condition|)
block|{
name|width
operator|=
name|depthbuffer
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|height
operator|=
name|depthbuffer
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|samples
operator|=
name|depthbuffer
operator|->
name|getSamples
argument_list|()
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|width
operator|!=
name|depthbuffer
operator|->
name|getWidth
argument_list|()
operator|||
name|height
operator|!=
name|depthbuffer
operator|->
name|getHeight
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
return|;
block|}
elseif|else
if|if
condition|(
name|samples
operator|!=
name|depthbuffer
operator|->
name|getSamples
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
return|;
block|}
block|}
if|if
condition|(
name|mStencilbufferType
operator|!=
name|GL_NONE
condition|)
block|{
name|stencilbuffer
operator|=
name|getStencilbuffer
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|stencilbuffer
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|stencilbuffer
operator|->
name|getWidth
argument_list|()
operator|==
literal|0
operator|||
name|stencilbuffer
operator|->
name|getHeight
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|mStencilbufferType
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|IsStencilRenderable
argument_list|(
name|stencilbuffer
operator|->
name|getInternalFormat
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|IsInternalTextureTarget
argument_list|(
name|mStencilbufferType
argument_list|)
condition|)
block|{
name|GLint
name|internalformat
init|=
name|stencilbuffer
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
comment|// texture stencil attachments come along as part
comment|// of OES_packed_depth_stencil + OES/ANGLE_depth_texture
if|if
condition|(
operator|!
name|mRenderer
operator|->
name|getDepthTextureSupport
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|IsStencilTexture
argument_list|(
name|internalformat
argument_list|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
name|missingAttachment
condition|)
block|{
name|width
operator|=
name|stencilbuffer
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|height
operator|=
name|stencilbuffer
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|samples
operator|=
name|stencilbuffer
operator|->
name|getSamples
argument_list|()
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|width
operator|!=
name|stencilbuffer
operator|->
name|getWidth
argument_list|()
operator|||
name|height
operator|!=
name|stencilbuffer
operator|->
name|getHeight
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
return|;
block|}
elseif|else
if|if
condition|(
name|samples
operator|!=
name|stencilbuffer
operator|->
name|getSamples
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
return|;
block|}
block|}
comment|// if we have both a depth and stencil buffer, they must refer to the same object
comment|// since we only support packed_depth_stencil and not separate depth and stencil
if|if
condition|(
name|depthbuffer
operator|&&
name|stencilbuffer
operator|&&
operator|(
name|depthbuffer
operator|!=
name|stencilbuffer
operator|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
comment|// we need to have at least one attachment to be complete
if|if
condition|(
name|missingAttachment
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
return|;
block|}
return|return
name|GL_FRAMEBUFFER_COMPLETE
return|;
block|}
DECL|function|DefaultFramebuffer
name|DefaultFramebuffer
operator|::
name|DefaultFramebuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|Colorbuffer
modifier|*
name|colorbuffer
parameter_list|,
name|DepthStencilbuffer
modifier|*
name|depthStencil
parameter_list|)
member_init_list|:
name|Framebuffer
argument_list|(
name|renderer
argument_list|)
block|{
name|mColorbufferPointers
index|[
literal|0
index|]
operator|.
name|set
argument_list|(
operator|new
name|Renderbuffer
argument_list|(
name|mRenderer
argument_list|,
literal|0
argument_list|,
name|colorbuffer
argument_list|)
argument_list|)
expr_stmt|;
name|Renderbuffer
modifier|*
name|depthStencilRenderbuffer
init|=
operator|new
name|Renderbuffer
argument_list|(
name|mRenderer
argument_list|,
literal|0
argument_list|,
name|depthStencil
argument_list|)
decl_stmt|;
name|mDepthbufferPointer
operator|.
name|set
argument_list|(
name|depthStencilRenderbuffer
argument_list|)
expr_stmt|;
name|mStencilbufferPointer
operator|.
name|set
argument_list|(
name|depthStencilRenderbuffer
argument_list|)
expr_stmt|;
name|mColorbufferTypes
index|[
literal|0
index|]
operator|=
name|GL_RENDERBUFFER
expr_stmt|;
name|mDepthbufferType
operator|=
operator|(
name|depthStencilRenderbuffer
operator|->
name|getDepthSize
argument_list|()
operator|!=
literal|0
operator|)
condition|?
name|GL_RENDERBUFFER
else|:
name|GL_NONE
expr_stmt|;
name|mStencilbufferType
operator|=
operator|(
name|depthStencilRenderbuffer
operator|->
name|getStencilSize
argument_list|()
operator|!=
literal|0
operator|)
condition|?
name|GL_RENDERBUFFER
else|:
name|GL_NONE
expr_stmt|;
name|mDrawBufferStates
index|[
literal|0
index|]
operator|=
name|GL_BACK
expr_stmt|;
name|mReadBufferState
operator|=
name|GL_BACK
expr_stmt|;
block|}
DECL|function|getSamples
name|int
name|Framebuffer
operator|::
name|getSamples
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|completeness
argument_list|()
operator|==
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
comment|// for a complete framebuffer, all attachments must have the same sample count
comment|// in this case return the first nonzero sample size
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
if|if
condition|(
name|mColorbufferTypes
index|[
name|colorAttachment
index|]
operator|!=
name|GL_NONE
condition|)
block|{
return|return
name|getColorbuffer
argument_list|(
name|colorAttachment
argument_list|)
operator|->
name|getSamples
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|function|completeness
name|GLenum
name|DefaultFramebuffer
operator|::
name|completeness
parameter_list|()
specifier|const
block|{
comment|// The default framebuffer *must* always be complete, though it may not be
comment|// subject to the same rules as application FBOs. ie, it could have 0x0 size.
return|return
name|GL_FRAMEBUFFER_COMPLETE
return|;
block|}
block|}
end_namespace
end_unit
