begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Framebuffer.cpp: Implements the gl::Framebuffer class. Implements GL framebuffer
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4 page 105.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/FramebufferAttachment.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|Framebuffer
name|Framebuffer
operator|::
name|Framebuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mId
argument_list|(
name|id
argument_list|)
member_init_list|,
name|mReadBufferState
argument_list|(
name|GL_COLOR_ATTACHMENT0_EXT
argument_list|)
member_init_list|,
name|mDepthbuffer
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mStencilbuffer
argument_list|(
name|NULL
argument_list|)
block|{
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
name|mColorbuffers
index|[
name|colorAttachment
index|]
operator|=
name|NULL
expr_stmt|;
name|mDrawBufferStates
index|[
name|colorAttachment
index|]
operator|=
name|GL_NONE
expr_stmt|;
block|}
name|mDrawBufferStates
index|[
literal|0
index|]
operator|=
name|GL_COLOR_ATTACHMENT0_EXT
expr_stmt|;
block|}
DECL|function|~Framebuffer
name|Framebuffer
operator|::
name|~
name|Framebuffer
parameter_list|()
block|{
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
name|SafeDelete
argument_list|(
name|mColorbuffers
index|[
name|colorAttachment
index|]
argument_list|)
expr_stmt|;
block|}
name|SafeDelete
argument_list|(
name|mDepthbuffer
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mStencilbuffer
argument_list|)
expr_stmt|;
block|}
DECL|function|createAttachment
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|createAttachment
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLuint
name|handle
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|handle
operator|==
literal|0
condition|)
block|{
return|return
name|NULL
return|;
block|}
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getContext
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_NONE
case|:
return|return
name|NULL
return|;
case|case
name|GL_RENDERBUFFER
case|:
return|return
operator|new
name|RenderbufferAttachment
argument_list|(
name|context
operator|->
name|getRenderbuffer
argument_list|(
name|handle
argument_list|)
argument_list|)
return|;
case|case
name|GL_TEXTURE_2D
case|:
block|{
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|texture
operator|&&
name|texture
operator|->
name|getTarget
argument_list|()
operator|==
name|GL_TEXTURE_2D
condition|)
block|{
name|Texture2D
modifier|*
name|tex2D
init|=
cast|static_cast
argument_list|<
name|Texture2D
operator|*
argument_list|>
argument_list|(
name|texture
argument_list|)
decl_stmt|;
return|return
operator|new
name|Texture2DAttachment
argument_list|(
name|tex2D
argument_list|,
name|level
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|NULL
return|;
block|}
block|}
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
case|:
block|{
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|texture
operator|&&
name|texture
operator|->
name|getTarget
argument_list|()
operator|==
name|GL_TEXTURE_CUBE_MAP
condition|)
block|{
name|TextureCubeMap
modifier|*
name|texCube
init|=
cast|static_cast
argument_list|<
name|TextureCubeMap
operator|*
argument_list|>
argument_list|(
name|texture
argument_list|)
decl_stmt|;
return|return
operator|new
name|TextureCubeMapAttachment
argument_list|(
name|texCube
argument_list|,
name|type
argument_list|,
name|level
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|NULL
return|;
block|}
block|}
case|case
name|GL_TEXTURE_3D
case|:
block|{
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|texture
operator|&&
name|texture
operator|->
name|getTarget
argument_list|()
operator|==
name|GL_TEXTURE_3D
condition|)
block|{
name|Texture3D
modifier|*
name|tex3D
init|=
cast|static_cast
argument_list|<
name|Texture3D
operator|*
argument_list|>
argument_list|(
name|texture
argument_list|)
decl_stmt|;
return|return
operator|new
name|Texture3DAttachment
argument_list|(
name|tex3D
argument_list|,
name|level
argument_list|,
name|layer
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|NULL
return|;
block|}
block|}
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
block|{
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|texture
operator|&&
name|texture
operator|->
name|getTarget
argument_list|()
operator|==
name|GL_TEXTURE_2D_ARRAY
condition|)
block|{
name|Texture2DArray
modifier|*
name|tex2DArray
init|=
cast|static_cast
argument_list|<
name|Texture2DArray
operator|*
argument_list|>
argument_list|(
name|texture
argument_list|)
decl_stmt|;
return|return
operator|new
name|Texture2DArrayAttachment
argument_list|(
name|tex2DArray
argument_list|,
name|level
argument_list|,
name|layer
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|NULL
return|;
block|}
block|}
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|NULL
return|;
block|}
block|}
DECL|function|setColorbuffer
name|void
name|Framebuffer
operator|::
name|setColorbuffer
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLuint
name|colorbuffer
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mColorbuffers
index|[
name|colorAttachment
index|]
argument_list|)
expr_stmt|;
name|mColorbuffers
index|[
name|colorAttachment
index|]
operator|=
name|createAttachment
argument_list|(
name|type
argument_list|,
name|colorbuffer
argument_list|,
name|level
argument_list|,
name|layer
argument_list|)
expr_stmt|;
block|}
DECL|function|setDepthbuffer
name|void
name|Framebuffer
operator|::
name|setDepthbuffer
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLuint
name|depthbuffer
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
name|SafeDelete
argument_list|(
name|mDepthbuffer
argument_list|)
expr_stmt|;
name|mDepthbuffer
operator|=
name|createAttachment
argument_list|(
name|type
argument_list|,
name|depthbuffer
argument_list|,
name|level
argument_list|,
name|layer
argument_list|)
expr_stmt|;
block|}
DECL|function|setStencilbuffer
name|void
name|Framebuffer
operator|::
name|setStencilbuffer
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLuint
name|stencilbuffer
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
name|SafeDelete
argument_list|(
name|mStencilbuffer
argument_list|)
expr_stmt|;
name|mStencilbuffer
operator|=
name|createAttachment
argument_list|(
name|type
argument_list|,
name|stencilbuffer
argument_list|,
name|level
argument_list|,
name|layer
argument_list|)
expr_stmt|;
block|}
DECL|function|setDepthStencilBuffer
name|void
name|Framebuffer
operator|::
name|setDepthStencilBuffer
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLuint
name|depthStencilBuffer
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
name|FramebufferAttachment
modifier|*
name|attachment
init|=
name|createAttachment
argument_list|(
name|type
argument_list|,
name|depthStencilBuffer
argument_list|,
name|level
argument_list|,
name|layer
argument_list|)
decl_stmt|;
name|SafeDelete
argument_list|(
name|mDepthbuffer
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mStencilbuffer
argument_list|)
expr_stmt|;
comment|// ensure this is a legitimate depth+stencil format
if|if
condition|(
name|attachment
operator|&&
name|attachment
operator|->
name|getDepthSize
argument_list|()
operator|>
literal|0
operator|&&
name|attachment
operator|->
name|getStencilSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mDepthbuffer
operator|=
name|attachment
expr_stmt|;
comment|// Make a new attachment object to ensure we do not double-delete
comment|// See angle issue 686
name|mStencilbuffer
operator|=
name|createAttachment
argument_list|(
name|type
argument_list|,
name|depthStencilBuffer
argument_list|,
name|level
argument_list|,
name|layer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|detachTexture
name|void
name|Framebuffer
operator|::
name|detachTexture
parameter_list|(
name|GLuint
name|textureId
parameter_list|)
block|{
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
name|FramebufferAttachment
modifier|*
name|attachment
init|=
name|mColorbuffers
index|[
name|colorAttachment
index|]
decl_stmt|;
if|if
condition|(
name|attachment
operator|&&
name|attachment
operator|->
name|isTextureWithId
argument_list|(
name|textureId
argument_list|)
condition|)
block|{
name|SafeDelete
argument_list|(
name|mColorbuffers
index|[
name|colorAttachment
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mDepthbuffer
operator|&&
name|mDepthbuffer
operator|->
name|isTextureWithId
argument_list|(
name|textureId
argument_list|)
condition|)
block|{
name|SafeDelete
argument_list|(
name|mDepthbuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mStencilbuffer
operator|&&
name|mStencilbuffer
operator|->
name|isTextureWithId
argument_list|(
name|textureId
argument_list|)
condition|)
block|{
name|SafeDelete
argument_list|(
name|mStencilbuffer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|detachRenderbuffer
name|void
name|Framebuffer
operator|::
name|detachRenderbuffer
parameter_list|(
name|GLuint
name|renderbufferId
parameter_list|)
block|{
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
name|FramebufferAttachment
modifier|*
name|attachment
init|=
name|mColorbuffers
index|[
name|colorAttachment
index|]
decl_stmt|;
if|if
condition|(
name|attachment
operator|&&
name|attachment
operator|->
name|isRenderbufferWithId
argument_list|(
name|renderbufferId
argument_list|)
condition|)
block|{
name|SafeDelete
argument_list|(
name|mColorbuffers
index|[
name|colorAttachment
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mDepthbuffer
operator|&&
name|mDepthbuffer
operator|->
name|isRenderbufferWithId
argument_list|(
name|renderbufferId
argument_list|)
condition|)
block|{
name|SafeDelete
argument_list|(
name|mDepthbuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mStencilbuffer
operator|&&
name|mStencilbuffer
operator|->
name|isRenderbufferWithId
argument_list|(
name|renderbufferId
argument_list|)
condition|)
block|{
name|SafeDelete
argument_list|(
name|mStencilbuffer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getColorbuffer
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getColorbuffer
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
argument_list|)
expr_stmt|;
return|return
name|mColorbuffers
index|[
name|colorAttachment
index|]
return|;
block|}
DECL|function|getDepthbuffer
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getDepthbuffer
parameter_list|()
specifier|const
block|{
return|return
name|mDepthbuffer
return|;
block|}
DECL|function|getStencilbuffer
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getStencilbuffer
parameter_list|()
specifier|const
block|{
return|return
name|mStencilbuffer
return|;
block|}
DECL|function|getDepthStencilBuffer
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getDepthStencilBuffer
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|hasValidDepthStencil
argument_list|()
condition|?
name|mDepthbuffer
else|:
name|NULL
operator|)
return|;
block|}
DECL|function|getDepthOrStencilbuffer
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getDepthOrStencilbuffer
parameter_list|()
specifier|const
block|{
name|FramebufferAttachment
modifier|*
name|depthstencilbuffer
init|=
name|mDepthbuffer
decl_stmt|;
if|if
condition|(
operator|!
name|depthstencilbuffer
condition|)
block|{
name|depthstencilbuffer
operator|=
name|mStencilbuffer
expr_stmt|;
block|}
return|return
name|depthstencilbuffer
return|;
block|}
DECL|function|getReadColorbuffer
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getReadColorbuffer
parameter_list|()
specifier|const
block|{
comment|// Will require more logic if glReadBuffers is supported
return|return
name|mColorbuffers
index|[
literal|0
index|]
return|;
block|}
DECL|function|getReadColorbufferType
name|GLenum
name|Framebuffer
operator|::
name|getReadColorbufferType
parameter_list|()
specifier|const
block|{
comment|// Will require more logic if glReadBuffers is supported
return|return
operator|(
name|mColorbuffers
index|[
literal|0
index|]
condition|?
name|mColorbuffers
index|[
literal|0
index|]
operator|->
name|type
argument_list|()
else|:
name|GL_NONE
operator|)
return|;
block|}
DECL|function|getFirstColorbuffer
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getFirstColorbuffer
parameter_list|()
specifier|const
block|{
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
if|if
condition|(
name|mColorbuffers
index|[
name|colorAttachment
index|]
condition|)
block|{
return|return
name|mColorbuffers
index|[
name|colorAttachment
index|]
return|;
block|}
block|}
return|return
name|NULL
return|;
block|}
DECL|function|getAttachment
name|FramebufferAttachment
modifier|*
name|Framebuffer
operator|::
name|getAttachment
parameter_list|(
name|GLenum
name|attachment
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|attachment
operator|>=
name|GL_COLOR_ATTACHMENT0
operator|&&
name|attachment
operator|<=
name|GL_COLOR_ATTACHMENT15
condition|)
block|{
return|return
name|getColorbuffer
argument_list|(
name|attachment
operator|-
name|GL_COLOR_ATTACHMENT0
argument_list|)
return|;
block|}
else|else
block|{
switch|switch
condition|(
name|attachment
condition|)
block|{
case|case
name|GL_DEPTH_ATTACHMENT
case|:
return|return
name|getDepthbuffer
argument_list|()
return|;
case|case
name|GL_STENCIL_ATTACHMENT
case|:
return|return
name|getStencilbuffer
argument_list|()
return|;
case|case
name|GL_DEPTH_STENCIL_ATTACHMENT
case|:
return|return
name|getDepthStencilBuffer
argument_list|()
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|NULL
return|;
block|}
block|}
block|}
DECL|function|getDrawBufferState
name|GLenum
name|Framebuffer
operator|::
name|getDrawBufferState
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|)
specifier|const
block|{
return|return
name|mDrawBufferStates
index|[
name|colorAttachment
index|]
return|;
block|}
DECL|function|setDrawBufferState
name|void
name|Framebuffer
operator|::
name|setDrawBufferState
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|,
name|GLenum
name|drawBuffer
parameter_list|)
block|{
name|mDrawBufferStates
index|[
name|colorAttachment
index|]
operator|=
name|drawBuffer
expr_stmt|;
block|}
DECL|function|isEnabledColorAttachment
name|bool
name|Framebuffer
operator|::
name|isEnabledColorAttachment
parameter_list|(
name|unsigned
name|int
name|colorAttachment
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|mColorbuffers
index|[
name|colorAttachment
index|]
operator|&&
name|mDrawBufferStates
index|[
name|colorAttachment
index|]
operator|!=
name|GL_NONE
operator|)
return|;
block|}
DECL|function|hasEnabledColorAttachment
name|bool
name|Framebuffer
operator|::
name|hasEnabledColorAttachment
parameter_list|()
specifier|const
block|{
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|gl
operator|::
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
if|if
condition|(
name|isEnabledColorAttachment
argument_list|(
name|colorAttachment
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|hasStencil
name|bool
name|Framebuffer
operator|::
name|hasStencil
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mStencilbuffer
operator|&&
name|mStencilbuffer
operator|->
name|getStencilSize
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
DECL|function|usingExtendedDrawBuffers
name|bool
name|Framebuffer
operator|::
name|usingExtendedDrawBuffers
parameter_list|()
specifier|const
block|{
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|1
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
if|if
condition|(
name|isEnabledColorAttachment
argument_list|(
name|colorAttachment
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|completeness
name|GLenum
name|Framebuffer
operator|::
name|completeness
parameter_list|()
specifier|const
block|{
name|int
name|width
init|=
literal|0
decl_stmt|;
name|int
name|height
init|=
literal|0
decl_stmt|;
name|unsigned
name|int
name|colorbufferSize
init|=
literal|0
decl_stmt|;
name|int
name|samples
init|=
operator|-
literal|1
decl_stmt|;
name|bool
name|missingAttachment
init|=
literal|true
decl_stmt|;
name|GLuint
name|clientVersion
init|=
name|mRenderer
operator|->
name|getCurrentClientVersion
argument_list|()
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
specifier|const
name|FramebufferAttachment
modifier|*
name|colorbuffer
init|=
name|mColorbuffers
index|[
name|colorAttachment
index|]
decl_stmt|;
if|if
condition|(
name|colorbuffer
condition|)
block|{
if|if
condition|(
name|colorbuffer
operator|->
name|getWidth
argument_list|()
operator|==
literal|0
operator|||
name|colorbuffer
operator|->
name|getHeight
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
name|GLenum
name|internalformat
init|=
name|colorbuffer
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
comment|// TODO(geofflang): use context's texture caps
specifier|const
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|mRenderer
operator|->
name|getRendererTextureCaps
argument_list|()
operator|.
name|get
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorbuffer
operator|->
name|isTexture
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
if|if
condition|(
name|gl
operator|::
name|GetDepthBits
argument_list|(
name|internalformat
argument_list|)
operator|>
literal|0
operator|||
name|gl
operator|::
name|GetStencilBits
argument_list|(
name|internalformat
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
operator|||
name|gl
operator|::
name|GetDepthBits
argument_list|(
name|internalformat
argument_list|)
operator|>
literal|0
operator|||
name|gl
operator|::
name|GetStencilBits
argument_list|(
name|internalformat
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
if|if
condition|(
operator|!
name|missingAttachment
condition|)
block|{
comment|// all color attachments must have the same width and height
if|if
condition|(
name|colorbuffer
operator|->
name|getWidth
argument_list|()
operator|!=
name|width
operator|||
name|colorbuffer
operator|->
name|getHeight
argument_list|()
operator|!=
name|height
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
return|;
block|}
comment|// APPLE_framebuffer_multisample, which EXT_draw_buffers refers to, requires that
comment|// all color attachments have the same number of samples for the FBO to be complete.
if|if
condition|(
name|colorbuffer
operator|->
name|getSamples
argument_list|()
operator|!=
name|samples
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
return|;
block|}
comment|// in GLES 2.0, all color attachments attachments must have the same number of bitplanes
comment|// in GLES 3.0, there is no such restriction
if|if
condition|(
name|clientVersion
operator|<
literal|3
condition|)
block|{
if|if
condition|(
name|gl
operator|::
name|GetPixelBytes
argument_list|(
name|colorbuffer
operator|->
name|getInternalFormat
argument_list|()
argument_list|)
operator|!=
name|colorbufferSize
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
block|}
comment|// D3D11 does not allow for overlapping RenderTargetViews, so ensure uniqueness
for|for
control|(
name|unsigned
name|int
name|previousColorAttachment
init|=
literal|0
init|;
name|previousColorAttachment
operator|<
name|colorAttachment
condition|;
name|previousColorAttachment
operator|++
control|)
block|{
specifier|const
name|FramebufferAttachment
modifier|*
name|previousAttachment
init|=
name|mColorbuffers
index|[
name|previousColorAttachment
index|]
decl_stmt|;
if|if
condition|(
name|previousAttachment
operator|&&
operator|(
name|colorbuffer
operator|->
name|id
argument_list|()
operator|==
name|previousAttachment
operator|->
name|id
argument_list|()
operator|&&
name|colorbuffer
operator|->
name|type
argument_list|()
operator|==
name|previousAttachment
operator|->
name|type
argument_list|()
operator|)
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
block|}
block|}
else|else
block|{
name|width
operator|=
name|colorbuffer
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|height
operator|=
name|colorbuffer
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|samples
operator|=
name|colorbuffer
operator|->
name|getSamples
argument_list|()
expr_stmt|;
name|colorbufferSize
operator|=
name|gl
operator|::
name|GetPixelBytes
argument_list|(
name|colorbuffer
operator|->
name|getInternalFormat
argument_list|()
argument_list|)
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|mDepthbuffer
condition|)
block|{
if|if
condition|(
name|mDepthbuffer
operator|->
name|getWidth
argument_list|()
operator|==
literal|0
operator|||
name|mDepthbuffer
operator|->
name|getHeight
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
name|GLenum
name|internalformat
init|=
name|mDepthbuffer
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
comment|// TODO(geofflang): use context's texture caps
specifier|const
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|mRenderer
operator|->
name|getRendererTextureCaps
argument_list|()
operator|.
name|get
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|mDepthbuffer
operator|->
name|isTexture
argument_list|()
condition|)
block|{
name|GLenum
name|internalformat
init|=
name|mDepthbuffer
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
comment|// depth texture attachments require OES/ANGLE_depth_texture
comment|// TODO(geofflang): use context's extensions
if|if
condition|(
operator|!
name|mRenderer
operator|->
name|getRendererExtensions
argument_list|()
operator|.
name|depthTextures
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
if|if
condition|(
name|gl
operator|::
name|GetDepthBits
argument_list|(
name|internalformat
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
operator|||
name|gl
operator|::
name|GetDepthBits
argument_list|(
name|internalformat
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
if|if
condition|(
name|missingAttachment
condition|)
block|{
name|width
operator|=
name|mDepthbuffer
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|height
operator|=
name|mDepthbuffer
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|samples
operator|=
name|mDepthbuffer
operator|->
name|getSamples
argument_list|()
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|width
operator|!=
name|mDepthbuffer
operator|->
name|getWidth
argument_list|()
operator|||
name|height
operator|!=
name|mDepthbuffer
operator|->
name|getHeight
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
return|;
block|}
elseif|else
if|if
condition|(
name|samples
operator|!=
name|mDepthbuffer
operator|->
name|getSamples
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
return|;
block|}
block|}
if|if
condition|(
name|mStencilbuffer
condition|)
block|{
if|if
condition|(
name|mStencilbuffer
operator|->
name|getWidth
argument_list|()
operator|==
literal|0
operator|||
name|mStencilbuffer
operator|->
name|getHeight
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
name|GLenum
name|internalformat
init|=
name|mStencilbuffer
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
comment|// TODO(geofflang): use context's texture caps
specifier|const
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|mRenderer
operator|->
name|getRendererTextureCaps
argument_list|()
operator|.
name|get
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|mStencilbuffer
operator|->
name|isTexture
argument_list|()
condition|)
block|{
name|GLenum
name|internalformat
init|=
name|mStencilbuffer
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
comment|// texture stencil attachments come along as part
comment|// of OES_packed_depth_stencil + OES/ANGLE_depth_texture
comment|// TODO(geofflang): use context's extensions
if|if
condition|(
operator|!
name|mRenderer
operator|->
name|getRendererExtensions
argument_list|()
operator|.
name|depthTextures
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
if|if
condition|(
name|gl
operator|::
name|GetStencilBits
argument_list|(
name|internalformat
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
operator|||
name|gl
operator|::
name|GetStencilBits
argument_list|(
name|internalformat
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
return|;
block|}
block|}
if|if
condition|(
name|missingAttachment
condition|)
block|{
name|width
operator|=
name|mStencilbuffer
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|height
operator|=
name|mStencilbuffer
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|samples
operator|=
name|mStencilbuffer
operator|->
name|getSamples
argument_list|()
expr_stmt|;
name|missingAttachment
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|width
operator|!=
name|mStencilbuffer
operator|->
name|getWidth
argument_list|()
operator|||
name|height
operator|!=
name|mStencilbuffer
operator|->
name|getHeight
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
return|;
block|}
elseif|else
if|if
condition|(
name|samples
operator|!=
name|mStencilbuffer
operator|->
name|getSamples
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
return|;
block|}
block|}
comment|// if we have both a depth and stencil buffer, they must refer to the same object
comment|// since we only support packed_depth_stencil and not separate depth and stencil
if|if
condition|(
name|mDepthbuffer
operator|&&
name|mStencilbuffer
operator|&&
operator|!
name|hasValidDepthStencil
argument_list|()
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_UNSUPPORTED
return|;
block|}
comment|// we need to have at least one attachment to be complete
if|if
condition|(
name|missingAttachment
condition|)
block|{
return|return
name|GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
return|;
block|}
return|return
name|GL_FRAMEBUFFER_COMPLETE
return|;
block|}
DECL|function|DefaultFramebuffer
name|DefaultFramebuffer
operator|::
name|DefaultFramebuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|Colorbuffer
modifier|*
name|colorbuffer
parameter_list|,
name|DepthStencilbuffer
modifier|*
name|depthStencil
parameter_list|)
member_init_list|:
name|Framebuffer
argument_list|(
name|renderer
argument_list|,
literal|0
argument_list|)
block|{
name|Renderbuffer
modifier|*
name|colorRenderbuffer
init|=
operator|new
name|Renderbuffer
argument_list|(
literal|0
argument_list|,
name|colorbuffer
argument_list|)
decl_stmt|;
name|mColorbuffers
index|[
literal|0
index|]
operator|=
operator|new
name|RenderbufferAttachment
argument_list|(
name|colorRenderbuffer
argument_list|)
expr_stmt|;
name|Renderbuffer
modifier|*
name|depthStencilBuffer
init|=
operator|new
name|Renderbuffer
argument_list|(
literal|0
argument_list|,
name|depthStencil
argument_list|)
decl_stmt|;
comment|// Make a new attachment objects to ensure we do not double-delete
comment|// See angle issue 686
name|mDepthbuffer
operator|=
operator|(
name|depthStencilBuffer
operator|->
name|getDepthSize
argument_list|()
operator|!=
literal|0
condition|?
operator|new
name|RenderbufferAttachment
argument_list|(
name|depthStencilBuffer
argument_list|)
else|:
name|NULL
operator|)
expr_stmt|;
name|mStencilbuffer
operator|=
operator|(
name|depthStencilBuffer
operator|->
name|getStencilSize
argument_list|()
operator|!=
literal|0
condition|?
operator|new
name|RenderbufferAttachment
argument_list|(
name|depthStencilBuffer
argument_list|)
else|:
name|NULL
operator|)
expr_stmt|;
name|mDrawBufferStates
index|[
literal|0
index|]
operator|=
name|GL_BACK
expr_stmt|;
name|mReadBufferState
operator|=
name|GL_BACK
expr_stmt|;
block|}
DECL|function|getSamples
name|int
name|Framebuffer
operator|::
name|getSamples
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|completeness
argument_list|()
operator|==
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
comment|// for a complete framebuffer, all attachments must have the same sample count
comment|// in this case return the first nonzero sample size
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
if|if
condition|(
name|mColorbuffers
index|[
name|colorAttachment
index|]
condition|)
block|{
return|return
name|mColorbuffers
index|[
name|colorAttachment
index|]
operator|->
name|getSamples
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|function|hasValidDepthStencil
name|bool
name|Framebuffer
operator|::
name|hasValidDepthStencil
parameter_list|()
specifier|const
block|{
comment|// A valid depth-stencil attachment has the same resource bound to both the
comment|// depth and stencil attachment points.
return|return
operator|(
name|mDepthbuffer
operator|&&
name|mStencilbuffer
operator|&&
name|mDepthbuffer
operator|->
name|type
argument_list|()
operator|==
name|mStencilbuffer
operator|->
name|type
argument_list|()
operator|&&
name|mDepthbuffer
operator|->
name|id
argument_list|()
operator|==
name|mStencilbuffer
operator|->
name|id
argument_list|()
operator|)
return|;
block|}
DECL|function|completeness
name|GLenum
name|DefaultFramebuffer
operator|::
name|completeness
parameter_list|()
specifier|const
block|{
comment|// The default framebuffer *must* always be complete, though it may not be
comment|// subject to the same rules as application FBOs. ie, it could have 0x0 size.
return|return
name|GL_FRAMEBUFFER_COMPLETE
return|;
block|}
DECL|function|getAttachment
name|FramebufferAttachment
modifier|*
name|DefaultFramebuffer
operator|::
name|getAttachment
parameter_list|(
name|GLenum
name|attachment
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|attachment
condition|)
block|{
case|case
name|GL_BACK
case|:
return|return
name|getColorbuffer
argument_list|(
literal|0
argument_list|)
return|;
case|case
name|GL_DEPTH
case|:
return|return
name|getDepthbuffer
argument_list|()
return|;
case|case
name|GL_STENCIL
case|:
return|return
name|getStencilbuffer
argument_list|()
return|;
case|case
name|GL_DEPTH_STENCIL
case|:
return|return
name|getDepthStencilBuffer
argument_list|()
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|NULL
return|;
block|}
block|}
block|}
end_namespace
end_unit
