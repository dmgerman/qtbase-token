begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// libGLESv2.cpp: Implements the exported OpenGL ES 2.0 functions.
end_comment
begin_undef
DECL|macro|GL_APICALL
undef|#
directive|undef
name|GL_APICALL
end_undef
begin_define
DECL|macro|GL_APICALL
define|#
directive|define
name|GL_APICALL
end_define
begin_define
DECL|macro|GL_GLEXT_PROTOTYPES
define|#
directive|define
name|GL_GLEXT_PROTOTYPES
end_define
begin_include
include|#
directive|include
file|"common/version.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Buffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Fence.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Program.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/ProgramBinary.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Query.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/VertexArray.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/VertexAttribute.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/TransformFeedback.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/validationES.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/validationES2.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/validationES3.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/queryconversions.h"
end_include
begin_extern
extern|extern
literal|"C"
block|{
comment|// OpenGL ES 2.0 functions
DECL|function|glActiveTexture
name|void
name|GL_APIENTRY
name|glActiveTexture
parameter_list|(
name|GLenum
name|texture
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum texture = 0x%X)"
argument_list|,
name|texture
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|texture
argument_list|<
name|GL_TEXTURE0
operator|||
name|texture
argument_list|>
name|GL_TEXTURE0
operator|+
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxCombinedTextureImageUnits
operator|-
literal|1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setActiveSampler
argument_list|(
name|texture
operator|-
name|GL_TEXTURE0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glAttachShader
name|void
name|GL_APIENTRY
name|glAttachShader
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLuint shader = %d)"
argument_list|,
name|program
argument_list|,
name|shader
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Shader
modifier|*
name|shaderObject
init|=
name|context
operator|->
name|getShader
argument_list|(
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getProgram
argument_list|(
name|shader
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|programObject
operator|->
name|attachShader
argument_list|(
name|shaderObject
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glBeginQueryEXT
name|void
name|GL_APIENTRY
name|glBeginQueryEXT
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint %d)"
argument_list|,
name|target
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateBeginQuery
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|id
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|beginQuery
argument_list|(
name|target
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glBindAttribLocation
name|void
name|GL_APIENTRY
name|glBindAttribLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLuint index = %d, const GLchar* name = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|index
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|strncmp
argument_list|(
name|name
argument_list|,
literal|"gl_"
argument_list|,
literal|3
argument_list|)
operator|==
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|programObject
operator|->
name|bindAttributeLocation
argument_list|(
name|index
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glBindBuffer
name|void
name|GL_APIENTRY
name|glBindBuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|buffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint buffer = %d)"
argument_list|,
name|target
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_ARRAY_BUFFER
case|:
name|context
operator|->
name|bindArrayBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_ELEMENT_ARRAY_BUFFER
case|:
name|context
operator|->
name|bindElementArrayBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_COPY_READ_BUFFER
case|:
name|context
operator|->
name|bindCopyReadBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_COPY_WRITE_BUFFER
case|:
name|context
operator|->
name|bindCopyWriteBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_PIXEL_PACK_BUFFER
case|:
name|context
operator|->
name|bindPixelPackBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_PIXEL_UNPACK_BUFFER
case|:
name|context
operator|->
name|bindPixelUnpackBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_UNIFORM_BUFFER
case|:
name|context
operator|->
name|bindGenericUniformBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER
case|:
name|context
operator|->
name|bindGenericTransformFeedbackBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
return|return;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glBindFramebuffer
name|void
name|GL_APIENTRY
name|glBindFramebuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|framebuffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint framebuffer = %d)"
argument_list|,
name|target
argument_list|,
name|framebuffer
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidFramebufferTarget
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|target
operator|==
name|GL_READ_FRAMEBUFFER_ANGLE
operator|||
name|target
operator|==
name|GL_FRAMEBUFFER
condition|)
block|{
name|context
operator|->
name|bindReadFramebuffer
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|target
operator|==
name|GL_DRAW_FRAMEBUFFER_ANGLE
operator|||
name|target
operator|==
name|GL_FRAMEBUFFER
condition|)
block|{
name|context
operator|->
name|bindDrawFramebuffer
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glBindRenderbuffer
name|void
name|GL_APIENTRY
name|glBindRenderbuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint renderbuffer = %d)"
argument_list|,
name|target
argument_list|,
name|renderbuffer
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|target
operator|!=
name|GL_RENDERBUFFER
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindRenderbuffer
argument_list|(
name|renderbuffer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glBindTexture
name|void
name|GL_APIENTRY
name|glBindTexture
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|texture
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint texture = %d)"
argument_list|,
name|target
argument_list|,
name|texture
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Texture
modifier|*
name|textureObject
init|=
name|context
operator|->
name|getTexture
argument_list|(
name|texture
argument_list|)
decl_stmt|;
if|if
condition|(
name|textureObject
operator|&&
name|textureObject
operator|->
name|getTarget
argument_list|()
operator|!=
name|target
operator|&&
name|texture
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
case|case
name|GL_TEXTURE_CUBE_MAP
case|:
break|break;
case|case
name|GL_TEXTURE_3D
case|:
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindTexture
argument_list|(
name|target
argument_list|,
name|texture
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glBlendColor
name|void
name|GL_APIENTRY
name|glBlendColor
parameter_list|(
name|GLclampf
name|red
parameter_list|,
name|GLclampf
name|green
parameter_list|,
name|GLclampf
name|blue
parameter_list|,
name|GLclampf
name|alpha
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLclampf red = %f, GLclampf green = %f, GLclampf blue = %f, GLclampf alpha = %f)"
argument_list|,
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setBlendColor
argument_list|(
name|gl
operator|::
name|clamp01
argument_list|(
name|red
argument_list|)
argument_list|,
name|gl
operator|::
name|clamp01
argument_list|(
name|green
argument_list|)
argument_list|,
name|gl
operator|::
name|clamp01
argument_list|(
name|blue
argument_list|)
argument_list|,
name|gl
operator|::
name|clamp01
argument_list|(
name|alpha
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glBlendEquation
name|void
name|GL_APIENTRY
name|glBlendEquation
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
name|glBlendEquationSeparate
argument_list|(
name|mode
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
DECL|function|glBlendEquationSeparate
name|void
name|GL_APIENTRY
name|glBlendEquationSeparate
parameter_list|(
name|GLenum
name|modeRGB
parameter_list|,
name|GLenum
name|modeAlpha
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum modeRGB = 0x%X, GLenum modeAlpha = 0x%X)"
argument_list|,
name|modeRGB
argument_list|,
name|modeAlpha
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|modeRGB
condition|)
block|{
case|case
name|GL_FUNC_ADD
case|:
case|case
name|GL_FUNC_SUBTRACT
case|:
case|case
name|GL_FUNC_REVERSE_SUBTRACT
case|:
case|case
name|GL_MIN
case|:
case|case
name|GL_MAX
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|modeAlpha
condition|)
block|{
case|case
name|GL_FUNC_ADD
case|:
case|case
name|GL_FUNC_SUBTRACT
case|:
case|case
name|GL_FUNC_REVERSE_SUBTRACT
case|:
case|case
name|GL_MIN
case|:
case|case
name|GL_MAX
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setBlendEquation
argument_list|(
name|modeRGB
argument_list|,
name|modeAlpha
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glBlendFunc
name|void
name|GL_APIENTRY
name|glBlendFunc
parameter_list|(
name|GLenum
name|sfactor
parameter_list|,
name|GLenum
name|dfactor
parameter_list|)
block|{
name|glBlendFuncSeparate
argument_list|(
name|sfactor
argument_list|,
name|dfactor
argument_list|,
name|sfactor
argument_list|,
name|dfactor
argument_list|)
expr_stmt|;
block|}
DECL|function|glBlendFuncSeparate
name|void
name|GL_APIENTRY
name|glBlendFuncSeparate
parameter_list|(
name|GLenum
name|srcRGB
parameter_list|,
name|GLenum
name|dstRGB
parameter_list|,
name|GLenum
name|srcAlpha
parameter_list|,
name|GLenum
name|dstAlpha
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum srcRGB = 0x%X, GLenum dstRGB = 0x%X, GLenum srcAlpha = 0x%X, GLenum dstAlpha = 0x%X)"
argument_list|,
name|srcRGB
argument_list|,
name|dstRGB
argument_list|,
name|srcAlpha
argument_list|,
name|dstAlpha
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|srcRGB
condition|)
block|{
case|case
name|GL_ZERO
case|:
case|case
name|GL_ONE
case|:
case|case
name|GL_SRC_COLOR
case|:
case|case
name|GL_ONE_MINUS_SRC_COLOR
case|:
case|case
name|GL_DST_COLOR
case|:
case|case
name|GL_ONE_MINUS_DST_COLOR
case|:
case|case
name|GL_SRC_ALPHA
case|:
case|case
name|GL_ONE_MINUS_SRC_ALPHA
case|:
case|case
name|GL_DST_ALPHA
case|:
case|case
name|GL_ONE_MINUS_DST_ALPHA
case|:
case|case
name|GL_CONSTANT_COLOR
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_COLOR
case|:
case|case
name|GL_CONSTANT_ALPHA
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_ALPHA
case|:
case|case
name|GL_SRC_ALPHA_SATURATE
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|dstRGB
condition|)
block|{
case|case
name|GL_ZERO
case|:
case|case
name|GL_ONE
case|:
case|case
name|GL_SRC_COLOR
case|:
case|case
name|GL_ONE_MINUS_SRC_COLOR
case|:
case|case
name|GL_DST_COLOR
case|:
case|case
name|GL_ONE_MINUS_DST_COLOR
case|:
case|case
name|GL_SRC_ALPHA
case|:
case|case
name|GL_ONE_MINUS_SRC_ALPHA
case|:
case|case
name|GL_DST_ALPHA
case|:
case|case
name|GL_ONE_MINUS_DST_ALPHA
case|:
case|case
name|GL_CONSTANT_COLOR
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_COLOR
case|:
case|case
name|GL_CONSTANT_ALPHA
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_ALPHA
case|:
break|break;
case|case
name|GL_SRC_ALPHA_SATURATE
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|srcAlpha
condition|)
block|{
case|case
name|GL_ZERO
case|:
case|case
name|GL_ONE
case|:
case|case
name|GL_SRC_COLOR
case|:
case|case
name|GL_ONE_MINUS_SRC_COLOR
case|:
case|case
name|GL_DST_COLOR
case|:
case|case
name|GL_ONE_MINUS_DST_COLOR
case|:
case|case
name|GL_SRC_ALPHA
case|:
case|case
name|GL_ONE_MINUS_SRC_ALPHA
case|:
case|case
name|GL_DST_ALPHA
case|:
case|case
name|GL_ONE_MINUS_DST_ALPHA
case|:
case|case
name|GL_CONSTANT_COLOR
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_COLOR
case|:
case|case
name|GL_CONSTANT_ALPHA
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_ALPHA
case|:
case|case
name|GL_SRC_ALPHA_SATURATE
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|dstAlpha
condition|)
block|{
case|case
name|GL_ZERO
case|:
case|case
name|GL_ONE
case|:
case|case
name|GL_SRC_COLOR
case|:
case|case
name|GL_ONE_MINUS_SRC_COLOR
case|:
case|case
name|GL_DST_COLOR
case|:
case|case
name|GL_ONE_MINUS_DST_COLOR
case|:
case|case
name|GL_SRC_ALPHA
case|:
case|case
name|GL_ONE_MINUS_SRC_ALPHA
case|:
case|case
name|GL_DST_ALPHA
case|:
case|case
name|GL_ONE_MINUS_DST_ALPHA
case|:
case|case
name|GL_CONSTANT_COLOR
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_COLOR
case|:
case|case
name|GL_CONSTANT_ALPHA
case|:
case|case
name|GL_ONE_MINUS_CONSTANT_ALPHA
case|:
break|break;
case|case
name|GL_SRC_ALPHA_SATURATE
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|bool
name|constantColorUsed
init|=
operator|(
name|srcRGB
operator|==
name|GL_CONSTANT_COLOR
operator|||
name|srcRGB
operator|==
name|GL_ONE_MINUS_CONSTANT_COLOR
operator|||
name|dstRGB
operator|==
name|GL_CONSTANT_COLOR
operator|||
name|dstRGB
operator|==
name|GL_ONE_MINUS_CONSTANT_COLOR
operator|)
decl_stmt|;
name|bool
name|constantAlphaUsed
init|=
operator|(
name|srcRGB
operator|==
name|GL_CONSTANT_ALPHA
operator|||
name|srcRGB
operator|==
name|GL_ONE_MINUS_CONSTANT_ALPHA
operator|||
name|dstRGB
operator|==
name|GL_CONSTANT_ALPHA
operator|||
name|dstRGB
operator|==
name|GL_ONE_MINUS_CONSTANT_ALPHA
operator|)
decl_stmt|;
if|if
condition|(
name|constantColorUsed
operator|&&
name|constantAlphaUsed
condition|)
block|{
name|ERR
argument_list|(
literal|"Simultaneous use of GL_CONSTANT_ALPHA/GL_ONE_MINUS_CONSTANT_ALPHA and GL_CONSTANT_COLOR/GL_ONE_MINUS_CONSTANT_COLOR invalid under WebGL"
argument_list|)
expr_stmt|;
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setBlendFactors
argument_list|(
name|srcRGB
argument_list|,
name|dstRGB
argument_list|,
name|srcAlpha
argument_list|,
name|dstAlpha
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glBufferData
name|void
name|GL_APIENTRY
name|glBufferData
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|data
parameter_list|,
name|GLenum
name|usage
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizeiptr size = %d, const GLvoid* data = 0x%0.8p, GLenum usage = %d)"
argument_list|,
name|target
argument_list|,
name|size
argument_list|,
name|data
argument_list|,
name|usage
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|size
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|usage
condition|)
block|{
case|case
name|GL_STREAM_DRAW
case|:
case|case
name|GL_STATIC_DRAW
case|:
case|case
name|GL_DYNAMIC_DRAW
case|:
break|break;
case|case
name|GL_STREAM_READ
case|:
case|case
name|GL_STREAM_COPY
case|:
case|case
name|GL_STATIC_READ
case|:
case|case
name|GL_STATIC_COPY
case|:
case|case
name|GL_DYNAMIC_READ
case|:
case|case
name|GL_DYNAMIC_COPY
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buffer
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|buffer
operator|->
name|bufferData
argument_list|(
name|data
argument_list|,
name|size
argument_list|,
name|usage
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glBufferSubData
name|void
name|GL_APIENTRY
name|glBufferSubData
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr size = %d, const GLvoid* data = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|offset
argument_list|,
name|size
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|size
operator|<
literal|0
operator|||
name|offset
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|data
operator|==
name|NULL
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buffer
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|buffer
operator|->
name|isMapped
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Check for possible overflow of size + offset
if|if
condition|(
operator|!
name|rx
operator|::
name|IsUnsignedAdditionSafe
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|size
argument_list|,
name|offset
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|size
operator|+
name|offset
operator|>
name|buffer
operator|->
name|getSize
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|buffer
operator|->
name|bufferSubData
argument_list|(
name|data
argument_list|,
name|size
argument_list|,
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glCheckFramebufferStatus
name|GLenum
name|GL_APIENTRY
name|glCheckFramebufferStatus
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X)"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidFramebufferTarget
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetFramebuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
return|return
name|framebuffer
operator|->
name|completeness
argument_list|(
name|context
operator|->
name|getData
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|glClear
name|void
name|GL_APIENTRY
name|glClear
parameter_list|(
name|GLbitfield
name|mask
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLbitfield mask = 0x%X)"
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebufferObject
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|framebufferObject
argument_list|)
expr_stmt|;
if|if
condition|(
name|framebufferObject
operator|->
name|completeness
argument_list|(
name|context
operator|->
name|getData
argument_list|()
argument_list|)
operator|!=
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_FRAMEBUFFER_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|(
name|mask
operator|&
operator|~
operator|(
name|GL_COLOR_BUFFER_BIT
operator||
name|GL_DEPTH_BUFFER_BIT
operator||
name|GL_STENCIL_BUFFER_BIT
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|clear
argument_list|(
name|mask
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glClearColor
name|void
name|GL_APIENTRY
name|glClearColor
parameter_list|(
name|GLclampf
name|red
parameter_list|,
name|GLclampf
name|green
parameter_list|,
name|GLclampf
name|blue
parameter_list|,
name|GLclampf
name|alpha
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLclampf red = %f, GLclampf green = %f, GLclampf blue = %f, GLclampf alpha = %f)"
argument_list|,
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setClearColor
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glClearDepthf
name|void
name|GL_APIENTRY
name|glClearDepthf
parameter_list|(
name|GLclampf
name|depth
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLclampf depth = %f)"
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setClearDepth
argument_list|(
name|depth
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glClearStencil
name|void
name|GL_APIENTRY
name|glClearStencil
parameter_list|(
name|GLint
name|s
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint s = %d)"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setClearStencil
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glColorMask
name|void
name|GL_APIENTRY
name|glColorMask
parameter_list|(
name|GLboolean
name|red
parameter_list|,
name|GLboolean
name|green
parameter_list|,
name|GLboolean
name|blue
parameter_list|,
name|GLboolean
name|alpha
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLboolean red = %d, GLboolean green = %u, GLboolean blue = %u, GLboolean alpha = %u)"
argument_list|,
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|,
name|alpha
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setColorMask
argument_list|(
name|red
operator|==
name|GL_TRUE
argument_list|,
name|green
operator|==
name|GL_TRUE
argument_list|,
name|blue
operator|==
name|GL_TRUE
argument_list|,
name|alpha
operator|==
name|GL_TRUE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glCompileShader
name|void
name|GL_APIENTRY
name|glCompileShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d)"
argument_list|,
name|shader
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Shader
modifier|*
name|shaderObject
init|=
name|context
operator|->
name|getShader
argument_list|(
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getProgram
argument_list|(
name|shader
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|shaderObject
operator|->
name|compile
argument_list|(
name|context
operator|->
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glCompressedTexImage2D
name|void
name|GL_APIENTRY
name|glCompressedTexImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, GLsizei width = %d, "
literal|"GLsizei height = %d, GLint border = %d, GLsizei imageSize = %d, const GLvoid* data = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
operator|&&
operator|!
name|ValidateES2TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|GL_NONE
argument_list|,
name|GL_NONE
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|&&
operator|!
name|ValidateES3TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|border
argument_list|,
name|GL_NONE
argument_list|,
name|GL_NONE
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageSize
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|imageSize
argument_list|)
operator|!=
name|formatInfo
operator|.
name|computeBlockSize
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
block|{
name|gl
operator|::
name|Texture2D
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture2D
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|setCompressedImage
argument_list|(
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|imageSize
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
case|:
block|{
name|gl
operator|::
name|TextureCubeMap
modifier|*
name|texture
init|=
name|context
operator|->
name|getTextureCubeMap
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|setCompressedImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|imageSize
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glCompressedTexSubImage2D
name|void
name|GL_APIENTRY
name|glCompressedTexSubImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
literal|"GLsizei width = %d, GLsizei height = %d, GLenum format = 0x%X, "
literal|"GLsizei imageSize = %d, const GLvoid* data = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
operator|&&
operator|!
name|ValidateES2TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|,
name|GL_NONE
argument_list|,
name|GL_NONE
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|&&
operator|!
name|ValidateES3TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|GL_NONE
argument_list|,
name|GL_NONE
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageSize
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|imageSize
argument_list|)
operator|!=
name|formatInfo
operator|.
name|computeBlockSize
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
block|{
name|gl
operator|::
name|Texture2D
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture2D
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|subImageCompressed
argument_list|(
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
case|:
block|{
name|gl
operator|::
name|TextureCubeMap
modifier|*
name|texture
init|=
name|context
operator|->
name|getTextureCubeMap
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|subImageCompressed
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glCopyTexImage2D
name|void
name|GL_APIENTRY
name|glCopyTexImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, "
literal|"GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d, GLint border = %d)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
operator|&&
operator|!
name|ValidateES2CopyTexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|&&
operator|!
name|ValidateES3CopyTexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
block|{
name|gl
operator|::
name|Texture2D
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture2D
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|copyImage
argument_list|(
name|level
argument_list|,
name|internalformat
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|framebuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
case|:
block|{
name|gl
operator|::
name|TextureCubeMap
modifier|*
name|texture
init|=
name|context
operator|->
name|getTextureCubeMap
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|copyImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|framebuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glCopyTexSubImage2D
name|void
name|GL_APIENTRY
name|glCopyTexSubImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
literal|"GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
operator|&&
operator|!
name|ValidateES2CopyTexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|true
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|&&
operator|!
name|ValidateES3CopyTexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|true
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
block|{
name|gl
operator|::
name|Texture2D
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture2D
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|copySubImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|framebuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
case|:
block|{
name|gl
operator|::
name|TextureCubeMap
modifier|*
name|texture
init|=
name|context
operator|->
name|getTextureCubeMap
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|copySubImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|framebuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glCreateProgram
name|GLuint
name|GL_APIENTRY
name|glCreateProgram
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
return|return
name|context
operator|->
name|createProgram
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|glCreateShader
name|GLuint
name|GL_APIENTRY
name|glCreateShader
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum type = 0x%X)"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_FRAGMENT_SHADER
case|:
case|case
name|GL_VERTEX_SHADER
case|:
return|return
name|context
operator|->
name|createShader
argument_list|(
name|type
argument_list|)
return|;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|function|glCullFace
name|void
name|GL_APIENTRY
name|glCullFace
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X)"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|GL_FRONT
case|:
case|case
name|GL_BACK
case|:
case|case
name|GL_FRONT_AND_BACK
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setCullMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glDeleteBuffers
name|void
name|GL_APIENTRY
name|glDeleteBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|buffers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* buffers = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|->
name|deleteBuffer
argument_list|(
name|buffers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glDeleteFencesNV
name|void
name|GL_APIENTRY
name|glDeleteFencesNV
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|fences
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* fences = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|fences
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|->
name|deleteFenceNV
argument_list|(
name|fences
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glDeleteFramebuffers
name|void
name|GL_APIENTRY
name|glDeleteFramebuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* framebuffers = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|framebuffers
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|framebuffers
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|deleteFramebuffer
argument_list|(
name|framebuffers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|glDeleteProgram
name|void
name|GL_APIENTRY
name|glDeleteProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d)"
argument_list|,
name|program
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|program
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|context
operator|->
name|deleteProgram
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glDeleteQueriesEXT
name|void
name|GL_APIENTRY
name|glDeleteQueriesEXT
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint *ids = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|->
name|deleteQuery
argument_list|(
name|ids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glDeleteRenderbuffers
name|void
name|GL_APIENTRY
name|glDeleteRenderbuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* renderbuffers = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|renderbuffers
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|->
name|deleteRenderbuffer
argument_list|(
name|renderbuffers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glDeleteShader
name|void
name|GL_APIENTRY
name|glDeleteShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d)"
argument_list|,
name|shader
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|shader
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|getShader
argument_list|(
name|shader
argument_list|)
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getProgram
argument_list|(
name|shader
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|context
operator|->
name|deleteShader
argument_list|(
name|shader
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glDeleteTextures
name|void
name|GL_APIENTRY
name|glDeleteTextures
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|textures
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* textures = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|textures
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|textures
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|deleteTexture
argument_list|(
name|textures
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|glDepthFunc
name|void
name|GL_APIENTRY
name|glDepthFunc
parameter_list|(
name|GLenum
name|func
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum func = 0x%X)"
argument_list|,
name|func
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|func
condition|)
block|{
case|case
name|GL_NEVER
case|:
case|case
name|GL_ALWAYS
case|:
case|case
name|GL_LESS
case|:
case|case
name|GL_LEQUAL
case|:
case|case
name|GL_EQUAL
case|:
case|case
name|GL_GREATER
case|:
case|case
name|GL_GEQUAL
case|:
case|case
name|GL_NOTEQUAL
case|:
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setDepthFunc
argument_list|(
name|func
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glDepthMask
name|void
name|GL_APIENTRY
name|glDepthMask
parameter_list|(
name|GLboolean
name|flag
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLboolean flag = %u)"
argument_list|,
name|flag
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setDepthMask
argument_list|(
name|flag
operator|!=
name|GL_FALSE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glDepthRangef
name|void
name|GL_APIENTRY
name|glDepthRangef
parameter_list|(
name|GLclampf
name|zNear
parameter_list|,
name|GLclampf
name|zFar
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLclampf zNear = %f, GLclampf zFar = %f)"
argument_list|,
name|zNear
argument_list|,
name|zFar
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setDepthRange
argument_list|(
name|zNear
argument_list|,
name|zFar
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glDetachShader
name|void
name|GL_APIENTRY
name|glDetachShader
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|shader
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLuint shader = %d)"
argument_list|,
name|program
argument_list|,
name|shader
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Shader
modifier|*
name|shaderObject
init|=
name|context
operator|->
name|getShader
argument_list|(
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
name|gl
operator|::
name|Shader
modifier|*
name|shaderByProgramHandle
decl_stmt|;
name|shaderByProgramHandle
operator|=
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shaderByProgramHandle
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
name|gl
operator|::
name|Program
modifier|*
name|programByShaderHandle
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programByShaderHandle
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|programObject
operator|->
name|detachShader
argument_list|(
name|shaderObject
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glDisable
name|void
name|GL_APIENTRY
name|glDisable
parameter_list|(
name|GLenum
name|cap
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum cap = 0x%X)"
argument_list|,
name|cap
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidCap
argument_list|(
name|context
argument_list|,
name|cap
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setEnableFeature
argument_list|(
name|cap
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glDisableVertexAttribArray
name|void
name|GL_APIENTRY
name|glDisableVertexAttribArray
parameter_list|(
name|GLuint
name|index
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d)"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setEnableVertexAttribArray
argument_list|(
name|index
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glDrawArrays
name|void
name|GL_APIENTRY
name|glDrawArrays
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLint
name|first
parameter_list|,
name|GLsizei
name|count
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X, GLint first = %d, GLsizei count = %d)"
argument_list|,
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateDrawArrays
argument_list|(
name|context
argument_list|,
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
literal|0
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|drawArrays
argument_list|(
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glDrawArraysInstancedANGLE
name|void
name|GL_APIENTRY
name|glDrawArraysInstancedANGLE
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLint
name|first
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|primcount
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X, GLint first = %d, GLsizei count = %d, GLsizei primcount = %d)"
argument_list|,
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
name|primcount
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateDrawArraysInstancedANGLE
argument_list|(
name|context
argument_list|,
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
name|primcount
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|drawArrays
argument_list|(
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
name|primcount
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glDrawElements
name|void
name|GL_APIENTRY
name|glDrawElements
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X, GLsizei count = %d, GLenum type = 0x%X, const GLvoid* indices = 0x%0.8p)"
argument_list|,
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|rx
operator|::
name|RangeUI
name|indexRange
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateDrawElements
argument_list|(
name|context
argument_list|,
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
literal|0
argument_list|,
operator|&
name|indexRange
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|drawElements
argument_list|(
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
literal|0
argument_list|,
name|indexRange
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glDrawElementsInstancedANGLE
name|void
name|GL_APIENTRY
name|glDrawElementsInstancedANGLE
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|,
name|GLsizei
name|primcount
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X, GLsizei count = %d, GLenum type = 0x%X, const GLvoid* indices = 0x%0.8p, GLsizei primcount = %d)"
argument_list|,
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
name|primcount
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|rx
operator|::
name|RangeUI
name|indexRange
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateDrawElementsInstancedANGLE
argument_list|(
name|context
argument_list|,
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
name|primcount
argument_list|,
operator|&
name|indexRange
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|drawElements
argument_list|(
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
name|primcount
argument_list|,
name|indexRange
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glEnable
name|void
name|GL_APIENTRY
name|glEnable
parameter_list|(
name|GLenum
name|cap
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum cap = 0x%X)"
argument_list|,
name|cap
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidCap
argument_list|(
name|context
argument_list|,
name|cap
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setEnableFeature
argument_list|(
name|cap
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glEnableVertexAttribArray
name|void
name|GL_APIENTRY
name|glEnableVertexAttribArray
parameter_list|(
name|GLuint
name|index
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d)"
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setEnableVertexAttribArray
argument_list|(
name|index
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glEndQueryEXT
name|void
name|GL_APIENTRY
name|glEndQueryEXT
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"GLenum target = 0x%X)"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateEndQuery
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|endQuery
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glFinishFenceNV
name|void
name|GL_APIENTRY
name|glFinishFenceNV
parameter_list|(
name|GLuint
name|fence
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint fence = %d)"
argument_list|,
name|fence
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|FenceNV
modifier|*
name|fenceObject
init|=
name|context
operator|->
name|getFenceNV
argument_list|(
name|fence
argument_list|)
decl_stmt|;
if|if
condition|(
name|fenceObject
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|fenceObject
operator|->
name|isFence
argument_list|()
operator|!=
name|GL_TRUE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|fenceObject
operator|->
name|finishFence
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|glFinish
name|void
name|GL_APIENTRY
name|glFinish
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|sync
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glFlush
name|void
name|GL_APIENTRY
name|glFlush
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|sync
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glFramebufferRenderbuffer
name|void
name|GL_APIENTRY
name|glFramebufferRenderbuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|renderbuffertarget
parameter_list|,
name|GLuint
name|renderbuffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum attachment = 0x%X, GLenum renderbuffertarget = 0x%X, "
literal|"GLuint renderbuffer = %d)"
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|renderbuffertarget
argument_list|,
name|renderbuffer
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidFramebufferTarget
argument_list|(
name|target
argument_list|)
operator|||
operator|(
name|renderbuffertarget
operator|!=
name|GL_RENDERBUFFER
operator|&&
name|renderbuffer
operator|!=
literal|0
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidateFramebufferRenderbufferParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|renderbuffertarget
argument_list|,
name|renderbuffer
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetFramebuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|renderbuffer
operator|!=
literal|0
condition|)
block|{
name|gl
operator|::
name|Renderbuffer
modifier|*
name|renderbufferObject
init|=
name|context
operator|->
name|getRenderbuffer
argument_list|(
name|renderbuffer
argument_list|)
decl_stmt|;
name|framebuffer
operator|->
name|setRenderbufferAttachment
argument_list|(
name|attachment
argument_list|,
name|renderbufferObject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|framebuffer
operator|->
name|setNULLAttachment
argument_list|(
name|attachment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glFramebufferTexture2D
name|void
name|GL_APIENTRY
name|glFramebufferTexture2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|textarget
parameter_list|,
name|GLuint
name|texture
parameter_list|,
name|GLint
name|level
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum attachment = 0x%X, GLenum textarget = 0x%X, "
literal|"GLuint texture = %d, GLint level = %d)"
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|textarget
argument_list|,
name|texture
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateFramebufferTexture2D
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|textarget
argument_list|,
name|texture
argument_list|,
name|level
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetFramebuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|texture
operator|!=
literal|0
condition|)
block|{
name|gl
operator|::
name|Texture
modifier|*
name|textureObj
init|=
name|context
operator|->
name|getTexture
argument_list|(
name|texture
argument_list|)
decl_stmt|;
name|gl
operator|::
name|ImageIndex
name|index
argument_list|(
name|textarget
argument_list|,
name|level
argument_list|,
name|gl
operator|::
name|ImageIndex
operator|::
name|ENTIRE_LEVEL
argument_list|)
decl_stmt|;
name|framebuffer
operator|->
name|setTextureAttachment
argument_list|(
name|attachment
argument_list|,
name|textureObj
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|framebuffer
operator|->
name|setNULLAttachment
argument_list|(
name|attachment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glFrontFace
name|void
name|GL_APIENTRY
name|glFrontFace
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X)"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|GL_CW
case|:
case|case
name|GL_CCW
case|:
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setFrontFace
argument_list|(
name|mode
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGenBuffers
name|void
name|GL_APIENTRY
name|glGenBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|buffers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* buffers = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|buffers
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|buffers
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createBuffer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGenerateMipmap
name|void
name|GL_APIENTRY
name|glGenerateMipmap
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X)"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidTextureTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|texture
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLenum
name|internalFormat
init|=
name|texture
operator|->
name|getBaseLevelInternalFormat
argument_list|()
decl_stmt|;
specifier|const
name|gl
operator|::
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|context
operator|->
name|getTextureCaps
argument_list|()
operator|.
name|get
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
comment|// GenerateMipmap should not generate an INVALID_OPERATION for textures created with
comment|// unsized formats or that are color renderable and filterable.  Since we do not track if
comment|// the texture was created with sized or unsized format (only sized formats are stored),
comment|// it is not possible to make sure the the LUMA formats can generate mipmaps (they should
comment|// be able to) because they aren't color renderable.  Simply do a special case for LUMA
comment|// textures since they're the only texture format that can be created with unsized formats
comment|// that is not color renderable.  New unsized formats are unlikely to be added, since ES2
comment|// was the last version to use add them.
name|bool
name|isLUMA
init|=
name|internalFormat
operator|==
name|GL_LUMINANCE8_EXT
operator|||
name|internalFormat
operator|==
name|GL_LUMINANCE8_ALPHA8_EXT
operator|||
name|internalFormat
operator|==
name|GL_ALPHA8_EXT
decl_stmt|;
if|if
condition|(
name|formatInfo
operator|.
name|depthBits
operator|>
literal|0
operator|||
name|formatInfo
operator|.
name|stencilBits
operator|>
literal|0
operator|||
operator|!
name|formatCaps
operator|.
name|filterable
operator|||
operator|(
operator|!
name|formatCaps
operator|.
name|renderable
operator|&&
operator|!
name|isLUMA
operator|)
operator|||
name|formatInfo
operator|.
name|compressed
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// GL_EXT_sRGB does not support mipmap generation on sRGB textures
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|==
literal|2
operator|&&
name|formatInfo
operator|.
name|colorEncoding
operator|==
name|GL_SRGB
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Non-power of 2 ES2 check
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureNPOT
operator|&&
operator|(
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|texture
operator|->
name|getBaseLevelWidth
argument_list|()
argument_list|)
operator|||
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|texture
operator|->
name|getBaseLevelHeight
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|ASSERT
argument_list|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<=
literal|2
operator|&&
operator|(
name|target
operator|==
name|GL_TEXTURE_2D
operator|||
name|target
operator|==
name|GL_TEXTURE_CUBE_MAP
operator|)
argument_list|)
expr_stmt|;
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Cube completeness check
if|if
condition|(
name|target
operator|==
name|GL_TEXTURE_CUBE_MAP
condition|)
block|{
name|gl
operator|::
name|TextureCubeMap
modifier|*
name|textureCube
init|=
cast|static_cast
argument_list|<
name|gl
operator|::
name|TextureCubeMap
operator|*
argument_list|>
argument_list|(
name|texture
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|textureCube
operator|->
name|isCubeComplete
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|generateMipmaps
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGenFencesNV
name|void
name|GL_APIENTRY
name|glGenFencesNV
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|fences
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* fences = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|fences
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|fences
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createFenceNV
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGenFramebuffers
name|void
name|GL_APIENTRY
name|glGenFramebuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|framebuffers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* framebuffers = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|framebuffers
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|framebuffers
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createFramebuffer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGenQueriesEXT
name|void
name|GL_APIENTRY
name|glGenQueriesEXT
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* ids = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ids
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createQuery
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGenRenderbuffers
name|void
name|GL_APIENTRY
name|glGenRenderbuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|renderbuffers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* renderbuffers = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|renderbuffers
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|renderbuffers
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createRenderbuffer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGenTextures
name|void
name|GL_APIENTRY
name|glGenTextures
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|textures
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* textures = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|textures
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|textures
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createTexture
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGetActiveAttrib
name|void
name|GL_APIENTRY
name|glGetActiveAttrib
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLuint index = %d, GLsizei bufsize = %d, GLsizei *length = 0x%0.8p, "
literal|"GLint *size = 0x%0.8p, GLenum *type = %0.8p, GLchar *name = %0.8p)"
argument_list|,
name|program
argument_list|,
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|bufsize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|index
operator|>=
operator|(
name|GLuint
operator|)
name|programObject
operator|->
name|getActiveAttributeCount
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|programObject
operator|->
name|getActiveAttribute
argument_list|(
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetActiveUniform
name|void
name|GL_APIENTRY
name|glGetActiveUniform
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLuint index = %d, GLsizei bufsize = %d, "
literal|"GLsizei* length = 0x%0.8p, GLint* size = 0x%0.8p, GLenum* type = 0x%0.8p, GLchar* name = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|bufsize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|index
operator|>=
operator|(
name|GLuint
operator|)
name|programObject
operator|->
name|getActiveUniformCount
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|programObject
operator|->
name|getActiveUniform
argument_list|(
name|index
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetAttachedShaders
name|void
name|GL_APIENTRY
name|glGetAttachedShaders
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|maxcount
parameter_list|,
name|GLsizei
modifier|*
name|count
parameter_list|,
name|GLuint
modifier|*
name|shaders
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLsizei maxcount = %d, GLsizei* count = 0x%0.8p, GLuint* shaders = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|maxcount
argument_list|,
name|count
argument_list|,
name|shaders
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|maxcount
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
return|return
name|programObject
operator|->
name|getAttachedShaders
argument_list|(
name|maxcount
argument_list|,
name|count
argument_list|,
name|shaders
argument_list|)
return|;
block|}
block|}
DECL|function|glGetAttribLocation
name|GLint
name|GL_APIENTRY
name|glGetAttribLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, const GLchar* name = %s)"
argument_list|,
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
operator|->
name|isLinked
argument_list|()
operator|||
operator|!
name|programBinary
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|programBinary
operator|->
name|getAttributeLocation
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|function|glGetBooleanv
name|void
name|GL_APIENTRY
name|glGetBooleanv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLboolean
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum pname = 0x%X, GLboolean* params = 0x%0.8p)"
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|GLenum
name|nativeType
decl_stmt|;
name|unsigned
name|int
name|numParams
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateStateQuery
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
operator|&
name|nativeType
argument_list|,
operator|&
name|numParams
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nativeType
operator|==
name|GL_BOOL
condition|)
block|{
name|context
operator|->
name|getBooleanv
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CastStateValues
argument_list|(
name|context
argument_list|,
name|nativeType
argument_list|,
name|pname
argument_list|,
name|numParams
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGetBufferParameteriv
name|void
name|GL_APIENTRY
name|glGetBufferParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidBufferParameter
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buffer
condition|)
block|{
comment|// A null buffer means that "0" is bound to the requested buffer target
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_BUFFER_USAGE
case|:
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|buffer
operator|->
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_SIZE
case|:
operator|*
name|params
operator|=
name|gl
operator|::
name|clampCast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|buffer
operator|->
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_ACCESS_FLAGS
case|:
operator|*
name|params
operator|=
name|buffer
operator|->
name|getAccessFlags
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_MAPPED
case|:
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|buffer
operator|->
name|isMapped
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_MAP_OFFSET
case|:
operator|*
name|params
operator|=
name|gl
operator|::
name|clampCast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|buffer
operator|->
name|getMapOffset
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_MAP_LENGTH
case|:
operator|*
name|params
operator|=
name|gl
operator|::
name|clampCast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|buffer
operator|->
name|getMapLength
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|function|glGetError
name|GLenum
name|GL_APIENTRY
name|glGetError
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
return|return
name|context
operator|->
name|getError
argument_list|()
return|;
block|}
return|return
name|GL_NO_ERROR
return|;
block|}
DECL|function|glGetFenceivNV
name|void
name|GL_APIENTRY
name|glGetFenceivNV
parameter_list|(
name|GLuint
name|fence
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint fence = %d, GLenum pname = 0x%X, GLint *params = 0x%0.8p)"
argument_list|,
name|fence
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|FenceNV
modifier|*
name|fenceObject
init|=
name|context
operator|->
name|getFenceNV
argument_list|(
name|fence
argument_list|)
decl_stmt|;
if|if
condition|(
name|fenceObject
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|fenceObject
operator|->
name|isFence
argument_list|()
operator|!=
name|GL_TRUE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_FENCE_STATUS_NV
case|:
block|{
comment|// GL_NV_fence spec:
comment|// Once the status of a fence has been finished (via FinishFenceNV) or tested and the returned status is TRUE (via either TestFenceNV
comment|// or GetFenceivNV querying the FENCE_STATUS_NV), the status remains TRUE until the next SetFenceNV of the fence.
name|GLboolean
name|status
init|=
name|GL_TRUE
decl_stmt|;
if|if
condition|(
name|fenceObject
operator|->
name|getStatus
argument_list|()
operator|!=
name|GL_TRUE
condition|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|fenceObject
operator|->
name|testFence
argument_list|(
operator|&
name|status
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
operator|*
name|params
operator|=
name|status
expr_stmt|;
break|break;
block|}
case|case
name|GL_FENCE_CONDITION_NV
case|:
block|{
operator|*
name|params
operator|=
name|fenceObject
operator|->
name|getCondition
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
DECL|function|glGetFloatv
name|void
name|GL_APIENTRY
name|glGetFloatv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)"
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|GLenum
name|nativeType
decl_stmt|;
name|unsigned
name|int
name|numParams
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateStateQuery
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
operator|&
name|nativeType
argument_list|,
operator|&
name|numParams
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nativeType
operator|==
name|GL_FLOAT
condition|)
block|{
name|context
operator|->
name|getFloatv
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CastStateValues
argument_list|(
name|context
argument_list|,
name|nativeType
argument_list|,
name|pname
argument_list|,
name|numParams
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGetFramebufferAttachmentParameteriv
name|void
name|GL_APIENTRY
name|glGetFramebufferAttachmentParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum attachment = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidFramebufferTarget
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|clientVersion
init|=
name|context
operator|->
name|getClientVersion
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
case|:
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
case|:
if|if
condition|(
name|clientVersion
operator|<
literal|3
operator|&&
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|sRGB
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
case|:
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
case|:
if|if
condition|(
name|clientVersion
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Determine if the attachment is a valid enum
switch|switch
condition|(
name|attachment
condition|)
block|{
case|case
name|GL_BACK
case|:
case|case
name|GL_FRONT
case|:
case|case
name|GL_DEPTH
case|:
case|case
name|GL_STENCIL
case|:
case|case
name|GL_DEPTH_STENCIL_ATTACHMENT
case|:
if|if
condition|(
name|clientVersion
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_DEPTH_ATTACHMENT
case|:
case|case
name|GL_STENCIL_ATTACHMENT
case|:
break|break;
default|default:
if|if
condition|(
name|attachment
operator|<
name|GL_COLOR_ATTACHMENT0_EXT
operator|||
operator|(
name|attachment
operator|-
name|GL_COLOR_ATTACHMENT0_EXT
operator|)
operator|>=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxColorAttachments
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
block|}
name|GLuint
name|framebufferHandle
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetFramebuffer
argument_list|(
name|target
argument_list|)
operator|->
name|id
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getFramebuffer
argument_list|(
name|framebufferHandle
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|framebufferHandle
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|clientVersion
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|attachment
condition|)
block|{
case|case
name|GL_BACK
case|:
case|case
name|GL_DEPTH
case|:
case|case
name|GL_STENCIL
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
if|if
condition|(
name|attachment
operator|>=
name|GL_COLOR_ATTACHMENT0_EXT
operator|&&
name|attachment
operator|<=
name|GL_COLOR_ATTACHMENT15_EXT
condition|)
block|{
comment|// Valid attachment query
block|}
else|else
block|{
switch|switch
condition|(
name|attachment
condition|)
block|{
case|case
name|GL_DEPTH_ATTACHMENT
case|:
case|case
name|GL_STENCIL_ATTACHMENT
case|:
break|break;
case|case
name|GL_DEPTH_STENCIL_ATTACHMENT
case|:
if|if
condition|(
name|framebuffer
operator|->
name|hasValidDepthStencil
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|GLenum
name|attachmentType
init|=
name|GL_NONE
decl_stmt|;
name|GLuint
name|attachmentHandle
init|=
literal|0
decl_stmt|;
name|GLuint
name|attachmentLevel
init|=
literal|0
decl_stmt|;
name|GLuint
name|attachmentLayer
init|=
literal|0
decl_stmt|;
specifier|const
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|attachmentObject
init|=
name|framebuffer
operator|->
name|getAttachment
argument_list|(
name|attachment
argument_list|)
decl_stmt|;
if|if
condition|(
name|attachmentObject
condition|)
block|{
name|attachmentType
operator|=
name|attachmentObject
operator|->
name|type
argument_list|()
expr_stmt|;
name|attachmentHandle
operator|=
name|attachmentObject
operator|->
name|id
argument_list|()
expr_stmt|;
name|attachmentLevel
operator|=
name|attachmentObject
operator|->
name|mipLevel
argument_list|()
expr_stmt|;
name|attachmentLayer
operator|=
name|attachmentObject
operator|->
name|layer
argument_list|()
expr_stmt|;
block|}
name|GLenum
name|attachmentObjectType
decl_stmt|;
comment|// Type category
if|if
condition|(
name|framebufferHandle
operator|==
literal|0
condition|)
block|{
name|attachmentObjectType
operator|=
name|GL_FRAMEBUFFER_DEFAULT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attachmentType
operator|==
name|GL_NONE
operator|||
name|attachmentType
operator|==
name|GL_RENDERBUFFER
condition|)
block|{
name|attachmentObjectType
operator|=
name|attachmentType
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gl
operator|::
name|ValidTexture2DDestinationTarget
argument_list|(
name|context
argument_list|,
name|attachmentType
argument_list|)
condition|)
block|{
name|attachmentObjectType
operator|=
name|GL_TEXTURE
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|attachmentObjectType
operator|==
name|GL_NONE
condition|)
block|{
comment|// ES 2.0.25 spec pg 127 states that if the value of FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
comment|// is NONE, then querying any other pname will generate INVALID_ENUM.
comment|// ES 3.0.2 spec pg 235 states that if the attachment type is none,
comment|// GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME will return zero and be an
comment|// INVALID_OPERATION for all other pnames
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
case|:
operator|*
name|params
operator|=
name|attachmentObjectType
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
case|:
if|if
condition|(
name|clientVersion
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|clientVersion
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
else|else
block|{
name|ASSERT
argument_list|(
name|attachmentObjectType
operator|==
name|GL_RENDERBUFFER
operator|||
name|attachmentObjectType
operator|==
name|GL_TEXTURE
operator|||
name|attachmentObjectType
operator|==
name|GL_FRAMEBUFFER_DEFAULT
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|attachmentObject
operator|!=
name|NULL
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
case|:
operator|*
name|params
operator|=
name|attachmentObjectType
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
case|:
if|if
condition|(
name|attachmentObjectType
operator|!=
name|GL_RENDERBUFFER
operator|&&
name|attachmentObjectType
operator|!=
name|GL_TEXTURE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|attachmentHandle
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
case|:
if|if
condition|(
name|attachmentObjectType
operator|!=
name|GL_TEXTURE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|attachmentLevel
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
case|:
if|if
condition|(
name|attachmentObjectType
operator|!=
name|GL_TEXTURE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|gl
operator|::
name|IsCubemapTextureTarget
argument_list|(
name|attachmentType
argument_list|)
condition|?
name|attachmentType
else|:
literal|0
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getRedSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getGreenSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getBlueSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getAlphaSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getDepthSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getStencilSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
case|:
if|if
condition|(
name|attachment
operator|==
name|GL_DEPTH_STENCIL_ATTACHMENT
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getComponentType
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
case|:
operator|*
name|params
operator|=
name|attachmentObject
operator|->
name|getColorEncoding
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
case|:
if|if
condition|(
name|attachmentObjectType
operator|!=
name|GL_TEXTURE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|attachmentLayer
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
DECL|function|glGetGraphicsResetStatusEXT
name|GLenum
name|GL_APIENTRY
name|glGetGraphicsResetStatusEXT
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
return|return
name|context
operator|->
name|getResetStatus
argument_list|()
return|;
block|}
return|return
name|GL_NO_ERROR
return|;
block|}
DECL|function|glGetIntegerv
name|void
name|GL_APIENTRY
name|glGetIntegerv
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|GLenum
name|nativeType
decl_stmt|;
name|unsigned
name|int
name|numParams
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateStateQuery
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
operator|&
name|nativeType
argument_list|,
operator|&
name|numParams
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nativeType
operator|==
name|GL_INT
condition|)
block|{
name|context
operator|->
name|getIntegerv
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CastStateValues
argument_list|(
name|context
argument_list|,
name|nativeType
argument_list|,
name|pname
argument_list|,
name|numParams
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGetProgramiv
name|void
name|GL_APIENTRY
name|glGetProgramiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLenum pname = %d, GLint* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_ACTIVE_UNIFORM_BLOCKS
case|:
case|case
name|GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
case|:
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_MODE
case|:
case|case
name|GL_TRANSFORM_FEEDBACK_VARYINGS
case|:
case|case
name|GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
case|:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_DELETE_STATUS
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|isFlaggedForDeletion
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_LINK_STATUS
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|isLinked
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_VALIDATE_STATUS
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|isValidated
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_INFO_LOG_LENGTH
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getInfoLogLength
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_ATTACHED_SHADERS
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getAttachedShadersCount
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_ACTIVE_ATTRIBUTES
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getActiveAttributeCount
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getActiveAttributeMaxLength
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_ACTIVE_UNIFORMS
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getActiveUniformCount
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_ACTIVE_UNIFORM_MAX_LENGTH
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getActiveUniformMaxLength
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_PROGRAM_BINARY_LENGTH_OES
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getProgramBinaryLength
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_ACTIVE_UNIFORM_BLOCKS
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getActiveUniformBlockCount
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getActiveUniformBlockMaxLength
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_MODE
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getTransformFeedbackBufferMode
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TRANSFORM_FEEDBACK_VARYINGS
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getTransformFeedbackVaryingCount
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
case|:
operator|*
name|params
operator|=
name|programObject
operator|->
name|getTransformFeedbackVaryingMaxLength
argument_list|()
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGetProgramInfoLog
name|void
name|GL_APIENTRY
name|glGetProgramInfoLog
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|infolog
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* infolog = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|bufsize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|programObject
operator|->
name|getInfoLog
argument_list|(
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetQueryivEXT
name|void
name|GL_APIENTRY
name|glGetQueryivEXT
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"GLenum target = 0x%X, GLenum pname = 0x%X, GLint *params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidQueryType
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_CURRENT_QUERY_EXT
case|:
name|params
index|[
literal|0
index|]
operator|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getActiveQueryId
argument_list|(
name|target
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGetQueryObjectuivEXT
name|void
name|GL_APIENTRY
name|glGetQueryObjectuivEXT
parameter_list|(
name|GLuint
name|id
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLuint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint id = %d, GLenum pname = 0x%X, GLuint *params = 0x%0.8p)"
argument_list|,
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Query
modifier|*
name|queryObject
init|=
name|context
operator|->
name|getQuery
argument_list|(
name|id
argument_list|,
literal|false
argument_list|,
name|GL_NONE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|queryObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getActiveQueryId
argument_list|(
name|queryObject
operator|->
name|getType
argument_list|()
argument_list|)
operator|==
name|id
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_QUERY_RESULT_EXT
case|:
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|queryObject
operator|->
name|getResult
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_QUERY_RESULT_AVAILABLE_EXT
case|:
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|queryObject
operator|->
name|isResultAvailable
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGetRenderbufferParameteriv
name|void
name|GL_APIENTRY
name|glGetRenderbufferParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|target
operator|!=
name|GL_RENDERBUFFER
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getRenderbufferId
argument_list|()
operator|==
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Renderbuffer
modifier|*
name|renderbuffer
init|=
name|context
operator|->
name|getRenderbuffer
argument_list|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getRenderbufferId
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_RENDERBUFFER_WIDTH
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getWidth
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_HEIGHT
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getHeight
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_INTERNAL_FORMAT
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getInternalFormat
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_RED_SIZE
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getRedSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_GREEN_SIZE
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getGreenSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_BLUE_SIZE
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getBlueSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_ALPHA_SIZE
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getAlphaSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_DEPTH_SIZE
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getDepthSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_STENCIL_SIZE
case|:
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getStencilSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_RENDERBUFFER_SAMPLES_ANGLE
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|framebufferMultisample
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|renderbuffer
operator|->
name|getSamples
argument_list|()
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGetShaderiv
name|void
name|GL_APIENTRY
name|glGetShaderiv
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d, GLenum pname = %d, GLint* params = 0x%0.8p)"
argument_list|,
name|shader
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Shader
modifier|*
name|shaderObject
init|=
name|context
operator|->
name|getShader
argument_list|(
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_SHADER_TYPE
case|:
operator|*
name|params
operator|=
name|shaderObject
operator|->
name|getType
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_DELETE_STATUS
case|:
operator|*
name|params
operator|=
name|shaderObject
operator|->
name|isFlaggedForDeletion
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_COMPILE_STATUS
case|:
operator|*
name|params
operator|=
name|shaderObject
operator|->
name|isCompiled
argument_list|()
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
expr_stmt|;
return|return;
case|case
name|GL_INFO_LOG_LENGTH
case|:
operator|*
name|params
operator|=
name|shaderObject
operator|->
name|getInfoLogLength
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_SHADER_SOURCE_LENGTH
case|:
operator|*
name|params
operator|=
name|shaderObject
operator|->
name|getSourceLength
argument_list|()
expr_stmt|;
return|return;
case|case
name|GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE
case|:
operator|*
name|params
operator|=
name|shaderObject
operator|->
name|getTranslatedSourceLength
argument_list|()
expr_stmt|;
return|return;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGetShaderInfoLog
name|void
name|GL_APIENTRY
name|glGetShaderInfoLog
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|infolog
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* infolog = 0x%0.8p)"
argument_list|,
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|bufsize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Shader
modifier|*
name|shaderObject
init|=
name|context
operator|->
name|getShader
argument_list|(
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|shaderObject
operator|->
name|getInfoLog
argument_list|(
name|bufsize
argument_list|,
name|length
argument_list|,
name|infolog
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetShaderPrecisionFormat
name|void
name|GL_APIENTRY
name|glGetShaderPrecisionFormat
parameter_list|(
name|GLenum
name|shadertype
parameter_list|,
name|GLenum
name|precisiontype
parameter_list|,
name|GLint
modifier|*
name|range
parameter_list|,
name|GLint
modifier|*
name|precision
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum shadertype = 0x%X, GLenum precisiontype = 0x%X, GLint* range = 0x%0.8p, GLint* precision = 0x%0.8p)"
argument_list|,
name|shadertype
argument_list|,
name|precisiontype
argument_list|,
name|range
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|shadertype
condition|)
block|{
case|case
name|GL_VERTEX_SHADER
case|:
case|case
name|GL_FRAGMENT_SHADER
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|precisiontype
condition|)
block|{
case|case
name|GL_LOW_FLOAT
case|:
case|case
name|GL_MEDIUM_FLOAT
case|:
case|case
name|GL_HIGH_FLOAT
case|:
comment|// Assume IEEE 754 precision
name|range
index|[
literal|0
index|]
operator|=
literal|127
expr_stmt|;
name|range
index|[
literal|1
index|]
operator|=
literal|127
expr_stmt|;
operator|*
name|precision
operator|=
literal|23
expr_stmt|;
break|break;
case|case
name|GL_LOW_INT
case|:
case|case
name|GL_MEDIUM_INT
case|:
case|case
name|GL_HIGH_INT
case|:
comment|// Some (most) hardware only supports single-precision floating-point numbers,
comment|// which can accurately represent integers up to +/-16777216
name|range
index|[
literal|0
index|]
operator|=
literal|24
expr_stmt|;
name|range
index|[
literal|1
index|]
operator|=
literal|24
expr_stmt|;
operator|*
name|precision
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGetShaderSource
name|void
name|GL_APIENTRY
name|glGetShaderSource
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|source
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* source = 0x%0.8p)"
argument_list|,
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|bufsize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Shader
modifier|*
name|shaderObject
init|=
name|context
operator|->
name|getShader
argument_list|(
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|shaderObject
operator|->
name|getSource
argument_list|(
name|bufsize
argument_list|,
name|length
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetTranslatedShaderSourceANGLE
name|void
name|GL_APIENTRY
name|glGetTranslatedShaderSourceANGLE
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|bufsize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|source
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d, GLsizei bufsize = %d, GLsizei* length = 0x%0.8p, GLchar* source = 0x%0.8p)"
argument_list|,
name|shader
argument_list|,
name|bufsize
argument_list|,
name|length
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|bufsize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Shader
modifier|*
name|shaderObject
init|=
name|context
operator|->
name|getShader
argument_list|(
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Only returns extra info if ANGLE_GENERATE_SHADER_DEBUG_INFO is defined
name|shaderObject
operator|->
name|getTranslatedSourceWithDebugInfo
argument_list|(
name|bufsize
argument_list|,
name|length
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetString
specifier|const
name|GLubyte
modifier|*
name|GL_APIENTRY
name|glGetString
parameter_list|(
name|GLenum
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum name = 0x%X)"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|name
condition|)
block|{
case|case
name|GL_VENDOR
case|:
return|return
operator|(
name|GLubyte
operator|*
operator|)
literal|"Google Inc."
return|;
case|case
name|GL_RENDERER
case|:
return|return
operator|(
name|GLubyte
operator|*
operator|)
operator|(
operator|(
name|context
operator|!=
name|NULL
operator|)
condition|?
name|context
operator|->
name|getRendererString
argument_list|()
operator|.
name|c_str
argument_list|()
else|:
literal|"ANGLE"
operator|)
return|;
case|case
name|GL_VERSION
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|==
literal|2
condition|)
block|{
return|return
operator|(
name|GLubyte
operator|*
operator|)
literal|"OpenGL ES 2.0 (ANGLE "
name|ANGLE_VERSION_STRING
literal|")"
return|;
block|}
else|else
block|{
return|return
operator|(
name|GLubyte
operator|*
operator|)
literal|"OpenGL ES 3.0 (ANGLE "
name|ANGLE_VERSION_STRING
literal|")"
return|;
block|}
case|case
name|GL_SHADING_LANGUAGE_VERSION
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|==
literal|2
condition|)
block|{
return|return
operator|(
name|GLubyte
operator|*
operator|)
literal|"OpenGL ES GLSL ES 1.00 (ANGLE "
name|ANGLE_VERSION_STRING
literal|")"
return|;
block|}
else|else
block|{
return|return
operator|(
name|GLubyte
operator|*
operator|)
literal|"OpenGL ES GLSL ES 3.00 (ANGLE "
name|ANGLE_VERSION_STRING
literal|")"
return|;
block|}
case|case
name|GL_EXTENSIONS
case|:
return|return
operator|(
name|GLubyte
operator|*
operator|)
operator|(
operator|(
name|context
operator|!=
name|NULL
operator|)
condition|?
name|context
operator|->
name|getExtensionString
argument_list|()
operator|.
name|c_str
argument_list|()
else|:
literal|""
operator|)
return|;
default|default:
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|NULL
return|;
block|}
block|}
DECL|function|glGetTexParameterfv
name|void
name|GL_APIENTRY
name|glGetTexParameterfv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_TEXTURE_MAG_FILTER
case|:
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|magFilter
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_FILTER
case|:
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|minFilter
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_S
case|:
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapS
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_T
case|:
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapT
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_R
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapR
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_IMMUTABLE_FORMAT
case|:
comment|// Exposed to ES2.0 through EXT_texture_storage, no client version validation.
operator|*
name|params
operator|=
call|(
name|GLfloat
call|)
argument_list|(
name|texture
operator|->
name|isImmutable
argument_list|()
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_IMMUTABLE_LEVELS
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|immutableLevelCount
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_USAGE_ANGLE
case|:
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getUsage
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_ANISOTROPY_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureFilterAnisotropic
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|maxAnisotropy
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_R
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleRed
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_G
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleGreen
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_B
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleBlue
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_A
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleAlpha
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_BASE_LEVEL
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|baseLevel
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LEVEL
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLfloat
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|maxLevel
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_LOD
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|minLod
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LOD
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|maxLod
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGetTexParameteriv
name|void
name|GL_APIENTRY
name|glGetTexParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_TEXTURE_MAG_FILTER
case|:
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|magFilter
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_FILTER
case|:
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|minFilter
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_S
case|:
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapS
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_T
case|:
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapT
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_R
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapR
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_IMMUTABLE_FORMAT
case|:
comment|// Exposed to ES2.0 through EXT_texture_storage, no client version validation.
operator|*
name|params
operator|=
name|texture
operator|->
name|isImmutable
argument_list|()
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_IMMUTABLE_LEVELS
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|texture
operator|->
name|immutableLevelCount
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_USAGE_ANGLE
case|:
operator|*
name|params
operator|=
name|texture
operator|->
name|getUsage
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_ANISOTROPY_EXT
case|:
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureFilterAnisotropic
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLint
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|maxAnisotropy
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_R
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleRed
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_G
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleGreen
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_B
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleBlue
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_A
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleAlpha
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_BASE_LEVEL
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|baseLevel
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LEVEL
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|maxLevel
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_LOD
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLint
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|minLod
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LOD
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
operator|(
name|GLint
operator|)
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|maxLod
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGetnUniformfvEXT
name|void
name|GL_APIENTRY
name|glGetnUniformfvEXT
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLint location = %d, GLsizei bufSize = %d, GLfloat* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|bufSize
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetnUniformfvEXT
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|bufSize
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|programBinary
argument_list|)
expr_stmt|;
name|programBinary
operator|->
name|getUniformfv
argument_list|(
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetUniformfv
name|void
name|GL_APIENTRY
name|glGetUniformfv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLint location = %d, GLfloat* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetUniformfv
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|programBinary
argument_list|)
expr_stmt|;
name|programBinary
operator|->
name|getUniformfv
argument_list|(
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetnUniformivEXT
name|void
name|GL_APIENTRY
name|glGetnUniformivEXT
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLint location = %d, GLsizei bufSize = %d, GLint* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|bufSize
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetnUniformivEXT
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|bufSize
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|programBinary
argument_list|)
expr_stmt|;
name|programBinary
operator|->
name|getUniformiv
argument_list|(
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetUniformiv
name|void
name|GL_APIENTRY
name|glGetUniformiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, GLint location = %d, GLint* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetUniformiv
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|programBinary
argument_list|)
expr_stmt|;
name|programBinary
operator|->
name|getUniformiv
argument_list|(
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetUniformLocation
name|GLint
name|GL_APIENTRY
name|glGetUniformLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d, const GLchar* name = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|strstr
argument_list|(
name|name
argument_list|,
literal|"gl_"
argument_list|)
operator|==
name|name
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
operator|->
name|isLinked
argument_list|()
operator|||
operator|!
name|programBinary
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|programBinary
operator|->
name|getUniformLocation
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|function|glGetVertexAttribfv
name|void
name|GL_APIENTRY
name|glGetVertexAttribfv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attribState
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexAttribState
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidateGetVertexAttribParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pname
operator|==
name|GL_CURRENT_VERTEX_ATTRIB
condition|)
block|{
specifier|const
name|gl
operator|::
name|VertexAttribCurrentValueData
modifier|&
name|currentValueData
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexAttribCurrentValue
argument_list|(
name|index
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|currentValueData
operator|.
name|FloatValues
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
operator|*
name|params
operator|=
name|gl
operator|::
name|QuerySingleVertexAttributeParameter
argument_list|<
name|GLfloat
argument_list|>
argument_list|(
name|attribState
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGetVertexAttribiv
name|void
name|GL_APIENTRY
name|glGetVertexAttribiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attribState
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexAttribState
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidateGetVertexAttribParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pname
operator|==
name|GL_CURRENT_VERTEX_ATTRIB
condition|)
block|{
specifier|const
name|gl
operator|::
name|VertexAttribCurrentValueData
modifier|&
name|currentValueData
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexAttribCurrentValue
argument_list|(
name|index
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|float
name|currentValue
init|=
name|currentValueData
operator|.
name|FloatValues
index|[
name|i
index|]
decl_stmt|;
name|params
index|[
name|i
index|]
operator|=
name|gl
operator|::
name|iround
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|currentValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
operator|*
name|params
operator|=
name|gl
operator|::
name|QuerySingleVertexAttributeParameter
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|attribState
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGetVertexAttribPointerv
name|void
name|GL_APIENTRY
name|glGetVertexAttribPointerv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLvoid
modifier|*
modifier|*
name|pointer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLenum pname = 0x%X, GLvoid** pointer = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|pname
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|pname
operator|!=
name|GL_VERTEX_ATTRIB_ARRAY_POINTER
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|pointer
operator|=
cast|const_cast
argument_list|<
name|GLvoid
operator|*
argument_list|>
argument_list|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexAttribPointer
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glHint
name|void
name|GL_APIENTRY
name|glHint
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|mode
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum mode = 0x%X)"
argument_list|,
name|target
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|GL_FASTEST
case|:
case|case
name|GL_NICEST
case|:
case|case
name|GL_DONT_CARE
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_GENERATE_MIPMAP_HINT
case|:
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setGenerateMipmapHint
argument_list|(
name|mode
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES
case|:
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setFragmentShaderDerivativeHint
argument_list|(
name|mode
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glIsBuffer
name|GLboolean
name|GL_APIENTRY
name|glIsBuffer
parameter_list|(
name|GLuint
name|buffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint buffer = %d)"
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|&&
name|buffer
condition|)
block|{
name|gl
operator|::
name|Buffer
modifier|*
name|bufferObject
init|=
name|context
operator|->
name|getBuffer
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|bufferObject
condition|)
block|{
return|return
name|GL_TRUE
return|;
block|}
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glIsEnabled
name|GLboolean
name|GL_APIENTRY
name|glIsEnabled
parameter_list|(
name|GLenum
name|cap
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum cap = 0x%X)"
argument_list|,
name|cap
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidCap
argument_list|(
name|context
argument_list|,
name|cap
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
return|return
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getEnableFeature
argument_list|(
name|cap
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|glIsFenceNV
name|GLboolean
name|GL_APIENTRY
name|glIsFenceNV
parameter_list|(
name|GLuint
name|fence
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint fence = %d)"
argument_list|,
name|fence
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|FenceNV
modifier|*
name|fenceObject
init|=
name|context
operator|->
name|getFenceNV
argument_list|(
name|fence
argument_list|)
decl_stmt|;
if|if
condition|(
name|fenceObject
operator|==
name|NULL
condition|)
block|{
return|return
name|GL_FALSE
return|;
block|}
return|return
name|fenceObject
operator|->
name|isFence
argument_list|()
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glIsFramebuffer
name|GLboolean
name|GL_APIENTRY
name|glIsFramebuffer
parameter_list|(
name|GLuint
name|framebuffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint framebuffer = %d)"
argument_list|,
name|framebuffer
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|&&
name|framebuffer
condition|)
block|{
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebufferObject
init|=
name|context
operator|->
name|getFramebuffer
argument_list|(
name|framebuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|framebufferObject
condition|)
block|{
return|return
name|GL_TRUE
return|;
block|}
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glIsProgram
name|GLboolean
name|GL_APIENTRY
name|glIsProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d)"
argument_list|,
name|program
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|&&
name|program
condition|)
block|{
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
name|programObject
condition|)
block|{
return|return
name|GL_TRUE
return|;
block|}
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glIsQueryEXT
name|GLboolean
name|GL_APIENTRY
name|glIsQueryEXT
parameter_list|(
name|GLuint
name|id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint id = %d)"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
return|return
operator|(
name|context
operator|->
name|getQuery
argument_list|(
name|id
argument_list|,
literal|false
argument_list|,
name|GL_NONE
argument_list|)
operator|!=
name|NULL
operator|)
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glIsRenderbuffer
name|GLboolean
name|GL_APIENTRY
name|glIsRenderbuffer
parameter_list|(
name|GLuint
name|renderbuffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint renderbuffer = %d)"
argument_list|,
name|renderbuffer
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|&&
name|renderbuffer
condition|)
block|{
name|gl
operator|::
name|Renderbuffer
modifier|*
name|renderbufferObject
init|=
name|context
operator|->
name|getRenderbuffer
argument_list|(
name|renderbuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|renderbufferObject
condition|)
block|{
return|return
name|GL_TRUE
return|;
block|}
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glIsShader
name|GLboolean
name|GL_APIENTRY
name|glIsShader
parameter_list|(
name|GLuint
name|shader
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d)"
argument_list|,
name|shader
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|&&
name|shader
condition|)
block|{
name|gl
operator|::
name|Shader
modifier|*
name|shaderObject
init|=
name|context
operator|->
name|getShader
argument_list|(
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
name|shaderObject
condition|)
block|{
return|return
name|GL_TRUE
return|;
block|}
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glIsTexture
name|GLboolean
name|GL_APIENTRY
name|glIsTexture
parameter_list|(
name|GLuint
name|texture
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint texture = %d)"
argument_list|,
name|texture
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|&&
name|texture
condition|)
block|{
name|gl
operator|::
name|Texture
modifier|*
name|textureObject
init|=
name|context
operator|->
name|getTexture
argument_list|(
name|texture
argument_list|)
decl_stmt|;
if|if
condition|(
name|textureObject
condition|)
block|{
return|return
name|GL_TRUE
return|;
block|}
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glLineWidth
name|void
name|GL_APIENTRY
name|glLineWidth
parameter_list|(
name|GLfloat
name|width
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLfloat width = %f)"
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|width
operator|<=
literal|0.0f
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setLineWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glLinkProgram
name|void
name|GL_APIENTRY
name|glLinkProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d)"
argument_list|,
name|program
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|linkProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glPixelStorei
name|void
name|GL_APIENTRY
name|glPixelStorei
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLint
name|param
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum pname = 0x%X, GLint param = %d)"
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_UNPACK_ALIGNMENT
case|:
if|if
condition|(
name|param
operator|!=
literal|1
operator|&&
name|param
operator|!=
literal|2
operator|&&
name|param
operator|!=
literal|4
operator|&&
name|param
operator|!=
literal|8
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setUnpackAlignment
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_PACK_ALIGNMENT
case|:
if|if
condition|(
name|param
operator|!=
literal|1
operator|&&
name|param
operator|!=
literal|2
operator|&&
name|param
operator|!=
literal|4
operator|&&
name|param
operator|!=
literal|8
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setPackAlignment
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_PACK_REVERSE_ROW_ORDER_ANGLE
case|:
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setPackReverseRowOrder
argument_list|(
name|param
operator|!=
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_UNPACK_IMAGE_HEIGHT
case|:
case|case
name|GL_UNPACK_SKIP_IMAGES
case|:
case|case
name|GL_UNPACK_ROW_LENGTH
case|:
case|case
name|GL_UNPACK_SKIP_ROWS
case|:
case|case
name|GL_UNPACK_SKIP_PIXELS
case|:
case|case
name|GL_PACK_ROW_LENGTH
case|:
case|case
name|GL_PACK_SKIP_ROWS
case|:
case|case
name|GL_PACK_SKIP_PIXELS
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glPolygonOffset
name|void
name|GL_APIENTRY
name|glPolygonOffset
parameter_list|(
name|GLfloat
name|factor
parameter_list|,
name|GLfloat
name|units
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLfloat factor = %f, GLfloat units = %f)"
argument_list|,
name|factor
argument_list|,
name|units
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setPolygonOffsetParams
argument_list|(
name|factor
argument_list|,
name|units
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glReadnPixelsEXT
name|void
name|GL_APIENTRY
name|glReadnPixelsEXT
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLvoid
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d, "
literal|"GLenum format = 0x%X, GLenum type = 0x%X, GLsizei bufSize = 0x%d, GLvoid *data = 0x%0.8p)"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|bufSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|width
operator|<
literal|0
operator|||
name|height
operator|<
literal|0
operator|||
name|bufSize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidateReadPixelsParameters
argument_list|(
name|context
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
operator|&
name|bufSize
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|readPixels
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
operator|&
name|bufSize
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glReadPixels
name|void
name|GL_APIENTRY
name|glReadPixels
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d, "
literal|"GLenum format = 0x%X, GLenum type = 0x%X, GLvoid* pixels = 0x%0.8p)"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|width
operator|<
literal|0
operator|||
name|height
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidateReadPixelsParameters
argument_list|(
name|context
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|NULL
argument_list|,
name|pixels
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|readPixels
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|NULL
argument_list|,
name|pixels
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glReleaseShaderCompiler
name|void
name|GL_APIENTRY
name|glReleaseShaderCompiler
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|releaseShaderCompiler
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|glRenderbufferStorageMultisampleANGLE
name|void
name|GL_APIENTRY
name|glRenderbufferStorageMultisampleANGLE
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|samples
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei samples = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateRenderbufferStorageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Renderbuffer
modifier|*
name|renderbuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentRenderbuffer
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|renderbuffer
operator|->
name|setStorage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|internalformat
argument_list|,
name|samples
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glRenderbufferStorage
name|void
name|GL_APIENTRY
name|glRenderbufferStorage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|glRenderbufferStorageMultisampleANGLE
argument_list|(
name|target
argument_list|,
literal|0
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
DECL|function|glSampleCoverage
name|void
name|GL_APIENTRY
name|glSampleCoverage
parameter_list|(
name|GLclampf
name|value
parameter_list|,
name|GLboolean
name|invert
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLclampf value = %f, GLboolean invert = %u)"
argument_list|,
name|value
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setSampleCoverageParams
argument_list|(
name|gl
operator|::
name|clamp01
argument_list|(
name|value
argument_list|)
argument_list|,
name|invert
operator|==
name|GL_TRUE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glSetFenceNV
name|void
name|GL_APIENTRY
name|glSetFenceNV
parameter_list|(
name|GLuint
name|fence
parameter_list|,
name|GLenum
name|condition
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint fence = %d, GLenum condition = 0x%X)"
argument_list|,
name|fence
argument_list|,
name|condition
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|condition
operator|!=
name|GL_ALL_COMPLETED_NV
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|FenceNV
modifier|*
name|fenceObject
init|=
name|context
operator|->
name|getFenceNV
argument_list|(
name|fence
argument_list|)
decl_stmt|;
if|if
condition|(
name|fenceObject
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|fenceObject
operator|->
name|setFence
argument_list|(
name|condition
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glScissor
name|void
name|GL_APIENTRY
name|glScissor
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|width
operator|<
literal|0
operator|||
name|height
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setScissorParams
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glShaderBinary
name|void
name|GL_APIENTRY
name|glShaderBinary
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|shaders
parameter_list|,
name|GLenum
name|binaryformat
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|binary
parameter_list|,
name|GLsizei
name|length
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* shaders = 0x%0.8p, GLenum binaryformat = 0x%X, "
literal|"const GLvoid* binary = 0x%0.8p, GLsizei length = %d)"
argument_list|,
name|n
argument_list|,
name|shaders
argument_list|,
name|binaryformat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
modifier|&
name|shaderBinaryFormats
init|=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|shaderBinaryFormats
decl_stmt|;
if|if
condition|(
name|std
operator|::
name|find
argument_list|(
name|shaderBinaryFormats
operator|.
name|begin
argument_list|()
argument_list|,
name|shaderBinaryFormats
operator|.
name|end
argument_list|()
argument_list|,
name|binaryformat
argument_list|)
operator|==
name|shaderBinaryFormats
operator|.
name|end
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// No binary shader formats are supported.
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|glShaderSource
name|void
name|GL_APIENTRY
name|glShaderSource
parameter_list|(
name|GLuint
name|shader
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLchar
modifier|*
specifier|const
modifier|*
name|string
parameter_list|,
specifier|const
name|GLint
modifier|*
name|length
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint shader = %d, GLsizei count = %d, const GLchar** string = 0x%0.8p, const GLint* length = 0x%0.8p)"
argument_list|,
name|shader
argument_list|,
name|count
argument_list|,
name|string
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Shader
modifier|*
name|shaderObject
init|=
name|context
operator|->
name|getShader
argument_list|(
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shaderObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getProgram
argument_list|(
name|shader
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|shaderObject
operator|->
name|setSource
argument_list|(
name|count
argument_list|,
name|string
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glStencilFunc
name|void
name|GL_APIENTRY
name|glStencilFunc
parameter_list|(
name|GLenum
name|func
parameter_list|,
name|GLint
name|ref
parameter_list|,
name|GLuint
name|mask
parameter_list|)
block|{
name|glStencilFuncSeparate
argument_list|(
name|GL_FRONT_AND_BACK
argument_list|,
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
DECL|function|glStencilFuncSeparate
name|void
name|GL_APIENTRY
name|glStencilFuncSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|func
parameter_list|,
name|GLint
name|ref
parameter_list|,
name|GLuint
name|mask
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum face = 0x%X, GLenum func = 0x%X, GLint ref = %d, GLuint mask = %d)"
argument_list|,
name|face
argument_list|,
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|face
condition|)
block|{
case|case
name|GL_FRONT
case|:
case|case
name|GL_BACK
case|:
case|case
name|GL_FRONT_AND_BACK
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|func
condition|)
block|{
case|case
name|GL_NEVER
case|:
case|case
name|GL_ALWAYS
case|:
case|case
name|GL_LESS
case|:
case|case
name|GL_LEQUAL
case|:
case|case
name|GL_EQUAL
case|:
case|case
name|GL_GEQUAL
case|:
case|case
name|GL_GREATER
case|:
case|case
name|GL_NOTEQUAL
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|face
operator|==
name|GL_FRONT
operator|||
name|face
operator|==
name|GL_FRONT_AND_BACK
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setStencilParams
argument_list|(
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|face
operator|==
name|GL_BACK
operator|||
name|face
operator|==
name|GL_FRONT_AND_BACK
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setStencilBackParams
argument_list|(
name|func
argument_list|,
name|ref
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glStencilMask
name|void
name|GL_APIENTRY
name|glStencilMask
parameter_list|(
name|GLuint
name|mask
parameter_list|)
block|{
name|glStencilMaskSeparate
argument_list|(
name|GL_FRONT_AND_BACK
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
DECL|function|glStencilMaskSeparate
name|void
name|GL_APIENTRY
name|glStencilMaskSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLuint
name|mask
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum face = 0x%X, GLuint mask = %d)"
argument_list|,
name|face
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|face
condition|)
block|{
case|case
name|GL_FRONT
case|:
case|case
name|GL_BACK
case|:
case|case
name|GL_FRONT_AND_BACK
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|face
operator|==
name|GL_FRONT
operator|||
name|face
operator|==
name|GL_FRONT_AND_BACK
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setStencilWritemask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|face
operator|==
name|GL_BACK
operator|||
name|face
operator|==
name|GL_FRONT_AND_BACK
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setStencilBackWritemask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glStencilOp
name|void
name|GL_APIENTRY
name|glStencilOp
parameter_list|(
name|GLenum
name|fail
parameter_list|,
name|GLenum
name|zfail
parameter_list|,
name|GLenum
name|zpass
parameter_list|)
block|{
name|glStencilOpSeparate
argument_list|(
name|GL_FRONT_AND_BACK
argument_list|,
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
expr_stmt|;
block|}
DECL|function|glStencilOpSeparate
name|void
name|GL_APIENTRY
name|glStencilOpSeparate
parameter_list|(
name|GLenum
name|face
parameter_list|,
name|GLenum
name|fail
parameter_list|,
name|GLenum
name|zfail
parameter_list|,
name|GLenum
name|zpass
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum face = 0x%X, GLenum fail = 0x%X, GLenum zfail = 0x%X, GLenum zpas = 0x%Xs)"
argument_list|,
name|face
argument_list|,
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
switch|switch
condition|(
name|face
condition|)
block|{
case|case
name|GL_FRONT
case|:
case|case
name|GL_BACK
case|:
case|case
name|GL_FRONT_AND_BACK
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|fail
condition|)
block|{
case|case
name|GL_ZERO
case|:
case|case
name|GL_KEEP
case|:
case|case
name|GL_REPLACE
case|:
case|case
name|GL_INCR
case|:
case|case
name|GL_DECR
case|:
case|case
name|GL_INVERT
case|:
case|case
name|GL_INCR_WRAP
case|:
case|case
name|GL_DECR_WRAP
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|zfail
condition|)
block|{
case|case
name|GL_ZERO
case|:
case|case
name|GL_KEEP
case|:
case|case
name|GL_REPLACE
case|:
case|case
name|GL_INCR
case|:
case|case
name|GL_DECR
case|:
case|case
name|GL_INVERT
case|:
case|case
name|GL_INCR_WRAP
case|:
case|case
name|GL_DECR_WRAP
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|zpass
condition|)
block|{
case|case
name|GL_ZERO
case|:
case|case
name|GL_KEEP
case|:
case|case
name|GL_REPLACE
case|:
case|case
name|GL_INCR
case|:
case|case
name|GL_DECR
case|:
case|case
name|GL_INVERT
case|:
case|case
name|GL_INCR_WRAP
case|:
case|case
name|GL_DECR_WRAP
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|face
operator|==
name|GL_FRONT
operator|||
name|face
operator|==
name|GL_FRONT_AND_BACK
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setStencilOperations
argument_list|(
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|face
operator|==
name|GL_BACK
operator|||
name|face
operator|==
name|GL_FRONT_AND_BACK
condition|)
block|{
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setStencilBackOperations
argument_list|(
name|fail
argument_list|,
name|zfail
argument_list|,
name|zpass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glTestFenceNV
name|GLboolean
name|GL_APIENTRY
name|glTestFenceNV
parameter_list|(
name|GLuint
name|fence
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint fence = %d)"
argument_list|,
name|fence
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|FenceNV
modifier|*
name|fenceObject
init|=
name|context
operator|->
name|getFenceNV
argument_list|(
name|fence
argument_list|)
decl_stmt|;
if|if
condition|(
name|fenceObject
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_TRUE
return|;
block|}
if|if
condition|(
name|fenceObject
operator|->
name|isFence
argument_list|()
operator|!=
name|GL_TRUE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_TRUE
return|;
block|}
name|GLboolean
name|result
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|fenceObject
operator|->
name|testFence
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|GL_TRUE
return|;
block|}
return|return
name|result
return|;
block|}
return|return
name|GL_TRUE
return|;
block|}
DECL|function|glTexImage2D
name|void
name|GL_APIENTRY
name|glTexImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint internalformat = %d, GLsizei width = %d, GLsizei height = %d, "
literal|"GLint border = %d, GLenum format = 0x%X, GLenum type = 0x%X, const GLvoid* pixels = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
operator|&&
operator|!
name|ValidateES2TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|&&
operator|!
name|ValidateES3TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
block|{
name|gl
operator|::
name|Texture2D
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture2D
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|setImage
argument_list|(
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|internalformat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|pixels
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
case|:
block|{
name|gl
operator|::
name|TextureCubeMap
modifier|*
name|texture
init|=
name|context
operator|->
name|getTextureCubeMap
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|setImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|internalformat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|pixels
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glTexParameterf
name|void
name|GL_APIENTRY
name|glTexParameterf
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
name|param
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLint param = %f)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateTexParamParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_TEXTURE_WRAP_S
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapS
operator|=
name|gl
operator|::
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_T
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapT
operator|=
name|gl
operator|::
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_R
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapR
operator|=
name|gl
operator|::
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_FILTER
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|minFilter
operator|=
name|gl
operator|::
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAG_FILTER
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|magFilter
operator|=
name|gl
operator|::
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_USAGE_ANGLE
case|:
name|texture
operator|->
name|setUsage
argument_list|(
name|gl
operator|::
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_ANISOTROPY_EXT
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|maxAnisotropy
operator|=
name|std
operator|::
name|min
argument_list|(
name|param
argument_list|,
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|maxTextureAnisotropy
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_COMPARE_MODE
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|compareMode
operator|=
name|gl
operator|::
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_COMPARE_FUNC
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|compareFunc
operator|=
name|gl
operator|::
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_R
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleRed
operator|=
name|gl
operator|::
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_G
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleGreen
operator|=
name|gl
operator|::
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_B
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleBlue
operator|=
name|gl
operator|::
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_A
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleAlpha
operator|=
name|gl
operator|::
name|uiround
argument_list|<
name|GLenum
argument_list|>
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_BASE_LEVEL
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|baseLevel
operator|=
name|gl
operator|::
name|iround
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LEVEL
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|maxLevel
operator|=
name|gl
operator|::
name|iround
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_LOD
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|minLod
operator|=
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LOD
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|maxLod
operator|=
name|param
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|function|glTexParameterfv
name|void
name|GL_APIENTRY
name|glTexParameterfv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|glTexParameterf
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
operator|(
name|GLfloat
operator|)
operator|*
name|params
argument_list|)
expr_stmt|;
block|}
DECL|function|glTexParameteri
name|void
name|GL_APIENTRY
name|glTexParameteri
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
name|param
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLint param = %d)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateTexParamParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|context
operator|->
name|getTargetTexture
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_TEXTURE_WRAP_S
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapS
operator|=
operator|(
name|GLenum
operator|)
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_T
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapT
operator|=
operator|(
name|GLenum
operator|)
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_WRAP_R
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|wrapR
operator|=
operator|(
name|GLenum
operator|)
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_FILTER
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|minFilter
operator|=
operator|(
name|GLenum
operator|)
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAG_FILTER
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|magFilter
operator|=
operator|(
name|GLenum
operator|)
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_USAGE_ANGLE
case|:
name|texture
operator|->
name|setUsage
argument_list|(
operator|(
name|GLenum
operator|)
name|param
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_ANISOTROPY_EXT
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|maxAnisotropy
operator|=
name|std
operator|::
name|min
argument_list|(
operator|(
name|float
operator|)
name|param
argument_list|,
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|maxTextureAnisotropy
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_COMPARE_MODE
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|compareMode
operator|=
operator|(
name|GLenum
operator|)
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_COMPARE_FUNC
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|compareFunc
operator|=
operator|(
name|GLenum
operator|)
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_R
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleRed
operator|=
operator|(
name|GLenum
operator|)
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_G
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleGreen
operator|=
operator|(
name|GLenum
operator|)
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_B
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleBlue
operator|=
operator|(
name|GLenum
operator|)
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_SWIZZLE_A
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|swizzleAlpha
operator|=
operator|(
name|GLenum
operator|)
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_BASE_LEVEL
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|baseLevel
operator|=
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LEVEL
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|maxLevel
operator|=
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MIN_LOD
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|minLod
operator|=
operator|(
name|GLfloat
operator|)
name|param
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_MAX_LOD
case|:
name|texture
operator|->
name|getSamplerState
argument_list|()
operator|.
name|maxLod
operator|=
operator|(
name|GLfloat
operator|)
name|param
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|function|glTexParameteriv
name|void
name|GL_APIENTRY
name|glTexParameteriv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
specifier|const
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|glTexParameteri
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
operator|*
name|params
argument_list|)
expr_stmt|;
block|}
DECL|function|glTexStorage2DEXT
name|void
name|GL_APIENTRY
name|glTexStorage2DEXT
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei levels = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|context
operator|->
name|getExtensions
argument_list|()
operator|.
name|textureStorage
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
operator|&&
operator|!
name|ValidateES2TexStorageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|&&
operator|!
name|ValidateES3TexStorageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
block|{
name|gl
operator|::
name|Texture2D
modifier|*
name|texture2d
init|=
name|context
operator|->
name|getTexture2D
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture2d
operator|->
name|storage
argument_list|(
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP
case|:
block|{
name|gl
operator|::
name|TextureCubeMap
modifier|*
name|textureCube
init|=
name|context
operator|->
name|getTextureCubeMap
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|textureCube
operator|->
name|storage
argument_list|(
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glTexSubImage2D
name|void
name|GL_APIENTRY
name|glTexSubImage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
literal|"GLsizei width = %d, GLsizei height = %d, GLenum format = 0x%X, GLenum type = 0x%X, "
literal|"const GLvoid* pixels = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
operator|&&
operator|!
name|ValidateES2TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|>=
literal|3
operator|&&
operator|!
name|ValidateES3TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Zero sized uploads are valid but no-ops
if|if
condition|(
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
block|{
name|gl
operator|::
name|Texture2D
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture2D
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|subImage
argument_list|(
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|pixels
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
case|:
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
case|:
block|{
name|gl
operator|::
name|TextureCubeMap
modifier|*
name|texture
init|=
name|context
operator|->
name|getTextureCubeMap
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|subImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|pixels
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glUniform1f
name|void
name|GL_APIENTRY
name|glUniform1f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|)
block|{
name|glUniform1fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
operator|&
name|x
argument_list|)
expr_stmt|;
block|}
DECL|function|glUniform1fv
name|void
name|GL_APIENTRY
name|glUniform1fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_FLOAT
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniform1fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniform1i
name|void
name|GL_APIENTRY
name|glUniform1i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|)
block|{
name|glUniform1iv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
operator|&
name|x
argument_list|)
expr_stmt|;
block|}
DECL|function|glUniform1iv
name|void
name|GL_APIENTRY
name|glUniform1iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_INT
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniform1iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniform2f
name|void
name|GL_APIENTRY
name|glUniform2f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
block|{
name|GLfloat
name|xy
index|[
literal|2
index|]
init|=
block|{
name|x
block|,
name|y
block|}
decl_stmt|;
name|glUniform2fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xy
argument_list|)
expr_stmt|;
block|}
DECL|function|glUniform2fv
name|void
name|GL_APIENTRY
name|glUniform2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_VEC2
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniform2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniform2i
name|void
name|GL_APIENTRY
name|glUniform2i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|)
block|{
name|GLint
name|xy
index|[
literal|2
index|]
init|=
block|{
name|x
block|,
name|y
block|}
decl_stmt|;
name|glUniform2iv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xy
argument_list|)
expr_stmt|;
block|}
DECL|function|glUniform2iv
name|void
name|GL_APIENTRY
name|glUniform2iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_INT_VEC2
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniform2iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniform3f
name|void
name|GL_APIENTRY
name|glUniform3f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
block|{
name|GLfloat
name|xyz
index|[
literal|3
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|}
decl_stmt|;
name|glUniform3fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xyz
argument_list|)
expr_stmt|;
block|}
DECL|function|glUniform3fv
name|void
name|GL_APIENTRY
name|glUniform3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_VEC3
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniform3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniform3i
name|void
name|GL_APIENTRY
name|glUniform3i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|)
block|{
name|GLint
name|xyz
index|[
literal|3
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|}
decl_stmt|;
name|glUniform3iv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xyz
argument_list|)
expr_stmt|;
block|}
DECL|function|glUniform3iv
name|void
name|GL_APIENTRY
name|glUniform3iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_INT_VEC3
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniform3iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniform4f
name|void
name|GL_APIENTRY
name|glUniform4f
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
block|{
name|GLfloat
name|xyzw
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
name|w
block|}
decl_stmt|;
name|glUniform4fv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xyzw
argument_list|)
expr_stmt|;
block|}
DECL|function|glUniform4fv
name|void
name|GL_APIENTRY
name|glUniform4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLfloat* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_VEC4
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniform4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniform4i
name|void
name|GL_APIENTRY
name|glUniform4i
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|,
name|GLint
name|w
parameter_list|)
block|{
name|GLint
name|xyzw
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
name|w
block|}
decl_stmt|;
name|glUniform4iv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xyzw
argument_list|)
expr_stmt|;
block|}
DECL|function|glUniform4iv
name|void
name|GL_APIENTRY
name|glUniform4iv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLint* v = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_INT_VEC4
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniform4iv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniformMatrix2fv
name|void
name|GL_APIENTRY
name|glUniformMatrix2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT2
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniformMatrix2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniformMatrix3fv
name|void
name|GL_APIENTRY
name|glUniformMatrix3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT3
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniformMatrix3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniformMatrix4fv
name|void
name|GL_APIENTRY
name|glUniformMatrix4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT4
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniformMatrix4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUseProgram
name|void
name|GL_APIENTRY
name|glUseProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d)"
argument_list|,
name|program
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
operator|&&
name|program
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|program
operator|!=
literal|0
operator|&&
operator|!
name|programObject
operator|->
name|isLinked
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|useProgram
argument_list|(
name|program
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glValidateProgram
name|void
name|GL_APIENTRY
name|glValidateProgram
parameter_list|(
name|GLuint
name|program
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %d)"
argument_list|,
name|program
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|programObject
operator|->
name|validate
argument_list|(
name|context
operator|->
name|getCaps
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttrib1f
name|void
name|GL_APIENTRY
name|glVertexAttrib1f
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLfloat
name|x
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLfloat x = %f)"
argument_list|,
name|index
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLfloat
name|vals
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttrib1fv
name|void
name|GL_APIENTRY
name|glVertexAttrib1fv
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, const GLfloat* values = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLfloat
name|vals
index|[
literal|4
index|]
init|=
block|{
name|values
index|[
literal|0
index|]
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttrib2f
name|void
name|GL_APIENTRY
name|glVertexAttrib2f
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLfloat x = %f, GLfloat y = %f)"
argument_list|,
name|index
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLfloat
name|vals
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttrib2fv
name|void
name|GL_APIENTRY
name|glVertexAttrib2fv
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, const GLfloat* values = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLfloat
name|vals
index|[
literal|4
index|]
init|=
block|{
name|values
index|[
literal|0
index|]
block|,
name|values
index|[
literal|1
index|]
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttrib3f
name|void
name|GL_APIENTRY
name|glVertexAttrib3f
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLfloat x = %f, GLfloat y = %f, GLfloat z = %f)"
argument_list|,
name|index
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLfloat
name|vals
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
literal|1
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttrib3fv
name|void
name|GL_APIENTRY
name|glVertexAttrib3fv
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, const GLfloat* values = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLfloat
name|vals
index|[
literal|4
index|]
init|=
block|{
name|values
index|[
literal|0
index|]
block|,
name|values
index|[
literal|1
index|]
block|,
name|values
index|[
literal|2
index|]
block|,
literal|1
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttrib4f
name|void
name|GL_APIENTRY
name|glVertexAttrib4f
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLfloat
name|x
parameter_list|,
name|GLfloat
name|y
parameter_list|,
name|GLfloat
name|z
parameter_list|,
name|GLfloat
name|w
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLfloat x = %f, GLfloat y = %f, GLfloat z = %f, GLfloat w = %f)"
argument_list|,
name|index
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLfloat
name|vals
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
name|w
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttrib4fv
name|void
name|GL_APIENTRY
name|glVertexAttrib4fv
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|values
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, const GLfloat* values = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribf
argument_list|(
name|index
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttribDivisorANGLE
name|void
name|GL_APIENTRY
name|glVertexAttribDivisorANGLE
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLuint
name|divisor
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLuint divisor = %d)"
argument_list|,
name|index
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|setVertexAttribDivisor
argument_list|(
name|index
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttribPointer
name|void
name|GL_APIENTRY
name|glVertexAttribPointer
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLboolean
name|normalized
parameter_list|,
name|GLsizei
name|stride
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|ptr
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %d, GLint size = %d, GLenum type = 0x%X, "
literal|"GLboolean normalized = %u, GLsizei stride = %d, const GLvoid* ptr = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|normalized
argument_list|,
name|stride
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|size
argument_list|<
literal|1
operator|||
name|size
argument_list|>
literal|4
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_BYTE
case|:
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_SHORT
case|:
case|case
name|GL_UNSIGNED_SHORT
case|:
case|case
name|GL_FIXED
case|:
case|case
name|GL_FLOAT
case|:
break|break;
case|case
name|GL_HALF_FLOAT
case|:
case|case
name|GL_INT
case|:
case|case
name|GL_UNSIGNED_INT
case|:
case|case
name|GL_INT_2_10_10_10_REV
case|:
case|case
name|GL_UNSIGNED_INT_2_10_10_10_REV
case|:
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|stride
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|(
name|type
operator|==
name|GL_INT_2_10_10_10_REV
operator|||
name|type
operator|==
name|GL_UNSIGNED_INT_2_10_10_10_REV
operator|)
operator|&&
name|size
operator|!=
literal|4
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// [OpenGL ES 3.0.2] Section 2.8 page 24:
comment|// An INVALID_OPERATION error is generated when a non-zero vertex array object
comment|// is bound, zero is bound to the ARRAY_BUFFER buffer object binding point,
comment|// and the pointer argument is not NULL.
if|if
condition|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexArray
argument_list|()
operator|->
name|id
argument_list|()
operator|!=
literal|0
operator|&&
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getArrayBufferId
argument_list|()
operator|==
literal|0
operator|&&
name|ptr
operator|!=
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribState
argument_list|(
name|index
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|GL_ARRAY_BUFFER
argument_list|)
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|normalized
operator|==
name|GL_TRUE
argument_list|,
literal|false
argument_list|,
name|stride
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glViewport
name|void
name|GL_APIENTRY
name|glViewport
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|width
operator|<
literal|0
operator|||
name|height
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setViewportParams
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
block|}
comment|// OpenGL ES 3.0 functions
DECL|function|glReadBuffer
name|void
name|GL_APIENTRY
name|glReadBuffer
parameter_list|(
name|GLenum
name|mode
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X)"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// glReadBuffer
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|glDrawRangeElements
name|void
name|GL_APIENTRY
name|glDrawRangeElements
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLuint
name|start
parameter_list|,
name|GLuint
name|end
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X, GLuint start = %u, GLuint end = %u, GLsizei count = %d, GLenum type = 0x%X, "
literal|"const GLvoid* indices = 0x%0.8p)"
argument_list|,
name|mode
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// glDrawRangeElements
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|glTexImage3D
name|void
name|GL_APIENTRY
name|glTexImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint internalformat = %d, GLsizei width = %d, "
literal|"GLsizei height = %d, GLsizei depth = %d, GLint border = %d, GLenum format = 0x%X, "
literal|"GLenum type = 0x%X, const GLvoid* pixels = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// validateES3TexImageFormat sets the error code if there is an error
if|if
condition|(
operator|!
name|ValidateES3TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_3D
case|:
block|{
name|gl
operator|::
name|Texture3D
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture3D
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|setImage
argument_list|(
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|internalformat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|pixels
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
block|{
name|gl
operator|::
name|Texture2DArray
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture2DArray
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|setImage
argument_list|(
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|internalformat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|pixels
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glTexSubImage3D
name|void
name|GL_APIENTRY
name|glTexSubImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
literal|"GLint zoffset = %d, GLsizei width = %d, GLsizei height = %d, GLsizei depth = %d, "
literal|"GLenum format = 0x%X, GLenum type = 0x%X, const GLvoid* pixels = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// validateES3TexImageFormat sets the error code if there is an error
if|if
condition|(
operator|!
name|ValidateES3TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
literal|0
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Zero sized uploads are valid but no-ops
if|if
condition|(
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
operator|||
name|depth
operator|==
literal|0
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_3D
case|:
block|{
name|gl
operator|::
name|Texture3D
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture3D
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|subImage
argument_list|(
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|pixels
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
block|{
name|gl
operator|::
name|Texture2DArray
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture2DArray
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|subImage
argument_list|(
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|pixels
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glCopyTexSubImage3D
name|void
name|GL_APIENTRY
name|glCopyTexSubImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
literal|"GLint zoffset = %d, GLint x = %d, GLint y = %d, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateES3CopyTexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|true
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getReadFramebuffer
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Texture
modifier|*
name|texture
init|=
name|NULL
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_3D
case|:
name|texture
operator|=
name|context
operator|->
name|getTexture3D
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
name|texture
operator|=
name|context
operator|->
name|getTexture2DArray
argument_list|()
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|copySubImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|framebuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glCompressedTexImage3D
name|void
name|GL_APIENTRY
name|glCompressedTexImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, GLsizei width = %d, "
literal|"GLsizei height = %d, GLsizei depth = %d, GLint border = %d, GLsizei imageSize = %d, "
literal|"const GLvoid* data = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|border
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageSize
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|imageSize
argument_list|)
operator|!=
name|formatInfo
operator|.
name|computeBlockSize
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// validateES3TexImageFormat sets the error code if there is an error
if|if
condition|(
operator|!
name|ValidateES3TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|border
argument_list|,
name|GL_NONE
argument_list|,
name|GL_NONE
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_3D
case|:
block|{
name|gl
operator|::
name|Texture3D
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture3D
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|setCompressedImage
argument_list|(
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|imageSize
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
block|{
name|gl
operator|::
name|Texture2DArray
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture2DArray
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|setCompressedImage
argument_list|(
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|imageSize
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glCompressedTexSubImage3D
name|void
name|GL_APIENTRY
name|glCompressedTexSubImage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLint xoffset = %d, GLint yoffset = %d, "
literal|"GLint zoffset = %d, GLsizei width = %d, GLsizei height = %d, GLsizei depth = %d, "
literal|"GLenum format = 0x%X, GLsizei imageSize = %d, const GLvoid* data = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageSize
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|imageSize
argument_list|)
operator|!=
name|formatInfo
operator|.
name|computeBlockSize
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|data
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// validateES3TexImageFormat sets the error code if there is an error
if|if
condition|(
operator|!
name|ValidateES3TexImageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|GL_NONE
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
literal|0
argument_list|,
name|GL_NONE
argument_list|,
name|GL_NONE
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Zero sized uploads are valid but no-ops
if|if
condition|(
name|width
operator|==
literal|0
operator|||
name|height
operator|==
literal|0
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_3D
case|:
block|{
name|gl
operator|::
name|Texture3D
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture3D
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|subImageCompressed
argument_list|(
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
block|{
name|gl
operator|::
name|Texture2DArray
modifier|*
name|texture
init|=
name|context
operator|->
name|getTexture2DArray
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture
operator|->
name|subImageCompressed
argument_list|(
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getUnpackState
argument_list|()
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGenQueries
name|void
name|GL_APIENTRY
name|glGenQueries
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* ids = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ids
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createQuery
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glDeleteQueries
name|void
name|GL_APIENTRY
name|glDeleteQueries
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* ids = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|->
name|deleteQuery
argument_list|(
name|ids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glIsQuery
name|GLboolean
name|GL_APIENTRY
name|glIsQuery
parameter_list|(
name|GLuint
name|id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint id = %u)"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
return|return
operator|(
name|context
operator|->
name|getQuery
argument_list|(
name|id
argument_list|,
literal|false
argument_list|,
name|GL_NONE
argument_list|)
operator|!=
name|NULL
operator|)
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glBeginQuery
name|void
name|GL_APIENTRY
name|glBeginQuery
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint id = %u)"
argument_list|,
name|target
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateBeginQuery
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|id
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|beginQuery
argument_list|(
name|target
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glEndQuery
name|void
name|GL_APIENTRY
name|glEndQuery
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X)"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateEndQuery
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|endQuery
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGetQueryiv
name|void
name|GL_APIENTRY
name|glGetQueryiv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidQueryType
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_CURRENT_QUERY
case|:
name|params
index|[
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getActiveQueryId
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGetQueryObjectuiv
name|void
name|GL_APIENTRY
name|glGetQueryObjectuiv
parameter_list|(
name|GLuint
name|id
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLuint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint id = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|id
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Query
modifier|*
name|queryObject
init|=
name|context
operator|->
name|getQuery
argument_list|(
name|id
argument_list|,
literal|false
argument_list|,
name|GL_NONE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|queryObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getActiveQueryId
argument_list|(
name|queryObject
operator|->
name|getType
argument_list|()
argument_list|)
operator|==
name|id
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_QUERY_RESULT_EXT
case|:
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|queryObject
operator|->
name|getResult
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_QUERY_RESULT_AVAILABLE_EXT
case|:
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|queryObject
operator|->
name|isResultAvailable
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glUnmapBuffer
name|GLboolean
name|GL_APIENTRY
name|glUnmapBuffer
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X)"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
return|return
name|glUnmapBufferOES
argument_list|(
name|target
argument_list|)
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glGetBufferPointerv
name|void
name|GL_APIENTRY
name|glGetBufferPointerv
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLvoid
modifier|*
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLvoid** params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|glGetBufferPointervOES
argument_list|(
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glDrawBuffers
name|void
name|GL_APIENTRY
name|glDrawBuffers
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|bufs
parameter_list|)
block|{
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|glDrawBuffersEXT
argument_list|(
name|n
argument_list|,
name|bufs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniformMatrix2x3fv
name|void
name|GL_APIENTRY
name|glUniformMatrix2x3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT2x3
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniformMatrix2x3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniformMatrix3x2fv
name|void
name|GL_APIENTRY
name|glUniformMatrix3x2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT3x2
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniformMatrix3x2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniformMatrix2x4fv
name|void
name|GL_APIENTRY
name|glUniformMatrix2x4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT2x4
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniformMatrix2x4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniformMatrix4x2fv
name|void
name|GL_APIENTRY
name|glUniformMatrix4x2fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT4x2
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniformMatrix4x2fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniformMatrix3x4fv
name|void
name|GL_APIENTRY
name|glUniformMatrix3x4fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT3x4
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniformMatrix3x4fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniformMatrix4x3fv
name|void
name|GL_APIENTRY
name|glUniformMatrix4x3fv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLboolean
name|transpose
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, GLboolean transpose = %u, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniformMatrix
argument_list|(
name|context
argument_list|,
name|GL_FLOAT_MAT4x3
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniformMatrix4x3fv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|transpose
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glBlitFramebuffer
name|void
name|GL_APIENTRY
name|glBlitFramebuffer
parameter_list|(
name|GLint
name|srcX0
parameter_list|,
name|GLint
name|srcY0
parameter_list|,
name|GLint
name|srcX1
parameter_list|,
name|GLint
name|srcY1
parameter_list|,
name|GLint
name|dstX0
parameter_list|,
name|GLint
name|dstY0
parameter_list|,
name|GLint
name|dstX1
parameter_list|,
name|GLint
name|dstY1
parameter_list|,
name|GLbitfield
name|mask
parameter_list|,
name|GLenum
name|filter
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint srcX0 = %d, GLint srcY0 = %d, GLint srcX1 = %d, GLint srcY1 = %d, GLint dstX0 = %d, "
literal|"GLint dstY0 = %d, GLint dstX1 = %d, GLint dstY1 = %d, GLbitfield mask = 0x%X, GLenum filter = 0x%X)"
argument_list|,
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateBlitFramebufferParameters
argument_list|(
name|context
argument_list|,
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|blitFramebuffer
argument_list|(
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glRenderbufferStorageMultisample
name|void
name|GL_APIENTRY
name|glRenderbufferStorageMultisample
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|samples
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei samples = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateRenderbufferStorageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|samples
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Renderbuffer
modifier|*
name|renderbuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentRenderbuffer
argument_list|()
decl_stmt|;
name|renderbuffer
operator|->
name|setStorage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|internalformat
argument_list|,
name|samples
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glFramebufferTextureLayer
name|void
name|GL_APIENTRY
name|glFramebufferTextureLayer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|attachment
parameter_list|,
name|GLuint
name|texture
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum attachment = 0x%X, GLuint texture = %u, GLint level = %d, GLint layer = %d)"
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|texture
argument_list|,
name|level
argument_list|,
name|layer
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateFramebufferTextureLayer
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|attachment
argument_list|,
name|texture
argument_list|,
name|level
argument_list|,
name|layer
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetFramebuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|texture
operator|!=
literal|0
condition|)
block|{
name|gl
operator|::
name|Texture
modifier|*
name|textureObject
init|=
name|context
operator|->
name|getTexture
argument_list|(
name|texture
argument_list|)
decl_stmt|;
name|gl
operator|::
name|ImageIndex
name|index
argument_list|(
name|textureObject
operator|->
name|getTarget
argument_list|()
argument_list|,
name|level
argument_list|,
name|layer
argument_list|)
decl_stmt|;
name|framebuffer
operator|->
name|setTextureAttachment
argument_list|(
name|attachment
argument_list|,
name|textureObject
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|framebuffer
operator|->
name|setNULLAttachment
argument_list|(
name|attachment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glMapBufferRange
name|GLvoid
modifier|*
name|GL_APIENTRY
name|glMapBufferRange
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|length
parameter_list|,
name|GLbitfield
name|access
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d, GLbitfield access = 0x%X)"
argument_list|,
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|access
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|glMapBufferRangeEXT
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|access
argument_list|)
return|;
block|}
return|return
name|NULL
return|;
block|}
DECL|function|glFlushMappedBufferRange
name|void
name|GL_APIENTRY
name|glFlushMappedBufferRange
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|length
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d)"
argument_list|,
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|glFlushMappedBufferRangeEXT
argument_list|(
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glBindVertexArray
name|void
name|GL_APIENTRY
name|glBindVertexArray
parameter_list|(
name|GLuint
name|array
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint array = %u)"
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|VertexArray
modifier|*
name|vao
init|=
name|context
operator|->
name|getVertexArray
argument_list|(
name|array
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vao
condition|)
block|{
comment|// The default VAO should always exist
name|ASSERT
argument_list|(
name|array
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindVertexArray
argument_list|(
name|array
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glDeleteVertexArrays
name|void
name|GL_APIENTRY
name|glDeleteVertexArrays
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|arrays
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* arrays = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|arrays
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|arrayIndex
init|=
literal|0
init|;
name|arrayIndex
operator|<
name|n
condition|;
name|arrayIndex
operator|++
control|)
block|{
if|if
condition|(
name|arrays
index|[
name|arrayIndex
index|]
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|deleteVertexArray
argument_list|(
name|arrays
index|[
name|arrayIndex
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|glGenVertexArrays
name|void
name|GL_APIENTRY
name|glGenVertexArrays
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|arrays
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* arrays = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|arrays
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|arrayIndex
init|=
literal|0
init|;
name|arrayIndex
operator|<
name|n
condition|;
name|arrayIndex
operator|++
control|)
block|{
name|arrays
index|[
name|arrayIndex
index|]
operator|=
name|context
operator|->
name|createVertexArray
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glIsVertexArray
name|GLboolean
name|GL_APIENTRY
name|glIsVertexArray
parameter_list|(
name|GLuint
name|array
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint array = %u)"
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
if|if
condition|(
name|array
operator|==
literal|0
condition|)
block|{
return|return
name|GL_FALSE
return|;
block|}
name|gl
operator|::
name|VertexArray
modifier|*
name|vao
init|=
name|context
operator|->
name|getVertexArray
argument_list|(
name|array
argument_list|)
decl_stmt|;
return|return
operator|(
name|vao
operator|!=
name|NULL
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
operator|)
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glGetIntegeri_v
name|void
name|GL_APIENTRY
name|glGetIntegeri_v
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLint
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint index = %u, GLint* data = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|index
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_START
case|:
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
case|:
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxTransformFeedbackSeparateAttributes
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_UNIFORM_BUFFER_START
case|:
case|case
name|GL_UNIFORM_BUFFER_SIZE
case|:
case|case
name|GL_UNIFORM_BUFFER_BINDING
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxCombinedUniformBlocks
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|context
operator|->
name|getIndexedIntegerv
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|data
argument_list|)
operator|)
condition|)
block|{
name|GLenum
name|nativeType
decl_stmt|;
name|unsigned
name|int
name|numParams
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|->
name|getIndexedQueryParameterInfo
argument_list|(
name|target
argument_list|,
operator|&
name|nativeType
argument_list|,
operator|&
name|numParams
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|numParams
operator|==
literal|0
condition|)
block|{
return|return;
comment|// it is known that pname is valid, but there are no parameters to return
block|}
if|if
condition|(
name|nativeType
operator|==
name|GL_INT_64_ANGLEX
condition|)
block|{
name|GLint64
name|minIntValue
init|=
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
decl_stmt|;
name|GLint64
name|maxIntValue
init|=
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|max
argument_list|()
argument_list|)
decl_stmt|;
name|GLint64
modifier|*
name|int64Params
init|=
operator|new
name|GLint64
index|[
name|numParams
index|]
decl_stmt|;
name|context
operator|->
name|getIndexedInteger64v
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|int64Params
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParams
condition|;
operator|++
name|i
control|)
block|{
name|GLint64
name|clampedValue
init|=
name|std
operator|::
name|max
argument_list|(
name|std
operator|::
name|min
argument_list|(
name|int64Params
index|[
name|i
index|]
argument_list|,
name|maxIntValue
argument_list|)
argument_list|,
name|minIntValue
argument_list|)
decl_stmt|;
name|data
index|[
name|i
index|]
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|clampedValue
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|int64Params
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|glBeginTransformFeedback
name|void
name|GL_APIENTRY
name|glBeginTransformFeedback
parameter_list|(
name|GLenum
name|primitiveMode
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum primitiveMode = 0x%X)"
argument_list|,
name|primitiveMode
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|primitiveMode
condition|)
block|{
case|case
name|GL_TRIANGLES
case|:
case|case
name|GL_LINES
case|:
case|case
name|GL_POINTS
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|TransformFeedback
modifier|*
name|transformFeedback
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentTransformFeedback
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|transformFeedback
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|transformFeedback
operator|->
name|isStarted
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|transformFeedback
operator|->
name|isPaused
argument_list|()
condition|)
block|{
name|transformFeedback
operator|->
name|resume
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|transformFeedback
operator|->
name|start
argument_list|(
name|primitiveMode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glEndTransformFeedback
name|void
name|GL_APIENTRY
name|glEndTransformFeedback
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(void)"
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|TransformFeedback
modifier|*
name|transformFeedback
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentTransformFeedback
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|transformFeedback
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|transformFeedback
operator|->
name|isStarted
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|transformFeedback
operator|->
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|glBindBufferRange
name|void
name|GL_APIENTRY
name|glBindBufferRange
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLuint
name|buffer
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint index = %u, GLuint buffer = %u, GLintptr offset = %d, GLsizeiptr size = %d)"
argument_list|,
name|target
argument_list|,
name|index
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxTransformFeedbackSeparateAttributes
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_UNIFORM_BUFFER
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxUniformBufferBindings
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|buffer
operator|!=
literal|0
operator|&&
name|size
operator|<=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER
case|:
comment|// size and offset must be a multiple of 4
if|if
condition|(
name|buffer
operator|!=
literal|0
operator|&&
operator|(
operator|(
name|offset
operator|%
literal|4
operator|)
operator|!=
literal|0
operator|||
operator|(
name|size
operator|%
literal|4
operator|)
operator|!=
literal|0
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindIndexedTransformFeedbackBuffer
argument_list|(
name|buffer
argument_list|,
name|index
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|context
operator|->
name|bindGenericTransformFeedbackBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_UNIFORM_BUFFER
case|:
comment|// it is an error to bind an offset not a multiple of the alignment
if|if
condition|(
name|buffer
operator|!=
literal|0
operator|&&
operator|(
name|offset
operator|%
name|caps
operator|.
name|uniformBufferOffsetAlignment
operator|)
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindIndexedUniformBuffer
argument_list|(
name|buffer
argument_list|,
name|index
argument_list|,
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|context
operator|->
name|bindGenericUniformBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glBindBufferBase
name|void
name|GL_APIENTRY
name|glBindBufferBase
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLuint
name|buffer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint index = %u, GLuint buffer = %u)"
argument_list|,
name|target
argument_list|,
name|index
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxTransformFeedbackSeparateAttributes
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_UNIFORM_BUFFER
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxUniformBufferBindings
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER
case|:
name|context
operator|->
name|bindIndexedTransformFeedbackBuffer
argument_list|(
name|buffer
argument_list|,
name|index
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|context
operator|->
name|bindGenericTransformFeedbackBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_UNIFORM_BUFFER
case|:
name|context
operator|->
name|bindIndexedUniformBuffer
argument_list|(
name|buffer
argument_list|,
name|index
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|context
operator|->
name|bindGenericUniformBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glTransformFeedbackVaryings
name|void
name|GL_APIENTRY
name|glTransformFeedbackVaryings
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLchar
modifier|*
specifier|const
modifier|*
name|varyings
parameter_list|,
name|GLenum
name|bufferMode
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLsizei count = %d, const GLchar* const* varyings = 0x%0.8p, GLenum bufferMode = 0x%X)"
argument_list|,
name|program
argument_list|,
name|count
argument_list|,
name|varyings
argument_list|,
name|bufferMode
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|bufferMode
condition|)
block|{
case|case
name|GL_INTERLEAVED_ATTRIBS
case|:
break|break;
case|case
name|GL_SEPARATE_ATTRIBS
case|:
if|if
condition|(
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|count
argument_list|)
operator|>
name|caps
operator|.
name|maxTransformFeedbackSeparateAttributes
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
name|programObject
operator|->
name|setTransformFeedbackVaryings
argument_list|(
name|count
argument_list|,
name|varyings
argument_list|,
name|bufferMode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetTransformFeedbackVarying
name|void
name|GL_APIENTRY
name|glGetTransformFeedbackVarying
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLsizei
modifier|*
name|size
parameter_list|,
name|GLenum
modifier|*
name|type
parameter_list|,
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLuint index = %u, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, "
literal|"GLsizei* size = 0x%0.8p, GLenum* type = 0x%0.8p, GLchar* name = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|index
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|bufSize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidProgram
argument_list|(
name|context
argument_list|,
name|program
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|programObject
operator|->
name|getTransformFeedbackVaryingCount
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|programObject
operator|->
name|getTransformFeedbackVarying
argument_list|(
name|index
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttribIPointer
name|void
name|GL_APIENTRY
name|glVertexAttribIPointer
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLint
name|size
parameter_list|,
name|GLenum
name|type
parameter_list|,
name|GLsizei
name|stride
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pointer
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, GLint size = %d, GLenum type = 0x%X, GLsizei stride = %d, const GLvoid* pointer = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|stride
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|size
argument_list|<
literal|1
operator|||
name|size
argument_list|>
literal|4
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_BYTE
case|:
case|case
name|GL_UNSIGNED_BYTE
case|:
case|case
name|GL_SHORT
case|:
case|case
name|GL_UNSIGNED_SHORT
case|:
case|case
name|GL_INT
case|:
case|case
name|GL_UNSIGNED_INT
case|:
case|case
name|GL_INT_2_10_10_10_REV
case|:
case|case
name|GL_UNSIGNED_INT_2_10_10_10_REV
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|stride
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|(
name|type
operator|==
name|GL_INT_2_10_10_10_REV
operator|||
name|type
operator|==
name|GL_UNSIGNED_INT_2_10_10_10_REV
operator|)
operator|&&
name|size
operator|!=
literal|4
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// [OpenGL ES 3.0.2] Section 2.8 page 24:
comment|// An INVALID_OPERATION error is generated when a non-zero vertex array object
comment|// is bound, zero is bound to the ARRAY_BUFFER buffer object binding point,
comment|// and the pointer argument is not NULL.
if|if
condition|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexArray
argument_list|()
operator|->
name|id
argument_list|()
operator|!=
literal|0
operator|&&
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getArrayBufferId
argument_list|()
operator|==
literal|0
operator|&&
name|pointer
operator|!=
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribState
argument_list|(
name|index
argument_list|,
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|GL_ARRAY_BUFFER
argument_list|)
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|stride
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetVertexAttribIiv
name|void
name|GL_APIENTRY
name|glGetVertexAttribIiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attribState
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexAttribState
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidateGetVertexAttribParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pname
operator|==
name|GL_CURRENT_VERTEX_ATTRIB
condition|)
block|{
specifier|const
name|gl
operator|::
name|VertexAttribCurrentValueData
modifier|&
name|currentValueData
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexAttribCurrentValue
argument_list|(
name|index
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|currentValueData
operator|.
name|IntValues
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
operator|*
name|params
operator|=
name|gl
operator|::
name|QuerySingleVertexAttributeParameter
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|attribState
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGetVertexAttribIuiv
name|void
name|GL_APIENTRY
name|glGetVertexAttribIuiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLuint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, GLenum pname = 0x%X, GLuint* params = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attribState
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexAttribState
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidateGetVertexAttribParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|pname
operator|==
name|GL_CURRENT_VERTEX_ATTRIB
condition|)
block|{
specifier|const
name|gl
operator|::
name|VertexAttribCurrentValueData
modifier|&
name|currentValueData
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getVertexAttribCurrentValue
argument_list|(
name|index
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|params
index|[
name|i
index|]
operator|=
name|currentValueData
operator|.
name|UnsignedIntValues
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
operator|*
name|params
operator|=
name|gl
operator|::
name|QuerySingleVertexAttributeParameter
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|attribState
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glVertexAttribI4i
name|void
name|GL_APIENTRY
name|glVertexAttribI4i
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLint
name|z
parameter_list|,
name|GLint
name|w
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, GLint x = %d, GLint y = %d, GLint z = %d, GLint w = %d)"
argument_list|,
name|index
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLint
name|vals
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
name|w
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribi
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttribI4ui
name|void
name|GL_APIENTRY
name|glVertexAttribI4ui
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLuint
name|x
parameter_list|,
name|GLuint
name|y
parameter_list|,
name|GLuint
name|z
parameter_list|,
name|GLuint
name|w
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, GLuint x = %u, GLuint y = %u, GLuint z = %u, GLuint w = %u)"
argument_list|,
name|index
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|z
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLuint
name|vals
index|[
literal|4
index|]
init|=
block|{
name|x
block|,
name|y
block|,
name|z
block|,
name|w
block|}
decl_stmt|;
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribu
argument_list|(
name|index
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttribI4iv
name|void
name|GL_APIENTRY
name|glVertexAttribI4iv
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLint
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, const GLint* v = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribi
argument_list|(
name|index
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttribI4uiv
name|void
name|GL_APIENTRY
name|glVertexAttribI4uiv
parameter_list|(
name|GLuint
name|index
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|v
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, const GLuint* v = 0x%0.8p)"
argument_list|,
name|index
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|getState
argument_list|()
operator|.
name|setVertexAttribu
argument_list|(
name|index
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetUniformuiv
name|void
name|GL_APIENTRY
name|glGetUniformuiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLint
name|location
parameter_list|,
name|GLuint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLint location = %d, GLuint* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateGetUniformuiv
argument_list|(
name|context
argument_list|,
name|program
argument_list|,
name|location
argument_list|,
name|params
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|programObject
argument_list|)
expr_stmt|;
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|programBinary
argument_list|)
expr_stmt|;
name|programBinary
operator|->
name|getUniformuiv
argument_list|(
name|location
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetFragDataLocation
name|GLint
name|GL_APIENTRY
name|glGetFragDataLocation
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|name
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, const GLchar *name = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|program
operator|==
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
operator|||
operator|!
name|programObject
operator|->
name|isLinked
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|programBinary
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|programBinary
operator|->
name|getFragDataLocation
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|glUniform1ui
name|void
name|GL_APIENTRY
name|glUniform1ui
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|)
block|{
name|glUniform1uiv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
operator|&
name|v0
argument_list|)
expr_stmt|;
block|}
DECL|function|glUniform2ui
name|void
name|GL_APIENTRY
name|glUniform2ui
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|,
name|GLuint
name|v1
parameter_list|)
block|{
specifier|const
name|GLuint
name|xy
index|[]
init|=
block|{
name|v0
block|,
name|v1
block|}
decl_stmt|;
name|glUniform2uiv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xy
argument_list|)
expr_stmt|;
block|}
DECL|function|glUniform3ui
name|void
name|GL_APIENTRY
name|glUniform3ui
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|,
name|GLuint
name|v1
parameter_list|,
name|GLuint
name|v2
parameter_list|)
block|{
specifier|const
name|GLuint
name|xyz
index|[]
init|=
block|{
name|v0
block|,
name|v1
block|,
name|v2
block|}
decl_stmt|;
name|glUniform3uiv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xyz
argument_list|)
expr_stmt|;
block|}
DECL|function|glUniform4ui
name|void
name|GL_APIENTRY
name|glUniform4ui
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLuint
name|v0
parameter_list|,
name|GLuint
name|v1
parameter_list|,
name|GLuint
name|v2
parameter_list|,
name|GLuint
name|v3
parameter_list|)
block|{
specifier|const
name|GLuint
name|xyzw
index|[]
init|=
block|{
name|v0
block|,
name|v1
block|,
name|v2
block|,
name|v3
block|}
decl_stmt|;
name|glUniform4uiv
argument_list|(
name|location
argument_list|,
literal|1
argument_list|,
name|xyzw
argument_list|)
expr_stmt|;
block|}
DECL|function|glUniform1uiv
name|void
name|GL_APIENTRY
name|glUniform1uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLuint* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_UNSIGNED_INT
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniform1uiv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniform2uiv
name|void
name|GL_APIENTRY
name|glUniform2uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLuint* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_UNSIGNED_INT_VEC2
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniform2uiv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniform3uiv
name|void
name|GL_APIENTRY
name|glUniform3uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLuint* value)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_UNSIGNED_INT_VEC3
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniform3uiv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniform4uiv
name|void
name|GL_APIENTRY
name|glUniform4uiv
parameter_list|(
name|GLint
name|location
parameter_list|,
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint location = %d, GLsizei count = %d, const GLuint* value = 0x%0.8p)"
argument_list|,
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateUniform
argument_list|(
name|context
argument_list|,
name|GL_UNSIGNED_INT_VEC4
argument_list|,
name|location
argument_list|,
name|count
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentProgramBinary
argument_list|()
decl_stmt|;
name|programBinary
operator|->
name|setUniform4uiv
argument_list|(
name|location
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glClearBufferiv
name|void
name|GL_APIENTRY
name|glClearBufferiv
parameter_list|(
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum buffer = 0x%X, GLint drawbuffer = %d, const GLint* value = 0x%0.8p)"
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateClearBuffer
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|buffer
condition|)
block|{
case|case
name|GL_COLOR
case|:
if|if
condition|(
name|drawbuffer
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|drawbuffer
argument_list|)
operator|>=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxDrawBuffers
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_STENCIL
case|:
if|if
condition|(
name|drawbuffer
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|clearBufferiv
argument_list|(
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glClearBufferuiv
name|void
name|GL_APIENTRY
name|glClearBufferuiv
parameter_list|(
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum buffer = 0x%X, GLint drawbuffer = %d, const GLuint* value = 0x%0.8p)"
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateClearBuffer
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|buffer
condition|)
block|{
case|case
name|GL_COLOR
case|:
if|if
condition|(
name|drawbuffer
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|drawbuffer
argument_list|)
operator|>=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxDrawBuffers
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|clearBufferuiv
argument_list|(
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glClearBufferfv
name|void
name|GL_APIENTRY
name|glClearBufferfv
parameter_list|(
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum buffer = 0x%X, GLint drawbuffer = %d, const GLfloat* value = 0x%0.8p)"
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateClearBuffer
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|buffer
condition|)
block|{
case|case
name|GL_COLOR
case|:
if|if
condition|(
name|drawbuffer
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|drawbuffer
argument_list|)
operator|>=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxDrawBuffers
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_DEPTH
case|:
if|if
condition|(
name|drawbuffer
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|clearBufferfv
argument_list|(
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glClearBufferfi
name|void
name|GL_APIENTRY
name|glClearBufferfi
parameter_list|(
name|GLenum
name|buffer
parameter_list|,
name|GLint
name|drawbuffer
parameter_list|,
name|GLfloat
name|depth
parameter_list|,
name|GLint
name|stencil
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum buffer = 0x%X, GLint drawbuffer = %d, GLfloat depth, GLint stencil = %d)"
argument_list|,
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|depth
argument_list|,
name|stencil
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateClearBuffer
argument_list|(
name|context
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|buffer
condition|)
block|{
case|case
name|GL_DEPTH_STENCIL
case|:
if|if
condition|(
name|drawbuffer
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|clearBufferfi
argument_list|(
name|buffer
argument_list|,
name|drawbuffer
argument_list|,
name|depth
argument_list|,
name|stencil
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGetStringi
specifier|const
name|GLubyte
modifier|*
name|GL_APIENTRY
name|glGetStringi
parameter_list|(
name|GLenum
name|name
parameter_list|,
name|GLuint
name|index
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum name = 0x%X, GLuint index = %u)"
argument_list|,
name|name
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|name
operator|!=
name|GL_EXTENSIONS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|index
operator|>=
name|context
operator|->
name|getExtensionStringCount
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
name|context
operator|->
name|getExtensionString
argument_list|(
name|index
argument_list|)
operator|.
name|c_str
argument_list|()
argument_list|)
return|;
block|}
return|return
name|NULL
return|;
block|}
DECL|function|glCopyBufferSubData
name|void
name|GL_APIENTRY
name|glCopyBufferSubData
parameter_list|(
name|GLenum
name|readTarget
parameter_list|,
name|GLenum
name|writeTarget
parameter_list|,
name|GLintptr
name|readOffset
parameter_list|,
name|GLintptr
name|writeOffset
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum readTarget = 0x%X, GLenum writeTarget = 0x%X, GLintptr readOffset = %d, GLintptr writeOffset = %d, GLsizeiptr size = %d)"
argument_list|,
name|readTarget
argument_list|,
name|writeTarget
argument_list|,
name|readOffset
argument_list|,
name|writeOffset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|readTarget
argument_list|)
operator|||
operator|!
name|gl
operator|::
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|writeTarget
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Buffer
modifier|*
name|readBuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|readTarget
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Buffer
modifier|*
name|writeBuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|writeTarget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|readBuffer
operator|||
operator|!
name|writeBuffer
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Verify that readBuffer and writeBuffer are not currently mapped
if|if
condition|(
name|readBuffer
operator|->
name|isMapped
argument_list|()
operator|||
name|writeBuffer
operator|->
name|isMapped
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|readOffset
operator|<
literal|0
operator|||
name|writeOffset
operator|<
literal|0
operator|||
name|size
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|readOffset
operator|+
name|size
argument_list|)
operator|>
name|readBuffer
operator|->
name|getSize
argument_list|()
operator|||
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|writeOffset
operator|+
name|size
argument_list|)
operator|>
name|writeBuffer
operator|->
name|getSize
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|readBuffer
operator|==
name|writeBuffer
operator|&&
name|std
operator|::
name|abs
argument_list|(
name|readOffset
operator|-
name|writeOffset
argument_list|)
operator|<
name|size
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// if size is zero, the copy is a successful no-op
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|writeBuffer
operator|->
name|copyBufferSubData
argument_list|(
name|readBuffer
argument_list|,
name|readOffset
argument_list|,
name|writeOffset
argument_list|,
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
DECL|function|glGetUniformIndices
name|void
name|GL_APIENTRY
name|glGetUniformIndices
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|uniformCount
parameter_list|,
specifier|const
name|GLchar
modifier|*
specifier|const
modifier|*
name|uniformNames
parameter_list|,
name|GLuint
modifier|*
name|uniformIndices
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLsizei uniformCount = %d, const GLchar* const* uniformNames = 0x%0.8p, GLuint* uniformIndices = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|uniformCount
argument_list|,
name|uniformNames
argument_list|,
name|uniformIndices
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|uniformCount
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
operator|->
name|isLinked
argument_list|()
operator|||
operator|!
name|programBinary
condition|)
block|{
for|for
control|(
name|int
name|uniformId
init|=
literal|0
init|;
name|uniformId
operator|<
name|uniformCount
condition|;
name|uniformId
operator|++
control|)
block|{
name|uniformIndices
index|[
name|uniformId
index|]
operator|=
name|GL_INVALID_INDEX
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|uniformId
init|=
literal|0
init|;
name|uniformId
operator|<
name|uniformCount
condition|;
name|uniformId
operator|++
control|)
block|{
name|uniformIndices
index|[
name|uniformId
index|]
operator|=
name|programBinary
operator|->
name|getUniformIndex
argument_list|(
name|uniformNames
index|[
name|uniformId
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|glGetActiveUniformsiv
name|void
name|GL_APIENTRY
name|glGetActiveUniformsiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|uniformCount
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|uniformIndices
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLsizei uniformCount = %d, const GLuint* uniformIndices = 0x%0.8p, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|uniformCount
argument_list|,
name|uniformIndices
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|uniformCount
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_UNIFORM_TYPE
case|:
case|case
name|GL_UNIFORM_SIZE
case|:
case|case
name|GL_UNIFORM_NAME_LENGTH
case|:
case|case
name|GL_UNIFORM_BLOCK_INDEX
case|:
case|case
name|GL_UNIFORM_OFFSET
case|:
case|case
name|GL_UNIFORM_ARRAY_STRIDE
case|:
case|case
name|GL_UNIFORM_MATRIX_STRIDE
case|:
case|case
name|GL_UNIFORM_IS_ROW_MAJOR
case|:
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|programBinary
operator|&&
name|uniformCount
operator|>
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|uniformId
init|=
literal|0
init|;
name|uniformId
operator|<
name|uniformCount
condition|;
name|uniformId
operator|++
control|)
block|{
specifier|const
name|GLuint
name|index
init|=
name|uniformIndices
index|[
name|uniformId
index|]
decl_stmt|;
if|if
condition|(
name|index
operator|>=
operator|(
name|GLuint
operator|)
name|programBinary
operator|->
name|getActiveUniformCount
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
for|for
control|(
name|int
name|uniformId
init|=
literal|0
init|;
name|uniformId
operator|<
name|uniformCount
condition|;
name|uniformId
operator|++
control|)
block|{
specifier|const
name|GLuint
name|index
init|=
name|uniformIndices
index|[
name|uniformId
index|]
decl_stmt|;
name|params
index|[
name|uniformId
index|]
operator|=
name|programBinary
operator|->
name|getActiveUniformi
argument_list|(
name|index
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGetUniformBlockIndex
name|GLuint
name|GL_APIENTRY
name|glGetUniformBlockIndex
parameter_list|(
name|GLuint
name|program
parameter_list|,
specifier|const
name|GLchar
modifier|*
name|uniformBlockName
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, const GLchar* uniformBlockName = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|uniformBlockName
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_INVALID_INDEX
return|;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_INVALID_INDEX
return|;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_INVALID_INDEX
return|;
block|}
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|programBinary
condition|)
block|{
return|return
name|GL_INVALID_INDEX
return|;
block|}
return|return
name|programBinary
operator|->
name|getUniformBlockIndex
argument_list|(
name|uniformBlockName
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|function|glGetActiveUniformBlockiv
name|void
name|GL_APIENTRY
name|glGetActiveUniformBlockiv
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|uniformBlockIndex
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLuint uniformBlockIndex = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|uniformBlockIndex
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|programBinary
operator|||
name|uniformBlockIndex
operator|>=
name|programBinary
operator|->
name|getActiveUniformBlockCount
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_UNIFORM_BLOCK_BINDING
case|:
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|programObject
operator|->
name|getUniformBlockBinding
argument_list|(
name|uniformBlockIndex
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_UNIFORM_BLOCK_DATA_SIZE
case|:
case|case
name|GL_UNIFORM_BLOCK_NAME_LENGTH
case|:
case|case
name|GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
case|:
case|case
name|GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
case|:
case|case
name|GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
case|:
case|case
name|GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
case|:
name|programBinary
operator|->
name|getActiveUniformBlockiv
argument_list|(
name|uniformBlockIndex
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGetActiveUniformBlockName
name|void
name|GL_APIENTRY
name|glGetActiveUniformBlockName
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|uniformBlockIndex
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLchar
modifier|*
name|uniformBlockName
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLuint uniformBlockIndex = %u, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, GLchar* uniformBlockName = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|uniformBlockIndex
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|uniformBlockName
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|programBinary
operator|||
name|uniformBlockIndex
operator|>=
name|programBinary
operator|->
name|getActiveUniformBlockCount
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|programBinary
operator|->
name|getActiveUniformBlockName
argument_list|(
name|uniformBlockIndex
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|uniformBlockName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glUniformBlockBinding
name|void
name|GL_APIENTRY
name|glUniformBlockBinding
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLuint
name|uniformBlockIndex
parameter_list|,
name|GLuint
name|uniformBlockBinding
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLuint uniformBlockIndex = %u, GLuint uniformBlockBinding = %u)"
argument_list|,
name|program
argument_list|,
name|uniformBlockIndex
argument_list|,
name|uniformBlockBinding
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|uniformBlockBinding
operator|>=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxUniformBufferBindings
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getShader
argument_list|(
name|program
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
comment|// if never linked, there won't be any uniform blocks
if|if
condition|(
operator|!
name|programBinary
operator|||
name|uniformBlockIndex
operator|>=
name|programBinary
operator|->
name|getActiveUniformBlockCount
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|programObject
operator|->
name|bindUniformBlock
argument_list|(
name|uniformBlockIndex
argument_list|,
name|uniformBlockBinding
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glDrawArraysInstanced
name|void
name|GL_APIENTRY
name|glDrawArraysInstanced
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLint
name|first
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instanceCount
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X, GLint first = %d, GLsizei count = %d, GLsizei instanceCount = %d)"
argument_list|,
name|mode
argument_list|,
name|first
argument_list|,
name|count
argument_list|,
name|instanceCount
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// glDrawArraysInstanced
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|glDrawElementsInstanced
name|void
name|GL_APIENTRY
name|glDrawElementsInstanced
parameter_list|(
name|GLenum
name|mode
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|,
name|GLsizei
name|instanceCount
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum mode = 0x%X, GLsizei count = %d, GLenum type = 0x%X, const GLvoid* indices = 0x%0.8p, GLsizei instanceCount = %d)"
argument_list|,
name|mode
argument_list|,
name|count
argument_list|,
name|type
argument_list|,
name|indices
argument_list|,
name|instanceCount
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// glDrawElementsInstanced
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|glFenceSync
name|GLsync
name|GL_APIENTRY
name|glFenceSync
parameter_list|(
name|GLenum
name|condition
parameter_list|,
name|GLbitfield
name|flags
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum condition = 0x%X, GLbitfield flags = 0x%X)"
argument_list|,
name|condition
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|condition
operator|!=
name|GL_SYNC_GPU_COMMANDS_COMPLETE
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|flags
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|GLsync
name|fenceSync
init|=
name|context
operator|->
name|createFenceSync
argument_list|()
decl_stmt|;
name|gl
operator|::
name|FenceSync
modifier|*
name|fenceSyncObject
init|=
name|context
operator|->
name|getFenceSync
argument_list|(
name|fenceSync
argument_list|)
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|fenceSyncObject
operator|->
name|set
argument_list|(
name|condition
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|deleteFenceSync
argument_list|(
name|fenceSync
argument_list|)
expr_stmt|;
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|fenceSync
return|;
block|}
return|return
name|NULL
return|;
block|}
DECL|function|glIsSync
name|GLboolean
name|GL_APIENTRY
name|glIsSync
parameter_list|(
name|GLsync
name|sync
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsync sync = 0x%0.8p)"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
return|return
operator|(
name|context
operator|->
name|getFenceSync
argument_list|(
name|sync
argument_list|)
operator|!=
name|NULL
operator|)
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glDeleteSync
name|void
name|GL_APIENTRY
name|glDeleteSync
parameter_list|(
name|GLsync
name|sync
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsync sync = 0x%0.8p)"
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|sync
operator|!=
cast|static_cast
argument_list|<
name|GLsync
argument_list|>
argument_list|(
literal|0
argument_list|)
operator|&&
operator|!
name|context
operator|->
name|getFenceSync
argument_list|(
name|sync
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|deleteFenceSync
argument_list|(
name|sync
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glClientWaitSync
name|GLenum
name|GL_APIENTRY
name|glClientWaitSync
parameter_list|(
name|GLsync
name|sync
parameter_list|,
name|GLbitfield
name|flags
parameter_list|,
name|GLuint64
name|timeout
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsync sync = 0x%0.8p, GLbitfield flags = 0x%X, GLuint64 timeout = %llu)"
argument_list|,
name|sync
argument_list|,
name|flags
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_WAIT_FAILED
return|;
block|}
if|if
condition|(
operator|(
name|flags
operator|&
operator|~
operator|(
name|GL_SYNC_FLUSH_COMMANDS_BIT
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_WAIT_FAILED
return|;
block|}
name|gl
operator|::
name|FenceSync
modifier|*
name|fenceSync
init|=
name|context
operator|->
name|getFenceSync
argument_list|(
name|sync
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fenceSync
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_WAIT_FAILED
return|;
block|}
name|GLenum
name|result
init|=
name|GL_WAIT_FAILED
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|fenceSync
operator|->
name|clientWait
argument_list|(
name|flags
argument_list|,
name|timeout
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|GL_WAIT_FAILED
return|;
block|}
return|return
name|result
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glWaitSync
name|void
name|GL_APIENTRY
name|glWaitSync
parameter_list|(
name|GLsync
name|sync
parameter_list|,
name|GLbitfield
name|flags
parameter_list|,
name|GLuint64
name|timeout
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsync sync = 0x%0.8p, GLbitfield flags = 0x%X, GLuint64 timeout = %llu)"
argument_list|,
name|sync
argument_list|,
name|flags
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|flags
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|timeout
operator|!=
name|GL_TIMEOUT_IGNORED
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|FenceSync
modifier|*
name|fenceSync
init|=
name|context
operator|->
name|getFenceSync
argument_list|(
name|sync
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fenceSync
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|fenceSync
operator|->
name|serverWait
argument_list|(
name|flags
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGetInteger64v
name|void
name|GL_APIENTRY
name|glGetInteger64v
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|GLint64
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum pname = 0x%X, GLint64* params = 0x%0.8p)"
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLenum
name|nativeType
decl_stmt|;
name|unsigned
name|int
name|numParams
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|ValidateStateQuery
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
operator|&
name|nativeType
argument_list|,
operator|&
name|numParams
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|nativeType
operator|==
name|GL_INT_64_ANGLEX
condition|)
block|{
name|context
operator|->
name|getInteger64v
argument_list|(
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CastStateValues
argument_list|(
name|context
argument_list|,
name|nativeType
argument_list|,
name|pname
argument_list|,
name|numParams
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGetSynciv
name|void
name|GL_APIENTRY
name|glGetSynciv
parameter_list|(
name|GLsync
name|sync
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLint
modifier|*
name|values
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsync sync = 0x%0.8p, GLenum pname = 0x%X, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, GLint* values = 0x%0.8p)"
argument_list|,
name|sync
argument_list|,
name|pname
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|bufSize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|FenceSync
modifier|*
name|fenceSync
init|=
name|context
operator|->
name|getFenceSync
argument_list|(
name|sync
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fenceSync
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_OBJECT_TYPE
case|:
name|values
index|[
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|GL_SYNC_FENCE
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_SYNC_CONDITION
case|:
name|values
index|[
literal|0
index|]
operator|=
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|fenceSync
operator|->
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_SYNC_FLAGS
case|:
name|values
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|GL_SYNC_STATUS
case|:
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|fenceSync
operator|->
name|getStatus
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
block|}
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glGetInteger64i_v
name|void
name|GL_APIENTRY
name|glGetInteger64i_v
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|index
parameter_list|,
name|GLint64
modifier|*
name|data
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint index = %u, GLint64* data = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|index
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|caps
init|=
name|context
operator|->
name|getCaps
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_START
case|:
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
case|:
case|case
name|GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxTransformFeedbackSeparateAttributes
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|GL_UNIFORM_BUFFER_START
case|:
case|case
name|GL_UNIFORM_BUFFER_SIZE
case|:
case|case
name|GL_UNIFORM_BUFFER_BINDING
case|:
if|if
condition|(
name|index
operator|>=
name|caps
operator|.
name|maxUniformBufferBindings
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
operator|(
name|context
operator|->
name|getIndexedInteger64v
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|data
argument_list|)
operator|)
condition|)
block|{
name|GLenum
name|nativeType
decl_stmt|;
name|unsigned
name|int
name|numParams
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|->
name|getIndexedQueryParameterInfo
argument_list|(
name|target
argument_list|,
operator|&
name|nativeType
argument_list|,
operator|&
name|numParams
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|numParams
operator|==
literal|0
condition|)
return|return;
comment|// it is known that pname is valid, but there are no parameters to return
if|if
condition|(
name|nativeType
operator|==
name|GL_INT
condition|)
block|{
name|GLint
modifier|*
name|intParams
init|=
operator|new
name|GLint
index|[
name|numParams
index|]
decl_stmt|;
name|context
operator|->
name|getIndexedIntegerv
argument_list|(
name|target
argument_list|,
name|index
argument_list|,
name|intParams
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParams
condition|;
operator|++
name|i
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|intParams
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|intParams
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|function|glGetBufferParameteri64v
name|void
name|GL_APIENTRY
name|glGetBufferParameteri64v
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint64
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLint64* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidBufferParameter
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buffer
condition|)
block|{
comment|// A null buffer means that "0" is bound to the requested buffer target
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_BUFFER_USAGE
case|:
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|buffer
operator|->
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_SIZE
case|:
operator|*
name|params
operator|=
name|buffer
operator|->
name|getSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_ACCESS_FLAGS
case|:
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|buffer
operator|->
name|getAccessFlags
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_MAPPED
case|:
operator|*
name|params
operator|=
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|buffer
operator|->
name|isMapped
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_MAP_OFFSET
case|:
operator|*
name|params
operator|=
name|buffer
operator|->
name|getMapOffset
argument_list|()
expr_stmt|;
break|break;
case|case
name|GL_BUFFER_MAP_LENGTH
case|:
operator|*
name|params
operator|=
name|buffer
operator|->
name|getMapLength
argument_list|()
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|function|glGenSamplers
name|void
name|GL_APIENTRY
name|glGenSamplers
parameter_list|(
name|GLsizei
name|count
parameter_list|,
name|GLuint
modifier|*
name|samplers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei count = %d, GLuint* samplers = 0x%0.8p)"
argument_list|,
name|count
argument_list|,
name|samplers
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|samplers
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createSampler
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glDeleteSamplers
name|void
name|GL_APIENTRY
name|glDeleteSamplers
parameter_list|(
name|GLsizei
name|count
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|samplers
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei count = %d, const GLuint* samplers = 0x%0.8p)"
argument_list|,
name|count
argument_list|,
name|samplers
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|->
name|deleteSampler
argument_list|(
name|samplers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glIsSampler
name|GLboolean
name|GL_APIENTRY
name|glIsSampler
parameter_list|(
name|GLuint
name|sampler
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint sampler = %u)"
argument_list|,
name|sampler
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
return|return
name|context
operator|->
name|isSampler
argument_list|(
name|sampler
argument_list|)
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glBindSampler
name|void
name|GL_APIENTRY
name|glBindSampler
parameter_list|(
name|GLuint
name|unit
parameter_list|,
name|GLuint
name|sampler
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint unit = %u, GLuint sampler = %u)"
argument_list|,
name|unit
argument_list|,
name|sampler
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|sampler
operator|!=
literal|0
operator|&&
operator|!
name|context
operator|->
name|isSampler
argument_list|(
name|sampler
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|unit
operator|>=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxCombinedTextureImageUnits
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindSampler
argument_list|(
name|unit
argument_list|,
name|sampler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glSamplerParameteri
name|void
name|GL_APIENTRY
name|glSamplerParameteri
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
name|param
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint sampler = %u, GLenum pname = 0x%X, GLint param = %d)"
argument_list|,
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidateSamplerObjectParameter
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidateTexParamParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|isSampler
argument_list|(
name|sampler
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|samplerParameteri
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glSamplerParameteriv
name|void
name|GL_APIENTRY
name|glSamplerParameteriv
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
specifier|const
name|GLint
modifier|*
name|param
parameter_list|)
block|{
name|glSamplerParameteri
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
operator|*
name|param
argument_list|)
expr_stmt|;
block|}
DECL|function|glSamplerParameterf
name|void
name|GL_APIENTRY
name|glSamplerParameterf
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
name|param
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint sampler = %u, GLenum pname = 0x%X, GLfloat param = %g)"
argument_list|,
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidateSamplerObjectParameter
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidateTexParamParameters
argument_list|(
name|context
argument_list|,
name|pname
argument_list|,
cast|static_cast
argument_list|<
name|GLint
argument_list|>
argument_list|(
name|param
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|isSampler
argument_list|(
name|sampler
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|samplerParameterf
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glSamplerParameterfv
name|void
name|GL_APIENTRY
name|glSamplerParameterfv
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
specifier|const
name|GLfloat
modifier|*
name|param
parameter_list|)
block|{
name|glSamplerParameterf
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|,
operator|*
name|param
argument_list|)
expr_stmt|;
block|}
DECL|function|glGetSamplerParameteriv
name|void
name|GL_APIENTRY
name|glGetSamplerParameteriv
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint sampler = %u, GLenum pname = 0x%X, GLint* params = 0x%0.8p)"
argument_list|,
name|sampler
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidateSamplerObjectParameter
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|isSampler
argument_list|(
name|sampler
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|context
operator|->
name|getSamplerParameteri
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glGetSamplerParameterfv
name|void
name|GL_APIENTRY
name|glGetSamplerParameterfv
parameter_list|(
name|GLuint
name|sampler
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLfloat
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint sample = %ur, GLenum pname = 0x%X, GLfloat* params = 0x%0.8p)"
argument_list|,
name|sampler
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidateSamplerObjectParameter
argument_list|(
name|context
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|context
operator|->
name|isSampler
argument_list|(
name|sampler
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
operator|*
name|params
operator|=
name|context
operator|->
name|getSamplerParameterf
argument_list|(
name|sampler
argument_list|,
name|pname
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glVertexAttribDivisor
name|void
name|GL_APIENTRY
name|glVertexAttribDivisor
parameter_list|(
name|GLuint
name|index
parameter_list|,
name|GLuint
name|divisor
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint index = %u, GLuint divisor = %u)"
argument_list|,
name|index
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|setVertexAttribDivisor
argument_list|(
name|index
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|glBindTransformFeedback
name|void
name|GL_APIENTRY
name|glBindTransformFeedback
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLuint
name|id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLuint id = %u)"
argument_list|,
name|target
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TRANSFORM_FEEDBACK
case|:
block|{
comment|// Cannot bind a transform feedback object if the current one is started and not paused (3.0.2 pg 85 section 2.14.1)
name|gl
operator|::
name|TransformFeedback
modifier|*
name|curTransformFeedback
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentTransformFeedback
argument_list|()
decl_stmt|;
if|if
condition|(
name|curTransformFeedback
operator|&&
name|curTransformFeedback
operator|->
name|isStarted
argument_list|()
operator|&&
operator|!
name|curTransformFeedback
operator|->
name|isPaused
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Cannot bind a transform feedback object that does not exist (3.0.2 pg 85 section 2.14.1)
if|if
condition|(
name|context
operator|->
name|getTransformFeedback
argument_list|(
name|id
argument_list|)
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|context
operator|->
name|bindTransformFeedback
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glDeleteTransformFeedbacks
name|void
name|GL_APIENTRY
name|glDeleteTransformFeedbacks
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, const GLuint* ids = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|context
operator|->
name|deleteTransformFeedback
argument_list|(
name|ids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGenTransformFeedbacks
name|void
name|GL_APIENTRY
name|glGenTransformFeedbacks
parameter_list|(
name|GLsizei
name|n
parameter_list|,
name|GLuint
modifier|*
name|ids
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLsizei n = %d, GLuint* ids = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|ids
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ids
index|[
name|i
index|]
operator|=
name|context
operator|->
name|createTransformFeedback
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glIsTransformFeedback
name|GLboolean
name|GL_APIENTRY
name|glIsTransformFeedback
parameter_list|(
name|GLuint
name|id
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint id = %u)"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
return|return
operator|(
operator|(
name|context
operator|->
name|getTransformFeedback
argument_list|(
name|id
argument_list|)
operator|!=
name|NULL
operator|)
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
operator|)
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glPauseTransformFeedback
name|void
name|GL_APIENTRY
name|glPauseTransformFeedback
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(void)"
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|TransformFeedback
modifier|*
name|transformFeedback
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentTransformFeedback
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|transformFeedback
operator|!=
name|NULL
argument_list|)
expr_stmt|;
comment|// Current transform feedback must be started and not paused in order to pause (3.0.2 pg 86)
if|if
condition|(
operator|!
name|transformFeedback
operator|->
name|isStarted
argument_list|()
operator|||
name|transformFeedback
operator|->
name|isPaused
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|transformFeedback
operator|->
name|pause
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|glResumeTransformFeedback
name|void
name|GL_APIENTRY
name|glResumeTransformFeedback
parameter_list|(
name|void
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(void)"
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|TransformFeedback
modifier|*
name|transformFeedback
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getCurrentTransformFeedback
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|transformFeedback
operator|!=
name|NULL
argument_list|)
expr_stmt|;
comment|// Current transform feedback must be started and paused in order to resume (3.0.2 pg 86)
if|if
condition|(
operator|!
name|transformFeedback
operator|->
name|isStarted
argument_list|()
operator|||
operator|!
name|transformFeedback
operator|->
name|isPaused
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|transformFeedback
operator|->
name|resume
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|glGetProgramBinary
name|void
name|GL_APIENTRY
name|glGetProgramBinary
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLenum
modifier|*
name|binaryFormat
parameter_list|,
name|GLvoid
modifier|*
name|binary
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLsizei bufSize = %d, GLsizei* length = 0x%0.8p, GLenum* binaryFormat = 0x%0.8p, GLvoid* binary = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// glGetProgramBinary
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|glProgramBinary
name|void
name|GL_APIENTRY
name|glProgramBinary
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|binaryFormat
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|binary
parameter_list|,
name|GLsizei
name|length
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLenum binaryFormat = 0x%X, const GLvoid* binary = 0x%0.8p, GLsizei length = %d)"
argument_list|,
name|program
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// glProgramBinary
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|glProgramParameteri
name|void
name|GL_APIENTRY
name|glProgramParameteri
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLint
name|value
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLuint program = %u, GLenum pname = 0x%X, GLint value = %d)"
argument_list|,
name|program
argument_list|,
name|pname
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// glProgramParameteri
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|glInvalidateFramebuffer
name|void
name|GL_APIENTRY
name|glInvalidateFramebuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|numAttachments
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei numAttachments = %d, const GLenum* attachments = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateInvalidateFramebufferParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetFramebuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|framebuffer
operator|->
name|completeness
argument_list|(
name|context
operator|->
name|getData
argument_list|()
argument_list|)
operator|==
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|framebuffer
operator|->
name|invalidate
argument_list|(
name|context
operator|->
name|getCaps
argument_list|()
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
DECL|function|glInvalidateSubFramebuffer
name|void
name|GL_APIENTRY
name|glInvalidateSubFramebuffer
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|numAttachments
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|attachments
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei numAttachments = %d, const GLenum* attachments = 0x%0.8p, GLint x = %d, "
literal|"GLint y = %d, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateInvalidateFramebufferParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|numAttachments
argument_list|,
name|attachments
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetFramebuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|framebuffer
operator|->
name|completeness
argument_list|(
name|context
operator|->
name|getData
argument_list|()
argument_list|)
operator|==
name|GL_FRAMEBUFFER_COMPLETE
condition|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|framebuffer
operator|->
name|invalidateSub
argument_list|(
name|numAttachments
argument_list|,
name|attachments
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
DECL|function|glTexStorage2D
name|void
name|GL_APIENTRY
name|glTexStorage2D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei levels = %d, GLenum internalformat = 0x%X, GLsizei width = %d, GLsizei height = %d)"
argument_list|,
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateES3TexStorageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_2D
case|:
block|{
name|gl
operator|::
name|Texture2D
modifier|*
name|texture2d
init|=
name|context
operator|->
name|getTexture2D
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture2d
operator|->
name|storage
argument_list|(
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP
case|:
block|{
name|gl
operator|::
name|TextureCubeMap
modifier|*
name|textureCube
init|=
name|context
operator|->
name|getTextureCubeMap
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|textureCube
operator|->
name|storage
argument_list|(
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glTexStorage3D
name|void
name|GL_APIENTRY
name|glTexStorage3D
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLsizei levels = %d, GLenum internalformat = 0x%X, GLsizei width = %d, "
literal|"GLsizei height = %d, GLsizei depth = %d)"
argument_list|,
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|ValidateES3TexStorageParameters
argument_list|(
name|context
argument_list|,
name|target
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
condition|)
block|{
return|return;
block|}
switch|switch
condition|(
name|target
condition|)
block|{
case|case
name|GL_TEXTURE_3D
case|:
block|{
name|gl
operator|::
name|Texture3D
modifier|*
name|texture3d
init|=
name|context
operator|->
name|getTexture3D
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture3d
operator|->
name|storage
argument_list|(
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
case|case
name|GL_TEXTURE_2D_ARRAY
case|:
block|{
name|gl
operator|::
name|Texture2DArray
modifier|*
name|texture2darray
init|=
name|context
operator|->
name|getTexture2DArray
argument_list|()
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|texture2darray
operator|->
name|storage
argument_list|(
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGetInternalformativ
name|void
name|GL_APIENTRY
name|glGetInternalformativ
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLint
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum internalformat = 0x%X, GLenum pname = 0x%X, GLsizei bufSize = %d, "
literal|"GLint* params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|internalformat
argument_list|,
name|pname
argument_list|,
name|bufSize
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|context
operator|->
name|getClientVersion
argument_list|()
operator|<
literal|3
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|gl
operator|::
name|TextureCaps
modifier|&
name|formatCaps
init|=
name|context
operator|->
name|getTextureCaps
argument_list|()
operator|.
name|get
argument_list|(
name|internalformat
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|formatCaps
operator|.
name|renderable
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|target
operator|!=
name|GL_RENDERBUFFER
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|bufSize
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_NUM_SAMPLE_COUNTS
case|:
if|if
condition|(
name|bufSize
operator|!=
literal|0
condition|)
block|{
operator|*
name|params
operator|=
name|formatCaps
operator|.
name|sampleCounts
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|GL_SAMPLES
case|:
name|std
operator|::
name|copy_n
argument_list|(
name|formatCaps
operator|.
name|sampleCounts
operator|.
name|rbegin
argument_list|()
argument_list|,
name|std
operator|::
name|min
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|bufSize
argument_list|,
name|formatCaps
operator|.
name|sampleCounts
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|params
argument_list|)
expr_stmt|;
break|break;
default|default:
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|// Extension functions
DECL|function|glBlitFramebufferANGLE
name|void
name|GL_APIENTRY
name|glBlitFramebufferANGLE
parameter_list|(
name|GLint
name|srcX0
parameter_list|,
name|GLint
name|srcY0
parameter_list|,
name|GLint
name|srcX1
parameter_list|,
name|GLint
name|srcY1
parameter_list|,
name|GLint
name|dstX0
parameter_list|,
name|GLint
name|dstY0
parameter_list|,
name|GLint
name|dstX1
parameter_list|,
name|GLint
name|dstY1
parameter_list|,
name|GLbitfield
name|mask
parameter_list|,
name|GLenum
name|filter
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLint srcX0 = %d, GLint srcY0 = %d, GLint srcX1 = %d, GLint srcY1 = %d, "
literal|"GLint dstX0 = %d, GLint dstY0 = %d, GLint dstX1 = %d, GLint dstY1 = %d, "
literal|"GLbitfield mask = 0x%X, GLenum filter = 0x%X)"
argument_list|,
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcX1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|ValidateBlitFramebufferParameters
argument_list|(
name|context
argument_list|,
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|blitFramebuffer
argument_list|(
name|srcX0
argument_list|,
name|srcY0
argument_list|,
name|srcX1
argument_list|,
name|srcY1
argument_list|,
name|dstX0
argument_list|,
name|dstY0
argument_list|,
name|dstX1
argument_list|,
name|dstY1
argument_list|,
name|mask
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glTexImage3DOES
name|void
name|GL_APIENTRY
name|glTexImage3DOES
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLint
name|border
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|pixels
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLint level = %d, GLenum internalformat = 0x%X, "
literal|"GLsizei width = %d, GLsizei height = %d, GLsizei depth = %d, GLint border = %d, "
literal|"GLenum format = 0x%X, GLenum type = 0x%x, const GLvoid* pixels = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|border
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
comment|// FIXME
block|}
DECL|function|glGetProgramBinaryOES
name|void
name|GL_APIENTRY
name|glGetProgramBinaryOES
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLsizei
name|bufSize
parameter_list|,
name|GLsizei
modifier|*
name|length
parameter_list|,
name|GLenum
modifier|*
name|binaryFormat
parameter_list|,
name|void
modifier|*
name|binary
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum program = 0x%X, bufSize = %d, length = 0x%0.8p, binaryFormat = 0x%0.8p, binary = 0x%0.8p)"
argument_list|,
name|program
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
operator|||
operator|!
name|programObject
operator|->
name|isLinked
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
init|=
name|programObject
operator|->
name|getProgramBinary
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|programBinary
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|programBinary
operator|->
name|save
argument_list|(
name|binaryFormat
argument_list|,
name|binary
argument_list|,
name|bufSize
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glProgramBinaryOES
name|void
name|GL_APIENTRY
name|glProgramBinaryOES
parameter_list|(
name|GLuint
name|program
parameter_list|,
name|GLenum
name|binaryFormat
parameter_list|,
specifier|const
name|void
modifier|*
name|binary
parameter_list|,
name|GLint
name|length
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum program = 0x%X, binaryFormat = 0x%x, binary = 0x%0.8p, length = %d)"
argument_list|,
name|program
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
modifier|&
name|programBinaryFormats
init|=
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|programBinaryFormats
decl_stmt|;
if|if
condition|(
name|std
operator|::
name|find
argument_list|(
name|programBinaryFormats
operator|.
name|begin
argument_list|()
argument_list|,
name|programBinaryFormats
operator|.
name|end
argument_list|()
argument_list|,
name|binaryFormat
argument_list|)
operator|==
name|programBinaryFormats
operator|.
name|end
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Program
modifier|*
name|programObject
init|=
name|context
operator|->
name|getProgram
argument_list|(
name|program
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|programObject
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|context
operator|->
name|setProgramBinary
argument_list|(
name|program
argument_list|,
name|binaryFormat
argument_list|,
name|binary
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
DECL|function|glDrawBuffersEXT
name|void
name|GL_APIENTRY
name|glDrawBuffersEXT
parameter_list|(
name|GLsizei
name|n
parameter_list|,
specifier|const
name|GLenum
modifier|*
name|bufs
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum n = %d, bufs = 0x%0.8p)"
argument_list|,
name|n
argument_list|,
name|bufs
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
operator|||
cast|static_cast
argument_list|<
name|GLuint
argument_list|>
argument_list|(
name|n
argument_list|)
operator|>
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxDrawBuffers
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|ASSERT
argument_list|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
operator|->
name|id
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|n
operator|!=
literal|1
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|bufs
index|[
literal|0
index|]
operator|!=
name|GL_NONE
operator|&&
name|bufs
index|[
literal|0
index|]
operator|!=
name|GL_BACK
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|n
condition|;
name|colorAttachment
operator|++
control|)
block|{
specifier|const
name|GLenum
name|attachment
init|=
name|GL_COLOR_ATTACHMENT0_EXT
operator|+
name|colorAttachment
decl_stmt|;
if|if
condition|(
name|bufs
index|[
name|colorAttachment
index|]
operator|!=
name|GL_NONE
operator|&&
name|bufs
index|[
name|colorAttachment
index|]
operator|!=
name|attachment
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getDrawFramebuffer
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|framebuffer
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|n
argument_list|)
condition|;
name|colorAttachment
operator|++
control|)
block|{
name|framebuffer
operator|->
name|setDrawBufferState
argument_list|(
name|colorAttachment
argument_list|,
name|bufs
index|[
name|colorAttachment
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
name|n
init|;
name|colorAttachment
operator|<
name|context
operator|->
name|getCaps
argument_list|()
operator|.
name|maxDrawBuffers
condition|;
name|colorAttachment
operator|++
control|)
block|{
name|framebuffer
operator|->
name|setDrawBufferState
argument_list|(
name|colorAttachment
argument_list|,
name|GL_NONE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|glGetBufferPointervOES
name|void
name|GL_APIENTRY
name|glGetBufferPointervOES
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|void
modifier|*
modifier|*
name|params
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLenum pname = 0x%X, GLvoid** params = 0x%0.8p)"
argument_list|,
name|target
argument_list|,
name|pname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|pname
operator|!=
name|GL_BUFFER_MAP_POINTER
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|buffer
operator|||
operator|!
name|buffer
operator|->
name|isMapped
argument_list|()
condition|)
block|{
operator|*
name|params
operator|=
name|NULL
expr_stmt|;
block|}
else|else
block|{
operator|*
name|params
operator|=
name|buffer
operator|->
name|getMapPointer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|function|glMapBufferOES
name|void
modifier|*
name|GL_APIENTRY
name|glMapBufferOES
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLenum
name|access
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLbitfield access = 0x%X)"
argument_list|,
name|target
argument_list|,
name|access
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|access
operator|!=
name|GL_WRITE_ONLY_OES
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|buffer
operator|->
name|isMapped
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|buffer
operator|->
name|mapRange
argument_list|(
literal|0
argument_list|,
name|buffer
operator|->
name|getSize
argument_list|()
argument_list|,
name|GL_MAP_WRITE_BIT
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|buffer
operator|->
name|getMapPointer
argument_list|()
return|;
block|}
return|return
name|NULL
return|;
block|}
DECL|function|glUnmapBufferOES
name|GLboolean
name|GL_APIENTRY
name|glUnmapBufferOES
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X)"
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
name|NULL
operator|||
operator|!
name|buffer
operator|->
name|isMapped
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
comment|// TODO: detect if we had corruption. if so, throw an error and return false.
name|gl
operator|::
name|Error
name|error
init|=
name|buffer
operator|->
name|unmap
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|GL_FALSE
return|;
block|}
return|return
name|GL_TRUE
return|;
block|}
return|return
name|GL_FALSE
return|;
block|}
DECL|function|glMapBufferRangeEXT
name|void
modifier|*
name|GL_APIENTRY
name|glMapBufferRangeEXT
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|length
parameter_list|,
name|GLbitfield
name|access
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d, GLbitfield access = 0x%X)"
argument_list|,
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|access
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|length
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
comment|// Check for buffer overflow
name|size_t
name|offsetSize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|size_t
name|lengthSize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rx
operator|::
name|IsUnsignedAdditionSafe
argument_list|(
name|offsetSize
argument_list|,
name|lengthSize
argument_list|)
operator|||
name|offsetSize
operator|+
name|lengthSize
operator|>
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|buffer
operator|->
name|getSize
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
comment|// Check for invalid bits in the mask
name|GLbitfield
name|allAccessBits
init|=
name|GL_MAP_READ_BIT
operator||
name|GL_MAP_WRITE_BIT
operator||
name|GL_MAP_INVALIDATE_RANGE_BIT
operator||
name|GL_MAP_INVALIDATE_BUFFER_BIT
operator||
name|GL_MAP_FLUSH_EXPLICIT_BIT
operator||
name|GL_MAP_UNSYNCHRONIZED_BIT
decl_stmt|;
if|if
condition|(
name|access
operator|&
operator|~
operator|(
name|allAccessBits
operator|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|length
operator|==
literal|0
operator|||
name|buffer
operator|->
name|isMapped
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
comment|// Check for invalid bit combinations
if|if
condition|(
operator|(
name|access
operator|&
operator|(
name|GL_MAP_READ_BIT
operator||
name|GL_MAP_WRITE_BIT
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|GLbitfield
name|writeOnlyBits
init|=
name|GL_MAP_INVALIDATE_RANGE_BIT
operator||
name|GL_MAP_INVALIDATE_BUFFER_BIT
operator||
name|GL_MAP_UNSYNCHRONIZED_BIT
decl_stmt|;
if|if
condition|(
operator|(
name|access
operator|&
name|GL_MAP_READ_BIT
operator|)
operator|!=
literal|0
operator|&&
operator|(
name|access
operator|&
name|writeOnlyBits
operator|)
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
operator|(
name|access
operator|&
name|GL_MAP_WRITE_BIT
operator|)
operator|==
literal|0
operator|&&
operator|(
name|access
operator|&
name|GL_MAP_FLUSH_EXPLICIT_BIT
operator|)
operator|!=
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|gl
operator|::
name|Error
name|error
init|=
name|buffer
operator|->
name|mapRange
argument_list|(
name|offset
argument_list|,
name|length
argument_list|,
name|access
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
return|return
name|buffer
operator|->
name|getMapPointer
argument_list|()
return|;
block|}
return|return
name|NULL
return|;
block|}
DECL|function|glFlushMappedBufferRangeEXT
name|void
name|GL_APIENTRY
name|glFlushMappedBufferRangeEXT
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLintptr
name|offset
parameter_list|,
name|GLsizeiptr
name|length
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(GLenum target = 0x%X, GLintptr offset = %d, GLsizeiptr length = %d)"
argument_list|,
name|target
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|length
operator|<
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ValidBufferTarget
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_ENUM
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
init|=
name|context
operator|->
name|getState
argument_list|()
operator|.
name|getTargetBuffer
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|==
name|NULL
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|buffer
operator|->
name|isMapped
argument_list|()
operator|||
operator|(
name|buffer
operator|->
name|getAccessFlags
argument_list|()
operator|&
name|GL_MAP_FLUSH_EXPLICIT_BIT
operator|)
operator|==
literal|0
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Check for buffer overflow
name|size_t
name|offsetSize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|size_t
name|lengthSize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rx
operator|::
name|IsUnsignedAdditionSafe
argument_list|(
name|offsetSize
argument_list|,
name|lengthSize
argument_list|)
operator|||
name|offsetSize
operator|+
name|lengthSize
operator|>
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|buffer
operator|->
name|getMapLength
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|->
name|recordError
argument_list|(
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// We do not currently support a non-trivial implementation of FlushMappedBufferRange
block|}
block|}
DECL|function|glGetProcAddress
name|__eglMustCastToProperFunctionPointerType
name|EGLAPIENTRY
name|glGetProcAddress
parameter_list|(
specifier|const
name|char
modifier|*
name|procname
parameter_list|)
block|{
struct|struct
name|Extension
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|__eglMustCastToProperFunctionPointerType
name|address
decl_stmt|;
block|}
struct|;
specifier|static
specifier|const
name|Extension
name|glExtensions
index|[]
init|=
block|{
block|{
literal|"glTexImage3DOES"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glTexImage3DOES
block|}
block|,
block|{
literal|"glBlitFramebufferANGLE"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glBlitFramebufferANGLE
block|}
block|,
block|{
literal|"glRenderbufferStorageMultisampleANGLE"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glRenderbufferStorageMultisampleANGLE
block|}
block|,
block|{
literal|"glDeleteFencesNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glDeleteFencesNV
block|}
block|,
block|{
literal|"glGenFencesNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glGenFencesNV
block|}
block|,
block|{
literal|"glIsFenceNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glIsFenceNV
block|}
block|,
block|{
literal|"glTestFenceNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glTestFenceNV
block|}
block|,
block|{
literal|"glGetFenceivNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glGetFenceivNV
block|}
block|,
block|{
literal|"glFinishFenceNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glFinishFenceNV
block|}
block|,
block|{
literal|"glSetFenceNV"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glSetFenceNV
block|}
block|,
block|{
literal|"glGetTranslatedShaderSourceANGLE"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glGetTranslatedShaderSourceANGLE
block|}
block|,
block|{
literal|"glTexStorage2DEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glTexStorage2DEXT
block|}
block|,
block|{
literal|"glGetGraphicsResetStatusEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glGetGraphicsResetStatusEXT
block|}
block|,
block|{
literal|"glReadnPixelsEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glReadnPixelsEXT
block|}
block|,
block|{
literal|"glGetnUniformfvEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glGetnUniformfvEXT
block|}
block|,
block|{
literal|"glGetnUniformivEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glGetnUniformivEXT
block|}
block|,
block|{
literal|"glGenQueriesEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glGenQueriesEXT
block|}
block|,
block|{
literal|"glDeleteQueriesEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glDeleteQueriesEXT
block|}
block|,
block|{
literal|"glIsQueryEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glIsQueryEXT
block|}
block|,
block|{
literal|"glBeginQueryEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glBeginQueryEXT
block|}
block|,
block|{
literal|"glEndQueryEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glEndQueryEXT
block|}
block|,
block|{
literal|"glGetQueryivEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glGetQueryivEXT
block|}
block|,
block|{
literal|"glGetQueryObjectuivEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glGetQueryObjectuivEXT
block|}
block|,
block|{
literal|"glDrawBuffersEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glDrawBuffersEXT
block|}
block|,
block|{
literal|"glVertexAttribDivisorANGLE"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glVertexAttribDivisorANGLE
block|}
block|,
block|{
literal|"glDrawArraysInstancedANGLE"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glDrawArraysInstancedANGLE
block|}
block|,
block|{
literal|"glDrawElementsInstancedANGLE"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glDrawElementsInstancedANGLE
block|}
block|,
block|{
literal|"glGetProgramBinaryOES"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glGetProgramBinaryOES
block|}
block|,
block|{
literal|"glProgramBinaryOES"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glProgramBinaryOES
block|}
block|,
block|{
literal|"glGetBufferPointervOES"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glGetBufferPointervOES
block|}
block|,
block|{
literal|"glMapBufferOES"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glMapBufferOES
block|}
block|,
block|{
literal|"glUnmapBufferOES"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glUnmapBufferOES
block|}
block|,
block|{
literal|"glMapBufferRangeEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glMapBufferRangeEXT
block|}
block|,
block|{
literal|"glFlushMappedBufferRangeEXT"
block|,
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glFlushMappedBufferRangeEXT
block|}
block|,    }
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|ext
init|=
literal|0
init|;
name|ext
operator|<
name|ArraySize
argument_list|(
name|glExtensions
argument_list|)
condition|;
name|ext
operator|++
control|)
block|{
if|if
condition|(
name|strcmp
argument_list|(
name|procname
argument_list|,
name|glExtensions
index|[
name|ext
index|]
operator|.
name|name
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
operator|(
name|__eglMustCastToProperFunctionPointerType
operator|)
name|glExtensions
index|[
name|ext
index|]
operator|.
name|address
return|;
block|}
block|}
return|return
name|NULL
return|;
block|}
comment|// Non-public functions used by EGL
DECL|function|glBindTexImage
name|bool
name|EGLAPIENTRY
name|glBindTexImage
parameter_list|(
name|egl
operator|::
name|Surface
modifier|*
name|surface
parameter_list|)
block|{
name|EVENT
argument_list|(
literal|"(egl::Surface* surface = 0x%0.8p)"
argument_list|,
name|surface
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Context
modifier|*
name|context
init|=
name|gl
operator|::
name|getNonLostContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
condition|)
block|{
name|gl
operator|::
name|Texture2D
modifier|*
name|textureObject
init|=
name|context
operator|->
name|getTexture2D
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|textureObject
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|textureObject
operator|->
name|isImmutable
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|textureObject
operator|->
name|bindTexImage
argument_list|(
name|surface
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_extern
end_unit
