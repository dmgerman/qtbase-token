begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Helper structure describing a single vertex attribute
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_VERTEXATTRIBUTE_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_VERTEXATTRIBUTE_H_
define|#
directive|define
name|LIBGLESV2_VERTEXATTRIBUTE_H_
end_define
begin_include
include|#
directive|include
file|"libGLESv2/Buffer.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
struct|struct
name|VertexAttribute
block|{
name|bool
name|enabled
decl_stmt|;
comment|// From glEnable/DisableVertexAttribArray
name|GLenum
name|type
decl_stmt|;
name|GLuint
name|size
decl_stmt|;
name|bool
name|normalized
decl_stmt|;
name|bool
name|pureInteger
decl_stmt|;
name|GLuint
name|stride
decl_stmt|;
comment|// 0 means natural stride
union|union
block|{
specifier|const
name|GLvoid
modifier|*
name|pointer
decl_stmt|;
name|GLintptr
name|offset
decl_stmt|;
block|}
union|;
name|BindingPointer
operator|<
name|Buffer
operator|>
name|buffer
expr_stmt|;
comment|// Captured when glVertexAttribPointer is called.
name|GLuint
name|divisor
decl_stmt|;
name|VertexAttribute
argument_list|()
expr_stmt|;
block|}
struct|;
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|QuerySingleVertexAttributeParameter
argument_list|(
argument|const VertexAttribute& attrib
argument_list|,
argument|GLenum pname
argument_list|)
block|{
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|GL_VERTEX_ATTRIB_ARRAY_ENABLED
case|:
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|attrib
operator|.
name|enabled
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
operator|)
return|;
case|case
name|GL_VERTEX_ATTRIB_ARRAY_SIZE
case|:
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|attrib
operator|.
name|size
operator|)
return|;
case|case
name|GL_VERTEX_ATTRIB_ARRAY_STRIDE
case|:
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|attrib
operator|.
name|stride
operator|)
return|;
case|case
name|GL_VERTEX_ATTRIB_ARRAY_TYPE
case|:
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|attrib
operator|.
name|type
operator|)
return|;
case|case
name|GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
case|:
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|attrib
operator|.
name|normalized
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
operator|)
return|;
case|case
name|GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
case|:
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|attrib
operator|.
name|buffer
operator|.
name|id
argument_list|()
operator|)
return|;
case|case
name|GL_VERTEX_ATTRIB_ARRAY_DIVISOR
case|:
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|attrib
operator|.
name|divisor
operator|)
return|;
case|case
name|GL_VERTEX_ATTRIB_ARRAY_INTEGER
case|:
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
name|attrib
operator|.
name|pureInteger
condition|?
name|GL_TRUE
else|:
name|GL_FALSE
operator|)
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|static_cast
operator|<
name|T
operator|>
operator|(
literal|0
operator|)
return|;
block|}
block|}
name|size_t
name|ComputeVertexAttributeTypeSize
argument_list|(
specifier|const
name|VertexAttribute
operator|&
name|attrib
argument_list|)
expr_stmt|;
name|size_t
name|ComputeVertexAttributeStride
parameter_list|(
specifier|const
name|VertexAttribute
modifier|&
name|attrib
parameter_list|)
function_decl|;
struct|struct
name|VertexAttribCurrentValueData
block|{
union|union
block|{
name|GLfloat
name|FloatValues
index|[
literal|4
index|]
decl_stmt|;
name|GLint
name|IntValues
index|[
literal|4
index|]
decl_stmt|;
name|GLuint
name|UnsignedIntValues
index|[
literal|4
index|]
decl_stmt|;
block|}
union|;
name|GLenum
name|Type
decl_stmt|;
name|void
name|setFloatValues
parameter_list|(
specifier|const
name|GLfloat
name|floatValues
index|[
literal|4
index|]
parameter_list|)
block|{
for|for
control|(
name|unsigned
name|int
name|valueIndex
init|=
literal|0
init|;
name|valueIndex
operator|<
literal|4
condition|;
name|valueIndex
operator|++
control|)
block|{
name|FloatValues
index|[
name|valueIndex
index|]
operator|=
name|floatValues
index|[
name|valueIndex
index|]
expr_stmt|;
block|}
name|Type
operator|=
name|GL_FLOAT
expr_stmt|;
block|}
name|void
name|setIntValues
parameter_list|(
specifier|const
name|GLint
name|intValues
index|[
literal|4
index|]
parameter_list|)
block|{
for|for
control|(
name|unsigned
name|int
name|valueIndex
init|=
literal|0
init|;
name|valueIndex
operator|<
literal|4
condition|;
name|valueIndex
operator|++
control|)
block|{
name|IntValues
index|[
name|valueIndex
index|]
operator|=
name|intValues
index|[
name|valueIndex
index|]
expr_stmt|;
block|}
name|Type
operator|=
name|GL_INT
expr_stmt|;
block|}
name|void
name|setUnsignedIntValues
parameter_list|(
specifier|const
name|GLuint
name|unsignedIntValues
index|[
literal|4
index|]
parameter_list|)
block|{
for|for
control|(
name|unsigned
name|int
name|valueIndex
init|=
literal|0
init|;
name|valueIndex
operator|<
literal|4
condition|;
name|valueIndex
operator|++
control|)
block|{
name|UnsignedIntValues
index|[
name|valueIndex
index|]
operator|=
name|unsignedIntValues
index|[
name|valueIndex
index|]
expr_stmt|;
block|}
name|Type
operator|=
name|GL_UNSIGNED_INT
expr_stmt|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|VertexAttribCurrentValueData
operator|&
name|other
operator|)
block|{
return|return
operator|(
name|Type
operator|==
name|other
operator|.
name|Type
operator|&&
name|memcmp
argument_list|(
name|FloatValues
argument_list|,
name|other
operator|.
name|FloatValues
argument_list|,
sizeof|sizeof
argument_list|(
name|float
argument_list|)
operator|*
literal|4
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|VertexAttribCurrentValueData
operator|&
name|other
operator|)
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
block|}
struct|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_VERTEXATTRIBUTE_H_
end_comment
end_unit
