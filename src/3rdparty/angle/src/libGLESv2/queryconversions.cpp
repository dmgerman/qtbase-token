begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// queryconversions.cpp: Implementation of state query cast conversions
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
comment|// Helper class for converting a GL type to a GLenum:
comment|// We can't use CastStateValueEnum generally, because of GLboolean + GLubyte overlap.
comment|// We restrict our use to CastStateValue, where it eliminates duplicate parameters.
template|template
parameter_list|<
name|typename
name|GLType
parameter_list|>
struct|struct
DECL|struct|CastStateValueEnum
DECL|member|mEnumForType
name|CastStateValueEnum
block|{
specifier|static
name|GLenum
name|mEnumForType
decl_stmt|;
block|}
struct|;
DECL|member|mEnumForType
template|template
parameter_list|<>
name|GLenum
name|CastStateValueEnum
argument_list|<
name|GLint
argument_list|>
operator|::
name|mEnumForType
init|=
name|GL_INT
decl_stmt|;
DECL|member|mEnumForType
template|template
parameter_list|<>
name|GLenum
name|CastStateValueEnum
argument_list|<
name|GLuint
argument_list|>
operator|::
name|mEnumForType
init|=
name|GL_UNSIGNED_INT
decl_stmt|;
DECL|member|mEnumForType
template|template
parameter_list|<>
name|GLenum
name|CastStateValueEnum
argument_list|<
name|GLboolean
argument_list|>
operator|::
name|mEnumForType
init|=
name|GL_BOOL
decl_stmt|;
DECL|member|mEnumForType
template|template
parameter_list|<>
name|GLenum
name|CastStateValueEnum
argument_list|<
name|GLint64
argument_list|>
operator|::
name|mEnumForType
init|=
name|GL_INT_64_ANGLEX
decl_stmt|;
DECL|member|mEnumForType
template|template
parameter_list|<>
name|GLenum
name|CastStateValueEnum
argument_list|<
name|GLfloat
argument_list|>
operator|::
name|mEnumForType
init|=
name|GL_FLOAT
decl_stmt|;
template|template
parameter_list|<
name|typename
name|QueryT
parameter_list|,
name|typename
name|NativeT
parameter_list|>
DECL|function|CastStateValueToInt
name|QueryT
name|CastStateValueToInt
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|NativeT
name|value
parameter_list|)
block|{
name|GLenum
name|queryType
init|=
name|CastStateValueEnum
argument_list|<
name|QueryT
argument_list|>
operator|::
name|mEnumForType
decl_stmt|;
name|GLenum
name|nativeType
init|=
name|CastStateValueEnum
argument_list|<
name|NativeT
argument_list|>
operator|::
name|mEnumForType
decl_stmt|;
if|if
condition|(
name|nativeType
operator|==
name|GL_FLOAT
condition|)
block|{
comment|// RGBA color values and DepthRangeF values are converted to integer using Equation 2.4 from Table 4.5
if|if
condition|(
name|pname
operator|==
name|GL_DEPTH_RANGE
operator|||
name|pname
operator|==
name|GL_COLOR_CLEAR_VALUE
operator|||
name|pname
operator|==
name|GL_DEPTH_CLEAR_VALUE
operator|||
name|pname
operator|==
name|GL_BLEND_COLOR
condition|)
block|{
return|return
cast|static_cast
argument_list|<
name|QueryT
argument_list|>
argument_list|(
operator|(
cast|static_cast
argument_list|<
name|GLfloat
argument_list|>
argument_list|(
literal|0xFFFFFFFF
argument_list|)
operator|*
name|value
operator|-
literal|1.0f
operator|)
operator|/
literal|2.0f
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|gl
operator|::
name|iround
argument_list|<
name|QueryT
argument_list|>
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
comment|// Clamp 64-bit int values when casting to int
if|if
condition|(
name|nativeType
operator|==
name|GL_INT_64_ANGLEX
operator|&&
name|queryType
operator|==
name|GL_INT
condition|)
block|{
name|GLint64
name|minIntValue
init|=
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLint
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
decl_stmt|;
name|GLint64
name|maxIntValue
init|=
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|GLint
argument_list|>
operator|::
name|max
argument_list|()
argument_list|)
decl_stmt|;
name|GLint64
name|clampedValue
init|=
name|std
operator|::
name|max
argument_list|(
name|std
operator|::
name|min
argument_list|(
cast|static_cast
argument_list|<
name|GLint64
argument_list|>
argument_list|(
name|value
argument_list|)
argument_list|,
name|maxIntValue
argument_list|)
argument_list|,
name|minIntValue
argument_list|)
decl_stmt|;
return|return
cast|static_cast
argument_list|<
name|QueryT
argument_list|>
argument_list|(
name|clampedValue
argument_list|)
return|;
block|}
return|return
cast|static_cast
argument_list|<
name|QueryT
argument_list|>
argument_list|(
name|value
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|QueryT
parameter_list|,
name|typename
name|NativeT
parameter_list|>
DECL|function|CastStateValue
name|QueryT
name|CastStateValue
parameter_list|(
name|GLenum
name|pname
parameter_list|,
name|NativeT
name|value
parameter_list|)
block|{
name|GLenum
name|queryType
init|=
name|CastStateValueEnum
argument_list|<
name|QueryT
argument_list|>
operator|::
name|mEnumForType
decl_stmt|;
switch|switch
condition|(
name|queryType
condition|)
block|{
case|case
name|GL_INT
case|:
return|return
name|CastStateValueToInt
argument_list|<
name|QueryT
argument_list|,
name|NativeT
argument_list|>
argument_list|(
name|pname
argument_list|,
name|value
argument_list|)
return|;
case|case
name|GL_INT_64_ANGLEX
case|:
return|return
name|CastStateValueToInt
argument_list|<
name|QueryT
argument_list|,
name|NativeT
argument_list|>
argument_list|(
name|pname
argument_list|,
name|value
argument_list|)
return|;
case|case
name|GL_FLOAT
case|:
return|return
cast|static_cast
argument_list|<
name|QueryT
argument_list|>
argument_list|(
name|value
argument_list|)
return|;
case|case
name|GL_BOOL
case|:
return|return
operator|(
name|value
operator|==
cast|static_cast
argument_list|<
name|NativeT
argument_list|>
argument_list|(
literal|0
argument_list|)
condition|?
name|GL_FALSE
else|:
name|GL_TRUE
operator|)
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
template|template
parameter_list|<
name|typename
name|QueryT
parameter_list|>
DECL|function|CastStateValues
name|void
name|CastStateValues
parameter_list|(
name|Context
modifier|*
name|context
parameter_list|,
name|GLenum
name|nativeType
parameter_list|,
name|GLenum
name|pname
parameter_list|,
name|unsigned
name|int
name|numParams
parameter_list|,
name|QueryT
modifier|*
name|outParams
parameter_list|)
block|{
if|if
condition|(
name|nativeType
operator|==
name|GL_INT
condition|)
block|{
name|GLint
modifier|*
name|intParams
init|=
name|NULL
decl_stmt|;
name|intParams
operator|=
operator|new
name|GLint
index|[
name|numParams
index|]
expr_stmt|;
name|context
operator|->
name|getIntegerv
argument_list|(
name|pname
argument_list|,
name|intParams
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParams
condition|;
operator|++
name|i
control|)
block|{
name|outParams
index|[
name|i
index|]
operator|=
name|CastStateValue
argument_list|<
name|QueryT
argument_list|>
argument_list|(
name|pname
argument_list|,
name|intParams
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|intParams
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nativeType
operator|==
name|GL_BOOL
condition|)
block|{
name|GLboolean
modifier|*
name|boolParams
init|=
name|NULL
decl_stmt|;
name|boolParams
operator|=
operator|new
name|GLboolean
index|[
name|numParams
index|]
expr_stmt|;
name|context
operator|->
name|getBooleanv
argument_list|(
name|pname
argument_list|,
name|boolParams
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParams
condition|;
operator|++
name|i
control|)
block|{
name|outParams
index|[
name|i
index|]
operator|=
operator|(
name|boolParams
index|[
name|i
index|]
operator|==
name|GL_FALSE
condition|?
cast|static_cast
argument_list|<
name|QueryT
argument_list|>
argument_list|(
literal|0
argument_list|)
else|:
cast|static_cast
argument_list|<
name|QueryT
argument_list|>
argument_list|(
literal|1
argument_list|)
operator|)
expr_stmt|;
block|}
operator|delete
index|[]
name|boolParams
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nativeType
operator|==
name|GL_FLOAT
condition|)
block|{
name|GLfloat
modifier|*
name|floatParams
init|=
name|NULL
decl_stmt|;
name|floatParams
operator|=
operator|new
name|GLfloat
index|[
name|numParams
index|]
expr_stmt|;
name|context
operator|->
name|getFloatv
argument_list|(
name|pname
argument_list|,
name|floatParams
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParams
condition|;
operator|++
name|i
control|)
block|{
name|outParams
index|[
name|i
index|]
operator|=
name|CastStateValue
argument_list|<
name|QueryT
argument_list|>
argument_list|(
name|pname
argument_list|,
name|floatParams
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|floatParams
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nativeType
operator|==
name|GL_INT_64_ANGLEX
condition|)
block|{
name|GLint64
modifier|*
name|int64Params
init|=
name|NULL
decl_stmt|;
name|int64Params
operator|=
operator|new
name|GLint64
index|[
name|numParams
index|]
expr_stmt|;
name|context
operator|->
name|getInteger64v
argument_list|(
name|pname
argument_list|,
name|int64Params
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParams
condition|;
operator|++
name|i
control|)
block|{
name|outParams
index|[
name|i
index|]
operator|=
name|CastStateValue
argument_list|<
name|QueryT
argument_list|>
argument_list|(
name|pname
argument_list|,
name|int64Params
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
operator|delete
index|[]
name|int64Params
expr_stmt|;
block|}
else|else
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
comment|// Explicit template instantiation (how we export template functions in different files)
comment|// The calls below will make CastStateValues successfully link with the GL state query types
comment|// The GL state query API types are: bool, int, uint, float, int64
specifier|template
name|void
name|CastStateValues
argument_list|<
name|GLboolean
argument_list|>
parameter_list|(
name|Context
modifier|*
parameter_list|,
name|GLenum
parameter_list|,
name|GLenum
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|GLboolean
modifier|*
parameter_list|)
function_decl|;
specifier|template
name|void
name|CastStateValues
argument_list|<
name|GLint
argument_list|>
parameter_list|(
name|Context
modifier|*
parameter_list|,
name|GLenum
parameter_list|,
name|GLenum
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|GLint
modifier|*
parameter_list|)
function_decl|;
specifier|template
name|void
name|CastStateValues
argument_list|<
name|GLuint
argument_list|>
parameter_list|(
name|Context
modifier|*
parameter_list|,
name|GLenum
parameter_list|,
name|GLenum
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|GLuint
modifier|*
parameter_list|)
function_decl|;
specifier|template
name|void
name|CastStateValues
argument_list|<
name|GLfloat
argument_list|>
parameter_list|(
name|Context
modifier|*
parameter_list|,
name|GLenum
parameter_list|,
name|GLenum
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|GLfloat
modifier|*
parameter_list|)
function_decl|;
specifier|template
name|void
name|CastStateValues
argument_list|<
name|GLint64
argument_list|>
parameter_list|(
name|Context
modifier|*
parameter_list|,
name|GLenum
parameter_list|,
name|GLenum
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|GLint64
modifier|*
parameter_list|)
function_decl|;
block|}
end_namespace
end_unit
