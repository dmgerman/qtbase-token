begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Renderbuffer.cpp: Implements the renderer-agnostic gl::Renderbuffer class,
end_comment
begin_comment
comment|// GL renderbuffer objects and related functionality.
end_comment
begin_comment
comment|// [OpenGL ES 2.0.24] section 4.4.3 page 108.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/RendererD3D.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/RenderTarget.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/RenderbufferImpl.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|Renderbuffer
name|Renderbuffer
operator|::
name|Renderbuffer
parameter_list|(
name|rx
operator|::
name|RenderbufferImpl
modifier|*
name|impl
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|RefCountObject
argument_list|(
name|id
argument_list|)
member_init_list|,
name|mRenderbuffer
argument_list|(
name|impl
argument_list|)
block|{
name|ASSERT
argument_list|(
name|mRenderbuffer
argument_list|)
expr_stmt|;
name|mWidth
operator|=
name|mRenderbuffer
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|mHeight
operator|=
name|mRenderbuffer
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|mInternalFormat
operator|=
name|mRenderbuffer
operator|->
name|getInternalFormat
argument_list|()
expr_stmt|;
name|mActualFormat
operator|=
name|mRenderbuffer
operator|->
name|getActualFormat
argument_list|()
expr_stmt|;
name|mSamples
operator|=
name|mRenderbuffer
operator|->
name|getSamples
argument_list|()
expr_stmt|;
block|}
DECL|function|~Renderbuffer
name|Renderbuffer
operator|::
name|~
name|Renderbuffer
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mRenderbuffer
argument_list|)
expr_stmt|;
block|}
DECL|function|setStorage
name|Error
name|Renderbuffer
operator|::
name|setStorage
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
block|{
name|Error
name|error
init|=
name|mRenderbuffer
operator|->
name|setStorage
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|internalformat
argument_list|,
name|samples
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|mWidth
operator|=
name|width
expr_stmt|;
name|mHeight
operator|=
name|height
expr_stmt|;
name|mInternalFormat
operator|=
name|internalformat
expr_stmt|;
name|mSamples
operator|=
name|samples
expr_stmt|;
name|mActualFormat
operator|=
name|mRenderbuffer
operator|->
name|getActualFormat
argument_list|()
expr_stmt|;
return|return
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getImplementation
name|rx
operator|::
name|RenderbufferImpl
modifier|*
name|Renderbuffer
operator|::
name|getImplementation
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|mRenderbuffer
argument_list|)
expr_stmt|;
return|return
name|mRenderbuffer
return|;
block|}
DECL|function|getWidth
name|GLsizei
name|Renderbuffer
operator|::
name|getWidth
parameter_list|()
specifier|const
block|{
return|return
name|mWidth
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|Renderbuffer
operator|::
name|getHeight
parameter_list|()
specifier|const
block|{
return|return
name|mHeight
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|Renderbuffer
operator|::
name|getInternalFormat
parameter_list|()
specifier|const
block|{
return|return
name|mInternalFormat
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|Renderbuffer
operator|::
name|getActualFormat
parameter_list|()
specifier|const
block|{
return|return
name|mActualFormat
return|;
block|}
DECL|function|getSamples
name|GLsizei
name|Renderbuffer
operator|::
name|getSamples
parameter_list|()
specifier|const
block|{
return|return
name|mSamples
return|;
block|}
DECL|function|getRedSize
name|GLuint
name|Renderbuffer
operator|::
name|getRedSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
operator|.
name|redBits
return|;
block|}
DECL|function|getGreenSize
name|GLuint
name|Renderbuffer
operator|::
name|getGreenSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
operator|.
name|greenBits
return|;
block|}
DECL|function|getBlueSize
name|GLuint
name|Renderbuffer
operator|::
name|getBlueSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
operator|.
name|blueBits
return|;
block|}
DECL|function|getAlphaSize
name|GLuint
name|Renderbuffer
operator|::
name|getAlphaSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
operator|.
name|alphaBits
return|;
block|}
DECL|function|getDepthSize
name|GLuint
name|Renderbuffer
operator|::
name|getDepthSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
operator|.
name|depthBits
return|;
block|}
DECL|function|getStencilSize
name|GLuint
name|Renderbuffer
operator|::
name|getStencilSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
operator|.
name|stencilBits
return|;
block|}
block|}
end_namespace
end_unit
