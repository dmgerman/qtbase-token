begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Renderbuffer.cpp: the gl::Renderbuffer class and its derived classes
end_comment
begin_comment
comment|// Colorbuffer, Depthbuffer and Stencilbuffer. Implements GL renderbuffer
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4.3 page 108.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/RenderTarget.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/utilities.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|member|mCurrentSerial
name|unsigned
name|int
name|RenderbufferStorage
operator|::
name|mCurrentSerial
init|=
literal|1
decl_stmt|;
DECL|function|RenderbufferInterface
name|RenderbufferInterface
operator|::
name|RenderbufferInterface
parameter_list|()
block|{ }
comment|// The default case for classes inherited from RenderbufferInterface is not to
comment|// need to do anything upon the reference count to the parent Renderbuffer incrementing
comment|// or decrementing.
DECL|function|addProxyRef
name|void
name|RenderbufferInterface
operator|::
name|addProxyRef
parameter_list|(
specifier|const
name|Renderbuffer
modifier|*
name|proxy
parameter_list|)
block|{ }
DECL|function|releaseProxy
name|void
name|RenderbufferInterface
operator|::
name|releaseProxy
parameter_list|(
specifier|const
name|Renderbuffer
modifier|*
name|proxy
parameter_list|)
block|{ }
DECL|function|getRedSize
name|GLuint
name|RenderbufferInterface
operator|::
name|getRedSize
parameter_list|()
specifier|const
block|{
return|return
name|gl
operator|::
name|GetRedSize
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
return|;
block|}
DECL|function|getGreenSize
name|GLuint
name|RenderbufferInterface
operator|::
name|getGreenSize
parameter_list|()
specifier|const
block|{
return|return
name|gl
operator|::
name|GetGreenSize
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
return|;
block|}
DECL|function|getBlueSize
name|GLuint
name|RenderbufferInterface
operator|::
name|getBlueSize
parameter_list|()
specifier|const
block|{
return|return
name|gl
operator|::
name|GetBlueSize
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
return|;
block|}
DECL|function|getAlphaSize
name|GLuint
name|RenderbufferInterface
operator|::
name|getAlphaSize
parameter_list|()
specifier|const
block|{
return|return
name|gl
operator|::
name|GetAlphaSize
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
return|;
block|}
DECL|function|getDepthSize
name|GLuint
name|RenderbufferInterface
operator|::
name|getDepthSize
parameter_list|()
specifier|const
block|{
return|return
name|gl
operator|::
name|GetDepthSize
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
return|;
block|}
DECL|function|getStencilSize
name|GLuint
name|RenderbufferInterface
operator|::
name|getStencilSize
parameter_list|()
specifier|const
block|{
return|return
name|gl
operator|::
name|GetStencilSize
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
return|;
block|}
comment|///// RenderbufferTexture2D Implementation ////////
DECL|function|RenderbufferTexture2D
name|RenderbufferTexture2D
operator|::
name|RenderbufferTexture2D
parameter_list|(
name|Texture2D
modifier|*
name|texture
parameter_list|,
name|GLenum
name|target
parameter_list|)
member_init_list|:
name|mTarget
argument_list|(
name|target
argument_list|)
block|{
name|mTexture2D
operator|.
name|set
argument_list|(
name|texture
argument_list|)
expr_stmt|;
block|}
DECL|function|~RenderbufferTexture2D
name|RenderbufferTexture2D
operator|::
name|~
name|RenderbufferTexture2D
parameter_list|()
block|{
name|mTexture2D
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
comment|// Textures need to maintain their own reference count for references via
comment|// Renderbuffers acting as proxies. Here, we notify the texture of a reference.
DECL|function|addProxyRef
name|void
name|RenderbufferTexture2D
operator|::
name|addProxyRef
parameter_list|(
specifier|const
name|Renderbuffer
modifier|*
name|proxy
parameter_list|)
block|{
name|mTexture2D
operator|->
name|addProxyRef
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
DECL|function|releaseProxy
name|void
name|RenderbufferTexture2D
operator|::
name|releaseProxy
parameter_list|(
specifier|const
name|Renderbuffer
modifier|*
name|proxy
parameter_list|)
block|{
name|mTexture2D
operator|->
name|releaseProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
DECL|function|getRenderTarget
name|rx
operator|::
name|RenderTarget
modifier|*
name|RenderbufferTexture2D
operator|::
name|getRenderTarget
parameter_list|()
block|{
return|return
name|mTexture2D
operator|->
name|getRenderTarget
argument_list|(
name|mTarget
argument_list|)
return|;
block|}
DECL|function|getDepthStencil
name|rx
operator|::
name|RenderTarget
modifier|*
name|RenderbufferTexture2D
operator|::
name|getDepthStencil
parameter_list|()
block|{
return|return
name|mTexture2D
operator|->
name|getDepthStencil
argument_list|(
name|mTarget
argument_list|)
return|;
block|}
DECL|function|getWidth
name|GLsizei
name|RenderbufferTexture2D
operator|::
name|getWidth
parameter_list|()
specifier|const
block|{
return|return
name|mTexture2D
operator|->
name|getWidth
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|RenderbufferTexture2D
operator|::
name|getHeight
parameter_list|()
specifier|const
block|{
return|return
name|mTexture2D
operator|->
name|getHeight
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|RenderbufferTexture2D
operator|::
name|getInternalFormat
parameter_list|()
specifier|const
block|{
return|return
name|mTexture2D
operator|->
name|getInternalFormat
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|RenderbufferTexture2D
operator|::
name|getActualFormat
parameter_list|()
specifier|const
block|{
return|return
name|mTexture2D
operator|->
name|getActualFormat
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|function|getSamples
name|GLsizei
name|RenderbufferTexture2D
operator|::
name|getSamples
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|getSerial
name|unsigned
name|int
name|RenderbufferTexture2D
operator|::
name|getSerial
parameter_list|()
specifier|const
block|{
return|return
name|mTexture2D
operator|->
name|getRenderTargetSerial
argument_list|(
name|mTarget
argument_list|)
return|;
block|}
comment|///// RenderbufferTextureCubeMap Implementation ////////
DECL|function|RenderbufferTextureCubeMap
name|RenderbufferTextureCubeMap
operator|::
name|RenderbufferTextureCubeMap
parameter_list|(
name|TextureCubeMap
modifier|*
name|texture
parameter_list|,
name|GLenum
name|target
parameter_list|)
member_init_list|:
name|mTarget
argument_list|(
name|target
argument_list|)
block|{
name|mTextureCubeMap
operator|.
name|set
argument_list|(
name|texture
argument_list|)
expr_stmt|;
block|}
DECL|function|~RenderbufferTextureCubeMap
name|RenderbufferTextureCubeMap
operator|::
name|~
name|RenderbufferTextureCubeMap
parameter_list|()
block|{
name|mTextureCubeMap
operator|.
name|set
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
comment|// Textures need to maintain their own reference count for references via
comment|// Renderbuffers acting as proxies. Here, we notify the texture of a reference.
DECL|function|addProxyRef
name|void
name|RenderbufferTextureCubeMap
operator|::
name|addProxyRef
parameter_list|(
specifier|const
name|Renderbuffer
modifier|*
name|proxy
parameter_list|)
block|{
name|mTextureCubeMap
operator|->
name|addProxyRef
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
DECL|function|releaseProxy
name|void
name|RenderbufferTextureCubeMap
operator|::
name|releaseProxy
parameter_list|(
specifier|const
name|Renderbuffer
modifier|*
name|proxy
parameter_list|)
block|{
name|mTextureCubeMap
operator|->
name|releaseProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
DECL|function|getRenderTarget
name|rx
operator|::
name|RenderTarget
modifier|*
name|RenderbufferTextureCubeMap
operator|::
name|getRenderTarget
parameter_list|()
block|{
return|return
name|mTextureCubeMap
operator|->
name|getRenderTarget
argument_list|(
name|mTarget
argument_list|)
return|;
block|}
DECL|function|getDepthStencil
name|rx
operator|::
name|RenderTarget
modifier|*
name|RenderbufferTextureCubeMap
operator|::
name|getDepthStencil
parameter_list|()
block|{
return|return
name|NULL
return|;
block|}
DECL|function|getWidth
name|GLsizei
name|RenderbufferTextureCubeMap
operator|::
name|getWidth
parameter_list|()
specifier|const
block|{
return|return
name|mTextureCubeMap
operator|->
name|getWidth
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|RenderbufferTextureCubeMap
operator|::
name|getHeight
parameter_list|()
specifier|const
block|{
return|return
name|mTextureCubeMap
operator|->
name|getHeight
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|RenderbufferTextureCubeMap
operator|::
name|getInternalFormat
parameter_list|()
specifier|const
block|{
return|return
name|mTextureCubeMap
operator|->
name|getInternalFormat
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|RenderbufferTextureCubeMap
operator|::
name|getActualFormat
parameter_list|()
specifier|const
block|{
return|return
name|mTextureCubeMap
operator|->
name|getActualFormat
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|function|getSamples
name|GLsizei
name|RenderbufferTextureCubeMap
operator|::
name|getSamples
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|getSerial
name|unsigned
name|int
name|RenderbufferTextureCubeMap
operator|::
name|getSerial
parameter_list|()
specifier|const
block|{
return|return
name|mTextureCubeMap
operator|->
name|getRenderTargetSerial
argument_list|(
name|mTarget
argument_list|)
return|;
block|}
comment|////// Renderbuffer Implementation //////
DECL|function|Renderbuffer
name|Renderbuffer
operator|::
name|Renderbuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|RenderbufferInterface
modifier|*
name|instance
parameter_list|)
member_init_list|:
name|RefCountObject
argument_list|(
name|id
argument_list|)
block|{
name|ASSERT
argument_list|(
name|instance
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|mInstance
operator|=
name|instance
expr_stmt|;
block|}
DECL|function|~Renderbuffer
name|Renderbuffer
operator|::
name|~
name|Renderbuffer
parameter_list|()
block|{
operator|delete
name|mInstance
expr_stmt|;
block|}
comment|// The RenderbufferInterface contained in this Renderbuffer may need to maintain
comment|// its own reference count, so we pass it on here.
DECL|function|addRef
name|void
name|Renderbuffer
operator|::
name|addRef
parameter_list|()
specifier|const
block|{
name|mInstance
operator|->
name|addProxyRef
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|RefCountObject
operator|::
name|addRef
argument_list|()
expr_stmt|;
block|}
DECL|function|release
name|void
name|Renderbuffer
operator|::
name|release
parameter_list|()
specifier|const
block|{
name|mInstance
operator|->
name|releaseProxy
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|RefCountObject
operator|::
name|release
argument_list|()
expr_stmt|;
block|}
DECL|function|getRenderTarget
name|rx
operator|::
name|RenderTarget
modifier|*
name|Renderbuffer
operator|::
name|getRenderTarget
parameter_list|()
block|{
return|return
name|mInstance
operator|->
name|getRenderTarget
argument_list|()
return|;
block|}
DECL|function|getDepthStencil
name|rx
operator|::
name|RenderTarget
modifier|*
name|Renderbuffer
operator|::
name|getDepthStencil
parameter_list|()
block|{
return|return
name|mInstance
operator|->
name|getDepthStencil
argument_list|()
return|;
block|}
DECL|function|getWidth
name|GLsizei
name|Renderbuffer
operator|::
name|getWidth
parameter_list|()
specifier|const
block|{
return|return
name|mInstance
operator|->
name|getWidth
argument_list|()
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|Renderbuffer
operator|::
name|getHeight
parameter_list|()
specifier|const
block|{
return|return
name|mInstance
operator|->
name|getHeight
argument_list|()
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|Renderbuffer
operator|::
name|getInternalFormat
parameter_list|()
specifier|const
block|{
return|return
name|mInstance
operator|->
name|getInternalFormat
argument_list|()
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|Renderbuffer
operator|::
name|getActualFormat
parameter_list|()
specifier|const
block|{
return|return
name|mInstance
operator|->
name|getActualFormat
argument_list|()
return|;
block|}
DECL|function|getRedSize
name|GLuint
name|Renderbuffer
operator|::
name|getRedSize
parameter_list|()
specifier|const
block|{
return|return
name|mInstance
operator|->
name|getRedSize
argument_list|()
return|;
block|}
DECL|function|getGreenSize
name|GLuint
name|Renderbuffer
operator|::
name|getGreenSize
parameter_list|()
specifier|const
block|{
return|return
name|mInstance
operator|->
name|getGreenSize
argument_list|()
return|;
block|}
DECL|function|getBlueSize
name|GLuint
name|Renderbuffer
operator|::
name|getBlueSize
parameter_list|()
specifier|const
block|{
return|return
name|mInstance
operator|->
name|getBlueSize
argument_list|()
return|;
block|}
DECL|function|getAlphaSize
name|GLuint
name|Renderbuffer
operator|::
name|getAlphaSize
parameter_list|()
specifier|const
block|{
return|return
name|mInstance
operator|->
name|getAlphaSize
argument_list|()
return|;
block|}
DECL|function|getDepthSize
name|GLuint
name|Renderbuffer
operator|::
name|getDepthSize
parameter_list|()
specifier|const
block|{
return|return
name|mInstance
operator|->
name|getDepthSize
argument_list|()
return|;
block|}
DECL|function|getStencilSize
name|GLuint
name|Renderbuffer
operator|::
name|getStencilSize
parameter_list|()
specifier|const
block|{
return|return
name|mInstance
operator|->
name|getStencilSize
argument_list|()
return|;
block|}
DECL|function|getSamples
name|GLsizei
name|Renderbuffer
operator|::
name|getSamples
parameter_list|()
specifier|const
block|{
return|return
name|mInstance
operator|->
name|getSamples
argument_list|()
return|;
block|}
DECL|function|getSerial
name|unsigned
name|int
name|Renderbuffer
operator|::
name|getSerial
parameter_list|()
specifier|const
block|{
return|return
name|mInstance
operator|->
name|getSerial
argument_list|()
return|;
block|}
DECL|function|setStorage
name|void
name|Renderbuffer
operator|::
name|setStorage
parameter_list|(
name|RenderbufferStorage
modifier|*
name|newStorage
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|newStorage
operator|!=
name|NULL
argument_list|)
expr_stmt|;
operator|delete
name|mInstance
expr_stmt|;
name|mInstance
operator|=
name|newStorage
expr_stmt|;
block|}
DECL|function|RenderbufferStorage
name|RenderbufferStorage
operator|::
name|RenderbufferStorage
parameter_list|()
member_init_list|:
name|mSerial
argument_list|(
name|issueSerial
argument_list|()
argument_list|)
block|{
name|mWidth
operator|=
literal|0
expr_stmt|;
name|mHeight
operator|=
literal|0
expr_stmt|;
name|mInternalFormat
operator|=
name|GL_RGBA4
expr_stmt|;
name|mActualFormat
operator|=
name|GL_RGBA8_OES
expr_stmt|;
name|mSamples
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|~RenderbufferStorage
name|RenderbufferStorage
operator|::
name|~
name|RenderbufferStorage
parameter_list|()
block|{ }
DECL|function|getRenderTarget
name|rx
operator|::
name|RenderTarget
modifier|*
name|RenderbufferStorage
operator|::
name|getRenderTarget
parameter_list|()
block|{
return|return
name|NULL
return|;
block|}
DECL|function|getDepthStencil
name|rx
operator|::
name|RenderTarget
modifier|*
name|RenderbufferStorage
operator|::
name|getDepthStencil
parameter_list|()
block|{
return|return
name|NULL
return|;
block|}
DECL|function|getWidth
name|GLsizei
name|RenderbufferStorage
operator|::
name|getWidth
parameter_list|()
specifier|const
block|{
return|return
name|mWidth
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|RenderbufferStorage
operator|::
name|getHeight
parameter_list|()
specifier|const
block|{
return|return
name|mHeight
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|RenderbufferStorage
operator|::
name|getInternalFormat
parameter_list|()
specifier|const
block|{
return|return
name|mInternalFormat
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|RenderbufferStorage
operator|::
name|getActualFormat
parameter_list|()
specifier|const
block|{
return|return
name|mActualFormat
return|;
block|}
DECL|function|getSamples
name|GLsizei
name|RenderbufferStorage
operator|::
name|getSamples
parameter_list|()
specifier|const
block|{
return|return
name|mSamples
return|;
block|}
DECL|function|getSerial
name|unsigned
name|int
name|RenderbufferStorage
operator|::
name|getSerial
parameter_list|()
specifier|const
block|{
return|return
name|mSerial
return|;
block|}
DECL|function|issueSerial
name|unsigned
name|int
name|RenderbufferStorage
operator|::
name|issueSerial
parameter_list|()
block|{
return|return
name|mCurrentSerial
operator|++
return|;
block|}
DECL|function|issueCubeSerials
name|unsigned
name|int
name|RenderbufferStorage
operator|::
name|issueCubeSerials
parameter_list|()
block|{
name|unsigned
name|int
name|firstSerial
init|=
name|mCurrentSerial
decl_stmt|;
name|mCurrentSerial
operator|+=
literal|6
expr_stmt|;
return|return
name|firstSerial
return|;
block|}
DECL|function|Colorbuffer
name|Colorbuffer
operator|::
name|Colorbuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|rx
operator|::
name|SwapChain
modifier|*
name|swapChain
parameter_list|)
block|{
name|mRenderTarget
operator|=
name|renderer
operator|->
name|createRenderTarget
argument_list|(
name|swapChain
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|mRenderTarget
condition|)
block|{
name|mWidth
operator|=
name|mRenderTarget
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|mHeight
operator|=
name|mRenderTarget
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|mInternalFormat
operator|=
name|mRenderTarget
operator|->
name|getInternalFormat
argument_list|()
expr_stmt|;
name|mActualFormat
operator|=
name|mRenderTarget
operator|->
name|getActualFormat
argument_list|()
expr_stmt|;
name|mSamples
operator|=
name|mRenderTarget
operator|->
name|getSamples
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|Colorbuffer
name|Colorbuffer
operator|::
name|Colorbuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
member_init_list|:
name|mRenderTarget
argument_list|(
name|NULL
argument_list|)
block|{
name|mRenderTarget
operator|=
name|renderer
operator|->
name|createRenderTarget
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|samples
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|mRenderTarget
condition|)
block|{
name|mWidth
operator|=
name|width
expr_stmt|;
name|mHeight
operator|=
name|height
expr_stmt|;
name|mInternalFormat
operator|=
name|format
expr_stmt|;
name|mActualFormat
operator|=
name|mRenderTarget
operator|->
name|getActualFormat
argument_list|()
expr_stmt|;
name|mSamples
operator|=
name|mRenderTarget
operator|->
name|getSamples
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|~Colorbuffer
name|Colorbuffer
operator|::
name|~
name|Colorbuffer
parameter_list|()
block|{
if|if
condition|(
name|mRenderTarget
condition|)
block|{
operator|delete
name|mRenderTarget
expr_stmt|;
block|}
block|}
DECL|function|getRenderTarget
name|rx
operator|::
name|RenderTarget
modifier|*
name|Colorbuffer
operator|::
name|getRenderTarget
parameter_list|()
block|{
if|if
condition|(
name|mRenderTarget
condition|)
block|{
return|return
name|mRenderTarget
return|;
block|}
return|return
name|NULL
return|;
block|}
DECL|function|DepthStencilbuffer
name|DepthStencilbuffer
operator|::
name|DepthStencilbuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|rx
operator|::
name|SwapChain
modifier|*
name|swapChain
parameter_list|)
block|{
name|mDepthStencil
operator|=
name|renderer
operator|->
name|createRenderTarget
argument_list|(
name|swapChain
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|mDepthStencil
condition|)
block|{
name|mWidth
operator|=
name|mDepthStencil
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|mHeight
operator|=
name|mDepthStencil
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|mInternalFormat
operator|=
name|mDepthStencil
operator|->
name|getInternalFormat
argument_list|()
expr_stmt|;
name|mSamples
operator|=
name|mDepthStencil
operator|->
name|getSamples
argument_list|()
expr_stmt|;
name|mActualFormat
operator|=
name|mDepthStencil
operator|->
name|getActualFormat
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|DepthStencilbuffer
name|DepthStencilbuffer
operator|::
name|DepthStencilbuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
block|{
name|mDepthStencil
operator|=
name|renderer
operator|->
name|createRenderTarget
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|GL_DEPTH24_STENCIL8_OES
argument_list|,
name|samples
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mWidth
operator|=
name|mDepthStencil
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|mHeight
operator|=
name|mDepthStencil
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|mInternalFormat
operator|=
name|GL_DEPTH24_STENCIL8_OES
expr_stmt|;
name|mActualFormat
operator|=
name|mDepthStencil
operator|->
name|getActualFormat
argument_list|()
expr_stmt|;
name|mSamples
operator|=
name|mDepthStencil
operator|->
name|getSamples
argument_list|()
expr_stmt|;
block|}
DECL|function|~DepthStencilbuffer
name|DepthStencilbuffer
operator|::
name|~
name|DepthStencilbuffer
parameter_list|()
block|{
if|if
condition|(
name|mDepthStencil
condition|)
block|{
operator|delete
name|mDepthStencil
expr_stmt|;
block|}
block|}
DECL|function|getDepthStencil
name|rx
operator|::
name|RenderTarget
modifier|*
name|DepthStencilbuffer
operator|::
name|getDepthStencil
parameter_list|()
block|{
if|if
condition|(
name|mDepthStencil
condition|)
block|{
return|return
name|mDepthStencil
return|;
block|}
return|return
name|NULL
return|;
block|}
DECL|function|Depthbuffer
name|Depthbuffer
operator|::
name|Depthbuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
member_init_list|:
name|DepthStencilbuffer
argument_list|(
name|renderer
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|samples
argument_list|)
block|{
if|if
condition|(
name|mDepthStencil
condition|)
block|{
name|mInternalFormat
operator|=
name|GL_DEPTH_COMPONENT16
expr_stmt|;
comment|// If the renderbuffer parameters are queried, the calling function
comment|// will expect one of the valid renderbuffer formats for use in
comment|// glRenderbufferStorage
block|}
block|}
DECL|function|~Depthbuffer
name|Depthbuffer
operator|::
name|~
name|Depthbuffer
parameter_list|()
block|{ }
DECL|function|Stencilbuffer
name|Stencilbuffer
operator|::
name|Stencilbuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
member_init_list|:
name|DepthStencilbuffer
argument_list|(
name|renderer
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|samples
argument_list|)
block|{
if|if
condition|(
name|mDepthStencil
condition|)
block|{
name|mInternalFormat
operator|=
name|GL_STENCIL_INDEX8
expr_stmt|;
comment|// If the renderbuffer parameters are queried, the calling function
comment|// will expect one of the valid renderbuffer formats for use in
comment|// glRenderbufferStorage
block|}
block|}
DECL|function|~Stencilbuffer
name|Stencilbuffer
operator|::
name|~
name|Stencilbuffer
parameter_list|()
block|{ }
block|}
end_namespace
end_unit
