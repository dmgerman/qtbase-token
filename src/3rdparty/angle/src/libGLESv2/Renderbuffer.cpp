begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Renderbuffer.cpp: the gl::Renderbuffer class and its derived classes
end_comment
begin_comment
comment|// Colorbuffer, Depthbuffer and Stencilbuffer. Implements GL renderbuffer
end_comment
begin_comment
comment|// objects and related functionality. [OpenGL ES 2.0.24] section 4.4.3 page 108.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/RenderTarget.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|member|mCurrentSerial
name|unsigned
name|int
name|RenderbufferStorage
operator|::
name|mCurrentSerial
init|=
literal|1
decl_stmt|;
DECL|function|Renderbuffer
name|Renderbuffer
operator|::
name|Renderbuffer
parameter_list|(
name|GLuint
name|id
parameter_list|,
name|RenderbufferStorage
modifier|*
name|newStorage
parameter_list|)
member_init_list|:
name|RefCountObject
argument_list|(
name|id
argument_list|)
member_init_list|,
name|mStorage
argument_list|(
name|newStorage
argument_list|)
block|{
name|ASSERT
argument_list|(
name|mStorage
argument_list|)
expr_stmt|;
block|}
DECL|function|~Renderbuffer
name|Renderbuffer
operator|::
name|~
name|Renderbuffer
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mStorage
argument_list|)
expr_stmt|;
block|}
DECL|function|setStorage
name|void
name|Renderbuffer
operator|::
name|setStorage
parameter_list|(
name|RenderbufferStorage
modifier|*
name|newStorage
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|newStorage
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mStorage
argument_list|)
expr_stmt|;
name|mStorage
operator|=
name|newStorage
expr_stmt|;
block|}
DECL|function|getStorage
name|RenderbufferStorage
modifier|*
name|Renderbuffer
operator|::
name|getStorage
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|mStorage
argument_list|)
expr_stmt|;
return|return
name|mStorage
return|;
block|}
DECL|function|getWidth
name|GLsizei
name|Renderbuffer
operator|::
name|getWidth
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|mStorage
argument_list|)
expr_stmt|;
return|return
name|mStorage
operator|->
name|getWidth
argument_list|()
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|Renderbuffer
operator|::
name|getHeight
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|mStorage
argument_list|)
expr_stmt|;
return|return
name|mStorage
operator|->
name|getHeight
argument_list|()
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|Renderbuffer
operator|::
name|getInternalFormat
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|mStorage
argument_list|)
expr_stmt|;
return|return
name|mStorage
operator|->
name|getInternalFormat
argument_list|()
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|Renderbuffer
operator|::
name|getActualFormat
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|mStorage
argument_list|)
expr_stmt|;
return|return
name|mStorage
operator|->
name|getActualFormat
argument_list|()
return|;
block|}
DECL|function|getSamples
name|GLsizei
name|Renderbuffer
operator|::
name|getSamples
parameter_list|()
specifier|const
block|{
name|ASSERT
argument_list|(
name|mStorage
argument_list|)
expr_stmt|;
return|return
name|mStorage
operator|->
name|getSamples
argument_list|()
return|;
block|}
DECL|function|getRedSize
name|GLuint
name|Renderbuffer
operator|::
name|getRedSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
operator|.
name|redBits
return|;
block|}
DECL|function|getGreenSize
name|GLuint
name|Renderbuffer
operator|::
name|getGreenSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
operator|.
name|greenBits
return|;
block|}
DECL|function|getBlueSize
name|GLuint
name|Renderbuffer
operator|::
name|getBlueSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
operator|.
name|blueBits
return|;
block|}
DECL|function|getAlphaSize
name|GLuint
name|Renderbuffer
operator|::
name|getAlphaSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
operator|.
name|alphaBits
return|;
block|}
DECL|function|getDepthSize
name|GLuint
name|Renderbuffer
operator|::
name|getDepthSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
operator|.
name|depthBits
return|;
block|}
DECL|function|getStencilSize
name|GLuint
name|Renderbuffer
operator|::
name|getStencilSize
parameter_list|()
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getActualFormat
argument_list|()
argument_list|)
operator|.
name|stencilBits
return|;
block|}
DECL|function|RenderbufferStorage
name|RenderbufferStorage
operator|::
name|RenderbufferStorage
parameter_list|()
member_init_list|:
name|mSerial
argument_list|(
name|issueSerials
argument_list|(
literal|1
argument_list|)
argument_list|)
block|{
name|mWidth
operator|=
literal|0
expr_stmt|;
name|mHeight
operator|=
literal|0
expr_stmt|;
name|mInternalFormat
operator|=
name|GL_RGBA4
expr_stmt|;
name|mActualFormat
operator|=
name|GL_RGBA8_OES
expr_stmt|;
name|mSamples
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|~RenderbufferStorage
name|RenderbufferStorage
operator|::
name|~
name|RenderbufferStorage
parameter_list|()
block|{ }
DECL|function|getRenderTarget
name|rx
operator|::
name|RenderTarget
modifier|*
name|RenderbufferStorage
operator|::
name|getRenderTarget
parameter_list|()
block|{
return|return
name|NULL
return|;
block|}
DECL|function|getWidth
name|GLsizei
name|RenderbufferStorage
operator|::
name|getWidth
parameter_list|()
specifier|const
block|{
return|return
name|mWidth
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|RenderbufferStorage
operator|::
name|getHeight
parameter_list|()
specifier|const
block|{
return|return
name|mHeight
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|RenderbufferStorage
operator|::
name|getInternalFormat
parameter_list|()
specifier|const
block|{
return|return
name|mInternalFormat
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|RenderbufferStorage
operator|::
name|getActualFormat
parameter_list|()
specifier|const
block|{
return|return
name|mActualFormat
return|;
block|}
DECL|function|getSamples
name|GLsizei
name|RenderbufferStorage
operator|::
name|getSamples
parameter_list|()
specifier|const
block|{
return|return
name|mSamples
return|;
block|}
DECL|function|getSerial
name|unsigned
name|int
name|RenderbufferStorage
operator|::
name|getSerial
parameter_list|()
specifier|const
block|{
return|return
name|mSerial
return|;
block|}
DECL|function|issueSerials
name|unsigned
name|int
name|RenderbufferStorage
operator|::
name|issueSerials
parameter_list|(
name|unsigned
name|int
name|count
parameter_list|)
block|{
name|unsigned
name|int
name|firstSerial
init|=
name|mCurrentSerial
decl_stmt|;
name|mCurrentSerial
operator|+=
name|count
expr_stmt|;
return|return
name|firstSerial
return|;
block|}
DECL|function|isTexture
name|bool
name|RenderbufferStorage
operator|::
name|isTexture
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|getTextureSerial
name|unsigned
name|int
name|RenderbufferStorage
operator|::
name|getTextureSerial
parameter_list|()
specifier|const
block|{
return|return
operator|-
literal|1
return|;
block|}
DECL|function|Colorbuffer
name|Colorbuffer
operator|::
name|Colorbuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|rx
operator|::
name|SwapChain
modifier|*
name|swapChain
parameter_list|)
block|{
name|mRenderTarget
operator|=
name|renderer
operator|->
name|createRenderTarget
argument_list|(
name|swapChain
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|mRenderTarget
condition|)
block|{
name|mWidth
operator|=
name|mRenderTarget
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|mHeight
operator|=
name|mRenderTarget
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|mInternalFormat
operator|=
name|mRenderTarget
operator|->
name|getInternalFormat
argument_list|()
expr_stmt|;
name|mActualFormat
operator|=
name|mRenderTarget
operator|->
name|getActualFormat
argument_list|()
expr_stmt|;
name|mSamples
operator|=
name|mRenderTarget
operator|->
name|getSamples
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|Colorbuffer
name|Colorbuffer
operator|::
name|Colorbuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
member_init_list|:
name|mRenderTarget
argument_list|(
name|NULL
argument_list|)
block|{
name|mRenderTarget
operator|=
name|renderer
operator|->
name|createRenderTarget
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|samples
argument_list|)
expr_stmt|;
if|if
condition|(
name|mRenderTarget
condition|)
block|{
name|mWidth
operator|=
name|width
expr_stmt|;
name|mHeight
operator|=
name|height
expr_stmt|;
name|mInternalFormat
operator|=
name|format
expr_stmt|;
name|mActualFormat
operator|=
name|mRenderTarget
operator|->
name|getActualFormat
argument_list|()
expr_stmt|;
name|mSamples
operator|=
name|mRenderTarget
operator|->
name|getSamples
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|~Colorbuffer
name|Colorbuffer
operator|::
name|~
name|Colorbuffer
parameter_list|()
block|{
if|if
condition|(
name|mRenderTarget
condition|)
block|{
operator|delete
name|mRenderTarget
expr_stmt|;
block|}
block|}
DECL|function|getRenderTarget
name|rx
operator|::
name|RenderTarget
modifier|*
name|Colorbuffer
operator|::
name|getRenderTarget
parameter_list|()
block|{
return|return
name|mRenderTarget
return|;
block|}
DECL|function|DepthStencilbuffer
name|DepthStencilbuffer
operator|::
name|DepthStencilbuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|rx
operator|::
name|SwapChain
modifier|*
name|swapChain
parameter_list|)
block|{
name|mDepthStencil
operator|=
name|renderer
operator|->
name|createRenderTarget
argument_list|(
name|swapChain
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|mDepthStencil
condition|)
block|{
name|mWidth
operator|=
name|mDepthStencil
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|mHeight
operator|=
name|mDepthStencil
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|mInternalFormat
operator|=
name|mDepthStencil
operator|->
name|getInternalFormat
argument_list|()
expr_stmt|;
name|mSamples
operator|=
name|mDepthStencil
operator|->
name|getSamples
argument_list|()
expr_stmt|;
name|mActualFormat
operator|=
name|mDepthStencil
operator|->
name|getActualFormat
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|DepthStencilbuffer
name|DepthStencilbuffer
operator|::
name|DepthStencilbuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
block|{
name|mDepthStencil
operator|=
name|renderer
operator|->
name|createRenderTarget
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|GL_DEPTH24_STENCIL8_OES
argument_list|,
name|samples
argument_list|)
expr_stmt|;
name|mWidth
operator|=
name|mDepthStencil
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|mHeight
operator|=
name|mDepthStencil
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|mInternalFormat
operator|=
name|GL_DEPTH24_STENCIL8_OES
expr_stmt|;
name|mActualFormat
operator|=
name|mDepthStencil
operator|->
name|getActualFormat
argument_list|()
expr_stmt|;
name|mSamples
operator|=
name|mDepthStencil
operator|->
name|getSamples
argument_list|()
expr_stmt|;
block|}
DECL|function|~DepthStencilbuffer
name|DepthStencilbuffer
operator|::
name|~
name|DepthStencilbuffer
parameter_list|()
block|{
if|if
condition|(
name|mDepthStencil
condition|)
block|{
operator|delete
name|mDepthStencil
expr_stmt|;
block|}
block|}
DECL|function|getRenderTarget
name|rx
operator|::
name|RenderTarget
modifier|*
name|DepthStencilbuffer
operator|::
name|getRenderTarget
parameter_list|()
block|{
return|return
name|mDepthStencil
return|;
block|}
DECL|function|Depthbuffer
name|Depthbuffer
operator|::
name|Depthbuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
member_init_list|:
name|DepthStencilbuffer
argument_list|(
name|renderer
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|samples
argument_list|)
block|{
if|if
condition|(
name|mDepthStencil
condition|)
block|{
name|mInternalFormat
operator|=
name|GL_DEPTH_COMPONENT16
expr_stmt|;
comment|// If the renderbuffer parameters are queried, the calling function
comment|// will expect one of the valid renderbuffer formats for use in
comment|// glRenderbufferStorage
block|}
block|}
DECL|function|~Depthbuffer
name|Depthbuffer
operator|::
name|~
name|Depthbuffer
parameter_list|()
block|{ }
DECL|function|Stencilbuffer
name|Stencilbuffer
operator|::
name|Stencilbuffer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
member_init_list|:
name|DepthStencilbuffer
argument_list|(
name|renderer
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|samples
argument_list|)
block|{
if|if
condition|(
name|mDepthStencil
condition|)
block|{
name|mInternalFormat
operator|=
name|GL_STENCIL_INDEX8
expr_stmt|;
comment|// If the renderbuffer parameters are queried, the calling function
comment|// will expect one of the valid renderbuffer formats for use in
comment|// glRenderbufferStorage
block|}
block|}
DECL|function|~Stencilbuffer
name|Stencilbuffer
operator|::
name|~
name|Stencilbuffer
parameter_list|()
block|{ }
block|}
end_namespace
end_unit
