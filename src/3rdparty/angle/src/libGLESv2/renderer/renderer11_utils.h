begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// renderer11_utils.h: Conversion functions and other utility routines
end_comment
begin_comment
comment|// specific to the D3D11 renderer.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RENDERER_RENDERER11_UTILS_H
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RENDERER_RENDERER11_UTILS_H
define|#
directive|define
name|LIBGLESV2_RENDERER_RENDERER11_UTILS_H
end_define
begin_include
include|#
directive|include
file|"libGLESv2/angletypes.h"
end_include
begin_decl_stmt
name|namespace
name|gl_d3d11
block|{
name|D3D11_BLEND
name|ConvertBlendFunc
parameter_list|(
name|GLenum
name|glBlend
parameter_list|,
name|bool
name|isAlpha
parameter_list|)
function_decl|;
name|D3D11_BLEND_OP
name|ConvertBlendOp
parameter_list|(
name|GLenum
name|glBlendOp
parameter_list|)
function_decl|;
name|UINT8
name|ConvertColorMask
parameter_list|(
name|bool
name|maskRed
parameter_list|,
name|bool
name|maskGreen
parameter_list|,
name|bool
name|maskBlue
parameter_list|,
name|bool
name|maskAlpha
parameter_list|)
function_decl|;
name|D3D11_CULL_MODE
name|ConvertCullMode
parameter_list|(
name|bool
name|cullEnabled
parameter_list|,
name|GLenum
name|cullMode
parameter_list|)
function_decl|;
name|D3D11_COMPARISON_FUNC
name|ConvertComparison
parameter_list|(
name|GLenum
name|comparison
parameter_list|)
function_decl|;
name|D3D11_DEPTH_WRITE_MASK
name|ConvertDepthMask
parameter_list|(
name|bool
name|depthWriteEnabled
parameter_list|)
function_decl|;
name|UINT8
name|ConvertStencilMask
parameter_list|(
name|GLuint
name|stencilmask
parameter_list|)
function_decl|;
name|D3D11_STENCIL_OP
name|ConvertStencilOp
parameter_list|(
name|GLenum
name|stencilOp
parameter_list|)
function_decl|;
name|D3D11_FILTER
name|ConvertFilter
parameter_list|(
name|GLenum
name|minFilter
parameter_list|,
name|GLenum
name|magFilter
parameter_list|,
name|float
name|maxAnisotropy
parameter_list|)
function_decl|;
name|D3D11_TEXTURE_ADDRESS_MODE
name|ConvertTextureWrap
parameter_list|(
name|GLenum
name|wrap
parameter_list|)
function_decl|;
name|FLOAT
name|ConvertMinLOD
parameter_list|(
name|GLenum
name|minFilter
parameter_list|,
name|unsigned
name|int
name|lodOffset
parameter_list|)
function_decl|;
name|FLOAT
name|ConvertMaxLOD
parameter_list|(
name|GLenum
name|minFilter
parameter_list|,
name|unsigned
name|int
name|lodOffset
parameter_list|)
function_decl|;
name|DXGI_FORMAT
name|ConvertRenderbufferFormat
parameter_list|(
name|GLenum
name|format
parameter_list|)
function_decl|;
name|DXGI_FORMAT
name|ConvertTextureFormat
parameter_list|(
name|GLenum
name|format
parameter_list|,
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|d3d11_gl
block|{
name|GLenum
name|ConvertBackBufferFormat
parameter_list|(
name|DXGI_FORMAT
name|format
parameter_list|)
function_decl|;
name|GLenum
name|ConvertDepthStencilFormat
parameter_list|(
name|DXGI_FORMAT
name|format
parameter_list|)
function_decl|;
name|GLenum
name|ConvertRenderbufferFormat
parameter_list|(
name|DXGI_FORMAT
name|format
parameter_list|)
function_decl|;
name|GLenum
name|ConvertTextureInternalFormat
parameter_list|(
name|DXGI_FORMAT
name|format
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|d3d11
block|{
struct|struct
name|PositionTexCoordVertex
block|{
name|float
name|x
decl_stmt|,
name|y
decl_stmt|;
name|float
name|u
decl_stmt|,
name|v
decl_stmt|;
block|}
struct|;
name|void
name|SetPositionTexCoordVertex
parameter_list|(
name|PositionTexCoordVertex
modifier|*
name|vertex
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|u
parameter_list|,
name|float
name|v
parameter_list|)
function_decl|;
struct|struct
name|PositionDepthColorVertex
block|{
name|float
name|x
decl_stmt|,
name|y
decl_stmt|,
name|z
decl_stmt|;
name|float
name|r
decl_stmt|,
name|g
decl_stmt|,
name|b
decl_stmt|,
name|a
decl_stmt|;
block|}
struct|;
name|void
name|SetPositionDepthColorVertex
argument_list|(
name|PositionDepthColorVertex
operator|*
name|vertex
argument_list|,
name|float
name|x
argument_list|,
name|float
name|y
argument_list|,
name|float
name|z
argument_list|,
specifier|const
name|gl
operator|::
name|Color
operator|&
name|color
argument_list|)
decl_stmt|;
name|size_t
name|ComputePixelSizeBits
parameter_list|(
name|DXGI_FORMAT
name|format
parameter_list|)
function_decl|;
name|size_t
name|ComputeBlockSizeBits
parameter_list|(
name|DXGI_FORMAT
name|format
parameter_list|)
function_decl|;
name|bool
name|IsCompressed
parameter_list|(
name|DXGI_FORMAT
name|format
parameter_list|)
function_decl|;
name|unsigned
name|int
name|GetTextureFormatDimensionAlignment
parameter_list|(
name|DXGI_FORMAT
name|format
parameter_list|)
function_decl|;
name|bool
name|IsDepthStencilFormat
parameter_list|(
name|DXGI_FORMAT
name|format
parameter_list|)
function_decl|;
name|DXGI_FORMAT
name|GetDepthTextureFormat
parameter_list|(
name|DXGI_FORMAT
name|format
parameter_list|)
function_decl|;
name|DXGI_FORMAT
name|GetDepthShaderResourceFormat
parameter_list|(
name|DXGI_FORMAT
name|format
parameter_list|)
function_decl|;
name|HRESULT
name|SetDebugName
parameter_list|(
name|ID3D11DeviceChild
modifier|*
name|resource
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
specifier|inline
name|bool
name|isDeviceLostError
parameter_list|(
name|HRESULT
name|errorCode
parameter_list|)
block|{
switch|switch
condition|(
name|errorCode
condition|)
block|{
case|case
name|DXGI_ERROR_DEVICE_HUNG
case|:
case|case
name|DXGI_ERROR_DEVICE_REMOVED
case|:
case|case
name|DXGI_ERROR_DEVICE_RESET
case|:
case|case
name|DXGI_ERROR_DRIVER_INTERNAL_ERROR
case|:
case|case
name|DXGI_ERROR_NOT_CURRENTLY_AVAILABLE
case|:
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
block|}
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RENDERER_RENDERER11_UTILS_H
end_comment
end_unit
