begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Renderer.cpp: Implements EGL dependencies for creating and destroying Renderer instances.
end_comment
begin_include
include|#
directive|include
file|<EGL/eglext.h>
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Program.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"third_party/trace_event/trace_event.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Shader.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
end_if
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/Renderer9.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ANGLE_ENABLE_D3D9
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
end_if
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// ANGLE_ENABLE_D3D11
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_DEFAULT_D3D11
argument_list|)
end_if
begin_comment
comment|// Enables use of the Direct3D 11 API for a default display, when available
end_comment
begin_define
DECL|macro|ANGLE_DEFAULT_D3D11
define|#
directive|define
name|ANGLE_DEFAULT_D3D11
value|0
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|Renderer
name|Renderer
operator|::
name|Renderer
parameter_list|(
name|egl
operator|::
name|Display
modifier|*
name|display
parameter_list|)
member_init_list|:
name|mDisplay
argument_list|(
name|display
argument_list|)
member_init_list|,
name|mCapsInitialized
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mCurrentClientVersion
argument_list|(
literal|2
argument_list|)
block|{ }
DECL|function|~Renderer
name|Renderer
operator|::
name|~
name|Renderer
parameter_list|()
block|{
name|gl
operator|::
name|Shader
operator|::
name|releaseCompiler
argument_list|()
expr_stmt|;
block|}
DECL|function|getRendererCaps
specifier|const
name|gl
operator|::
name|Caps
modifier|&
name|Renderer
operator|::
name|getRendererCaps
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|mCapsInitialized
condition|)
block|{
name|generateCaps
argument_list|(
operator|&
name|mCaps
argument_list|,
operator|&
name|mTextureCaps
argument_list|,
operator|&
name|mExtensions
argument_list|)
expr_stmt|;
name|mCapsInitialized
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|mCaps
return|;
block|}
DECL|function|getRendererTextureCaps
specifier|const
name|gl
operator|::
name|TextureCapsMap
modifier|&
name|Renderer
operator|::
name|getRendererTextureCaps
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|mCapsInitialized
condition|)
block|{
name|generateCaps
argument_list|(
operator|&
name|mCaps
argument_list|,
operator|&
name|mTextureCaps
argument_list|,
operator|&
name|mExtensions
argument_list|)
expr_stmt|;
name|mCapsInitialized
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|mTextureCaps
return|;
block|}
DECL|function|getRendererExtensions
specifier|const
name|gl
operator|::
name|Extensions
modifier|&
name|Renderer
operator|::
name|getRendererExtensions
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|mCapsInitialized
condition|)
block|{
name|generateCaps
argument_list|(
operator|&
name|mCaps
argument_list|,
operator|&
name|mTextureCaps
argument_list|,
operator|&
name|mExtensions
argument_list|)
expr_stmt|;
name|mCapsInitialized
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|mExtensions
return|;
block|}
DECL|typedef|CreateRendererFunction
typedef|typedef
name|Renderer
modifier|*
function_decl|(
modifier|*
name|CreateRendererFunction
function_decl|)
parameter_list|(
name|egl
operator|::
name|Display
modifier|*
parameter_list|,
name|EGLNativeDisplayType
parameter_list|,
name|EGLint
parameter_list|)
function_decl|;
template|template
parameter_list|<
name|typename
name|RendererType
parameter_list|>
DECL|function|CreateRenderer
name|Renderer
modifier|*
name|CreateRenderer
parameter_list|(
name|egl
operator|::
name|Display
modifier|*
name|display
parameter_list|,
name|EGLNativeDisplayType
name|nativeDisplay
parameter_list|,
name|EGLint
name|requestedDisplayType
parameter_list|)
block|{
return|return
operator|new
name|RendererType
argument_list|(
name|display
argument_list|,
name|nativeDisplay
argument_list|,
name|requestedDisplayType
argument_list|)
return|;
block|}
block|}
end_namespace
begin_extern
extern|extern
literal|"C"
block|{
DECL|function|glCreateRenderer
name|rx
operator|::
name|Renderer
modifier|*
name|glCreateRenderer
parameter_list|(
name|egl
operator|::
name|Display
modifier|*
name|display
parameter_list|,
name|EGLNativeDisplayType
name|nativeDisplay
parameter_list|,
name|EGLint
name|requestedDisplayType
parameter_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|rx
operator|::
name|CreateRendererFunction
argument_list|>
name|rendererCreationFunctions
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
if|if
condition|(
name|nativeDisplay
operator|==
name|EGL_D3D11_ELSE_D3D9_DISPLAY_ANGLE
operator|||
name|nativeDisplay
operator|==
name|EGL_D3D11_ONLY_DISPLAY_ANGLE
operator|||
name|requestedDisplayType
operator|==
name|EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE
operator|||
name|requestedDisplayType
operator|==
name|EGL_PLATFORM_ANGLE_TYPE_D3D11_WARP_ANGLE
condition|)
block|{
name|rendererCreationFunctions
operator|.
name|push_back
argument_list|(
name|rx
operator|::
name|CreateRenderer
argument_list|<
name|rx
operator|::
name|Renderer11
argument_list|>
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
if|if
condition|(
name|nativeDisplay
operator|==
name|EGL_D3D11_ELSE_D3D9_DISPLAY_ANGLE
operator|||
name|requestedDisplayType
operator|==
name|EGL_PLATFORM_ANGLE_TYPE_D3D9_ANGLE
condition|)
block|{
name|rendererCreationFunctions
operator|.
name|push_back
argument_list|(
name|rx
operator|::
name|CreateRenderer
argument_list|<
name|rx
operator|::
name|Renderer9
argument_list|>
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|nativeDisplay
operator|!=
name|EGL_D3D11_ELSE_D3D9_DISPLAY_ANGLE
operator|&&
name|nativeDisplay
operator|!=
name|EGL_D3D11_ONLY_DISPLAY_ANGLE
operator|&&
name|requestedDisplayType
operator|==
name|EGL_PLATFORM_ANGLE_TYPE_DEFAULT_ANGLE
condition|)
block|{
comment|// The default display is requested, try the D3D9 and D3D11 renderers, order them using
comment|// the definition of ANGLE_DEFAULT_D3D11
if|#
directive|if
name|ANGLE_DEFAULT_D3D11
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
name|rendererCreationFunctions
operator|.
name|push_back
argument_list|(
name|rx
operator|::
name|CreateRenderer
argument_list|<
name|rx
operator|::
name|Renderer11
argument_list|>
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
name|rendererCreationFunctions
operator|.
name|push_back
argument_list|(
name|rx
operator|::
name|CreateRenderer
argument_list|<
name|rx
operator|::
name|Renderer9
argument_list|>
argument_list|)
expr_stmt|;
endif|#
directive|endif
else|#
directive|else
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D9
argument_list|)
name|rendererCreationFunctions
operator|.
name|push_back
argument_list|(
name|rx
operator|::
name|CreateRenderer
argument_list|<
name|rx
operator|::
name|Renderer9
argument_list|>
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_ENABLE_D3D11
argument_list|)
name|rendererCreationFunctions
operator|.
name|push_back
argument_list|(
name|rx
operator|::
name|CreateRenderer
argument_list|<
name|rx
operator|::
name|Renderer11
argument_list|>
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|}
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rendererCreationFunctions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
init|=
name|rendererCreationFunctions
index|[
name|i
index|]
operator|(
name|display
expr|,
name|nativeDisplay
expr|,
name|requestedDisplayType
operator|)
decl_stmt|;
if|if
condition|(
name|renderer
operator|->
name|initialize
argument_list|()
operator|==
name|EGL_SUCCESS
condition|)
block|{
return|return
name|renderer
return|;
block|}
else|else
block|{
comment|// Failed to create the renderer, try the next
name|SafeDelete
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|NULL
return|;
block|}
DECL|function|glDestroyRenderer
name|void
name|glDestroyRenderer
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|)
block|{
operator|delete
name|renderer
expr_stmt|;
block|}
block|}
end_extern
end_unit
