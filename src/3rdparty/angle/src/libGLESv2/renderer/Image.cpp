begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Image.h: Implements the rx::Image class, an abstract base class for the
end_comment
begin_comment
comment|// renderer-specific classes which will define the interface to the underlying
end_comment
begin_comment
comment|// surfaces or resources.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Image.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|Image
name|Image
operator|::
name|Image
parameter_list|()
block|{
name|mWidth
operator|=
literal|0
expr_stmt|;
name|mHeight
operator|=
literal|0
expr_stmt|;
name|mInternalFormat
operator|=
name|GL_NONE
expr_stmt|;
name|mActualFormat
operator|=
name|GL_NONE
expr_stmt|;
block|}
DECL|function|loadAlphaDataToBGRA
name|void
name|Image
operator|::
name|loadAlphaDataToBGRA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
expr_stmt|;
name|dest
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadAlphaDataToNative
name|void
name|Image
operator|::
name|loadAlphaDataToNative
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
expr_stmt|;
name|dest
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
expr_stmt|;
name|memcpy
argument_list|(
name|dest
argument_list|,
name|source
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|loadAlphaFloatDataToRGBA
name|void
name|Image
operator|::
name|loadAlphaFloatDataToRGBA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|float
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|float
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|float
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|reinterpret_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadAlphaHalfFloatDataToRGBA
name|void
name|Image
operator|::
name|loadAlphaHalfFloatDataToRGBA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|short
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|short
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadLuminanceDataToNativeOrBGRA
name|void
name|Image
operator|::
name|loadLuminanceDataToNativeOrBGRA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|,
name|bool
name|native
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
expr_stmt|;
name|dest
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
expr_stmt|;
if|if
condition|(
operator|!
name|native
condition|)
comment|// BGRA8 destination format
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|0xFF
expr_stmt|;
block|}
block|}
else|else
comment|// L8 destination format
block|{
name|memcpy
argument_list|(
name|dest
argument_list|,
name|source
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadLuminanceFloatDataToRGBA
name|void
name|Image
operator|::
name|loadLuminanceFloatDataToRGBA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|float
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|float
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|float
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|reinterpret_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|1.0f
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadLuminanceFloatDataToRGB
name|void
name|Image
operator|::
name|loadLuminanceFloatDataToRGB
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|float
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|float
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|float
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|reinterpret_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|3
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|3
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|3
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadLuminanceHalfFloatDataToRGBA
name|void
name|Image
operator|::
name|loadLuminanceHalfFloatDataToRGBA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|short
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|short
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
name|x
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|0x3C00
expr_stmt|;
comment|// SEEEEEMMMMMMMMMM, S = 0, E = 15, M = 0: 16bit flpt representation of 1
block|}
block|}
block|}
DECL|function|loadLuminanceAlphaDataToNativeOrBGRA
name|void
name|Image
operator|::
name|loadLuminanceAlphaDataToNativeOrBGRA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|,
name|bool
name|native
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
expr_stmt|;
name|dest
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
expr_stmt|;
if|if
condition|(
operator|!
name|native
condition|)
comment|// BGRA8 destination format
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|1
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|memcpy
argument_list|(
name|dest
argument_list|,
name|source
argument_list|,
name|width
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadLuminanceAlphaFloatDataToRGBA
name|void
name|Image
operator|::
name|loadLuminanceAlphaFloatDataToRGBA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|float
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|float
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|float
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|reinterpret_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadLuminanceAlphaHalfFloatDataToRGBA
name|void
name|Image
operator|::
name|loadLuminanceAlphaHalfFloatDataToRGBA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|short
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|short
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
name|source
index|[
literal|2
operator|*
name|x
operator|+
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadRGBUByteDataToBGRX
name|void
name|Image
operator|::
name|loadRGBUByteDataToBGRX
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
expr_stmt|;
name|dest
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|2
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|1
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|0xFF
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadRGBUByteDataToRGBA
name|void
name|Image
operator|::
name|loadRGBUByteDataToRGBA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
expr_stmt|;
name|dest
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|1
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|2
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|0xFF
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadRGB565DataToBGRA
name|void
name|Image
operator|::
name|loadRGB565DataToBGRA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|short
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|unsigned
name|short
name|rgba
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0x001F
operator|)
operator|<<
literal|3
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x001F
operator|)
operator|>>
literal|2
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0x07E0
operator|)
operator|>>
literal|3
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x07E0
operator|)
operator|>>
literal|9
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0xF800
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0xF800
operator|)
operator|>>
literal|13
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|0xFF
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadRGB565DataToRGBA
name|void
name|Image
operator|::
name|loadRGB565DataToRGBA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|short
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|unsigned
name|short
name|rgba
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0xF800
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0xF800
operator|)
operator|>>
literal|13
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0x07E0
operator|)
operator|>>
literal|3
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x07E0
operator|)
operator|>>
literal|9
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0x001F
operator|)
operator|<<
literal|3
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x001F
operator|)
operator|>>
literal|2
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|0xFF
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadRGBFloatDataToRGBA
name|void
name|Image
operator|::
name|loadRGBFloatDataToRGBA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|float
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|float
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|float
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|reinterpret_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|1
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|2
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|1.0f
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadRGBFloatDataToNative
name|void
name|Image
operator|::
name|loadRGBFloatDataToNative
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|float
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|float
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|float
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|reinterpret_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|dest
argument_list|,
name|source
argument_list|,
name|width
operator|*
literal|12
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|loadRGBHalfFloatDataToRGBA
name|void
name|Image
operator|::
name|loadRGBHalfFloatDataToRGBA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|short
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|short
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|0
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|1
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|3
operator|+
literal|2
index|]
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
literal|0x3C00
expr_stmt|;
comment|// SEEEEEMMMMMMMMMM, S = 0, E = 15, M = 0: 16bit flpt representation of 1
block|}
block|}
block|}
DECL|function|loadRGBAUByteDataToBGRA
name|void
name|Image
operator|::
name|loadRGBAUByteDataToBGRA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|int
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|int
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|int
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|unsigned
name|int
name|rgba
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
name|x
index|]
operator|=
operator|(
name|_rotl
argument_list|(
name|rgba
argument_list|,
literal|16
argument_list|)
operator|&
literal|0x00ff00ff
operator|)
operator||
operator|(
name|rgba
operator|&
literal|0xff00ff00
operator|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadRGBAUByteDataToNative
name|void
name|Image
operator|::
name|loadRGBAUByteDataToNative
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|int
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|int
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|int
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|dest
argument_list|,
name|source
argument_list|,
name|width
operator|*
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|loadRGBA4444DataToBGRA
name|void
name|Image
operator|::
name|loadRGBA4444DataToBGRA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|short
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|unsigned
name|short
name|rgba
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0x00F0
operator|)
operator|<<
literal|0
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x00F0
operator|)
operator|>>
literal|4
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0x0F00
operator|)
operator|>>
literal|4
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x0F00
operator|)
operator|>>
literal|8
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0xF000
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0xF000
operator|)
operator|>>
literal|12
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0x000F
operator|)
operator|<<
literal|4
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x000F
operator|)
operator|>>
literal|0
operator|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadRGBA4444DataToRGBA
name|void
name|Image
operator|::
name|loadRGBA4444DataToRGBA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|short
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|unsigned
name|short
name|rgba
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0xF000
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0xF000
operator|)
operator|>>
literal|12
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0x0F00
operator|)
operator|>>
literal|4
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x0F00
operator|)
operator|>>
literal|8
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0x00F0
operator|)
operator|<<
literal|0
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x00F0
operator|)
operator|>>
literal|4
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0x000F
operator|)
operator|<<
literal|4
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x000F
operator|)
operator|>>
literal|0
operator|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadRGBA5551DataToBGRA
name|void
name|Image
operator|::
name|loadRGBA5551DataToBGRA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|short
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|unsigned
name|short
name|rgba
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0x003E
operator|)
operator|<<
literal|2
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x003E
operator|)
operator|>>
literal|3
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0x07C0
operator|)
operator|>>
literal|3
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x07C0
operator|)
operator|>>
literal|8
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0xF800
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0xF800
operator|)
operator|>>
literal|13
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
operator|(
name|rgba
operator|&
literal|0x0001
operator|)
condition|?
literal|0xFF
else|:
literal|0
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadRGBA5551DataToRGBA
name|void
name|Image
operator|::
name|loadRGBA5551DataToRGBA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|short
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|unsigned
name|short
name|rgba
init|=
name|source
index|[
name|x
index|]
decl_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|0
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0xF800
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0xF800
operator|)
operator|>>
literal|13
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|1
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0x07C0
operator|)
operator|>>
literal|3
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x07C0
operator|)
operator|>>
literal|8
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|2
index|]
operator|=
operator|(
operator|(
name|rgba
operator|&
literal|0x003E
operator|)
operator|<<
literal|2
operator|)
operator||
operator|(
operator|(
name|rgba
operator|&
literal|0x003E
operator|)
operator|>>
literal|3
operator|)
expr_stmt|;
name|dest
index|[
literal|4
operator|*
name|x
operator|+
literal|3
index|]
operator|=
operator|(
name|rgba
operator|&
literal|0x0001
operator|)
condition|?
literal|0xFF
else|:
literal|0
expr_stmt|;
block|}
block|}
block|}
DECL|function|loadRGBAFloatDataToRGBA
name|void
name|Image
operator|::
name|loadRGBAFloatDataToRGBA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|float
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|float
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|float
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
argument_list|)
expr_stmt|;
name|dest
operator|=
cast|reinterpret_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|dest
argument_list|,
name|source
argument_list|,
name|width
operator|*
literal|16
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|loadRGBAHalfFloatDataToRGBA
name|void
name|Image
operator|::
name|loadRGBAHalfFloatDataToRGBA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
expr_stmt|;
name|dest
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
expr_stmt|;
name|memcpy
argument_list|(
name|dest
argument_list|,
name|source
argument_list|,
name|width
operator|*
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|loadBGRADataToBGRA
name|void
name|Image
operator|::
name|loadBGRADataToBGRA
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|inputPitch
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|size_t
name|outputPitch
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|source
operator|=
cast|static_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|y
operator|*
name|inputPitch
expr_stmt|;
name|dest
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|y
operator|*
name|outputPitch
expr_stmt|;
name|memcpy
argument_list|(
name|dest
argument_list|,
name|source
argument_list|,
name|width
operator|*
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_namespace
end_unit
