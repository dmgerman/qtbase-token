begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Renderer.h: Defines a back-end specific class that hides the details of the
end_comment
begin_comment
comment|// implementation-specific renderer.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RENDERER_RENDERER_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RENDERER_RENDERER_H_
define|#
directive|define
name|LIBGLESV2_RENDERER_RENDERER_H_
end_define
begin_include
include|#
directive|include
file|"libGLESv2/Caps.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Error.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Uniform.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Workarounds.h"
end_include
begin_include
include|#
directive|include
file|"common/NativeWindow.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|<cstdint>
end_include
begin_include
include|#
directive|include
file|<EGL/egl.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_COMPILE_OPTIMIZATION_LEVEL
argument_list|)
end_if
begin_comment
comment|// WARNING: D3DCOMPILE_OPTIMIZATION_LEVEL3 may lead to a DX9 shader compiler hang.
end_comment
begin_comment
comment|// It should only be used selectively to work around specific bugs.
end_comment
begin_define
DECL|macro|ANGLE_COMPILE_OPTIMIZATION_LEVEL
define|#
directive|define
name|ANGLE_COMPILE_OPTIMIZATION_LEVEL
value|D3DCOMPILE_OPTIMIZATION_LEVEL1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|namespace
name|egl
block|{
name|class
name|Display
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Buffer
decl_stmt|;
name|class
name|Framebuffer
decl_stmt|;
struct_decl|struct
name|Data
struct_decl|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|QueryImpl
decl_stmt|;
name|class
name|FenceNVImpl
decl_stmt|;
name|class
name|FenceSyncImpl
decl_stmt|;
name|class
name|BufferImpl
decl_stmt|;
name|class
name|VertexArrayImpl
decl_stmt|;
name|class
name|ShaderImpl
decl_stmt|;
name|class
name|ProgramImpl
decl_stmt|;
name|class
name|TextureImpl
decl_stmt|;
name|class
name|TransformFeedbackImpl
decl_stmt|;
name|class
name|RenderbufferImpl
decl_stmt|;
struct_decl|struct
name|TranslatedIndexData
struct_decl|;
struct_decl|struct
name|Workarounds
struct_decl|;
name|class
name|SwapChain
decl_stmt|;
struct|struct
name|ConfigDesc
block|{
name|GLenum
name|renderTargetFormat
decl_stmt|;
name|GLenum
name|depthStencilFormat
decl_stmt|;
name|GLint
name|multiSample
decl_stmt|;
name|bool
name|fastConfig
decl_stmt|;
name|bool
name|es3Capable
decl_stmt|;
block|}
struct|;
name|class
name|Renderer
block|{
name|public
label|:
name|Renderer
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|Renderer
argument_list|()
expr_stmt|;
name|virtual
name|EGLint
name|initialize
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|resetDevice
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|int
name|generateConfigs
parameter_list|(
name|ConfigDesc
modifier|*
modifier|*
name|configDescList
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|deleteConfigs
parameter_list|(
name|ConfigDesc
modifier|*
name|configDescList
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|gl
operator|::
name|Error
name|sync
argument_list|(
argument|bool block
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|drawArrays
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLenum mode
argument_list|,
argument|GLint first
argument_list|,
argument|GLsizei count
argument_list|,
argument|GLsizei instances
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|drawElements
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLenum mode
argument_list|,
argument|GLsizei count
argument_list|,
argument|GLenum type
argument_list|,
argument|const GLvoid *indices
argument_list|,
argument|GLsizei instances
argument_list|,
argument|const RangeUI&indexRange
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|clear
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLbitfield mask
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|clearBufferfv
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLenum buffer
argument_list|,
argument|GLint drawbuffer
argument_list|,
argument|const GLfloat *values
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|clearBufferuiv
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLenum buffer
argument_list|,
argument|GLint drawbuffer
argument_list|,
argument|const GLuint *values
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|clearBufferiv
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLenum buffer
argument_list|,
argument|GLint drawbuffer
argument_list|,
argument|const GLint *values
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|clearBufferfi
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLenum buffer
argument_list|,
argument|GLint drawbuffer
argument_list|,
argument|GLfloat depth
argument_list|,
argument|GLint stencil
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|readPixels
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLint x
argument_list|,
argument|GLint y
argument_list|,
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|,
argument|GLenum format
argument_list|,
argument|GLenum type
argument_list|,
argument|GLsizei *bufSize
argument_list|,
argument|void* pixels
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|blitFramebuffer
argument_list|(
argument|const gl::Data&data
argument_list|,
argument|GLint srcX0
argument_list|,
argument|GLint srcY0
argument_list|,
argument|GLint srcX1
argument_list|,
argument|GLint srcY1
argument_list|,
argument|GLint dstX0
argument_list|,
argument|GLint dstY0
argument_list|,
argument|GLint dstX1
argument_list|,
argument|GLint dstY1
argument_list|,
argument|GLbitfield mask
argument_list|,
argument|GLenum filter
argument_list|)
operator|=
literal|0
expr_stmt|;
comment|// TODO(jmadill): caps? and virtual for egl::Display
name|virtual
name|bool
name|getShareHandleSupport
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|getPostSubBufferSupport
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// Shader creation
name|virtual
name|ShaderImpl
modifier|*
name|createShader
argument_list|(
specifier|const
name|gl
operator|::
name|Data
operator|&
name|data
argument_list|,
name|GLenum
name|type
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|ProgramImpl
modifier|*
name|createProgram
parameter_list|()
init|=
literal|0
function_decl|;
comment|// Shader operations
name|virtual
name|void
name|releaseShaderCompiler
parameter_list|()
init|=
literal|0
function_decl|;
comment|// Texture creation
name|virtual
name|TextureImpl
modifier|*
name|createTexture
parameter_list|(
name|GLenum
name|target
parameter_list|)
init|=
literal|0
function_decl|;
comment|// Renderbuffer creation
name|virtual
name|RenderbufferImpl
modifier|*
name|createRenderbuffer
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|RenderbufferImpl
modifier|*
name|createRenderbuffer
parameter_list|(
name|SwapChain
modifier|*
name|swapChain
parameter_list|,
name|bool
name|depth
parameter_list|)
init|=
literal|0
function_decl|;
comment|// Buffer creation
name|virtual
name|BufferImpl
modifier|*
name|createBuffer
parameter_list|()
init|=
literal|0
function_decl|;
comment|// Vertex Array creation
name|virtual
name|VertexArrayImpl
modifier|*
name|createVertexArray
parameter_list|()
init|=
literal|0
function_decl|;
comment|// Query and Fence creation
name|virtual
name|QueryImpl
modifier|*
name|createQuery
parameter_list|(
name|GLenum
name|type
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|FenceNVImpl
modifier|*
name|createFenceNV
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|FenceSyncImpl
modifier|*
name|createFenceSync
parameter_list|()
init|=
literal|0
function_decl|;
comment|// Transform Feedback creation
name|virtual
name|TransformFeedbackImpl
modifier|*
name|createTransformFeedback
parameter_list|()
init|=
literal|0
function_decl|;
comment|// lost device
comment|//TODO(jmadill): investigate if this stuff is necessary in GL
name|virtual
name|void
name|notifyDeviceLost
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|isDeviceLost
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|testDeviceLost
parameter_list|(
name|bool
name|notify
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|testDeviceResettable
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|DWORD
name|getAdapterVendor
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|std
operator|::
name|string
name|getRendererDescription
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GUID
name|getAdapterIdentifier
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// Renderer capabilities (virtual because of egl::Display)
name|virtual
specifier|const
name|gl
operator|::
name|Caps
operator|&
name|getRendererCaps
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|gl
operator|::
name|TextureCapsMap
operator|&
name|getRendererTextureCaps
argument_list|()
specifier|const
expr_stmt|;
name|virtual
specifier|const
name|gl
operator|::
name|Extensions
operator|&
name|getRendererExtensions
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|Workarounds
operator|&
name|getWorkarounds
argument_list|()
specifier|const
expr_stmt|;
comment|// TODO(jmadill): needed by egl::Display, probably should be removed
name|virtual
name|int
name|getMajorShaderModel
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|int
name|getMinSwapInterval
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|int
name|getMaxSwapInterval
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|getLUID
argument_list|(
name|LUID
operator|*
name|adapterLuid
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Renderer
argument_list|)
expr_stmt|;
name|virtual
name|void
name|generateCaps
argument_list|(
name|gl
operator|::
name|Caps
operator|*
name|outCaps
argument_list|,
name|gl
operator|::
name|TextureCapsMap
operator|*
name|outTextureCaps
argument_list|,
name|gl
operator|::
name|Extensions
operator|*
name|outExtensions
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|Workarounds
name|generateWorkarounds
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|mutable
name|bool
name|mCapsInitialized
decl_stmt|;
name|mutable
name|gl
operator|::
name|Caps
name|mCaps
expr_stmt|;
name|mutable
name|gl
operator|::
name|TextureCapsMap
name|mTextureCaps
expr_stmt|;
name|mutable
name|gl
operator|::
name|Extensions
name|mExtensions
expr_stmt|;
name|mutable
name|bool
name|mWorkaroundsInitialized
decl_stmt|;
name|mutable
name|Workarounds
name|mWorkarounds
decl_stmt|;
block|}
empty_stmt|;
struct|struct
name|dx_VertexConstants
block|{
name|float
name|depthRange
index|[
literal|4
index|]
decl_stmt|;
name|float
name|viewAdjust
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|dx_PixelConstants
block|{
name|float
name|depthRange
index|[
literal|4
index|]
decl_stmt|;
name|float
name|viewCoords
index|[
literal|4
index|]
decl_stmt|;
name|float
name|depthFront
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
enum|enum
name|ShaderType
block|{
name|SHADER_VERTEX
block|,
name|SHADER_PIXEL
block|,
name|SHADER_GEOMETRY
block|}
enum|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RENDERER_RENDERER_H_
end_comment
end_unit
