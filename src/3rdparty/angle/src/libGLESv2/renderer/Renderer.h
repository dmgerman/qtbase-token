begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Renderer.h: Defines a back-end specific class that hides the details of the
end_comment
begin_comment
comment|// implementation-specific renderer.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RENDERER_RENDERER_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RENDERER_RENDERER_H_
define|#
directive|define
name|LIBGLESV2_RENDERER_RENDERER_H_
end_define
begin_include
include|#
directive|include
file|"libGLESv2/Uniform.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Caps.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Error.h"
end_include
begin_include
include|#
directive|include
file|<cstdint>
end_include
begin_include
include|#
directive|include
file|<EGL/egl.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_COMPILE_OPTIMIZATION_LEVEL
argument_list|)
end_if
begin_comment
comment|// WARNING: D3DCOMPILE_OPTIMIZATION_LEVEL3 may lead to a DX9 shader compiler hang.
end_comment
begin_comment
comment|// It should only be used selectively to work around specific bugs.
end_comment
begin_define
DECL|macro|ANGLE_COMPILE_OPTIMIZATION_LEVEL
define|#
directive|define
name|ANGLE_COMPILE_OPTIMIZATION_LEVEL
value|D3DCOMPILE_OPTIMIZATION_LEVEL1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|namespace
name|egl
block|{
name|class
name|Display
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|InfoLog
decl_stmt|;
name|class
name|ProgramBinary
decl_stmt|;
struct_decl|struct
name|LinkedVarying
struct_decl|;
struct_decl|struct
name|VertexAttribute
struct_decl|;
name|class
name|Buffer
decl_stmt|;
name|class
name|Texture
decl_stmt|;
name|class
name|Framebuffer
decl_stmt|;
struct_decl|struct
name|VertexAttribCurrentValueData
struct_decl|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|TextureStorage
decl_stmt|;
name|class
name|VertexBuffer
decl_stmt|;
name|class
name|IndexBuffer
decl_stmt|;
name|class
name|QueryImpl
decl_stmt|;
name|class
name|FenceImpl
decl_stmt|;
name|class
name|BufferImpl
decl_stmt|;
name|class
name|VertexArrayImpl
decl_stmt|;
name|class
name|BufferStorage
decl_stmt|;
struct_decl|struct
name|TranslatedIndexData
struct_decl|;
name|class
name|ShaderImpl
decl_stmt|;
name|class
name|ProgramImpl
decl_stmt|;
name|class
name|ShaderExecutable
decl_stmt|;
name|class
name|SwapChain
decl_stmt|;
name|class
name|RenderTarget
decl_stmt|;
name|class
name|Image
decl_stmt|;
name|class
name|TextureStorage
decl_stmt|;
name|class
name|UniformStorage
decl_stmt|;
name|class
name|TextureImpl
decl_stmt|;
name|class
name|TransformFeedbackImpl
decl_stmt|;
struct|struct
name|ConfigDesc
block|{
name|GLenum
name|renderTargetFormat
decl_stmt|;
name|GLenum
name|depthStencilFormat
decl_stmt|;
name|GLint
name|multiSample
decl_stmt|;
name|bool
name|fastConfig
decl_stmt|;
name|bool
name|es3Capable
decl_stmt|;
block|}
struct|;
struct|struct
name|dx_VertexConstants
block|{
name|float
name|depthRange
index|[
literal|4
index|]
decl_stmt|;
name|float
name|viewAdjust
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|dx_PixelConstants
block|{
name|float
name|depthRange
index|[
literal|4
index|]
decl_stmt|;
name|float
name|viewCoords
index|[
literal|4
index|]
decl_stmt|;
name|float
name|depthFront
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
enum|enum
name|ShaderType
block|{
name|SHADER_VERTEX
block|,
name|SHADER_PIXEL
block|,
name|SHADER_GEOMETRY
block|}
enum|;
name|class
name|Renderer
block|{
name|public
label|:
name|explicit
name|Renderer
argument_list|(
name|egl
operator|::
name|Display
operator|*
name|display
argument_list|)
decl_stmt|;
name|virtual
operator|~
name|Renderer
argument_list|()
expr_stmt|;
name|virtual
name|EGLint
name|initialize
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|resetDevice
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|int
name|generateConfigs
parameter_list|(
name|ConfigDesc
modifier|*
modifier|*
name|configDescList
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|deleteConfigs
parameter_list|(
name|ConfigDesc
modifier|*
name|configDescList
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|sync
parameter_list|(
name|bool
name|block
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|SwapChain
modifier|*
name|createSwapChain
parameter_list|(
name|EGLNativeWindowType
name|window
parameter_list|,
name|HANDLE
name|shareHandle
parameter_list|,
name|GLenum
name|backBufferFormat
parameter_list|,
name|GLenum
name|depthBufferFormat
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|gl
operator|::
name|Error
name|generateSwizzle
argument_list|(
name|gl
operator|::
name|Texture
operator|*
name|texture
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|setSamplerState
argument_list|(
argument|gl::SamplerType type
argument_list|,
argument|int index
argument_list|,
argument|const gl::SamplerState&sampler
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|setTexture
argument_list|(
argument|gl::SamplerType type
argument_list|,
argument|int index
argument_list|,
argument|gl::Texture *texture
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|setUniformBuffers
argument_list|(
specifier|const
name|gl
operator|::
name|Buffer
operator|*
name|vertexUniformBuffers
index|[]
argument_list|,
specifier|const
name|gl
operator|::
name|Buffer
operator|*
name|fragmentUniformBuffers
index|[]
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|setRasterizerState
argument_list|(
specifier|const
name|gl
operator|::
name|RasterizerState
operator|&
name|rasterState
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|setBlendState
argument_list|(
argument|gl::Framebuffer *framebuffer
argument_list|,
argument|const gl::BlendState&blendState
argument_list|,
argument|const gl::ColorF&blendColor
argument_list|,
argument|unsigned int sampleMask
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|setDepthStencilState
argument_list|(
argument|const gl::DepthStencilState&depthStencilState
argument_list|,
argument|int stencilRef
argument_list|,
argument|int stencilBackRef
argument_list|,
argument|bool frontFaceCCW
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|setScissorRectangle
argument_list|(
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
name|scissor
argument_list|,
name|bool
name|enabled
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|setViewport
argument_list|(
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
name|viewport
argument_list|,
name|float
name|zNear
argument_list|,
name|float
name|zFar
argument_list|,
name|GLenum
name|drawMode
argument_list|,
name|GLenum
name|frontFace
argument_list|,
name|bool
name|ignoreViewport
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|applyRenderTarget
argument_list|(
name|gl
operator|::
name|Framebuffer
operator|*
name|frameBuffer
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|applyShaders
argument_list|(
argument|gl::ProgramBinary *programBinary
argument_list|,
argument|const gl::VertexFormat inputLayout[]
argument_list|,
argument|const gl::Framebuffer *framebuffer
argument_list|,
argument|bool rasterizerDiscard
argument_list|,
argument|bool transformFeedbackActive
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|applyUniforms
argument_list|(
specifier|const
name|gl
operator|::
name|ProgramBinary
operator|&
name|programBinary
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|applyPrimitiveType
parameter_list|(
name|GLenum
name|primitiveType
parameter_list|,
name|GLsizei
name|elementCount
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|gl
operator|::
name|Error
name|applyVertexBuffer
argument_list|(
argument|gl::ProgramBinary *programBinary
argument_list|,
argument|const gl::VertexAttribute vertexAttributes[]
argument_list|,
argument|const gl::VertexAttribCurrentValueData currentValues[]
argument_list|,
argument|GLint first
argument_list|,
argument|GLsizei count
argument_list|,
argument|GLsizei instances
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|applyIndexBuffer
argument_list|(
argument|const GLvoid *indices
argument_list|,
argument|gl::Buffer *elementArrayBuffer
argument_list|,
argument|GLsizei count
argument_list|,
argument|GLenum mode
argument_list|,
argument|GLenum type
argument_list|,
argument|TranslatedIndexData *indexInfo
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|applyTransformFeedbackBuffers
argument_list|(
name|gl
operator|::
name|Buffer
operator|*
name|transformFeedbackBuffers
index|[]
argument_list|,
name|GLintptr
name|offsets
index|[]
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|drawArrays
argument_list|(
argument|GLenum mode
argument_list|,
argument|GLsizei count
argument_list|,
argument|GLsizei instances
argument_list|,
argument|bool transformFeedbackActive
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|drawElements
argument_list|(
argument|GLenum mode
argument_list|,
argument|GLsizei count
argument_list|,
argument|GLenum type
argument_list|,
argument|const GLvoid *indices
argument_list|,
argument|gl::Buffer *elementArrayBuffer
argument_list|,
argument|const TranslatedIndexData&indexInfo
argument_list|,
argument|GLsizei instances
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|clear
argument_list|(
specifier|const
name|gl
operator|::
name|ClearParameters
operator|&
name|clearParams
argument_list|,
name|gl
operator|::
name|Framebuffer
operator|*
name|frameBuffer
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|markAllStateDirty
parameter_list|()
init|=
literal|0
function_decl|;
comment|// lost device
name|virtual
name|void
name|notifyDeviceLost
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|isDeviceLost
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|testDeviceLost
parameter_list|(
name|bool
name|notify
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|testDeviceResettable
parameter_list|()
init|=
literal|0
function_decl|;
comment|// Renderer capabilities (virtual because it is used by egl::Display, do not override)
name|virtual
specifier|const
name|gl
operator|::
name|Caps
operator|&
name|getRendererCaps
argument_list|()
specifier|const
expr_stmt|;
name|virtual
specifier|const
name|gl
operator|::
name|TextureCapsMap
operator|&
name|getRendererTextureCaps
argument_list|()
specifier|const
expr_stmt|;
name|virtual
specifier|const
name|gl
operator|::
name|Extensions
operator|&
name|getRendererExtensions
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|DWORD
name|getAdapterVendor
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|std
operator|::
name|string
name|getRendererDescription
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GUID
name|getAdapterIdentifier
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|unsigned
name|int
name|getReservedVertexUniformVectors
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|unsigned
name|int
name|getReservedFragmentUniformVectors
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|unsigned
name|int
name|getReservedVertexUniformBuffers
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|unsigned
name|int
name|getReservedFragmentUniformBuffers
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|getShareHandleSupport
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|getPostSubBufferSupport
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|int
name|getMajorShaderModel
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|int
name|getMinSwapInterval
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|int
name|getMaxSwapInterval
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// Pixel operations
name|virtual
name|bool
name|copyToRenderTarget2D
parameter_list|(
name|TextureStorage
modifier|*
name|dest
parameter_list|,
name|TextureStorage
modifier|*
name|source
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|copyToRenderTargetCube
parameter_list|(
name|TextureStorage
modifier|*
name|dest
parameter_list|,
name|TextureStorage
modifier|*
name|source
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|copyToRenderTarget3D
parameter_list|(
name|TextureStorage
modifier|*
name|dest
parameter_list|,
name|TextureStorage
modifier|*
name|source
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|copyToRenderTarget2DArray
parameter_list|(
name|TextureStorage
modifier|*
name|dest
parameter_list|,
name|TextureStorage
modifier|*
name|source
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|copyImage2D
argument_list|(
name|gl
operator|::
name|Framebuffer
operator|*
name|framebuffer
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
name|sourceRect
argument_list|,
name|GLenum
name|destFormat
argument_list|,
name|GLint
name|xoffset
argument_list|,
name|GLint
name|yoffset
argument_list|,
name|TextureStorage
operator|*
name|storage
argument_list|,
name|GLint
name|level
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|copyImageCube
argument_list|(
name|gl
operator|::
name|Framebuffer
operator|*
name|framebuffer
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
name|sourceRect
argument_list|,
name|GLenum
name|destFormat
argument_list|,
name|GLint
name|xoffset
argument_list|,
name|GLint
name|yoffset
argument_list|,
name|TextureStorage
operator|*
name|storage
argument_list|,
name|GLenum
name|target
argument_list|,
name|GLint
name|level
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|copyImage3D
argument_list|(
name|gl
operator|::
name|Framebuffer
operator|*
name|framebuffer
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
name|sourceRect
argument_list|,
name|GLenum
name|destFormat
argument_list|,
name|GLint
name|xoffset
argument_list|,
name|GLint
name|yoffset
argument_list|,
name|GLint
name|zOffset
argument_list|,
name|TextureStorage
operator|*
name|storage
argument_list|,
name|GLint
name|level
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|copyImage2DArray
argument_list|(
name|gl
operator|::
name|Framebuffer
operator|*
name|framebuffer
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
name|sourceRect
argument_list|,
name|GLenum
name|destFormat
argument_list|,
name|GLint
name|xoffset
argument_list|,
name|GLint
name|yoffset
argument_list|,
name|GLint
name|zOffset
argument_list|,
name|TextureStorage
operator|*
name|storage
argument_list|,
name|GLint
name|level
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|blitRect
argument_list|(
name|gl
operator|::
name|Framebuffer
operator|*
name|readTarget
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
name|readRect
argument_list|,
name|gl
operator|::
name|Framebuffer
operator|*
name|drawTarget
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|&
name|drawRect
argument_list|,
specifier|const
name|gl
operator|::
name|Rectangle
operator|*
name|scissor
argument_list|,
name|bool
name|blitRenderTarget
argument_list|,
name|bool
name|blitDepth
argument_list|,
name|bool
name|blitStencil
argument_list|,
name|GLenum
name|filter
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|readPixels
argument_list|(
argument|gl::Framebuffer *framebuffer
argument_list|,
argument|GLint x
argument_list|,
argument|GLint y
argument_list|,
argument|GLsizei width
argument_list|,
argument|GLsizei height
argument_list|,
argument|GLenum format
argument_list|,
argument|GLenum type
argument_list|,
argument|GLuint outputPitch
argument_list|,
argument|const gl::PixelPackState&pack
argument_list|,
argument|uint8_t *pixels
argument_list|)
operator|=
literal|0
expr_stmt|;
comment|// RenderTarget creation
name|virtual
name|RenderTarget
modifier|*
name|createRenderTarget
parameter_list|(
name|SwapChain
modifier|*
name|swapChain
parameter_list|,
name|bool
name|depth
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|RenderTarget
modifier|*
name|createRenderTarget
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
init|=
literal|0
function_decl|;
comment|// Shader creation
name|virtual
name|ShaderImpl
modifier|*
name|createShader
parameter_list|(
name|GLenum
name|type
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|ProgramImpl
modifier|*
name|createProgram
parameter_list|()
init|=
literal|0
function_decl|;
comment|// Shader operations
name|virtual
name|void
name|releaseShaderCompiler
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|ShaderExecutable
modifier|*
name|loadExecutable
argument_list|(
specifier|const
name|void
operator|*
name|function
argument_list|,
name|size_t
name|length
argument_list|,
name|rx
operator|::
name|ShaderType
name|type
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|gl
operator|::
name|LinkedVarying
operator|>
operator|&
name|transformFeedbackVaryings
argument_list|,
name|bool
name|separatedOutputBuffers
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|ShaderExecutable
modifier|*
name|compileToExecutable
argument_list|(
name|gl
operator|::
name|InfoLog
operator|&
name|infoLog
argument_list|,
specifier|const
name|char
operator|*
name|shaderHLSL
argument_list|,
name|rx
operator|::
name|ShaderType
name|type
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|gl
operator|::
name|LinkedVarying
operator|>
operator|&
name|transformFeedbackVaryings
argument_list|,
name|bool
name|separatedOutputBuffers
argument_list|,
name|D3DWorkaroundType
name|workaround
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|UniformStorage
modifier|*
name|createUniformStorage
parameter_list|(
name|size_t
name|storageSize
parameter_list|)
init|=
literal|0
function_decl|;
comment|// Image operations
name|virtual
name|Image
modifier|*
name|createImage
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|generateMipmap
parameter_list|(
name|Image
modifier|*
name|dest
parameter_list|,
name|Image
modifier|*
name|source
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|TextureStorage
modifier|*
name|createTextureStorage2D
parameter_list|(
name|SwapChain
modifier|*
name|swapChain
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|TextureStorage
modifier|*
name|createTextureStorage2D
parameter_list|(
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|renderTarget
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|int
name|levels
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|TextureStorage
modifier|*
name|createTextureStorageCube
parameter_list|(
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|renderTarget
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|levels
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|TextureStorage
modifier|*
name|createTextureStorage3D
parameter_list|(
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|renderTarget
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|int
name|levels
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|TextureStorage
modifier|*
name|createTextureStorage2DArray
parameter_list|(
name|GLenum
name|internalformat
parameter_list|,
name|bool
name|renderTarget
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|int
name|levels
parameter_list|)
init|=
literal|0
function_decl|;
comment|// Texture creation
name|virtual
name|TextureImpl
modifier|*
name|createTexture
parameter_list|(
name|GLenum
name|target
parameter_list|)
init|=
literal|0
function_decl|;
comment|// Buffer creation
name|virtual
name|BufferImpl
modifier|*
name|createBuffer
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|VertexBuffer
modifier|*
name|createVertexBuffer
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|IndexBuffer
modifier|*
name|createIndexBuffer
parameter_list|()
init|=
literal|0
function_decl|;
comment|// Vertex Array creation
name|virtual
name|VertexArrayImpl
modifier|*
name|createVertexArray
parameter_list|()
init|=
literal|0
function_decl|;
comment|// Query and Fence creation
name|virtual
name|QueryImpl
modifier|*
name|createQuery
parameter_list|(
name|GLenum
name|type
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|FenceImpl
modifier|*
name|createFence
parameter_list|()
init|=
literal|0
function_decl|;
comment|// Transform Feedback creation
name|virtual
name|TransformFeedbackImpl
modifier|*
name|createTransformFeedback
parameter_list|()
init|=
literal|0
function_decl|;
comment|// Current GLES client version
name|void
name|setCurrentClientVersion
parameter_list|(
name|int
name|clientVersion
parameter_list|)
block|{
name|mCurrentClientVersion
operator|=
name|clientVersion
expr_stmt|;
block|}
name|int
name|getCurrentClientVersion
argument_list|()
specifier|const
block|{
return|return
name|mCurrentClientVersion
return|;
block|}
comment|// Buffer-to-texture and Texture-to-buffer copies
name|virtual
name|bool
name|supportsFastCopyBufferToTexture
argument_list|(
name|GLenum
name|internalFormat
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|fastCopyBufferToTexture
argument_list|(
specifier|const
name|gl
operator|::
name|PixelUnpackState
operator|&
name|unpack
argument_list|,
name|unsigned
name|int
name|offset
argument_list|,
name|RenderTarget
operator|*
name|destRenderTarget
argument_list|,
name|GLenum
name|destinationFormat
argument_list|,
name|GLenum
name|sourcePixelsType
argument_list|,
specifier|const
name|gl
operator|::
name|Box
operator|&
name|destArea
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|getLUID
argument_list|(
name|LUID
operator|*
name|adapterLuid
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|rx
operator|::
name|VertexConversionType
name|getVertexConversionType
argument_list|(
argument|const gl::VertexFormat&vertexFormat
argument_list|)
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLenum
name|getVertexComponentType
argument_list|(
specifier|const
name|gl
operator|::
name|VertexFormat
operator|&
name|vertexFormat
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|protected
label|:
name|egl
operator|::
name|Display
operator|*
name|mDisplay
expr_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Renderer
argument_list|)
expr_stmt|;
name|virtual
name|void
name|generateCaps
argument_list|(
name|gl
operator|::
name|Caps
operator|*
name|outCaps
argument_list|,
name|gl
operator|::
name|TextureCapsMap
operator|*
name|outTextureCaps
argument_list|,
name|gl
operator|::
name|Extensions
operator|*
name|outExtensions
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|mutable
name|bool
name|mCapsInitialized
decl_stmt|;
name|mutable
name|gl
operator|::
name|Caps
name|mCaps
expr_stmt|;
name|mutable
name|gl
operator|::
name|TextureCapsMap
name|mTextureCaps
expr_stmt|;
name|mutable
name|gl
operator|::
name|Extensions
name|mExtensions
expr_stmt|;
name|int
name|mCurrentClientVersion
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RENDERER_RENDERER_H_
end_comment
end_unit
