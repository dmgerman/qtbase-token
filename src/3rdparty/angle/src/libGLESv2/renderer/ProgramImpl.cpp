begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// ProgramD3D.cpp: Defines the rx::ProgramD3D class which implements rx::ProgramImpl.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/ProgramImpl.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
namespace|namespace
block|{
DECL|function|ParseAndStripArrayIndex
name|unsigned
name|int
name|ParseAndStripArrayIndex
parameter_list|(
name|std
operator|::
name|string
modifier|*
name|name
parameter_list|)
block|{
name|unsigned
name|int
name|subscript
init|=
name|GL_INVALID_INDEX
decl_stmt|;
comment|// Strip any trailing array operator and retrieve the subscript
name|size_t
name|open
init|=
name|name
operator|->
name|find_last_of
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
name|size_t
name|close
init|=
name|name
operator|->
name|find_last_of
argument_list|(
literal|']'
argument_list|)
decl_stmt|;
if|if
condition|(
name|open
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
operator|&&
name|close
operator|==
name|name
operator|->
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|subscript
operator|=
name|atoi
argument_list|(
name|name
operator|->
name|substr
argument_list|(
name|open
operator|+
literal|1
argument_list|)
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|->
name|erase
argument_list|(
name|open
argument_list|)
expr_stmt|;
block|}
return|return
name|subscript
return|;
block|}
block|}
DECL|function|~ProgramImpl
name|ProgramImpl
operator|::
name|~
name|ProgramImpl
parameter_list|()
block|{
comment|// Ensure that reset was called by the inherited class during destruction
name|ASSERT
argument_list|(
name|mUniformIndex
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|function|getUniformByLocation
name|gl
operator|::
name|LinkedUniform
modifier|*
name|ProgramImpl
operator|::
name|getUniformByLocation
parameter_list|(
name|GLint
name|location
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|location
operator|>=
literal|0
operator|&&
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|location
argument_list|)
operator|<
name|mUniformIndex
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mUniforms
index|[
name|mUniformIndex
index|[
name|location
index|]
operator|.
name|index
index|]
return|;
block|}
DECL|function|getUniformByName
name|gl
operator|::
name|LinkedUniform
modifier|*
name|ProgramImpl
operator|::
name|getUniformByName
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|name
parameter_list|)
specifier|const
block|{
for|for
control|(
name|size_t
name|uniformIndex
init|=
literal|0
init|;
name|uniformIndex
operator|<
name|mUniforms
operator|.
name|size
argument_list|()
condition|;
name|uniformIndex
operator|++
control|)
block|{
if|if
condition|(
name|mUniforms
index|[
name|uniformIndex
index|]
operator|->
name|name
operator|==
name|name
condition|)
block|{
return|return
name|mUniforms
index|[
name|uniformIndex
index|]
return|;
block|}
block|}
return|return
name|NULL
return|;
block|}
DECL|function|getUniformBlockByIndex
name|gl
operator|::
name|UniformBlock
modifier|*
name|ProgramImpl
operator|::
name|getUniformBlockByIndex
parameter_list|(
name|GLuint
name|blockIndex
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|blockIndex
operator|<
name|mUniformBlocks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mUniformBlocks
index|[
name|blockIndex
index|]
return|;
block|}
DECL|function|getUniformLocation
name|GLint
name|ProgramImpl
operator|::
name|getUniformLocation
parameter_list|(
name|std
operator|::
name|string
name|name
parameter_list|)
block|{
name|unsigned
name|int
name|subscript
init|=
name|ParseAndStripArrayIndex
argument_list|(
operator|&
name|name
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|numUniforms
init|=
name|mUniformIndex
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|location
init|=
literal|0
init|;
name|location
operator|<
name|numUniforms
condition|;
name|location
operator|++
control|)
block|{
if|if
condition|(
name|mUniformIndex
index|[
name|location
index|]
operator|.
name|name
operator|==
name|name
condition|)
block|{
specifier|const
name|int
name|index
init|=
name|mUniformIndex
index|[
name|location
index|]
operator|.
name|index
decl_stmt|;
specifier|const
name|bool
name|isArray
init|=
name|mUniforms
index|[
name|index
index|]
operator|->
name|isArray
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|isArray
operator|&&
name|mUniformIndex
index|[
name|location
index|]
operator|.
name|element
operator|==
name|subscript
operator|)
operator|||
operator|(
name|subscript
operator|==
name|GL_INVALID_INDEX
operator|)
condition|)
block|{
return|return
name|location
return|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|function|getUniformIndex
name|GLuint
name|ProgramImpl
operator|::
name|getUniformIndex
parameter_list|(
name|std
operator|::
name|string
name|name
parameter_list|)
block|{
name|unsigned
name|int
name|subscript
init|=
name|ParseAndStripArrayIndex
argument_list|(
operator|&
name|name
argument_list|)
decl_stmt|;
comment|// The app is not allowed to specify array indices other than 0 for arrays of basic types
if|if
condition|(
name|subscript
operator|!=
literal|0
operator|&&
name|subscript
operator|!=
name|GL_INVALID_INDEX
condition|)
block|{
return|return
name|GL_INVALID_INDEX
return|;
block|}
name|unsigned
name|int
name|numUniforms
init|=
name|mUniforms
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|numUniforms
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|mUniforms
index|[
name|index
index|]
operator|->
name|name
operator|==
name|name
condition|)
block|{
if|if
condition|(
name|mUniforms
index|[
name|index
index|]
operator|->
name|isArray
argument_list|()
operator|||
name|subscript
operator|==
name|GL_INVALID_INDEX
condition|)
block|{
return|return
name|index
return|;
block|}
block|}
block|}
return|return
name|GL_INVALID_INDEX
return|;
block|}
DECL|function|getUniformBlockIndex
name|GLuint
name|ProgramImpl
operator|::
name|getUniformBlockIndex
parameter_list|(
name|std
operator|::
name|string
name|name
parameter_list|)
specifier|const
block|{
name|unsigned
name|int
name|subscript
init|=
name|ParseAndStripArrayIndex
argument_list|(
operator|&
name|name
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|numUniformBlocks
init|=
name|mUniformBlocks
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|blockIndex
init|=
literal|0
init|;
name|blockIndex
operator|<
name|numUniformBlocks
condition|;
name|blockIndex
operator|++
control|)
block|{
specifier|const
name|gl
operator|::
name|UniformBlock
modifier|&
name|uniformBlock
init|=
operator|*
name|mUniformBlocks
index|[
name|blockIndex
index|]
decl_stmt|;
if|if
condition|(
name|uniformBlock
operator|.
name|name
operator|==
name|name
condition|)
block|{
specifier|const
name|bool
name|arrayElementZero
init|=
operator|(
name|subscript
operator|==
name|GL_INVALID_INDEX
operator|&&
name|uniformBlock
operator|.
name|elementIndex
operator|==
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|subscript
operator|==
name|uniformBlock
operator|.
name|elementIndex
operator|||
name|arrayElementZero
condition|)
block|{
return|return
name|blockIndex
return|;
block|}
block|}
block|}
return|return
name|GL_INVALID_INDEX
return|;
block|}
DECL|function|reset
name|void
name|ProgramImpl
operator|::
name|reset
parameter_list|()
block|{
name|SafeDeleteContainer
argument_list|(
name|mUniforms
argument_list|)
expr_stmt|;
name|mUniformIndex
operator|.
name|clear
argument_list|()
expr_stmt|;
name|SafeDeleteContainer
argument_list|(
name|mUniformBlocks
argument_list|)
expr_stmt|;
name|mTransformFeedbackLinkedVaryings
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_namespace
end_unit
