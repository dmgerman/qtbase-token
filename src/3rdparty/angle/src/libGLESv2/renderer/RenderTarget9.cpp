begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// RenderTarget9.cpp: Implements a D3D9-specific wrapper for IDirect3DSurface9
end_comment
begin_comment
comment|// pointers retained by renderbuffers.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/RenderTarget9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/renderer9_utils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|RenderTarget9
name|RenderTarget9
operator|::
name|RenderTarget9
parameter_list|(
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|IDirect3DSurface9
modifier|*
name|surface
parameter_list|)
block|{
name|mRenderer
operator|=
name|Renderer9
operator|::
name|makeRenderer9
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
name|mRenderTarget
operator|=
name|surface
expr_stmt|;
if|if
condition|(
name|mRenderTarget
condition|)
block|{
name|D3DSURFACE_DESC
name|description
decl_stmt|;
name|mRenderTarget
operator|->
name|GetDesc
argument_list|(
operator|&
name|description
argument_list|)
expr_stmt|;
name|mWidth
operator|=
name|description
operator|.
name|Width
expr_stmt|;
name|mHeight
operator|=
name|description
operator|.
name|Height
expr_stmt|;
name|mInternalFormat
operator|=
name|d3d9_gl
operator|::
name|GetEquivalentFormat
argument_list|(
name|description
operator|.
name|Format
argument_list|)
expr_stmt|;
name|mActualFormat
operator|=
name|d3d9_gl
operator|::
name|GetEquivalentFormat
argument_list|(
name|description
operator|.
name|Format
argument_list|)
expr_stmt|;
name|mSamples
operator|=
name|d3d9_gl
operator|::
name|GetSamplesFromMultisampleType
argument_list|(
name|description
operator|.
name|MultiSampleType
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|RenderTarget9
name|RenderTarget9
operator|::
name|RenderTarget9
parameter_list|(
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
block|{
name|mRenderer
operator|=
name|Renderer9
operator|::
name|makeRenderer9
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
name|mRenderTarget
operator|=
name|NULL
expr_stmt|;
name|D3DFORMAT
name|requestedFormat
init|=
name|gl_d3d9
operator|::
name|ConvertRenderbufferFormat
argument_list|(
name|format
argument_list|)
decl_stmt|;
name|int
name|supportedSamples
init|=
name|mRenderer
operator|->
name|getNearestSupportedSamples
argument_list|(
name|requestedFormat
argument_list|,
name|samples
argument_list|)
decl_stmt|;
if|if
condition|(
name|supportedSamples
operator|==
operator|-
literal|1
condition|)
block|{
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
expr_stmt|;
return|return;
block|}
name|HRESULT
name|result
init|=
name|D3DERR_INVALIDCALL
decl_stmt|;
if|if
condition|(
name|width
operator|>
literal|0
operator|&&
name|height
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|requestedFormat
operator|==
name|D3DFMT_D24S8
condition|)
block|{
name|result
operator|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
operator|->
name|CreateDepthStencilSurface
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|requestedFormat
argument_list|,
name|gl_d3d9
operator|::
name|GetMultisampleTypeFromSamples
argument_list|(
name|supportedSamples
argument_list|)
argument_list|,
literal|0
argument_list|,
name|FALSE
argument_list|,
operator|&
name|mRenderTarget
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
operator|->
name|CreateRenderTarget
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|requestedFormat
argument_list|,
name|gl_d3d9
operator|::
name|GetMultisampleTypeFromSamples
argument_list|(
name|supportedSamples
argument_list|)
argument_list|,
literal|0
argument_list|,
name|FALSE
argument_list|,
operator|&
name|mRenderTarget
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
name|D3DERR_OUTOFVIDEOMEMORY
operator|||
name|result
operator|==
name|E_OUTOFMEMORY
condition|)
block|{
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
expr_stmt|;
return|return;
block|}
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mWidth
operator|=
name|width
expr_stmt|;
name|mHeight
operator|=
name|height
expr_stmt|;
name|mInternalFormat
operator|=
name|format
expr_stmt|;
name|mSamples
operator|=
name|supportedSamples
expr_stmt|;
name|mActualFormat
operator|=
name|d3d9_gl
operator|::
name|GetEquivalentFormat
argument_list|(
name|requestedFormat
argument_list|)
expr_stmt|;
block|}
DECL|function|~RenderTarget9
name|RenderTarget9
operator|::
name|~
name|RenderTarget9
parameter_list|()
block|{
if|if
condition|(
name|mRenderTarget
condition|)
block|{
name|mRenderTarget
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|makeRenderTarget9
name|RenderTarget9
modifier|*
name|RenderTarget9
operator|::
name|makeRenderTarget9
parameter_list|(
name|RenderTarget
modifier|*
name|target
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|rx
operator|::
name|RenderTarget9
operator|*
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|rx
operator|::
name|RenderTarget9
operator|*
argument_list|>
argument_list|(
name|target
argument_list|)
return|;
block|}
DECL|function|getSurface
name|IDirect3DSurface9
modifier|*
name|RenderTarget9
operator|::
name|getSurface
parameter_list|()
block|{
comment|// Caller is responsible for releasing the returned surface reference.
if|if
condition|(
name|mRenderTarget
condition|)
block|{
name|mRenderTarget
operator|->
name|AddRef
argument_list|()
expr_stmt|;
block|}
return|return
name|mRenderTarget
return|;
block|}
block|}
end_namespace
end_unit
