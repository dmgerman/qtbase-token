begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// InputLayoutCache.cpp: Defines InputLayoutCache, a class that builds and caches
end_comment
begin_comment
comment|// D3D11 input layouts.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/InputLayoutCache.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/VertexBuffer11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/BufferStorage11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/ShaderExecutable11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/ProgramBinary.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/VertexDataManager.h"
end_include
begin_include
include|#
directive|include
file|"third_party/murmurhash/MurmurHash3.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|member|kMaxInputLayouts
specifier|const
name|unsigned
name|int
name|InputLayoutCache
operator|::
name|kMaxInputLayouts
init|=
literal|1024
decl_stmt|;
DECL|function|InputLayoutCache
name|InputLayoutCache
operator|::
name|InputLayoutCache
parameter_list|()
member_init_list|:
name|mInputLayoutMap
argument_list|(
name|kMaxInputLayouts
argument_list|,
name|hashInputLayout
argument_list|,
name|compareInputLayouts
argument_list|)
block|{
name|mCounter
operator|=
literal|0
expr_stmt|;
name|mDevice
operator|=
name|NULL
expr_stmt|;
name|mDeviceContext
operator|=
name|NULL
expr_stmt|;
block|}
DECL|function|~InputLayoutCache
name|InputLayoutCache
operator|::
name|~
name|InputLayoutCache
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|initialize
name|void
name|InputLayoutCache
operator|::
name|initialize
parameter_list|(
name|ID3D11Device
modifier|*
name|device
parameter_list|,
name|ID3D11DeviceContext
modifier|*
name|context
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|mDevice
operator|=
name|device
expr_stmt|;
name|mDeviceContext
operator|=
name|context
expr_stmt|;
block|}
DECL|function|clear
name|void
name|InputLayoutCache
operator|::
name|clear
parameter_list|()
block|{
for|for
control|(
name|InputLayoutMap
operator|::
name|iterator
name|i
init|=
name|mInputLayoutMap
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|mInputLayoutMap
operator|.
name|end
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|i
operator|->
name|second
operator|.
name|inputLayout
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
name|mInputLayoutMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|applyVertexBuffers
name|GLenum
name|InputLayoutCache
operator|::
name|applyVertexBuffers
parameter_list|(
name|TranslatedAttribute
name|attributes
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
parameter_list|,
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
parameter_list|)
block|{
name|int
name|sortedSemanticIndices
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
decl_stmt|;
name|programBinary
operator|->
name|sortAttributesByLayout
argument_list|(
name|attributes
argument_list|,
name|sortedSemanticIndices
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mDevice
operator|||
operator|!
name|mDeviceContext
condition|)
block|{
name|ERR
argument_list|(
literal|"InputLayoutCache is not initialized."
argument_list|)
expr_stmt|;
return|return
name|GL_INVALID_OPERATION
return|;
block|}
name|InputLayoutKey
name|ilKey
init|=
block|{
literal|0
block|}
decl_stmt|;
name|ID3D11Buffer
modifier|*
name|vertexBuffers
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
init|=
block|{
name|NULL
block|}
decl_stmt|;
name|UINT
name|vertexStrides
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
init|=
block|{
literal|0
block|}
decl_stmt|;
name|UINT
name|vertexOffsets
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
init|=
block|{
literal|0
block|}
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|semanticName
init|=
literal|"TEXCOORD"
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|attributes
index|[
name|i
index|]
operator|.
name|active
condition|)
block|{
name|VertexBuffer11
modifier|*
name|vertexBuffer
init|=
name|VertexBuffer11
operator|::
name|makeVertexBuffer11
argument_list|(
name|attributes
index|[
name|i
index|]
operator|.
name|vertexBuffer
argument_list|)
decl_stmt|;
name|BufferStorage11
modifier|*
name|bufferStorage
init|=
name|attributes
index|[
name|i
index|]
operator|.
name|storage
condition|?
name|BufferStorage11
operator|::
name|makeBufferStorage11
argument_list|(
name|attributes
index|[
name|i
index|]
operator|.
name|storage
argument_list|)
else|:
name|NULL
decl_stmt|;
name|D3D11_INPUT_CLASSIFICATION
name|inputClass
init|=
name|attributes
index|[
name|i
index|]
operator|.
name|divisor
operator|>
literal|0
condition|?
name|D3D11_INPUT_PER_INSTANCE_DATA
else|:
name|D3D11_INPUT_PER_VERTEX_DATA
decl_stmt|;
comment|// Record the type of the associated vertex shader vector in our key
comment|// This will prevent mismatched vertex shaders from using the same input layout
name|GLint
name|attributeSize
decl_stmt|;
name|programBinary
operator|->
name|getActiveAttribute
argument_list|(
name|ilKey
operator|.
name|elementCount
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
operator|&
name|attributeSize
argument_list|,
operator|&
name|ilKey
operator|.
name|glslElementType
index|[
name|ilKey
operator|.
name|elementCount
index|]
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|ilKey
operator|.
name|elements
index|[
name|ilKey
operator|.
name|elementCount
index|]
operator|.
name|SemanticName
operator|=
name|semanticName
expr_stmt|;
name|ilKey
operator|.
name|elements
index|[
name|ilKey
operator|.
name|elementCount
index|]
operator|.
name|SemanticIndex
operator|=
name|sortedSemanticIndices
index|[
name|i
index|]
expr_stmt|;
name|ilKey
operator|.
name|elements
index|[
name|ilKey
operator|.
name|elementCount
index|]
operator|.
name|Format
operator|=
name|attributes
index|[
name|i
index|]
operator|.
name|attribute
operator|->
name|mArrayEnabled
condition|?
name|vertexBuffer
operator|->
name|getDXGIFormat
argument_list|(
operator|*
name|attributes
index|[
name|i
index|]
operator|.
name|attribute
argument_list|)
else|:
name|DXGI_FORMAT_R32G32B32A32_FLOAT
expr_stmt|;
name|ilKey
operator|.
name|elements
index|[
name|ilKey
operator|.
name|elementCount
index|]
operator|.
name|InputSlot
operator|=
name|i
expr_stmt|;
name|ilKey
operator|.
name|elements
index|[
name|ilKey
operator|.
name|elementCount
index|]
operator|.
name|AlignedByteOffset
operator|=
literal|0
expr_stmt|;
name|ilKey
operator|.
name|elements
index|[
name|ilKey
operator|.
name|elementCount
index|]
operator|.
name|InputSlotClass
operator|=
name|inputClass
expr_stmt|;
name|ilKey
operator|.
name|elements
index|[
name|ilKey
operator|.
name|elementCount
index|]
operator|.
name|InstanceDataStepRate
operator|=
name|attributes
index|[
name|i
index|]
operator|.
name|divisor
expr_stmt|;
name|ilKey
operator|.
name|elementCount
operator|++
expr_stmt|;
name|vertexBuffers
index|[
name|i
index|]
operator|=
name|bufferStorage
condition|?
name|bufferStorage
operator|->
name|getBuffer
argument_list|()
else|:
name|vertexBuffer
operator|->
name|getBuffer
argument_list|()
expr_stmt|;
name|vertexStrides
index|[
name|i
index|]
operator|=
name|attributes
index|[
name|i
index|]
operator|.
name|stride
expr_stmt|;
name|vertexOffsets
index|[
name|i
index|]
operator|=
name|attributes
index|[
name|i
index|]
operator|.
name|offset
expr_stmt|;
block|}
block|}
name|ID3D11InputLayout
modifier|*
name|inputLayout
init|=
name|NULL
decl_stmt|;
name|InputLayoutMap
operator|::
name|iterator
name|i
init|=
name|mInputLayoutMap
operator|.
name|find
argument_list|(
name|ilKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
name|mInputLayoutMap
operator|.
name|end
argument_list|()
condition|)
block|{
name|inputLayout
operator|=
name|i
operator|->
name|second
operator|.
name|inputLayout
expr_stmt|;
name|i
operator|->
name|second
operator|.
name|lastUsedTime
operator|=
name|mCounter
operator|++
expr_stmt|;
block|}
else|else
block|{
name|ShaderExecutable11
modifier|*
name|shader
init|=
name|ShaderExecutable11
operator|::
name|makeShaderExecutable11
argument_list|(
name|programBinary
operator|->
name|getVertexExecutable
argument_list|()
argument_list|)
decl_stmt|;
name|HRESULT
name|result
init|=
name|mDevice
operator|->
name|CreateInputLayout
argument_list|(
name|ilKey
operator|.
name|elements
argument_list|,
name|ilKey
operator|.
name|elementCount
argument_list|,
name|shader
operator|->
name|getFunction
argument_list|()
argument_list|,
name|shader
operator|->
name|getLength
argument_list|()
argument_list|,
operator|&
name|inputLayout
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to crate input layout, result: 0x%08x"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|GL_INVALID_OPERATION
return|;
block|}
if|if
condition|(
name|mInputLayoutMap
operator|.
name|size
argument_list|()
operator|>=
name|kMaxInputLayouts
condition|)
block|{
name|TRACE
argument_list|(
literal|"Overflowed the limit of %u input layouts, removing the least recently used "
literal|"to make room."
argument_list|,
name|kMaxInputLayouts
argument_list|)
expr_stmt|;
name|InputLayoutMap
operator|::
name|iterator
name|leastRecentlyUsed
init|=
name|mInputLayoutMap
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
name|InputLayoutMap
operator|::
name|iterator
name|i
init|=
name|mInputLayoutMap
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|mInputLayoutMap
operator|.
name|end
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|->
name|second
operator|.
name|lastUsedTime
operator|<
name|leastRecentlyUsed
operator|->
name|second
operator|.
name|lastUsedTime
condition|)
block|{
name|leastRecentlyUsed
operator|=
name|i
expr_stmt|;
block|}
block|}
name|leastRecentlyUsed
operator|->
name|second
operator|.
name|inputLayout
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mInputLayoutMap
operator|.
name|erase
argument_list|(
name|leastRecentlyUsed
argument_list|)
expr_stmt|;
block|}
name|InputLayoutCounterPair
name|inputCounterPair
decl_stmt|;
name|inputCounterPair
operator|.
name|inputLayout
operator|=
name|inputLayout
expr_stmt|;
name|inputCounterPair
operator|.
name|lastUsedTime
operator|=
name|mCounter
operator|++
expr_stmt|;
name|mInputLayoutMap
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|ilKey
argument_list|,
name|inputCounterPair
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mDeviceContext
operator|->
name|IASetInputLayout
argument_list|(
name|inputLayout
argument_list|)
expr_stmt|;
name|mDeviceContext
operator|->
name|IASetVertexBuffers
argument_list|(
literal|0
argument_list|,
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
argument_list|,
name|vertexBuffers
argument_list|,
name|vertexStrides
argument_list|,
name|vertexOffsets
argument_list|)
expr_stmt|;
return|return
name|GL_NO_ERROR
return|;
block|}
DECL|function|hashInputLayout
name|std
operator|::
name|size_t
name|InputLayoutCache
operator|::
name|hashInputLayout
parameter_list|(
specifier|const
name|InputLayoutKey
modifier|&
name|inputLayout
parameter_list|)
block|{
specifier|static
specifier|const
name|unsigned
name|int
name|seed
init|=
literal|0xDEADBEEF
decl_stmt|;
name|std
operator|::
name|size_t
name|hash
init|=
literal|0
decl_stmt|;
name|MurmurHash3_x86_32
argument_list|(
operator|&
name|inputLayout
argument_list|,
sizeof|sizeof
argument_list|(
name|InputLayoutKey
argument_list|)
argument_list|,
name|seed
argument_list|,
operator|&
name|hash
argument_list|)
expr_stmt|;
return|return
name|hash
return|;
block|}
DECL|function|compareInputLayouts
name|bool
name|InputLayoutCache
operator|::
name|compareInputLayouts
parameter_list|(
specifier|const
name|InputLayoutKey
modifier|&
name|a
parameter_list|,
specifier|const
name|InputLayoutKey
modifier|&
name|b
parameter_list|)
block|{
return|return
name|memcmp
argument_list|(
operator|&
name|a
argument_list|,
operator|&
name|b
argument_list|,
sizeof|sizeof
argument_list|(
name|InputLayoutKey
argument_list|)
argument_list|)
operator|==
literal|0
return|;
block|}
block|}
end_namespace
end_unit
