begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// InputLayoutCache.h: Defines InputLayoutCache, a class that builds and caches
end_comment
begin_comment
comment|// D3D11 input layouts.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RENDERER_INPUTLAYOUTCACHE_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RENDERER_INPUTLAYOUTCACHE_H_
define|#
directive|define
name|LIBGLESV2_RENDERER_INPUTLAYOUTCACHE_H_
end_define
begin_include
include|#
directive|include
file|"libGLESv2/Constants.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|ProgramBinary
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|rx
block|{
struct_decl|struct
name|TranslatedAttribute
struct_decl|;
name|class
name|InputLayoutCache
block|{
name|public
label|:
name|InputLayoutCache
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|InputLayoutCache
argument_list|()
expr_stmt|;
name|void
name|initialize
parameter_list|(
name|ID3D11Device
modifier|*
name|device
parameter_list|,
name|ID3D11DeviceContext
modifier|*
name|context
parameter_list|)
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|GLenum
name|applyVertexBuffers
argument_list|(
name|TranslatedAttribute
name|attributes
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
argument_list|,
name|gl
operator|::
name|ProgramBinary
operator|*
name|programBinary
argument_list|)
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|InputLayoutCache
argument_list|)
expr_stmt|;
struct|struct
name|InputLayoutKey
block|{
name|unsigned
name|int
name|elementCount
decl_stmt|;
name|D3D11_INPUT_ELEMENT_DESC
name|elements
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
decl_stmt|;
name|GLenum
name|glslElementType
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|InputLayoutCounterPair
block|{
name|ID3D11InputLayout
modifier|*
name|inputLayout
decl_stmt|;
name|unsigned
name|long
name|long
name|lastUsedTime
decl_stmt|;
block|}
struct|;
specifier|static
name|std
operator|::
name|size_t
name|hashInputLayout
argument_list|(
specifier|const
name|InputLayoutKey
operator|&
name|inputLayout
argument_list|)
expr_stmt|;
specifier|static
name|bool
name|compareInputLayouts
parameter_list|(
specifier|const
name|InputLayoutKey
modifier|&
name|a
parameter_list|,
specifier|const
name|InputLayoutKey
modifier|&
name|b
parameter_list|)
function_decl|;
typedef|typedef
name|std
operator|::
name|size_t
argument_list|(
operator|*
name|InputLayoutHashFunction
argument_list|)
argument_list|(
specifier|const
name|InputLayoutKey
operator|&
argument_list|)
expr_stmt|;
typedef|typedef
name|bool
function_decl|(
modifier|*
name|InputLayoutEqualityFunction
function_decl|)
parameter_list|(
specifier|const
name|InputLayoutKey
modifier|&
parameter_list|,
specifier|const
name|InputLayoutKey
modifier|&
parameter_list|)
function_decl|;
typedef|typedef
name|std
operator|::
name|unordered_map
operator|<
name|InputLayoutKey
operator|,
name|InputLayoutCounterPair
operator|,
name|InputLayoutHashFunction
operator|,
name|InputLayoutEqualityFunction
operator|>
name|InputLayoutMap
expr_stmt|;
name|InputLayoutMap
name|mInputLayoutMap
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|int
name|kMaxInputLayouts
decl_stmt|;
name|unsigned
name|long
name|long
name|mCounter
decl_stmt|;
name|ID3D11Device
modifier|*
name|mDevice
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|mDeviceContext
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RENDERER_INPUTLAYOUTCACHE_H_
end_comment
end_unit
