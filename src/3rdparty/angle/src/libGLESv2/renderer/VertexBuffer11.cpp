begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// VertexBuffer11.cpp: Defines the D3D11 VertexBuffer implementation.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/VertexBuffer11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/BufferStorage.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Buffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|VertexBuffer11
name|VertexBuffer11
operator|::
name|VertexBuffer11
parameter_list|(
name|rx
operator|::
name|Renderer11
modifier|*
specifier|const
name|renderer
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
block|{
name|mBuffer
operator|=
name|NULL
expr_stmt|;
name|mBufferSize
operator|=
literal|0
expr_stmt|;
name|mDynamicUsage
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|~VertexBuffer11
name|VertexBuffer11
operator|::
name|~
name|VertexBuffer11
parameter_list|()
block|{
if|if
condition|(
name|mBuffer
condition|)
block|{
name|mBuffer
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mBuffer
operator|=
name|NULL
expr_stmt|;
block|}
block|}
DECL|function|initialize
name|bool
name|VertexBuffer11
operator|::
name|initialize
parameter_list|(
name|unsigned
name|int
name|size
parameter_list|,
name|bool
name|dynamicUsage
parameter_list|)
block|{
if|if
condition|(
name|mBuffer
condition|)
block|{
name|mBuffer
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mBuffer
operator|=
name|NULL
expr_stmt|;
block|}
name|updateSerial
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|ID3D11Device
modifier|*
name|dxDevice
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|D3D11_BUFFER_DESC
name|bufferDesc
decl_stmt|;
name|bufferDesc
operator|.
name|ByteWidth
operator|=
name|size
expr_stmt|;
name|bufferDesc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_DYNAMIC
expr_stmt|;
name|bufferDesc
operator|.
name|BindFlags
operator|=
name|D3D11_BIND_VERTEX_BUFFER
expr_stmt|;
name|bufferDesc
operator|.
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_WRITE
expr_stmt|;
name|bufferDesc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|bufferDesc
operator|.
name|StructureByteStride
operator|=
literal|0
expr_stmt|;
name|HRESULT
name|result
init|=
name|dxDevice
operator|->
name|CreateBuffer
argument_list|(
operator|&
name|bufferDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|mBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|mBufferSize
operator|=
name|size
expr_stmt|;
name|mDynamicUsage
operator|=
name|dynamicUsage
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|makeVertexBuffer11
name|VertexBuffer11
modifier|*
name|VertexBuffer11
operator|::
name|makeVertexBuffer11
parameter_list|(
name|VertexBuffer
modifier|*
name|vetexBuffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|VertexBuffer11
operator|*
argument_list|,
name|vetexBuffer
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|VertexBuffer11
operator|*
argument_list|>
argument_list|(
name|vetexBuffer
argument_list|)
return|;
block|}
DECL|function|storeVertexAttributes
name|bool
name|VertexBuffer11
operator|::
name|storeVertexAttributes
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
name|GLint
name|start
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instances
parameter_list|,
name|unsigned
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|mBuffer
condition|)
block|{
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
init|=
name|attrib
operator|.
name|mBoundBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|inputStride
init|=
name|attrib
operator|.
name|stride
argument_list|()
decl_stmt|;
specifier|const
name|VertexConverter
modifier|&
name|converter
init|=
name|getVertexConversion
argument_list|(
name|attrib
argument_list|)
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|dxContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|HRESULT
name|result
init|=
name|dxContext
operator|->
name|Map
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE_NO_OVERWRITE
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Vertex buffer map failed with error 0x%08x"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|char
modifier|*
name|output
init|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|mappedResource
operator|.
name|pData
argument_list|)
operator|+
name|offset
decl_stmt|;
specifier|const
name|char
modifier|*
name|input
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|buffer
condition|)
block|{
name|BufferStorage
modifier|*
name|storage
init|=
name|buffer
operator|->
name|getStorage
argument_list|()
decl_stmt|;
name|input
operator|=
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|storage
operator|->
name|getData
argument_list|()
argument_list|)
operator|+
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|attrib
operator|.
name|mOffset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|input
operator|=
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|attrib
operator|.
name|mPointer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instances
operator|==
literal|0
operator|||
name|attrib
operator|.
name|mDivisor
operator|==
literal|0
condition|)
block|{
name|input
operator|+=
name|inputStride
operator|*
name|start
expr_stmt|;
block|}
name|converter
operator|.
name|conversionFunc
argument_list|(
name|input
argument_list|,
name|inputStride
argument_list|,
name|count
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|dxContext
operator|->
name|Unmap
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|ERR
argument_list|(
literal|"Vertex buffer not initialized."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|storeRawData
name|bool
name|VertexBuffer11
operator|::
name|storeRawData
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|,
name|unsigned
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|mBuffer
condition|)
block|{
name|ID3D11DeviceContext
modifier|*
name|dxContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|HRESULT
name|result
init|=
name|dxContext
operator|->
name|Map
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE_NO_OVERWRITE
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Vertex buffer map failed with error 0x%08x"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|char
modifier|*
name|bufferData
init|=
cast|static_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|mappedResource
operator|.
name|pData
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|bufferData
operator|+
name|offset
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|dxContext
operator|->
name|Unmap
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|ERR
argument_list|(
literal|"Vertex buffer not initialized."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|getSpaceRequired
name|unsigned
name|int
name|VertexBuffer11
operator|::
name|getSpaceRequired
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instances
parameter_list|)
specifier|const
block|{
name|unsigned
name|int
name|elementSize
init|=
name|getVertexConversion
argument_list|(
name|attrib
argument_list|)
operator|.
name|outputElementSize
decl_stmt|;
if|if
condition|(
name|instances
operator|==
literal|0
operator|||
name|attrib
operator|.
name|mDivisor
operator|==
literal|0
condition|)
block|{
return|return
name|elementSize
operator|*
name|count
return|;
block|}
else|else
block|{
return|return
name|elementSize
operator|*
operator|(
operator|(
name|instances
operator|+
name|attrib
operator|.
name|mDivisor
operator|-
literal|1
operator|)
operator|/
name|attrib
operator|.
name|mDivisor
operator|)
return|;
block|}
block|}
DECL|function|requiresConversion
name|bool
name|VertexBuffer11
operator|::
name|requiresConversion
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|)
specifier|const
block|{
return|return
operator|!
name|getVertexConversion
argument_list|(
name|attrib
argument_list|)
operator|.
name|identity
return|;
block|}
DECL|function|getBufferSize
name|unsigned
name|int
name|VertexBuffer11
operator|::
name|getBufferSize
parameter_list|()
specifier|const
block|{
return|return
name|mBufferSize
return|;
block|}
DECL|function|setBufferSize
name|bool
name|VertexBuffer11
operator|::
name|setBufferSize
parameter_list|(
name|unsigned
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|>
name|mBufferSize
condition|)
block|{
return|return
name|initialize
argument_list|(
name|size
argument_list|,
name|mDynamicUsage
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|function|discard
name|bool
name|VertexBuffer11
operator|::
name|discard
parameter_list|()
block|{
if|if
condition|(
name|mBuffer
condition|)
block|{
name|ID3D11DeviceContext
modifier|*
name|dxContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|HRESULT
name|result
init|=
name|dxContext
operator|->
name|Map
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE_DISCARD
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Vertex buffer map failed with error 0x%08x"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|dxContext
operator|->
name|Unmap
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|ERR
argument_list|(
literal|"Vertex buffer not initialized."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|getVertexSize
name|unsigned
name|int
name|VertexBuffer11
operator|::
name|getVertexSize
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|)
specifier|const
block|{
return|return
name|getVertexConversion
argument_list|(
name|attrib
argument_list|)
operator|.
name|outputElementSize
return|;
block|}
DECL|function|getDXGIFormat
name|DXGI_FORMAT
name|VertexBuffer11
operator|::
name|getDXGIFormat
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|)
specifier|const
block|{
return|return
name|getVertexConversion
argument_list|(
name|attrib
argument_list|)
operator|.
name|dxgiFormat
return|;
block|}
DECL|function|getBuffer
name|ID3D11Buffer
modifier|*
name|VertexBuffer11
operator|::
name|getBuffer
parameter_list|()
specifier|const
block|{
return|return
name|mBuffer
return|;
block|}
template|template
parameter_list|<
name|typename
name|T
parameter_list|,
name|unsigned
name|int
name|componentCount
parameter_list|,
name|bool
name|widen
parameter_list|,
name|bool
name|normalized
parameter_list|>
DECL|function|copyVertexData
specifier|static
name|void
name|copyVertexData
parameter_list|(
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|unsigned
name|int
name|stride
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
name|unsigned
name|int
name|attribSize
init|=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|*
name|componentCount
decl_stmt|;
if|if
condition|(
name|attribSize
operator|==
name|stride
operator|&&
operator|!
name|widen
condition|)
block|{
name|memcpy
argument_list|(
name|output
argument_list|,
name|input
argument_list|,
name|count
operator|*
name|attribSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unsigned
name|int
name|outputStride
init|=
name|widen
condition|?
literal|4
else|:
name|componentCount
decl_stmt|;
name|T
name|defaultVal
init|=
name|normalized
condition|?
name|std
operator|::
name|numeric_limits
argument_list|<
name|T
argument_list|>
operator|::
name|max
argument_list|()
else|:
name|T
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|T
modifier|*
name|offsetInput
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|T
operator|*
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|i
operator|*
name|stride
argument_list|)
decl_stmt|;
name|T
modifier|*
name|offsetOutput
init|=
cast|reinterpret_cast
argument_list|<
name|T
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|i
operator|*
name|outputStride
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|componentCount
condition|;
name|j
operator|++
control|)
block|{
name|offsetOutput
index|[
name|j
index|]
operator|=
name|offsetInput
index|[
name|j
index|]
expr_stmt|;
block|}
if|if
condition|(
name|widen
condition|)
block|{
name|offsetOutput
index|[
literal|3
index|]
operator|=
name|defaultVal
expr_stmt|;
block|}
block|}
block|}
block|}
template|template
parameter_list|<
name|unsigned
name|int
name|componentCount
parameter_list|>
DECL|function|copyFixedVertexData
specifier|static
name|void
name|copyFixedVertexData
parameter_list|(
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|unsigned
name|int
name|stride
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
specifier|static
specifier|const
name|float
name|divisor
init|=
literal|1.0f
operator|/
operator|(
literal|1
operator|<<
literal|16
operator|)
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|GLfixed
modifier|*
name|offsetInput
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|GLfixed
operator|*
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|stride
operator|*
name|i
argument_list|)
decl_stmt|;
name|float
modifier|*
name|offsetOutput
init|=
cast|reinterpret_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|i
operator|*
name|componentCount
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|componentCount
condition|;
name|j
operator|++
control|)
block|{
name|offsetOutput
index|[
name|j
index|]
operator|=
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|offsetInput
index|[
name|j
index|]
argument_list|)
operator|*
name|divisor
expr_stmt|;
block|}
block|}
block|}
template|template
parameter_list|<
name|typename
name|T
parameter_list|,
name|unsigned
name|int
name|componentCount
parameter_list|,
name|bool
name|normalized
parameter_list|>
DECL|function|copyToFloatVertexData
specifier|static
name|void
name|copyToFloatVertexData
parameter_list|(
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|unsigned
name|int
name|stride
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
typedef|typedef
name|std
operator|::
name|numeric_limits
argument_list|<
name|T
argument_list|>
name|NL
typedef|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|T
modifier|*
name|offsetInput
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|T
operator|*
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
operator|+
name|stride
operator|*
name|i
argument_list|)
decl_stmt|;
name|float
modifier|*
name|offsetOutput
init|=
cast|reinterpret_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
operator|+
name|i
operator|*
name|componentCount
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|componentCount
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|normalized
condition|)
block|{
if|if
condition|(
name|NL
operator|::
name|is_signed
condition|)
block|{
specifier|const
name|float
name|divisor
init|=
literal|1.0f
operator|/
operator|(
literal|2
operator|*
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|NL
operator|::
name|max
argument_list|()
argument_list|)
operator|+
literal|1
operator|)
decl_stmt|;
name|offsetOutput
index|[
name|j
index|]
operator|=
operator|(
literal|2
operator|*
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|offsetInput
index|[
name|j
index|]
argument_list|)
operator|+
literal|1
operator|)
operator|*
name|divisor
expr_stmt|;
block|}
else|else
block|{
name|offsetOutput
index|[
name|j
index|]
operator|=
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|offsetInput
index|[
name|j
index|]
argument_list|)
operator|/
name|NL
operator|::
name|max
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|offsetOutput
index|[
name|j
index|]
operator|=
cast|static_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|offsetInput
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|member|mPossibleTranslations
specifier|const
name|VertexBuffer11
operator|::
name|VertexConverter
name|VertexBuffer11
operator|::
name|mPossibleTranslations
index|[
name|NUM_GL_VERTEX_ATTRIB_TYPES
index|]
index|[
literal|2
index|]
index|[
literal|4
index|]
init|=
block|{
block|{
comment|// GL_BYTE
block|{
comment|// unnormalized
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32_FLOAT
block|,
literal|4
block|}
block|,
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32_FLOAT
block|,
literal|8
block|}
block|,
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32B32_FLOAT
block|,
literal|12
block|}
block|,
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
block|,
literal|16
block|}
block|,         }
block|,
block|{
comment|// normalized
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R8_SNORM
block|,
literal|1
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R8G8_SNORM
block|,
literal|2
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R8G8B8A8_SNORM
block|,
literal|4
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLbyte
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R8G8B8A8_SNORM
block|,
literal|4
block|}
block|,         }
block|,     }
block|,
block|{
comment|// GL_UNSIGNED_BYTE
block|{
comment|// unnormalized
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32_FLOAT
block|,
literal|4
block|}
block|,
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32_FLOAT
block|,
literal|8
block|}
block|,
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32B32_FLOAT
block|,
literal|12
block|}
block|,
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
block|,
literal|16
block|}
block|,         }
block|,
block|{
comment|// normalized
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R8_UNORM
block|,
literal|1
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R8G8_UNORM
block|,
literal|2
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
block|,
literal|4
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLubyte
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R8G8B8A8_UNORM
block|,
literal|4
block|}
block|,         }
block|,     }
block|,
block|{
comment|// GL_SHORT
block|{
comment|// unnormalized
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLshort
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32_FLOAT
block|,
literal|4
block|}
block|,
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLshort
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32_FLOAT
block|,
literal|8
block|}
block|,
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLshort
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32B32_FLOAT
block|,
literal|12
block|}
block|,
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLshort
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
block|,
literal|16
block|}
block|,         }
block|,
block|{
comment|// normalized
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLshort
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R16_SNORM
block|,
literal|2
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLshort
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R16G16_SNORM
block|,
literal|4
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLshort
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R16G16B16A16_SNORM
block|,
literal|8
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLshort
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R16G16B16A16_SNORM
block|,
literal|8
block|}
block|,         }
block|,     }
block|,
block|{
comment|// GL_UNSIGNED_SHORT
block|{
comment|// unnormalized
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLushort
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32_FLOAT
block|,
literal|4
block|}
block|,
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLushort
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32_FLOAT
block|,
literal|8
block|}
block|,
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLushort
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32B32_FLOAT
block|,
literal|12
block|}
block|,
block|{
operator|&
name|copyToFloatVertexData
argument_list|<
name|GLushort
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
block|,
literal|16
block|}
block|,         }
block|,
block|{
comment|// normalized
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLushort
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R16_UNORM
block|,
literal|2
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLushort
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R16G16_UNORM
block|,
literal|4
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLushort
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R16G16B16A16_UNORM
block|,
literal|8
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLushort
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R16G16B16A16_UNORM
block|,
literal|8
block|}
block|,         }
block|,     }
block|,
block|{
comment|// GL_FIXED
block|{
comment|// unnormalized
block|{
operator|&
name|copyFixedVertexData
argument_list|<
literal|1
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32_FLOAT
block|,
literal|4
block|}
block|,
block|{
operator|&
name|copyFixedVertexData
argument_list|<
literal|2
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32_FLOAT
block|,
literal|8
block|}
block|,
block|{
operator|&
name|copyFixedVertexData
argument_list|<
literal|3
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32B32_FLOAT
block|,
literal|12
block|}
block|,
block|{
operator|&
name|copyFixedVertexData
argument_list|<
literal|4
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
block|,
literal|16
block|}
block|,         }
block|,
block|{
comment|// normalized
block|{
operator|&
name|copyFixedVertexData
argument_list|<
literal|1
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32_FLOAT
block|,
literal|4
block|}
block|,
block|{
operator|&
name|copyFixedVertexData
argument_list|<
literal|2
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32_FLOAT
block|,
literal|8
block|}
block|,
block|{
operator|&
name|copyFixedVertexData
argument_list|<
literal|3
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32B32_FLOAT
block|,
literal|12
block|}
block|,
block|{
operator|&
name|copyFixedVertexData
argument_list|<
literal|4
argument_list|>
block|,
literal|false
block|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
block|,
literal|16
block|}
block|,         }
block|,     }
block|,
block|{
comment|// GL_FLOAT
block|{
comment|// unnormalized
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLfloat
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R32_FLOAT
block|,
literal|4
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLfloat
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R32G32_FLOAT
block|,
literal|8
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLfloat
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R32G32B32_FLOAT
block|,
literal|12
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLfloat
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
block|,
literal|16
block|}
block|,         }
block|,
block|{
comment|// normalized
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLfloat
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R32_FLOAT
block|,
literal|4
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLfloat
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R32G32_FLOAT
block|,
literal|8
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLfloat
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R32G32B32_FLOAT
block|,
literal|12
block|}
block|,
block|{
operator|&
name|copyVertexData
argument_list|<
name|GLfloat
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|>
block|,
literal|true
block|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
block|,
literal|16
block|}
block|,         }
block|,     }
block|, }
decl_stmt|;
DECL|function|getVertexConversion
specifier|const
name|VertexBuffer11
operator|::
name|VertexConverter
modifier|&
name|VertexBuffer11
operator|::
name|getVertexConversion
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attribute
parameter_list|)
block|{
name|unsigned
name|int
name|typeIndex
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|attribute
operator|.
name|mType
condition|)
block|{
case|case
name|GL_BYTE
case|:
name|typeIndex
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|GL_UNSIGNED_BYTE
case|:
name|typeIndex
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|GL_SHORT
case|:
name|typeIndex
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|GL_UNSIGNED_SHORT
case|:
name|typeIndex
operator|=
literal|3
expr_stmt|;
break|break;
case|case
name|GL_FIXED
case|:
name|typeIndex
operator|=
literal|4
expr_stmt|;
break|break;
case|case
name|GL_FLOAT
case|:
name|typeIndex
operator|=
literal|5
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
name|mPossibleTranslations
index|[
name|typeIndex
index|]
index|[
name|attribute
operator|.
name|mNormalized
condition|?
literal|1
else|:
literal|0
index|]
index|[
name|attribute
operator|.
name|mSize
operator|-
literal|1
index|]
return|;
block|}
block|}
end_namespace
end_unit
