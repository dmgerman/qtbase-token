begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// VertexBuffer.cpp: Defines the abstract VertexBuffer class and VertexBufferInterface
end_comment
begin_comment
comment|// class with derivations, classes that perform graphics API agnostic vertex buffer operations.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/VertexBuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|member|mNextSerial
name|unsigned
name|int
name|VertexBuffer
operator|::
name|mNextSerial
init|=
literal|1
decl_stmt|;
DECL|function|VertexBuffer
name|VertexBuffer
operator|::
name|VertexBuffer
parameter_list|()
block|{
name|updateSerial
argument_list|()
expr_stmt|;
block|}
DECL|function|~VertexBuffer
name|VertexBuffer
operator|::
name|~
name|VertexBuffer
parameter_list|()
block|{ }
DECL|function|updateSerial
name|void
name|VertexBuffer
operator|::
name|updateSerial
parameter_list|()
block|{
name|mSerial
operator|=
name|mNextSerial
operator|++
expr_stmt|;
block|}
DECL|function|getSerial
name|unsigned
name|int
name|VertexBuffer
operator|::
name|getSerial
parameter_list|()
specifier|const
block|{
return|return
name|mSerial
return|;
block|}
DECL|function|VertexBufferInterface
name|VertexBufferInterface
operator|::
name|VertexBufferInterface
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|bool
name|dynamic
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
block|{
name|mDynamic
operator|=
name|dynamic
expr_stmt|;
name|mWritePosition
operator|=
literal|0
expr_stmt|;
name|mReservedSpace
operator|=
literal|0
expr_stmt|;
name|mVertexBuffer
operator|=
name|renderer
operator|->
name|createVertexBuffer
argument_list|()
expr_stmt|;
block|}
DECL|function|~VertexBufferInterface
name|VertexBufferInterface
operator|::
name|~
name|VertexBufferInterface
parameter_list|()
block|{
operator|delete
name|mVertexBuffer
expr_stmt|;
block|}
DECL|function|getSerial
name|unsigned
name|int
name|VertexBufferInterface
operator|::
name|getSerial
parameter_list|()
specifier|const
block|{
return|return
name|mVertexBuffer
operator|->
name|getSerial
argument_list|()
return|;
block|}
DECL|function|getBufferSize
name|unsigned
name|int
name|VertexBufferInterface
operator|::
name|getBufferSize
parameter_list|()
specifier|const
block|{
return|return
name|mVertexBuffer
operator|->
name|getBufferSize
argument_list|()
return|;
block|}
DECL|function|setBufferSize
name|bool
name|VertexBufferInterface
operator|::
name|setBufferSize
parameter_list|(
name|unsigned
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|mVertexBuffer
operator|->
name|getBufferSize
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|mVertexBuffer
operator|->
name|initialize
argument_list|(
name|size
argument_list|,
name|mDynamic
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|mVertexBuffer
operator|->
name|setBufferSize
argument_list|(
name|size
argument_list|)
return|;
block|}
block|}
DECL|function|getWritePosition
name|unsigned
name|int
name|VertexBufferInterface
operator|::
name|getWritePosition
parameter_list|()
specifier|const
block|{
return|return
name|mWritePosition
return|;
block|}
DECL|function|setWritePosition
name|void
name|VertexBufferInterface
operator|::
name|setWritePosition
parameter_list|(
name|unsigned
name|int
name|writePosition
parameter_list|)
block|{
name|mWritePosition
operator|=
name|writePosition
expr_stmt|;
block|}
DECL|function|discard
name|bool
name|VertexBufferInterface
operator|::
name|discard
parameter_list|()
block|{
return|return
name|mVertexBuffer
operator|->
name|discard
argument_list|()
return|;
block|}
DECL|function|storeVertexAttributes
name|bool
name|VertexBufferInterface
operator|::
name|storeVertexAttributes
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
name|GLint
name|start
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instances
parameter_list|,
name|unsigned
name|int
modifier|*
name|outStreamOffset
parameter_list|)
block|{
name|unsigned
name|int
name|spaceRequired
decl_stmt|;
if|if
condition|(
operator|!
name|mVertexBuffer
operator|->
name|getSpaceRequired
argument_list|(
name|attrib
argument_list|,
name|count
argument_list|,
name|instances
argument_list|,
operator|&
name|spaceRequired
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|mWritePosition
operator|+
name|spaceRequired
operator|<
name|mWritePosition
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|reserveSpace
argument_list|(
name|mReservedSpace
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|mReservedSpace
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|mVertexBuffer
operator|->
name|storeVertexAttributes
argument_list|(
name|attrib
argument_list|,
name|start
argument_list|,
name|count
argument_list|,
name|instances
argument_list|,
name|mWritePosition
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|outStreamOffset
condition|)
block|{
operator|*
name|outStreamOffset
operator|=
name|mWritePosition
expr_stmt|;
block|}
name|mWritePosition
operator|+=
name|spaceRequired
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|storeRawData
name|bool
name|VertexBufferInterface
operator|::
name|storeRawData
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|,
name|unsigned
name|int
modifier|*
name|outStreamOffset
parameter_list|)
block|{
if|if
condition|(
name|mWritePosition
operator|+
name|size
operator|<
name|mWritePosition
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|reserveSpace
argument_list|(
name|mReservedSpace
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|mReservedSpace
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|mVertexBuffer
operator|->
name|storeRawData
argument_list|(
name|data
argument_list|,
name|size
argument_list|,
name|mWritePosition
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|outStreamOffset
condition|)
block|{
operator|*
name|outStreamOffset
operator|=
name|mWritePosition
expr_stmt|;
block|}
name|mWritePosition
operator|+=
name|size
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|reserveVertexSpace
name|bool
name|VertexBufferInterface
operator|::
name|reserveVertexSpace
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attribute
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instances
parameter_list|)
block|{
name|unsigned
name|int
name|requiredSpace
decl_stmt|;
if|if
condition|(
operator|!
name|mVertexBuffer
operator|->
name|getSpaceRequired
argument_list|(
name|attribute
argument_list|,
name|count
argument_list|,
name|instances
argument_list|,
operator|&
name|requiredSpace
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Protect against integer overflow
if|if
condition|(
name|mReservedSpace
operator|+
name|requiredSpace
operator|<
name|mReservedSpace
condition|)
block|{
return|return
literal|false
return|;
block|}
name|mReservedSpace
operator|+=
name|requiredSpace
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|reserveRawDataSpace
name|bool
name|VertexBufferInterface
operator|::
name|reserveRawDataSpace
parameter_list|(
name|unsigned
name|int
name|size
parameter_list|)
block|{
comment|// Protect against integer overflow
if|if
condition|(
name|mReservedSpace
operator|+
name|size
operator|<
name|mReservedSpace
condition|)
block|{
return|return
literal|false
return|;
block|}
name|mReservedSpace
operator|+=
name|size
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|getVertexBuffer
name|VertexBuffer
modifier|*
name|VertexBufferInterface
operator|::
name|getVertexBuffer
parameter_list|()
specifier|const
block|{
return|return
name|mVertexBuffer
return|;
block|}
DECL|function|StreamingVertexBufferInterface
name|StreamingVertexBufferInterface
operator|::
name|StreamingVertexBufferInterface
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|std
operator|::
name|size_t
name|initialSize
parameter_list|)
member_init_list|:
name|VertexBufferInterface
argument_list|(
name|renderer
argument_list|,
literal|true
argument_list|)
block|{
name|setBufferSize
argument_list|(
name|initialSize
argument_list|)
expr_stmt|;
block|}
DECL|function|~StreamingVertexBufferInterface
name|StreamingVertexBufferInterface
operator|::
name|~
name|StreamingVertexBufferInterface
parameter_list|()
block|{ }
DECL|function|reserveSpace
name|bool
name|StreamingVertexBufferInterface
operator|::
name|reserveSpace
parameter_list|(
name|unsigned
name|int
name|size
parameter_list|)
block|{
name|bool
name|result
init|=
literal|true
decl_stmt|;
name|unsigned
name|int
name|curBufferSize
init|=
name|getBufferSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|curBufferSize
condition|)
block|{
name|result
operator|=
name|setBufferSize
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|size
argument_list|,
literal|3
operator|*
name|curBufferSize
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|setWritePosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getWritePosition
argument_list|()
operator|+
name|size
operator|>
name|curBufferSize
condition|)
block|{
if|if
condition|(
operator|!
name|discard
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|setWritePosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|function|StaticVertexBufferInterface
name|StaticVertexBufferInterface
operator|::
name|StaticVertexBufferInterface
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|VertexBufferInterface
argument_list|(
name|renderer
argument_list|,
literal|false
argument_list|)
block|{ }
DECL|function|~StaticVertexBufferInterface
name|StaticVertexBufferInterface
operator|::
name|~
name|StaticVertexBufferInterface
parameter_list|()
block|{ }
DECL|function|lookupAttribute
name|bool
name|StaticVertexBufferInterface
operator|::
name|lookupAttribute
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attribute
parameter_list|,
name|unsigned
name|int
modifier|*
name|outStreamOffset
parameter_list|)
block|{
for|for
control|(
name|unsigned
name|int
name|element
init|=
literal|0
init|;
name|element
operator|<
name|mCache
operator|.
name|size
argument_list|()
condition|;
name|element
operator|++
control|)
block|{
if|if
condition|(
name|mCache
index|[
name|element
index|]
operator|.
name|type
operator|==
name|attribute
operator|.
name|mType
operator|&&
name|mCache
index|[
name|element
index|]
operator|.
name|size
operator|==
name|attribute
operator|.
name|mSize
operator|&&
name|mCache
index|[
name|element
index|]
operator|.
name|stride
operator|==
name|attribute
operator|.
name|stride
argument_list|()
operator|&&
name|mCache
index|[
name|element
index|]
operator|.
name|normalized
operator|==
name|attribute
operator|.
name|mNormalized
condition|)
block|{
if|if
condition|(
name|mCache
index|[
name|element
index|]
operator|.
name|attributeOffset
operator|==
name|attribute
operator|.
name|mOffset
operator|%
name|attribute
operator|.
name|stride
argument_list|()
condition|)
block|{
if|if
condition|(
name|outStreamOffset
condition|)
block|{
operator|*
name|outStreamOffset
operator|=
name|mCache
index|[
name|element
index|]
operator|.
name|streamOffset
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|reserveSpace
name|bool
name|StaticVertexBufferInterface
operator|::
name|reserveSpace
parameter_list|(
name|unsigned
name|int
name|size
parameter_list|)
block|{
name|unsigned
name|int
name|curSize
init|=
name|getBufferSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|curSize
operator|==
literal|0
condition|)
block|{
name|setBufferSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|curSize
operator|>=
name|size
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
comment|// Static vertex buffers can't be resized
return|return
literal|false
return|;
block|}
block|}
DECL|function|storeVertexAttributes
name|bool
name|StaticVertexBufferInterface
operator|::
name|storeVertexAttributes
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
name|GLint
name|start
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instances
parameter_list|,
name|unsigned
name|int
modifier|*
name|outStreamOffset
parameter_list|)
block|{
name|unsigned
name|int
name|streamOffset
decl_stmt|;
if|if
condition|(
name|VertexBufferInterface
operator|::
name|storeVertexAttributes
argument_list|(
name|attrib
argument_list|,
name|start
argument_list|,
name|count
argument_list|,
name|instances
argument_list|,
operator|&
name|streamOffset
argument_list|)
condition|)
block|{
name|int
name|attributeOffset
init|=
name|attrib
operator|.
name|mOffset
operator|%
name|attrib
operator|.
name|stride
argument_list|()
decl_stmt|;
name|VertexElement
name|element
init|=
block|{
name|attrib
operator|.
name|mType
block|,
name|attrib
operator|.
name|mSize
block|,
name|attrib
operator|.
name|stride
argument_list|()
block|,
name|attrib
operator|.
name|mNormalized
block|,
name|attributeOffset
block|,
name|streamOffset
block|}
decl_stmt|;
name|mCache
operator|.
name|push_back
argument_list|(
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|outStreamOffset
condition|)
block|{
operator|*
name|outStreamOffset
operator|=
name|streamOffset
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_namespace
end_unit
