begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012-2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// RenderStateCache.h: Defines rx::RenderStateCache, a cache of Direct3D render
end_comment
begin_comment
comment|// state objects.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RENDERER_RENDERSTATECACHE_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RENDERER_RENDERSTATECACHE_H_
define|#
directive|define
name|LIBGLESV2_RENDERER_RENDERSTATECACHE_H_
end_define
begin_include
include|#
directive|include
file|"libGLESv2/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|RenderStateCache
block|{
name|public
label|:
name|RenderStateCache
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|RenderStateCache
argument_list|()
expr_stmt|;
name|void
name|initialize
parameter_list|(
name|ID3D11Device
modifier|*
name|device
parameter_list|)
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
comment|// Increments refcount on the returned blend state, Release() must be called.
name|ID3D11BlendState
modifier|*
name|getBlendState
argument_list|(
specifier|const
name|gl
operator|::
name|BlendState
operator|&
name|blendState
argument_list|)
decl_stmt|;
name|ID3D11RasterizerState
modifier|*
name|getRasterizerState
argument_list|(
specifier|const
name|gl
operator|::
name|RasterizerState
operator|&
name|rasterState
argument_list|,
name|bool
name|scissorEnabled
argument_list|,
name|unsigned
name|int
name|depthSize
argument_list|)
decl_stmt|;
name|ID3D11DepthStencilState
modifier|*
name|getDepthStencilState
argument_list|(
specifier|const
name|gl
operator|::
name|DepthStencilState
operator|&
name|dsState
argument_list|)
decl_stmt|;
name|ID3D11SamplerState
modifier|*
name|getSamplerState
argument_list|(
specifier|const
name|gl
operator|::
name|SamplerState
operator|&
name|samplerState
argument_list|)
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|RenderStateCache
argument_list|)
expr_stmt|;
name|unsigned
name|long
name|long
name|mCounter
decl_stmt|;
comment|// Blend state cache
specifier|static
name|std
operator|::
name|size_t
name|hashBlendState
argument_list|(
specifier|const
name|gl
operator|::
name|BlendState
operator|&
name|blendState
argument_list|)
expr_stmt|;
specifier|static
name|bool
name|compareBlendStates
argument_list|(
specifier|const
name|gl
operator|::
name|BlendState
operator|&
name|a
argument_list|,
specifier|const
name|gl
operator|::
name|BlendState
operator|&
name|b
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|int
name|kMaxBlendStates
decl_stmt|;
typedef|typedef
name|std
operator|::
name|size_t
argument_list|(
operator|*
name|BlendStateHashFunction
argument_list|)
argument_list|(
specifier|const
name|gl
operator|::
name|BlendState
operator|&
argument_list|)
expr_stmt|;
typedef|typedef
name|bool
argument_list|(
operator|*
name|BlendStateEqualityFunction
argument_list|)
argument_list|(
specifier|const
name|gl
operator|::
name|BlendState
operator|&
argument_list|,
specifier|const
name|gl
operator|::
name|BlendState
operator|&
argument_list|)
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|ID3D11BlendState
operator|*
operator|,
name|unsigned
name|long
name|long
operator|>
name|BlendStateCounterPair
expr_stmt|;
typedef|typedef
name|std
operator|::
name|unordered_map
operator|<
name|gl
operator|::
name|BlendState
operator|,
name|BlendStateCounterPair
operator|,
name|BlendStateHashFunction
operator|,
name|BlendStateEqualityFunction
operator|>
name|BlendStateMap
expr_stmt|;
name|BlendStateMap
name|mBlendStateCache
decl_stmt|;
comment|// Rasterizer state cache
struct|struct
name|RasterizerStateKey
block|{
name|gl
operator|::
name|RasterizerState
name|rasterizerState
expr_stmt|;
name|bool
name|scissorEnabled
decl_stmt|;
name|unsigned
name|int
name|depthSize
decl_stmt|;
block|}
struct|;
specifier|static
name|std
operator|::
name|size_t
name|hashRasterizerState
argument_list|(
specifier|const
name|RasterizerStateKey
operator|&
name|rasterState
argument_list|)
expr_stmt|;
specifier|static
name|bool
name|compareRasterizerStates
parameter_list|(
specifier|const
name|RasterizerStateKey
modifier|&
name|a
parameter_list|,
specifier|const
name|RasterizerStateKey
modifier|&
name|b
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|unsigned
name|int
name|kMaxRasterizerStates
decl_stmt|;
typedef|typedef
name|std
operator|::
name|size_t
argument_list|(
operator|*
name|RasterizerStateHashFunction
argument_list|)
argument_list|(
specifier|const
name|RasterizerStateKey
operator|&
argument_list|)
expr_stmt|;
typedef|typedef
name|bool
function_decl|(
modifier|*
name|RasterizerStateEqualityFunction
function_decl|)
parameter_list|(
specifier|const
name|RasterizerStateKey
modifier|&
parameter_list|,
specifier|const
name|RasterizerStateKey
modifier|&
parameter_list|)
function_decl|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|ID3D11RasterizerState
operator|*
operator|,
name|unsigned
name|long
name|long
operator|>
name|RasterizerStateCounterPair
expr_stmt|;
typedef|typedef
name|std
operator|::
name|unordered_map
operator|<
name|RasterizerStateKey
operator|,
name|RasterizerStateCounterPair
operator|,
name|RasterizerStateHashFunction
operator|,
name|RasterizerStateEqualityFunction
operator|>
name|RasterizerStateMap
expr_stmt|;
name|RasterizerStateMap
name|mRasterizerStateCache
decl_stmt|;
comment|// Depth stencil state cache
specifier|static
name|std
operator|::
name|size_t
name|hashDepthStencilState
argument_list|(
specifier|const
name|gl
operator|::
name|DepthStencilState
operator|&
name|dsState
argument_list|)
expr_stmt|;
specifier|static
name|bool
name|compareDepthStencilStates
argument_list|(
specifier|const
name|gl
operator|::
name|DepthStencilState
operator|&
name|a
argument_list|,
specifier|const
name|gl
operator|::
name|DepthStencilState
operator|&
name|b
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|int
name|kMaxDepthStencilStates
decl_stmt|;
typedef|typedef
name|std
operator|::
name|size_t
argument_list|(
operator|*
name|DepthStencilStateHashFunction
argument_list|)
argument_list|(
specifier|const
name|gl
operator|::
name|DepthStencilState
operator|&
argument_list|)
expr_stmt|;
typedef|typedef
name|bool
argument_list|(
operator|*
name|DepthStencilStateEqualityFunction
argument_list|)
argument_list|(
specifier|const
name|gl
operator|::
name|DepthStencilState
operator|&
argument_list|,
specifier|const
name|gl
operator|::
name|DepthStencilState
operator|&
argument_list|)
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|ID3D11DepthStencilState
operator|*
operator|,
name|unsigned
name|long
name|long
operator|>
name|DepthStencilStateCounterPair
expr_stmt|;
typedef|typedef
name|std
operator|::
name|unordered_map
operator|<
name|gl
operator|::
name|DepthStencilState
operator|,
name|DepthStencilStateCounterPair
operator|,
name|DepthStencilStateHashFunction
operator|,
name|DepthStencilStateEqualityFunction
operator|>
name|DepthStencilStateMap
expr_stmt|;
name|DepthStencilStateMap
name|mDepthStencilStateCache
decl_stmt|;
comment|// Sample state cache
specifier|static
name|std
operator|::
name|size_t
name|hashSamplerState
argument_list|(
specifier|const
name|gl
operator|::
name|SamplerState
operator|&
name|samplerState
argument_list|)
expr_stmt|;
specifier|static
name|bool
name|compareSamplerStates
argument_list|(
specifier|const
name|gl
operator|::
name|SamplerState
operator|&
name|a
argument_list|,
specifier|const
name|gl
operator|::
name|SamplerState
operator|&
name|b
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|int
name|kMaxSamplerStates
decl_stmt|;
typedef|typedef
name|std
operator|::
name|size_t
argument_list|(
operator|*
name|SamplerStateHashFunction
argument_list|)
argument_list|(
specifier|const
name|gl
operator|::
name|SamplerState
operator|&
argument_list|)
expr_stmt|;
typedef|typedef
name|bool
argument_list|(
operator|*
name|SamplerStateEqualityFunction
argument_list|)
argument_list|(
specifier|const
name|gl
operator|::
name|SamplerState
operator|&
argument_list|,
specifier|const
name|gl
operator|::
name|SamplerState
operator|&
argument_list|)
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|ID3D11SamplerState
operator|*
operator|,
name|unsigned
name|long
name|long
operator|>
name|SamplerStateCounterPair
expr_stmt|;
typedef|typedef
name|std
operator|::
name|unordered_map
operator|<
name|gl
operator|::
name|SamplerState
operator|,
name|SamplerStateCounterPair
operator|,
name|SamplerStateHashFunction
operator|,
name|SamplerStateEqualityFunction
operator|>
name|SamplerStateMap
expr_stmt|;
name|SamplerStateMap
name|mSamplerStateCache
decl_stmt|;
name|ID3D11Device
modifier|*
name|mDevice
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RENDERER_RENDERSTATECACHE_H_
end_comment
end_unit
