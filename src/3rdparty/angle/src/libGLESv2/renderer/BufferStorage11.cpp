begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// BufferStorage11.cpp Defines the BufferStorage11 class.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/BufferStorage11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer11.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|BufferStorage11
name|BufferStorage11
operator|::
name|BufferStorage11
parameter_list|(
name|Renderer11
modifier|*
name|renderer
parameter_list|)
block|{
name|mRenderer
operator|=
name|renderer
expr_stmt|;
name|mStagingBuffer
operator|=
name|NULL
expr_stmt|;
name|mStagingBufferSize
operator|=
literal|0
expr_stmt|;
name|mBuffer
operator|=
name|NULL
expr_stmt|;
name|mBufferSize
operator|=
literal|0
expr_stmt|;
name|mSize
operator|=
literal|0
expr_stmt|;
name|mResolvedData
operator|=
name|NULL
expr_stmt|;
name|mResolvedDataSize
operator|=
literal|0
expr_stmt|;
name|mResolvedDataValid
operator|=
literal|false
expr_stmt|;
name|mReadUsageCount
operator|=
literal|0
expr_stmt|;
name|mWriteUsageCount
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|~BufferStorage11
name|BufferStorage11
operator|::
name|~
name|BufferStorage11
parameter_list|()
block|{
if|if
condition|(
name|mStagingBuffer
condition|)
block|{
name|mStagingBuffer
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mStagingBuffer
operator|=
name|NULL
expr_stmt|;
block|}
if|if
condition|(
name|mBuffer
condition|)
block|{
name|mBuffer
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mBuffer
operator|=
name|NULL
expr_stmt|;
block|}
if|if
condition|(
name|mResolvedData
condition|)
block|{
name|free
argument_list|(
name|mResolvedData
argument_list|)
expr_stmt|;
name|mResolvedData
operator|=
name|NULL
expr_stmt|;
block|}
block|}
DECL|function|makeBufferStorage11
name|BufferStorage11
modifier|*
name|BufferStorage11
operator|::
name|makeBufferStorage11
parameter_list|(
name|BufferStorage
modifier|*
name|bufferStorage
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|BufferStorage11
operator|*
argument_list|,
name|bufferStorage
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|BufferStorage11
operator|*
argument_list|>
argument_list|(
name|bufferStorage
argument_list|)
return|;
block|}
DECL|function|getData
name|void
modifier|*
name|BufferStorage11
operator|::
name|getData
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mResolvedDataValid
condition|)
block|{
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|context
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|HRESULT
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|mStagingBuffer
operator|||
name|mStagingBufferSize
operator|<
name|mBufferSize
condition|)
block|{
if|if
condition|(
name|mStagingBuffer
condition|)
block|{
name|mStagingBuffer
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mStagingBuffer
operator|=
name|NULL
expr_stmt|;
name|mStagingBufferSize
operator|=
literal|0
expr_stmt|;
block|}
name|D3D11_BUFFER_DESC
name|bufferDesc
decl_stmt|;
name|bufferDesc
operator|.
name|ByteWidth
operator|=
name|mSize
expr_stmt|;
name|bufferDesc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_STAGING
expr_stmt|;
name|bufferDesc
operator|.
name|BindFlags
operator|=
literal|0
expr_stmt|;
name|bufferDesc
operator|.
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_READ
operator||
name|D3D11_CPU_ACCESS_WRITE
expr_stmt|;
name|bufferDesc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|bufferDesc
operator|.
name|StructureByteStride
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateBuffer
argument_list|(
operator|&
name|bufferDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|mStagingBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
operator|(
name|void
operator|*
operator|)
name|NULL
argument_list|)
return|;
block|}
name|mStagingBufferSize
operator|=
name|bufferDesc
operator|.
name|ByteWidth
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mResolvedData
operator|||
name|mResolvedDataSize
operator|<
name|mBufferSize
condition|)
block|{
name|free
argument_list|(
name|mResolvedData
argument_list|)
expr_stmt|;
name|mResolvedData
operator|=
name|malloc
argument_list|(
name|mSize
argument_list|)
expr_stmt|;
name|mResolvedDataSize
operator|=
name|mSize
expr_stmt|;
block|}
name|D3D11_BOX
name|srcBox
decl_stmt|;
name|srcBox
operator|.
name|left
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|right
operator|=
name|mSize
expr_stmt|;
name|srcBox
operator|.
name|top
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|bottom
operator|=
literal|1
expr_stmt|;
name|srcBox
operator|.
name|front
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|back
operator|=
literal|1
expr_stmt|;
name|context
operator|->
name|CopySubresourceRegion
argument_list|(
name|mStagingBuffer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|mBuffer
argument_list|,
literal|0
argument_list|,
operator|&
name|srcBox
argument_list|)
expr_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|result
operator|=
name|context
operator|->
name|Map
argument_list|(
name|mStagingBuffer
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_READ
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
operator|(
name|void
operator|*
operator|)
name|NULL
argument_list|)
return|;
block|}
name|memcpy
argument_list|(
name|mResolvedData
argument_list|,
name|mappedResource
operator|.
name|pData
argument_list|,
name|mSize
argument_list|)
expr_stmt|;
name|context
operator|->
name|Unmap
argument_list|(
name|mStagingBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mResolvedDataValid
operator|=
literal|true
expr_stmt|;
block|}
name|mReadUsageCount
operator|=
literal|0
expr_stmt|;
return|return
name|mResolvedData
return|;
block|}
DECL|function|setData
name|void
name|BufferStorage11
operator|::
name|setData
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|,
name|unsigned
name|int
name|offset
parameter_list|)
block|{
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|context
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|HRESULT
name|result
decl_stmt|;
name|unsigned
name|int
name|requiredBufferSize
init|=
name|size
operator|+
name|offset
decl_stmt|;
name|unsigned
name|int
name|requiredStagingSize
init|=
name|size
decl_stmt|;
name|bool
name|directInitialization
init|=
name|offset
operator|==
literal|0
operator|&&
operator|(
operator|!
name|mBuffer
operator|||
name|mBufferSize
operator|<
name|size
operator|+
name|offset
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|directInitialization
condition|)
block|{
if|if
condition|(
operator|!
name|mStagingBuffer
operator|||
name|mStagingBufferSize
operator|<
name|requiredStagingSize
condition|)
block|{
if|if
condition|(
name|mStagingBuffer
condition|)
block|{
name|mStagingBuffer
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mStagingBuffer
operator|=
name|NULL
expr_stmt|;
name|mStagingBufferSize
operator|=
literal|0
expr_stmt|;
block|}
name|D3D11_BUFFER_DESC
name|bufferDesc
decl_stmt|;
name|bufferDesc
operator|.
name|ByteWidth
operator|=
name|size
expr_stmt|;
name|bufferDesc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_STAGING
expr_stmt|;
name|bufferDesc
operator|.
name|BindFlags
operator|=
literal|0
expr_stmt|;
name|bufferDesc
operator|.
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_READ
operator||
name|D3D11_CPU_ACCESS_WRITE
expr_stmt|;
name|bufferDesc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|bufferDesc
operator|.
name|StructureByteStride
operator|=
literal|0
expr_stmt|;
name|D3D11_SUBRESOURCE_DATA
name|initialData
decl_stmt|;
name|initialData
operator|.
name|pSysMem
operator|=
name|data
expr_stmt|;
name|initialData
operator|.
name|SysMemPitch
operator|=
name|size
expr_stmt|;
name|initialData
operator|.
name|SysMemSlicePitch
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateBuffer
argument_list|(
operator|&
name|bufferDesc
argument_list|,
operator|&
name|initialData
argument_list|,
operator|&
name|mStagingBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
name|mStagingBufferSize
operator|=
name|size
expr_stmt|;
block|}
else|else
block|{
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|result
operator|=
name|context
operator|->
name|Map
argument_list|(
name|mStagingBuffer
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
if|if
condition|(
name|data
condition|)
name|memcpy
argument_list|(
name|mappedResource
operator|.
name|pData
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|context
operator|->
name|Unmap
argument_list|(
name|mStagingBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|mBuffer
operator|||
name|mBufferSize
operator|<
name|size
operator|+
name|offset
condition|)
block|{
name|D3D11_BUFFER_DESC
name|bufferDesc
decl_stmt|;
name|bufferDesc
operator|.
name|ByteWidth
operator|=
name|requiredBufferSize
expr_stmt|;
name|bufferDesc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_DEFAULT
expr_stmt|;
name|bufferDesc
operator|.
name|BindFlags
operator|=
name|D3D11_BIND_VERTEX_BUFFER
operator||
name|D3D11_BIND_INDEX_BUFFER
expr_stmt|;
name|bufferDesc
operator|.
name|CPUAccessFlags
operator|=
literal|0
expr_stmt|;
name|bufferDesc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|bufferDesc
operator|.
name|StructureByteStride
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|directInitialization
condition|)
block|{
comment|// Since the data will fill the entire buffer (being larger than the initial size and having
comment|// no offset), the buffer can be initialized with the data so no staging buffer is required
comment|// No longer need the old buffer
if|if
condition|(
name|mBuffer
condition|)
block|{
name|mBuffer
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mBuffer
operator|=
name|NULL
expr_stmt|;
name|mBufferSize
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|data
condition|)
block|{
name|D3D11_SUBRESOURCE_DATA
name|initialData
decl_stmt|;
name|initialData
operator|.
name|pSysMem
operator|=
name|data
expr_stmt|;
name|initialData
operator|.
name|SysMemPitch
operator|=
name|size
expr_stmt|;
name|initialData
operator|.
name|SysMemSlicePitch
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateBuffer
argument_list|(
operator|&
name|bufferDesc
argument_list|,
operator|&
name|initialData
argument_list|,
operator|&
name|mBuffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|device
operator|->
name|CreateBuffer
argument_list|(
operator|&
name|bufferDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|mBuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|mBuffer
operator|&&
name|offset
operator|>
literal|0
condition|)
block|{
comment|// If offset is greater than zero and the buffer is non-null, need to preserve the data from
comment|// the old buffer up to offset
name|ID3D11Buffer
modifier|*
name|newBuffer
init|=
name|NULL
decl_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateBuffer
argument_list|(
operator|&
name|bufferDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|newBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
name|D3D11_BOX
name|srcBox
decl_stmt|;
name|srcBox
operator|.
name|left
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|right
operator|=
name|std
operator|::
name|min
argument_list|(
name|offset
argument_list|,
name|mBufferSize
argument_list|)
expr_stmt|;
name|srcBox
operator|.
name|top
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|bottom
operator|=
literal|1
expr_stmt|;
name|srcBox
operator|.
name|front
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|back
operator|=
literal|1
expr_stmt|;
name|context
operator|->
name|CopySubresourceRegion
argument_list|(
name|newBuffer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|mBuffer
argument_list|,
literal|0
argument_list|,
operator|&
name|srcBox
argument_list|)
expr_stmt|;
name|mBuffer
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mBuffer
operator|=
name|newBuffer
expr_stmt|;
block|}
else|else
block|{
comment|// Simple case, nothing needs to be copied from the old buffer to the new one, just create
comment|// a new buffer
comment|// No longer need the old buffer
if|if
condition|(
name|mBuffer
condition|)
block|{
name|mBuffer
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mBuffer
operator|=
name|NULL
expr_stmt|;
name|mBufferSize
operator|=
literal|0
expr_stmt|;
block|}
comment|// Create a new buffer for data storage
name|result
operator|=
name|device
operator|->
name|CreateBuffer
argument_list|(
operator|&
name|bufferDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|mBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
block|}
name|updateSerial
argument_list|()
expr_stmt|;
name|mBufferSize
operator|=
name|bufferDesc
operator|.
name|ByteWidth
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|directInitialization
condition|)
block|{
name|ASSERT
argument_list|(
name|mStagingBuffer
operator|&&
name|mStagingBufferSize
operator|>=
name|requiredStagingSize
argument_list|)
expr_stmt|;
comment|// Data is already put into the staging buffer, copy it over to the data buffer
name|D3D11_BOX
name|srcBox
decl_stmt|;
name|srcBox
operator|.
name|left
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|right
operator|=
name|size
expr_stmt|;
name|srcBox
operator|.
name|top
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|bottom
operator|=
literal|1
expr_stmt|;
name|srcBox
operator|.
name|front
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|back
operator|=
literal|1
expr_stmt|;
name|context
operator|->
name|CopySubresourceRegion
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|mStagingBuffer
argument_list|,
literal|0
argument_list|,
operator|&
name|srcBox
argument_list|)
expr_stmt|;
block|}
name|mSize
operator|=
name|std
operator|::
name|max
argument_list|(
name|mSize
argument_list|,
name|offset
operator|+
name|size
argument_list|)
expr_stmt|;
name|mWriteUsageCount
operator|=
literal|0
expr_stmt|;
name|mResolvedDataValid
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|clear
name|void
name|BufferStorage11
operator|::
name|clear
parameter_list|()
block|{
name|mResolvedDataValid
operator|=
literal|false
expr_stmt|;
name|mSize
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|getSize
name|unsigned
name|int
name|BufferStorage11
operator|::
name|getSize
parameter_list|()
specifier|const
block|{
return|return
name|mSize
return|;
block|}
DECL|function|supportsDirectBinding
name|bool
name|BufferStorage11
operator|::
name|supportsDirectBinding
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
DECL|function|markBufferUsage
name|void
name|BufferStorage11
operator|::
name|markBufferUsage
parameter_list|()
block|{
name|mReadUsageCount
operator|++
expr_stmt|;
name|mWriteUsageCount
operator|++
expr_stmt|;
specifier|static
specifier|const
name|unsigned
name|int
name|usageLimit
init|=
literal|5
decl_stmt|;
if|if
condition|(
name|mReadUsageCount
operator|>
name|usageLimit
operator|&&
name|mResolvedData
condition|)
block|{
name|free
argument_list|(
name|mResolvedData
argument_list|)
expr_stmt|;
name|mResolvedData
operator|=
name|NULL
expr_stmt|;
name|mResolvedDataSize
operator|=
literal|0
expr_stmt|;
name|mResolvedDataValid
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|mReadUsageCount
operator|>
name|usageLimit
operator|&&
name|mWriteUsageCount
operator|>
name|usageLimit
operator|&&
name|mStagingBuffer
condition|)
block|{
name|mStagingBuffer
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mStagingBuffer
operator|=
name|NULL
expr_stmt|;
name|mStagingBufferSize
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|function|getBuffer
name|ID3D11Buffer
modifier|*
name|BufferStorage11
operator|::
name|getBuffer
parameter_list|()
specifier|const
block|{
return|return
name|mBuffer
return|;
block|}
block|}
end_namespace
end_unit
