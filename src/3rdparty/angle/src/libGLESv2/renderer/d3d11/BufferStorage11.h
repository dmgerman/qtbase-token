begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// BufferStorage11.h Defines the BufferStorage11 class.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RENDERER_BUFFERSTORAGE11_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RENDERER_BUFFERSTORAGE11_H_
define|#
directive|define
name|LIBGLESV2_RENDERER_BUFFERSTORAGE11_H_
end_define
begin_include
include|#
directive|include
file|"libGLESv2/renderer/BufferStorage.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|Renderer
decl_stmt|;
name|class
name|Renderer11
decl_stmt|;
name|class
name|DirectBufferStorage11
decl_stmt|;
enum|enum
name|BufferUsage
block|{
name|BUFFER_USAGE_VERTEX
block|,
name|BUFFER_USAGE_INDEX
block|, }
enum|;
name|class
name|BufferStorage11
range|:
name|public
name|BufferStorage
block|{
name|public
operator|:
name|explicit
name|BufferStorage11
argument_list|(
name|Renderer11
operator|*
name|renderer
argument_list|)
block|;
name|virtual
operator|~
name|BufferStorage11
argument_list|()
block|;
specifier|static
name|BufferStorage11
operator|*
name|makeBufferStorage11
argument_list|(
name|BufferStorage
operator|*
name|bufferStorage
argument_list|)
block|;
name|virtual
name|void
operator|*
name|getData
argument_list|()
block|;
name|virtual
name|void
name|setData
argument_list|(
argument|const void* data
argument_list|,
argument|unsigned int size
argument_list|,
argument|unsigned int offset
argument_list|)
block|;
name|virtual
name|void
name|copyData
argument_list|(
argument|BufferStorage* sourceStorage
argument_list|,
argument|unsigned int size
argument_list|,
argument|unsigned int sourceOffset
argument_list|,
argument|unsigned int destOffset
argument_list|)
block|;
name|virtual
name|void
name|clear
argument_list|()
block|;
name|virtual
name|unsigned
name|int
name|getSize
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|supportsDirectBinding
argument_list|()
specifier|const
block|;
name|ID3D11Buffer
operator|*
name|getBuffer
argument_list|(
argument|BufferUsage usage
argument_list|)
block|;
name|private
operator|:
name|Renderer11
operator|*
name|mRenderer
block|;
name|ID3D11Buffer
operator|*
name|mStagingBuffer
block|;
name|unsigned
name|int
name|mStagingBufferSize
block|;
name|std
operator|::
name|map
operator|<
name|BufferUsage
block|,
name|DirectBufferStorage11
operator|*
operator|>
name|mDirectBuffers
block|;
name|unsigned
name|int
name|mSize
block|;
name|void
operator|*
name|mResolvedData
block|;
name|unsigned
name|int
name|mResolvedDataSize
block|;
name|bool
name|mResolvedDataValid
block|;
name|unsigned
name|int
name|mReadUsageCount
block|;
name|unsigned
name|int
name|mWriteUsageCount
block|;
name|void
name|markBufferUsage
argument_list|()
block|; }
decl_stmt|;
comment|// Each instance of BufferStorageD3DBuffer11 is specialized for a class of D3D binding points
comment|// - vertex buffers
comment|// - index buffers
name|class
name|DirectBufferStorage11
block|{
name|public
label|:
name|DirectBufferStorage11
argument_list|(
argument|Renderer11 *renderer
argument_list|,
argument|BufferUsage usage
argument_list|)
empty_stmt|;
operator|~
name|DirectBufferStorage11
argument_list|()
expr_stmt|;
name|BufferUsage
name|getUsage
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|updateFromStagingBuffer
parameter_list|(
name|ID3D11Buffer
modifier|*
name|stagingBuffer
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|offset
parameter_list|)
function_decl|;
name|ID3D11Buffer
modifier|*
name|getD3DBuffer
parameter_list|()
block|{
return|return
name|mDirectBuffer
return|;
block|}
name|bool
name|isDirty
argument_list|()
specifier|const
block|{
return|return
name|mDirty
return|;
block|}
name|void
name|markDirty
parameter_list|()
block|{
name|mDirty
operator|=
name|true
expr_stmt|;
block|}
name|private
label|:
name|Renderer11
modifier|*
name|mRenderer
decl_stmt|;
specifier|const
name|BufferUsage
name|mUsage
decl_stmt|;
name|ID3D11Buffer
modifier|*
name|mDirectBuffer
decl_stmt|;
name|size_t
name|mBufferSize
decl_stmt|;
name|bool
name|mDirty
decl_stmt|;
specifier|static
name|void
name|fillBufferDesc
parameter_list|(
name|D3D11_BUFFER_DESC
modifier|*
name|bufferDesc
parameter_list|,
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|BufferUsage
name|usage
parameter_list|,
name|unsigned
name|int
name|bufferSize
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RENDERER_BUFFERSTORAGE11_H_
end_comment
end_unit
