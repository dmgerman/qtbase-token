begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Image9.cpp: Implements the rx::Image9 class, which acts as the interface to
end_comment
begin_comment
comment|// the actual underlying surfaces of a Texture.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d9/Image9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d9/Renderer9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d9/RenderTarget9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d9/TextureStorage9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d9/renderer9_utils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/generatemip.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|Image9
name|Image9
operator|::
name|Image9
parameter_list|()
block|{
name|mSurface
operator|=
name|NULL
expr_stmt|;
name|mRenderer
operator|=
name|NULL
expr_stmt|;
name|mD3DPool
operator|=
name|D3DPOOL_SYSTEMMEM
expr_stmt|;
name|mD3DFormat
operator|=
name|D3DFMT_UNKNOWN
expr_stmt|;
block|}
DECL|function|~Image9
name|Image9
operator|::
name|~
name|Image9
parameter_list|()
block|{
if|if
condition|(
name|mSurface
condition|)
block|{
name|mSurface
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|generateMip
name|void
name|Image9
operator|::
name|generateMip
parameter_list|(
name|IDirect3DSurface9
modifier|*
name|destSurface
parameter_list|,
name|IDirect3DSurface9
modifier|*
name|sourceSurface
parameter_list|)
block|{
name|D3DSURFACE_DESC
name|destDesc
decl_stmt|;
name|HRESULT
name|result
init|=
name|destSurface
operator|->
name|GetDesc
argument_list|(
operator|&
name|destDesc
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|D3DSURFACE_DESC
name|sourceDesc
decl_stmt|;
name|result
operator|=
name|sourceSurface
operator|->
name|GetDesc
argument_list|(
operator|&
name|sourceDesc
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|sourceDesc
operator|.
name|Format
operator|==
name|destDesc
operator|.
name|Format
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|sourceDesc
operator|.
name|Width
operator|==
literal|1
operator|||
name|sourceDesc
operator|.
name|Width
operator|/
literal|2
operator|==
name|destDesc
operator|.
name|Width
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|sourceDesc
operator|.
name|Height
operator|==
literal|1
operator|||
name|sourceDesc
operator|.
name|Height
operator|/
literal|2
operator|==
name|destDesc
operator|.
name|Height
argument_list|)
expr_stmt|;
name|D3DLOCKED_RECT
name|sourceLocked
init|=
block|{
literal|0
block|}
decl_stmt|;
name|result
operator|=
name|sourceSurface
operator|->
name|LockRect
argument_list|(
operator|&
name|sourceLocked
argument_list|,
name|NULL
argument_list|,
name|D3DLOCK_READONLY
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|D3DLOCKED_RECT
name|destLocked
init|=
block|{
literal|0
block|}
decl_stmt|;
name|result
operator|=
name|destSurface
operator|->
name|LockRect
argument_list|(
operator|&
name|destLocked
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|sourceData
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|sourceLocked
operator|.
name|pBits
argument_list|)
decl_stmt|;
name|unsigned
name|char
modifier|*
name|destData
init|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|destLocked
operator|.
name|pBits
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceData
operator|&&
name|destData
condition|)
block|{
switch|switch
condition|(
name|sourceDesc
operator|.
name|Format
condition|)
block|{
case|case
name|D3DFMT_L8
case|:
name|GenerateMip
argument_list|<
name|L8
argument_list|>
argument_list|(
name|sourceDesc
operator|.
name|Width
argument_list|,
name|sourceDesc
operator|.
name|Height
argument_list|,
name|sourceData
argument_list|,
name|sourceLocked
operator|.
name|Pitch
argument_list|,
name|destData
argument_list|,
name|destLocked
operator|.
name|Pitch
argument_list|)
expr_stmt|;
break|break;
case|case
name|D3DFMT_A8L8
case|:
name|GenerateMip
argument_list|<
name|A8L8
argument_list|>
argument_list|(
name|sourceDesc
operator|.
name|Width
argument_list|,
name|sourceDesc
operator|.
name|Height
argument_list|,
name|sourceData
argument_list|,
name|sourceLocked
operator|.
name|Pitch
argument_list|,
name|destData
argument_list|,
name|destLocked
operator|.
name|Pitch
argument_list|)
expr_stmt|;
break|break;
case|case
name|D3DFMT_A8R8G8B8
case|:
case|case
name|D3DFMT_X8R8G8B8
case|:
name|GenerateMip
argument_list|<
name|A8R8G8B8
argument_list|>
argument_list|(
name|sourceDesc
operator|.
name|Width
argument_list|,
name|sourceDesc
operator|.
name|Height
argument_list|,
name|sourceData
argument_list|,
name|sourceLocked
operator|.
name|Pitch
argument_list|,
name|destData
argument_list|,
name|destLocked
operator|.
name|Pitch
argument_list|)
expr_stmt|;
break|break;
case|case
name|D3DFMT_A16B16G16R16F
case|:
name|GenerateMip
argument_list|<
name|A16B16G16R16F
argument_list|>
argument_list|(
name|sourceDesc
operator|.
name|Width
argument_list|,
name|sourceDesc
operator|.
name|Height
argument_list|,
name|sourceData
argument_list|,
name|sourceLocked
operator|.
name|Pitch
argument_list|,
name|destData
argument_list|,
name|destLocked
operator|.
name|Pitch
argument_list|)
expr_stmt|;
break|break;
case|case
name|D3DFMT_A32B32G32R32F
case|:
name|GenerateMip
argument_list|<
name|A32B32G32R32F
argument_list|>
argument_list|(
name|sourceDesc
operator|.
name|Width
argument_list|,
name|sourceDesc
operator|.
name|Height
argument_list|,
name|sourceData
argument_list|,
name|sourceLocked
operator|.
name|Pitch
argument_list|,
name|destData
argument_list|,
name|destLocked
operator|.
name|Pitch
argument_list|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
name|destSurface
operator|->
name|UnlockRect
argument_list|()
expr_stmt|;
name|sourceSurface
operator|->
name|UnlockRect
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|makeImage9
name|Image9
modifier|*
name|Image9
operator|::
name|makeImage9
parameter_list|(
name|Image
modifier|*
name|img
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|rx
operator|::
name|Image9
operator|*
argument_list|,
name|img
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|rx
operator|::
name|Image9
operator|*
argument_list|>
argument_list|(
name|img
argument_list|)
return|;
block|}
DECL|function|generateMipmap
name|void
name|Image9
operator|::
name|generateMipmap
parameter_list|(
name|Image9
modifier|*
name|dest
parameter_list|,
name|Image9
modifier|*
name|source
parameter_list|)
block|{
name|IDirect3DSurface9
modifier|*
name|sourceSurface
init|=
name|source
operator|->
name|getSurface
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceSurface
operator|==
name|NULL
condition|)
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
name|IDirect3DSurface9
modifier|*
name|destSurface
init|=
name|dest
operator|->
name|getSurface
argument_list|()
decl_stmt|;
name|generateMip
argument_list|(
name|destSurface
argument_list|,
name|sourceSurface
argument_list|)
expr_stmt|;
name|dest
operator|->
name|markDirty
argument_list|()
expr_stmt|;
block|}
DECL|function|copyLockableSurfaces
name|void
name|Image9
operator|::
name|copyLockableSurfaces
parameter_list|(
name|IDirect3DSurface9
modifier|*
name|dest
parameter_list|,
name|IDirect3DSurface9
modifier|*
name|source
parameter_list|)
block|{
name|D3DLOCKED_RECT
name|sourceLock
init|=
block|{
literal|0
block|}
decl_stmt|;
name|D3DLOCKED_RECT
name|destLock
init|=
block|{
literal|0
block|}
decl_stmt|;
name|source
operator|->
name|LockRect
argument_list|(
operator|&
name|sourceLock
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dest
operator|->
name|LockRect
argument_list|(
operator|&
name|destLock
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceLock
operator|.
name|pBits
operator|&&
name|destLock
operator|.
name|pBits
condition|)
block|{
name|D3DSURFACE_DESC
name|desc
decl_stmt|;
name|source
operator|->
name|GetDesc
argument_list|(
operator|&
name|desc
argument_list|)
expr_stmt|;
name|int
name|rows
init|=
name|d3d9
operator|::
name|IsCompressedFormat
argument_list|(
name|desc
operator|.
name|Format
argument_list|)
condition|?
name|desc
operator|.
name|Height
operator|/
literal|4
else|:
name|desc
operator|.
name|Height
decl_stmt|;
name|int
name|bytes
init|=
name|d3d9
operator|::
name|ComputeRowSize
argument_list|(
name|desc
operator|.
name|Format
argument_list|,
name|desc
operator|.
name|Width
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|bytes
operator|<=
name|sourceLock
operator|.
name|Pitch
operator|&&
name|bytes
operator|<=
name|destLock
operator|.
name|Pitch
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
name|i
operator|++
control|)
block|{
name|memcpy
argument_list|(
operator|(
name|char
operator|*
operator|)
name|destLock
operator|.
name|pBits
operator|+
name|destLock
operator|.
name|Pitch
operator|*
name|i
argument_list|,
operator|(
name|char
operator|*
operator|)
name|sourceLock
operator|.
name|pBits
operator|+
name|sourceLock
operator|.
name|Pitch
operator|*
name|i
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
name|source
operator|->
name|UnlockRect
argument_list|()
expr_stmt|;
name|dest
operator|->
name|UnlockRect
argument_list|()
expr_stmt|;
block|}
else|else
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
DECL|function|redefine
name|bool
name|Image9
operator|::
name|redefine
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|GLint
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|bool
name|forceRelease
parameter_list|)
block|{
if|if
condition|(
name|mWidth
operator|!=
name|width
operator|||
name|mHeight
operator|!=
name|height
operator|||
name|mInternalFormat
operator|!=
name|internalformat
operator|||
name|forceRelease
condition|)
block|{
name|mRenderer
operator|=
name|Renderer9
operator|::
name|makeRenderer9
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
name|mWidth
operator|=
name|width
expr_stmt|;
name|mHeight
operator|=
name|height
expr_stmt|;
name|mInternalFormat
operator|=
name|internalformat
expr_stmt|;
comment|// compute the d3d format that will be used
name|mD3DFormat
operator|=
name|mRenderer
operator|->
name|ConvertTextureInternalFormat
argument_list|(
name|internalformat
argument_list|)
expr_stmt|;
name|mActualFormat
operator|=
name|d3d9_gl
operator|::
name|GetEquivalentFormat
argument_list|(
name|mD3DFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSurface
condition|)
block|{
name|mSurface
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mSurface
operator|=
name|NULL
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|createSurface
name|void
name|Image9
operator|::
name|createSurface
parameter_list|()
block|{
if|if
condition|(
name|mSurface
condition|)
block|{
return|return;
block|}
name|IDirect3DTexture9
modifier|*
name|newTexture
init|=
name|NULL
decl_stmt|;
name|IDirect3DSurface9
modifier|*
name|newSurface
init|=
name|NULL
decl_stmt|;
specifier|const
name|D3DPOOL
name|poolToUse
init|=
name|D3DPOOL_SYSTEMMEM
decl_stmt|;
specifier|const
name|D3DFORMAT
name|d3dFormat
init|=
name|getD3DFormat
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|d3dFormat
operator|!=
name|D3DFMT_INTZ
argument_list|)
expr_stmt|;
comment|// We should never get here for depth textures
if|if
condition|(
name|mWidth
operator|!=
literal|0
operator|&&
name|mHeight
operator|!=
literal|0
condition|)
block|{
name|int
name|levelToFetch
init|=
literal|0
decl_stmt|;
name|GLsizei
name|requestWidth
init|=
name|mWidth
decl_stmt|;
name|GLsizei
name|requestHeight
init|=
name|mHeight
decl_stmt|;
name|gl
operator|::
name|MakeValidSize
argument_list|(
literal|true
argument_list|,
name|gl
operator|::
name|IsCompressed
argument_list|(
name|mInternalFormat
argument_list|)
argument_list|,
operator|&
name|requestWidth
argument_list|,
operator|&
name|requestHeight
argument_list|,
operator|&
name|levelToFetch
argument_list|)
expr_stmt|;
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateTexture
argument_list|(
name|requestWidth
argument_list|,
name|requestHeight
argument_list|,
name|levelToFetch
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
name|d3dFormat
argument_list|,
name|poolToUse
argument_list|,
operator|&
name|newTexture
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|D3DERR_OUTOFVIDEOMEMORY
operator|||
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
name|ERR
argument_list|(
literal|"Creating image surface failed."
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
name|newTexture
operator|->
name|GetSurfaceLevel
argument_list|(
name|levelToFetch
argument_list|,
operator|&
name|newSurface
argument_list|)
expr_stmt|;
name|newTexture
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
name|mSurface
operator|=
name|newSurface
expr_stmt|;
name|mDirty
operator|=
literal|false
expr_stmt|;
name|mD3DPool
operator|=
name|poolToUse
expr_stmt|;
block|}
DECL|function|lock
name|HRESULT
name|Image9
operator|::
name|lock
parameter_list|(
name|D3DLOCKED_RECT
modifier|*
name|lockedRect
parameter_list|,
specifier|const
name|RECT
modifier|*
name|rect
parameter_list|)
block|{
name|createSurface
argument_list|()
expr_stmt|;
name|HRESULT
name|result
init|=
name|D3DERR_INVALIDCALL
decl_stmt|;
if|if
condition|(
name|mSurface
condition|)
block|{
name|result
operator|=
name|mSurface
operator|->
name|LockRect
argument_list|(
name|lockedRect
argument_list|,
name|rect
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|mDirty
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|function|unlock
name|void
name|Image9
operator|::
name|unlock
parameter_list|()
block|{
if|if
condition|(
name|mSurface
condition|)
block|{
name|HRESULT
name|result
init|=
name|mSurface
operator|->
name|UnlockRect
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|isRenderableFormat
name|bool
name|Image9
operator|::
name|isRenderableFormat
parameter_list|()
specifier|const
block|{
return|return
name|TextureStorage9
operator|::
name|IsTextureFormatRenderable
argument_list|(
name|getD3DFormat
argument_list|()
argument_list|)
return|;
block|}
DECL|function|getD3DFormat
name|D3DFORMAT
name|Image9
operator|::
name|getD3DFormat
parameter_list|()
specifier|const
block|{
comment|// this should only happen if the image hasn't been redefined first
comment|// which would be a bug by the caller
name|ASSERT
argument_list|(
name|mD3DFormat
operator|!=
name|D3DFMT_UNKNOWN
argument_list|)
expr_stmt|;
return|return
name|mD3DFormat
return|;
block|}
DECL|function|getSurface
name|IDirect3DSurface9
modifier|*
name|Image9
operator|::
name|getSurface
parameter_list|()
block|{
name|createSurface
argument_list|()
expr_stmt|;
return|return
name|mSurface
return|;
block|}
DECL|function|setManagedSurface
name|void
name|Image9
operator|::
name|setManagedSurface
parameter_list|(
name|TextureStorageInterface2D
modifier|*
name|storage
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|TextureStorage9_2D
modifier|*
name|storage9
init|=
name|TextureStorage9_2D
operator|::
name|makeTextureStorage9_2D
argument_list|(
name|storage
operator|->
name|getStorageInstance
argument_list|()
argument_list|)
decl_stmt|;
name|setManagedSurface
argument_list|(
name|storage9
operator|->
name|getSurfaceLevel
argument_list|(
name|level
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setManagedSurface
name|void
name|Image9
operator|::
name|setManagedSurface
parameter_list|(
name|TextureStorageInterfaceCube
modifier|*
name|storage
parameter_list|,
name|int
name|face
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|TextureStorage9_Cube
modifier|*
name|storage9
init|=
name|TextureStorage9_Cube
operator|::
name|makeTextureStorage9_Cube
argument_list|(
name|storage
operator|->
name|getStorageInstance
argument_list|()
argument_list|)
decl_stmt|;
name|setManagedSurface
argument_list|(
name|storage9
operator|->
name|getCubeMapSurface
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|+
name|face
argument_list|,
name|level
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setManagedSurface
name|void
name|Image9
operator|::
name|setManagedSurface
parameter_list|(
name|IDirect3DSurface9
modifier|*
name|surface
parameter_list|)
block|{
name|D3DSURFACE_DESC
name|desc
decl_stmt|;
name|surface
operator|->
name|GetDesc
argument_list|(
operator|&
name|desc
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|desc
operator|.
name|Pool
operator|==
name|D3DPOOL_MANAGED
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|GLsizei
operator|)
name|desc
operator|.
name|Width
operator|==
name|mWidth
operator|&&
operator|(
name|GLsizei
operator|)
name|desc
operator|.
name|Height
operator|==
name|mHeight
condition|)
block|{
if|if
condition|(
name|mSurface
condition|)
block|{
name|copyLockableSurfaces
argument_list|(
name|surface
argument_list|,
name|mSurface
argument_list|)
expr_stmt|;
name|mSurface
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
name|mSurface
operator|=
name|surface
expr_stmt|;
name|mD3DPool
operator|=
name|desc
operator|.
name|Pool
expr_stmt|;
block|}
block|}
DECL|function|updateSurface
name|bool
name|Image9
operator|::
name|updateSurface
parameter_list|(
name|TextureStorageInterface2D
modifier|*
name|storage
parameter_list|,
name|int
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|getSurface
argument_list|()
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|TextureStorage9_2D
modifier|*
name|storage9
init|=
name|TextureStorage9_2D
operator|::
name|makeTextureStorage9_2D
argument_list|(
name|storage
operator|->
name|getStorageInstance
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|updateSurface
argument_list|(
name|storage9
operator|->
name|getSurfaceLevel
argument_list|(
name|level
argument_list|,
literal|true
argument_list|)
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
DECL|function|updateSurface
name|bool
name|Image9
operator|::
name|updateSurface
parameter_list|(
name|TextureStorageInterfaceCube
modifier|*
name|storage
parameter_list|,
name|int
name|face
parameter_list|,
name|int
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|getSurface
argument_list|()
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|TextureStorage9_Cube
modifier|*
name|storage9
init|=
name|TextureStorage9_Cube
operator|::
name|makeTextureStorage9_Cube
argument_list|(
name|storage
operator|->
name|getStorageInstance
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|updateSurface
argument_list|(
name|storage9
operator|->
name|getCubeMapSurface
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|+
name|face
argument_list|,
name|level
argument_list|,
literal|true
argument_list|)
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
DECL|function|updateSurface
name|bool
name|Image9
operator|::
name|updateSurface
parameter_list|(
name|IDirect3DSurface9
modifier|*
name|destSurface
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
if|if
condition|(
operator|!
name|destSurface
condition|)
return|return
literal|false
return|;
name|IDirect3DSurface9
modifier|*
name|sourceSurface
init|=
name|getSurface
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceSurface
operator|&&
name|sourceSurface
operator|!=
name|destSurface
condition|)
block|{
name|RECT
name|rect
decl_stmt|;
name|rect
operator|.
name|left
operator|=
name|xoffset
expr_stmt|;
name|rect
operator|.
name|top
operator|=
name|yoffset
expr_stmt|;
name|rect
operator|.
name|right
operator|=
name|xoffset
operator|+
name|width
expr_stmt|;
name|rect
operator|.
name|bottom
operator|=
name|yoffset
operator|+
name|height
expr_stmt|;
name|POINT
name|point
init|=
block|{
name|rect
operator|.
name|left
block|,
name|rect
operator|.
name|top
block|}
decl_stmt|;
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
if|if
condition|(
name|mD3DPool
operator|==
name|D3DPOOL_MANAGED
condition|)
block|{
name|D3DSURFACE_DESC
name|desc
decl_stmt|;
name|sourceSurface
operator|->
name|GetDesc
argument_list|(
operator|&
name|desc
argument_list|)
expr_stmt|;
name|IDirect3DSurface9
modifier|*
name|surf
init|=
literal|0
decl_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateOffscreenPlainSurface
argument_list|(
name|desc
operator|.
name|Width
argument_list|,
name|desc
operator|.
name|Height
argument_list|,
name|desc
operator|.
name|Format
argument_list|,
name|D3DPOOL_SYSTEMMEM
argument_list|,
operator|&
name|surf
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|copyLockableSurfaces
argument_list|(
name|surf
argument_list|,
name|sourceSurface
argument_list|)
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|UpdateSurface
argument_list|(
name|surf
argument_list|,
operator|&
name|rect
argument_list|,
name|destSurface
argument_list|,
operator|&
name|point
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|surf
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// UpdateSurface: source must be SYSTEMMEM, dest must be DEFAULT pools
name|HRESULT
name|result
init|=
name|device
operator|->
name|UpdateSurface
argument_list|(
name|sourceSurface
argument_list|,
operator|&
name|rect
argument_list|,
name|destSurface
argument_list|,
operator|&
name|point
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|destSurface
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Store the pixel rectangle designated by xoffset,yoffset,width,height with pixels stored as format/type at input
comment|// into the target pixel rectangle.
DECL|function|loadData
name|void
name|Image9
operator|::
name|loadData
parameter_list|(
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLint
name|unpackAlignment
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|)
block|{
name|RECT
name|lockRect
init|=
block|{
name|xoffset
block|,
name|yoffset
block|,
name|xoffset
operator|+
name|width
block|,
name|yoffset
operator|+
name|height
block|}
decl_stmt|;
name|D3DLOCKED_RECT
name|locked
decl_stmt|;
name|HRESULT
name|result
init|=
name|lock
argument_list|(
operator|&
name|locked
argument_list|,
operator|&
name|lockRect
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return;
block|}
name|GLsizei
name|inputPitch
init|=
name|gl
operator|::
name|ComputePitch
argument_list|(
name|width
argument_list|,
name|mInternalFormat
argument_list|,
name|unpackAlignment
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|mInternalFormat
condition|)
block|{
case|case
name|GL_ALPHA8_EXT
case|:
if|#
directive|if
name|defined
argument_list|(
name|__SSE2__
argument_list|)
if|if
condition|(
name|gl
operator|::
name|supportsSSE2
argument_list|()
condition|)
block|{
name|loadAlphaDataToBGRASSE2
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|loadAlphaDataToBGRA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|GL_LUMINANCE8_EXT
case|:
name|loadLuminanceDataToNativeOrBGRA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|,
name|getD3DFormat
argument_list|()
operator|==
name|D3DFMT_L8
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_ALPHA32F_EXT
case|:
name|loadAlphaFloatDataToRGBA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_LUMINANCE32F_EXT
case|:
name|loadLuminanceFloatDataToRGBA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_ALPHA16F_EXT
case|:
name|loadAlphaHalfFloatDataToRGBA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_LUMINANCE16F_EXT
case|:
name|loadLuminanceHalfFloatDataToRGBA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_LUMINANCE8_ALPHA8_EXT
case|:
name|loadLuminanceAlphaDataToNativeOrBGRA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|,
name|getD3DFormat
argument_list|()
operator|==
name|D3DFMT_A8L8
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_LUMINANCE_ALPHA32F_EXT
case|:
name|loadLuminanceAlphaFloatDataToRGBA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_LUMINANCE_ALPHA16F_EXT
case|:
name|loadLuminanceAlphaHalfFloatDataToRGBA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_RGB8_OES
case|:
name|loadRGBUByteDataToBGRX
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_RGB565
case|:
name|loadRGB565DataToBGRA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_RGBA8_OES
case|:
if|#
directive|if
name|defined
argument_list|(
name|__SSE2__
argument_list|)
if|if
condition|(
name|gl
operator|::
name|supportsSSE2
argument_list|()
condition|)
block|{
name|loadRGBAUByteDataToBGRASSE2
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|loadRGBAUByteDataToBGRA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|GL_RGBA4
case|:
name|loadRGBA4444DataToBGRA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_RGB5_A1
case|:
name|loadRGBA5551DataToBGRA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_BGRA8_EXT
case|:
name|loadBGRADataToBGRA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
comment|// float textures are converted to RGBA, not BGRA, as they're stored that way in D3D
case|case
name|GL_RGB32F_EXT
case|:
name|loadRGBFloatDataToRGBA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_RGB16F_EXT
case|:
name|loadRGBHalfFloatDataToRGBA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_RGBA32F_EXT
case|:
name|loadRGBAFloatDataToRGBA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_RGBA16F_EXT
case|:
name|loadRGBAHalfFloatDataToRGBA
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|inputPitch
argument_list|,
name|input
argument_list|,
name|locked
operator|.
name|Pitch
argument_list|,
name|locked
operator|.
name|pBits
argument_list|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
name|unlock
argument_list|()
expr_stmt|;
block|}
DECL|function|loadCompressedData
name|void
name|Image9
operator|::
name|loadCompressedData
parameter_list|(
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|xoffset
operator|%
literal|4
operator|==
literal|0
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|yoffset
operator|%
literal|4
operator|==
literal|0
argument_list|)
expr_stmt|;
name|RECT
name|lockRect
init|=
block|{
name|xoffset
block|,
name|yoffset
block|,
name|xoffset
operator|+
name|width
block|,
name|yoffset
operator|+
name|height
block|}
decl_stmt|;
name|D3DLOCKED_RECT
name|locked
decl_stmt|;
name|HRESULT
name|result
init|=
name|lock
argument_list|(
operator|&
name|locked
argument_list|,
operator|&
name|lockRect
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return;
block|}
name|GLsizei
name|inputSize
init|=
name|gl
operator|::
name|ComputeCompressedSize
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|mInternalFormat
argument_list|)
decl_stmt|;
name|GLsizei
name|inputPitch
init|=
name|gl
operator|::
name|ComputeCompressedPitch
argument_list|(
name|width
argument_list|,
name|mInternalFormat
argument_list|)
decl_stmt|;
name|int
name|rows
init|=
name|inputSize
operator|/
name|inputPitch
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
operator|++
name|i
control|)
block|{
name|memcpy
argument_list|(
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
name|BYTE
operator|*
operator|)
name|locked
operator|.
name|pBits
operator|+
name|i
operator|*
name|locked
operator|.
name|Pitch
operator|)
argument_list|,
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
name|BYTE
operator|*
operator|)
name|input
operator|+
name|i
operator|*
name|inputPitch
operator|)
argument_list|,
name|inputPitch
argument_list|)
expr_stmt|;
block|}
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// This implements glCopyTex[Sub]Image2D for non-renderable internal texture formats and incomplete textures
DECL|function|copy
name|void
name|Image9
operator|::
name|copy
parameter_list|(
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|gl
operator|::
name|Framebuffer
modifier|*
name|source
parameter_list|)
block|{
name|RenderTarget9
modifier|*
name|renderTarget
init|=
name|NULL
decl_stmt|;
name|IDirect3DSurface9
modifier|*
name|surface
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|Renderbuffer
modifier|*
name|colorbuffer
init|=
name|source
operator|->
name|getColorbuffer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorbuffer
condition|)
block|{
name|renderTarget
operator|=
name|RenderTarget9
operator|::
name|makeRenderTarget9
argument_list|(
name|colorbuffer
operator|->
name|getRenderTarget
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|renderTarget
condition|)
block|{
name|surface
operator|=
name|renderTarget
operator|->
name|getSurface
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|surface
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to retrieve the render target."
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|IDirect3DSurface9
modifier|*
name|renderTargetData
init|=
name|NULL
decl_stmt|;
name|D3DSURFACE_DESC
name|description
decl_stmt|;
name|surface
operator|->
name|GetDesc
argument_list|(
operator|&
name|description
argument_list|)
expr_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateOffscreenPlainSurface
argument_list|(
name|description
operator|.
name|Width
argument_list|,
name|description
operator|.
name|Height
argument_list|,
name|description
operator|.
name|Format
argument_list|,
name|D3DPOOL_SYSTEMMEM
argument_list|,
operator|&
name|renderTargetData
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Could not create matching destination surface."
argument_list|)
expr_stmt|;
name|surface
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
name|result
operator|=
name|device
operator|->
name|GetRenderTargetData
argument_list|(
name|surface
argument_list|,
name|renderTargetData
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"GetRenderTargetData unexpectedly failed."
argument_list|)
expr_stmt|;
name|renderTargetData
operator|->
name|Release
argument_list|()
expr_stmt|;
name|surface
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
name|RECT
name|sourceRect
init|=
block|{
name|x
block|,
name|y
block|,
name|x
operator|+
name|width
block|,
name|y
operator|+
name|height
block|}
decl_stmt|;
name|RECT
name|destRect
init|=
block|{
name|xoffset
block|,
name|yoffset
block|,
name|xoffset
operator|+
name|width
block|,
name|yoffset
operator|+
name|height
block|}
decl_stmt|;
name|D3DLOCKED_RECT
name|sourceLock
init|=
block|{
literal|0
block|}
decl_stmt|;
name|result
operator|=
name|renderTargetData
operator|->
name|LockRect
argument_list|(
operator|&
name|sourceLock
argument_list|,
operator|&
name|sourceRect
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to lock the source surface (rectangle might be invalid)."
argument_list|)
expr_stmt|;
name|renderTargetData
operator|->
name|Release
argument_list|()
expr_stmt|;
name|surface
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
name|D3DLOCKED_RECT
name|destLock
init|=
block|{
literal|0
block|}
decl_stmt|;
name|result
operator|=
name|lock
argument_list|(
operator|&
name|destLock
argument_list|,
operator|&
name|destRect
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to lock the destination surface (rectangle might be invalid)."
argument_list|)
expr_stmt|;
name|renderTargetData
operator|->
name|UnlockRect
argument_list|()
expr_stmt|;
name|renderTargetData
operator|->
name|Release
argument_list|()
expr_stmt|;
name|surface
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
if|if
condition|(
name|destLock
operator|.
name|pBits
operator|&&
name|sourceLock
operator|.
name|pBits
condition|)
block|{
name|unsigned
name|char
modifier|*
name|source
init|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|sourceLock
operator|.
name|pBits
decl_stmt|;
name|unsigned
name|char
modifier|*
name|dest
init|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|destLock
operator|.
name|pBits
decl_stmt|;
switch|switch
condition|(
name|description
operator|.
name|Format
condition|)
block|{
case|case
name|D3DFMT_X8R8G8B8
case|:
case|case
name|D3DFMT_A8R8G8B8
case|:
switch|switch
condition|(
name|getD3DFormat
argument_list|()
condition|)
block|{
case|case
name|D3DFMT_X8R8G8B8
case|:
case|case
name|D3DFMT_A8R8G8B8
case|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|memcpy
argument_list|(
name|dest
argument_list|,
name|source
argument_list|,
literal|4
operator|*
name|width
argument_list|)
expr_stmt|;
name|source
operator|+=
name|sourceLock
operator|.
name|Pitch
expr_stmt|;
name|dest
operator|+=
name|destLock
operator|.
name|Pitch
expr_stmt|;
block|}
break|break;
case|case
name|D3DFMT_L8
case|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
name|x
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|4
operator|+
literal|2
index|]
expr_stmt|;
block|}
name|source
operator|+=
name|sourceLock
operator|.
name|Pitch
expr_stmt|;
name|dest
operator|+=
name|destLock
operator|.
name|Pitch
expr_stmt|;
block|}
break|break;
case|case
name|D3DFMT_A8L8
case|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|dest
index|[
name|x
operator|*
literal|2
operator|+
literal|0
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|4
operator|+
literal|2
index|]
expr_stmt|;
name|dest
index|[
name|x
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|source
index|[
name|x
operator|*
literal|4
operator|+
literal|3
index|]
expr_stmt|;
block|}
name|source
operator|+=
name|sourceLock
operator|.
name|Pitch
expr_stmt|;
name|dest
operator|+=
name|destLock
operator|.
name|Pitch
expr_stmt|;
block|}
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|D3DFMT_R5G6B5
case|:
switch|switch
condition|(
name|getD3DFormat
argument_list|()
condition|)
block|{
case|case
name|D3DFMT_X8R8G8B8
case|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|unsigned
name|short
name|rgb
init|=
operator|(
operator|(
name|unsigned
name|short
operator|*
operator|)
name|source
operator|)
index|[
name|x
index|]
decl_stmt|;
name|unsigned
name|char
name|red
init|=
operator|(
name|rgb
operator|&
literal|0xF800
operator|)
operator|>>
literal|8
decl_stmt|;
name|unsigned
name|char
name|green
init|=
operator|(
name|rgb
operator|&
literal|0x07E0
operator|)
operator|>>
literal|3
decl_stmt|;
name|unsigned
name|char
name|blue
init|=
operator|(
name|rgb
operator|&
literal|0x001F
operator|)
operator|<<
literal|3
decl_stmt|;
name|dest
index|[
name|x
operator|+
literal|0
index|]
operator|=
name|blue
operator||
operator|(
name|blue
operator|>>
literal|5
operator|)
expr_stmt|;
name|dest
index|[
name|x
operator|+
literal|1
index|]
operator|=
name|green
operator||
operator|(
name|green
operator|>>
literal|6
operator|)
expr_stmt|;
name|dest
index|[
name|x
operator|+
literal|2
index|]
operator|=
name|red
operator||
operator|(
name|red
operator|>>
literal|5
operator|)
expr_stmt|;
name|dest
index|[
name|x
operator|+
literal|3
index|]
operator|=
literal|0xFF
expr_stmt|;
block|}
name|source
operator|+=
name|sourceLock
operator|.
name|Pitch
expr_stmt|;
name|dest
operator|+=
name|destLock
operator|.
name|Pitch
expr_stmt|;
block|}
break|break;
case|case
name|D3DFMT_L8
case|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|unsigned
name|char
name|red
init|=
name|source
index|[
name|x
operator|*
literal|2
operator|+
literal|1
index|]
operator|&
literal|0xF8
decl_stmt|;
name|dest
index|[
name|x
index|]
operator|=
name|red
operator||
operator|(
name|red
operator|>>
literal|5
operator|)
expr_stmt|;
block|}
name|source
operator|+=
name|sourceLock
operator|.
name|Pitch
expr_stmt|;
name|dest
operator|+=
name|destLock
operator|.
name|Pitch
expr_stmt|;
block|}
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|D3DFMT_A1R5G5B5
case|:
switch|switch
condition|(
name|getD3DFormat
argument_list|()
condition|)
block|{
case|case
name|D3DFMT_X8R8G8B8
case|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|unsigned
name|short
name|argb
init|=
operator|(
operator|(
name|unsigned
name|short
operator|*
operator|)
name|source
operator|)
index|[
name|x
index|]
decl_stmt|;
name|unsigned
name|char
name|red
init|=
operator|(
name|argb
operator|&
literal|0x7C00
operator|)
operator|>>
literal|7
decl_stmt|;
name|unsigned
name|char
name|green
init|=
operator|(
name|argb
operator|&
literal|0x03E0
operator|)
operator|>>
literal|2
decl_stmt|;
name|unsigned
name|char
name|blue
init|=
operator|(
name|argb
operator|&
literal|0x001F
operator|)
operator|<<
literal|3
decl_stmt|;
name|dest
index|[
name|x
operator|+
literal|0
index|]
operator|=
name|blue
operator||
operator|(
name|blue
operator|>>
literal|5
operator|)
expr_stmt|;
name|dest
index|[
name|x
operator|+
literal|1
index|]
operator|=
name|green
operator||
operator|(
name|green
operator|>>
literal|5
operator|)
expr_stmt|;
name|dest
index|[
name|x
operator|+
literal|2
index|]
operator|=
name|red
operator||
operator|(
name|red
operator|>>
literal|5
operator|)
expr_stmt|;
name|dest
index|[
name|x
operator|+
literal|3
index|]
operator|=
literal|0xFF
expr_stmt|;
block|}
name|source
operator|+=
name|sourceLock
operator|.
name|Pitch
expr_stmt|;
name|dest
operator|+=
name|destLock
operator|.
name|Pitch
expr_stmt|;
block|}
break|break;
case|case
name|D3DFMT_A8R8G8B8
case|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|unsigned
name|short
name|argb
init|=
operator|(
operator|(
name|unsigned
name|short
operator|*
operator|)
name|source
operator|)
index|[
name|x
index|]
decl_stmt|;
name|unsigned
name|char
name|red
init|=
operator|(
name|argb
operator|&
literal|0x7C00
operator|)
operator|>>
literal|7
decl_stmt|;
name|unsigned
name|char
name|green
init|=
operator|(
name|argb
operator|&
literal|0x03E0
operator|)
operator|>>
literal|2
decl_stmt|;
name|unsigned
name|char
name|blue
init|=
operator|(
name|argb
operator|&
literal|0x001F
operator|)
operator|<<
literal|3
decl_stmt|;
name|unsigned
name|char
name|alpha
init|=
operator|(
name|signed
name|short
operator|)
name|argb
operator|>>
literal|15
decl_stmt|;
name|dest
index|[
name|x
operator|+
literal|0
index|]
operator|=
name|blue
operator||
operator|(
name|blue
operator|>>
literal|5
operator|)
expr_stmt|;
name|dest
index|[
name|x
operator|+
literal|1
index|]
operator|=
name|green
operator||
operator|(
name|green
operator|>>
literal|5
operator|)
expr_stmt|;
name|dest
index|[
name|x
operator|+
literal|2
index|]
operator|=
name|red
operator||
operator|(
name|red
operator|>>
literal|5
operator|)
expr_stmt|;
name|dest
index|[
name|x
operator|+
literal|3
index|]
operator|=
name|alpha
expr_stmt|;
block|}
name|source
operator|+=
name|sourceLock
operator|.
name|Pitch
expr_stmt|;
name|dest
operator|+=
name|destLock
operator|.
name|Pitch
expr_stmt|;
block|}
break|break;
case|case
name|D3DFMT_L8
case|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|unsigned
name|char
name|red
init|=
name|source
index|[
name|x
operator|*
literal|2
operator|+
literal|1
index|]
operator|&
literal|0x7C
decl_stmt|;
name|dest
index|[
name|x
index|]
operator|=
operator|(
name|red
operator|<<
literal|1
operator|)
operator||
operator|(
name|red
operator|>>
literal|4
operator|)
expr_stmt|;
block|}
name|source
operator|+=
name|sourceLock
operator|.
name|Pitch
expr_stmt|;
name|dest
operator|+=
name|destLock
operator|.
name|Pitch
expr_stmt|;
block|}
break|break;
case|case
name|D3DFMT_A8L8
case|:
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|unsigned
name|char
name|red
init|=
name|source
index|[
name|x
operator|*
literal|2
operator|+
literal|1
index|]
operator|&
literal|0x7C
decl_stmt|;
name|dest
index|[
name|x
operator|*
literal|2
operator|+
literal|0
index|]
operator|=
operator|(
name|red
operator|<<
literal|1
operator|)
operator||
operator|(
name|red
operator|>>
literal|4
operator|)
expr_stmt|;
name|dest
index|[
name|x
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
operator|(
name|signed
name|char
operator|)
name|source
index|[
name|x
operator|*
literal|2
operator|+
literal|1
index|]
operator|>>
literal|7
expr_stmt|;
block|}
name|source
operator|+=
name|sourceLock
operator|.
name|Pitch
expr_stmt|;
name|dest
operator|+=
name|destLock
operator|.
name|Pitch
expr_stmt|;
block|}
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
name|unlock
argument_list|()
expr_stmt|;
name|renderTargetData
operator|->
name|UnlockRect
argument_list|()
expr_stmt|;
name|renderTargetData
operator|->
name|Release
argument_list|()
expr_stmt|;
name|surface
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mDirty
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_namespace
end_unit
