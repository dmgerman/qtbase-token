begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Indexffer9.cpp: Defines the D3D9 IndexBuffer implementation.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d9/IndexBuffer9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d9/Renderer9.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|IndexBuffer9
name|IndexBuffer9
operator|::
name|IndexBuffer9
parameter_list|(
name|Renderer9
modifier|*
specifier|const
name|renderer
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
block|{
name|mIndexBuffer
operator|=
name|NULL
expr_stmt|;
name|mBufferSize
operator|=
literal|0
expr_stmt|;
name|mIndexType
operator|=
literal|0
expr_stmt|;
name|mDynamic
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|~IndexBuffer9
name|IndexBuffer9
operator|::
name|~
name|IndexBuffer9
parameter_list|()
block|{
if|if
condition|(
name|mIndexBuffer
condition|)
block|{
name|mIndexBuffer
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mIndexBuffer
operator|=
name|NULL
expr_stmt|;
block|}
block|}
DECL|function|initialize
name|bool
name|IndexBuffer9
operator|::
name|initialize
parameter_list|(
name|unsigned
name|int
name|bufferSize
parameter_list|,
name|GLenum
name|indexType
parameter_list|,
name|bool
name|dynamic
parameter_list|)
block|{
if|if
condition|(
name|mIndexBuffer
condition|)
block|{
name|mIndexBuffer
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mIndexBuffer
operator|=
name|NULL
expr_stmt|;
block|}
name|updateSerial
argument_list|()
expr_stmt|;
if|if
condition|(
name|bufferSize
operator|>
literal|0
condition|)
block|{
name|D3DFORMAT
name|format
decl_stmt|;
if|if
condition|(
name|indexType
operator|==
name|GL_UNSIGNED_SHORT
operator|||
name|indexType
operator|==
name|GL_UNSIGNED_BYTE
condition|)
block|{
name|format
operator|=
name|D3DFMT_INDEX16
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexType
operator|==
name|GL_UNSIGNED_INT
condition|)
block|{
if|if
condition|(
name|mRenderer
operator|->
name|get32BitIndexSupport
argument_list|()
condition|)
block|{
name|format
operator|=
name|D3DFMT_INDEX32
expr_stmt|;
block|}
else|else
block|{
name|ERR
argument_list|(
literal|"Attempted to create a 32-bit index buffer but renderer does not support 32-bit indices."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|ERR
argument_list|(
literal|"Invalid index type %u."
argument_list|,
name|indexType
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|DWORD
name|usageFlags
init|=
name|D3DUSAGE_WRITEONLY
decl_stmt|;
if|if
condition|(
name|dynamic
condition|)
block|{
name|usageFlags
operator||=
name|D3DUSAGE_DYNAMIC
expr_stmt|;
block|}
name|HRESULT
name|result
init|=
name|mRenderer
operator|->
name|createIndexBuffer
argument_list|(
name|bufferSize
argument_list|,
name|usageFlags
argument_list|,
name|format
argument_list|,
operator|&
name|mIndexBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to create an index buffer of size %u, result: 0x%08x."
argument_list|,
name|mBufferSize
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|mBufferSize
operator|=
name|bufferSize
expr_stmt|;
name|mIndexType
operator|=
name|indexType
expr_stmt|;
name|mDynamic
operator|=
name|dynamic
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|makeIndexBuffer9
name|IndexBuffer9
modifier|*
name|IndexBuffer9
operator|::
name|makeIndexBuffer9
parameter_list|(
name|IndexBuffer
modifier|*
name|indexBuffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|IndexBuffer9
operator|*
argument_list|,
name|indexBuffer
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|IndexBuffer9
operator|*
argument_list|>
argument_list|(
name|indexBuffer
argument_list|)
return|;
block|}
DECL|function|mapBuffer
name|bool
name|IndexBuffer9
operator|::
name|mapBuffer
parameter_list|(
name|unsigned
name|int
name|offset
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|,
name|void
modifier|*
modifier|*
name|outMappedMemory
parameter_list|)
block|{
if|if
condition|(
name|mIndexBuffer
condition|)
block|{
name|DWORD
name|lockFlags
init|=
name|mDynamic
condition|?
name|D3DLOCK_NOOVERWRITE
else|:
literal|0
decl_stmt|;
name|void
modifier|*
name|mapPtr
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|result
init|=
name|mIndexBuffer
operator|->
name|Lock
argument_list|(
name|offset
argument_list|,
name|size
argument_list|,
operator|&
name|mapPtr
argument_list|,
name|lockFlags
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Index buffer lock failed with error 0x%08x"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
operator|*
name|outMappedMemory
operator|=
name|mapPtr
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|ERR
argument_list|(
literal|"Index buffer not initialized."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|unmapBuffer
name|bool
name|IndexBuffer9
operator|::
name|unmapBuffer
parameter_list|()
block|{
if|if
condition|(
name|mIndexBuffer
condition|)
block|{
name|HRESULT
name|result
init|=
name|mIndexBuffer
operator|->
name|Unlock
argument_list|()
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Index buffer unlock failed with error 0x%08x"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
name|ERR
argument_list|(
literal|"Index buffer not initialized."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|getIndexType
name|GLenum
name|IndexBuffer9
operator|::
name|getIndexType
parameter_list|()
specifier|const
block|{
return|return
name|mIndexType
return|;
block|}
DECL|function|getBufferSize
name|unsigned
name|int
name|IndexBuffer9
operator|::
name|getBufferSize
parameter_list|()
specifier|const
block|{
return|return
name|mBufferSize
return|;
block|}
DECL|function|setSize
name|bool
name|IndexBuffer9
operator|::
name|setSize
parameter_list|(
name|unsigned
name|int
name|bufferSize
parameter_list|,
name|GLenum
name|indexType
parameter_list|)
block|{
if|if
condition|(
name|bufferSize
operator|>
name|mBufferSize
operator|||
name|indexType
operator|!=
name|mIndexType
condition|)
block|{
return|return
name|initialize
argument_list|(
name|bufferSize
argument_list|,
name|indexType
argument_list|,
name|mDynamic
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|function|discard
name|bool
name|IndexBuffer9
operator|::
name|discard
parameter_list|()
block|{
if|if
condition|(
name|mIndexBuffer
condition|)
block|{
name|void
modifier|*
name|dummy
decl_stmt|;
name|HRESULT
name|result
decl_stmt|;
name|result
operator|=
name|mIndexBuffer
operator|->
name|Lock
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|dummy
argument_list|,
name|D3DLOCK_DISCARD
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Discard lock failed with error 0x%08x"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|result
operator|=
name|mIndexBuffer
operator|->
name|Unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Discard unlock failed with error 0x%08x"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
name|ERR
argument_list|(
literal|"Index buffer not initialized."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|getIndexFormat
name|D3DFORMAT
name|IndexBuffer9
operator|::
name|getIndexFormat
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|mIndexType
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
name|D3DFMT_INDEX16
return|;
case|case
name|GL_UNSIGNED_SHORT
case|:
return|return
name|D3DFMT_INDEX16
return|;
case|case
name|GL_UNSIGNED_INT
case|:
return|return
name|D3DFMT_INDEX32
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|D3DFMT_UNKNOWN
return|;
block|}
block|}
DECL|function|getBuffer
name|IDirect3DIndexBuffer9
modifier|*
name|IndexBuffer9
operator|::
name|getBuffer
parameter_list|()
specifier|const
block|{
return|return
name|mIndexBuffer
return|;
block|}
block|}
end_namespace
end_unit
