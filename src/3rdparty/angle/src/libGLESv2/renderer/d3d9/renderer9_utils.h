begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// renderer9_utils.h: Conversion functions and other utility routines
end_comment
begin_comment
comment|// specific to the D3D9 renderer
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RENDERER_RENDERER9_UTILS_H
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RENDERER_RENDERER9_UTILS_H
define|#
directive|define
name|LIBGLESV2_RENDERER_RENDERER9_UTILS_H
end_define
begin_include
include|#
directive|include
file|"libGLESv2/utilities.h"
end_include
begin_decl_stmt
DECL|variable|D3DFMT_INTZ
specifier|const
name|D3DFORMAT
name|D3DFMT_INTZ
init|=
operator|(
call|(
name|D3DFORMAT
call|)
argument_list|(
name|MAKEFOURCC
argument_list|(
literal|'I'
argument_list|,
literal|'N'
argument_list|,
literal|'T'
argument_list|,
literal|'Z'
argument_list|)
argument_list|)
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|D3DFMT_NULL
specifier|const
name|D3DFORMAT
name|D3DFMT_NULL
init|=
operator|(
call|(
name|D3DFORMAT
call|)
argument_list|(
name|MAKEFOURCC
argument_list|(
literal|'N'
argument_list|,
literal|'U'
argument_list|,
literal|'L'
argument_list|,
literal|'L'
argument_list|)
argument_list|)
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|namespace
name|gl_d3d9
block|{
name|D3DCMPFUNC
name|ConvertComparison
parameter_list|(
name|GLenum
name|comparison
parameter_list|)
function_decl|;
name|D3DCOLOR
name|ConvertColor
argument_list|(
name|gl
operator|::
name|Color
name|color
argument_list|)
decl_stmt|;
name|D3DBLEND
name|ConvertBlendFunc
parameter_list|(
name|GLenum
name|blend
parameter_list|)
function_decl|;
name|D3DBLENDOP
name|ConvertBlendOp
parameter_list|(
name|GLenum
name|blendOp
parameter_list|)
function_decl|;
name|D3DSTENCILOP
name|ConvertStencilOp
parameter_list|(
name|GLenum
name|stencilOp
parameter_list|)
function_decl|;
name|D3DTEXTUREADDRESS
name|ConvertTextureWrap
parameter_list|(
name|GLenum
name|wrap
parameter_list|)
function_decl|;
name|D3DCULL
name|ConvertCullMode
parameter_list|(
name|GLenum
name|cullFace
parameter_list|,
name|GLenum
name|frontFace
parameter_list|)
function_decl|;
name|D3DCUBEMAP_FACES
name|ConvertCubeFace
parameter_list|(
name|GLenum
name|cubeFace
parameter_list|)
function_decl|;
name|DWORD
name|ConvertColorMask
parameter_list|(
name|bool
name|red
parameter_list|,
name|bool
name|green
parameter_list|,
name|bool
name|blue
parameter_list|,
name|bool
name|alpha
parameter_list|)
function_decl|;
name|D3DTEXTUREFILTERTYPE
name|ConvertMagFilter
parameter_list|(
name|GLenum
name|magFilter
parameter_list|,
name|float
name|maxAnisotropy
parameter_list|)
function_decl|;
name|void
name|ConvertMinFilter
parameter_list|(
name|GLenum
name|minFilter
parameter_list|,
name|D3DTEXTUREFILTERTYPE
modifier|*
name|d3dMinFilter
parameter_list|,
name|D3DTEXTUREFILTERTYPE
modifier|*
name|d3dMipFilter
parameter_list|,
name|float
name|maxAnisotropy
parameter_list|)
function_decl|;
name|D3DFORMAT
name|ConvertRenderbufferFormat
parameter_list|(
name|GLenum
name|format
parameter_list|)
function_decl|;
name|D3DMULTISAMPLE_TYPE
name|GetMultisampleTypeFromSamples
parameter_list|(
name|GLsizei
name|samples
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|d3d9_gl
block|{
name|GLuint
name|GetAlphaSize
parameter_list|(
name|D3DFORMAT
name|colorFormat
parameter_list|)
function_decl|;
name|GLuint
name|GetStencilSize
parameter_list|(
name|D3DFORMAT
name|stencilFormat
parameter_list|)
function_decl|;
name|GLsizei
name|GetSamplesFromMultisampleType
parameter_list|(
name|D3DMULTISAMPLE_TYPE
name|type
parameter_list|)
function_decl|;
name|bool
name|IsFormatChannelEquivalent
parameter_list|(
name|D3DFORMAT
name|d3dformat
parameter_list|,
name|GLenum
name|format
parameter_list|)
function_decl|;
name|GLenum
name|ConvertBackBufferFormat
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
function_decl|;
name|GLenum
name|ConvertDepthStencilFormat
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
function_decl|;
name|GLenum
name|ConvertRenderTargetFormat
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
function_decl|;
name|GLenum
name|GetEquivalentFormat
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|d3d9
block|{
name|bool
name|IsCompressedFormat
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
function_decl|;
name|size_t
name|ComputeRowSize
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|,
name|unsigned
name|int
name|width
parameter_list|)
function_decl|;
specifier|inline
name|bool
name|isDeviceLostError
parameter_list|(
name|HRESULT
name|errorCode
parameter_list|)
block|{
switch|switch
condition|(
name|errorCode
condition|)
block|{
case|case
name|D3DERR_DRIVERINTERNALERROR
case|:
case|case
name|D3DERR_DEVICELOST
case|:
case|case
name|D3DERR_DEVICEHUNG
case|:
case|case
name|D3DERR_DEVICEREMOVED
case|:
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
block|}
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RENDERER_RENDERER9_UTILS_H
end_comment
end_unit
