begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// ProgramD3D.h: Defines the rx::ProgramD3D class which implements rx::ProgramImpl.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RENDERER_PROGRAMD3D_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RENDERER_PROGRAMD3D_H_
define|#
directive|define
name|LIBGLESV2_RENDERER_PROGRAMD3D_H_
end_define
begin_include
include|#
directive|include
file|"libGLESv2/renderer/ProgramImpl.h"
end_include
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
struct_decl|struct
name|LinkedUniform
struct_decl|;
struct_decl|struct
name|VariableLocation
struct_decl|;
struct_decl|struct
name|VertexFormat
struct_decl|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|UniformStorage
decl_stmt|;
name|class
name|ProgramD3D
range|:
name|public
name|ProgramImpl
block|{
name|public
operator|:
name|ProgramD3D
argument_list|(
name|rx
operator|::
name|Renderer
operator|*
name|renderer
argument_list|)
block|;
name|virtual
operator|~
name|ProgramD3D
argument_list|()
block|;
specifier|static
name|ProgramD3D
operator|*
name|makeProgramD3D
argument_list|(
name|ProgramImpl
operator|*
name|impl
argument_list|)
block|;
specifier|static
specifier|const
name|ProgramD3D
operator|*
name|makeProgramD3D
argument_list|(
specifier|const
name|ProgramImpl
operator|*
name|impl
argument_list|)
block|;
name|Renderer
operator|*
name|getRenderer
argument_list|()
block|{
return|return
name|mRenderer
return|;
block|}
name|DynamicHLSL
operator|*
name|getDynamicHLSL
argument_list|()
block|{
return|return
name|mDynamicHLSL
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|rx
operator|::
name|PixelShaderOutputVariable
operator|>
operator|&
name|getPixelShaderKey
argument_list|()
block|{
return|return
name|mPixelShaderKey
return|;
block|}
name|GLenum
name|getBinaryFormat
argument_list|()
block|{
return|return
name|GL_PROGRAM_BINARY_ANGLE
return|;
block|}
name|bool
name|load
argument_list|(
name|gl
operator|::
name|InfoLog
operator|&
name|infoLog
argument_list|,
name|gl
operator|::
name|BinaryInputStream
operator|*
name|stream
argument_list|)
block|;
name|bool
name|save
argument_list|(
name|gl
operator|::
name|BinaryOutputStream
operator|*
name|stream
argument_list|)
block|;
name|ShaderExecutable
operator|*
name|getPixelExecutableForOutputLayout
argument_list|(
argument|gl::InfoLog&infoLog
argument_list|,
argument|const std::vector<GLenum>&outputSignature
argument_list|,
argument|const std::vector<gl::LinkedVarying>&transformFeedbackLinkedVaryings
argument_list|,
argument|bool separatedOutputBuffers
argument_list|)
block|;
name|ShaderExecutable
operator|*
name|getVertexExecutableForInputLayout
argument_list|(
argument|gl::InfoLog&infoLog
argument_list|,
argument|const gl::VertexFormat inputLayout[gl::MAX_VERTEX_ATTRIBS]
argument_list|,
argument|const sh::Attribute shaderAttributes[]
argument_list|,
argument|const std::vector<gl::LinkedVarying>&transformFeedbackLinkedVaryings
argument_list|,
argument|bool separatedOutputBuffers
argument_list|)
block|;
name|bool
name|link
argument_list|(
name|gl
operator|::
name|InfoLog
operator|&
name|infoLog
argument_list|,
name|gl
operator|::
name|Shader
operator|*
name|fragmentShader
argument_list|,
name|gl
operator|::
name|Shader
operator|*
name|vertexShader
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|transformFeedbackVaryings
argument_list|,
name|int
operator|*
name|registers
argument_list|,
name|std
operator|::
name|vector
operator|<
name|gl
operator|::
name|LinkedVarying
operator|>
operator|*
name|linkedVaryings
argument_list|,
name|std
operator|::
name|map
operator|<
name|int
argument_list|,
name|gl
operator|::
name|VariableLocation
operator|>
operator|*
name|outputVariables
argument_list|)
block|;
comment|// D3D only
name|void
name|initializeUniformStorage
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|gl
operator|::
name|LinkedUniform
operator|*
operator|>
operator|&
name|uniforms
argument_list|)
block|;
specifier|const
name|UniformStorage
operator|&
name|getVertexUniformStorage
argument_list|()
specifier|const
block|{
return|return
operator|*
name|mVertexUniformStorage
return|;
block|}
specifier|const
name|UniformStorage
operator|&
name|getFragmentUniformStorage
argument_list|()
specifier|const
block|{
return|return
operator|*
name|mFragmentUniformStorage
return|;
block|}
name|void
name|reset
argument_list|()
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|ProgramD3D
argument_list|)
block|;
name|Renderer
operator|*
name|mRenderer
block|;
name|DynamicHLSL
operator|*
name|mDynamicHLSL
block|;
name|std
operator|::
name|string
name|mVertexHLSL
block|;
name|rx
operator|::
name|D3DWorkaroundType
name|mVertexWorkarounds
block|;
name|std
operator|::
name|string
name|mPixelHLSL
block|;
name|rx
operator|::
name|D3DWorkaroundType
name|mPixelWorkarounds
block|;
name|bool
name|mUsesFragDepth
block|;
name|std
operator|::
name|vector
operator|<
name|rx
operator|::
name|PixelShaderOutputVariable
operator|>
name|mPixelShaderKey
block|;
name|UniformStorage
operator|*
name|mVertexUniformStorage
block|;
name|UniformStorage
operator|*
name|mFragmentUniformStorage
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RENDERER_PROGRAMD3D_H_
end_comment
end_unit
