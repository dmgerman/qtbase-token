begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// VertexBuffer.cpp: Defines the abstract VertexBuffer class and VertexBufferInterface
end_comment
begin_comment
comment|// class with derivations, classes that perform graphics API agnostic vertex buffer operations.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/VertexBuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/BufferD3D.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/VertexAttribute.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|member|mNextSerial
name|unsigned
name|int
name|VertexBuffer
operator|::
name|mNextSerial
init|=
literal|1
decl_stmt|;
DECL|function|VertexBuffer
name|VertexBuffer
operator|::
name|VertexBuffer
parameter_list|()
block|{
name|updateSerial
argument_list|()
expr_stmt|;
block|}
DECL|function|~VertexBuffer
name|VertexBuffer
operator|::
name|~
name|VertexBuffer
parameter_list|()
block|{ }
DECL|function|updateSerial
name|void
name|VertexBuffer
operator|::
name|updateSerial
parameter_list|()
block|{
name|mSerial
operator|=
name|mNextSerial
operator|++
expr_stmt|;
block|}
DECL|function|getSerial
name|unsigned
name|int
name|VertexBuffer
operator|::
name|getSerial
parameter_list|()
specifier|const
block|{
return|return
name|mSerial
return|;
block|}
DECL|function|VertexBufferInterface
name|VertexBufferInterface
operator|::
name|VertexBufferInterface
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|bool
name|dynamic
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
block|{
name|mDynamic
operator|=
name|dynamic
expr_stmt|;
name|mWritePosition
operator|=
literal|0
expr_stmt|;
name|mReservedSpace
operator|=
literal|0
expr_stmt|;
name|mVertexBuffer
operator|=
name|renderer
operator|->
name|createVertexBuffer
argument_list|()
expr_stmt|;
block|}
DECL|function|~VertexBufferInterface
name|VertexBufferInterface
operator|::
name|~
name|VertexBufferInterface
parameter_list|()
block|{
operator|delete
name|mVertexBuffer
expr_stmt|;
block|}
DECL|function|getSerial
name|unsigned
name|int
name|VertexBufferInterface
operator|::
name|getSerial
parameter_list|()
specifier|const
block|{
return|return
name|mVertexBuffer
operator|->
name|getSerial
argument_list|()
return|;
block|}
DECL|function|getBufferSize
name|unsigned
name|int
name|VertexBufferInterface
operator|::
name|getBufferSize
parameter_list|()
specifier|const
block|{
return|return
name|mVertexBuffer
operator|->
name|getBufferSize
argument_list|()
return|;
block|}
DECL|function|setBufferSize
name|gl
operator|::
name|Error
name|VertexBufferInterface
operator|::
name|setBufferSize
parameter_list|(
name|unsigned
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|mVertexBuffer
operator|->
name|getBufferSize
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|mVertexBuffer
operator|->
name|initialize
argument_list|(
name|size
argument_list|,
name|mDynamic
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|mVertexBuffer
operator|->
name|setBufferSize
argument_list|(
name|size
argument_list|)
return|;
block|}
block|}
DECL|function|getWritePosition
name|unsigned
name|int
name|VertexBufferInterface
operator|::
name|getWritePosition
parameter_list|()
specifier|const
block|{
return|return
name|mWritePosition
return|;
block|}
DECL|function|setWritePosition
name|void
name|VertexBufferInterface
operator|::
name|setWritePosition
parameter_list|(
name|unsigned
name|int
name|writePosition
parameter_list|)
block|{
name|mWritePosition
operator|=
name|writePosition
expr_stmt|;
block|}
DECL|function|discard
name|gl
operator|::
name|Error
name|VertexBufferInterface
operator|::
name|discard
parameter_list|()
block|{
return|return
name|mVertexBuffer
operator|->
name|discard
argument_list|()
return|;
block|}
DECL|function|storeVertexAttributes
name|gl
operator|::
name|Error
name|VertexBufferInterface
operator|::
name|storeVertexAttributes
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
specifier|const
name|gl
operator|::
name|VertexAttribCurrentValueData
modifier|&
name|currentValue
parameter_list|,
name|GLint
name|start
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instances
parameter_list|,
name|unsigned
name|int
modifier|*
name|outStreamOffset
parameter_list|)
block|{
name|gl
operator|::
name|Error
name|error
argument_list|(
name|GL_NO_ERROR
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|spaceRequired
decl_stmt|;
name|error
operator|=
name|mVertexBuffer
operator|->
name|getSpaceRequired
argument_list|(
name|attrib
argument_list|,
name|count
argument_list|,
name|instances
argument_list|,
operator|&
name|spaceRequired
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
if|if
condition|(
name|mWritePosition
operator|+
name|spaceRequired
operator|<
name|mWritePosition
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Internal error, new vertex buffer write position would overflow."
argument_list|)
return|;
block|}
name|error
operator|=
name|reserveSpace
argument_list|(
name|mReservedSpace
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|mReservedSpace
operator|=
literal|0
expr_stmt|;
name|error
operator|=
name|mVertexBuffer
operator|->
name|storeVertexAttributes
argument_list|(
name|attrib
argument_list|,
name|currentValue
argument_list|,
name|start
argument_list|,
name|count
argument_list|,
name|instances
argument_list|,
name|mWritePosition
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
if|if
condition|(
name|outStreamOffset
condition|)
block|{
operator|*
name|outStreamOffset
operator|=
name|mWritePosition
expr_stmt|;
block|}
name|mWritePosition
operator|+=
name|spaceRequired
expr_stmt|;
comment|// Align to 16-byte boundary
name|mWritePosition
operator|=
name|rx
operator|::
name|roundUp
argument_list|(
name|mWritePosition
argument_list|,
literal|16u
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|reserveVertexSpace
name|gl
operator|::
name|Error
name|VertexBufferInterface
operator|::
name|reserveVertexSpace
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instances
parameter_list|)
block|{
name|gl
operator|::
name|Error
name|error
argument_list|(
name|GL_NO_ERROR
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|requiredSpace
decl_stmt|;
name|error
operator|=
name|mVertexBuffer
operator|->
name|getSpaceRequired
argument_list|(
name|attrib
argument_list|,
name|count
argument_list|,
name|instances
argument_list|,
operator|&
name|requiredSpace
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
comment|// Protect against integer overflow
if|if
condition|(
name|mReservedSpace
operator|+
name|requiredSpace
operator|<
name|mReservedSpace
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Unable to reserve %u extra bytes in internal vertex buffer, "
literal|"it would result in an overflow."
argument_list|,
name|requiredSpace
argument_list|)
return|;
block|}
name|mReservedSpace
operator|+=
name|requiredSpace
expr_stmt|;
comment|// Align to 16-byte boundary
name|mReservedSpace
operator|=
name|rx
operator|::
name|roundUp
argument_list|(
name|mReservedSpace
argument_list|,
literal|16u
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getVertexBuffer
name|VertexBuffer
modifier|*
name|VertexBufferInterface
operator|::
name|getVertexBuffer
parameter_list|()
specifier|const
block|{
return|return
name|mVertexBuffer
return|;
block|}
DECL|function|directStoragePossible
name|bool
name|VertexBufferInterface
operator|::
name|directStoragePossible
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
specifier|const
name|gl
operator|::
name|VertexAttribCurrentValueData
modifier|&
name|currentValue
parameter_list|)
specifier|const
block|{
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
init|=
name|attrib
operator|.
name|buffer
operator|.
name|get
argument_list|()
decl_stmt|;
name|BufferD3D
modifier|*
name|storage
init|=
name|buffer
condition|?
name|BufferD3D
operator|::
name|makeBufferD3D
argument_list|(
name|buffer
operator|->
name|getImplementation
argument_list|()
argument_list|)
else|:
name|NULL
decl_stmt|;
if|if
condition|(
operator|!
name|storage
operator|||
operator|!
name|storage
operator|->
name|supportsDirectBinding
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Alignment restrictions: In D3D, vertex data must be aligned to
comment|//  the format stride, or to a 4-byte boundary, whichever is smaller.
comment|//  (Undocumented, and experimentally confirmed)
name|size_t
name|alignment
init|=
literal|4
decl_stmt|;
name|bool
name|requiresConversion
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|attrib
operator|.
name|type
operator|!=
name|GL_FLOAT
condition|)
block|{
name|gl
operator|::
name|VertexFormat
name|vertexFormat
argument_list|(
name|attrib
argument_list|,
name|currentValue
operator|.
name|Type
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|outputElementSize
decl_stmt|;
name|getVertexBuffer
argument_list|()
operator|->
name|getSpaceRequired
argument_list|(
name|attrib
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|&
name|outputElementSize
argument_list|)
expr_stmt|;
name|alignment
operator|=
name|std
operator|::
name|min
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|outputElementSize
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|requiresConversion
operator|=
operator|(
name|mRenderer
operator|->
name|getVertexConversionType
argument_list|(
name|vertexFormat
argument_list|)
operator|&
name|VERTEX_CONVERT_CPU
operator|)
operator|!=
literal|0
expr_stmt|;
block|}
name|bool
name|isAligned
init|=
operator|(
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|ComputeVertexAttributeStride
argument_list|(
name|attrib
argument_list|)
argument_list|)
operator|%
name|alignment
operator|==
literal|0
operator|)
operator|&&
operator|(
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|attrib
operator|.
name|offset
argument_list|)
operator|%
name|alignment
operator|==
literal|0
operator|)
decl_stmt|;
return|return
operator|!
name|requiresConversion
operator|&&
name|isAligned
return|;
block|}
DECL|function|StreamingVertexBufferInterface
name|StreamingVertexBufferInterface
operator|::
name|StreamingVertexBufferInterface
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|std
operator|::
name|size_t
name|initialSize
parameter_list|)
member_init_list|:
name|VertexBufferInterface
argument_list|(
name|renderer
argument_list|,
literal|true
argument_list|)
block|{
name|setBufferSize
argument_list|(
name|initialSize
argument_list|)
expr_stmt|;
block|}
DECL|function|~StreamingVertexBufferInterface
name|StreamingVertexBufferInterface
operator|::
name|~
name|StreamingVertexBufferInterface
parameter_list|()
block|{ }
DECL|function|reserveSpace
name|gl
operator|::
name|Error
name|StreamingVertexBufferInterface
operator|::
name|reserveSpace
parameter_list|(
name|unsigned
name|int
name|size
parameter_list|)
block|{
name|unsigned
name|int
name|curBufferSize
init|=
name|getBufferSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|curBufferSize
condition|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|setBufferSize
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|size
argument_list|,
literal|3
operator|*
name|curBufferSize
operator|/
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|setWritePosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getWritePosition
argument_list|()
operator|+
name|size
operator|>
name|curBufferSize
condition|)
block|{
name|gl
operator|::
name|Error
name|error
init|=
name|discard
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|setWritePosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|StaticVertexBufferInterface
name|StaticVertexBufferInterface
operator|::
name|StaticVertexBufferInterface
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|VertexBufferInterface
argument_list|(
name|renderer
argument_list|,
literal|false
argument_list|)
block|{ }
DECL|function|~StaticVertexBufferInterface
name|StaticVertexBufferInterface
operator|::
name|~
name|StaticVertexBufferInterface
parameter_list|()
block|{ }
DECL|function|lookupAttribute
name|bool
name|StaticVertexBufferInterface
operator|::
name|lookupAttribute
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
name|unsigned
name|int
modifier|*
name|outStreamOffset
parameter_list|)
block|{
for|for
control|(
name|unsigned
name|int
name|element
init|=
literal|0
init|;
name|element
operator|<
name|mCache
operator|.
name|size
argument_list|()
condition|;
name|element
operator|++
control|)
block|{
if|if
condition|(
name|mCache
index|[
name|element
index|]
operator|.
name|type
operator|==
name|attrib
operator|.
name|type
operator|&&
name|mCache
index|[
name|element
index|]
operator|.
name|size
operator|==
name|attrib
operator|.
name|size
operator|&&
name|mCache
index|[
name|element
index|]
operator|.
name|stride
operator|==
name|ComputeVertexAttributeStride
argument_list|(
name|attrib
argument_list|)
operator|&&
name|mCache
index|[
name|element
index|]
operator|.
name|normalized
operator|==
name|attrib
operator|.
name|normalized
operator|&&
name|mCache
index|[
name|element
index|]
operator|.
name|pureInteger
operator|==
name|attrib
operator|.
name|pureInteger
condition|)
block|{
name|size_t
name|offset
init|=
operator|(
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|attrib
operator|.
name|offset
argument_list|)
operator|%
name|ComputeVertexAttributeStride
argument_list|(
name|attrib
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|mCache
index|[
name|element
index|]
operator|.
name|attributeOffset
operator|==
name|offset
condition|)
block|{
if|if
condition|(
name|outStreamOffset
condition|)
block|{
operator|*
name|outStreamOffset
operator|=
name|mCache
index|[
name|element
index|]
operator|.
name|streamOffset
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|function|reserveSpace
name|gl
operator|::
name|Error
name|StaticVertexBufferInterface
operator|::
name|reserveSpace
parameter_list|(
name|unsigned
name|int
name|size
parameter_list|)
block|{
name|unsigned
name|int
name|curSize
init|=
name|getBufferSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|curSize
operator|==
literal|0
condition|)
block|{
return|return
name|setBufferSize
argument_list|(
name|size
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|curSize
operator|>=
name|size
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_INVALID_OPERATION
argument_list|,
literal|"Internal error, Static vertex buffers can't be resized."
argument_list|)
return|;
block|}
block|}
DECL|function|storeVertexAttributes
name|gl
operator|::
name|Error
name|StaticVertexBufferInterface
operator|::
name|storeVertexAttributes
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
specifier|const
name|gl
operator|::
name|VertexAttribCurrentValueData
modifier|&
name|currentValue
parameter_list|,
name|GLint
name|start
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instances
parameter_list|,
name|unsigned
name|int
modifier|*
name|outStreamOffset
parameter_list|)
block|{
name|unsigned
name|int
name|streamOffset
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|VertexBufferInterface
operator|::
name|storeVertexAttributes
argument_list|(
name|attrib
argument_list|,
name|currentValue
argument_list|,
name|start
argument_list|,
name|count
argument_list|,
name|instances
argument_list|,
operator|&
name|streamOffset
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|size_t
name|attributeOffset
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|attrib
operator|.
name|offset
argument_list|)
operator|%
name|ComputeVertexAttributeStride
argument_list|(
name|attrib
argument_list|)
decl_stmt|;
name|VertexElement
name|element
init|=
block|{
name|attrib
operator|.
name|type
block|,
name|attrib
operator|.
name|size
block|,
name|ComputeVertexAttributeStride
argument_list|(
name|attrib
argument_list|)
block|,
name|attrib
operator|.
name|normalized
block|,
name|attrib
operator|.
name|pureInteger
block|,
name|attributeOffset
block|,
name|streamOffset
block|}
decl_stmt|;
name|mCache
operator|.
name|push_back
argument_list|(
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|outStreamOffset
condition|)
block|{
operator|*
name|outStreamOffset
operator|=
name|streamOffset
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
block|}
end_namespace
end_unit
