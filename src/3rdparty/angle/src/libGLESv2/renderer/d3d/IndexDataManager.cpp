begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// IndexDataManager.cpp: Defines the IndexDataManager, a class that
end_comment
begin_comment
comment|// runs the Buffer translation process for index buffers.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/IndexDataManager.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/BufferD3D.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Buffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/IndexBuffer.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|IndexDataManager
name|IndexDataManager
operator|::
name|IndexDataManager
parameter_list|(
name|Renderer
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
block|{
name|mStreamingBufferShort
operator|=
operator|new
name|StreamingIndexBufferInterface
argument_list|(
name|mRenderer
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mStreamingBufferShort
operator|->
name|reserveBufferSpace
argument_list|(
name|INITIAL_INDEX_BUFFER_SIZE
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
condition|)
block|{
operator|delete
name|mStreamingBufferShort
expr_stmt|;
name|mStreamingBufferShort
operator|=
name|NULL
expr_stmt|;
block|}
name|mStreamingBufferInt
operator|=
operator|new
name|StreamingIndexBufferInterface
argument_list|(
name|mRenderer
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mStreamingBufferInt
operator|->
name|reserveBufferSpace
argument_list|(
name|INITIAL_INDEX_BUFFER_SIZE
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
condition|)
block|{
operator|delete
name|mStreamingBufferInt
expr_stmt|;
name|mStreamingBufferInt
operator|=
name|NULL
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mStreamingBufferShort
condition|)
block|{
comment|// Make sure both buffers are deleted.
operator|delete
name|mStreamingBufferInt
expr_stmt|;
name|mStreamingBufferInt
operator|=
name|NULL
expr_stmt|;
name|ERR
argument_list|(
literal|"Failed to allocate the streaming index buffer(s)."
argument_list|)
expr_stmt|;
block|}
name|mCountingBuffer
operator|=
name|NULL
expr_stmt|;
block|}
DECL|function|~IndexDataManager
name|IndexDataManager
operator|::
name|~
name|IndexDataManager
parameter_list|()
block|{
operator|delete
name|mStreamingBufferShort
expr_stmt|;
operator|delete
name|mStreamingBufferInt
expr_stmt|;
operator|delete
name|mCountingBuffer
expr_stmt|;
block|}
DECL|function|convertIndices
specifier|static
name|void
name|convertIndices
parameter_list|(
name|GLenum
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_BYTE
condition|)
block|{
specifier|const
name|GLubyte
modifier|*
name|in
init|=
cast|static_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|GLushort
modifier|*
name|out
init|=
cast|static_cast
argument_list|<
name|GLushort
operator|*
argument_list|>
argument_list|(
name|output
argument_list|)
decl_stmt|;
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
name|i
index|]
operator|=
name|in
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_INT
condition|)
block|{
name|memcpy
argument_list|(
name|output
argument_list|,
name|input
argument_list|,
name|count
operator|*
sizeof|sizeof
argument_list|(
name|GLuint
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_SHORT
condition|)
block|{
name|memcpy
argument_list|(
name|output
argument_list|,
name|input
argument_list|,
name|count
operator|*
sizeof|sizeof
argument_list|(
name|GLushort
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
template|template
parameter_list|<
name|class
name|IndexType
parameter_list|>
DECL|function|computeRange
specifier|static
name|void
name|computeRange
parameter_list|(
specifier|const
name|IndexType
modifier|*
name|indices
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLuint
modifier|*
name|minIndex
parameter_list|,
name|GLuint
modifier|*
name|maxIndex
parameter_list|)
block|{
operator|*
name|minIndex
operator|=
name|indices
index|[
literal|0
index|]
expr_stmt|;
operator|*
name|maxIndex
operator|=
name|indices
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|GLsizei
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|*
name|minIndex
operator|>
name|indices
index|[
name|i
index|]
condition|)
operator|*
name|minIndex
operator|=
name|indices
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
operator|*
name|maxIndex
operator|<
name|indices
index|[
name|i
index|]
condition|)
operator|*
name|maxIndex
operator|=
name|indices
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
DECL|function|computeRange
specifier|static
name|void
name|computeRange
parameter_list|(
name|GLenum
name|type
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLuint
modifier|*
name|minIndex
parameter_list|,
name|GLuint
modifier|*
name|maxIndex
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_BYTE
condition|)
block|{
name|computeRange
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
name|indices
argument_list|)
argument_list|,
name|count
argument_list|,
name|minIndex
argument_list|,
name|maxIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_INT
condition|)
block|{
name|computeRange
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|GLuint
operator|*
argument_list|>
argument_list|(
name|indices
argument_list|)
argument_list|,
name|count
argument_list|,
name|minIndex
argument_list|,
name|maxIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|GL_UNSIGNED_SHORT
condition|)
block|{
name|computeRange
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|GLushort
operator|*
argument_list|>
argument_list|(
name|indices
argument_list|)
argument_list|,
name|count
argument_list|,
name|minIndex
argument_list|,
name|maxIndex
argument_list|)
expr_stmt|;
block|}
else|else
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
DECL|function|prepareIndexData
name|GLenum
name|IndexDataManager
operator|::
name|prepareIndexData
parameter_list|(
name|GLenum
name|type
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
parameter_list|,
specifier|const
name|GLvoid
modifier|*
name|indices
parameter_list|,
name|TranslatedIndexData
modifier|*
name|translated
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mStreamingBufferShort
condition|)
block|{
return|return
name|GL_OUT_OF_MEMORY
return|;
block|}
name|GLenum
name|destinationIndexType
init|=
operator|(
name|type
operator|==
name|GL_UNSIGNED_INT
operator|)
condition|?
name|GL_UNSIGNED_INT
else|:
name|GL_UNSIGNED_SHORT
decl_stmt|;
name|unsigned
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|bool
name|alignedOffset
init|=
literal|false
decl_stmt|;
name|BufferD3D
modifier|*
name|storage
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
name|NULL
condition|)
block|{
if|if
condition|(
cast|reinterpret_cast
argument_list|<
name|uintptr_t
argument_list|>
argument_list|(
name|indices
argument_list|)
operator|>
name|std
operator|::
name|numeric_limits
argument_list|<
name|unsigned
name|int
argument_list|>
operator|::
name|max
argument_list|()
condition|)
block|{
return|return
name|GL_OUT_OF_MEMORY
return|;
block|}
name|offset
operator|=
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
cast|reinterpret_cast
argument_list|<
name|uintptr_t
argument_list|>
argument_list|(
name|indices
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|=
name|BufferD3D
operator|::
name|makeBufferD3D
argument_list|(
name|buffer
operator|->
name|getImplementation
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_UNSIGNED_BYTE
case|:
name|alignedOffset
operator|=
operator|(
name|offset
operator|%
sizeof|sizeof
argument_list|(
name|GLubyte
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|GL_UNSIGNED_SHORT
case|:
name|alignedOffset
operator|=
operator|(
name|offset
operator|%
sizeof|sizeof
argument_list|(
name|GLushort
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|GL_UNSIGNED_INT
case|:
name|alignedOffset
operator|=
operator|(
name|offset
operator|%
sizeof|sizeof
argument_list|(
name|GLuint
argument_list|)
operator|==
literal|0
operator|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
name|alignedOffset
operator|=
literal|false
expr_stmt|;
block|}
name|unsigned
name|int
name|typeSize
init|=
name|gl
operator|::
name|GetTypeBytes
argument_list|(
name|type
argument_list|)
decl_stmt|;
comment|// check for integer overflows
if|if
condition|(
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|count
argument_list|)
operator|>
operator|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|unsigned
name|int
argument_list|>
operator|::
name|max
argument_list|()
operator|/
name|typeSize
operator|)
operator|||
name|typeSize
operator|*
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|count
argument_list|)
operator|+
name|offset
operator|<
name|offset
condition|)
block|{
return|return
name|GL_OUT_OF_MEMORY
return|;
block|}
if|if
condition|(
name|typeSize
operator|*
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|count
argument_list|)
operator|+
name|offset
operator|>
name|storage
operator|->
name|getSize
argument_list|()
condition|)
block|{
return|return
name|GL_INVALID_OPERATION
return|;
block|}
name|indices
operator|=
cast|static_cast
argument_list|<
specifier|const
name|GLubyte
operator|*
argument_list|>
argument_list|(
name|storage
operator|->
name|getData
argument_list|()
argument_list|)
operator|+
name|offset
expr_stmt|;
block|}
name|StreamingIndexBufferInterface
modifier|*
name|streamingBuffer
init|=
operator|(
name|type
operator|==
name|GL_UNSIGNED_INT
operator|)
condition|?
name|mStreamingBufferInt
else|:
name|mStreamingBufferShort
decl_stmt|;
name|StaticIndexBufferInterface
modifier|*
name|staticBuffer
init|=
name|storage
condition|?
name|storage
operator|->
name|getStaticIndexBuffer
argument_list|()
else|:
name|NULL
decl_stmt|;
name|IndexBufferInterface
modifier|*
name|indexBuffer
init|=
name|streamingBuffer
decl_stmt|;
name|bool
name|directStorage
init|=
name|alignedOffset
operator|&&
name|storage
operator|&&
name|storage
operator|->
name|supportsDirectBinding
argument_list|()
operator|&&
name|destinationIndexType
operator|==
name|type
decl_stmt|;
name|unsigned
name|int
name|streamOffset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|directStorage
condition|)
block|{
name|indexBuffer
operator|=
name|streamingBuffer
expr_stmt|;
name|streamOffset
operator|=
name|offset
expr_stmt|;
if|if
condition|(
operator|!
name|storage
operator|->
name|getIndexRangeCache
argument_list|()
operator|->
name|findRange
argument_list|(
name|type
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
operator|&
name|translated
operator|->
name|minIndex
argument_list|,
operator|&
name|translated
operator|->
name|maxIndex
argument_list|,
name|NULL
argument_list|)
condition|)
block|{
name|computeRange
argument_list|(
name|type
argument_list|,
name|indices
argument_list|,
name|count
argument_list|,
operator|&
name|translated
operator|->
name|minIndex
argument_list|,
operator|&
name|translated
operator|->
name|maxIndex
argument_list|)
expr_stmt|;
name|storage
operator|->
name|getIndexRangeCache
argument_list|()
operator|->
name|addRange
argument_list|(
name|type
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
name|translated
operator|->
name|minIndex
argument_list|,
name|translated
operator|->
name|maxIndex
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|staticBuffer
operator|&&
name|staticBuffer
operator|->
name|getBufferSize
argument_list|()
operator|!=
literal|0
operator|&&
name|staticBuffer
operator|->
name|getIndexType
argument_list|()
operator|==
name|type
operator|&&
name|alignedOffset
condition|)
block|{
name|indexBuffer
operator|=
name|staticBuffer
expr_stmt|;
if|if
condition|(
operator|!
name|staticBuffer
operator|->
name|getIndexRangeCache
argument_list|()
operator|->
name|findRange
argument_list|(
name|type
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
operator|&
name|translated
operator|->
name|minIndex
argument_list|,
operator|&
name|translated
operator|->
name|maxIndex
argument_list|,
operator|&
name|streamOffset
argument_list|)
condition|)
block|{
name|streamOffset
operator|=
operator|(
name|offset
operator|/
name|gl
operator|::
name|GetTypeBytes
argument_list|(
name|type
argument_list|)
operator|)
operator|*
name|gl
operator|::
name|GetTypeBytes
argument_list|(
name|destinationIndexType
argument_list|)
expr_stmt|;
name|computeRange
argument_list|(
name|type
argument_list|,
name|indices
argument_list|,
name|count
argument_list|,
operator|&
name|translated
operator|->
name|minIndex
argument_list|,
operator|&
name|translated
operator|->
name|maxIndex
argument_list|)
expr_stmt|;
name|staticBuffer
operator|->
name|getIndexRangeCache
argument_list|()
operator|->
name|addRange
argument_list|(
name|type
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
name|translated
operator|->
name|minIndex
argument_list|,
name|translated
operator|->
name|maxIndex
argument_list|,
name|streamOffset
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|unsigned
name|int
name|convertCount
init|=
name|count
decl_stmt|;
if|if
condition|(
name|staticBuffer
condition|)
block|{
if|if
condition|(
name|staticBuffer
operator|->
name|getBufferSize
argument_list|()
operator|==
literal|0
operator|&&
name|alignedOffset
condition|)
block|{
name|indexBuffer
operator|=
name|staticBuffer
expr_stmt|;
name|convertCount
operator|=
name|storage
operator|->
name|getSize
argument_list|()
operator|/
name|gl
operator|::
name|GetTypeBytes
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storage
operator|->
name|invalidateStaticData
argument_list|()
expr_stmt|;
name|staticBuffer
operator|=
name|NULL
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|indexBuffer
condition|)
block|{
name|ERR
argument_list|(
literal|"No valid index buffer."
argument_list|)
expr_stmt|;
return|return
name|GL_INVALID_OPERATION
return|;
block|}
name|unsigned
name|int
name|indexTypeSize
init|=
name|gl
operator|::
name|GetTypeBytes
argument_list|(
name|destinationIndexType
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertCount
operator|>
name|std
operator|::
name|numeric_limits
argument_list|<
name|unsigned
name|int
argument_list|>
operator|::
name|max
argument_list|()
operator|/
name|indexTypeSize
condition|)
block|{
name|ERR
argument_list|(
literal|"Reserving %u indicies of %u bytes each exceeds the maximum buffer size."
argument_list|,
name|convertCount
argument_list|,
name|indexTypeSize
argument_list|)
expr_stmt|;
return|return
name|GL_OUT_OF_MEMORY
return|;
block|}
name|unsigned
name|int
name|bufferSizeRequired
init|=
name|convertCount
operator|*
name|indexTypeSize
decl_stmt|;
if|if
condition|(
operator|!
name|indexBuffer
operator|->
name|reserveBufferSpace
argument_list|(
name|bufferSizeRequired
argument_list|,
name|type
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to reserve %u bytes in an index buffer."
argument_list|,
name|bufferSizeRequired
argument_list|)
expr_stmt|;
return|return
name|GL_OUT_OF_MEMORY
return|;
block|}
name|void
modifier|*
name|output
init|=
name|NULL
decl_stmt|;
if|if
condition|(
operator|!
name|indexBuffer
operator|->
name|mapBuffer
argument_list|(
name|bufferSizeRequired
argument_list|,
operator|&
name|output
argument_list|,
operator|&
name|streamOffset
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to map index buffer."
argument_list|)
expr_stmt|;
return|return
name|GL_OUT_OF_MEMORY
return|;
block|}
name|convertIndices
argument_list|(
name|type
argument_list|,
name|staticBuffer
condition|?
name|storage
operator|->
name|getData
argument_list|()
else|:
name|indices
argument_list|,
name|convertCount
argument_list|,
name|output
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|indexBuffer
operator|->
name|unmapBuffer
argument_list|()
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to unmap index buffer."
argument_list|)
expr_stmt|;
return|return
name|GL_OUT_OF_MEMORY
return|;
block|}
name|computeRange
argument_list|(
name|type
argument_list|,
name|indices
argument_list|,
name|count
argument_list|,
operator|&
name|translated
operator|->
name|minIndex
argument_list|,
operator|&
name|translated
operator|->
name|maxIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|staticBuffer
condition|)
block|{
name|streamOffset
operator|=
operator|(
name|offset
operator|/
name|gl
operator|::
name|GetTypeBytes
argument_list|(
name|type
argument_list|)
operator|)
operator|*
name|gl
operator|::
name|GetTypeBytes
argument_list|(
name|destinationIndexType
argument_list|)
expr_stmt|;
name|staticBuffer
operator|->
name|getIndexRangeCache
argument_list|()
operator|->
name|addRange
argument_list|(
name|type
argument_list|,
name|offset
argument_list|,
name|count
argument_list|,
name|translated
operator|->
name|minIndex
argument_list|,
name|translated
operator|->
name|maxIndex
argument_list|,
name|streamOffset
argument_list|)
expr_stmt|;
block|}
block|}
name|translated
operator|->
name|storage
operator|=
name|directStorage
condition|?
name|storage
else|:
name|NULL
expr_stmt|;
name|translated
operator|->
name|indexBuffer
operator|=
name|indexBuffer
operator|->
name|getIndexBuffer
argument_list|()
expr_stmt|;
name|translated
operator|->
name|serial
operator|=
name|directStorage
condition|?
name|storage
operator|->
name|getSerial
argument_list|()
else|:
name|indexBuffer
operator|->
name|getSerial
argument_list|()
expr_stmt|;
name|translated
operator|->
name|startIndex
operator|=
name|streamOffset
operator|/
name|gl
operator|::
name|GetTypeBytes
argument_list|(
name|destinationIndexType
argument_list|)
expr_stmt|;
name|translated
operator|->
name|startOffset
operator|=
name|streamOffset
expr_stmt|;
if|if
condition|(
name|storage
condition|)
block|{
name|storage
operator|->
name|promoteStaticUsage
argument_list|(
name|count
operator|*
name|gl
operator|::
name|GetTypeBytes
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|GL_NO_ERROR
return|;
block|}
DECL|function|getCountingIndices
name|StaticIndexBufferInterface
modifier|*
name|IndexDataManager
operator|::
name|getCountingIndices
parameter_list|(
name|GLsizei
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|<=
literal|65536
condition|)
comment|// 16-bit indices
block|{
specifier|const
name|unsigned
name|int
name|spaceNeeded
init|=
name|count
operator|*
expr|sizeof
operator|(
name|unsigned
name|short
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|mCountingBuffer
operator|||
name|mCountingBuffer
operator|->
name|getBufferSize
argument_list|()
operator|<
name|spaceNeeded
condition|)
block|{
operator|delete
name|mCountingBuffer
expr_stmt|;
name|mCountingBuffer
operator|=
operator|new
name|StaticIndexBufferInterface
argument_list|(
name|mRenderer
argument_list|)
expr_stmt|;
name|mCountingBuffer
operator|->
name|reserveBufferSpace
argument_list|(
name|spaceNeeded
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|)
expr_stmt|;
name|void
modifier|*
name|mappedMemory
init|=
name|NULL
decl_stmt|;
if|if
condition|(
operator|!
name|mCountingBuffer
operator|->
name|mapBuffer
argument_list|(
name|spaceNeeded
argument_list|,
operator|&
name|mappedMemory
argument_list|,
name|NULL
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to map counting buffer."
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|unsigned
name|short
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|short
operator|*
argument_list|>
argument_list|(
name|mappedMemory
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mCountingBuffer
operator|->
name|unmapBuffer
argument_list|()
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to unmap counting buffer."
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|mStreamingBufferInt
condition|)
comment|// 32-bit indices supported
block|{
specifier|const
name|unsigned
name|int
name|spaceNeeded
init|=
name|count
operator|*
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|mCountingBuffer
operator|||
name|mCountingBuffer
operator|->
name|getBufferSize
argument_list|()
operator|<
name|spaceNeeded
condition|)
block|{
operator|delete
name|mCountingBuffer
expr_stmt|;
name|mCountingBuffer
operator|=
operator|new
name|StaticIndexBufferInterface
argument_list|(
name|mRenderer
argument_list|)
expr_stmt|;
name|mCountingBuffer
operator|->
name|reserveBufferSpace
argument_list|(
name|spaceNeeded
argument_list|,
name|GL_UNSIGNED_INT
argument_list|)
expr_stmt|;
name|void
modifier|*
name|mappedMemory
init|=
name|NULL
decl_stmt|;
if|if
condition|(
operator|!
name|mCountingBuffer
operator|->
name|mapBuffer
argument_list|(
name|spaceNeeded
argument_list|,
operator|&
name|mappedMemory
argument_list|,
name|NULL
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to map counting buffer."
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|unsigned
name|int
modifier|*
name|data
init|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|int
operator|*
argument_list|>
argument_list|(
name|mappedMemory
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mCountingBuffer
operator|->
name|unmapBuffer
argument_list|()
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to unmap counting buffer."
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
block|}
block|}
else|else
block|{
return|return
name|NULL
return|;
block|}
return|return
name|mCountingBuffer
return|;
block|}
block|}
end_namespace
end_unit
