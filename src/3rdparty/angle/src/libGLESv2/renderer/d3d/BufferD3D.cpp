begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// BufferD3D.cpp Defines common functionality between the Buffer9 and Buffer11 classes.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/BufferD3D.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/VertexBuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/IndexBuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|member|mNextSerial
name|unsigned
name|int
name|BufferD3D
operator|::
name|mNextSerial
init|=
literal|1
decl_stmt|;
DECL|function|BufferD3D
name|BufferD3D
operator|::
name|BufferD3D
parameter_list|()
member_init_list|:
name|BufferImpl
argument_list|()
member_init_list|,
name|mStaticVertexBuffer
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mStaticIndexBuffer
argument_list|(
name|NULL
argument_list|)
block|{
name|updateSerial
argument_list|()
expr_stmt|;
block|}
DECL|function|~BufferD3D
name|BufferD3D
operator|::
name|~
name|BufferD3D
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mStaticVertexBuffer
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mStaticIndexBuffer
argument_list|)
expr_stmt|;
block|}
DECL|function|makeBufferD3D
name|BufferD3D
modifier|*
name|BufferD3D
operator|::
name|makeBufferD3D
parameter_list|(
name|BufferImpl
modifier|*
name|buffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|BufferD3D
operator|*
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|BufferD3D
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
return|;
block|}
DECL|function|updateSerial
name|void
name|BufferD3D
operator|::
name|updateSerial
parameter_list|()
block|{
name|mSerial
operator|=
name|mNextSerial
operator|++
expr_stmt|;
block|}
DECL|function|initializeStaticData
name|void
name|BufferD3D
operator|::
name|initializeStaticData
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mStaticVertexBuffer
condition|)
block|{
name|mStaticVertexBuffer
operator|=
operator|new
name|rx
operator|::
name|StaticVertexBufferInterface
argument_list|(
name|getRenderer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mStaticIndexBuffer
condition|)
block|{
name|mStaticIndexBuffer
operator|=
operator|new
name|rx
operator|::
name|StaticIndexBufferInterface
argument_list|(
name|getRenderer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|invalidateStaticData
name|void
name|BufferD3D
operator|::
name|invalidateStaticData
parameter_list|()
block|{
if|if
condition|(
operator|(
name|mStaticVertexBuffer
operator|&&
name|mStaticVertexBuffer
operator|->
name|getBufferSize
argument_list|()
operator|!=
literal|0
operator|)
operator|||
operator|(
name|mStaticIndexBuffer
operator|&&
name|mStaticIndexBuffer
operator|->
name|getBufferSize
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
name|SafeDelete
argument_list|(
name|mStaticVertexBuffer
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mStaticIndexBuffer
argument_list|)
expr_stmt|;
block|}
name|mUnmodifiedDataUse
operator|=
literal|0
expr_stmt|;
block|}
comment|// Creates static buffers if sufficient used data has been left unmodified
DECL|function|promoteStaticUsage
name|void
name|BufferD3D
operator|::
name|promoteStaticUsage
parameter_list|(
name|int
name|dataSize
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mStaticVertexBuffer
operator|&&
operator|!
name|mStaticIndexBuffer
condition|)
block|{
name|mUnmodifiedDataUse
operator|+=
name|dataSize
expr_stmt|;
if|if
condition|(
name|mUnmodifiedDataUse
operator|>
literal|3
operator|*
name|getSize
argument_list|()
condition|)
block|{
name|initializeStaticData
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_namespace
end_unit
