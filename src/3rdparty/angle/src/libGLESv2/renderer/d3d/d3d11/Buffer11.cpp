begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Buffer11.cpp Defines the Buffer11 class.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/Buffer11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/formatutils11.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|PackPixelsParams
name|PackPixelsParams
operator|::
name|PackPixelsParams
parameter_list|()
member_init_list|:
name|format
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|type
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|outputPitch
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|packBuffer
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|offset
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|PackPixelsParams
name|PackPixelsParams
operator|::
name|PackPixelsParams
parameter_list|(
specifier|const
name|gl
operator|::
name|Rectangle
modifier|&
name|areaIn
parameter_list|,
name|GLenum
name|formatIn
parameter_list|,
name|GLenum
name|typeIn
parameter_list|,
name|GLuint
name|outputPitchIn
parameter_list|,
specifier|const
name|gl
operator|::
name|PixelPackState
modifier|&
name|packIn
parameter_list|,
name|ptrdiff_t
name|offsetIn
parameter_list|)
member_init_list|:
name|area
argument_list|(
name|areaIn
argument_list|)
member_init_list|,
name|format
argument_list|(
name|formatIn
argument_list|)
member_init_list|,
name|type
argument_list|(
name|typeIn
argument_list|)
member_init_list|,
name|outputPitch
argument_list|(
name|outputPitchIn
argument_list|)
member_init_list|,
name|packBuffer
argument_list|(
name|packIn
operator|.
name|pixelBuffer
operator|.
name|get
argument_list|()
argument_list|)
member_init_list|,
name|pack
argument_list|(
name|packIn
operator|.
name|alignment
argument_list|,
name|packIn
operator|.
name|reverseRowOrder
argument_list|)
member_init_list|,
name|offset
argument_list|(
name|offsetIn
argument_list|)
block|{}
DECL|namespace|gl_d3d11
namespace|namespace
name|gl_d3d11
block|{
DECL|function|GetD3DMapTypeFromBits
name|D3D11_MAP
name|GetD3DMapTypeFromBits
parameter_list|(
name|GLbitfield
name|access
parameter_list|)
block|{
name|bool
name|readBit
init|=
operator|(
operator|(
name|access
operator|&
name|GL_MAP_READ_BIT
operator|)
operator|!=
literal|0
operator|)
decl_stmt|;
name|bool
name|writeBit
init|=
operator|(
operator|(
name|access
operator|&
name|GL_MAP_WRITE_BIT
operator|)
operator|!=
literal|0
operator|)
decl_stmt|;
name|ASSERT
argument_list|(
name|readBit
operator|||
name|writeBit
argument_list|)
expr_stmt|;
comment|// Note : we ignore the discard bit, because in D3D11, staging buffers
comment|//  don't accept the map-discard flag (discard only works for DYNAMIC usage)
if|if
condition|(
name|readBit
operator|&&
operator|!
name|writeBit
condition|)
block|{
return|return
name|D3D11_MAP_READ
return|;
block|}
elseif|else
if|if
condition|(
name|writeBit
operator|&&
operator|!
name|readBit
condition|)
block|{
return|return
name|D3D11_MAP_WRITE
return|;
block|}
elseif|else
if|if
condition|(
name|writeBit
operator|&&
name|readBit
condition|)
block|{
return|return
name|D3D11_MAP_READ_WRITE
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|D3D11_MAP_READ
return|;
block|}
block|}
block|}
comment|// Each instance of Buffer11::BufferStorage11 is specialized for a class of D3D binding points
comment|// - vertex/transform feedback buffers
comment|// - index buffers
comment|// - pixel unpack buffers
comment|// - uniform buffers
DECL|class|BufferStorage11
class|class
name|Buffer11
operator|::
name|BufferStorage11
block|{
public|public:
DECL|function|~BufferStorage11
specifier|virtual
name|~
name|BufferStorage11
parameter_list|()
block|{}
DECL|function|getDataRevision
name|DataRevision
name|getDataRevision
parameter_list|()
specifier|const
block|{
return|return
name|mRevision
return|;
block|}
DECL|function|getUsage
name|BufferUsage
name|getUsage
parameter_list|()
specifier|const
block|{
return|return
name|mUsage
return|;
block|}
DECL|function|getSize
name|size_t
name|getSize
parameter_list|()
specifier|const
block|{
return|return
name|mBufferSize
return|;
block|}
DECL|function|isMappable
name|bool
name|isMappable
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mUsage
operator|==
name|BUFFER_USAGE_STAGING
operator|||
name|mUsage
operator|==
name|BUFFER_USAGE_PIXEL_PACK
operator|)
return|;
block|}
DECL|function|setDataRevision
name|void
name|setDataRevision
parameter_list|(
name|DataRevision
name|rev
parameter_list|)
block|{
name|mRevision
operator|=
name|rev
expr_stmt|;
block|}
specifier|virtual
name|bool
name|copyFromStorage
parameter_list|(
name|BufferStorage11
modifier|*
name|source
parameter_list|,
name|size_t
name|sourceOffset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|destOffset
parameter_list|)
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|bool
name|resize
parameter_list|(
name|size_t
name|size
parameter_list|,
name|bool
name|preserveData
parameter_list|)
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|void
modifier|*
name|map
parameter_list|(
name|size_t
name|offset
parameter_list|,
name|size_t
name|length
parameter_list|,
name|GLbitfield
name|access
parameter_list|)
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|void
name|unmap
parameter_list|()
function_decl|=
literal|0
function_decl|;
protected|protected:
name|BufferStorage11
parameter_list|(
name|Renderer11
modifier|*
name|renderer
parameter_list|,
name|BufferUsage
name|usage
parameter_list|)
constructor_decl|;
DECL|member|mRenderer
name|Renderer11
modifier|*
name|mRenderer
decl_stmt|;
DECL|member|mRevision
name|DataRevision
name|mRevision
decl_stmt|;
DECL|member|mUsage
specifier|const
name|BufferUsage
name|mUsage
decl_stmt|;
DECL|member|mBufferSize
name|size_t
name|mBufferSize
decl_stmt|;
block|}
class|;
comment|// A native buffer storage represents an underlying D3D11 buffer for a particular
comment|// type of storage.
DECL|class|NativeBuffer11
class|class
name|Buffer11
operator|::
name|NativeBuffer11
super|:
specifier|public
name|Buffer11
operator|::
name|BufferStorage11
block|{
public|public:
name|NativeBuffer11
parameter_list|(
name|Renderer11
modifier|*
name|renderer
parameter_list|,
name|BufferUsage
name|usage
parameter_list|)
constructor_decl|;
name|~
name|NativeBuffer11
parameter_list|()
destructor_decl|;
DECL|function|getNativeBuffer
name|ID3D11Buffer
modifier|*
name|getNativeBuffer
parameter_list|()
specifier|const
block|{
return|return
name|mNativeBuffer
return|;
block|}
specifier|virtual
name|bool
name|copyFromStorage
parameter_list|(
name|BufferStorage11
modifier|*
name|source
parameter_list|,
name|size_t
name|sourceOffset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|destOffset
parameter_list|)
function_decl|;
specifier|virtual
name|bool
name|resize
parameter_list|(
name|size_t
name|size
parameter_list|,
name|bool
name|preserveData
parameter_list|)
function_decl|;
specifier|virtual
name|void
modifier|*
name|map
parameter_list|(
name|size_t
name|offset
parameter_list|,
name|size_t
name|length
parameter_list|,
name|GLbitfield
name|access
parameter_list|)
function_decl|;
specifier|virtual
name|void
name|unmap
parameter_list|()
function_decl|;
private|private:
DECL|member|mNativeBuffer
name|ID3D11Buffer
modifier|*
name|mNativeBuffer
decl_stmt|;
specifier|static
name|void
name|fillBufferDesc
parameter_list|(
name|D3D11_BUFFER_DESC
modifier|*
name|bufferDesc
parameter_list|,
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|BufferUsage
name|usage
parameter_list|,
name|unsigned
name|int
name|bufferSize
parameter_list|)
function_decl|;
block|}
class|;
comment|// Pack storage represents internal storage for pack buffers. We implement pack buffers
comment|// as CPU memory, tied to a staging texture, for asynchronous texture readback.
DECL|class|PackStorage11
class|class
name|Buffer11
operator|::
name|PackStorage11
super|:
specifier|public
name|Buffer11
operator|::
name|BufferStorage11
block|{
public|public:
name|PackStorage11
parameter_list|(
name|Renderer11
modifier|*
name|renderer
parameter_list|)
constructor_decl|;
name|~
name|PackStorage11
parameter_list|()
destructor_decl|;
specifier|virtual
name|bool
name|copyFromStorage
parameter_list|(
name|BufferStorage11
modifier|*
name|source
parameter_list|,
name|size_t
name|sourceOffset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|destOffset
parameter_list|)
function_decl|;
specifier|virtual
name|bool
name|resize
parameter_list|(
name|size_t
name|size
parameter_list|,
name|bool
name|preserveData
parameter_list|)
function_decl|;
specifier|virtual
name|void
modifier|*
name|map
parameter_list|(
name|size_t
name|offset
parameter_list|,
name|size_t
name|length
parameter_list|,
name|GLbitfield
name|access
parameter_list|)
function_decl|;
specifier|virtual
name|void
name|unmap
parameter_list|()
function_decl|;
name|void
name|packPixels
parameter_list|(
name|ID3D11Texture2D
modifier|*
name|srcTexure
parameter_list|,
name|UINT
name|srcSubresource
parameter_list|,
specifier|const
name|PackPixelsParams
modifier|&
name|params
parameter_list|)
function_decl|;
private|private:
name|void
name|flushQueuedPackCommand
parameter_list|()
function_decl|;
DECL|member|mStagingTexture
name|ID3D11Texture2D
modifier|*
name|mStagingTexture
decl_stmt|;
DECL|member|mTextureFormat
name|DXGI_FORMAT
name|mTextureFormat
decl_stmt|;
DECL|member|mTextureSize
name|gl
operator|::
name|Extents
name|mTextureSize
decl_stmt|;
DECL|member|mMemoryBuffer
name|MemoryBuffer
name|mMemoryBuffer
decl_stmt|;
DECL|member|mQueuedPackCommand
name|PackPixelsParams
modifier|*
name|mQueuedPackCommand
decl_stmt|;
DECL|member|mPackParams
name|PackPixelsParams
name|mPackParams
decl_stmt|;
DECL|member|mDataModified
name|bool
name|mDataModified
decl_stmt|;
block|}
class|;
DECL|function|Buffer11
name|Buffer11
operator|::
name|Buffer11
parameter_list|(
name|Renderer11
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|BufferD3D
argument_list|()
member_init_list|,
name|mRenderer
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mSize
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mMappedStorage
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mResolvedDataRevision
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mReadUsageCount
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|~Buffer11
name|Buffer11
operator|::
name|~
name|Buffer11
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|makeBuffer11
name|Buffer11
modifier|*
name|Buffer11
operator|::
name|makeBuffer11
parameter_list|(
name|BufferImpl
modifier|*
name|buffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|Buffer11
operator|*
argument_list|,
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|Buffer11
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
return|;
block|}
DECL|function|clear
name|void
name|Buffer11
operator|::
name|clear
parameter_list|()
block|{
for|for
control|(
name|auto
name|it
init|=
name|mBufferStorages
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|mBufferStorages
operator|.
name|end
argument_list|()
condition|;
name|it
operator|++
control|)
block|{
name|SafeDelete
argument_list|(
name|it
operator|->
name|second
argument_list|)
expr_stmt|;
block|}
name|mBufferStorages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mSize
operator|=
literal|0
expr_stmt|;
name|mResolvedDataRevision
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|setData
name|void
name|Buffer11
operator|::
name|setData
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|size
parameter_list|,
name|GLenum
name|usage
parameter_list|)
block|{
name|mIndexRangeCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setSubData
argument_list|(
name|data
argument_list|,
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|usage
operator|==
name|GL_STATIC_DRAW
condition|)
block|{
name|initializeStaticData
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|getData
name|void
modifier|*
name|Buffer11
operator|::
name|getData
parameter_list|()
block|{
name|NativeBuffer11
modifier|*
name|stagingBuffer
init|=
name|getStagingBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|stagingBuffer
condition|)
block|{
comment|// Out-of-memory
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|stagingBuffer
operator|->
name|getDataRevision
argument_list|()
operator|>
name|mResolvedDataRevision
condition|)
block|{
if|if
condition|(
name|stagingBuffer
operator|->
name|getSize
argument_list|()
operator|>
name|mResolvedData
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|mResolvedData
operator|.
name|resize
argument_list|(
name|stagingBuffer
operator|->
name|getSize
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
operator|(
name|void
operator|*
operator|)
name|NULL
argument_list|)
return|;
block|}
block|}
name|ID3D11DeviceContext
modifier|*
name|context
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|HRESULT
name|result
init|=
name|context
operator|->
name|Map
argument_list|(
name|stagingBuffer
operator|->
name|getNativeBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_READ
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
operator|(
name|void
operator|*
operator|)
name|NULL
argument_list|)
return|;
block|}
name|memcpy
argument_list|(
name|mResolvedData
operator|.
name|data
argument_list|()
argument_list|,
name|mappedResource
operator|.
name|pData
argument_list|,
name|stagingBuffer
operator|->
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|->
name|Unmap
argument_list|(
name|stagingBuffer
operator|->
name|getNativeBuffer
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mResolvedDataRevision
operator|=
name|stagingBuffer
operator|->
name|getDataRevision
argument_list|()
expr_stmt|;
block|}
name|mReadUsageCount
operator|=
literal|0
expr_stmt|;
return|return
name|mResolvedData
operator|.
name|data
argument_list|()
return|;
block|}
DECL|function|setSubData
name|void
name|Buffer11
operator|::
name|setSubData
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|offset
parameter_list|)
block|{
name|size_t
name|requiredSize
init|=
name|size
operator|+
name|offset
decl_stmt|;
name|mSize
operator|=
name|std
operator|::
name|max
argument_list|(
name|mSize
argument_list|,
name|requiredSize
argument_list|)
expr_stmt|;
name|mIndexRangeCache
operator|.
name|invalidateRange
argument_list|(
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|invalidateStaticData
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|&&
name|size
operator|>
literal|0
condition|)
block|{
name|NativeBuffer11
modifier|*
name|stagingBuffer
init|=
name|getStagingBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|stagingBuffer
condition|)
block|{
comment|// Out-of-memory
return|return;
block|}
comment|// Explicitly resize the staging buffer, preserving data if the new data will not
comment|// completely fill the buffer
if|if
condition|(
name|stagingBuffer
operator|->
name|getSize
argument_list|()
operator|<
name|requiredSize
condition|)
block|{
name|bool
name|preserveData
init|=
operator|(
name|offset
operator|>
literal|0
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|stagingBuffer
operator|->
name|resize
argument_list|(
name|requiredSize
argument_list|,
name|preserveData
argument_list|)
condition|)
block|{
comment|// Out-of-memory
return|return;
block|}
block|}
name|ID3D11DeviceContext
modifier|*
name|context
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|HRESULT
name|result
init|=
name|context
operator|->
name|Map
argument_list|(
name|stagingBuffer
operator|->
name|getNativeBuffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
name|unsigned
name|char
modifier|*
name|offsetBufferPointer
init|=
cast|reinterpret_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|mappedResource
operator|.
name|pData
argument_list|)
operator|+
name|offset
decl_stmt|;
name|memcpy
argument_list|(
name|offsetBufferPointer
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|context
operator|->
name|Unmap
argument_list|(
name|stagingBuffer
operator|->
name|getNativeBuffer
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|stagingBuffer
operator|->
name|setDataRevision
argument_list|(
name|stagingBuffer
operator|->
name|getDataRevision
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|copySubData
name|void
name|Buffer11
operator|::
name|copySubData
parameter_list|(
name|BufferImpl
modifier|*
name|source
parameter_list|,
name|GLintptr
name|sourceOffset
parameter_list|,
name|GLintptr
name|destOffset
parameter_list|,
name|GLsizeiptr
name|size
parameter_list|)
block|{
name|Buffer11
modifier|*
name|sourceBuffer
init|=
name|makeBuffer11
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceBuffer
condition|)
block|{
name|BufferStorage11
modifier|*
name|dest
init|=
name|getLatestBufferStorage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dest
condition|)
block|{
name|dest
operator|=
name|getStagingBuffer
argument_list|()
expr_stmt|;
block|}
name|BufferStorage11
modifier|*
name|source
init|=
name|sourceBuffer
operator|->
name|getLatestBufferStorage
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|&&
name|dest
condition|)
block|{
comment|// If copying to/from a pixel pack buffer, we must have a staging or
comment|// pack buffer partner, because other native buffers can't be mapped
if|if
condition|(
name|dest
operator|->
name|getUsage
argument_list|()
operator|==
name|BUFFER_USAGE_PIXEL_PACK
operator|&&
operator|!
name|source
operator|->
name|isMappable
argument_list|()
condition|)
block|{
name|source
operator|=
name|sourceBuffer
operator|->
name|getStagingBuffer
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|->
name|getUsage
argument_list|()
operator|==
name|BUFFER_USAGE_PIXEL_PACK
operator|&&
operator|!
name|dest
operator|->
name|isMappable
argument_list|()
condition|)
block|{
name|dest
operator|=
name|getStagingBuffer
argument_list|()
expr_stmt|;
block|}
name|dest
operator|->
name|copyFromStorage
argument_list|(
name|source
argument_list|,
name|sourceOffset
argument_list|,
name|size
argument_list|,
name|destOffset
argument_list|)
expr_stmt|;
name|dest
operator|->
name|setDataRevision
argument_list|(
name|dest
operator|->
name|getDataRevision
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|mSize
operator|=
name|std
operator|::
name|max
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|mSize
argument_list|,
name|destOffset
operator|+
name|size
argument_list|)
expr_stmt|;
block|}
name|invalidateStaticData
argument_list|()
expr_stmt|;
block|}
DECL|function|map
name|GLvoid
modifier|*
name|Buffer11
operator|::
name|map
parameter_list|(
name|size_t
name|offset
parameter_list|,
name|size_t
name|length
parameter_list|,
name|GLbitfield
name|access
parameter_list|)
block|{
name|ASSERT
argument_list|(
operator|!
name|mMappedStorage
argument_list|)
expr_stmt|;
name|BufferStorage11
modifier|*
name|latestStorage
init|=
name|getLatestBufferStorage
argument_list|()
decl_stmt|;
if|if
condition|(
name|latestStorage
operator|&&
operator|(
name|latestStorage
operator|->
name|getUsage
argument_list|()
operator|==
name|BUFFER_USAGE_PIXEL_PACK
operator|||
name|latestStorage
operator|->
name|getUsage
argument_list|()
operator|==
name|BUFFER_USAGE_STAGING
operator|)
condition|)
block|{
comment|// Latest storage is mappable.
name|mMappedStorage
operator|=
name|latestStorage
expr_stmt|;
block|}
else|else
block|{
comment|// Fall back to using the staging buffer if the latest storage does
comment|// not exist or is not CPU-accessible.
name|mMappedStorage
operator|=
name|getStagingBuffer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mMappedStorage
condition|)
block|{
comment|// Out-of-memory
return|return
name|NULL
return|;
block|}
if|if
condition|(
operator|(
name|access
operator|&
name|GL_MAP_WRITE_BIT
operator|)
operator|>
literal|0
condition|)
block|{
comment|// Update the data revision immediately, since the data might be changed at any time
name|mMappedStorage
operator|->
name|setDataRevision
argument_list|(
name|mMappedStorage
operator|->
name|getDataRevision
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|mMappedStorage
operator|->
name|map
argument_list|(
name|offset
argument_list|,
name|length
argument_list|,
name|access
argument_list|)
return|;
block|}
DECL|function|unmap
name|void
name|Buffer11
operator|::
name|unmap
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|mMappedStorage
argument_list|)
expr_stmt|;
name|mMappedStorage
operator|->
name|unmap
argument_list|()
expr_stmt|;
name|mMappedStorage
operator|=
name|NULL
expr_stmt|;
block|}
DECL|function|markTransformFeedbackUsage
name|void
name|Buffer11
operator|::
name|markTransformFeedbackUsage
parameter_list|()
block|{
name|BufferStorage11
modifier|*
name|transformFeedbackStorage
init|=
name|getBufferStorage
argument_list|(
name|BUFFER_USAGE_VERTEX_OR_TRANSFORM_FEEDBACK
argument_list|)
decl_stmt|;
if|if
condition|(
name|transformFeedbackStorage
condition|)
block|{
name|transformFeedbackStorage
operator|->
name|setDataRevision
argument_list|(
name|transformFeedbackStorage
operator|->
name|getDataRevision
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|invalidateStaticData
argument_list|()
expr_stmt|;
block|}
DECL|function|markBufferUsage
name|void
name|Buffer11
operator|::
name|markBufferUsage
parameter_list|()
block|{
name|mReadUsageCount
operator|++
expr_stmt|;
specifier|const
name|unsigned
name|int
name|usageLimit
init|=
literal|5
decl_stmt|;
if|if
condition|(
name|mReadUsageCount
operator|>
name|usageLimit
operator|&&
name|mResolvedData
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mResolvedData
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mResolvedDataRevision
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|function|getRenderer
name|Renderer
modifier|*
name|Buffer11
operator|::
name|getRenderer
parameter_list|()
block|{
return|return
name|mRenderer
return|;
block|}
DECL|function|getBuffer
name|ID3D11Buffer
modifier|*
name|Buffer11
operator|::
name|getBuffer
parameter_list|(
name|BufferUsage
name|usage
parameter_list|)
block|{
name|markBufferUsage
argument_list|()
expr_stmt|;
name|BufferStorage11
modifier|*
name|bufferStorage
init|=
name|getBufferStorage
argument_list|(
name|usage
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bufferStorage
condition|)
block|{
comment|// Storage out-of-memory
return|return
name|NULL
return|;
block|}
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|NativeBuffer11
operator|*
argument_list|,
name|bufferStorage
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|NativeBuffer11
operator|*
argument_list|>
argument_list|(
name|bufferStorage
argument_list|)
operator|->
name|getNativeBuffer
argument_list|()
return|;
block|}
DECL|function|getSRV
name|ID3D11ShaderResourceView
modifier|*
name|Buffer11
operator|::
name|getSRV
parameter_list|(
name|DXGI_FORMAT
name|srvFormat
parameter_list|)
block|{
name|BufferStorage11
modifier|*
name|storage
init|=
name|getBufferStorage
argument_list|(
name|BUFFER_USAGE_PIXEL_UNPACK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|storage
condition|)
block|{
comment|// Storage out-of-memory
return|return
name|NULL
return|;
block|}
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|NativeBuffer11
operator|*
argument_list|,
name|storage
argument_list|)
argument_list|)
expr_stmt|;
name|ID3D11Buffer
modifier|*
name|buffer
init|=
cast|static_cast
argument_list|<
name|NativeBuffer11
operator|*
argument_list|>
argument_list|(
name|storage
argument_list|)
operator|->
name|getNativeBuffer
argument_list|()
decl_stmt|;
name|auto
name|bufferSRVIt
init|=
name|mBufferResourceViews
operator|.
name|find
argument_list|(
name|srvFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|bufferSRVIt
operator|!=
name|mBufferResourceViews
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|bufferSRVIt
operator|->
name|second
operator|.
name|first
operator|==
name|buffer
condition|)
block|{
return|return
name|bufferSRVIt
operator|->
name|second
operator|.
name|second
return|;
block|}
else|else
block|{
comment|// The underlying buffer has changed since the SRV was created: recreate the SRV.
name|SafeRelease
argument_list|(
name|bufferSRVIt
operator|->
name|second
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
block|}
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|ID3D11ShaderResourceView
modifier|*
name|bufferSRV
init|=
name|NULL
decl_stmt|;
name|D3D11_SHADER_RESOURCE_VIEW_DESC
name|bufferSRVDesc
decl_stmt|;
name|bufferSRVDesc
operator|.
name|Buffer
operator|.
name|ElementOffset
operator|=
literal|0
expr_stmt|;
name|bufferSRVDesc
operator|.
name|Buffer
operator|.
name|ElementWidth
operator|=
name|mSize
operator|/
name|d3d11
operator|::
name|GetFormatPixelBytes
argument_list|(
name|srvFormat
argument_list|)
expr_stmt|;
name|bufferSRVDesc
operator|.
name|ViewDimension
operator|=
name|D3D11_SRV_DIMENSION_BUFFER
expr_stmt|;
name|bufferSRVDesc
operator|.
name|Format
operator|=
name|srvFormat
expr_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateShaderResourceView
argument_list|(
name|buffer
argument_list|,
operator|&
name|bufferSRVDesc
argument_list|,
operator|&
name|bufferSRV
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|mBufferResourceViews
index|[
name|srvFormat
index|]
operator|=
name|BufferSRVPair
argument_list|(
name|buffer
argument_list|,
name|bufferSRV
argument_list|)
expr_stmt|;
return|return
name|bufferSRV
return|;
block|}
DECL|function|packPixels
name|void
name|Buffer11
operator|::
name|packPixels
parameter_list|(
name|ID3D11Texture2D
modifier|*
name|srcTexture
parameter_list|,
name|UINT
name|srcSubresource
parameter_list|,
specifier|const
name|PackPixelsParams
modifier|&
name|params
parameter_list|)
block|{
name|PackStorage11
modifier|*
name|packStorage
init|=
name|getPackStorage
argument_list|()
decl_stmt|;
name|BufferStorage11
modifier|*
name|latestStorage
init|=
name|getLatestBufferStorage
argument_list|()
decl_stmt|;
if|if
condition|(
name|packStorage
condition|)
block|{
name|packStorage
operator|->
name|packPixels
argument_list|(
name|srcTexture
argument_list|,
name|srcSubresource
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|packStorage
operator|->
name|setDataRevision
argument_list|(
name|latestStorage
condition|?
name|latestStorage
operator|->
name|getDataRevision
argument_list|()
operator|+
literal|1
else|:
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|getBufferStorage
name|Buffer11
operator|::
name|BufferStorage11
modifier|*
name|Buffer11
operator|::
name|getBufferStorage
parameter_list|(
name|BufferUsage
name|usage
parameter_list|)
block|{
name|BufferStorage11
modifier|*
name|directBuffer
init|=
name|NULL
decl_stmt|;
name|auto
name|directBufferIt
init|=
name|mBufferStorages
operator|.
name|find
argument_list|(
name|usage
argument_list|)
decl_stmt|;
if|if
condition|(
name|directBufferIt
operator|!=
name|mBufferStorages
operator|.
name|end
argument_list|()
condition|)
block|{
name|directBuffer
operator|=
name|directBufferIt
operator|->
name|second
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|directBuffer
condition|)
block|{
if|if
condition|(
name|usage
operator|==
name|BUFFER_USAGE_PIXEL_PACK
condition|)
block|{
name|directBuffer
operator|=
operator|new
name|PackStorage11
argument_list|(
name|mRenderer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// buffer is not allocated, create it
name|directBuffer
operator|=
operator|new
name|NativeBuffer11
argument_list|(
name|mRenderer
argument_list|,
name|usage
argument_list|)
expr_stmt|;
block|}
name|mBufferStorages
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|usage
argument_list|,
name|directBuffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// resize buffer
if|if
condition|(
name|directBuffer
operator|->
name|getSize
argument_list|()
operator|<
name|mSize
condition|)
block|{
if|if
condition|(
operator|!
name|directBuffer
operator|->
name|resize
argument_list|(
name|mSize
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// Out of memory error
return|return
name|NULL
return|;
block|}
block|}
name|BufferStorage11
modifier|*
name|latestBuffer
init|=
name|getLatestBufferStorage
argument_list|()
decl_stmt|;
if|if
condition|(
name|latestBuffer
operator|&&
name|latestBuffer
operator|->
name|getDataRevision
argument_list|()
operator|>
name|directBuffer
operator|->
name|getDataRevision
argument_list|()
condition|)
block|{
comment|// if copying from a pack buffer to a non-staging native buffer, we must first
comment|// copy through the staging buffer, because other native buffers can't be mapped
if|if
condition|(
name|latestBuffer
operator|->
name|getUsage
argument_list|()
operator|==
name|BUFFER_USAGE_PIXEL_PACK
operator|&&
operator|!
name|directBuffer
operator|->
name|isMappable
argument_list|()
condition|)
block|{
name|NativeBuffer11
modifier|*
name|stagingBuffer
init|=
name|getStagingBuffer
argument_list|()
decl_stmt|;
name|stagingBuffer
operator|->
name|copyFromStorage
argument_list|(
name|latestBuffer
argument_list|,
literal|0
argument_list|,
name|latestBuffer
operator|->
name|getSize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|directBuffer
operator|->
name|setDataRevision
argument_list|(
name|latestBuffer
operator|->
name|getDataRevision
argument_list|()
argument_list|)
expr_stmt|;
name|latestBuffer
operator|=
name|stagingBuffer
expr_stmt|;
block|}
comment|// if copyFromStorage returns true, the D3D buffer has been recreated
comment|// and we should update our serial
if|if
condition|(
name|directBuffer
operator|->
name|copyFromStorage
argument_list|(
name|latestBuffer
argument_list|,
literal|0
argument_list|,
name|latestBuffer
operator|->
name|getSize
argument_list|()
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|updateSerial
argument_list|()
expr_stmt|;
block|}
name|directBuffer
operator|->
name|setDataRevision
argument_list|(
name|latestBuffer
operator|->
name|getDataRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|directBuffer
return|;
block|}
DECL|function|getLatestBufferStorage
name|Buffer11
operator|::
name|BufferStorage11
modifier|*
name|Buffer11
operator|::
name|getLatestBufferStorage
parameter_list|()
specifier|const
block|{
comment|// Even though we iterate over all the direct buffers, it is expected that only
comment|// 1 or 2 will be present.
name|BufferStorage11
modifier|*
name|latestStorage
init|=
name|NULL
decl_stmt|;
name|DataRevision
name|latestRevision
init|=
literal|0
decl_stmt|;
for|for
control|(
name|auto
name|it
init|=
name|mBufferStorages
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|mBufferStorages
operator|.
name|end
argument_list|()
condition|;
name|it
operator|++
control|)
block|{
name|BufferStorage11
modifier|*
name|storage
init|=
name|it
operator|->
name|second
decl_stmt|;
if|if
condition|(
operator|!
name|latestStorage
operator|||
name|storage
operator|->
name|getDataRevision
argument_list|()
operator|>
name|latestRevision
condition|)
block|{
name|latestStorage
operator|=
name|storage
expr_stmt|;
name|latestRevision
operator|=
name|storage
operator|->
name|getDataRevision
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|latestStorage
return|;
block|}
DECL|function|getStagingBuffer
name|Buffer11
operator|::
name|NativeBuffer11
modifier|*
name|Buffer11
operator|::
name|getStagingBuffer
parameter_list|()
block|{
name|BufferStorage11
modifier|*
name|stagingStorage
init|=
name|getBufferStorage
argument_list|(
name|BUFFER_USAGE_STAGING
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|stagingStorage
condition|)
block|{
comment|// Out-of-memory
return|return
name|NULL
return|;
block|}
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|NativeBuffer11
operator|*
argument_list|,
name|stagingStorage
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|NativeBuffer11
operator|*
argument_list|>
argument_list|(
name|stagingStorage
argument_list|)
return|;
block|}
DECL|function|getPackStorage
name|Buffer11
operator|::
name|PackStorage11
modifier|*
name|Buffer11
operator|::
name|getPackStorage
parameter_list|()
block|{
name|BufferStorage11
modifier|*
name|packStorage
init|=
name|getBufferStorage
argument_list|(
name|BUFFER_USAGE_PIXEL_PACK
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|packStorage
condition|)
block|{
comment|// Out-of-memory
return|return
name|NULL
return|;
block|}
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|PackStorage11
operator|*
argument_list|,
name|packStorage
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|PackStorage11
operator|*
argument_list|>
argument_list|(
name|packStorage
argument_list|)
return|;
block|}
DECL|function|BufferStorage11
name|Buffer11
operator|::
name|BufferStorage11
operator|::
name|BufferStorage11
parameter_list|(
name|Renderer11
modifier|*
name|renderer
parameter_list|,
name|BufferUsage
name|usage
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mUsage
argument_list|(
name|usage
argument_list|)
member_init_list|,
name|mRevision
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mBufferSize
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|NativeBuffer11
name|Buffer11
operator|::
name|NativeBuffer11
operator|::
name|NativeBuffer11
parameter_list|(
name|Renderer11
modifier|*
name|renderer
parameter_list|,
name|BufferUsage
name|usage
parameter_list|)
member_init_list|:
name|BufferStorage11
argument_list|(
name|renderer
argument_list|,
name|usage
argument_list|)
member_init_list|,
name|mNativeBuffer
argument_list|(
name|NULL
argument_list|)
block|{ }
DECL|function|~NativeBuffer11
name|Buffer11
operator|::
name|NativeBuffer11
operator|::
name|~
name|NativeBuffer11
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mNativeBuffer
argument_list|)
expr_stmt|;
block|}
comment|// Returns true if it recreates the direct buffer
DECL|function|copyFromStorage
name|bool
name|Buffer11
operator|::
name|NativeBuffer11
operator|::
name|copyFromStorage
parameter_list|(
name|BufferStorage11
modifier|*
name|source
parameter_list|,
name|size_t
name|sourceOffset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|destOffset
parameter_list|)
block|{
name|ID3D11DeviceContext
modifier|*
name|context
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|size_t
name|requiredSize
init|=
name|sourceOffset
operator|+
name|size
decl_stmt|;
name|bool
name|createBuffer
init|=
operator|!
name|mNativeBuffer
operator|||
name|mBufferSize
operator|<
name|requiredSize
decl_stmt|;
comment|// (Re)initialize D3D buffer if needed
if|if
condition|(
name|createBuffer
condition|)
block|{
name|bool
name|preserveData
init|=
operator|(
name|destOffset
operator|>
literal|0
operator|)
decl_stmt|;
name|resize
argument_list|(
name|source
operator|->
name|getSize
argument_list|()
argument_list|,
name|preserveData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|->
name|getUsage
argument_list|()
operator|==
name|BUFFER_USAGE_PIXEL_PACK
condition|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|PackStorage11
operator|*
argument_list|,
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|sourcePointer
init|=
name|source
operator|->
name|map
argument_list|(
name|sourceOffset
argument_list|,
name|size
argument_list|,
name|GL_MAP_READ_BIT
argument_list|)
decl_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|HRESULT
name|hr
init|=
name|context
operator|->
name|Map
argument_list|(
name|mNativeBuffer
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|hr
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
name|unsigned
name|char
modifier|*
name|destPointer
init|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|mappedResource
operator|.
name|pData
argument_list|)
operator|+
name|destOffset
decl_stmt|;
comment|// Offset bounds are validated at the API layer
name|ASSERT
argument_list|(
name|sourceOffset
operator|+
name|size
operator|<=
name|destOffset
operator|+
name|mBufferSize
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|destPointer
argument_list|,
name|sourcePointer
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|NativeBuffer11
operator|*
argument_list|,
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|D3D11_BOX
name|srcBox
decl_stmt|;
name|srcBox
operator|.
name|left
operator|=
name|sourceOffset
expr_stmt|;
name|srcBox
operator|.
name|right
operator|=
name|sourceOffset
operator|+
name|size
expr_stmt|;
name|srcBox
operator|.
name|top
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|bottom
operator|=
literal|1
expr_stmt|;
name|srcBox
operator|.
name|front
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|back
operator|=
literal|1
expr_stmt|;
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|NativeBuffer11
operator|*
argument_list|,
name|source
argument_list|)
argument_list|)
expr_stmt|;
name|ID3D11Buffer
modifier|*
name|sourceBuffer
init|=
cast|static_cast
argument_list|<
name|NativeBuffer11
operator|*
argument_list|>
argument_list|(
name|source
argument_list|)
operator|->
name|getNativeBuffer
argument_list|()
decl_stmt|;
name|context
operator|->
name|CopySubresourceRegion
argument_list|(
name|mNativeBuffer
argument_list|,
literal|0
argument_list|,
name|destOffset
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sourceBuffer
argument_list|,
literal|0
argument_list|,
operator|&
name|srcBox
argument_list|)
expr_stmt|;
block|}
return|return
name|createBuffer
return|;
block|}
DECL|function|resize
name|bool
name|Buffer11
operator|::
name|NativeBuffer11
operator|::
name|resize
parameter_list|(
name|size_t
name|size
parameter_list|,
name|bool
name|preserveData
parameter_list|)
block|{
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|context
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|D3D11_BUFFER_DESC
name|bufferDesc
decl_stmt|;
name|fillBufferDesc
argument_list|(
operator|&
name|bufferDesc
argument_list|,
name|mRenderer
argument_list|,
name|mUsage
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|ID3D11Buffer
modifier|*
name|newBuffer
decl_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateBuffer
argument_list|(
operator|&
name|bufferDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|newBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|mNativeBuffer
operator|&&
name|preserveData
condition|)
block|{
comment|// We don't call resize if the buffer is big enough already.
name|ASSERT
argument_list|(
name|mBufferSize
operator|<=
name|size
argument_list|)
expr_stmt|;
name|D3D11_BOX
name|srcBox
decl_stmt|;
name|srcBox
operator|.
name|left
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|right
operator|=
name|mBufferSize
expr_stmt|;
name|srcBox
operator|.
name|top
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|bottom
operator|=
literal|1
expr_stmt|;
name|srcBox
operator|.
name|front
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|back
operator|=
literal|1
expr_stmt|;
name|context
operator|->
name|CopySubresourceRegion
argument_list|(
name|newBuffer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|mNativeBuffer
argument_list|,
literal|0
argument_list|,
operator|&
name|srcBox
argument_list|)
expr_stmt|;
block|}
comment|// No longer need the old buffer
name|SafeRelease
argument_list|(
name|mNativeBuffer
argument_list|)
expr_stmt|;
name|mNativeBuffer
operator|=
name|newBuffer
expr_stmt|;
name|mBufferSize
operator|=
name|bufferDesc
operator|.
name|ByteWidth
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|fillBufferDesc
name|void
name|Buffer11
operator|::
name|NativeBuffer11
operator|::
name|fillBufferDesc
parameter_list|(
name|D3D11_BUFFER_DESC
modifier|*
name|bufferDesc
parameter_list|,
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|BufferUsage
name|usage
parameter_list|,
name|unsigned
name|int
name|bufferSize
parameter_list|)
block|{
name|bufferDesc
operator|->
name|ByteWidth
operator|=
name|bufferSize
expr_stmt|;
name|bufferDesc
operator|->
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|bufferDesc
operator|->
name|StructureByteStride
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|usage
condition|)
block|{
case|case
name|BUFFER_USAGE_STAGING
case|:
name|bufferDesc
operator|->
name|Usage
operator|=
name|D3D11_USAGE_STAGING
expr_stmt|;
name|bufferDesc
operator|->
name|BindFlags
operator|=
literal|0
expr_stmt|;
name|bufferDesc
operator|->
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_READ
operator||
name|D3D11_CPU_ACCESS_WRITE
expr_stmt|;
break|break;
case|case
name|BUFFER_USAGE_VERTEX_OR_TRANSFORM_FEEDBACK
case|:
name|bufferDesc
operator|->
name|Usage
operator|=
name|D3D11_USAGE_DEFAULT
expr_stmt|;
name|bufferDesc
operator|->
name|BindFlags
operator|=
name|D3D11_BIND_VERTEX_BUFFER
expr_stmt|;
if|if
condition|(
name|renderer
operator|->
name|getMaxTransformFeedbackBuffers
argument_list|()
operator|>
literal|0
condition|)
name|bufferDesc
operator|->
name|BindFlags
operator||=
name|D3D11_BIND_STREAM_OUTPUT
expr_stmt|;
name|bufferDesc
operator|->
name|CPUAccessFlags
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|BUFFER_USAGE_INDEX
case|:
name|bufferDesc
operator|->
name|Usage
operator|=
name|D3D11_USAGE_DEFAULT
expr_stmt|;
name|bufferDesc
operator|->
name|BindFlags
operator|=
name|D3D11_BIND_INDEX_BUFFER
expr_stmt|;
name|bufferDesc
operator|->
name|CPUAccessFlags
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|BUFFER_USAGE_PIXEL_UNPACK
case|:
name|bufferDesc
operator|->
name|Usage
operator|=
name|D3D11_USAGE_DEFAULT
expr_stmt|;
name|bufferDesc
operator|->
name|BindFlags
operator|=
name|D3D11_BIND_SHADER_RESOURCE
expr_stmt|;
name|bufferDesc
operator|->
name|CPUAccessFlags
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|BUFFER_USAGE_UNIFORM
case|:
name|bufferDesc
operator|->
name|Usage
operator|=
name|D3D11_USAGE_DYNAMIC
expr_stmt|;
name|bufferDesc
operator|->
name|BindFlags
operator|=
name|D3D11_BIND_CONSTANT_BUFFER
expr_stmt|;
name|bufferDesc
operator|->
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_WRITE
expr_stmt|;
comment|// Constant buffers must be of a limited size, and aligned to 16 byte boundaries
comment|// For our purposes we ignore any buffer data past the maximum constant buffer size
name|bufferDesc
operator|->
name|ByteWidth
operator|=
name|roundUp
argument_list|(
name|bufferDesc
operator|->
name|ByteWidth
argument_list|,
literal|16u
argument_list|)
expr_stmt|;
name|bufferDesc
operator|->
name|ByteWidth
operator|=
name|std
operator|::
name|min
argument_list|(
name|bufferDesc
operator|->
name|ByteWidth
argument_list|,
name|renderer
operator|->
name|getMaxUniformBufferSize
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|map
name|void
modifier|*
name|Buffer11
operator|::
name|NativeBuffer11
operator|::
name|map
parameter_list|(
name|size_t
name|offset
parameter_list|,
name|size_t
name|length
parameter_list|,
name|GLbitfield
name|access
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|mUsage
operator|==
name|BUFFER_USAGE_STAGING
argument_list|)
expr_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|context
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|D3D11_MAP
name|d3dMapType
init|=
name|gl_d3d11
operator|::
name|GetD3DMapTypeFromBits
argument_list|(
name|access
argument_list|)
decl_stmt|;
name|UINT
name|d3dMapFlag
init|=
operator|(
operator|(
name|access
operator|&
name|GL_MAP_UNSYNCHRONIZED_BIT
operator|)
operator|!=
literal|0
condition|?
name|D3D11_MAP_FLAG_DO_NOT_WAIT
else|:
literal|0
operator|)
decl_stmt|;
name|HRESULT
name|result
init|=
name|context
operator|->
name|Map
argument_list|(
name|mNativeBuffer
argument_list|,
literal|0
argument_list|,
name|d3dMapType
argument_list|,
name|d3dMapFlag
argument_list|,
operator|&
name|mappedResource
argument_list|)
decl_stmt|;
name|UNUSED_ASSERTION_VARIABLE
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|GLubyte
operator|*
argument_list|>
argument_list|(
name|mappedResource
operator|.
name|pData
argument_list|)
operator|+
name|offset
return|;
block|}
DECL|function|unmap
name|void
name|Buffer11
operator|::
name|NativeBuffer11
operator|::
name|unmap
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|mUsage
operator|==
name|BUFFER_USAGE_STAGING
argument_list|)
expr_stmt|;
name|ID3D11DeviceContext
modifier|*
name|context
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|context
operator|->
name|Unmap
argument_list|(
name|mNativeBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|function|PackStorage11
name|Buffer11
operator|::
name|PackStorage11
operator|::
name|PackStorage11
parameter_list|(
name|Renderer11
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|BufferStorage11
argument_list|(
name|renderer
argument_list|,
name|BUFFER_USAGE_PIXEL_PACK
argument_list|)
member_init_list|,
name|mStagingTexture
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mTextureFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|mQueuedPackCommand
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mDataModified
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|~PackStorage11
name|Buffer11
operator|::
name|PackStorage11
operator|::
name|~
name|PackStorage11
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mStagingTexture
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mQueuedPackCommand
argument_list|)
expr_stmt|;
block|}
DECL|function|copyFromStorage
name|bool
name|Buffer11
operator|::
name|PackStorage11
operator|::
name|copyFromStorage
parameter_list|(
name|BufferStorage11
modifier|*
name|source
parameter_list|,
name|size_t
name|sourceOffset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|destOffset
parameter_list|)
block|{
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|function|resize
name|bool
name|Buffer11
operator|::
name|PackStorage11
operator|::
name|resize
parameter_list|(
name|size_t
name|size
parameter_list|,
name|bool
name|preserveData
parameter_list|)
block|{
if|if
condition|(
name|size
operator|!=
name|mBufferSize
condition|)
block|{
if|if
condition|(
operator|!
name|mMemoryBuffer
operator|.
name|resize
argument_list|(
name|size
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|mBufferSize
operator|=
name|size
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|map
name|void
modifier|*
name|Buffer11
operator|::
name|PackStorage11
operator|::
name|map
parameter_list|(
name|size_t
name|offset
parameter_list|,
name|size_t
name|length
parameter_list|,
name|GLbitfield
name|access
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|offset
operator|+
name|length
operator|<=
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: fast path
comment|//  We might be able to optimize out one or more memcpy calls by detecting when
comment|//  and if D3D packs the staging texture memory identically to how we would fill
comment|//  the pack buffer according to the current pack state.
name|flushQueuedPackCommand
argument_list|()
expr_stmt|;
name|mDataModified
operator|=
operator|(
name|mDataModified
operator|||
operator|(
name|access
operator|&
name|GL_MAP_WRITE_BIT
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
return|return
name|mMemoryBuffer
operator|.
name|data
argument_list|()
operator|+
name|offset
return|;
block|}
DECL|function|unmap
name|void
name|Buffer11
operator|::
name|PackStorage11
operator|::
name|unmap
parameter_list|()
block|{
comment|// No-op
block|}
DECL|function|packPixels
name|void
name|Buffer11
operator|::
name|PackStorage11
operator|::
name|packPixels
parameter_list|(
name|ID3D11Texture2D
modifier|*
name|srcTexure
parameter_list|,
name|UINT
name|srcSubresource
parameter_list|,
specifier|const
name|PackPixelsParams
modifier|&
name|params
parameter_list|)
block|{
name|flushQueuedPackCommand
argument_list|()
expr_stmt|;
name|mQueuedPackCommand
operator|=
operator|new
name|PackPixelsParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|D3D11_TEXTURE2D_DESC
name|textureDesc
decl_stmt|;
name|srcTexure
operator|->
name|GetDesc
argument_list|(
operator|&
name|textureDesc
argument_list|)
expr_stmt|;
if|if
condition|(
name|mStagingTexture
operator|!=
name|NULL
operator|&&
operator|(
name|mTextureFormat
operator|!=
name|textureDesc
operator|.
name|Format
operator|||
name|mTextureSize
operator|.
name|width
operator|!=
name|params
operator|.
name|area
operator|.
name|width
operator|||
name|mTextureSize
operator|.
name|height
operator|!=
name|params
operator|.
name|area
operator|.
name|height
operator|)
condition|)
block|{
name|SafeRelease
argument_list|(
name|mStagingTexture
argument_list|)
expr_stmt|;
name|mTextureSize
operator|.
name|width
operator|=
literal|0
expr_stmt|;
name|mTextureSize
operator|.
name|height
operator|=
literal|0
expr_stmt|;
name|mTextureFormat
operator|=
name|DXGI_FORMAT_UNKNOWN
expr_stmt|;
block|}
if|if
condition|(
name|mStagingTexture
operator|==
name|NULL
condition|)
block|{
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|mTextureSize
operator|.
name|width
operator|=
name|params
operator|.
name|area
operator|.
name|width
expr_stmt|;
name|mTextureSize
operator|.
name|height
operator|=
name|params
operator|.
name|area
operator|.
name|height
expr_stmt|;
name|mTextureFormat
operator|=
name|textureDesc
operator|.
name|Format
expr_stmt|;
name|D3D11_TEXTURE2D_DESC
name|stagingDesc
decl_stmt|;
name|stagingDesc
operator|.
name|Width
operator|=
name|params
operator|.
name|area
operator|.
name|width
expr_stmt|;
name|stagingDesc
operator|.
name|Height
operator|=
name|params
operator|.
name|area
operator|.
name|height
expr_stmt|;
name|stagingDesc
operator|.
name|MipLevels
operator|=
literal|1
expr_stmt|;
name|stagingDesc
operator|.
name|ArraySize
operator|=
literal|1
expr_stmt|;
name|stagingDesc
operator|.
name|Format
operator|=
name|mTextureFormat
expr_stmt|;
name|stagingDesc
operator|.
name|SampleDesc
operator|.
name|Count
operator|=
literal|1
expr_stmt|;
name|stagingDesc
operator|.
name|SampleDesc
operator|.
name|Quality
operator|=
literal|0
expr_stmt|;
name|stagingDesc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_STAGING
expr_stmt|;
name|stagingDesc
operator|.
name|BindFlags
operator|=
literal|0
expr_stmt|;
name|stagingDesc
operator|.
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_READ
expr_stmt|;
name|stagingDesc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|hr
operator|=
name|device
operator|->
name|CreateTexture2D
argument_list|(
operator|&
name|stagingDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|mStagingTexture
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|textureDesc
operator|.
name|SampleDesc
operator|.
name|Count
operator|>
literal|1
condition|)
block|{
name|UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
name|ID3D11DeviceContext
modifier|*
name|immediateContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|D3D11_BOX
name|srcBox
decl_stmt|;
name|srcBox
operator|.
name|left
operator|=
name|params
operator|.
name|area
operator|.
name|x
expr_stmt|;
name|srcBox
operator|.
name|right
operator|=
name|params
operator|.
name|area
operator|.
name|x
operator|+
name|params
operator|.
name|area
operator|.
name|width
expr_stmt|;
name|srcBox
operator|.
name|top
operator|=
name|params
operator|.
name|area
operator|.
name|y
expr_stmt|;
name|srcBox
operator|.
name|bottom
operator|=
name|params
operator|.
name|area
operator|.
name|y
operator|+
name|params
operator|.
name|area
operator|.
name|height
expr_stmt|;
name|srcBox
operator|.
name|front
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|back
operator|=
literal|1
expr_stmt|;
comment|// Asynchronous copy
name|immediateContext
operator|->
name|CopySubresourceRegion
argument_list|(
name|mStagingTexture
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|srcTexure
argument_list|,
name|srcSubresource
argument_list|,
operator|&
name|srcBox
argument_list|)
expr_stmt|;
block|}
DECL|function|flushQueuedPackCommand
name|void
name|Buffer11
operator|::
name|PackStorage11
operator|::
name|flushQueuedPackCommand
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|mMemoryBuffer
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|mQueuedPackCommand
condition|)
block|{
name|mRenderer
operator|->
name|packPixels
argument_list|(
name|mStagingTexture
argument_list|,
operator|*
name|mQueuedPackCommand
argument_list|,
name|mMemoryBuffer
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mQueuedPackCommand
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_namespace
end_unit
