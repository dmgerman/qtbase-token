begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Clear11.cpp: Framebuffer clear utility class.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/Clear11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/RenderTarget11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/shaders/compiled/clearfloatvs.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/shaders/compiled/clearfloatps.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/shaders/compiled/clearuintvs.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/shaders/compiled/clearuintps.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/shaders/compiled/clearsintvs.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/shaders/compiled/clearsintps.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|ApplyVertices
specifier|static
name|void
name|ApplyVertices
parameter_list|(
specifier|const
name|gl
operator|::
name|Extents
modifier|&
name|framebufferSize
parameter_list|,
specifier|const
name|gl
operator|::
name|Rectangle
modifier|*
name|scissor
parameter_list|,
specifier|const
name|gl
operator|::
name|Color
argument_list|<
name|T
argument_list|>
modifier|&
name|color
parameter_list|,
name|float
name|depth
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|)
block|{
name|d3d11
operator|::
name|PositionDepthColorVertex
argument_list|<
name|T
argument_list|>
modifier|*
name|vertices
init|=
cast|reinterpret_cast
argument_list|<
name|d3d11
operator|::
name|PositionDepthColorVertex
argument_list|<
name|T
argument_list|>
operator|*
argument_list|>
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|float
name|depthClear
init|=
name|gl
operator|::
name|clamp01
argument_list|(
name|depth
argument_list|)
decl_stmt|;
name|float
name|left
init|=
operator|-
literal|1.0f
decl_stmt|;
name|float
name|right
init|=
literal|1.0f
decl_stmt|;
name|float
name|top
init|=
operator|-
literal|1.0f
decl_stmt|;
name|float
name|bottom
init|=
literal|1.0f
decl_stmt|;
comment|// Clip the quad coordinates to the scissor if needed
if|if
condition|(
name|scissor
operator|!=
name|NULL
condition|)
block|{
name|left
operator|=
name|std
operator|::
name|max
argument_list|(
name|left
argument_list|,
operator|(
name|scissor
operator|->
name|x
operator|/
name|float
argument_list|(
name|framebufferSize
operator|.
name|width
argument_list|)
operator|)
operator|*
literal|2.0f
operator|-
literal|1.0f
argument_list|)
expr_stmt|;
name|right
operator|=
name|std
operator|::
name|min
argument_list|(
name|right
argument_list|,
operator|(
operator|(
name|scissor
operator|->
name|x
operator|+
name|scissor
operator|->
name|width
operator|)
operator|/
name|float
argument_list|(
name|framebufferSize
operator|.
name|width
argument_list|)
operator|)
operator|*
literal|2.0f
operator|-
literal|1.0f
argument_list|)
expr_stmt|;
name|top
operator|=
name|std
operator|::
name|max
argument_list|(
name|top
argument_list|,
operator|(
operator|(
name|framebufferSize
operator|.
name|height
operator|-
name|scissor
operator|->
name|y
operator|-
name|scissor
operator|->
name|height
operator|)
operator|/
name|float
argument_list|(
name|framebufferSize
operator|.
name|height
argument_list|)
operator|)
operator|*
literal|2.0f
operator|-
literal|1.0f
argument_list|)
expr_stmt|;
name|bottom
operator|=
name|std
operator|::
name|min
argument_list|(
name|bottom
argument_list|,
operator|(
operator|(
name|framebufferSize
operator|.
name|height
operator|-
name|scissor
operator|->
name|y
operator|)
operator|/
name|float
argument_list|(
name|framebufferSize
operator|.
name|height
argument_list|)
operator|)
operator|*
literal|2.0f
operator|-
literal|1.0f
argument_list|)
expr_stmt|;
block|}
name|d3d11
operator|::
name|SetPositionDepthColorVertex
argument_list|<
name|T
argument_list|>
argument_list|(
name|vertices
operator|+
literal|0
argument_list|,
name|left
argument_list|,
name|bottom
argument_list|,
name|depthClear
argument_list|,
name|color
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetPositionDepthColorVertex
argument_list|<
name|T
argument_list|>
argument_list|(
name|vertices
operator|+
literal|1
argument_list|,
name|left
argument_list|,
name|top
argument_list|,
name|depthClear
argument_list|,
name|color
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetPositionDepthColorVertex
argument_list|<
name|T
argument_list|>
argument_list|(
name|vertices
operator|+
literal|2
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|,
name|depthClear
argument_list|,
name|color
argument_list|)
expr_stmt|;
name|d3d11
operator|::
name|SetPositionDepthColorVertex
argument_list|<
name|T
argument_list|>
argument_list|(
name|vertices
operator|+
literal|3
argument_list|,
name|right
argument_list|,
name|top
argument_list|,
name|depthClear
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
template|template
parameter_list|<
name|unsigned
name|int
name|vsSize
parameter_list|,
name|unsigned
name|int
name|psSize
parameter_list|>
DECL|function|CreateClearShader
name|Clear11
operator|::
name|ClearShader
name|Clear11
operator|::
name|CreateClearShader
argument_list|(
name|ID3D11Device
operator|*
name|device
argument_list|,
name|DXGI_FORMAT
name|colorType
argument_list|,
specifier|const
name|BYTE
argument_list|(
operator|&
name|vsByteCode
argument_list|)
index|[
name|vsSize
index|]
argument_list|,
specifier|const
name|BYTE
argument_list|(
operator|&
name|psByteCode
argument_list|)
index|[
name|psSize
index|]
argument_list|)
argument_list|{
name|HRESULT
name|result
argument_list|;
name|ClearShader
name|shader
operator|=
block|{
literal|0
block|}
argument_list|;
name|D3D11_INPUT_ELEMENT_DESC
name|quadLayout
index|[]
operator|=
block|{
block|{
literal|"POSITION"
block|,
literal|0
block|,
name|DXGI_FORMAT_R32G32B32_FLOAT
block|,
literal|0
block|,
literal|0
block|,
name|D3D11_INPUT_PER_VERTEX_DATA
block|,
literal|0
block|}
block|,
block|{
literal|"COLOR"
block|,
literal|0
block|,
name|colorType
block|,
literal|0
block|,
literal|12
block|,
name|D3D11_INPUT_PER_VERTEX_DATA
block|,
literal|0
block|}
block|,     }
argument_list|;
name|result
operator|=
name|device
operator|->
name|CreateInputLayout
argument_list|(
name|quadLayout
argument_list|,
name|ArraySize
argument_list|(
name|quadLayout
argument_list|)
argument_list|,
name|vsByteCode
argument_list|,
name|vsSize
argument_list|,
operator|&
name|shader
operator|.
name|inputLayout
argument_list|)
argument_list|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
argument_list|;
name|result
operator|=
name|device
operator|->
name|CreateVertexShader
argument_list|(
name|vsByteCode
argument_list|,
name|vsSize
argument_list|,
name|NULL
argument_list|,
operator|&
name|shader
operator|.
name|vertexShader
argument_list|)
argument_list|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
argument_list|;
name|result
operator|=
name|device
operator|->
name|CreatePixelShader
argument_list|(
name|psByteCode
argument_list|,
name|psSize
argument_list|,
name|NULL
argument_list|,
operator|&
name|shader
operator|.
name|pixelShader
argument_list|)
argument_list|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
argument_list|;      return
name|shader
argument_list|; }
DECL|function|Clear11
name|Clear11
operator|::
name|Clear11
argument_list|(
name|Renderer11
operator|*
name|renderer
argument_list|)
range|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
decl_stmt|,
name|mClearBlendStates
argument_list|(
name|StructLessThan
argument_list|<
name|ClearBlendInfo
argument_list|>
argument_list|)
decl_stmt|,
name|mClearDepthStencilStates
argument_list|(
name|StructLessThan
argument_list|<
name|ClearDepthStencilInfo
argument_list|>
argument_list|)
decl_stmt|,
name|mVertexBuffer
argument_list|(
name|NULL
argument_list|)
decl_stmt|,
name|mRasterizerState
argument_list|(
name|NULL
argument_list|)
argument_list|{
name|HRESULT
name|result
argument_list|;
name|ID3D11Device
operator|*
name|device
operator|=
name|renderer
operator|->
name|getDevice
argument_list|()
argument_list|;
name|D3D11_BUFFER_DESC
name|vbDesc
argument_list|;
name|vbDesc
operator|.
name|ByteWidth
operator|=
sizeof|sizeof
argument_list|(
name|d3d11
operator|::
name|PositionDepthColorVertex
argument_list|<
name|float
argument_list|>
argument_list|)
operator|*
literal|4
argument_list|;
name|vbDesc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_DYNAMIC
argument_list|;
name|vbDesc
operator|.
name|BindFlags
operator|=
name|D3D11_BIND_VERTEX_BUFFER
argument_list|;
name|vbDesc
operator|.
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_WRITE
argument_list|;
name|vbDesc
operator|.
name|MiscFlags
operator|=
literal|0
argument_list|;
name|vbDesc
operator|.
name|StructureByteStride
operator|=
literal|0
argument_list|;
name|result
operator|=
name|device
operator|->
name|CreateBuffer
argument_list|(
operator|&
name|vbDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|mVertexBuffer
argument_list|)
argument_list|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
argument_list|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mVertexBuffer
argument_list|,
literal|"Clear11 masked clear vertex buffer"
argument_list|)
argument_list|;
name|D3D11_RASTERIZER_DESC
name|rsDesc
argument_list|;
name|rsDesc
operator|.
name|FillMode
operator|=
name|D3D11_FILL_SOLID
argument_list|;
name|rsDesc
operator|.
name|CullMode
operator|=
name|D3D11_CULL_NONE
argument_list|;
name|rsDesc
operator|.
name|FrontCounterClockwise
operator|=
name|FALSE
argument_list|;
name|rsDesc
operator|.
name|DepthBias
operator|=
literal|0
argument_list|;
name|rsDesc
operator|.
name|DepthBiasClamp
operator|=
literal|0.0f
argument_list|;
name|rsDesc
operator|.
name|SlopeScaledDepthBias
operator|=
literal|0.0f
argument_list|;
name|rsDesc
operator|.
name|DepthClipEnable
operator|=
name|mRenderer
operator|->
name|isLevel9
argument_list|()
argument_list|;
name|rsDesc
operator|.
name|ScissorEnable
operator|=
name|FALSE
argument_list|;
name|rsDesc
operator|.
name|MultisampleEnable
operator|=
name|FALSE
argument_list|;
name|rsDesc
operator|.
name|AntialiasedLineEnable
operator|=
name|FALSE
argument_list|;
name|result
operator|=
name|device
operator|->
name|CreateRasterizerState
argument_list|(
operator|&
name|rsDesc
argument_list|,
operator|&
name|mRasterizerState
argument_list|)
argument_list|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
argument_list|;
name|d3d11
operator|::
name|SetDebugName
argument_list|(
name|mRasterizerState
argument_list|,
literal|"Clear11 masked clear rasterizer state"
argument_list|)
argument_list|;
name|mFloatClearShader
operator|=
name|CreateClearShader
argument_list|(
name|device
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_FLOAT
argument_list|,
name|g_VS_ClearFloat
argument_list|,
name|g_PS_ClearFloat
argument_list|)
argument_list|;     if
operator|(
name|mRenderer
operator|->
name|isLevel9
argument_list|()
operator|)
block|{
name|memset
argument_list|(
operator|&
name|mUintClearShader
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|ClearShader
argument_list|)
argument_list|)
block|;
name|memset
argument_list|(
operator|&
name|mIntClearShader
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|ClearShader
argument_list|)
argument_list|)
block|;
return|return;
block|}
name|mUintClearShader
operator|=
name|CreateClearShader
argument_list|(
name|device
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_UINT
argument_list|,
name|g_VS_ClearUint
argument_list|,
name|g_PS_ClearUint
argument_list|)
argument_list|;
name|mIntClearShader
operator|=
name|CreateClearShader
argument_list|(
name|device
argument_list|,
name|DXGI_FORMAT_R32G32B32A32_SINT
argument_list|,
name|g_VS_ClearSint
argument_list|,
name|g_PS_ClearSint
argument_list|)
argument_list|; }
DECL|function|~Clear11
name|Clear11
operator|::
name|~
name|Clear11
argument_list|()
argument_list|{     for
operator|(
name|ClearBlendStateMap
operator|::
name|iterator
name|i
operator|=
name|mClearBlendStates
operator|.
name|begin
argument_list|()
expr|;
name|i
operator|!=
name|mClearBlendStates
operator|.
name|end
argument_list|()
expr|;
name|i
operator|++
operator|)
block|{
name|SafeRelease
argument_list|(
name|i
operator|->
name|second
argument_list|)
block|;     }
name|mClearBlendStates
operator|.
name|clear
argument_list|()
argument_list|;
name|SafeRelease
argument_list|(
name|mFloatClearShader
operator|.
name|inputLayout
argument_list|)
argument_list|;
name|SafeRelease
argument_list|(
name|mFloatClearShader
operator|.
name|vertexShader
argument_list|)
argument_list|;
name|SafeRelease
argument_list|(
name|mFloatClearShader
operator|.
name|pixelShader
argument_list|)
argument_list|;
name|SafeRelease
argument_list|(
name|mUintClearShader
operator|.
name|inputLayout
argument_list|)
argument_list|;
name|SafeRelease
argument_list|(
name|mUintClearShader
operator|.
name|vertexShader
argument_list|)
argument_list|;
name|SafeRelease
argument_list|(
name|mUintClearShader
operator|.
name|pixelShader
argument_list|)
argument_list|;
name|SafeRelease
argument_list|(
name|mIntClearShader
operator|.
name|inputLayout
argument_list|)
argument_list|;
name|SafeRelease
argument_list|(
name|mIntClearShader
operator|.
name|vertexShader
argument_list|)
argument_list|;
name|SafeRelease
argument_list|(
name|mIntClearShader
operator|.
name|pixelShader
argument_list|)
argument_list|;      for
operator|(
name|ClearDepthStencilStateMap
operator|::
name|iterator
name|i
operator|=
name|mClearDepthStencilStates
operator|.
name|begin
argument_list|()
expr|;
name|i
operator|!=
name|mClearDepthStencilStates
operator|.
name|end
argument_list|()
expr|;
name|i
operator|++
operator|)
block|{
name|SafeRelease
argument_list|(
name|i
operator|->
name|second
argument_list|)
block|;     }
name|mClearDepthStencilStates
operator|.
name|clear
argument_list|()
argument_list|;
name|SafeRelease
argument_list|(
name|mVertexBuffer
argument_list|)
argument_list|;
name|SafeRelease
argument_list|(
name|mRasterizerState
argument_list|)
argument_list|; }
DECL|function|clearFramebuffer
name|void
name|Clear11
operator|::
name|clearFramebuffer
argument_list|(
specifier|const
name|gl
operator|::
name|ClearParameters
operator|&
name|clearParams
argument_list|,
name|gl
operator|::
name|Framebuffer
operator|*
name|frameBuffer
argument_list|)
argument_list|{
comment|// First determine if a scissored clear is needed, this will always require drawing a quad.
comment|//
comment|// Otherwise, iterate over the color buffers which require clearing and determine if they can be
comment|// cleared with ID3D11DeviceContext::ClearRenderTargetView... This requires:
comment|// 1) The render target is being cleared to a float value (will be cast to integer when clearing integer
comment|//    render targets as expected but does not work the other way around)
comment|// 2) The format of the render target has no color channels that are currently masked out.
comment|// Clear the easy-to-clear buffers on the spot and accumulate the ones that require special work.
comment|//
comment|// Also determine if the depth stencil can be cleared with ID3D11DeviceContext::ClearDepthStencilView
comment|// by checking if the stencil write mask covers the entire stencil.
comment|//
comment|// To clear the remaining buffers, quads must be drawn containing an int, uint or float vertex color
comment|// attribute.
name|gl
operator|::
name|Extents
name|framebufferSize
argument_list|;     if
operator|(
name|frameBuffer
operator|->
name|getFirstColorbuffer
argument_list|()
operator|!=
name|NULL
operator|)
block|{
name|gl
operator|::
name|FramebufferAttachment
operator|*
name|attachment
operator|=
name|frameBuffer
operator|->
name|getFirstColorbuffer
argument_list|()
block|;
name|framebufferSize
operator|.
name|width
operator|=
name|attachment
operator|->
name|getWidth
argument_list|()
block|;
name|framebufferSize
operator|.
name|height
operator|=
name|attachment
operator|->
name|getHeight
argument_list|()
block|;
name|framebufferSize
operator|.
name|depth
operator|=
literal|1
block|;     }
elseif|else
if|if
condition|(
name|frameBuffer
operator|->
name|getDepthOrStencilbuffer
argument_list|()
operator|!=
name|NULL
condition|)
block|{
name|gl
operator|::
name|FramebufferAttachment
operator|*
name|attachment
operator|=
name|frameBuffer
operator|->
name|getDepthOrStencilbuffer
argument_list|()
block|;
name|framebufferSize
operator|.
name|width
operator|=
name|attachment
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|framebufferSize
operator|.
name|height
operator|=
name|attachment
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|framebufferSize
operator|.
name|depth
operator|=
literal|1
expr_stmt|;
block|}
end_namespace
begin_else
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return;
block|}
end_else
begin_if
if|if
condition|(
name|clearParams
operator|.
name|scissorEnabled
operator|&&
operator|(
name|clearParams
operator|.
name|scissor
operator|.
name|x
operator|>=
name|framebufferSize
operator|.
name|width
operator|||
name|clearParams
operator|.
name|scissor
operator|.
name|y
operator|>=
name|framebufferSize
operator|.
name|height
operator|||
name|clearParams
operator|.
name|scissor
operator|.
name|x
operator|+
name|clearParams
operator|.
name|scissor
operator|.
name|width
operator|<=
literal|0
operator|||
name|clearParams
operator|.
name|scissor
operator|.
name|y
operator|+
name|clearParams
operator|.
name|scissor
operator|.
name|height
operator|<=
literal|0
operator|)
condition|)
block|{
comment|// Scissor is enabled and the scissor rectangle is outside the renderbuffer
return|return;
block|}
end_if
begin_decl_stmt
name|bool
name|needScissoredClear
init|=
name|clearParams
operator|.
name|scissorEnabled
operator|&&
operator|(
name|clearParams
operator|.
name|scissor
operator|.
name|x
operator|>
literal|0
operator|||
name|clearParams
operator|.
name|scissor
operator|.
name|y
operator|>
literal|0
operator|||
name|clearParams
operator|.
name|scissor
operator|.
name|x
operator|+
name|clearParams
operator|.
name|scissor
operator|.
name|width
operator|<
name|framebufferSize
operator|.
name|width
operator|||
name|clearParams
operator|.
name|scissor
operator|.
name|y
operator|+
name|clearParams
operator|.
name|scissor
operator|.
name|height
operator|<
name|framebufferSize
operator|.
name|height
operator|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|std
operator|::
name|vector
argument_list|<
name|MaskedRenderTarget
argument_list|>
name|maskedClearRenderTargets
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|RenderTarget11
modifier|*
name|maskedClearDepthStencil
init|=
name|NULL
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|ID3D11DeviceContext
modifier|*
name|deviceContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
end_decl_stmt
begin_for
for|for
control|(
name|unsigned
name|int
name|colorAttachment
init|=
literal|0
init|;
name|colorAttachment
operator|<
name|gl
operator|::
name|IMPLEMENTATION_MAX_DRAW_BUFFERS
condition|;
name|colorAttachment
operator|++
control|)
block|{
if|if
condition|(
name|clearParams
operator|.
name|clearColor
index|[
name|colorAttachment
index|]
operator|&&
name|frameBuffer
operator|->
name|isEnabledColorAttachment
argument_list|(
name|colorAttachment
argument_list|)
condition|)
block|{
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|attachment
init|=
name|frameBuffer
operator|->
name|getColorbuffer
argument_list|(
name|colorAttachment
argument_list|)
decl_stmt|;
if|if
condition|(
name|attachment
condition|)
block|{
name|RenderTarget11
modifier|*
name|renderTarget
init|=
name|RenderTarget11
operator|::
name|makeRenderTarget11
argument_list|(
name|attachment
operator|->
name|getRenderTarget
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|renderTarget
condition|)
block|{
name|ERR
argument_list|(
literal|"Render target pointer unexpectedly null."
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLenum
name|internalFormat
init|=
name|attachment
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
name|GLenum
name|actualFormat
init|=
name|attachment
operator|->
name|getActualFormat
argument_list|()
decl_stmt|;
name|GLenum
name|componentType
init|=
name|gl
operator|::
name|GetComponentType
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|clearParams
operator|.
name|colorClearType
operator|==
name|GL_FLOAT
operator|&&
operator|!
operator|(
name|componentType
operator|==
name|GL_FLOAT
operator|||
name|componentType
operator|==
name|GL_UNSIGNED_NORMALIZED
operator|||
name|componentType
operator|==
name|GL_SIGNED_NORMALIZED
operator|)
condition|)
block|{
name|ERR
argument_list|(
literal|"It is undefined behaviour to clear a render buffer which is not normalized fixed point or floating-"
literal|"point to floating point values (color attachment %u has internal format 0x%X)."
argument_list|,
name|colorAttachment
argument_list|,
name|internalFormat
argument_list|)
expr_stmt|;
block|}
name|GLuint
name|internalRedBits
init|=
name|gl
operator|::
name|GetRedBits
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
name|GLuint
name|internalGreenBits
init|=
name|gl
operator|::
name|GetGreenBits
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
name|GLuint
name|internalBlueBits
init|=
name|gl
operator|::
name|GetBlueBits
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
name|GLuint
name|internalAlphaBits
init|=
name|gl
operator|::
name|GetAlphaBits
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|internalRedBits
operator|==
literal|0
operator|||
operator|!
name|clearParams
operator|.
name|colorMaskRed
operator|)
operator|&&
operator|(
name|internalGreenBits
operator|==
literal|0
operator|||
operator|!
name|clearParams
operator|.
name|colorMaskGreen
operator|)
operator|&&
operator|(
name|internalBlueBits
operator|==
literal|0
operator|||
operator|!
name|clearParams
operator|.
name|colorMaskBlue
operator|)
operator|&&
operator|(
name|internalAlphaBits
operator|==
literal|0
operator|||
operator|!
name|clearParams
operator|.
name|colorMaskAlpha
operator|)
condition|)
block|{
comment|// Every channel either does not exist in the render target or is masked out
continue|continue;
block|}
elseif|else
if|if
condition|(
name|needScissoredClear
operator|||
name|clearParams
operator|.
name|colorClearType
operator|!=
name|GL_FLOAT
operator|||
operator|(
name|internalRedBits
operator|>
literal|0
operator|&&
operator|!
name|clearParams
operator|.
name|colorMaskRed
operator|)
operator|||
operator|(
name|internalGreenBits
operator|>
literal|0
operator|&&
operator|!
name|clearParams
operator|.
name|colorMaskGreen
operator|)
operator|||
operator|(
name|internalBlueBits
operator|>
literal|0
operator|&&
operator|!
name|clearParams
operator|.
name|colorMaskBlue
operator|)
operator|||
operator|(
name|internalAlphaBits
operator|>
literal|0
operator|&&
operator|!
name|clearParams
operator|.
name|colorMaskAlpha
operator|)
condition|)
block|{
comment|// A scissored or masked clear is required
name|MaskedRenderTarget
name|maskAndRt
decl_stmt|;
name|bool
name|clearColor
init|=
name|clearParams
operator|.
name|clearColor
index|[
name|colorAttachment
index|]
decl_stmt|;
name|maskAndRt
operator|.
name|colorMask
index|[
literal|0
index|]
operator|=
operator|(
name|clearColor
operator|&&
name|clearParams
operator|.
name|colorMaskRed
operator|)
expr_stmt|;
name|maskAndRt
operator|.
name|colorMask
index|[
literal|1
index|]
operator|=
operator|(
name|clearColor
operator|&&
name|clearParams
operator|.
name|colorMaskGreen
operator|)
expr_stmt|;
name|maskAndRt
operator|.
name|colorMask
index|[
literal|2
index|]
operator|=
operator|(
name|clearColor
operator|&&
name|clearParams
operator|.
name|colorMaskBlue
operator|)
expr_stmt|;
name|maskAndRt
operator|.
name|colorMask
index|[
literal|3
index|]
operator|=
operator|(
name|clearColor
operator|&&
name|clearParams
operator|.
name|colorMaskAlpha
operator|)
expr_stmt|;
name|maskAndRt
operator|.
name|renderTarget
operator|=
name|renderTarget
expr_stmt|;
name|maskedClearRenderTargets
operator|.
name|push_back
argument_list|(
name|maskAndRt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ID3D11DeviceContext::ClearRenderTargetView is possible
name|ID3D11RenderTargetView
modifier|*
name|framebufferRTV
init|=
name|renderTarget
operator|->
name|getRenderTargetView
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|framebufferRTV
condition|)
block|{
name|ERR
argument_list|(
literal|"Render target view pointer unexpectedly null."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Check if the actual format has a channel that the internal format does not and set them to the
comment|// default values
name|GLuint
name|actualRedBits
init|=
name|gl
operator|::
name|GetRedBits
argument_list|(
name|actualFormat
argument_list|)
decl_stmt|;
name|GLuint
name|actualGreenBits
init|=
name|gl
operator|::
name|GetGreenBits
argument_list|(
name|actualFormat
argument_list|)
decl_stmt|;
name|GLuint
name|actualBlueBits
init|=
name|gl
operator|::
name|GetBlueBits
argument_list|(
name|actualFormat
argument_list|)
decl_stmt|;
name|GLuint
name|actualAlphaBits
init|=
name|gl
operator|::
name|GetAlphaBits
argument_list|(
name|actualFormat
argument_list|)
decl_stmt|;
specifier|const
name|float
name|clearValues
index|[
literal|4
index|]
init|=
block|{
operator|(
operator|(
name|internalRedBits
operator|==
literal|0
operator|&&
name|actualRedBits
operator|>
literal|0
operator|)
operator|?
literal|0.0f
operator|:
name|clearParams
operator|.
name|colorFClearValue
operator|.
name|red
operator|)
block|,
operator|(
operator|(
name|internalGreenBits
operator|==
literal|0
operator|&&
name|actualGreenBits
operator|>
literal|0
operator|)
operator|?
literal|0.0f
operator|:
name|clearParams
operator|.
name|colorFClearValue
operator|.
name|green
operator|)
block|,
operator|(
operator|(
name|internalBlueBits
operator|==
literal|0
operator|&&
name|actualBlueBits
operator|>
literal|0
operator|)
operator|?
literal|0.0f
operator|:
name|clearParams
operator|.
name|colorFClearValue
operator|.
name|blue
operator|)
block|,
operator|(
operator|(
name|internalAlphaBits
operator|==
literal|0
operator|&&
name|actualAlphaBits
operator|>
literal|0
operator|)
operator|?
literal|1.0f
operator|:
name|clearParams
operator|.
name|colorFClearValue
operator|.
name|alpha
operator|)
block|,                     }
decl_stmt|;
name|deviceContext
operator|->
name|ClearRenderTargetView
argument_list|(
name|framebufferRTV
argument_list|,
name|clearValues
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_for
begin_if
if|if
condition|(
name|clearParams
operator|.
name|clearDepth
operator|||
name|clearParams
operator|.
name|clearStencil
condition|)
block|{
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|attachment
init|=
name|frameBuffer
operator|->
name|getDepthOrStencilbuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|attachment
condition|)
block|{
name|RenderTarget11
modifier|*
name|renderTarget
init|=
name|RenderTarget11
operator|::
name|makeRenderTarget11
argument_list|(
name|attachment
operator|->
name|getDepthStencil
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|renderTarget
condition|)
block|{
name|ERR
argument_list|(
literal|"Depth stencil render target pointer unexpectedly null."
argument_list|)
expr_stmt|;
return|return;
block|}
name|GLenum
name|actualFormat
init|=
name|attachment
operator|->
name|getActualFormat
argument_list|()
decl_stmt|;
name|unsigned
name|int
name|stencilUnmasked
init|=
name|frameBuffer
operator|->
name|hasStencil
argument_list|()
condition|?
operator|(
literal|1
operator|<<
name|gl
operator|::
name|GetStencilBits
argument_list|(
name|actualFormat
argument_list|)
operator|)
operator|-
literal|1
else|:
literal|0
decl_stmt|;
name|bool
name|needMaskedStencilClear
init|=
name|clearParams
operator|.
name|clearStencil
operator|&&
operator|(
name|clearParams
operator|.
name|stencilWriteMask
operator|&
name|stencilUnmasked
operator|)
operator|!=
name|stencilUnmasked
decl_stmt|;
if|if
condition|(
name|needScissoredClear
operator|||
name|needMaskedStencilClear
condition|)
block|{
name|maskedClearDepthStencil
operator|=
name|renderTarget
expr_stmt|;
block|}
else|else
block|{
name|ID3D11DepthStencilView
modifier|*
name|framebufferDSV
init|=
name|renderTarget
operator|->
name|getDepthStencilView
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|framebufferDSV
condition|)
block|{
name|ERR
argument_list|(
literal|"Depth stencil view pointer unexpectedly null."
argument_list|)
expr_stmt|;
return|return;
block|}
name|UINT
name|clearFlags
init|=
operator|(
name|clearParams
operator|.
name|clearDepth
condition|?
name|D3D11_CLEAR_DEPTH
else|:
literal|0
operator|)
operator||
operator|(
name|clearParams
operator|.
name|clearStencil
condition|?
name|D3D11_CLEAR_STENCIL
else|:
literal|0
operator|)
decl_stmt|;
name|FLOAT
name|depthClear
init|=
name|gl
operator|::
name|clamp01
argument_list|(
name|clearParams
operator|.
name|depthClearValue
argument_list|)
decl_stmt|;
name|UINT8
name|stencilClear
init|=
name|clearParams
operator|.
name|stencilClearValue
operator|&
literal|0xFF
decl_stmt|;
name|deviceContext
operator|->
name|ClearDepthStencilView
argument_list|(
name|framebufferDSV
argument_list|,
name|clearFlags
argument_list|,
name|depthClear
argument_list|,
name|stencilClear
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_if
begin_if
if|if
condition|(
name|maskedClearRenderTargets
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|maskedClearDepthStencil
condition|)
block|{
comment|// To clear the render targets and depth stencil in one pass:
comment|//
comment|// Render a quad clipped to the scissor rectangle which draws the clear color and a blend
comment|// state that will perform the required color masking.
comment|//
comment|// The quad's depth is equal to the depth clear value with a depth stencil state that
comment|// will enable or disable depth test/writes if the depth buffer should be cleared or not.
comment|//
comment|// The rasterizer state's stencil is set to always pass or fail based on if the stencil
comment|// should be cleared or not with a stencil write mask of the stencil clear value.
comment|//
comment|// ======================================================================================
comment|//
comment|// Luckily, the gl spec (ES 3.0.2 pg 183) states that the results of clearing a render-
comment|// buffer that is not normalized fixed point or floating point with floating point values
comment|// are undefined so we can just write floats to them and D3D11 will bit cast them to
comment|// integers.
comment|//
comment|// Also, we don't have to worry about attempting to clear a normalized fixed/floating point
comment|// buffer with integer values because there is no gl API call which would allow it,
comment|// glClearBuffer* calls only clear a single renderbuffer at a time which is verified to
comment|// be a compatible clear type.
comment|// Bind all the render targets which need clearing
name|ASSERT
argument_list|(
name|maskedClearRenderTargets
operator|.
name|size
argument_list|()
operator|<=
name|mRenderer
operator|->
name|getRendererCaps
argument_list|()
operator|.
name|maxDrawBuffers
argument_list|)
expr_stmt|;
name|std
operator|::
name|vector
argument_list|<
name|ID3D11RenderTargetView
modifier|*
argument_list|>
name|rtvs
argument_list|(
name|maskedClearRenderTargets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maskedClearRenderTargets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RenderTarget11
modifier|*
name|renderTarget
init|=
name|maskedClearRenderTargets
index|[
name|i
index|]
operator|.
name|renderTarget
decl_stmt|;
name|ID3D11RenderTargetView
modifier|*
name|rtv
init|=
name|renderTarget
operator|->
name|getRenderTargetView
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rtv
condition|)
block|{
name|ERR
argument_list|(
literal|"Render target view unexpectedly null."
argument_list|)
expr_stmt|;
return|return;
block|}
name|rtvs
index|[
name|i
index|]
operator|=
name|rtv
expr_stmt|;
block|}
name|ID3D11DepthStencilView
modifier|*
name|dsv
init|=
name|maskedClearDepthStencil
condition|?
name|maskedClearDepthStencil
operator|->
name|getDepthStencilView
argument_list|()
else|:
name|NULL
decl_stmt|;
name|ID3D11BlendState
modifier|*
name|blendState
init|=
name|getBlendState
argument_list|(
name|maskedClearRenderTargets
argument_list|)
decl_stmt|;
specifier|const
name|FLOAT
name|blendFactors
index|[
literal|4
index|]
init|=
block|{
literal|1.0f
block|,
literal|1.0f
block|,
literal|1.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|const
name|UINT
name|sampleMask
init|=
literal|0xFFFFFFFF
decl_stmt|;
name|ID3D11DepthStencilState
modifier|*
name|dsState
init|=
name|getDepthStencilState
argument_list|(
name|clearParams
argument_list|)
decl_stmt|;
specifier|const
name|UINT
name|stencilClear
init|=
name|clearParams
operator|.
name|stencilClearValue
operator|&
literal|0xFF
decl_stmt|;
comment|// Set the vertices
name|UINT
name|vertexStride
init|=
literal|0
decl_stmt|;
specifier|const
name|UINT
name|startIdx
init|=
literal|0
decl_stmt|;
specifier|const
name|ClearShader
modifier|*
name|shader
init|=
name|NULL
decl_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|HRESULT
name|result
init|=
name|deviceContext
operator|->
name|Map
argument_list|(
name|mVertexBuffer
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE_DISCARD
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to map masked clear vertex buffer, HRESULT: 0x%X."
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|gl
operator|::
name|Rectangle
modifier|*
name|scissorPtr
init|=
name|clearParams
operator|.
name|scissorEnabled
condition|?
operator|&
name|clearParams
operator|.
name|scissor
else|:
name|NULL
decl_stmt|;
switch|switch
condition|(
name|clearParams
operator|.
name|colorClearType
condition|)
block|{
case|case
name|GL_FLOAT
case|:
name|ApplyVertices
argument_list|(
name|framebufferSize
argument_list|,
name|scissorPtr
argument_list|,
name|clearParams
operator|.
name|colorFClearValue
argument_list|,
name|clearParams
operator|.
name|depthClearValue
argument_list|,
name|mappedResource
operator|.
name|pData
argument_list|)
expr_stmt|;
name|vertexStride
operator|=
sizeof|sizeof
argument_list|(
name|d3d11
operator|::
name|PositionDepthColorVertex
argument_list|<
name|float
argument_list|>
argument_list|)
expr_stmt|;
name|shader
operator|=
operator|&
name|mFloatClearShader
expr_stmt|;
break|break;
case|case
name|GL_UNSIGNED_INT
case|:
name|ApplyVertices
argument_list|(
name|framebufferSize
argument_list|,
name|scissorPtr
argument_list|,
name|clearParams
operator|.
name|colorUIClearValue
argument_list|,
name|clearParams
operator|.
name|depthClearValue
argument_list|,
name|mappedResource
operator|.
name|pData
argument_list|)
expr_stmt|;
name|vertexStride
operator|=
expr|sizeof
operator|(
name|d3d11
operator|::
name|PositionDepthColorVertex
argument_list|<
name|unsigned
name|int
argument_list|>
operator|)
expr_stmt|;
name|shader
operator|=
operator|&
name|mUintClearShader
expr_stmt|;
break|break;
case|case
name|GL_INT
case|:
name|ApplyVertices
argument_list|(
name|framebufferSize
argument_list|,
name|scissorPtr
argument_list|,
name|clearParams
operator|.
name|colorIClearValue
argument_list|,
name|clearParams
operator|.
name|depthClearValue
argument_list|,
name|mappedResource
operator|.
name|pData
argument_list|)
expr_stmt|;
name|vertexStride
operator|=
sizeof|sizeof
argument_list|(
name|d3d11
operator|::
name|PositionDepthColorVertex
argument_list|<
name|int
argument_list|>
argument_list|)
expr_stmt|;
name|shader
operator|=
operator|&
name|mIntClearShader
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
name|deviceContext
operator|->
name|Unmap
argument_list|(
name|mVertexBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Set the viewport to be the same size as the framebuffer
name|D3D11_VIEWPORT
name|viewport
decl_stmt|;
name|viewport
operator|.
name|TopLeftX
operator|=
literal|0
expr_stmt|;
name|viewport
operator|.
name|TopLeftY
operator|=
literal|0
expr_stmt|;
name|viewport
operator|.
name|Width
operator|=
name|framebufferSize
operator|.
name|width
expr_stmt|;
name|viewport
operator|.
name|Height
operator|=
name|framebufferSize
operator|.
name|height
expr_stmt|;
name|viewport
operator|.
name|MinDepth
operator|=
literal|0
expr_stmt|;
name|viewport
operator|.
name|MaxDepth
operator|=
literal|1
expr_stmt|;
name|deviceContext
operator|->
name|RSSetViewports
argument_list|(
literal|1
argument_list|,
operator|&
name|viewport
argument_list|)
expr_stmt|;
comment|// Apply state
name|deviceContext
operator|->
name|OMSetBlendState
argument_list|(
name|blendState
argument_list|,
name|blendFactors
argument_list|,
name|sampleMask
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|OMSetDepthStencilState
argument_list|(
name|dsState
argument_list|,
name|stencilClear
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|RSSetState
argument_list|(
name|mRasterizerState
argument_list|)
expr_stmt|;
comment|// Apply shaders
name|deviceContext
operator|->
name|IASetInputLayout
argument_list|(
name|shader
operator|->
name|inputLayout
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|VSSetShader
argument_list|(
name|shader
operator|->
name|vertexShader
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|PSSetShader
argument_list|(
name|shader
operator|->
name|pixelShader
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|GSSetShader
argument_list|(
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Apply vertex buffer
name|deviceContext
operator|->
name|IASetVertexBuffers
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|mVertexBuffer
argument_list|,
operator|&
name|vertexStride
argument_list|,
operator|&
name|startIdx
argument_list|)
expr_stmt|;
name|deviceContext
operator|->
name|IASetPrimitiveTopology
argument_list|(
name|D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP
argument_list|)
expr_stmt|;
comment|// Apply render targets
name|deviceContext
operator|->
name|OMSetRenderTargets
argument_list|(
name|rtvs
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|rtvs
operator|.
name|empty
argument_list|()
condition|?
name|NULL
else|:
operator|&
name|rtvs
index|[
literal|0
index|]
operator|)
argument_list|,
name|dsv
argument_list|)
expr_stmt|;
comment|// Draw the clear quad
name|deviceContext
operator|->
name|Draw
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Clean up
name|mRenderer
operator|->
name|markAllStateDirty
argument_list|()
expr_stmt|;
block|}
end_if
begin_expr_stmt
unit|}  ID3D11BlendState
DECL|function|getBlendState
operator|*
name|Clear11
operator|::
name|getBlendState
operator|(
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|MaskedRenderTarget
argument_list|>
operator|&
name|rts
operator|)
block|{
name|ClearBlendInfo
name|blendKey
operator|=
block|{
literal|0
block|}
block|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|rts
operator|.
name|size
argument_list|()
condition|)
block|{
name|RenderTarget11
modifier|*
name|rt
init|=
name|rts
index|[
name|i
index|]
operator|.
name|renderTarget
decl_stmt|;
name|GLint
name|internalFormat
init|=
name|rt
operator|->
name|getInternalFormat
argument_list|()
decl_stmt|;
name|blendKey
operator|.
name|maskChannels
index|[
name|i
index|]
index|[
literal|0
index|]
operator|=
operator|(
name|rts
index|[
name|i
index|]
operator|.
name|colorMask
index|[
literal|0
index|]
operator|&&
name|gl
operator|::
name|GetRedBits
argument_list|(
name|internalFormat
argument_list|)
operator|>
literal|0
operator|)
expr_stmt|;
name|blendKey
operator|.
name|maskChannels
index|[
name|i
index|]
index|[
literal|1
index|]
operator|=
operator|(
name|rts
index|[
name|i
index|]
operator|.
name|colorMask
index|[
literal|1
index|]
operator|&&
name|gl
operator|::
name|GetGreenBits
argument_list|(
name|internalFormat
argument_list|)
operator|>
literal|0
operator|)
expr_stmt|;
name|blendKey
operator|.
name|maskChannels
index|[
name|i
index|]
index|[
literal|2
index|]
operator|=
operator|(
name|rts
index|[
name|i
index|]
operator|.
name|colorMask
index|[
literal|2
index|]
operator|&&
name|gl
operator|::
name|GetBlueBits
argument_list|(
name|internalFormat
argument_list|)
operator|>
literal|0
operator|)
expr_stmt|;
name|blendKey
operator|.
name|maskChannels
index|[
name|i
index|]
index|[
literal|3
index|]
operator|=
operator|(
name|rts
index|[
name|i
index|]
operator|.
name|colorMask
index|[
literal|3
index|]
operator|&&
name|gl
operator|::
name|GetAlphaBits
argument_list|(
name|internalFormat
argument_list|)
operator|>
literal|0
operator|)
expr_stmt|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|blendKey
operator|.
name|maskChannels
index|[
name|i
index|]
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|blendKey
operator|.
name|maskChannels
index|[
name|i
index|]
index|[
literal|1
index|]
operator|=
literal|false
expr_stmt|;
name|blendKey
operator|.
name|maskChannels
index|[
name|i
index|]
index|[
literal|2
index|]
operator|=
literal|false
expr_stmt|;
name|blendKey
operator|.
name|maskChannels
index|[
name|i
index|]
index|[
literal|3
index|]
operator|=
literal|false
expr_stmt|;
block|}
end_else
begin_decl_stmt
unit|}      ClearBlendStateMap
operator|::
name|const_iterator
name|i
init|=
name|mClearBlendStates
operator|.
name|find
argument_list|(
name|blendKey
argument_list|)
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|i
operator|!=
name|mClearBlendStates
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|i
operator|->
name|second
return|;
block|}
else|else
block|{
name|D3D11_BLEND_DESC
name|blendDesc
init|=
block|{
literal|0
block|}
decl_stmt|;
name|blendDesc
operator|.
name|AlphaToCoverageEnable
operator|=
name|FALSE
expr_stmt|;
name|blendDesc
operator|.
name|IndependentBlendEnable
operator|=
operator|(
name|rts
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
condition|?
name|TRUE
else|:
name|FALSE
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|blendDesc
operator|.
name|RenderTarget
index|[
name|i
index|]
operator|.
name|BlendEnable
operator|=
name|FALSE
expr_stmt|;
name|blendDesc
operator|.
name|RenderTarget
index|[
name|i
index|]
operator|.
name|RenderTargetWriteMask
operator|=
name|gl_d3d11
operator|::
name|ConvertColorMask
argument_list|(
name|blendKey
operator|.
name|maskChannels
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|,
name|blendKey
operator|.
name|maskChannels
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|,
name|blendKey
operator|.
name|maskChannels
index|[
name|i
index|]
index|[
literal|2
index|]
argument_list|,
name|blendKey
operator|.
name|maskChannels
index|[
name|i
index|]
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|ID3D11BlendState
modifier|*
name|blendState
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateBlendState
argument_list|(
operator|&
name|blendDesc
argument_list|,
operator|&
name|blendState
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
operator|||
operator|!
name|blendState
condition|)
block|{
name|ERR
argument_list|(
literal|"Unable to create a ID3D11BlendState, HRESULT: 0x%X."
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|mClearBlendStates
index|[
name|blendKey
index|]
operator|=
name|blendState
expr_stmt|;
return|return
name|blendState
return|;
block|}
end_if
begin_expr_stmt
unit|}  ID3D11DepthStencilState
DECL|function|getDepthStencilState
operator|*
name|Clear11
operator|::
name|getDepthStencilState
operator|(
specifier|const
name|gl
operator|::
name|ClearParameters
operator|&
name|clearParams
operator|)
block|{
name|ClearDepthStencilInfo
name|dsKey
operator|=
block|{
literal|0
block|}
block|;
name|dsKey
operator|.
name|clearDepth
operator|=
name|clearParams
operator|.
name|clearDepth
block|;
name|dsKey
operator|.
name|clearStencil
operator|=
name|clearParams
operator|.
name|clearStencil
block|;
name|dsKey
operator|.
name|stencilWriteMask
operator|=
name|clearParams
operator|.
name|stencilWriteMask
operator|&
literal|0xFF
block|;
name|ClearDepthStencilStateMap
operator|::
name|const_iterator
name|i
operator|=
name|mClearDepthStencilStates
operator|.
name|find
argument_list|(
name|dsKey
argument_list|)
block|;
if|if
condition|(
name|i
operator|!=
name|mClearDepthStencilStates
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|i
operator|->
name|second
return|;
block|}
end_expr_stmt
begin_else
else|else
block|{
name|D3D11_DEPTH_STENCIL_DESC
name|dsDesc
init|=
block|{
literal|0
block|}
decl_stmt|;
name|dsDesc
operator|.
name|DepthEnable
operator|=
name|dsKey
operator|.
name|clearDepth
condition|?
name|TRUE
else|:
name|FALSE
expr_stmt|;
name|dsDesc
operator|.
name|DepthWriteMask
operator|=
name|dsKey
operator|.
name|clearDepth
condition|?
name|D3D11_DEPTH_WRITE_MASK_ALL
else|:
name|D3D11_DEPTH_WRITE_MASK_ZERO
expr_stmt|;
name|dsDesc
operator|.
name|DepthFunc
operator|=
name|D3D11_COMPARISON_ALWAYS
expr_stmt|;
name|dsDesc
operator|.
name|StencilEnable
operator|=
name|dsKey
operator|.
name|clearStencil
condition|?
name|TRUE
else|:
name|FALSE
expr_stmt|;
name|dsDesc
operator|.
name|StencilReadMask
operator|=
literal|0
expr_stmt|;
name|dsDesc
operator|.
name|StencilWriteMask
operator|=
name|dsKey
operator|.
name|stencilWriteMask
expr_stmt|;
name|dsDesc
operator|.
name|FrontFace
operator|.
name|StencilFailOp
operator|=
name|D3D11_STENCIL_OP_REPLACE
expr_stmt|;
name|dsDesc
operator|.
name|FrontFace
operator|.
name|StencilDepthFailOp
operator|=
name|D3D11_STENCIL_OP_REPLACE
expr_stmt|;
name|dsDesc
operator|.
name|FrontFace
operator|.
name|StencilPassOp
operator|=
name|D3D11_STENCIL_OP_REPLACE
expr_stmt|;
name|dsDesc
operator|.
name|FrontFace
operator|.
name|StencilFunc
operator|=
name|D3D11_COMPARISON_ALWAYS
expr_stmt|;
name|dsDesc
operator|.
name|BackFace
operator|.
name|StencilFailOp
operator|=
name|D3D11_STENCIL_OP_REPLACE
expr_stmt|;
name|dsDesc
operator|.
name|BackFace
operator|.
name|StencilDepthFailOp
operator|=
name|D3D11_STENCIL_OP_REPLACE
expr_stmt|;
name|dsDesc
operator|.
name|BackFace
operator|.
name|StencilPassOp
operator|=
name|D3D11_STENCIL_OP_REPLACE
expr_stmt|;
name|dsDesc
operator|.
name|BackFace
operator|.
name|StencilFunc
operator|=
name|D3D11_COMPARISON_ALWAYS
expr_stmt|;
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|ID3D11DepthStencilState
modifier|*
name|dsState
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateDepthStencilState
argument_list|(
operator|&
name|dsDesc
argument_list|,
operator|&
name|dsState
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
operator|||
operator|!
name|dsState
condition|)
block|{
name|ERR
argument_list|(
literal|"Unable to create a ID3D11DepthStencilState, HRESULT: 0x%X."
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|mClearDepthStencilStates
index|[
name|dsKey
index|]
operator|=
name|dsState
expr_stmt|;
return|return
name|dsState
return|;
block|}
end_else
unit|}  }
end_unit
