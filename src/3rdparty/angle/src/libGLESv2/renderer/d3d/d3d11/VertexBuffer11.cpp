begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// VertexBuffer11.cpp: Defines the D3D11 VertexBuffer implementation.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/VertexBuffer11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/Buffer11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Buffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/VertexAttribute.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/formatutils11.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|VertexBuffer11
name|VertexBuffer11
operator|::
name|VertexBuffer11
parameter_list|(
name|rx
operator|::
name|Renderer11
modifier|*
specifier|const
name|renderer
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
block|{
name|mBuffer
operator|=
name|NULL
expr_stmt|;
name|mBufferSize
operator|=
literal|0
expr_stmt|;
name|mDynamicUsage
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|~VertexBuffer11
name|VertexBuffer11
operator|::
name|~
name|VertexBuffer11
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mBuffer
argument_list|)
expr_stmt|;
block|}
DECL|function|initialize
name|bool
name|VertexBuffer11
operator|::
name|initialize
parameter_list|(
name|unsigned
name|int
name|size
parameter_list|,
name|bool
name|dynamicUsage
parameter_list|)
block|{
name|SafeRelease
argument_list|(
name|mBuffer
argument_list|)
expr_stmt|;
name|updateSerial
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|ID3D11Device
modifier|*
name|dxDevice
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|D3D11_BUFFER_DESC
name|bufferDesc
decl_stmt|;
name|bufferDesc
operator|.
name|ByteWidth
operator|=
name|size
expr_stmt|;
name|bufferDesc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_DYNAMIC
expr_stmt|;
name|bufferDesc
operator|.
name|BindFlags
operator|=
name|D3D11_BIND_VERTEX_BUFFER
expr_stmt|;
name|bufferDesc
operator|.
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_WRITE
expr_stmt|;
name|bufferDesc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|bufferDesc
operator|.
name|StructureByteStride
operator|=
literal|0
expr_stmt|;
name|HRESULT
name|result
init|=
name|dxDevice
operator|->
name|CreateBuffer
argument_list|(
operator|&
name|bufferDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|mBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|mBufferSize
operator|=
name|size
expr_stmt|;
name|mDynamicUsage
operator|=
name|dynamicUsage
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|makeVertexBuffer11
name|VertexBuffer11
modifier|*
name|VertexBuffer11
operator|::
name|makeVertexBuffer11
parameter_list|(
name|VertexBuffer
modifier|*
name|vetexBuffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|VertexBuffer11
operator|*
argument_list|,
name|vetexBuffer
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|VertexBuffer11
operator|*
argument_list|>
argument_list|(
name|vetexBuffer
argument_list|)
return|;
block|}
DECL|function|storeVertexAttributes
name|bool
name|VertexBuffer11
operator|::
name|storeVertexAttributes
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
specifier|const
name|gl
operator|::
name|VertexAttribCurrentValueData
modifier|&
name|currentValue
parameter_list|,
name|GLint
name|start
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instances
parameter_list|,
name|unsigned
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|mBuffer
condition|)
block|{
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
init|=
name|attrib
operator|.
name|buffer
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|inputStride
init|=
name|ComputeVertexAttributeStride
argument_list|(
name|attrib
argument_list|)
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|dxContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|HRESULT
name|result
init|=
name|dxContext
operator|->
name|Map
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE_NO_OVERWRITE
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Vertex buffer map failed with error 0x%08x"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|char
modifier|*
name|output
init|=
cast|reinterpret_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|mappedResource
operator|.
name|pData
argument_list|)
operator|+
name|offset
decl_stmt|;
specifier|const
name|char
modifier|*
name|input
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|attrib
operator|.
name|enabled
condition|)
block|{
if|if
condition|(
name|buffer
condition|)
block|{
name|Buffer11
modifier|*
name|storage
init|=
name|Buffer11
operator|::
name|makeBuffer11
argument_list|(
name|buffer
operator|->
name|getImplementation
argument_list|()
argument_list|)
decl_stmt|;
name|input
operator|=
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|storage
operator|->
name|getData
argument_list|()
argument_list|)
operator|+
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|attrib
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|input
operator|=
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|attrib
operator|.
name|pointer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|input
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|currentValue
operator|.
name|FloatValues
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instances
operator|==
literal|0
operator|||
name|attrib
operator|.
name|divisor
operator|==
literal|0
condition|)
block|{
name|input
operator|+=
name|inputStride
operator|*
name|start
expr_stmt|;
block|}
name|gl
operator|::
name|VertexFormat
name|vertexFormat
argument_list|(
name|attrib
argument_list|,
name|currentValue
operator|.
name|Type
argument_list|)
decl_stmt|;
name|VertexCopyFunction
name|conversionFunc
init|=
name|gl_d3d11
operator|::
name|GetVertexCopyFunction
argument_list|(
name|vertexFormat
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|conversionFunc
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|conversionFunc
argument_list|(
name|input
argument_list|,
name|inputStride
argument_list|,
name|count
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|dxContext
operator|->
name|Unmap
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|ERR
argument_list|(
literal|"Vertex buffer not initialized."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|getSpaceRequired
name|bool
name|VertexBuffer11
operator|::
name|getSpaceRequired
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instances
parameter_list|,
name|unsigned
name|int
modifier|*
name|outSpaceRequired
parameter_list|)
specifier|const
block|{
name|unsigned
name|int
name|elementCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|attrib
operator|.
name|enabled
condition|)
block|{
if|if
condition|(
name|instances
operator|==
literal|0
operator|||
name|attrib
operator|.
name|divisor
operator|==
literal|0
condition|)
block|{
name|elementCount
operator|=
name|count
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|instances
argument_list|)
operator|<
name|std
operator|::
name|numeric_limits
argument_list|<
name|unsigned
name|int
argument_list|>
operator|::
name|max
argument_list|()
operator|-
operator|(
name|attrib
operator|.
name|divisor
operator|-
literal|1
operator|)
condition|)
block|{
comment|// Round up
name|elementCount
operator|=
name|rx
operator|::
name|roundUp
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|instances
argument_list|)
argument_list|,
name|attrib
operator|.
name|divisor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|elementCount
operator|=
name|instances
operator|/
name|attrib
operator|.
name|divisor
expr_stmt|;
block|}
block|}
name|gl
operator|::
name|VertexFormat
name|vertexFormat
argument_list|(
name|attrib
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|elementSize
init|=
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|gl_d3d11
operator|::
name|GetVertexElementSize
argument_list|(
name|vertexFormat
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|elementSize
operator|<=
name|std
operator|::
name|numeric_limits
argument_list|<
name|unsigned
name|int
argument_list|>
operator|::
name|max
argument_list|()
operator|/
name|elementCount
condition|)
block|{
if|if
condition|(
name|outSpaceRequired
condition|)
block|{
operator|*
name|outSpaceRequired
operator|=
name|elementSize
operator|*
name|elementCount
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
specifier|const
name|unsigned
name|int
name|elementSize
init|=
literal|4
decl_stmt|;
if|if
condition|(
name|outSpaceRequired
condition|)
block|{
operator|*
name|outSpaceRequired
operator|=
name|elementSize
operator|*
literal|4
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
DECL|function|getBufferSize
name|unsigned
name|int
name|VertexBuffer11
operator|::
name|getBufferSize
parameter_list|()
specifier|const
block|{
return|return
name|mBufferSize
return|;
block|}
DECL|function|setBufferSize
name|bool
name|VertexBuffer11
operator|::
name|setBufferSize
parameter_list|(
name|unsigned
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|>
name|mBufferSize
condition|)
block|{
return|return
name|initialize
argument_list|(
name|size
argument_list|,
name|mDynamicUsage
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|function|discard
name|bool
name|VertexBuffer11
operator|::
name|discard
parameter_list|()
block|{
if|if
condition|(
name|mBuffer
condition|)
block|{
name|ID3D11DeviceContext
modifier|*
name|dxContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedResource
decl_stmt|;
name|HRESULT
name|result
init|=
name|dxContext
operator|->
name|Map
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|,
name|D3D11_MAP_WRITE_DISCARD
argument_list|,
literal|0
argument_list|,
operator|&
name|mappedResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Vertex buffer map failed with error 0x%08x"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|dxContext
operator|->
name|Unmap
argument_list|(
name|mBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|ERR
argument_list|(
literal|"Vertex buffer not initialized."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|getBuffer
name|ID3D11Buffer
modifier|*
name|VertexBuffer11
operator|::
name|getBuffer
parameter_list|()
specifier|const
block|{
return|return
name|mBuffer
return|;
block|}
block|}
end_namespace
end_unit
