begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Clear11.h: Framebuffer clear utility class.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RENDERER_CLEAR11_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RENDERER_CLEAR11_H_
define|#
directive|define
name|LIBGLESV2_RENDERER_CLEAR11_H_
end_define
begin_include
include|#
directive|include
file|"libGLESv2/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Error.h"
end_include
begin_include
include|#
directive|include
file|<map>
end_include
begin_include
include|#
directive|include
file|<vector>
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Framebuffer
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|Renderer11
decl_stmt|;
name|class
name|RenderTarget11
decl_stmt|;
name|class
name|Clear11
block|{
name|public
label|:
name|explicit
name|Clear11
parameter_list|(
name|Renderer11
modifier|*
name|renderer
parameter_list|)
function_decl|;
operator|~
name|Clear11
argument_list|()
expr_stmt|;
comment|// Clears the framebuffer with the supplied clear parameters, assumes that the framebuffer is currently applied.
name|gl
operator|::
name|Error
name|clearFramebuffer
argument_list|(
specifier|const
name|gl
operator|::
name|ClearParameters
operator|&
name|clearParams
argument_list|,
specifier|const
name|gl
operator|::
name|Framebuffer
operator|*
name|frameBuffer
argument_list|)
expr_stmt|;
name|private
label|:
name|Renderer11
modifier|*
name|mRenderer
decl_stmt|;
struct|struct
name|ClearBlendInfo
block|{
name|bool
name|maskChannels
index|[
name|D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT
index|]
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
typedef|typedef
name|bool
function_decl|(
modifier|*
name|ClearBlendInfoComparisonFunction
function_decl|)
parameter_list|(
specifier|const
name|ClearBlendInfo
modifier|&
parameter_list|,
specifier|const
name|ClearBlendInfo
modifier|&
parameter_list|)
function_decl|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|ClearBlendInfo
operator|,
name|ID3D11BlendState
operator|*
operator|,
name|ClearBlendInfoComparisonFunction
operator|>
name|ClearBlendStateMap
expr_stmt|;
name|ClearBlendStateMap
name|mClearBlendStates
decl_stmt|;
struct|struct
name|MaskedRenderTarget
block|{
name|bool
name|colorMask
index|[
literal|4
index|]
decl_stmt|;
name|RenderTarget11
modifier|*
name|renderTarget
decl_stmt|;
block|}
struct|;
name|ID3D11BlendState
modifier|*
name|getBlendState
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|MaskedRenderTarget
operator|>
operator|&
name|rts
argument_list|)
decl_stmt|;
struct|struct
name|ClearShader
block|{
name|ID3D11InputLayout
modifier|*
name|inputLayout
decl_stmt|;
name|ID3D11VertexShader
modifier|*
name|vertexShader
decl_stmt|;
name|ID3D11PixelShader
modifier|*
name|pixelShader
decl_stmt|;
block|}
struct|;
name|ClearShader
name|mFloatClearShader
decl_stmt|;
name|ClearShader
name|mUintClearShader
decl_stmt|;
name|ClearShader
name|mIntClearShader
decl_stmt|;
name|template
operator|<
name|unsigned
name|int
name|vsSize
operator|,
name|unsigned
name|int
name|psSize
operator|>
specifier|static
name|ClearShader
name|CreateClearShader
argument_list|(
argument|ID3D11Device *device
argument_list|,
argument|DXGI_FORMAT colorType
argument_list|,
argument|const BYTE (&vsByteCode)[vsSize]
argument_list|,
argument|const BYTE (&psByteCode)[psSize]
argument_list|)
expr_stmt|;
struct|struct
name|ClearDepthStencilInfo
block|{
name|bool
name|clearDepth
decl_stmt|;
name|bool
name|clearStencil
decl_stmt|;
name|UINT8
name|stencilWriteMask
decl_stmt|;
block|}
struct|;
typedef|typedef
name|bool
function_decl|(
modifier|*
name|ClearDepthStencilInfoComparisonFunction
function_decl|)
parameter_list|(
specifier|const
name|ClearDepthStencilInfo
modifier|&
parameter_list|,
specifier|const
name|ClearDepthStencilInfo
modifier|&
parameter_list|)
function_decl|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|ClearDepthStencilInfo
operator|,
name|ID3D11DepthStencilState
operator|*
operator|,
name|ClearDepthStencilInfoComparisonFunction
operator|>
name|ClearDepthStencilStateMap
expr_stmt|;
name|ClearDepthStencilStateMap
name|mClearDepthStencilStates
decl_stmt|;
name|ID3D11DepthStencilState
modifier|*
name|getDepthStencilState
argument_list|(
specifier|const
name|gl
operator|::
name|ClearParameters
operator|&
name|clearParams
argument_list|)
decl_stmt|;
name|ID3D11Buffer
modifier|*
name|mVertexBuffer
decl_stmt|;
name|ID3D11RasterizerState
modifier|*
name|mRasterizerState
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RENDERER_CLEAR11_H_
end_comment
end_unit
