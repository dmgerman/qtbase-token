begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// renderer11_utils.cpp: Conversion functions and other utility routines
end_comment
begin_comment
comment|// specific to the D3D11 renderer.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/formatutils11.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|namespace|gl_d3d11
namespace|namespace
name|gl_d3d11
block|{
DECL|function|ConvertBlendFunc
name|D3D11_BLEND
name|ConvertBlendFunc
parameter_list|(
name|GLenum
name|glBlend
parameter_list|,
name|bool
name|isAlpha
parameter_list|)
block|{
name|D3D11_BLEND
name|d3dBlend
init|=
name|D3D11_BLEND_ZERO
decl_stmt|;
switch|switch
condition|(
name|glBlend
condition|)
block|{
case|case
name|GL_ZERO
case|:
name|d3dBlend
operator|=
name|D3D11_BLEND_ZERO
expr_stmt|;
break|break;
case|case
name|GL_ONE
case|:
name|d3dBlend
operator|=
name|D3D11_BLEND_ONE
expr_stmt|;
break|break;
case|case
name|GL_SRC_COLOR
case|:
name|d3dBlend
operator|=
operator|(
name|isAlpha
condition|?
name|D3D11_BLEND_SRC_ALPHA
else|:
name|D3D11_BLEND_SRC_COLOR
operator|)
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_SRC_COLOR
case|:
name|d3dBlend
operator|=
operator|(
name|isAlpha
condition|?
name|D3D11_BLEND_INV_SRC_ALPHA
else|:
name|D3D11_BLEND_INV_SRC_COLOR
operator|)
expr_stmt|;
break|break;
case|case
name|GL_DST_COLOR
case|:
name|d3dBlend
operator|=
operator|(
name|isAlpha
condition|?
name|D3D11_BLEND_DEST_ALPHA
else|:
name|D3D11_BLEND_DEST_COLOR
operator|)
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_DST_COLOR
case|:
name|d3dBlend
operator|=
operator|(
name|isAlpha
condition|?
name|D3D11_BLEND_INV_DEST_ALPHA
else|:
name|D3D11_BLEND_INV_DEST_COLOR
operator|)
expr_stmt|;
break|break;
case|case
name|GL_SRC_ALPHA
case|:
name|d3dBlend
operator|=
name|D3D11_BLEND_SRC_ALPHA
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_SRC_ALPHA
case|:
name|d3dBlend
operator|=
name|D3D11_BLEND_INV_SRC_ALPHA
expr_stmt|;
break|break;
case|case
name|GL_DST_ALPHA
case|:
name|d3dBlend
operator|=
name|D3D11_BLEND_DEST_ALPHA
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_DST_ALPHA
case|:
name|d3dBlend
operator|=
name|D3D11_BLEND_INV_DEST_ALPHA
expr_stmt|;
break|break;
case|case
name|GL_CONSTANT_COLOR
case|:
name|d3dBlend
operator|=
name|D3D11_BLEND_BLEND_FACTOR
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_CONSTANT_COLOR
case|:
name|d3dBlend
operator|=
name|D3D11_BLEND_INV_BLEND_FACTOR
expr_stmt|;
break|break;
case|case
name|GL_CONSTANT_ALPHA
case|:
name|d3dBlend
operator|=
name|D3D11_BLEND_BLEND_FACTOR
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_CONSTANT_ALPHA
case|:
name|d3dBlend
operator|=
name|D3D11_BLEND_INV_BLEND_FACTOR
expr_stmt|;
break|break;
case|case
name|GL_SRC_ALPHA_SATURATE
case|:
name|d3dBlend
operator|=
name|D3D11_BLEND_SRC_ALPHA_SAT
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dBlend
return|;
block|}
DECL|function|ConvertBlendOp
name|D3D11_BLEND_OP
name|ConvertBlendOp
parameter_list|(
name|GLenum
name|glBlendOp
parameter_list|)
block|{
name|D3D11_BLEND_OP
name|d3dBlendOp
init|=
name|D3D11_BLEND_OP_ADD
decl_stmt|;
switch|switch
condition|(
name|glBlendOp
condition|)
block|{
case|case
name|GL_FUNC_ADD
case|:
name|d3dBlendOp
operator|=
name|D3D11_BLEND_OP_ADD
expr_stmt|;
break|break;
case|case
name|GL_FUNC_SUBTRACT
case|:
name|d3dBlendOp
operator|=
name|D3D11_BLEND_OP_SUBTRACT
expr_stmt|;
break|break;
case|case
name|GL_FUNC_REVERSE_SUBTRACT
case|:
name|d3dBlendOp
operator|=
name|D3D11_BLEND_OP_REV_SUBTRACT
expr_stmt|;
break|break;
case|case
name|GL_MIN
case|:
name|d3dBlendOp
operator|=
name|D3D11_BLEND_OP_MIN
expr_stmt|;
break|break;
case|case
name|GL_MAX
case|:
name|d3dBlendOp
operator|=
name|D3D11_BLEND_OP_MAX
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dBlendOp
return|;
block|}
DECL|function|ConvertColorMask
name|UINT8
name|ConvertColorMask
parameter_list|(
name|bool
name|red
parameter_list|,
name|bool
name|green
parameter_list|,
name|bool
name|blue
parameter_list|,
name|bool
name|alpha
parameter_list|)
block|{
name|UINT8
name|mask
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|red
condition|)
block|{
name|mask
operator||=
name|D3D11_COLOR_WRITE_ENABLE_RED
expr_stmt|;
block|}
if|if
condition|(
name|green
condition|)
block|{
name|mask
operator||=
name|D3D11_COLOR_WRITE_ENABLE_GREEN
expr_stmt|;
block|}
if|if
condition|(
name|blue
condition|)
block|{
name|mask
operator||=
name|D3D11_COLOR_WRITE_ENABLE_BLUE
expr_stmt|;
block|}
if|if
condition|(
name|alpha
condition|)
block|{
name|mask
operator||=
name|D3D11_COLOR_WRITE_ENABLE_ALPHA
expr_stmt|;
block|}
return|return
name|mask
return|;
block|}
DECL|function|ConvertCullMode
name|D3D11_CULL_MODE
name|ConvertCullMode
parameter_list|(
name|bool
name|cullEnabled
parameter_list|,
name|GLenum
name|cullMode
parameter_list|)
block|{
name|D3D11_CULL_MODE
name|cull
init|=
name|D3D11_CULL_NONE
decl_stmt|;
if|if
condition|(
name|cullEnabled
condition|)
block|{
switch|switch
condition|(
name|cullMode
condition|)
block|{
case|case
name|GL_FRONT
case|:
name|cull
operator|=
name|D3D11_CULL_FRONT
expr_stmt|;
break|break;
case|case
name|GL_BACK
case|:
name|cull
operator|=
name|D3D11_CULL_BACK
expr_stmt|;
break|break;
case|case
name|GL_FRONT_AND_BACK
case|:
name|cull
operator|=
name|D3D11_CULL_NONE
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|cull
operator|=
name|D3D11_CULL_NONE
expr_stmt|;
block|}
return|return
name|cull
return|;
block|}
DECL|function|ConvertComparison
name|D3D11_COMPARISON_FUNC
name|ConvertComparison
parameter_list|(
name|GLenum
name|comparison
parameter_list|)
block|{
name|D3D11_COMPARISON_FUNC
name|d3dComp
init|=
name|D3D11_COMPARISON_NEVER
decl_stmt|;
switch|switch
condition|(
name|comparison
condition|)
block|{
case|case
name|GL_NEVER
case|:
name|d3dComp
operator|=
name|D3D11_COMPARISON_NEVER
expr_stmt|;
break|break;
case|case
name|GL_ALWAYS
case|:
name|d3dComp
operator|=
name|D3D11_COMPARISON_ALWAYS
expr_stmt|;
break|break;
case|case
name|GL_LESS
case|:
name|d3dComp
operator|=
name|D3D11_COMPARISON_LESS
expr_stmt|;
break|break;
case|case
name|GL_LEQUAL
case|:
name|d3dComp
operator|=
name|D3D11_COMPARISON_LESS_EQUAL
expr_stmt|;
break|break;
case|case
name|GL_EQUAL
case|:
name|d3dComp
operator|=
name|D3D11_COMPARISON_EQUAL
expr_stmt|;
break|break;
case|case
name|GL_GREATER
case|:
name|d3dComp
operator|=
name|D3D11_COMPARISON_GREATER
expr_stmt|;
break|break;
case|case
name|GL_GEQUAL
case|:
name|d3dComp
operator|=
name|D3D11_COMPARISON_GREATER_EQUAL
expr_stmt|;
break|break;
case|case
name|GL_NOTEQUAL
case|:
name|d3dComp
operator|=
name|D3D11_COMPARISON_NOT_EQUAL
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dComp
return|;
block|}
DECL|function|ConvertDepthMask
name|D3D11_DEPTH_WRITE_MASK
name|ConvertDepthMask
parameter_list|(
name|bool
name|depthWriteEnabled
parameter_list|)
block|{
return|return
name|depthWriteEnabled
condition|?
name|D3D11_DEPTH_WRITE_MASK_ALL
else|:
name|D3D11_DEPTH_WRITE_MASK_ZERO
return|;
block|}
DECL|function|ConvertStencilMask
name|UINT8
name|ConvertStencilMask
parameter_list|(
name|GLuint
name|stencilmask
parameter_list|)
block|{
return|return
cast|static_cast
argument_list|<
name|UINT8
argument_list|>
argument_list|(
name|stencilmask
argument_list|)
return|;
block|}
DECL|function|ConvertStencilOp
name|D3D11_STENCIL_OP
name|ConvertStencilOp
parameter_list|(
name|GLenum
name|stencilOp
parameter_list|)
block|{
name|D3D11_STENCIL_OP
name|d3dStencilOp
init|=
name|D3D11_STENCIL_OP_KEEP
decl_stmt|;
switch|switch
condition|(
name|stencilOp
condition|)
block|{
case|case
name|GL_ZERO
case|:
name|d3dStencilOp
operator|=
name|D3D11_STENCIL_OP_ZERO
expr_stmt|;
break|break;
case|case
name|GL_KEEP
case|:
name|d3dStencilOp
operator|=
name|D3D11_STENCIL_OP_KEEP
expr_stmt|;
break|break;
case|case
name|GL_REPLACE
case|:
name|d3dStencilOp
operator|=
name|D3D11_STENCIL_OP_REPLACE
expr_stmt|;
break|break;
case|case
name|GL_INCR
case|:
name|d3dStencilOp
operator|=
name|D3D11_STENCIL_OP_INCR_SAT
expr_stmt|;
break|break;
case|case
name|GL_DECR
case|:
name|d3dStencilOp
operator|=
name|D3D11_STENCIL_OP_DECR_SAT
expr_stmt|;
break|break;
case|case
name|GL_INVERT
case|:
name|d3dStencilOp
operator|=
name|D3D11_STENCIL_OP_INVERT
expr_stmt|;
break|break;
case|case
name|GL_INCR_WRAP
case|:
name|d3dStencilOp
operator|=
name|D3D11_STENCIL_OP_INCR
expr_stmt|;
break|break;
case|case
name|GL_DECR_WRAP
case|:
name|d3dStencilOp
operator|=
name|D3D11_STENCIL_OP_DECR
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dStencilOp
return|;
block|}
DECL|function|ConvertFilter
name|D3D11_FILTER
name|ConvertFilter
parameter_list|(
name|GLenum
name|minFilter
parameter_list|,
name|GLenum
name|magFilter
parameter_list|,
name|float
name|maxAnisotropy
parameter_list|,
name|GLenum
name|comparisonMode
parameter_list|)
block|{
name|bool
name|comparison
init|=
name|comparisonMode
operator|!=
name|GL_NONE
decl_stmt|;
if|if
condition|(
name|maxAnisotropy
operator|>
literal|1.0f
condition|)
block|{
return|return
name|D3D11_ENCODE_ANISOTROPIC_FILTER
argument_list|(
cast|static_cast
argument_list|<
name|D3D11_COMPARISON_FUNC
argument_list|>
argument_list|(
name|comparison
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|D3D11_FILTER_TYPE
name|dxMin
init|=
name|D3D11_FILTER_TYPE_POINT
decl_stmt|;
name|D3D11_FILTER_TYPE
name|dxMip
init|=
name|D3D11_FILTER_TYPE_POINT
decl_stmt|;
switch|switch
condition|(
name|minFilter
condition|)
block|{
case|case
name|GL_NEAREST
case|:
name|dxMin
operator|=
name|D3D11_FILTER_TYPE_POINT
expr_stmt|;
name|dxMip
operator|=
name|D3D11_FILTER_TYPE_POINT
expr_stmt|;
break|break;
case|case
name|GL_LINEAR
case|:
name|dxMin
operator|=
name|D3D11_FILTER_TYPE_LINEAR
expr_stmt|;
name|dxMip
operator|=
name|D3D11_FILTER_TYPE_POINT
expr_stmt|;
break|break;
case|case
name|GL_NEAREST_MIPMAP_NEAREST
case|:
name|dxMin
operator|=
name|D3D11_FILTER_TYPE_POINT
expr_stmt|;
name|dxMip
operator|=
name|D3D11_FILTER_TYPE_POINT
expr_stmt|;
break|break;
case|case
name|GL_LINEAR_MIPMAP_NEAREST
case|:
name|dxMin
operator|=
name|D3D11_FILTER_TYPE_LINEAR
expr_stmt|;
name|dxMip
operator|=
name|D3D11_FILTER_TYPE_POINT
expr_stmt|;
break|break;
case|case
name|GL_NEAREST_MIPMAP_LINEAR
case|:
name|dxMin
operator|=
name|D3D11_FILTER_TYPE_POINT
expr_stmt|;
name|dxMip
operator|=
name|D3D11_FILTER_TYPE_LINEAR
expr_stmt|;
break|break;
case|case
name|GL_LINEAR_MIPMAP_LINEAR
case|:
name|dxMin
operator|=
name|D3D11_FILTER_TYPE_LINEAR
expr_stmt|;
name|dxMip
operator|=
name|D3D11_FILTER_TYPE_LINEAR
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
name|D3D11_FILTER_TYPE
name|dxMag
init|=
name|D3D11_FILTER_TYPE_POINT
decl_stmt|;
switch|switch
condition|(
name|magFilter
condition|)
block|{
case|case
name|GL_NEAREST
case|:
name|dxMag
operator|=
name|D3D11_FILTER_TYPE_POINT
expr_stmt|;
break|break;
case|case
name|GL_LINEAR
case|:
name|dxMag
operator|=
name|D3D11_FILTER_TYPE_LINEAR
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|D3D11_ENCODE_BASIC_FILTER
argument_list|(
name|dxMin
argument_list|,
name|dxMag
argument_list|,
name|dxMip
argument_list|,
cast|static_cast
argument_list|<
name|D3D11_COMPARISON_FUNC
argument_list|>
argument_list|(
name|comparison
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|function|ConvertTextureWrap
name|D3D11_TEXTURE_ADDRESS_MODE
name|ConvertTextureWrap
parameter_list|(
name|GLenum
name|wrap
parameter_list|)
block|{
switch|switch
condition|(
name|wrap
condition|)
block|{
case|case
name|GL_REPEAT
case|:
return|return
name|D3D11_TEXTURE_ADDRESS_WRAP
return|;
case|case
name|GL_CLAMP_TO_EDGE
case|:
return|return
name|D3D11_TEXTURE_ADDRESS_CLAMP
return|;
case|case
name|GL_MIRRORED_REPEAT
case|:
return|return
name|D3D11_TEXTURE_ADDRESS_MIRROR
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|D3D11_TEXTURE_ADDRESS_WRAP
return|;
block|}
DECL|function|ConvertQueryType
name|D3D11_QUERY
name|ConvertQueryType
parameter_list|(
name|GLenum
name|queryType
parameter_list|)
block|{
switch|switch
condition|(
name|queryType
condition|)
block|{
case|case
name|GL_ANY_SAMPLES_PASSED_EXT
case|:
case|case
name|GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT
case|:
return|return
name|D3D11_QUERY_OCCLUSION
return|;
case|case
name|GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
case|:
return|return
name|D3D11_QUERY_SO_STATISTICS
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|D3D11_QUERY_EVENT
return|;
block|}
block|}
block|}
DECL|namespace|d3d11_gl
namespace|namespace
name|d3d11_gl
block|{
DECL|function|GenerateTextureFormatCaps
specifier|static
name|gl
operator|::
name|TextureCaps
name|GenerateTextureFormatCaps
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
name|ID3D11Device
modifier|*
name|device
parameter_list|)
block|{
name|gl
operator|::
name|TextureCaps
name|textureCaps
decl_stmt|;
name|DXGI_FORMAT
name|textureFormat
init|=
name|gl_d3d11
operator|::
name|GetTexFormat
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
name|DXGI_FORMAT
name|srvFormat
init|=
name|gl_d3d11
operator|::
name|GetSRVFormat
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
name|DXGI_FORMAT
name|rtvFormat
init|=
name|gl_d3d11
operator|::
name|GetRTVFormat
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
name|DXGI_FORMAT
name|dsvFormat
init|=
name|gl_d3d11
operator|::
name|GetDSVFormat
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
name|DXGI_FORMAT
name|renderFormat
init|=
name|gl_d3d11
operator|::
name|GetRenderableFormat
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
name|UINT
name|formatSupport
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|device
operator|->
name|CheckFormatSupport
argument_list|(
name|textureFormat
argument_list|,
operator|&
name|formatSupport
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|gl
operator|::
name|GetDepthBits
argument_list|(
name|internalFormat
argument_list|)
operator|>
literal|0
operator|||
name|gl
operator|::
name|GetStencilBits
argument_list|(
name|internalFormat
argument_list|)
operator|>
literal|0
condition|)
block|{
name|textureCaps
operator|.
name|texturable
operator|=
operator|(
operator|(
name|formatSupport
operator|&
name|D3D11_FORMAT_SUPPORT_TEXTURE2D
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
block|}
else|else
block|{
name|textureCaps
operator|.
name|texturable
operator|=
operator|(
operator|(
name|formatSupport
operator|&
name|D3D11_FORMAT_SUPPORT_TEXTURE2D
operator|)
operator|!=
literal|0
operator|)
operator|&&
operator|(
operator|(
name|formatSupport
operator|&
name|D3D11_FORMAT_SUPPORT_TEXTURECUBE
operator|)
operator|!=
literal|0
operator|)
operator|&&
operator|(
operator|(
name|formatSupport
operator|&
name|D3D11_FORMAT_SUPPORT_TEXTURE3D
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|device
operator|->
name|CheckFormatSupport
argument_list|(
name|renderFormat
argument_list|,
operator|&
name|formatSupport
argument_list|)
argument_list|)
operator|&&
operator|(
operator|(
name|formatSupport
operator|&
name|D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET
operator|)
operator|!=
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|size_t
name|sampleCount
init|=
literal|1
init|;
name|sampleCount
operator|<=
name|D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT
condition|;
name|sampleCount
operator|++
control|)
block|{
name|UINT
name|qualityCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|device
operator|->
name|CheckMultisampleQualityLevels
argument_list|(
name|renderFormat
argument_list|,
name|sampleCount
argument_list|,
operator|&
name|qualityCount
argument_list|)
argument_list|)
operator|&&
name|qualityCount
operator|>
literal|0
condition|)
block|{
name|textureCaps
operator|.
name|sampleCounts
operator|.
name|insert
argument_list|(
name|sampleCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|textureCaps
operator|.
name|filterable
operator|=
name|SUCCEEDED
argument_list|(
name|device
operator|->
name|CheckFormatSupport
argument_list|(
name|srvFormat
argument_list|,
operator|&
name|formatSupport
argument_list|)
argument_list|)
operator|&&
operator|(
operator|(
name|formatSupport
operator|&
name|D3D11_FORMAT_SUPPORT_SHADER_SAMPLE
operator|)
operator|)
operator|!=
literal|0
expr_stmt|;
name|textureCaps
operator|.
name|renderable
operator|=
operator|(
name|SUCCEEDED
argument_list|(
name|device
operator|->
name|CheckFormatSupport
argument_list|(
name|rtvFormat
argument_list|,
operator|&
name|formatSupport
argument_list|)
argument_list|)
operator|&&
operator|(
operator|(
name|formatSupport
operator|&
name|D3D11_FORMAT_SUPPORT_RENDER_TARGET
operator|)
operator|)
operator|!=
literal|0
operator|)
operator|||
operator|(
name|SUCCEEDED
argument_list|(
name|device
operator|->
name|CheckFormatSupport
argument_list|(
name|dsvFormat
argument_list|,
operator|&
name|formatSupport
argument_list|)
argument_list|)
operator|&&
operator|(
operator|(
name|formatSupport
operator|&
name|D3D11_FORMAT_SUPPORT_DEPTH_STENCIL
operator|)
operator|!=
literal|0
operator|)
operator|)
expr_stmt|;
return|return
name|textureCaps
return|;
block|}
DECL|function|GetNPOTTextureSupport
specifier|static
name|bool
name|GetNPOTTextureSupport
parameter_list|(
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
block|{
switch|switch
condition|(
name|featureLevel
condition|)
block|{
case|case
name|D3D_FEATURE_LEVEL_11_1
case|:
case|case
name|D3D_FEATURE_LEVEL_11_0
case|:
case|case
name|D3D_FEATURE_LEVEL_10_1
case|:
case|case
name|D3D_FEATURE_LEVEL_10_0
case|:
return|return
literal|true
return|;
comment|// From http://msdn.microsoft.com/en-us/library/windows/desktop/ff476876.aspx
case|case
name|D3D_FEATURE_LEVEL_9_3
case|:
case|case
name|D3D_FEATURE_LEVEL_9_2
case|:
case|case
name|D3D_FEATURE_LEVEL_9_1
case|:
return|return
literal|false
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|GetMaximumAnisotropy
specifier|static
name|float
name|GetMaximumAnisotropy
parameter_list|(
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
block|{
switch|switch
condition|(
name|featureLevel
condition|)
block|{
case|case
name|D3D_FEATURE_LEVEL_11_1
case|:
case|case
name|D3D_FEATURE_LEVEL_11_0
case|:
return|return
name|D3D11_MAX_MAXANISOTROPY
return|;
case|case
name|D3D_FEATURE_LEVEL_10_1
case|:
case|case
name|D3D_FEATURE_LEVEL_10_0
case|:
return|return
name|D3D10_MAX_MAXANISOTROPY
return|;
comment|// From http://msdn.microsoft.com/en-us/library/windows/desktop/ff476876.aspx
case|case
name|D3D_FEATURE_LEVEL_9_3
case|:
case|case
name|D3D_FEATURE_LEVEL_9_2
case|:
return|return
literal|16
return|;
case|case
name|D3D_FEATURE_LEVEL_9_1
case|:
return|return
name|D3D_FL9_1_DEFAULT_MAX_ANISOTROPY
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetOcclusionQuerySupport
specifier|static
name|bool
name|GetOcclusionQuerySupport
parameter_list|(
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
block|{
switch|switch
condition|(
name|featureLevel
condition|)
block|{
case|case
name|D3D_FEATURE_LEVEL_11_1
case|:
case|case
name|D3D_FEATURE_LEVEL_11_0
case|:
case|case
name|D3D_FEATURE_LEVEL_10_1
case|:
case|case
name|D3D_FEATURE_LEVEL_10_0
case|:
return|return
literal|true
return|;
comment|// From http://msdn.microsoft.com/en-us/library/windows/desktop/ff476150.aspx ID3D11Device::CreateQuery
case|case
name|D3D_FEATURE_LEVEL_9_3
case|:
case|case
name|D3D_FEATURE_LEVEL_9_2
case|:
return|return
literal|true
return|;
case|case
name|D3D_FEATURE_LEVEL_9_1
case|:
return|return
literal|false
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|GetEventQuerySupport
specifier|static
name|bool
name|GetEventQuerySupport
parameter_list|(
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
block|{
comment|// From http://msdn.microsoft.com/en-us/library/windows/desktop/ff476150.aspx ID3D11Device::CreateQuery
switch|switch
condition|(
name|featureLevel
condition|)
block|{
case|case
name|D3D_FEATURE_LEVEL_11_1
case|:
case|case
name|D3D_FEATURE_LEVEL_11_0
case|:
case|case
name|D3D_FEATURE_LEVEL_10_1
case|:
case|case
name|D3D_FEATURE_LEVEL_10_0
case|:
case|case
name|D3D_FEATURE_LEVEL_9_3
case|:
case|case
name|D3D_FEATURE_LEVEL_9_2
case|:
case|case
name|D3D_FEATURE_LEVEL_9_1
case|:
return|return
literal|true
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|GetInstancingSupport
specifier|static
name|bool
name|GetInstancingSupport
parameter_list|(
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
block|{
comment|// From http://msdn.microsoft.com/en-us/library/windows/desktop/ff476150.aspx ID3D11Device::CreateInputLayout
switch|switch
condition|(
name|featureLevel
condition|)
block|{
case|case
name|D3D_FEATURE_LEVEL_11_1
case|:
case|case
name|D3D_FEATURE_LEVEL_11_0
case|:
case|case
name|D3D_FEATURE_LEVEL_10_1
case|:
case|case
name|D3D_FEATURE_LEVEL_10_0
case|:
case|case
name|D3D_FEATURE_LEVEL_9_3
case|:
return|return
literal|true
return|;
case|case
name|D3D_FEATURE_LEVEL_9_2
case|:
case|case
name|D3D_FEATURE_LEVEL_9_1
case|:
return|return
literal|false
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|GetDerivativeInstructionSupport
specifier|static
name|bool
name|GetDerivativeInstructionSupport
parameter_list|(
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
block|{
comment|// http://msdn.microsoft.com/en-us/library/windows/desktop/bb509588.aspx states that shader model
comment|// ps_2_x is required for the ddx (and other derivative functions).
comment|// http://msdn.microsoft.com/en-us/library/windows/desktop/ff476876.aspx states that feature level
comment|// 9.3 supports shader model ps_2_x.
switch|switch
condition|(
name|featureLevel
condition|)
block|{
case|case
name|D3D_FEATURE_LEVEL_11_1
case|:
case|case
name|D3D_FEATURE_LEVEL_11_0
case|:
case|case
name|D3D_FEATURE_LEVEL_10_1
case|:
case|case
name|D3D_FEATURE_LEVEL_10_0
case|:
case|case
name|D3D_FEATURE_LEVEL_9_3
case|:
return|return
literal|true
return|;
case|case
name|D3D_FEATURE_LEVEL_9_2
case|:
case|case
name|D3D_FEATURE_LEVEL_9_1
case|:
return|return
literal|false
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|GetMaximumSimultaneousRenderTargets
specifier|static
name|size_t
name|GetMaximumSimultaneousRenderTargets
parameter_list|(
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
block|{
comment|// From http://msdn.microsoft.com/en-us/library/windows/desktop/ff476150.aspx ID3D11Device::CreateInputLayout
switch|switch
condition|(
name|featureLevel
condition|)
block|{
case|case
name|D3D_FEATURE_LEVEL_11_1
case|:
case|case
name|D3D_FEATURE_LEVEL_11_0
case|:
return|return
name|D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT
return|;
comment|// FIXME(geofflang): Work around NVIDIA driver bug by repacking buffers
case|case
name|D3D_FEATURE_LEVEL_10_1
case|:
case|case
name|D3D_FEATURE_LEVEL_10_0
case|:
return|return
literal|1
return|;
comment|/* D3D10_SIMULTANEOUS_RENDER_TARGET_COUNT; */
case|case
name|D3D_FEATURE_LEVEL_9_3
case|:
return|return
name|D3D_FL9_3_SIMULTANEOUS_RENDER_TARGET_COUNT
return|;
case|case
name|D3D_FEATURE_LEVEL_9_2
case|:
case|case
name|D3D_FEATURE_LEVEL_9_1
case|:
return|return
name|D3D_FL9_1_SIMULTANEOUS_RENDER_TARGET_COUNT
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetMaximum2DTextureSize
specifier|static
name|size_t
name|GetMaximum2DTextureSize
parameter_list|(
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
block|{
switch|switch
condition|(
name|featureLevel
condition|)
block|{
case|case
name|D3D_FEATURE_LEVEL_11_1
case|:
case|case
name|D3D_FEATURE_LEVEL_11_0
case|:
return|return
name|D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION
return|;
case|case
name|D3D_FEATURE_LEVEL_10_1
case|:
case|case
name|D3D_FEATURE_LEVEL_10_0
case|:
return|return
name|D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION
return|;
case|case
name|D3D_FEATURE_LEVEL_9_3
case|:
return|return
name|D3D_FL9_3_REQ_TEXTURE2D_U_OR_V_DIMENSION
return|;
case|case
name|D3D_FEATURE_LEVEL_9_2
case|:
case|case
name|D3D_FEATURE_LEVEL_9_1
case|:
return|return
name|D3D_FL9_1_REQ_TEXTURE2D_U_OR_V_DIMENSION
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetMaximumCubeMapTextureSize
specifier|static
name|size_t
name|GetMaximumCubeMapTextureSize
parameter_list|(
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
block|{
switch|switch
condition|(
name|featureLevel
condition|)
block|{
case|case
name|D3D_FEATURE_LEVEL_11_1
case|:
case|case
name|D3D_FEATURE_LEVEL_11_0
case|:
return|return
name|D3D11_REQ_TEXTURECUBE_DIMENSION
return|;
case|case
name|D3D_FEATURE_LEVEL_10_1
case|:
case|case
name|D3D_FEATURE_LEVEL_10_0
case|:
return|return
name|D3D10_REQ_TEXTURECUBE_DIMENSION
return|;
case|case
name|D3D_FEATURE_LEVEL_9_3
case|:
return|return
name|D3D_FL9_3_REQ_TEXTURECUBE_DIMENSION
return|;
case|case
name|D3D_FEATURE_LEVEL_9_2
case|:
case|case
name|D3D_FEATURE_LEVEL_9_1
case|:
return|return
name|D3D_FL9_1_REQ_TEXTURECUBE_DIMENSION
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetMaximum2DTextureArraySize
specifier|static
name|size_t
name|GetMaximum2DTextureArraySize
parameter_list|(
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
block|{
switch|switch
condition|(
name|featureLevel
condition|)
block|{
case|case
name|D3D_FEATURE_LEVEL_11_1
case|:
case|case
name|D3D_FEATURE_LEVEL_11_0
case|:
return|return
name|D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION
return|;
case|case
name|D3D_FEATURE_LEVEL_10_1
case|:
case|case
name|D3D_FEATURE_LEVEL_10_0
case|:
return|return
name|D3D10_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION
return|;
case|case
name|D3D_FEATURE_LEVEL_9_3
case|:
case|case
name|D3D_FEATURE_LEVEL_9_2
case|:
case|case
name|D3D_FEATURE_LEVEL_9_1
case|:
return|return
literal|0
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetMaximum3DTextureSize
specifier|static
name|size_t
name|GetMaximum3DTextureSize
parameter_list|(
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
block|{
switch|switch
condition|(
name|featureLevel
condition|)
block|{
case|case
name|D3D_FEATURE_LEVEL_11_1
case|:
case|case
name|D3D_FEATURE_LEVEL_11_0
case|:
return|return
name|D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION
return|;
case|case
name|D3D_FEATURE_LEVEL_10_1
case|:
case|case
name|D3D_FEATURE_LEVEL_10_0
case|:
return|return
name|D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION
return|;
case|case
name|D3D_FEATURE_LEVEL_9_3
case|:
case|case
name|D3D_FEATURE_LEVEL_9_2
case|:
case|case
name|D3D_FEATURE_LEVEL_9_1
case|:
return|return
name|D3D_FL9_1_REQ_TEXTURE3D_U_V_OR_W_DIMENSION
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetMaximumViewportSize
specifier|static
name|size_t
name|GetMaximumViewportSize
parameter_list|(
name|D3D_FEATURE_LEVEL
name|featureLevel
parameter_list|)
block|{
switch|switch
condition|(
name|featureLevel
condition|)
block|{
case|case
name|D3D_FEATURE_LEVEL_11_1
case|:
case|case
name|D3D_FEATURE_LEVEL_11_0
case|:
return|return
name|D3D11_VIEWPORT_BOUNDS_MAX
return|;
case|case
name|D3D_FEATURE_LEVEL_10_1
case|:
case|case
name|D3D_FEATURE_LEVEL_10_0
case|:
return|return
name|D3D10_VIEWPORT_BOUNDS_MAX
return|;
comment|// No constants for D3D9 viewport size limits, use the maximum texture sizes
case|case
name|D3D_FEATURE_LEVEL_9_3
case|:
return|return
name|D3D_FL9_3_REQ_TEXTURE2D_U_OR_V_DIMENSION
return|;
case|case
name|D3D_FEATURE_LEVEL_9_2
case|:
case|case
name|D3D_FEATURE_LEVEL_9_1
case|:
return|return
name|D3D_FL9_1_REQ_TEXTURE2D_U_OR_V_DIMENSION
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GenerateCaps
name|void
name|GenerateCaps
parameter_list|(
name|ID3D11Device
modifier|*
name|device
parameter_list|,
name|gl
operator|::
name|Caps
modifier|*
name|caps
parameter_list|,
name|gl
operator|::
name|TextureCapsMap
modifier|*
name|textureCapsMap
parameter_list|,
name|gl
operator|::
name|Extensions
modifier|*
name|extensions
parameter_list|)
block|{
specifier|const
name|gl
operator|::
name|FormatSet
modifier|&
name|allFormats
init|=
name|gl
operator|::
name|GetAllSizedInternalFormats
argument_list|()
decl_stmt|;
for|for
control|(
name|gl
operator|::
name|FormatSet
operator|::
name|const_iterator
name|internalFormat
init|=
name|allFormats
operator|.
name|begin
argument_list|()
init|;
name|internalFormat
operator|!=
name|allFormats
operator|.
name|end
argument_list|()
condition|;
operator|++
name|internalFormat
control|)
block|{
name|gl
operator|::
name|TextureCaps
name|textureCaps
init|=
name|GenerateTextureFormatCaps
argument_list|(
operator|*
name|internalFormat
argument_list|,
name|device
argument_list|)
decl_stmt|;
name|textureCapsMap
operator|->
name|insert
argument_list|(
operator|*
name|internalFormat
argument_list|,
name|textureCaps
argument_list|)
expr_stmt|;
block|}
name|D3D_FEATURE_LEVEL
name|featureLevel
init|=
name|device
operator|->
name|GetFeatureLevel
argument_list|()
decl_stmt|;
comment|// GL core feature limits
name|caps
operator|->
name|maxElementIndex
operator|=
expr|static_cast
operator|<
name|GLint64
operator|>
operator|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|unsigned
name|int
argument_list|>
operator|::
name|max
argument_list|()
operator|)
expr_stmt|;
name|caps
operator|->
name|max3DTextureSize
operator|=
name|GetMaximum3DTextureSize
argument_list|(
name|featureLevel
argument_list|)
expr_stmt|;
name|caps
operator|->
name|max2DTextureSize
operator|=
name|GetMaximum2DTextureSize
argument_list|(
name|featureLevel
argument_list|)
expr_stmt|;
name|caps
operator|->
name|maxCubeMapTextureSize
operator|=
name|GetMaximumCubeMapTextureSize
argument_list|(
name|featureLevel
argument_list|)
expr_stmt|;
name|caps
operator|->
name|maxArrayTextureLayers
operator|=
name|GetMaximum2DTextureArraySize
argument_list|(
name|featureLevel
argument_list|)
expr_stmt|;
comment|// Unimplemented, set to minimum required
name|caps
operator|->
name|maxLODBias
operator|=
literal|2.0f
expr_stmt|;
comment|// No specific limits on render target size, maximum 2D texture size is equivalent
name|caps
operator|->
name|maxRenderbufferSize
operator|=
name|caps
operator|->
name|max2DTextureSize
expr_stmt|;
comment|// Maximum draw buffers and color attachments are the same, max color attachments could eventually be
comment|// increased to 16
name|caps
operator|->
name|maxDrawBuffers
operator|=
name|GetMaximumSimultaneousRenderTargets
argument_list|(
name|featureLevel
argument_list|)
expr_stmt|;
name|caps
operator|->
name|maxColorAttachments
operator|=
name|GetMaximumSimultaneousRenderTargets
argument_list|(
name|featureLevel
argument_list|)
expr_stmt|;
comment|// D3D11 has the same limit for viewport width and height
name|caps
operator|->
name|maxViewportWidth
operator|=
name|GetMaximumViewportSize
argument_list|(
name|featureLevel
argument_list|)
expr_stmt|;
name|caps
operator|->
name|maxViewportHeight
operator|=
name|caps
operator|->
name|maxViewportWidth
expr_stmt|;
comment|// Choose a reasonable maximum, enforced in the shader.
name|caps
operator|->
name|minAliasedPointSize
operator|=
literal|1.0f
expr_stmt|;
name|caps
operator|->
name|maxAliasedPointSize
operator|=
literal|1024.0f
expr_stmt|;
comment|// Wide lines not supported
name|caps
operator|->
name|minAliasedLineWidth
operator|=
literal|1.0f
expr_stmt|;
name|caps
operator|->
name|maxAliasedLineWidth
operator|=
literal|1.0f
expr_stmt|;
comment|// GL extension support
name|extensions
operator|->
name|setTextureExtensionSupport
argument_list|(
operator|*
name|textureCapsMap
argument_list|)
expr_stmt|;
name|extensions
operator|->
name|elementIndexUint
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|packedDepthStencil
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|getProgramBinary
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|rgb8rgba8
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|readFormatBGRA
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|pixelBufferObject
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|mapBuffer
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|mapBufferRange
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|textureNPOT
operator|=
name|GetNPOTTextureSupport
argument_list|(
name|featureLevel
argument_list|)
expr_stmt|;
name|extensions
operator|->
name|drawBuffers
operator|=
name|GetMaximumSimultaneousRenderTargets
argument_list|(
name|featureLevel
argument_list|)
operator|>
literal|1
expr_stmt|;
name|extensions
operator|->
name|textureStorage
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|textureFilterAnisotropic
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|maxTextureAnisotropy
operator|=
name|GetMaximumAnisotropy
argument_list|(
name|featureLevel
argument_list|)
expr_stmt|;
name|extensions
operator|->
name|occlusionQueryBoolean
operator|=
name|GetOcclusionQuerySupport
argument_list|(
name|featureLevel
argument_list|)
expr_stmt|;
name|extensions
operator|->
name|fence
operator|=
name|GetEventQuerySupport
argument_list|(
name|featureLevel
argument_list|)
expr_stmt|;
name|extensions
operator|->
name|timerQuery
operator|=
literal|false
expr_stmt|;
comment|// Unimplemented
name|extensions
operator|->
name|robustness
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|blendMinMax
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|framebufferBlit
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|framebufferMultisample
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|instancedArrays
operator|=
name|GetInstancingSupport
argument_list|(
name|featureLevel
argument_list|)
expr_stmt|;
name|extensions
operator|->
name|packReverseRowOrder
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|standardDerivatives
operator|=
name|GetDerivativeInstructionSupport
argument_list|(
name|featureLevel
argument_list|)
expr_stmt|;
name|extensions
operator|->
name|shaderTextureLOD
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|fragDepth
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|textureUsage
operator|=
literal|true
expr_stmt|;
comment|// This could be false since it has no effect in D3D11
name|extensions
operator|->
name|translatedShaderSource
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|namespace|d3d11
namespace|namespace
name|d3d11
block|{
DECL|function|GenerateInitialTextureData
name|void
name|GenerateInitialTextureData
parameter_list|(
name|GLint
name|internalFormat
parameter_list|,
name|GLuint
name|width
parameter_list|,
name|GLuint
name|height
parameter_list|,
name|GLuint
name|depth
parameter_list|,
name|GLuint
name|mipLevels
parameter_list|,
name|std
operator|::
name|vector
argument_list|<
name|D3D11_SUBRESOURCE_DATA
argument_list|>
modifier|*
name|outSubresourceData
parameter_list|,
name|std
operator|::
name|vector
argument_list|<
name|std
operator|::
name|vector
argument_list|<
name|BYTE
argument_list|>
argument_list|>
modifier|*
name|outData
parameter_list|)
block|{
name|InitializeTextureDataFunction
name|initializeFunc
init|=
name|gl_d3d11
operator|::
name|GetTextureDataInitializationFunction
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
name|DXGI_FORMAT
name|dxgiFormat
init|=
name|gl_d3d11
operator|::
name|GetTexFormat
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
name|outSubresourceData
operator|->
name|resize
argument_list|(
name|mipLevels
argument_list|)
expr_stmt|;
name|outData
operator|->
name|resize
argument_list|(
name|mipLevels
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mipLevels
condition|;
name|i
operator|++
control|)
block|{
name|unsigned
name|int
name|mipWidth
init|=
name|std
operator|::
name|max
argument_list|(
name|width
operator|>>
name|i
argument_list|,
literal|1U
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|mipHeight
init|=
name|std
operator|::
name|max
argument_list|(
name|height
operator|>>
name|i
argument_list|,
literal|1U
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|mipDepth
init|=
name|std
operator|::
name|max
argument_list|(
name|depth
operator|>>
name|i
argument_list|,
literal|1U
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|rowWidth
init|=
name|d3d11
operator|::
name|GetFormatPixelBytes
argument_list|(
name|dxgiFormat
argument_list|)
operator|*
name|mipWidth
decl_stmt|;
name|unsigned
name|int
name|imageSize
init|=
name|rowWidth
operator|*
name|height
decl_stmt|;
name|outData
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|resize
argument_list|(
name|rowWidth
operator|*
name|mipHeight
operator|*
name|mipDepth
argument_list|)
expr_stmt|;
name|initializeFunc
argument_list|(
name|mipWidth
argument_list|,
name|mipHeight
argument_list|,
name|mipDepth
argument_list|,
name|outData
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
name|rowWidth
argument_list|,
name|imageSize
argument_list|)
expr_stmt|;
name|outSubresourceData
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|pSysMem
operator|=
name|outData
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|data
argument_list|()
expr_stmt|;
name|outSubresourceData
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|SysMemPitch
operator|=
name|rowWidth
expr_stmt|;
name|outSubresourceData
operator|->
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|SysMemSlicePitch
operator|=
name|imageSize
expr_stmt|;
block|}
block|}
DECL|function|SetPositionTexCoordVertex
name|void
name|SetPositionTexCoordVertex
parameter_list|(
name|PositionTexCoordVertex
modifier|*
name|vertex
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|float
name|u
parameter_list|,
name|float
name|v
parameter_list|)
block|{
name|vertex
operator|->
name|x
operator|=
name|x
expr_stmt|;
name|vertex
operator|->
name|y
operator|=
name|y
expr_stmt|;
name|vertex
operator|->
name|u
operator|=
name|u
expr_stmt|;
name|vertex
operator|->
name|v
operator|=
name|v
expr_stmt|;
block|}
DECL|function|SetPositionLayerTexCoord3DVertex
name|void
name|SetPositionLayerTexCoord3DVertex
parameter_list|(
name|PositionLayerTexCoord3DVertex
modifier|*
name|vertex
parameter_list|,
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|,
name|unsigned
name|int
name|layer
parameter_list|,
name|float
name|u
parameter_list|,
name|float
name|v
parameter_list|,
name|float
name|s
parameter_list|)
block|{
name|vertex
operator|->
name|x
operator|=
name|x
expr_stmt|;
name|vertex
operator|->
name|y
operator|=
name|y
expr_stmt|;
name|vertex
operator|->
name|l
operator|=
name|layer
expr_stmt|;
name|vertex
operator|->
name|u
operator|=
name|u
expr_stmt|;
name|vertex
operator|->
name|v
operator|=
name|v
expr_stmt|;
name|vertex
operator|->
name|s
operator|=
name|s
expr_stmt|;
block|}
DECL|function|SetDebugName
name|HRESULT
name|SetDebugName
parameter_list|(
name|ID3D11DeviceChild
modifier|*
name|resource
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|_DEBUG
argument_list|)
return|return
name|resource
operator|->
name|SetPrivateData
argument_list|(
name|WKPDID_D3DDebugObjectName
argument_list|,
name|strlen
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|)
return|;
else|#
directive|else
return|return
name|S_OK
return|;
endif|#
directive|endif
block|}
block|}
block|}
end_namespace
end_unit
