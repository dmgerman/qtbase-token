begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Image11.h: Implements the rx::Image11 class, which acts as the interface to
end_comment
begin_comment
comment|// the actual underlying resources of a Texture
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/Image11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/TextureStorage11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/formatutils11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d11/renderer11_utils.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|Image11
name|Image11
operator|::
name|Image11
parameter_list|()
block|{
name|mStagingTexture
operator|=
name|NULL
expr_stmt|;
name|mRenderer
operator|=
name|NULL
expr_stmt|;
name|mDXGIFormat
operator|=
name|DXGI_FORMAT_UNKNOWN
expr_stmt|;
block|}
DECL|function|~Image11
name|Image11
operator|::
name|~
name|Image11
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mStagingTexture
argument_list|)
expr_stmt|;
block|}
DECL|function|makeImage11
name|Image11
modifier|*
name|Image11
operator|::
name|makeImage11
parameter_list|(
name|Image
modifier|*
name|img
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|rx
operator|::
name|Image11
operator|*
argument_list|,
name|img
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|rx
operator|::
name|Image11
operator|*
argument_list|>
argument_list|(
name|img
argument_list|)
return|;
block|}
DECL|function|generateMipmap
name|void
name|Image11
operator|::
name|generateMipmap
parameter_list|(
name|Image11
modifier|*
name|dest
parameter_list|,
name|Image11
modifier|*
name|src
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|src
operator|->
name|getDXGIFormat
argument_list|()
operator|==
name|dest
operator|->
name|getDXGIFormat
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|src
operator|->
name|getWidth
argument_list|()
operator|==
literal|1
operator|||
name|src
operator|->
name|getWidth
argument_list|()
operator|/
literal|2
operator|==
name|dest
operator|->
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|src
operator|->
name|getHeight
argument_list|()
operator|==
literal|1
operator|||
name|src
operator|->
name|getHeight
argument_list|()
operator|/
literal|2
operator|==
name|dest
operator|->
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|MipGenerationFunction
name|mipFunction
init|=
name|d3d11
operator|::
name|GetMipGenerationFunction
argument_list|(
name|src
operator|->
name|getDXGIFormat
argument_list|()
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|mipFunction
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|destMapped
decl_stmt|;
name|HRESULT
name|destMapResult
init|=
name|dest
operator|->
name|map
argument_list|(
name|D3D11_MAP_WRITE
argument_list|,
operator|&
name|destMapped
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|destMapResult
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to map destination image for mip map generation. HRESULT:0x%X"
argument_list|,
name|destMapResult
argument_list|)
expr_stmt|;
return|return;
block|}
name|D3D11_MAPPED_SUBRESOURCE
name|srcMapped
decl_stmt|;
name|HRESULT
name|srcMapResult
init|=
name|src
operator|->
name|map
argument_list|(
name|D3D11_MAP_READ
argument_list|,
operator|&
name|srcMapped
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|srcMapResult
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to map source image for mip map generation. HRESULT:0x%X"
argument_list|,
name|srcMapResult
argument_list|)
expr_stmt|;
name|dest
operator|->
name|unmap
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|const
name|uint8_t
modifier|*
name|sourceData
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|srcMapped
operator|.
name|pData
argument_list|)
decl_stmt|;
name|uint8_t
modifier|*
name|destData
init|=
cast|reinterpret_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|destMapped
operator|.
name|pData
argument_list|)
decl_stmt|;
name|mipFunction
argument_list|(
name|src
operator|->
name|getWidth
argument_list|()
argument_list|,
name|src
operator|->
name|getHeight
argument_list|()
argument_list|,
name|src
operator|->
name|getDepth
argument_list|()
argument_list|,
name|sourceData
argument_list|,
name|srcMapped
operator|.
name|RowPitch
argument_list|,
name|srcMapped
operator|.
name|DepthPitch
argument_list|,
name|destData
argument_list|,
name|destMapped
operator|.
name|RowPitch
argument_list|,
name|destMapped
operator|.
name|DepthPitch
argument_list|)
expr_stmt|;
name|dest
operator|->
name|unmap
argument_list|()
expr_stmt|;
name|src
operator|->
name|unmap
argument_list|()
expr_stmt|;
name|dest
operator|->
name|markDirty
argument_list|()
expr_stmt|;
block|}
DECL|function|isDirty
name|bool
name|Image11
operator|::
name|isDirty
parameter_list|()
specifier|const
block|{
comment|// Make sure that this image is marked as dirty even if the staging texture hasn't been created yet
comment|// if initialization is required before use.
return|return
operator|(
name|mDirty
operator|&&
operator|(
name|mStagingTexture
operator|||
name|gl_d3d11
operator|::
name|RequiresTextureDataInitialization
argument_list|(
name|mInternalFormat
argument_list|)
operator|)
operator|)
return|;
block|}
DECL|function|copyToStorage
name|bool
name|Image11
operator|::
name|copyToStorage
parameter_list|(
name|TextureStorageInterface2D
modifier|*
name|storage
parameter_list|,
name|int
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|TextureStorage11_2D
modifier|*
name|storage11
init|=
name|TextureStorage11_2D
operator|::
name|makeTextureStorage11_2D
argument_list|(
name|storage
operator|->
name|getStorageInstance
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|storage11
operator|->
name|updateSubresourceLevel
argument_list|(
name|getStagingTexture
argument_list|()
argument_list|,
name|getStagingSubresource
argument_list|()
argument_list|,
name|level
argument_list|,
literal|0
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|function|copyToStorage
name|bool
name|Image11
operator|::
name|copyToStorage
parameter_list|(
name|TextureStorageInterfaceCube
modifier|*
name|storage
parameter_list|,
name|int
name|face
parameter_list|,
name|int
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|TextureStorage11_Cube
modifier|*
name|storage11
init|=
name|TextureStorage11_Cube
operator|::
name|makeTextureStorage11_Cube
argument_list|(
name|storage
operator|->
name|getStorageInstance
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|storage11
operator|->
name|updateSubresourceLevel
argument_list|(
name|getStagingTexture
argument_list|()
argument_list|,
name|getStagingSubresource
argument_list|()
argument_list|,
name|level
argument_list|,
name|face
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|function|copyToStorage
name|bool
name|Image11
operator|::
name|copyToStorage
parameter_list|(
name|TextureStorageInterface3D
modifier|*
name|storage
parameter_list|,
name|int
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
block|{
name|TextureStorage11_3D
modifier|*
name|storage11
init|=
name|TextureStorage11_3D
operator|::
name|makeTextureStorage11_3D
argument_list|(
name|storage
operator|->
name|getStorageInstance
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|storage11
operator|->
name|updateSubresourceLevel
argument_list|(
name|getStagingTexture
argument_list|()
argument_list|,
name|getStagingSubresource
argument_list|()
argument_list|,
name|level
argument_list|,
literal|0
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
return|;
block|}
DECL|function|copyToStorage
name|bool
name|Image11
operator|::
name|copyToStorage
parameter_list|(
name|TextureStorageInterface2DArray
modifier|*
name|storage
parameter_list|,
name|int
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|arrayLayer
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|TextureStorage11_2DArray
modifier|*
name|storage11
init|=
name|TextureStorage11_2DArray
operator|::
name|makeTextureStorage11_2DArray
argument_list|(
name|storage
operator|->
name|getStorageInstance
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|storage11
operator|->
name|updateSubresourceLevel
argument_list|(
name|getStagingTexture
argument_list|()
argument_list|,
name|getStagingSubresource
argument_list|()
argument_list|,
name|level
argument_list|,
name|arrayLayer
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|function|redefine
name|bool
name|Image11
operator|::
name|redefine
parameter_list|(
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|bool
name|forceRelease
parameter_list|)
block|{
if|if
condition|(
name|mWidth
operator|!=
name|width
operator|||
name|mHeight
operator|!=
name|height
operator|||
name|mInternalFormat
operator|!=
name|internalformat
operator|||
name|forceRelease
condition|)
block|{
name|mRenderer
operator|=
name|Renderer11
operator|::
name|makeRenderer11
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
name|mWidth
operator|=
name|width
expr_stmt|;
name|mHeight
operator|=
name|height
expr_stmt|;
name|mDepth
operator|=
name|depth
expr_stmt|;
name|mInternalFormat
operator|=
name|internalformat
expr_stmt|;
name|mTarget
operator|=
name|target
expr_stmt|;
comment|// compute the d3d format that will be used
name|mDXGIFormat
operator|=
name|gl_d3d11
operator|::
name|GetTexFormat
argument_list|(
name|internalformat
argument_list|)
expr_stmt|;
name|mActualFormat
operator|=
name|d3d11_gl
operator|::
name|GetInternalFormat
argument_list|(
name|mDXGIFormat
argument_list|)
expr_stmt|;
name|mRenderable
operator|=
name|gl_d3d11
operator|::
name|GetRTVFormat
argument_list|(
name|internalformat
argument_list|)
operator|!=
name|DXGI_FORMAT_UNKNOWN
expr_stmt|;
name|SafeRelease
argument_list|(
name|mStagingTexture
argument_list|)
expr_stmt|;
name|mDirty
operator|=
name|gl_d3d11
operator|::
name|RequiresTextureDataInitialization
argument_list|(
name|mInternalFormat
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|getDXGIFormat
name|DXGI_FORMAT
name|Image11
operator|::
name|getDXGIFormat
parameter_list|()
specifier|const
block|{
comment|// this should only happen if the image hasn't been redefined first
comment|// which would be a bug by the caller
name|ASSERT
argument_list|(
name|mDXGIFormat
operator|!=
name|DXGI_FORMAT_UNKNOWN
argument_list|)
expr_stmt|;
return|return
name|mDXGIFormat
return|;
block|}
comment|// Store the pixel rectangle designated by xoffset,yoffset,width,height with pixels stored as format/type at input
comment|// into the target pixel rectangle.
DECL|function|loadData
name|void
name|Image11
operator|::
name|loadData
parameter_list|(
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLint
name|unpackAlignment
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|)
block|{
name|GLsizei
name|inputRowPitch
init|=
name|gl
operator|::
name|GetRowPitch
argument_list|(
name|mInternalFormat
argument_list|,
name|type
argument_list|,
name|width
argument_list|,
name|unpackAlignment
argument_list|)
decl_stmt|;
name|GLsizei
name|inputDepthPitch
init|=
name|gl
operator|::
name|GetDepthPitch
argument_list|(
name|mInternalFormat
argument_list|,
name|type
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|unpackAlignment
argument_list|)
decl_stmt|;
name|GLuint
name|outputPixelSize
init|=
name|d3d11
operator|::
name|GetFormatPixelBytes
argument_list|(
name|mDXGIFormat
argument_list|)
decl_stmt|;
name|LoadImageFunction
name|loadFunction
init|=
name|d3d11
operator|::
name|GetImageLoadFunction
argument_list|(
name|mInternalFormat
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|loadFunction
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedImage
decl_stmt|;
name|HRESULT
name|result
init|=
name|map
argument_list|(
name|D3D11_MAP_WRITE
argument_list|,
operator|&
name|mappedImage
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Could not map image for loading."
argument_list|)
expr_stmt|;
return|return;
block|}
name|uint8_t
modifier|*
name|offsetMappedData
init|=
operator|(
cast|reinterpret_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|mappedImage
operator|.
name|pData
argument_list|)
operator|+
operator|(
name|yoffset
operator|*
name|mappedImage
operator|.
name|RowPitch
operator|+
name|xoffset
operator|*
name|outputPixelSize
operator|+
name|zoffset
operator|*
name|mappedImage
operator|.
name|DepthPitch
operator|)
operator|)
decl_stmt|;
name|loadFunction
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|,
name|offsetMappedData
argument_list|,
name|mappedImage
operator|.
name|RowPitch
argument_list|,
name|mappedImage
operator|.
name|DepthPitch
argument_list|)
expr_stmt|;
name|unmap
argument_list|()
expr_stmt|;
block|}
DECL|function|loadCompressedData
name|void
name|Image11
operator|::
name|loadCompressedData
parameter_list|(
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|)
block|{
name|GLsizei
name|inputRowPitch
init|=
name|gl
operator|::
name|GetRowPitch
argument_list|(
name|mInternalFormat
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|width
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|GLsizei
name|inputDepthPitch
init|=
name|gl
operator|::
name|GetDepthPitch
argument_list|(
name|mInternalFormat
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|GLuint
name|outputPixelSize
init|=
name|d3d11
operator|::
name|GetFormatPixelBytes
argument_list|(
name|mDXGIFormat
argument_list|)
decl_stmt|;
name|GLuint
name|outputBlockWidth
init|=
name|d3d11
operator|::
name|GetBlockWidth
argument_list|(
name|mDXGIFormat
argument_list|)
decl_stmt|;
name|GLuint
name|outputBlockHeight
init|=
name|d3d11
operator|::
name|GetBlockHeight
argument_list|(
name|mDXGIFormat
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|xoffset
operator|%
name|outputBlockWidth
operator|==
literal|0
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|yoffset
operator|%
name|outputBlockHeight
operator|==
literal|0
argument_list|)
expr_stmt|;
name|LoadImageFunction
name|loadFunction
init|=
name|d3d11
operator|::
name|GetImageLoadFunction
argument_list|(
name|mInternalFormat
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|loadFunction
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|D3D11_MAPPED_SUBRESOURCE
name|mappedImage
decl_stmt|;
name|HRESULT
name|result
init|=
name|map
argument_list|(
name|D3D11_MAP_WRITE
argument_list|,
operator|&
name|mappedImage
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Could not map image for loading."
argument_list|)
expr_stmt|;
return|return;
block|}
name|uint8_t
modifier|*
name|offsetMappedData
init|=
cast|reinterpret_cast
argument_list|<
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|mappedImage
operator|.
name|pData
argument_list|)
operator|+
operator|(
operator|(
name|yoffset
operator|/
name|outputBlockHeight
operator|)
operator|*
name|mappedImage
operator|.
name|RowPitch
operator|+
operator|(
name|xoffset
operator|/
name|outputBlockWidth
operator|)
operator|*
name|outputPixelSize
operator|+
name|zoffset
operator|*
name|mappedImage
operator|.
name|DepthPitch
operator|)
decl_stmt|;
name|loadFunction
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|input
argument_list|)
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|,
name|offsetMappedData
argument_list|,
name|mappedImage
operator|.
name|RowPitch
argument_list|,
name|mappedImage
operator|.
name|DepthPitch
argument_list|)
expr_stmt|;
name|unmap
argument_list|()
expr_stmt|;
block|}
DECL|function|copy
name|void
name|Image11
operator|::
name|copy
parameter_list|(
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|gl
operator|::
name|Framebuffer
modifier|*
name|source
parameter_list|)
block|{
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|colorbuffer
init|=
name|source
operator|->
name|getReadColorbuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|colorbuffer
operator|&&
name|colorbuffer
operator|->
name|getActualFormat
argument_list|()
operator|==
name|mActualFormat
condition|)
block|{
comment|// No conversion needed-- use copyback fastpath
name|ID3D11Texture2D
modifier|*
name|colorBufferTexture
init|=
name|NULL
decl_stmt|;
name|unsigned
name|int
name|subresourceIndex
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|mRenderer
operator|->
name|getRenderTargetResource
argument_list|(
name|colorbuffer
argument_list|,
operator|&
name|subresourceIndex
argument_list|,
operator|&
name|colorBufferTexture
argument_list|)
condition|)
block|{
name|D3D11_TEXTURE2D_DESC
name|textureDesc
decl_stmt|;
name|colorBufferTexture
operator|->
name|GetDesc
argument_list|(
operator|&
name|textureDesc
argument_list|)
expr_stmt|;
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|ID3D11DeviceContext
modifier|*
name|deviceContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|ID3D11Texture2D
modifier|*
name|srcTex
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|textureDesc
operator|.
name|SampleDesc
operator|.
name|Count
operator|>
literal|1
condition|)
block|{
name|D3D11_TEXTURE2D_DESC
name|resolveDesc
decl_stmt|;
name|resolveDesc
operator|.
name|Width
operator|=
name|textureDesc
operator|.
name|Width
expr_stmt|;
name|resolveDesc
operator|.
name|Height
operator|=
name|textureDesc
operator|.
name|Height
expr_stmt|;
name|resolveDesc
operator|.
name|MipLevels
operator|=
literal|1
expr_stmt|;
name|resolveDesc
operator|.
name|ArraySize
operator|=
literal|1
expr_stmt|;
name|resolveDesc
operator|.
name|Format
operator|=
name|textureDesc
operator|.
name|Format
expr_stmt|;
name|resolveDesc
operator|.
name|SampleDesc
operator|.
name|Count
operator|=
literal|1
expr_stmt|;
name|resolveDesc
operator|.
name|SampleDesc
operator|.
name|Quality
operator|=
literal|0
expr_stmt|;
name|resolveDesc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_DEFAULT
expr_stmt|;
name|resolveDesc
operator|.
name|BindFlags
operator|=
literal|0
expr_stmt|;
name|resolveDesc
operator|.
name|CPUAccessFlags
operator|=
literal|0
expr_stmt|;
name|resolveDesc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateTexture2D
argument_list|(
operator|&
name|resolveDesc
argument_list|,
name|NULL
argument_list|,
operator|&
name|srcTex
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to create resolve texture for Image11::copy, HRESULT: 0x%X."
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
name|deviceContext
operator|->
name|ResolveSubresource
argument_list|(
name|srcTex
argument_list|,
literal|0
argument_list|,
name|colorBufferTexture
argument_list|,
name|subresourceIndex
argument_list|,
name|textureDesc
operator|.
name|Format
argument_list|)
expr_stmt|;
name|subresourceIndex
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|srcTex
operator|=
name|colorBufferTexture
expr_stmt|;
name|srcTex
operator|->
name|AddRef
argument_list|()
expr_stmt|;
block|}
name|D3D11_BOX
name|srcBox
decl_stmt|;
name|srcBox
operator|.
name|left
operator|=
name|x
expr_stmt|;
name|srcBox
operator|.
name|right
operator|=
name|x
operator|+
name|width
expr_stmt|;
name|srcBox
operator|.
name|top
operator|=
name|y
expr_stmt|;
name|srcBox
operator|.
name|bottom
operator|=
name|y
operator|+
name|height
expr_stmt|;
name|srcBox
operator|.
name|front
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|back
operator|=
literal|1
expr_stmt|;
name|deviceContext
operator|->
name|CopySubresourceRegion
argument_list|(
name|mStagingTexture
argument_list|,
literal|0
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|srcTex
argument_list|,
name|subresourceIndex
argument_list|,
operator|&
name|srcBox
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|srcTex
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|colorBufferTexture
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// This format requires conversion, so we must copy the texture to staging and manually convert via readPixels
name|D3D11_MAPPED_SUBRESOURCE
name|mappedImage
decl_stmt|;
name|HRESULT
name|result
init|=
name|map
argument_list|(
name|D3D11_MAP_WRITE
argument_list|,
operator|&
name|mappedImage
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to map texture for Image11::copy, HRESULT: 0x%X."
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// determine the offset coordinate into the destination buffer
name|GLsizei
name|rowOffset
init|=
name|gl
operator|::
name|GetPixelBytes
argument_list|(
name|mActualFormat
argument_list|)
operator|*
name|xoffset
decl_stmt|;
name|void
modifier|*
name|dataOffset
init|=
cast|static_cast
argument_list|<
name|unsigned
name|char
operator|*
argument_list|>
argument_list|(
name|mappedImage
operator|.
name|pData
argument_list|)
operator|+
name|mappedImage
operator|.
name|RowPitch
operator|*
name|yoffset
operator|+
name|rowOffset
operator|+
name|zoffset
operator|*
name|mappedImage
operator|.
name|DepthPitch
decl_stmt|;
name|GLenum
name|format
init|=
name|gl
operator|::
name|GetFormat
argument_list|(
name|mInternalFormat
argument_list|)
decl_stmt|;
name|GLenum
name|type
init|=
name|gl
operator|::
name|GetType
argument_list|(
name|mInternalFormat
argument_list|)
decl_stmt|;
name|mRenderer
operator|->
name|readPixels
argument_list|(
name|source
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|mappedImage
operator|.
name|RowPitch
argument_list|,
name|gl
operator|::
name|PixelPackState
argument_list|()
argument_list|,
name|dataOffset
argument_list|)
expr_stmt|;
name|unmap
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|getStagingTexture
name|ID3D11Resource
modifier|*
name|Image11
operator|::
name|getStagingTexture
parameter_list|()
block|{
name|createStagingTexture
argument_list|()
expr_stmt|;
return|return
name|mStagingTexture
return|;
block|}
DECL|function|getStagingSubresource
name|unsigned
name|int
name|Image11
operator|::
name|getStagingSubresource
parameter_list|()
block|{
name|createStagingTexture
argument_list|()
expr_stmt|;
return|return
name|mStagingSubresource
return|;
block|}
DECL|function|createStagingTexture
name|void
name|Image11
operator|::
name|createStagingTexture
parameter_list|()
block|{
if|if
condition|(
name|mStagingTexture
condition|)
block|{
return|return;
block|}
specifier|const
name|DXGI_FORMAT
name|dxgiFormat
init|=
name|getDXGIFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|mWidth
operator|>
literal|0
operator|&&
name|mHeight
operator|>
literal|0
operator|&&
name|mDepth
operator|>
literal|0
condition|)
block|{
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|HRESULT
name|result
decl_stmt|;
name|int
name|lodOffset
init|=
literal|1
decl_stmt|;
name|GLsizei
name|width
init|=
name|mWidth
decl_stmt|;
name|GLsizei
name|height
init|=
name|mHeight
decl_stmt|;
comment|// adjust size if needed for compressed textures
name|d3d11
operator|::
name|MakeValidSize
argument_list|(
literal|false
argument_list|,
name|dxgiFormat
argument_list|,
operator|&
name|width
argument_list|,
operator|&
name|height
argument_list|,
operator|&
name|lodOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|mTarget
operator|==
name|GL_TEXTURE_3D
condition|)
block|{
name|ID3D11Texture3D
modifier|*
name|newTexture
init|=
name|NULL
decl_stmt|;
name|D3D11_TEXTURE3D_DESC
name|desc
decl_stmt|;
name|desc
operator|.
name|Width
operator|=
name|width
expr_stmt|;
name|desc
operator|.
name|Height
operator|=
name|height
expr_stmt|;
name|desc
operator|.
name|Depth
operator|=
name|mDepth
expr_stmt|;
name|desc
operator|.
name|MipLevels
operator|=
name|lodOffset
operator|+
literal|1
expr_stmt|;
name|desc
operator|.
name|Format
operator|=
name|dxgiFormat
expr_stmt|;
name|desc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_STAGING
expr_stmt|;
name|desc
operator|.
name|BindFlags
operator|=
literal|0
expr_stmt|;
name|desc
operator|.
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_READ
operator||
name|D3D11_CPU_ACCESS_WRITE
expr_stmt|;
name|desc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|gl_d3d11
operator|::
name|RequiresTextureDataInitialization
argument_list|(
name|mInternalFormat
argument_list|)
condition|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|D3D11_SUBRESOURCE_DATA
argument_list|>
name|initialData
decl_stmt|;
name|std
operator|::
name|vector
argument_list|<
name|std
operator|::
name|vector
argument_list|<
name|BYTE
argument_list|>
argument_list|>
name|textureData
decl_stmt|;
name|d3d11
operator|::
name|GenerateInitialTextureData
argument_list|(
name|mInternalFormat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|mDepth
argument_list|,
name|lodOffset
operator|+
literal|1
argument_list|,
operator|&
name|initialData
argument_list|,
operator|&
name|textureData
argument_list|)
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateTexture3D
argument_list|(
operator|&
name|desc
argument_list|,
name|initialData
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|newTexture
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|device
operator|->
name|CreateTexture3D
argument_list|(
operator|&
name|desc
argument_list|,
name|NULL
argument_list|,
operator|&
name|newTexture
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
name|ERR
argument_list|(
literal|"Creating image failed."
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
name|mStagingTexture
operator|=
name|newTexture
expr_stmt|;
name|mStagingSubresource
operator|=
name|D3D11CalcSubresource
argument_list|(
name|lodOffset
argument_list|,
literal|0
argument_list|,
name|lodOffset
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mTarget
operator|==
name|GL_TEXTURE_2D
operator|||
name|mTarget
operator|==
name|GL_TEXTURE_2D_ARRAY
operator|||
name|mTarget
operator|==
name|GL_TEXTURE_CUBE_MAP
condition|)
block|{
name|ID3D11Texture2D
modifier|*
name|newTexture
init|=
name|NULL
decl_stmt|;
name|D3D11_TEXTURE2D_DESC
name|desc
decl_stmt|;
name|desc
operator|.
name|Width
operator|=
name|width
expr_stmt|;
name|desc
operator|.
name|Height
operator|=
name|height
expr_stmt|;
name|desc
operator|.
name|MipLevels
operator|=
name|lodOffset
operator|+
literal|1
expr_stmt|;
name|desc
operator|.
name|ArraySize
operator|=
literal|1
expr_stmt|;
name|desc
operator|.
name|Format
operator|=
name|dxgiFormat
expr_stmt|;
name|desc
operator|.
name|SampleDesc
operator|.
name|Count
operator|=
literal|1
expr_stmt|;
name|desc
operator|.
name|SampleDesc
operator|.
name|Quality
operator|=
literal|0
expr_stmt|;
name|desc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_STAGING
expr_stmt|;
name|desc
operator|.
name|BindFlags
operator|=
literal|0
expr_stmt|;
name|desc
operator|.
name|CPUAccessFlags
operator|=
name|D3D11_CPU_ACCESS_READ
operator||
name|D3D11_CPU_ACCESS_WRITE
expr_stmt|;
name|desc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|gl_d3d11
operator|::
name|RequiresTextureDataInitialization
argument_list|(
name|mInternalFormat
argument_list|)
condition|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|D3D11_SUBRESOURCE_DATA
argument_list|>
name|initialData
decl_stmt|;
name|std
operator|::
name|vector
argument_list|<
name|std
operator|::
name|vector
argument_list|<
name|BYTE
argument_list|>
argument_list|>
name|textureData
decl_stmt|;
name|d3d11
operator|::
name|GenerateInitialTextureData
argument_list|(
name|mInternalFormat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|lodOffset
operator|+
literal|1
argument_list|,
operator|&
name|initialData
argument_list|,
operator|&
name|textureData
argument_list|)
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateTexture2D
argument_list|(
operator|&
name|desc
argument_list|,
name|initialData
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|newTexture
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|device
operator|->
name|CreateTexture2D
argument_list|(
operator|&
name|desc
argument_list|,
name|NULL
argument_list|,
operator|&
name|newTexture
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
name|ERR
argument_list|(
literal|"Creating image failed."
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
name|mStagingTexture
operator|=
name|newTexture
expr_stmt|;
name|mStagingSubresource
operator|=
name|D3D11CalcSubresource
argument_list|(
name|lodOffset
argument_list|,
literal|0
argument_list|,
name|lodOffset
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
name|mDirty
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|map
name|HRESULT
name|Image11
operator|::
name|map
parameter_list|(
name|D3D11_MAP
name|mapType
parameter_list|,
name|D3D11_MAPPED_SUBRESOURCE
modifier|*
name|map
parameter_list|)
block|{
name|createStagingTexture
argument_list|()
expr_stmt|;
name|HRESULT
name|result
init|=
name|E_FAIL
decl_stmt|;
if|if
condition|(
name|mStagingTexture
condition|)
block|{
name|ID3D11DeviceContext
modifier|*
name|deviceContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|result
operator|=
name|deviceContext
operator|->
name|Map
argument_list|(
name|mStagingTexture
argument_list|,
name|mStagingSubresource
argument_list|,
name|mapType
argument_list|,
literal|0
argument_list|,
name|map
argument_list|)
expr_stmt|;
comment|// this can fail if the device is removed (from TDR)
if|if
condition|(
name|d3d11
operator|::
name|isDeviceLostError
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|mRenderer
operator|->
name|notifyDeviceLost
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|mDirty
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|function|unmap
name|void
name|Image11
operator|::
name|unmap
parameter_list|()
block|{
if|if
condition|(
name|mStagingTexture
condition|)
block|{
name|ID3D11DeviceContext
modifier|*
name|deviceContext
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|deviceContext
operator|->
name|Unmap
argument_list|(
name|mStagingTexture
argument_list|,
name|mStagingSubresource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_namespace
end_unit
