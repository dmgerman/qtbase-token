begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// RenderbufferD3d.cpp: Implements the RenderbufferD3D class, a specialization of RenderbufferImpl
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/RenderbufferD3D.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/RendererD3D.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/RenderTarget.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|RenderbufferD3D
name|RenderbufferD3D
operator|::
name|RenderbufferD3D
parameter_list|(
name|RendererD3D
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
block|{
name|mRenderTarget
operator|=
name|NULL
expr_stmt|;
block|}
DECL|function|~RenderbufferD3D
name|RenderbufferD3D
operator|::
name|~
name|RenderbufferD3D
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mRenderTarget
argument_list|)
expr_stmt|;
block|}
DECL|function|makeRenderbufferD3D
name|RenderbufferD3D
modifier|*
name|RenderbufferD3D
operator|::
name|makeRenderbufferD3D
parameter_list|(
name|RenderbufferImpl
modifier|*
name|renderbuffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|RenderbufferD3D
operator|*
argument_list|,
name|renderbuffer
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|RenderbufferD3D
operator|*
argument_list|>
argument_list|(
name|renderbuffer
argument_list|)
return|;
block|}
DECL|function|setStorage
name|gl
operator|::
name|Error
name|RenderbufferD3D
operator|::
name|setStorage
parameter_list|(
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
block|{
comment|// If the renderbuffer parameters are queried, the calling function
comment|// will expect one of the valid renderbuffer formats for use in
comment|// glRenderbufferStorage, but we should create depth and stencil buffers
comment|// as DEPTH24_STENCIL8
name|GLenum
name|creationFormat
init|=
name|internalformat
decl_stmt|;
if|if
condition|(
name|internalformat
operator|==
name|GL_DEPTH_COMPONENT16
operator|||
name|internalformat
operator|==
name|GL_STENCIL_INDEX8
condition|)
block|{
name|creationFormat
operator|=
name|GL_DEPTH24_STENCIL8_OES
expr_stmt|;
block|}
name|RenderTarget
modifier|*
name|newRT
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|mRenderer
operator|->
name|createRenderTarget
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|creationFormat
argument_list|,
name|samples
argument_list|,
operator|&
name|newRT
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|SafeDelete
argument_list|(
name|mRenderTarget
argument_list|)
expr_stmt|;
name|mRenderTarget
operator|=
name|newRT
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|setStorage
name|gl
operator|::
name|Error
name|RenderbufferD3D
operator|::
name|setStorage
parameter_list|(
name|SwapChain
modifier|*
name|swapChain
parameter_list|,
name|bool
name|depth
parameter_list|)
block|{
name|RenderTarget
modifier|*
name|newRT
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|mRenderer
operator|->
name|createRenderTarget
argument_list|(
name|swapChain
argument_list|,
name|depth
argument_list|,
operator|&
name|newRT
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|SafeDelete
argument_list|(
name|mRenderTarget
argument_list|)
expr_stmt|;
name|mRenderTarget
operator|=
name|newRT
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getWidth
name|GLsizei
name|RenderbufferD3D
operator|::
name|getWidth
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mRenderTarget
condition|?
name|mRenderTarget
operator|->
name|getWidth
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|RenderbufferD3D
operator|::
name|getHeight
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mRenderTarget
condition|?
name|mRenderTarget
operator|->
name|getHeight
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|RenderbufferD3D
operator|::
name|getInternalFormat
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mRenderTarget
condition|?
name|mRenderTarget
operator|->
name|getInternalFormat
argument_list|()
else|:
name|GL_RGBA4
operator|)
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|RenderbufferD3D
operator|::
name|getActualFormat
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mRenderTarget
condition|?
name|mRenderTarget
operator|->
name|getActualFormat
argument_list|()
else|:
name|GL_RGBA4
operator|)
return|;
block|}
DECL|function|getSamples
name|GLsizei
name|RenderbufferD3D
operator|::
name|getSamples
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mRenderTarget
condition|?
name|mRenderTarget
operator|->
name|getSamples
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
DECL|function|getRenderTarget
name|RenderTarget
modifier|*
name|RenderbufferD3D
operator|::
name|getRenderTarget
parameter_list|()
block|{
return|return
name|mRenderTarget
return|;
block|}
DECL|function|getRenderTargetSerial
name|unsigned
name|int
name|RenderbufferD3D
operator|::
name|getRenderTargetSerial
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mRenderTarget
condition|?
name|mRenderTarget
operator|->
name|getSerial
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
block|}
end_namespace
end_unit
