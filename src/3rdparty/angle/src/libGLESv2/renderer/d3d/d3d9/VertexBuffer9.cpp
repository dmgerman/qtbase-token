begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// VertexBuffer9.cpp: Defines the D3D9 VertexBuffer implementation.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/VertexBuffer9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/Renderer9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/formatutils9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/vertexconversion.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/BufferD3D.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/VertexAttribute.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Buffer.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|VertexBuffer9
name|VertexBuffer9
operator|::
name|VertexBuffer9
parameter_list|(
name|Renderer9
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
block|{
name|mVertexBuffer
operator|=
name|NULL
expr_stmt|;
name|mBufferSize
operator|=
literal|0
expr_stmt|;
name|mDynamicUsage
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|~VertexBuffer9
name|VertexBuffer9
operator|::
name|~
name|VertexBuffer9
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mVertexBuffer
argument_list|)
expr_stmt|;
block|}
DECL|function|initialize
name|gl
operator|::
name|Error
name|VertexBuffer9
operator|::
name|initialize
parameter_list|(
name|unsigned
name|int
name|size
parameter_list|,
name|bool
name|dynamicUsage
parameter_list|)
block|{
name|SafeRelease
argument_list|(
name|mVertexBuffer
argument_list|)
expr_stmt|;
name|updateSerial
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|DWORD
name|flags
init|=
name|D3DUSAGE_WRITEONLY
decl_stmt|;
if|if
condition|(
name|dynamicUsage
condition|)
block|{
name|flags
operator||=
name|D3DUSAGE_DYNAMIC
expr_stmt|;
block|}
name|HRESULT
name|result
init|=
name|mRenderer
operator|->
name|createVertexBuffer
argument_list|(
name|size
argument_list|,
name|flags
argument_list|,
operator|&
name|mVertexBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to allocate internal vertex buffer of size, %lu."
argument_list|,
name|size
argument_list|)
return|;
block|}
block|}
name|mBufferSize
operator|=
name|size
expr_stmt|;
name|mDynamicUsage
operator|=
name|dynamicUsage
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|makeVertexBuffer9
name|VertexBuffer9
modifier|*
name|VertexBuffer9
operator|::
name|makeVertexBuffer9
parameter_list|(
name|VertexBuffer
modifier|*
name|vertexBuffer
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|VertexBuffer9
operator|*
argument_list|,
name|vertexBuffer
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|VertexBuffer9
operator|*
argument_list|>
argument_list|(
name|vertexBuffer
argument_list|)
return|;
block|}
DECL|function|storeVertexAttributes
name|gl
operator|::
name|Error
name|VertexBuffer9
operator|::
name|storeVertexAttributes
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
specifier|const
name|gl
operator|::
name|VertexAttribCurrentValueData
modifier|&
name|currentValue
parameter_list|,
name|GLint
name|start
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instances
parameter_list|,
name|unsigned
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mVertexBuffer
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Internal vertex buffer is not initialized."
argument_list|)
return|;
block|}
name|gl
operator|::
name|Buffer
modifier|*
name|buffer
init|=
name|attrib
operator|.
name|buffer
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|inputStride
init|=
name|gl
operator|::
name|ComputeVertexAttributeStride
argument_list|(
name|attrib
argument_list|)
decl_stmt|;
name|int
name|elementSize
init|=
name|gl
operator|::
name|ComputeVertexAttributeTypeSize
argument_list|(
name|attrib
argument_list|)
decl_stmt|;
name|DWORD
name|lockFlags
init|=
name|mDynamicUsage
condition|?
name|D3DLOCK_NOOVERWRITE
else|:
literal|0
decl_stmt|;
name|uint8_t
modifier|*
name|mapPtr
init|=
name|NULL
decl_stmt|;
name|unsigned
name|int
name|mapSize
decl_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|spaceRequired
argument_list|(
name|attrib
argument_list|,
name|count
argument_list|,
name|instances
argument_list|,
operator|&
name|mapSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|HRESULT
name|result
init|=
name|mVertexBuffer
operator|->
name|Lock
argument_list|(
name|offset
argument_list|,
name|mapSize
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|mapPtr
argument_list|)
argument_list|,
name|lockFlags
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to lock internal vertex buffer, HRESULT: 0x%08x."
argument_list|,
name|result
argument_list|)
return|;
block|}
specifier|const
name|uint8_t
modifier|*
name|input
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|attrib
operator|.
name|enabled
condition|)
block|{
if|if
condition|(
name|buffer
condition|)
block|{
name|BufferD3D
modifier|*
name|storage
init|=
name|BufferD3D
operator|::
name|makeFromBuffer
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|ASSERT
argument_list|(
name|storage
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Error
name|error
init|=
name|storage
operator|->
name|getData
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isError
argument_list|()
condition|)
block|{
return|return
name|error
return|;
block|}
name|input
operator|+=
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|attrib
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|input
operator|=
cast|static_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|attrib
operator|.
name|pointer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|input
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|uint8_t
operator|*
argument_list|>
argument_list|(
name|currentValue
operator|.
name|FloatValues
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instances
operator|==
literal|0
operator|||
name|attrib
operator|.
name|divisor
operator|==
literal|0
condition|)
block|{
name|input
operator|+=
name|inputStride
operator|*
name|start
expr_stmt|;
block|}
name|gl
operator|::
name|VertexFormat
name|vertexFormat
argument_list|(
name|attrib
argument_list|,
name|currentValue
operator|.
name|Type
argument_list|)
decl_stmt|;
specifier|const
name|d3d9
operator|::
name|VertexFormat
modifier|&
name|d3dVertexInfo
init|=
name|d3d9
operator|::
name|GetVertexFormatInfo
argument_list|(
name|mRenderer
operator|->
name|getCapsDeclTypes
argument_list|()
argument_list|,
name|vertexFormat
argument_list|)
decl_stmt|;
name|bool
name|needsConversion
init|=
operator|(
name|d3dVertexInfo
operator|.
name|conversionType
operator|&
name|VERTEX_CONVERT_CPU
operator|)
operator|>
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|needsConversion
operator|&&
name|inputStride
operator|==
name|elementSize
condition|)
block|{
name|size_t
name|copySize
init|=
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|count
argument_list|)
operator|*
cast|static_cast
argument_list|<
name|size_t
argument_list|>
argument_list|(
name|inputStride
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|mapPtr
argument_list|,
name|input
argument_list|,
name|copySize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d3dVertexInfo
operator|.
name|copyFunction
argument_list|(
name|input
argument_list|,
name|inputStride
argument_list|,
name|count
argument_list|,
name|mapPtr
argument_list|)
expr_stmt|;
block|}
name|mVertexBuffer
operator|->
name|Unlock
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getSpaceRequired
name|gl
operator|::
name|Error
name|VertexBuffer9
operator|::
name|getSpaceRequired
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
name|GLsizei
name|count
parameter_list|,
name|GLsizei
name|instances
parameter_list|,
name|unsigned
name|int
modifier|*
name|outSpaceRequired
parameter_list|)
specifier|const
block|{
return|return
name|spaceRequired
argument_list|(
name|attrib
argument_list|,
name|count
argument_list|,
name|instances
argument_list|,
name|outSpaceRequired
argument_list|)
return|;
block|}
DECL|function|getBufferSize
name|unsigned
name|int
name|VertexBuffer9
operator|::
name|getBufferSize
parameter_list|()
specifier|const
block|{
return|return
name|mBufferSize
return|;
block|}
DECL|function|setBufferSize
name|gl
operator|::
name|Error
name|VertexBuffer9
operator|::
name|setBufferSize
parameter_list|(
name|unsigned
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|>
name|mBufferSize
condition|)
block|{
return|return
name|initialize
argument_list|(
name|size
argument_list|,
name|mDynamicUsage
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
block|}
DECL|function|discard
name|gl
operator|::
name|Error
name|VertexBuffer9
operator|::
name|discard
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mVertexBuffer
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Internal vertex buffer is not initialized."
argument_list|)
return|;
block|}
name|void
modifier|*
name|dummy
decl_stmt|;
name|HRESULT
name|result
decl_stmt|;
name|result
operator|=
name|mVertexBuffer
operator|->
name|Lock
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|&
name|dummy
argument_list|,
name|D3DLOCK_DISCARD
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to lock internal buffer for discarding, HRESULT: 0x%08x"
argument_list|,
name|result
argument_list|)
return|;
block|}
name|result
operator|=
name|mVertexBuffer
operator|->
name|Unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"Failed to unlock internal buffer for discarding, HRESULT: 0x%08x"
argument_list|,
name|result
argument_list|)
return|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|getBuffer
name|IDirect3DVertexBuffer9
modifier|*
name|VertexBuffer9
operator|::
name|getBuffer
parameter_list|()
specifier|const
block|{
return|return
name|mVertexBuffer
return|;
block|}
DECL|function|spaceRequired
name|gl
operator|::
name|Error
name|VertexBuffer9
operator|::
name|spaceRequired
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attrib
parameter_list|,
name|std
operator|::
name|size_t
name|count
parameter_list|,
name|GLsizei
name|instances
parameter_list|,
name|unsigned
name|int
modifier|*
name|outSpaceRequired
parameter_list|)
specifier|const
block|{
name|gl
operator|::
name|VertexFormat
name|vertexFormat
argument_list|(
name|attrib
argument_list|,
name|GL_FLOAT
argument_list|)
decl_stmt|;
specifier|const
name|d3d9
operator|::
name|VertexFormat
modifier|&
name|d3d9VertexInfo
init|=
name|d3d9
operator|::
name|GetVertexFormatInfo
argument_list|(
name|mRenderer
operator|->
name|getCapsDeclTypes
argument_list|()
argument_list|,
name|vertexFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrib
operator|.
name|enabled
condition|)
block|{
name|unsigned
name|int
name|elementCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|instances
operator|==
literal|0
operator|||
name|attrib
operator|.
name|divisor
operator|==
literal|0
condition|)
block|{
name|elementCount
operator|=
name|count
expr_stmt|;
block|}
else|else
block|{
comment|// Round up to divisor, if possible
name|elementCount
operator|=
name|UnsignedCeilDivide
argument_list|(
cast|static_cast
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|(
name|instances
argument_list|)
argument_list|,
name|attrib
operator|.
name|divisor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d3d9VertexInfo
operator|.
name|outputElementSize
operator|<=
name|std
operator|::
name|numeric_limits
argument_list|<
name|unsigned
name|int
argument_list|>
operator|::
name|max
argument_list|()
operator|/
name|elementCount
condition|)
block|{
if|if
condition|(
name|outSpaceRequired
condition|)
block|{
operator|*
name|outSpaceRequired
operator|=
name|d3d9VertexInfo
operator|.
name|outputElementSize
operator|*
name|elementCount
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"New vertex buffer size would result in an overflow."
argument_list|)
return|;
block|}
block|}
else|else
block|{
specifier|const
name|unsigned
name|int
name|elementSize
init|=
literal|4
decl_stmt|;
if|if
condition|(
name|outSpaceRequired
condition|)
block|{
operator|*
name|outSpaceRequired
operator|=
name|elementSize
operator|*
literal|4
expr_stmt|;
block|}
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
block|}
block|}
end_namespace
end_unit
