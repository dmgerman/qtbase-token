begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// renderer9_utils.cpp: Conversion functions and other utility routines
end_comment
begin_comment
comment|// specific to the D3D9 renderer.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/renderer9_utils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/formatutils9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/RenderTarget9.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_include
include|#
directive|include
file|"third_party/systeminfo/SystemInfo.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|namespace|gl_d3d9
namespace|namespace
name|gl_d3d9
block|{
DECL|function|ConvertComparison
name|D3DCMPFUNC
name|ConvertComparison
parameter_list|(
name|GLenum
name|comparison
parameter_list|)
block|{
name|D3DCMPFUNC
name|d3dComp
init|=
name|D3DCMP_ALWAYS
decl_stmt|;
switch|switch
condition|(
name|comparison
condition|)
block|{
case|case
name|GL_NEVER
case|:
name|d3dComp
operator|=
name|D3DCMP_NEVER
expr_stmt|;
break|break;
case|case
name|GL_ALWAYS
case|:
name|d3dComp
operator|=
name|D3DCMP_ALWAYS
expr_stmt|;
break|break;
case|case
name|GL_LESS
case|:
name|d3dComp
operator|=
name|D3DCMP_LESS
expr_stmt|;
break|break;
case|case
name|GL_LEQUAL
case|:
name|d3dComp
operator|=
name|D3DCMP_LESSEQUAL
expr_stmt|;
break|break;
case|case
name|GL_EQUAL
case|:
name|d3dComp
operator|=
name|D3DCMP_EQUAL
expr_stmt|;
break|break;
case|case
name|GL_GREATER
case|:
name|d3dComp
operator|=
name|D3DCMP_GREATER
expr_stmt|;
break|break;
case|case
name|GL_GEQUAL
case|:
name|d3dComp
operator|=
name|D3DCMP_GREATEREQUAL
expr_stmt|;
break|break;
case|case
name|GL_NOTEQUAL
case|:
name|d3dComp
operator|=
name|D3DCMP_NOTEQUAL
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dComp
return|;
block|}
DECL|function|ConvertColor
name|D3DCOLOR
name|ConvertColor
parameter_list|(
name|gl
operator|::
name|ColorF
name|color
parameter_list|)
block|{
return|return
name|D3DCOLOR_RGBA
argument_list|(
name|gl
operator|::
name|unorm
argument_list|<
literal|8
argument_list|>
argument_list|(
name|color
operator|.
name|red
argument_list|)
argument_list|,
name|gl
operator|::
name|unorm
argument_list|<
literal|8
argument_list|>
argument_list|(
name|color
operator|.
name|green
argument_list|)
argument_list|,
name|gl
operator|::
name|unorm
argument_list|<
literal|8
argument_list|>
argument_list|(
name|color
operator|.
name|blue
argument_list|)
argument_list|,
name|gl
operator|::
name|unorm
argument_list|<
literal|8
argument_list|>
argument_list|(
name|color
operator|.
name|alpha
argument_list|)
argument_list|)
return|;
block|}
DECL|function|ConvertBlendFunc
name|D3DBLEND
name|ConvertBlendFunc
parameter_list|(
name|GLenum
name|blend
parameter_list|)
block|{
name|D3DBLEND
name|d3dBlend
init|=
name|D3DBLEND_ZERO
decl_stmt|;
switch|switch
condition|(
name|blend
condition|)
block|{
case|case
name|GL_ZERO
case|:
name|d3dBlend
operator|=
name|D3DBLEND_ZERO
expr_stmt|;
break|break;
case|case
name|GL_ONE
case|:
name|d3dBlend
operator|=
name|D3DBLEND_ONE
expr_stmt|;
break|break;
case|case
name|GL_SRC_COLOR
case|:
name|d3dBlend
operator|=
name|D3DBLEND_SRCCOLOR
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_SRC_COLOR
case|:
name|d3dBlend
operator|=
name|D3DBLEND_INVSRCCOLOR
expr_stmt|;
break|break;
case|case
name|GL_DST_COLOR
case|:
name|d3dBlend
operator|=
name|D3DBLEND_DESTCOLOR
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_DST_COLOR
case|:
name|d3dBlend
operator|=
name|D3DBLEND_INVDESTCOLOR
expr_stmt|;
break|break;
case|case
name|GL_SRC_ALPHA
case|:
name|d3dBlend
operator|=
name|D3DBLEND_SRCALPHA
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_SRC_ALPHA
case|:
name|d3dBlend
operator|=
name|D3DBLEND_INVSRCALPHA
expr_stmt|;
break|break;
case|case
name|GL_DST_ALPHA
case|:
name|d3dBlend
operator|=
name|D3DBLEND_DESTALPHA
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_DST_ALPHA
case|:
name|d3dBlend
operator|=
name|D3DBLEND_INVDESTALPHA
expr_stmt|;
break|break;
case|case
name|GL_CONSTANT_COLOR
case|:
name|d3dBlend
operator|=
name|D3DBLEND_BLENDFACTOR
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_CONSTANT_COLOR
case|:
name|d3dBlend
operator|=
name|D3DBLEND_INVBLENDFACTOR
expr_stmt|;
break|break;
case|case
name|GL_CONSTANT_ALPHA
case|:
name|d3dBlend
operator|=
name|D3DBLEND_BLENDFACTOR
expr_stmt|;
break|break;
case|case
name|GL_ONE_MINUS_CONSTANT_ALPHA
case|:
name|d3dBlend
operator|=
name|D3DBLEND_INVBLENDFACTOR
expr_stmt|;
break|break;
case|case
name|GL_SRC_ALPHA_SATURATE
case|:
name|d3dBlend
operator|=
name|D3DBLEND_SRCALPHASAT
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dBlend
return|;
block|}
DECL|function|ConvertBlendOp
name|D3DBLENDOP
name|ConvertBlendOp
parameter_list|(
name|GLenum
name|blendOp
parameter_list|)
block|{
name|D3DBLENDOP
name|d3dBlendOp
init|=
name|D3DBLENDOP_ADD
decl_stmt|;
switch|switch
condition|(
name|blendOp
condition|)
block|{
case|case
name|GL_FUNC_ADD
case|:
name|d3dBlendOp
operator|=
name|D3DBLENDOP_ADD
expr_stmt|;
break|break;
case|case
name|GL_FUNC_SUBTRACT
case|:
name|d3dBlendOp
operator|=
name|D3DBLENDOP_SUBTRACT
expr_stmt|;
break|break;
case|case
name|GL_FUNC_REVERSE_SUBTRACT
case|:
name|d3dBlendOp
operator|=
name|D3DBLENDOP_REVSUBTRACT
expr_stmt|;
break|break;
case|case
name|GL_MIN_EXT
case|:
name|d3dBlendOp
operator|=
name|D3DBLENDOP_MIN
expr_stmt|;
break|break;
case|case
name|GL_MAX_EXT
case|:
name|d3dBlendOp
operator|=
name|D3DBLENDOP_MAX
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dBlendOp
return|;
block|}
DECL|function|ConvertStencilOp
name|D3DSTENCILOP
name|ConvertStencilOp
parameter_list|(
name|GLenum
name|stencilOp
parameter_list|)
block|{
name|D3DSTENCILOP
name|d3dStencilOp
init|=
name|D3DSTENCILOP_KEEP
decl_stmt|;
switch|switch
condition|(
name|stencilOp
condition|)
block|{
case|case
name|GL_ZERO
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_ZERO
expr_stmt|;
break|break;
case|case
name|GL_KEEP
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_KEEP
expr_stmt|;
break|break;
case|case
name|GL_REPLACE
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_REPLACE
expr_stmt|;
break|break;
case|case
name|GL_INCR
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_INCRSAT
expr_stmt|;
break|break;
case|case
name|GL_DECR
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_DECRSAT
expr_stmt|;
break|break;
case|case
name|GL_INVERT
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_INVERT
expr_stmt|;
break|break;
case|case
name|GL_INCR_WRAP
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_INCR
expr_stmt|;
break|break;
case|case
name|GL_DECR_WRAP
case|:
name|d3dStencilOp
operator|=
name|D3DSTENCILOP_DECR
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dStencilOp
return|;
block|}
DECL|function|ConvertTextureWrap
name|D3DTEXTUREADDRESS
name|ConvertTextureWrap
parameter_list|(
name|GLenum
name|wrap
parameter_list|)
block|{
name|D3DTEXTUREADDRESS
name|d3dWrap
init|=
name|D3DTADDRESS_WRAP
decl_stmt|;
switch|switch
condition|(
name|wrap
condition|)
block|{
case|case
name|GL_REPEAT
case|:
name|d3dWrap
operator|=
name|D3DTADDRESS_WRAP
expr_stmt|;
break|break;
case|case
name|GL_CLAMP_TO_EDGE
case|:
name|d3dWrap
operator|=
name|D3DTADDRESS_CLAMP
expr_stmt|;
break|break;
case|case
name|GL_MIRRORED_REPEAT
case|:
name|d3dWrap
operator|=
name|D3DTADDRESS_MIRROR
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dWrap
return|;
block|}
DECL|function|ConvertCullMode
name|D3DCULL
name|ConvertCullMode
parameter_list|(
name|GLenum
name|cullFace
parameter_list|,
name|GLenum
name|frontFace
parameter_list|)
block|{
name|D3DCULL
name|cull
init|=
name|D3DCULL_CCW
decl_stmt|;
switch|switch
condition|(
name|cullFace
condition|)
block|{
case|case
name|GL_FRONT
case|:
name|cull
operator|=
operator|(
name|frontFace
operator|==
name|GL_CCW
condition|?
name|D3DCULL_CW
else|:
name|D3DCULL_CCW
operator|)
expr_stmt|;
break|break;
case|case
name|GL_BACK
case|:
name|cull
operator|=
operator|(
name|frontFace
operator|==
name|GL_CCW
condition|?
name|D3DCULL_CCW
else|:
name|D3DCULL_CW
operator|)
expr_stmt|;
break|break;
case|case
name|GL_FRONT_AND_BACK
case|:
name|cull
operator|=
name|D3DCULL_NONE
expr_stmt|;
comment|// culling will be handled during draw
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|cull
return|;
block|}
DECL|function|ConvertCubeFace
name|D3DCUBEMAP_FACES
name|ConvertCubeFace
parameter_list|(
name|GLenum
name|cubeFace
parameter_list|)
block|{
name|D3DCUBEMAP_FACES
name|face
init|=
name|D3DCUBEMAP_FACE_POSITIVE_X
decl_stmt|;
switch|switch
condition|(
name|cubeFace
condition|)
block|{
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
case|:
name|face
operator|=
name|D3DCUBEMAP_FACE_POSITIVE_X
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
case|:
name|face
operator|=
name|D3DCUBEMAP_FACE_NEGATIVE_X
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
case|:
name|face
operator|=
name|D3DCUBEMAP_FACE_POSITIVE_Y
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
case|:
name|face
operator|=
name|D3DCUBEMAP_FACE_NEGATIVE_Y
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
case|:
name|face
operator|=
name|D3DCUBEMAP_FACE_POSITIVE_Z
expr_stmt|;
break|break;
case|case
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
case|:
name|face
operator|=
name|D3DCUBEMAP_FACE_NEGATIVE_Z
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|face
return|;
block|}
DECL|function|ConvertColorMask
name|DWORD
name|ConvertColorMask
parameter_list|(
name|bool
name|red
parameter_list|,
name|bool
name|green
parameter_list|,
name|bool
name|blue
parameter_list|,
name|bool
name|alpha
parameter_list|)
block|{
return|return
operator|(
name|red
condition|?
name|D3DCOLORWRITEENABLE_RED
else|:
literal|0
operator|)
operator||
operator|(
name|green
condition|?
name|D3DCOLORWRITEENABLE_GREEN
else|:
literal|0
operator|)
operator||
operator|(
name|blue
condition|?
name|D3DCOLORWRITEENABLE_BLUE
else|:
literal|0
operator|)
operator||
operator|(
name|alpha
condition|?
name|D3DCOLORWRITEENABLE_ALPHA
else|:
literal|0
operator|)
return|;
block|}
DECL|function|ConvertMagFilter
name|D3DTEXTUREFILTERTYPE
name|ConvertMagFilter
parameter_list|(
name|GLenum
name|magFilter
parameter_list|,
name|float
name|maxAnisotropy
parameter_list|)
block|{
if|if
condition|(
name|maxAnisotropy
operator|>
literal|1.0f
condition|)
block|{
return|return
name|D3DTEXF_ANISOTROPIC
return|;
block|}
name|D3DTEXTUREFILTERTYPE
name|d3dMagFilter
init|=
name|D3DTEXF_POINT
decl_stmt|;
switch|switch
condition|(
name|magFilter
condition|)
block|{
case|case
name|GL_NEAREST
case|:
name|d3dMagFilter
operator|=
name|D3DTEXF_POINT
expr_stmt|;
break|break;
case|case
name|GL_LINEAR
case|:
name|d3dMagFilter
operator|=
name|D3DTEXF_LINEAR
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
return|return
name|d3dMagFilter
return|;
block|}
DECL|function|ConvertMinFilter
name|void
name|ConvertMinFilter
parameter_list|(
name|GLenum
name|minFilter
parameter_list|,
name|D3DTEXTUREFILTERTYPE
modifier|*
name|d3dMinFilter
parameter_list|,
name|D3DTEXTUREFILTERTYPE
modifier|*
name|d3dMipFilter
parameter_list|,
name|float
name|maxAnisotropy
parameter_list|)
block|{
switch|switch
condition|(
name|minFilter
condition|)
block|{
case|case
name|GL_NEAREST
case|:
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_POINT
expr_stmt|;
operator|*
name|d3dMipFilter
operator|=
name|D3DTEXF_NONE
expr_stmt|;
break|break;
case|case
name|GL_LINEAR
case|:
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_LINEAR
expr_stmt|;
operator|*
name|d3dMipFilter
operator|=
name|D3DTEXF_NONE
expr_stmt|;
break|break;
case|case
name|GL_NEAREST_MIPMAP_NEAREST
case|:
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_POINT
expr_stmt|;
operator|*
name|d3dMipFilter
operator|=
name|D3DTEXF_POINT
expr_stmt|;
break|break;
case|case
name|GL_LINEAR_MIPMAP_NEAREST
case|:
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_LINEAR
expr_stmt|;
operator|*
name|d3dMipFilter
operator|=
name|D3DTEXF_POINT
expr_stmt|;
break|break;
case|case
name|GL_NEAREST_MIPMAP_LINEAR
case|:
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_POINT
expr_stmt|;
operator|*
name|d3dMipFilter
operator|=
name|D3DTEXF_LINEAR
expr_stmt|;
break|break;
case|case
name|GL_LINEAR_MIPMAP_LINEAR
case|:
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_LINEAR
expr_stmt|;
operator|*
name|d3dMipFilter
operator|=
name|D3DTEXF_LINEAR
expr_stmt|;
break|break;
default|default:
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_POINT
expr_stmt|;
operator|*
name|d3dMipFilter
operator|=
name|D3DTEXF_NONE
expr_stmt|;
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|maxAnisotropy
operator|>
literal|1.0f
condition|)
block|{
operator|*
name|d3dMinFilter
operator|=
name|D3DTEXF_ANISOTROPIC
expr_stmt|;
block|}
block|}
DECL|function|GetMultisampleType
name|D3DMULTISAMPLE_TYPE
name|GetMultisampleType
parameter_list|(
name|GLuint
name|samples
parameter_list|)
block|{
return|return
operator|(
name|samples
operator|>
literal|1
operator|)
condition|?
cast|static_cast
argument_list|<
name|D3DMULTISAMPLE_TYPE
argument_list|>
argument_list|(
name|samples
argument_list|)
else|:
name|D3DMULTISAMPLE_NONE
return|;
block|}
block|}
DECL|namespace|d3d9_gl
namespace|namespace
name|d3d9_gl
block|{
DECL|function|GetSamplesCount
name|GLsizei
name|GetSamplesCount
parameter_list|(
name|D3DMULTISAMPLE_TYPE
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|!=
name|D3DMULTISAMPLE_NONMASKABLE
operator|)
condition|?
name|type
else|:
literal|0
return|;
block|}
DECL|function|IsFormatChannelEquivalent
name|bool
name|IsFormatChannelEquivalent
parameter_list|(
name|D3DFORMAT
name|d3dformat
parameter_list|,
name|GLenum
name|format
parameter_list|)
block|{
name|GLenum
name|internalFormat
init|=
name|d3d9
operator|::
name|GetD3DFormatInfo
argument_list|(
name|d3dformat
argument_list|)
operator|.
name|internalFormat
decl_stmt|;
name|GLenum
name|convertedFormat
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|)
operator|.
name|format
decl_stmt|;
return|return
name|convertedFormat
operator|==
name|format
return|;
block|}
DECL|function|GenerateTextureFormatCaps
specifier|static
name|gl
operator|::
name|TextureCaps
name|GenerateTextureFormatCaps
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
name|IDirect3D9
modifier|*
name|d3d9
parameter_list|,
name|D3DDEVTYPE
name|deviceType
parameter_list|,
name|UINT
name|adapter
parameter_list|,
name|D3DFORMAT
name|adapterFormat
parameter_list|)
block|{
name|gl
operator|::
name|TextureCaps
name|textureCaps
decl_stmt|;
specifier|const
name|d3d9
operator|::
name|TextureFormat
modifier|&
name|d3dFormatInfo
init|=
name|d3d9
operator|::
name|GetTextureFormatInfo
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatInfo
operator|.
name|depthBits
operator|>
literal|0
operator|||
name|formatInfo
operator|.
name|stencilBits
operator|>
literal|0
condition|)
block|{
name|textureCaps
operator|.
name|texturable
operator|=
name|SUCCEEDED
argument_list|(
name|d3d9
operator|->
name|CheckDeviceFormat
argument_list|(
name|adapter
argument_list|,
name|deviceType
argument_list|,
name|adapterFormat
argument_list|,
literal|0
argument_list|,
name|D3DRTYPE_TEXTURE
argument_list|,
name|d3dFormatInfo
operator|.
name|texFormat
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|textureCaps
operator|.
name|texturable
operator|=
name|SUCCEEDED
argument_list|(
name|d3d9
operator|->
name|CheckDeviceFormat
argument_list|(
name|adapter
argument_list|,
name|deviceType
argument_list|,
name|adapterFormat
argument_list|,
literal|0
argument_list|,
name|D3DRTYPE_TEXTURE
argument_list|,
name|d3dFormatInfo
operator|.
name|texFormat
argument_list|)
argument_list|)
operator|&&
name|SUCCEEDED
argument_list|(
name|d3d9
operator|->
name|CheckDeviceFormat
argument_list|(
name|adapter
argument_list|,
name|deviceType
argument_list|,
name|adapterFormat
argument_list|,
literal|0
argument_list|,
name|D3DRTYPE_CUBETEXTURE
argument_list|,
name|d3dFormatInfo
operator|.
name|texFormat
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|textureCaps
operator|.
name|filterable
operator|=
name|SUCCEEDED
argument_list|(
name|d3d9
operator|->
name|CheckDeviceFormat
argument_list|(
name|adapter
argument_list|,
name|deviceType
argument_list|,
name|adapterFormat
argument_list|,
name|D3DUSAGE_QUERY_FILTER
argument_list|,
name|D3DRTYPE_TEXTURE
argument_list|,
name|d3dFormatInfo
operator|.
name|texFormat
argument_list|)
argument_list|)
expr_stmt|;
name|textureCaps
operator|.
name|renderable
operator|=
name|SUCCEEDED
argument_list|(
name|d3d9
operator|->
name|CheckDeviceFormat
argument_list|(
name|adapter
argument_list|,
name|deviceType
argument_list|,
name|adapterFormat
argument_list|,
name|D3DUSAGE_DEPTHSTENCIL
argument_list|,
name|D3DRTYPE_TEXTURE
argument_list|,
name|d3dFormatInfo
operator|.
name|renderFormat
argument_list|)
argument_list|)
operator|||
name|SUCCEEDED
argument_list|(
name|d3d9
operator|->
name|CheckDeviceFormat
argument_list|(
name|adapter
argument_list|,
name|deviceType
argument_list|,
name|adapterFormat
argument_list|,
name|D3DUSAGE_RENDERTARGET
argument_list|,
name|D3DRTYPE_TEXTURE
argument_list|,
name|d3dFormatInfo
operator|.
name|renderFormat
argument_list|)
argument_list|)
expr_stmt|;
name|textureCaps
operator|.
name|sampleCounts
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
name|D3DMULTISAMPLE_2_SAMPLES
init|;
name|i
operator|<=
name|D3DMULTISAMPLE_16_SAMPLES
condition|;
name|i
operator|++
control|)
block|{
name|D3DMULTISAMPLE_TYPE
name|multisampleType
init|=
name|D3DMULTISAMPLE_TYPE
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HRESULT
name|result
init|=
name|d3d9
operator|->
name|CheckDeviceMultiSampleType
argument_list|(
name|adapter
argument_list|,
name|deviceType
argument_list|,
name|d3dFormatInfo
operator|.
name|renderFormat
argument_list|,
name|TRUE
argument_list|,
name|multisampleType
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|textureCaps
operator|.
name|sampleCounts
operator|.
name|insert
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|textureCaps
return|;
block|}
DECL|function|GenerateCaps
name|void
name|GenerateCaps
parameter_list|(
name|IDirect3D9
modifier|*
name|d3d9
parameter_list|,
name|IDirect3DDevice9
modifier|*
name|device
parameter_list|,
name|D3DDEVTYPE
name|deviceType
parameter_list|,
name|UINT
name|adapter
parameter_list|,
name|gl
operator|::
name|Caps
modifier|*
name|caps
parameter_list|,
name|gl
operator|::
name|TextureCapsMap
modifier|*
name|textureCapsMap
parameter_list|,
name|gl
operator|::
name|Extensions
modifier|*
name|extensions
parameter_list|)
block|{
name|D3DCAPS9
name|deviceCaps
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|d3d9
operator|->
name|GetDeviceCaps
argument_list|(
name|adapter
argument_list|,
name|deviceType
argument_list|,
operator|&
name|deviceCaps
argument_list|)
argument_list|)
condition|)
block|{
comment|// Can't continue with out device caps
return|return;
block|}
name|D3DDISPLAYMODE
name|currentDisplayMode
decl_stmt|;
name|d3d9
operator|->
name|GetAdapterDisplayMode
argument_list|(
name|adapter
argument_list|,
operator|&
name|currentDisplayMode
argument_list|)
expr_stmt|;
name|GLuint
name|maxSamples
init|=
literal|0
decl_stmt|;
specifier|const
name|gl
operator|::
name|FormatSet
modifier|&
name|allFormats
init|=
name|gl
operator|::
name|GetAllSizedInternalFormats
argument_list|()
decl_stmt|;
for|for
control|(
name|gl
operator|::
name|FormatSet
operator|::
name|const_iterator
name|internalFormat
init|=
name|allFormats
operator|.
name|begin
argument_list|()
init|;
name|internalFormat
operator|!=
name|allFormats
operator|.
name|end
argument_list|()
condition|;
operator|++
name|internalFormat
control|)
block|{
name|gl
operator|::
name|TextureCaps
name|textureCaps
init|=
name|GenerateTextureFormatCaps
argument_list|(
operator|*
name|internalFormat
argument_list|,
name|d3d9
argument_list|,
name|deviceType
argument_list|,
name|adapter
argument_list|,
name|currentDisplayMode
operator|.
name|Format
argument_list|)
decl_stmt|;
name|textureCapsMap
operator|->
name|insert
argument_list|(
operator|*
name|internalFormat
argument_list|,
name|textureCaps
argument_list|)
expr_stmt|;
name|maxSamples
operator|=
name|std
operator|::
name|max
argument_list|(
name|maxSamples
argument_list|,
name|textureCaps
operator|.
name|getMaxSamples
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
operator|*
name|internalFormat
argument_list|)
operator|.
name|compressed
condition|)
block|{
name|caps
operator|->
name|compressedTextureFormats
operator|.
name|push_back
argument_list|(
operator|*
name|internalFormat
argument_list|)
expr_stmt|;
block|}
block|}
comment|// GL core feature limits
name|caps
operator|->
name|maxElementIndex
operator|=
expr|static_cast
operator|<
name|GLint64
operator|>
operator|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|unsigned
name|int
argument_list|>
operator|::
name|max
argument_list|()
operator|)
expr_stmt|;
comment|// 3D textures are unimplemented in D3D9
name|caps
operator|->
name|max3DTextureSize
operator|=
literal|1
expr_stmt|;
comment|// Only one limit in GL, use the minimum dimension
name|caps
operator|->
name|max2DTextureSize
operator|=
name|std
operator|::
name|min
argument_list|(
name|deviceCaps
operator|.
name|MaxTextureWidth
argument_list|,
name|deviceCaps
operator|.
name|MaxTextureHeight
argument_list|)
expr_stmt|;
comment|// D3D treats cube maps as a special case of 2D textures
name|caps
operator|->
name|maxCubeMapTextureSize
operator|=
name|caps
operator|->
name|max2DTextureSize
expr_stmt|;
comment|// Array textures are not available in D3D9
name|caps
operator|->
name|maxArrayTextureLayers
operator|=
literal|1
expr_stmt|;
comment|// ES3-only feature
name|caps
operator|->
name|maxLODBias
operator|=
literal|0.0f
expr_stmt|;
comment|// No specific limits on render target size, maximum 2D texture size is equivalent
name|caps
operator|->
name|maxRenderbufferSize
operator|=
name|caps
operator|->
name|max2DTextureSize
expr_stmt|;
comment|// Draw buffers are not supported in D3D9
name|caps
operator|->
name|maxDrawBuffers
operator|=
literal|1
expr_stmt|;
name|caps
operator|->
name|maxColorAttachments
operator|=
literal|1
expr_stmt|;
comment|// No specific limits on viewport size, maximum 2D texture size is equivalent
name|caps
operator|->
name|maxViewportWidth
operator|=
name|caps
operator|->
name|max2DTextureSize
expr_stmt|;
name|caps
operator|->
name|maxViewportHeight
operator|=
name|caps
operator|->
name|maxViewportWidth
expr_stmt|;
comment|// Point size is clamped to 1.0f when the shader model is less than 3
name|caps
operator|->
name|minAliasedPointSize
operator|=
literal|1.0f
expr_stmt|;
name|caps
operator|->
name|maxAliasedPointSize
operator|=
operator|(
operator|(
name|D3DSHADER_VERSION_MAJOR
argument_list|(
name|deviceCaps
operator|.
name|PixelShaderVersion
argument_list|)
operator|>=
literal|3
operator|)
condition|?
name|deviceCaps
operator|.
name|MaxPointSize
else|:
literal|1.0f
operator|)
expr_stmt|;
comment|// Wide lines not supported
name|caps
operator|->
name|minAliasedLineWidth
operator|=
literal|1.0f
expr_stmt|;
name|caps
operator|->
name|maxAliasedLineWidth
operator|=
literal|1.0f
expr_stmt|;
comment|// Primitive count limits (unused in ES2)
name|caps
operator|->
name|maxElementsIndices
operator|=
literal|0
expr_stmt|;
name|caps
operator|->
name|maxElementsVertices
operator|=
literal|0
expr_stmt|;
comment|// Program and shader binary formats (no supported shader binary formats)
name|caps
operator|->
name|programBinaryFormats
operator|.
name|push_back
argument_list|(
name|GL_PROGRAM_BINARY_ANGLE
argument_list|)
expr_stmt|;
comment|// WaitSync is ES3-only, set to zero
name|caps
operator|->
name|maxServerWaitTimeout
operator|=
literal|0
expr_stmt|;
comment|// Vertex shader limits
name|caps
operator|->
name|maxVertexAttributes
operator|=
literal|16
expr_stmt|;
specifier|const
name|size_t
name|reservedVertexUniformVectors
init|=
literal|2
decl_stmt|;
comment|// dx_ViewAdjust and dx_DepthRange.
specifier|const
name|size_t
name|MAX_VERTEX_CONSTANT_VECTORS_D3D9
init|=
literal|256
decl_stmt|;
name|caps
operator|->
name|maxVertexUniformVectors
operator|=
name|MAX_VERTEX_CONSTANT_VECTORS_D3D9
operator|-
name|reservedVertexUniformVectors
expr_stmt|;
name|caps
operator|->
name|maxVertexUniformComponents
operator|=
name|caps
operator|->
name|maxVertexUniformVectors
operator|*
literal|4
expr_stmt|;
name|caps
operator|->
name|maxVertexUniformBlocks
operator|=
literal|0
expr_stmt|;
specifier|const
name|size_t
name|MAX_VERTEX_OUTPUT_VECTORS_SM3
init|=
literal|10
decl_stmt|;
specifier|const
name|size_t
name|MAX_VERTEX_OUTPUT_VECTORS_SM2
init|=
literal|8
decl_stmt|;
name|caps
operator|->
name|maxVertexOutputComponents
operator|=
operator|(
operator|(
name|deviceCaps
operator|.
name|VertexShaderVersion
operator|>=
name|D3DVS_VERSION
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
operator|)
condition|?
name|MAX_VERTEX_OUTPUT_VECTORS_SM3
else|:
name|MAX_VERTEX_OUTPUT_VECTORS_SM2
operator|)
operator|*
literal|4
expr_stmt|;
comment|// Only Direct3D 10 ready devices support all the necessary vertex texture formats.
comment|// We test this using D3D9 by checking support for the R16F format.
if|if
condition|(
name|deviceCaps
operator|.
name|VertexShaderVersion
operator|>=
name|D3DVS_VERSION
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
operator|&&
name|SUCCEEDED
argument_list|(
name|d3d9
operator|->
name|CheckDeviceFormat
argument_list|(
name|adapter
argument_list|,
name|deviceType
argument_list|,
name|currentDisplayMode
operator|.
name|Format
argument_list|,
name|D3DUSAGE_QUERY_VERTEXTEXTURE
argument_list|,
name|D3DRTYPE_TEXTURE
argument_list|,
name|D3DFMT_R16F
argument_list|)
argument_list|)
condition|)
block|{
specifier|const
name|size_t
name|MAX_TEXTURE_IMAGE_UNITS_VTF_SM3
init|=
literal|4
decl_stmt|;
name|caps
operator|->
name|maxVertexTextureImageUnits
operator|=
name|MAX_TEXTURE_IMAGE_UNITS_VTF_SM3
expr_stmt|;
block|}
else|else
block|{
name|caps
operator|->
name|maxVertexTextureImageUnits
operator|=
literal|0
expr_stmt|;
block|}
comment|// Fragment shader limits
specifier|const
name|size_t
name|reservedPixelUniformVectors
init|=
literal|3
decl_stmt|;
comment|// dx_ViewCoords, dx_DepthFront and dx_DepthRange.
specifier|const
name|size_t
name|MAX_PIXEL_CONSTANT_VECTORS_SM3
init|=
literal|224
decl_stmt|;
specifier|const
name|size_t
name|MAX_PIXEL_CONSTANT_VECTORS_SM2
init|=
literal|32
decl_stmt|;
name|caps
operator|->
name|maxFragmentUniformVectors
operator|=
operator|(
operator|(
name|deviceCaps
operator|.
name|PixelShaderVersion
operator|>=
name|D3DPS_VERSION
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
operator|)
condition|?
name|MAX_PIXEL_CONSTANT_VECTORS_SM3
else|:
name|MAX_PIXEL_CONSTANT_VECTORS_SM2
operator|)
operator|-
name|reservedPixelUniformVectors
expr_stmt|;
name|caps
operator|->
name|maxFragmentUniformComponents
operator|=
name|caps
operator|->
name|maxFragmentUniformVectors
operator|*
literal|4
expr_stmt|;
name|caps
operator|->
name|maxFragmentUniformBlocks
operator|=
literal|0
expr_stmt|;
name|caps
operator|->
name|maxFragmentInputComponents
operator|=
name|caps
operator|->
name|maxVertexOutputComponents
expr_stmt|;
name|caps
operator|->
name|maxTextureImageUnits
operator|=
literal|16
expr_stmt|;
name|caps
operator|->
name|minProgramTexelOffset
operator|=
literal|0
expr_stmt|;
name|caps
operator|->
name|maxProgramTexelOffset
operator|=
literal|0
expr_stmt|;
comment|// Aggregate shader limits (unused in ES2)
name|caps
operator|->
name|maxUniformBufferBindings
operator|=
literal|0
expr_stmt|;
name|caps
operator|->
name|maxUniformBlockSize
operator|=
literal|0
expr_stmt|;
name|caps
operator|->
name|uniformBufferOffsetAlignment
operator|=
literal|0
expr_stmt|;
name|caps
operator|->
name|maxCombinedUniformBlocks
operator|=
literal|0
expr_stmt|;
name|caps
operator|->
name|maxCombinedVertexUniformComponents
operator|=
literal|0
expr_stmt|;
name|caps
operator|->
name|maxCombinedFragmentUniformComponents
operator|=
literal|0
expr_stmt|;
name|caps
operator|->
name|maxVaryingComponents
operator|=
literal|0
expr_stmt|;
comment|// Aggregate shader limits
name|caps
operator|->
name|maxVaryingVectors
operator|=
name|caps
operator|->
name|maxVertexOutputComponents
operator|/
literal|4
expr_stmt|;
name|caps
operator|->
name|maxCombinedTextureImageUnits
operator|=
name|caps
operator|->
name|maxVertexTextureImageUnits
operator|+
name|caps
operator|->
name|maxTextureImageUnits
expr_stmt|;
comment|// Transform feedback limits
name|caps
operator|->
name|maxTransformFeedbackInterleavedComponents
operator|=
literal|0
expr_stmt|;
name|caps
operator|->
name|maxTransformFeedbackSeparateAttributes
operator|=
literal|0
expr_stmt|;
name|caps
operator|->
name|maxTransformFeedbackSeparateComponents
operator|=
literal|0
expr_stmt|;
comment|// GL extension support
name|extensions
operator|->
name|setTextureExtensionSupport
argument_list|(
operator|*
name|textureCapsMap
argument_list|)
expr_stmt|;
name|extensions
operator|->
name|elementIndexUint
operator|=
name|deviceCaps
operator|.
name|MaxVertexIndex
operator|>=
operator|(
literal|1
operator|<<
literal|16
operator|)
expr_stmt|;
name|extensions
operator|->
name|packedDepthStencil
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|getProgramBinary
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|rgb8rgba8
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|readFormatBGRA
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|pixelBufferObject
operator|=
literal|false
expr_stmt|;
name|extensions
operator|->
name|mapBuffer
operator|=
literal|false
expr_stmt|;
name|extensions
operator|->
name|mapBufferRange
operator|=
literal|false
expr_stmt|;
comment|// ATI cards on XP have problems with non-power-of-two textures.
name|D3DADAPTER_IDENTIFIER9
name|adapterId
init|=
block|{
literal|0
block|}
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|d3d9
operator|->
name|GetAdapterIdentifier
argument_list|(
name|adapter
argument_list|,
literal|0
argument_list|,
operator|&
name|adapterId
argument_list|)
argument_list|)
condition|)
block|{
name|extensions
operator|->
name|textureNPOT
operator|=
operator|!
operator|(
name|deviceCaps
operator|.
name|TextureCaps
operator|&
name|D3DPTEXTURECAPS_POW2
operator|)
operator|&&
operator|!
operator|(
name|deviceCaps
operator|.
name|TextureCaps
operator|&
name|D3DPTEXTURECAPS_CUBEMAP_POW2
operator|)
operator|&&
operator|!
operator|(
name|deviceCaps
operator|.
name|TextureCaps
operator|&
name|D3DPTEXTURECAPS_NONPOW2CONDITIONAL
operator|)
operator|&&
operator|!
operator|(
name|isWindowsVistaOrGreater
argument_list|()
operator|&&
name|adapterId
operator|.
name|VendorId
operator|==
name|VENDOR_ID_AMD
operator|)
expr_stmt|;
block|}
else|else
block|{
name|extensions
operator|->
name|textureNPOT
operator|=
literal|false
expr_stmt|;
block|}
name|extensions
operator|->
name|drawBuffers
operator|=
literal|false
expr_stmt|;
name|extensions
operator|->
name|textureStorage
operator|=
literal|true
expr_stmt|;
comment|// Must support a minimum of 2:1 anisotropy for max anisotropy to be considered supported, per the spec
name|extensions
operator|->
name|textureFilterAnisotropic
operator|=
operator|(
name|deviceCaps
operator|.
name|RasterCaps
operator|&
name|D3DPRASTERCAPS_ANISOTROPY
operator|)
operator|!=
literal|0
operator|&&
name|deviceCaps
operator|.
name|MaxAnisotropy
operator|>=
literal|2
expr_stmt|;
name|extensions
operator|->
name|maxTextureAnisotropy
operator|=
cast|static_cast
argument_list|<
name|GLfloat
argument_list|>
argument_list|(
name|deviceCaps
operator|.
name|MaxAnisotropy
argument_list|)
expr_stmt|;
comment|// Check occlusion query support by trying to create one
name|IDirect3DQuery9
modifier|*
name|occlusionQuery
init|=
name|NULL
decl_stmt|;
name|extensions
operator|->
name|occlusionQueryBoolean
operator|=
name|SUCCEEDED
argument_list|(
name|device
operator|->
name|CreateQuery
argument_list|(
name|D3DQUERYTYPE_OCCLUSION
argument_list|,
operator|&
name|occlusionQuery
argument_list|)
argument_list|)
operator|&&
name|occlusionQuery
expr_stmt|;
name|SafeRelease
argument_list|(
name|occlusionQuery
argument_list|)
expr_stmt|;
comment|// Check event query support by trying to create one
name|IDirect3DQuery9
modifier|*
name|eventQuery
init|=
name|NULL
decl_stmt|;
name|extensions
operator|->
name|fence
operator|=
name|SUCCEEDED
argument_list|(
name|device
operator|->
name|CreateQuery
argument_list|(
name|D3DQUERYTYPE_EVENT
argument_list|,
operator|&
name|eventQuery
argument_list|)
argument_list|)
operator|&&
name|eventQuery
expr_stmt|;
name|SafeRelease
argument_list|(
name|eventQuery
argument_list|)
expr_stmt|;
name|extensions
operator|->
name|timerQuery
operator|=
literal|false
expr_stmt|;
comment|// Unimplemented
name|extensions
operator|->
name|robustness
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|blendMinMax
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|framebufferBlit
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|framebufferMultisample
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|maxSamples
operator|=
name|maxSamples
expr_stmt|;
name|extensions
operator|->
name|instancedArrays
operator|=
name|deviceCaps
operator|.
name|PixelShaderVersion
operator|>=
name|D3DPS_VERSION
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|extensions
operator|->
name|packReverseRowOrder
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|standardDerivatives
operator|=
operator|(
name|deviceCaps
operator|.
name|PS20Caps
operator|.
name|Caps
operator|&
name|D3DPS20CAPS_GRADIENTINSTRUCTIONS
operator|)
operator|!=
literal|0
expr_stmt|;
name|extensions
operator|->
name|shaderTextureLOD
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|fragDepth
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|textureUsage
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|translatedShaderSource
operator|=
literal|true
expr_stmt|;
name|extensions
operator|->
name|colorBufferFloat
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|namespace|d3d9
namespace|namespace
name|d3d9
block|{
DECL|function|ComputeBlockSize
name|GLuint
name|ComputeBlockSize
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|,
name|GLuint
name|width
parameter_list|,
name|GLuint
name|height
parameter_list|)
block|{
specifier|const
name|D3DFormat
modifier|&
name|d3dFormatInfo
init|=
name|d3d9
operator|::
name|GetD3DFormatInfo
argument_list|(
name|format
argument_list|)
decl_stmt|;
name|GLuint
name|numBlocksWide
init|=
operator|(
name|width
operator|+
name|d3dFormatInfo
operator|.
name|blockWidth
operator|-
literal|1
operator|)
operator|/
name|d3dFormatInfo
operator|.
name|blockWidth
decl_stmt|;
name|GLuint
name|numBlocksHight
init|=
operator|(
name|height
operator|+
name|d3dFormatInfo
operator|.
name|blockHeight
operator|-
literal|1
operator|)
operator|/
name|d3dFormatInfo
operator|.
name|blockHeight
decl_stmt|;
return|return
operator|(
name|d3dFormatInfo
operator|.
name|pixelBytes
operator|*
name|numBlocksWide
operator|*
name|numBlocksHight
operator|)
return|;
block|}
DECL|function|MakeValidSize
name|void
name|MakeValidSize
parameter_list|(
name|bool
name|isImage
parameter_list|,
name|D3DFORMAT
name|format
parameter_list|,
name|GLsizei
modifier|*
name|requestWidth
parameter_list|,
name|GLsizei
modifier|*
name|requestHeight
parameter_list|,
name|int
modifier|*
name|levelOffset
parameter_list|)
block|{
specifier|const
name|D3DFormat
modifier|&
name|d3dFormatInfo
init|=
name|d3d9
operator|::
name|GetD3DFormatInfo
argument_list|(
name|format
argument_list|)
decl_stmt|;
name|int
name|upsampleCount
init|=
literal|0
decl_stmt|;
comment|// Don't expand the size of full textures that are at least (blockWidth x blockHeight) already.
if|if
condition|(
name|isImage
operator|||
operator|*
name|requestWidth
operator|<
cast|static_cast
argument_list|<
name|GLsizei
argument_list|>
argument_list|(
name|d3dFormatInfo
operator|.
name|blockWidth
argument_list|)
operator|||
operator|*
name|requestHeight
operator|<
cast|static_cast
argument_list|<
name|GLsizei
argument_list|>
argument_list|(
name|d3dFormatInfo
operator|.
name|blockHeight
argument_list|)
condition|)
block|{
while|while
condition|(
operator|*
name|requestWidth
operator|%
name|d3dFormatInfo
operator|.
name|blockWidth
operator|!=
literal|0
operator|||
operator|*
name|requestHeight
operator|%
name|d3dFormatInfo
operator|.
name|blockHeight
operator|!=
literal|0
condition|)
block|{
operator|*
name|requestWidth
operator|<<=
literal|1
expr_stmt|;
operator|*
name|requestHeight
operator|<<=
literal|1
expr_stmt|;
name|upsampleCount
operator|++
expr_stmt|;
block|}
block|}
operator|*
name|levelOffset
operator|=
name|upsampleCount
expr_stmt|;
block|}
DECL|function|GetAttachmentRenderTarget
name|RenderTarget9
modifier|*
name|GetAttachmentRenderTarget
parameter_list|(
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|attachment
parameter_list|)
block|{
name|RenderTarget
modifier|*
name|renderTarget
init|=
name|rx
operator|::
name|GetAttachmentRenderTarget
argument_list|(
name|attachment
argument_list|)
decl_stmt|;
return|return
name|RenderTarget9
operator|::
name|makeRenderTarget9
argument_list|(
name|renderTarget
argument_list|)
return|;
block|}
block|}
block|}
end_namespace
end_unit
