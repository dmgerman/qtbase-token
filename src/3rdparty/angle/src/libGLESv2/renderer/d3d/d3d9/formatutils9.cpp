begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2013-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// formatutils9.cpp: Queries for GL image formats and their translations to D3D9
end_comment
begin_comment
comment|// formats.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/formatutils9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/Renderer9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/generatemip.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/loadimage.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/copyimage.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/vertexconversion.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
comment|// Each GL internal format corresponds to one D3D format and data loading function.
comment|// Due to not all formats being available all the time, some of the function/format types are wrapped
comment|// in templates that perform format support queries on a Renderer9 object which is supplied
comment|// when requesting the function or format.
DECL|typedef|FallbackPredicateFunction
typedef|typedef
name|bool
function_decl|(
modifier|*
name|FallbackPredicateFunction
function_decl|)
parameter_list|()
function_decl|;
template|template
parameter_list|<
name|FallbackPredicateFunction
name|pred
parameter_list|,
name|LoadImageFunction
name|prefered
parameter_list|,
name|LoadImageFunction
name|fallback
parameter_list|>
DECL|function|FallbackLoad
specifier|static
name|void
name|FallbackLoad
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
if|if
condition|(
name|pred
argument_list|()
condition|)
block|{
name|prefered
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|input
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|,
name|output
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fallback
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|input
argument_list|,
name|inputRowPitch
argument_list|,
name|inputDepthPitch
argument_list|,
name|output
argument_list|,
name|outputRowPitch
argument_list|,
name|outputDepthPitch
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|UnreachableLoad
specifier|static
name|void
name|UnreachableLoad
parameter_list|(
name|size_t
name|width
parameter_list|,
name|size_t
name|height
parameter_list|,
name|size_t
name|depth
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|input
parameter_list|,
name|size_t
name|inputRowPitch
parameter_list|,
name|size_t
name|inputDepthPitch
parameter_list|,
name|uint8_t
modifier|*
name|output
parameter_list|,
name|size_t
name|outputRowPitch
parameter_list|,
name|size_t
name|outputDepthPitch
parameter_list|)
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
DECL|member|D3DFMT_INTZ
specifier|const
name|D3DFORMAT
name|D3DFMT_INTZ
init|=
operator|(
call|(
name|D3DFORMAT
call|)
argument_list|(
name|MAKEFOURCC
argument_list|(
literal|'I'
argument_list|,
literal|'N'
argument_list|,
literal|'T'
argument_list|,
literal|'Z'
argument_list|)
argument_list|)
operator|)
decl_stmt|;
DECL|member|D3DFMT_NULL
specifier|const
name|D3DFORMAT
name|D3DFMT_NULL
init|=
operator|(
call|(
name|D3DFORMAT
call|)
argument_list|(
name|MAKEFOURCC
argument_list|(
literal|'N'
argument_list|,
literal|'U'
argument_list|,
literal|'L'
argument_list|,
literal|'L'
argument_list|)
argument_list|)
operator|)
decl_stmt|;
DECL|struct|D3D9FormatInfo
struct|struct
name|D3D9FormatInfo
block|{
DECL|member|mTexFormat
name|D3DFORMAT
name|mTexFormat
decl_stmt|;
DECL|member|mRenderFormat
name|D3DFORMAT
name|mRenderFormat
decl_stmt|;
DECL|member|mLoadFunction
name|LoadImageFunction
name|mLoadFunction
decl_stmt|;
DECL|function|D3D9FormatInfo
name|D3D9FormatInfo
parameter_list|()
member_init_list|:
name|mTexFormat
argument_list|(
name|D3DFMT_NULL
argument_list|)
member_init_list|,
name|mRenderFormat
argument_list|(
name|D3DFMT_NULL
argument_list|)
member_init_list|,
name|mLoadFunction
argument_list|(
name|NULL
argument_list|)
block|{ }
DECL|function|D3D9FormatInfo
name|D3D9FormatInfo
parameter_list|(
name|D3DFORMAT
name|textureFormat
parameter_list|,
name|D3DFORMAT
name|renderFormat
parameter_list|,
name|LoadImageFunction
name|loadFunc
parameter_list|)
member_init_list|:
name|mTexFormat
argument_list|(
name|textureFormat
argument_list|)
member_init_list|,
name|mRenderFormat
argument_list|(
name|renderFormat
argument_list|)
member_init_list|,
name|mLoadFunction
argument_list|(
name|loadFunc
argument_list|)
block|{ }
block|}
struct|;
DECL|typedef|D3D9FormatPair
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|GLenum
argument_list|,
name|D3D9FormatInfo
argument_list|>
name|D3D9FormatPair
typedef|;
DECL|typedef|D3D9FormatMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|GLenum
argument_list|,
name|D3D9FormatInfo
argument_list|>
name|D3D9FormatMap
typedef|;
DECL|function|BuildD3D9FormatMap
specifier|static
name|D3D9FormatMap
name|BuildD3D9FormatMap
parameter_list|()
block|{
name|D3D9FormatMap
name|map
decl_stmt|;
comment|//                       | Internal format                                   | Texture format      | Render format        | Load function                           |
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_NONE
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_NULL
argument_list|,
name|D3DFMT_NULL
argument_list|,
name|UnreachableLoad
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_DEPTH_COMPONENT16
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_INTZ
argument_list|,
name|D3DFMT_D24S8
argument_list|,
name|UnreachableLoad
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_DEPTH_COMPONENT32_OES
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_INTZ
argument_list|,
name|D3DFMT_D32
argument_list|,
name|UnreachableLoad
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_DEPTH24_STENCIL8_OES
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_INTZ
argument_list|,
name|D3DFMT_D24S8
argument_list|,
name|UnreachableLoad
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_STENCIL_INDEX8
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_UNKNOWN
argument_list|,
name|D3DFMT_D24S8
argument_list|,
name|UnreachableLoad
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: What's the texture format?
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_RGBA32F_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A32B32G32R32F
argument_list|,
name|D3DFMT_A32B32G32R32F
argument_list|,
name|LoadToNative
argument_list|<
name|GLfloat
argument_list|,
literal|4
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_RGB32F_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A32B32G32R32F
argument_list|,
name|D3DFMT_A32B32G32R32F
argument_list|,
name|LoadToNative3To4
argument_list|<
name|GLfloat
argument_list|,
name|gl
operator|::
name|Float32One
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_RG32F_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_G32R32F
argument_list|,
name|D3DFMT_G32R32F
argument_list|,
name|LoadToNative
argument_list|<
name|GLfloat
argument_list|,
literal|2
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_R32F_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_R32F
argument_list|,
name|D3DFMT_R32F
argument_list|,
name|LoadToNative
argument_list|<
name|GLfloat
argument_list|,
literal|1
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_ALPHA32F_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A32B32G32R32F
argument_list|,
name|D3DFMT_UNKNOWN
argument_list|,
name|LoadA32FToRGBA32F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_LUMINANCE32F_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A32B32G32R32F
argument_list|,
name|D3DFMT_UNKNOWN
argument_list|,
name|LoadL32FToRGBA32F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_LUMINANCE_ALPHA32F_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A32B32G32R32F
argument_list|,
name|D3DFMT_UNKNOWN
argument_list|,
name|LoadLA32FToRGBA32F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_RGBA16F_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A16B16G16R16F
argument_list|,
name|D3DFMT_A16B16G16R16F
argument_list|,
name|LoadToNative
argument_list|<
name|GLhalf
argument_list|,
literal|4
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_RGB16F_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A16B16G16R16F
argument_list|,
name|D3DFMT_A16B16G16R16F
argument_list|,
name|LoadToNative3To4
argument_list|<
name|GLhalf
argument_list|,
name|gl
operator|::
name|Float16One
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_RG16F_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_G16R16F
argument_list|,
name|D3DFMT_G16R16F
argument_list|,
name|LoadToNative
argument_list|<
name|GLhalf
argument_list|,
literal|2
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_R16F_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_R16F
argument_list|,
name|D3DFMT_R16F
argument_list|,
name|LoadToNative
argument_list|<
name|GLhalf
argument_list|,
literal|1
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_ALPHA16F_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A16B16G16R16F
argument_list|,
name|D3DFMT_UNKNOWN
argument_list|,
name|LoadA16FToRGBA16F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_LUMINANCE16F_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A16B16G16R16F
argument_list|,
name|D3DFMT_UNKNOWN
argument_list|,
name|LoadL16FToRGBA16F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_LUMINANCE_ALPHA16F_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A16B16G16R16F
argument_list|,
name|D3DFMT_UNKNOWN
argument_list|,
name|LoadLA16FToRGBA16F
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_ALPHA8_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A8R8G8B8
argument_list|,
name|D3DFMT_A8R8G8B8
argument_list|,
name|FallbackLoad
argument_list|<
name|gl
operator|::
name|supportsSSE2
argument_list|,
name|LoadA8ToBGRA8_SSE2
argument_list|,
name|LoadA8ToBGRA8
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_RGB8_OES
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_X8R8G8B8
argument_list|,
name|D3DFMT_X8R8G8B8
argument_list|,
name|LoadRGB8ToBGRX8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_RGB565
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_X8R8G8B8
argument_list|,
name|D3DFMT_X8R8G8B8
argument_list|,
name|LoadR5G6B5ToBGRA8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_RGBA8_OES
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A8R8G8B8
argument_list|,
name|D3DFMT_A8R8G8B8
argument_list|,
name|FallbackLoad
argument_list|<
name|gl
operator|::
name|supportsSSE2
argument_list|,
name|LoadRGBA8ToBGRA8_SSE2
argument_list|,
name|LoadRGBA8ToBGRA8
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_RGBA4
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A8R8G8B8
argument_list|,
name|D3DFMT_A8R8G8B8
argument_list|,
name|LoadRGBA4ToBGRA8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_RGB5_A1
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A8R8G8B8
argument_list|,
name|D3DFMT_A8R8G8B8
argument_list|,
name|LoadRGB5A1ToBGRA8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_R8_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_X8R8G8B8
argument_list|,
name|D3DFMT_X8R8G8B8
argument_list|,
name|LoadR8ToBGRX8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_RG8_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_X8R8G8B8
argument_list|,
name|D3DFMT_X8R8G8B8
argument_list|,
name|LoadRG8ToBGRX8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_BGRA8_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A8R8G8B8
argument_list|,
name|D3DFMT_A8R8G8B8
argument_list|,
name|LoadToNative
argument_list|<
name|GLubyte
argument_list|,
literal|4
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_BGRA4_ANGLEX
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A8R8G8B8
argument_list|,
name|D3DFMT_A8R8G8B8
argument_list|,
name|LoadBGRA4ToBGRA8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_BGR5_A1_ANGLEX
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A8R8G8B8
argument_list|,
name|D3DFMT_A8R8G8B8
argument_list|,
name|LoadBGR5A1ToBGRA8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_COMPRESSED_RGB_S3TC_DXT1_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_DXT1
argument_list|,
name|D3DFMT_UNKNOWN
argument_list|,
name|LoadCompressedToNative
argument_list|<
literal|4
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_DXT1
argument_list|,
name|D3DFMT_UNKNOWN
argument_list|,
name|LoadCompressedToNative
argument_list|<
literal|4
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_DXT3
argument_list|,
name|D3DFMT_UNKNOWN
argument_list|,
name|LoadCompressedToNative
argument_list|<
literal|4
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_DXT5
argument_list|,
name|D3DFMT_UNKNOWN
argument_list|,
name|LoadCompressedToNative
argument_list|<
literal|4
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// These formats require checking if the renderer supports D3DFMT_L8 or D3DFMT_A8L8 and
comment|// then changing the format and loading function appropriately.
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_LUMINANCE8_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_L8
argument_list|,
name|D3DFMT_UNKNOWN
argument_list|,
name|LoadToNative
argument_list|<
name|GLubyte
argument_list|,
literal|1
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatPair
argument_list|(
name|GL_LUMINANCE8_ALPHA8_EXT
argument_list|,
name|D3D9FormatInfo
argument_list|(
name|D3DFMT_A8L8
argument_list|,
name|D3DFMT_UNKNOWN
argument_list|,
name|LoadToNative
argument_list|<
name|GLubyte
argument_list|,
literal|2
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|function|GetD3D9FormatInfo
specifier|static
name|bool
name|GetD3D9FormatInfo
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|,
name|D3D9FormatInfo
modifier|*
name|outFormatInfo
parameter_list|)
block|{
specifier|static
specifier|const
name|D3D9FormatMap
name|formatMap
init|=
name|BuildD3D9FormatMap
argument_list|()
decl_stmt|;
name|D3D9FormatMap
operator|::
name|const_iterator
name|iter
init|=
name|formatMap
operator|.
name|find
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|formatMap
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|outFormatInfo
condition|)
block|{
operator|*
name|outFormatInfo
operator|=
name|iter
operator|->
name|second
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// A map to determine the pixel size and mip generation function of a given D3D format
DECL|struct|D3DFormatInfo
struct|struct
name|D3DFormatInfo
block|{
DECL|member|mPixelBits
name|GLuint
name|mPixelBits
decl_stmt|;
DECL|member|mBlockWidth
name|GLuint
name|mBlockWidth
decl_stmt|;
DECL|member|mBlockHeight
name|GLuint
name|mBlockHeight
decl_stmt|;
DECL|member|mInternalFormat
name|GLenum
name|mInternalFormat
decl_stmt|;
DECL|member|mMipGenerationFunction
name|MipGenerationFunction
name|mMipGenerationFunction
decl_stmt|;
DECL|member|mColorReadFunction
name|ColorReadFunction
name|mColorReadFunction
decl_stmt|;
DECL|function|D3DFormatInfo
name|D3DFormatInfo
parameter_list|()
member_init_list|:
name|mPixelBits
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mBlockWidth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mBlockHeight
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mInternalFormat
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|mMipGenerationFunction
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mColorReadFunction
argument_list|(
name|NULL
argument_list|)
block|{ }
DECL|function|D3DFormatInfo
name|D3DFormatInfo
parameter_list|(
name|GLuint
name|pixelBits
parameter_list|,
name|GLuint
name|blockWidth
parameter_list|,
name|GLuint
name|blockHeight
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|MipGenerationFunction
name|mipFunc
parameter_list|,
name|ColorReadFunction
name|readFunc
parameter_list|)
member_init_list|:
name|mPixelBits
argument_list|(
name|pixelBits
argument_list|)
member_init_list|,
name|mBlockWidth
argument_list|(
name|blockWidth
argument_list|)
member_init_list|,
name|mBlockHeight
argument_list|(
name|blockHeight
argument_list|)
member_init_list|,
name|mInternalFormat
argument_list|(
name|internalFormat
argument_list|)
member_init_list|,
name|mMipGenerationFunction
argument_list|(
name|mipFunc
argument_list|)
member_init_list|,
name|mColorReadFunction
argument_list|(
name|readFunc
argument_list|)
block|{ }
block|}
struct|;
DECL|typedef|D3D9FormatInfoPair
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|D3DFORMAT
argument_list|,
name|D3DFormatInfo
argument_list|>
name|D3D9FormatInfoPair
typedef|;
DECL|typedef|D3D9FormatInfoMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|D3DFORMAT
argument_list|,
name|D3DFormatInfo
argument_list|>
name|D3D9FormatInfoMap
typedef|;
DECL|function|BuildD3D9FormatInfoMap
specifier|static
name|D3D9FormatInfoMap
name|BuildD3D9FormatInfoMap
parameter_list|()
block|{
name|D3D9FormatInfoMap
name|map
decl_stmt|;
comment|//                           | D3DFORMAT           |             | S  |W |H | Internal format                   | Mip generation function   | Color read function             |
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_NULL
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_NONE
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_UNKNOWN
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GL_NONE
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_L8
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_LUMINANCE8_EXT
argument_list|,
name|GenerateMip
argument_list|<
name|L8
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|L8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_A8
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_ALPHA8_EXT
argument_list|,
name|GenerateMip
argument_list|<
name|A8
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|A8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_A8L8
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_LUMINANCE8_ALPHA8_EXT
argument_list|,
name|GenerateMip
argument_list|<
name|A8L8
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|A8L8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_A4R4G4B4
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_BGRA4_ANGLEX
argument_list|,
name|GenerateMip
argument_list|<
name|B4G4R4A4
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|B4G4R4A4
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_A1R5G5B5
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_BGR5_A1_ANGLEX
argument_list|,
name|GenerateMip
argument_list|<
name|B5G5R5A1
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|B5G5R5A1
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_R5G6B5
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_RGB565
argument_list|,
name|GenerateMip
argument_list|<
name|R5G6B5
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R5G6B5
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_X8R8G8B8
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_BGRA8_EXT
argument_list|,
name|GenerateMip
argument_list|<
name|B8G8R8X8
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|B8G8R8X8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_A8R8G8B8
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_BGRA8_EXT
argument_list|,
name|GenerateMip
argument_list|<
name|B8G8R8A8
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|B8G8R8A8
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_R16F
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_R16F_EXT
argument_list|,
name|GenerateMip
argument_list|<
name|R16F
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_G16R16F
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_RG16F_EXT
argument_list|,
name|GenerateMip
argument_list|<
name|R16G16F
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R16G16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_A16B16G16R16F
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|64
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_RGBA16F_EXT
argument_list|,
name|GenerateMip
argument_list|<
name|R16G16B16A16F
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R16G16B16A16F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_R32F
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_R32F_EXT
argument_list|,
name|GenerateMip
argument_list|<
name|R32F
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R32F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_G32R32F
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|64
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_RG32F_EXT
argument_list|,
name|GenerateMip
argument_list|<
name|R32G32F
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R32G32F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_A32B32G32R32F
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|128
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_RGBA32F_EXT
argument_list|,
name|GenerateMip
argument_list|<
name|R32G32B32A32F
argument_list|>
argument_list|,
name|ReadColor
argument_list|<
name|R32G32B32A32F
argument_list|,
name|GLfloat
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_D16
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|16
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_DEPTH_COMPONENT16
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_D24S8
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_DEPTH24_STENCIL8_OES
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_D24X8
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_DEPTH_COMPONENT16
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_D32
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_DEPTH_COMPONENT32_OES
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_INTZ
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|32
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|GL_DEPTH24_STENCIL8_OES
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_DXT1
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|64
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_DXT3
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|128
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FormatInfoPair
argument_list|(
name|D3DFMT_DXT5
argument_list|,
name|D3DFormatInfo
argument_list|(
literal|128
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
name|GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|function|GetD3D9FormatInfoMap
specifier|static
specifier|const
name|D3D9FormatInfoMap
modifier|&
name|GetD3D9FormatInfoMap
parameter_list|()
block|{
specifier|static
specifier|const
name|D3D9FormatInfoMap
name|infoMap
init|=
name|BuildD3D9FormatInfoMap
argument_list|()
decl_stmt|;
return|return
name|infoMap
return|;
block|}
DECL|function|GetD3D9FormatInfo
specifier|static
name|bool
name|GetD3D9FormatInfo
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|,
name|D3DFormatInfo
modifier|*
name|outFormatInfo
parameter_list|)
block|{
specifier|const
name|D3D9FormatInfoMap
modifier|&
name|infoMap
init|=
name|GetD3D9FormatInfoMap
argument_list|()
decl_stmt|;
name|D3D9FormatInfoMap
operator|::
name|const_iterator
name|iter
init|=
name|infoMap
operator|.
name|find
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|infoMap
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
name|outFormatInfo
condition|)
block|{
operator|*
name|outFormatInfo
operator|=
name|iter
operator|->
name|second
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|function|BuildAllD3DFormatSet
specifier|static
name|d3d9
operator|::
name|D3DFormatSet
name|BuildAllD3DFormatSet
parameter_list|()
block|{
name|d3d9
operator|::
name|D3DFormatSet
name|set
decl_stmt|;
specifier|const
name|D3D9FormatInfoMap
modifier|&
name|infoMap
init|=
name|GetD3D9FormatInfoMap
argument_list|()
decl_stmt|;
for|for
control|(
name|D3D9FormatInfoMap
operator|::
name|const_iterator
name|i
init|=
name|infoMap
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|infoMap
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|set
operator|.
name|insert
argument_list|(
name|i
operator|->
name|first
argument_list|)
expr_stmt|;
block|}
return|return
name|set
return|;
block|}
DECL|struct|D3D9FastCopyFormat
struct|struct
name|D3D9FastCopyFormat
block|{
DECL|member|mSourceFormat
name|D3DFORMAT
name|mSourceFormat
decl_stmt|;
DECL|member|mDestFormat
name|GLenum
name|mDestFormat
decl_stmt|;
DECL|member|mDestType
name|GLenum
name|mDestType
decl_stmt|;
DECL|function|D3D9FastCopyFormat
name|D3D9FastCopyFormat
parameter_list|(
name|D3DFORMAT
name|sourceFormat
parameter_list|,
name|GLenum
name|destFormat
parameter_list|,
name|GLenum
name|destType
parameter_list|)
member_init_list|:
name|mSourceFormat
argument_list|(
name|sourceFormat
argument_list|)
member_init_list|,
name|mDestFormat
argument_list|(
name|destFormat
argument_list|)
member_init_list|,
name|mDestType
argument_list|(
name|destType
argument_list|)
block|{ }
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|D3D9FastCopyFormat
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|memcmp
argument_list|(
name|this
argument_list|,
operator|&
name|other
argument_list|,
sizeof|sizeof
argument_list|(
name|D3D9FastCopyFormat
argument_list|)
argument_list|)
operator|<
literal|0
return|;
block|}
block|}
struct|;
DECL|typedef|D3D9FastCopyMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|D3D9FastCopyFormat
argument_list|,
name|ColorCopyFunction
argument_list|>
name|D3D9FastCopyMap
typedef|;
DECL|typedef|D3D9FastCopyPair
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|D3D9FastCopyFormat
argument_list|,
name|ColorCopyFunction
argument_list|>
name|D3D9FastCopyPair
typedef|;
DECL|function|BuildFastCopyMap
specifier|static
name|D3D9FastCopyMap
name|BuildFastCopyMap
parameter_list|()
block|{
name|D3D9FastCopyMap
name|map
decl_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|D3D9FastCopyPair
argument_list|(
name|D3D9FastCopyFormat
argument_list|(
name|D3DFMT_A8R8G8B8
argument_list|,
name|GL_RGBA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
argument_list|,
name|CopyBGRAUByteToRGBAUByte
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|typedef|InternalFormatInitialzerPair
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|GLint
argument_list|,
name|InitializeTextureDataFunction
argument_list|>
name|InternalFormatInitialzerPair
typedef|;
DECL|typedef|InternalFormatInitialzerMap
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|GLint
argument_list|,
name|InitializeTextureDataFunction
argument_list|>
name|InternalFormatInitialzerMap
typedef|;
DECL|function|BuildInternalFormatInitialzerMap
specifier|static
name|InternalFormatInitialzerMap
name|BuildInternalFormatInitialzerMap
parameter_list|()
block|{
name|InternalFormatInitialzerMap
name|map
decl_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInitialzerPair
argument_list|(
name|GL_RGB16F
argument_list|,
name|Initialize4ComponentData
argument_list|<
name|GLhalf
argument_list|,
literal|0x0000
argument_list|,
literal|0x0000
argument_list|,
literal|0x0000
argument_list|,
name|gl
operator|::
name|Float16One
argument_list|>
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|InternalFormatInitialzerPair
argument_list|(
name|GL_RGB32F
argument_list|,
name|Initialize4ComponentData
argument_list|<
name|GLfloat
argument_list|,
literal|0x00000000
argument_list|,
literal|0x00000000
argument_list|,
literal|0x00000000
argument_list|,
name|gl
operator|::
name|Float32One
argument_list|>
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|function|GetInternalFormatInitialzerMap
specifier|static
specifier|const
name|InternalFormatInitialzerMap
modifier|&
name|GetInternalFormatInitialzerMap
parameter_list|()
block|{
specifier|static
specifier|const
name|InternalFormatInitialzerMap
name|map
init|=
name|BuildInternalFormatInitialzerMap
argument_list|()
decl_stmt|;
return|return
name|map
return|;
block|}
DECL|namespace|d3d9
namespace|namespace
name|d3d9
block|{
DECL|function|GetMipGenerationFunction
name|MipGenerationFunction
name|GetMipGenerationFunction
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
block|{
name|D3DFormatInfo
name|d3dFormatInfo
decl_stmt|;
if|if
condition|(
name|GetD3D9FormatInfo
argument_list|(
name|format
argument_list|,
operator|&
name|d3dFormatInfo
argument_list|)
condition|)
block|{
return|return
name|d3dFormatInfo
operator|.
name|mMipGenerationFunction
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|NULL
return|;
block|}
block|}
DECL|function|GetImageLoadFunction
name|LoadImageFunction
name|GetImageLoadFunction
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|D3D9FormatInfo
name|d3d9FormatInfo
decl_stmt|;
if|if
condition|(
name|GetD3D9FormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|d3d9FormatInfo
argument_list|)
condition|)
block|{
return|return
name|d3d9FormatInfo
operator|.
name|mLoadFunction
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|NULL
return|;
block|}
block|}
DECL|function|GetFormatPixelBytes
name|GLuint
name|GetFormatPixelBytes
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
block|{
name|D3DFormatInfo
name|d3dFormatInfo
decl_stmt|;
if|if
condition|(
name|GetD3D9FormatInfo
argument_list|(
name|format
argument_list|,
operator|&
name|d3dFormatInfo
argument_list|)
condition|)
block|{
return|return
name|d3dFormatInfo
operator|.
name|mPixelBits
operator|/
literal|8
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetBlockWidth
name|GLuint
name|GetBlockWidth
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
block|{
name|D3DFormatInfo
name|d3dFormatInfo
decl_stmt|;
if|if
condition|(
name|GetD3D9FormatInfo
argument_list|(
name|format
argument_list|,
operator|&
name|d3dFormatInfo
argument_list|)
condition|)
block|{
return|return
name|d3dFormatInfo
operator|.
name|mBlockWidth
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetBlockHeight
name|GLuint
name|GetBlockHeight
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
block|{
name|D3DFormatInfo
name|d3dFormatInfo
decl_stmt|;
if|if
condition|(
name|GetD3D9FormatInfo
argument_list|(
name|format
argument_list|,
operator|&
name|d3dFormatInfo
argument_list|)
condition|)
block|{
return|return
name|d3dFormatInfo
operator|.
name|mBlockHeight
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|GetBlockSize
name|GLuint
name|GetBlockSize
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|,
name|GLuint
name|width
parameter_list|,
name|GLuint
name|height
parameter_list|)
block|{
name|D3DFormatInfo
name|d3dFormatInfo
decl_stmt|;
if|if
condition|(
name|GetD3D9FormatInfo
argument_list|(
name|format
argument_list|,
operator|&
name|d3dFormatInfo
argument_list|)
condition|)
block|{
name|GLuint
name|numBlocksWide
init|=
operator|(
name|width
operator|+
name|d3dFormatInfo
operator|.
name|mBlockWidth
operator|-
literal|1
operator|)
operator|/
name|d3dFormatInfo
operator|.
name|mBlockWidth
decl_stmt|;
name|GLuint
name|numBlocksHight
init|=
operator|(
name|height
operator|+
name|d3dFormatInfo
operator|.
name|mBlockHeight
operator|-
literal|1
operator|)
operator|/
name|d3dFormatInfo
operator|.
name|mBlockHeight
decl_stmt|;
return|return
operator|(
name|d3dFormatInfo
operator|.
name|mPixelBits
operator|*
name|numBlocksWide
operator|*
name|numBlocksHight
operator|)
operator|/
literal|8
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|function|MakeValidSize
name|void
name|MakeValidSize
parameter_list|(
name|bool
name|isImage
parameter_list|,
name|D3DFORMAT
name|format
parameter_list|,
name|GLsizei
modifier|*
name|requestWidth
parameter_list|,
name|GLsizei
modifier|*
name|requestHeight
parameter_list|,
name|int
modifier|*
name|levelOffset
parameter_list|)
block|{
name|D3DFormatInfo
name|d3dFormatInfo
decl_stmt|;
if|if
condition|(
name|GetD3D9FormatInfo
argument_list|(
name|format
argument_list|,
operator|&
name|d3dFormatInfo
argument_list|)
condition|)
block|{
name|int
name|upsampleCount
init|=
literal|0
decl_stmt|;
name|GLsizei
name|blockWidth
init|=
name|d3dFormatInfo
operator|.
name|mBlockWidth
decl_stmt|;
name|GLsizei
name|blockHeight
init|=
name|d3dFormatInfo
operator|.
name|mBlockHeight
decl_stmt|;
comment|// Don't expand the size of full textures that are at least (blockWidth x blockHeight) already.
if|if
condition|(
name|isImage
operator|||
operator|*
name|requestWidth
operator|<
name|blockWidth
operator|||
operator|*
name|requestHeight
operator|<
name|blockHeight
condition|)
block|{
while|while
condition|(
operator|*
name|requestWidth
operator|%
name|blockWidth
operator|!=
literal|0
operator|||
operator|*
name|requestHeight
operator|%
name|blockHeight
operator|!=
literal|0
condition|)
block|{
operator|*
name|requestWidth
operator|<<=
literal|1
expr_stmt|;
operator|*
name|requestHeight
operator|<<=
literal|1
expr_stmt|;
name|upsampleCount
operator|++
expr_stmt|;
block|}
block|}
operator|*
name|levelOffset
operator|=
name|upsampleCount
expr_stmt|;
block|}
block|}
DECL|function|GetAllUsedD3DFormats
specifier|const
name|D3DFormatSet
modifier|&
name|GetAllUsedD3DFormats
parameter_list|()
block|{
specifier|static
specifier|const
name|D3DFormatSet
name|formatSet
init|=
name|BuildAllD3DFormatSet
argument_list|()
decl_stmt|;
return|return
name|formatSet
return|;
block|}
DECL|function|GetColorReadFunction
name|ColorReadFunction
name|GetColorReadFunction
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
block|{
name|D3DFormatInfo
name|d3dFormatInfo
decl_stmt|;
if|if
condition|(
name|GetD3D9FormatInfo
argument_list|(
name|format
argument_list|,
operator|&
name|d3dFormatInfo
argument_list|)
condition|)
block|{
return|return
name|d3dFormatInfo
operator|.
name|mColorReadFunction
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|NULL
return|;
block|}
block|}
DECL|function|GetFastCopyFunction
name|ColorCopyFunction
name|GetFastCopyFunction
parameter_list|(
name|D3DFORMAT
name|sourceFormat
parameter_list|,
name|GLenum
name|destFormat
parameter_list|,
name|GLenum
name|destType
parameter_list|)
block|{
specifier|static
specifier|const
name|D3D9FastCopyMap
name|fastCopyMap
init|=
name|BuildFastCopyMap
argument_list|()
decl_stmt|;
name|D3D9FastCopyMap
operator|::
name|const_iterator
name|iter
init|=
name|fastCopyMap
operator|.
name|find
argument_list|(
name|D3D9FastCopyFormat
argument_list|(
name|sourceFormat
argument_list|,
name|destFormat
argument_list|,
name|destType
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|iter
operator|!=
name|fastCopyMap
operator|.
name|end
argument_list|()
operator|)
condition|?
name|iter
operator|->
name|second
else|:
name|NULL
return|;
block|}
DECL|function|GetDeclTypeComponentType
name|GLenum
name|GetDeclTypeComponentType
parameter_list|(
name|D3DDECLTYPE
name|declType
parameter_list|)
block|{
switch|switch
condition|(
name|declType
condition|)
block|{
case|case
name|D3DDECLTYPE_FLOAT1
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|D3DDECLTYPE_FLOAT2
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|D3DDECLTYPE_FLOAT3
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|D3DDECLTYPE_FLOAT4
case|:
return|return
name|GL_FLOAT
return|;
case|case
name|D3DDECLTYPE_UBYTE4
case|:
return|return
name|GL_UNSIGNED_INT
return|;
case|case
name|D3DDECLTYPE_SHORT2
case|:
return|return
name|GL_INT
return|;
case|case
name|D3DDECLTYPE_SHORT4
case|:
return|return
name|GL_INT
return|;
case|case
name|D3DDECLTYPE_UBYTE4N
case|:
return|return
name|GL_UNSIGNED_NORMALIZED
return|;
case|case
name|D3DDECLTYPE_SHORT4N
case|:
return|return
name|GL_SIGNED_NORMALIZED
return|;
case|case
name|D3DDECLTYPE_USHORT4N
case|:
return|return
name|GL_UNSIGNED_NORMALIZED
return|;
case|case
name|D3DDECLTYPE_SHORT2N
case|:
return|return
name|GL_SIGNED_NORMALIZED
return|;
case|case
name|D3DDECLTYPE_USHORT2N
case|:
return|return
name|GL_UNSIGNED_NORMALIZED
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|GL_NONE
return|;
block|}
block|}
comment|// Attribute format conversion
DECL|enumerator|NUM_GL_VERTEX_ATTRIB_TYPES
enum|enum
block|{
name|NUM_GL_VERTEX_ATTRIB_TYPES
init|=
literal|6
block|}
enum|;
DECL|struct|FormatConverter
struct|struct
name|FormatConverter
block|{
DECL|member|identity
name|bool
name|identity
decl_stmt|;
DECL|member|outputElementSize
name|std
operator|::
name|size_t
name|outputElementSize
decl_stmt|;
DECL|member|convertArray
name|void
function_decl|(
modifier|*
name|convertArray
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
name|in
parameter_list|,
name|std
operator|::
name|size_t
name|stride
parameter_list|,
name|std
operator|::
name|size_t
name|n
parameter_list|,
name|void
modifier|*
name|out
parameter_list|)
function_decl|;
DECL|member|d3dDeclType
name|D3DDECLTYPE
name|d3dDeclType
decl_stmt|;
block|}
struct|;
DECL|struct|TranslationDescription
struct|struct
name|TranslationDescription
block|{
DECL|member|capsFlag
name|DWORD
name|capsFlag
decl_stmt|;
DECL|member|preferredConversion
name|FormatConverter
name|preferredConversion
decl_stmt|;
DECL|member|fallbackConversion
name|FormatConverter
name|fallbackConversion
decl_stmt|;
block|}
struct|;
specifier|static
name|unsigned
name|int
name|typeIndex
parameter_list|(
name|GLenum
name|type
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|FormatConverter
modifier|&
name|formatConverter
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexAttribute
modifier|&
name|attribute
parameter_list|)
function_decl|;
DECL|member|mTranslationsInitialized
name|bool
name|mTranslationsInitialized
init|=
literal|false
decl_stmt|;
DECL|member|mFormatConverters
name|FormatConverter
name|mFormatConverters
index|[
name|NUM_GL_VERTEX_ATTRIB_TYPES
index|]
index|[
literal|2
index|]
index|[
literal|4
index|]
decl_stmt|;
comment|// Mapping from OpenGL-ES vertex attrib type to D3D decl type:
comment|//
comment|// BYTE                 SHORT (Cast)
comment|// BYTE-norm            FLOAT (Normalize) (can't be exactly represented as SHORT-norm)
comment|// UNSIGNED_BYTE        UBYTE4 (Identity) or SHORT (Cast)
comment|// UNSIGNED_BYTE-norm   UBYTE4N (Identity) or FLOAT (Normalize)
comment|// SHORT                SHORT (Identity)
comment|// SHORT-norm           SHORT-norm (Identity) or FLOAT (Normalize)
comment|// UNSIGNED_SHORT       FLOAT (Cast)
comment|// UNSIGNED_SHORT-norm  USHORT-norm (Identity) or FLOAT (Normalize)
comment|// FIXED (not in WebGL) FLOAT (FixedToFloat)
comment|// FLOAT                FLOAT (Identity)
comment|// GLToCType maps from GL type (as GLenum) to the C typedef.
DECL|struct|GLToCType
template|template
parameter_list|<
name|GLenum
name|GLType
parameter_list|>
struct|struct
name|GLToCType
block|{
block|}
struct|;
DECL|struct|GLToCType
DECL|typedef|type
template|template
parameter_list|<>
struct|struct
name|GLToCType
argument_list|<
name|GL_BYTE
argument_list|>
block|{
typedef|typedef
name|GLbyte
name|type
typedef|;
block|}
struct|;
DECL|struct|GLToCType
DECL|typedef|type
template|template
parameter_list|<>
struct|struct
name|GLToCType
argument_list|<
name|GL_UNSIGNED_BYTE
argument_list|>
block|{
typedef|typedef
name|GLubyte
name|type
typedef|;
block|}
struct|;
DECL|struct|GLToCType
DECL|typedef|type
template|template
parameter_list|<>
struct|struct
name|GLToCType
argument_list|<
name|GL_SHORT
argument_list|>
block|{
typedef|typedef
name|GLshort
name|type
typedef|;
block|}
struct|;
DECL|struct|GLToCType
DECL|typedef|type
template|template
parameter_list|<>
struct|struct
name|GLToCType
argument_list|<
name|GL_UNSIGNED_SHORT
argument_list|>
block|{
typedef|typedef
name|GLushort
name|type
typedef|;
block|}
struct|;
DECL|struct|GLToCType
DECL|typedef|type
template|template
parameter_list|<>
struct|struct
name|GLToCType
argument_list|<
name|GL_FIXED
argument_list|>
block|{
typedef|typedef
name|GLuint
name|type
typedef|;
block|}
struct|;
DECL|struct|GLToCType
DECL|typedef|type
template|template
parameter_list|<>
struct|struct
name|GLToCType
argument_list|<
name|GL_FLOAT
argument_list|>
block|{
typedef|typedef
name|GLfloat
name|type
typedef|;
block|}
struct|;
comment|// This differs from D3DDECLTYPE in that it is unsized. (Size expansion is applied last.)
DECL|enum|D3DVertexType
enum|enum
name|D3DVertexType
block|{
DECL|enumerator|D3DVT_FLOAT
name|D3DVT_FLOAT
block|,
DECL|enumerator|D3DVT_SHORT
name|D3DVT_SHORT
block|,
DECL|enumerator|D3DVT_SHORT_NORM
name|D3DVT_SHORT_NORM
block|,
DECL|enumerator|D3DVT_UBYTE
name|D3DVT_UBYTE
block|,
DECL|enumerator|D3DVT_UBYTE_NORM
name|D3DVT_UBYTE_NORM
block|,
DECL|enumerator|D3DVT_USHORT_NORM
name|D3DVT_USHORT_NORM
block|}
enum|;
comment|// D3DToCType maps from D3D vertex type (as enum D3DVertexType) to the corresponding C type.
DECL|struct|D3DToCType
template|template
parameter_list|<
name|unsigned
name|int
name|D3DType
parameter_list|>
struct|struct
name|D3DToCType
block|{
block|}
struct|;
DECL|struct|D3DToCType
DECL|typedef|type
template|template
parameter_list|<>
struct|struct
name|D3DToCType
argument_list|<
name|D3DVT_FLOAT
argument_list|>
block|{
typedef|typedef
name|float
name|type
typedef|;
block|}
struct|;
DECL|struct|D3DToCType
DECL|typedef|type
template|template
parameter_list|<>
struct|struct
name|D3DToCType
argument_list|<
name|D3DVT_SHORT
argument_list|>
block|{
typedef|typedef
name|short
name|type
typedef|;
block|}
struct|;
DECL|struct|D3DToCType
DECL|typedef|type
template|template
parameter_list|<>
struct|struct
name|D3DToCType
argument_list|<
name|D3DVT_SHORT_NORM
argument_list|>
block|{
typedef|typedef
name|short
name|type
typedef|;
block|}
struct|;
DECL|struct|D3DToCType
DECL|typedef|type
template|template
parameter_list|<>
struct|struct
name|D3DToCType
argument_list|<
name|D3DVT_UBYTE
argument_list|>
block|{
typedef|typedef
name|unsigned
name|char
name|type
typedef|;
block|}
struct|;
DECL|struct|D3DToCType
DECL|typedef|type
template|template
parameter_list|<>
struct|struct
name|D3DToCType
argument_list|<
name|D3DVT_UBYTE_NORM
argument_list|>
block|{
typedef|typedef
name|unsigned
name|char
name|type
typedef|;
block|}
struct|;
DECL|struct|D3DToCType
DECL|typedef|type
template|template
parameter_list|<>
struct|struct
name|D3DToCType
argument_list|<
name|D3DVT_USHORT_NORM
argument_list|>
block|{
typedef|typedef
name|unsigned
name|short
name|type
typedef|;
block|}
struct|;
comment|// Encode the type/size combinations that D3D permits. For each type/size it expands to a widener that will provide the appropriate final size.
DECL|struct|WidenRule
template|template
parameter_list|<
name|unsigned
name|int
name|type
parameter_list|,
name|int
name|size
parameter_list|>
struct|struct
name|WidenRule
block|{
block|}
struct|;
DECL|struct|WidenRule
template|template
parameter_list|<
name|int
name|size
parameter_list|>
struct|struct
name|WidenRule
argument_list|<
name|D3DVT_FLOAT
argument_list|,
name|size
argument_list|>
super|:
name|NoWiden
argument_list|<
name|size
argument_list|>
block|{
block|}
struct|;
DECL|struct|WidenRule
template|template
parameter_list|<
name|int
name|size
parameter_list|>
struct|struct
name|WidenRule
argument_list|<
name|D3DVT_SHORT
argument_list|,
name|size
argument_list|>
super|:
name|WidenToEven
argument_list|<
name|size
argument_list|>
block|{
block|}
struct|;
DECL|struct|WidenRule
template|template
parameter_list|<
name|int
name|size
parameter_list|>
struct|struct
name|WidenRule
argument_list|<
name|D3DVT_SHORT_NORM
argument_list|,
name|size
argument_list|>
super|:
name|WidenToEven
argument_list|<
name|size
argument_list|>
block|{
block|}
struct|;
DECL|struct|WidenRule
template|template
parameter_list|<
name|int
name|size
parameter_list|>
struct|struct
name|WidenRule
argument_list|<
name|D3DVT_UBYTE
argument_list|,
name|size
argument_list|>
super|:
name|WidenToFour
argument_list|<
name|size
argument_list|>
block|{
block|}
struct|;
DECL|struct|WidenRule
template|template
parameter_list|<
name|int
name|size
parameter_list|>
struct|struct
name|WidenRule
argument_list|<
name|D3DVT_UBYTE_NORM
argument_list|,
name|size
argument_list|>
super|:
name|WidenToFour
argument_list|<
name|size
argument_list|>
block|{
block|}
struct|;
DECL|struct|WidenRule
template|template
parameter_list|<
name|int
name|size
parameter_list|>
struct|struct
name|WidenRule
argument_list|<
name|D3DVT_USHORT_NORM
argument_list|,
name|size
argument_list|>
super|:
name|WidenToEven
argument_list|<
name|size
argument_list|>
block|{
block|}
struct|;
comment|// VertexTypeFlags encodes the D3DCAPS9::DeclType flag and vertex declaration flag for each D3D vertex type& size combination.
DECL|struct|VertexTypeFlags
template|template
parameter_list|<
name|unsigned
name|int
name|d3dtype
parameter_list|,
name|int
name|size
parameter_list|>
struct|struct
name|VertexTypeFlags
block|{
block|}
struct|;
template|template
parameter_list|<
name|unsigned
name|int
name|_capflag
parameter_list|,
name|unsigned
name|int
name|_declflag
parameter_list|>
struct|struct
DECL|struct|VertexTypeFlagsHelper
name|VertexTypeFlagsHelper
block|{
DECL|enumerator|capflag
enum|enum
block|{
name|capflag
init|=
name|_capflag
block|}
enum|;
DECL|enumerator|declflag
enum|enum
block|{
name|declflag
init|=
name|_declflag
block|}
enum|;
block|}
struct|;
DECL|struct|VertexTypeFlags
template|template
parameter_list|<>
struct|struct
name|VertexTypeFlags
argument_list|<
name|D3DVT_FLOAT
argument_list|,
literal|1
argument_list|>
super|:
name|VertexTypeFlagsHelper
argument_list|<
literal|0
argument_list|,
name|D3DDECLTYPE_FLOAT1
argument_list|>
block|{
block|}
struct|;
DECL|struct|VertexTypeFlags
template|template
parameter_list|<>
struct|struct
name|VertexTypeFlags
argument_list|<
name|D3DVT_FLOAT
argument_list|,
literal|2
argument_list|>
super|:
name|VertexTypeFlagsHelper
argument_list|<
literal|0
argument_list|,
name|D3DDECLTYPE_FLOAT2
argument_list|>
block|{
block|}
struct|;
DECL|struct|VertexTypeFlags
template|template
parameter_list|<>
struct|struct
name|VertexTypeFlags
argument_list|<
name|D3DVT_FLOAT
argument_list|,
literal|3
argument_list|>
super|:
name|VertexTypeFlagsHelper
argument_list|<
literal|0
argument_list|,
name|D3DDECLTYPE_FLOAT3
argument_list|>
block|{
block|}
struct|;
DECL|struct|VertexTypeFlags
template|template
parameter_list|<>
struct|struct
name|VertexTypeFlags
argument_list|<
name|D3DVT_FLOAT
argument_list|,
literal|4
argument_list|>
super|:
name|VertexTypeFlagsHelper
argument_list|<
literal|0
argument_list|,
name|D3DDECLTYPE_FLOAT4
argument_list|>
block|{
block|}
struct|;
DECL|struct|VertexTypeFlags
template|template
parameter_list|<>
struct|struct
name|VertexTypeFlags
argument_list|<
name|D3DVT_SHORT
argument_list|,
literal|2
argument_list|>
super|:
name|VertexTypeFlagsHelper
argument_list|<
literal|0
argument_list|,
name|D3DDECLTYPE_SHORT2
argument_list|>
block|{
block|}
struct|;
DECL|struct|VertexTypeFlags
template|template
parameter_list|<>
struct|struct
name|VertexTypeFlags
argument_list|<
name|D3DVT_SHORT
argument_list|,
literal|4
argument_list|>
super|:
name|VertexTypeFlagsHelper
argument_list|<
literal|0
argument_list|,
name|D3DDECLTYPE_SHORT4
argument_list|>
block|{
block|}
struct|;
DECL|struct|VertexTypeFlags
template|template
parameter_list|<>
struct|struct
name|VertexTypeFlags
argument_list|<
name|D3DVT_SHORT_NORM
argument_list|,
literal|2
argument_list|>
super|:
name|VertexTypeFlagsHelper
argument_list|<
name|D3DDTCAPS_SHORT2N
argument_list|,
name|D3DDECLTYPE_SHORT2N
argument_list|>
block|{
block|}
struct|;
DECL|struct|VertexTypeFlags
template|template
parameter_list|<>
struct|struct
name|VertexTypeFlags
argument_list|<
name|D3DVT_SHORT_NORM
argument_list|,
literal|4
argument_list|>
super|:
name|VertexTypeFlagsHelper
argument_list|<
name|D3DDTCAPS_SHORT4N
argument_list|,
name|D3DDECLTYPE_SHORT4N
argument_list|>
block|{
block|}
struct|;
DECL|struct|VertexTypeFlags
template|template
parameter_list|<>
struct|struct
name|VertexTypeFlags
argument_list|<
name|D3DVT_UBYTE
argument_list|,
literal|4
argument_list|>
super|:
name|VertexTypeFlagsHelper
argument_list|<
name|D3DDTCAPS_UBYTE4
argument_list|,
name|D3DDECLTYPE_UBYTE4
argument_list|>
block|{
block|}
struct|;
DECL|struct|VertexTypeFlags
template|template
parameter_list|<>
struct|struct
name|VertexTypeFlags
argument_list|<
name|D3DVT_UBYTE_NORM
argument_list|,
literal|4
argument_list|>
super|:
name|VertexTypeFlagsHelper
argument_list|<
name|D3DDTCAPS_UBYTE4N
argument_list|,
name|D3DDECLTYPE_UBYTE4N
argument_list|>
block|{
block|}
struct|;
DECL|struct|VertexTypeFlags
template|template
parameter_list|<>
struct|struct
name|VertexTypeFlags
argument_list|<
name|D3DVT_USHORT_NORM
argument_list|,
literal|2
argument_list|>
super|:
name|VertexTypeFlagsHelper
argument_list|<
name|D3DDTCAPS_USHORT2N
argument_list|,
name|D3DDECLTYPE_USHORT2N
argument_list|>
block|{
block|}
struct|;
DECL|struct|VertexTypeFlags
template|template
parameter_list|<>
struct|struct
name|VertexTypeFlags
argument_list|<
name|D3DVT_USHORT_NORM
argument_list|,
literal|4
argument_list|>
super|:
name|VertexTypeFlagsHelper
argument_list|<
name|D3DDTCAPS_USHORT4N
argument_list|,
name|D3DDECLTYPE_USHORT4N
argument_list|>
block|{
block|}
struct|;
comment|// VertexTypeMapping maps GL type& normalized flag to preferred and fallback D3D vertex types (as D3DVertexType enums).
DECL|struct|VertexTypeMapping
template|template
parameter_list|<
name|GLenum
name|GLtype
parameter_list|,
name|bool
name|normalized
parameter_list|>
struct|struct
name|VertexTypeMapping
block|{
block|}
struct|;
template|template
parameter_list|<
name|D3DVertexType
name|Preferred
parameter_list|,
name|D3DVertexType
name|Fallback
init|=
name|Preferred
parameter_list|>
struct|struct
DECL|struct|VertexTypeMappingBase
name|VertexTypeMappingBase
block|{
DECL|enumerator|preferred
enum|enum
block|{
name|preferred
init|=
name|Preferred
block|}
enum|;
DECL|enumerator|fallback
enum|enum
block|{
name|fallback
init|=
name|Fallback
block|}
enum|;
block|}
struct|;
DECL|struct|VertexTypeMapping
template|template
parameter_list|<>
struct|struct
name|VertexTypeMapping
argument_list|<
name|GL_BYTE
argument_list|,
literal|false
argument_list|>
super|:
name|VertexTypeMappingBase
argument_list|<
name|D3DVT_SHORT
argument_list|>
block|{
block|}
struct|;
comment|// Cast
DECL|struct|VertexTypeMapping
template|template
parameter_list|<>
struct|struct
name|VertexTypeMapping
argument_list|<
name|GL_BYTE
argument_list|,
literal|true
argument_list|>
super|:
name|VertexTypeMappingBase
argument_list|<
name|D3DVT_FLOAT
argument_list|>
block|{
block|}
struct|;
comment|// Normalize
DECL|struct|VertexTypeMapping
template|template
parameter_list|<>
struct|struct
name|VertexTypeMapping
argument_list|<
name|GL_UNSIGNED_BYTE
argument_list|,
literal|false
argument_list|>
super|:
name|VertexTypeMappingBase
argument_list|<
name|D3DVT_UBYTE
argument_list|,
name|D3DVT_FLOAT
argument_list|>
block|{
block|}
struct|;
comment|// Identity, Cast
DECL|struct|VertexTypeMapping
template|template
parameter_list|<>
struct|struct
name|VertexTypeMapping
argument_list|<
name|GL_UNSIGNED_BYTE
argument_list|,
literal|true
argument_list|>
super|:
name|VertexTypeMappingBase
argument_list|<
name|D3DVT_UBYTE_NORM
argument_list|,
name|D3DVT_FLOAT
argument_list|>
block|{
block|}
struct|;
comment|// Identity, Normalize
DECL|struct|VertexTypeMapping
template|template
parameter_list|<>
struct|struct
name|VertexTypeMapping
argument_list|<
name|GL_SHORT
argument_list|,
literal|false
argument_list|>
super|:
name|VertexTypeMappingBase
argument_list|<
name|D3DVT_SHORT
argument_list|>
block|{
block|}
struct|;
comment|// Identity
DECL|struct|VertexTypeMapping
template|template
parameter_list|<>
struct|struct
name|VertexTypeMapping
argument_list|<
name|GL_SHORT
argument_list|,
literal|true
argument_list|>
super|:
name|VertexTypeMappingBase
argument_list|<
name|D3DVT_SHORT_NORM
argument_list|,
name|D3DVT_FLOAT
argument_list|>
block|{
block|}
struct|;
comment|// Cast, Normalize
DECL|struct|VertexTypeMapping
template|template
parameter_list|<>
struct|struct
name|VertexTypeMapping
argument_list|<
name|GL_UNSIGNED_SHORT
argument_list|,
literal|false
argument_list|>
super|:
name|VertexTypeMappingBase
argument_list|<
name|D3DVT_FLOAT
argument_list|>
block|{
block|}
struct|;
comment|// Cast
DECL|struct|VertexTypeMapping
template|template
parameter_list|<>
struct|struct
name|VertexTypeMapping
argument_list|<
name|GL_UNSIGNED_SHORT
argument_list|,
literal|true
argument_list|>
super|:
name|VertexTypeMappingBase
argument_list|<
name|D3DVT_USHORT_NORM
argument_list|,
name|D3DVT_FLOAT
argument_list|>
block|{
block|}
struct|;
comment|// Cast, Normalize
DECL|struct|VertexTypeMapping
template|template
parameter_list|<
name|bool
name|normalized
parameter_list|>
struct|struct
name|VertexTypeMapping
argument_list|<
name|GL_FIXED
argument_list|,
name|normalized
argument_list|>
super|:
name|VertexTypeMappingBase
argument_list|<
name|D3DVT_FLOAT
argument_list|>
block|{
block|}
struct|;
comment|// FixedToFloat
DECL|struct|VertexTypeMapping
template|template
parameter_list|<
name|bool
name|normalized
parameter_list|>
struct|struct
name|VertexTypeMapping
argument_list|<
name|GL_FLOAT
argument_list|,
name|normalized
argument_list|>
super|:
name|VertexTypeMappingBase
argument_list|<
name|D3DVT_FLOAT
argument_list|>
block|{
block|}
struct|;
comment|// Identity
comment|// Given a GL type& norm flag and a D3D type, ConversionRule provides the type conversion rule (Cast, Normalize, Identity, FixedToFloat).
comment|// The conversion rules themselves are defined in vertexconversion.h.
comment|// Almost all cases are covered by Cast (including those that are actually Identity since Cast<T,T> knows it's an identity mapping).
template|template
parameter_list|<
name|GLenum
name|fromType
parameter_list|,
name|bool
name|normalized
parameter_list|,
name|unsigned
name|int
name|toType
parameter_list|>
struct|struct
DECL|struct|ConversionRule
name|ConversionRule
super|:
name|Cast
argument_list|<
typename|typename
name|GLToCType
argument_list|<
name|fromType
argument_list|>
operator|::
name|type
argument_list|,
typename|typename
name|D3DToCType
argument_list|<
name|toType
argument_list|>
operator|::
name|type
argument_list|>
block|{
block|}
struct|;
comment|// All conversions from normalized types to float use the Normalize operator.
DECL|struct|ConversionRule
template|template
parameter_list|<
name|GLenum
name|fromType
parameter_list|>
struct|struct
name|ConversionRule
argument_list|<
name|fromType
argument_list|,
literal|true
argument_list|,
name|D3DVT_FLOAT
argument_list|>
super|:
name|Normalize
argument_list|<
typename|typename
name|GLToCType
argument_list|<
name|fromType
argument_list|>
operator|::
name|type
argument_list|>
block|{
block|}
struct|;
comment|// Use a full specialization for this so that it preferentially matches ahead of the generic normalize-to-float rules.
DECL|struct|ConversionRule
template|template
parameter_list|<>
struct|struct
name|ConversionRule
argument_list|<
name|GL_FIXED
argument_list|,
literal|true
argument_list|,
name|D3DVT_FLOAT
argument_list|>
super|:
name|FixedToFloat
argument_list|<
name|GLint
argument_list|,
literal|16
argument_list|>
block|{
block|}
struct|;
DECL|struct|ConversionRule
template|template
parameter_list|<>
struct|struct
name|ConversionRule
argument_list|<
name|GL_FIXED
argument_list|,
literal|false
argument_list|,
name|D3DVT_FLOAT
argument_list|>
super|:
name|FixedToFloat
argument_list|<
name|GLint
argument_list|,
literal|16
argument_list|>
block|{
block|}
struct|;
comment|// A 2-stage construction is used for DefaultVertexValues because float must use SimpleDefaultValues (i.e. 0/1)
comment|// whether it is normalized or not.
DECL|struct|DefaultVertexValuesStage2
template|template
parameter_list|<
name|class
name|T
parameter_list|,
name|bool
name|normalized
parameter_list|>
struct|struct
name|DefaultVertexValuesStage2
block|{
block|}
struct|;
DECL|struct|DefaultVertexValuesStage2
template|template
parameter_list|<
name|class
name|T
parameter_list|>
struct|struct
name|DefaultVertexValuesStage2
argument_list|<
name|T
argument_list|,
literal|true
argument_list|>
super|:
name|NormalizedDefaultValues
argument_list|<
name|T
argument_list|>
block|{
block|}
struct|;
DECL|struct|DefaultVertexValuesStage2
template|template
parameter_list|<
name|class
name|T
parameter_list|>
struct|struct
name|DefaultVertexValuesStage2
argument_list|<
name|T
argument_list|,
literal|false
argument_list|>
super|:
name|SimpleDefaultValues
argument_list|<
name|T
argument_list|>
block|{
block|}
struct|;
comment|// Work out the default value rule for a D3D type (expressed as the C type) and
DECL|struct|DefaultVertexValues
template|template
parameter_list|<
name|class
name|T
parameter_list|,
name|bool
name|normalized
parameter_list|>
struct|struct
name|DefaultVertexValues
super|:
name|DefaultVertexValuesStage2
argument_list|<
name|T
argument_list|,
name|normalized
argument_list|>
block|{
block|}
struct|;
DECL|struct|DefaultVertexValues
template|template
parameter_list|<
name|bool
name|normalized
parameter_list|>
struct|struct
name|DefaultVertexValues
argument_list|<
name|float
argument_list|,
name|normalized
argument_list|>
super|:
name|SimpleDefaultValues
argument_list|<
name|float
argument_list|>
block|{
block|}
struct|;
comment|// Policy rules for use with Converter, to choose whether to use the preferred or fallback conversion.
comment|// The fallback conversion produces an output that all D3D9 devices must support.
DECL|struct|UsePreferred
DECL|enumerator|type
template|template
parameter_list|<
name|class
name|T
parameter_list|>
struct|struct
name|UsePreferred
block|{
enum|enum
block|{
name|type
init|=
name|T
operator|::
name|preferred
block|}
enum|;
block|}
struct|;
DECL|struct|UseFallback
DECL|enumerator|type
template|template
parameter_list|<
name|class
name|T
parameter_list|>
struct|struct
name|UseFallback
block|{
enum|enum
block|{
name|type
init|=
name|T
operator|::
name|fallback
block|}
enum|;
block|}
struct|;
comment|// Converter ties it all together. Given an OpenGL type/norm/size and choice of preferred/fallback conversion,
comment|// it provides all the members of the appropriate VertexDataConverter, the D3DCAPS9::DeclTypes flag in cap flag
comment|// and the D3DDECLTYPE member needed for the vertex declaration in declflag.
template|template
parameter_list|<
name|GLenum
name|fromType
parameter_list|,
name|bool
name|normalized
parameter_list|,
name|int
name|size
parameter_list|,
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|class
name|PreferenceRule
parameter_list|>
struct|struct
DECL|struct|Converter
name|Converter
super|:
name|VertexDataConverter
argument_list|<
typename|typename
name|GLToCType
argument_list|<
name|fromType
argument_list|>
operator|::
name|type
argument_list|,
name|WidenRule
argument_list|<
name|PreferenceRule
argument_list|<
name|VertexTypeMapping
argument_list|<
name|fromType
argument_list|,
name|normalized
argument_list|>
argument_list|>
operator|::
name|type
argument_list|,
name|size
argument_list|>
argument_list|,
name|ConversionRule
argument_list|<
name|fromType
argument_list|,
name|normalized
argument_list|,
name|PreferenceRule
argument_list|<
name|VertexTypeMapping
argument_list|<
name|fromType
argument_list|,
name|normalized
argument_list|>
argument_list|>
operator|::
name|type
argument_list|>
argument_list|,
name|DefaultVertexValues
argument_list|<
typename|typename
name|D3DToCType
argument_list|<
name|PreferenceRule
argument_list|<
name|VertexTypeMapping
argument_list|<
name|fromType
argument_list|,
name|normalized
argument_list|>
argument_list|>
operator|::
name|type
argument_list|>
operator|::
name|type
argument_list|,
name|normalized
argument_list|>
argument_list|>
block|{
private|private:
DECL|enumerator|d3dtype
enum|enum
block|{
name|d3dtype
init|=
name|PreferenceRule
argument_list|<
name|VertexTypeMapping
argument_list|<
name|fromType
argument_list|,
name|normalized
argument_list|>
argument_list|>
operator|::
name|type
block|}
enum|;
DECL|enumerator|d3dsize
enum|enum
block|{
name|d3dsize
init|=
name|WidenRule
argument_list|<
name|d3dtype
argument_list|,
name|size
argument_list|>
operator|::
name|finalWidth
block|}
enum|;
public|public:
DECL|enumerator|capflag
enum|enum
block|{
name|capflag
init|=
name|VertexTypeFlags
argument_list|<
name|d3dtype
argument_list|,
name|d3dsize
argument_list|>
operator|::
name|capflag
block|}
enum|;
DECL|enumerator|declflag
enum|enum
block|{
name|declflag
init|=
name|VertexTypeFlags
argument_list|<
name|d3dtype
argument_list|,
name|d3dsize
argument_list|>
operator|::
name|declflag
block|}
enum|;
block|}
struct|;
comment|// Initialize a TranslationInfo
DECL|macro|TRANSLATION
define|#
directive|define
name|TRANSLATION
parameter_list|(
name|type
parameter_list|,
name|norm
parameter_list|,
name|size
parameter_list|,
name|preferred
parameter_list|)
define|\
value|{                                                                               \         Converter<type, norm, size, preferred>::identity,                           \         Converter<type, norm, size, preferred>::finalSize,                          \         Converter<type, norm, size, preferred>::convertArray,                       \         static_cast<D3DDECLTYPE>(Converter<type, norm, size, preferred>::declflag)  \     }
DECL|macro|TRANSLATION_FOR_TYPE_NORM_SIZE
define|#
directive|define
name|TRANSLATION_FOR_TYPE_NORM_SIZE
parameter_list|(
name|type
parameter_list|,
name|norm
parameter_list|,
name|size
parameter_list|)
define|\
value|{                                                       \         Converter<type, norm, size, UsePreferred>::capflag, \         TRANSLATION(type, norm, size, UsePreferred),        \         TRANSLATION(type, norm, size, UseFallback)          \     }
DECL|macro|TRANSLATIONS_FOR_TYPE
define|#
directive|define
name|TRANSLATIONS_FOR_TYPE
parameter_list|(
name|type
parameter_list|)
define|\
value|{                                                                                                                                                                                                       \         { TRANSLATION_FOR_TYPE_NORM_SIZE(type, false, 1), TRANSLATION_FOR_TYPE_NORM_SIZE(type, false, 2), TRANSLATION_FOR_TYPE_NORM_SIZE(type, false, 3), TRANSLATION_FOR_TYPE_NORM_SIZE(type, false, 4) }, \         { TRANSLATION_FOR_TYPE_NORM_SIZE(type, true, 1), TRANSLATION_FOR_TYPE_NORM_SIZE(type, true, 2), TRANSLATION_FOR_TYPE_NORM_SIZE(type, true, 3), TRANSLATION_FOR_TYPE_NORM_SIZE(type, true, 4) },     \     }
DECL|macro|TRANSLATIONS_FOR_TYPE_NO_NORM
define|#
directive|define
name|TRANSLATIONS_FOR_TYPE_NO_NORM
parameter_list|(
name|type
parameter_list|)
define|\
value|{                                                                                                                                                                                                       \         { TRANSLATION_FOR_TYPE_NORM_SIZE(type, false, 1), TRANSLATION_FOR_TYPE_NORM_SIZE(type, false, 2), TRANSLATION_FOR_TYPE_NORM_SIZE(type, false, 3), TRANSLATION_FOR_TYPE_NORM_SIZE(type, false, 4) }, \         { TRANSLATION_FOR_TYPE_NORM_SIZE(type, false, 1), TRANSLATION_FOR_TYPE_NORM_SIZE(type, false, 2), TRANSLATION_FOR_TYPE_NORM_SIZE(type, false, 3), TRANSLATION_FOR_TYPE_NORM_SIZE(type, false, 4) }, \     }
DECL|member|mPossibleTranslations
specifier|const
name|TranslationDescription
name|mPossibleTranslations
index|[
name|NUM_GL_VERTEX_ATTRIB_TYPES
index|]
index|[
literal|2
index|]
index|[
literal|4
index|]
init|=
comment|// [GL types as enumerated by typeIndex()][normalized][size-1]
block|{
name|TRANSLATIONS_FOR_TYPE
argument_list|(
name|GL_BYTE
argument_list|)
block|,
name|TRANSLATIONS_FOR_TYPE
argument_list|(
name|GL_UNSIGNED_BYTE
argument_list|)
block|,
name|TRANSLATIONS_FOR_TYPE
argument_list|(
name|GL_SHORT
argument_list|)
block|,
name|TRANSLATIONS_FOR_TYPE
argument_list|(
name|GL_UNSIGNED_SHORT
argument_list|)
block|,
name|TRANSLATIONS_FOR_TYPE_NO_NORM
argument_list|(
name|GL_FIXED
argument_list|)
block|,
name|TRANSLATIONS_FOR_TYPE_NO_NORM
argument_list|(
argument|GL_FLOAT
argument_list|)
block|}
decl_stmt|;
DECL|function|InitializeVertexTranslations
name|void
name|InitializeVertexTranslations
parameter_list|(
specifier|const
name|rx
operator|::
name|Renderer9
modifier|*
name|renderer
parameter_list|)
block|{
name|DWORD
name|declTypes
init|=
name|renderer
operator|->
name|getCapsDeclTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_GL_VERTEX_ATTRIB_TYPES
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|unsigned
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|unsigned
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|4
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|mPossibleTranslations
index|[
name|i
index|]
index|[
name|j
index|]
index|[
name|k
index|]
operator|.
name|capsFlag
operator|==
literal|0
operator|||
operator|(
name|declTypes
operator|&
name|mPossibleTranslations
index|[
name|i
index|]
index|[
name|j
index|]
index|[
name|k
index|]
operator|.
name|capsFlag
operator|)
operator|!=
literal|0
condition|)
block|{
name|mFormatConverters
index|[
name|i
index|]
index|[
name|j
index|]
index|[
name|k
index|]
operator|=
name|mPossibleTranslations
index|[
name|i
index|]
index|[
name|j
index|]
index|[
name|k
index|]
operator|.
name|preferredConversion
expr_stmt|;
block|}
else|else
block|{
name|mFormatConverters
index|[
name|i
index|]
index|[
name|j
index|]
index|[
name|k
index|]
operator|=
name|mPossibleTranslations
index|[
name|i
index|]
index|[
name|j
index|]
index|[
name|k
index|]
operator|.
name|fallbackConversion
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|function|typeIndex
name|unsigned
name|int
name|typeIndex
parameter_list|(
name|GLenum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|GL_BYTE
case|:
return|return
literal|0
return|;
case|case
name|GL_UNSIGNED_BYTE
case|:
return|return
literal|1
return|;
case|case
name|GL_SHORT
case|:
return|return
literal|2
return|;
case|case
name|GL_UNSIGNED_SHORT
case|:
return|return
literal|3
return|;
case|case
name|GL_FIXED
case|:
return|return
literal|4
return|;
case|case
name|GL_FLOAT
case|:
return|return
literal|5
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|5
return|;
block|}
block|}
DECL|function|formatConverter
specifier|const
name|FormatConverter
modifier|&
name|formatConverter
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexFormat
modifier|&
name|vertexFormat
parameter_list|)
block|{
comment|// Pure integer attributes only supported in ES3.0
name|ASSERT
argument_list|(
operator|!
name|vertexFormat
operator|.
name|mPureInteger
argument_list|)
expr_stmt|;
return|return
name|mFormatConverters
index|[
name|typeIndex
argument_list|(
name|vertexFormat
operator|.
name|mType
argument_list|)
index|]
index|[
name|vertexFormat
operator|.
name|mNormalized
index|]
index|[
name|vertexFormat
operator|.
name|mComponents
operator|-
literal|1
index|]
return|;
block|}
DECL|function|GetVertexCopyFunction
name|VertexCopyFunction
name|GetVertexCopyFunction
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexFormat
modifier|&
name|vertexFormat
parameter_list|)
block|{
return|return
name|formatConverter
argument_list|(
name|vertexFormat
argument_list|)
operator|.
name|convertArray
return|;
block|}
DECL|function|GetVertexElementSize
name|size_t
name|GetVertexElementSize
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexFormat
modifier|&
name|vertexFormat
parameter_list|)
block|{
return|return
name|formatConverter
argument_list|(
name|vertexFormat
argument_list|)
operator|.
name|outputElementSize
return|;
block|}
DECL|function|GetVertexConversionType
name|VertexConversionType
name|GetVertexConversionType
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexFormat
modifier|&
name|vertexFormat
parameter_list|)
block|{
return|return
operator|(
name|formatConverter
argument_list|(
name|vertexFormat
argument_list|)
operator|.
name|identity
condition|?
name|VERTEX_CONVERT_NONE
else|:
name|VERTEX_CONVERT_CPU
operator|)
return|;
block|}
DECL|function|GetNativeVertexFormat
name|D3DDECLTYPE
name|GetNativeVertexFormat
parameter_list|(
specifier|const
name|gl
operator|::
name|VertexFormat
modifier|&
name|vertexFormat
parameter_list|)
block|{
return|return
name|formatConverter
argument_list|(
name|vertexFormat
argument_list|)
operator|.
name|d3dDeclType
return|;
block|}
block|}
DECL|namespace|gl_d3d9
namespace|namespace
name|gl_d3d9
block|{
DECL|function|GetTextureFormat
name|D3DFORMAT
name|GetTextureFormat
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|D3D9FormatInfo
name|d3d9FormatInfo
decl_stmt|;
if|if
condition|(
name|GetD3D9FormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|d3d9FormatInfo
argument_list|)
condition|)
block|{
return|return
name|d3d9FormatInfo
operator|.
name|mTexFormat
return|;
block|}
else|else
block|{
return|return
name|D3DFMT_UNKNOWN
return|;
block|}
block|}
DECL|function|GetRenderFormat
name|D3DFORMAT
name|GetRenderFormat
parameter_list|(
name|GLenum
name|internalFormat
parameter_list|)
block|{
name|D3D9FormatInfo
name|d3d9FormatInfo
decl_stmt|;
if|if
condition|(
name|GetD3D9FormatInfo
argument_list|(
name|internalFormat
argument_list|,
operator|&
name|d3d9FormatInfo
argument_list|)
condition|)
block|{
return|return
name|d3d9FormatInfo
operator|.
name|mRenderFormat
return|;
block|}
else|else
block|{
return|return
name|D3DFMT_UNKNOWN
return|;
block|}
block|}
DECL|function|GetMultisampleType
name|D3DMULTISAMPLE_TYPE
name|GetMultisampleType
parameter_list|(
name|GLsizei
name|samples
parameter_list|)
block|{
return|return
operator|(
name|samples
operator|>
literal|1
operator|)
condition|?
cast|static_cast
argument_list|<
name|D3DMULTISAMPLE_TYPE
argument_list|>
argument_list|(
name|samples
argument_list|)
else|:
name|D3DMULTISAMPLE_NONE
return|;
block|}
DECL|function|RequiresTextureDataInitialization
name|bool
name|RequiresTextureDataInitialization
parameter_list|(
name|GLint
name|internalFormat
parameter_list|)
block|{
specifier|const
name|InternalFormatInitialzerMap
modifier|&
name|map
init|=
name|GetInternalFormatInitialzerMap
argument_list|()
decl_stmt|;
return|return
name|map
operator|.
name|find
argument_list|(
name|internalFormat
argument_list|)
operator|!=
name|map
operator|.
name|end
argument_list|()
return|;
block|}
DECL|function|GetTextureDataInitializationFunction
name|InitializeTextureDataFunction
name|GetTextureDataInitializationFunction
parameter_list|(
name|GLint
name|internalFormat
parameter_list|)
block|{
specifier|const
name|InternalFormatInitialzerMap
modifier|&
name|map
init|=
name|GetInternalFormatInitialzerMap
argument_list|()
decl_stmt|;
name|InternalFormatInitialzerMap
operator|::
name|const_iterator
name|iter
init|=
name|map
operator|.
name|find
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|map
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|iter
operator|->
name|second
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|NULL
return|;
block|}
block|}
block|}
DECL|namespace|d3d9_gl
namespace|namespace
name|d3d9_gl
block|{
DECL|function|GetInternalFormat
name|GLenum
name|GetInternalFormat
parameter_list|(
name|D3DFORMAT
name|format
parameter_list|)
block|{
specifier|static
specifier|const
name|D3D9FormatInfoMap
name|infoMap
init|=
name|BuildD3D9FormatInfoMap
argument_list|()
decl_stmt|;
name|D3D9FormatInfoMap
operator|::
name|const_iterator
name|iter
init|=
name|infoMap
operator|.
name|find
argument_list|(
name|format
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|infoMap
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|iter
operator|->
name|second
operator|.
name|mInternalFormat
return|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
name|GL_NONE
return|;
block|}
block|}
DECL|function|GetSamplesCount
name|GLsizei
name|GetSamplesCount
parameter_list|(
name|D3DMULTISAMPLE_TYPE
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|!=
name|D3DMULTISAMPLE_NONMASKABLE
operator|)
condition|?
name|type
else|:
literal|0
return|;
block|}
DECL|function|IsFormatChannelEquivalent
name|bool
name|IsFormatChannelEquivalent
parameter_list|(
name|D3DFORMAT
name|d3dformat
parameter_list|,
name|GLenum
name|format
parameter_list|)
block|{
name|GLenum
name|internalFormat
init|=
name|d3d9_gl
operator|::
name|GetInternalFormat
argument_list|(
name|d3dformat
argument_list|)
decl_stmt|;
name|GLenum
name|convertedFormat
init|=
name|gl
operator|::
name|GetFormat
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
return|return
name|convertedFormat
operator|==
name|format
return|;
block|}
block|}
block|}
end_namespace
end_unit
