begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// VertexDeclarationCache.cpp: Implements a helper class to construct and cache vertex declarations.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/ProgramBinary.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/VertexAttribute.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/VertexBuffer9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/VertexDeclarationCache.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/formatutils9.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|VertexDeclarationCache
name|VertexDeclarationCache
operator|::
name|VertexDeclarationCache
parameter_list|()
member_init_list|:
name|mMaxLru
argument_list|(
literal|0
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_VERTEX_DECL_CACHE_ENTRIES
condition|;
name|i
operator|++
control|)
block|{
name|mVertexDeclCache
index|[
name|i
index|]
operator|.
name|vertexDeclaration
operator|=
name|NULL
expr_stmt|;
name|mVertexDeclCache
index|[
name|i
index|]
operator|.
name|lruCount
operator|=
literal|0
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|;
name|i
operator|++
control|)
block|{
name|mAppliedVBs
index|[
name|i
index|]
operator|.
name|serial
operator|=
literal|0
expr_stmt|;
block|}
name|mLastSetVDecl
operator|=
name|NULL
expr_stmt|;
name|mInstancingEnabled
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|~VertexDeclarationCache
name|VertexDeclarationCache
operator|::
name|~
name|VertexDeclarationCache
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_VERTEX_DECL_CACHE_ENTRIES
condition|;
name|i
operator|++
control|)
block|{
name|SafeRelease
argument_list|(
name|mVertexDeclCache
index|[
name|i
index|]
operator|.
name|vertexDeclaration
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|applyDeclaration
name|GLenum
name|VertexDeclarationCache
operator|::
name|applyDeclaration
parameter_list|(
name|IDirect3DDevice9
modifier|*
name|device
parameter_list|,
name|TranslatedAttribute
name|attributes
index|[]
parameter_list|,
name|gl
operator|::
name|ProgramBinary
modifier|*
name|programBinary
parameter_list|,
name|GLsizei
name|instances
parameter_list|,
name|GLsizei
modifier|*
name|repeatDraw
parameter_list|)
block|{
operator|*
name|repeatDraw
operator|=
literal|1
expr_stmt|;
name|int
name|indexedAttribute
init|=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
decl_stmt|;
name|int
name|instancedAttribute
init|=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
decl_stmt|;
if|if
condition|(
name|instances
operator|>
literal|0
condition|)
block|{
comment|// Find an indexed attribute to be mapped to D3D stream 0
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|attributes
index|[
name|i
index|]
operator|.
name|active
condition|)
block|{
if|if
condition|(
name|indexedAttribute
operator|==
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
operator|&&
name|attributes
index|[
name|i
index|]
operator|.
name|divisor
operator|==
literal|0
condition|)
block|{
name|indexedAttribute
operator|=
name|i
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|instancedAttribute
operator|==
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
operator|&&
name|attributes
index|[
name|i
index|]
operator|.
name|divisor
operator|!=
literal|0
condition|)
block|{
name|instancedAttribute
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
name|indexedAttribute
operator|!=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
operator|&&
name|instancedAttribute
operator|!=
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
break|break;
comment|// Found both an indexed and instanced attribute
block|}
block|}
if|if
condition|(
name|indexedAttribute
operator|==
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
return|return
name|GL_INVALID_OPERATION
return|;
block|}
block|}
name|D3DVERTEXELEMENT9
name|elements
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
operator|+
literal|1
index|]
decl_stmt|;
name|D3DVERTEXELEMENT9
modifier|*
name|element
init|=
operator|&
name|elements
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|attributes
index|[
name|i
index|]
operator|.
name|active
condition|)
block|{
comment|// Directly binding the storage buffer is not supported for d3d9
name|ASSERT
argument_list|(
name|attributes
index|[
name|i
index|]
operator|.
name|storage
operator|==
name|NULL
argument_list|)
expr_stmt|;
name|int
name|stream
init|=
name|i
decl_stmt|;
if|if
condition|(
name|instances
operator|>
literal|0
condition|)
block|{
comment|// Due to a bug on ATI cards we can't enable instancing when none of the attributes are instanced.
if|if
condition|(
name|instancedAttribute
operator|==
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
operator|*
name|repeatDraw
operator|=
name|instances
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|i
operator|==
name|indexedAttribute
condition|)
block|{
name|stream
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|stream
operator|=
name|indexedAttribute
expr_stmt|;
block|}
name|UINT
name|frequency
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|attributes
index|[
name|i
index|]
operator|.
name|divisor
operator|==
literal|0
condition|)
block|{
name|frequency
operator|=
name|D3DSTREAMSOURCE_INDEXEDDATA
operator||
name|instances
expr_stmt|;
block|}
else|else
block|{
name|frequency
operator|=
name|D3DSTREAMSOURCE_INSTANCEDATA
operator||
name|attributes
index|[
name|i
index|]
operator|.
name|divisor
expr_stmt|;
block|}
name|device
operator|->
name|SetStreamSourceFreq
argument_list|(
name|stream
argument_list|,
name|frequency
argument_list|)
expr_stmt|;
name|mInstancingEnabled
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|VertexBuffer9
modifier|*
name|vertexBuffer
init|=
name|VertexBuffer9
operator|::
name|makeVertexBuffer9
argument_list|(
name|attributes
index|[
name|i
index|]
operator|.
name|vertexBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|mAppliedVBs
index|[
name|stream
index|]
operator|.
name|serial
operator|!=
name|attributes
index|[
name|i
index|]
operator|.
name|serial
operator|||
name|mAppliedVBs
index|[
name|stream
index|]
operator|.
name|stride
operator|!=
name|attributes
index|[
name|i
index|]
operator|.
name|stride
operator|||
name|mAppliedVBs
index|[
name|stream
index|]
operator|.
name|offset
operator|!=
name|attributes
index|[
name|i
index|]
operator|.
name|offset
condition|)
block|{
name|device
operator|->
name|SetStreamSource
argument_list|(
name|stream
argument_list|,
name|vertexBuffer
operator|->
name|getBuffer
argument_list|()
argument_list|,
name|attributes
index|[
name|i
index|]
operator|.
name|offset
argument_list|,
name|attributes
index|[
name|i
index|]
operator|.
name|stride
argument_list|)
expr_stmt|;
name|mAppliedVBs
index|[
name|stream
index|]
operator|.
name|serial
operator|=
name|attributes
index|[
name|i
index|]
operator|.
name|serial
expr_stmt|;
name|mAppliedVBs
index|[
name|stream
index|]
operator|.
name|stride
operator|=
name|attributes
index|[
name|i
index|]
operator|.
name|stride
expr_stmt|;
name|mAppliedVBs
index|[
name|stream
index|]
operator|.
name|offset
operator|=
name|attributes
index|[
name|i
index|]
operator|.
name|offset
expr_stmt|;
block|}
name|gl
operator|::
name|VertexFormat
name|vertexFormat
argument_list|(
operator|*
name|attributes
index|[
name|i
index|]
operator|.
name|attribute
argument_list|,
name|GL_FLOAT
argument_list|)
decl_stmt|;
name|element
operator|->
name|Stream
operator|=
name|stream
expr_stmt|;
name|element
operator|->
name|Offset
operator|=
literal|0
expr_stmt|;
name|element
operator|->
name|Type
operator|=
name|d3d9
operator|::
name|GetNativeVertexFormat
argument_list|(
name|vertexFormat
argument_list|)
expr_stmt|;
name|element
operator|->
name|Method
operator|=
name|D3DDECLMETHOD_DEFAULT
expr_stmt|;
name|element
operator|->
name|Usage
operator|=
name|D3DDECLUSAGE_TEXCOORD
expr_stmt|;
name|element
operator|->
name|UsageIndex
operator|=
name|programBinary
operator|->
name|getSemanticIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|element
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|instances
operator|==
literal|0
operator|||
name|instancedAttribute
operator|==
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|)
block|{
if|if
condition|(
name|mInstancingEnabled
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|;
name|i
operator|++
control|)
block|{
name|device
operator|->
name|SetStreamSourceFreq
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|mInstancingEnabled
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|static
specifier|const
name|D3DVERTEXELEMENT9
name|end
init|=
name|D3DDECL_END
argument_list|()
decl_stmt|;
operator|*
operator|(
name|element
operator|++
operator|)
operator|=
name|end
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_VERTEX_DECL_CACHE_ENTRIES
condition|;
name|i
operator|++
control|)
block|{
name|VertexDeclCacheEntry
modifier|*
name|entry
init|=
operator|&
name|mVertexDeclCache
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|memcmp
argument_list|(
name|entry
operator|->
name|cachedElements
argument_list|,
name|elements
argument_list|,
operator|(
name|element
operator|-
name|elements
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|D3DVERTEXELEMENT9
argument_list|)
argument_list|)
operator|==
literal|0
operator|&&
name|entry
operator|->
name|vertexDeclaration
condition|)
block|{
name|entry
operator|->
name|lruCount
operator|=
operator|++
name|mMaxLru
expr_stmt|;
if|if
condition|(
name|entry
operator|->
name|vertexDeclaration
operator|!=
name|mLastSetVDecl
condition|)
block|{
name|device
operator|->
name|SetVertexDeclaration
argument_list|(
name|entry
operator|->
name|vertexDeclaration
argument_list|)
expr_stmt|;
name|mLastSetVDecl
operator|=
name|entry
operator|->
name|vertexDeclaration
expr_stmt|;
block|}
return|return
name|GL_NO_ERROR
return|;
block|}
block|}
name|VertexDeclCacheEntry
modifier|*
name|lastCache
init|=
name|mVertexDeclCache
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_VERTEX_DECL_CACHE_ENTRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|mVertexDeclCache
index|[
name|i
index|]
operator|.
name|lruCount
operator|<
name|lastCache
operator|->
name|lruCount
condition|)
block|{
name|lastCache
operator|=
operator|&
name|mVertexDeclCache
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastCache
operator|->
name|vertexDeclaration
operator|!=
name|NULL
condition|)
block|{
name|SafeRelease
argument_list|(
name|lastCache
operator|->
name|vertexDeclaration
argument_list|)
expr_stmt|;
comment|// mLastSetVDecl is set to the replacement, so we don't have to worry
comment|// about it.
block|}
name|memcpy
argument_list|(
name|lastCache
operator|->
name|cachedElements
argument_list|,
name|elements
argument_list|,
operator|(
name|element
operator|-
name|elements
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|D3DVERTEXELEMENT9
argument_list|)
argument_list|)
expr_stmt|;
name|device
operator|->
name|CreateVertexDeclaration
argument_list|(
name|elements
argument_list|,
operator|&
name|lastCache
operator|->
name|vertexDeclaration
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetVertexDeclaration
argument_list|(
name|lastCache
operator|->
name|vertexDeclaration
argument_list|)
expr_stmt|;
name|mLastSetVDecl
operator|=
name|lastCache
operator|->
name|vertexDeclaration
expr_stmt|;
name|lastCache
operator|->
name|lruCount
operator|=
operator|++
name|mMaxLru
expr_stmt|;
return|return
name|GL_NO_ERROR
return|;
block|}
DECL|function|markStateDirty
name|void
name|VertexDeclarationCache
operator|::
name|markStateDirty
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|;
name|i
operator|++
control|)
block|{
name|mAppliedVBs
index|[
name|i
index|]
operator|.
name|serial
operator|=
literal|0
expr_stmt|;
block|}
name|mLastSetVDecl
operator|=
name|NULL
expr_stmt|;
name|mInstancingEnabled
operator|=
literal|true
expr_stmt|;
comment|// Forces it to be disabled when not used
block|}
block|}
end_namespace
end_unit
