begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// ShaderCache: Defines rx::ShaderCache, a cache of Direct3D shader objects
end_comment
begin_comment
comment|// keyed by their byte code.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RENDERER_SHADER_CACHE_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RENDERER_SHADER_CACHE_H_
define|#
directive|define
name|LIBGLESV2_RENDERER_SHADER_CACHE_H_
end_define
begin_include
include|#
directive|include
file|"common/debug.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|template
operator|<
name|typename
name|ShaderObject
operator|>
name|class
name|ShaderCache
block|{
name|public
operator|:
name|ShaderCache
argument_list|()
operator|:
name|mDevice
argument_list|(
argument|NULL
argument_list|)
block|{     }
operator|~
name|ShaderCache
argument_list|()
block|{
comment|// Call clear while the device is still valid.
name|ASSERT
argument_list|(
name|mMap
operator|.
name|empty
argument_list|()
argument_list|)
block|;     }
name|void
name|initialize
argument_list|(
argument|IDirect3DDevice9* device
argument_list|)
block|{
name|mDevice
operator|=
name|device
block|;     }
name|ShaderObject
operator|*
name|create
argument_list|(
argument|const DWORD *function
argument_list|,
argument|size_t length
argument_list|)
block|{
name|std
operator|::
name|string
name|key
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|function
operator|)
argument_list|,
name|length
argument_list|)
block|;
name|typename
name|Map
operator|::
name|iterator
name|it
operator|=
name|mMap
operator|.
name|find
argument_list|(
name|key
argument_list|)
block|;
if|if
condition|(
name|it
operator|!=
name|mMap
operator|.
name|end
argument_list|()
condition|)
block|{
name|it
operator|->
name|second
operator|->
name|AddRef
argument_list|()
expr_stmt|;
return|return
name|it
operator|->
name|second
return|;
block|}
name|ShaderObject
modifier|*
name|shader
decl_stmt|;
name|HRESULT
name|result
operator|=
name|createShader
argument_list|(
name|function
argument_list|,
operator|&
name|shader
argument_list|)
block|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|NULL
return|;
block|}
comment|// Random eviction policy.
if|if
condition|(
name|mMap
operator|.
name|size
argument_list|()
operator|>=
name|kMaxMapSize
condition|)
block|{
name|SafeRelease
argument_list|(
name|mMap
operator|.
name|begin
argument_list|()
operator|->
name|second
argument_list|)
expr_stmt|;
name|mMap
operator|.
name|erase
argument_list|(
name|mMap
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|shader
operator|->
name|AddRef
argument_list|()
expr_stmt|;
name|mMap
index|[
name|key
index|]
operator|=
name|shader
expr_stmt|;
return|return
name|shader
return|;
block|}
end_decl_stmt
begin_function
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|typename
name|Map
operator|::
name|iterator
name|it
operator|=
name|mMap
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|mMap
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|SafeRelease
argument_list|(
name|it
operator|->
name|second
argument_list|)
expr_stmt|;
block|}
name|mMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_label
name|private
label|:
end_label
begin_expr_stmt
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|ShaderCache
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
specifier|const
specifier|static
name|size_t
name|kMaxMapSize
init|=
literal|100
decl_stmt|;
end_decl_stmt
begin_function
name|HRESULT
name|createShader
parameter_list|(
specifier|const
name|DWORD
modifier|*
name|function
parameter_list|,
name|IDirect3DVertexShader9
modifier|*
modifier|*
name|shader
parameter_list|)
block|{
return|return
name|mDevice
operator|->
name|CreateVertexShader
argument_list|(
name|function
argument_list|,
name|shader
argument_list|)
return|;
block|}
end_function
begin_function
name|HRESULT
name|createShader
parameter_list|(
specifier|const
name|DWORD
modifier|*
name|function
parameter_list|,
name|IDirect3DPixelShader9
modifier|*
modifier|*
name|shader
parameter_list|)
block|{
return|return
name|mDevice
operator|->
name|CreatePixelShader
argument_list|(
name|function
argument_list|,
name|shader
argument_list|)
return|;
block|}
end_function
begin_typedef
typedef|typedef
name|std
operator|::
name|unordered_map
operator|<
name|std
operator|::
name|string
operator|,
name|ShaderObject
operator|*
operator|>
name|Map
expr_stmt|;
end_typedef
begin_decl_stmt
name|Map
name|mMap
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|IDirect3DDevice9
modifier|*
name|mDevice
decl_stmt|;
end_decl_stmt
begin_typedef
unit|};
typedef|typedef
name|ShaderCache
operator|<
name|IDirect3DVertexShader9
operator|>
name|VertexShaderCache
expr_stmt|;
end_typedef
begin_typedef
typedef|typedef
name|ShaderCache
operator|<
name|IDirect3DPixelShader9
operator|>
name|PixelShaderCache
expr_stmt|;
end_typedef
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RENDERER_SHADER_CACHE_H_
end_comment
end_unit
