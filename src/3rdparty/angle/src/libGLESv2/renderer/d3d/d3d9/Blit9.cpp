begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Blit9.cpp: Surface copy utility class.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/Blit9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/renderer9_utils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/formatutils9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/TextureStorage9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/RenderTarget9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/Renderer9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Framebuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/FramebufferAttachment.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_namespace
namespace|namespace
block|{
comment|// Precompiled shaders
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/shaders/compiled/standardvs.h"
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/shaders/compiled/flipyvs.h"
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/shaders/compiled/passthroughps.h"
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/shaders/compiled/luminanceps.h"
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/shaders/compiled/componentmaskps.h"
DECL|member|g_shaderCode
specifier|const
name|BYTE
modifier|*
specifier|const
name|g_shaderCode
index|[]
init|=
block|{
name|g_vs20_VS_standard
block|,
name|g_vs20_VS_flipy
block|,
name|g_ps20_PS_passthrough
block|,
name|g_ps20_PS_luminance
block|,
name|g_ps20_PS_componentmask
block|}
decl_stmt|;
DECL|member|g_shaderSize
specifier|const
name|size_t
name|g_shaderSize
index|[]
init|=
block|{
sizeof|sizeof
argument_list|(
name|g_vs20_VS_standard
argument_list|)
block|,
sizeof|sizeof
argument_list|(
name|g_vs20_VS_flipy
argument_list|)
block|,
sizeof|sizeof
argument_list|(
name|g_ps20_PS_passthrough
argument_list|)
block|,
sizeof|sizeof
argument_list|(
name|g_ps20_PS_luminance
argument_list|)
block|,
expr|sizeof
operator|(
name|g_ps20_PS_componentmask
operator|)
block|}
decl_stmt|;
block|}
end_namespace
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|Blit9
name|Blit9
operator|::
name|Blit9
parameter_list|(
name|rx
operator|::
name|Renderer9
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|mRenderer
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mQuadVertexBuffer
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mQuadVertexDeclaration
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mSavedStateBlock
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mSavedRenderTarget
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mSavedDepthStencil
argument_list|(
name|NULL
argument_list|)
block|{
name|initGeometry
argument_list|()
expr_stmt|;
name|memset
argument_list|(
name|mCompiledShaders
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|mCompiledShaders
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|~Blit9
name|Blit9
operator|::
name|~
name|Blit9
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mSavedStateBlock
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mQuadVertexBuffer
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mQuadVertexDeclaration
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SHADER_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|SafeRelease
argument_list|(
name|mCompiledShaders
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|initGeometry
name|void
name|Blit9
operator|::
name|initGeometry
parameter_list|()
block|{
specifier|static
specifier|const
name|float
name|quad
index|[]
init|=
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateVertexBuffer
argument_list|(
sizeof|sizeof
argument_list|(
name|quad
argument_list|)
argument_list|,
name|D3DUSAGE_WRITEONLY
argument_list|,
literal|0
argument_list|,
name|D3DPOOL_DEFAULT
argument_list|,
operator|&
name|mQuadVertexBuffer
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|D3DERR_OUTOFVIDEOMEMORY
operator|||
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
name|void
modifier|*
name|lockPtr
init|=
name|NULL
decl_stmt|;
name|result
operator|=
name|mQuadVertexBuffer
operator|->
name|Lock
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|lockPtr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
operator|||
name|lockPtr
operator|==
name|NULL
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|D3DERR_OUTOFVIDEOMEMORY
operator|||
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
name|memcpy
argument_list|(
name|lockPtr
argument_list|,
name|quad
argument_list|,
sizeof|sizeof
argument_list|(
name|quad
argument_list|)
argument_list|)
expr_stmt|;
name|mQuadVertexBuffer
operator|->
name|Unlock
argument_list|()
expr_stmt|;
specifier|static
specifier|const
name|D3DVERTEXELEMENT9
name|elements
index|[]
init|=
block|{
block|{
literal|0
block|,
literal|0
block|,
name|D3DDECLTYPE_FLOAT2
block|,
name|D3DDECLMETHOD_DEFAULT
block|,
name|D3DDECLUSAGE_POSITION
block|,
literal|0
block|}
block|,
name|D3DDECL_END
argument_list|()
block|}
decl_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateVertexDeclaration
argument_list|(
name|elements
argument_list|,
operator|&
name|mQuadVertexDeclaration
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|D3DERR_OUTOFVIDEOMEMORY
operator|||
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
return|;
block|}
block|}
template|template
parameter_list|<
name|class
name|D3DShaderType
parameter_list|>
DECL|function|setShader
name|bool
name|Blit9
operator|::
name|setShader
parameter_list|(
name|ShaderId
name|source
parameter_list|,
specifier|const
name|char
modifier|*
name|profile
parameter_list|,
name|D3DShaderType
modifier|*
function_decl|(
name|rx
operator|::
name|Renderer9
operator|::
modifier|*
name|createShader
function_decl|)
parameter_list|(
specifier|const
name|DWORD
modifier|*
parameter_list|,
name|size_t
name|length
parameter_list|)
parameter_list|,
name|HRESULT
function_decl|(
name|WINAPI
name|IDirect3DDevice9
operator|::
modifier|*
name|setShader
function_decl|)
parameter_list|(
name|D3DShaderType
modifier|*
parameter_list|)
parameter_list|)
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|D3DShaderType
modifier|*
name|shader
decl_stmt|;
if|if
condition|(
name|mCompiledShaders
index|[
name|source
index|]
operator|!=
name|NULL
condition|)
block|{
name|shader
operator|=
cast|static_cast
argument_list|<
name|D3DShaderType
operator|*
argument_list|>
argument_list|(
name|mCompiledShaders
index|[
name|source
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|BYTE
modifier|*
name|shaderCode
init|=
name|g_shaderCode
index|[
name|source
index|]
decl_stmt|;
name|size_t
name|shaderSize
init|=
name|g_shaderSize
index|[
name|source
index|]
decl_stmt|;
name|shader
operator|=
call|(
name|mRenderer
operator|->*
name|createShader
call|)
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|DWORD
operator|*
argument_list|>
argument_list|(
name|shaderCode
argument_list|)
argument_list|,
name|shaderSize
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shader
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to create shader for blit operation"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|mCompiledShaders
index|[
name|source
index|]
operator|=
name|shader
expr_stmt|;
block|}
name|HRESULT
name|hr
init|=
call|(
name|device
operator|->*
name|setShader
call|)
argument_list|(
name|shader
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|hr
argument_list|)
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to set shader for blit operation"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|setVertexShader
name|bool
name|Blit9
operator|::
name|setVertexShader
parameter_list|(
name|ShaderId
name|shader
parameter_list|)
block|{
return|return
name|setShader
argument_list|<
name|IDirect3DVertexShader9
argument_list|>
argument_list|(
name|shader
argument_list|,
literal|"vs_2_0"
argument_list|,
operator|&
name|rx
operator|::
name|Renderer9
operator|::
name|createVertexShader
argument_list|,
operator|&
name|IDirect3DDevice9
operator|::
name|SetVertexShader
argument_list|)
return|;
block|}
DECL|function|setPixelShader
name|bool
name|Blit9
operator|::
name|setPixelShader
parameter_list|(
name|ShaderId
name|shader
parameter_list|)
block|{
return|return
name|setShader
argument_list|<
name|IDirect3DPixelShader9
argument_list|>
argument_list|(
name|shader
argument_list|,
literal|"ps_2_0"
argument_list|,
operator|&
name|rx
operator|::
name|Renderer9
operator|::
name|createPixelShader
argument_list|,
operator|&
name|IDirect3DDevice9
operator|::
name|SetPixelShader
argument_list|)
return|;
block|}
DECL|function|getSurfaceRect
name|RECT
name|Blit9
operator|::
name|getSurfaceRect
parameter_list|(
name|IDirect3DSurface9
modifier|*
name|surface
parameter_list|)
specifier|const
block|{
name|D3DSURFACE_DESC
name|desc
decl_stmt|;
name|surface
operator|->
name|GetDesc
argument_list|(
operator|&
name|desc
argument_list|)
expr_stmt|;
name|RECT
name|rect
decl_stmt|;
name|rect
operator|.
name|left
operator|=
literal|0
expr_stmt|;
name|rect
operator|.
name|top
operator|=
literal|0
expr_stmt|;
name|rect
operator|.
name|right
operator|=
name|desc
operator|.
name|Width
expr_stmt|;
name|rect
operator|.
name|bottom
operator|=
name|desc
operator|.
name|Height
expr_stmt|;
return|return
name|rect
return|;
block|}
DECL|function|boxFilter
name|bool
name|Blit9
operator|::
name|boxFilter
parameter_list|(
name|IDirect3DSurface9
modifier|*
name|source
parameter_list|,
name|IDirect3DSurface9
modifier|*
name|dest
parameter_list|)
block|{
name|IDirect3DTexture9
modifier|*
name|texture
init|=
name|copySurfaceToTexture
argument_list|(
name|source
argument_list|,
name|getSurfaceRect
argument_list|(
name|source
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|saveState
argument_list|()
expr_stmt|;
name|device
operator|->
name|SetTexture
argument_list|(
literal|0
argument_list|,
name|texture
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderTarget
argument_list|(
literal|0
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|setVertexShader
argument_list|(
name|SHADER_VS_STANDARD
argument_list|)
expr_stmt|;
name|setPixelShader
argument_list|(
name|SHADER_PS_PASSTHROUGH
argument_list|)
expr_stmt|;
name|setCommonBlitState
argument_list|()
expr_stmt|;
name|device
operator|->
name|SetSamplerState
argument_list|(
literal|0
argument_list|,
name|D3DSAMP_MINFILTER
argument_list|,
name|D3DTEXF_LINEAR
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetSamplerState
argument_list|(
literal|0
argument_list|,
name|D3DSAMP_MAGFILTER
argument_list|,
name|D3DTEXF_LINEAR
argument_list|)
expr_stmt|;
name|setViewport
argument_list|(
name|getSurfaceRect
argument_list|(
name|dest
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|render
argument_list|()
expr_stmt|;
name|SafeRelease
argument_list|(
name|texture
argument_list|)
expr_stmt|;
name|restoreState
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|copy2D
name|bool
name|Blit9
operator|::
name|copy2D
parameter_list|(
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
parameter_list|,
specifier|const
name|RECT
modifier|&
name|sourceRect
parameter_list|,
name|GLenum
name|destFormat
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|TextureStorage
modifier|*
name|storage
parameter_list|,
name|GLint
name|level
parameter_list|)
block|{
name|RenderTarget9
modifier|*
name|renderTarget
init|=
name|NULL
decl_stmt|;
name|IDirect3DSurface9
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|colorbuffer
init|=
name|framebuffer
operator|->
name|getColorbuffer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorbuffer
condition|)
block|{
name|renderTarget
operator|=
name|d3d9
operator|::
name|GetAttachmentRenderTarget
argument_list|(
name|colorbuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|renderTarget
condition|)
block|{
name|source
operator|=
name|renderTarget
operator|->
name|getSurface
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|source
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to retrieve the render target."
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|TextureStorage9_2D
modifier|*
name|storage9
init|=
name|TextureStorage9_2D
operator|::
name|makeTextureStorage9_2D
argument_list|(
name|storage
argument_list|)
decl_stmt|;
name|IDirect3DSurface9
modifier|*
name|destSurface
init|=
name|storage9
operator|->
name|getSurfaceLevel
argument_list|(
name|level
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|bool
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|destSurface
condition|)
block|{
name|result
operator|=
name|copy
argument_list|(
name|source
argument_list|,
name|sourceRect
argument_list|,
name|destFormat
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|destSurface
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|destSurface
argument_list|)
expr_stmt|;
block|}
name|SafeRelease
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|function|copyCube
name|bool
name|Blit9
operator|::
name|copyCube
parameter_list|(
name|gl
operator|::
name|Framebuffer
modifier|*
name|framebuffer
parameter_list|,
specifier|const
name|RECT
modifier|&
name|sourceRect
parameter_list|,
name|GLenum
name|destFormat
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|TextureStorage
modifier|*
name|storage
parameter_list|,
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
block|{
name|RenderTarget9
modifier|*
name|renderTarget
init|=
name|NULL
decl_stmt|;
name|IDirect3DSurface9
modifier|*
name|source
init|=
name|NULL
decl_stmt|;
name|gl
operator|::
name|FramebufferAttachment
modifier|*
name|colorbuffer
init|=
name|framebuffer
operator|->
name|getColorbuffer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorbuffer
condition|)
block|{
name|renderTarget
operator|=
name|d3d9
operator|::
name|GetAttachmentRenderTarget
argument_list|(
name|colorbuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|renderTarget
condition|)
block|{
name|source
operator|=
name|renderTarget
operator|->
name|getSurface
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|source
condition|)
block|{
name|ERR
argument_list|(
literal|"Failed to retrieve the render target."
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|TextureStorage9_Cube
modifier|*
name|storage9
init|=
name|TextureStorage9_Cube
operator|::
name|makeTextureStorage9_Cube
argument_list|(
name|storage
argument_list|)
decl_stmt|;
name|IDirect3DSurface9
modifier|*
name|destSurface
init|=
name|storage9
operator|->
name|getCubeMapSurface
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|bool
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|destSurface
condition|)
block|{
name|result
operator|=
name|copy
argument_list|(
name|source
argument_list|,
name|sourceRect
argument_list|,
name|destFormat
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|destSurface
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|destSurface
argument_list|)
expr_stmt|;
block|}
name|SafeRelease
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|function|copy
name|bool
name|Blit9
operator|::
name|copy
parameter_list|(
name|IDirect3DSurface9
modifier|*
name|source
parameter_list|,
specifier|const
name|RECT
modifier|&
name|sourceRect
parameter_list|,
name|GLenum
name|destFormat
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|IDirect3DSurface9
modifier|*
name|dest
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dest
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|D3DSURFACE_DESC
name|sourceDesc
decl_stmt|;
name|D3DSURFACE_DESC
name|destDesc
decl_stmt|;
name|source
operator|->
name|GetDesc
argument_list|(
operator|&
name|sourceDesc
argument_list|)
expr_stmt|;
name|dest
operator|->
name|GetDesc
argument_list|(
operator|&
name|destDesc
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceDesc
operator|.
name|Format
operator|==
name|destDesc
operator|.
name|Format
operator|&&
name|destDesc
operator|.
name|Usage
operator|&
name|D3DUSAGE_RENDERTARGET
operator|&&
name|d3d9_gl
operator|::
name|IsFormatChannelEquivalent
argument_list|(
name|destDesc
operator|.
name|Format
argument_list|,
name|destFormat
argument_list|)
condition|)
comment|// Can use StretchRect
block|{
name|RECT
name|destRect
init|=
block|{
name|xoffset
block|,
name|yoffset
block|,
name|xoffset
operator|+
operator|(
name|sourceRect
operator|.
name|right
operator|-
name|sourceRect
operator|.
name|left
operator|)
block|,
name|yoffset
operator|+
operator|(
name|sourceRect
operator|.
name|bottom
operator|-
name|sourceRect
operator|.
name|top
operator|)
block|}
decl_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|StretchRect
argument_list|(
name|source
argument_list|,
operator|&
name|sourceRect
argument_list|,
name|dest
argument_list|,
operator|&
name|destRect
argument_list|,
name|D3DTEXF_POINT
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|D3DERR_OUTOFVIDEOMEMORY
operator|||
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|formatConvert
argument_list|(
name|source
argument_list|,
name|sourceRect
argument_list|,
name|destFormat
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|dest
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|formatConvert
name|bool
name|Blit9
operator|::
name|formatConvert
parameter_list|(
name|IDirect3DSurface9
modifier|*
name|source
parameter_list|,
specifier|const
name|RECT
modifier|&
name|sourceRect
parameter_list|,
name|GLenum
name|destFormat
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|IDirect3DSurface9
modifier|*
name|dest
parameter_list|)
block|{
name|IDirect3DTexture9
modifier|*
name|texture
init|=
name|copySurfaceToTexture
argument_list|(
name|source
argument_list|,
name|sourceRect
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texture
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|saveState
argument_list|()
expr_stmt|;
name|device
operator|->
name|SetTexture
argument_list|(
literal|0
argument_list|,
name|texture
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderTarget
argument_list|(
literal|0
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|setViewport
argument_list|(
name|sourceRect
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|)
expr_stmt|;
name|setCommonBlitState
argument_list|()
expr_stmt|;
if|if
condition|(
name|setFormatConvertShaders
argument_list|(
name|destFormat
argument_list|)
condition|)
block|{
name|render
argument_list|()
expr_stmt|;
block|}
name|SafeRelease
argument_list|(
name|texture
argument_list|)
expr_stmt|;
name|restoreState
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|setFormatConvertShaders
name|bool
name|Blit9
operator|::
name|setFormatConvertShaders
parameter_list|(
name|GLenum
name|destFormat
parameter_list|)
block|{
name|bool
name|okay
init|=
name|setVertexShader
argument_list|(
name|SHADER_VS_STANDARD
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|destFormat
condition|)
block|{
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
case|case
name|GL_RGBA
case|:
case|case
name|GL_BGRA_EXT
case|:
case|case
name|GL_RGB
case|:
case|case
name|GL_RG_EXT
case|:
case|case
name|GL_RED_EXT
case|:
case|case
name|GL_ALPHA
case|:
name|okay
operator|=
name|okay
operator|&&
name|setPixelShader
argument_list|(
name|SHADER_PS_COMPONENTMASK
argument_list|)
expr_stmt|;
break|break;
case|case
name|GL_LUMINANCE
case|:
case|case
name|GL_LUMINANCE_ALPHA
case|:
name|okay
operator|=
name|okay
operator|&&
name|setPixelShader
argument_list|(
name|SHADER_PS_LUMINANCE
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|okay
condition|)
block|{
return|return
literal|false
return|;
block|}
enum|enum
block|{
name|X
init|=
literal|0
block|,
name|Y
init|=
literal|1
block|,
name|Z
init|=
literal|2
block|,
name|W
init|=
literal|3
block|}
enum|;
comment|// The meaning of this constant depends on the shader that was selected.
comment|// See the shader assembly code above for details.
comment|// Allocate one array for both registers and split it into two float4's.
name|float
name|psConst
index|[
literal|8
index|]
init|=
block|{
literal|0
block|}
decl_stmt|;
name|float
modifier|*
name|multConst
init|=
operator|&
name|psConst
index|[
literal|0
index|]
decl_stmt|;
name|float
modifier|*
name|addConst
init|=
operator|&
name|psConst
index|[
literal|4
index|]
decl_stmt|;
switch|switch
condition|(
name|destFormat
condition|)
block|{
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
case|case
name|GL_RGBA
case|:
case|case
name|GL_BGRA_EXT
case|:
name|multConst
index|[
name|X
index|]
operator|=
literal|1
expr_stmt|;
name|multConst
index|[
name|Y
index|]
operator|=
literal|1
expr_stmt|;
name|multConst
index|[
name|Z
index|]
operator|=
literal|1
expr_stmt|;
name|multConst
index|[
name|W
index|]
operator|=
literal|1
expr_stmt|;
name|addConst
index|[
name|X
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|Y
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|Z
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|W
index|]
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|GL_RGB
case|:
name|multConst
index|[
name|X
index|]
operator|=
literal|1
expr_stmt|;
name|multConst
index|[
name|Y
index|]
operator|=
literal|1
expr_stmt|;
name|multConst
index|[
name|Z
index|]
operator|=
literal|1
expr_stmt|;
name|multConst
index|[
name|W
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|X
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|Y
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|Z
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|W
index|]
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|GL_RG_EXT
case|:
name|multConst
index|[
name|X
index|]
operator|=
literal|1
expr_stmt|;
name|multConst
index|[
name|Y
index|]
operator|=
literal|1
expr_stmt|;
name|multConst
index|[
name|Z
index|]
operator|=
literal|0
expr_stmt|;
name|multConst
index|[
name|W
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|X
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|Y
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|Z
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|W
index|]
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|GL_RED_EXT
case|:
name|multConst
index|[
name|X
index|]
operator|=
literal|1
expr_stmt|;
name|multConst
index|[
name|Y
index|]
operator|=
literal|0
expr_stmt|;
name|multConst
index|[
name|Z
index|]
operator|=
literal|0
expr_stmt|;
name|multConst
index|[
name|W
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|X
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|Y
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|Z
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|W
index|]
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|GL_ALPHA
case|:
name|multConst
index|[
name|X
index|]
operator|=
literal|0
expr_stmt|;
name|multConst
index|[
name|Y
index|]
operator|=
literal|0
expr_stmt|;
name|multConst
index|[
name|Z
index|]
operator|=
literal|0
expr_stmt|;
name|multConst
index|[
name|W
index|]
operator|=
literal|1
expr_stmt|;
name|addConst
index|[
name|X
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|Y
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|Z
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|W
index|]
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|GL_LUMINANCE
case|:
name|multConst
index|[
name|X
index|]
operator|=
literal|1
expr_stmt|;
name|multConst
index|[
name|Y
index|]
operator|=
literal|0
expr_stmt|;
name|multConst
index|[
name|Z
index|]
operator|=
literal|0
expr_stmt|;
name|multConst
index|[
name|W
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|X
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|Y
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|Z
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|W
index|]
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|GL_LUMINANCE_ALPHA
case|:
name|multConst
index|[
name|X
index|]
operator|=
literal|1
expr_stmt|;
name|multConst
index|[
name|Y
index|]
operator|=
literal|0
expr_stmt|;
name|multConst
index|[
name|Z
index|]
operator|=
literal|0
expr_stmt|;
name|multConst
index|[
name|W
index|]
operator|=
literal|1
expr_stmt|;
name|addConst
index|[
name|X
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|Y
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|Z
index|]
operator|=
literal|0
expr_stmt|;
name|addConst
index|[
name|W
index|]
operator|=
literal|0
expr_stmt|;
break|break;
block|}
name|mRenderer
operator|->
name|getDevice
argument_list|()
operator|->
name|SetPixelShaderConstantF
argument_list|(
literal|0
argument_list|,
name|psConst
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|copySurfaceToTexture
name|IDirect3DTexture9
modifier|*
name|Blit9
operator|::
name|copySurfaceToTexture
parameter_list|(
name|IDirect3DSurface9
modifier|*
name|surface
parameter_list|,
specifier|const
name|RECT
modifier|&
name|sourceRect
parameter_list|)
block|{
if|if
condition|(
operator|!
name|surface
condition|)
block|{
return|return
name|NULL
return|;
block|}
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|D3DSURFACE_DESC
name|sourceDesc
decl_stmt|;
name|surface
operator|->
name|GetDesc
argument_list|(
operator|&
name|sourceDesc
argument_list|)
expr_stmt|;
comment|// Copy the render target into a texture
name|IDirect3DTexture9
modifier|*
name|texture
decl_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateTexture
argument_list|(
name|sourceRect
operator|.
name|right
operator|-
name|sourceRect
operator|.
name|left
argument_list|,
name|sourceRect
operator|.
name|bottom
operator|-
name|sourceRect
operator|.
name|top
argument_list|,
literal|1
argument_list|,
name|D3DUSAGE_RENDERTARGET
argument_list|,
name|sourceDesc
operator|.
name|Format
argument_list|,
name|D3DPOOL_DEFAULT
argument_list|,
operator|&
name|texture
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|D3DERR_OUTOFVIDEOMEMORY
operator|||
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
operator|(
name|IDirect3DTexture9
operator|*
operator|)
name|NULL
argument_list|)
return|;
block|}
name|IDirect3DSurface9
modifier|*
name|textureSurface
decl_stmt|;
name|result
operator|=
name|texture
operator|->
name|GetSurfaceLevel
argument_list|(
literal|0
argument_list|,
operator|&
name|textureSurface
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|D3DERR_OUTOFVIDEOMEMORY
operator|||
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|texture
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
operator|(
name|IDirect3DTexture9
operator|*
operator|)
name|NULL
argument_list|)
return|;
block|}
name|mRenderer
operator|->
name|endScene
argument_list|()
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|StretchRect
argument_list|(
name|surface
argument_list|,
operator|&
name|sourceRect
argument_list|,
name|textureSurface
argument_list|,
name|NULL
argument_list|,
name|D3DTEXF_NONE
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|textureSurface
argument_list|)
expr_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|D3DERR_OUTOFVIDEOMEMORY
operator|||
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|texture
argument_list|)
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
operator|(
name|IDirect3DTexture9
operator|*
operator|)
name|NULL
argument_list|)
return|;
block|}
return|return
name|texture
return|;
block|}
DECL|function|setViewport
name|void
name|Blit9
operator|::
name|setViewport
parameter_list|(
specifier|const
name|RECT
modifier|&
name|sourceRect
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|)
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|D3DVIEWPORT9
name|vp
decl_stmt|;
name|vp
operator|.
name|X
operator|=
name|xoffset
expr_stmt|;
name|vp
operator|.
name|Y
operator|=
name|yoffset
expr_stmt|;
name|vp
operator|.
name|Width
operator|=
name|sourceRect
operator|.
name|right
operator|-
name|sourceRect
operator|.
name|left
expr_stmt|;
name|vp
operator|.
name|Height
operator|=
name|sourceRect
operator|.
name|bottom
operator|-
name|sourceRect
operator|.
name|top
expr_stmt|;
name|vp
operator|.
name|MinZ
operator|=
literal|0.0f
expr_stmt|;
name|vp
operator|.
name|MaxZ
operator|=
literal|1.0f
expr_stmt|;
name|device
operator|->
name|SetViewport
argument_list|(
operator|&
name|vp
argument_list|)
expr_stmt|;
name|float
name|halfPixelAdjust
index|[
literal|4
index|]
init|=
block|{
operator|-
literal|1.0f
operator|/
name|vp
operator|.
name|Width
block|,
literal|1.0f
operator|/
name|vp
operator|.
name|Height
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|device
operator|->
name|SetVertexShaderConstantF
argument_list|(
literal|0
argument_list|,
name|halfPixelAdjust
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|function|setCommonBlitState
name|void
name|Blit9
operator|::
name|setCommonBlitState
parameter_list|()
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|device
operator|->
name|SetDepthStencilSurface
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_FILLMODE
argument_list|,
name|D3DFILL_SOLID
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_ALPHATESTENABLE
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_ALPHABLENDENABLE
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_CULLMODE
argument_list|,
name|D3DCULL_NONE
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_CLIPPLANEENABLE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_COLORWRITEENABLE
argument_list|,
name|D3DCOLORWRITEENABLE_ALPHA
operator||
name|D3DCOLORWRITEENABLE_BLUE
operator||
name|D3DCOLORWRITEENABLE_GREEN
operator||
name|D3DCOLORWRITEENABLE_RED
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_SRGBWRITEENABLE
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderState
argument_list|(
name|D3DRS_SCISSORTESTENABLE
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetSamplerState
argument_list|(
literal|0
argument_list|,
name|D3DSAMP_MAGFILTER
argument_list|,
name|D3DTEXF_POINT
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetSamplerState
argument_list|(
literal|0
argument_list|,
name|D3DSAMP_MINFILTER
argument_list|,
name|D3DTEXF_POINT
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetSamplerState
argument_list|(
literal|0
argument_list|,
name|D3DSAMP_SRGBTEXTURE
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetSamplerState
argument_list|(
literal|0
argument_list|,
name|D3DSAMP_ADDRESSU
argument_list|,
name|D3DTADDRESS_CLAMP
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetSamplerState
argument_list|(
literal|0
argument_list|,
name|D3DSAMP_ADDRESSV
argument_list|,
name|D3DTADDRESS_CLAMP
argument_list|)
expr_stmt|;
name|RECT
name|scissorRect
init|=
block|{
literal|0
block|}
decl_stmt|;
comment|// Scissoring is disabled for flipping, but we need this to capture and restore the old rectangle
name|device
operator|->
name|SetScissorRect
argument_list|(
operator|&
name|scissorRect
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
condition|;
name|i
operator|++
control|)
block|{
name|device
operator|->
name|SetStreamSourceFreq
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|render
name|void
name|Blit9
operator|::
name|render
parameter_list|()
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|HRESULT
name|hr
init|=
name|device
operator|->
name|SetStreamSource
argument_list|(
literal|0
argument_list|,
name|mQuadVertexBuffer
argument_list|,
literal|0
argument_list|,
literal|2
operator|*
sizeof|sizeof
argument_list|(
name|float
argument_list|)
argument_list|)
decl_stmt|;
name|hr
operator|=
name|device
operator|->
name|SetVertexDeclaration
argument_list|(
name|mQuadVertexDeclaration
argument_list|)
expr_stmt|;
name|mRenderer
operator|->
name|startScene
argument_list|()
expr_stmt|;
name|hr
operator|=
name|device
operator|->
name|DrawPrimitive
argument_list|(
name|D3DPT_TRIANGLESTRIP
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|function|saveState
name|void
name|Blit9
operator|::
name|saveState
parameter_list|()
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|HRESULT
name|hr
decl_stmt|;
name|device
operator|->
name|GetDepthStencilSurface
argument_list|(
operator|&
name|mSavedDepthStencil
argument_list|)
expr_stmt|;
name|device
operator|->
name|GetRenderTarget
argument_list|(
literal|0
argument_list|,
operator|&
name|mSavedRenderTarget
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSavedStateBlock
operator|==
name|NULL
condition|)
block|{
name|hr
operator|=
name|device
operator|->
name|BeginStateBlock
argument_list|()
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|||
name|hr
operator|==
name|D3DERR_OUTOFVIDEOMEMORY
operator|||
name|hr
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
name|setCommonBlitState
argument_list|()
expr_stmt|;
specifier|static
specifier|const
name|float
name|dummyConst
index|[
literal|8
index|]
init|=
block|{
literal|0
block|}
decl_stmt|;
name|device
operator|->
name|SetVertexShader
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetVertexShaderConstantF
argument_list|(
literal|0
argument_list|,
name|dummyConst
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetPixelShader
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetPixelShaderConstantF
argument_list|(
literal|0
argument_list|,
name|dummyConst
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|D3DVIEWPORT9
name|dummyVp
decl_stmt|;
name|dummyVp
operator|.
name|X
operator|=
literal|0
expr_stmt|;
name|dummyVp
operator|.
name|Y
operator|=
literal|0
expr_stmt|;
name|dummyVp
operator|.
name|Width
operator|=
literal|1
expr_stmt|;
name|dummyVp
operator|.
name|Height
operator|=
literal|1
expr_stmt|;
name|dummyVp
operator|.
name|MinZ
operator|=
literal|0
expr_stmt|;
name|dummyVp
operator|.
name|MaxZ
operator|=
literal|1
expr_stmt|;
name|device
operator|->
name|SetViewport
argument_list|(
operator|&
name|dummyVp
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetTexture
argument_list|(
literal|0
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetStreamSource
argument_list|(
literal|0
argument_list|,
name|mQuadVertexBuffer
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetVertexDeclaration
argument_list|(
name|mQuadVertexDeclaration
argument_list|)
expr_stmt|;
name|hr
operator|=
name|device
operator|->
name|EndStateBlock
argument_list|(
operator|&
name|mSavedStateBlock
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
operator|||
name|hr
operator|==
name|D3DERR_OUTOFVIDEOMEMORY
operator|||
name|hr
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
block|}
name|ASSERT
argument_list|(
name|mSavedStateBlock
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSavedStateBlock
operator|!=
name|NULL
condition|)
block|{
name|hr
operator|=
name|mSavedStateBlock
operator|->
name|Capture
argument_list|()
expr_stmt|;
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|hr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|restoreState
name|void
name|Blit9
operator|::
name|restoreState
parameter_list|()
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|device
operator|->
name|SetDepthStencilSurface
argument_list|(
name|mSavedDepthStencil
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mSavedDepthStencil
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderTarget
argument_list|(
literal|0
argument_list|,
name|mSavedRenderTarget
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|mSavedRenderTarget
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|mSavedStateBlock
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSavedStateBlock
operator|!=
name|NULL
condition|)
block|{
name|mSavedStateBlock
operator|->
name|Apply
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_namespace
end_unit
