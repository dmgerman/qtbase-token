begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// RenderTarget9.cpp: Implements a D3D9-specific wrapper for IDirect3DSurface9
end_comment
begin_comment
comment|// pointers retained by renderbuffers.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/RenderTarget9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/Renderer9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/renderer9_utils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/d3d9/formatutils9.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
comment|// TODO: AddRef the incoming surface to take ownership instead of expecting that its ref is being given.
DECL|function|RenderTarget9
name|RenderTarget9
operator|::
name|RenderTarget9
parameter_list|(
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|IDirect3DSurface9
modifier|*
name|surface
parameter_list|)
block|{
name|mRenderer
operator|=
name|Renderer9
operator|::
name|makeRenderer9
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
name|mRenderTarget
operator|=
name|surface
expr_stmt|;
if|if
condition|(
name|mRenderTarget
condition|)
block|{
name|D3DSURFACE_DESC
name|description
decl_stmt|;
name|mRenderTarget
operator|->
name|GetDesc
argument_list|(
operator|&
name|description
argument_list|)
expr_stmt|;
name|mWidth
operator|=
name|description
operator|.
name|Width
expr_stmt|;
name|mHeight
operator|=
name|description
operator|.
name|Height
expr_stmt|;
name|mDepth
operator|=
literal|1
expr_stmt|;
specifier|const
name|d3d9
operator|::
name|D3DFormat
modifier|&
name|d3dFormatInfo
init|=
name|d3d9
operator|::
name|GetD3DFormatInfo
argument_list|(
name|description
operator|.
name|Format
argument_list|)
decl_stmt|;
name|mInternalFormat
operator|=
name|d3dFormatInfo
operator|.
name|internalFormat
expr_stmt|;
name|mActualFormat
operator|=
name|d3dFormatInfo
operator|.
name|internalFormat
expr_stmt|;
name|mSamples
operator|=
name|d3d9_gl
operator|::
name|GetSamplesCount
argument_list|(
name|description
operator|.
name|MultiSampleType
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|RenderTarget9
name|RenderTarget9
operator|::
name|RenderTarget9
parameter_list|(
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLsizei
name|samples
parameter_list|)
block|{
name|mRenderer
operator|=
name|Renderer9
operator|::
name|makeRenderer9
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
name|mRenderTarget
operator|=
name|NULL
expr_stmt|;
specifier|const
name|d3d9
operator|::
name|TextureFormat
modifier|&
name|d3d9FormatInfo
init|=
name|d3d9
operator|::
name|GetTextureFormatInfo
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
specifier|const
name|d3d9
operator|::
name|D3DFormat
modifier|&
name|d3dFormatInfo
init|=
name|d3d9
operator|::
name|GetD3DFormatInfo
argument_list|(
name|d3d9FormatInfo
operator|.
name|renderFormat
argument_list|)
decl_stmt|;
specifier|const
name|gl
operator|::
name|TextureCaps
modifier|&
name|textureCaps
init|=
name|mRenderer
operator|->
name|getRendererTextureCaps
argument_list|()
operator|.
name|get
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
name|GLuint
name|supportedSamples
init|=
name|textureCaps
operator|.
name|getNearestSamples
argument_list|(
name|samples
argument_list|)
decl_stmt|;
name|HRESULT
name|result
init|=
name|D3DERR_INVALIDCALL
decl_stmt|;
if|if
condition|(
name|width
operator|>
literal|0
operator|&&
name|height
operator|>
literal|0
condition|)
block|{
name|IDirect3DDevice9
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|bool
name|requiresInitialization
init|=
literal|false
decl_stmt|;
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|internalFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatInfo
operator|.
name|depthBits
operator|>
literal|0
operator|||
name|formatInfo
operator|.
name|stencilBits
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|device
operator|->
name|CreateDepthStencilSurface
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|d3d9FormatInfo
operator|.
name|renderFormat
argument_list|,
name|gl_d3d9
operator|::
name|GetMultisampleType
argument_list|(
name|supportedSamples
argument_list|)
argument_list|,
literal|0
argument_list|,
name|FALSE
argument_list|,
operator|&
name|mRenderTarget
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requiresInitialization
operator|=
operator|(
name|d3d9FormatInfo
operator|.
name|dataInitializerFunction
operator|!=
name|NULL
operator|)
expr_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateRenderTarget
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|d3d9FormatInfo
operator|.
name|renderFormat
argument_list|,
name|gl_d3d9
operator|::
name|GetMultisampleType
argument_list|(
name|supportedSamples
argument_list|)
argument_list|,
literal|0
argument_list|,
name|FALSE
argument_list|,
operator|&
name|mRenderTarget
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
name|D3DERR_OUTOFVIDEOMEMORY
operator|||
name|result
operator|==
name|E_OUTOFMEMORY
condition|)
block|{
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
expr_stmt|;
return|return;
block|}
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|requiresInitialization
condition|)
block|{
comment|// This format requires that the data be initialized before the render target can be used
comment|// Unfortunately this requires a Get call on the d3d device but it is far better than having
comment|// to mark the render target as lockable and copy data to the gpu.
name|IDirect3DSurface9
modifier|*
name|prevRenderTarget
init|=
name|NULL
decl_stmt|;
name|device
operator|->
name|GetRenderTarget
argument_list|(
literal|0
argument_list|,
operator|&
name|prevRenderTarget
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderTarget
argument_list|(
literal|0
argument_list|,
name|mRenderTarget
argument_list|)
expr_stmt|;
name|device
operator|->
name|Clear
argument_list|(
literal|0
argument_list|,
name|NULL
argument_list|,
name|D3DCLEAR_TARGET
argument_list|,
name|D3DCOLOR_RGBA
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
argument_list|,
literal|0.0f
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|device
operator|->
name|SetRenderTarget
argument_list|(
literal|0
argument_list|,
name|prevRenderTarget
argument_list|)
expr_stmt|;
block|}
block|}
name|mWidth
operator|=
name|width
expr_stmt|;
name|mHeight
operator|=
name|height
expr_stmt|;
name|mDepth
operator|=
literal|1
expr_stmt|;
name|mInternalFormat
operator|=
name|internalFormat
expr_stmt|;
name|mSamples
operator|=
name|supportedSamples
expr_stmt|;
name|mActualFormat
operator|=
name|d3dFormatInfo
operator|.
name|internalFormat
expr_stmt|;
block|}
DECL|function|~RenderTarget9
name|RenderTarget9
operator|::
name|~
name|RenderTarget9
parameter_list|()
block|{
name|SafeRelease
argument_list|(
name|mRenderTarget
argument_list|)
expr_stmt|;
block|}
DECL|function|makeRenderTarget9
name|RenderTarget9
modifier|*
name|RenderTarget9
operator|::
name|makeRenderTarget9
parameter_list|(
name|RenderTarget
modifier|*
name|target
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|rx
operator|::
name|RenderTarget9
operator|*
argument_list|,
name|target
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|rx
operator|::
name|RenderTarget9
operator|*
argument_list|>
argument_list|(
name|target
argument_list|)
return|;
block|}
DECL|function|invalidate
name|void
name|RenderTarget9
operator|::
name|invalidate
parameter_list|(
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
comment|// Currently a no-op
block|}
DECL|function|getSurface
name|IDirect3DSurface9
modifier|*
name|RenderTarget9
operator|::
name|getSurface
parameter_list|()
block|{
comment|// Caller is responsible for releasing the returned surface reference.
comment|// TODO: remove the AddRef to match RenderTarget11
if|if
condition|(
name|mRenderTarget
condition|)
block|{
name|mRenderTarget
operator|->
name|AddRef
argument_list|()
expr_stmt|;
block|}
return|return
name|mRenderTarget
return|;
block|}
block|}
end_namespace
end_unit
