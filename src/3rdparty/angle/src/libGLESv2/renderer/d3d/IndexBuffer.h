begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// IndexBuffer.h: Defines the abstract IndexBuffer class and IndexBufferInterface
end_comment
begin_comment
comment|// class with derivations, classes that perform graphics API agnostic index buffer operations.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RENDERER_INDEXBUFFER_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RENDERER_INDEXBUFFER_H_
define|#
directive|define
name|LIBGLESV2_RENDERER_INDEXBUFFER_H_
end_define
begin_include
include|#
directive|include
file|"common/angleutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Error.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/IndexRangeCache.h"
end_include
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|Renderer
decl_stmt|;
name|class
name|IndexBuffer
block|{
name|public
label|:
name|IndexBuffer
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|IndexBuffer
argument_list|()
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|initialize
argument_list|(
argument|unsigned int bufferSize
argument_list|,
argument|GLenum indexType
argument_list|,
argument|bool dynamic
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|mapBuffer
argument_list|(
argument|unsigned int offset
argument_list|,
argument|unsigned int size
argument_list|,
argument|void** outMappedMemory
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|unmapBuffer
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|discard
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|GLenum
name|getIndexType
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|unsigned
name|int
name|getBufferSize
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|setSize
argument_list|(
argument|unsigned int bufferSize
argument_list|,
argument|GLenum indexType
argument_list|)
operator|=
literal|0
expr_stmt|;
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
expr_stmt|;
name|protected
label|:
name|void
name|updateSerial
parameter_list|()
function_decl|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|IndexBuffer
argument_list|)
expr_stmt|;
name|unsigned
name|int
name|mSerial
decl_stmt|;
specifier|static
name|unsigned
name|int
name|mNextSerial
decl_stmt|;
block|}
empty_stmt|;
name|class
name|IndexBufferInterface
block|{
name|public
label|:
name|IndexBufferInterface
argument_list|(
argument|Renderer *renderer
argument_list|,
argument|bool dynamic
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|IndexBufferInterface
argument_list|()
expr_stmt|;
name|virtual
name|gl
operator|::
name|Error
name|reserveBufferSpace
argument_list|(
argument|unsigned int size
argument_list|,
argument|GLenum indexType
argument_list|)
operator|=
literal|0
expr_stmt|;
name|GLenum
name|getIndexType
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|int
name|getBufferSize
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|int
name|getSerial
argument_list|()
specifier|const
expr_stmt|;
name|gl
operator|::
name|Error
name|mapBuffer
argument_list|(
argument|unsigned int size
argument_list|,
argument|void** outMappedMemory
argument_list|,
argument|unsigned int *streamOffset
argument_list|)
expr_stmt|;
name|gl
operator|::
name|Error
name|unmapBuffer
argument_list|()
expr_stmt|;
name|IndexBuffer
operator|*
name|getIndexBuffer
argument_list|()
specifier|const
expr_stmt|;
name|protected
label|:
name|unsigned
name|int
name|getWritePosition
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setWritePosition
parameter_list|(
name|unsigned
name|int
name|writePosition
parameter_list|)
function_decl|;
name|gl
operator|::
name|Error
name|discard
argument_list|()
expr_stmt|;
name|gl
operator|::
name|Error
name|setBufferSize
argument_list|(
argument|unsigned int bufferSize
argument_list|,
argument|GLenum indexType
argument_list|)
expr_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|IndexBufferInterface
argument_list|)
expr_stmt|;
name|rx
operator|::
name|Renderer
operator|*
specifier|const
name|mRenderer
expr_stmt|;
name|IndexBuffer
modifier|*
name|mIndexBuffer
decl_stmt|;
name|unsigned
name|int
name|mWritePosition
decl_stmt|;
name|bool
name|mDynamic
decl_stmt|;
block|}
empty_stmt|;
name|class
name|StreamingIndexBufferInterface
range|:
name|public
name|IndexBufferInterface
block|{
name|public
operator|:
name|StreamingIndexBufferInterface
argument_list|(
name|Renderer
operator|*
name|renderer
argument_list|)
block|;
operator|~
name|StreamingIndexBufferInterface
argument_list|()
block|;
name|virtual
name|gl
operator|::
name|Error
name|reserveBufferSpace
argument_list|(
argument|unsigned int size
argument_list|,
argument|GLenum indexType
argument_list|)
block|; }
decl_stmt|;
name|class
name|StaticIndexBufferInterface
range|:
name|public
name|IndexBufferInterface
block|{
name|public
operator|:
name|explicit
name|StaticIndexBufferInterface
argument_list|(
name|Renderer
operator|*
name|renderer
argument_list|)
block|;
operator|~
name|StaticIndexBufferInterface
argument_list|()
block|;
name|virtual
name|gl
operator|::
name|Error
name|reserveBufferSpace
argument_list|(
argument|unsigned int size
argument_list|,
argument|GLenum indexType
argument_list|)
block|;
name|IndexRangeCache
operator|*
name|getIndexRangeCache
argument_list|()
block|;
name|private
operator|:
name|IndexRangeCache
name|mIndexRangeCache
block|; }
decl_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RENDERER_INDEXBUFFER_H_
end_comment
end_unit
