begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// TextureD3D.h: Implementations of the Texture interfaces shared betweeen the D3D backends.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LIBGLESV2_RENDERER_TEXTURED3D_H_
end_ifndef
begin_define
DECL|macro|LIBGLESV2_RENDERER_TEXTURED3D_H_
define|#
directive|define
name|LIBGLESV2_RENDERER_TEXTURED3D_H_
end_define
begin_include
include|#
directive|include
file|"libGLESv2/renderer/TextureImpl.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/angletypes.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/constants.h"
end_include
begin_decl_stmt
name|namespace
name|gl
block|{
name|class
name|Framebuffer
decl_stmt|;
block|}
end_decl_stmt
begin_decl_stmt
name|namespace
name|rx
block|{
name|class
name|Image
decl_stmt|;
name|class
name|ImageD3D
decl_stmt|;
name|class
name|Renderer
decl_stmt|;
name|class
name|TextureStorageInterface
decl_stmt|;
name|class
name|TextureStorageInterface2D
decl_stmt|;
name|class
name|TextureStorageInterfaceCube
decl_stmt|;
name|class
name|TextureStorageInterface3D
decl_stmt|;
name|class
name|TextureStorageInterface2DArray
decl_stmt|;
name|bool
name|IsMipmapFiltered
argument_list|(
specifier|const
name|gl
operator|::
name|SamplerState
operator|&
name|samplerState
argument_list|)
decl_stmt|;
name|class
name|TextureD3D
block|{
name|public
label|:
name|TextureD3D
argument_list|(
name|Renderer
operator|*
name|renderer
argument_list|)
expr_stmt|;
name|virtual
operator|~
name|TextureD3D
argument_list|()
expr_stmt|;
name|GLint
name|getBaseLevelWidth
argument_list|()
specifier|const
expr_stmt|;
name|GLint
name|getBaseLevelHeight
argument_list|()
specifier|const
expr_stmt|;
name|GLint
name|getBaseLevelDepth
argument_list|()
specifier|const
expr_stmt|;
name|GLenum
name|getBaseLevelInternalFormat
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isImmutable
argument_list|()
specifier|const
block|{
return|return
name|mImmutable
return|;
block|}
name|protected
label|:
name|void
name|setImage
argument_list|(
specifier|const
name|gl
operator|::
name|PixelUnpackState
operator|&
name|unpack
argument_list|,
name|GLenum
name|type
argument_list|,
specifier|const
name|void
operator|*
name|pixels
argument_list|,
name|Image
operator|*
name|image
argument_list|)
decl_stmt|;
name|bool
name|subImage
argument_list|(
name|GLint
name|xoffset
argument_list|,
name|GLint
name|yoffset
argument_list|,
name|GLint
name|zoffset
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|GLsizei
name|depth
argument_list|,
name|GLenum
name|format
argument_list|,
name|GLenum
name|type
argument_list|,
specifier|const
name|gl
operator|::
name|PixelUnpackState
operator|&
name|unpack
argument_list|,
specifier|const
name|void
operator|*
name|pixels
argument_list|,
name|Image
operator|*
name|image
argument_list|)
decl_stmt|;
name|void
name|setCompressedImage
parameter_list|(
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|,
name|Image
modifier|*
name|image
parameter_list|)
function_decl|;
name|bool
name|subImageCompressed
parameter_list|(
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|,
name|Image
modifier|*
name|image
parameter_list|)
function_decl|;
name|bool
name|isFastUnpackable
argument_list|(
specifier|const
name|gl
operator|::
name|PixelUnpackState
operator|&
name|unpack
argument_list|,
name|GLenum
name|sizedInternalFormat
argument_list|)
decl_stmt|;
name|bool
name|fastUnpackPixels
argument_list|(
specifier|const
name|gl
operator|::
name|PixelUnpackState
operator|&
name|unpack
argument_list|,
specifier|const
name|void
operator|*
name|pixels
argument_list|,
specifier|const
name|gl
operator|::
name|Box
operator|&
name|destArea
argument_list|,
name|GLenum
name|sizedInternalFormat
argument_list|,
name|GLenum
name|type
argument_list|,
name|RenderTarget
operator|*
name|destRenderTarget
argument_list|)
decl_stmt|;
name|GLint
name|creationLevels
argument_list|(
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|GLsizei
name|depth
argument_list|)
decl|const
decl_stmt|;
name|int
name|mipLevels
argument_list|()
specifier|const
expr_stmt|;
name|Renderer
modifier|*
name|mRenderer
decl_stmt|;
name|GLenum
name|mUsage
decl_stmt|;
name|bool
name|mDirtyImages
decl_stmt|;
name|bool
name|mImmutable
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|TextureD3D
argument_list|)
expr_stmt|;
name|virtual
name|TextureStorageInterface
modifier|*
name|getBaseLevelStorage
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|ImageD3D
operator|*
name|getBaseLevelImage
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
block|}
empty_stmt|;
name|class
name|TextureD3D_2D
range|:
name|public
name|Texture2DImpl
decl_stmt|,
name|public
name|TextureD3D
block|{
name|public
label|:
name|TextureD3D_2D
argument_list|(
name|Renderer
operator|*
name|renderer
argument_list|)
expr_stmt|;
name|virtual
operator|~
name|TextureD3D_2D
argument_list|()
expr_stmt|;
specifier|static
name|TextureD3D_2D
modifier|*
name|makeTextureD3D_2D
parameter_list|(
name|Texture2DImpl
modifier|*
name|texture
parameter_list|)
function_decl|;
name|virtual
name|TextureStorageInterface
modifier|*
name|getNativeTexture
parameter_list|()
function_decl|;
name|virtual
name|Image
modifier|*
name|getImage
argument_list|(
name|int
name|level
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|setUsage
parameter_list|(
name|GLenum
name|usage
parameter_list|)
function_decl|;
name|virtual
name|bool
name|hasDirtyImages
argument_list|()
specifier|const
block|{
return|return
name|mDirtyImages
return|;
block|}
name|virtual
name|void
name|resetDirty
parameter_list|()
function_decl|;
name|GLsizei
name|getWidth
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|GLsizei
name|getHeight
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|GLenum
name|getInternalFormat
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|GLenum
name|getActualFormat
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isDepth
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|setImage
argument_list|(
name|GLint
name|level
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|GLenum
name|internalFormat
argument_list|,
name|GLenum
name|format
argument_list|,
name|GLenum
name|type
argument_list|,
specifier|const
name|gl
operator|::
name|PixelUnpackState
operator|&
name|unpack
argument_list|,
specifier|const
name|void
operator|*
name|pixels
argument_list|)
decl_stmt|;
name|virtual
name|void
name|setCompressedImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
function_decl|;
name|virtual
name|void
name|subImage
argument_list|(
name|GLint
name|level
argument_list|,
name|GLint
name|xoffset
argument_list|,
name|GLint
name|yoffset
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|GLenum
name|format
argument_list|,
name|GLenum
name|type
argument_list|,
specifier|const
name|gl
operator|::
name|PixelUnpackState
operator|&
name|unpack
argument_list|,
specifier|const
name|void
operator|*
name|pixels
argument_list|)
decl_stmt|;
name|virtual
name|void
name|subImageCompressed
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
function_decl|;
name|virtual
name|void
name|copyImage
argument_list|(
name|GLint
name|level
argument_list|,
name|GLenum
name|format
argument_list|,
name|GLint
name|x
argument_list|,
name|GLint
name|y
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|gl
operator|::
name|Framebuffer
operator|*
name|source
argument_list|)
decl_stmt|;
name|virtual
name|void
name|copySubImage
argument_list|(
name|GLenum
name|target
argument_list|,
name|GLint
name|level
argument_list|,
name|GLint
name|xoffset
argument_list|,
name|GLint
name|yoffset
argument_list|,
name|GLint
name|zoffset
argument_list|,
name|GLint
name|x
argument_list|,
name|GLint
name|y
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|gl
operator|::
name|Framebuffer
operator|*
name|source
argument_list|)
decl_stmt|;
name|virtual
name|void
name|storage
parameter_list|(
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
function_decl|;
name|virtual
name|bool
name|isSamplerComplete
argument_list|(
specifier|const
name|gl
operator|::
name|SamplerState
operator|&
name|samplerState
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|bindTexImage
argument_list|(
name|egl
operator|::
name|Surface
operator|*
name|surface
argument_list|)
decl_stmt|;
name|virtual
name|void
name|releaseTexImage
parameter_list|()
function_decl|;
name|virtual
name|void
name|generateMipmaps
parameter_list|()
function_decl|;
name|virtual
name|unsigned
name|int
name|getRenderTargetSerial
parameter_list|(
name|GLint
name|level
parameter_list|)
function_decl|;
name|virtual
name|RenderTarget
modifier|*
name|getRenderTarget
parameter_list|(
name|GLint
name|level
parameter_list|)
function_decl|;
name|virtual
name|RenderTarget
modifier|*
name|getDepthSencil
parameter_list|(
name|GLint
name|level
parameter_list|)
function_decl|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|TextureD3D_2D
argument_list|)
expr_stmt|;
name|void
name|initializeStorage
parameter_list|(
name|bool
name|renderTarget
parameter_list|)
function_decl|;
name|TextureStorageInterface2D
modifier|*
name|createCompleteStorage
argument_list|(
name|bool
name|renderTarget
argument_list|)
decl|const
decl_stmt|;
name|void
name|setCompleteTexStorage
parameter_list|(
name|TextureStorageInterface2D
modifier|*
name|newCompleteTexStorage
parameter_list|)
function_decl|;
name|void
name|updateStorage
parameter_list|()
function_decl|;
name|bool
name|ensureRenderTarget
parameter_list|()
function_decl|;
name|virtual
name|TextureStorageInterface
modifier|*
name|getBaseLevelStorage
parameter_list|()
function_decl|;
name|virtual
specifier|const
name|ImageD3D
operator|*
name|getBaseLevelImage
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isMipmapComplete
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isValidLevel
argument_list|(
name|int
name|level
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isLevelComplete
argument_list|(
name|int
name|level
argument_list|)
decl|const
decl_stmt|;
name|void
name|updateStorageLevel
parameter_list|(
name|int
name|level
parameter_list|)
function_decl|;
name|virtual
name|void
name|redefineImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
function_decl|;
name|void
name|commitRect
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
function_decl|;
name|TextureStorageInterface2D
modifier|*
name|mTexStorage
decl_stmt|;
name|ImageD3D
modifier|*
name|mImageArray
index|[
name|gl
operator|::
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
index|]
decl_stmt|;
block|}
empty_stmt|;
name|class
name|TextureD3D_Cube
range|:
name|public
name|TextureCubeImpl
decl_stmt|,
name|public
name|TextureD3D
block|{
name|public
label|:
name|TextureD3D_Cube
argument_list|(
name|Renderer
operator|*
name|renderer
argument_list|)
expr_stmt|;
name|virtual
operator|~
name|TextureD3D_Cube
argument_list|()
expr_stmt|;
specifier|static
name|TextureD3D_Cube
modifier|*
name|makeTextureD3D_Cube
parameter_list|(
name|TextureCubeImpl
modifier|*
name|texture
parameter_list|)
function_decl|;
name|virtual
name|TextureStorageInterface
modifier|*
name|getNativeTexture
parameter_list|()
function_decl|;
name|virtual
name|Image
modifier|*
name|getImage
argument_list|(
name|GLenum
name|target
argument_list|,
name|int
name|level
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|setUsage
parameter_list|(
name|GLenum
name|usage
parameter_list|)
function_decl|;
name|virtual
name|bool
name|hasDirtyImages
argument_list|()
specifier|const
block|{
return|return
name|mDirtyImages
return|;
block|}
name|virtual
name|void
name|resetDirty
parameter_list|()
function_decl|;
name|GLenum
name|getInternalFormat
argument_list|(
name|GLenum
name|target
argument_list|,
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isDepth
argument_list|(
name|GLenum
name|target
argument_list|,
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|setImage
argument_list|(
name|int
name|faceIndex
argument_list|,
name|GLint
name|level
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|GLenum
name|internalFormat
argument_list|,
name|GLenum
name|format
argument_list|,
name|GLenum
name|type
argument_list|,
specifier|const
name|gl
operator|::
name|PixelUnpackState
operator|&
name|unpack
argument_list|,
specifier|const
name|void
operator|*
name|pixels
argument_list|)
decl_stmt|;
name|virtual
name|void
name|setCompressedImage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
function_decl|;
name|virtual
name|void
name|subImage
argument_list|(
name|GLenum
name|target
argument_list|,
name|GLint
name|level
argument_list|,
name|GLint
name|xoffset
argument_list|,
name|GLint
name|yoffset
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|GLenum
name|format
argument_list|,
name|GLenum
name|type
argument_list|,
specifier|const
name|gl
operator|::
name|PixelUnpackState
operator|&
name|unpack
argument_list|,
specifier|const
name|void
operator|*
name|pixels
argument_list|)
decl_stmt|;
name|virtual
name|void
name|subImageCompressed
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
function_decl|;
name|virtual
name|void
name|copyImage
argument_list|(
name|GLenum
name|target
argument_list|,
name|GLint
name|level
argument_list|,
name|GLenum
name|format
argument_list|,
name|GLint
name|x
argument_list|,
name|GLint
name|y
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|gl
operator|::
name|Framebuffer
operator|*
name|source
argument_list|)
decl_stmt|;
name|virtual
name|void
name|copySubImage
argument_list|(
name|GLenum
name|target
argument_list|,
name|GLint
name|level
argument_list|,
name|GLint
name|xoffset
argument_list|,
name|GLint
name|yoffset
argument_list|,
name|GLint
name|zoffset
argument_list|,
name|GLint
name|x
argument_list|,
name|GLint
name|y
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|gl
operator|::
name|Framebuffer
operator|*
name|source
argument_list|)
decl_stmt|;
name|virtual
name|void
name|storage
parameter_list|(
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|size
parameter_list|)
function_decl|;
name|virtual
name|bool
name|isSamplerComplete
argument_list|(
specifier|const
name|gl
operator|::
name|SamplerState
operator|&
name|samplerState
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|isCubeComplete
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|void
name|generateMipmaps
parameter_list|()
function_decl|;
name|virtual
name|unsigned
name|int
name|getRenderTargetSerial
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
function_decl|;
name|virtual
name|RenderTarget
modifier|*
name|getRenderTarget
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
function_decl|;
name|virtual
name|RenderTarget
modifier|*
name|getDepthStencil
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
function_decl|;
specifier|static
name|int
name|targetToIndex
parameter_list|(
name|GLenum
name|target
parameter_list|)
function_decl|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|TextureD3D_Cube
argument_list|)
expr_stmt|;
name|void
name|initializeStorage
parameter_list|(
name|bool
name|renderTarget
parameter_list|)
function_decl|;
name|TextureStorageInterfaceCube
modifier|*
name|createCompleteStorage
argument_list|(
name|bool
name|renderTarget
argument_list|)
decl|const
decl_stmt|;
name|void
name|setCompleteTexStorage
parameter_list|(
name|TextureStorageInterfaceCube
modifier|*
name|newCompleteTexStorage
parameter_list|)
function_decl|;
name|void
name|updateStorage
parameter_list|()
function_decl|;
name|bool
name|ensureRenderTarget
parameter_list|()
function_decl|;
name|virtual
name|TextureStorageInterface
modifier|*
name|getBaseLevelStorage
parameter_list|()
function_decl|;
name|virtual
specifier|const
name|ImageD3D
operator|*
name|getBaseLevelImage
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isMipmapCubeComplete
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isValidFaceLevel
argument_list|(
name|int
name|faceIndex
argument_list|,
name|int
name|level
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isFaceLevelComplete
argument_list|(
name|int
name|faceIndex
argument_list|,
name|int
name|level
argument_list|)
decl|const
decl_stmt|;
name|void
name|updateStorageFaceLevel
parameter_list|(
name|int
name|faceIndex
parameter_list|,
name|int
name|level
parameter_list|)
function_decl|;
name|void
name|redefineImage
parameter_list|(
name|int
name|faceIndex
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
function_decl|;
name|void
name|commitRect
parameter_list|(
name|int
name|faceIndex
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
function_decl|;
name|ImageD3D
modifier|*
name|mImageArray
index|[
literal|6
index|]
index|[
name|gl
operator|::
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
index|]
decl_stmt|;
name|TextureStorageInterfaceCube
modifier|*
name|mTexStorage
decl_stmt|;
block|}
empty_stmt|;
name|class
name|TextureD3D_3D
range|:
name|public
name|Texture3DImpl
decl_stmt|,
name|public
name|TextureD3D
block|{
name|public
label|:
name|TextureD3D_3D
argument_list|(
name|Renderer
operator|*
name|renderer
argument_list|)
expr_stmt|;
name|virtual
operator|~
name|TextureD3D_3D
argument_list|()
expr_stmt|;
specifier|static
name|TextureD3D_3D
modifier|*
name|makeTextureD3D_3D
parameter_list|(
name|Texture3DImpl
modifier|*
name|texture
parameter_list|)
function_decl|;
name|virtual
name|TextureStorageInterface
modifier|*
name|getNativeTexture
parameter_list|()
function_decl|;
name|virtual
name|Image
modifier|*
name|getImage
argument_list|(
name|int
name|level
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|setUsage
parameter_list|(
name|GLenum
name|usage
parameter_list|)
function_decl|;
name|virtual
name|bool
name|hasDirtyImages
argument_list|()
specifier|const
block|{
return|return
name|mDirtyImages
return|;
block|}
name|virtual
name|void
name|resetDirty
parameter_list|()
function_decl|;
name|GLsizei
name|getWidth
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|GLsizei
name|getHeight
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|GLsizei
name|getDepth
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|GLenum
name|getInternalFormat
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isDepth
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|setImage
argument_list|(
name|GLint
name|level
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|GLsizei
name|depth
argument_list|,
name|GLenum
name|internalFormat
argument_list|,
name|GLenum
name|format
argument_list|,
name|GLenum
name|type
argument_list|,
specifier|const
name|gl
operator|::
name|PixelUnpackState
operator|&
name|unpack
argument_list|,
specifier|const
name|void
operator|*
name|pixels
argument_list|)
decl_stmt|;
name|virtual
name|void
name|setCompressedImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
function_decl|;
name|virtual
name|void
name|subImage
argument_list|(
name|GLint
name|level
argument_list|,
name|GLint
name|xoffset
argument_list|,
name|GLint
name|yoffset
argument_list|,
name|GLint
name|zoffset
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|GLsizei
name|depth
argument_list|,
name|GLenum
name|format
argument_list|,
name|GLenum
name|type
argument_list|,
specifier|const
name|gl
operator|::
name|PixelUnpackState
operator|&
name|unpack
argument_list|,
specifier|const
name|void
operator|*
name|pixels
argument_list|)
decl_stmt|;
name|virtual
name|void
name|subImageCompressed
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
function_decl|;
name|virtual
name|void
name|copySubImage
argument_list|(
name|GLenum
name|target
argument_list|,
name|GLint
name|level
argument_list|,
name|GLint
name|xoffset
argument_list|,
name|GLint
name|yoffset
argument_list|,
name|GLint
name|zoffset
argument_list|,
name|GLint
name|x
argument_list|,
name|GLint
name|y
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|gl
operator|::
name|Framebuffer
operator|*
name|source
argument_list|)
decl_stmt|;
name|virtual
name|void
name|storage
parameter_list|(
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
function_decl|;
name|virtual
name|bool
name|isSamplerComplete
argument_list|(
specifier|const
name|gl
operator|::
name|SamplerState
operator|&
name|samplerState
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|isMipmapComplete
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|void
name|generateMipmaps
parameter_list|()
function_decl|;
name|virtual
name|unsigned
name|int
name|getRenderTargetSerial
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
function_decl|;
name|virtual
name|RenderTarget
modifier|*
name|getRenderTarget
parameter_list|(
name|GLint
name|level
parameter_list|)
function_decl|;
name|virtual
name|RenderTarget
modifier|*
name|getRenderTarget
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
function_decl|;
name|virtual
name|RenderTarget
modifier|*
name|getDepthStencil
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
function_decl|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|TextureD3D_3D
argument_list|)
expr_stmt|;
name|virtual
name|void
name|initializeStorage
parameter_list|(
name|bool
name|renderTarget
parameter_list|)
function_decl|;
name|TextureStorageInterface3D
modifier|*
name|createCompleteStorage
argument_list|(
name|bool
name|renderTarget
argument_list|)
decl|const
decl_stmt|;
name|void
name|setCompleteTexStorage
parameter_list|(
name|TextureStorageInterface3D
modifier|*
name|newCompleteTexStorage
parameter_list|)
function_decl|;
name|void
name|updateStorage
parameter_list|()
function_decl|;
name|bool
name|ensureRenderTarget
parameter_list|()
function_decl|;
name|virtual
name|TextureStorageInterface
modifier|*
name|getBaseLevelStorage
parameter_list|()
function_decl|;
name|virtual
specifier|const
name|ImageD3D
operator|*
name|getBaseLevelImage
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isValidLevel
argument_list|(
name|int
name|level
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isLevelComplete
argument_list|(
name|int
name|level
argument_list|)
decl|const
decl_stmt|;
name|void
name|updateStorageLevel
parameter_list|(
name|int
name|level
parameter_list|)
function_decl|;
name|void
name|redefineImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
function_decl|;
name|void
name|commitRect
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
function_decl|;
name|ImageD3D
modifier|*
name|mImageArray
index|[
name|gl
operator|::
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
index|]
decl_stmt|;
name|TextureStorageInterface3D
modifier|*
name|mTexStorage
decl_stmt|;
block|}
empty_stmt|;
name|class
name|TextureD3D_2DArray
range|:
name|public
name|Texture2DArrayImpl
decl_stmt|,
name|public
name|TextureD3D
block|{
name|public
label|:
name|TextureD3D_2DArray
argument_list|(
name|Renderer
operator|*
name|renderer
argument_list|)
expr_stmt|;
name|virtual
operator|~
name|TextureD3D_2DArray
argument_list|()
expr_stmt|;
specifier|static
name|TextureD3D_2DArray
modifier|*
name|makeTextureD3D_2DArray
parameter_list|(
name|Texture2DArrayImpl
modifier|*
name|texture
parameter_list|)
function_decl|;
name|virtual
name|TextureStorageInterface
modifier|*
name|getNativeTexture
parameter_list|()
function_decl|;
name|virtual
name|Image
modifier|*
name|getImage
argument_list|(
name|int
name|level
argument_list|,
name|int
name|layer
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|GLsizei
name|getLayerCount
argument_list|(
name|int
name|level
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|setUsage
parameter_list|(
name|GLenum
name|usage
parameter_list|)
function_decl|;
name|virtual
name|bool
name|hasDirtyImages
argument_list|()
specifier|const
block|{
return|return
name|mDirtyImages
return|;
block|}
name|virtual
name|void
name|resetDirty
parameter_list|()
function_decl|;
name|GLsizei
name|getWidth
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|GLsizei
name|getHeight
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|GLsizei
name|getLayers
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|GLenum
name|getInternalFormat
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isDepth
argument_list|(
name|GLint
name|level
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|setImage
argument_list|(
name|GLint
name|level
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|GLsizei
name|depth
argument_list|,
name|GLenum
name|internalFormat
argument_list|,
name|GLenum
name|format
argument_list|,
name|GLenum
name|type
argument_list|,
specifier|const
name|gl
operator|::
name|PixelUnpackState
operator|&
name|unpack
argument_list|,
specifier|const
name|void
operator|*
name|pixels
argument_list|)
decl_stmt|;
name|virtual
name|void
name|setCompressedImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
function_decl|;
name|virtual
name|void
name|subImage
argument_list|(
name|GLint
name|level
argument_list|,
name|GLint
name|xoffset
argument_list|,
name|GLint
name|yoffset
argument_list|,
name|GLint
name|zoffset
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|GLsizei
name|depth
argument_list|,
name|GLenum
name|format
argument_list|,
name|GLenum
name|type
argument_list|,
specifier|const
name|gl
operator|::
name|PixelUnpackState
operator|&
name|unpack
argument_list|,
specifier|const
name|void
operator|*
name|pixels
argument_list|)
decl_stmt|;
name|virtual
name|void
name|subImageCompressed
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
function_decl|;
name|virtual
name|void
name|copySubImage
argument_list|(
name|GLenum
name|target
argument_list|,
name|GLint
name|level
argument_list|,
name|GLint
name|xoffset
argument_list|,
name|GLint
name|yoffset
argument_list|,
name|GLint
name|zoffset
argument_list|,
name|GLint
name|x
argument_list|,
name|GLint
name|y
argument_list|,
name|GLsizei
name|width
argument_list|,
name|GLsizei
name|height
argument_list|,
name|gl
operator|::
name|Framebuffer
operator|*
name|source
argument_list|)
decl_stmt|;
name|virtual
name|void
name|storage
parameter_list|(
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
function_decl|;
name|virtual
name|bool
name|isSamplerComplete
argument_list|(
specifier|const
name|gl
operator|::
name|SamplerState
operator|&
name|samplerState
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|isMipmapComplete
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|void
name|generateMipmaps
parameter_list|()
function_decl|;
name|virtual
name|unsigned
name|int
name|getRenderTargetSerial
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
function_decl|;
name|virtual
name|RenderTarget
modifier|*
name|getRenderTarget
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
function_decl|;
name|virtual
name|RenderTarget
modifier|*
name|getDepthStencil
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
function_decl|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|TextureD3D_2DArray
argument_list|)
expr_stmt|;
name|virtual
name|void
name|initializeStorage
parameter_list|(
name|bool
name|renderTarget
parameter_list|)
function_decl|;
name|TextureStorageInterface2DArray
modifier|*
name|createCompleteStorage
argument_list|(
name|bool
name|renderTarget
argument_list|)
decl|const
decl_stmt|;
name|void
name|setCompleteTexStorage
parameter_list|(
name|TextureStorageInterface2DArray
modifier|*
name|newCompleteTexStorage
parameter_list|)
function_decl|;
name|void
name|updateStorage
parameter_list|()
function_decl|;
name|bool
name|ensureRenderTarget
parameter_list|()
function_decl|;
name|virtual
name|TextureStorageInterface
modifier|*
name|getBaseLevelStorage
parameter_list|()
function_decl|;
name|virtual
specifier|const
name|ImageD3D
operator|*
name|getBaseLevelImage
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isValidLevel
argument_list|(
name|int
name|level
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isLevelComplete
argument_list|(
name|int
name|level
argument_list|)
decl|const
decl_stmt|;
name|void
name|updateStorageLevel
parameter_list|(
name|int
name|level
parameter_list|)
function_decl|;
name|void
name|deleteImages
parameter_list|()
function_decl|;
name|void
name|redefineImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
function_decl|;
name|void
name|commitRect
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|layerTarget
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
function_decl|;
comment|// Storing images as an array of single depth textures since D3D11 treats each array level of a
comment|// Texture2D object as a separate subresource.  Each layer would have to be looped over
comment|// to update all the texture layers since they cannot all be updated at once and it makes the most
comment|// sense for the Image class to not have to worry about layer subresource as well as mip subresources.
name|GLsizei
name|mLayerCounts
index|[
name|gl
operator|::
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
index|]
decl_stmt|;
name|ImageD3D
modifier|*
modifier|*
name|mImageArray
index|[
name|gl
operator|::
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
index|]
decl_stmt|;
name|TextureStorageInterface2DArray
modifier|*
name|mTexStorage
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LIBGLESV2_RENDERER_TEXTURED3D_H_
end_comment
end_unit
