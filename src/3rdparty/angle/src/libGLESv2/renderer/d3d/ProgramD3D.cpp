begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// ProgramD3D.cpp: Defines the rx::ProgramD3D class which implements rx::ProgramImpl.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/ProgramD3D.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/ProgramBinary.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/ShaderExecutable.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/DynamicHLSL.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/ShaderD3D.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|ProgramD3D
name|ProgramD3D
operator|::
name|ProgramD3D
parameter_list|(
name|rx
operator|::
name|Renderer
modifier|*
name|renderer
parameter_list|)
member_init_list|:
name|ProgramImpl
argument_list|()
member_init_list|,
name|mRenderer
argument_list|(
name|renderer
argument_list|)
member_init_list|,
name|mDynamicHLSL
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mVertexWorkarounds
argument_list|(
name|rx
operator|::
name|ANGLE_D3D_WORKAROUND_NONE
argument_list|)
member_init_list|,
name|mPixelWorkarounds
argument_list|(
name|rx
operator|::
name|ANGLE_D3D_WORKAROUND_NONE
argument_list|)
member_init_list|,
name|mVertexUniformStorage
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mFragmentUniformStorage
argument_list|(
name|NULL
argument_list|)
block|{
name|mDynamicHLSL
operator|=
operator|new
name|rx
operator|::
name|DynamicHLSL
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
block|}
DECL|function|~ProgramD3D
name|ProgramD3D
operator|::
name|~
name|ProgramD3D
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
name|SafeDelete
argument_list|(
name|mDynamicHLSL
argument_list|)
expr_stmt|;
block|}
DECL|function|makeProgramD3D
name|ProgramD3D
modifier|*
name|ProgramD3D
operator|::
name|makeProgramD3D
parameter_list|(
name|ProgramImpl
modifier|*
name|impl
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|ProgramD3D
operator|*
argument_list|,
name|impl
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|ProgramD3D
operator|*
argument_list|>
argument_list|(
name|impl
argument_list|)
return|;
block|}
DECL|function|makeProgramD3D
specifier|const
name|ProgramD3D
modifier|*
name|ProgramD3D
operator|::
name|makeProgramD3D
parameter_list|(
specifier|const
name|ProgramImpl
modifier|*
name|impl
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
specifier|const
name|ProgramD3D
operator|*
argument_list|,
name|impl
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
specifier|const
name|ProgramD3D
operator|*
argument_list|>
argument_list|(
name|impl
argument_list|)
return|;
block|}
DECL|function|load
name|bool
name|ProgramD3D
operator|::
name|load
parameter_list|(
name|gl
operator|::
name|InfoLog
modifier|&
name|infoLog
parameter_list|,
name|gl
operator|::
name|BinaryInputStream
modifier|*
name|stream
parameter_list|)
block|{
name|stream
operator|->
name|readString
argument_list|(
operator|&
name|mVertexHLSL
argument_list|)
expr_stmt|;
name|stream
operator|->
name|readInt
argument_list|(
operator|&
name|mVertexWorkarounds
argument_list|)
expr_stmt|;
name|stream
operator|->
name|readString
argument_list|(
operator|&
name|mPixelHLSL
argument_list|)
expr_stmt|;
name|stream
operator|->
name|readInt
argument_list|(
operator|&
name|mPixelWorkarounds
argument_list|)
expr_stmt|;
name|stream
operator|->
name|readBool
argument_list|(
operator|&
name|mUsesFragDepth
argument_list|)
expr_stmt|;
specifier|const
name|size_t
name|pixelShaderKeySize
init|=
name|stream
operator|->
name|readInt
argument_list|<
name|unsigned
name|int
argument_list|>
argument_list|()
decl_stmt|;
name|mPixelShaderKey
operator|.
name|resize
argument_list|(
name|pixelShaderKeySize
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|pixelShaderKeyIndex
init|=
literal|0
init|;
name|pixelShaderKeyIndex
operator|<
name|pixelShaderKeySize
condition|;
name|pixelShaderKeyIndex
operator|++
control|)
block|{
name|stream
operator|->
name|readInt
argument_list|(
operator|&
name|mPixelShaderKey
index|[
name|pixelShaderKeyIndex
index|]
operator|.
name|type
argument_list|)
expr_stmt|;
name|stream
operator|->
name|readString
argument_list|(
operator|&
name|mPixelShaderKey
index|[
name|pixelShaderKeyIndex
index|]
operator|.
name|name
argument_list|)
expr_stmt|;
name|stream
operator|->
name|readString
argument_list|(
operator|&
name|mPixelShaderKey
index|[
name|pixelShaderKeyIndex
index|]
operator|.
name|source
argument_list|)
expr_stmt|;
name|stream
operator|->
name|readInt
argument_list|(
operator|&
name|mPixelShaderKey
index|[
name|pixelShaderKeyIndex
index|]
operator|.
name|outputIndex
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|save
name|bool
name|ProgramD3D
operator|::
name|save
parameter_list|(
name|gl
operator|::
name|BinaryOutputStream
modifier|*
name|stream
parameter_list|)
block|{
name|stream
operator|->
name|writeString
argument_list|(
name|mVertexHLSL
argument_list|)
expr_stmt|;
name|stream
operator|->
name|writeInt
argument_list|(
name|mVertexWorkarounds
argument_list|)
expr_stmt|;
name|stream
operator|->
name|writeString
argument_list|(
name|mPixelHLSL
argument_list|)
expr_stmt|;
name|stream
operator|->
name|writeInt
argument_list|(
name|mPixelWorkarounds
argument_list|)
expr_stmt|;
name|stream
operator|->
name|writeInt
argument_list|(
name|mUsesFragDepth
argument_list|)
expr_stmt|;
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|rx
operator|::
name|PixelShaderOutputVariable
argument_list|>
modifier|&
name|pixelShaderKey
init|=
name|mPixelShaderKey
decl_stmt|;
name|stream
operator|->
name|writeInt
argument_list|(
name|pixelShaderKey
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|pixelShaderKeyIndex
init|=
literal|0
init|;
name|pixelShaderKeyIndex
operator|<
name|pixelShaderKey
operator|.
name|size
argument_list|()
condition|;
name|pixelShaderKeyIndex
operator|++
control|)
block|{
specifier|const
name|rx
operator|::
name|PixelShaderOutputVariable
modifier|&
name|variable
init|=
name|pixelShaderKey
index|[
name|pixelShaderKeyIndex
index|]
decl_stmt|;
name|stream
operator|->
name|writeInt
argument_list|(
name|variable
operator|.
name|type
argument_list|)
expr_stmt|;
name|stream
operator|->
name|writeString
argument_list|(
name|variable
operator|.
name|name
argument_list|)
expr_stmt|;
name|stream
operator|->
name|writeString
argument_list|(
name|variable
operator|.
name|source
argument_list|)
expr_stmt|;
name|stream
operator|->
name|writeInt
argument_list|(
name|variable
operator|.
name|outputIndex
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|getPixelExecutableForOutputLayout
name|rx
operator|::
name|ShaderExecutable
modifier|*
name|ProgramD3D
operator|::
name|getPixelExecutableForOutputLayout
parameter_list|(
name|gl
operator|::
name|InfoLog
modifier|&
name|infoLog
parameter_list|,
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|GLenum
argument_list|>
modifier|&
name|outputSignature
parameter_list|,
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|gl
operator|::
name|LinkedVarying
argument_list|>
modifier|&
name|transformFeedbackLinkedVaryings
parameter_list|,
name|bool
name|separatedOutputBuffers
parameter_list|)
block|{
name|std
operator|::
name|string
name|finalPixelHLSL
init|=
name|mDynamicHLSL
operator|->
name|generatePixelShaderForOutputSignature
argument_list|(
name|mPixelHLSL
argument_list|,
name|mPixelShaderKey
argument_list|,
name|mUsesFragDepth
argument_list|,
name|outputSignature
argument_list|)
decl_stmt|;
comment|// Generate new pixel executable
name|rx
operator|::
name|ShaderExecutable
modifier|*
name|pixelExecutable
init|=
name|mRenderer
operator|->
name|compileToExecutable
argument_list|(
name|infoLog
argument_list|,
name|finalPixelHLSL
operator|.
name|c_str
argument_list|()
argument_list|,
name|rx
operator|::
name|SHADER_PIXEL
argument_list|,
name|transformFeedbackLinkedVaryings
argument_list|,
name|separatedOutputBuffers
argument_list|,
name|mPixelWorkarounds
argument_list|)
decl_stmt|;
return|return
name|pixelExecutable
return|;
block|}
DECL|function|getVertexExecutableForInputLayout
name|rx
operator|::
name|ShaderExecutable
modifier|*
name|ProgramD3D
operator|::
name|getVertexExecutableForInputLayout
parameter_list|(
name|gl
operator|::
name|InfoLog
modifier|&
name|infoLog
parameter_list|,
specifier|const
name|gl
operator|::
name|VertexFormat
name|inputLayout
index|[
name|gl
operator|::
name|MAX_VERTEX_ATTRIBS
index|]
parameter_list|,
specifier|const
name|sh
operator|::
name|Attribute
name|shaderAttributes
index|[]
parameter_list|,
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|gl
operator|::
name|LinkedVarying
argument_list|>
modifier|&
name|transformFeedbackLinkedVaryings
parameter_list|,
name|bool
name|separatedOutputBuffers
parameter_list|)
block|{
comment|// Generate new dynamic layout with attribute conversions
name|std
operator|::
name|string
name|finalVertexHLSL
init|=
name|mDynamicHLSL
operator|->
name|generateVertexShaderForInputLayout
argument_list|(
name|mVertexHLSL
argument_list|,
name|inputLayout
argument_list|,
name|shaderAttributes
argument_list|)
decl_stmt|;
comment|// Generate new vertex executable
name|rx
operator|::
name|ShaderExecutable
modifier|*
name|vertexExecutable
init|=
name|mRenderer
operator|->
name|compileToExecutable
argument_list|(
name|infoLog
argument_list|,
name|finalVertexHLSL
operator|.
name|c_str
argument_list|()
argument_list|,
name|rx
operator|::
name|SHADER_VERTEX
argument_list|,
name|transformFeedbackLinkedVaryings
argument_list|,
name|separatedOutputBuffers
argument_list|,
name|mVertexWorkarounds
argument_list|)
decl_stmt|;
return|return
name|vertexExecutable
return|;
block|}
DECL|function|link
name|bool
name|ProgramD3D
operator|::
name|link
parameter_list|(
name|gl
operator|::
name|InfoLog
modifier|&
name|infoLog
parameter_list|,
name|gl
operator|::
name|Shader
modifier|*
name|fragmentShader
parameter_list|,
name|gl
operator|::
name|Shader
modifier|*
name|vertexShader
parameter_list|,
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|std
operator|::
name|string
argument_list|>
modifier|&
name|transformFeedbackVaryings
parameter_list|,
name|int
modifier|*
name|registers
parameter_list|,
name|std
operator|::
name|vector
argument_list|<
name|gl
operator|::
name|LinkedVarying
argument_list|>
modifier|*
name|linkedVaryings
parameter_list|,
name|std
operator|::
name|map
argument_list|<
name|int
argument_list|,
name|gl
operator|::
name|VariableLocation
argument_list|>
modifier|*
name|outputVariables
parameter_list|)
block|{
name|rx
operator|::
name|ShaderD3D
modifier|*
name|vertexShaderD3D
init|=
name|rx
operator|::
name|ShaderD3D
operator|::
name|makeShaderD3D
argument_list|(
name|vertexShader
operator|->
name|getImplementation
argument_list|()
argument_list|)
decl_stmt|;
name|rx
operator|::
name|ShaderD3D
modifier|*
name|fragmentShaderD3D
init|=
name|rx
operator|::
name|ShaderD3D
operator|::
name|makeShaderD3D
argument_list|(
name|fragmentShader
operator|->
name|getImplementation
argument_list|()
argument_list|)
decl_stmt|;
name|mPixelHLSL
operator|=
name|fragmentShaderD3D
operator|->
name|getTranslatedSource
argument_list|()
expr_stmt|;
name|mPixelWorkarounds
operator|=
name|fragmentShaderD3D
operator|->
name|getD3DWorkarounds
argument_list|()
expr_stmt|;
name|mVertexHLSL
operator|=
name|vertexShaderD3D
operator|->
name|getTranslatedSource
argument_list|()
expr_stmt|;
name|mVertexWorkarounds
operator|=
name|vertexShaderD3D
operator|->
name|getD3DWorkarounds
argument_list|()
expr_stmt|;
comment|// Map the varyings to the register file
name|rx
operator|::
name|VaryingPacking
name|packing
init|=
block|{
name|NULL
block|}
decl_stmt|;
operator|*
name|registers
operator|=
name|mDynamicHLSL
operator|->
name|packVaryings
argument_list|(
name|infoLog
argument_list|,
name|packing
argument_list|,
name|fragmentShaderD3D
argument_list|,
name|vertexShaderD3D
argument_list|,
name|transformFeedbackVaryings
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|registers
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|ProgramBinary
operator|::
name|linkVaryings
argument_list|(
name|infoLog
argument_list|,
name|fragmentShader
argument_list|,
name|vertexShader
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|mDynamicHLSL
operator|->
name|generateShaderLinkHLSL
argument_list|(
name|infoLog
argument_list|,
operator|*
name|registers
argument_list|,
name|packing
argument_list|,
name|mPixelHLSL
argument_list|,
name|mVertexHLSL
argument_list|,
name|fragmentShaderD3D
argument_list|,
name|vertexShaderD3D
argument_list|,
name|transformFeedbackVaryings
argument_list|,
name|linkedVaryings
argument_list|,
name|outputVariables
argument_list|,
operator|&
name|mPixelShaderKey
argument_list|,
operator|&
name|mUsesFragDepth
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|initializeUniformStorage
name|void
name|ProgramD3D
operator|::
name|initializeUniformStorage
parameter_list|(
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|gl
operator|::
name|LinkedUniform
operator|*
argument_list|>
modifier|&
name|uniforms
parameter_list|)
block|{
comment|// Compute total default block size
name|unsigned
name|int
name|vertexRegisters
init|=
literal|0
decl_stmt|;
name|unsigned
name|int
name|fragmentRegisters
init|=
literal|0
decl_stmt|;
for|for
control|(
name|size_t
name|uniformIndex
init|=
literal|0
init|;
name|uniformIndex
operator|<
name|uniforms
operator|.
name|size
argument_list|()
condition|;
name|uniformIndex
operator|++
control|)
block|{
specifier|const
name|gl
operator|::
name|LinkedUniform
modifier|&
name|uniform
init|=
operator|*
name|uniforms
index|[
name|uniformIndex
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|gl
operator|::
name|IsSampler
argument_list|(
name|uniform
operator|.
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|uniform
operator|.
name|isReferencedByVertexShader
argument_list|()
condition|)
block|{
name|vertexRegisters
operator|=
name|std
operator|::
name|max
argument_list|(
name|vertexRegisters
argument_list|,
name|uniform
operator|.
name|vsRegisterIndex
operator|+
name|uniform
operator|.
name|registerCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uniform
operator|.
name|isReferencedByFragmentShader
argument_list|()
condition|)
block|{
name|fragmentRegisters
operator|=
name|std
operator|::
name|max
argument_list|(
name|fragmentRegisters
argument_list|,
name|uniform
operator|.
name|psRegisterIndex
operator|+
name|uniform
operator|.
name|registerCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|mVertexUniformStorage
operator|=
name|mRenderer
operator|->
name|createUniformStorage
argument_list|(
name|vertexRegisters
operator|*
literal|16u
argument_list|)
expr_stmt|;
name|mFragmentUniformStorage
operator|=
name|mRenderer
operator|->
name|createUniformStorage
argument_list|(
name|fragmentRegisters
operator|*
literal|16u
argument_list|)
expr_stmt|;
block|}
DECL|function|reset
name|void
name|ProgramD3D
operator|::
name|reset
parameter_list|()
block|{
name|mVertexHLSL
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mVertexWorkarounds
operator|=
name|rx
operator|::
name|ANGLE_D3D_WORKAROUND_NONE
expr_stmt|;
name|mPixelHLSL
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mPixelWorkarounds
operator|=
name|rx
operator|::
name|ANGLE_D3D_WORKAROUND_NONE
expr_stmt|;
name|mUsesFragDepth
operator|=
literal|false
expr_stmt|;
name|mPixelShaderKey
operator|.
name|clear
argument_list|()
expr_stmt|;
name|SafeDelete
argument_list|(
name|mVertexUniformStorage
argument_list|)
expr_stmt|;
name|SafeDelete
argument_list|(
name|mFragmentUniformStorage
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
end_unit
