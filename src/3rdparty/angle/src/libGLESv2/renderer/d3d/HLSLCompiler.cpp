begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/HLSLCompiler.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Program.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"common/features.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_D3DCOMPILER_DLL
end_ifndef
begin_define
DECL|macro|QT_D3DCOMPILER_DLL
define|#
directive|define
name|QT_D3DCOMPILER_DLL
value|D3DCOMPILER_DLL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|D3DCOMPILE_RESERVED16
end_ifndef
begin_define
DECL|macro|D3DCOMPILE_RESERVED16
define|#
directive|define
name|D3DCOMPILE_RESERVED16
value|(1<< 16)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|D3DCOMPILE_RESERVED17
end_ifndef
begin_define
DECL|macro|D3DCOMPILE_RESERVED17
define|#
directive|define
name|D3DCOMPILE_RESERVED17
value|(1<< 17)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Definitions local to the translation unit
end_comment
begin_namespace
namespace|namespace
block|{
ifdef|#
directive|ifdef
name|CREATE_COMPILER_FLAG_INFO
DECL|macro|CREATE_COMPILER_FLAG_INFO
undef|#
directive|undef
name|CREATE_COMPILER_FLAG_INFO
endif|#
directive|endif
DECL|macro|CREATE_COMPILER_FLAG_INFO
define|#
directive|define
name|CREATE_COMPILER_FLAG_INFO
parameter_list|(
name|flag
parameter_list|)
value|{ flag, #flag }
DECL|struct|CompilerFlagInfo
struct|struct
name|CompilerFlagInfo
block|{
DECL|member|mFlag
name|UINT
name|mFlag
decl_stmt|;
DECL|member|mName
specifier|const
name|char
modifier|*
name|mName
decl_stmt|;
block|}
struct|;
DECL|member|CompilerFlagInfos
name|CompilerFlagInfo
name|CompilerFlagInfos
index|[]
init|=
block|{
comment|// NOTE: The data below is copied from d3dcompiler.h
comment|// If something changes there it should be changed here as well
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_DEBUG
argument_list|)
block|,
comment|// (1<< 0)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_SKIP_VALIDATION
argument_list|)
block|,
comment|// (1<< 1)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_SKIP_OPTIMIZATION
argument_list|)
block|,
comment|// (1<< 2)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_PACK_MATRIX_ROW_MAJOR
argument_list|)
block|,
comment|// (1<< 3)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_PACK_MATRIX_COLUMN_MAJOR
argument_list|)
block|,
comment|// (1<< 4)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_PARTIAL_PRECISION
argument_list|)
block|,
comment|// (1<< 5)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_FORCE_VS_SOFTWARE_NO_OPT
argument_list|)
block|,
comment|// (1<< 6)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_FORCE_PS_SOFTWARE_NO_OPT
argument_list|)
block|,
comment|// (1<< 7)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_NO_PRESHADER
argument_list|)
block|,
comment|// (1<< 8)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_AVOID_FLOW_CONTROL
argument_list|)
block|,
comment|// (1<< 9)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_PREFER_FLOW_CONTROL
argument_list|)
block|,
comment|// (1<< 10)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_ENABLE_STRICTNESS
argument_list|)
block|,
comment|// (1<< 11)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_ENABLE_BACKWARDS_COMPATIBILITY
argument_list|)
block|,
comment|// (1<< 12)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_IEEE_STRICTNESS
argument_list|)
block|,
comment|// (1<< 13)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_OPTIMIZATION_LEVEL0
argument_list|)
block|,
comment|// (1<< 14)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_OPTIMIZATION_LEVEL1
argument_list|)
block|,
comment|// 0
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_OPTIMIZATION_LEVEL2
argument_list|)
block|,
comment|// ((1<< 14) | (1<< 15))
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_OPTIMIZATION_LEVEL3
argument_list|)
block|,
comment|// (1<< 15)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_RESERVED16
argument_list|)
block|,
comment|// (1<< 16)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
name|D3DCOMPILE_RESERVED17
argument_list|)
block|,
comment|// (1<< 17)
name|CREATE_COMPILER_FLAG_INFO
argument_list|(
argument|D3DCOMPILE_WARNINGS_ARE_ERRORS
argument_list|)
comment|// (1<< 18)
block|}
decl_stmt|;
DECL|macro|CREATE_COMPILER_FLAG_INFO
undef|#
directive|undef
name|CREATE_COMPILER_FLAG_INFO
DECL|function|IsCompilerFlagSet
name|bool
name|IsCompilerFlagSet
parameter_list|(
name|UINT
name|mask
parameter_list|,
name|UINT
name|flag
parameter_list|)
block|{
name|bool
name|isFlagSet
init|=
name|IsMaskFlagSet
argument_list|(
name|mask
argument_list|,
name|flag
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|D3DCOMPILE_OPTIMIZATION_LEVEL0
case|:
return|return
name|isFlagSet
operator|&&
operator|!
name|IsMaskFlagSet
argument_list|(
name|mask
argument_list|,
name|UINT
argument_list|(
name|D3DCOMPILE_OPTIMIZATION_LEVEL3
argument_list|)
argument_list|)
return|;
case|case
name|D3DCOMPILE_OPTIMIZATION_LEVEL1
case|:
return|return
operator|(
name|mask
operator|&
name|D3DCOMPILE_OPTIMIZATION_LEVEL2
operator|)
operator|==
name|UINT
argument_list|(
literal|0
argument_list|)
return|;
case|case
name|D3DCOMPILE_OPTIMIZATION_LEVEL3
case|:
return|return
name|isFlagSet
operator|&&
operator|!
name|IsMaskFlagSet
argument_list|(
name|mask
argument_list|,
name|UINT
argument_list|(
name|D3DCOMPILE_OPTIMIZATION_LEVEL0
argument_list|)
argument_list|)
return|;
default|default:
return|return
name|isFlagSet
return|;
block|}
block|}
DECL|function|GetCompilerFlagName
specifier|const
name|char
modifier|*
name|GetCompilerFlagName
parameter_list|(
name|UINT
name|mask
parameter_list|,
name|size_t
name|flagIx
parameter_list|)
block|{
specifier|const
name|CompilerFlagInfo
modifier|&
name|flagInfo
init|=
name|CompilerFlagInfos
index|[
name|flagIx
index|]
decl_stmt|;
if|if
condition|(
name|IsCompilerFlagSet
argument_list|(
name|mask
argument_list|,
name|flagInfo
operator|.
name|mFlag
argument_list|)
condition|)
block|{
return|return
name|flagInfo
operator|.
name|mName
return|;
block|}
return|return
literal|nullptr
return|;
block|}
block|}
end_namespace
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|CompileConfig
name|CompileConfig
operator|::
name|CompileConfig
parameter_list|()
member_init_list|:
name|flags
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|name
argument_list|()
block|{ }
DECL|function|CompileConfig
name|CompileConfig
operator|::
name|CompileConfig
parameter_list|(
name|UINT
name|flags
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|name
parameter_list|)
member_init_list|:
name|flags
argument_list|(
name|flags
argument_list|)
member_init_list|,
name|name
argument_list|(
name|name
argument_list|)
block|{ }
DECL|function|HLSLCompiler
name|HLSLCompiler
operator|::
name|HLSLCompiler
parameter_list|()
member_init_list|:
name|mD3DCompilerModule
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mD3DCompileFunc
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mD3DDisassembleFunc
argument_list|(
name|NULL
argument_list|)
block|{ }
DECL|function|~HLSLCompiler
name|HLSLCompiler
operator|::
name|~
name|HLSLCompiler
parameter_list|()
block|{
name|release
argument_list|()
expr_stmt|;
block|}
DECL|function|initialize
name|bool
name|HLSLCompiler
operator|::
name|initialize
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES
argument_list|)
comment|// Find a D3DCompiler module that had already been loaded based on a predefined list of versions.
specifier|static
specifier|const
name|char
modifier|*
name|d3dCompilerNames
index|[]
init|=
name|ANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ArraySize
argument_list|(
name|d3dCompilerNames
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|GetModuleHandleExA
argument_list|(
literal|0
argument_list|,
name|d3dCompilerNames
index|[
name|i
index|]
argument_list|,
operator|&
name|mD3DCompilerModule
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
endif|#
directive|endif
comment|// ANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES
comment|// Load the compiler DLL specified by the environment, or default to QT_D3DCOMPILER_DLL
specifier|const
name|wchar_t
modifier|*
name|defaultCompiler
init|=
name|_wgetenv
argument_list|(
literal|L"QT_D3DCOMPILER_DLL"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|defaultCompiler
condition|)
name|defaultCompiler
operator|=
name|QT_D3DCOMPILER_DLL
expr_stmt|;
specifier|const
name|wchar_t
modifier|*
name|compilerDlls
index|[]
init|=
block|{
name|defaultCompiler
block|,
literal|L"d3dcompiler_47.dll"
block|,
literal|L"d3dcompiler_46.dll"
block|,
literal|L"d3dcompiler_45.dll"
block|,
literal|L"d3dcompiler_44.dll"
block|,
literal|L"d3dcompiler_43.dll"
block|,
literal|0
block|}
decl_stmt|;
comment|// Load the first available known compiler DLL
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|compilerDlls
index|[
name|i
index|]
condition|;
operator|++
name|i
control|)
block|{
name|mD3DCompilerModule
operator|=
name|LoadLibrary
argument_list|(
name|compilerDlls
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|mD3DCompilerModule
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|mD3DCompilerModule
condition|)
block|{
comment|// Load the version of the D3DCompiler DLL associated with the Direct3D version ANGLE was built with.
name|mD3DCompilerModule
operator|=
name|LoadLibrary
argument_list|(
name|D3DCOMPILER_DLL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mD3DCompilerModule
condition|)
block|{
name|ERR
argument_list|(
literal|"No D3D compiler module found - aborting!\n"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|mD3DCompileFunc
operator|=
cast|reinterpret_cast
argument_list|<
name|pD3DCompile
argument_list|>
argument_list|(
name|GetProcAddress
argument_list|(
name|mD3DCompilerModule
argument_list|,
literal|"D3DCompile"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|mD3DCompileFunc
argument_list|)
expr_stmt|;
name|mD3DDisassembleFunc
operator|=
cast|reinterpret_cast
argument_list|<
name|pD3DDisassemble
argument_list|>
argument_list|(
name|GetProcAddress
argument_list|(
name|mD3DCompilerModule
argument_list|,
literal|"D3DDisassemble"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|mD3DDisassembleFunc
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// D3D Shader compiler is linked already into this module, so the export
comment|// can be directly assigned.
name|mD3DCompilerModule
operator|=
name|NULL
expr_stmt|;
name|mD3DCompileFunc
operator|=
cast|reinterpret_cast
argument_list|<
name|pD3DCompile
argument_list|>
argument_list|(
name|D3DCompile
argument_list|)
expr_stmt|;
name|mD3DDisassembleFunc
operator|=
cast|reinterpret_cast
argument_list|<
name|pD3DDisassemble
argument_list|>
argument_list|(
name|D3DDisassemble
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|mD3DCompileFunc
operator|!=
name|NULL
return|;
block|}
DECL|function|release
name|void
name|HLSLCompiler
operator|::
name|release
parameter_list|()
block|{
if|if
condition|(
name|mD3DCompilerModule
condition|)
block|{
name|FreeLibrary
argument_list|(
name|mD3DCompilerModule
argument_list|)
expr_stmt|;
name|mD3DCompilerModule
operator|=
name|NULL
expr_stmt|;
name|mD3DCompileFunc
operator|=
name|NULL
expr_stmt|;
name|mD3DDisassembleFunc
operator|=
name|NULL
expr_stmt|;
block|}
block|}
DECL|function|compileToBinary
name|gl
operator|::
name|Error
name|HLSLCompiler
operator|::
name|compileToBinary
parameter_list|(
name|gl
operator|::
name|InfoLog
modifier|&
name|infoLog
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|hlsl
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|profile
parameter_list|,
specifier|const
name|std
operator|::
name|vector
argument_list|<
name|CompileConfig
argument_list|>
modifier|&
name|configs
parameter_list|,
specifier|const
name|D3D_SHADER_MACRO
modifier|*
name|overrideMacros
parameter_list|,
name|ID3DBlob
modifier|*
modifier|*
name|outCompiledBlob
parameter_list|,
name|std
operator|::
name|string
modifier|*
name|outDebugInfo
parameter_list|)
specifier|const
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
name|ASSERT
argument_list|(
name|mD3DCompilerModule
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ASSERT
argument_list|(
name|mD3DCompileFunc
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_ENABLE_WINDOWS_STORE
argument_list|)
if|if
condition|(
name|gl
operator|::
name|perfActive
argument_list|()
condition|)
block|{
name|std
operator|::
name|string
name|sourcePath
init|=
name|getTempPath
argument_list|()
decl_stmt|;
name|std
operator|::
name|string
name|sourceText
init|=
name|FormatString
argument_list|(
literal|"#line 2 \"%s\"\n\n%s"
argument_list|,
name|sourcePath
operator|.
name|c_str
argument_list|()
argument_list|,
name|hlsl
operator|.
name|c_str
argument_list|()
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|sourcePath
operator|.
name|c_str
argument_list|()
argument_list|,
name|sourceText
operator|.
name|c_str
argument_list|()
argument_list|,
name|sourceText
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
specifier|const
name|D3D_SHADER_MACRO
modifier|*
name|macros
init|=
name|overrideMacros
condition|?
name|overrideMacros
else|:
name|NULL
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ID3DBlob
modifier|*
name|errorMessage
init|=
name|NULL
decl_stmt|;
name|ID3DBlob
modifier|*
name|binary
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|result
init|=
name|mD3DCompileFunc
argument_list|(
name|hlsl
operator|.
name|c_str
argument_list|()
argument_list|,
name|hlsl
operator|.
name|length
argument_list|()
argument_list|,
name|gl
operator|::
name|g_fakepath
argument_list|,
name|macros
argument_list|,
name|NULL
argument_list|,
literal|"main"
argument_list|,
name|profile
operator|.
name|c_str
argument_list|()
argument_list|,
name|configs
index|[
name|i
index|]
operator|.
name|flags
argument_list|,
literal|0
argument_list|,
operator|&
name|binary
argument_list|,
operator|&
name|errorMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorMessage
condition|)
block|{
name|std
operator|::
name|string
name|message
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|errorMessage
operator|->
name|GetBufferPointer
argument_list|()
argument_list|)
decl_stmt|;
name|SafeRelease
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|infoLog
operator|.
name|appendSanitized
argument_list|(
name|message
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
name|TRACE
argument_list|(
literal|"\n%s"
argument_list|,
name|hlsl
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
name|TRACE
argument_list|(
literal|"\n%s"
argument_list|,
name|message
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|find
argument_list|(
literal|"error X3531:"
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
condition|)
comment|// "can't unroll loops marked with loop attribute"
block|{
name|macros
operator|=
name|NULL
expr_stmt|;
comment|// Disable [loop] and [flatten]
comment|// Retry without changing compiler flags
name|i
operator|--
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
operator|*
name|outCompiledBlob
operator|=
name|binary
expr_stmt|;
if|#
directive|if
name|ANGLE_SHADER_DEBUG_INFO
operator|==
name|ANGLE_ENABLED
operator|(
operator|*
name|outDebugInfo
operator|)
operator|+=
literal|"// COMPILER INPUT HLSL BEGIN\n\n"
operator|+
name|hlsl
operator|+
literal|"\n// COMPILER INPUT HLSL END\n"
expr_stmt|;
operator|(
operator|*
name|outDebugInfo
operator|)
operator|+=
literal|"\n\n// ASSEMBLY BEGIN\n\n"
expr_stmt|;
operator|(
operator|*
name|outDebugInfo
operator|)
operator|+=
literal|"// Compiler configuration: "
operator|+
name|configs
index|[
name|i
index|]
operator|.
name|name
operator|+
literal|"\n// Flags:\n"
expr_stmt|;
for|for
control|(
name|size_t
name|fIx
init|=
literal|0
init|;
name|fIx
operator|<
name|ArraySize
argument_list|(
name|CompilerFlagInfos
argument_list|)
condition|;
operator|++
name|fIx
control|)
block|{
specifier|const
name|char
modifier|*
name|flagName
init|=
name|GetCompilerFlagName
argument_list|(
name|configs
index|[
name|i
index|]
operator|.
name|flags
argument_list|,
name|fIx
argument_list|)
decl_stmt|;
if|if
condition|(
name|flagName
operator|!=
literal|nullptr
condition|)
block|{
operator|(
operator|*
name|outDebugInfo
operator|)
operator|+=
name|std
operator|::
name|string
argument_list|(
literal|"// "
argument_list|)
operator|+
name|flagName
operator|+
literal|"\n"
expr_stmt|;
block|}
block|}
operator|(
operator|*
name|outDebugInfo
operator|)
operator|+=
literal|"// Macros:\n"
expr_stmt|;
if|if
condition|(
name|macros
operator|==
literal|nullptr
condition|)
block|{
operator|(
operator|*
name|outDebugInfo
operator|)
operator|+=
literal|"// - : -\n"
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
specifier|const
name|D3D_SHADER_MACRO
modifier|*
name|mIt
init|=
name|macros
init|;
name|mIt
operator|->
name|Name
operator|!=
literal|nullptr
condition|;
operator|++
name|mIt
control|)
block|{
operator|(
operator|*
name|outDebugInfo
operator|)
operator|+=
name|std
operator|::
name|string
argument_list|(
literal|"// "
argument_list|)
operator|+
name|mIt
operator|->
name|Name
operator|+
literal|" : "
operator|+
name|mIt
operator|->
name|Definition
operator|+
literal|"\n"
expr_stmt|;
block|}
block|}
operator|(
operator|*
name|outDebugInfo
operator|)
operator|+=
literal|"\n"
operator|+
name|disassembleBinary
argument_list|(
name|binary
argument_list|)
operator|+
literal|"\n// ASSEMBLY END\n"
expr_stmt|;
endif|#
directive|endif
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|result
operator|==
name|E_OUTOFMEMORY
condition|)
block|{
operator|*
name|outCompiledBlob
operator|=
name|NULL
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
literal|"HLSL compiler had an unexpected failure, result: 0x%X."
argument_list|,
name|result
argument_list|)
return|;
block|}
name|infoLog
operator|.
name|append
argument_list|(
literal|"Warning: D3D shader compilation failed with %s flags."
argument_list|,
name|configs
index|[
name|i
index|]
operator|.
name|name
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|configs
operator|.
name|size
argument_list|()
condition|)
block|{
name|infoLog
operator|.
name|append
argument_list|(
literal|" Retrying with %s.\n"
argument_list|,
name|configs
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|name
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// None of the configurations succeeded in compiling this shader but the compiler is still intact
operator|*
name|outCompiledBlob
operator|=
name|NULL
expr_stmt|;
return|return
name|gl
operator|::
name|Error
argument_list|(
name|GL_NO_ERROR
argument_list|)
return|;
block|}
DECL|function|disassembleBinary
name|std
operator|::
name|string
name|HLSLCompiler
operator|::
name|disassembleBinary
parameter_list|(
name|ID3DBlob
modifier|*
name|shaderBinary
parameter_list|)
specifier|const
block|{
comment|// Retrieve disassembly
name|UINT
name|flags
init|=
name|D3D_DISASM_ENABLE_DEFAULT_VALUE_PRINTS
operator||
name|D3D_DISASM_ENABLE_INSTRUCTION_NUMBERING
decl_stmt|;
name|ID3DBlob
modifier|*
name|disassembly
init|=
name|NULL
decl_stmt|;
name|pD3DDisassemble
name|disassembleFunc
init|=
cast|reinterpret_cast
argument_list|<
name|pD3DDisassemble
argument_list|>
argument_list|(
name|mD3DDisassembleFunc
argument_list|)
decl_stmt|;
name|LPCVOID
name|buffer
init|=
name|shaderBinary
operator|->
name|GetBufferPointer
argument_list|()
decl_stmt|;
name|SIZE_T
name|bufSize
init|=
name|shaderBinary
operator|->
name|GetBufferSize
argument_list|()
decl_stmt|;
name|HRESULT
name|result
init|=
name|disassembleFunc
argument_list|(
name|buffer
argument_list|,
name|bufSize
argument_list|,
name|flags
argument_list|,
literal|""
argument_list|,
operator|&
name|disassembly
argument_list|)
decl_stmt|;
name|std
operator|::
name|string
name|asmSrc
decl_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|asmSrc
operator|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|disassembly
operator|->
name|GetBufferPointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SafeRelease
argument_list|(
name|disassembly
argument_list|)
expr_stmt|;
return|return
name|asmSrc
return|;
block|}
block|}
end_namespace
end_unit
