begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright 2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/HLSLCompiler.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Program.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"common/platform.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__MINGW32__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|D3DCOMPILER_DLL
argument_list|)
end_if
begin_comment
comment|// Add define + typedefs for older MinGW-w64 headers (pre 5783)
end_comment
begin_define
DECL|macro|D3DCOMPILER_DLL
define|#
directive|define
name|D3DCOMPILER_DLL
value|L"d3dcompiler_43.dll"
end_define
begin_function_decl
name|HRESULT
name|WINAPI
name|D3DCompile
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|SIZE_T
name|data_size
parameter_list|,
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
specifier|const
name|D3D_SHADER_MACRO
modifier|*
name|defines
parameter_list|,
name|ID3DInclude
modifier|*
name|include
parameter_list|,
specifier|const
name|char
modifier|*
name|entrypoint
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|,
name|UINT
name|sflags
parameter_list|,
name|UINT
name|eflags
parameter_list|,
name|ID3DBlob
modifier|*
modifier|*
name|shader
parameter_list|,
name|ID3DBlob
modifier|*
modifier|*
name|error_messages
parameter_list|)
function_decl|;
end_function_decl
begin_typedef
DECL|typedef|pD3DCompile
typedef|typedef
name|HRESULT
function_decl|(
name|WINAPI
modifier|*
name|pD3DCompile
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|SIZE_T
name|data_size
parameter_list|,
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
specifier|const
name|D3D_SHADER_MACRO
modifier|*
name|defines
parameter_list|,
name|ID3DInclude
modifier|*
name|include
parameter_list|,
specifier|const
name|char
modifier|*
name|entrypoint
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|,
name|UINT
name|sflags
parameter_list|,
name|UINT
name|eflags
parameter_list|,
name|ID3DBlob
modifier|*
modifier|*
name|shader
parameter_list|,
name|ID3DBlob
modifier|*
modifier|*
name|error_messages
parameter_list|)
function_decl|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// __MINGW32__&& !D3DCOMPILER_DLL
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_D3DCOMPILER_DLL
end_ifndef
begin_define
DECL|macro|QT_D3DCOMPILER_DLL
define|#
directive|define
name|QT_D3DCOMPILER_DLL
value|D3DCOMPILER_DLL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|HLSLCompiler
name|HLSLCompiler
operator|::
name|HLSLCompiler
parameter_list|()
member_init_list|:
name|mD3DCompilerModule
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mD3DCompileFunc
argument_list|(
name|NULL
argument_list|)
block|{ }
DECL|function|~HLSLCompiler
name|HLSLCompiler
operator|::
name|~
name|HLSLCompiler
parameter_list|()
block|{
name|release
argument_list|()
expr_stmt|;
block|}
DECL|function|initialize
name|bool
name|HLSLCompiler
operator|::
name|initialize
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|ANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES
argument_list|)
comment|// Find a D3DCompiler module that had already been loaded based on a predefined list of versions.
specifier|static
specifier|const
name|char
modifier|*
name|d3dCompilerNames
index|[]
init|=
name|ANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ArraySize
argument_list|(
name|d3dCompilerNames
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|GetModuleHandleExA
argument_list|(
literal|0
argument_list|,
name|d3dCompilerNames
index|[
name|i
index|]
argument_list|,
operator|&
name|mD3DCompilerModule
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
endif|#
directive|endif
comment|// ANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES
comment|// Load the compiler DLL specified by the environment, or default to QT_D3DCOMPILER_DLL
specifier|const
name|wchar_t
modifier|*
name|defaultCompiler
init|=
name|_wgetenv
argument_list|(
literal|L"QT_D3DCOMPILER_DLL"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|defaultCompiler
condition|)
name|defaultCompiler
operator|=
name|QT_D3DCOMPILER_DLL
expr_stmt|;
specifier|const
name|wchar_t
modifier|*
name|compilerDlls
index|[]
init|=
block|{
name|defaultCompiler
block|,
literal|L"d3dcompiler_47.dll"
block|,
literal|L"d3dcompiler_46.dll"
block|,
literal|L"d3dcompiler_45.dll"
block|,
literal|L"d3dcompiler_44.dll"
block|,
literal|L"d3dcompiler_43.dll"
block|,
literal|0
block|}
decl_stmt|;
comment|// Load the first available known compiler DLL
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|compilerDlls
index|[
name|i
index|]
condition|;
operator|++
name|i
control|)
block|{
name|mD3DCompilerModule
operator|=
name|LoadLibrary
argument_list|(
name|compilerDlls
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|mD3DCompilerModule
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|mD3DCompilerModule
condition|)
block|{
name|ERR
argument_list|(
literal|"No D3D compiler module found - aborting!\n"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|mD3DCompileFunc
operator|=
cast|reinterpret_cast
argument_list|<
name|CompileFuncPtr
argument_list|>
argument_list|(
name|GetProcAddress
argument_list|(
name|mD3DCompilerModule
argument_list|,
literal|"D3DCompile"
argument_list|)
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|mD3DCompileFunc
argument_list|)
expr_stmt|;
else|#
directive|else
name|mD3DCompileFunc
operator|=
cast|reinterpret_cast
argument_list|<
name|CompileFuncPtr
argument_list|>
argument_list|(
operator|&
name|D3DCompile
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|mD3DCompileFunc
operator|!=
name|NULL
return|;
block|}
DECL|function|release
name|void
name|HLSLCompiler
operator|::
name|release
parameter_list|()
block|{
if|if
condition|(
name|mD3DCompilerModule
condition|)
block|{
name|FreeLibrary
argument_list|(
name|mD3DCompilerModule
argument_list|)
expr_stmt|;
name|mD3DCompilerModule
operator|=
name|NULL
expr_stmt|;
name|mD3DCompileFunc
operator|=
name|NULL
expr_stmt|;
block|}
block|}
DECL|function|compileToBinary
name|ShaderBlob
modifier|*
name|HLSLCompiler
operator|::
name|compileToBinary
parameter_list|(
name|gl
operator|::
name|InfoLog
modifier|&
name|infoLog
parameter_list|,
specifier|const
name|char
modifier|*
name|hlsl
parameter_list|,
specifier|const
name|char
modifier|*
name|profile
parameter_list|,
specifier|const
name|UINT
name|optimizationFlags
index|[]
parameter_list|,
specifier|const
name|char
modifier|*
name|flagNames
index|[]
parameter_list|,
name|int
name|attempts
parameter_list|)
specifier|const
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ANGLE_PLATFORM_WINRT
argument_list|)
name|ASSERT
argument_list|(
name|mD3DCompilerModule
operator|&&
name|mD3DCompileFunc
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|hlsl
condition|)
block|{
return|return
name|NULL
return|;
block|}
name|pD3DCompile
name|compileFunc
init|=
cast|reinterpret_cast
argument_list|<
name|pD3DCompile
argument_list|>
argument_list|(
name|mD3DCompileFunc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attempts
condition|;
operator|++
name|i
control|)
block|{
name|ID3DBlob
modifier|*
name|errorMessage
init|=
name|NULL
decl_stmt|;
name|ID3DBlob
modifier|*
name|binary
init|=
name|NULL
decl_stmt|;
name|HRESULT
name|result
init|=
name|compileFunc
argument_list|(
name|hlsl
argument_list|,
name|strlen
argument_list|(
name|hlsl
argument_list|)
argument_list|,
name|gl
operator|::
name|g_fakepath
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
literal|"main"
argument_list|,
name|profile
argument_list|,
name|optimizationFlags
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
operator|&
name|binary
argument_list|,
operator|&
name|errorMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorMessage
condition|)
block|{
specifier|const
name|char
modifier|*
name|message
init|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|errorMessage
operator|->
name|GetBufferPointer
argument_list|()
decl_stmt|;
name|infoLog
operator|.
name|appendSanitized
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|TRACE
argument_list|(
literal|"\n%s"
argument_list|,
name|hlsl
argument_list|)
expr_stmt|;
name|TRACE
argument_list|(
literal|"\n%s"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|SafeRelease
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
operator|(
name|ShaderBlob
operator|*
operator|)
name|binary
return|;
block|}
else|else
block|{
if|if
condition|(
name|result
operator|==
name|E_OUTOFMEMORY
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
operator|(
name|ShaderBlob
operator|*
operator|)
name|NULL
argument_list|)
return|;
block|}
name|infoLog
operator|.
name|append
argument_list|(
literal|"Warning: D3D shader compilation failed with %s flags."
argument_list|,
name|flagNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|attempts
condition|)
block|{
name|infoLog
operator|.
name|append
argument_list|(
literal|" Retrying with %s.\n"
argument_list|,
name|flagNames
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|NULL
return|;
block|}
block|}
end_namespace
end_unit
