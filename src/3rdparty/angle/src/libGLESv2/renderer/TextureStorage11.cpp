begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// TextureStorage11.cpp: Implements the abstract rx::TextureStorage11 class and its concrete derived
end_comment
begin_comment
comment|// classes TextureStorage11_2D and TextureStorage11_Cube, which act as the interface to the D3D11 texture.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/renderer/TextureStorage11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Renderer11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/RenderTarget11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/SwapChain11.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/renderer11_utils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_namespace
DECL|namespace|rx
namespace|namespace
name|rx
block|{
DECL|function|TextureStorage11
name|TextureStorage11
operator|::
name|TextureStorage11
parameter_list|(
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|UINT
name|bindFlags
parameter_list|)
member_init_list|:
name|mBindFlags
argument_list|(
name|bindFlags
argument_list|)
member_init_list|,
name|mLodOffset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mMipLevels
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mTexture
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mTextureFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|mShaderResourceFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|mRenderTargetFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|mDepthStencilFormat
argument_list|(
name|DXGI_FORMAT_UNKNOWN
argument_list|)
member_init_list|,
name|mSRV
argument_list|(
name|NULL
argument_list|)
member_init_list|,
name|mTextureWidth
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|mTextureHeight
argument_list|(
literal|0
argument_list|)
block|{
name|mRenderer
operator|=
name|Renderer11
operator|::
name|makeRenderer11
argument_list|(
name|renderer
argument_list|)
expr_stmt|;
block|}
DECL|function|~TextureStorage11
name|TextureStorage11
operator|::
name|~
name|TextureStorage11
parameter_list|()
block|{ }
DECL|function|makeTextureStorage11
name|TextureStorage11
modifier|*
name|TextureStorage11
operator|::
name|makeTextureStorage11
parameter_list|(
name|TextureStorage
modifier|*
name|storage
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|TextureStorage11
operator|*
argument_list|,
name|storage
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|TextureStorage11
operator|*
argument_list|>
argument_list|(
name|storage
argument_list|)
return|;
block|}
DECL|function|GetTextureBindFlags
name|DWORD
name|TextureStorage11
operator|::
name|GetTextureBindFlags
parameter_list|(
name|DXGI_FORMAT
name|format
parameter_list|,
name|GLenum
name|glusage
parameter_list|,
name|bool
name|forceRenderable
parameter_list|)
block|{
name|UINT
name|bindFlags
init|=
name|D3D11_BIND_SHADER_RESOURCE
decl_stmt|;
if|if
condition|(
name|d3d11
operator|::
name|IsDepthStencilFormat
argument_list|(
name|format
argument_list|)
condition|)
block|{
name|bindFlags
operator||=
name|D3D11_BIND_DEPTH_STENCIL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|forceRenderable
operator|||
operator|(
name|TextureStorage11
operator|::
name|IsTextureFormatRenderable
argument_list|(
name|format
argument_list|)
operator|&&
operator|(
name|glusage
operator|==
name|GL_FRAMEBUFFER_ATTACHMENT_ANGLE
operator|)
operator|)
condition|)
block|{
name|bindFlags
operator||=
name|D3D11_BIND_RENDER_TARGET
expr_stmt|;
block|}
return|return
name|bindFlags
return|;
block|}
DECL|function|IsTextureFormatRenderable
name|bool
name|TextureStorage11
operator|::
name|IsTextureFormatRenderable
parameter_list|(
name|DXGI_FORMAT
name|format
parameter_list|)
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|DXGI_FORMAT_R8G8B8A8_UNORM
case|:
case|case
name|DXGI_FORMAT_A8_UNORM
case|:
case|case
name|DXGI_FORMAT_R32G32B32A32_FLOAT
case|:
case|case
name|DXGI_FORMAT_R16G16B16A16_FLOAT
case|:
case|case
name|DXGI_FORMAT_B8G8R8A8_UNORM
case|:
case|case
name|DXGI_FORMAT_R8_UNORM
case|:
case|case
name|DXGI_FORMAT_R8G8_UNORM
case|:
case|case
name|DXGI_FORMAT_R16_FLOAT
case|:
case|case
name|DXGI_FORMAT_R16G16_FLOAT
case|:
return|return
literal|true
return|;
case|case
name|DXGI_FORMAT_BC1_UNORM
case|:
case|case
name|DXGI_FORMAT_BC2_UNORM
case|:
case|case
name|DXGI_FORMAT_BC3_UNORM
case|:
case|case
name|DXGI_FORMAT_R32G32B32_FLOAT
case|:
comment|// not renderable on all devices
return|return
literal|false
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|getBindFlags
name|UINT
name|TextureStorage11
operator|::
name|getBindFlags
parameter_list|()
specifier|const
block|{
return|return
name|mBindFlags
return|;
block|}
DECL|function|getBaseTexture
name|ID3D11Texture2D
modifier|*
name|TextureStorage11
operator|::
name|getBaseTexture
parameter_list|()
specifier|const
block|{
return|return
name|mTexture
return|;
block|}
DECL|function|getLodOffset
name|int
name|TextureStorage11
operator|::
name|getLodOffset
parameter_list|()
specifier|const
block|{
return|return
name|mLodOffset
return|;
block|}
DECL|function|isRenderTarget
name|bool
name|TextureStorage11
operator|::
name|isRenderTarget
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mBindFlags
operator|&
operator|(
name|D3D11_BIND_RENDER_TARGET
operator||
name|D3D11_BIND_DEPTH_STENCIL
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
DECL|function|isManaged
name|bool
name|TextureStorage11
operator|::
name|isManaged
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|levelCount
name|int
name|TextureStorage11
operator|::
name|levelCount
parameter_list|()
block|{
name|int
name|levels
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|getBaseTexture
argument_list|()
condition|)
block|{
name|levels
operator|=
name|mMipLevels
operator|-
name|getLodOffset
argument_list|()
expr_stmt|;
block|}
return|return
name|levels
return|;
block|}
DECL|function|getSubresourceIndex
name|UINT
name|TextureStorage11
operator|::
name|getSubresourceIndex
parameter_list|(
name|int
name|level
parameter_list|,
name|int
name|faceIndex
parameter_list|)
block|{
name|UINT
name|index
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|getBaseTexture
argument_list|()
condition|)
block|{
name|index
operator|=
name|D3D11CalcSubresource
argument_list|(
name|level
argument_list|,
name|faceIndex
argument_list|,
name|mMipLevels
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
DECL|function|updateSubresourceLevel
name|bool
name|TextureStorage11
operator|::
name|updateSubresourceLevel
parameter_list|(
name|ID3D11Texture2D
modifier|*
name|srcTexture
parameter_list|,
name|unsigned
name|int
name|sourceSubresource
parameter_list|,
name|int
name|level
parameter_list|,
name|int
name|face
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
if|if
condition|(
name|srcTexture
condition|)
block|{
comment|// Round up the width and height to the nearest multiple of dimension alignment
name|unsigned
name|int
name|dimensionAlignment
init|=
name|d3d11
operator|::
name|GetTextureFormatDimensionAlignment
argument_list|(
name|mTextureFormat
argument_list|)
decl_stmt|;
name|width
operator|=
name|width
operator|+
name|dimensionAlignment
operator|-
literal|1
operator|-
operator|(
name|width
operator|-
literal|1
operator|)
operator|%
name|dimensionAlignment
expr_stmt|;
name|height
operator|=
name|height
operator|+
name|dimensionAlignment
operator|-
literal|1
operator|-
operator|(
name|height
operator|-
literal|1
operator|)
operator|%
name|dimensionAlignment
expr_stmt|;
name|D3D11_BOX
name|srcBox
decl_stmt|;
name|srcBox
operator|.
name|left
operator|=
name|xoffset
expr_stmt|;
name|srcBox
operator|.
name|top
operator|=
name|yoffset
expr_stmt|;
name|srcBox
operator|.
name|right
operator|=
name|xoffset
operator|+
name|width
expr_stmt|;
name|srcBox
operator|.
name|bottom
operator|=
name|yoffset
operator|+
name|height
expr_stmt|;
name|srcBox
operator|.
name|front
operator|=
literal|0
expr_stmt|;
name|srcBox
operator|.
name|back
operator|=
literal|1
expr_stmt|;
name|ID3D11DeviceContext
modifier|*
name|context
init|=
name|mRenderer
operator|->
name|getDeviceContext
argument_list|()
decl_stmt|;
name|ASSERT
argument_list|(
name|getBaseTexture
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|->
name|CopySubresourceRegion
argument_list|(
name|getBaseTexture
argument_list|()
argument_list|,
name|getSubresourceIndex
argument_list|(
name|level
operator|+
name|mLodOffset
argument_list|,
name|face
argument_list|)
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|srcTexture
argument_list|,
name|sourceSubresource
argument_list|,
operator|&
name|srcBox
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|generateMipmapLayer
name|void
name|TextureStorage11
operator|::
name|generateMipmapLayer
parameter_list|(
name|RenderTarget11
modifier|*
name|source
parameter_list|,
name|RenderTarget11
modifier|*
name|dest
parameter_list|)
block|{
if|if
condition|(
name|source
operator|&&
name|dest
condition|)
block|{
name|ID3D11ShaderResourceView
modifier|*
name|sourceSRV
init|=
name|source
operator|->
name|getShaderResourceView
argument_list|()
decl_stmt|;
name|ID3D11RenderTargetView
modifier|*
name|destRTV
init|=
name|dest
operator|->
name|getRenderTargetView
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceSRV
operator|&&
name|destRTV
condition|)
block|{
name|gl
operator|::
name|Rectangle
name|sourceArea
decl_stmt|;
name|sourceArea
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|sourceArea
operator|.
name|y
operator|=
literal|0
expr_stmt|;
name|sourceArea
operator|.
name|width
operator|=
name|source
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|sourceArea
operator|.
name|height
operator|=
name|source
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|gl
operator|::
name|Rectangle
name|destArea
decl_stmt|;
name|destArea
operator|.
name|x
operator|=
literal|0
expr_stmt|;
name|destArea
operator|.
name|y
operator|=
literal|0
expr_stmt|;
name|destArea
operator|.
name|width
operator|=
name|dest
operator|->
name|getWidth
argument_list|()
expr_stmt|;
name|destArea
operator|.
name|height
operator|=
name|dest
operator|->
name|getHeight
argument_list|()
expr_stmt|;
name|mRenderer
operator|->
name|copyTexture
argument_list|(
name|sourceSRV
argument_list|,
name|sourceArea
argument_list|,
name|source
operator|->
name|getWidth
argument_list|()
argument_list|,
name|source
operator|->
name|getHeight
argument_list|()
argument_list|,
name|destRTV
argument_list|,
name|destArea
argument_list|,
name|dest
operator|->
name|getWidth
argument_list|()
argument_list|,
name|dest
operator|->
name|getHeight
argument_list|()
argument_list|,
name|GL_RGBA
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|TextureStorage11_2D
name|TextureStorage11_2D
operator|::
name|TextureStorage11_2D
parameter_list|(
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|SwapChain11
modifier|*
name|swapchain
parameter_list|)
member_init_list|:
name|TextureStorage11
argument_list|(
name|renderer
argument_list|,
name|D3D11_BIND_RENDER_TARGET
operator||
name|D3D11_BIND_SHADER_RESOURCE
argument_list|)
block|{
name|mTexture
operator|=
name|swapchain
operator|->
name|getOffscreenTexture
argument_list|()
expr_stmt|;
name|mSRV
operator|=
name|swapchain
operator|->
name|getRenderTargetShaderResource
argument_list|()
expr_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gl
operator|::
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|;
name|i
operator|++
control|)
block|{
name|mRenderTarget
index|[
name|i
index|]
operator|=
name|NULL
expr_stmt|;
block|}
name|D3D11_TEXTURE2D_DESC
name|texDesc
decl_stmt|;
name|mTexture
operator|->
name|GetDesc
argument_list|(
operator|&
name|texDesc
argument_list|)
expr_stmt|;
name|mMipLevels
operator|=
name|texDesc
operator|.
name|MipLevels
expr_stmt|;
name|mTextureFormat
operator|=
name|texDesc
operator|.
name|Format
expr_stmt|;
name|mTextureWidth
operator|=
name|texDesc
operator|.
name|Width
expr_stmt|;
name|mTextureHeight
operator|=
name|texDesc
operator|.
name|Height
expr_stmt|;
name|D3D11_SHADER_RESOURCE_VIEW_DESC
name|srvDesc
decl_stmt|;
name|mSRV
operator|->
name|GetDesc
argument_list|(
operator|&
name|srvDesc
argument_list|)
expr_stmt|;
name|mShaderResourceFormat
operator|=
name|srvDesc
operator|.
name|Format
expr_stmt|;
name|ID3D11RenderTargetView
modifier|*
name|offscreenRTV
init|=
name|swapchain
operator|->
name|getRenderTarget
argument_list|()
decl_stmt|;
name|D3D11_RENDER_TARGET_VIEW_DESC
name|rtvDesc
decl_stmt|;
name|offscreenRTV
operator|->
name|GetDesc
argument_list|(
operator|&
name|rtvDesc
argument_list|)
expr_stmt|;
name|mRenderTargetFormat
operator|=
name|rtvDesc
operator|.
name|Format
expr_stmt|;
name|offscreenRTV
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mDepthStencilFormat
operator|=
name|DXGI_FORMAT_UNKNOWN
expr_stmt|;
block|}
DECL|function|TextureStorage11_2D
name|TextureStorage11_2D
operator|::
name|TextureStorage11_2D
parameter_list|(
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|int
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLenum
name|usage
parameter_list|,
name|bool
name|forceRenderable
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
member_init_list|:
name|TextureStorage11
argument_list|(
name|renderer
argument_list|,
name|GetTextureBindFlags
argument_list|(
name|gl_d3d11
operator|::
name|ConvertTextureFormat
argument_list|(
name|internalformat
argument_list|,
name|Renderer11
operator|::
name|makeRenderer11
argument_list|(
name|renderer
argument_list|)
operator|->
name|getFeatureLevel
argument_list|()
argument_list|)
argument_list|,
name|usage
argument_list|,
name|forceRenderable
argument_list|)
argument_list|)
block|{
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gl
operator|::
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|;
name|i
operator|++
control|)
block|{
name|mRenderTarget
index|[
name|i
index|]
operator|=
name|NULL
expr_stmt|;
block|}
name|DXGI_FORMAT
name|convertedFormat
init|=
name|gl_d3d11
operator|::
name|ConvertTextureFormat
argument_list|(
name|internalformat
argument_list|,
name|Renderer11
operator|::
name|makeRenderer11
argument_list|(
name|renderer
argument_list|)
operator|->
name|getFeatureLevel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d3d11
operator|::
name|IsDepthStencilFormat
argument_list|(
name|convertedFormat
argument_list|)
condition|)
block|{
name|mTextureFormat
operator|=
name|d3d11
operator|::
name|GetDepthTextureFormat
argument_list|(
name|convertedFormat
argument_list|)
expr_stmt|;
name|mShaderResourceFormat
operator|=
name|d3d11
operator|::
name|GetDepthShaderResourceFormat
argument_list|(
name|convertedFormat
argument_list|)
expr_stmt|;
name|mDepthStencilFormat
operator|=
name|convertedFormat
expr_stmt|;
name|mRenderTargetFormat
operator|=
name|DXGI_FORMAT_UNKNOWN
expr_stmt|;
block|}
else|else
block|{
name|mTextureFormat
operator|=
name|convertedFormat
expr_stmt|;
name|mShaderResourceFormat
operator|=
name|convertedFormat
expr_stmt|;
name|mDepthStencilFormat
operator|=
name|DXGI_FORMAT_UNKNOWN
expr_stmt|;
name|mRenderTargetFormat
operator|=
name|convertedFormat
expr_stmt|;
block|}
comment|// if the width or height is not positive this should be treated as an incomplete texture
comment|// we handle that here by skipping the d3d texture creation
if|if
condition|(
name|width
operator|>
literal|0
operator|&&
name|height
operator|>
literal|0
condition|)
block|{
comment|// adjust size if needed for compressed textures
name|gl
operator|::
name|MakeValidSize
argument_list|(
literal|false
argument_list|,
name|gl
operator|::
name|IsCompressed
argument_list|(
name|internalformat
argument_list|)
argument_list|,
operator|&
name|width
argument_list|,
operator|&
name|height
argument_list|,
operator|&
name|mLodOffset
argument_list|)
expr_stmt|;
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|D3D11_TEXTURE2D_DESC
name|desc
decl_stmt|;
name|desc
operator|.
name|Width
operator|=
name|width
expr_stmt|;
comment|// Compressed texture size constraints?
name|desc
operator|.
name|Height
operator|=
name|height
expr_stmt|;
name|desc
operator|.
name|MipLevels
operator|=
operator|(
name|levels
operator|>
literal|0
operator|)
condition|?
name|levels
operator|+
name|mLodOffset
else|:
literal|0
expr_stmt|;
name|desc
operator|.
name|ArraySize
operator|=
literal|1
expr_stmt|;
name|desc
operator|.
name|Format
operator|=
name|mTextureFormat
expr_stmt|;
name|desc
operator|.
name|SampleDesc
operator|.
name|Count
operator|=
literal|1
expr_stmt|;
name|desc
operator|.
name|SampleDesc
operator|.
name|Quality
operator|=
literal|0
expr_stmt|;
name|desc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_DEFAULT
expr_stmt|;
name|desc
operator|.
name|BindFlags
operator|=
name|getBindFlags
argument_list|()
expr_stmt|;
name|desc
operator|.
name|CPUAccessFlags
operator|=
literal|0
expr_stmt|;
name|desc
operator|.
name|MiscFlags
operator|=
literal|0
expr_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateTexture2D
argument_list|(
operator|&
name|desc
argument_list|,
name|NULL
argument_list|,
operator|&
name|mTexture
argument_list|)
decl_stmt|;
comment|// this can happen from windows TDR
if|if
condition|(
name|d3d11
operator|::
name|isDeviceLostError
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|mRenderer
operator|->
name|notifyDeviceLost
argument_list|()
expr_stmt|;
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
name|ERR
argument_list|(
literal|"Creating image failed."
argument_list|)
expr_stmt|;
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mTexture
operator|->
name|GetDesc
argument_list|(
operator|&
name|desc
argument_list|)
expr_stmt|;
name|mMipLevels
operator|=
name|desc
operator|.
name|MipLevels
expr_stmt|;
name|mTextureWidth
operator|=
name|desc
operator|.
name|Width
expr_stmt|;
name|mTextureHeight
operator|=
name|desc
operator|.
name|Height
expr_stmt|;
block|}
block|}
block|}
DECL|function|~TextureStorage11_2D
name|TextureStorage11_2D
operator|::
name|~
name|TextureStorage11_2D
parameter_list|()
block|{
if|if
condition|(
name|mTexture
condition|)
block|{
name|mTexture
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mTexture
operator|=
name|NULL
expr_stmt|;
block|}
if|if
condition|(
name|mSRV
condition|)
block|{
name|mSRV
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mSRV
operator|=
name|NULL
expr_stmt|;
block|}
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gl
operator|::
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|;
name|i
operator|++
control|)
block|{
operator|delete
name|mRenderTarget
index|[
name|i
index|]
expr_stmt|;
name|mRenderTarget
index|[
name|i
index|]
operator|=
name|NULL
expr_stmt|;
block|}
block|}
DECL|function|makeTextureStorage11_2D
name|TextureStorage11_2D
modifier|*
name|TextureStorage11_2D
operator|::
name|makeTextureStorage11_2D
parameter_list|(
name|TextureStorage
modifier|*
name|storage
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|TextureStorage11_2D
operator|*
argument_list|,
name|storage
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|TextureStorage11_2D
operator|*
argument_list|>
argument_list|(
name|storage
argument_list|)
return|;
block|}
DECL|function|getRenderTarget
name|RenderTarget
modifier|*
name|TextureStorage11_2D
operator|::
name|getRenderTarget
parameter_list|(
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|level
operator|>=
literal|0
operator|&&
name|level
operator|<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|mMipLevels
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|mRenderTarget
index|[
name|level
index|]
condition|)
block|{
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|HRESULT
name|result
decl_stmt|;
name|D3D11_SHADER_RESOURCE_VIEW_DESC
name|srvDesc
decl_stmt|;
name|srvDesc
operator|.
name|Format
operator|=
name|mShaderResourceFormat
expr_stmt|;
name|srvDesc
operator|.
name|ViewDimension
operator|=
name|D3D11_SRV_DIMENSION_TEXTURE2D
expr_stmt|;
name|srvDesc
operator|.
name|Texture2D
operator|.
name|MostDetailedMip
operator|=
name|level
expr_stmt|;
name|srvDesc
operator|.
name|Texture2D
operator|.
name|MipLevels
operator|=
literal|1
expr_stmt|;
name|ID3D11ShaderResourceView
modifier|*
name|srv
decl_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateShaderResourceView
argument_list|(
name|mTexture
argument_list|,
operator|&
name|srvDesc
argument_list|,
operator|&
name|srv
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|E_OUTOFMEMORY
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
cast|static_cast
argument_list|<
name|RenderTarget
operator|*
argument_list|>
argument_list|(
name|NULL
argument_list|)
argument_list|)
return|;
block|}
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mRenderTargetFormat
operator|!=
name|DXGI_FORMAT_UNKNOWN
condition|)
block|{
name|D3D11_RENDER_TARGET_VIEW_DESC
name|rtvDesc
decl_stmt|;
name|rtvDesc
operator|.
name|Format
operator|=
name|mRenderTargetFormat
expr_stmt|;
name|rtvDesc
operator|.
name|ViewDimension
operator|=
name|D3D11_RTV_DIMENSION_TEXTURE2D
expr_stmt|;
name|rtvDesc
operator|.
name|Texture2D
operator|.
name|MipSlice
operator|=
name|level
expr_stmt|;
name|ID3D11RenderTargetView
modifier|*
name|rtv
decl_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateRenderTargetView
argument_list|(
name|mTexture
argument_list|,
operator|&
name|rtvDesc
argument_list|,
operator|&
name|rtv
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|E_OUTOFMEMORY
condition|)
block|{
name|srv
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
cast|static_cast
argument_list|<
name|RenderTarget
operator|*
argument_list|>
argument_list|(
name|NULL
argument_list|)
argument_list|)
return|;
block|}
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// RenderTarget11 expects to be the owner of the resources it is given but TextureStorage11
comment|// also needs to keep a reference to the texture.
name|mTexture
operator|->
name|AddRef
argument_list|()
expr_stmt|;
name|mRenderTarget
index|[
name|level
index|]
operator|=
operator|new
name|RenderTarget11
argument_list|(
name|mRenderer
argument_list|,
name|rtv
argument_list|,
name|mTexture
argument_list|,
name|srv
argument_list|,
name|std
operator|::
name|max
argument_list|(
name|mTextureWidth
operator|>>
name|level
argument_list|,
literal|1U
argument_list|)
argument_list|,
name|std
operator|::
name|max
argument_list|(
name|mTextureHeight
operator|>>
name|level
argument_list|,
literal|1U
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mDepthStencilFormat
operator|!=
name|DXGI_FORMAT_UNKNOWN
condition|)
block|{
name|D3D11_DEPTH_STENCIL_VIEW_DESC
name|dsvDesc
decl_stmt|;
name|dsvDesc
operator|.
name|Format
operator|=
name|mDepthStencilFormat
expr_stmt|;
name|dsvDesc
operator|.
name|ViewDimension
operator|=
name|D3D11_DSV_DIMENSION_TEXTURE2D
expr_stmt|;
name|dsvDesc
operator|.
name|Texture2D
operator|.
name|MipSlice
operator|=
name|level
expr_stmt|;
name|dsvDesc
operator|.
name|Flags
operator|=
literal|0
expr_stmt|;
name|ID3D11DepthStencilView
modifier|*
name|dsv
decl_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateDepthStencilView
argument_list|(
name|mTexture
argument_list|,
operator|&
name|dsvDesc
argument_list|,
operator|&
name|dsv
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|E_OUTOFMEMORY
condition|)
block|{
name|srv
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
cast|static_cast
argument_list|<
name|RenderTarget
operator|*
argument_list|>
argument_list|(
name|NULL
argument_list|)
argument_list|)
return|;
block|}
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// RenderTarget11 expects to be the owner of the resources it is given but TextureStorage11
comment|// also needs to keep a reference to the texture.
name|mTexture
operator|->
name|AddRef
argument_list|()
expr_stmt|;
name|mRenderTarget
index|[
name|level
index|]
operator|=
operator|new
name|RenderTarget11
argument_list|(
name|mRenderer
argument_list|,
name|dsv
argument_list|,
name|mTexture
argument_list|,
name|srv
argument_list|,
name|std
operator|::
name|max
argument_list|(
name|mTextureWidth
operator|>>
name|level
argument_list|,
literal|1U
argument_list|)
argument_list|,
name|std
operator|::
name|max
argument_list|(
name|mTextureHeight
operator|>>
name|level
argument_list|,
literal|1U
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mRenderTarget
index|[
name|level
index|]
return|;
block|}
else|else
block|{
return|return
name|NULL
return|;
block|}
block|}
DECL|function|getSRV
name|ID3D11ShaderResourceView
modifier|*
name|TextureStorage11_2D
operator|::
name|getSRV
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mSRV
condition|)
block|{
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|D3D11_SHADER_RESOURCE_VIEW_DESC
name|srvDesc
decl_stmt|;
name|srvDesc
operator|.
name|Format
operator|=
name|mShaderResourceFormat
expr_stmt|;
name|srvDesc
operator|.
name|ViewDimension
operator|=
name|D3D11_SRV_DIMENSION_TEXTURE2D
expr_stmt|;
name|srvDesc
operator|.
name|Texture2D
operator|.
name|MipLevels
operator|=
operator|(
name|mMipLevels
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|mMipLevels
operator|)
expr_stmt|;
name|srvDesc
operator|.
name|Texture2D
operator|.
name|MostDetailedMip
operator|=
literal|0
expr_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateShaderResourceView
argument_list|(
name|mTexture
argument_list|,
operator|&
name|srvDesc
argument_list|,
operator|&
name|mSRV
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|E_OUTOFMEMORY
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
cast|static_cast
argument_list|<
name|ID3D11ShaderResourceView
operator|*
argument_list|>
argument_list|(
name|NULL
argument_list|)
argument_list|)
return|;
block|}
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mSRV
return|;
block|}
DECL|function|generateMipmap
name|void
name|TextureStorage11_2D
operator|::
name|generateMipmap
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|RenderTarget11
modifier|*
name|source
init|=
name|RenderTarget11
operator|::
name|makeRenderTarget11
argument_list|(
name|getRenderTarget
argument_list|(
name|level
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|RenderTarget11
modifier|*
name|dest
init|=
name|RenderTarget11
operator|::
name|makeRenderTarget11
argument_list|(
name|getRenderTarget
argument_list|(
name|level
argument_list|)
argument_list|)
decl_stmt|;
name|generateMipmapLayer
argument_list|(
name|source
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
DECL|function|TextureStorage11_Cube
name|TextureStorage11_Cube
operator|::
name|TextureStorage11_Cube
parameter_list|(
name|Renderer
modifier|*
name|renderer
parameter_list|,
name|int
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLenum
name|usage
parameter_list|,
name|bool
name|forceRenderable
parameter_list|,
name|int
name|size
parameter_list|)
member_init_list|:
name|TextureStorage11
argument_list|(
name|renderer
argument_list|,
name|GetTextureBindFlags
argument_list|(
name|gl_d3d11
operator|::
name|ConvertTextureFormat
argument_list|(
name|internalformat
argument_list|,
name|Renderer11
operator|::
name|makeRenderer11
argument_list|(
name|renderer
argument_list|)
operator|->
name|getFeatureLevel
argument_list|()
argument_list|)
argument_list|,
name|usage
argument_list|,
name|forceRenderable
argument_list|)
argument_list|)
block|{
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|unsigned
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gl
operator|::
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|;
name|j
operator|++
control|)
block|{
name|mRenderTarget
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|NULL
expr_stmt|;
block|}
block|}
name|DXGI_FORMAT
name|convertedFormat
init|=
name|gl_d3d11
operator|::
name|ConvertTextureFormat
argument_list|(
name|internalformat
argument_list|,
name|Renderer11
operator|::
name|makeRenderer11
argument_list|(
name|renderer
argument_list|)
operator|->
name|getFeatureLevel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d3d11
operator|::
name|IsDepthStencilFormat
argument_list|(
name|convertedFormat
argument_list|)
condition|)
block|{
name|mTextureFormat
operator|=
name|d3d11
operator|::
name|GetDepthTextureFormat
argument_list|(
name|convertedFormat
argument_list|)
expr_stmt|;
name|mShaderResourceFormat
operator|=
name|d3d11
operator|::
name|GetDepthShaderResourceFormat
argument_list|(
name|convertedFormat
argument_list|)
expr_stmt|;
name|mDepthStencilFormat
operator|=
name|convertedFormat
expr_stmt|;
name|mRenderTargetFormat
operator|=
name|DXGI_FORMAT_UNKNOWN
expr_stmt|;
block|}
else|else
block|{
name|mTextureFormat
operator|=
name|convertedFormat
expr_stmt|;
name|mShaderResourceFormat
operator|=
name|convertedFormat
expr_stmt|;
name|mDepthStencilFormat
operator|=
name|DXGI_FORMAT_UNKNOWN
expr_stmt|;
name|mRenderTargetFormat
operator|=
name|convertedFormat
expr_stmt|;
block|}
comment|// if the size is not positive this should be treated as an incomplete texture
comment|// we handle that here by skipping the d3d texture creation
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
comment|// adjust size if needed for compressed textures
name|int
name|height
init|=
name|size
decl_stmt|;
name|gl
operator|::
name|MakeValidSize
argument_list|(
literal|false
argument_list|,
name|gl
operator|::
name|IsCompressed
argument_list|(
name|internalformat
argument_list|)
argument_list|,
operator|&
name|size
argument_list|,
operator|&
name|height
argument_list|,
operator|&
name|mLodOffset
argument_list|)
expr_stmt|;
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|D3D11_TEXTURE2D_DESC
name|desc
decl_stmt|;
name|desc
operator|.
name|Width
operator|=
name|size
expr_stmt|;
name|desc
operator|.
name|Height
operator|=
name|size
expr_stmt|;
name|desc
operator|.
name|MipLevels
operator|=
operator|(
name|levels
operator|>
literal|0
operator|)
condition|?
name|levels
operator|+
name|mLodOffset
else|:
literal|0
expr_stmt|;
name|desc
operator|.
name|ArraySize
operator|=
literal|6
expr_stmt|;
name|desc
operator|.
name|Format
operator|=
name|mTextureFormat
expr_stmt|;
name|desc
operator|.
name|SampleDesc
operator|.
name|Count
operator|=
literal|1
expr_stmt|;
name|desc
operator|.
name|SampleDesc
operator|.
name|Quality
operator|=
literal|0
expr_stmt|;
name|desc
operator|.
name|Usage
operator|=
name|D3D11_USAGE_DEFAULT
expr_stmt|;
name|desc
operator|.
name|BindFlags
operator|=
name|getBindFlags
argument_list|()
expr_stmt|;
name|desc
operator|.
name|CPUAccessFlags
operator|=
literal|0
expr_stmt|;
name|desc
operator|.
name|MiscFlags
operator|=
name|D3D11_RESOURCE_MISC_TEXTURECUBE
expr_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateTexture2D
argument_list|(
operator|&
name|desc
argument_list|,
name|NULL
argument_list|,
operator|&
name|mTexture
argument_list|)
decl_stmt|;
if|if
condition|(
name|FAILED
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|ASSERT
argument_list|(
name|result
operator|==
name|E_OUTOFMEMORY
argument_list|)
expr_stmt|;
name|ERR
argument_list|(
literal|"Creating image failed."
argument_list|)
expr_stmt|;
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mTexture
operator|->
name|GetDesc
argument_list|(
operator|&
name|desc
argument_list|)
expr_stmt|;
name|mMipLevels
operator|=
name|desc
operator|.
name|MipLevels
expr_stmt|;
name|mTextureWidth
operator|=
name|desc
operator|.
name|Width
expr_stmt|;
name|mTextureHeight
operator|=
name|desc
operator|.
name|Height
expr_stmt|;
block|}
block|}
block|}
DECL|function|~TextureStorage11_Cube
name|TextureStorage11_Cube
operator|::
name|~
name|TextureStorage11_Cube
parameter_list|()
block|{
if|if
condition|(
name|mTexture
condition|)
block|{
name|mTexture
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mTexture
operator|=
name|NULL
expr_stmt|;
block|}
if|if
condition|(
name|mSRV
condition|)
block|{
name|mSRV
operator|->
name|Release
argument_list|()
expr_stmt|;
name|mSRV
operator|=
name|NULL
expr_stmt|;
block|}
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|unsigned
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gl
operator|::
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|;
name|j
operator|++
control|)
block|{
operator|delete
name|mRenderTarget
index|[
name|i
index|]
index|[
name|j
index|]
expr_stmt|;
name|mRenderTarget
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|NULL
expr_stmt|;
block|}
block|}
block|}
DECL|function|makeTextureStorage11_Cube
name|TextureStorage11_Cube
modifier|*
name|TextureStorage11_Cube
operator|::
name|makeTextureStorage11_Cube
parameter_list|(
name|TextureStorage
modifier|*
name|storage
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|HAS_DYNAMIC_TYPE
argument_list|(
name|TextureStorage11_Cube
operator|*
argument_list|,
name|storage
argument_list|)
argument_list|)
expr_stmt|;
return|return
cast|static_cast
argument_list|<
name|TextureStorage11_Cube
operator|*
argument_list|>
argument_list|(
name|storage
argument_list|)
return|;
block|}
DECL|function|getRenderTarget
name|RenderTarget
modifier|*
name|TextureStorage11_Cube
operator|::
name|getRenderTarget
parameter_list|(
name|GLenum
name|faceTarget
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|unsigned
name|int
name|faceIdx
init|=
name|gl
operator|::
name|TextureCubeMap
operator|::
name|faceIndex
argument_list|(
name|faceTarget
argument_list|)
decl_stmt|;
if|if
condition|(
name|level
operator|>=
literal|0
operator|&&
name|level
operator|<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|mMipLevels
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|mRenderTarget
index|[
name|faceIdx
index|]
index|[
name|level
index|]
condition|)
block|{
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|HRESULT
name|result
decl_stmt|;
name|D3D11_SHADER_RESOURCE_VIEW_DESC
name|srvDesc
decl_stmt|;
name|srvDesc
operator|.
name|Format
operator|=
name|mShaderResourceFormat
expr_stmt|;
name|srvDesc
operator|.
name|ViewDimension
operator|=
name|D3D11_SRV_DIMENSION_TEXTURECUBE
expr_stmt|;
name|srvDesc
operator|.
name|Texture2DArray
operator|.
name|MostDetailedMip
operator|=
name|level
expr_stmt|;
name|srvDesc
operator|.
name|Texture2DArray
operator|.
name|MipLevels
operator|=
literal|1
expr_stmt|;
name|srvDesc
operator|.
name|Texture2DArray
operator|.
name|FirstArraySlice
operator|=
name|faceIdx
expr_stmt|;
name|srvDesc
operator|.
name|Texture2DArray
operator|.
name|ArraySize
operator|=
literal|1
expr_stmt|;
name|ID3D11ShaderResourceView
modifier|*
name|srv
decl_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateShaderResourceView
argument_list|(
name|mTexture
argument_list|,
operator|&
name|srvDesc
argument_list|,
operator|&
name|srv
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|E_OUTOFMEMORY
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
cast|static_cast
argument_list|<
name|RenderTarget
operator|*
argument_list|>
argument_list|(
name|NULL
argument_list|)
argument_list|)
return|;
block|}
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mRenderTargetFormat
operator|!=
name|DXGI_FORMAT_UNKNOWN
condition|)
block|{
name|D3D11_RENDER_TARGET_VIEW_DESC
name|rtvDesc
decl_stmt|;
name|rtvDesc
operator|.
name|Format
operator|=
name|mRenderTargetFormat
expr_stmt|;
name|rtvDesc
operator|.
name|ViewDimension
operator|=
name|D3D11_RTV_DIMENSION_TEXTURE2DARRAY
expr_stmt|;
name|rtvDesc
operator|.
name|Texture2DArray
operator|.
name|MipSlice
operator|=
name|level
expr_stmt|;
name|rtvDesc
operator|.
name|Texture2DArray
operator|.
name|FirstArraySlice
operator|=
name|faceIdx
expr_stmt|;
name|rtvDesc
operator|.
name|Texture2DArray
operator|.
name|ArraySize
operator|=
literal|1
expr_stmt|;
name|ID3D11RenderTargetView
modifier|*
name|rtv
decl_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateRenderTargetView
argument_list|(
name|mTexture
argument_list|,
operator|&
name|rtvDesc
argument_list|,
operator|&
name|rtv
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|E_OUTOFMEMORY
condition|)
block|{
name|srv
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
cast|static_cast
argument_list|<
name|RenderTarget
operator|*
argument_list|>
argument_list|(
name|NULL
argument_list|)
argument_list|)
return|;
block|}
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// RenderTarget11 expects to be the owner of the resources it is given but TextureStorage11
comment|// also needs to keep a reference to the texture.
name|mTexture
operator|->
name|AddRef
argument_list|()
expr_stmt|;
name|mRenderTarget
index|[
name|faceIdx
index|]
index|[
name|level
index|]
operator|=
operator|new
name|RenderTarget11
argument_list|(
name|mRenderer
argument_list|,
name|rtv
argument_list|,
name|mTexture
argument_list|,
name|srv
argument_list|,
name|std
operator|::
name|max
argument_list|(
name|mTextureWidth
operator|>>
name|level
argument_list|,
literal|1U
argument_list|)
argument_list|,
name|std
operator|::
name|max
argument_list|(
name|mTextureHeight
operator|>>
name|level
argument_list|,
literal|1U
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mDepthStencilFormat
operator|!=
name|DXGI_FORMAT_UNKNOWN
condition|)
block|{
name|D3D11_DEPTH_STENCIL_VIEW_DESC
name|dsvDesc
decl_stmt|;
name|dsvDesc
operator|.
name|Format
operator|=
name|mRenderTargetFormat
expr_stmt|;
name|dsvDesc
operator|.
name|ViewDimension
operator|=
name|D3D11_DSV_DIMENSION_TEXTURE2DARRAY
expr_stmt|;
name|dsvDesc
operator|.
name|Texture2DArray
operator|.
name|MipSlice
operator|=
name|level
expr_stmt|;
name|dsvDesc
operator|.
name|Texture2DArray
operator|.
name|FirstArraySlice
operator|=
name|faceIdx
expr_stmt|;
name|dsvDesc
operator|.
name|Texture2DArray
operator|.
name|ArraySize
operator|=
literal|1
expr_stmt|;
name|ID3D11DepthStencilView
modifier|*
name|dsv
decl_stmt|;
name|result
operator|=
name|device
operator|->
name|CreateDepthStencilView
argument_list|(
name|mTexture
argument_list|,
operator|&
name|dsvDesc
argument_list|,
operator|&
name|dsv
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|E_OUTOFMEMORY
condition|)
block|{
name|srv
operator|->
name|Release
argument_list|()
expr_stmt|;
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
cast|static_cast
argument_list|<
name|RenderTarget
operator|*
argument_list|>
argument_list|(
name|NULL
argument_list|)
argument_list|)
return|;
block|}
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// RenderTarget11 expects to be the owner of the resources it is given but TextureStorage11
comment|// also needs to keep a reference to the texture.
name|mTexture
operator|->
name|AddRef
argument_list|()
expr_stmt|;
name|mRenderTarget
index|[
name|faceIdx
index|]
index|[
name|level
index|]
operator|=
operator|new
name|RenderTarget11
argument_list|(
name|mRenderer
argument_list|,
name|dsv
argument_list|,
name|mTexture
argument_list|,
name|srv
argument_list|,
name|std
operator|::
name|max
argument_list|(
name|mTextureWidth
operator|>>
name|level
argument_list|,
literal|1U
argument_list|)
argument_list|,
name|std
operator|::
name|max
argument_list|(
name|mTextureHeight
operator|>>
name|level
argument_list|,
literal|1U
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mRenderTarget
index|[
name|faceIdx
index|]
index|[
name|level
index|]
return|;
block|}
else|else
block|{
return|return
name|NULL
return|;
block|}
block|}
DECL|function|getSRV
name|ID3D11ShaderResourceView
modifier|*
name|TextureStorage11_Cube
operator|::
name|getSRV
parameter_list|()
block|{
if|if
condition|(
operator|!
name|mSRV
condition|)
block|{
name|ID3D11Device
modifier|*
name|device
init|=
name|mRenderer
operator|->
name|getDevice
argument_list|()
decl_stmt|;
name|D3D11_SHADER_RESOURCE_VIEW_DESC
name|srvDesc
decl_stmt|;
name|srvDesc
operator|.
name|Format
operator|=
name|mShaderResourceFormat
expr_stmt|;
name|srvDesc
operator|.
name|ViewDimension
operator|=
name|D3D11_SRV_DIMENSION_TEXTURECUBE
expr_stmt|;
name|srvDesc
operator|.
name|TextureCube
operator|.
name|MipLevels
operator|=
operator|(
name|mMipLevels
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|mMipLevels
operator|)
expr_stmt|;
name|srvDesc
operator|.
name|TextureCube
operator|.
name|MostDetailedMip
operator|=
literal|0
expr_stmt|;
name|HRESULT
name|result
init|=
name|device
operator|->
name|CreateShaderResourceView
argument_list|(
name|mTexture
argument_list|,
operator|&
name|srvDesc
argument_list|,
operator|&
name|mSRV
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|E_OUTOFMEMORY
condition|)
block|{
return|return
name|gl
operator|::
name|error
argument_list|(
name|GL_OUT_OF_MEMORY
argument_list|,
cast|static_cast
argument_list|<
name|ID3D11ShaderResourceView
operator|*
argument_list|>
argument_list|(
name|NULL
argument_list|)
argument_list|)
return|;
block|}
name|ASSERT
argument_list|(
name|SUCCEEDED
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mSRV
return|;
block|}
DECL|function|generateMipmap
name|void
name|TextureStorage11_Cube
operator|::
name|generateMipmap
parameter_list|(
name|int
name|face
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|RenderTarget11
modifier|*
name|source
init|=
name|RenderTarget11
operator|::
name|makeRenderTarget11
argument_list|(
name|getRenderTarget
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|+
name|face
argument_list|,
name|level
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|RenderTarget11
modifier|*
name|dest
init|=
name|RenderTarget11
operator|::
name|makeRenderTarget11
argument_list|(
name|getRenderTarget
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|+
name|face
argument_list|,
name|level
argument_list|)
argument_list|)
decl_stmt|;
name|generateMipmapLayer
argument_list|(
name|source
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
end_namespace
end_unit
