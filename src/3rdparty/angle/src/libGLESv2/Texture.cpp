begin_unit
begin_include
include|#
directive|include
file|"precompiled.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Texture.cpp: Implements the gl::Texture class and its derived classes
end_comment
begin_comment
comment|// Texture2D and TextureCubeMap. Implements GL texture objects and related
end_comment
begin_comment
comment|// functionality. [OpenGL ES 2.0.24] section 3.7 page 63.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Image.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/TextureStorage.h"
end_include
begin_include
include|#
directive|include
file|"libEGL/Surface.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/RenderTarget.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/TextureImpl.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|Texture
name|Texture
operator|::
name|Texture
parameter_list|(
name|GLuint
name|id
parameter_list|,
name|GLenum
name|target
parameter_list|)
member_init_list|:
name|RefCountObject
argument_list|(
name|id
argument_list|)
member_init_list|,
name|mUsage
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|mImmutable
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mTarget
argument_list|(
name|target
argument_list|)
block|{ }
DECL|function|~Texture
name|Texture
operator|::
name|~
name|Texture
parameter_list|()
block|{ }
DECL|function|getTarget
name|GLenum
name|Texture
operator|::
name|getTarget
parameter_list|()
specifier|const
block|{
return|return
name|mTarget
return|;
block|}
DECL|function|setUsage
name|void
name|Texture
operator|::
name|setUsage
parameter_list|(
name|GLenum
name|usage
parameter_list|)
block|{
name|mUsage
operator|=
name|usage
expr_stmt|;
block|}
DECL|function|getSamplerStateWithNativeOffset
name|void
name|Texture
operator|::
name|getSamplerStateWithNativeOffset
parameter_list|(
name|SamplerState
modifier|*
name|sampler
parameter_list|)
block|{
operator|*
name|sampler
operator|=
name|mSamplerState
expr_stmt|;
comment|// Offset the effective base level by the texture storage's top level
name|rx
operator|::
name|TextureStorageInterface
modifier|*
name|texture
init|=
name|getNativeTexture
argument_list|()
decl_stmt|;
name|int
name|topLevel
init|=
name|texture
condition|?
name|texture
operator|->
name|getTopLevel
argument_list|()
else|:
literal|0
decl_stmt|;
name|sampler
operator|->
name|baseLevel
operator|=
name|topLevel
operator|+
name|mSamplerState
operator|.
name|baseLevel
expr_stmt|;
block|}
DECL|function|getUsage
name|GLenum
name|Texture
operator|::
name|getUsage
parameter_list|()
specifier|const
block|{
return|return
name|mUsage
return|;
block|}
DECL|function|getBaseLevelWidth
name|GLint
name|Texture
operator|::
name|getBaseLevelWidth
parameter_list|()
specifier|const
block|{
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|baseImage
init|=
name|getBaseLevelImage
argument_list|()
decl_stmt|;
return|return
operator|(
name|baseImage
condition|?
name|baseImage
operator|->
name|getWidth
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
DECL|function|getBaseLevelHeight
name|GLint
name|Texture
operator|::
name|getBaseLevelHeight
parameter_list|()
specifier|const
block|{
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|baseImage
init|=
name|getBaseLevelImage
argument_list|()
decl_stmt|;
return|return
operator|(
name|baseImage
condition|?
name|baseImage
operator|->
name|getHeight
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
DECL|function|getBaseLevelDepth
name|GLint
name|Texture
operator|::
name|getBaseLevelDepth
parameter_list|()
specifier|const
block|{
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|baseImage
init|=
name|getBaseLevelImage
argument_list|()
decl_stmt|;
return|return
operator|(
name|baseImage
condition|?
name|baseImage
operator|->
name|getDepth
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
comment|// Note: "base level image" is loosely defined to be any image from the base level,
comment|// where in the base of 2D array textures and cube maps there are several. Don't use
comment|// the base level image for anything except querying texture format and size.
DECL|function|getBaseLevelInternalFormat
name|GLenum
name|Texture
operator|::
name|getBaseLevelInternalFormat
parameter_list|()
specifier|const
block|{
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|baseImage
init|=
name|getBaseLevelImage
argument_list|()
decl_stmt|;
return|return
operator|(
name|baseImage
condition|?
name|baseImage
operator|->
name|getInternalFormat
argument_list|()
else|:
name|GL_NONE
operator|)
return|;
block|}
DECL|function|getTextureSerial
name|unsigned
name|int
name|Texture
operator|::
name|getTextureSerial
parameter_list|()
block|{
name|rx
operator|::
name|TextureStorageInterface
modifier|*
name|texture
init|=
name|getNativeTexture
argument_list|()
decl_stmt|;
return|return
name|texture
condition|?
name|texture
operator|->
name|getTextureSerial
argument_list|()
else|:
literal|0
return|;
block|}
DECL|function|isImmutable
name|bool
name|Texture
operator|::
name|isImmutable
parameter_list|()
specifier|const
block|{
return|return
name|mImmutable
return|;
block|}
DECL|function|immutableLevelCount
name|int
name|Texture
operator|::
name|immutableLevelCount
parameter_list|()
block|{
return|return
operator|(
name|mImmutable
condition|?
name|getNativeTexture
argument_list|()
operator|->
name|getStorageInstance
argument_list|()
operator|->
name|getLevelCount
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
DECL|function|mipLevels
name|int
name|Texture
operator|::
name|mipLevels
parameter_list|()
specifier|const
block|{
return|return
name|log2
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|getBaseLevelWidth
argument_list|()
argument_list|,
name|getBaseLevelHeight
argument_list|()
argument_list|)
argument_list|,
name|getBaseLevelDepth
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|1
return|;
block|}
DECL|function|Texture2D
name|Texture2D
operator|::
name|Texture2D
parameter_list|(
name|rx
operator|::
name|Texture2DImpl
modifier|*
name|impl
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|Texture
argument_list|(
name|id
argument_list|,
name|GL_TEXTURE_2D
argument_list|)
member_init_list|,
name|mTexture
argument_list|(
name|impl
argument_list|)
block|{
name|mSurface
operator|=
name|NULL
expr_stmt|;
block|}
DECL|function|~Texture2D
name|Texture2D
operator|::
name|~
name|Texture2D
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mTexture
argument_list|)
expr_stmt|;
if|if
condition|(
name|mSurface
condition|)
block|{
name|mSurface
operator|->
name|setBoundTexture
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|mSurface
operator|=
name|NULL
expr_stmt|;
block|}
block|}
DECL|function|getNativeTexture
name|rx
operator|::
name|TextureStorageInterface
modifier|*
name|Texture2D
operator|::
name|getNativeTexture
parameter_list|()
block|{
return|return
name|mTexture
operator|->
name|getNativeTexture
argument_list|()
return|;
block|}
DECL|function|setUsage
name|void
name|Texture2D
operator|::
name|setUsage
parameter_list|(
name|GLenum
name|usage
parameter_list|)
block|{
name|mUsage
operator|=
name|usage
expr_stmt|;
name|mTexture
operator|->
name|setUsage
argument_list|(
name|usage
argument_list|)
expr_stmt|;
block|}
DECL|function|hasDirtyImages
name|bool
name|Texture2D
operator|::
name|hasDirtyImages
parameter_list|()
specifier|const
block|{
return|return
name|mTexture
operator|->
name|hasDirtyImages
argument_list|()
return|;
block|}
DECL|function|resetDirty
name|void
name|Texture2D
operator|::
name|resetDirty
parameter_list|()
block|{
name|mTexture
operator|->
name|resetDirty
argument_list|()
expr_stmt|;
block|}
DECL|function|getWidth
name|GLsizei
name|Texture2D
operator|::
name|getWidth
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|)
operator|->
name|getWidth
argument_list|()
return|;
else|else
return|return
literal|0
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|Texture2D
operator|::
name|getHeight
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|)
operator|->
name|getHeight
argument_list|()
return|;
else|else
return|return
literal|0
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|Texture2D
operator|::
name|getInternalFormat
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|)
operator|->
name|getInternalFormat
argument_list|()
return|;
else|else
return|return
name|GL_NONE
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|Texture2D
operator|::
name|getActualFormat
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|)
operator|->
name|getActualFormat
argument_list|()
return|;
else|else
return|return
name|GL_NONE
return|;
block|}
DECL|function|redefineImage
name|void
name|Texture2D
operator|::
name|redefineImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|releaseTexImage
argument_list|()
expr_stmt|;
name|mTexture
operator|->
name|redefineImage
argument_list|(
name|level
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
DECL|function|setImage
name|void
name|Texture2D
operator|::
name|setImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|GLenum
name|sizedInternalFormat
init|=
name|IsSizedInternalFormat
argument_list|(
name|internalFormat
argument_list|)
condition|?
name|internalFormat
else|:
name|GetSizedInternalFormat
argument_list|(
name|format
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|redefineImage
argument_list|(
name|level
argument_list|,
name|sizedInternalFormat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|mTexture
operator|->
name|setImage
argument_list|(
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|bindTexImage
name|void
name|Texture2D
operator|::
name|bindTexImage
parameter_list|(
name|egl
operator|::
name|Surface
modifier|*
name|surface
parameter_list|)
block|{
name|releaseTexImage
argument_list|()
expr_stmt|;
name|mTexture
operator|->
name|bindTexImage
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|mSurface
operator|=
name|surface
expr_stmt|;
name|mSurface
operator|->
name|setBoundTexture
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|releaseTexImage
name|void
name|Texture2D
operator|::
name|releaseTexImage
parameter_list|()
block|{
if|if
condition|(
name|mSurface
condition|)
block|{
name|mSurface
operator|->
name|setBoundTexture
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|mSurface
operator|=
name|NULL
expr_stmt|;
name|mTexture
operator|->
name|releaseTexImage
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|setCompressedImage
name|void
name|Texture2D
operator|::
name|setCompressedImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
comment|// compressed formats don't have separate sized internal formats-- we can just use the compressed format directly
name|redefineImage
argument_list|(
name|level
argument_list|,
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|mTexture
operator|->
name|setCompressedImage
argument_list|(
name|level
argument_list|,
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImage
name|void
name|Texture2D
operator|::
name|subImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImage
argument_list|(
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImageCompressed
name|void
name|Texture2D
operator|::
name|subImageCompressed
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImageCompressed
argument_list|(
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|copyImage
name|void
name|Texture2D
operator|::
name|copyImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|Framebuffer
modifier|*
name|source
parameter_list|)
block|{
name|GLenum
name|sizedInternalFormat
init|=
name|IsSizedInternalFormat
argument_list|(
name|format
argument_list|)
condition|?
name|format
else|:
name|GetSizedInternalFormat
argument_list|(
name|format
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|)
decl_stmt|;
name|redefineImage
argument_list|(
name|level
argument_list|,
name|sizedInternalFormat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|mTexture
operator|->
name|copyImage
argument_list|(
name|level
argument_list|,
name|format
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
DECL|function|copySubImage
name|void
name|Texture2D
operator|::
name|copySubImage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|Framebuffer
modifier|*
name|source
parameter_list|)
block|{
name|mTexture
operator|->
name|copySubImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
DECL|function|storage
name|void
name|Texture2D
operator|::
name|storage
parameter_list|(
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|mImmutable
operator|=
literal|true
expr_stmt|;
name|mTexture
operator|->
name|storage
argument_list|(
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
expr_stmt|;
block|}
comment|// Tests for 2D texture sampling completeness. [OpenGL ES 2.0.24] section 3.8.2 page 85.
DECL|function|isSamplerComplete
name|bool
name|Texture2D
operator|::
name|isSamplerComplete
parameter_list|(
specifier|const
name|SamplerState
modifier|&
name|samplerState
parameter_list|)
specifier|const
block|{
return|return
name|mTexture
operator|->
name|isSamplerComplete
argument_list|(
name|samplerState
argument_list|)
return|;
block|}
DECL|function|isCompressed
name|bool
name|Texture2D
operator|::
name|isCompressed
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|IsFormatCompressed
argument_list|(
name|getInternalFormat
argument_list|(
name|level
argument_list|)
argument_list|)
return|;
block|}
DECL|function|isDepth
name|bool
name|Texture2D
operator|::
name|isDepth
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|GetDepthBits
argument_list|(
name|getInternalFormat
argument_list|(
name|level
argument_list|)
argument_list|)
operator|>
literal|0
return|;
block|}
DECL|function|generateMipmaps
name|void
name|Texture2D
operator|::
name|generateMipmaps
parameter_list|()
block|{
comment|// Purge array levels 1 through q and reset them to represent the generated mipmap levels.
name|int
name|levelCount
init|=
name|mipLevels
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|level
init|=
literal|1
init|;
name|level
operator|<
name|levelCount
condition|;
name|level
operator|++
control|)
block|{
name|redefineImage
argument_list|(
name|level
argument_list|,
name|getBaseLevelInternalFormat
argument_list|()
argument_list|,
name|std
operator|::
name|max
argument_list|(
name|getBaseLevelWidth
argument_list|()
operator|>>
name|level
argument_list|,
literal|1
argument_list|)
argument_list|,
name|std
operator|::
name|max
argument_list|(
name|getBaseLevelHeight
argument_list|()
operator|>>
name|level
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mTexture
operator|->
name|generateMipmaps
argument_list|()
expr_stmt|;
block|}
DECL|function|getBaseLevelImage
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|Texture2D
operator|::
name|getBaseLevelImage
parameter_list|()
specifier|const
block|{
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|function|getRenderTargetSerial
name|unsigned
name|int
name|Texture2D
operator|::
name|getRenderTargetSerial
parameter_list|(
name|GLint
name|level
parameter_list|)
block|{
return|return
name|mTexture
operator|->
name|getRenderTargetSerial
argument_list|(
name|level
argument_list|)
return|;
block|}
DECL|function|getRenderTarget
name|rx
operator|::
name|RenderTarget
modifier|*
name|Texture2D
operator|::
name|getRenderTarget
parameter_list|(
name|GLint
name|level
parameter_list|)
block|{
return|return
name|mTexture
operator|->
name|getRenderTarget
argument_list|(
name|level
argument_list|)
return|;
block|}
DECL|function|getDepthSencil
name|rx
operator|::
name|RenderTarget
modifier|*
name|Texture2D
operator|::
name|getDepthSencil
parameter_list|(
name|GLint
name|level
parameter_list|)
block|{
return|return
name|mTexture
operator|->
name|getDepthSencil
argument_list|(
name|level
argument_list|)
return|;
block|}
DECL|function|TextureCubeMap
name|TextureCubeMap
operator|::
name|TextureCubeMap
parameter_list|(
name|rx
operator|::
name|TextureCubeImpl
modifier|*
name|impl
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|Texture
argument_list|(
name|id
argument_list|,
name|GL_TEXTURE_CUBE_MAP
argument_list|)
member_init_list|,
name|mTexture
argument_list|(
name|impl
argument_list|)
block|{ }
DECL|function|~TextureCubeMap
name|TextureCubeMap
operator|::
name|~
name|TextureCubeMap
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mTexture
argument_list|)
expr_stmt|;
block|}
DECL|function|getNativeTexture
name|rx
operator|::
name|TextureStorageInterface
modifier|*
name|TextureCubeMap
operator|::
name|getNativeTexture
parameter_list|()
block|{
return|return
name|mTexture
operator|->
name|getNativeTexture
argument_list|()
return|;
block|}
DECL|function|setUsage
name|void
name|TextureCubeMap
operator|::
name|setUsage
parameter_list|(
name|GLenum
name|usage
parameter_list|)
block|{
name|mUsage
operator|=
name|usage
expr_stmt|;
name|mTexture
operator|->
name|setUsage
argument_list|(
name|usage
argument_list|)
expr_stmt|;
block|}
DECL|function|hasDirtyImages
name|bool
name|TextureCubeMap
operator|::
name|hasDirtyImages
parameter_list|()
specifier|const
block|{
return|return
name|mTexture
operator|->
name|hasDirtyImages
argument_list|()
return|;
block|}
DECL|function|resetDirty
name|void
name|TextureCubeMap
operator|::
name|resetDirty
parameter_list|()
block|{
name|mTexture
operator|->
name|resetDirty
argument_list|()
expr_stmt|;
block|}
DECL|function|getWidth
name|GLsizei
name|TextureCubeMap
operator|::
name|getWidth
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
operator|->
name|getWidth
argument_list|()
return|;
else|else
return|return
literal|0
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|TextureCubeMap
operator|::
name|getHeight
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
operator|->
name|getHeight
argument_list|()
return|;
else|else
return|return
literal|0
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|TextureCubeMap
operator|::
name|getInternalFormat
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
operator|->
name|getInternalFormat
argument_list|()
return|;
else|else
return|return
name|GL_NONE
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|TextureCubeMap
operator|::
name|getActualFormat
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
operator|->
name|getActualFormat
argument_list|()
return|;
else|else
return|return
name|GL_NONE
return|;
block|}
DECL|function|setImagePosX
name|void
name|TextureCubeMap
operator|::
name|setImagePosX
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
literal|0
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setImageNegX
name|void
name|TextureCubeMap
operator|::
name|setImageNegX
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
literal|1
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setImagePosY
name|void
name|TextureCubeMap
operator|::
name|setImagePosY
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
literal|2
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setImageNegY
name|void
name|TextureCubeMap
operator|::
name|setImageNegY
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
literal|3
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setImagePosZ
name|void
name|TextureCubeMap
operator|::
name|setImagePosZ
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
literal|4
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setImageNegZ
name|void
name|TextureCubeMap
operator|::
name|setImageNegZ
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
literal|5
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setCompressedImage
name|void
name|TextureCubeMap
operator|::
name|setCompressedImage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setCompressedImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImage
name|void
name|TextureCubeMap
operator|::
name|subImage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImageCompressed
name|void
name|TextureCubeMap
operator|::
name|subImageCompressed
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImageCompressed
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
comment|// Tests for cube map sampling completeness. [OpenGL ES 2.0.24] section 3.8.2 page 86.
DECL|function|isSamplerComplete
name|bool
name|TextureCubeMap
operator|::
name|isSamplerComplete
parameter_list|(
specifier|const
name|SamplerState
modifier|&
name|samplerState
parameter_list|)
specifier|const
block|{
return|return
name|mTexture
operator|->
name|isSamplerComplete
argument_list|(
name|samplerState
argument_list|)
return|;
block|}
comment|// Tests for cube texture completeness. [OpenGL ES 2.0.24] section 3.7.10 page 81.
DECL|function|isCubeComplete
name|bool
name|TextureCubeMap
operator|::
name|isCubeComplete
parameter_list|()
specifier|const
block|{
return|return
name|mTexture
operator|->
name|isCubeComplete
argument_list|()
return|;
block|}
DECL|function|isCompressed
name|bool
name|TextureCubeMap
operator|::
name|isCompressed
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|IsFormatCompressed
argument_list|(
name|getInternalFormat
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
argument_list|)
return|;
block|}
DECL|function|isDepth
name|bool
name|TextureCubeMap
operator|::
name|isDepth
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|GetDepthBits
argument_list|(
name|getInternalFormat
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
argument_list|)
operator|>
literal|0
return|;
block|}
DECL|function|copyImage
name|void
name|TextureCubeMap
operator|::
name|copyImage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|Framebuffer
modifier|*
name|source
parameter_list|)
block|{
name|mTexture
operator|->
name|copyImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|format
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
DECL|function|copySubImage
name|void
name|TextureCubeMap
operator|::
name|copySubImage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|Framebuffer
modifier|*
name|source
parameter_list|)
block|{
name|mTexture
operator|->
name|copySubImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
DECL|function|storage
name|void
name|TextureCubeMap
operator|::
name|storage
parameter_list|(
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|size
parameter_list|)
block|{
name|mImmutable
operator|=
literal|true
expr_stmt|;
name|mTexture
operator|->
name|storage
argument_list|(
name|levels
argument_list|,
name|internalformat
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
DECL|function|generateMipmaps
name|void
name|TextureCubeMap
operator|::
name|generateMipmaps
parameter_list|()
block|{
name|mTexture
operator|->
name|generateMipmaps
argument_list|()
expr_stmt|;
block|}
DECL|function|getBaseLevelImage
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|TextureCubeMap
operator|::
name|getBaseLevelImage
parameter_list|()
specifier|const
block|{
comment|// Note: if we are not cube-complete, there is no single base level image that can describe all
comment|// cube faces, so this method is only well-defined for a cube-complete base level.
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|function|getRenderTargetSerial
name|unsigned
name|int
name|TextureCubeMap
operator|::
name|getRenderTargetSerial
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
block|{
return|return
name|mTexture
operator|->
name|getRenderTargetSerial
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
return|;
block|}
DECL|function|getRenderTarget
name|rx
operator|::
name|RenderTarget
modifier|*
name|TextureCubeMap
operator|::
name|getRenderTarget
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
block|{
return|return
name|mTexture
operator|->
name|getRenderTarget
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
return|;
block|}
DECL|function|getDepthStencil
name|rx
operator|::
name|RenderTarget
modifier|*
name|TextureCubeMap
operator|::
name|getDepthStencil
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
block|{
return|return
name|mTexture
operator|->
name|getDepthStencil
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
return|;
block|}
DECL|function|Texture3D
name|Texture3D
operator|::
name|Texture3D
parameter_list|(
name|rx
operator|::
name|Texture3DImpl
modifier|*
name|impl
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|Texture
argument_list|(
name|id
argument_list|,
name|GL_TEXTURE_3D
argument_list|)
member_init_list|,
name|mTexture
argument_list|(
name|impl
argument_list|)
block|{ }
DECL|function|~Texture3D
name|Texture3D
operator|::
name|~
name|Texture3D
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mTexture
argument_list|)
expr_stmt|;
block|}
DECL|function|getNativeTexture
name|rx
operator|::
name|TextureStorageInterface
modifier|*
name|Texture3D
operator|::
name|getNativeTexture
parameter_list|()
block|{
return|return
name|mTexture
operator|->
name|getNativeTexture
argument_list|()
return|;
block|}
DECL|function|setUsage
name|void
name|Texture3D
operator|::
name|setUsage
parameter_list|(
name|GLenum
name|usage
parameter_list|)
block|{
name|mUsage
operator|=
name|usage
expr_stmt|;
name|mTexture
operator|->
name|setUsage
argument_list|(
name|usage
argument_list|)
expr_stmt|;
block|}
DECL|function|hasDirtyImages
name|bool
name|Texture3D
operator|::
name|hasDirtyImages
parameter_list|()
specifier|const
block|{
return|return
name|mTexture
operator|->
name|hasDirtyImages
argument_list|()
return|;
block|}
DECL|function|resetDirty
name|void
name|Texture3D
operator|::
name|resetDirty
parameter_list|()
block|{
name|mTexture
operator|->
name|resetDirty
argument_list|()
expr_stmt|;
block|}
DECL|function|getWidth
name|GLsizei
name|Texture3D
operator|::
name|getWidth
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|)
operator|->
name|getWidth
argument_list|()
else|:
literal|0
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|Texture3D
operator|::
name|getHeight
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|)
operator|->
name|getHeight
argument_list|()
else|:
literal|0
return|;
block|}
DECL|function|getDepth
name|GLsizei
name|Texture3D
operator|::
name|getDepth
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|)
operator|->
name|getDepth
argument_list|()
else|:
literal|0
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|Texture3D
operator|::
name|getInternalFormat
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|)
operator|->
name|getInternalFormat
argument_list|()
else|:
name|GL_NONE
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|Texture3D
operator|::
name|getActualFormat
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|)
operator|->
name|getActualFormat
argument_list|()
else|:
name|GL_NONE
return|;
block|}
DECL|function|isCompressed
name|bool
name|Texture3D
operator|::
name|isCompressed
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|IsFormatCompressed
argument_list|(
name|getInternalFormat
argument_list|(
name|level
argument_list|)
argument_list|)
return|;
block|}
DECL|function|isDepth
name|bool
name|Texture3D
operator|::
name|isDepth
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|GetDepthBits
argument_list|(
name|getInternalFormat
argument_list|(
name|level
argument_list|)
argument_list|)
operator|>
literal|0
return|;
block|}
DECL|function|setImage
name|void
name|Texture3D
operator|::
name|setImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setCompressedImage
name|void
name|Texture3D
operator|::
name|setCompressedImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setCompressedImage
argument_list|(
name|level
argument_list|,
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImage
name|void
name|Texture3D
operator|::
name|subImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImage
argument_list|(
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImageCompressed
name|void
name|Texture3D
operator|::
name|subImageCompressed
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImageCompressed
argument_list|(
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|storage
name|void
name|Texture3D
operator|::
name|storage
parameter_list|(
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
block|{
name|mImmutable
operator|=
literal|true
expr_stmt|;
name|mTexture
operator|->
name|storage
argument_list|(
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
DECL|function|generateMipmaps
name|void
name|Texture3D
operator|::
name|generateMipmaps
parameter_list|()
block|{
name|mTexture
operator|->
name|generateMipmaps
argument_list|()
expr_stmt|;
block|}
DECL|function|getBaseLevelImage
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|Texture3D
operator|::
name|getBaseLevelImage
parameter_list|()
specifier|const
block|{
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|function|copySubImage
name|void
name|Texture3D
operator|::
name|copySubImage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|Framebuffer
modifier|*
name|source
parameter_list|)
block|{
name|mTexture
operator|->
name|copySubImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
DECL|function|isSamplerComplete
name|bool
name|Texture3D
operator|::
name|isSamplerComplete
parameter_list|(
specifier|const
name|SamplerState
modifier|&
name|samplerState
parameter_list|)
specifier|const
block|{
return|return
name|mTexture
operator|->
name|isSamplerComplete
argument_list|(
name|samplerState
argument_list|)
return|;
block|}
DECL|function|isMipmapComplete
name|bool
name|Texture3D
operator|::
name|isMipmapComplete
parameter_list|()
specifier|const
block|{
return|return
name|mTexture
operator|->
name|isMipmapComplete
argument_list|()
return|;
block|}
DECL|function|getRenderTargetSerial
name|unsigned
name|int
name|Texture3D
operator|::
name|getRenderTargetSerial
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
return|return
name|mTexture
operator|->
name|getRenderTargetSerial
argument_list|(
name|level
argument_list|,
name|layer
argument_list|)
return|;
block|}
DECL|function|getRenderTarget
name|rx
operator|::
name|RenderTarget
modifier|*
name|Texture3D
operator|::
name|getRenderTarget
parameter_list|(
name|GLint
name|level
parameter_list|)
block|{
return|return
name|mTexture
operator|->
name|getRenderTarget
argument_list|(
name|level
argument_list|)
return|;
block|}
DECL|function|getRenderTarget
name|rx
operator|::
name|RenderTarget
modifier|*
name|Texture3D
operator|::
name|getRenderTarget
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
return|return
name|mTexture
operator|->
name|getRenderTarget
argument_list|(
name|level
argument_list|,
name|layer
argument_list|)
return|;
block|}
DECL|function|getDepthStencil
name|rx
operator|::
name|RenderTarget
modifier|*
name|Texture3D
operator|::
name|getDepthStencil
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
return|return
name|mTexture
operator|->
name|getDepthStencil
argument_list|(
name|level
argument_list|,
name|layer
argument_list|)
return|;
block|}
DECL|function|Texture2DArray
name|Texture2DArray
operator|::
name|Texture2DArray
parameter_list|(
name|rx
operator|::
name|Texture2DArrayImpl
modifier|*
name|impl
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|Texture
argument_list|(
name|id
argument_list|,
name|GL_TEXTURE_2D_ARRAY
argument_list|)
member_init_list|,
name|mTexture
argument_list|(
name|impl
argument_list|)
block|{ }
DECL|function|~Texture2DArray
name|Texture2DArray
operator|::
name|~
name|Texture2DArray
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mTexture
argument_list|)
expr_stmt|;
block|}
DECL|function|getNativeTexture
name|rx
operator|::
name|TextureStorageInterface
modifier|*
name|Texture2DArray
operator|::
name|getNativeTexture
parameter_list|()
block|{
return|return
name|mTexture
operator|->
name|getNativeTexture
argument_list|()
return|;
block|}
DECL|function|setUsage
name|void
name|Texture2DArray
operator|::
name|setUsage
parameter_list|(
name|GLenum
name|usage
parameter_list|)
block|{
name|mUsage
operator|=
name|usage
expr_stmt|;
name|mTexture
operator|->
name|setUsage
argument_list|(
name|usage
argument_list|)
expr_stmt|;
block|}
DECL|function|hasDirtyImages
name|bool
name|Texture2DArray
operator|::
name|hasDirtyImages
parameter_list|()
specifier|const
block|{
return|return
name|mTexture
operator|->
name|hasDirtyImages
argument_list|()
return|;
block|}
DECL|function|resetDirty
name|void
name|Texture2DArray
operator|::
name|resetDirty
parameter_list|()
block|{
name|mTexture
operator|->
name|resetDirty
argument_list|()
expr_stmt|;
block|}
DECL|function|getWidth
name|GLsizei
name|Texture2DArray
operator|::
name|getWidth
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
argument_list|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|&&
name|mTexture
operator|->
name|getLayerCount
operator|(
name|level
operator|)
argument_list|>
literal|0
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getWidth
argument_list|()
else|:
literal|0
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|Texture2DArray
operator|::
name|getHeight
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
argument_list|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|&&
name|mTexture
operator|->
name|getLayerCount
operator|(
name|level
operator|)
argument_list|>
literal|0
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getHeight
argument_list|()
else|:
literal|0
return|;
block|}
DECL|function|getLayers
name|GLsizei
name|Texture2DArray
operator|::
name|getLayers
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|)
condition|?
name|mTexture
operator|->
name|getLayerCount
argument_list|(
name|level
argument_list|)
else|:
literal|0
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|Texture2DArray
operator|::
name|getInternalFormat
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
argument_list|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|&&
name|mTexture
operator|->
name|getLayerCount
operator|(
name|level
operator|)
argument_list|>
literal|0
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getInternalFormat
argument_list|()
else|:
name|GL_NONE
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|Texture2DArray
operator|::
name|getActualFormat
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
argument_list|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|&&
name|mTexture
operator|->
name|getLayerCount
operator|(
name|level
operator|)
argument_list|>
literal|0
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getActualFormat
argument_list|()
else|:
name|GL_NONE
return|;
block|}
DECL|function|isCompressed
name|bool
name|Texture2DArray
operator|::
name|isCompressed
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|IsFormatCompressed
argument_list|(
name|getInternalFormat
argument_list|(
name|level
argument_list|)
argument_list|)
return|;
block|}
DECL|function|isDepth
name|bool
name|Texture2DArray
operator|::
name|isDepth
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|GetDepthBits
argument_list|(
name|getInternalFormat
argument_list|(
name|level
argument_list|)
argument_list|)
operator|>
literal|0
return|;
block|}
DECL|function|setImage
name|void
name|Texture2DArray
operator|::
name|setImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setCompressedImage
name|void
name|Texture2DArray
operator|::
name|setCompressedImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setCompressedImage
argument_list|(
name|level
argument_list|,
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImage
name|void
name|Texture2DArray
operator|::
name|subImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImage
argument_list|(
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImageCompressed
name|void
name|Texture2DArray
operator|::
name|subImageCompressed
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImageCompressed
argument_list|(
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|storage
name|void
name|Texture2DArray
operator|::
name|storage
parameter_list|(
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
block|{
name|mImmutable
operator|=
literal|true
expr_stmt|;
name|mTexture
operator|->
name|storage
argument_list|(
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
DECL|function|generateMipmaps
name|void
name|Texture2DArray
operator|::
name|generateMipmaps
parameter_list|()
block|{
name|mTexture
operator|->
name|generateMipmaps
argument_list|()
expr_stmt|;
block|}
DECL|function|getBaseLevelImage
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|Texture2DArray
operator|::
name|getBaseLevelImage
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|mTexture
operator|->
name|getLayerCount
argument_list|(
literal|0
argument_list|)
operator|>
literal|0
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|NULL
operator|)
return|;
block|}
DECL|function|copySubImage
name|void
name|Texture2DArray
operator|::
name|copySubImage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|Framebuffer
modifier|*
name|source
parameter_list|)
block|{
name|mTexture
operator|->
name|copySubImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
DECL|function|isSamplerComplete
name|bool
name|Texture2DArray
operator|::
name|isSamplerComplete
parameter_list|(
specifier|const
name|SamplerState
modifier|&
name|samplerState
parameter_list|)
specifier|const
block|{
return|return
name|mTexture
operator|->
name|isSamplerComplete
argument_list|(
name|samplerState
argument_list|)
return|;
block|}
DECL|function|isMipmapComplete
name|bool
name|Texture2DArray
operator|::
name|isMipmapComplete
parameter_list|()
specifier|const
block|{
return|return
name|mTexture
operator|->
name|isMipmapComplete
argument_list|()
return|;
block|}
DECL|function|getRenderTargetSerial
name|unsigned
name|int
name|Texture2DArray
operator|::
name|getRenderTargetSerial
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
return|return
name|mTexture
operator|->
name|getRenderTargetSerial
argument_list|(
name|level
argument_list|,
name|layer
argument_list|)
return|;
block|}
DECL|function|getRenderTarget
name|rx
operator|::
name|RenderTarget
modifier|*
name|Texture2DArray
operator|::
name|getRenderTarget
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
return|return
name|mTexture
operator|->
name|getRenderTarget
argument_list|(
name|level
argument_list|,
name|layer
argument_list|)
return|;
block|}
DECL|function|getDepthStencil
name|rx
operator|::
name|RenderTarget
modifier|*
name|Texture2DArray
operator|::
name|getDepthStencil
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|layer
parameter_list|)
block|{
return|return
name|mTexture
operator|->
name|getDepthStencil
argument_list|(
name|level
argument_list|,
name|layer
argument_list|)
return|;
block|}
block|}
end_namespace
end_unit
