begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2014 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Texture.cpp: Implements the gl::Texture class and its derived classes
end_comment
begin_comment
comment|// Texture2D and TextureCubeMap. Implements GL texture objects and related
end_comment
begin_comment
comment|// functionality. [OpenGL ES 2.0.24] section 3.7 page 63.
end_comment
begin_include
include|#
directive|include
file|"libGLESv2/Texture.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/main.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Context.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/formatutils.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/ImageIndex.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/Renderbuffer.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/Image.h"
end_include
begin_include
include|#
directive|include
file|"libGLESv2/renderer/d3d/TextureStorage.h"
end_include
begin_include
include|#
directive|include
file|"libEGL/Surface.h"
end_include
begin_include
include|#
directive|include
file|"common/mathutil.h"
end_include
begin_include
include|#
directive|include
file|"common/utilities.h"
end_include
begin_namespace
DECL|namespace|gl
namespace|namespace
name|gl
block|{
DECL|function|IsMipmapFiltered
name|bool
name|IsMipmapFiltered
parameter_list|(
specifier|const
name|gl
operator|::
name|SamplerState
modifier|&
name|samplerState
parameter_list|)
block|{
switch|switch
condition|(
name|samplerState
operator|.
name|minFilter
condition|)
block|{
case|case
name|GL_NEAREST
case|:
case|case
name|GL_LINEAR
case|:
return|return
literal|false
return|;
case|case
name|GL_NEAREST_MIPMAP_NEAREST
case|:
case|case
name|GL_LINEAR_MIPMAP_NEAREST
case|:
case|case
name|GL_NEAREST_MIPMAP_LINEAR
case|:
case|case
name|GL_LINEAR_MIPMAP_LINEAR
case|:
return|return
literal|true
return|;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|function|IsPointSampled
name|bool
name|IsPointSampled
parameter_list|(
specifier|const
name|gl
operator|::
name|SamplerState
modifier|&
name|samplerState
parameter_list|)
block|{
return|return
operator|(
name|samplerState
operator|.
name|magFilter
operator|==
name|GL_NEAREST
operator|&&
operator|(
name|samplerState
operator|.
name|minFilter
operator|==
name|GL_NEAREST
operator|||
name|samplerState
operator|.
name|minFilter
operator|==
name|GL_NEAREST_MIPMAP_NEAREST
operator|)
operator|)
return|;
block|}
DECL|function|Texture
name|Texture
operator|::
name|Texture
parameter_list|(
name|rx
operator|::
name|TextureImpl
modifier|*
name|impl
parameter_list|,
name|GLuint
name|id
parameter_list|,
name|GLenum
name|target
parameter_list|)
member_init_list|:
name|RefCountObject
argument_list|(
name|id
argument_list|)
member_init_list|,
name|mTexture
argument_list|(
name|impl
argument_list|)
member_init_list|,
name|mUsage
argument_list|(
name|GL_NONE
argument_list|)
member_init_list|,
name|mImmutable
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mTarget
argument_list|(
name|target
argument_list|)
block|{ }
DECL|function|~Texture
name|Texture
operator|::
name|~
name|Texture
parameter_list|()
block|{
name|SafeDelete
argument_list|(
name|mTexture
argument_list|)
expr_stmt|;
block|}
DECL|function|getTarget
name|GLenum
name|Texture
operator|::
name|getTarget
parameter_list|()
specifier|const
block|{
return|return
name|mTarget
return|;
block|}
DECL|function|setUsage
name|void
name|Texture
operator|::
name|setUsage
parameter_list|(
name|GLenum
name|usage
parameter_list|)
block|{
name|mUsage
operator|=
name|usage
expr_stmt|;
name|getImplementation
argument_list|()
operator|->
name|setUsage
argument_list|(
name|usage
argument_list|)
expr_stmt|;
block|}
DECL|function|getSamplerStateWithNativeOffset
name|void
name|Texture
operator|::
name|getSamplerStateWithNativeOffset
parameter_list|(
name|SamplerState
modifier|*
name|sampler
parameter_list|)
block|{
operator|*
name|sampler
operator|=
name|mSamplerState
expr_stmt|;
comment|// Offset the effective base level by the texture storage's top level
name|rx
operator|::
name|TextureStorage
modifier|*
name|texture
init|=
name|getNativeTexture
argument_list|()
decl_stmt|;
name|int
name|topLevel
init|=
name|texture
condition|?
name|texture
operator|->
name|getTopLevel
argument_list|()
else|:
literal|0
decl_stmt|;
name|sampler
operator|->
name|baseLevel
operator|=
name|topLevel
operator|+
name|mSamplerState
operator|.
name|baseLevel
expr_stmt|;
block|}
DECL|function|getUsage
name|GLenum
name|Texture
operator|::
name|getUsage
parameter_list|()
specifier|const
block|{
return|return
name|mUsage
return|;
block|}
DECL|function|getBaseLevelWidth
name|GLint
name|Texture
operator|::
name|getBaseLevelWidth
parameter_list|()
specifier|const
block|{
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|baseImage
init|=
name|getBaseLevelImage
argument_list|()
decl_stmt|;
return|return
operator|(
name|baseImage
condition|?
name|baseImage
operator|->
name|getWidth
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
DECL|function|getBaseLevelHeight
name|GLint
name|Texture
operator|::
name|getBaseLevelHeight
parameter_list|()
specifier|const
block|{
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|baseImage
init|=
name|getBaseLevelImage
argument_list|()
decl_stmt|;
return|return
operator|(
name|baseImage
condition|?
name|baseImage
operator|->
name|getHeight
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
DECL|function|getBaseLevelDepth
name|GLint
name|Texture
operator|::
name|getBaseLevelDepth
parameter_list|()
specifier|const
block|{
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|baseImage
init|=
name|getBaseLevelImage
argument_list|()
decl_stmt|;
return|return
operator|(
name|baseImage
condition|?
name|baseImage
operator|->
name|getDepth
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
comment|// Note: "base level image" is loosely defined to be any image from the base level,
comment|// where in the base of 2D array textures and cube maps there are several. Don't use
comment|// the base level image for anything except querying texture format and size.
DECL|function|getBaseLevelInternalFormat
name|GLenum
name|Texture
operator|::
name|getBaseLevelInternalFormat
parameter_list|()
specifier|const
block|{
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|baseImage
init|=
name|getBaseLevelImage
argument_list|()
decl_stmt|;
return|return
operator|(
name|baseImage
condition|?
name|baseImage
operator|->
name|getInternalFormat
argument_list|()
else|:
name|GL_NONE
operator|)
return|;
block|}
DECL|function|getWidth
name|GLsizei
name|Texture
operator|::
name|getWidth
parameter_list|(
specifier|const
name|ImageIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|rx
operator|::
name|Image
modifier|*
name|image
init|=
name|mTexture
operator|->
name|getImage
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|image
operator|->
name|getWidth
argument_list|()
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|Texture
operator|::
name|getHeight
parameter_list|(
specifier|const
name|ImageIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|rx
operator|::
name|Image
modifier|*
name|image
init|=
name|mTexture
operator|->
name|getImage
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|image
operator|->
name|getHeight
argument_list|()
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|Texture
operator|::
name|getInternalFormat
parameter_list|(
specifier|const
name|ImageIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|rx
operator|::
name|Image
modifier|*
name|image
init|=
name|mTexture
operator|->
name|getImage
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|image
operator|->
name|getInternalFormat
argument_list|()
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|Texture
operator|::
name|getActualFormat
parameter_list|(
specifier|const
name|ImageIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|rx
operator|::
name|Image
modifier|*
name|image
init|=
name|mTexture
operator|->
name|getImage
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|image
operator|->
name|getActualFormat
argument_list|()
return|;
block|}
DECL|function|getNativeTexture
name|rx
operator|::
name|TextureStorage
modifier|*
name|Texture
operator|::
name|getNativeTexture
parameter_list|()
block|{
return|return
name|getImplementation
argument_list|()
operator|->
name|getNativeTexture
argument_list|()
return|;
block|}
DECL|function|generateMipmaps
name|void
name|Texture
operator|::
name|generateMipmaps
parameter_list|()
block|{
name|getImplementation
argument_list|()
operator|->
name|generateMipmaps
argument_list|()
expr_stmt|;
block|}
DECL|function|copySubImage
name|void
name|Texture
operator|::
name|copySubImage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|Framebuffer
modifier|*
name|source
parameter_list|)
block|{
name|getImplementation
argument_list|()
operator|->
name|copySubImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
DECL|function|getTextureSerial
name|unsigned
name|int
name|Texture
operator|::
name|getTextureSerial
parameter_list|()
block|{
name|rx
operator|::
name|TextureStorage
modifier|*
name|texture
init|=
name|getNativeTexture
argument_list|()
decl_stmt|;
return|return
name|texture
condition|?
name|texture
operator|->
name|getTextureSerial
argument_list|()
else|:
literal|0
return|;
block|}
DECL|function|isImmutable
name|bool
name|Texture
operator|::
name|isImmutable
parameter_list|()
specifier|const
block|{
return|return
name|mImmutable
return|;
block|}
DECL|function|immutableLevelCount
name|int
name|Texture
operator|::
name|immutableLevelCount
parameter_list|()
block|{
return|return
operator|(
name|mImmutable
condition|?
name|getNativeTexture
argument_list|()
operator|->
name|getLevelCount
argument_list|()
else|:
literal|0
operator|)
return|;
block|}
DECL|function|mipLevels
name|int
name|Texture
operator|::
name|mipLevels
parameter_list|()
specifier|const
block|{
return|return
name|log2
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|getBaseLevelWidth
argument_list|()
argument_list|,
name|getBaseLevelHeight
argument_list|()
argument_list|)
argument_list|,
name|getBaseLevelDepth
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|1
return|;
block|}
DECL|function|getBaseLevelImage
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|Texture
operator|::
name|getBaseLevelImage
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|getImplementation
argument_list|()
operator|->
name|getLayerCount
argument_list|(
literal|0
argument_list|)
operator|>
literal|0
condition|?
name|getImplementation
argument_list|()
operator|->
name|getImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
else|:
name|NULL
operator|)
return|;
block|}
DECL|function|Texture2D
name|Texture2D
operator|::
name|Texture2D
parameter_list|(
name|rx
operator|::
name|TextureImpl
modifier|*
name|impl
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|Texture
argument_list|(
name|impl
argument_list|,
name|id
argument_list|,
name|GL_TEXTURE_2D
argument_list|)
block|{
name|mSurface
operator|=
name|NULL
expr_stmt|;
block|}
DECL|function|~Texture2D
name|Texture2D
operator|::
name|~
name|Texture2D
parameter_list|()
block|{
if|if
condition|(
name|mSurface
condition|)
block|{
name|mSurface
operator|->
name|setBoundTexture
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|mSurface
operator|=
name|NULL
expr_stmt|;
block|}
block|}
DECL|function|getWidth
name|GLsizei
name|Texture2D
operator|::
name|getWidth
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getWidth
argument_list|()
return|;
else|else
return|return
literal|0
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|Texture2D
operator|::
name|getHeight
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getHeight
argument_list|()
return|;
else|else
return|return
literal|0
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|Texture2D
operator|::
name|getInternalFormat
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getInternalFormat
argument_list|()
return|;
else|else
return|return
name|GL_NONE
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|Texture2D
operator|::
name|getActualFormat
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getActualFormat
argument_list|()
return|;
else|else
return|return
name|GL_NONE
return|;
block|}
DECL|function|setImage
name|void
name|Texture2D
operator|::
name|setImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|releaseTexImage
argument_list|()
expr_stmt|;
name|mTexture
operator|->
name|setImage
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|bindTexImage
name|void
name|Texture2D
operator|::
name|bindTexImage
parameter_list|(
name|egl
operator|::
name|Surface
modifier|*
name|surface
parameter_list|)
block|{
name|releaseTexImage
argument_list|()
expr_stmt|;
name|mTexture
operator|->
name|bindTexImage
argument_list|(
name|surface
argument_list|)
expr_stmt|;
name|mSurface
operator|=
name|surface
expr_stmt|;
name|mSurface
operator|->
name|setBoundTexture
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|releaseTexImage
name|void
name|Texture2D
operator|::
name|releaseTexImage
parameter_list|()
block|{
if|if
condition|(
name|mSurface
condition|)
block|{
name|mSurface
operator|->
name|setBoundTexture
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|mSurface
operator|=
name|NULL
expr_stmt|;
name|mTexture
operator|->
name|releaseTexImage
argument_list|()
expr_stmt|;
block|}
block|}
DECL|function|setCompressedImage
name|void
name|Texture2D
operator|::
name|setCompressedImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|releaseTexImage
argument_list|()
expr_stmt|;
name|mTexture
operator|->
name|setCompressedImage
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|level
argument_list|,
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImage
name|void
name|Texture2D
operator|::
name|subImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImage
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImageCompressed
name|void
name|Texture2D
operator|::
name|subImageCompressed
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImageCompressed
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|copyImage
name|void
name|Texture2D
operator|::
name|copyImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|Framebuffer
modifier|*
name|source
parameter_list|)
block|{
name|releaseTexImage
argument_list|()
expr_stmt|;
name|mTexture
operator|->
name|copyImage
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|level
argument_list|,
name|format
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
DECL|function|storage
name|void
name|Texture2D
operator|::
name|storage
parameter_list|(
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|)
block|{
name|mImmutable
operator|=
literal|true
expr_stmt|;
name|mTexture
operator|->
name|storage
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Tests for 2D texture sampling completeness. [OpenGL ES 2.0.24] section 3.8.2 page 85.
DECL|function|isSamplerComplete
name|bool
name|Texture2D
operator|::
name|isSamplerComplete
parameter_list|(
specifier|const
name|SamplerState
modifier|&
name|samplerState
parameter_list|,
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|,
name|int
name|clientVersion
parameter_list|)
specifier|const
block|{
name|GLsizei
name|width
init|=
name|getBaseLevelWidth
argument_list|()
decl_stmt|;
name|GLsizei
name|height
init|=
name|getBaseLevelHeight
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|<=
literal|0
operator|||
name|height
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|textureCaps
operator|.
name|get
argument_list|(
name|getInternalFormat
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|filterable
operator|&&
operator|!
name|IsPointSampled
argument_list|(
name|samplerState
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|bool
name|npotSupport
init|=
name|extensions
operator|.
name|textureNPOT
decl_stmt|;
if|if
condition|(
operator|!
name|npotSupport
condition|)
block|{
if|if
condition|(
operator|(
name|samplerState
operator|.
name|wrapS
operator|!=
name|GL_CLAMP_TO_EDGE
operator|&&
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|width
argument_list|)
operator|)
operator|||
operator|(
name|samplerState
operator|.
name|wrapT
operator|!=
name|GL_CLAMP_TO_EDGE
operator|&&
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|height
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|IsMipmapFiltered
argument_list|(
name|samplerState
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|npotSupport
condition|)
block|{
if|if
condition|(
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|width
argument_list|)
operator|||
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|height
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|isMipmapComplete
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// OpenGLES 3.0.2 spec section 3.8.13 states that a texture is not mipmap complete if:
comment|// The internalformat specified for the texture arrays is a sized internal depth or
comment|// depth and stencil format (see table 3.13), the value of TEXTURE_COMPARE_-
comment|// MODE is NONE, and either the magnification filter is not NEAREST or the mini-
comment|// fication filter is neither NEAREST nor NEAREST_MIPMAP_NEAREST.
specifier|const
name|gl
operator|::
name|InternalFormat
modifier|&
name|formatInfo
init|=
name|gl
operator|::
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatInfo
operator|.
name|depthBits
operator|>
literal|0
operator|&&
name|clientVersion
operator|>
literal|2
condition|)
block|{
if|if
condition|(
name|samplerState
operator|.
name|compareMode
operator|==
name|GL_NONE
condition|)
block|{
if|if
condition|(
operator|(
name|samplerState
operator|.
name|minFilter
operator|!=
name|GL_NEAREST
operator|&&
name|samplerState
operator|.
name|minFilter
operator|!=
name|GL_NEAREST_MIPMAP_NEAREST
operator|)
operator|||
name|samplerState
operator|.
name|magFilter
operator|!=
name|GL_NEAREST
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|isCompressed
name|bool
name|Texture2D
operator|::
name|isCompressed
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|(
name|level
argument_list|)
argument_list|)
operator|.
name|compressed
return|;
block|}
DECL|function|isDepth
name|bool
name|Texture2D
operator|::
name|isDepth
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|(
name|level
argument_list|)
argument_list|)
operator|.
name|depthBits
operator|>
literal|0
return|;
block|}
DECL|function|generateMipmaps
name|void
name|Texture2D
operator|::
name|generateMipmaps
parameter_list|()
block|{
name|releaseTexImage
argument_list|()
expr_stmt|;
name|mTexture
operator|->
name|generateMipmaps
argument_list|()
expr_stmt|;
block|}
comment|// Tests for 2D texture (mipmap) completeness. [OpenGL ES 2.0.24] section 3.7.10 page 81.
DECL|function|isMipmapComplete
name|bool
name|Texture2D
operator|::
name|isMipmapComplete
parameter_list|()
specifier|const
block|{
name|int
name|levelCount
init|=
name|mipLevels
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|level
init|=
literal|0
init|;
name|level
operator|<
name|levelCount
condition|;
name|level
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|isLevelComplete
argument_list|(
name|level
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|isLevelComplete
name|bool
name|Texture2D
operator|::
name|isLevelComplete
parameter_list|(
name|int
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|isImmutable
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|baseImage
init|=
name|getBaseLevelImage
argument_list|()
decl_stmt|;
name|GLsizei
name|width
init|=
name|baseImage
operator|->
name|getWidth
argument_list|()
decl_stmt|;
name|GLsizei
name|height
init|=
name|baseImage
operator|->
name|getHeight
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|<=
literal|0
operator|||
name|height
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// The base image level is complete if the width and height are positive
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|ASSERT
argument_list|(
name|level
operator|>=
literal|1
operator|&&
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|&&
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|rx
operator|::
name|Image
modifier|*
name|image
init|=
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|->
name|getInternalFormat
argument_list|()
operator|!=
name|baseImage
operator|->
name|getInternalFormat
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|image
operator|->
name|getWidth
argument_list|()
operator|!=
name|std
operator|::
name|max
argument_list|(
literal|1
argument_list|,
name|width
operator|>>
name|level
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|image
operator|->
name|getHeight
argument_list|()
operator|!=
name|std
operator|::
name|max
argument_list|(
literal|1
argument_list|,
name|height
operator|>>
name|level
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|TextureCubeMap
name|TextureCubeMap
operator|::
name|TextureCubeMap
parameter_list|(
name|rx
operator|::
name|TextureImpl
modifier|*
name|impl
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|Texture
argument_list|(
name|impl
argument_list|,
name|id
argument_list|,
name|GL_TEXTURE_CUBE_MAP
argument_list|)
block|{ }
DECL|function|~TextureCubeMap
name|TextureCubeMap
operator|::
name|~
name|TextureCubeMap
parameter_list|()
block|{ }
DECL|function|getWidth
name|GLsizei
name|TextureCubeMap
operator|::
name|getWidth
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
name|targetToLayerIndex
argument_list|(
name|target
argument_list|)
argument_list|)
operator|->
name|getWidth
argument_list|()
return|;
else|else
return|return
literal|0
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|TextureCubeMap
operator|::
name|getHeight
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
name|targetToLayerIndex
argument_list|(
name|target
argument_list|)
argument_list|)
operator|->
name|getHeight
argument_list|()
return|;
else|else
return|return
literal|0
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|TextureCubeMap
operator|::
name|getInternalFormat
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
name|targetToLayerIndex
argument_list|(
name|target
argument_list|)
argument_list|)
operator|->
name|getInternalFormat
argument_list|()
return|;
else|else
return|return
name|GL_NONE
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|TextureCubeMap
operator|::
name|getActualFormat
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
condition|)
return|return
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
name|targetToLayerIndex
argument_list|(
name|target
argument_list|)
argument_list|)
operator|->
name|getActualFormat
argument_list|()
return|;
else|else
return|return
name|GL_NONE
return|;
block|}
DECL|function|setImagePosX
name|void
name|TextureCubeMap
operator|::
name|setImagePosX
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setImageNegX
name|void
name|TextureCubeMap
operator|::
name|setImageNegX
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setImagePosY
name|void
name|TextureCubeMap
operator|::
name|setImagePosY
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setImageNegY
name|void
name|TextureCubeMap
operator|::
name|setImageNegY
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setImagePosZ
name|void
name|TextureCubeMap
operator|::
name|setImagePosZ
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setImageNegZ
name|void
name|TextureCubeMap
operator|::
name|setImageNegZ
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setCompressedImage
name|void
name|TextureCubeMap
operator|::
name|setCompressedImage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setCompressedImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImage
name|void
name|TextureCubeMap
operator|::
name|subImage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImageCompressed
name|void
name|TextureCubeMap
operator|::
name|subImageCompressed
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImageCompressed
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|1
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
comment|// Tests for cube texture completeness. [OpenGL ES 2.0.24] section 3.7.10 page 81.
DECL|function|isCubeComplete
name|bool
name|TextureCubeMap
operator|::
name|isCubeComplete
parameter_list|()
specifier|const
block|{
name|int
name|baseWidth
init|=
name|getBaseLevelWidth
argument_list|()
decl_stmt|;
name|int
name|baseHeight
init|=
name|getBaseLevelHeight
argument_list|()
decl_stmt|;
name|GLenum
name|baseFormat
init|=
name|getBaseLevelInternalFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseWidth
operator|<=
literal|0
operator|||
name|baseWidth
operator|!=
name|baseHeight
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|faceIndex
init|=
literal|1
init|;
name|faceIndex
operator|<
literal|6
condition|;
name|faceIndex
operator|++
control|)
block|{
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|faceBaseImage
init|=
name|mTexture
operator|->
name|getImage
argument_list|(
literal|0
argument_list|,
name|faceIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|faceBaseImage
operator|->
name|getWidth
argument_list|()
operator|!=
name|baseWidth
operator|||
name|faceBaseImage
operator|->
name|getHeight
argument_list|()
operator|!=
name|baseHeight
operator|||
name|faceBaseImage
operator|->
name|getInternalFormat
argument_list|()
operator|!=
name|baseFormat
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|isCompressed
name|bool
name|TextureCubeMap
operator|::
name|isCompressed
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
argument_list|)
operator|.
name|compressed
return|;
block|}
DECL|function|isDepth
name|bool
name|TextureCubeMap
operator|::
name|isDepth
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|(
name|target
argument_list|,
name|level
argument_list|)
argument_list|)
operator|.
name|depthBits
operator|>
literal|0
return|;
block|}
DECL|function|copyImage
name|void
name|TextureCubeMap
operator|::
name|copyImage
parameter_list|(
name|GLenum
name|target
parameter_list|,
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLint
name|x
parameter_list|,
name|GLint
name|y
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|Framebuffer
modifier|*
name|source
parameter_list|)
block|{
name|mTexture
operator|->
name|copyImage
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|format
argument_list|,
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
DECL|function|storage
name|void
name|TextureCubeMap
operator|::
name|storage
parameter_list|(
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|size
parameter_list|)
block|{
name|mImmutable
operator|=
literal|true
expr_stmt|;
name|mTexture
operator|->
name|storage
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Tests for texture sampling completeness
DECL|function|isSamplerComplete
name|bool
name|TextureCubeMap
operator|::
name|isSamplerComplete
parameter_list|(
specifier|const
name|SamplerState
modifier|&
name|samplerState
parameter_list|,
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|,
name|int
name|clientVersion
parameter_list|)
specifier|const
block|{
name|int
name|size
init|=
name|getBaseLevelWidth
argument_list|()
decl_stmt|;
name|bool
name|mipmapping
init|=
name|IsMipmapFiltered
argument_list|(
name|samplerState
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|textureCaps
operator|.
name|get
argument_list|(
name|getInternalFormat
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|filterable
operator|&&
operator|!
name|IsPointSampled
argument_list|(
name|samplerState
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|gl
operator|::
name|isPow2
argument_list|(
name|size
argument_list|)
operator|&&
operator|!
name|extensions
operator|.
name|textureNPOT
condition|)
block|{
if|if
condition|(
name|samplerState
operator|.
name|wrapS
operator|!=
name|GL_CLAMP_TO_EDGE
operator|||
name|samplerState
operator|.
name|wrapT
operator|!=
name|GL_CLAMP_TO_EDGE
operator|||
name|mipmapping
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|mipmapping
condition|)
block|{
if|if
condition|(
operator|!
name|isCubeComplete
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isMipmapComplete
argument_list|()
condition|)
comment|// Also tests for isCubeComplete()
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|targetToLayerIndex
name|int
name|TextureCubeMap
operator|::
name|targetToLayerIndex
parameter_list|(
name|GLenum
name|target
parameter_list|)
block|{
name|META_ASSERT
argument_list|(
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
operator|-
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|==
literal|1
argument_list|)
expr_stmt|;
name|META_ASSERT
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
operator|-
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|==
literal|2
argument_list|)
expr_stmt|;
name|META_ASSERT
argument_list|(
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
operator|-
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|==
literal|3
argument_list|)
expr_stmt|;
name|META_ASSERT
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
operator|-
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|==
literal|4
argument_list|)
expr_stmt|;
name|META_ASSERT
argument_list|(
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
operator|-
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|==
literal|5
argument_list|)
expr_stmt|;
return|return
name|target
operator|-
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
return|;
block|}
DECL|function|layerIndexToTarget
name|GLenum
name|TextureCubeMap
operator|::
name|layerIndexToTarget
parameter_list|(
name|GLint
name|layer
parameter_list|)
block|{
name|META_ASSERT
argument_list|(
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_X
operator|-
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|==
literal|1
argument_list|)
expr_stmt|;
name|META_ASSERT
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Y
operator|-
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|==
literal|2
argument_list|)
expr_stmt|;
name|META_ASSERT
argument_list|(
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
operator|-
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|==
literal|3
argument_list|)
expr_stmt|;
name|META_ASSERT
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_Z
operator|-
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|==
literal|4
argument_list|)
expr_stmt|;
name|META_ASSERT
argument_list|(
name|GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
operator|-
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|==
literal|5
argument_list|)
expr_stmt|;
return|return
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|+
name|layer
return|;
block|}
DECL|function|isMipmapComplete
name|bool
name|TextureCubeMap
operator|::
name|isMipmapComplete
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|isImmutable
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|isCubeComplete
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|levelCount
init|=
name|mipLevels
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|face
init|=
literal|0
init|;
name|face
operator|<
literal|6
condition|;
name|face
operator|++
control|)
block|{
for|for
control|(
name|int
name|level
init|=
literal|1
init|;
name|level
operator|<
name|levelCount
condition|;
name|level
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|isFaceLevelComplete
argument_list|(
name|face
argument_list|,
name|level
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|isFaceLevelComplete
name|bool
name|TextureCubeMap
operator|::
name|isFaceLevelComplete
parameter_list|(
name|int
name|faceIndex
parameter_list|,
name|int
name|level
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|level
operator|>=
literal|0
operator|&&
name|faceIndex
operator|<
literal|6
operator|&&
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|&&
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
name|faceIndex
argument_list|)
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|isImmutable
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|int
name|baseSize
init|=
name|getBaseLevelWidth
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseSize
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// "isCubeComplete" checks for base level completeness and we must call that
comment|// to determine if any face at level 0 is complete. We omit that check here
comment|// to avoid re-checking cube-completeness for every face at level 0.
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Check that non-zero levels are consistent with the base level.
specifier|const
name|rx
operator|::
name|Image
modifier|*
name|faceLevelImage
init|=
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
name|faceIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|faceLevelImage
operator|->
name|getInternalFormat
argument_list|()
operator|!=
name|getBaseLevelInternalFormat
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|faceLevelImage
operator|->
name|getWidth
argument_list|()
operator|!=
name|std
operator|::
name|max
argument_list|(
literal|1
argument_list|,
name|baseSize
operator|>>
name|level
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|Texture3D
name|Texture3D
operator|::
name|Texture3D
parameter_list|(
name|rx
operator|::
name|TextureImpl
modifier|*
name|impl
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|Texture
argument_list|(
name|impl
argument_list|,
name|id
argument_list|,
name|GL_TEXTURE_3D
argument_list|)
block|{ }
DECL|function|~Texture3D
name|Texture3D
operator|::
name|~
name|Texture3D
parameter_list|()
block|{ }
DECL|function|getWidth
name|GLsizei
name|Texture3D
operator|::
name|getWidth
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getWidth
argument_list|()
else|:
literal|0
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|Texture3D
operator|::
name|getHeight
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getHeight
argument_list|()
else|:
literal|0
return|;
block|}
DECL|function|getDepth
name|GLsizei
name|Texture3D
operator|::
name|getDepth
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getDepth
argument_list|()
else|:
literal|0
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|Texture3D
operator|::
name|getInternalFormat
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getInternalFormat
argument_list|()
else|:
name|GL_NONE
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|Texture3D
operator|::
name|getActualFormat
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getActualFormat
argument_list|()
else|:
name|GL_NONE
return|;
block|}
DECL|function|isCompressed
name|bool
name|Texture3D
operator|::
name|isCompressed
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|(
name|level
argument_list|)
argument_list|)
operator|.
name|compressed
return|;
block|}
DECL|function|isDepth
name|bool
name|Texture3D
operator|::
name|isDepth
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|(
name|level
argument_list|)
argument_list|)
operator|.
name|depthBits
operator|>
literal|0
return|;
block|}
DECL|function|setImage
name|void
name|Texture3D
operator|::
name|setImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setCompressedImage
name|void
name|Texture3D
operator|::
name|setCompressedImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setCompressedImage
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
name|level
argument_list|,
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImage
name|void
name|Texture3D
operator|::
name|subImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImage
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImageCompressed
name|void
name|Texture3D
operator|::
name|subImageCompressed
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImageCompressed
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|storage
name|void
name|Texture3D
operator|::
name|storage
parameter_list|(
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
block|{
name|mImmutable
operator|=
literal|true
expr_stmt|;
name|mTexture
operator|->
name|storage
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
DECL|function|isSamplerComplete
name|bool
name|Texture3D
operator|::
name|isSamplerComplete
parameter_list|(
specifier|const
name|SamplerState
modifier|&
name|samplerState
parameter_list|,
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|,
name|int
name|clientVersion
parameter_list|)
specifier|const
block|{
name|GLsizei
name|width
init|=
name|getBaseLevelWidth
argument_list|()
decl_stmt|;
name|GLsizei
name|height
init|=
name|getBaseLevelHeight
argument_list|()
decl_stmt|;
name|GLsizei
name|depth
init|=
name|getBaseLevelDepth
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|<=
literal|0
operator|||
name|height
operator|<=
literal|0
operator|||
name|depth
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|textureCaps
operator|.
name|get
argument_list|(
name|getInternalFormat
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|filterable
operator|&&
operator|!
name|IsPointSampled
argument_list|(
name|samplerState
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|IsMipmapFiltered
argument_list|(
name|samplerState
argument_list|)
operator|&&
operator|!
name|isMipmapComplete
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|isMipmapComplete
name|bool
name|Texture3D
operator|::
name|isMipmapComplete
parameter_list|()
specifier|const
block|{
name|int
name|levelCount
init|=
name|mipLevels
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|level
init|=
literal|0
init|;
name|level
operator|<
name|levelCount
condition|;
name|level
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|isLevelComplete
argument_list|(
name|level
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|isLevelComplete
name|bool
name|Texture3D
operator|::
name|isLevelComplete
parameter_list|(
name|int
name|level
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|level
operator|>=
literal|0
operator|&&
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|&&
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|isImmutable
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|GLsizei
name|width
init|=
name|getBaseLevelWidth
argument_list|()
decl_stmt|;
name|GLsizei
name|height
init|=
name|getBaseLevelHeight
argument_list|()
decl_stmt|;
name|GLsizei
name|depth
init|=
name|getBaseLevelDepth
argument_list|()
decl_stmt|;
if|if
condition|(
name|width
operator|<=
literal|0
operator|||
name|height
operator|<=
literal|0
operator|||
name|depth
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|rx
operator|::
name|Image
modifier|*
name|levelImage
init|=
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|levelImage
operator|->
name|getInternalFormat
argument_list|()
operator|!=
name|getBaseLevelInternalFormat
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|levelImage
operator|->
name|getWidth
argument_list|()
operator|!=
name|std
operator|::
name|max
argument_list|(
literal|1
argument_list|,
name|width
operator|>>
name|level
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|levelImage
operator|->
name|getHeight
argument_list|()
operator|!=
name|std
operator|::
name|max
argument_list|(
literal|1
argument_list|,
name|height
operator|>>
name|level
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|levelImage
operator|->
name|getDepth
argument_list|()
operator|!=
name|std
operator|::
name|max
argument_list|(
literal|1
argument_list|,
name|depth
operator|>>
name|level
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|Texture2DArray
name|Texture2DArray
operator|::
name|Texture2DArray
parameter_list|(
name|rx
operator|::
name|TextureImpl
modifier|*
name|impl
parameter_list|,
name|GLuint
name|id
parameter_list|)
member_init_list|:
name|Texture
argument_list|(
name|impl
argument_list|,
name|id
argument_list|,
name|GL_TEXTURE_2D_ARRAY
argument_list|)
block|{ }
DECL|function|~Texture2DArray
name|Texture2DArray
operator|::
name|~
name|Texture2DArray
parameter_list|()
block|{ }
DECL|function|getWidth
name|GLsizei
name|Texture2DArray
operator|::
name|getWidth
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
argument_list|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|&&
name|mTexture
operator|->
name|getLayerCount
operator|(
name|level
operator|)
argument_list|>
literal|0
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getWidth
argument_list|()
else|:
literal|0
return|;
block|}
DECL|function|getHeight
name|GLsizei
name|Texture2DArray
operator|::
name|getHeight
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
argument_list|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|&&
name|mTexture
operator|->
name|getLayerCount
operator|(
name|level
operator|)
argument_list|>
literal|0
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getHeight
argument_list|()
else|:
literal|0
return|;
block|}
DECL|function|getLayers
name|GLsizei
name|Texture2DArray
operator|::
name|getLayers
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|)
condition|?
name|mTexture
operator|->
name|getLayerCount
argument_list|(
name|level
argument_list|)
else|:
literal|0
return|;
block|}
DECL|function|getInternalFormat
name|GLenum
name|Texture2DArray
operator|::
name|getInternalFormat
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
argument_list|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|&&
name|mTexture
operator|->
name|getLayerCount
operator|(
name|level
operator|)
argument_list|>
literal|0
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getInternalFormat
argument_list|()
else|:
name|GL_NONE
return|;
block|}
DECL|function|getActualFormat
name|GLenum
name|Texture2DArray
operator|::
name|getActualFormat
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|level
argument_list|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
operator|&&
name|mTexture
operator|->
name|getLayerCount
operator|(
name|level
operator|)
argument_list|>
literal|0
operator|)
condition|?
name|mTexture
operator|->
name|getImage
argument_list|(
name|level
argument_list|,
literal|0
argument_list|)
operator|->
name|getActualFormat
argument_list|()
else|:
name|GL_NONE
return|;
block|}
DECL|function|isCompressed
name|bool
name|Texture2DArray
operator|::
name|isCompressed
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|(
name|level
argument_list|)
argument_list|)
operator|.
name|compressed
return|;
block|}
DECL|function|isDepth
name|bool
name|Texture2DArray
operator|::
name|isDepth
parameter_list|(
name|GLint
name|level
parameter_list|)
specifier|const
block|{
return|return
name|GetInternalFormatInfo
argument_list|(
name|getInternalFormat
argument_list|(
name|level
argument_list|)
argument_list|)
operator|.
name|depthBits
operator|>
literal|0
return|;
block|}
DECL|function|setImage
name|void
name|Texture2DArray
operator|::
name|setImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|internalFormat
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setImage
argument_list|(
name|GL_TEXTURE_2D_ARRAY
argument_list|,
name|level
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|internalFormat
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|setCompressedImage
name|void
name|Texture2DArray
operator|::
name|setCompressedImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|setCompressedImage
argument_list|(
name|GL_TEXTURE_2D_ARRAY
argument_list|,
name|level
argument_list|,
name|format
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImage
name|void
name|Texture2DArray
operator|::
name|subImage
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLenum
name|type
parameter_list|,
specifier|const
name|PixelUnpackState
modifier|&
name|unpack
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImage
argument_list|(
name|GL_TEXTURE_2D_ARRAY
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|type
argument_list|,
name|unpack
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|subImageCompressed
name|void
name|Texture2DArray
operator|::
name|subImageCompressed
parameter_list|(
name|GLint
name|level
parameter_list|,
name|GLint
name|xoffset
parameter_list|,
name|GLint
name|yoffset
parameter_list|,
name|GLint
name|zoffset
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|,
name|GLenum
name|format
parameter_list|,
name|GLsizei
name|imageSize
parameter_list|,
specifier|const
name|void
modifier|*
name|pixels
parameter_list|)
block|{
name|mTexture
operator|->
name|subImageCompressed
argument_list|(
name|GL_TEXTURE_2D_ARRAY
argument_list|,
name|level
argument_list|,
name|xoffset
argument_list|,
name|yoffset
argument_list|,
name|zoffset
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
name|format
argument_list|,
name|imageSize
argument_list|,
name|pixels
argument_list|)
expr_stmt|;
block|}
DECL|function|storage
name|void
name|Texture2DArray
operator|::
name|storage
parameter_list|(
name|GLsizei
name|levels
parameter_list|,
name|GLenum
name|internalformat
parameter_list|,
name|GLsizei
name|width
parameter_list|,
name|GLsizei
name|height
parameter_list|,
name|GLsizei
name|depth
parameter_list|)
block|{
name|mImmutable
operator|=
literal|true
expr_stmt|;
name|mTexture
operator|->
name|storage
argument_list|(
name|GL_TEXTURE_2D_ARRAY
argument_list|,
name|levels
argument_list|,
name|internalformat
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
DECL|function|isSamplerComplete
name|bool
name|Texture2DArray
operator|::
name|isSamplerComplete
parameter_list|(
specifier|const
name|SamplerState
modifier|&
name|samplerState
parameter_list|,
specifier|const
name|TextureCapsMap
modifier|&
name|textureCaps
parameter_list|,
specifier|const
name|Extensions
modifier|&
name|extensions
parameter_list|,
name|int
name|clientVersion
parameter_list|)
specifier|const
block|{
name|GLsizei
name|width
init|=
name|getBaseLevelWidth
argument_list|()
decl_stmt|;
name|GLsizei
name|height
init|=
name|getBaseLevelHeight
argument_list|()
decl_stmt|;
name|GLsizei
name|depth
init|=
name|getLayers
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|width
operator|<=
literal|0
operator|||
name|height
operator|<=
literal|0
operator|||
name|depth
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|textureCaps
operator|.
name|get
argument_list|(
name|getBaseLevelInternalFormat
argument_list|()
argument_list|)
operator|.
name|filterable
operator|&&
operator|!
name|IsPointSampled
argument_list|(
name|samplerState
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|IsMipmapFiltered
argument_list|(
name|samplerState
argument_list|)
operator|&&
operator|!
name|isMipmapComplete
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|isMipmapComplete
name|bool
name|Texture2DArray
operator|::
name|isMipmapComplete
parameter_list|()
specifier|const
block|{
name|int
name|levelCount
init|=
name|mipLevels
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|level
init|=
literal|1
init|;
name|level
operator|<
name|levelCount
condition|;
name|level
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|isLevelComplete
argument_list|(
name|level
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|function|isLevelComplete
name|bool
name|Texture2DArray
operator|::
name|isLevelComplete
parameter_list|(
name|int
name|level
parameter_list|)
specifier|const
block|{
name|ASSERT
argument_list|(
name|level
operator|>=
literal|0
operator|&&
name|level
operator|<
name|IMPLEMENTATION_MAX_TEXTURE_LEVELS
argument_list|)
expr_stmt|;
if|if
condition|(
name|isImmutable
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|GLsizei
name|width
init|=
name|getBaseLevelWidth
argument_list|()
decl_stmt|;
name|GLsizei
name|height
init|=
name|getBaseLevelHeight
argument_list|()
decl_stmt|;
name|GLsizei
name|layers
init|=
name|getLayers
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|width
operator|<=
literal|0
operator|||
name|height
operator|<=
literal|0
operator|||
name|layers
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|getInternalFormat
argument_list|(
name|level
argument_list|)
operator|!=
name|getInternalFormat
argument_list|(
literal|0
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getWidth
argument_list|(
name|level
argument_list|)
operator|!=
name|std
operator|::
name|max
argument_list|(
literal|1
argument_list|,
name|width
operator|>>
name|level
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getHeight
argument_list|(
name|level
argument_list|)
operator|!=
name|std
operator|::
name|max
argument_list|(
literal|1
argument_list|,
name|height
operator|>>
name|level
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getLayers
argument_list|(
name|level
argument_list|)
operator|!=
name|layers
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_namespace
end_unit
