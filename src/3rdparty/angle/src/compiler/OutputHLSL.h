begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|COMPILER_OUTPUTHLSL_H_
end_ifndef
begin_define
DECL|macro|COMPILER_OUTPUTHLSL_H_
define|#
directive|define
name|COMPILER_OUTPUTHLSL_H_
end_define
begin_include
include|#
directive|include
file|<list>
end_include
begin_include
include|#
directive|include
file|<set>
end_include
begin_include
include|#
directive|include
file|"compiler/intermediate.h"
end_include
begin_include
include|#
directive|include
file|"compiler/ParseHelper.h"
end_include
begin_decl_stmt
name|namespace
name|sh
block|{
name|class
name|UnfoldShortCircuit
decl_stmt|;
name|class
name|OutputHLSL
range|:
name|public
name|TIntermTraverser
block|{
name|public
operator|:
name|explicit
name|OutputHLSL
argument_list|(
name|TParseContext
operator|&
name|context
argument_list|)
block|;
operator|~
name|OutputHLSL
argument_list|()
block|;
name|void
name|output
argument_list|()
block|;
name|TInfoSinkBase
operator|&
name|getBodyStream
argument_list|()
block|;
name|TString
name|typeString
argument_list|(
specifier|const
name|TType
operator|&
name|type
argument_list|)
block|;
specifier|static
name|TString
name|qualifierString
argument_list|(
argument|TQualifier qualifier
argument_list|)
block|;
specifier|static
name|TString
name|arrayString
argument_list|(
specifier|const
name|TType
operator|&
name|type
argument_list|)
block|;
specifier|static
name|TString
name|initializer
argument_list|(
specifier|const
name|TType
operator|&
name|type
argument_list|)
block|;
specifier|static
name|TString
name|decorate
argument_list|(
specifier|const
name|TString
operator|&
name|string
argument_list|)
block|;
comment|// Prepends an underscore to avoid naming clashes
specifier|static
name|TString
name|decorateUniform
argument_list|(
specifier|const
name|TString
operator|&
name|string
argument_list|,
specifier|const
name|TType
operator|&
name|type
argument_list|)
block|;
specifier|static
name|TString
name|decorateField
argument_list|(
specifier|const
name|TString
operator|&
name|string
argument_list|,
specifier|const
name|TType
operator|&
name|structure
argument_list|)
block|;
name|protected
operator|:
name|void
name|header
argument_list|()
block|;
comment|// Visit AST nodes and output their code to the body stream
name|void
name|visitSymbol
argument_list|(
name|TIntermSymbol
operator|*
argument_list|)
block|;
name|void
name|visitConstantUnion
argument_list|(
name|TIntermConstantUnion
operator|*
argument_list|)
block|;
name|bool
name|visitBinary
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermBinary*
argument_list|)
block|;
name|bool
name|visitUnary
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermUnary*
argument_list|)
block|;
name|bool
name|visitSelection
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermSelection*
argument_list|)
block|;
name|bool
name|visitAggregate
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermAggregate*
argument_list|)
block|;
name|bool
name|visitLoop
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermLoop*
argument_list|)
block|;
name|bool
name|visitBranch
argument_list|(
argument|Visit visit
argument_list|,
argument|TIntermBranch*
argument_list|)
block|;
name|void
name|traverseStatements
argument_list|(
name|TIntermNode
operator|*
name|node
argument_list|)
block|;
name|bool
name|isSingleStatement
argument_list|(
name|TIntermNode
operator|*
name|node
argument_list|)
block|;
name|bool
name|handleExcessiveLoop
argument_list|(
name|TIntermLoop
operator|*
name|node
argument_list|)
block|;
name|void
name|outputTriplet
argument_list|(
argument|Visit visit
argument_list|,
argument|const TString&preString
argument_list|,
argument|const TString&inString
argument_list|,
argument|const TString&postString
argument_list|)
block|;
name|void
name|outputLineDirective
argument_list|(
argument|int line
argument_list|)
block|;
name|TString
name|argumentString
argument_list|(
specifier|const
name|TIntermSymbol
operator|*
name|symbol
argument_list|)
block|;
name|int
name|vectorSize
argument_list|(
argument|const TType&type
argument_list|)
specifier|const
block|;
name|void
name|addConstructor
argument_list|(
specifier|const
name|TType
operator|&
name|type
argument_list|,
specifier|const
name|TString
operator|&
name|name
argument_list|,
specifier|const
name|TIntermSequence
operator|*
name|parameters
argument_list|)
block|;
specifier|const
name|ConstantUnion
operator|*
name|writeConstantUnion
argument_list|(
specifier|const
name|TType
operator|&
name|type
argument_list|,
specifier|const
name|ConstantUnion
operator|*
name|constUnion
argument_list|)
block|;
name|TString
name|scopeString
argument_list|(
argument|unsigned int depthLimit
argument_list|)
block|;
name|TString
name|scopedStruct
argument_list|(
specifier|const
name|TString
operator|&
name|typeName
argument_list|)
block|;
name|TString
name|structLookup
argument_list|(
specifier|const
name|TString
operator|&
name|typeName
argument_list|)
block|;
name|TParseContext
operator|&
name|mContext
block|;
name|UnfoldShortCircuit
operator|*
name|mUnfoldShortCircuit
block|;
name|bool
name|mInsideFunction
block|;
comment|// Output streams
name|TInfoSinkBase
name|mHeader
block|;
name|TInfoSinkBase
name|mBody
block|;
name|TInfoSinkBase
name|mFooter
block|;
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>
name|mReferencedUniforms
block|;
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>
name|mReferencedAttributes
block|;
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>
name|mReferencedVaryings
block|;
comment|// Parameters determining what goes in the header output
name|bool
name|mUsesTexture2D
block|;
name|bool
name|mUsesTexture2D_bias
block|;
name|bool
name|mUsesTexture2DLod
block|;
name|bool
name|mUsesTexture2DProj
block|;
name|bool
name|mUsesTexture2DProj_bias
block|;
name|bool
name|mUsesTexture2DProjLod
block|;
name|bool
name|mUsesTextureCube
block|;
name|bool
name|mUsesTextureCube_bias
block|;
name|bool
name|mUsesTextureCubeLod
block|;
name|bool
name|mUsesTexture2DLod0
block|;
name|bool
name|mUsesTexture2DLod0_bias
block|;
name|bool
name|mUsesTexture2DProjLod0
block|;
name|bool
name|mUsesTexture2DProjLod0_bias
block|;
name|bool
name|mUsesTextureCubeLod0
block|;
name|bool
name|mUsesTextureCubeLod0_bias
block|;
name|bool
name|mUsesDepthRange
block|;
name|bool
name|mUsesFragCoord
block|;
name|bool
name|mUsesPointCoord
block|;
name|bool
name|mUsesFrontFacing
block|;
name|bool
name|mUsesPointSize
block|;
name|bool
name|mUsesXor
block|;
name|bool
name|mUsesMod1
block|;
name|bool
name|mUsesMod2v
block|;
name|bool
name|mUsesMod2f
block|;
name|bool
name|mUsesMod3v
block|;
name|bool
name|mUsesMod3f
block|;
name|bool
name|mUsesMod4v
block|;
name|bool
name|mUsesMod4f
block|;
name|bool
name|mUsesFaceforward1
block|;
name|bool
name|mUsesFaceforward2
block|;
name|bool
name|mUsesFaceforward3
block|;
name|bool
name|mUsesFaceforward4
block|;
name|bool
name|mUsesEqualMat2
block|;
name|bool
name|mUsesEqualMat3
block|;
name|bool
name|mUsesEqualMat4
block|;
name|bool
name|mUsesEqualVec2
block|;
name|bool
name|mUsesEqualVec3
block|;
name|bool
name|mUsesEqualVec4
block|;
name|bool
name|mUsesEqualIVec2
block|;
name|bool
name|mUsesEqualIVec3
block|;
name|bool
name|mUsesEqualIVec4
block|;
name|bool
name|mUsesEqualBVec2
block|;
name|bool
name|mUsesEqualBVec3
block|;
name|bool
name|mUsesEqualBVec4
block|;
name|bool
name|mUsesAtan2_1
block|;
name|bool
name|mUsesAtan2_2
block|;
name|bool
name|mUsesAtan2_3
block|;
name|bool
name|mUsesAtan2_4
block|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|TString
operator|>
name|Constructors
expr_stmt|;
name|Constructors
name|mConstructors
decl_stmt|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|TString
operator|>
name|StructNames
expr_stmt|;
name|StructNames
name|mStructNames
decl_stmt|;
typedef|typedef
name|std
operator|::
name|list
operator|<
name|TString
operator|>
name|StructDeclarations
expr_stmt|;
name|StructDeclarations
name|mStructDeclarations
decl_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|int
operator|>
name|ScopeBracket
expr_stmt|;
name|ScopeBracket
name|mScopeBracket
decl_stmt|;
name|unsigned
name|int
name|mScopeDepth
decl_stmt|;
name|int
name|mUniqueIndex
decl_stmt|;
comment|// For creating unique names
name|bool
name|mContainsLoopDiscontinuity
decl_stmt|;
name|bool
name|mOutputLod0Function
decl_stmt|;
name|bool
name|mInsideDiscontinuousLoop
decl_stmt|;
name|TIntermSymbol
modifier|*
name|mExcessiveLoopIndex
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
unit|}
endif|#
directive|endif
end_endif
begin_comment
comment|// COMPILER_OUTPUTHLSL_H_
end_comment
end_unit
