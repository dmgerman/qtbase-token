begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2011 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Implement the top-level of interface to the compiler,
end_comment
begin_comment
comment|// as defined in ShaderLang.h
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"GLSLANG/ShaderLang.h"
end_include
begin_include
include|#
directive|include
file|"compiler/InitializeDll.h"
end_include
begin_include
include|#
directive|include
file|"compiler/preprocessor/length_limits.h"
end_include
begin_include
include|#
directive|include
file|"compiler/ShHandle.h"
end_include
begin_comment
comment|//
end_comment
begin_comment
comment|// This is the platform independent interface between an OGL driver
end_comment
begin_comment
comment|// and the shading language compiler.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|checkActiveUniformAndAttribMaxLengths
specifier|static
name|bool
name|checkActiveUniformAndAttribMaxLengths
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|,
name|int
name|expectedValue
parameter_list|)
block|{
name|int
name|activeUniformLimit
init|=
literal|0
decl_stmt|;
name|ShGetInfo
argument_list|(
name|handle
argument_list|,
name|SH_ACTIVE_UNIFORM_MAX_LENGTH
argument_list|,
operator|&
name|activeUniformLimit
argument_list|)
expr_stmt|;
name|int
name|activeAttribLimit
init|=
literal|0
decl_stmt|;
name|ShGetInfo
argument_list|(
name|handle
argument_list|,
name|SH_ACTIVE_ATTRIBUTE_MAX_LENGTH
argument_list|,
operator|&
name|activeAttribLimit
argument_list|)
expr_stmt|;
return|return
operator|(
name|expectedValue
operator|==
name|activeUniformLimit
operator|&&
name|expectedValue
operator|==
name|activeAttribLimit
operator|)
return|;
block|}
end_function
begin_function
DECL|function|checkMappedNameMaxLength
specifier|static
name|bool
name|checkMappedNameMaxLength
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|,
name|int
name|expectedValue
parameter_list|)
block|{
name|int
name|mappedNameMaxLength
init|=
literal|0
decl_stmt|;
name|ShGetInfo
argument_list|(
name|handle
argument_list|,
name|SH_MAPPED_NAME_MAX_LENGTH
argument_list|,
operator|&
name|mappedNameMaxLength
argument_list|)
expr_stmt|;
return|return
operator|(
name|expectedValue
operator|==
name|mappedNameMaxLength
operator|)
return|;
block|}
end_function
begin_function
DECL|function|getVariableInfo
specifier|static
name|void
name|getVariableInfo
parameter_list|(
name|ShShaderInfo
name|varType
parameter_list|,
specifier|const
name|ShHandle
name|handle
parameter_list|,
name|int
name|index
parameter_list|,
name|int
modifier|*
name|length
parameter_list|,
name|int
modifier|*
name|size
parameter_list|,
name|ShDataType
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|mappedName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|handle
operator|||
operator|!
name|size
operator|||
operator|!
name|type
operator|||
operator|!
name|name
condition|)
return|return;
name|ASSERT
argument_list|(
operator|(
name|varType
operator|==
name|SH_ACTIVE_ATTRIBUTES
operator|)
operator|||
operator|(
name|varType
operator|==
name|SH_ACTIVE_UNIFORMS
operator|)
argument_list|)
expr_stmt|;
name|TShHandleBase
modifier|*
name|base
init|=
cast|reinterpret_cast
argument_list|<
name|TShHandleBase
operator|*
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|TCompiler
modifier|*
name|compiler
init|=
name|base
operator|->
name|getAsCompiler
argument_list|()
decl_stmt|;
if|if
condition|(
name|compiler
operator|==
literal|0
condition|)
return|return;
specifier|const
name|TVariableInfoList
modifier|&
name|varList
init|=
name|varType
operator|==
name|SH_ACTIVE_ATTRIBUTES
condition|?
name|compiler
operator|->
name|getAttribs
argument_list|()
else|:
name|compiler
operator|->
name|getUniforms
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|varList
operator|.
name|size
argument_list|()
argument_list|)
condition|)
return|return;
specifier|const
name|TVariableInfo
modifier|&
name|varInfo
init|=
name|varList
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|length
condition|)
operator|*
name|length
operator|=
name|varInfo
operator|.
name|name
operator|.
name|size
argument_list|()
expr_stmt|;
operator|*
name|size
operator|=
name|varInfo
operator|.
name|size
expr_stmt|;
operator|*
name|type
operator|=
name|varInfo
operator|.
name|type
expr_stmt|;
comment|// This size must match that queried by
comment|// SH_ACTIVE_UNIFORM_MAX_LENGTH and SH_ACTIVE_ATTRIBUTE_MAX_LENGTH
comment|// in ShGetInfo, below.
name|int
name|activeUniformAndAttribLength
init|=
literal|1
operator|+
name|MAX_SYMBOL_NAME_LEN
decl_stmt|;
name|ASSERT
argument_list|(
name|checkActiveUniformAndAttribMaxLengths
argument_list|(
name|handle
argument_list|,
name|activeUniformAndAttribLength
argument_list|)
argument_list|)
expr_stmt|;
name|strncpy
argument_list|(
name|name
argument_list|,
name|varInfo
operator|.
name|name
operator|.
name|c_str
argument_list|()
argument_list|,
name|activeUniformAndAttribLength
argument_list|)
expr_stmt|;
name|name
index|[
name|activeUniformAndAttribLength
operator|-
literal|1
index|]
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|mappedName
condition|)
block|{
comment|// This size must match that queried by
comment|// SH_MAPPED_NAME_MAX_LENGTH in ShGetInfo, below.
name|int
name|maxMappedNameLength
init|=
literal|1
operator|+
name|MAX_SYMBOL_NAME_LEN
decl_stmt|;
name|ASSERT
argument_list|(
name|checkMappedNameMaxLength
argument_list|(
name|handle
argument_list|,
name|maxMappedNameLength
argument_list|)
argument_list|)
expr_stmt|;
name|strncpy
argument_list|(
name|mappedName
argument_list|,
name|varInfo
operator|.
name|mappedName
operator|.
name|c_str
argument_list|()
argument_list|,
name|maxMappedNameLength
argument_list|)
expr_stmt|;
name|mappedName
index|[
name|maxMappedNameLength
operator|-
literal|1
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Driver must call this first, once, before doing any other
end_comment
begin_comment
comment|// compiler operations.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|ShInitialize
name|int
name|ShInitialize
parameter_list|()
block|{
if|if
condition|(
operator|!
name|InitProcess
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
literal|1
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Cleanup symbol tables
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|ShFinalize
name|int
name|ShFinalize
parameter_list|()
block|{
if|if
condition|(
operator|!
name|DetachProcess
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
literal|1
return|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Initialize built-in resources with minimum expected values.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|ShInitBuiltInResources
name|void
name|ShInitBuiltInResources
parameter_list|(
name|ShBuiltInResources
modifier|*
name|resources
parameter_list|)
block|{
comment|// Constants.
name|resources
operator|->
name|MaxVertexAttribs
operator|=
literal|8
expr_stmt|;
name|resources
operator|->
name|MaxVertexUniformVectors
operator|=
literal|128
expr_stmt|;
name|resources
operator|->
name|MaxVaryingVectors
operator|=
literal|8
expr_stmt|;
name|resources
operator|->
name|MaxVertexTextureImageUnits
operator|=
literal|0
expr_stmt|;
name|resources
operator|->
name|MaxCombinedTextureImageUnits
operator|=
literal|8
expr_stmt|;
name|resources
operator|->
name|MaxTextureImageUnits
operator|=
literal|8
expr_stmt|;
name|resources
operator|->
name|MaxFragmentUniformVectors
operator|=
literal|16
expr_stmt|;
name|resources
operator|->
name|MaxDrawBuffers
operator|=
literal|1
expr_stmt|;
comment|// Extensions.
name|resources
operator|->
name|OES_standard_derivatives
operator|=
literal|0
expr_stmt|;
name|resources
operator|->
name|OES_EGL_image_external
operator|=
literal|0
expr_stmt|;
name|resources
operator|->
name|ARB_texture_rectangle
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Driver calls these to create and destroy compiler objects.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|ShConstructCompiler
name|ShHandle
name|ShConstructCompiler
parameter_list|(
name|ShShaderType
name|type
parameter_list|,
name|ShShaderSpec
name|spec
parameter_list|,
name|ShShaderOutput
name|output
parameter_list|,
specifier|const
name|ShBuiltInResources
modifier|*
name|resources
parameter_list|)
block|{
if|if
condition|(
operator|!
name|InitThread
argument_list|()
condition|)
return|return
literal|0
return|;
name|TShHandleBase
modifier|*
name|base
init|=
cast|static_cast
argument_list|<
name|TShHandleBase
operator|*
argument_list|>
argument_list|(
name|ConstructCompiler
argument_list|(
name|type
argument_list|,
name|spec
argument_list|,
name|output
argument_list|)
argument_list|)
decl_stmt|;
name|TCompiler
modifier|*
name|compiler
init|=
name|base
operator|->
name|getAsCompiler
argument_list|()
decl_stmt|;
if|if
condition|(
name|compiler
operator|==
literal|0
condition|)
return|return
literal|0
return|;
comment|// Generate built-in symbol table.
if|if
condition|(
operator|!
name|compiler
operator|->
name|Init
argument_list|(
operator|*
name|resources
argument_list|)
condition|)
block|{
name|ShDestruct
argument_list|(
name|base
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|base
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|ShDestruct
name|void
name|ShDestruct
parameter_list|(
name|ShHandle
name|handle
parameter_list|)
block|{
if|if
condition|(
name|handle
operator|==
literal|0
condition|)
return|return;
name|TShHandleBase
modifier|*
name|base
init|=
cast|static_cast
argument_list|<
name|TShHandleBase
operator|*
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|->
name|getAsCompiler
argument_list|()
condition|)
name|DeleteCompiler
argument_list|(
name|base
operator|->
name|getAsCompiler
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Do an actual compile on the given strings.  The result is left
end_comment
begin_comment
comment|// in the given compile object.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Return:  The return value of ShCompile is really boolean, indicating
end_comment
begin_comment
comment|// success or failure.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|ShCompile
name|int
name|ShCompile
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
name|shaderStrings
index|[]
parameter_list|,
specifier|const
name|int
name|numStrings
parameter_list|,
name|int
name|compileOptions
parameter_list|)
block|{
if|if
condition|(
operator|!
name|InitThread
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|handle
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|TShHandleBase
modifier|*
name|base
init|=
cast|reinterpret_cast
argument_list|<
name|TShHandleBase
operator|*
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|TCompiler
modifier|*
name|compiler
init|=
name|base
operator|->
name|getAsCompiler
argument_list|()
decl_stmt|;
if|if
condition|(
name|compiler
operator|==
literal|0
condition|)
return|return
literal|0
return|;
name|bool
name|success
init|=
name|compiler
operator|->
name|compile
argument_list|(
name|shaderStrings
argument_list|,
name|numStrings
argument_list|,
name|compileOptions
argument_list|)
decl_stmt|;
return|return
name|success
condition|?
literal|1
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|ShGetInfo
name|void
name|ShGetInfo
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|,
name|ShShaderInfo
name|pname
parameter_list|,
name|int
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
operator|!
name|handle
operator|||
operator|!
name|params
condition|)
return|return;
name|TShHandleBase
modifier|*
name|base
init|=
cast|static_cast
argument_list|<
name|TShHandleBase
operator|*
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|TCompiler
modifier|*
name|compiler
init|=
name|base
operator|->
name|getAsCompiler
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|compiler
condition|)
return|return;
switch|switch
condition|(
name|pname
condition|)
block|{
case|case
name|SH_INFO_LOG_LENGTH
case|:
operator|*
name|params
operator|=
name|compiler
operator|->
name|getInfoSink
argument_list|()
operator|.
name|info
operator|.
name|size
argument_list|()
operator|+
literal|1
expr_stmt|;
break|break;
case|case
name|SH_OBJECT_CODE_LENGTH
case|:
operator|*
name|params
operator|=
name|compiler
operator|->
name|getInfoSink
argument_list|()
operator|.
name|obj
operator|.
name|size
argument_list|()
operator|+
literal|1
expr_stmt|;
break|break;
case|case
name|SH_ACTIVE_UNIFORMS
case|:
operator|*
name|params
operator|=
name|compiler
operator|->
name|getUniforms
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
case|case
name|SH_ACTIVE_UNIFORM_MAX_LENGTH
case|:
operator|*
name|params
operator|=
literal|1
operator|+
name|MAX_SYMBOL_NAME_LEN
expr_stmt|;
break|break;
case|case
name|SH_ACTIVE_ATTRIBUTES
case|:
operator|*
name|params
operator|=
name|compiler
operator|->
name|getAttribs
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
case|case
name|SH_ACTIVE_ATTRIBUTE_MAX_LENGTH
case|:
operator|*
name|params
operator|=
literal|1
operator|+
name|MAX_SYMBOL_NAME_LEN
expr_stmt|;
break|break;
case|case
name|SH_MAPPED_NAME_MAX_LENGTH
case|:
comment|// Use longer length than MAX_SHORTENED_IDENTIFIER_SIZE to
comment|// handle array and struct dereferences.
operator|*
name|params
operator|=
literal|1
operator|+
name|MAX_SYMBOL_NAME_LEN
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Return any compiler log of messages for the application.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|ShGetInfoLog
name|void
name|ShGetInfoLog
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|,
name|char
modifier|*
name|infoLog
parameter_list|)
block|{
if|if
condition|(
operator|!
name|handle
operator|||
operator|!
name|infoLog
condition|)
return|return;
name|TShHandleBase
modifier|*
name|base
init|=
cast|static_cast
argument_list|<
name|TShHandleBase
operator|*
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|TCompiler
modifier|*
name|compiler
init|=
name|base
operator|->
name|getAsCompiler
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|compiler
condition|)
return|return;
name|TInfoSink
modifier|&
name|infoSink
init|=
name|compiler
operator|->
name|getInfoSink
argument_list|()
decl_stmt|;
name|strcpy
argument_list|(
name|infoLog
argument_list|,
name|infoSink
operator|.
name|info
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//
end_comment
begin_comment
comment|// Return any object code.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|ShGetObjectCode
name|void
name|ShGetObjectCode
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|,
name|char
modifier|*
name|objCode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|handle
operator|||
operator|!
name|objCode
condition|)
return|return;
name|TShHandleBase
modifier|*
name|base
init|=
cast|static_cast
argument_list|<
name|TShHandleBase
operator|*
argument_list|>
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|TCompiler
modifier|*
name|compiler
init|=
name|base
operator|->
name|getAsCompiler
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|compiler
condition|)
return|return;
name|TInfoSink
modifier|&
name|infoSink
init|=
name|compiler
operator|->
name|getInfoSink
argument_list|()
decl_stmt|;
name|strcpy
argument_list|(
name|objCode
argument_list|,
name|infoSink
operator|.
name|obj
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ShGetActiveAttrib
name|void
name|ShGetActiveAttrib
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|,
name|int
name|index
parameter_list|,
name|int
modifier|*
name|length
parameter_list|,
name|int
modifier|*
name|size
parameter_list|,
name|ShDataType
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|mappedName
parameter_list|)
block|{
name|getVariableInfo
argument_list|(
name|SH_ACTIVE_ATTRIBUTES
argument_list|,
name|handle
argument_list|,
name|index
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|,
name|mappedName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ShGetActiveUniform
name|void
name|ShGetActiveUniform
parameter_list|(
specifier|const
name|ShHandle
name|handle
parameter_list|,
name|int
name|index
parameter_list|,
name|int
modifier|*
name|length
parameter_list|,
name|int
modifier|*
name|size
parameter_list|,
name|ShDataType
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|mappedName
parameter_list|)
block|{
name|getVariableInfo
argument_list|(
name|SH_ACTIVE_UNIFORMS
argument_list|,
name|handle
argument_list|,
name|index
argument_list|,
name|length
argument_list|,
name|size
argument_list|,
name|type
argument_list|,
name|name
argument_list|,
name|mappedName
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
