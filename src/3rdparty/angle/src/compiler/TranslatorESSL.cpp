begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2011 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/TranslatorESSL.h"
end_include
begin_include
include|#
directive|include
file|"compiler/OutputESSL.h"
end_include
begin_constructor
DECL|function|TranslatorESSL
name|TranslatorESSL
operator|::
name|TranslatorESSL
parameter_list|(
name|ShShaderType
name|type
parameter_list|,
name|ShShaderSpec
name|spec
parameter_list|)
member_init_list|:
name|TCompiler
argument_list|(
name|type
argument_list|,
name|spec
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|translate
name|void
name|TranslatorESSL
operator|::
name|translate
parameter_list|(
name|TIntermNode
modifier|*
name|root
parameter_list|)
block|{
name|TInfoSinkBase
modifier|&
name|sink
init|=
name|getInfoSink
argument_list|()
operator|.
name|obj
decl_stmt|;
comment|// Write built-in extension behaviors.
name|writeExtensionBehavior
argument_list|()
expr_stmt|;
comment|// Write emulated built-in functions if needed.
name|getBuiltInFunctionEmulator
argument_list|()
operator|.
name|OutputEmulatedFunctionDefinition
argument_list|(
name|sink
argument_list|,
name|getShaderType
argument_list|()
operator|==
name|SH_FRAGMENT_SHADER
argument_list|)
expr_stmt|;
comment|// Write translated shader.
name|TOutputESSL
name|outputESSL
argument_list|(
name|sink
argument_list|)
decl_stmt|;
name|root
operator|->
name|traverse
argument_list|(
operator|&
name|outputESSL
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeExtensionBehavior
name|void
name|TranslatorESSL
operator|::
name|writeExtensionBehavior
parameter_list|()
block|{
name|TInfoSinkBase
modifier|&
name|sink
init|=
name|getInfoSink
argument_list|()
operator|.
name|obj
decl_stmt|;
specifier|const
name|TExtensionBehavior
modifier|&
name|extensionBehavior
init|=
name|getExtensionBehavior
argument_list|()
decl_stmt|;
for|for
control|(
name|TExtensionBehavior
operator|::
name|const_iterator
name|iter
init|=
name|extensionBehavior
operator|.
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|extensionBehavior
operator|.
name|end
argument_list|()
condition|;
operator|++
name|iter
control|)
block|{
if|if
condition|(
name|iter
operator|->
name|second
operator|!=
name|EBhUndefined
condition|)
block|{
name|sink
operator|<<
literal|"#extension "
operator|<<
name|iter
operator|->
name|first
operator|<<
literal|" : "
operator|<<
name|getBehaviorString
argument_list|(
name|iter
operator|->
name|second
argument_list|)
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|}
block|}
end_function
end_unit
