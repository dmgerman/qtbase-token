begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/depgraph/DependencyGraphOutput.h"
end_include
begin_function
DECL|function|outputIndentation
name|void
name|TDependencyGraphOutput
operator|::
name|outputIndentation
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getDepth
argument_list|()
condition|;
operator|++
name|i
control|)
name|mSink
operator|<<
literal|"  "
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visitArgument
name|void
name|TDependencyGraphOutput
operator|::
name|visitArgument
parameter_list|(
name|TGraphArgument
modifier|*
name|parameter
parameter_list|)
block|{
name|outputIndentation
argument_list|()
expr_stmt|;
name|mSink
operator|<<
literal|"argument "
operator|<<
name|parameter
operator|->
name|getArgumentNumber
argument_list|()
operator|<<
literal|" of call to "
operator|<<
name|parameter
operator|->
name|getIntermFunctionCall
argument_list|()
operator|->
name|getName
argument_list|()
operator|<<
literal|"\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visitFunctionCall
name|void
name|TDependencyGraphOutput
operator|::
name|visitFunctionCall
parameter_list|(
name|TGraphFunctionCall
modifier|*
name|functionCall
parameter_list|)
block|{
name|outputIndentation
argument_list|()
expr_stmt|;
name|mSink
operator|<<
literal|"function call "
operator|<<
name|functionCall
operator|->
name|getIntermFunctionCall
argument_list|()
operator|->
name|getName
argument_list|()
operator|<<
literal|"\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visitSymbol
name|void
name|TDependencyGraphOutput
operator|::
name|visitSymbol
parameter_list|(
name|TGraphSymbol
modifier|*
name|symbol
parameter_list|)
block|{
name|outputIndentation
argument_list|()
expr_stmt|;
name|mSink
operator|<<
name|symbol
operator|->
name|getIntermSymbol
argument_list|()
operator|->
name|getSymbol
argument_list|()
operator|<<
literal|" (symbol id: "
operator|<<
name|symbol
operator|->
name|getIntermSymbol
argument_list|()
operator|->
name|getId
argument_list|()
operator|<<
literal|")\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visitSelection
name|void
name|TDependencyGraphOutput
operator|::
name|visitSelection
parameter_list|(
name|TGraphSelection
modifier|*
name|selection
parameter_list|)
block|{
name|outputIndentation
argument_list|()
expr_stmt|;
name|mSink
operator|<<
literal|"selection\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visitLoop
name|void
name|TDependencyGraphOutput
operator|::
name|visitLoop
parameter_list|(
name|TGraphLoop
modifier|*
name|loop
parameter_list|)
block|{
name|outputIndentation
argument_list|()
expr_stmt|;
name|mSink
operator|<<
literal|"loop condition\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visitLogicalOp
name|void
name|TDependencyGraphOutput
operator|::
name|visitLogicalOp
parameter_list|(
name|TGraphLogicalOp
modifier|*
name|logicalOp
parameter_list|)
block|{
name|outputIndentation
argument_list|()
expr_stmt|;
name|mSink
operator|<<
literal|"logical "
operator|<<
name|logicalOp
operator|->
name|getOpString
argument_list|()
operator|<<
literal|"\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|outputAllSpanningTrees
name|void
name|TDependencyGraphOutput
operator|::
name|outputAllSpanningTrees
parameter_list|(
name|TDependencyGraph
modifier|&
name|graph
parameter_list|)
block|{
name|mSink
operator|<<
literal|"\n"
expr_stmt|;
for|for
control|(
name|TGraphNodeVector
operator|::
name|const_iterator
name|iter
init|=
name|graph
operator|.
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|graph
operator|.
name|end
argument_list|()
condition|;
operator|++
name|iter
control|)
block|{
name|TGraphNode
modifier|*
name|symbol
init|=
operator|*
name|iter
decl_stmt|;
name|mSink
operator|<<
literal|"--- Dependency graph spanning tree ---\n"
expr_stmt|;
name|clearVisited
argument_list|()
expr_stmt|;
name|symbol
operator|->
name|traverse
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mSink
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|}
end_function
end_unit
