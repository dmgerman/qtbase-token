begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|_LOCAL_INTERMEDIATE_INCLUDED_
end_ifndef
begin_define
DECL|macro|_LOCAL_INTERMEDIATE_INCLUDED_
define|#
directive|define
name|_LOCAL_INTERMEDIATE_INCLUDED_
end_define
begin_include
include|#
directive|include
file|"GLSLANG/ShaderLang.h"
end_include
begin_include
include|#
directive|include
file|"compiler/intermediate.h"
end_include
begin_include
include|#
directive|include
file|"compiler/SymbolTable.h"
end_include
begin_struct
DECL|struct|TVectorFields
struct|struct
name|TVectorFields
block|{
DECL|member|offsets
name|int
name|offsets
index|[
literal|4
index|]
decl_stmt|;
DECL|member|num
name|int
name|num
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|//
end_comment
begin_comment
comment|// Set of helper functions to help parse and build the tree.
end_comment
begin_comment
comment|//
end_comment
begin_decl_stmt
DECL|variable|TInfoSink
name|class
name|TInfoSink
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|TIntermediate
block|{
name|public
label|:
name|POOL_ALLOCATOR_NEW_DELETE
argument_list|()
expr_stmt|;
name|TIntermediate
argument_list|(
name|TInfoSink
operator|&
name|i
argument_list|)
operator|:
name|infoSink
argument_list|(
argument|i
argument_list|)
block|{ }
name|TIntermSymbol
operator|*
name|addSymbol
argument_list|(
argument|int Id
argument_list|,
argument|const TString&
argument_list|,
argument|const TType&
argument_list|,
argument|const TSourceLoc&
argument_list|)
expr_stmt|;
name|TIntermTyped
modifier|*
name|addConversion
parameter_list|(
name|TOperator
parameter_list|,
specifier|const
name|TType
modifier|&
parameter_list|,
name|TIntermTyped
modifier|*
parameter_list|)
function_decl|;
name|TIntermTyped
modifier|*
name|addBinaryMath
parameter_list|(
name|TOperator
name|op
parameter_list|,
name|TIntermTyped
modifier|*
name|left
parameter_list|,
name|TIntermTyped
modifier|*
name|right
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|,
name|TSymbolTable
modifier|&
parameter_list|)
function_decl|;
name|TIntermTyped
modifier|*
name|addAssign
parameter_list|(
name|TOperator
name|op
parameter_list|,
name|TIntermTyped
modifier|*
name|left
parameter_list|,
name|TIntermTyped
modifier|*
name|right
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|)
function_decl|;
name|TIntermTyped
modifier|*
name|addIndex
parameter_list|(
name|TOperator
name|op
parameter_list|,
name|TIntermTyped
modifier|*
name|base
parameter_list|,
name|TIntermTyped
modifier|*
name|index
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|)
function_decl|;
name|TIntermTyped
modifier|*
name|addUnaryMath
parameter_list|(
name|TOperator
name|op
parameter_list|,
name|TIntermNode
modifier|*
name|child
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|,
name|TSymbolTable
modifier|&
parameter_list|)
function_decl|;
name|TIntermAggregate
modifier|*
name|growAggregate
parameter_list|(
name|TIntermNode
modifier|*
name|left
parameter_list|,
name|TIntermNode
modifier|*
name|right
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|)
function_decl|;
name|TIntermAggregate
modifier|*
name|makeAggregate
parameter_list|(
name|TIntermNode
modifier|*
name|node
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|)
function_decl|;
name|TIntermAggregate
modifier|*
name|setAggregateOperator
parameter_list|(
name|TIntermNode
modifier|*
parameter_list|,
name|TOperator
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|)
function_decl|;
name|TIntermNode
modifier|*
name|addSelection
parameter_list|(
name|TIntermTyped
modifier|*
name|cond
parameter_list|,
name|TIntermNodePair
name|code
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|)
function_decl|;
name|TIntermTyped
modifier|*
name|addSelection
parameter_list|(
name|TIntermTyped
modifier|*
name|cond
parameter_list|,
name|TIntermTyped
modifier|*
name|trueBlock
parameter_list|,
name|TIntermTyped
modifier|*
name|falseBlock
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|)
function_decl|;
name|TIntermTyped
modifier|*
name|addComma
parameter_list|(
name|TIntermTyped
modifier|*
name|left
parameter_list|,
name|TIntermTyped
modifier|*
name|right
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|)
function_decl|;
name|TIntermConstantUnion
modifier|*
name|addConstantUnion
parameter_list|(
name|ConstantUnion
modifier|*
parameter_list|,
specifier|const
name|TType
modifier|&
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|)
function_decl|;
name|TIntermTyped
modifier|*
name|promoteConstantUnion
parameter_list|(
name|TBasicType
parameter_list|,
name|TIntermConstantUnion
modifier|*
parameter_list|)
function_decl|;
name|bool
name|parseConstTree
parameter_list|(
specifier|const
name|TSourceLoc
modifier|&
parameter_list|,
name|TIntermNode
modifier|*
parameter_list|,
name|ConstantUnion
modifier|*
parameter_list|,
name|TOperator
parameter_list|,
name|TSymbolTable
modifier|&
parameter_list|,
name|TType
parameter_list|,
name|bool
name|singleConstantParam
init|=
name|false
parameter_list|)
function_decl|;
name|TIntermNode
modifier|*
name|addLoop
parameter_list|(
name|TLoopType
parameter_list|,
name|TIntermNode
modifier|*
parameter_list|,
name|TIntermTyped
modifier|*
parameter_list|,
name|TIntermTyped
modifier|*
parameter_list|,
name|TIntermNode
modifier|*
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|)
function_decl|;
name|TIntermBranch
modifier|*
name|addBranch
parameter_list|(
name|TOperator
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|)
function_decl|;
name|TIntermBranch
modifier|*
name|addBranch
parameter_list|(
name|TOperator
parameter_list|,
name|TIntermTyped
modifier|*
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|)
function_decl|;
name|TIntermTyped
modifier|*
name|addSwizzle
parameter_list|(
name|TVectorFields
modifier|&
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
parameter_list|)
function_decl|;
name|bool
name|postProcess
parameter_list|(
name|TIntermNode
modifier|*
parameter_list|)
function_decl|;
name|void
name|remove
parameter_list|(
name|TIntermNode
modifier|*
parameter_list|)
function_decl|;
name|void
name|outputTree
parameter_list|(
name|TIntermNode
modifier|*
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|operator
init|=
operator|(
name|TIntermediate
operator|&
operator|)
decl_stmt|;
comment|// prevent assignments
name|TInfoSink
modifier|&
name|infoSink
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// _LOCAL_INTERMEDIATE_INCLUDED_
end_comment
end_unit
