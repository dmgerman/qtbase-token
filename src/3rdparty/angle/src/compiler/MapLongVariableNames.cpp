begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/MapLongVariableNames.h"
end_include
begin_namespace
namespace|namespace
block|{
DECL|function|mapLongName
name|TString
name|mapLongName
parameter_list|(
name|int
name|id
parameter_list|,
specifier|const
name|TString
modifier|&
name|name
parameter_list|,
name|bool
name|isGlobal
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|name
operator|.
name|size
argument_list|()
operator|>
name|MAX_SHORTENED_IDENTIFIER_SIZE
argument_list|)
expr_stmt|;
name|TStringStream
name|stream
decl_stmt|;
name|stream
operator|<<
literal|"webgl_"
expr_stmt|;
if|if
condition|(
name|isGlobal
condition|)
name|stream
operator|<<
literal|"g"
expr_stmt|;
name|stream
operator|<<
name|id
expr_stmt|;
if|if
condition|(
name|name
index|[
literal|0
index|]
operator|!=
literal|'_'
condition|)
name|stream
operator|<<
literal|"_"
expr_stmt|;
name|stream
operator|<<
name|name
operator|.
name|substr
argument_list|(
literal|0
argument_list|,
name|MAX_SHORTENED_IDENTIFIER_SIZE
operator|-
name|stream
operator|.
name|str
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|stream
operator|.
name|str
argument_list|()
return|;
block|}
DECL|member|gLongNameMapInstance
name|LongNameMap
modifier|*
name|gLongNameMapInstance
init|=
name|NULL
decl_stmt|;
block|}
end_namespace
begin_comment
comment|// anonymous namespace
end_comment
begin_constructor
DECL|function|LongNameMap
name|LongNameMap
operator|::
name|LongNameMap
parameter_list|()
member_init_list|:
name|refCount
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~LongNameMap
name|LongNameMap
operator|::
name|~
name|LongNameMap
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|// static
end_comment
begin_function
DECL|function|GetInstance
name|LongNameMap
modifier|*
name|LongNameMap
operator|::
name|GetInstance
parameter_list|()
block|{
if|if
condition|(
name|gLongNameMapInstance
operator|==
name|NULL
condition|)
name|gLongNameMapInstance
operator|=
operator|new
name|LongNameMap
expr_stmt|;
name|gLongNameMapInstance
operator|->
name|refCount
operator|++
expr_stmt|;
return|return
name|gLongNameMapInstance
return|;
block|}
end_function
begin_function
DECL|function|Release
name|void
name|LongNameMap
operator|::
name|Release
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|gLongNameMapInstance
operator|==
name|this
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|refCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|refCount
operator|--
expr_stmt|;
if|if
condition|(
name|refCount
operator|==
literal|0
condition|)
block|{
operator|delete
name|gLongNameMapInstance
expr_stmt|;
name|gLongNameMapInstance
operator|=
name|NULL
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|Find
specifier|const
name|char
modifier|*
name|LongNameMap
operator|::
name|Find
parameter_list|(
specifier|const
name|char
modifier|*
name|originalName
parameter_list|)
specifier|const
block|{
name|std
operator|::
name|map
argument_list|<
name|std
operator|::
name|string
argument_list|,
name|std
operator|::
name|string
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|mLongNameMap
operator|.
name|find
argument_list|(
name|originalName
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|mLongNameMap
operator|.
name|end
argument_list|()
condition|)
return|return
operator|(
operator|*
name|it
operator|)
operator|.
name|second
operator|.
name|c_str
argument_list|()
return|;
return|return
name|NULL
return|;
block|}
end_function
begin_function
DECL|function|Insert
name|void
name|LongNameMap
operator|::
name|Insert
parameter_list|(
specifier|const
name|char
modifier|*
name|originalName
parameter_list|,
specifier|const
name|char
modifier|*
name|mappedName
parameter_list|)
block|{
name|mLongNameMap
operator|.
name|insert
argument_list|(
name|std
operator|::
name|map
argument_list|<
name|std
operator|::
name|string
argument_list|,
name|std
operator|::
name|string
argument_list|>
operator|::
name|value_type
argument_list|(
name|originalName
argument_list|,
name|mappedName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|Size
name|int
name|LongNameMap
operator|::
name|Size
parameter_list|()
specifier|const
block|{
return|return
name|mLongNameMap
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_constructor
DECL|function|MapLongVariableNames
name|MapLongVariableNames
operator|::
name|MapLongVariableNames
parameter_list|(
name|LongNameMap
modifier|*
name|globalMap
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|globalMap
argument_list|)
expr_stmt|;
name|mGlobalMap
operator|=
name|globalMap
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|visitSymbol
name|void
name|MapLongVariableNames
operator|::
name|visitSymbol
parameter_list|(
name|TIntermSymbol
modifier|*
name|symbol
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|symbol
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|symbol
operator|->
name|getSymbol
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|MAX_SHORTENED_IDENTIFIER_SIZE
condition|)
block|{
switch|switch
condition|(
name|symbol
operator|->
name|getQualifier
argument_list|()
condition|)
block|{
case|case
name|EvqVaryingIn
case|:
case|case
name|EvqVaryingOut
case|:
case|case
name|EvqInvariantVaryingIn
case|:
case|case
name|EvqInvariantVaryingOut
case|:
case|case
name|EvqUniform
case|:
name|symbol
operator|->
name|setSymbol
argument_list|(
name|mapGlobalLongName
argument_list|(
name|symbol
operator|->
name|getSymbol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|symbol
operator|->
name|setSymbol
argument_list|(
name|mapLongName
argument_list|(
name|symbol
operator|->
name|getId
argument_list|()
argument_list|,
name|symbol
operator|->
name|getSymbol
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
empty_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|visitLoop
name|bool
name|MapLongVariableNames
operator|::
name|visitLoop
parameter_list|(
name|Visit
parameter_list|,
name|TIntermLoop
modifier|*
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|->
name|getInit
argument_list|()
condition|)
name|node
operator|->
name|getInit
argument_list|()
operator|->
name|traverse
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|mapGlobalLongName
name|TString
name|MapLongVariableNames
operator|::
name|mapGlobalLongName
parameter_list|(
specifier|const
name|TString
modifier|&
name|name
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|mGlobalMap
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|mappedName
init|=
name|mGlobalMap
operator|->
name|Find
argument_list|(
name|name
operator|.
name|c_str
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappedName
operator|!=
name|NULL
condition|)
return|return
name|mappedName
return|;
name|int
name|id
init|=
name|mGlobalMap
operator|->
name|Size
argument_list|()
decl_stmt|;
name|TString
name|rt
init|=
name|mapLongName
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|mGlobalMap
operator|->
name|Insert
argument_list|(
name|name
operator|.
name|c_str
argument_list|()
argument_list|,
name|rt
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rt
return|;
block|}
end_function
end_unit
