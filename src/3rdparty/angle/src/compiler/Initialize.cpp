begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Create strings that declare built-in definitions, add built-ins that
end_comment
begin_comment
comment|// cannot be expressed in the files, and establish mappings between
end_comment
begin_comment
comment|// built-in functions and operators.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/Initialize.h"
end_include
begin_include
include|#
directive|include
file|"compiler/intermediate.h"
end_include
begin_comment
comment|//============================================================================
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Prototypes for built-in functions seen by both vertex and fragment shaders.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//============================================================================
end_comment
begin_function
DECL|function|BuiltInFunctionsCommon
specifier|static
name|TString
name|BuiltInFunctionsCommon
parameter_list|(
specifier|const
name|ShBuiltInResources
modifier|&
name|resources
parameter_list|)
block|{
name|TString
name|s
decl_stmt|;
comment|//
comment|// Angle and Trigonometric Functions.
comment|//
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float radians(float degrees);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  radians(vec2  degrees);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  radians(vec3  degrees);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  radians(vec4  degrees);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float degrees(float radians);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  degrees(vec2  radians);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  degrees(vec3  radians);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  degrees(vec4  radians);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float sin(float angle);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  sin(vec2  angle);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  sin(vec3  angle);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  sin(vec4  angle);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float cos(float angle);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  cos(vec2  angle);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  cos(vec3  angle);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  cos(vec4  angle);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float tan(float angle);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  tan(vec2  angle);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  tan(vec3  angle);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  tan(vec4  angle);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float asin(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  asin(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  asin(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  asin(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float acos(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  acos(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  acos(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  acos(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float atan(float y, float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  atan(vec2  y, vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  atan(vec3  y, vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  atan(vec4  y, vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float atan(float y_over_x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  atan(vec2  y_over_x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  atan(vec3  y_over_x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  atan(vec4  y_over_x);"
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Exponential Functions.
comment|//
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float pow(float x, float y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  pow(vec2  x, vec2  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  pow(vec3  x, vec3  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  pow(vec4  x, vec4  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float exp(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  exp(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  exp(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  exp(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float log(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  log(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  log(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  log(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float exp2(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  exp2(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  exp2(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  exp2(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float log2(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  log2(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  log2(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  log2(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float sqrt(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  sqrt(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  sqrt(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  sqrt(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float inversesqrt(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  inversesqrt(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  inversesqrt(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  inversesqrt(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Common Functions.
comment|//
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float abs(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  abs(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  abs(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  abs(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float sign(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  sign(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  sign(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  sign(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float floor(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  floor(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  floor(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  floor(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float ceil(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  ceil(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  ceil(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  ceil(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float fract(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  fract(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  fract(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  fract(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float mod(float x, float y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  mod(vec2  x, float y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  mod(vec3  x, float y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  mod(vec4  x, float y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  mod(vec2  x, vec2  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  mod(vec3  x, vec3  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  mod(vec4  x, vec4  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float min(float x, float y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  min(vec2  x, float y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  min(vec3  x, float y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  min(vec4  x, float y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  min(vec2  x, vec2  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  min(vec3  x, vec3  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  min(vec4  x, vec4  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float max(float x, float y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  max(vec2  x, float y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  max(vec3  x, float y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  max(vec4  x, float y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  max(vec2  x, vec2  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  max(vec3  x, vec3  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  max(vec4  x, vec4  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float clamp(float x, float minVal, float maxVal);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  clamp(vec2  x, float minVal, float maxVal);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  clamp(vec3  x, float minVal, float maxVal);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  clamp(vec4  x, float minVal, float maxVal);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  clamp(vec2  x, vec2  minVal, vec2  maxVal);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  clamp(vec3  x, vec3  minVal, vec3  maxVal);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  clamp(vec4  x, vec4  minVal, vec4  maxVal);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float mix(float x, float y, float a);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  mix(vec2  x, vec2  y, float a);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  mix(vec3  x, vec3  y, float a);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  mix(vec4  x, vec4  y, float a);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  mix(vec2  x, vec2  y, vec2  a);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  mix(vec3  x, vec3  y, vec3  a);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  mix(vec4  x, vec4  y, vec4  a);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float step(float edge, float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  step(vec2  edge, vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  step(vec3  edge, vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  step(vec4  edge, vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  step(float edge, vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  step(float edge, vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  step(float edge, vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float smoothstep(float edge0, float edge1, float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  smoothstep(vec2  edge0, vec2  edge1, vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  smoothstep(vec3  edge0, vec3  edge1, vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  smoothstep(vec4  edge0, vec4  edge1, vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  smoothstep(float edge0, float edge1, vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  smoothstep(float edge0, float edge1, vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  smoothstep(float edge0, float edge1, vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Geometric Functions.
comment|//
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float length(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float length(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float length(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float length(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float distance(float p0, float p1);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float distance(vec2  p0, vec2  p1);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float distance(vec3  p0, vec3  p1);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float distance(vec4  p0, vec4  p1);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float dot(float x, float y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float dot(vec2  x, vec2  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float dot(vec3  x, vec3  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float dot(vec4  x, vec4  y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3 cross(vec3 x, vec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float normalize(float x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  normalize(vec2  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  normalize(vec3  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  normalize(vec4  x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float faceforward(float N, float I, float Nref);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  faceforward(vec2  N, vec2  I, vec2  Nref);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  faceforward(vec3  N, vec3  I, vec3  Nref);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  faceforward(vec4  N, vec4  I, vec4  Nref);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float reflect(float I, float N);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  reflect(vec2  I, vec2  N);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  reflect(vec3  I, vec3  N);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  reflect(vec4  I, vec4  N);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float refract(float I, float N, float eta);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  refract(vec2  I, vec2  N, float eta);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  refract(vec3  I, vec3  N, float eta);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  refract(vec4  I, vec4  N, float eta);"
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Matrix Functions.
comment|//
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"mat2 matrixCompMult(mat2 x, mat2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"mat3 matrixCompMult(mat3 x, mat3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"mat4 matrixCompMult(mat4 x, mat4 y);"
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Vector relational functions.
comment|//
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 lessThan(vec2 x, vec2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 lessThan(vec3 x, vec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 lessThan(vec4 x, vec4 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 lessThan(ivec2 x, ivec2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 lessThan(ivec3 x, ivec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 lessThan(ivec4 x, ivec4 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 lessThanEqual(vec2 x, vec2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 lessThanEqual(vec3 x, vec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 lessThanEqual(vec4 x, vec4 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 lessThanEqual(ivec2 x, ivec2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 lessThanEqual(ivec3 x, ivec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 lessThanEqual(ivec4 x, ivec4 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 greaterThan(vec2 x, vec2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 greaterThan(vec3 x, vec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 greaterThan(vec4 x, vec4 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 greaterThan(ivec2 x, ivec2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 greaterThan(ivec3 x, ivec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 greaterThan(ivec4 x, ivec4 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 greaterThanEqual(vec2 x, vec2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 greaterThanEqual(vec3 x, vec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 greaterThanEqual(vec4 x, vec4 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 greaterThanEqual(ivec2 x, ivec2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 greaterThanEqual(ivec3 x, ivec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 greaterThanEqual(ivec4 x, ivec4 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 equal(vec2 x, vec2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 equal(vec3 x, vec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 equal(vec4 x, vec4 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 equal(ivec2 x, ivec2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 equal(ivec3 x, ivec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 equal(ivec4 x, ivec4 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 equal(bvec2 x, bvec2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 equal(bvec3 x, bvec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 equal(bvec4 x, bvec4 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 notEqual(vec2 x, vec2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 notEqual(vec3 x, vec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 notEqual(vec4 x, vec4 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 notEqual(ivec2 x, ivec2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 notEqual(ivec3 x, ivec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 notEqual(ivec4 x, ivec4 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 notEqual(bvec2 x, bvec2 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 notEqual(bvec3 x, bvec3 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 notEqual(bvec4 x, bvec4 y);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bool any(bvec2 x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bool any(bvec3 x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bool any(bvec4 x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bool all(bvec2 x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bool all(bvec3 x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bool all(bvec4 x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec2 not(bvec2 x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec3 not(bvec3 x);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"bvec4 not(bvec4 x);"
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Texture Functions.
comment|//
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2D(sampler2D sampler, vec2 coord);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2DProj(sampler2D sampler, vec3 coord);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2DProj(sampler2D sampler, vec4 coord);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 textureCube(samplerCube sampler, vec3 coord);"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|resources
operator|.
name|OES_EGL_image_external
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2D(samplerExternalOES sampler, vec2 coord);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2DProj(samplerExternalOES sampler, vec3 coord);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2DProj(samplerExternalOES sampler, vec4 coord);"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resources
operator|.
name|ARB_texture_rectangle
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2DRect(sampler2DRect sampler, vec2 coord);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2DRectProj(sampler2DRect sampler, vec3 coord);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2DRectProj(sampler2DRect sampler, vec4 coord);"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Noise functions.
comment|//
comment|//s.append(TString("float noise1(float x);"));
comment|//s.append(TString("float noise1(vec2  x);"));
comment|//s.append(TString("float noise1(vec3  x);"));
comment|//s.append(TString("float noise1(vec4  x);"));
comment|//s.append(TString("vec2 noise2(float x);"));
comment|//s.append(TString("vec2 noise2(vec2  x);"));
comment|//s.append(TString("vec2 noise2(vec3  x);"));
comment|//s.append(TString("vec2 noise2(vec4  x);"));
comment|//s.append(TString("vec3 noise3(float x);"));
comment|//s.append(TString("vec3 noise3(vec2  x);"));
comment|//s.append(TString("vec3 noise3(vec3  x);"));
comment|//s.append(TString("vec3 noise3(vec4  x);"));
comment|//s.append(TString("vec4 noise4(float x);"));
comment|//s.append(TString("vec4 noise4(vec2  x);"));
comment|//s.append(TString("vec4 noise4(vec3  x);"));
comment|//s.append(TString("vec4 noise4(vec4  x);"));
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|//============================================================================
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Prototypes for built-in functions seen by vertex shaders only.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//============================================================================
end_comment
begin_function
DECL|function|BuiltInFunctionsVertex
specifier|static
name|TString
name|BuiltInFunctionsVertex
parameter_list|(
specifier|const
name|ShBuiltInResources
modifier|&
name|resources
parameter_list|)
block|{
name|TString
name|s
decl_stmt|;
comment|//
comment|// Geometric Functions.
comment|//
comment|//s.append(TString("vec4 ftransform();"));
comment|//
comment|// Texture Functions.
comment|//
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2DLod(sampler2D sampler, vec2 coord, float lod);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2DProjLod(sampler2D sampler, vec3 coord, float lod);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2DProjLod(sampler2D sampler, vec4 coord, float lod);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 textureCubeLod(samplerCube sampler, vec3 coord, float lod);"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|//============================================================================
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Prototypes for built-in functions seen by fragment shaders only.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//============================================================================
end_comment
begin_function
DECL|function|BuiltInFunctionsFragment
specifier|static
name|TString
name|BuiltInFunctionsFragment
parameter_list|(
specifier|const
name|ShBuiltInResources
modifier|&
name|resources
parameter_list|)
block|{
name|TString
name|s
decl_stmt|;
comment|//
comment|// Texture Functions.
comment|//
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2D(sampler2D sampler, vec2 coord, float bias);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2DProj(sampler2D sampler, vec3 coord, float bias);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 texture2DProj(sampler2D sampler, vec4 coord, float bias);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4 textureCube(samplerCube sampler, vec3 coord, float bias);"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|resources
operator|.
name|OES_standard_derivatives
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float dFdx(float p);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  dFdx(vec2  p);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  dFdx(vec3  p);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  dFdx(vec4  p);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float dFdy(float p);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  dFdy(vec2  p);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  dFdy(vec3  p);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  dFdy(vec4  p);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"float fwidth(float p);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec2  fwidth(vec2  p);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec3  fwidth(vec3  p);"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"vec4  fwidth(vec4  p);"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|//============================================================================
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Standard uniforms.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//============================================================================
end_comment
begin_function
DECL|function|StandardUniforms
specifier|static
name|TString
name|StandardUniforms
parameter_list|()
block|{
name|TString
name|s
decl_stmt|;
comment|//
comment|// Depth range in window coordinates
comment|//
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"struct gl_DepthRangeParameters {"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"    highp float near;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// n
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"    highp float far;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// f
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"    highp float diff;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// f - n
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"};"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"uniform gl_DepthRangeParameters gl_DepthRange;"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|//============================================================================
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Default precision for vertex shaders.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//============================================================================
end_comment
begin_function
DECL|function|DefaultPrecisionVertex
specifier|static
name|TString
name|DefaultPrecisionVertex
parameter_list|()
block|{
name|TString
name|s
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"precision highp int;"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"precision highp float;"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|//============================================================================
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Default precision for fragment shaders.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//============================================================================
end_comment
begin_function
DECL|function|DefaultPrecisionFragment
specifier|static
name|TString
name|DefaultPrecisionFragment
parameter_list|()
block|{
name|TString
name|s
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|TString
argument_list|(
literal|"precision mediump int;"
argument_list|)
argument_list|)
expr_stmt|;
comment|// No default precision for float in fragment shaders
return|return
name|s
return|;
block|}
end_function
begin_comment
comment|//============================================================================
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Implementation dependent built-in constants.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//============================================================================
end_comment
begin_function
DECL|function|BuiltInConstants
specifier|static
name|TString
name|BuiltInConstants
parameter_list|(
name|ShShaderSpec
name|spec
parameter_list|,
specifier|const
name|ShBuiltInResources
modifier|&
name|resources
parameter_list|)
block|{
name|TStringStream
name|s
decl_stmt|;
name|s
operator|<<
literal|"const int gl_MaxVertexAttribs = "
operator|<<
name|resources
operator|.
name|MaxVertexAttribs
operator|<<
literal|";"
expr_stmt|;
name|s
operator|<<
literal|"const int gl_MaxVertexUniformVectors = "
operator|<<
name|resources
operator|.
name|MaxVertexUniformVectors
operator|<<
literal|";"
expr_stmt|;
name|s
operator|<<
literal|"const int gl_MaxVaryingVectors = "
operator|<<
name|resources
operator|.
name|MaxVaryingVectors
operator|<<
literal|";"
expr_stmt|;
name|s
operator|<<
literal|"const int gl_MaxVertexTextureImageUnits = "
operator|<<
name|resources
operator|.
name|MaxVertexTextureImageUnits
operator|<<
literal|";"
expr_stmt|;
name|s
operator|<<
literal|"const int gl_MaxCombinedTextureImageUnits = "
operator|<<
name|resources
operator|.
name|MaxCombinedTextureImageUnits
operator|<<
literal|";"
expr_stmt|;
name|s
operator|<<
literal|"const int gl_MaxTextureImageUnits = "
operator|<<
name|resources
operator|.
name|MaxTextureImageUnits
operator|<<
literal|";"
expr_stmt|;
name|s
operator|<<
literal|"const int gl_MaxFragmentUniformVectors = "
operator|<<
name|resources
operator|.
name|MaxFragmentUniformVectors
operator|<<
literal|";"
expr_stmt|;
if|if
condition|(
name|spec
operator|!=
name|SH_CSS_SHADERS_SPEC
condition|)
name|s
operator|<<
literal|"const int gl_MaxDrawBuffers = "
operator|<<
name|resources
operator|.
name|MaxDrawBuffers
operator|<<
literal|";"
expr_stmt|;
return|return
name|s
operator|.
name|str
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|initialize
name|void
name|TBuiltIns
operator|::
name|initialize
parameter_list|(
name|ShShaderType
name|type
parameter_list|,
name|ShShaderSpec
name|spec
parameter_list|,
specifier|const
name|ShBuiltInResources
modifier|&
name|resources
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SH_FRAGMENT_SHADER
case|:
name|builtInStrings
operator|.
name|push_back
argument_list|(
name|DefaultPrecisionFragment
argument_list|()
argument_list|)
expr_stmt|;
name|builtInStrings
operator|.
name|push_back
argument_list|(
name|BuiltInFunctionsCommon
argument_list|(
name|resources
argument_list|)
argument_list|)
expr_stmt|;
name|builtInStrings
operator|.
name|push_back
argument_list|(
name|BuiltInFunctionsFragment
argument_list|(
name|resources
argument_list|)
argument_list|)
expr_stmt|;
name|builtInStrings
operator|.
name|push_back
argument_list|(
name|StandardUniforms
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SH_VERTEX_SHADER
case|:
name|builtInStrings
operator|.
name|push_back
argument_list|(
name|DefaultPrecisionVertex
argument_list|()
argument_list|)
expr_stmt|;
name|builtInStrings
operator|.
name|push_back
argument_list|(
name|BuiltInFunctionsCommon
argument_list|(
name|resources
argument_list|)
argument_list|)
expr_stmt|;
name|builtInStrings
operator|.
name|push_back
argument_list|(
name|BuiltInFunctionsVertex
argument_list|(
name|resources
argument_list|)
argument_list|)
expr_stmt|;
name|builtInStrings
operator|.
name|push_back
argument_list|(
name|StandardUniforms
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|assert
argument_list|(
literal|false
operator|&&
literal|"Language not supported"
argument_list|)
expr_stmt|;
block|}
name|builtInStrings
operator|.
name|push_back
argument_list|(
name|BuiltInConstants
argument_list|(
name|spec
argument_list|,
name|resources
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|IdentifyBuiltIns
name|void
name|IdentifyBuiltIns
parameter_list|(
name|ShShaderType
name|type
parameter_list|,
name|ShShaderSpec
name|spec
parameter_list|,
specifier|const
name|ShBuiltInResources
modifier|&
name|resources
parameter_list|,
name|TSymbolTable
modifier|&
name|symbolTable
parameter_list|)
block|{
comment|//
comment|// First, insert some special built-in variables that are not in
comment|// the built-in header files.
comment|//
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SH_FRAGMENT_SHADER
case|:
name|symbolTable
operator|.
name|insert
argument_list|(
operator|*
operator|new
name|TVariable
argument_list|(
name|NewPoolTString
argument_list|(
literal|"gl_FragCoord"
argument_list|)
argument_list|,
name|TType
argument_list|(
name|EbtFloat
argument_list|,
name|EbpMedium
argument_list|,
name|EvqFragCoord
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|insert
argument_list|(
operator|*
operator|new
name|TVariable
argument_list|(
name|NewPoolTString
argument_list|(
literal|"gl_FrontFacing"
argument_list|)
argument_list|,
name|TType
argument_list|(
name|EbtBool
argument_list|,
name|EbpUndefined
argument_list|,
name|EvqFrontFacing
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|insert
argument_list|(
operator|*
operator|new
name|TVariable
argument_list|(
name|NewPoolTString
argument_list|(
literal|"gl_PointCoord"
argument_list|)
argument_list|,
name|TType
argument_list|(
name|EbtFloat
argument_list|,
name|EbpMedium
argument_list|,
name|EvqPointCoord
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// In CSS Shaders, gl_FragColor, gl_FragData, and gl_MaxDrawBuffers are not available.
comment|// Instead, css_MixColor and css_ColorMatrix are available.
comment|//
if|if
condition|(
name|spec
operator|!=
name|SH_CSS_SHADERS_SPEC
condition|)
block|{
name|symbolTable
operator|.
name|insert
argument_list|(
operator|*
operator|new
name|TVariable
argument_list|(
name|NewPoolTString
argument_list|(
literal|"gl_FragColor"
argument_list|)
argument_list|,
name|TType
argument_list|(
name|EbtFloat
argument_list|,
name|EbpMedium
argument_list|,
name|EvqFragColor
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|insert
argument_list|(
operator|*
operator|new
name|TVariable
argument_list|(
name|NewPoolTString
argument_list|(
literal|"gl_FragData[gl_MaxDrawBuffers]"
argument_list|)
argument_list|,
name|TType
argument_list|(
name|EbtFloat
argument_list|,
name|EbpMedium
argument_list|,
name|EvqFragData
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|symbolTable
operator|.
name|insert
argument_list|(
operator|*
operator|new
name|TVariable
argument_list|(
name|NewPoolTString
argument_list|(
literal|"css_MixColor"
argument_list|)
argument_list|,
name|TType
argument_list|(
name|EbtFloat
argument_list|,
name|EbpMedium
argument_list|,
name|EvqGlobal
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|insert
argument_list|(
operator|*
operator|new
name|TVariable
argument_list|(
name|NewPoolTString
argument_list|(
literal|"css_ColorMatrix"
argument_list|)
argument_list|,
name|TType
argument_list|(
name|EbtFloat
argument_list|,
name|EbpMedium
argument_list|,
name|EvqGlobal
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SH_VERTEX_SHADER
case|:
name|symbolTable
operator|.
name|insert
argument_list|(
operator|*
operator|new
name|TVariable
argument_list|(
name|NewPoolTString
argument_list|(
literal|"gl_Position"
argument_list|)
argument_list|,
name|TType
argument_list|(
name|EbtFloat
argument_list|,
name|EbpHigh
argument_list|,
name|EvqPosition
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|insert
argument_list|(
operator|*
operator|new
name|TVariable
argument_list|(
name|NewPoolTString
argument_list|(
literal|"gl_PointSize"
argument_list|)
argument_list|,
name|TType
argument_list|(
name|EbtFloat
argument_list|,
name|EbpMedium
argument_list|,
name|EvqPointSize
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|assert
argument_list|(
literal|false
operator|&&
literal|"Language not supported"
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Next, identify which built-ins from the already loaded headers have
comment|// a mapping to an operator.  Those that are not identified as such are
comment|// expected to be resolved through a library of functions, versus as
comment|// operations.
comment|//
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"not"
argument_list|,
name|EOpVectorLogicalNot
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"matrixCompMult"
argument_list|,
name|EOpMul
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"equal"
argument_list|,
name|EOpVectorEqual
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"notEqual"
argument_list|,
name|EOpVectorNotEqual
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"lessThan"
argument_list|,
name|EOpLessThan
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"greaterThan"
argument_list|,
name|EOpGreaterThan
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"lessThanEqual"
argument_list|,
name|EOpLessThanEqual
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"greaterThanEqual"
argument_list|,
name|EOpGreaterThanEqual
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"radians"
argument_list|,
name|EOpRadians
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"degrees"
argument_list|,
name|EOpDegrees
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"sin"
argument_list|,
name|EOpSin
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"cos"
argument_list|,
name|EOpCos
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"tan"
argument_list|,
name|EOpTan
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"asin"
argument_list|,
name|EOpAsin
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"acos"
argument_list|,
name|EOpAcos
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"atan"
argument_list|,
name|EOpAtan
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"pow"
argument_list|,
name|EOpPow
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"exp2"
argument_list|,
name|EOpExp2
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"log"
argument_list|,
name|EOpLog
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"exp"
argument_list|,
name|EOpExp
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"log2"
argument_list|,
name|EOpLog2
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"sqrt"
argument_list|,
name|EOpSqrt
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"inversesqrt"
argument_list|,
name|EOpInverseSqrt
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"abs"
argument_list|,
name|EOpAbs
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"sign"
argument_list|,
name|EOpSign
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"floor"
argument_list|,
name|EOpFloor
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"ceil"
argument_list|,
name|EOpCeil
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"fract"
argument_list|,
name|EOpFract
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"mod"
argument_list|,
name|EOpMod
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"min"
argument_list|,
name|EOpMin
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"max"
argument_list|,
name|EOpMax
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"clamp"
argument_list|,
name|EOpClamp
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"mix"
argument_list|,
name|EOpMix
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"step"
argument_list|,
name|EOpStep
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"smoothstep"
argument_list|,
name|EOpSmoothStep
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"length"
argument_list|,
name|EOpLength
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"distance"
argument_list|,
name|EOpDistance
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"dot"
argument_list|,
name|EOpDot
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"cross"
argument_list|,
name|EOpCross
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"normalize"
argument_list|,
name|EOpNormalize
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"faceforward"
argument_list|,
name|EOpFaceForward
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"reflect"
argument_list|,
name|EOpReflect
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"refract"
argument_list|,
name|EOpRefract
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"any"
argument_list|,
name|EOpAny
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"all"
argument_list|,
name|EOpAll
argument_list|)
expr_stmt|;
comment|// Map language-specific operators.
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SH_VERTEX_SHADER
case|:
break|break;
case|case
name|SH_FRAGMENT_SHADER
case|:
if|if
condition|(
name|resources
operator|.
name|OES_standard_derivatives
condition|)
block|{
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"dFdx"
argument_list|,
name|EOpDFdx
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"dFdy"
argument_list|,
name|EOpDFdy
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToOperator
argument_list|(
literal|"fwidth"
argument_list|,
name|EOpFwidth
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToExtension
argument_list|(
literal|"dFdx"
argument_list|,
literal|"GL_OES_standard_derivatives"
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToExtension
argument_list|(
literal|"dFdy"
argument_list|,
literal|"GL_OES_standard_derivatives"
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|relateToExtension
argument_list|(
literal|"fwidth"
argument_list|,
literal|"GL_OES_standard_derivatives"
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
comment|// Finally add resource-specific variables.
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SH_FRAGMENT_SHADER
case|:
if|if
condition|(
name|spec
operator|!=
name|SH_CSS_SHADERS_SPEC
condition|)
block|{
comment|// Set up gl_FragData.  The array size.
name|TType
name|fragData
argument_list|(
name|EbtFloat
argument_list|,
name|EbpMedium
argument_list|,
name|EvqFragData
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|fragData
operator|.
name|setArraySize
argument_list|(
name|resources
operator|.
name|MaxDrawBuffers
argument_list|)
expr_stmt|;
name|symbolTable
operator|.
name|insert
argument_list|(
operator|*
operator|new
name|TVariable
argument_list|(
name|NewPoolTString
argument_list|(
literal|"gl_FragData"
argument_list|)
argument_list|,
name|fragData
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
end_function
begin_function
DECL|function|InitExtensionBehavior
name|void
name|InitExtensionBehavior
parameter_list|(
specifier|const
name|ShBuiltInResources
modifier|&
name|resources
parameter_list|,
name|TExtensionBehavior
modifier|&
name|extBehavior
parameter_list|)
block|{
if|if
condition|(
name|resources
operator|.
name|OES_standard_derivatives
condition|)
name|extBehavior
index|[
literal|"GL_OES_standard_derivatives"
index|]
operator|=
name|EBhUndefined
expr_stmt|;
if|if
condition|(
name|resources
operator|.
name|OES_EGL_image_external
condition|)
name|extBehavior
index|[
literal|"GL_OES_EGL_image_external"
index|]
operator|=
name|EBhUndefined
expr_stmt|;
if|if
condition|(
name|resources
operator|.
name|ARB_texture_rectangle
condition|)
name|extBehavior
index|[
literal|"GL_ARB_texture_rectangle"
index|]
operator|=
name|EBhUndefined
expr_stmt|;
block|}
end_function
end_unit
