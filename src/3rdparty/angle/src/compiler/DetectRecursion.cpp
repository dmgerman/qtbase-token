begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2011 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/DetectRecursion.h"
end_include
begin_constructor
DECL|function|FunctionNode
name|DetectRecursion
operator|::
name|FunctionNode
operator|::
name|FunctionNode
parameter_list|(
specifier|const
name|TString
modifier|&
name|fname
parameter_list|)
member_init_list|:
name|name
argument_list|(
name|fname
argument_list|)
member_init_list|,
name|visit
argument_list|(
name|PreVisit
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|getName
specifier|const
name|TString
modifier|&
name|DetectRecursion
operator|::
name|FunctionNode
operator|::
name|getName
parameter_list|()
specifier|const
block|{
return|return
name|name
return|;
block|}
end_function
begin_function
DECL|function|addCallee
name|void
name|DetectRecursion
operator|::
name|FunctionNode
operator|::
name|addCallee
parameter_list|(
name|DetectRecursion
operator|::
name|FunctionNode
modifier|*
name|callee
parameter_list|)
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callees
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|callees
index|[
name|i
index|]
operator|==
name|callee
condition|)
return|return;
block|}
name|callees
operator|.
name|push_back
argument_list|(
name|callee
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detectRecursion
name|bool
name|DetectRecursion
operator|::
name|FunctionNode
operator|::
name|detectRecursion
parameter_list|()
block|{
name|ASSERT
argument_list|(
name|visit
operator|==
name|PreVisit
argument_list|)
expr_stmt|;
name|visit
operator|=
name|InVisit
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callees
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|callees
index|[
name|i
index|]
operator|->
name|visit
condition|)
block|{
case|case
name|InVisit
case|:
comment|// cycle detected, i.e., recursion detected.
return|return
literal|true
return|;
case|case
name|PostVisit
case|:
break|break;
case|case
name|PreVisit
case|:
block|{
name|bool
name|recursion
init|=
name|callees
index|[
name|i
index|]
operator|->
name|detectRecursion
argument_list|()
decl_stmt|;
if|if
condition|(
name|recursion
condition|)
return|return
literal|true
return|;
break|break;
block|}
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|visit
operator|=
name|PostVisit
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_constructor
DECL|function|DetectRecursion
name|DetectRecursion
operator|::
name|DetectRecursion
parameter_list|()
member_init_list|:
name|currentFunction
argument_list|(
name|NULL
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~DetectRecursion
name|DetectRecursion
operator|::
name|~
name|DetectRecursion
parameter_list|()
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|functions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
operator|delete
name|functions
index|[
name|i
index|]
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|visitAggregate
name|bool
name|DetectRecursion
operator|::
name|visitAggregate
parameter_list|(
name|Visit
name|visit
parameter_list|,
name|TIntermAggregate
modifier|*
name|node
parameter_list|)
block|{
switch|switch
condition|(
name|node
operator|->
name|getOp
argument_list|()
condition|)
block|{
case|case
name|EOpPrototype
case|:
comment|// Function declaration.
comment|// Don't add FunctionNode here because node->getName() is the
comment|// unmangled function name.
break|break;
case|case
name|EOpFunction
case|:
block|{
comment|// Function definition.
if|if
condition|(
name|visit
operator|==
name|PreVisit
condition|)
block|{
name|currentFunction
operator|=
name|findFunctionByName
argument_list|(
name|node
operator|->
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentFunction
operator|==
name|NULL
condition|)
block|{
name|currentFunction
operator|=
operator|new
name|FunctionNode
argument_list|(
name|node
operator|->
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|functions
operator|.
name|push_back
argument_list|(
name|currentFunction
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|EOpFunctionCall
case|:
block|{
comment|// Function call.
if|if
condition|(
name|visit
operator|==
name|PreVisit
condition|)
block|{
name|ASSERT
argument_list|(
name|currentFunction
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|FunctionNode
modifier|*
name|func
init|=
name|findFunctionByName
argument_list|(
name|node
operator|->
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|==
name|NULL
condition|)
block|{
name|func
operator|=
operator|new
name|FunctionNode
argument_list|(
name|node
operator|->
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|functions
operator|.
name|push_back
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
name|currentFunction
operator|->
name|addCallee
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
break|break;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|detectRecursion
name|DetectRecursion
operator|::
name|ErrorCode
name|DetectRecursion
operator|::
name|detectRecursion
parameter_list|()
block|{
name|FunctionNode
modifier|*
decl|main
init|=
name|findFunctionByName
argument_list|(
literal|"main("
argument_list|)
decl_stmt|;
if|if
condition|(
expr|main
operator|==
name|NULL
condition|)
return|return
name|kErrorMissingMain
return|;
if|if
condition|(
expr|main
operator|->
name|detectRecursion
argument_list|()
condition|)
return|return
name|kErrorRecursion
return|;
return|return
name|kErrorNone
return|;
block|}
end_function
begin_function
DECL|function|findFunctionByName
name|DetectRecursion
operator|::
name|FunctionNode
modifier|*
name|DetectRecursion
operator|::
name|findFunctionByName
parameter_list|(
specifier|const
name|TString
modifier|&
name|name
parameter_list|)
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|functions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|functions
index|[
name|i
index|]
operator|->
name|getName
argument_list|()
operator|==
name|name
condition|)
return|return
name|functions
index|[
name|i
index|]
return|;
block|}
return|return
name|NULL
return|;
block|}
end_function
end_unit
