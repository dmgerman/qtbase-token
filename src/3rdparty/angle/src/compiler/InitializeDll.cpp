begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/InitializeDll.h"
end_include
begin_include
include|#
directive|include
file|"compiler/InitializeGlobals.h"
end_include
begin_include
include|#
directive|include
file|"compiler/InitializeParseContext.h"
end_include
begin_include
include|#
directive|include
file|"compiler/osinclude.h"
end_include
begin_decl_stmt
DECL|variable|ThreadInitializeIndex
name|OS_TLSIndex
name|ThreadInitializeIndex
init|=
name|OS_INVALID_TLS_INDEX
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|InitProcess
name|bool
name|InitProcess
parameter_list|()
block|{
if|if
condition|(
name|ThreadInitializeIndex
operator|!=
name|OS_INVALID_TLS_INDEX
condition|)
block|{
comment|//
comment|// Function is re-entrant.
comment|//
return|return
literal|true
return|;
block|}
name|ThreadInitializeIndex
operator|=
name|OS_AllocTLSIndex
argument_list|()
expr_stmt|;
if|if
condition|(
name|ThreadInitializeIndex
operator|==
name|OS_INVALID_TLS_INDEX
condition|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"InitProcess(): Failed to allocate TLS area for init flag"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|InitializePoolIndex
argument_list|()
condition|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"InitProcess(): Failed to initalize global pool"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|InitializeParseContextIndex
argument_list|()
condition|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"InitProcess(): Failed to initalize parse context"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|InitThread
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|DetachProcess
name|bool
name|DetachProcess
parameter_list|()
block|{
name|bool
name|success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|ThreadInitializeIndex
operator|==
name|OS_INVALID_TLS_INDEX
condition|)
return|return
literal|true
return|;
name|success
operator|=
name|DetachThread
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|FreeParseContextIndex
argument_list|()
condition|)
name|success
operator|=
literal|false
expr_stmt|;
name|FreePoolIndex
argument_list|()
expr_stmt|;
name|OS_FreeTLSIndex
argument_list|(
name|ThreadInitializeIndex
argument_list|)
expr_stmt|;
name|ThreadInitializeIndex
operator|=
name|OS_INVALID_TLS_INDEX
expr_stmt|;
return|return
name|success
return|;
block|}
end_function
begin_function
DECL|function|InitThread
name|bool
name|InitThread
parameter_list|()
block|{
comment|//
comment|// This function is re-entrant
comment|//
if|if
condition|(
name|ThreadInitializeIndex
operator|==
name|OS_INVALID_TLS_INDEX
condition|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"InitThread(): Process hasn't been initalised."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|OS_GetTLSValue
argument_list|(
name|ThreadInitializeIndex
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|true
return|;
name|InitializeGlobalPools
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|InitializeGlobalParseContext
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|OS_SetTLSValue
argument_list|(
name|ThreadInitializeIndex
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|1
argument_list|)
condition|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"InitThread(): Unable to set init flag."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|DetachThread
name|bool
name|DetachThread
parameter_list|()
block|{
name|bool
name|success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|ThreadInitializeIndex
operator|==
name|OS_INVALID_TLS_INDEX
condition|)
return|return
literal|true
return|;
comment|//
comment|// Function is re-entrant and this thread may not have been initalised.
comment|//
if|if
condition|(
name|OS_GetTLSValue
argument_list|(
name|ThreadInitializeIndex
argument_list|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|OS_SetTLSValue
argument_list|(
name|ThreadInitializeIndex
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|0
argument_list|)
condition|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"DetachThread(): Unable to clear init flag."
argument_list|)
expr_stmt|;
name|success
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|FreeParseContext
argument_list|()
condition|)
name|success
operator|=
literal|false
expr_stmt|;
name|FreeGlobalPools
argument_list|()
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
end_function
end_unit
