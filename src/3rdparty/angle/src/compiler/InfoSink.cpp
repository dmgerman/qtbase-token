begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2002-2010 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/InfoSink.h"
end_include
begin_function
DECL|function|prefix
name|void
name|TInfoSinkBase
operator|::
name|prefix
parameter_list|(
name|TPrefixType
name|p
parameter_list|)
block|{
switch|switch
condition|(
name|p
condition|)
block|{
case|case
name|EPrefixNone
case|:
break|break;
case|case
name|EPrefixWarning
case|:
name|sink
operator|.
name|append
argument_list|(
literal|"WARNING: "
argument_list|)
expr_stmt|;
break|break;
case|case
name|EPrefixError
case|:
name|sink
operator|.
name|append
argument_list|(
literal|"ERROR: "
argument_list|)
expr_stmt|;
break|break;
case|case
name|EPrefixInternalError
case|:
name|sink
operator|.
name|append
argument_list|(
literal|"INTERNAL ERROR: "
argument_list|)
expr_stmt|;
break|break;
case|case
name|EPrefixUnimplemented
case|:
name|sink
operator|.
name|append
argument_list|(
literal|"UNIMPLEMENTED: "
argument_list|)
expr_stmt|;
break|break;
case|case
name|EPrefixNote
case|:
name|sink
operator|.
name|append
argument_list|(
literal|"NOTE: "
argument_list|)
expr_stmt|;
break|break;
default|default:
name|sink
operator|.
name|append
argument_list|(
literal|"UNKOWN ERROR: "
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|location
name|void
name|TInfoSinkBase
operator|::
name|location
parameter_list|(
name|int
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|TPersistStringStream
name|stream
decl_stmt|;
if|if
condition|(
name|line
condition|)
name|stream
operator|<<
name|file
operator|<<
literal|":"
operator|<<
name|line
expr_stmt|;
else|else
name|stream
operator|<<
name|file
operator|<<
literal|":? "
expr_stmt|;
name|stream
operator|<<
literal|": "
expr_stmt|;
name|sink
operator|.
name|append
argument_list|(
name|stream
operator|.
name|str
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|location
name|void
name|TInfoSinkBase
operator|::
name|location
parameter_list|(
specifier|const
name|TSourceLoc
modifier|&
name|loc
parameter_list|)
block|{
name|location
argument_list|(
name|loc
operator|.
name|first_file
argument_list|,
name|loc
operator|.
name|first_line
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|message
name|void
name|TInfoSinkBase
operator|::
name|message
parameter_list|(
name|TPrefixType
name|p
parameter_list|,
specifier|const
name|TSourceLoc
modifier|&
name|loc
parameter_list|,
specifier|const
name|char
modifier|*
name|m
parameter_list|)
block|{
name|prefix
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|location
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|sink
operator|.
name|append
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|sink
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
