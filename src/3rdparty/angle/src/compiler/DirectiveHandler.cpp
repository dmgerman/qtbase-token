begin_unit
begin_comment
comment|//
end_comment
begin_comment
comment|// Copyright (c) 2012 The ANGLE Project Authors. All rights reserved.
end_comment
begin_comment
comment|// Use of this source code is governed by a BSD-style license that can be
end_comment
begin_comment
comment|// found in the LICENSE file.
end_comment
begin_comment
comment|//
end_comment
begin_include
include|#
directive|include
file|"compiler/DirectiveHandler.h"
end_include
begin_include
include|#
directive|include
file|<sstream>
end_include
begin_include
include|#
directive|include
file|"compiler/debug.h"
end_include
begin_include
include|#
directive|include
file|"compiler/Diagnostics.h"
end_include
begin_function
DECL|function|getBehavior
specifier|static
name|TBehavior
name|getBehavior
parameter_list|(
specifier|const
name|std
operator|::
name|string
modifier|&
name|str
parameter_list|)
block|{
specifier|static
specifier|const
name|std
operator|::
name|string
name|kRequire
argument_list|(
literal|"require"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|std
operator|::
name|string
name|kEnable
argument_list|(
literal|"enable"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|std
operator|::
name|string
name|kDisable
argument_list|(
literal|"disable"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|std
operator|::
name|string
name|kWarn
argument_list|(
literal|"warn"
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|==
name|kRequire
condition|)
return|return
name|EBhRequire
return|;
elseif|else
if|if
condition|(
name|str
operator|==
name|kEnable
condition|)
return|return
name|EBhEnable
return|;
elseif|else
if|if
condition|(
name|str
operator|==
name|kDisable
condition|)
return|return
name|EBhDisable
return|;
elseif|else
if|if
condition|(
name|str
operator|==
name|kWarn
condition|)
return|return
name|EBhWarn
return|;
return|return
name|EBhUndefined
return|;
block|}
end_function
begin_constructor
DECL|function|TDirectiveHandler
name|TDirectiveHandler
operator|::
name|TDirectiveHandler
parameter_list|(
name|TExtensionBehavior
modifier|&
name|extBehavior
parameter_list|,
name|TDiagnostics
modifier|&
name|diagnostics
parameter_list|)
member_init_list|:
name|mExtensionBehavior
argument_list|(
name|extBehavior
argument_list|)
member_init_list|,
name|mDiagnostics
argument_list|(
name|diagnostics
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~TDirectiveHandler
name|TDirectiveHandler
operator|::
name|~
name|TDirectiveHandler
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|handleError
name|void
name|TDirectiveHandler
operator|::
name|handleError
parameter_list|(
specifier|const
name|pp
operator|::
name|SourceLocation
modifier|&
name|loc
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|msg
parameter_list|)
block|{
name|mDiagnostics
operator|.
name|writeInfo
argument_list|(
name|pp
operator|::
name|Diagnostics
operator|::
name|ERROR
argument_list|,
name|loc
argument_list|,
name|msg
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handlePragma
name|void
name|TDirectiveHandler
operator|::
name|handlePragma
parameter_list|(
specifier|const
name|pp
operator|::
name|SourceLocation
modifier|&
name|loc
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|name
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|value
parameter_list|)
block|{
specifier|static
specifier|const
name|std
operator|::
name|string
name|kSTDGL
argument_list|(
literal|"STDGL"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|std
operator|::
name|string
name|kOptimize
argument_list|(
literal|"optimize"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|std
operator|::
name|string
name|kDebug
argument_list|(
literal|"debug"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|std
operator|::
name|string
name|kOn
argument_list|(
literal|"on"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|std
operator|::
name|string
name|kOff
argument_list|(
literal|"off"
argument_list|)
decl_stmt|;
name|bool
name|invalidValue
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|kSTDGL
condition|)
block|{
comment|// The STDGL pragma is used to reserve pragmas for use by future
comment|// revisions of GLSL. Ignore it.
return|return;
block|}
elseif|else
if|if
condition|(
name|name
operator|==
name|kOptimize
condition|)
block|{
if|if
condition|(
name|value
operator|==
name|kOn
condition|)
name|mPragma
operator|.
name|optimize
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|==
name|kOff
condition|)
name|mPragma
operator|.
name|optimize
operator|=
literal|false
expr_stmt|;
else|else
name|invalidValue
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|==
name|kDebug
condition|)
block|{
if|if
condition|(
name|value
operator|==
name|kOn
condition|)
name|mPragma
operator|.
name|debug
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|==
name|kOff
condition|)
name|mPragma
operator|.
name|debug
operator|=
literal|false
expr_stmt|;
else|else
name|invalidValue
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|mDiagnostics
operator|.
name|report
argument_list|(
name|pp
operator|::
name|Diagnostics
operator|::
name|UNRECOGNIZED_PRAGMA
argument_list|,
name|loc
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|invalidValue
condition|)
name|mDiagnostics
operator|.
name|writeInfo
argument_list|(
name|pp
operator|::
name|Diagnostics
operator|::
name|ERROR
argument_list|,
name|loc
argument_list|,
literal|"invalid pragma value"
argument_list|,
name|value
argument_list|,
literal|"'on' or 'off' expected"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleExtension
name|void
name|TDirectiveHandler
operator|::
name|handleExtension
parameter_list|(
specifier|const
name|pp
operator|::
name|SourceLocation
modifier|&
name|loc
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|name
parameter_list|,
specifier|const
name|std
operator|::
name|string
modifier|&
name|behavior
parameter_list|)
block|{
specifier|static
specifier|const
name|std
operator|::
name|string
name|kExtAll
argument_list|(
literal|"all"
argument_list|)
decl_stmt|;
name|TBehavior
name|behaviorVal
init|=
name|getBehavior
argument_list|(
name|behavior
argument_list|)
decl_stmt|;
if|if
condition|(
name|behaviorVal
operator|==
name|EBhUndefined
condition|)
block|{
name|mDiagnostics
operator|.
name|writeInfo
argument_list|(
name|pp
operator|::
name|Diagnostics
operator|::
name|ERROR
argument_list|,
name|loc
argument_list|,
literal|"behavior"
argument_list|,
name|name
argument_list|,
literal|"invalid"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|name
operator|==
name|kExtAll
condition|)
block|{
if|if
condition|(
name|behaviorVal
operator|==
name|EBhRequire
condition|)
block|{
name|mDiagnostics
operator|.
name|writeInfo
argument_list|(
name|pp
operator|::
name|Diagnostics
operator|::
name|ERROR
argument_list|,
name|loc
argument_list|,
literal|"extension"
argument_list|,
name|name
argument_list|,
literal|"cannot have 'require' behavior"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|behaviorVal
operator|==
name|EBhEnable
condition|)
block|{
name|mDiagnostics
operator|.
name|writeInfo
argument_list|(
name|pp
operator|::
name|Diagnostics
operator|::
name|ERROR
argument_list|,
name|loc
argument_list|,
literal|"extension"
argument_list|,
name|name
argument_list|,
literal|"cannot have 'enable' behavior"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|TExtensionBehavior
operator|::
name|iterator
name|iter
init|=
name|mExtensionBehavior
operator|.
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|mExtensionBehavior
operator|.
name|end
argument_list|()
condition|;
operator|++
name|iter
control|)
name|iter
operator|->
name|second
operator|=
name|behaviorVal
expr_stmt|;
block|}
return|return;
block|}
name|TExtensionBehavior
operator|::
name|iterator
name|iter
init|=
name|mExtensionBehavior
operator|.
name|find
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|iter
operator|!=
name|mExtensionBehavior
operator|.
name|end
argument_list|()
condition|)
block|{
name|iter
operator|->
name|second
operator|=
name|behaviorVal
expr_stmt|;
return|return;
block|}
name|pp
operator|::
name|Diagnostics
operator|::
name|Severity
name|severity
init|=
name|pp
operator|::
name|Diagnostics
operator|::
name|ERROR
decl_stmt|;
switch|switch
condition|(
name|behaviorVal
condition|)
block|{
case|case
name|EBhRequire
case|:
name|severity
operator|=
name|pp
operator|::
name|Diagnostics
operator|::
name|ERROR
expr_stmt|;
break|break;
case|case
name|EBhEnable
case|:
case|case
name|EBhWarn
case|:
case|case
name|EBhDisable
case|:
name|severity
operator|=
name|pp
operator|::
name|Diagnostics
operator|::
name|WARNING
expr_stmt|;
break|break;
default|default:
name|UNREACHABLE
argument_list|()
expr_stmt|;
break|break;
block|}
name|mDiagnostics
operator|.
name|writeInfo
argument_list|(
name|severity
argument_list|,
name|loc
argument_list|,
literal|"extension"
argument_list|,
name|name
argument_list|,
literal|"is not supported"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleVersion
name|void
name|TDirectiveHandler
operator|::
name|handleVersion
parameter_list|(
specifier|const
name|pp
operator|::
name|SourceLocation
modifier|&
name|loc
parameter_list|,
name|int
name|version
parameter_list|)
block|{
specifier|static
specifier|const
name|int
name|kVersion
init|=
literal|100
decl_stmt|;
if|if
condition|(
name|version
operator|!=
name|kVersion
condition|)
block|{
name|std
operator|::
name|stringstream
name|stream
decl_stmt|;
name|stream
operator|<<
name|version
expr_stmt|;
name|std
operator|::
name|string
name|str
init|=
name|stream
operator|.
name|str
argument_list|()
decl_stmt|;
name|mDiagnostics
operator|.
name|writeInfo
argument_list|(
name|pp
operator|::
name|Diagnostics
operator|::
name|ERROR
argument_list|,
name|loc
argument_list|,
literal|"version number"
argument_list|,
name|str
argument_list|,
literal|"not supported"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
end_unit
